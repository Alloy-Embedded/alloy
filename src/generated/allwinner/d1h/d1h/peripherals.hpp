/// Auto-generated code for D1H
/// Generated by Alloy Code Generator
/// Source: allwinner_d1.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:01:02
#ifndef ALLOY_GENERATED_D1H_PERIPHERALS_HPP
#define ALLOY_GENERATED_D1H_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::d1h {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_ccu = true;
    constexpr uint32_t num_ccu_instances = 1;
    constexpr bool has_sys = true;
    constexpr uint32_t num_sys_instances = 1;
    constexpr bool has_riscv = true;
    constexpr uint32_t num_riscv_instances = 1;
    constexpr bool has_clint = true;
    constexpr uint32_t num_clint_instances = 1;
    constexpr bool has_tim = true;
    constexpr uint32_t num_tim_instances = 2;
    constexpr bool has_plic = true;
    constexpr uint32_t num_plic_instances = 1;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 1;
    constexpr bool has_thc = true;
    constexpr uint32_t num_thc_instances = 1;
    constexpr bool has_iommu = true;
    constexpr uint32_t num_iommu_instances = 1;
    constexpr bool has_dsp = true;
    constexpr uint32_t num_dsp_instances = 1;
    constexpr bool has_risc = true;
    constexpr uint32_t num_risc_instances = 1;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 3;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;
    constexpr bool has_tcon = true;
    constexpr uint32_t num_tcon_instances = 2;
    constexpr bool has_tve = true;
    constexpr uint32_t num_tve_instances = 2;
    constexpr bool has_csic = true;
    constexpr uint32_t num_csic_instances = 1;
    constexpr bool has_tvd = true;
    constexpr uint32_t num_tvd_instances = 1;
    constexpr bool has_tvd0 = true;
    constexpr uint32_t num_tvd0_instances = 1;
    constexpr bool has_smhc = true;
    constexpr uint32_t num_smhc_instances = 1;
    constexpr bool has_i2s = true;
    constexpr uint32_t num_i2s_instances = 1;
    constexpr bool has_dmic = true;
    constexpr uint32_t num_dmic_instances = 1;
    constexpr bool has_owa = true;
    constexpr uint32_t num_owa_instances = 1;
    constexpr bool has_audiocodec = true;
    constexpr uint32_t num_audiocodec_instances = 1;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 1;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 1;
    constexpr bool has_usb = true;
    constexpr uint32_t num_usb_instances = 2;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 3;
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 2;
    constexpr bool has_eth = true;
    constexpr uint32_t num_eth_instances = 1;
    constexpr bool has_cir = true;
    constexpr uint32_t num_cir_instances = 2;
    constexpr bool has_ce = true;
    constexpr uint32_t num_ce_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct ccu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sys_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct riscv_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct clint_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tim_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct plic_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct thc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct iommu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dsp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct risc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tcon_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct tve_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct csic_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tvd_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tvd0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct smhc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct i2s_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dmic_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct owa_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct audiocodec_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usb_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct eth_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct cir_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct ce_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 1;
    constexpr uint32_t max_gpio_pins = 16;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_uart[%s] = true;
}

// ============================================================================
// CCU Peripheral
// ============================================================================

namespace ccu {
    /// Base addresses
    constexpr uint32_t CCU_BASE = 0x02001000;

    /// CCU Register structure
    struct Registers {
        volatile uint32_t PLL_CPU_CTRL;  ///< Offset: 0x00 - PLL_CPU Control Register
        volatile uint32_t PLL_DDR_CTRL;  ///< Offset: 0x10 - PLL_DDR Control Register
        volatile uint32_t PLL_PERI_CTRL;  ///< Offset: 0x20 - PLL_PERI Control Register
        volatile uint32_t PLL_VIDEO0_CTRL;  ///< Offset: 0x40 - PLL_VIDEO0 Control Register
        volatile uint32_t PLL_VIDEO1_CTRL;  ///< Offset: 0x48 - PLL_VIDEO1 Control Register
        volatile uint32_t PLL_VE_CTRL;  ///< Offset: 0x58 - PLL_VE Control Register
        volatile uint32_t PLL_AUDIO0_CTRL;  ///< Offset: 0x78 - PLL_AUDIO0 Control Register
        volatile uint32_t PLL_AUDIO1_CTRL;  ///< Offset: 0x80 - PLL_AUDIO1 Control Register
        volatile uint32_t PLL_DDR_PAT0_CTRL;  ///< Offset: 0x110 - PLL_DDR Pattern0 Control Register
        volatile uint32_t PLL_DDR_PAT1_CTRL;  ///< Offset: 0x114 - PLL_DDR Pattern1 Control Register
        volatile uint32_t PLL_PERI_PAT0_CTRL;  ///< Offset: 0x120 - PLL_PERI Pattern0 Control Register
        volatile uint32_t PLL_PERI_PAT1_CTRL;  ///< Offset: 0x124 - PLL_PERI Pattern1 Control Register
        volatile uint32_t PLL_VIDEO0_PAT0_CTRL;  ///< Offset: 0x140 - PLL_VIDEO0 Pattern0 Control Register
        volatile uint32_t PLL_VIDEO0_PAT1_CTRL;  ///< Offset: 0x144 - PLL_VIDEO0 Pattern1 Control Register
        volatile uint32_t PLL_VIDEO1_PAT0_CTRL;  ///< Offset: 0x148 - PLL_VIDEO1 Pattern0 Control Register
        volatile uint32_t PLL_VIDEO1_PAT1_CTRL;  ///< Offset: 0x14C - PLL_VIDEO1 Pattern1 Control Register
        volatile uint32_t PLL_VE_PAT0_CTRL;  ///< Offset: 0x158 - PLL_VE Pattern0 Control Register
        volatile uint32_t PLL_VE_PAT1_CTRL;  ///< Offset: 0x15C - PLL_VE Pattern1 Control Register
        volatile uint32_t PLL_AUDIO0_PAT0_CTRL;  ///< Offset: 0x178 - PLL_AUDIO0 Pattern0 Control Register
        volatile uint32_t PLL_AUDIO0_PAT1_CTRL;  ///< Offset: 0x17C - PLL_AUDIO0 Pattern1 Control Register
        volatile uint32_t PLL_AUDIO1_PAT0_CTRL;  ///< Offset: 0x180 - PLL_AUDIO1 Pattern0 Control Register
        volatile uint32_t PLL_AUDIO1_PAT1_CTRL;  ///< Offset: 0x184 - PLL_AUDIO1 Pattern1 Control Register
        volatile uint32_t PLL_CPU_BIAS;  ///< Offset: 0x300 - PLL_CPU Bias Register
        volatile uint32_t PLL_DDR_BIAS;  ///< Offset: 0x310 - PLL_DDR Bias Register
        volatile uint32_t PLL_PERI_BIAS;  ///< Offset: 0x320 - PLL_PERI Bias Register
        volatile uint32_t PLL_VIDEO0_BIAS;  ///< Offset: 0x340 - PLL_VIDEO0 Bias Register
        volatile uint32_t PLL_VIDEO1_BIAS;  ///< Offset: 0x348 - PLL_VIDEO1 Bias Register
        volatile uint32_t PLL_VE_BIAS;  ///< Offset: 0x358 - PLL_VE Bias Register
        volatile uint32_t PLL_AUDIO0_BIAS;  ///< Offset: 0x378 - PLL_AUDIO0 Bias Register
        volatile uint32_t PLL_AUDIO1_BIAS;  ///< Offset: 0x380 - PLL_AUDIO1 Bias Register
        volatile uint32_t PLL_CPU_TUN;  ///< Offset: 0x400 - PLL_CPU Tuning Register
        volatile uint32_t CPU_AXI_CFG;  ///< Offset: 0x500 - CPU_AXI Configuration Register
        volatile uint32_t CPU_GATING;  ///< Offset: 0x504 - CPU_GATING Configuration Register
        volatile uint32_t PSI_CLK;  ///< Offset: 0x510 - PSI Clock Register
        volatile uint32_t APB%s_CLK;  ///< Offset: 0x520 - APB Clock Register
        volatile uint32_t MBUS_CLK;  ///< Offset: 0x540 - MBUS Clock Register
        volatile uint32_t DE_CLK;  ///< Offset: 0x600 - DE Clock Register
        volatile uint32_t DE_BGR;  ///< Offset: 0x60C - DE Bus Gating Reset Register
        volatile uint32_t DI_CLK;  ///< Offset: 0x620 - DI Clock Register
        volatile uint32_t DI_BGR;  ///< Offset: 0x62C - DI Bus Gating Reset Register
        volatile uint32_t G2D_CLK;  ///< Offset: 0x630 - G2D Clock Register
        volatile uint32_t G2D_BGR;  ///< Offset: 0x63C - G2D Bus Gating Reset Register
        volatile uint32_t CE_CLK;  ///< Offset: 0x680 - CE Clock Register
        volatile uint32_t CE_BGR;  ///< Offset: 0x68C - CE Bus Gating Reset Register
        volatile uint32_t VE_CLK;  ///< Offset: 0x690 - VE Clock Register
        volatile uint32_t VE_BGR;  ///< Offset: 0x69C - VE Bus Gating Reset Register
        volatile uint32_t DMA_BGR;  ///< Offset: 0x70C - DMA Bus Gating Reset Register
        volatile uint32_t MSGBOX_BGR;  ///< Offset: 0x71C - MSGBOX Bus Gating Reset Register
        volatile uint32_t SPINLOCK_BGR;  ///< Offset: 0x72C - SPINLOCK Bus Gating Reset Register
        volatile uint32_t HSTIMER_BGR;  ///< Offset: 0x73C - HSTIMER Bus Gating Reset Register
        volatile uint32_t AVS_CLK;  ///< Offset: 0x740 - AVS Clock Register
        volatile uint32_t DBGSYS_BGR;  ///< Offset: 0x78C - DBGSYS Bus Gating Reset Register
        volatile uint32_t PWM_BGR;  ///< Offset: 0x7AC - PWM Bus Gating Reset Register
        volatile uint32_t IOMMU_BGR;  ///< Offset: 0x7BC - IOMMU Bus Gating Reset Register
        volatile uint32_t DRAM_CLK;  ///< Offset: 0x800 - DRAM Clock Register
        volatile uint32_t MBUS_MAT_CLK_GATING;  ///< Offset: 0x804 - MBUS Master Clock Gating Register
        volatile uint32_t DRAM_BGR;  ///< Offset: 0x80C - DRAM Bus Gating Reset Register
        volatile uint32_t SMHC0_CLK;  ///< Offset: 0x830 - SMHC0 Clock Register
        volatile uint32_t SMHC1_CLK;  ///< Offset: 0x834 - SMHC1 Clock Register
        volatile uint32_t SMHC2_CLK;  ///< Offset: 0x838 - SMHC2 Clock Register
        volatile uint32_t SMHC_BGR;  ///< Offset: 0x84C - SMHC Bus Gating Reset Register
        volatile uint32_t UART_BGR;  ///< Offset: 0x90C - UART Bus Gating Reset Register
        volatile uint32_t TWI_BGR;  ///< Offset: 0x91C - TWI Bus Gating Reset Register
        volatile uint32_t SPI0_CLK;  ///< Offset: 0x940 - SPI0 Clock Register
        volatile uint32_t SPI1_CLK;  ///< Offset: 0x944 - SPI1 Clock Register
        volatile uint32_t SPI_BGR;  ///< Offset: 0x96C - SPI Bus Gating Reset Register
        volatile uint32_t EMAC_25M_CLK;  ///< Offset: 0x970 - EMAC_25M Clock Register
        volatile uint32_t EMAC_BGR;  ///< Offset: 0x97C - EMAC Bus Gating Reset Register
        volatile uint32_t IRTX_CLK;  ///< Offset: 0x9C0 - IRTX Clock Register
        volatile uint32_t IRTX_BGR;  ///< Offset: 0x9CC - IRTX Bus Gating Reset Register
        volatile uint32_t GPADC_BGR;  ///< Offset: 0x9EC - GPADC Bus Gating Reset Register
        volatile uint32_t THS_BGR;  ///< Offset: 0x9FC - THS Bus Gating Reset Register
        volatile uint32_t I2S%s_CLK;  ///< Offset: 0xA10 - I2S Clock Register
        volatile uint32_t I2S2_ASRC_CLK;  ///< Offset: 0xA1C - I2S2_ASRC Clock Register
        volatile uint32_t I2S_BGR;  ///< Offset: 0xA20 - I2S Bus Gating Reset Register
        volatile uint32_t OWA_TX_CLK;  ///< Offset: 0xA24 - OWA_TX Clock Register
        volatile uint32_t OWA_RX_CLK;  ///< Offset: 0xA28 - OWA_RX Clock Register
        volatile uint32_t OWA_BGR;  ///< Offset: 0xA2C - OWA Bus Gating Reset Register
        volatile uint32_t DMIC_CLK;  ///< Offset: 0xA40 - DMIC Clock Register
        volatile uint32_t DMIC_BGR;  ///< Offset: 0xA4C - DMIC Bus Gating Reset Register
        volatile uint32_t AUDIO_CODEC_DAC_CLK;  ///< Offset: 0xA50 - AUDIO_CODEC_DAC Clock Register
        volatile uint32_t AUDIO_CODEC_ADC_CLK;  ///< Offset: 0xA54 - AUDIO_CODEC_ADC Clock Register
        volatile uint32_t AUDIO_CODEC_BGR;  ///< Offset: 0xA5C - AUDIO_CODEC Bus Gating Reset Register
        volatile uint32_t USB0_CLK;  ///< Offset: 0xA70 - USB0 Clock Register
        volatile uint32_t USB1_CLK;  ///< Offset: 0xA74 - USB1 Clock Register
        volatile uint32_t USB_BGR;  ///< Offset: 0xA8C - USB Bus Gating Reset Register
        volatile uint32_t LRADC_BGR;  ///< Offset: 0xA9C - LRADC Bus Gating Reset Register
        volatile uint32_t DPSS_TOP_BGR;  ///< Offset: 0xABC - DPSS_TOP Bus Gating Reset Register
        volatile uint32_t DSI_CLK;  ///< Offset: 0xB24 - DSI Clock Register
        volatile uint32_t DSI_BGR;  ///< Offset: 0xB4C - DSI Bus Gating Reset Register
        volatile uint32_t TCONLCD_CLK;  ///< Offset: 0xB60 - TCONLCD Clock Register
        volatile uint32_t TCONLCD_BGR;  ///< Offset: 0xB7C - TCONLCD Bus Gating Reset Register
        volatile uint32_t TCONTV_CLK;  ///< Offset: 0xB80 - TCONTV Clock Register
        volatile uint32_t TCONTV_BGR;  ///< Offset: 0xB9C - TCONTV Bus Gating Reset Register
        volatile uint32_t LVDS_BGR;  ///< Offset: 0xBAC - LVDS Bus Gating Reset Register
        volatile uint32_t TVE_CLK;  ///< Offset: 0xBB0 - TVE Clock Register
        volatile uint32_t TVE_BGR;  ///< Offset: 0xBBC - TVE Bus Gating Reset Register
        volatile uint32_t TVD_CLK;  ///< Offset: 0xBC0 - TVD Clock Register
        volatile uint32_t TVD_BGR;  ///< Offset: 0xBDC - TVD Bus Gating Reset Register
        volatile uint32_t LEDC_CLK;  ///< Offset: 0xBF0 - LEDC Clock Register
        volatile uint32_t LEDC_BGR;  ///< Offset: 0xBFC - LEDC Bus Gating Reset Register
        volatile uint32_t CSI_CLK;  ///< Offset: 0xC04 - CSI Clock Register
        volatile uint32_t CSI_MASTER_CLK;  ///< Offset: 0xC08 - CSI Master Clock Register
        volatile uint32_t CSI_BGR;  ///< Offset: 0xC1C - CSI Bus Gating Reset Register
        volatile uint32_t TPADC_CLK;  ///< Offset: 0xC50 - TPADC Clock Register
        volatile uint32_t TPADC_BGR;  ///< Offset: 0xC5C - TPADC Bus Gating Reset Register
        volatile uint32_t DSP_CLK;  ///< Offset: 0xC70 - DSP Clock Register
        volatile uint32_t DSP_BGR;  ///< Offset: 0xC7C - DSP Bus Gating Reset Register
        volatile uint32_t RISCV_CLK;  ///< Offset: 0xD00 - RISC-V Clock Register
        volatile uint32_t RISCV_GATING;  ///< Offset: 0xD04 - RISC-V GATING Configuration Register
        volatile uint32_t RISCV_CFG_BGR;  ///< Offset: 0xD0C - RISC-V_CFG Bus Gating Reset Register
        volatile uint32_t PLL_LOCK_DBG_CTRL;  ///< Offset: 0xF04 - PLL Lock Debug Control Register
        volatile uint32_t FRE_DET_CTRL;  ///< Offset: 0xF08 - Frequency Detect Control Register
        volatile uint32_t FRE_UP_LIM;  ///< Offset: 0xF0C - Frequency Up Limit Register
        volatile uint32_t FRE_DOWN_LIM;  ///< Offset: 0xF10 - Frequency Down Limit Register
        volatile uint32_t CCU_FAN_GATE;  ///< Offset: 0xF30 - CCU FANOUT CLOCK GATE Register
        volatile uint32_t CLK27M_FAN;  ///< Offset: 0xF34 - CLK27M FANOUT Register
        volatile uint32_t PCLK_FAN;  ///< Offset: 0xF38 - PCLK FANOUT Register
        volatile uint32_t CCU_FAN;  ///< Offset: 0xF3C - CCU FANOUT Register
    };

    /// Peripheral instances
    inline Registers* CCU = reinterpret_cast<Registers*>(CCU_BASE);

}

// ============================================================================
// SYS Peripheral
// ============================================================================

namespace sys {
    /// Base addresses
    constexpr uint32_t SYS_CFG_BASE = 0x03000000;

    /// SYS Register structure
    struct Registers {
        volatile uint32_t DSP_BOOT_RAMMAP;  ///< Offset: 0x08 - DSP Boot SRAM Remap Control Register
        volatile uint32_t VER;  ///< Offset: 0x24 - Version Register
        volatile uint32_t EMAC_EPHY_CLK0;  ///< Offset: 0x30 - EMAC-EPHY Clock Register 0
        volatile uint32_t SYS_LDO_CTRL;  ///< Offset: 0x150 - System LDO Control Register
        volatile uint32_t RESCAL_CTRL;  ///< Offset: 0x160 - Resistor Calibration Control Register
        volatile uint32_t RES240_CTRL;  ///< Offset: 0x168 - 240ohms Resistor Manual Control Register
        volatile uint32_t RESCAL_STATUS;  ///< Offset: 0x16C - Resistor Calibration Status Register
    };

    /// Peripheral instances
    inline Registers* SYS_CFG = reinterpret_cast<Registers*>(SYS_CFG_BASE);

}

// ============================================================================
// RISCV Peripheral
// ============================================================================

namespace riscv {
    /// Base addresses
    constexpr uint32_t RISCV_CFG_BASE = 0x06010000;

    /// RISCV Register structure
    struct Registers {
        volatile uint32_t RISCV_STA_ADD0_REG;  ///< Offset: 0x04 - RISCV Start Address0 Register
        volatile uint32_t RISCV_STA_ADD1_REG;  ///< Offset: 0x08 - RISCV Start Address1 Register
        volatile uint32_t RF1P_CFG_REG;  ///< Offset: 0x10 - RF1P Configuration Register
        volatile uint32_t ROM_CFG_REG;  ///< Offset: 0x1C - ROM Configuration Register
        volatile uint32_t WAKEUP_EN_REG;  ///< Offset: 0x20 - Wakeup Enable Register
        volatile uint32_t WAKEUP_MASK%s_REG;  ///< Offset: 0x24 - Wakeup Mask Register
        volatile uint32_t TS_TMODE_SEL_REG;  ///< Offset: 0x40 - Timestamp Test Mode Select Register
        volatile uint32_t SRAM_ADDR_TWIST_REG;  ///< Offset: 0x44 - SRAM Address Twist Register
        volatile uint32_t WORK_MODE_REG;  ///< Offset: 0x48 - Work Mode Register
        volatile uint32_t RETITE_PC0_REG;  ///< Offset: 0x50 - Retire PC0 Register
        volatile uint32_t RETITE_PC1_REG;  ///< Offset: 0x54 - Retire PC1 Register
        volatile uint32_t IRQ_MODE%s_REG;  ///< Offset: 0x60 - IRQ Mode Register
        volatile uint32_t RISCV_AXI_PMU_CTRL;  ///< Offset: 0x104 - RISCV AXI PMU Control Register
        volatile uint32_t RISCV_AXI_PMU_PRD;  ///< Offset: 0x108 - RISCV AXI PMU Period Register
        volatile uint32_t RISCV_AXI_PMU_LAT_RD;  ///< Offset: 0x10C - RISCV AXI PMU Read Latency Register
        volatile uint32_t RISCV_AXI_PMU_LAT_WR;  ///< Offset: 0x110 - RISCV AXI PMU Write Latency Register
        volatile uint32_t RISCV_AXI_PMU_REQ_RD;  ///< Offset: 0x114 - RISCV AXI PMU Read Request Register
        volatile uint32_t RISCV_AXI_PMU_REQ_WR;  ///< Offset: 0x118 - RISCV AXI PMU Write Request Register
        volatile uint32_t RISCV_AXI_PMU_BW_RD;  ///< Offset: 0x11C - RISCV AXI PMU Read Bandwidth Register
        volatile uint32_t RISCV_AXI_PMU_BW_WR;  ///< Offset: 0x120 - RISCV AXI PMU Write Bandwidth Register
    };

    /// Peripheral instances
    inline Registers* RISCV_CFG = reinterpret_cast<Registers*>(RISCV_CFG_BASE);

}

// ============================================================================
// CLINT Peripheral
// ============================================================================

namespace clint {
    /// Base addresses
    constexpr uint32_t CLINT_BASE = 0x14000000;

    /// CLINT Register structure
    struct Registers {
        volatile uint32_t msip;  ///< Offset: 0x00 - MSIP Register for hart 0
        volatile uint32_t mtimecmpl;  ///< Offset: 0x4000 - MTIMECMPL Register for hart 0
        volatile uint32_t mtimecmph;  ///< Offset: 0x4004 - MTIMECMPH Register for hart 0
        volatile uint32_t mtime;  ///< Offset: 0xBFF8 - MTIME\n\nREF: opensbi
        volatile uint32_t ssip;  ///< Offset: 0xC000 - SSIP Register for hart 0
        volatile uint32_t stimecmpl;  ///< Offset: 0xD000 - STIMECMPL Register for hart 0
        volatile uint32_t stimecmph;  ///< Offset: 0xD004 - STIMECMPH Register for hart 0
    };

    /// Peripheral instances
    inline Registers* CLINT = reinterpret_cast<Registers*>(CLINT_BASE);

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TIMER_BASE = 0x02050000;
    constexpr uint32_t HSTimer_BASE = 0x03008000;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t tmr_irq_en;  ///< Offset: 0x00 - Timer IRQ Enable Register
        volatile uint32_t tmr_irq_sta;  ///< Offset: 0x04 - Timer Status Register
        volatile uint32_t tmr%s_ctrl;  ///< Offset: 0x10 - Timer IRQ Enable Register
        volatile uint32_t tmr%s_intv_value;  ///< Offset: 0x14 - Timer Interval Value Register
        volatile uint32_t tmr%s_cur_value;  ///< Offset: 0x18 - Timer Current Value Register
        volatile uint32_t wdog_irq_en;  ///< Offset: 0xA0 - Watchdog IRQ Enable Register
        volatile uint32_t wdog_irq_sta;  ///< Offset: 0xA4 - Watchdog Status Register
        volatile uint32_t wdog_soft_rst;  ///< Offset: 0xA8 - Watchdog Software Reset Register
        volatile uint32_t wdog_ctrl;  ///< Offset: 0xB0 - Watchdog Control Register
        volatile uint32_t wdog_cfg;  ///< Offset: 0xB4 - Watchdog Configuration Register
        volatile uint32_t wdog_mode;  ///< Offset: 0xB8 - Watchdog Mode Register
        volatile uint32_t wdog_output_cfg;  ///< Offset: 0xBC - Watchdog Output Configuration Register
        volatile uint32_t avs_cnt_ctl;  ///< Offset: 0xC0 - AVS Counter Control Register
        volatile uint32_t avs_cnt0;  ///< Offset: 0xC4 - AVS Counter 0 Register
        volatile uint32_t avs_cnt1;  ///< Offset: 0xC8 - AVS Counter 1 Register
        volatile uint32_t avs_cnt_div;  ///< Offset: 0xCC - AVS Counter Divisor Register
    };

    /// Peripheral instances
    inline Registers* TIMER = reinterpret_cast<Registers*>(TIMER_BASE);
    inline Registers* HSTimer = reinterpret_cast<Registers*>(HSTimer_BASE);

}

// ============================================================================
// PLIC Peripheral
// ============================================================================

namespace plic {
    /// Base addresses
    constexpr uint32_t PLIC_BASE = 0x10000000;

    /// PLIC Register structure
    struct Registers {
        volatile uint32_t prio[%s];  ///< Offset: 0x00 - Interrupt Priority Register
        volatile uint32_t ip[%s];  ///< Offset: 0x1000 - Interrupt Pending Register
        volatile uint32_t mie[%s];  ///< Offset: 0x2000 - Machine Mode Interrupt Enable Register
        volatile uint32_t sie[%s];  ///< Offset: 0x2080 - Supervisor Mode Interrupt Enable Register
        volatile uint32_t ctrl;  ///< Offset: 0x1FFFFC - Control Register
        volatile uint32_t mth;  ///< Offset: 0x200000 - Machine Mode Priority Threshold Register
        volatile uint32_t mclaim;  ///< Offset: 0x200004 - Machine Mode Claim/Complete Register
        volatile uint32_t sth;  ///< Offset: 0x201000 - Supervisor Mode Priority Threshold Register
        volatile uint32_t sclaim;  ///< Offset: 0x201004 - Supervisor Mode Claim/Complete Register
    };

    /// Peripheral instances
    inline Registers* PLIC = reinterpret_cast<Registers*>(PLIC_BASE);

    // Bit definitions
    /// prio[%s] Register bits
    namespace prio[%s]_bits {
        constexpr uint32_t priority = (5 << 0);  ///< Priority 0 (never interrupt)
    }

    /// mth Register bits
    namespace mth_bits {
        constexpr uint32_t priority = (5 << 0);  ///< Priority 0 (never interrupt)
    }

    /// sth Register bits
    namespace sth_bits {
        constexpr uint32_t priority = (5 << 0);  ///< Priority 0 (never interrupt)
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAC_BASE = 0x03002000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t DMAC_IRQ_EN_REG0;  ///< Offset: 0x00 - DMAC IRQ Enable Register 0
        volatile uint32_t DMAC_IRQ_EN_REG1;  ///< Offset: 0x04 - DMAC IRQ Enable Register 1
        volatile uint32_t DMAC_IRQ_PEND_REG0;  ///< Offset: 0x10 - DMAC IRQ Pending Register 0
        volatile uint32_t DMAC_IRQ_PEND_REG1;  ///< Offset: 0x14 - DMAC IRQ Pending Register 1
        volatile uint32_t DMAC_AUTO_GATE_REG;  ///< Offset: 0x28 - DMAC Auto Gating Register
        volatile uint32_t DMAC_STA_REG;  ///< Offset: 0x30 - DMAC Status Register
        volatile uint32_t DMAC_EN_REG%s;  ///< Offset: 0x100 - DMAC Channel Enable Register
        volatile uint32_t DMAC_PAU_REG%s;  ///< Offset: 0x104 - DMAC Channel Pause Register
        volatile uint32_t DMAC_DESC_ADDR_REG%s;  ///< Offset: 0x108 - DMAC Channel Start Address Register
        volatile uint32_t DMAC_CFG_REG%s;  ///< Offset: 0x10C - DMAC Channel Configuration Register
        volatile uint32_t DMAC_CUR_SRC_REG%s;  ///< Offset: 0x110 - DMAC Channel Current Source Register
        volatile uint32_t DMAC_CUR_DEST_REG%s;  ///< Offset: 0x114 - DMAC Channel Current Destination Register
        volatile uint32_t DMAC_BCNT_LEFT_REG%s;  ///< Offset: 0x118 - DMAC Channel Byte Counter Left Register
        volatile uint32_t DMAC_PARA_REG%s;  ///< Offset: 0x11C - DMAC Channel Parameter Register
        volatile uint32_t DMAC_MODE_REG%s;  ///< Offset: 0x128 - DMAC Mode Register
        volatile uint32_t DMAC_FDESC_ADDR_REG%s;  ///< Offset: 0x12C - DMAC Former Descriptor Address Register
        volatile uint32_t DMAC_PKG_NUM_REG%s;  ///< Offset: 0x130 - DMAC Package Number Register
    };

    /// Peripheral instances
    inline Registers* DMAC = reinterpret_cast<Registers*>(DMAC_BASE);

}

// ============================================================================
// THC Peripheral
// ============================================================================

namespace thc {
    /// Base addresses
    constexpr uint32_t THC_BASE = 0x02009400;

    /// THC Register structure
    struct Registers {
        volatile uint32_t THS_CTRL;  ///< Offset: 0x00 - THS Control Register
        volatile uint32_t THS_EN;  ///< Offset: 0x04 - THS Enable Register
        volatile uint32_t THS_PER;  ///< Offset: 0x08 - THS Period Control Register
        volatile uint32_t THS_DATA_INTC;  ///< Offset: 0x10 - THS Data Interrupt Control Register
        volatile uint32_t THS_SHUT_INTC;  ///< Offset: 0x14 - THS Shut Interrupt Control Register
        volatile uint32_t THS_ALARM_INTC;  ///< Offset: 0x18 - THS Alarm Interrupt Control Register
        volatile uint32_t THS_DATA_INTS;  ///< Offset: 0x20 - THS Data Interrupt Status Register
        volatile uint32_t THS_SHUT_INTS;  ///< Offset: 0x24 - THS Shut Interrupt Status Register
        volatile uint32_t THS_ALARMO_INTS;  ///< Offset: 0x28 - THS Alarm off Interrupt Status Register
        volatile uint32_t THS_ALARM_INTS;  ///< Offset: 0x2C - THS Alarm Interrupt Status Register
        volatile uint32_t THS_FILTER;  ///< Offset: 0x30 - THS Median Filter Control Register
        volatile uint32_t THS_ALARM_CTRL;  ///< Offset: 0x40 - THS Alarm Threshold Control Register
        volatile uint32_t THS_SHUTDOWN_CTRL;  ///< Offset: 0x80 - THS Shutdown Threshold Control Register
        volatile uint32_t THS_CDATA;  ///< Offset: 0xA0 - THS Calibration Data
        volatile uint32_t THS_DATA;  ///< Offset: 0xC0 - THS Data Register
    };

    /// Peripheral instances
    inline Registers* THC = reinterpret_cast<Registers*>(THC_BASE);

}

// ============================================================================
// IOMMU Peripheral
// ============================================================================

namespace iommu {
    /// Base addresses
    constexpr uint32_t IOMMU_BASE = 0x02010000;

    /// IOMMU Register structure
    struct Registers {
        volatile uint32_t IOMMU_RESET_REG;  ///< Offset: 0x10 - IOMMU Reset Register
        volatile uint32_t IOMMU_ENABLE_REG;  ///< Offset: 0x20 - IOMMU Enable Register
        volatile uint32_t IOMMU_BYPASS_REG;  ///< Offset: 0x30 - IOMMU Bypass Register
        volatile uint32_t IOMMU_AUTO_GATING_REG;  ///< Offset: 0x40 - IOMMU Auto Gating Register
        volatile uint32_t IOMMU_WBUF_CTRL_REG;  ///< Offset: 0x44 - IOMMU Write Buffer Control Register
        volatile uint32_t IOMMU_OOO_CTRL_REG;  ///< Offset: 0x48 - IOMMU Out of Order Control Register
        volatile uint32_t IOMMU_4KB_BDY_PRT_CTRL_REG;  ///< Offset: 0x4C - IOMMU 4KB Boundary Protect Control Register
        volatile uint32_t IOMMU_TTB_REG;  ///< Offset: 0x50 - IOMMU Translation Table Base Register
        volatile uint32_t IOMMU_TLB_ENABLE_REG;  ///< Offset: 0x60 - IOMMU TLB Enable Register
        volatile uint32_t IOMMU_TLB_PREFETCH_REG;  ///< Offset: 0x70 - IOMMU TLB Prefetch Register
        volatile uint32_t IOMMU_TLB_FLUSH_ENABLE_REG;  ///< Offset: 0x80 - IOMMU TLB Flush Enable Register
        volatile uint32_t IOMMU_TLB_IVLD_MODE_SEL_REG;  ///< Offset: 0x84 - IOMMU TLB Invalidation Mode Select Register
        volatile uint32_t IOMMU_TLB_IVLD_STA_ADDR_REG;  ///< Offset: 0x88 - IOMMU TLB Invalidation Start Address Register
        volatile uint32_t IOMMU_TLB_IVLD_END_ADDR_REG;  ///< Offset: 0x8C - IOMMU TLB Invalidation End Address Register
        volatile uint32_t IOMMU_TLB_IVLD_ADDR_REG;  ///< Offset: 0x90 - IOMMU TLB Invalidation Address Register
        volatile uint32_t IOMMU_TLB_IVLD_ADDR_MASK_REG;  ///< Offset: 0x94 - IOMMU TLB Invalidation Address Mask Register
        volatile uint32_t IOMMU_TLB_IVLD_ENABLE_REG;  ///< Offset: 0x98 - IOMMU TLB Invalidation Enable Register
        volatile uint32_t IOMMU_PC_IVLD_MODE_SEL_REG;  ///< Offset: 0x9C - IOMMU PC Invalidation Mode Select Register
        volatile uint32_t IOMMU_PC_IVLD_ADDR_REG;  ///< Offset: 0xA0 - IOMMU PC Invalidation Address Register
        volatile uint32_t IOMMU_PC_IVLD_STA_ADDR_REG;  ///< Offset: 0xA4 - IOMMU PC Invalidation Start Address Register
        volatile uint32_t IOMMU_PC_IVLD_ENABLE_REG;  ///< Offset: 0xA8 - IOMMU PC Invalidation Enable Register
        volatile uint32_t IOMMU_PC_IVLD_END_ADDR_REG;  ///< Offset: 0xAC - IOMMU PC Invalidation End Address Register
        volatile uint32_t IOMMU_DM_AUT_CTRL0_REG;  ///< Offset: 0xB0 - IOMMU Domain Authority Control 0 Register
        volatile uint32_t IOMMU_DM_AUT_CTRL1_REG;  ///< Offset: 0xB4 - IOMMU Domain Authority Control 1 Register
        volatile uint32_t IOMMU_DM_AUT_CTRL2_REG;  ///< Offset: 0xB8 - IOMMU Domain Authority Control 2 Register
        volatile uint32_t IOMMU_DM_AUT_CTRL3_REG;  ///< Offset: 0xBC - IOMMU Domain Authority Control 3 Register
        volatile uint32_t IOMMU_DM_AUT_CTRL4_REG;  ///< Offset: 0xC0 - IOMMU Domain Authority Control 4 Register
        volatile uint32_t IOMMU_DM_AUT_CTRL5_REG;  ///< Offset: 0xC4 - IOMMU Domain Authority Control 5 Register
        volatile uint32_t IOMMU_DM_AUT_CTRL6_REG;  ///< Offset: 0xC8 - IOMMU Domain Authority Control 6 Register
        volatile uint32_t IOMMU_DM_AUT_CTRL7_REG;  ///< Offset: 0xCC - IOMMU Domain Authority Control 7 Register
        volatile uint32_t IOMMU_DM_AUT_OVWT_REG;  ///< Offset: 0xD0 - IOMMU Domain Authority Overwrite Register
        volatile uint32_t IOMMU_INT_ENABLE_REG;  ///< Offset: 0x100 - IOMMU Interrupt Enable Register
        volatile uint32_t IOMMU_INT_CLR_REG;  ///< Offset: 0x104 - IOMMU Interrupt Clear Register
        volatile uint32_t IOMMU_INT_STA_REG;  ///< Offset: 0x108 - IOMMU Interrupt Status Register
        volatile uint32_t IOMMU_INT_ERR_ADDR0_REG;  ///< Offset: 0x110 - IOMMU Interrupt Error Address 0
        volatile uint32_t IOMMU_INT_ERR_ADDR1_REG;  ///< Offset: 0x114 - IOMMU Interrupt Error Address 1
        volatile uint32_t IOMMU_INT_ERR_ADDR2_REG;  ///< Offset: 0x118 - IOMMU Interrupt Error Address 2
        volatile uint32_t IOMMU_INT_ERR_ADDR3_REG;  ///< Offset: 0x11C - IOMMU Interrupt Error Address 3
        volatile uint32_t IOMMU_INT_ERR_ADDR4_REG;  ///< Offset: 0x120 - IOMMU Interrupt Error Address 4
        volatile uint32_t IOMMU_INT_ERR_ADDR5_REG;  ///< Offset: 0x124 - IOMMU Interrupt Error Address 5
        volatile uint32_t IOMMU_INT_ERR_ADDR6_REG;  ///< Offset: 0x128 - IOMMU Interrupt Error Address 6
        volatile uint32_t IOMMU_INT_ERR_ADDR7_REG;  ///< Offset: 0x130 - IOMMU Interrupt Error Address 7
        volatile uint32_t IOMMU_INT_ERR_ADDR8_REG;  ///< Offset: 0x134 - IOMMU Interrupt Error Address 8
        volatile uint32_t IOMMU_INT_ERR_DATA0_REG;  ///< Offset: 0x150 - IOMMU Interrupt Error Data 0 Register
        volatile uint32_t IOMMU_INT_ERR_DATA1_REG;  ///< Offset: 0x154 - IOMMU Interrupt Error Data 1 Register
        volatile uint32_t IOMMU_INT_ERR_DATA2_REG;  ///< Offset: 0x158 - IOMMU Interrupt Error Data 2 Register
        volatile uint32_t IOMMU_INT_ERR_DATA3_REG;  ///< Offset: 0x15C - IOMMU Interrupt Error Data 3 Register
        volatile uint32_t IOMMU_INT_ERR_DATA4_REG;  ///< Offset: 0x160 - IOMMU Interrupt Error Data 4 Register
        volatile uint32_t IOMMU_INT_ERR_DATA5_REG;  ///< Offset: 0x164 - IOMMU Interrupt Error Data 5 Register
        volatile uint32_t IOMMU_INT_ERR_DATA6_REG;  ///< Offset: 0x168 - IOMMU Interrupt Error Data 6 Register
        volatile uint32_t IOMMU_INT_ERR_DATA7_REG;  ///< Offset: 0x170 - IOMMU Interrupt Error Data 7 Register
        volatile uint32_t IOMMU_INT_ERR_DATA8_REG;  ///< Offset: 0x174 - IOMMU Interrupt Error Data 8 Register
        volatile uint32_t IOMMU_L1PG_INT_REG;  ///< Offset: 0x180 - IOMMU L1 Page Table Interrupt Register
        volatile uint32_t IOMMU_L2PG_INT_REG;  ///< Offset: 0x184 - IOMMU L2 Page Table Interrupt Register
        volatile uint32_t IOMMU_VA_REG;  ///< Offset: 0x190 - IOMMU Virtual Address Register
        volatile uint32_t IOMMU_VA_DATA_REG;  ///< Offset: 0x194 - IOMMU Virtual Address Data Register
        volatile uint32_t IOMMU_VA_CONFIG_REG;  ///< Offset: 0x198 - IOMMU Virtual Address Configuration Register
        volatile uint32_t IOMMU_PMU_ENABLE_REG;  ///< Offset: 0x200 - IOMMU PMU Enable Register
        volatile uint32_t IOMMU_PMU_CLR_REG;  ///< Offset: 0x210 - IOMMU PMU Clear Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW0_REG;  ///< Offset: 0x230 - IOMMU PMU Access Low 0 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH0_REG;  ///< Offset: 0x234 - IOMMU PMU Access High 0 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW0_REG;  ///< Offset: 0x238 - IOMMU PMU Hit Low 0 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH0_REG;  ///< Offset: 0x23C - IOMMU PMU Hit High 0 Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW1_REG;  ///< Offset: 0x240 - IOMMU PMU Access Low 1 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH1_REG;  ///< Offset: 0x244 - IOMMU PMU Access High 1 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW1_REG;  ///< Offset: 0x248 - IOMMU PMU Hit Low 1 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH1_REG;  ///< Offset: 0x24C - IOMMU PMU Hit High 1 Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW2_REG;  ///< Offset: 0x250 - IOMMU PMU Access Low 2 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH2_REG;  ///< Offset: 0x254 - IOMMU PMU Access High 2 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW2_REG;  ///< Offset: 0x258 - IOMMU PMU Hit Low 2 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH2_REG;  ///< Offset: 0x25C - IOMMU PMU Hit High 2 Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW3_REG;  ///< Offset: 0x260 - IOMMU PMU Access Low 3 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH3_REG;  ///< Offset: 0x264 - IOMMU PMU Access High 3 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW3_REG;  ///< Offset: 0x268 - IOMMU PMU Hit Low 3 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH3_REG;  ///< Offset: 0x26C - IOMMU PMU Hit High 3 Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW4_REG;  ///< Offset: 0x270 - IOMMU PMU Access Low 4 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH4_REG;  ///< Offset: 0x274 - IOMMU PMU Access High 4 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW4_REG;  ///< Offset: 0x278 - IOMMU PMU Hit Low 4 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH4_REG;  ///< Offset: 0x27C - IOMMU PMU Hit High 4 Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW5_REG;  ///< Offset: 0x280 - IOMMU PMU Access Low 5 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH5_REG;  ///< Offset: 0x284 - IOMMU PMU Access High 5 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW5_REG;  ///< Offset: 0x288 - IOMMU PMU Hit Low 5 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH5_REG;  ///< Offset: 0x28C - IOMMU PMU Hit High 5 Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW6_REG;  ///< Offset: 0x290 - IOMMU PMU Access Low 6 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH6_REG;  ///< Offset: 0x294 - IOMMU PMU Access High 6 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW6_REG;  ///< Offset: 0x298 - IOMMU PMU Hit Low 6 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH6_REG;  ///< Offset: 0x29C - IOMMU PMU Hit High 6 Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW7_REG;  ///< Offset: 0x2D0 - IOMMU PMU Access Low 7 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH7_REG;  ///< Offset: 0x2D4 - IOMMU PMU Access High 7 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW7_REG;  ///< Offset: 0x2D8 - IOMMU PMU Hit Low 7 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH7_REG;  ///< Offset: 0x2DC - IOMMU PMU Hit High 7 Register
        volatile uint32_t IOMMU_PMU_ACCESS_LOW8_REG;  ///< Offset: 0x2E0 - IOMMU PMU Access Low 8 Register
        volatile uint32_t IOMMU_PMU_ACCESS_HIGH8_REG;  ///< Offset: 0x2E4 - IOMMU PMU Access High 8 Register
        volatile uint32_t IOMMU_PMU_HIT_LOW8_REG;  ///< Offset: 0x2E8 - IOMMU PMU Hit Low 8 Register
        volatile uint32_t IOMMU_PMU_HIT_HIGH8_REG;  ///< Offset: 0x2EC - IOMMU PMU Hit High 8 Register
        volatile uint32_t IOMMU_PMU_TL_LOW0_REG;  ///< Offset: 0x300 - IOMMU Total Latency Low 0 Register
        volatile uint32_t IOMMU_PMU_TL_HIGH0_REG;  ///< Offset: 0x304 - IOMMU Total Latency High 0 Register
        volatile uint32_t IOMMU_PMU_ML0_REG;  ///< Offset: 0x308 - IOMMU Max Latency 0 Register
        volatile uint32_t IOMMU_PMU_TL_LOW1_REG;  ///< Offset: 0x310 - IOMMU Total Latency Low 1 Register
        volatile uint32_t IOMMU_PMU_TL_HIGH1_REG;  ///< Offset: 0x314 - IOMMU Total Latency High 1 Register
        volatile uint32_t IOMMU_PMU_ML1_REG;  ///< Offset: 0x318 - IOMMU Max Latency 1 Register
        volatile uint32_t IOMMU_PMU_TL_LOW2_REG;  ///< Offset: 0x320 - IOMMU Total Latency Low 2 Register
        volatile uint32_t IOMMU_PMU_TL_HIGH2_REG;  ///< Offset: 0x324 - IOMMU Total Latency High 2 Register
        volatile uint32_t IOMMU_PMU_ML2_REG;  ///< Offset: 0x328 - IOMMU Max Latency 2 Register
        volatile uint32_t IOMMU_PMU_TL_LOW3_REG;  ///< Offset: 0x330 - IOMMU Total Latency Low 3 Register
        volatile uint32_t IOMMU_PMU_TL_HIGH3_REG;  ///< Offset: 0x334 - IOMMU Total Latency High 3 Register
        volatile uint32_t IOMMU_PMU_ML3_REG;  ///< Offset: 0x338 - IOMMU Max Latency 3 Register
        volatile uint32_t IOMMU_PMU_TL_LOW4_REG;  ///< Offset: 0x340 - IOMMU Total Latency Low 4 Register
        volatile uint32_t IOMMU_PMU_TL_HIGH4_REG;  ///< Offset: 0x344 - IOMMU Total Latency High 4 Register
        volatile uint32_t IOMMU_PMU_ML4_REG;  ///< Offset: 0x348 - IOMMU Max Latency 4 Register
        volatile uint32_t IOMMU_PMU_TL_LOW5_REG;  ///< Offset: 0x350 - IOMMU Total Latency Low 5 Register
        volatile uint32_t IOMMU_PMU_TL_HIGH5_REG;  ///< Offset: 0x354 - IOMMU Total Latency High 5 Register
        volatile uint32_t IOMMU_PMU_ML5_REG;  ///< Offset: 0x358 - IOMMU Max Latency 5 Register
        volatile uint32_t IOMMU_PMU_TL_LOW6_REG;  ///< Offset: 0x360 - IOMMU Total Latency Low 6 Register
        volatile uint32_t IOMMU_PMU_TL_HIGH6_REG;  ///< Offset: 0x364 - IOMMU Total Latency High 6 Register
        volatile uint32_t IOMMU_PMU_ML6_REG;  ///< Offset: 0x368 - IOMMU Max Latency 6 Register
    };

    /// Peripheral instances
    inline Registers* IOMMU = reinterpret_cast<Registers*>(IOMMU_BASE);

}

// ============================================================================
// DSP Peripheral
// ============================================================================

namespace dsp {
    /// Base addresses
    constexpr uint32_t DSP_MSGBOX_BASE = 0x01701000;

    /// DSP Register structure
    struct Registers {
        volatile uint32_t MSGBOX_RD_IRQ_EN_REG_%s;  ///< Offset: 0x20 - MSGBOX Read IRQ Enable Register
        volatile uint32_t MSGBOX_RD_IRQ_STATUS_REG_%s;  ///< Offset: 0x24 - MSGBOX Read IRQ Status Register
        volatile uint32_t MSGBOX_WR_IRQ_EN_REG_%s;  ///< Offset: 0x30 - MSGBOX Write IRQ Enable Register
        volatile uint32_t MSGBOX_WR_IRQ_STATUS_REG_%s;  ///< Offset: 0x34 - MSGBOX Write IRQ Status Register
        volatile uint32_t MSGBOX_DEBUG_REG_%s;  ///< Offset: 0x40 - MSGBOX Debug Register
        volatile uint32_t MSGBOX_FIFO_STATUS_REG_P%s;  ///< Offset: 0x00 - MSGBOX FIFO Status Register
        volatile uint32_t MSGBOX_MSG_STATUS_REG_P%s;  ///< Offset: 0x00 - MSGBOX Message Status Register
        volatile uint32_t MSGBOX_MSG_REG_P%s;  ///< Offset: 0x00 - MSGBOX Message Queue Register
        volatile uint32_t MSGBOX_WR_INT_THRESHOLD_REG_P%s;  ///< Offset: 0x00 - MSGBOX Write IRQ Threshold Register
    };

    /// Peripheral instances
    inline Registers* DSP_MSGBOX = reinterpret_cast<Registers*>(DSP_MSGBOX_BASE);

}

// ============================================================================
// RISC Peripheral
// ============================================================================

namespace risc {
    /// Base addresses
    constexpr uint32_t RISC_V_MSGBOX_BASE = 0x0601F000;

    /// RISC Register structure
    struct Registers {
        volatile uint32_t MSGBOX_RD_IRQ_EN_REG_%s;  ///< Offset: 0x20 - MSGBOX Read IRQ Enable Register
        volatile uint32_t MSGBOX_RD_IRQ_STATUS_REG_%s;  ///< Offset: 0x24 - MSGBOX Read IRQ Status Register
        volatile uint32_t MSGBOX_WR_IRQ_EN_REG_%s;  ///< Offset: 0x30 - MSGBOX Write IRQ Enable Register
        volatile uint32_t MSGBOX_WR_IRQ_STATUS_REG_%s;  ///< Offset: 0x34 - MSGBOX Write IRQ Status Register
        volatile uint32_t MSGBOX_DEBUG_REG_%s;  ///< Offset: 0x40 - MSGBOX Debug Register
        volatile uint32_t MSGBOX_FIFO_STATUS_REG_P%s;  ///< Offset: 0x00 - MSGBOX FIFO Status Register
        volatile uint32_t MSGBOX_MSG_STATUS_REG_P%s;  ///< Offset: 0x00 - MSGBOX Message Status Register
        volatile uint32_t MSGBOX_MSG_REG_P%s;  ///< Offset: 0x00 - MSGBOX Message Queue Register
        volatile uint32_t MSGBOX_WR_INT_THRESHOLD_REG_P%s;  ///< Offset: 0x00 - MSGBOX Write IRQ Threshold Register
    };

    /// Peripheral instances
    inline Registers* RISC_V_MSGBOX = reinterpret_cast<Registers*>(RISC_V_MSGBOX_BASE);

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t Spinlock_BASE = 0x03005000;
    constexpr uint32_t SPI0_BASE = 0x04025000;
    constexpr uint32_t SPI_DBI_BASE = 0x04026000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t SPINLOCK_SYSTATUS_REG;  ///< Offset: 0x00 - Spinlock System Status Register
        volatile uint32_t SPINLOCK_STATUS_REG;  ///< Offset: 0x10 - Spinlock Status Register
        volatile uint32_t SPINLOCK_IRQ_EN_REG;  ///< Offset: 0x20 - Spinlock Interrupt Enable Register
        volatile uint32_t SPINLOCK_IRQ_STA_REG;  ///< Offset: 0x40 - Spinlock Interrupt Status Register
        volatile uint32_t SPINLOCK_LOCKID0_REG;  ///< Offset: 0x80 - Spinlock Lockid0 Register
        volatile uint32_t SPINLOCK_LOCKID1_REG;  ///< Offset: 0x84 - Spinlock Lockid1 Register
        volatile uint32_t SPINLOCK_LOCKID2_REG;  ///< Offset: 0x88 - Spinlock Lockid2 Register
        volatile uint32_t SPINLOCK_LOCKID3_REG;  ///< Offset: 0x8C - Spinlock Lockid3 Register
        volatile uint32_t SPINLOCK_LOCKID4_REG;  ///< Offset: 0x90 - Spinlock Lockid4 Register
        volatile uint32_t SPINLOCK_LOCK_REG%s;  ///< Offset: 0x100 - Spinlock Register
    };

    /// Peripheral instances
    inline Registers* Spinlock = reinterpret_cast<Registers*>(Spinlock_BASE);
    inline Registers* SPI0 = reinterpret_cast<Registers*>(SPI0_BASE);
    inline Registers* SPI_DBI = reinterpret_cast<Registers*>(SPI_DBI_BASE);

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x07090000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t LOSC_CTRL_REG;  ///< Offset: 0x00 - Low Oscillator Control Register
        volatile uint32_t LOSC_AUTO_SWT_STA_REG;  ///< Offset: 0x04 - LOSC Auto Switch Status Register
        volatile uint32_t INTOSC_CLK_PRESCAL_REG;  ///< Offset: 0x08 - Internal OSC Clock Pre-scalar Register
        volatile uint32_t RTC_DAY_REG;  ///< Offset: 0x10 - RTC Year-Month-Day Register
        volatile uint32_t RTC_HH_MM_SS_REG;  ///< Offset: 0x14 - RTC Hour-Minute-Second Register
        volatile uint32_t ALARM0_DAY_SET_REG;  ///< Offset: 0x20 - Alarm 0 Day Setting Register
        volatile uint32_t ALARM0_CUR_VLU_REG;  ///< Offset: 0x24 - Alarm 0 Counter Current Value Register
        volatile uint32_t ALARM0_ENABLE_REG;  ///< Offset: 0x28 - Alarm 0 Enable Register
        volatile uint32_t ALARM0_IRQ_EN;  ///< Offset: 0x2C - Alarm 0 IRQ Enable Register
        volatile uint32_t ALARM0_IRQ_STA_REG;  ///< Offset: 0x30 - Alarm 0 IRQ Status Register
        volatile uint32_t ALARM_CONFIG_REG;  ///< Offset: 0x50 - Alarm Configuration Register
        volatile uint32_t _32K_FOUT_CTRL_GATING_REG;  ///< Offset: 0x60 - 32K Fanout Control Gating Register
        volatile uint32_t GP_DATA_REG%s;  ///< Offset: 0x100 - General Purpose Register
        volatile uint32_t FBOOT_INFO_REG0;  ///< Offset: 0x120 - Fast Boot Information Register0
        volatile uint32_t FBOOT_INFO_REG1;  ///< Offset: 0x124 - Fast Boot Information Register1
        volatile uint32_t DCXO_CTRL_REG;  ///< Offset: 0x160 - DCXO Control Register
        volatile uint32_t RTC_VIO_REG;  ///< Offset: 0x190 - RTC_VIO Regulation Register
        volatile uint32_t IC_CHARA_REG;  ///< Offset: 0x1F0 - IC Characteristic Register
        volatile uint32_t VDD_OFF_GATING_CTRL_REG;  ///< Offset: 0x1F4 - VDD Off Gating Control Register
        volatile uint32_t EFUSE_HV_PWRSWT_CTRL_REG;  ///< Offset: 0x204 - Efuse High Voltage Power Switch Control Register
        volatile uint32_t RTC_SPI_CLK_CTRL_REG;  ///< Offset: 0x310 - RTC SPI Clock Control Register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

}

// ============================================================================
// TCON Peripheral
// ============================================================================

namespace tcon {
    /// Base addresses
    constexpr uint32_t TCON_LCD0_BASE = 0x05461000;
    constexpr uint32_t TCON_TV0_BASE = 0x05470000;

    /// TCON Register structure
    struct Registers {
        volatile uint32_t LCD_GCTL_REG;  ///< Offset: 0x00 - LCD Global Control Register
        volatile uint32_t LCD_GINT0_REG;  ///< Offset: 0x04 - LCD Global Interrupt Register0
        volatile uint32_t LCD_GINT1_REG;  ///< Offset: 0x08 - LCD Global Interrupt Register1
        volatile uint32_t LCD_FRM_CTL_REG;  ///< Offset: 0x10 - LCD FRM Control Register
        volatile uint32_t LCD_FRM_SEED_REG%s;  ///< Offset: 0x14 - LCD FRM Seed Register
        volatile uint32_t LCD_FRM_TAB_REG%s;  ///< Offset: 0x2C - LCD FRM Table Register
        volatile uint32_t LCD_3D_FIFO_REG;  ///< Offset: 0x3C - LCD 3D FIFO Register
        volatile uint32_t LCD_CTL_REG;  ///< Offset: 0x40 - LCD Control Register
        volatile uint32_t LCD_DCLK_REG;  ///< Offset: 0x44 - LCD Data Clock Register
        volatile uint32_t LCD_BASIC0_REG;  ///< Offset: 0x48 - LCD Basic Timing Register0
        volatile uint32_t LCD_BASIC1_REG;  ///< Offset: 0x4C - LCD Basic Timing Register1
        volatile uint32_t LCD_BASIC2_REG;  ///< Offset: 0x50 - LCD Basic Timing Register2
        volatile uint32_t LCD_BASIC3_REG;  ///< Offset: 0x54 - LCD Basic Timing Register3
        volatile uint32_t LCD_HV_IF_REG;  ///< Offset: 0x58 - LCD HV Panel Interface Register
        volatile uint32_t LCD_CPU_IF_REG;  ///< Offset: 0x60 - LCD CPU Panel Interface Register
        volatile uint32_t LCD_CPU_WR_REG;  ///< Offset: 0x64 - LCD CPU Panel Write Data Register
        volatile uint32_t LCD_CPU_RD0_REG;  ///< Offset: 0x68 - LCD CPU Panel Read Data Register0
        volatile uint32_t LCD_CPU_RD1_REG;  ///< Offset: 0x6C - LCD CPU Panel Read Data Register1
        volatile uint32_t LCD_LVDS_IF_REG;  ///< Offset: 0x84 - LCD LVDS Configure Register
        volatile uint32_t LCD_IO_POL_REG;  ///< Offset: 0x88 - LCD IO Polarity Register
        volatile uint32_t LCD_IO_TRI_REG;  ///< Offset: 0x8C - LCD IO Control Register
        volatile uint32_t LCD_DEBUG_REG;  ///< Offset: 0xFC - LCD Debug Register
        volatile uint32_t LCD_CEU_CTL_REG;  ///< Offset: 0x100 - LCD CEU Control Register
        volatile uint32_t LCD_CEU_COEF_MUL_REG%s;  ///< Offset: 0x110 - LCD CEU Coefficient Register0
        volatile uint32_t LCD_CEU_COEF_ADD_REG%s;  ///< Offset: 0x11C - LCD CEU Coefficient Register1
        volatile uint32_t LCD_CEU_COEF_RANG_REG%s;  ///< Offset: 0x140 - LCD CEU Coefficient Register2
        volatile uint32_t LCD_CPU_TRI0_REG;  ///< Offset: 0x160 - LCD CPU Panel Trigger Register0
        volatile uint32_t LCD_CPU_TRI1_REG;  ///< Offset: 0x164 - LCD CPU Panel Trigger Register1
        volatile uint32_t LCD_CPU_TRI2_REG;  ///< Offset: 0x168 - LCD CPU Panel Trigger Register2
        volatile uint32_t LCD_CPU_TRI3_REG;  ///< Offset: 0x16C - LCD CPU Panel Trigger Register3
        volatile uint32_t LCD_CPU_TRI4_REG;  ///< Offset: 0x170 - LCD CPU Panel Trigger Register4
        volatile uint32_t LCD_CPU_TRI5_REG;  ///< Offset: 0x174 - LCD CPU Panel Trigger Register5
        volatile uint32_t LCD_CMAP_CTL_REG;  ///< Offset: 0x180 - LCD Color Map Control Register
        volatile uint32_t LCD_CMAP_ODD0_REG;  ///< Offset: 0x190 - LCD Color Map Odd Line Register0
        volatile uint32_t LCD_CMAP_ODD1_REG;  ///< Offset: 0x194 - LCD Color Map Odd Line Register1
        volatile uint32_t LCD_CMAP_EVEN0_REG;  ///< Offset: 0x198 - LCD Color Map Even Line Register0
        volatile uint32_t LCD_CMAP_EVEN1_REG;  ///< Offset: 0x19C - LCD Color Map Even Line Register1
        volatile uint32_t LCD_SAFE_PERIOD_REG;  ///< Offset: 0x1F0 - LCD Safe Period Register
        volatile uint32_t LCD_LVDS0_ANA_REG;  ///< Offset: 0x220 - LCD LVDS Analog Register 0
        volatile uint32_t LCD_LVDS1_ANA_REG;  ///< Offset: 0x224 - LCD LVDS Analog Register 1
        volatile uint32_t LCD_SYNC_CTL_REG;  ///< Offset: 0x230 - LCD Sync Control Register
        volatile uint32_t LCD_SYNC_POS_REG;  ///< Offset: 0x234 - LCD Sync Position Register
        volatile uint32_t LCD_SLAVE_STOP_POS_REG;  ///< Offset: 0x238 - LCD Slave Stop Position Register
        volatile uint32_t LCD_LVDS1_IF_REG;  ///< Offset: 0x244 - LCD LVDS1 IF Register
        volatile uint32_t LCD_GAMMA_TABLE_REG%s;  ///< Offset: 0x400 - LCD Gamma Table Register
    };

    /// Peripheral instances
    inline Registers* TCON_LCD0 = reinterpret_cast<Registers*>(TCON_LCD0_BASE);
    inline Registers* TCON_TV0 = reinterpret_cast<Registers*>(TCON_TV0_BASE);

}

// ============================================================================
// TVE Peripheral
// ============================================================================

namespace tve {
    /// Base addresses
    constexpr uint32_t TVE_TOP_BASE = 0x05600000;
    constexpr uint32_t TVE_BASE = 0x05604000;

    /// TVE Register structure
    struct Registers {
        volatile uint32_t TVE_DAC_MAP;  ///< Offset: 0x20 - TV Encoder DAC MAP Register
        volatile uint32_t TVE_DAC_STATUS;  ///< Offset: 0x24 - TV Encoder DAC STAUTS Register
        volatile uint32_t TVE_DAC_CFG0;  ///< Offset: 0x28 - TV Encoder DAC CFG0 Register
        volatile uint32_t TVE_DAC_CFG1;  ///< Offset: 0x2C - TV Encoder DAC CFG1 Register
        volatile uint32_t TVE_DAC_CFG2;  ///< Offset: 0x30 - TV Encoder DAC CFG2 Register
        volatile uint32_t TVE_DAC_CFG3;  ///< Offset: 0x34 - TV Encoder DAC CFG2 Register
        volatile uint32_t TVE_DAC_TEST;  ///< Offset: 0xF0 - TV Encoder DAC TEST Register
    };

    /// Peripheral instances
    inline Registers* TVE_TOP = reinterpret_cast<Registers*>(TVE_TOP_BASE);
    inline Registers* TVE = reinterpret_cast<Registers*>(TVE_BASE);

}

// ============================================================================
// CSIC Peripheral
// ============================================================================

namespace csic {
    /// Base addresses
    constexpr uint32_t CSIC_BASE = 0x05800000;

    /// CSIC Register structure
    struct Registers {
        volatile uint32_t CCU_CLK_MODE_REG;  ///< Offset: 0x00 - CCU Clock Mode Register
        volatile uint32_t CCU_PARSER_CLK_EN_REG;  ///< Offset: 0x04 - CCU Parser Clock Enable Register
        volatile uint32_t CCU_POST0_CLK_EN_REG;  ///< Offset: 0x0C - CCU Post0 Clock Enable Register
        volatile uint32_t CSIC_TOP_EN_REG;  ///< Offset: 0x00 - CSIC TOP Enable Register
        volatile uint32_t CSIC_PTN_GEN_EN_REG;  ///< Offset: 0x04 - CSIC Pattern Generation Enable Register
        volatile uint32_t CSIC_PTN_CTRL_REG;  ///< Offset: 0x08 - CSIC Pattern Control Register
        volatile uint32_t CSIC_PTN_LEN_REG;  ///< Offset: 0x20 - CSIC Pattern Generation Length Register
        volatile uint32_t CSIC_PTN_ADDR_REG;  ///< Offset: 0x24 - CSIC Pattern Generation Address Register
        volatile uint32_t CSIC_PTN_ISP_SIZE_REG;  ///< Offset: 0x28 - CSIC Pattern ISP Size Register
        volatile uint32_t CSIC_DMA0_INPUT_SEL_REG;  ///< Offset: 0xA0 - CSIC DMA0 Input Select Register
        volatile uint32_t CSIC_DMA1_INPUT_SEL_REG;  ///< Offset: 0xA4 - CSIC DMA1 Input Select Register
        volatile uint32_t CSIC_BIST_CS_REG;  ///< Offset: 0xDC - CSIC BIST CS Register
        volatile uint32_t CSIC_BIST_CONTROL_REG;  ///< Offset: 0xE0 - CSIC BIST Control Register
        volatile uint32_t CSIC_BIST_START_REG;  ///< Offset: 0xE4 - CSIC BIST Start Register
        volatile uint32_t CSIC_BIST_END_REG;  ///< Offset: 0xE8 - CSIC BIST End Register
        volatile uint32_t CSIC_BIST_DATA_MASK_REG;  ///< Offset: 0xEC - CSIC BIST Data Mask Register
        volatile uint32_t CSIC_MBUS_REQ_MAX_REG;  ///< Offset: 0xF0 - CSIC MBUS REQ MAX Register
        volatile uint32_t CSIC_MULF_MOD_REG;  ///< Offset: 0x100 - CSIC Multi-Frame Mode Register
        volatile uint32_t CSIC_MULF_INT_REG;  ///< Offset: 0x104 - CSIC Multi-Frame Interrupt Register
        volatile uint32_t PRS_EN_REG;  ///< Offset: 0x00 - Parser Enable Register
        volatile uint32_t PRS_NCSIC_IF_CFG_REG;  ///< Offset: 0x04 - Parser NCSIC Interface Configuration Register
        volatile uint32_t PRS_CAP_REG;  ///< Offset: 0x0C - Parser Capture Register
        volatile uint32_t CSIC_PRS_SIGNAL_STA_REG;  ///< Offset: 0x10 - CSIC Parser Signal Status Register
        volatile uint32_t CSIC_PRS_NCSIC_BT656_HEAD_CFG_REG;  ///< Offset: 0x14 - CSIC Parser NCSIC BT656 Header Configuration Register
        volatile uint32_t PRS_C0_INFMT_REG;  ///< Offset: 0x24 - Parser Channel_0 Input Format Register
        volatile uint32_t PRS_C0_OUTPUT_HSIZE_REG;  ///< Offset: 0x28 - Parser Channel_0 Output Horizontal Size Register
        volatile uint32_t PRS_C0_OUTPUT_VSIZE_REG;  ///< Offset: 0x2C - Parser Channel_0 Output Vertical Size Register
        volatile uint32_t PRS_C0_INPUT_PARA0_REG;  ///< Offset: 0x30 - Parser Channel_0 Input Parameter0 Register
        volatile uint32_t PRS_C0_INPUT_PARA1_REG;  ///< Offset: 0x34 - Parser Channel_0 Input Parameter1 Register
        volatile uint32_t PRS_C0_INPUT_PARA2_REG;  ///< Offset: 0x38 - Parser Channel_0 Input Parameter2 Register
        volatile uint32_t PRS_C0_INPUT_PARA3_REG;  ///< Offset: 0x3C - Parser Channel_0 Input Parameter3 Register
        volatile uint32_t PRS_C0_INT_EN_REG;  ///< Offset: 0x40 - Parser Channel_0 Interrupt Enable Register
        volatile uint32_t PRS_C0_INT_STA_REG;  ///< Offset: 0x44 - Parser Channel_0 Interrupt Status Register
        volatile uint32_t PRS_CH0_LINE_TIME_REG;  ///< Offset: 0x48 - Parser Channel_0 Line Time Register
        volatile uint32_t PRS_C1_INFMT_REG;  ///< Offset: 0x124 - Parser Channel_1 Input Format Register
        volatile uint32_t PRS_C1_OUTPUT_HSIZE_REG;  ///< Offset: 0x128 - Parser Channel_1 Output Horizontal Size
        volatile uint32_t PRS_C1_OUTPUT_VSIZE_REG;  ///< Offset: 0x12C - Parser Channel_1 Output Vertical Size Register
        volatile uint32_t PRS_C1_INPUT_PARA0_REG;  ///< Offset: 0x130 - Parser Channel_1 Input Parameter0 Register
        volatile uint32_t PRS_C1_INPUT_PARA1_REG;  ///< Offset: 0x134 - Parser Channel_1 Input Parameter1 Register
        volatile uint32_t PRS_C1_INPUT_PARA2_REG;  ///< Offset: 0x138 - Parser Channel_1 Input Parameter2 Register
        volatile uint32_t PRS_C1_INPUT_PARA3_REG;  ///< Offset: 0x13C - Parser Channel_1 Input Parameter3 Register
        volatile uint32_t PRS_C1_INT_EN_REG;  ///< Offset: 0x140 - Parser Channel_1 Interrupt Enable Register
        volatile uint32_t PRS_C1_INT_STA_REG;  ///< Offset: 0x144 - Parser Channel_1 Interrupt Status Register
        volatile uint32_t PRS_CH1_LINE_TIME_REG;  ///< Offset: 0x148 - Parser Channel_1 Line Time Register
        volatile uint32_t PRS_C2_INFMT_REG;  ///< Offset: 0x224 - Parser Channel_2 Input Format Register
        volatile uint32_t PRS_C2_OUTPUT_HSIZE_REG;  ///< Offset: 0x228 - Parser Channel_2 Output Horizontal Size Register
        volatile uint32_t PRS_C2_OUTPUT_VSIZE_REG;  ///< Offset: 0x22C - Parser Channel_2 Output Vertical Size Register
        volatile uint32_t PRS_C2_INPUT_PARA0_REG;  ///< Offset: 0x230 - Parser Channel_2 Input Parameter0 Register
        volatile uint32_t PRS_C2_INPUT_PARA1_REG;  ///< Offset: 0x234 - Parser Channel_2 Input Parameter1 Register
        volatile uint32_t PRS_C2_INPUT_PARA2_REG;  ///< Offset: 0x238 - Parser Channel_2 Input Parameter2 Register
        volatile uint32_t PRS_C2_INPUT_PARA3_REG;  ///< Offset: 0x23C - Parser Channel_2 Input Parameter3 Register
        volatile uint32_t PRS_C2_INT_EN_REG;  ///< Offset: 0x240 - Parser Channel_2 Interrupt Enable Register
        volatile uint32_t PRS_C2_INT_STA_REG;  ///< Offset: 0x244 - Parser Channel_2 Interrupt Status Register
        volatile uint32_t PRS_CH2_LINE_TIME_REG;  ///< Offset: 0x248 - Parser Channel_2 Line Time Register
        volatile uint32_t PRS_C3_INFMT_REG;  ///< Offset: 0x324 - Parser Channel_3 Input Format Register
        volatile uint32_t PRS_C3_OUTPUT_HSIZE_REG;  ///< Offset: 0x328 - Parser Channel_3 Output Horizontal Size Register
        volatile uint32_t PRS_C3_OUTPUT_VSIZE_REG;  ///< Offset: 0x32C - Parser Channel_3 Output Vertical Size Register
        volatile uint32_t PRS_C3_INPUT_PARA0_REG;  ///< Offset: 0x330 - Parser Channel_3 Input Parameter0 Register
        volatile uint32_t PRS_C3_INPUT_PARA1_REG;  ///< Offset: 0x334 - Parser Channel_3 Input Parameter1 Register
        volatile uint32_t PRS_C3_INPUT_PARA2_REG;  ///< Offset: 0x338 - Parser Channel_3 Input Parameter2 Register
        volatile uint32_t PRS_C3_INPUT_PARA3_REG;  ///< Offset: 0x33C - Parser Channel_3 Input Parameter3 Register
        volatile uint32_t PRS_C3_INT_EN_REG;  ///< Offset: 0x340 - Parser Channel_3 Interrupt Enable Register
        volatile uint32_t PRS_C3_INT_STA_REG;  ///< Offset: 0x344 - Parser Channel_3 Interrupt Status Register
        volatile uint32_t PRS_CH3_LINE_TIME_REG;  ///< Offset: 0x348 - Parser Channel_3 Line Time Register
        volatile uint32_t CSIC_PRS_NCSIC_RX_SIGNAL0_DLY_ADJ_REG;  ///< Offset: 0x500 - CSIC Parser NCSIC RX Signal0 Delay Adjust Register
        volatile uint32_t CSIC_PRS_NCSIC_RX_SIGNAL5_DLY_ADJ_REG;  ///< Offset: 0x514 - CSIC Parser NCSIC RX Signal5 Delay Adjust Register
        volatile uint32_t CSIC_PRS_NCSIC_RX_SIGNAL6_DLY_ADJ_REG;  ///< Offset: 0x518 - CSIC Parser NCSIC RX Signal6 Delay Adjust Register
        volatile uint32_t CSIC_DMA_EN_REG;  ///< Offset: 0x00 - CSIC DMA Enable Register
        volatile uint32_t CSIC_DMA_CFG_REG;  ///< Offset: 0x04 - CSIC DMA Configuration Register
        volatile uint32_t CSIC_DMA_HSIZE_REG;  ///< Offset: 0x10 - CSIC DMA Horizontal Size Register
        volatile uint32_t CSIC_DMA_VSIZE_REG;  ///< Offset: 0x14 - CSIC DMA Vertical Size Register
        volatile uint32_t CSIC_DMA_F0_BUFA_REG;  ///< Offset: 0x20 - CSIC DMA FIFO 0 Output Buffer-A Address Register
        volatile uint32_t CSIC_DMA_F0_BUFA_RESULT_REG;  ///< Offset: 0x24 - CSIC DMA FIFO 0 Output Buffer-A Address Result Register
        volatile uint32_t CSIC_DMA_F1_BUFA_REG;  ///< Offset: 0x28 - CSIC DMA FIFO 1 Output Buffer-A Address Register
        volatile uint32_t CSIC_DMA_F1_BUFA_RESULT_REG;  ///< Offset: 0x2C - CSIC DMA FIFO 1 Output Buffer-A Address Result Register
        volatile uint32_t CSIC_DMA_F2_BUFA_REG;  ///< Offset: 0x30 - CSIC DMA FIFO 2 Output Buffer-A Address Register
        volatile uint32_t CSIC_DMA_F2_BUFA_RESULT_REG;  ///< Offset: 0x34 - CSIC DMA FIFO 2 Output Buffer-A Address Result Register
        volatile uint32_t CSIC_DMA_BUF_LEN_REG;  ///< Offset: 0x38 - CSIC DMA Buffer Length Register
        volatile uint32_t CSIC_DMA_FLIP_SIZE_REG;  ///< Offset: 0x3C - CSIC DMA Flip Size Register
        volatile uint32_t CSIC_DMA_VI_TO_TH0_REG;  ///< Offset: 0x40 - CSIC DMA Video Input Timeout Threshold0 Register
        volatile uint32_t CSIC_DMA_VI_TO_TH1_REG;  ///< Offset: 0x44 - CSIC DMA Video Input Timeout Threshold1 Register
        volatile uint32_t CSIC_DMA_VI_TO_CNT_VAL_REG;  ///< Offset: 0x48 - CSIC DMA Video Input Timeout Counter Value Register
        volatile uint32_t CSIC_DMA_CAP_STA_REG;  ///< Offset: 0x4C - CSIC DMA Capture Status Register
        volatile uint32_t CSIC_DMA_INT_EN_REG;  ///< Offset: 0x50 - CSIC DMA Interrupt Enable Register
        volatile uint32_t CSIC_DMA_INT_STA_REG;  ///< Offset: 0x54 - CSIC DMA Interrupt Status Register
        volatile uint32_t CSIC_DMA_LINE_CNT_REG;  ///< Offset: 0x58 - CSIC DMA LINE Counter Register
        volatile uint32_t CSIC_DMA_FRM_CNT_REG;  ///< Offset: 0x5C - CSIC DMA Frame Counter Register
        volatile uint32_t CSIC_DMA_FRM_CLK_CNT_REG;  ///< Offset: 0x60 - CSIC DMA Frame Clock Counter Register
        volatile uint32_t CSIC_DMA_ACC_ITNL_CLK_CNT_REG;  ///< Offset: 0x64 - CSIC DMA Accumulated And Internal Clock Counter Register
        volatile uint32_t CSIC_DMA_FIFO_STAT_REG;  ///< Offset: 0x68 - CSIC DMA FIFO Statistic Register
        volatile uint32_t CSIC_DMA_FIFO_THRS_REG;  ///< Offset: 0x6C - CSIC DMA FIFO Threshold Register
        volatile uint32_t CSIC_DMA_PCLK_STAT_REG;  ///< Offset: 0x70 - CSIC DMA PCLK Statistic Register
        volatile uint32_t CSIC_DMA_BUF_ADDR_FIFO0_ENTRY_REG;  ///< Offset: 0x80 - CSIC DMA BUF Address FIFO0 Entry Register
        volatile uint32_t CSIC_DMA_BUF_ADDR_FIFO1_ENTRY_REG;  ///< Offset: 0x84 - CSIC DMA BUF Address FIFO1 Entry Register
        volatile uint32_t CSIC_DMA_BUF_ADDR_FIFO2_ENTRY_REG;  ///< Offset: 0x88 - CSIC DMA BUF Address FIFO2 Entry Register
        volatile uint32_t CSIC_DMA_BUF_TH_REG;  ///< Offset: 0x8C - CSIC DMA BUF Threshold Register
        volatile uint32_t CSIC_DMA_BUF_ADDR_FIFO_CON_REG;  ///< Offset: 0x90 - CSIC DMA BUF Address FIFO Content Register
        volatile uint32_t CSIC_DMA_STORED_FRM_CNT_REG;  ///< Offset: 0x94 - CSIC DMA Stored Frame Counter Register
        volatile uint32_t CSIC_FEATURE_REG;  ///< Offset: 0x1F4 - CSIC DMA Feature List Register
    };

    /// Peripheral instances
    inline Registers* CSIC = reinterpret_cast<Registers*>(CSIC_BASE);

}

// ============================================================================
// TVD Peripheral
// ============================================================================

namespace tvd {
    /// Base addresses
    constexpr uint32_t TVD_TOP_BASE = 0x05C00000;

    /// TVD Register structure
    struct Registers {
        volatile uint32_t TVD_TOP_MAP;  ///< Offset: 0x00 - TVD TOP MAP Register
        volatile uint32_t TVD_3D_CTL1;  ///< Offset: 0x08 - TVD 3D DMA CONTROL Register1
        volatile uint32_t TVD_3D_CTL2;  ///< Offset: 0x0C - TVD 3D DMA CONTROL Register2
        volatile uint32_t TVD_3D_CTL3;  ///< Offset: 0x10 - TVD 3D DMA CONTROL Register3
        volatile uint32_t TVD_3D_CTL4;  ///< Offset: 0x14 - TVD 3D DMA CONTROL Register4
        volatile uint32_t TVD_3D_CTL5;  ///< Offset: 0x18 - TVD 3D DMA CONTROL Register5
        volatile uint32_t TVD_TOP_CTL%s;  ///< Offset: 0x24 - TVD TOP CONTROL Register
        volatile uint32_t TVD_ADC_CTL%s;  ///< Offset: 0x28 - TVD ADC CONTROL Register
        volatile uint32_t TVD_ADC_CFG%s;  ///< Offset: 0x2C - TVD ADC CONFIGURATION Register
    };

    /// Peripheral instances
    inline Registers* TVD_TOP = reinterpret_cast<Registers*>(TVD_TOP_BASE);

}

// ============================================================================
// TVD0 Peripheral
// ============================================================================

namespace tvd0 {
    /// Base addresses
    constexpr uint32_t TVD0_BASE = 0x05C01000;

    /// TVD0 Register structure
    struct Registers {
        volatile uint32_t TVD_EN;  ///< Offset: 0x00 - TVD MODULE CONTROL Register
        volatile uint32_t TVD_MODE;  ///< Offset: 0x04 - TVD MODE CONTROL Register
        volatile uint32_t TVD_CLAMP_AGC1;  ///< Offset: 0x08 - TVD CLAMP And AGC CONTROL Register1
        volatile uint32_t TVD_CLAMP_AGC2;  ///< Offset: 0x0C - TVD CLAMP And AGC CONTROL Register2
        volatile uint32_t TVD_HLOCK1;  ///< Offset: 0x10 - TVD HLOCK CONTROL Register1
        volatile uint32_t TVD_HLOCK2;  ///< Offset: 0x14 - TVD HLOCK CONTROL Register2
        volatile uint32_t TVD_HLOCK3;  ///< Offset: 0x18 - TVD HLOCK CONTROL Register3
        volatile uint32_t TVD_HLOCK4;  ///< Offset: 0x1C - TVD HLOCK CONTROL Register4
        volatile uint32_t TVD_HLOCK5;  ///< Offset: 0x20 - TVD HLOCK CONTROL Register5
        volatile uint32_t TVD_VLOCK1;  ///< Offset: 0x24 - TVD VLOCK CONTROL Register1
        volatile uint32_t TVD_VLOCK2;  ///< Offset: 0x28 - TVD VLOCK CONTROL Register2
        volatile uint32_t TVD_CLOCK1;  ///< Offset: 0x30 - TVD CHROMA LOCK CONTROL Register1
        volatile uint32_t TVD_CLOCK2;  ///< Offset: 0x34 - TVD CHROMA LOCK CONTROL Register2
        volatile uint32_t TVD_YC_SEP1;  ///< Offset: 0x40 - TVD YC SEPERATION CONROL Register1
        volatile uint32_t TVD_YC_SEP2;  ///< Offset: 0x44 - TVD YC SEPERATION CONROL Register2
        volatile uint32_t TVD_ENHANCE1;  ///< Offset: 0x50 - TVD ENHANCEMENT CONTROL Register1
        volatile uint32_t TVD_ENHANCE2;  ///< Offset: 0x54 - TVD ENHANCEMENT CONTROL Register2
        volatile uint32_t TVD_ENHANCE3;  ///< Offset: 0x58 - TVD ENHANCEMENT CONTROL Register3
        volatile uint32_t TVD_WB1;  ///< Offset: 0x60 - TVD WB DMA CONTROL Register1
        volatile uint32_t TVD_WB2;  ///< Offset: 0x64 - TVD WB DMA CONTROL Register2
        volatile uint32_t TVD_WB3;  ///< Offset: 0x68 - TVD WB DMA CONTROL Register3
        volatile uint32_t TVD_WB4;  ///< Offset: 0x6C - TVD WB DMA CONTROL Register4
        volatile uint32_t TVD_IRQ_CTL;  ///< Offset: 0x80 - TVD DMA Interrupt Control Register
        volatile uint32_t TVD_IRQ_STATUS;  ///< Offset: 0x90 - TVD DMA Interrupt Status Register
        volatile uint32_t TVD_DEBUG1;  ///< Offset: 0x100 - TVD DEBUG CONTROL Register1
        volatile uint32_t TVD_STATUS1;  ///< Offset: 0x180 - TVD DEBUG STATUS Register1
        volatile uint32_t TVD_STATUS2;  ///< Offset: 0x184 - TVD DEBUG STATUS Register2
        volatile uint32_t TVD_STATUS3;  ///< Offset: 0x188 - TVD DEBUG STATUS Register3
        volatile uint32_t TVD_STATUS4;  ///< Offset: 0x18C - TVD DEBUG STATUS Register4
        volatile uint32_t TVD_STATUS5;  ///< Offset: 0x190 - TVD DEBUG STATUS Register5
        volatile uint32_t TVD_STATUS6;  ///< Offset: 0x194 - TVD DEBUG STATUS Register6
    };

    /// Peripheral instances
    inline Registers* TVD0 = reinterpret_cast<Registers*>(TVD0_BASE);

}

// ============================================================================
// SMHC Peripheral
// ============================================================================

namespace smhc {
    /// Base addresses
    constexpr uint32_t SMHC[%s]_BASE = 0x04020000;

    /// SMHC Register structure
    struct Registers {
        volatile uint32_t SMHC_CTRL;  ///< Offset: 0x00 - Control Register
        volatile uint32_t SMHC_CLKDIV;  ///< Offset: 0x04 - Clock Control Register
        volatile uint32_t SMHC_TMOUT;  ///< Offset: 0x08 - Time Out Register
        volatile uint32_t SMHC_CTYPE;  ///< Offset: 0x0C - Bus Width Register
        volatile uint32_t SMHC_BLKSIZ;  ///< Offset: 0x10 - Block Size Register
        volatile uint32_t SMHC_BYTCNT;  ///< Offset: 0x14 - Byte Count Register
        volatile uint32_t SMHC_CMD;  ///< Offset: 0x18 - Command Register
        volatile uint32_t SMHC_CMDARG;  ///< Offset: 0x1C - Command Argument Register
        volatile uint32_t SMHC_RESP0;  ///< Offset: 0x20 - Response 0 Register
        volatile uint32_t SMHC_RESP1;  ///< Offset: 0x24 - Response 1 Register
        volatile uint32_t SMHC_RESP2;  ///< Offset: 0x28 - Response 2 Register
        volatile uint32_t SMHC_RESP3;  ///< Offset: 0x2C - Response 3 Register
        volatile uint32_t SMHC_INTMASK;  ///< Offset: 0x30 - Interrupt Mask Register
        volatile uint32_t SMHC_MINTSTS;  ///< Offset: 0x34 - Masked Interrupt Status Register
        volatile uint32_t SMHC_RINTSTS;  ///< Offset: 0x38 - Raw Interrupt Status Register
        volatile uint32_t SMHC_STATUS;  ///< Offset: 0x3C - Status Register
        volatile uint32_t SMHC_FIFOTH;  ///< Offset: 0x40 - FIFO Water Level Register
        volatile uint32_t SMHC_FUNS;  ///< Offset: 0x44 - FIFO Function Select Register
        volatile uint32_t SMHC_TBC0;  ///< Offset: 0x48 - Transferred Byte Count between Controller and Card
        volatile uint32_t SMHC_TBC1;  ///< Offset: 0x4C - Transferred Byte Count between Host Memory and Internal FIFO
        volatile uint32_t SMHC_DBGC;  ///< Offset: 0x50 - Current Debug Control Register
        volatile uint32_t SMHC_CSDC;  ///< Offset: 0x54 - CRC Status Detect Control Registers
        volatile uint32_t SMHC_A12A;  ///< Offset: 0x58 - Auto Command 12 Argument Register
        volatile uint32_t SMHC_NTSR;  ///< Offset: 0x5C - SD New Timing Set Register
        volatile uint32_t SMHC_HWRST;  ///< Offset: 0x78 - Hardware Reset Register
        volatile uint32_t SMHC_IDMAC;  ///< Offset: 0x80 - IDMAC Control Register
        volatile uint32_t SMHC_DLBA;  ///< Offset: 0x84 - Descriptor List Base Address Register
        volatile uint32_t SMHC_IDST;  ///< Offset: 0x88 - IDMAC Status Register
        volatile uint32_t SMHC_IDIE;  ///< Offset: 0x8C - IDMAC Interrupt Enable Register
        volatile uint32_t SMHC_THLD;  ///< Offset: 0x100 - Card Threshold Control Register
        volatile uint32_t SMHC_SFC;  ///< Offset: 0x104 - Sample FIFO Control Register
        volatile uint32_t SMHC_A23A;  ///< Offset: 0x108 - Auto Command 23 Argument Register
        volatile uint32_t EMMC_DDR_SBIT_DET;  ///< Offset: 0x10C - eMMC4.5 DDR Start Bit Detection Control Register
        volatile uint32_t SMHC_EXT_CMD;  ///< Offset: 0x138 - Extended Command Register
        volatile uint32_t SMHC_EXT_RESP;  ///< Offset: 0x13C - Extended Response Register
        volatile uint32_t SMHC_DRV_DL;  ///< Offset: 0x140 - Drive Delay Control Register
        volatile uint32_t SMHC_SMAP_DL;  ///< Offset: 0x144 - Sample Delay Control Register
        volatile uint32_t SMHC_DS_DL;  ///< Offset: 0x148 - Data Strobe Delay Control Register
        volatile uint32_t SMHC_HS400_DL;  ///< Offset: 0x14C - HS400 Delay Control Register
        volatile uint32_t SMHC_FIFO;  ///< Offset: 0x200 - Read/Write FIFO
    };

    /// Peripheral instances
    inline Registers* SMHC[%s] = reinterpret_cast<Registers*>(SMHC[%s]_BASE);

}

// ============================================================================
// I2S Peripheral
// ============================================================================

namespace i2s {
    /// Base addresses
    constexpr uint32_t I2S_PCM[%s]_BASE = 0x02032000;

    /// I2S Register structure
    struct Registers {
        volatile uint32_t I2S_PCM_CTL;  ///< Offset: 0x00 - I2S/PCM Control Register
        volatile uint32_t I2S_PCM_FMT0;  ///< Offset: 0x04 - I2S/PCM Format Register 0
        volatile uint32_t I2S_PCM_FMT1;  ///< Offset: 0x08 - I2S/PCM Format Register 1
        volatile uint32_t I2S_PCM_ISTA;  ///< Offset: 0x0C - I2S/PCM Interrupt Status Register
        volatile uint32_t I2S_PCM_RXFIFO;  ///< Offset: 0x10 - I2S/PCM RXFIFO Register
        volatile uint32_t I2S_PCM_FCTL;  ///< Offset: 0x14 - I2S/PCM FIFO Control Register
        volatile uint32_t I2S_PCM_FSTA;  ///< Offset: 0x18 - I2S/PCM FIFO Status Register
        volatile uint32_t I2S_PCM_INT;  ///< Offset: 0x1C - I2S/PCM DMA and Interrupt Control Register
        volatile uint32_t I2S_PCM_TXFIFO;  ///< Offset: 0x20 - I2S/PCM TXFIFO Register
        volatile uint32_t I2S_PCM_CLKD;  ///< Offset: 0x24 - I2S/PCM Clock Divide Register
        volatile uint32_t I2S_PCM_TXCNT;  ///< Offset: 0x28 - I2S/PCM TX Sample Counter Register
        volatile uint32_t I2S_PCM_RXCNT;  ///< Offset: 0x2C - I2S/PCM RX Sample Counter Register
        volatile uint32_t I2S_PCM_CHCFG;  ///< Offset: 0x30 - I2S/PCM Channel Configuration Register
        volatile uint32_t I2S_PCM_TX0CHSEL;  ///< Offset: 0x34 - I2S/PCM TX0 Channel Select Register
        volatile uint32_t I2S_PCM_TX1CHSEL;  ///< Offset: 0x38 - I2S/PCM TX1 Channel Select Register
        volatile uint32_t I2S_PCM_TX2CHSEL;  ///< Offset: 0x3C - I2S/PCM TX2 Channel Select Register
        volatile uint32_t I2S_PCM_TX3CHSEL;  ///< Offset: 0x40 - I2S/PCM TX3 Channel Select Register
        volatile uint32_t I2S_PCM_TX0CHMAP0;  ///< Offset: 0x44 - I2S/PCM TX0 Channel Mapping Register0
        volatile uint32_t I2S_PCM_TX0CHMAP1;  ///< Offset: 0x48 - I2S/PCM TX0 Channel Mapping Register1
        volatile uint32_t I2S_PCM_TX1CHMAP0;  ///< Offset: 0x4C - I2S/PCM TX1 Channel Mapping Register0
        volatile uint32_t I2S_PCM_TX1CHMAP1;  ///< Offset: 0x50 - I2S/PCM TX1 Channel Mapping Register1
        volatile uint32_t I2S_PCM_TX2CHMAP0;  ///< Offset: 0x54 - I2S/PCM TX2 Channel Mapping Register0
        volatile uint32_t I2S_PCM_TX2CHMAP1;  ///< Offset: 0x58 - I2S/PCM TX2 Channel Mapping Register1
        volatile uint32_t I2S_PCM_TX3CHMAP0;  ///< Offset: 0x5C - I2S/PCM TX3 Channel Mapping Register0
        volatile uint32_t I2S_PCM_TX3CHMAP1;  ///< Offset: 0x60 - I2S/PCM TX3 Channel Mapping Register1
        volatile uint32_t I2S_PCM_RXCHSEL;  ///< Offset: 0x64 - I2S/PCM RX Channel Select Register
        volatile uint32_t I2S_PCM_RXCHMAP0;  ///< Offset: 0x68 - I2S/PCM RX Channel Mapping Register0
        volatile uint32_t I2S_PCM_RXCHMAP1;  ///< Offset: 0x6C - I2S/PCM RX Channel Mapping Register1
        volatile uint32_t I2S_PCM_RXCHMAP2;  ///< Offset: 0x70 - I2S/PCM RX Channel Mapping Register2
        volatile uint32_t I2S_PCM_RXCHMAP3;  ///< Offset: 0x74 - I2S/PCM RX Channel Mapping Register3
        volatile uint32_t MCLKCFG;  ///< Offset: 0x80 - ASRC MCLK Configuration Register
        volatile uint32_t FsoutCFG;  ///< Offset: 0x84 - ASRC Out Sample Rate Configuration Register
        volatile uint32_t FsinEXTCFG;  ///< Offset: 0x88 - ASRC Input Sample Pulse Extend Configuration Register
        volatile uint32_t ASRCCFG;  ///< Offset: 0x8C - ASRC Enable Register
        volatile uint32_t ASRCMANCFG;  ///< Offset: 0x90 - ASRC Manual Ratio Configuration Register
        volatile uint32_t ASRCRATIOSTAT;  ///< Offset: 0x94 - ASRC Status Register
        volatile uint32_t ASRCFIFOSTAT;  ///< Offset: 0x98 - ASRC FIFO Level Status Register
        volatile uint32_t ASRCMBISTCFG;  ///< Offset: 0x9C - ASRC MBIST Test Configuration Register
        volatile uint32_t ASRCMBISTSTAT;  ///< Offset: 0xA0 - ASRC MBIST Test Status Register
    };

    /// Peripheral instances
    inline Registers* I2S_PCM[%s] = reinterpret_cast<Registers*>(I2S_PCM[%s]_BASE);

}

// ============================================================================
// DMIC Peripheral
// ============================================================================

namespace dmic {
    /// Base addresses
    constexpr uint32_t DMIC_BASE = 0x02031000;

    /// DMIC Register structure
    struct Registers {
        volatile uint32_t DMIC_EN;  ///< Offset: 0x00 - DMIC Enable Control Register
        volatile uint32_t DMIC_SR;  ///< Offset: 0x04 - DMIC Sample Rate Register
        volatile uint32_t DMIC_CTR;  ///< Offset: 0x08 - DMIC Control Register
        volatile uint32_t DMIC_DATA;  ///< Offset: 0x10 - DMIC Data Register
        volatile uint32_t DMIC_INTC;  ///< Offset: 0x14 - DMIC Interrupt Control Register
        volatile uint32_t DMIC_INTS;  ///< Offset: 0x18 - DMIC Interrupt Status Register
        volatile uint32_t DMIC_RXFIFO_CTR;  ///< Offset: 0x1C - DMIC RXFIFO Control Register
        volatile uint32_t DMIC_RXFIFO_STA;  ///< Offset: 0x20 - DMIC RXFIFO Status Register
        volatile uint32_t DMIC_CH_NUM;  ///< Offset: 0x24 - DMIC Channel Numbers Register
        volatile uint32_t DMIC_CH_MAP;  ///< Offset: 0x28 - DMIC Channel Mapping Register
        volatile uint32_t DMIC_CNT;  ///< Offset: 0x2C - DMIC Counter Register
        volatile uint32_t DATA0_DATA1_VOL_CTR;  ///< Offset: 0x30 - Data0 and Data1 Volume Control Register
        volatile uint32_t DATA2_DATA3_VOL_CTR;  ///< Offset: 0x34 - Data2 And Data3 Volume Control Register
        volatile uint32_t HPF_EN_CTR;  ///< Offset: 0x38 - High Pass Filter Enable Control Register
        volatile uint32_t HPF_COEF_REG;  ///< Offset: 0x3C - High Pass Filter Coefficient Register
        volatile uint32_t HPF_GAIN_REG;  ///< Offset: 0x40 - High Pass Filter Gain Register
    };

    /// Peripheral instances
    inline Registers* DMIC = reinterpret_cast<Registers*>(DMIC_BASE);

}

// ============================================================================
// OWA Peripheral
// ============================================================================

namespace owa {
    /// Base addresses
    constexpr uint32_t OWA_BASE = 0x02036000;

    /// OWA Register structure
    struct Registers {
        volatile uint32_t OWA_GEN_CTL;  ///< Offset: 0x00 - OWA General Control Register
        volatile uint32_t OWA_TX_CFIG;  ///< Offset: 0x04 - OWA TX Configuration Register
        volatile uint32_t OWA_RX_CFIG;  ///< Offset: 0x08 - OWA RX Configuration Register
        volatile uint32_t OWA_ISTA;  ///< Offset: 0x0C - OWA Interrupt Status Register
        volatile uint32_t OWA_RXFIFO;  ///< Offset: 0x10 - OWA RXFIFO Register
        volatile uint32_t OWA_FCTL;  ///< Offset: 0x14 - OWA FIFO Control Register
        volatile uint32_t OWA_FSTA;  ///< Offset: 0x18 - OWA FIFO Status Register
        volatile uint32_t OWA_INT;  ///< Offset: 0x1C - OWA Interrupt Control Register
        volatile uint32_t OWA_TX_FIFO;  ///< Offset: 0x20 - OWA TX FIFO Register
        volatile uint32_t OWA_TX_CNT;  ///< Offset: 0x24 - OWA TX Counter Register
        volatile uint32_t OWA_RX_CNT;  ///< Offset: 0x28 - OWA RX Counter Register
        volatile uint32_t OWA_TX_CHSTA0;  ///< Offset: 0x2C - OWA TX Channel Status Register0
        volatile uint32_t OWA_TX_CHSTA1;  ///< Offset: 0x30 - OWA TX Channel Status Register1
        volatile uint32_t OWA_RXCHSTA0;  ///< Offset: 0x34 - OWA RX Channel Status Register0
        volatile uint32_t OWA_RXCHSTA1;  ///< Offset: 0x38 - OWA RX Channel Status Register1
        volatile uint32_t OWA_EXP_CTL;  ///< Offset: 0x40 - OWA Expand Control Register
        volatile uint32_t OWA_EXP_ISTA;  ///< Offset: 0x44 - OWA Expand Interrupt Status Register
        volatile uint32_t OWA_EXP_INFO_0;  ///< Offset: 0x48 - OWA Expand Infomation Register0
        volatile uint32_t OWA_EXP_INFO_1;  ///< Offset: 0x4C - OWA Expand Infomation Register1
        volatile uint32_t OWA_EXP_DBG_0;  ///< Offset: 0x50 - OWA Expand Debug Register0
        volatile uint32_t OWA_EXP_DBG_1;  ///< Offset: 0x54 - OWA Expand Debug Register1
    };

    /// Peripheral instances
    inline Registers* OWA = reinterpret_cast<Registers*>(OWA_BASE);

}

// ============================================================================
// AudioCodec Peripheral
// ============================================================================

namespace audiocodec {
    /// Base addresses
    constexpr uint32_t AudioCodec_BASE = 0x02030000;

    /// AudioCodec Register structure
    struct Registers {
        volatile uint32_t AC_DAC_DPC;  ///< Offset: 0x00 - DAC Digital Part Control Register
        volatile uint32_t DAC_VOL_CTRL;  ///< Offset: 0x04 - DAC Volume Control Register
        volatile uint32_t AC_DAC_FIFOC;  ///< Offset: 0x10 - DAC FIFO Control Register
        volatile uint32_t AC_DAC_FIFOS;  ///< Offset: 0x14 - DAC FIFO Status Register
        volatile uint32_t AC_DAC_TXDATA;  ///< Offset: 0x20 - DAC TX DATA Register
        volatile uint32_t AC_DAC_CNT;  ///< Offset: 0x24 - DAC TX FIFO Counter Register
        volatile uint32_t AC_DAC_DG;  ///< Offset: 0x28 - DAC Debug Register
        volatile uint32_t AC_ADC_FIFOC;  ///< Offset: 0x30 - ADC FIFO Control Register
        volatile uint32_t ADC_VOL_CTRL1;  ///< Offset: 0x34 - ADC Volume Control1 Register
        volatile uint32_t AC_ADC_FIFOS;  ///< Offset: 0x38 - ADC FIFO Status Register
        volatile uint32_t AC_ADC_RXDATA;  ///< Offset: 0x40 - ADC RX Data Register
        volatile uint32_t AC_ADC_CNT;  ///< Offset: 0x44 - ADC RX Counter Register
        volatile uint32_t AC_ADC_DG;  ///< Offset: 0x4C - ADC Debug Register
        volatile uint32_t ADC_DIG_CTRL;  ///< Offset: 0x50 - ADC Digtial Control Register
        volatile uint32_t VRA1SPEEDUP_DOWN_CTRL;  ///< Offset: 0x54 - VRA1 Speedup Down Control Register
        volatile uint32_t AC_DAC_DAP_CTRL;  ///< Offset: 0xF0 - DAC DAP Control Register
        volatile uint32_t AC_ADC_DAP_CTR;  ///< Offset: 0xF8 - ADC DAP Control Register
        volatile uint32_t AC_DAC_DRC_HHPFC;  ///< Offset: 0x100 - DAC DRC High HPF Coef Register
        volatile uint32_t AC_DAC_DRC_LHPFC;  ///< Offset: 0x104 - DAC DRC Low HPF Coef Register
        volatile uint32_t AC_DAC_DRC_CTRL;  ///< Offset: 0x108 - DAC DRC Control Register
        volatile uint32_t AC_DAC_DRC_LPFHAT;  ///< Offset: 0x10C - DAC DRC Left Peak Filter High Attack Time Coef Register
        volatile uint32_t AC_DAC_DRC_LPFLAT;  ///< Offset: 0x110 - DAC DRC Left Peak Filter Low Attack Time Coef Register
        volatile uint32_t AC_DAC_DRC_RPFHAT;  ///< Offset: 0x114 - DAC DRC Right Peak Filter High Attack Time Coef Register
        volatile uint32_t AC_DAC_DRC_RPFLAT;  ///< Offset: 0x118 - DAC DRC Peak Filter Low Attack Time Coef Register
        volatile uint32_t AC_DAC_DRC_LPFHRT;  ///< Offset: 0x11C - DAC DRC Left Peak Filter High Release Time Coef Register
        volatile uint32_t AC_DAC_DRC_LPFLRT;  ///< Offset: 0x120 - DAC DRC Left Peak Filter Low Release Time Coef Register
        volatile uint32_t AC_DAC_DRC_RPFHRT;  ///< Offset: 0x124 - DAC DRC Right Peak filter High Release Time Coef Register
        volatile uint32_t AC_DAC_DRC_RPFLRT;  ///< Offset: 0x128 - DAC DRC Right Peak filter Low Release Time Coef Register
        volatile uint32_t AC_DAC_DRC_LRMSHAT;  ///< Offset: 0x12C - DAC DRC Left RMS Filter High Coef Register
        volatile uint32_t AC_DAC_DRC_LRMSLAT;  ///< Offset: 0x130 - DAC DRC Left RMS Filter Low Coef Register
        volatile uint32_t AC_DAC_DRC_RRMSHAT;  ///< Offset: 0x134 - DAC DRC Right RMS Filter High Coef Register
        volatile uint32_t AC_DAC_DRC_RRMSLAT;  ///< Offset: 0x138 - DAC DRC Right RMS Filter Low Coef Register
        volatile uint32_t AC_DAC_DRC_HCT;  ///< Offset: 0x13C - DAC DRC Compressor Threshold High Setting Register
        volatile uint32_t AC_DAC_DRC_LCT;  ///< Offset: 0x140 - DAC DRC Compressor Slope High Setting Register
        volatile uint32_t AC_DAC_DRC_HKC;  ///< Offset: 0x144 - DAC DRC Compressor Slope High Setting Register
        volatile uint32_t AC_DAC_DRC_LKC;  ///< Offset: 0x148 - DAC DRC Compressor Slope Low Setting Register
        volatile uint32_t AC_DAC_DRC_HOPC;  ///< Offset: 0x14C - DAC DRC Compressor High Output at Compressor Threshold Register
        volatile uint32_t AC_DAC_DRC_LOPC;  ///< Offset: 0x150 - DAC DRC Compressor Low Output at Compressor Threshold Register
        volatile uint32_t AC_DAC_DRC_HLT;  ///< Offset: 0x154 - DAC DRC Limiter Threshold High Setting Register
        volatile uint32_t AC_DAC_DRC_LLT;  ///< Offset: 0x158 - DAC DRC Limiter Threshold Low Setting Register
        volatile uint32_t AC_DAC_DRC_HKl;  ///< Offset: 0x15C - DAC DRC Limiter Slope High Setting Register
        volatile uint32_t AC_DAC_DRC_LKl;  ///< Offset: 0x160 - DAC DRC Limiter Slope Low Setting Register
        volatile uint32_t AC_DAC_DRC_HOPL;  ///< Offset: 0x164 - DAC DRC Limiter High Output at Limiter Threshold
        volatile uint32_t AC_DAC_DRC_LOPL;  ///< Offset: 0x168 - DAC DRC Limiter Low Output at Limiter Threshold
        volatile uint32_t AC_DAC_DRC_HET;  ///< Offset: 0x16C - DAC DRC Expander Threshold High Setting Register
        volatile uint32_t AC_DAC_DRC_LET;  ///< Offset: 0x170 - DAC DRC Expander Threshold Low Setting Register
        volatile uint32_t AC_DAC_DRC_HKE;  ///< Offset: 0x174 - DAC DRC Expander Slope High Setting Register
        volatile uint32_t AC_DAC_DRC_LKE;  ///< Offset: 0x178 - DAC DRC Expander Slope Low Setting Register
        volatile uint32_t AC_DAC_DRC_HOPE;  ///< Offset: 0x17C - DAC DRC Expander High Output at Expander Threshold
        volatile uint32_t AC_DAC_DRC_LOPE;  ///< Offset: 0x180 - DAC DRC Expander Low Output at Expander Threshold
        volatile uint32_t AC_DAC_DRC_HKN;  ///< Offset: 0x184 - DAC DRC Linear Slope High Setting Register
        volatile uint32_t AC_DAC_DRC_LKN;  ///< Offset: 0x188 - DAC DRC Linear Slope Low Setting Register
        volatile uint32_t AC_DAC_DRC_SFHAT;  ///< Offset: 0x18C - DAC DRC Smooth filter Gain High Attack Time Coef Register
        volatile uint32_t AC_DAC_DRC_SFLAT;  ///< Offset: 0x190 - DAC DRC Smooth filter Gain Low Attack Time Coef Register
        volatile uint32_t AC_DAC_DRC_SFHRT;  ///< Offset: 0x194 - DAC DRC Smooth filter Gain High Release Time Coef Register
        volatile uint32_t AC_DAC_DRC_SFLRT;  ///< Offset: 0x198 - DAC DRC Smooth filter Gain Low Release Time Coef Register
        volatile uint32_t AC_DAC_DRC_MXGHS;  ///< Offset: 0x19C - DAC DRC MAX Gain High Setting Register
        volatile uint32_t AC_DAC_DRC_MXGLS;  ///< Offset: 0x1A0 - DAC DRC MAX Gain Low Setting Register
        volatile uint32_t AC_DAC_DRC_MNGHS;  ///< Offset: 0x1A4 - DAC DRC MIN Gain High Setting Register
        volatile uint32_t AC_DAC_DRC_MNGLS;  ///< Offset: 0x1A8 - DAC DRC MIN Gain Low Setting Register
        volatile uint32_t AC_DAC_DRC_EPSHC;  ///< Offset: 0x1AC - DAC DRC Expander Smooth Time High Coef Register
        volatile uint32_t AC_DAC_DRC_EPSLC;  ///< Offset: 0x1B0 - DAC DRC Expander Smooth Time Low Coef Register
        volatile uint32_t AC_DAC_DRC_HPFHGAIN;  ///< Offset: 0x1B8 - DAC DRC HPF Gain High Coef Register
        volatile uint32_t AC_DAC_DRC_HPFLGAIN;  ///< Offset: 0x1BC - DAC DRC HPF Gain Low Coef Register
        volatile uint32_t AC_ADC_DRC_HHPFC;  ///< Offset: 0x200 - ADC DRC High HPF Coef Register
        volatile uint32_t AC_ADC_DRC_LHPFC;  ///< Offset: 0x204 - ADC DRC Low HPF Coef Register
        volatile uint32_t AC_ADC_DRC_CTRL;  ///< Offset: 0x208 - ADC DRC Control Register
        volatile uint32_t AC_ADC_DRC_LPFHAT;  ///< Offset: 0x20C - ADC DRC Left Peak Filter High Attack Time Coef Register
        volatile uint32_t AC_ADC_DRC_LPFLAT;  ///< Offset: 0x210 - ADC DRC Left Peak Filter Low Attack Time Coef Register
        volatile uint32_t AC_ADC_DRC_RPFHAT;  ///< Offset: 0x214 - ADC DRC Right Peak Filter High Attack Time Coef Register
        volatile uint32_t AC_ADC_DRC_RPFLAT;  ///< Offset: 0x218 - ADC DRC Right Peak Filter Low Attack Time Coef Register
        volatile uint32_t AC_ADC_DRC_LPFHRT;  ///< Offset: 0x21C - ADC DRC Left Peak Filter High Release Time Coef Register
        volatile uint32_t AC_ADC_DRC_LPFLRT;  ///< Offset: 0x220 - ADC DRC Left Peak Filter Low Release Time Coef Register
        volatile uint32_t AC_ADC_DRC_RPFHRT;  ///< Offset: 0x224 - ADC DRC Right Peak Filter High Release Time Coef Register
        volatile uint32_t AC_ADC_DRC_RPFLRT;  ///< Offset: 0x228 - ADC DRC Right Peak Filter Low Release Time Coef Register
        volatile uint32_t AC_ADC_DRC_LRMSHAT;  ///< Offset: 0x22C - ADC DRC Left RMS Filter High Coef Register
        volatile uint32_t AC_ADC_DRC_LRMSLAT;  ///< Offset: 0x230 - ADC DRC Left RMS Filter Low Coef Register
        volatile uint32_t AC_ADC_DRC_RRMSHAT;  ///< Offset: 0x234 - ADC DRC Right RMS Filter High Coef Register
        volatile uint32_t AC_ADC_DRC_RRMSLAT;  ///< Offset: 0x238 - ADC DRC Right RMS Filter Low Coef Register
        volatile uint32_t AC_ADC_DRC_HCT;  ///< Offset: 0x23C - ADC DRC Compressor Threshold High Setting Register
        volatile uint32_t AC_ADC_DRC_LCT;  ///< Offset: 0x240 - ADC DRC Compressor Slope High Setting Register
        volatile uint32_t AC_ADC_DRC_HKC;  ///< Offset: 0x244 - ADC DRC Compressor Slope High Setting Register
        volatile uint32_t AC_ADC_DRC_LKC;  ///< Offset: 0x248 - ADC DRC Compressor Slope Low Setting Register
        volatile uint32_t AC_ADC_DRC_HOPC;  ///< Offset: 0x24C - ADC DRC Compressor High Output at Compressor Threshold Register
        volatile uint32_t AC_ADC_DRC_LOPC;  ///< Offset: 0x250 - ADC DRC Compressor Low Output at Compressor Threshold Register
        volatile uint32_t AC_ADC_DRC_HLT;  ///< Offset: 0x254 - ADC DRC Limiter Threshold High Setting Register
        volatile uint32_t AC_ADC_DRC_LLT;  ///< Offset: 0x258 - ADC DRC Limiter Threshold Low Setting Register
        volatile uint32_t AC_ADC_DRC_HKl;  ///< Offset: 0x25C - ADC DRC Limiter Slope High Setting Register
        volatile uint32_t AC_ADC_DRC_LKl;  ///< Offset: 0x260 - ADC DRC Limiter Slope Low Setting Register
        volatile uint32_t AC_ADC_DRC_HOPL;  ///< Offset: 0x264 - ADC DRC Limiter High Output at Limiter Threshold
        volatile uint32_t AC_ADC_DRC_LOPL;  ///< Offset: 0x268 - ADC DRC Limiter Low Output at Limiter Threshold
        volatile uint32_t AC_ADC_DRC_HET;  ///< Offset: 0x26C - ADC DRC Expander Threshold High Setting Register
        volatile uint32_t AC_ADC_DRC_LET;  ///< Offset: 0x270 - ADC DRC Expander Threshold Low Setting Register
        volatile uint32_t AC_ADC_DRC_HKE;  ///< Offset: 0x274 - ADC DRC Expander Slope High Setting Register
        volatile uint32_t AC_ADC_DRC_LKE;  ///< Offset: 0x278 - ADC DRC Expander Slope Low Setting Register
        volatile uint32_t AC_ADC_DRC_HOPE;  ///< Offset: 0x27C - ADC DRC Expander High Output at Expander Threshold
        volatile uint32_t AC_ADC_DRC_LOPE;  ///< Offset: 0x280 - ADC DRC Expander Low Output at Expander Threshold
        volatile uint32_t AC_ADC_DRC_HKN;  ///< Offset: 0x284 - ADC DRC Linear Slope High Setting Register
        volatile uint32_t AC_ADC_DRC_LKN;  ///< Offset: 0x288 - ADC DRC Linear Slope Low Setting Register
        volatile uint32_t AC_ADC_DRC_SFHAT;  ///< Offset: 0x28C - ADC DRC Smooth filter Gain High Attack Time Coef Register
        volatile uint32_t AC_ADC_DRC_SFLAT;  ///< Offset: 0x290 - ADC DRC Smooth filter Gain Low Attack Time Coef Register
        volatile uint32_t AC_ADC_DRC_SFHRT;  ///< Offset: 0x294 - ADC DRC Smooth filter Gain High Release Time Coef Register
        volatile uint32_t AC_ADC_DRC_SFLRT;  ///< Offset: 0x298 - ADC DRC Smooth filter Gain Low Release Time Coef Register
        volatile uint32_t AC_ADC_DRC_MXGHS;  ///< Offset: 0x29C - ADC DRC MAX Gain High Setting Register
        volatile uint32_t AC_ADC_DRC_MXGLS;  ///< Offset: 0x2A0 - ADC DRC MAX Gain Low Setting Register
        volatile uint32_t AC_ADC_DRC_MNGHS;  ///< Offset: 0x2A4 - ADC DRC MIN Gain High Setting Register
        volatile uint32_t AC_ADC_DRC_MNGLS;  ///< Offset: 0x2A8 - ADC DRC MIN Gain Low Setting Register
        volatile uint32_t AC_ADC_DRC_EPSHC;  ///< Offset: 0x2AC - ADC DRC Expander Smooth Time High Coef Register
        volatile uint32_t AC_ADC_DRC_EPSLC;  ///< Offset: 0x2B0 - ADC DRC Expander Smooth Time Low Coef Register
        volatile uint32_t AC_ADC_DRC_HPFHGAIN;  ///< Offset: 0x2B8 - ADC DRC HPF Gain High Coef Register
        volatile uint32_t AC_ADC_DRC_HPFLGAIN;  ///< Offset: 0x2BC - ADC DRC HPF Gain Low Coef Register
        volatile uint32_t ADC1_REG;  ///< Offset: 0x300 - ADC1 Analog Control Register
        volatile uint32_t ADC2_REG;  ///< Offset: 0x304 - ADC2 Analog Control Register
        volatile uint32_t ADC3_REG;  ///< Offset: 0x308 - ADC3 Analog Control Register
        volatile uint32_t DAC_REG;  ///< Offset: 0x310 - DAC Analog Control Register
        volatile uint32_t MICBIAS_REG;  ///< Offset: 0x318 - MICBIAS Analog Control Register
        volatile uint32_t RAMP_REG;  ///< Offset: 0x31C - BIAS Analog Control Register
        volatile uint32_t BIAS_REG;  ///< Offset: 0x320 - BIAS Analog Control Register
        volatile uint32_t ADC5_REG;  ///< Offset: 0x330 - ADC5 Analog Control Register
    };

    /// Peripheral instances
    inline Registers* AudioCodec = reinterpret_cast<Registers*>(AudioCodec_BASE);

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t TWI[%s]_BASE = 0x02502000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t TWI_ADDR;  ///< Offset: 0x00 - TWI Slave Address Register
        volatile uint32_t TWI_XADDR;  ///< Offset: 0x04 - TWI Extended Slave Address Register
        volatile uint32_t TWI_DATA;  ///< Offset: 0x08 - TWI Data Byte Register
        volatile uint32_t TWI_CNTR;  ///< Offset: 0x0C - TWI Control Register
        volatile uint32_t TWI_STAT;  ///< Offset: 0x10 - TWI Status Register
        volatile uint32_t TWI_CCR;  ///< Offset: 0x14 - TWI Clock Control Register
        volatile uint32_t TWI_SRST;  ///< Offset: 0x18 - TWI Software Reset Register
        volatile uint32_t TWI_EFR;  ///< Offset: 0x1C - TWI Enhance Feature Register
        volatile uint32_t TWI_LCR;  ///< Offset: 0x20 - TWI Line Control Register
        volatile uint32_t TWI_DRV_CTRL;  ///< Offset: 0x200 - TWI_DRV Control Register
        volatile uint32_t TWI_DRV_CFG;  ///< Offset: 0x204 - TWI_DRV Transmission Configuration Register
        volatile uint32_t TWI_DRV_SLV;  ///< Offset: 0x208 - TWI_DRV Slave ID Register
        volatile uint32_t TWI_DRV_FMT;  ///< Offset: 0x20C - TWI_DRV Packet Format Register
        volatile uint32_t TWI_DRV_BUS_CTRL;  ///< Offset: 0x210 - TWI_DRV Bus Control Register
        volatile uint32_t TWI_DRV_INT_CTRL;  ///< Offset: 0x214 - TWI_DRV Interrupt Control Register
        volatile uint32_t TWI_DRV_DMA_CFG;  ///< Offset: 0x218 - TWI_DRV DMA Configure Register
        volatile uint32_t TWI_DRV_FIFO_CON;  ///< Offset: 0x21C - TWI_DRV FIFO Content Register
        volatile uint32_t TWI_DRV_SEND_FIFO_ACC;  ///< Offset: 0x300 - TWI_DRV Send Data FIFO Access Register
        volatile uint32_t TWI_DRV_RECV_FIFO_ACC;  ///< Offset: 0x304 - TWI_DRV Receive Data FIFO Access Register
    };

    /// Peripheral instances
    inline Registers* TWI[%s] = reinterpret_cast<Registers*>(TWI[%s]_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART[%s]_BASE = 0x02500000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t RBR;  ///< Offset: 0x00 - UART Receive Buffer Register
        volatile uint32_t THR;  ///< Offset: 0x00 - UART Transmit Holding Register
        volatile uint32_t DLL;  ///< Offset: 0x00 - UART Divisor Latch Low Register
        volatile uint32_t DLH;  ///< Offset: 0x04 - UART Divisor Latch High Register
        volatile uint32_t IER;  ///< Offset: 0x04 - UART Interrupt Enable Register
        volatile uint32_t IIR;  ///< Offset: 0x08 - UART Interrupt Identity Register
        volatile uint32_t FCR;  ///< Offset: 0x08 - UART FIFO Control Register
        volatile uint32_t LCR;  ///< Offset: 0x0C - UART Line Control Register
        volatile uint32_t MCR;  ///< Offset: 0x10 - UART Modem Control Register
        volatile uint32_t LSR;  ///< Offset: 0x14 - UART Line Status Register
        volatile uint32_t MSR;  ///< Offset: 0x18 - UART Modem Status Register
        volatile uint32_t SCH;  ///< Offset: 0x1C - UART Scratch Register
        volatile uint32_t USR;  ///< Offset: 0x7C - UART Status Register
        volatile uint32_t TFL;  ///< Offset: 0x80 - UART Transmit FIFO Level Register
        volatile uint32_t RFL;  ///< Offset: 0x84 - UART Receive FIFO Level Register
        volatile uint32_t HSK;  ///< Offset: 0x88 - UART DMA Handshake Configuration Register
        volatile uint32_t DMA_REQ_EN;  ///< Offset: 0x8C - UART DMA Request Enable Register
        volatile uint32_t HALT;  ///< Offset: 0xA4 - UART Halt TX Register
        volatile uint32_t DBG_DLL;  ///< Offset: 0xB0 - UART Debug DLL Register
        volatile uint32_t DBG_DLH;  ///< Offset: 0xB4 - UART Debug DLH Register
        volatile uint32_t FCC;  ///< Offset: 0xF0 - UART FIFO Clock Control Register
        volatile uint32_t RXDMA_CTRL;  ///< Offset: 0x100 - UART RXDMA Control Register
        volatile uint32_t RXDMA_STR;  ///< Offset: 0x104 - UART RXDMA Start Register
        volatile uint32_t RXDMA_STA;  ///< Offset: 0x108 - UART RXDMA Status Register
        volatile uint32_t RXDMA_LMT;  ///< Offset: 0x10C - UART RXDMA Limit Register
        volatile uint32_t RXDMA_SADDRL;  ///< Offset: 0x110 - UART RXDMA Buffer Start Address Low Register
        volatile uint32_t RXDMA_SADDRH;  ///< Offset: 0x114 - UART RXDMA Buffer Start Address High Register
        volatile uint32_t RXDMA_BL;  ///< Offset: 0x118 - UART RXDMA Buffer Length Register
        volatile uint32_t RXDMA_IE;  ///< Offset: 0x120 - UART RXDMA Interrupt Enable Register
        volatile uint32_t RXDMA_IS;  ///< Offset: 0x124 - UART RXDMA Interrupt Status Register
        volatile uint32_t RXDMA_WADDRL;  ///< Offset: 0x128 - UART RXDMA Write Address Low Register
        volatile uint32_t RXDMA_WADDRH;  ///< Offset: 0x12C - UART RXDMA Write Address High Register
        volatile uint32_t RXDMA_RADDRL;  ///< Offset: 0x130 - UART RXDMA Read Address Low Register
        volatile uint32_t RXDMA_RADDRH;  ///< Offset: 0x134 - UART RXDMA Read Address High Register
        volatile uint32_t RXDMA_DCNT;  ///< Offset: 0x138 - UART RXDMA Data Count Register
    };

    /// Peripheral instances
    inline Registers* UART[%s] = reinterpret_cast<Registers*>(UART[%s]_BASE);

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USB0_BASE = 0x04100000;
    constexpr uint32_t USB1_BASE = 0x04200000;

    /// USB Register structure
    struct Registers {
        volatile uint32_t E_CAPLENGTH;  ///< Offset: 0x00 - EHCI Capability Register Length Register
        volatile uint32_t E_HCIVERSION;  ///< Offset: 0x02 - EHCI Host Interface Version Number Register
        volatile uint32_t E_HCSPARAMS;  ///< Offset: 0x04 - EHCI Host Control Structural Parameter Register
        volatile uint32_t E_HCCPARAMS;  ///< Offset: 0x08 - EHCI Host Control Capability Parameter Register
        volatile uint32_t E_HCSPPORTROUTE;  ///< Offset: 0x0C - EHCI Companion Port Route Description
        volatile uint32_t E_USBCMD;  ///< Offset: 0x10 - EHCI USB Command Register
        volatile uint32_t E_USBSTS;  ///< Offset: 0x14 - EHCI USB Status Register
        volatile uint32_t E_USBINTR;  ///< Offset: 0x18 - EHCI USB Interrupt Enable Register
        volatile uint32_t E_FRINDEX;  ///< Offset: 0x1C - EHCI USB Frame Index Register
        volatile uint32_t E_CTRLDSSEGMENT;  ///< Offset: 0x20 - EHCI 4G Segment Selector Register
        volatile uint32_t E_PERIODICLISTBASE;  ///< Offset: 0x24 - EHCI Frame List Base Address Register
        volatile uint32_t E_ASYNCLISTADDR;  ///< Offset: 0x28 - EHCI Next Asynchronous List Address Register
        volatile uint32_t E_CONFIGFLAG;  ///< Offset: 0x50 - EHCI Configured Flag Register
        volatile uint32_t E_PORTSC;  ///< Offset: 0x54 - EHCI Port Status/Control Register
        volatile uint32_t O_HcControl;  ///< Offset: 0x404 - OHCI Control Register
        volatile uint32_t O_HcCommandStatus;  ///< Offset: 0x408 - OHCI Command Status Register
        volatile uint32_t O_HcInterruptStatus;  ///< Offset: 0x40C - OHCI Interrupt Status Register
        volatile uint32_t O_HcInterruptEnable;  ///< Offset: 0x410 - OHCI Interrupt Enable Register
        volatile uint32_t O_HcInterruptDisable;  ///< Offset: 0x414 - OHCI Interrupt Disable Register
        volatile uint32_t O_HcHCCA;  ///< Offset: 0x418 - OHCI HCCA Base
        volatile uint32_t O_HcPeriodCurrentED;  ///< Offset: 0x41C - OHCI Period Current ED Base
        volatile uint32_t O_HcControlHeadED;  ///< Offset: 0x420 - OHCI Control Head ED Base
        volatile uint32_t O_HcControlCurrentED;  ///< Offset: 0x424 - OHCI Control Current ED Base
        volatile uint32_t O_HcBulkHeadED;  ///< Offset: 0x428 - OHCI Bulk Head ED Base
        volatile uint32_t O_HcBulkCurrentED;  ///< Offset: 0x42C - OHCI Bulk Current ED Base
        volatile uint32_t O_HcDoneHead;  ///< Offset: 0x430 - OHCI Done Head Base
        volatile uint32_t O_HcFmInterval;  ///< Offset: 0x434 - OHCI Frame Interval Register
        volatile uint32_t O_HcFmRemaining;  ///< Offset: 0x438 - OHCI Frame Remaining Register
        volatile uint32_t O_HcFmNumber;  ///< Offset: 0x43C - OHCI Frame Number Register
        volatile uint32_t O_HcPerioddicStart;  ///< Offset: 0x440 - OHCI Periodic Start Register
        volatile uint32_t O_HcLSThreshold;  ///< Offset: 0x444 - OHCI LS Threshold Register
        volatile uint32_t O_HcRhDescriptorA;  ///< Offset: 0x448 - OHCI Root Hub Descriptor Register A
        volatile uint32_t O_HcRhDesriptorB;  ///< Offset: 0x44C - OHCI Root Hub Descriptor Register B
        volatile uint32_t O_HcRhStatus;  ///< Offset: 0x450 - OHCI Root Hub Status Register
        volatile uint32_t O_HcRhPortStatus;  ///< Offset: 0x454 - OHCI Root Hub Port Status Register
        volatile uint32_t HCI_Interface;  ///< Offset: 0x800 - HCI Interface Register
        volatile uint32_t HCI_CTRL3;  ///< Offset: 0x808 - HCI Control Register
        volatile uint32_t PHY_Control;  ///< Offset: 0x810 - PHY Control Register
        volatile uint32_t PHY_STATUS;  ///< Offset: 0x824 - PHY Status Register
        volatile uint32_t HCI_SIE_PORT_DISABLE_CONTROL;  ///< Offset: 0x828 - HCI SIE Port Disable Control Register
    };

    /// Peripheral instances
    inline Registers* USB0 = reinterpret_cast<Registers*>(USB0_BASE);
    inline Registers* USB1 = reinterpret_cast<Registers*>(USB1_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_BASE = 0x02000000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t pb_cfg0;  ///< Offset: 0x30 - PB Configure Register 0
        volatile uint32_t pb_cfg1;  ///< Offset: 0x34 - PB Configure Register 1
        volatile uint32_t pb_dat;  ///< Offset: 0x40 - PB Data Register
        volatile uint32_t pb_drv0;  ///< Offset: 0x44 - PB Multi_Driving Register 0
        volatile uint32_t pb_drv1;  ///< Offset: 0x48 - PB Multi_Driving Register 1
        volatile uint32_t pb_pull0;  ///< Offset: 0x54 - PB Pull Register 0
        volatile uint32_t pc_cfg0;  ///< Offset: 0x60 - PC Configure Register 0
        volatile uint32_t pc_dat;  ///< Offset: 0x70 - PC Data Register
        volatile uint32_t pc_drv0;  ///< Offset: 0x74 - PC Multi_Driving Register 0
        volatile uint32_t pc_pull0;  ///< Offset: 0x84 - PC Pull Register 0
        volatile uint32_t pd_cfg0;  ///< Offset: 0x90 - PD Configure Register 0
        volatile uint32_t pd_cfg1;  ///< Offset: 0x94 - PD Configure Register 1
        volatile uint32_t pd_cfg2;  ///< Offset: 0x98 - PD Configure Register 2
        volatile uint32_t pd_dat;  ///< Offset: 0xA0 - PD Data Register
        volatile uint32_t pd_drv0;  ///< Offset: 0xA4 - PD Multi_Driving Register 0
        volatile uint32_t pd_drv1;  ///< Offset: 0xA8 - PD Multi_Driving Register 1
        volatile uint32_t pd_drv2;  ///< Offset: 0xAC - PD Multi_Driving Register 2
        volatile uint32_t pd_pull0;  ///< Offset: 0xB4 - PD Pull Register 0
        volatile uint32_t pd_pull1;  ///< Offset: 0xB8 - PD Pull Register 1
        volatile uint32_t pe_cfg0;  ///< Offset: 0xC0 - PE Configure Register 0
        volatile uint32_t pe_cfg1;  ///< Offset: 0xC4 - PE Configure Register 1
        volatile uint32_t pe_cfg2;  ///< Offset: 0xC8 - PE Configure Register 2
        volatile uint32_t pe_dat;  ///< Offset: 0xD0 - PE Data Register
        volatile uint32_t pe_drv0;  ///< Offset: 0xD4 - PE Multi_Driving Register 0
        volatile uint32_t pe_drv1;  ///< Offset: 0xD8 - PE Multi_Driving Register 1
        volatile uint32_t pe_drv2;  ///< Offset: 0xDC - PE Multi_Driving Register 2
        volatile uint32_t pe_pull0;  ///< Offset: 0xE4 - PE Pull Register 0
        volatile uint32_t pe_pull1;  ///< Offset: 0xE8 - PE Pull Register 1
        volatile uint32_t pf_cfg0;  ///< Offset: 0xF0 - PF Configure Register 0
        volatile uint32_t pf_dat;  ///< Offset: 0x100 - PF Data Register
        volatile uint32_t pf_drv0;  ///< Offset: 0x104 - PF Multi_Driving Register 0
        volatile uint32_t pf_pull0;  ///< Offset: 0x114 - PF Pull Register 0
        volatile uint32_t pg_cfg0;  ///< Offset: 0x120 - PG Configure Register 0
        volatile uint32_t pg_cfg1;  ///< Offset: 0x124 - PG Configure Register 1
        volatile uint32_t pg_cfg2;  ///< Offset: 0x128 - PG Configure Register 2
        volatile uint32_t pg_dat;  ///< Offset: 0x130 - PG Data Register
        volatile uint32_t pg_drv0;  ///< Offset: 0x134 - PG Multi_Driving Register 0
        volatile uint32_t pg_drv1;  ///< Offset: 0x138 - PG Multi_Driving Register 1
        volatile uint32_t pg_drv2;  ///< Offset: 0x13C - PG Multi_Driving Register 2
        volatile uint32_t pg_pull0;  ///< Offset: 0x144 - PG Pull Register 0
        volatile uint32_t pg_pull1;  ///< Offset: 0x148 - PG Pull Register 1
        volatile uint32_t pb_eint_cfg0;  ///< Offset: 0x220 - PB External Interrupt Configure Register 0
        volatile uint32_t pb_eint_cfg1;  ///< Offset: 0x224 - PB External Interrupt Configure Register 1
        volatile uint32_t pb_eint_ctl;  ///< Offset: 0x230 - PB External Interrupt Control Register
        volatile uint32_t pb_eint_status;  ///< Offset: 0x234 - PB External Interrupt Status Register
        volatile uint32_t pb_eint_deb;  ///< Offset: 0x238 - PB External Interrupt Debounce Register
        volatile uint32_t pc_eint_cfg0;  ///< Offset: 0x240 - PC External Interrupt Configure Register 0
        volatile uint32_t pc_eint_ctl;  ///< Offset: 0x250 - PC External Interrupt Control Register
        volatile uint32_t pc_eint_status;  ///< Offset: 0x254 - PC External Interrupt Status Register
        volatile uint32_t pc_eint_deb;  ///< Offset: 0x258 - PC External Interrupt Debounce Register
        volatile uint32_t pd_eint_cfg0;  ///< Offset: 0x260 - PD External Interrupt Configure Register 0
        volatile uint32_t pd_eint_cfg1;  ///< Offset: 0x264 - PD External Interrupt Configure Register 1
        volatile uint32_t pd_eint_cfg2;  ///< Offset: 0x268 - PD External Interrupt Configure Register 2
        volatile uint32_t pd_eint_ctl;  ///< Offset: 0x270 - PD External Interrupt Control Register
        volatile uint32_t pd_eint_status;  ///< Offset: 0x274 - PD External Interrupt Status Register
        volatile uint32_t pd_eint_deb;  ///< Offset: 0x278 - PD External Interrupt Debounce Register
        volatile uint32_t pe_eint_cfg0;  ///< Offset: 0x280 - PE External Interrupt Configure Register 0
        volatile uint32_t pe_eint_cfg1;  ///< Offset: 0x284 - PE External Interrupt Configure Register 1
        volatile uint32_t pe_eint_cfg2;  ///< Offset: 0x288 - PE External Interrupt Configure Register 2
        volatile uint32_t pe_eint_ctl;  ///< Offset: 0x290 - PE External Interrupt Control Register
        volatile uint32_t pe_eint_status;  ///< Offset: 0x294 - PE External Interrupt Status Register
        volatile uint32_t pe_eint_deb;  ///< Offset: 0x298 - PE External Interrupt Debounce Register
        volatile uint32_t pf_eint_cfg0;  ///< Offset: 0x2A0 - PF External Interrupt Configure Register 0
        volatile uint32_t pf_eint_ctl;  ///< Offset: 0x2B0 - PF External Interrupt Control Register
        volatile uint32_t pf_eint_status;  ///< Offset: 0x2B4 - PF External Interrupt Status Register
        volatile uint32_t pf_eint_deb;  ///< Offset: 0x2B8 - PF External Interrupt Debounce Register
        volatile uint32_t pg_eint_cfg0;  ///< Offset: 0x2C0 - PG External Interrupt Configure Register 0
        volatile uint32_t pg_eint_cfg1;  ///< Offset: 0x2C4 - PG External Interrupt Configure Register 1
        volatile uint32_t pg_eint_cfg2;  ///< Offset: 0x2C8 - PG External Interrupt Configure Register 2
        volatile uint32_t pg_eint_ctl;  ///< Offset: 0x2D0 - PG External Interrupt Control Register
        volatile uint32_t pg_eint_status;  ///< Offset: 0x2D4 - PG External Interrupt Status Register
        volatile uint32_t pg_eint_deb;  ///< Offset: 0x2D8 - PG External Interrupt Debounce Register
        volatile uint32_t pio_pow_mod_sel;  ///< Offset: 0x340 - PIO Group Withstand Voltage Mode Select Register
        volatile uint32_t pio_pow_ms_ctl;  ///< Offset: 0x344 - PIO Group Withstand Voltage Mode Select Control Register
        volatile uint32_t pio_pow_val;  ///< Offset: 0x348 - PIO Group Power Value Register
        volatile uint32_t pio_pow_vol_sel_ctl;  ///< Offset: 0x350 - PIO Group Power Voltage Select Control Register
    };

    /// Peripheral instances
    inline Registers* GPIO = reinterpret_cast<Registers*>(GPIO_BASE);

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t GPADC_BASE = 0x02009000;
    constexpr uint32_t TPADC_BASE = 0x02009C00;
    constexpr uint32_t LRADC_BASE = 0x02009800;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t GP_SR_CON;  ///< Offset: 0x00 - GPADC Sample Rate Configure Register
        volatile uint32_t GP_CTRL;  ///< Offset: 0x04 - GPADC Control Register
        volatile uint32_t GP_CS_EN;  ///< Offset: 0x08 - GPADC Compare and Select Enable Register
        volatile uint32_t GP_FIFO_INTC;  ///< Offset: 0x0C - GPADC FIFO Interrupt Control Register
        volatile uint32_t GP_FIFO_INTS;  ///< Offset: 0x10 - GPADC FIFO Interrupt Status Register
        volatile uint32_t GP_FIFO_DATA;  ///< Offset: 0x14 - GPADC FIFO Data Register
        volatile uint32_t GP_CDATA;  ///< Offset: 0x18 - GPADC Calibration Data Register
        volatile uint32_t GP_DATAL_INTC;  ///< Offset: 0x20 - GPADC Data Low Interrupt Configure Register
        volatile uint32_t GP_DATAH_INTC;  ///< Offset: 0x24 - GPADC Data High Interrupt Configure Register
        volatile uint32_t GP_DATA_INTC;  ///< Offset: 0x28 - GPADC Data Interrupt Configure Register
        volatile uint32_t GP_DATAL_INTS;  ///< Offset: 0x30 - GPADC Data Low Interrupt Status Register
        volatile uint32_t GP_DATAH_INTS;  ///< Offset: 0x34 - GPADC Data High Interrupt Status Register
        volatile uint32_t GP_DATA_INTS;  ///< Offset: 0x38 - GPADC Data Interrupt Status Register
        volatile uint32_t GP_CH0_CMP_DATA;  ///< Offset: 0x40 - GPADC CH0 Compare Data Register
        volatile uint32_t GP_CH1_CMP_DATA;  ///< Offset: 0x44 - GPADC CH1 Compare Data Register
        volatile uint32_t GP_CH0_DATA;  ///< Offset: 0x80 - GPADC CH0 Data Register
        volatile uint32_t GP_CH1_DATA;  ///< Offset: 0x84 - GPADC CH1 Data Register
    };

    /// Peripheral instances
    inline Registers* GPADC = reinterpret_cast<Registers*>(GPADC_BASE);
    inline Registers* TPADC = reinterpret_cast<Registers*>(TPADC_BASE);
    inline Registers* LRADC = reinterpret_cast<Registers*>(LRADC_BASE);

}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t PWM_BASE = 0x02000C00;
    constexpr uint32_t LEDC_BASE = 0x02008000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t PIER;  ///< Offset: 0x00 - PWM IRQ Enable Register
        volatile uint32_t PISR;  ///< Offset: 0x04 - PWM IRQ Status Register
        volatile uint32_t CIER;  ///< Offset: 0x10 - Capture IRQ Enable Register
        volatile uint32_t CISR;  ///< Offset: 0x14 - Capture IRQ Status Register
        volatile uint32_t PCCR01;  ///< Offset: 0x20 - PWM01 Clock Configuration Register
        volatile uint32_t PCCR23;  ///< Offset: 0x24 - PWM23 Clock Configuration Register
        volatile uint32_t PCCR45;  ///< Offset: 0x28 - PWM45 Clock Configuration Register
        volatile uint32_t PCCR67;  ///< Offset: 0x2C - PWM67 Clock Configuration Register
        volatile uint32_t PCGR;  ///< Offset: 0x40 - PWM Clock Gating Register
        volatile uint32_t PDZCR01;  ///< Offset: 0x60 - PWM01 Dead Zone Control Register
        volatile uint32_t PDZCR23;  ///< Offset: 0x64 - PWM23 Dead Zone Control Register
        volatile uint32_t PDZCR45;  ///< Offset: 0x68 - PWM45 Dead Zone Control Register
        volatile uint32_t PDZCR67;  ///< Offset: 0x6C - PWM67 Dead Zone Control Register
        volatile uint32_t PER;  ///< Offset: 0x80 - PWM Enable Register
        volatile uint32_t PGR0;  ///< Offset: 0x90 - PWM Group0 Register
        volatile uint32_t PGR1;  ///< Offset: 0x94 - PWM Group1 Register
        volatile uint32_t PGR2;  ///< Offset: 0x98 - PWM Group2 Register
        volatile uint32_t PGR3;  ///< Offset: 0x9C - PWM Group3 Register
        volatile uint32_t CER;  ///< Offset: 0xC0 - Capture Enable Register
        volatile uint32_t pcr%s;  ///< Offset: 0x100 - PWM Control Register
        volatile uint32_t ppr%s;  ///< Offset: 0x104 - PWM Period Register
        volatile uint32_t pcntr%s;  ///< Offset: 0x108 - PWM Count Register
        volatile uint32_t ppcntr%s;  ///< Offset: 0x10C - PWM Pulse Count Register
        volatile uint32_t ccr%s;  ///< Offset: 0x110 - Capture Control Register
        volatile uint32_t crlr%s;  ///< Offset: 0x114 - Capture Rise Lock Register
        volatile uint32_t cflr%s;  ///< Offset: 0x118 - Capture Fall Lock Register
    };

    /// Peripheral instances
    inline Registers* PWM = reinterpret_cast<Registers*>(PWM_BASE);
    inline Registers* LEDC = reinterpret_cast<Registers*>(LEDC_BASE);

}

// ============================================================================
// ETH Peripheral
// ============================================================================

namespace eth {
    /// Base addresses
    constexpr uint32_t EMAC_BASE = 0x04500000;

    /// ETH Register structure
    struct Registers {
        volatile uint32_t EMAC_BASIC_CTL0;  ///< Offset: 0x00 - EMAC Basic Control Register0
        volatile uint32_t EMAC_BASIC_CTL1;  ///< Offset: 0x04 - EMAC Basic Control Register1
        volatile uint32_t EMAC_INT_STA;  ///< Offset: 0x08 - EMAC Interrupt Status Register
        volatile uint32_t EMAC_INT_EN;  ///< Offset: 0x0C - EMAC Interrupt Enable Register
        volatile uint32_t EMAC_TX_CTL0;  ///< Offset: 0x10 - EMAC Transmit Control Register0
        volatile uint32_t EMAC_TX_CTL1;  ///< Offset: 0x14 - EMAC Transmit Control Register1
        volatile uint32_t EMAC_TX_FLOW_CTL;  ///< Offset: 0x1C - EMAC Transmit Flow Control Register
        volatile uint32_t EMAC_TX_DMA_DESC_LIST;  ///< Offset: 0x20 - EMAC Transmit Descriptor List Address Register
        volatile uint32_t EMAC_RX_CTL0;  ///< Offset: 0x24 - EMAC Receive Control Register0
        volatile uint32_t EMAC_RX_CTL1;  ///< Offset: 0x28 - EMAC Receive Control Register1
        volatile uint32_t EMAC_RX_DMA_DESC_LIST;  ///< Offset: 0x34 - EMAC Receive Descriptor List Address Register
        volatile uint32_t EMAC_RX_FRM_FLT;  ///< Offset: 0x38 - EMAC Receive Frame Filter Register
        volatile uint32_t EMAC_RX_HASH0;  ///< Offset: 0x40 - EMAC Hash Table Register0
        volatile uint32_t EMAC_RX_HASH1;  ///< Offset: 0x44 - EMAC Hash Table Register1
        volatile uint32_t EMAC_MII_CMD;  ///< Offset: 0x48 - EMAC Management Interface Command Register
        volatile uint32_t EMAC_MII_DATA;  ///< Offset: 0x4C - EMAC Management Interface Data Register
        volatile uint32_t EMAC_ADDR_HIGH0;  ///< Offset: 0x50 - EMAC MAC Address High Register
        volatile uint32_t EMAC_ADDR_HIGH%s;  ///< Offset: 0x58 - EMAC MAC Address High Register
        volatile uint32_t EMAC_ADDR_LOW%s;  ///< Offset: 0x54 - EMAC MAC Address Low Register
        volatile uint32_t EMAC_TX_DMA_STA;  ///< Offset: 0xB0 - EMAC Transmit DMA Status Register
        volatile uint32_t EMAC_TX_CUR_DESC;  ///< Offset: 0xB4 - EMAC Current Transmit Descriptor Register
        volatile uint32_t EMAC_TX_CUR_BUF;  ///< Offset: 0xB8 - EMAC Current Transmit Buffer Address Register
        volatile uint32_t EMAC_RX_DMA_STA;  ///< Offset: 0xC0 - EMAC Receive DMA Status Register
        volatile uint32_t EMAC_RX_CUR_DESC;  ///< Offset: 0xC4 - EMAC Current Receive Descriptor Register
        volatile uint32_t EMAC_RX_CUR_BUF;  ///< Offset: 0xC8 - EMAC Current Receive Buffer Address Register
        volatile uint32_t EMAC_RGMII_STA;  ///< Offset: 0xD0 - EMAC RGMII Status Register
    };

    /// Peripheral instances
    inline Registers* EMAC = reinterpret_cast<Registers*>(EMAC_BASE);

}

// ============================================================================
// CIR Peripheral
// ============================================================================

namespace cir {
    /// Base addresses
    constexpr uint32_t CIR_RX_BASE = 0x07040000;
    constexpr uint32_t CIR_TX_BASE = 0x02003000;

    /// CIR Register structure
    struct Registers {
        volatile uint32_t CIR_CTL;  ///< Offset: 0x00 - CIR Control Register
        volatile uint32_t CIR_RXPCFG;  ///< Offset: 0x10 - CIR Receiver Pulse Configure Register
        volatile uint32_t CIR_RXFIFO;  ///< Offset: 0x20 - CIR Receiver FIFO Register
        volatile uint32_t CIR_RXINT;  ///< Offset: 0x2C - CIR Receiver Interrupt Control Register
        volatile uint32_t CIR_RXSTA;  ///< Offset: 0x30 - CIR Receiver Status Register
        volatile uint32_t CIR_RXCFG;  ///< Offset: 0x34 - CIR Receiver Configure Register
    };

    /// Peripheral instances
    inline Registers* CIR_RX = reinterpret_cast<Registers*>(CIR_RX_BASE);
    inline Registers* CIR_TX = reinterpret_cast<Registers*>(CIR_TX_BASE);

}

// ============================================================================
// CE Peripheral
// ============================================================================

namespace ce {
    /// Base addresses
    constexpr uint32_t CE_NS_BASE = 0x03040000;

    /// CE Register structure
    struct Registers {
        volatile uint32_t CE_TDA;  ///< Offset: 0x00 - Task Descriptor Address
        volatile uint32_t CE_ICR;  ///< Offset: 0x08 - Interrupt Control Register
        volatile uint32_t CE_ISR;  ///< Offset: 0x0C - Interrupt Status Register
        volatile uint32_t CE_TLR;  ///< Offset: 0x10 - Task Load Register
        volatile uint32_t CE_TSR;  ///< Offset: 0x14 - Task Status Register
        volatile uint32_t CE_ESR;  ///< Offset: 0x18 - Error Status Register
        volatile uint32_t CE_CSA;  ///< Offset: 0x24 - DMA Current Source Address
        volatile uint32_t CE_CDA;  ///< Offset: 0x28 - DMA Current Destination Address
        volatile uint32_t CE_TPR;  ///< Offset: 0x2C - Throughput Register
    };

    /// Peripheral instances
    inline Registers* CE_NS = reinterpret_cast<Registers*>(CE_NS_BASE);

}


} // namespace alloy::generated::d1h

#endif // ALLOY_GENERATED_D1H_PERIPHERALS_HPP