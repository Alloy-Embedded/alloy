/// Auto-generated code for AT91SAM9N12
/// Generated by Alloy Code Generator
/// Source: atmel_sam9.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 17:44:29
#ifndef ALLOY_GENERATED_AT91SAM9N12_PERIPHERALS_HPP
#define ALLOY_GENERATED_AT91SAM9N12_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::at91sam9n12 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 2;
    constexpr bool has_hsmci = true;
    constexpr uint32_t num_hsmci_instances = 1;
    constexpr bool has_ssc = true;
    constexpr uint32_t num_ssc_instances = 1;
    constexpr bool has_tim = true;
    constexpr uint32_t num_tim_instances = 3;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 2;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 6;
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 1;
    constexpr bool has_lcdc = true;
    constexpr uint32_t num_lcdc_instances = 1;
    constexpr bool has_udp = true;
    constexpr uint32_t num_udp_instances = 1;
    constexpr bool has_rng = true;
    constexpr uint32_t num_rng_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 1;
    constexpr bool has_fuse = true;
    constexpr uint32_t num_fuse_instances = 1;
    constexpr bool has_matrix = true;
    constexpr uint32_t num_matrix_instances = 1;
    constexpr bool has_pmecc = true;
    constexpr uint32_t num_pmecc_instances = 1;
    constexpr bool has_pmerrloc = true;
    constexpr uint32_t num_pmerrloc_instances = 1;
    constexpr bool has_ddrsdrc = true;
    constexpr uint32_t num_ddrsdrc_instances = 1;
    constexpr bool has_smc = true;
    constexpr uint32_t num_smc_instances = 1;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 1;
    constexpr bool has_aic = true;
    constexpr uint32_t num_aic_instances = 1;
    constexpr bool has_dbgu = true;
    constexpr uint32_t num_dbgu_instances = 1;
    constexpr bool has_pioa = true;
    constexpr uint32_t num_pioa_instances = 1;
    constexpr bool has_piob = true;
    constexpr uint32_t num_piob_instances = 1;
    constexpr bool has_pioc = true;
    constexpr uint32_t num_pioc_instances = 1;
    constexpr bool has_piod = true;
    constexpr uint32_t num_piod_instances = 1;
    constexpr bool has_pmc = true;
    constexpr uint32_t num_pmc_instances = 1;
    constexpr bool has_rstc = true;
    constexpr uint32_t num_rstc_instances = 1;
    constexpr bool has_shdwc = true;
    constexpr uint32_t num_shdwc_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 1;
    constexpr bool has_sckc = true;
    constexpr uint32_t num_sckc_instances = 1;
    constexpr bool has_bsc = true;
    constexpr uint32_t num_bsc_instances = 1;
    constexpr bool has_gpbr = true;
    constexpr uint32_t num_gpbr_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct hsmci_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tim_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 6;
    };
    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct lcdc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct udp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rng_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fuse_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct matrix_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pmecc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pmerrloc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ddrsdrc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct smc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct aic_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dbgu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pioa_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct piob_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pioc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct piod_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pmc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rstc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct shdwc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sckc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bsc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpbr_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits

    // USART-specific traits
    constexpr bool has_usart0 = true;
    constexpr bool has_usart1 = true;
    constexpr bool has_usart2 = true;
    constexpr bool has_usart3 = true;
    constexpr bool has_uart0 = true;
    constexpr bool has_uart1 = true;
}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI0_BASE = 0xF0000000;
    constexpr uint32_t SPI1_BASE = 0xF0004000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t RDR;  ///< Offset: 0x08 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x0C - Transmit Data Register
        volatile uint32_t SR;  ///< Offset: 0x10 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x14 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x18 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x1C - Interrupt Mask Register
        volatile uint32_t CSR__;  ///< Offset: 0x30 - Chip Select Register (renamed from CSR__)
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protection Control Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
    };

    /// Peripheral instances
    inline Registers* SPI0 = reinterpret_cast<Registers*>(SPI0_BASE);
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SPIEN = (1U << 0);  ///< SPI Enable
        constexpr uint32_t SPIDIS = (1U << 1);  ///< SPI Disable
        constexpr uint32_t SWRST = (1U << 7);  ///< SPI Software Reset
        constexpr uint32_t LASTXFER = (1U << 24);  ///< Last Transfer
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t MSTR = (1U << 0);  ///< Master/Slave Mode
        constexpr uint32_t PS = (1U << 1);  ///< Peripheral Select
        constexpr uint32_t PCSDEC = (1U << 2);  ///< Chip Select Decode
        constexpr uint32_t MODFDIS = (1U << 4);  ///< Mode Fault Detection
        constexpr uint32_t WDRBT = (1U << 5);  ///< Wait Data Read Before Transfer
        constexpr uint32_t LLB = (1U << 7);  ///< Local Loopback Enable
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
        constexpr uint32_t DLYBCS = (8 << 24);  ///< Delay Between Chip Selects
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t RD = (16 << 0);  ///< Receive Data
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t TD = (16 << 0);  ///< Transmit Data
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
        constexpr uint32_t LASTXFER = (1U << 24);  ///< Last Transfer
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit Data Register Empty
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Status
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty
        constexpr uint32_t SPIENS = (1U << 16);  ///< SPI Enable Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Enable
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Enable
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Enable
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Disable
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Disable
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Disable
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Mask
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Mask
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Mask
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Mask
    }

    /// CSR__ Register bits
    namespace csr___bits {
        constexpr uint32_t CPOL = (1U << 0);  ///< Clock Polarity
        constexpr uint32_t NCPHA = (1U << 1);  ///< Clock Phase
        constexpr uint32_t CSNAAT = (1U << 2);  ///< Chip Select Not Active After Transfer (Ignored if CSAAT = 1)
        constexpr uint32_t CSAAT = (1U << 3);  ///< Chip Select Active After Transfer
        constexpr uint32_t BITS = (4 << 4);  ///< Bits Per Transfer
        constexpr uint32_t SCBR = (8 << 8);  ///< Serial Clock Baud Rate
        constexpr uint32_t DLYBS = (8 << 16);  ///< Delay Before SPCK
        constexpr uint32_t DLYBCT = (8 << 24);  ///< Delay Between Consecutive Transfers
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t SPIWPEN = (1U << 0);  ///< SPI Write Protection Enable
        constexpr uint32_t SPIWPKEY = (24 << 8);  ///< SPI Write Protection Key Password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t SPIWPVS = (3 << 0);  ///< SPI Write Protection Violation Status
        constexpr uint32_t SPIWPVSRC = (8 << 8);  ///< SPI Write Protection Violation Source
    }

}

// ============================================================================
// HSMCI Peripheral
// ============================================================================

namespace hsmci {
    /// Base addresses
    constexpr uint32_t HSMCI_BASE = 0xF0008000;

    /// HSMCI Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t DTOR;  ///< Offset: 0x08 - Data Timeout Register
        volatile uint32_t SDCR;  ///< Offset: 0x0C - SD/SDIO Card Register
        volatile uint32_t ARGR;  ///< Offset: 0x10 - Argument Register
        volatile uint32_t CMDR;  ///< Offset: 0x14 - Command Register
        volatile uint32_t BLKR;  ///< Offset: 0x18 - Block Register
        volatile uint32_t CSTOR;  ///< Offset: 0x1C - Completion Signal Timeout Register
        volatile uint32_t RSPR__;  ///< Offset: 0x20 - Response Register (renamed from RSPR__)
        volatile uint32_t RDR;  ///< Offset: 0x30 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x34 - Transmit Data Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t DMA;  ///< Offset: 0x50 - DMA Configuration Register
        volatile uint32_t CFG;  ///< Offset: 0x54 - Configuration Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protection Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
        volatile uint32_t FIFO__;  ///< Offset: 0x200 - FIFO Memory Aperture0 (renamed from FIFO__)
    };

    /// Peripheral instances
    inline Registers* HSMCI = reinterpret_cast<Registers*>(HSMCI_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t MCIEN = (1U << 0);  ///< Multi-Media Interface Enable
        constexpr uint32_t MCIDIS = (1U << 1);  ///< Multi-Media Interface Disable
        constexpr uint32_t PWSEN = (1U << 2);  ///< Power Save Mode Enable
        constexpr uint32_t PWSDIS = (1U << 3);  ///< Power Save Mode Disable
        constexpr uint32_t SWRST = (1U << 7);  ///< Software Reset
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t CLKDIV = (8 << 0);  ///< Clock Divider
        constexpr uint32_t PWSDIV = (3 << 8);  ///< Power Saving Divider
        constexpr uint32_t RDPROOF = (1U << 11);  ///< Read Proof Enable
        constexpr uint32_t WRPROOF = (1U << 12);  ///< Write Proof Enable
        constexpr uint32_t FBYTE = (1U << 13);  ///< Force Byte Transfer
        constexpr uint32_t PADV = (1U << 14);  ///< Padding Value
        constexpr uint32_t CLKODD = (1U << 16);  ///< Clock divider is odd
    }

    /// DTOR Register bits
    namespace dtor_bits {
        constexpr uint32_t DTOCYC = (4 << 0);  ///< Data Timeout Cycle Number
        constexpr uint32_t DTOMUL = (3 << 4);  ///< Data Timeout Multiplier
    }

    /// SDCR Register bits
    namespace sdcr_bits {
        constexpr uint32_t SDCSEL = (2 << 0);  ///< SDCard/SDIO Slot
        constexpr uint32_t SDCBUS = (2 << 6);  ///< SDCard/SDIO Bus Width
    }

    /// ARGR Register bits
    namespace argr_bits {
        constexpr uint32_t ARG = (32 << 0);  ///< Command Argument
    }

    /// CMDR Register bits
    namespace cmdr_bits {
        constexpr uint32_t CMDNB = (6 << 0);  ///< Command Number
        constexpr uint32_t RSPTYP = (2 << 6);  ///< Response Type
        constexpr uint32_t SPCMD = (3 << 8);  ///< Special Command
        constexpr uint32_t OPDCMD = (1U << 11);  ///< Open Drain Command
        constexpr uint32_t MAXLAT = (1U << 12);  ///< Max Latency for Command to Response
        constexpr uint32_t TRCMD = (2 << 16);  ///< Transfer Command
        constexpr uint32_t TRDIR = (1U << 18);  ///< Transfer Direction
        constexpr uint32_t TRTYP = (3 << 19);  ///< Transfer Type
        constexpr uint32_t IOSPCMD = (2 << 24);  ///< SDIO Special Command
        constexpr uint32_t ATACS = (1U << 26);  ///< ATA with Command Completion Signal
        constexpr uint32_t BOOT_ACK = (1U << 27);  ///< Boot Operation Acknowledge.
    }

    /// BLKR Register bits
    namespace blkr_bits {
        constexpr uint32_t BCNT = (16 << 0);  ///< MMC/SDIO Block Count - SDIO Byte Count
        constexpr uint32_t BLKLEN = (16 << 16);  ///< Data Block Length
    }

    /// CSTOR Register bits
    namespace cstor_bits {
        constexpr uint32_t CSTOCYC = (4 << 0);  ///< Completion Signal Timeout Cycle Number
        constexpr uint32_t CSTOMUL = (3 << 4);  ///< Completion Signal Timeout Multiplier
    }

    /// RSPR__ Register bits
    namespace rspr___bits {
        constexpr uint32_t RSP = (32 << 0);  ///< Response
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Write
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< HSMCI Not Busy
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status
        constexpr uint32_t CSRCV = (1U << 13);  ///< CE-ATA Completion Signal Received
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer done
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty flag
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done flag
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Enable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Enable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Enable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Enable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Enable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Enable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Enable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Enable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Enable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Enable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Enable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Enable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Enable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Timeout Error Interrupt Enable
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Enable
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer completed Interrupt Enable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt enable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt enable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Enable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Enable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Enable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Disable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Disable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Disable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Disable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Disable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal received interrupt Disable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Disable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Disable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Disable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Disable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Disable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Disable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Disable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time out Error Interrupt Disable
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Disable
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer completed Interrupt Disable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt Disable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Disable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Disable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Disable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Disable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Mask
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Mask
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Mask
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Mask
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Mask
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Mask
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Mask
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Mask
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Mask
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Mask
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Mask
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Mask
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Mask
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error Interrupt Mask
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Mask
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer Completed Interrupt Mask
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO Empty Interrupt Mask
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Mask
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received Interrupt Mask
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error Interrupt Mask
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Mask
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Mask
    }

    /// DMA Register bits
    namespace dma_bits {
        constexpr uint32_t OFFSET = (2 << 0);  ///< DMA Write Buffer Offset
        constexpr uint32_t CHKSIZE = (3 << 4);  ///< DMA Channel Read and Write Chunk Size
        constexpr uint32_t DMAEN = (1U << 8);  ///< DMA Hardware Handshaking Enable
        constexpr uint32_t ROPT = (1U << 12);  ///< Read Optimization with padding
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t FIFOMODE = (1U << 0);  ///< HSMCI Internal FIFO control mode
        constexpr uint32_t FERRCTRL = (1U << 4);  ///< Flow Error flag reset control mode
        constexpr uint32_t HSMODE = (1U << 8);  ///< High Speed Mode
        constexpr uint32_t LSYNC = (1U << 12);  ///< Synchronize on the last block
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WP_EN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WP_KEY = (24 << 8);  ///< Write Protection Key password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WP_VS = (4 << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WP_VSRC = (16 << 8);  ///< Write Protection Violation SouRCe
    }

    /// FIFO__ Register bits
    namespace fifo___bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read or Data to Write
    }

}

// ============================================================================
// SSC Peripheral
// ============================================================================

namespace ssc {
    /// Base addresses
    constexpr uint32_t SSC_BASE = 0xF0010000;

    /// SSC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t CMR;  ///< Offset: 0x04 - Clock Mode Register
        volatile uint32_t RCMR;  ///< Offset: 0x10 - Receive Clock Mode Register
        volatile uint32_t RFMR;  ///< Offset: 0x14 - Receive Frame Mode Register
        volatile uint32_t TCMR;  ///< Offset: 0x18 - Transmit Clock Mode Register
        volatile uint32_t TFMR;  ///< Offset: 0x1C - Transmit Frame Mode Register
        volatile uint32_t RHR;  ///< Offset: 0x20 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x24 - Transmit Holding Register
        volatile uint32_t RSHR;  ///< Offset: 0x30 - Receive Sync. Holding Register
        volatile uint32_t TSHR;  ///< Offset: 0x34 - Transmit Sync. Holding Register
        volatile uint32_t RC0R;  ///< Offset: 0x38 - Receive Compare 0 Register
        volatile uint32_t RC1R;  ///< Offset: 0x3C - Receive Compare 1 Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* SSC = reinterpret_cast<Registers*>(SSC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RXEN = (1U << 0);  ///< Receive Enable
        constexpr uint32_t RXDIS = (1U << 1);  ///< Receive Disable
        constexpr uint32_t TXEN = (1U << 8);  ///< Transmit Enable
        constexpr uint32_t TXDIS = (1U << 9);  ///< Transmit Disable
        constexpr uint32_t SWRST = (1U << 15);  ///< Software Reset
    }

    /// CMR Register bits
    namespace cmr_bits {
        constexpr uint32_t DIV = (12 << 0);  ///< Clock Divider
    }

    /// RCMR Register bits
    namespace rcmr_bits {
        constexpr uint32_t CKS = (2 << 0);  ///< Receive Clock Selection
        constexpr uint32_t CKO = (3 << 2);  ///< Receive Clock Output Mode Selection
        constexpr uint32_t CKI = (1U << 5);  ///< Receive Clock Inversion
        constexpr uint32_t CKG = (2 << 6);  ///< Receive Clock Gating Selection
        constexpr uint32_t START = (4 << 8);  ///< Receive Start Selection
        constexpr uint32_t STOP = (1U << 12);  ///< Receive Stop Selection
        constexpr uint32_t STTDLY = (8 << 16);  ///< Receive Start Delay
        constexpr uint32_t PERIOD = (8 << 24);  ///< Receive Period Divider Selection
    }

    /// RFMR Register bits
    namespace rfmr_bits {
        constexpr uint32_t DATLEN = (5 << 0);  ///< Data Length
        constexpr uint32_t LOOP = (1U << 5);  ///< Loop Mode
        constexpr uint32_t MSBF = (1U << 7);  ///< Most Significant Bit First
        constexpr uint32_t DATNB = (4 << 8);  ///< Data Number per Frame
        constexpr uint32_t FSLEN = (4 << 16);  ///< Receive Frame Sync Length
        constexpr uint32_t FSOS = (3 << 20);  ///< Receive Frame Sync Output Selection
        constexpr uint32_t FSEDGE = (1U << 24);  ///< Frame Sync Edge Detection
        constexpr uint32_t FSLEN_EXT = (4 << 28);  ///< FSLEN Field Extension
    }

    /// TCMR Register bits
    namespace tcmr_bits {
        constexpr uint32_t CKS = (2 << 0);  ///< Transmit Clock Selection
        constexpr uint32_t CKO = (3 << 2);  ///< Transmit Clock Output Mode Selection
        constexpr uint32_t CKI = (1U << 5);  ///< Transmit Clock Inversion
        constexpr uint32_t CKG = (2 << 6);  ///< Transmit Clock Gating Selection
        constexpr uint32_t START = (4 << 8);  ///< Transmit Start Selection
        constexpr uint32_t STTDLY = (8 << 16);  ///< Transmit Start Delay
        constexpr uint32_t PERIOD = (8 << 24);  ///< Transmit Period Divider Selection
    }

    /// TFMR Register bits
    namespace tfmr_bits {
        constexpr uint32_t DATLEN = (5 << 0);  ///< Data Length
        constexpr uint32_t DATDEF = (1U << 5);  ///< Data Default Value
        constexpr uint32_t MSBF = (1U << 7);  ///< Most Significant Bit First
        constexpr uint32_t DATNB = (4 << 8);  ///< Data Number per frame
        constexpr uint32_t FSLEN = (4 << 16);  ///< Transmit Frame Sync Length
        constexpr uint32_t FSOS = (3 << 20);  ///< Transmit Frame Sync Output Selection
        constexpr uint32_t FSDEN = (1U << 23);  ///< Frame Sync Data Enable
        constexpr uint32_t FSEDGE = (1U << 24);  ///< Frame Sync Edge Detection
        constexpr uint32_t FSLEN_EXT = (4 << 28);  ///< FSLEN Field Extension
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RDAT = (32 << 0);  ///< Receive Data
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TDAT = (32 << 0);  ///< Transmit Data
    }

    /// RSHR Register bits
    namespace rshr_bits {
        constexpr uint32_t RSDAT = (16 << 0);  ///< Receive Synchronization Data
    }

    /// TSHR Register bits
    namespace tshr_bits {
        constexpr uint32_t TSDAT = (16 << 0);  ///< Transmit Synchronization Data
    }

    /// RC0R Register bits
    namespace rc0r_bits {
        constexpr uint32_t CP0 = (16 << 0);  ///< Receive Compare Data 0
    }

    /// RC1R Register bits
    namespace rc1r_bits {
        constexpr uint32_t CP1 = (16 << 0);  ///< Receive Compare Data 1
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1
        constexpr uint32_t TXSYN = (1U << 10);  ///< Transmit Sync
        constexpr uint32_t RXSYN = (1U << 11);  ///< Receive Sync
        constexpr uint32_t TXEN = (1U << 16);  ///< Transmit Enable
        constexpr uint32_t RXEN = (1U << 17);  ///< Receive Enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Enable
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Enable
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Enable
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Enable
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Enable
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Disable
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Disable
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Disable
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Disable
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Enable
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Enable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Mask
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Mask
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Mask
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Mask
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Mask
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Mask
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TC0_BASE = 0xF8008000;
    constexpr uint32_t TC1_BASE = 0xF800C000;
    constexpr uint32_t PIT_BASE = 0xFFFFFE30;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CCR0;  ///< Offset: 0x00 - Channel Control Register (channel = 0)
        volatile uint32_t CMR0;  ///< Offset: 0x04 - Channel Mode Register (channel = 0)
        volatile uint32_t CMR0_WAVE_EQ_1;  ///< Offset: 0x04 - Channel Mode Register (channel = 0)
        volatile uint32_t RAB0;  ///< Offset: 0x0C - Register AB (channel = 0)
        volatile uint32_t CV0;  ///< Offset: 0x10 - Counter Value (channel = 0)
        volatile uint32_t RA0;  ///< Offset: 0x14 - Register A (channel = 0)
        volatile uint32_t RB0;  ///< Offset: 0x18 - Register B (channel = 0)
        volatile uint32_t RC0;  ///< Offset: 0x1C - Register C (channel = 0)
        volatile uint32_t SR0;  ///< Offset: 0x20 - Status Register (channel = 0)
        volatile uint32_t IER0;  ///< Offset: 0x24 - Interrupt Enable Register (channel = 0)
        volatile uint32_t IDR0;  ///< Offset: 0x28 - Interrupt Disable Register (channel = 0)
        volatile uint32_t IMR0;  ///< Offset: 0x2C - Interrupt Mask Register (channel = 0)
        volatile uint32_t CCR1;  ///< Offset: 0x40 - Channel Control Register (channel = 1)
        volatile uint32_t CMR1;  ///< Offset: 0x44 - Channel Mode Register (channel = 1)
        volatile uint32_t CMR1_WAVE_EQ_1;  ///< Offset: 0x44 - Channel Mode Register (channel = 1)
        volatile uint32_t RAB1;  ///< Offset: 0x4C - Register AB (channel = 1)
        volatile uint32_t CV1;  ///< Offset: 0x50 - Counter Value (channel = 1)
        volatile uint32_t RA1;  ///< Offset: 0x54 - Register A (channel = 1)
        volatile uint32_t RB1;  ///< Offset: 0x58 - Register B (channel = 1)
        volatile uint32_t RC1;  ///< Offset: 0x5C - Register C (channel = 1)
        volatile uint32_t SR1;  ///< Offset: 0x60 - Status Register (channel = 1)
        volatile uint32_t IER1;  ///< Offset: 0x64 - Interrupt Enable Register (channel = 1)
        volatile uint32_t IDR1;  ///< Offset: 0x68 - Interrupt Disable Register (channel = 1)
        volatile uint32_t IMR1;  ///< Offset: 0x6C - Interrupt Mask Register (channel = 1)
        volatile uint32_t CCR2;  ///< Offset: 0x80 - Channel Control Register (channel = 2)
        volatile uint32_t CMR2;  ///< Offset: 0x84 - Channel Mode Register (channel = 2)
        volatile uint32_t CMR2_WAVE_EQ_1;  ///< Offset: 0x84 - Channel Mode Register (channel = 2)
        volatile uint32_t RAB2;  ///< Offset: 0x8C - Register AB (channel = 2)
        volatile uint32_t CV2;  ///< Offset: 0x90 - Counter Value (channel = 2)
        volatile uint32_t RA2;  ///< Offset: 0x94 - Register A (channel = 2)
        volatile uint32_t RB2;  ///< Offset: 0x98 - Register B (channel = 2)
        volatile uint32_t RC2;  ///< Offset: 0x9C - Register C (channel = 2)
        volatile uint32_t SR2;  ///< Offset: 0xA0 - Status Register (channel = 2)
        volatile uint32_t IER2;  ///< Offset: 0xA4 - Interrupt Enable Register (channel = 2)
        volatile uint32_t IDR2;  ///< Offset: 0xA8 - Interrupt Disable Register (channel = 2)
        volatile uint32_t IMR2;  ///< Offset: 0xAC - Interrupt Mask Register (channel = 2)
        volatile uint32_t BCR;  ///< Offset: 0xC0 - Block Control Register
        volatile uint32_t BMR;  ///< Offset: 0xC4 - Block Mode Register
    };

    /// Peripheral instances
    inline Registers* TC0 = reinterpret_cast<Registers*>(TC0_BASE);
    inline Registers* TC1 = reinterpret_cast<Registers*>(TC1_BASE);
    inline Registers* PIT = reinterpret_cast<Registers*>(PIT_BASE);

    // Bit definitions
    /// CCR0 Register bits
    namespace ccr0_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR0 Register bits
    namespace cmr0_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR0_WAVE_EQ_1 Register bits
    namespace cmr0_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// RAB0 Register bits
    namespace rab0_bits {
        constexpr uint32_t RAB = (32 << 0);  ///< Register A or Register B
    }

    /// CV0 Register bits
    namespace cv0_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA0 Register bits
    namespace ra0_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB0 Register bits
    namespace rb0_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC0 Register bits
    namespace rc0_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR0 Register bits
    namespace sr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER0 Register bits
    namespace ier0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR0 Register bits
    namespace idr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR0 Register bits
    namespace imr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR1 Register bits
    namespace cmr1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR1_WAVE_EQ_1 Register bits
    namespace cmr1_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// RAB1 Register bits
    namespace rab1_bits {
        constexpr uint32_t RAB = (32 << 0);  ///< Register A or Register B
    }

    /// CV1 Register bits
    namespace cv1_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA1 Register bits
    namespace ra1_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB1 Register bits
    namespace rb1_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC1 Register bits
    namespace rc1_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR1 Register bits
    namespace sr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER1 Register bits
    namespace ier1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR1 Register bits
    namespace idr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR1 Register bits
    namespace imr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR2 Register bits
    namespace cmr2_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR2_WAVE_EQ_1 Register bits
    namespace cmr2_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// RAB2 Register bits
    namespace rab2_bits {
        constexpr uint32_t RAB = (32 << 0);  ///< Register A or Register B
    }

    /// CV2 Register bits
    namespace cv2_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA2 Register bits
    namespace ra2_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB2 Register bits
    namespace rb2_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC2 Register bits
    namespace rc2_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR2 Register bits
    namespace sr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER2 Register bits
    namespace ier2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR2 Register bits
    namespace idr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR2 Register bits
    namespace imr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// BCR Register bits
    namespace bcr_bits {
        constexpr uint32_t SYNC = (1U << 0);  ///< Synchro Command
    }

    /// BMR Register bits
    namespace bmr_bits {
        constexpr uint32_t TC0XC0S = (2 << 0);  ///< External Clock Signal 0 Selection
        constexpr uint32_t TC1XC1S = (2 << 2);  ///< External Clock Signal 1 Selection
        constexpr uint32_t TC2XC2S = (2 << 4);  ///< External Clock Signal 2 Selection
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t TWI0_BASE = 0xF8010000;
    constexpr uint32_t TWI1_BASE = 0xF8014000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MMR;  ///< Offset: 0x04 - Master Mode Register
        volatile uint32_t SMR;  ///< Offset: 0x08 - Slave Mode Register
        volatile uint32_t IADR;  ///< Offset: 0x0C - Internal Address Register
        volatile uint32_t CWGR;  ///< Offset: 0x10 - Clock Waveform Generator Register
        volatile uint32_t SR;  ///< Offset: 0x20 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x24 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x28 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x2C - Interrupt Mask Register
        volatile uint32_t RHR;  ///< Offset: 0x30 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x34 - Transmit Holding Register
        volatile uint32_t WPROT_MODE;  ///< Offset: 0xE4 - Protection Mode Register
        volatile uint32_t WPROT_STATUS;  ///< Offset: 0xE8 - Protection Status Register
    };

    /// Peripheral instances
    inline Registers* TWI0 = reinterpret_cast<Registers*>(TWI0_BASE);
    inline Registers* TWI1 = reinterpret_cast<Registers*>(TWI1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t START = (1U << 0);  ///< Send a START Condition
        constexpr uint32_t STOP = (1U << 1);  ///< Send a STOP Condition
        constexpr uint32_t MSEN = (1U << 2);  ///< TWI Master Mode Enabled
        constexpr uint32_t MSDIS = (1U << 3);  ///< TWI Master Mode Disabled
        constexpr uint32_t SVEN = (1U << 4);  ///< TWI Slave Mode Enabled
        constexpr uint32_t SVDIS = (1U << 5);  ///< TWI Slave Mode Disabled
        constexpr uint32_t QUICK = (1U << 6);  ///< SMBUS Quick Command
        constexpr uint32_t SWRST = (1U << 7);  ///< Software Reset
    }

    /// MMR Register bits
    namespace mmr_bits {
        constexpr uint32_t IADRSZ = (2 << 8);  ///< Internal Device Address Size
        constexpr uint32_t MREAD = (1U << 12);  ///< Master Read Direction
        constexpr uint32_t DADR = (7 << 16);  ///< Device Address
    }

    /// SMR Register bits
    namespace smr_bits {
        constexpr uint32_t SADR = (7 << 16);  ///< Slave Address
    }

    /// IADR Register bits
    namespace iadr_bits {
        constexpr uint32_t IADR = (24 << 0);  ///< Internal Address
    }

    /// CWGR Register bits
    namespace cwgr_bits {
        constexpr uint32_t CLDIV = (8 << 0);  ///< Clock Low Divider
        constexpr uint32_t CHDIV = (8 << 8);  ///< Clock High Divider
        constexpr uint32_t CKDIV = (3 << 16);  ///< Clock Divider
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed (automatically set / reset)
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready (automatically set / reset)
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready (automatically set / reset)
        constexpr uint32_t SVREAD = (1U << 3);  ///< Slave Read (automatically set / reset)
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access (automatically set / reset)
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access (clear on read)
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error (clear on read)
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledged (clear on read)
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost (clear on read)
        constexpr uint32_t SCLWS = (1U << 10);  ///< Clock Wait State (automatically set / reset)
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access (clear on read)
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Enable
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Enable
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Enable
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Enable
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Enable
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Enable
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Disable
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Disable
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Disable
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Disable
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Disable
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Disable
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Mask
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Mask
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Mask
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Mask
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Mask
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Mask
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Mask
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RXDATA = (8 << 0);  ///< Master or Slave Receive Holding Data
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TXDATA = (8 << 0);  ///< Master or Slave Transmit Holding Data
    }

    /// WPROT_MODE Register bits
    namespace wprot_mode_bits {
        constexpr uint32_t WPROT = (1U << 0);  ///< Write protection bit
        constexpr uint32_t SECURITY_CODE = (24 << 8);  ///< Write protection mode security code
    }

    /// WPROT_STATUS Register bits
    namespace wprot_status_bits {
        constexpr uint32_t WPROTERR = (1U << 0);  ///< Write Protection Error
        constexpr uint32_t WPROTADDR = (24 << 8);  ///< Write Protection Error Address
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART0_BASE = 0xF801C000;
    constexpr uint32_t USART1_BASE = 0xF8020000;
    constexpr uint32_t USART2_BASE = 0xF8024000;
    constexpr uint32_t USART3_BASE = 0xF8028000;
    constexpr uint32_t UART0_BASE = 0xF8040000;
    constexpr uint32_t UART1_BASE = 0xF8044000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t CR_SPI_MODE;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t MR_SPI_MODE;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t IER;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IER_SPI_MODE;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IER_LIN_MODE;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IDR_SPI_MODE;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IDR_LIN_MODE;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t IMR_SPI_MODE;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t IMR_LIN_MODE;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t CSR;  ///< Offset: 0x14 - Channel Status Register
        volatile uint32_t CSR_SPI_MODE;  ///< Offset: 0x14 - Channel Status Register
        volatile uint32_t CSR_LIN_MODE;  ///< Offset: 0x14 - Channel Status Register
        volatile uint32_t RHR;  ///< Offset: 0x18 - Receiver Holding Register
        volatile uint32_t THR;  ///< Offset: 0x1C - Transmitter Holding Register
        volatile uint32_t BRGR;  ///< Offset: 0x20 - Baud Rate Generator Register
        volatile uint32_t RTOR;  ///< Offset: 0x24 - Receiver Time-out Register
        volatile uint32_t TTGR;  ///< Offset: 0x28 - Transmitter Timeguard Register
        volatile uint32_t FIDI;  ///< Offset: 0x40 - FI DI Ratio Register
        volatile uint32_t NER;  ///< Offset: 0x44 - Number of Errors Register
        volatile uint32_t IF_;  ///< Offset: 0x4C - IrDA Filter Register (renamed from IF_)
        volatile uint32_t MAN;  ///< Offset: 0x50 - Manchester Encoder Decoder Register
        volatile uint32_t LINMR;  ///< Offset: 0x54 - LIN Mode Register
        volatile uint32_t LINIR;  ///< Offset: 0x58 - LIN Identifier Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* USART0 = reinterpret_cast<Registers*>(USART0_BASE);
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);
    inline Registers* USART3 = reinterpret_cast<Registers*>(USART3_BASE);
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);
    inline Registers* UART1 = reinterpret_cast<Registers*>(UART1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RSTRX = (1U << 2);  ///< Reset Receiver
        constexpr uint32_t RSTTX = (1U << 3);  ///< Reset Transmitter
        constexpr uint32_t RXEN = (1U << 4);  ///< Receiver Enable
        constexpr uint32_t RXDIS = (1U << 5);  ///< Receiver Disable
        constexpr uint32_t TXEN = (1U << 6);  ///< Transmitter Enable
        constexpr uint32_t TXDIS = (1U << 7);  ///< Transmitter Disable
        constexpr uint32_t RSTSTA = (1U << 8);  ///< Reset Status Bits
        constexpr uint32_t STTBRK = (1U << 9);  ///< Start Break
        constexpr uint32_t STPBRK = (1U << 10);  ///< Stop Break
        constexpr uint32_t STTTO = (1U << 11);  ///< Start Time-out
        constexpr uint32_t SENDA = (1U << 12);  ///< Send Address
        constexpr uint32_t RSTIT = (1U << 13);  ///< Reset Iterations
        constexpr uint32_t RSTNACK = (1U << 14);  ///< Reset Non Acknowledge
        constexpr uint32_t RETTO = (1U << 15);  ///< Rearm Time-out
        constexpr uint32_t RTSEN = (1U << 18);  ///< Request to Send Enable
        constexpr uint32_t RTSDIS = (1U << 19);  ///< Request to Send Disable
        constexpr uint32_t LINABT = (1U << 20);  ///< Abort LIN Transmission
        constexpr uint32_t LINWKUP = (1U << 21);  ///< Send LIN Wakeup Signal
    }

    /// CR_SPI_MODE Register bits
    namespace cr_spi_mode_bits {
        constexpr uint32_t RSTRX = (1U << 2);  ///< Reset Receiver
        constexpr uint32_t RSTTX = (1U << 3);  ///< Reset Transmitter
        constexpr uint32_t RXEN = (1U << 4);  ///< Receiver Enable
        constexpr uint32_t RXDIS = (1U << 5);  ///< Receiver Disable
        constexpr uint32_t TXEN = (1U << 6);  ///< Transmitter Enable
        constexpr uint32_t TXDIS = (1U << 7);  ///< Transmitter Disable
        constexpr uint32_t RSTSTA = (1U << 8);  ///< Reset Status Bits
        constexpr uint32_t FCS = (1U << 18);  ///< Force SPI Chip Select
        constexpr uint32_t RCS = (1U << 19);  ///< Release SPI Chip Select
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t USART_MODE = (4 << 0);  ///< USART Mode of Operation
        constexpr uint32_t USCLKS = (2 << 4);  ///< Clock Selection
        constexpr uint32_t CHRL = (2 << 6);  ///< Character Length.
        constexpr uint32_t SYNC = (1U << 8);  ///< Synchronous Mode Select
        constexpr uint32_t PAR = (3 << 9);  ///< Parity Type
        constexpr uint32_t NBSTOP = (2 << 12);  ///< Number of Stop Bits
        constexpr uint32_t CHMODE = (2 << 14);  ///< Channel Mode
        constexpr uint32_t MSBF = (1U << 16);  ///< Bit Order
        constexpr uint32_t MODE9 = (1U << 17);  ///< 9-bit Character Length
        constexpr uint32_t CLKO = (1U << 18);  ///< Clock Output Select
        constexpr uint32_t OVER = (1U << 19);  ///< Oversampling Mode
        constexpr uint32_t INACK = (1U << 20);  ///< Inhibit Non Acknowledge
        constexpr uint32_t DSNACK = (1U << 21);  ///< Disable Successive NACK
        constexpr uint32_t VAR_SYNC = (1U << 22);  ///< Variable Synchronization of Command/Data Sync Start Frame Delimiter
        constexpr uint32_t INVDATA = (1U << 23);  ///< INverted Data
        constexpr uint32_t MAX_ITERATION = (3 << 24);  ///< Maximum Number of Automatic Iteration
        constexpr uint32_t FILTER = (1U << 28);  ///< Infrared Receive Line Filter
        constexpr uint32_t MAN = (1U << 29);  ///< Manchester Encoder/Decoder Enable
        constexpr uint32_t MODSYNC = (1U << 30);  ///< Manchester Synchronization Mode
        constexpr uint32_t ONEBIT = (1U << 31);  ///< Start Frame Delimiter Selector
    }

    /// MR_SPI_MODE Register bits
    namespace mr_spi_mode_bits {
        constexpr uint32_t USART_MODE = (4 << 0);  ///< USART Mode of Operation
        constexpr uint32_t USCLKS = (2 << 4);  ///< Clock Selection
        constexpr uint32_t CHRL = (2 << 6);  ///< Character Length.
        constexpr uint32_t CPHA = (1U << 8);  ///< SPI Clock Phase
        constexpr uint32_t CPOL = (1U << 16);  ///< SPI Clock Polarity
        constexpr uint32_t WRDBT = (1U << 20);  ///< Wait Read Data Before Transfer
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Enable
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Enable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Enable
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Enable
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Enable
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached Interrupt Enable
        constexpr uint32_t NACK = (1U << 13);  ///< Non Acknowledge Interrupt Enable
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Enable
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Enable
    }

    /// IER_SPI_MODE Register bits
    namespace ier_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Enable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Enable
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Enable
    }

    /// IER_LIN_MODE Register bits
    namespace ier_lin_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Enable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Enable
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Enable
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Enable
        constexpr uint32_t LINBK = (1U << 13);  ///< LIN Break Sent or LIN Break Received Interrupt Enable
        constexpr uint32_t LINID = (1U << 14);  ///< LIN Identifier Sent or LIN Identifier Received Interrupt Enable
        constexpr uint32_t LINTC = (1U << 15);  ///< LIN Transfer Completed Interrupt Enable
        constexpr uint32_t LINBE = (1U << 25);  ///< LIN Bus Error Interrupt Enable
        constexpr uint32_t LINISFE = (1U << 26);  ///< LIN Inconsistent Synch Field Error Interrupt Enable
        constexpr uint32_t LINIPE = (1U << 27);  ///< LIN Identifier Parity Interrupt Enable
        constexpr uint32_t LINCE = (1U << 28);  ///< LIN Checksum Error Interrupt Enable
        constexpr uint32_t LINSNRE = (1U << 29);  ///< LIN Slave Not Responding Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Disable
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Disable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Disable
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Disable
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Disable
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached Interrupt Disable
        constexpr uint32_t NACK = (1U << 13);  ///< Non Acknowledge Interrupt Disable
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Disable
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Disable
    }

    /// IDR_SPI_MODE Register bits
    namespace idr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Disable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Disable
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Disable
    }

    /// IDR_LIN_MODE Register bits
    namespace idr_lin_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Disable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Disable
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Disable
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Disable
        constexpr uint32_t LINBK = (1U << 13);  ///< LIN Break Sent or LIN Break Received Interrupt Disable
        constexpr uint32_t LINID = (1U << 14);  ///< LIN Identifier Sent or LIN Identifier Received Interrupt Disable
        constexpr uint32_t LINTC = (1U << 15);  ///< LIN Transfer Completed Interrupt Disable
        constexpr uint32_t LINBE = (1U << 25);  ///< LIN Bus Error Interrupt Disable
        constexpr uint32_t LINISFE = (1U << 26);  ///< LIN Inconsistent Synch Field Error Interrupt Disable
        constexpr uint32_t LINIPE = (1U << 27);  ///< LIN Identifier Parity Interrupt Disable
        constexpr uint32_t LINCE = (1U << 28);  ///< LIN Checksum Error Interrupt Disable
        constexpr uint32_t LINSNRE = (1U << 29);  ///< LIN Slave Not Responding Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Mask
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Mask
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Mask
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Mask
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Mask
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached Interrupt Mask
        constexpr uint32_t NACK = (1U << 13);  ///< Non Acknowledge Interrupt Mask
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Mask
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Mask
    }

    /// IMR_SPI_MODE Register bits
    namespace imr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Mask
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Mask
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Mask
    }

    /// IMR_LIN_MODE Register bits
    namespace imr_lin_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Mask
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Mask
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Mask
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Mask
        constexpr uint32_t LINBK = (1U << 13);  ///< LIN Break Sent or LIN Break Received Interrupt Mask
        constexpr uint32_t LINID = (1U << 14);  ///< LIN Identifier Sent or LIN Identifier Received Interrupt Mask
        constexpr uint32_t LINTC = (1U << 15);  ///< LIN Transfer Completed Interrupt Mask
        constexpr uint32_t LINBE = (1U << 25);  ///< LIN Bus Error Interrupt Mask
        constexpr uint32_t LINISFE = (1U << 26);  ///< LIN Inconsistent Synch Field Error Interrupt Mask
        constexpr uint32_t LINIPE = (1U << 27);  ///< LIN Identifier Parity Interrupt Mask
        constexpr uint32_t LINCE = (1U << 28);  ///< LIN Checksum Error Interrupt Mask
        constexpr uint32_t LINSNRE = (1U << 29);  ///< LIN Slave Not Responding Error Interrupt Mask
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t RXBRK = (1U << 2);  ///< Break Received/End of Break
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Receiver Time-out
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached
        constexpr uint32_t NACK = (1U << 13);  ///< Non Acknowledge Interrupt
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Flag
        constexpr uint32_t CTS = (1U << 23);  ///< Image of CTS Input
        constexpr uint32_t MANERR = (1U << 24);  ///< Manchester Error
    }

    /// CSR_SPI_MODE Register bits
    namespace csr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t UNRE = (1U << 10);  ///< Underrun Error
    }

    /// CSR_LIN_MODE Register bits
    namespace csr_lin_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Receiver Time-out
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t LINBK = (1U << 13);  ///< LIN Break Sent or LIN Break Received
        constexpr uint32_t LINID = (1U << 14);  ///< LIN Identifier Sent or LIN Identifier Received
        constexpr uint32_t LINTC = (1U << 15);  ///< LIN Transfer Completed
        constexpr uint32_t LINBLS = (1U << 23);  ///< LIN Bus Line Status
        constexpr uint32_t LINBE = (1U << 25);  ///< LIN Bit Error
        constexpr uint32_t LINISFE = (1U << 26);  ///< LIN Inconsistent Synch Field Error
        constexpr uint32_t LINIPE = (1U << 27);  ///< LIN Identifier Parity Error
        constexpr uint32_t LINCE = (1U << 28);  ///< LIN Checksum Error
        constexpr uint32_t LINSNRE = (1U << 29);  ///< LIN Slave Not Responding Error
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RXCHR = (9 << 0);  ///< Received Character
        constexpr uint32_t RXSYNH = (1U << 15);  ///< Received Sync
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TXCHR = (9 << 0);  ///< Character to be Transmitted
        constexpr uint32_t TXSYNH = (1U << 15);  ///< Sync Field to be transmitted
    }

    /// BRGR Register bits
    namespace brgr_bits {
        constexpr uint32_t CD = (16 << 0);  ///< Clock Divider
        constexpr uint32_t FP = (3 << 16);  ///< Fractional Part
    }

    /// RTOR Register bits
    namespace rtor_bits {
        constexpr uint32_t TO = (17 << 0);  ///< Time-out Value
    }

    /// TTGR Register bits
    namespace ttgr_bits {
        constexpr uint32_t TG = (8 << 0);  ///< Timeguard Value
    }

    /// FIDI Register bits
    namespace fidi_bits {
        constexpr uint32_t FI_DI_RATIO = (11 << 0);  ///< FI Over DI Ratio Value
    }

    /// NER Register bits
    namespace ner_bits {
        constexpr uint32_t NB_ERRORS = (8 << 0);  ///< Number of Errors
    }

    /// IF_ Register bits
    namespace if__bits {
        constexpr uint32_t IRDA_FILTER = (8 << 0);  ///< IrDA Filter
    }

    /// MAN Register bits
    namespace man_bits {
        constexpr uint32_t TX_PL = (4 << 0);  ///< Transmitter Preamble Length
        constexpr uint32_t TX_PP = (2 << 8);  ///< Transmitter Preamble Pattern
        constexpr uint32_t TX_MPOL = (1U << 12);  ///< Transmitter Manchester Polarity
        constexpr uint32_t RX_PL = (4 << 16);  ///< Receiver Preamble Length
        constexpr uint32_t RX_PP = (2 << 24);  ///< Receiver Preamble Pattern detected
        constexpr uint32_t RX_MPOL = (1U << 28);  ///< Receiver Manchester Polarity
        constexpr uint32_t ONE = (1U << 29);  ///< Must Be Set to 1
        constexpr uint32_t DRIFT = (1U << 30);  ///< Drift compensation
    }

    /// LINMR Register bits
    namespace linmr_bits {
        constexpr uint32_t NACT = (2 << 0);  ///< LIN Node Action
        constexpr uint32_t PARDIS = (1U << 2);  ///< Parity Disable
        constexpr uint32_t CHKDIS = (1U << 3);  ///< Checksum Disable
        constexpr uint32_t CHKTYP = (1U << 4);  ///< Checksum Type
        constexpr uint32_t DLM = (1U << 5);  ///< Data Length Mode
        constexpr uint32_t FSDIS = (1U << 6);  ///< Frame Slot Mode Disable
        constexpr uint32_t WKUPTYP = (1U << 7);  ///< Wakeup Signal Type
        constexpr uint32_t DLC = (8 << 8);  ///< Data Length Control
        constexpr uint32_t PDCM = (1U << 16);  ///< DMAC Mode
    }

    /// LINIR Register bits
    namespace linir_bits {
        constexpr uint32_t IDCHR = (8 << 0);  ///< Identifier Character
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t PWM_BASE = 0xF8034000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t MR;  ///< Offset: 0x00 - PWM Mode Register
        volatile uint32_t ENA;  ///< Offset: 0x04 - PWM Enable Register
        volatile uint32_t DIS;  ///< Offset: 0x08 - PWM Disable Register
        volatile uint32_t SR;  ///< Offset: 0x0C - PWM Status Register
        volatile uint32_t IER;  ///< Offset: 0x10 - PWM Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x14 - PWM Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - PWM Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x1C - PWM Interrupt Status Register
        volatile uint32_t CMR0;  ///< Offset: 0x200 - PWM Channel Mode Register (ch_num = 0)
        volatile uint32_t CDTY0;  ///< Offset: 0x204 - PWM Channel Duty Cycle Register (ch_num = 0)
        volatile uint32_t CPRD0;  ///< Offset: 0x208 - PWM Channel Period Register (ch_num = 0)
        volatile uint32_t CCNT0;  ///< Offset: 0x20C - PWM Channel Counter Register (ch_num = 0)
        volatile uint32_t CUPD0;  ///< Offset: 0x210 - PWM Channel Update Register (ch_num = 0)
        volatile uint32_t CMR1;  ///< Offset: 0x220 - PWM Channel Mode Register (ch_num = 1)
        volatile uint32_t CDTY1;  ///< Offset: 0x224 - PWM Channel Duty Cycle Register (ch_num = 1)
        volatile uint32_t CPRD1;  ///< Offset: 0x228 - PWM Channel Period Register (ch_num = 1)
        volatile uint32_t CCNT1;  ///< Offset: 0x22C - PWM Channel Counter Register (ch_num = 1)
        volatile uint32_t CUPD1;  ///< Offset: 0x230 - PWM Channel Update Register (ch_num = 1)
        volatile uint32_t CMR2;  ///< Offset: 0x240 - PWM Channel Mode Register (ch_num = 2)
        volatile uint32_t CDTY2;  ///< Offset: 0x244 - PWM Channel Duty Cycle Register (ch_num = 2)
        volatile uint32_t CPRD2;  ///< Offset: 0x248 - PWM Channel Period Register (ch_num = 2)
        volatile uint32_t CCNT2;  ///< Offset: 0x24C - PWM Channel Counter Register (ch_num = 2)
        volatile uint32_t CUPD2;  ///< Offset: 0x250 - PWM Channel Update Register (ch_num = 2)
        volatile uint32_t CMR3;  ///< Offset: 0x260 - PWM Channel Mode Register (ch_num = 3)
        volatile uint32_t CDTY3;  ///< Offset: 0x264 - PWM Channel Duty Cycle Register (ch_num = 3)
        volatile uint32_t CPRD3;  ///< Offset: 0x268 - PWM Channel Period Register (ch_num = 3)
        volatile uint32_t CCNT3;  ///< Offset: 0x26C - PWM Channel Counter Register (ch_num = 3)
        volatile uint32_t CUPD3;  ///< Offset: 0x270 - PWM Channel Update Register (ch_num = 3)
    };

    /// Peripheral instances
    inline Registers* PWM = reinterpret_cast<Registers*>(PWM_BASE);

    // Bit definitions
    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t DIVA = (8 << 0);  ///< CLKA, CLKB Divide Factor
        constexpr uint32_t PREA = (4 << 8);  ///< Master Clock
        constexpr uint32_t DIVB = (8 << 16);  ///< CLKA, CLKB Divide Factor
        constexpr uint32_t PREB = (4 << 24);  ///< Master Clock
    }

    /// ENA Register bits
    namespace ena_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// DIS Register bits
    namespace dis_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID.
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID.
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID.
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID.
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID.
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID.
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID.
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID.
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID.
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID.
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID.
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID.
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// CMR0 Register bits
    namespace cmr0_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CPD = (1U << 10);  ///< Channel Update Period
    }

    /// CDTY0 Register bits
    namespace cdty0_bits {
        constexpr uint32_t CDTY = (32 << 0);  ///< Channel Duty Cycle
    }

    /// CPRD0 Register bits
    namespace cprd0_bits {
        constexpr uint32_t CPRD = (32 << 0);  ///< Channel Period
    }

    /// CCNT0 Register bits
    namespace ccnt0_bits {
        constexpr uint32_t CNT = (32 << 0);  ///< Channel Counter Register
    }

    /// CUPD0 Register bits
    namespace cupd0_bits {
        constexpr uint32_t CUPD = (32 << 0);  ///< CUPD
    }

    /// CMR1 Register bits
    namespace cmr1_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CPD = (1U << 10);  ///< Channel Update Period
    }

    /// CDTY1 Register bits
    namespace cdty1_bits {
        constexpr uint32_t CDTY = (32 << 0);  ///< Channel Duty Cycle
    }

    /// CPRD1 Register bits
    namespace cprd1_bits {
        constexpr uint32_t CPRD = (32 << 0);  ///< Channel Period
    }

    /// CCNT1 Register bits
    namespace ccnt1_bits {
        constexpr uint32_t CNT = (32 << 0);  ///< Channel Counter Register
    }

    /// CUPD1 Register bits
    namespace cupd1_bits {
        constexpr uint32_t CUPD = (32 << 0);  ///< CUPD
    }

    /// CMR2 Register bits
    namespace cmr2_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CPD = (1U << 10);  ///< Channel Update Period
    }

    /// CDTY2 Register bits
    namespace cdty2_bits {
        constexpr uint32_t CDTY = (32 << 0);  ///< Channel Duty Cycle
    }

    /// CPRD2 Register bits
    namespace cprd2_bits {
        constexpr uint32_t CPRD = (32 << 0);  ///< Channel Period
    }

    /// CCNT2 Register bits
    namespace ccnt2_bits {
        constexpr uint32_t CNT = (32 << 0);  ///< Channel Counter Register
    }

    /// CUPD2 Register bits
    namespace cupd2_bits {
        constexpr uint32_t CUPD = (32 << 0);  ///< CUPD
    }

    /// CMR3 Register bits
    namespace cmr3_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CPD = (1U << 10);  ///< Channel Update Period
    }

    /// CDTY3 Register bits
    namespace cdty3_bits {
        constexpr uint32_t CDTY = (32 << 0);  ///< Channel Duty Cycle
    }

    /// CPRD3 Register bits
    namespace cprd3_bits {
        constexpr uint32_t CPRD = (32 << 0);  ///< Channel Period
    }

    /// CCNT3 Register bits
    namespace ccnt3_bits {
        constexpr uint32_t CNT = (32 << 0);  ///< Channel Counter Register
    }

    /// CUPD3 Register bits
    namespace cupd3_bits {
        constexpr uint32_t CUPD = (32 << 0);  ///< CUPD
    }

}

// ============================================================================
// LCDC Peripheral
// ============================================================================

namespace lcdc {
    /// Base addresses
    constexpr uint32_t LCDC_BASE = 0xF8038000;

    /// LCDC Register structure
    struct Registers {
        volatile uint32_t LCDCFG0;  ///< Offset: 0x00 - LCD Controller Configuration Register 0
        volatile uint32_t LCDCFG1;  ///< Offset: 0x04 - LCD Controller Configuration Register 1
        volatile uint32_t LCDCFG2;  ///< Offset: 0x08 - LCD Controller Configuration Register 2
        volatile uint32_t LCDCFG3;  ///< Offset: 0x0C - LCD Controller Configuration Register 3
        volatile uint32_t LCDCFG4;  ///< Offset: 0x10 - LCD Controller Configuration Register 4
        volatile uint32_t LCDCFG5;  ///< Offset: 0x14 - LCD Controller Configuration Register 5
        volatile uint32_t LCDCFG6;  ///< Offset: 0x18 - LCD Controller Configuration Register 6
        volatile uint32_t LCDEN;  ///< Offset: 0x20 - LCD Controller Enable Register
        volatile uint32_t LCDDIS;  ///< Offset: 0x24 - LCD Controller Disable Register
        volatile uint32_t LCDSR;  ///< Offset: 0x28 - LCD Controller Status Register
        volatile uint32_t LCDIER;  ///< Offset: 0x2C - LCD Controller Interrupt Enable Register
        volatile uint32_t LCDIDR;  ///< Offset: 0x30 - LCD Controller Interrupt Disable Register
        volatile uint32_t LCDIMR;  ///< Offset: 0x34 - LCD Controller Interrupt Mask Register
        volatile uint32_t LCDISR;  ///< Offset: 0x38 - LCD Controller Interrupt Status Register
        volatile uint32_t BASECHER;  ///< Offset: 0x40 - Base Layer Channel Enable Register
        volatile uint32_t BASECHDR;  ///< Offset: 0x44 - Base Layer Channel Disable Register
        volatile uint32_t BASECHSR;  ///< Offset: 0x48 - Base Layer Channel Status Register
        volatile uint32_t BASEIER;  ///< Offset: 0x4C - Base Layer Interrupt Enable Register
        volatile uint32_t BASEIDR;  ///< Offset: 0x50 - Base Layer Interrupt Disabled Register
        volatile uint32_t BASEIMR;  ///< Offset: 0x54 - Base Layer Interrupt Mask Register
        volatile uint32_t BASEISR;  ///< Offset: 0x58 - Base Layer Interrupt status Register
        volatile uint32_t BASEHEAD;  ///< Offset: 0x5C - Base Layer DMA Head Register
        volatile uint32_t BASEADDR;  ///< Offset: 0x60 - Base Layer DMA Address Register
        volatile uint32_t BASECTRL;  ///< Offset: 0x64 - Base Layer DMA Control Register
        volatile uint32_t BASENEXT;  ///< Offset: 0x68 - Base Layer DMA Next Register
        volatile uint32_t BASECFG0;  ///< Offset: 0x6C - Base Layer Configuration Register 0
        volatile uint32_t BASECFG1;  ///< Offset: 0x70 - Base Layer Configuration Register 1
        volatile uint32_t BASECFG2;  ///< Offset: 0x74 - Base Layer Configuration Register 2
        volatile uint32_t BASECFG3;  ///< Offset: 0x78 - Base Layer Configuration Register 3
        volatile uint32_t BASECFG4;  ///< Offset: 0x7C - Base Layer Configuration Register 4
        volatile uint32_t BASECLUT__;  ///< Offset: 0x400 - Base CLUT Register (renamed from BASECLUT__)
        volatile uint32_t ADDRSIZE;  ///< Offset: 0x1FEC - Address Size Register
        volatile uint32_t IPNAME__;  ///< Offset: 0x1FF0 - IP Name1 Register (renamed from IPNAME__)
        volatile uint32_t FEATURES;  ///< Offset: 0x1FF8 - Features Register
        volatile uint32_t VERSION;  ///< Offset: 0x1FFC - Version Register
    };

    /// Peripheral instances
    inline Registers* LCDC = reinterpret_cast<Registers*>(LCDC_BASE);

    // Bit definitions
    /// LCDCFG0 Register bits
    namespace lcdcfg0_bits {
        constexpr uint32_t CLKPOL = (1U << 0);  ///< LCD Controller Clock Polarity
        constexpr uint32_t CLKSEL = (1U << 2);  ///< LCD Controller Clock Source Selection
        constexpr uint32_t CLKPWMSEL = (1U << 3);  ///< LCD Controller PWM Clock Source Selection
        constexpr uint32_t CGDISBASE = (1U << 8);  ///< Clock Gating Disable Control for the Base Layer
        constexpr uint32_t CLKDIV = (8 << 16);  ///< LCD Controller Clock Divider
    }

    /// LCDCFG1 Register bits
    namespace lcdcfg1_bits {
        constexpr uint32_t HSPW = (6 << 0);  ///< Horizontal Synchronization Pulse Width
        constexpr uint32_t VSPW = (6 << 16);  ///< Vertical Synchronization Pulse Width
    }

    /// LCDCFG2 Register bits
    namespace lcdcfg2_bits {
        constexpr uint32_t VFPW = (6 << 0);  ///< Vertical Front Porch Width
        constexpr uint32_t VBPW = (6 << 16);  ///< Vertical Back Porch Width
    }

    /// LCDCFG3 Register bits
    namespace lcdcfg3_bits {
        constexpr uint32_t HFPW = (8 << 0);  ///< Horizontal Front Porch Width
        constexpr uint32_t HBPW = (8 << 16);  ///< Horizontal Back Porch Width
    }

    /// LCDCFG4 Register bits
    namespace lcdcfg4_bits {
        constexpr uint32_t PPL = (11 << 0);  ///< Number of Pixels Per Line
        constexpr uint32_t RPF = (11 << 16);  ///< Number of Active Rows Per Frame
    }

    /// LCDCFG5 Register bits
    namespace lcdcfg5_bits {
        constexpr uint32_t HSPOL = (1U << 0);  ///< Horizontal Synchronization Pulse Polarity
        constexpr uint32_t VSPOL = (1U << 1);  ///< Vertical Synchronization Pulse Polarity
        constexpr uint32_t VSPDLYS = (1U << 2);  ///< Vertical Synchronization Pulse Start
        constexpr uint32_t VSPDLYE = (1U << 3);  ///< Vertical Synchronization Pulse End
        constexpr uint32_t DISPPOL = (1U << 4);  ///< Display Signal Polarity
        constexpr uint32_t DITHER = (1U << 6);  ///< LCD Controller Dithering
        constexpr uint32_t DISPDLY = (1U << 7);  ///< LCD Controller Display Power Signal Synchronization
        constexpr uint32_t MODE = (2 << 8);  ///< LCD Controller Output Mode
        constexpr uint32_t VSPSU = (1U << 12);  ///< LCD Controller Vertical Synchronization Pulse Setup Configuration
        constexpr uint32_t VSPHO = (1U << 13);  ///< LCD Controller Vertical Synchronization Pulse Hold Configuration
        constexpr uint32_t GUARDTIME = (5 << 16);  ///< LCD DISPLAY Guard Time
    }

    /// LCDCFG6 Register bits
    namespace lcdcfg6_bits {
        constexpr uint32_t PWMPS = (3 << 0);  ///< PWM Clock Prescaler
        constexpr uint32_t PWMPOL = (1U << 4);  ///< LCD Controller PWM Signal Polarity
        constexpr uint32_t PWMCVAL = (8 << 8);  ///< LCD Controller PWM Compare Value
    }

    /// LCDEN Register bits
    namespace lcden_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< LCD Controller Pixel Clock Enable
        constexpr uint32_t SYNCEN = (1U << 1);  ///< LCD Controller Horizontal and Vertical Synchronization Enable
        constexpr uint32_t DISPEN = (1U << 2);  ///< LCD Controller DISP Signal Enable
        constexpr uint32_t PWMEN = (1U << 3);  ///< LCD Controller Pulse Width Modulation Enable
    }

    /// LCDDIS Register bits
    namespace lcddis_bits {
        constexpr uint32_t CLKDIS = (1U << 0);  ///< LCD Controller Pixel Clock Disable
        constexpr uint32_t SYNCDIS = (1U << 1);  ///< LCD Controller Horizontal and Vertical Synchronization Disable
        constexpr uint32_t DISPDIS = (1U << 2);  ///< LCD Controller DISP Signal Disable
        constexpr uint32_t PWMDIS = (1U << 3);  ///< LCD Controller Pulse Width Modulation Disable
        constexpr uint32_t CLKRST = (1U << 8);  ///< LCD Controller Clock Reset
        constexpr uint32_t SYNCRST = (1U << 9);  ///< LCD Controller Horizontal and Vertical Synchronization Reset
        constexpr uint32_t DISPRST = (1U << 10);  ///< LCD Controller DISP Signal Reset
        constexpr uint32_t PWMRST = (1U << 11);  ///< LCD Controller PWM Reset
    }

    /// LCDSR Register bits
    namespace lcdsr_bits {
        constexpr uint32_t CLKSTS = (1U << 0);  ///< Clock Status
        constexpr uint32_t LCDSTS = (1U << 1);  ///< LCD Controller Synchronization status
        constexpr uint32_t DISPSTS = (1U << 2);  ///< LCD Controller DISP Signal Status
        constexpr uint32_t PWMSTS = (1U << 3);  ///< LCD Controller PWM Signal Status
        constexpr uint32_t SIPSTS = (1U << 4);  ///< Synchronization In Progress
    }

    /// LCDIER Register bits
    namespace lcdier_bits {
        constexpr uint32_t SOFIE = (1U << 0);  ///< Start of Frame Interrupt Enable Register
        constexpr uint32_t DISIE = (1U << 1);  ///< LCD Disable Interrupt Enable Register
        constexpr uint32_t DISPIE = (1U << 2);  ///< Power UP/Down Sequence Terminated Interrupt Enable Register
        constexpr uint32_t FIFOERRIE = (1U << 4);  ///< Output FIFO Error Interrupt Enable Register
        constexpr uint32_t BASEIE = (1U << 8);  ///< Base Layer Interrupt Enable Register
    }

    /// LCDIDR Register bits
    namespace lcdidr_bits {
        constexpr uint32_t SOFID = (1U << 0);  ///< Start of Frame Interrupt Disable Register
        constexpr uint32_t DISID = (1U << 1);  ///< LCD Disable Interrupt Disable Register
        constexpr uint32_t DISPID = (1U << 2);  ///< Power UP/Down Sequence Terminated Interrupt Disable Register
        constexpr uint32_t FIFOERRID = (1U << 4);  ///< Output FIFO Error Interrupt Disable Register
        constexpr uint32_t BASEID = (1U << 8);  ///< Base Layer Interrupt Disable Register
    }

    /// LCDIMR Register bits
    namespace lcdimr_bits {
        constexpr uint32_t SOFIM = (1U << 0);  ///< Start of Frame Interrupt Mask Register
        constexpr uint32_t DISIM = (1U << 1);  ///< LCD Disable Interrupt Mask Register
        constexpr uint32_t DISPIM = (1U << 2);  ///< Power UP/Down Sequence Terminated Interrupt Mask Register
        constexpr uint32_t FIFOERRIM = (1U << 4);  ///< Output FIFO Error Interrupt Mask Register
        constexpr uint32_t BASEIM = (1U << 8);  ///< Base Layer Interrupt Mask Register
    }

    /// LCDISR Register bits
    namespace lcdisr_bits {
        constexpr uint32_t SOF = (1U << 0);  ///< Start of Frame Interrupt Status Register
        constexpr uint32_t DIS = (1U << 1);  ///< LCD Disable Interrupt Status Register
        constexpr uint32_t DISP = (1U << 2);  ///< Power-up/Power-down Sequence Terminated Interrupt Status Register
        constexpr uint32_t FIFOERR = (1U << 4);  ///< Output FIFO Error
        constexpr uint32_t BASE = (1U << 8);  ///< Base Layer Raw Interrupt Status Register
    }

    /// BASECHER Register bits
    namespace basecher_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel Enable Register
        constexpr uint32_t UPDATEEN = (1U << 1);  ///< Update Overlay Attributes Enable Register
        constexpr uint32_t A2QEN = (1U << 2);  ///< Add Head Pointer Enable Register
    }

    /// BASECHDR Register bits
    namespace basechdr_bits {
        constexpr uint32_t CHDIS = (1U << 0);  ///< Channel Disable Register
        constexpr uint32_t CHRST = (1U << 8);  ///< Channel Reset Register
    }

    /// BASECHSR Register bits
    namespace basechsr_bits {
        constexpr uint32_t CHSR = (1U << 0);  ///< Channel Status Register
        constexpr uint32_t UPDATESR = (1U << 1);  ///< Update Overlay Attributes In Progress
        constexpr uint32_t A2QSR = (1U << 2);  ///< Add To Queue Pending Register
    }

    /// BASEIER Register bits
    namespace baseier_bits {
        constexpr uint32_t DMA = (1U << 2);  ///< End of DMA Transfer Interrupt Enable Register
        constexpr uint32_t DSCR = (1U << 3);  ///< Descriptor Loaded Interrupt Enable Register
        constexpr uint32_t ADD = (1U << 4);  ///< Head Descriptor Loaded Interrupt Enable Register
        constexpr uint32_t DONE = (1U << 5);  ///< End of List Interrupt Enable Register
        constexpr uint32_t OVR = (1U << 6);  ///< Overflow Interrupt Enable Register
    }

    /// BASEIDR Register bits
    namespace baseidr_bits {
        constexpr uint32_t DMA = (1U << 2);  ///< End of DMA Transfer Interrupt Disable Register
        constexpr uint32_t DSCR = (1U << 3);  ///< Descriptor Loaded Interrupt Disable Register
        constexpr uint32_t ADD = (1U << 4);  ///< Head Descriptor Loaded Interrupt Disable Register
        constexpr uint32_t DONE = (1U << 5);  ///< End of List Interrupt Disable Register
        constexpr uint32_t OVR = (1U << 6);  ///< Overflow Interrupt Disable Register
    }

    /// BASEIMR Register bits
    namespace baseimr_bits {
        constexpr uint32_t DMA = (1U << 2);  ///< End of DMA Transfer Interrupt Mask Register
        constexpr uint32_t DSCR = (1U << 3);  ///< Descriptor Loaded Interrupt Mask Register
        constexpr uint32_t ADD = (1U << 4);  ///< Head Descriptor Loaded Interrupt Mask Register
        constexpr uint32_t DONE = (1U << 5);  ///< End of List Interrupt Mask Register
        constexpr uint32_t OVR = (1U << 6);  ///< Overflow Interrupt Mask Register
    }

    /// BASEISR Register bits
    namespace baseisr_bits {
        constexpr uint32_t DMA = (1U << 2);  ///< End of DMA Transfer
        constexpr uint32_t DSCR = (1U << 3);  ///< DMA Descriptor Loaded
        constexpr uint32_t ADD = (1U << 4);  ///< Head Descriptor Loaded
        constexpr uint32_t DONE = (1U << 5);  ///< End of List Detected
        constexpr uint32_t OVR = (1U << 6);  ///< Overflow Detected
    }

    /// BASEHEAD Register bits
    namespace basehead_bits {
        constexpr uint32_t HEAD = (30 << 2);  ///< DMA Head Pointer
    }

    /// BASEADDR Register bits
    namespace baseaddr_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< DMA Transfer Start Address
    }

    /// BASECTRL Register bits
    namespace basectrl_bits {
        constexpr uint32_t DFETCH = (1U << 0);  ///< Transfer Descriptor Fetch Enable
        constexpr uint32_t LFETCH = (1U << 1);  ///< Lookup Table Fetch Enable
        constexpr uint32_t DMAIEN = (1U << 2);  ///< End of DMA Transfer Interrupt Enable
        constexpr uint32_t DSCRIEN = (1U << 3);  ///< Descriptor Loaded Interrupt Enable
        constexpr uint32_t ADDIEN = (1U << 4);  ///< Add Head Descriptor to Queue Interrupt Enable
        constexpr uint32_t DONEIEN = (1U << 5);  ///< End of List Interrupt Enable
    }

    /// BASENEXT Register bits
    namespace basenext_bits {
        constexpr uint32_t NEXT = (32 << 0);  ///< DMA Descriptor Next Address
    }

    /// BASECFG0 Register bits
    namespace basecfg0_bits {
        constexpr uint32_t BLEN = (2 << 4);  ///< AHB Burst Length
        constexpr uint32_t DLBO = (1U << 8);  ///< Defined Length Burst Only For Channel Bus Transaction.
    }

    /// BASECFG1 Register bits
    namespace basecfg1_bits {
        constexpr uint32_t CLUTEN = (1U << 0);  ///< Color Lookup Table Enable
        constexpr uint32_t RGBMODE = (4 << 4);  ///< RGB Input Mode Selection
        constexpr uint32_t CLUTMODE = (2 << 8);  ///< Color Lookup Table Input Mode Selection
    }

    /// BASECFG2 Register bits
    namespace basecfg2_bits {
        constexpr uint32_t XSTRIDE = (32 << 0);  ///< Horizontal Stride
    }

    /// BASECFG3 Register bits
    namespace basecfg3_bits {
        constexpr uint32_t BDEF = (8 << 0);  ///< Blue Default
        constexpr uint32_t GDEF = (8 << 8);  ///< Green Default
        constexpr uint32_t RDEF = (8 << 16);  ///< Red Default
    }

    /// BASECFG4 Register bits
    namespace basecfg4_bits {
        constexpr uint32_t DMA = (1U << 8);  ///< Use DMA Data Path
        constexpr uint32_t REP = (1U << 9);  ///< Use Replication logic to expand RGB color to 24 bits
    }

    /// BASECLUT__ Register bits
    namespace baseclut___bits {
        constexpr uint32_t BCLUT = (8 << 0);  ///< Blue Color entry
        constexpr uint32_t GCLUT = (8 << 8);  ///< Green Color entry
        constexpr uint32_t RCLUT = (8 << 16);  ///< Red Color entry
    }

}

// ============================================================================
// UDP Peripheral
// ============================================================================

namespace udp {
    /// Base addresses
    constexpr uint32_t UDP_BASE = 0xF803C000;

    /// UDP Register structure
    struct Registers {
        volatile uint32_t FRM_NUM;  ///< Offset: 0x00 - Frame Number Register
        volatile uint32_t GLB_STAT;  ///< Offset: 0x04 - Global State Register
        volatile uint32_t FADDR;  ///< Offset: 0x08 - Function Address Register
        volatile uint32_t IER;  ///< Offset: 0x10 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x14 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x1C - Interrupt Status Register
        volatile uint32_t ICR;  ///< Offset: 0x20 - Interrupt Clear Register
        volatile uint32_t RST_EP;  ///< Offset: 0x28 - Reset Endpoint Register
        volatile uint32_t CSR__;  ///< Offset: 0x30 - Endpoint Control and Status Register (renamed from CSR__)
        volatile uint32_t CSR0_ISOENDPT;  ///< Offset: 0x30 - Endpoint Control and Status Register
        volatile uint32_t FDR__;  ///< Offset: 0x50 - Endpoint FIFO Data Register (renamed from FDR__)
        volatile uint32_t TXVC;  ///< Offset: 0x74 - Transceiver Control Register
    };

    /// Peripheral instances
    inline Registers* UDP = reinterpret_cast<Registers*>(UDP_BASE);

    // Bit definitions
    /// FRM_NUM Register bits
    namespace frm_num_bits {
        constexpr uint32_t FRM_NUM = (11 << 0);  ///< Frame Number as Defined in the Packet Field Formats
        constexpr uint32_t FRM_ERR = (1U << 16);  ///< Frame Error
        constexpr uint32_t FRM_OK = (1U << 17);  ///< Frame OK
    }

    /// GLB_STAT Register bits
    namespace glb_stat_bits {
        constexpr uint32_t FADDEN = (1U << 0);  ///< Function Address Enable
        constexpr uint32_t CONFG = (1U << 1);  ///< Configured
        constexpr uint32_t ESR = (1U << 2);  ///< ESR
        constexpr uint32_t RSMINPR = (1U << 3);  ///< RSMINPR
        constexpr uint32_t RMWUPE = (1U << 4);  ///< RMWUPE
    }

    /// FADDR Register bits
    namespace faddr_bits {
        constexpr uint32_t FADD = (7 << 0);  ///< Function Address Value
        constexpr uint32_t FEN = (1U << 8);  ///< Function Enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t EP0INT = (1U << 0);  ///< Enable Endpoint 0 Interrupt
        constexpr uint32_t EP1INT = (1U << 1);  ///< Enable Endpoint 1 Interrupt
        constexpr uint32_t EP2INT = (1U << 2);  ///< Enable Endpoint 2Interrupt
        constexpr uint32_t EP3INT = (1U << 3);  ///< Enable Endpoint 3 Interrupt
        constexpr uint32_t EP4INT = (1U << 4);  ///< Enable Endpoint 4 Interrupt
        constexpr uint32_t EP5INT = (1U << 5);  ///< Enable Endpoint 5 Interrupt
        constexpr uint32_t RXSUSP = (1U << 8);  ///< Enable UDP Suspend Interrupt
        constexpr uint32_t RXRSM = (1U << 9);  ///< Enable UDP Resume Interrupt
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Enable Start Of Frame Interrupt
        constexpr uint32_t WAKEUP = (1U << 13);  ///< Enable UDP bus Wakeup Interrupt
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t EP0INT = (1U << 0);  ///< Disable Endpoint 0 Interrupt
        constexpr uint32_t EP1INT = (1U << 1);  ///< Disable Endpoint 1 Interrupt
        constexpr uint32_t EP2INT = (1U << 2);  ///< Disable Endpoint 2 Interrupt
        constexpr uint32_t EP3INT = (1U << 3);  ///< Disable Endpoint 3 Interrupt
        constexpr uint32_t EP4INT = (1U << 4);  ///< Disable Endpoint 4 Interrupt
        constexpr uint32_t EP5INT = (1U << 5);  ///< Disable Endpoint 5 Interrupt
        constexpr uint32_t RXSUSP = (1U << 8);  ///< Disable UDP Suspend Interrupt
        constexpr uint32_t RXRSM = (1U << 9);  ///< Disable UDP Resume Interrupt
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Disable Start Of Frame Interrupt
        constexpr uint32_t WAKEUP = (1U << 13);  ///< Disable USB Bus Interrupt
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t EP0INT = (1U << 0);  ///< Mask Endpoint 0 Interrupt
        constexpr uint32_t EP1INT = (1U << 1);  ///< Mask Endpoint 1 Interrupt
        constexpr uint32_t EP2INT = (1U << 2);  ///< Mask Endpoint 2 Interrupt
        constexpr uint32_t EP3INT = (1U << 3);  ///< Mask Endpoint 3 Interrupt
        constexpr uint32_t EP4INT = (1U << 4);  ///< Mask Endpoint 4 Interrupt
        constexpr uint32_t EP5INT = (1U << 5);  ///< Mask Endpoint 5 Interrupt
        constexpr uint32_t RXSUSP = (1U << 8);  ///< Mask UDP Suspend Interrupt
        constexpr uint32_t RXRSM = (1U << 9);  ///< Mask UDP Resume Interrupt.
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Mask Start Of Frame Interrupt
        constexpr uint32_t BIT12 = (1U << 12);  ///< UDP_IMR Bit 12
        constexpr uint32_t WAKEUP = (1U << 13);  ///< USB Bus WAKEUP Interrupt
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t EP0INT = (1U << 0);  ///< Endpoint 0 Interrupt Status
        constexpr uint32_t EP1INT = (1U << 1);  ///< Endpoint 1 Interrupt Status
        constexpr uint32_t EP2INT = (1U << 2);  ///< Endpoint 2 Interrupt Status
        constexpr uint32_t EP3INT = (1U << 3);  ///< Endpoint 3 Interrupt Status
        constexpr uint32_t EP4INT = (1U << 4);  ///< Endpoint 4 Interrupt Status
        constexpr uint32_t EP5INT = (1U << 5);  ///< Endpoint 5 Interrupt Status
        constexpr uint32_t RXSUSP = (1U << 8);  ///< UDP Suspend Interrupt Status
        constexpr uint32_t RXRSM = (1U << 9);  ///< UDP Resume Interrupt Status
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Start of Frame Interrupt Status
        constexpr uint32_t ENDBUSRES = (1U << 12);  ///< End of BUS Reset Interrupt Status
        constexpr uint32_t WAKEUP = (1U << 13);  ///< UDP Resume Interrupt Status
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t RXSUSP = (1U << 8);  ///< Clear UDP Suspend Interrupt
        constexpr uint32_t RXRSM = (1U << 9);  ///< Clear UDP Resume Interrupt
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Clear Start Of Frame Interrupt
        constexpr uint32_t ENDBUSRES = (1U << 12);  ///< Clear End of Bus Reset Interrupt
        constexpr uint32_t WAKEUP = (1U << 13);  ///< Clear Wakeup Interrupt
    }

    /// RST_EP Register bits
    namespace rst_ep_bits {
        constexpr uint32_t EP0 = (1U << 0);  ///< Reset Endpoint 0
        constexpr uint32_t EP1 = (1U << 1);  ///< Reset Endpoint 1
        constexpr uint32_t EP2 = (1U << 2);  ///< Reset Endpoint 2
        constexpr uint32_t EP3 = (1U << 3);  ///< Reset Endpoint 3
        constexpr uint32_t EP4 = (1U << 4);  ///< Reset Endpoint 4
        constexpr uint32_t EP5 = (1U << 5);  ///< Reset Endpoint 5
    }

    /// CSR__ Register bits
    namespace csr___bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Generates an IN Packet with Data Previously Written in the DPR
        constexpr uint32_t RX_DATA_BK0 = (1U << 1);  ///< Receive Data Bank 0
        constexpr uint32_t RXSETUP = (1U << 2);  ///< Received Setup
        constexpr uint32_t STALLSENT = (1U << 3);  ///< Stall Sent
        constexpr uint32_t TXPKTRDY = (1U << 4);  ///< Transmit Packet Ready
        constexpr uint32_t FORCESTALL = (1U << 5);  ///< Force Stall (used by Control, Bulk and Isochronous Endpoints)
        constexpr uint32_t RX_DATA_BK1 = (1U << 6);  ///< Receive Data Bank 1 (only used by endpoints with ping-pong attributes)
        constexpr uint32_t DIR = (1U << 7);  ///< Transfer Direction (only available for control endpoints)
        constexpr uint32_t EPTYPE = (3 << 8);  ///< Endpoint Type
        constexpr uint32_t DTGLE = (1U << 11);  ///< Data Toggle
        constexpr uint32_t EPEDS = (1U << 15);  ///< Endpoint Enable Disable
        constexpr uint32_t RXBYTECNT = (11 << 16);  ///< Number of Bytes Available in the FIFO
    }

    /// CSR0_ISOENDPT Register bits
    namespace csr0_isoendpt_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Generates an IN Packet with Data Previously Written in the DPR
        constexpr uint32_t RX_DATA_BK0 = (1U << 1);  ///< Receive Data Bank 0
        constexpr uint32_t RXSETUP = (1U << 2);  ///< Received Setup
        constexpr uint32_t ISOERROR = (1U << 3);  ///< A CRC error has been detected in an isochronous transfer
        constexpr uint32_t TXPKTRDY = (1U << 4);  ///< Transmit Packet Ready
        constexpr uint32_t FORCESTALL = (1U << 5);  ///< Force Stall (used by Control, Bulk and Isochronous Endpoints)
        constexpr uint32_t RX_DATA_BK1 = (1U << 6);  ///< Receive Data Bank 1 (only used by endpoints with ping-pong attributes)
        constexpr uint32_t DIR = (1U << 7);  ///< Transfer Direction (only available for control endpoints)
        constexpr uint32_t EPTYPE = (3 << 8);  ///< Endpoint Type
        constexpr uint32_t DTGLE = (1U << 11);  ///< Data Toggle
        constexpr uint32_t EPEDS = (1U << 15);  ///< Endpoint Enable Disable
        constexpr uint32_t RXBYTECNT = (11 << 16);  ///< Number of Bytes Available in the FIFO
    }

    /// FDR__ Register bits
    namespace fdr___bits {
        constexpr uint32_t FIFO_DATA = (8 << 0);  ///< FIFO Data Value
    }

    /// TXVC Register bits
    namespace txvc_bits {
        constexpr uint32_t TXVDIS = (1U << 8);  ///< Transceiver Disable
        constexpr uint32_t PUON = (1U << 9);  ///< Pull-up On
    }

}

// ============================================================================
// RNG Peripheral
// ============================================================================

namespace rng {
    /// Base addresses
    constexpr uint32_t TRNG_BASE = 0xF8048000;

    /// RNG Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t IER;  ///< Offset: 0x10 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x14 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x1C - Interrupt Status Register
        volatile uint32_t ODATA;  ///< Offset: 0x50 - Output Data Register
    };

    /// Peripheral instances
    inline Registers* TRNG = reinterpret_cast<Registers*>(TRNG_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Enables the TRNG to provide random values
        constexpr uint32_t KEY = (24 << 8);  ///< Security Key
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t DATRDY = (1U << 0);  ///< Data Ready Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t DATRDY = (1U << 0);  ///< Data Ready Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t DATRDY = (1U << 0);  ///< Data Ready Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t DATRDY = (1U << 0);  ///< Data Ready
    }

    /// ODATA Register bits
    namespace odata_bits {
        constexpr uint32_t ODATA = (32 << 0);  ///< Output Data
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_BASE = 0xF804C000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t SEQR1;  ///< Offset: 0x08 - Channel Sequence Register 1
        volatile uint32_t SEQR2;  ///< Offset: 0x0C - Channel Sequence Register 2
        volatile uint32_t CHER;  ///< Offset: 0x10 - Channel Enable Register
        volatile uint32_t CHDR;  ///< Offset: 0x14 - Channel Disable Register
        volatile uint32_t CHSR;  ///< Offset: 0x18 - Channel Status Register
        volatile uint32_t LCDR;  ///< Offset: 0x20 - Last Converted Data Register
        volatile uint32_t IER;  ///< Offset: 0x24 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x28 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x2C - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x30 - Interrupt Status Register
        volatile uint32_t OVER;  ///< Offset: 0x3C - Overrun Status Register
        volatile uint32_t EMR;  ///< Offset: 0x40 - Extended Mode Register
        volatile uint32_t CWR;  ///< Offset: 0x44 - Compare Window Register
        volatile uint32_t CDR__;  ///< Offset: 0x50 - Channel Data Register (renamed from CDR__)
        volatile uint32_t ACR;  ///< Offset: 0x94 - Analog Control Register
        volatile uint32_t TSMR;  ///< Offset: 0xB0 - Touchscreen Mode Register
        volatile uint32_t XPOSR;  ///< Offset: 0xB4 - Touchscreen X Position Register
        volatile uint32_t YPOSR;  ///< Offset: 0xB8 - Touchscreen Y Position Register
        volatile uint32_t PRESSR;  ///< Offset: 0xBC - Touchscreen Pressure Register
        volatile uint32_t TRGR;  ///< Offset: 0xC0 - Trigger Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* ADC = reinterpret_cast<Registers*>(ADC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SWRST = (1U << 0);  ///< Software Reset
        constexpr uint32_t START = (1U << 1);  ///< Start Conversion
        constexpr uint32_t TSCALIB = (1U << 2);  ///< Touchscreen Calibration
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t LOWRES = (1U << 4);  ///< Resolution
        constexpr uint32_t SLEEP = (1U << 5);  ///< Sleep Mode
        constexpr uint32_t FWUP = (1U << 6);  ///< Fast Wake Up
        constexpr uint32_t PRESCAL = (8 << 8);  ///< Prescaler Rate Selection
        constexpr uint32_t STARTUP = (4 << 16);  ///< Start Up Time
        constexpr uint32_t TRACKTIM = (4 << 24);  ///< Tracking Time
        constexpr uint32_t USEQ = (1U << 31);  ///< Use Sequence Enable
    }

    /// SEQR1 Register bits
    namespace seqr1_bits {
        constexpr uint32_t USCH1 = (4 << 0);  ///< User Sequence Number 1
        constexpr uint32_t USCH2 = (4 << 4);  ///< User Sequence Number 2
        constexpr uint32_t USCH3 = (4 << 8);  ///< User Sequence Number 3
        constexpr uint32_t USCH4 = (4 << 12);  ///< User Sequence Number 4
        constexpr uint32_t USCH5 = (4 << 16);  ///< User Sequence Number 5
        constexpr uint32_t USCH6 = (4 << 20);  ///< User Sequence Number 6
        constexpr uint32_t USCH7 = (4 << 24);  ///< User Sequence Number 7
        constexpr uint32_t USCH8 = (4 << 28);  ///< User Sequence Number 8
    }

    /// SEQR2 Register bits
    namespace seqr2_bits {
        constexpr uint32_t USCH9 = (4 << 0);  ///< User Sequence Number 9
        constexpr uint32_t USCH10 = (4 << 4);  ///< User Sequence Number 10
        constexpr uint32_t USCH11 = (4 << 8);  ///< User Sequence Number 11
        constexpr uint32_t USCH12 = (4 << 12);  ///< User Sequence Number 12
        constexpr uint32_t USCH13 = (4 << 16);  ///< User Sequence Number 13
        constexpr uint32_t USCH14 = (4 << 20);  ///< User Sequence Number 14
        constexpr uint32_t USCH15 = (4 << 24);  ///< User Sequence Number 15
        constexpr uint32_t USCH16 = (4 << 28);  ///< User Sequence Number 16
    }

    /// CHER Register bits
    namespace cher_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Enable
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Enable
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Enable
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Enable
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Enable
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Enable
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Enable
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Enable
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Enable
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Enable
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Enable
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Enable
    }

    /// CHDR Register bits
    namespace chdr_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Disable
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Disable
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Disable
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Disable
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Disable
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Disable
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Disable
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Disable
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Disable
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Disable
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Disable
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Disable
    }

    /// CHSR Register bits
    namespace chsr_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Status
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Status
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Status
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Status
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Status
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Status
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Status
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Status
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Status
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Status
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Status
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Status
    }

    /// LCDR Register bits
    namespace lcdr_bits {
        constexpr uint32_t LDATA = (12 << 0);  ///< Last Data Converted
        constexpr uint32_t CHNB = (4 << 12);  ///< Channel Number
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Enable 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Enable 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Enable 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Enable 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Enable 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Enable 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Enable 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Enable 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Enable 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Enable 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Enable 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Enable 11
        constexpr uint32_t XRDY = (1U << 20);  ///< Touchscreen Measure XPOS Ready Interrupt Enable
        constexpr uint32_t YRDY = (1U << 21);  ///< Touchscreen Measure YPOS Ready Interrupt Enable
        constexpr uint32_t PRDY = (1U << 22);  ///< Touchscreen Measure Pressure Ready Interrupt Enable
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Enable
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Enable
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Enable
        constexpr uint32_t PEN = (1U << 29);  ///< Pen Contact Interrupt Enable
        constexpr uint32_t NOPEN = (1U << 30);  ///< No Pen Contact Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Disable 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Disable 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Disable 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Disable 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Disable 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Disable 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Disable 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Disable 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Disable 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Disable 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Disable 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Disable 11
        constexpr uint32_t XRDY = (1U << 20);  ///< Touchscreen Measure XPOS Ready Interrupt Disable
        constexpr uint32_t YRDY = (1U << 21);  ///< Touchscreen Measure YPOS Ready Interrupt Disable
        constexpr uint32_t PRDY = (1U << 22);  ///< Touchscreen Measure Pressure Ready Interrupt Disable
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Disable
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Disable
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Disable
        constexpr uint32_t PEN = (1U << 29);  ///< Pen Contact Interrupt Disable
        constexpr uint32_t NOPEN = (1U << 30);  ///< No Pen Contact Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Mask 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Mask 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Mask 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Mask 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Mask 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Mask 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Mask 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Mask 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Mask 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Mask 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Mask 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Mask 11
        constexpr uint32_t XRDY = (1U << 20);  ///< Touchscreen Measure XPOS Ready Interrupt Mask
        constexpr uint32_t YRDY = (1U << 21);  ///< Touchscreen Measure YPOS Ready Interrupt Mask
        constexpr uint32_t PRDY = (1U << 22);  ///< Touchscreen Measure Pressure Ready Interrupt Mask
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Mask
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Mask
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Mask
        constexpr uint32_t PEN = (1U << 29);  ///< Pen Contact Interrupt Mask
        constexpr uint32_t NOPEN = (1U << 30);  ///< No Pen Contact Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion 11
        constexpr uint32_t XRDY = (1U << 20);  ///< Touchscreen XPOS Measure Ready
        constexpr uint32_t YRDY = (1U << 21);  ///< Touchscreen YPOS Measure Ready
        constexpr uint32_t PRDY = (1U << 22);  ///< Touchscreen Pressure Measure Ready
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Error
        constexpr uint32_t PEN = (1U << 29);  ///< Pen contact
        constexpr uint32_t NOPEN = (1U << 30);  ///< No Pen contact
        constexpr uint32_t PENS = (1U << 31);  ///< Pen detect Status
    }

    /// OVER Register bits
    namespace over_bits {
        constexpr uint32_t OVRE0 = (1U << 0);  ///< Overrun Error 0
        constexpr uint32_t OVRE1 = (1U << 1);  ///< Overrun Error 1
        constexpr uint32_t OVRE2 = (1U << 2);  ///< Overrun Error 2
        constexpr uint32_t OVRE3 = (1U << 3);  ///< Overrun Error 3
        constexpr uint32_t OVRE4 = (1U << 4);  ///< Overrun Error 4
        constexpr uint32_t OVRE5 = (1U << 5);  ///< Overrun Error 5
        constexpr uint32_t OVRE6 = (1U << 6);  ///< Overrun Error 6
        constexpr uint32_t OVRE7 = (1U << 7);  ///< Overrun Error 7
        constexpr uint32_t OVRE8 = (1U << 8);  ///< Overrun Error 8
        constexpr uint32_t OVRE9 = (1U << 9);  ///< Overrun Error 9
        constexpr uint32_t OVRE10 = (1U << 10);  ///< Overrun Error 10
        constexpr uint32_t OVRE11 = (1U << 11);  ///< Overrun Error 11
    }

    /// EMR Register bits
    namespace emr_bits {
        constexpr uint32_t CMPMODE = (2 << 0);  ///< Comparison Mode
        constexpr uint32_t CMPSEL = (4 << 4);  ///< Comparison Selected Channel
        constexpr uint32_t CMPALL = (1U << 9);  ///< Compare All Channels
        constexpr uint32_t TAG = (1U << 24);  ///< TAG of ADC_LDCR register
    }

    /// CWR Register bits
    namespace cwr_bits {
        constexpr uint32_t LOWTHRES = (12 << 0);  ///< Low Threshold
        constexpr uint32_t HIGHTHRES = (12 << 16);  ///< High Threshold
    }

    /// CDR__ Register bits
    namespace cdr___bits {
        constexpr uint32_t DATA = (12 << 0);  ///< Converted Data
    }

    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t PENDETSENS = (2 << 0);  ///< Pen Detection Sensitivity
    }

    /// TSMR Register bits
    namespace tsmr_bits {
        constexpr uint32_t TSMODE = (2 << 0);  ///< Touchscreen Mode
        constexpr uint32_t TSAV = (2 << 4);  ///< Touchscreen Average
        constexpr uint32_t TSFREQ = (4 << 8);  ///< Touchscreen Frequency
        constexpr uint32_t TSSCTIM = (4 << 16);  ///< Touchscreen Switches Closure Time
        constexpr uint32_t NOTSDMA = (1U << 22);  ///< No TouchScreen DMA
        constexpr uint32_t PENDET = (1U << 24);  ///< Pen Contact Detection Enable
        constexpr uint32_t PENDBC = (4 << 28);  ///< Pen Detect Debouncing Period
    }

    /// XPOSR Register bits
    namespace xposr_bits {
        constexpr uint32_t XPOS = (10 << 0);  ///< X Position
        constexpr uint32_t XSCALE = (10 << 16);  ///< Scale of XPOS
    }

    /// YPOSR Register bits
    namespace yposr_bits {
        constexpr uint32_t YPOS = (10 << 0);  ///< Y Position
        constexpr uint32_t YSCALE = (10 << 16);  ///< Scale of YPOS
    }

    /// PRESSR Register bits
    namespace pressr_bits {
        constexpr uint32_t Z1 = (10 << 0);  ///< Data of Z1 Measurement
        constexpr uint32_t Z2 = (10 << 16);  ///< Data of Z2 Measurement
    }

    /// TRGR Register bits
    namespace trgr_bits {
        constexpr uint32_t TRGMOD = (3 << 0);  ///< Trigger Mode
        constexpr uint32_t TRGPER = (16 << 16);  ///< Trigger Period
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// FUSE Peripheral
// ============================================================================

namespace fuse {
    /// Base addresses
    constexpr uint32_t FUSE_BASE = 0xFFFFDC00;

    /// FUSE Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Fuse Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Fuse Mode Register
        volatile uint32_t IR;  ///< Offset: 0x08 - Fuse Index Register
        volatile uint32_t DR;  ///< Offset: 0x0C - Fuse Data Register
        volatile uint32_t SR__;  ///< Offset: 0x10 - Fuse Status Register (renamed from SR__)
    };

    /// Peripheral instances
    inline Registers* FUSE = reinterpret_cast<Registers*>(FUSE_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WRQ = (1U << 0);  ///< Write Request
        constexpr uint32_t RRQ = (1U << 1);  ///< Read Request
        constexpr uint32_t KEY = (8 << 8);  ///< Key code
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t MSK = (1U << 0);  ///< Mask Fuse Status Registers
    }

    /// IR Register bits
    namespace ir_bits {
        constexpr uint32_t WS = (1U << 0);  ///< Write Status
        constexpr uint32_t RS = (1U << 1);  ///< Read Status
        constexpr uint32_t WSEL = (4 << 8);  ///< Word Selection
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Program
    }

    /// SR__ Register bits
    namespace sr___bits {
        constexpr uint32_t FUSE = (32 << 0);  ///< Fuse Status
    }

}

// ============================================================================
// MATRIX Peripheral
// ============================================================================

namespace matrix {
    /// Base addresses
    constexpr uint32_t MATRIX_BASE = 0xFFFFDE00;

    /// MATRIX Register structure
    struct Registers {
        volatile uint32_t MCFG__;  ///< Offset: 0x00 - Master Configuration Register (renamed from MCFG__)
        volatile uint32_t SCFG__;  ///< Offset: 0x40 - Slave Configuration Register (renamed from SCFG__)
        volatile uint32_t PRAS0;  ///< Offset: 0x80 - Priority Register A for Slave 0
        volatile uint32_t PRAS1;  ///< Offset: 0x88 - Priority Register A for Slave 1
        volatile uint32_t PRAS2;  ///< Offset: 0x90 - Priority Register A for Slave 2
        volatile uint32_t PRAS3;  ///< Offset: 0x98 - Priority Register A for Slave 3
        volatile uint32_t PRAS4;  ///< Offset: 0xA0 - Priority Register A for Slave 4
        volatile uint32_t MRCR;  ///< Offset: 0x100 - Master Remap Control Register
        volatile uint32_t WPMR;  ///< Offset: 0x1E4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0x1E8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* MATRIX = reinterpret_cast<Registers*>(MATRIX_BASE);

    // Bit definitions
    /// MCFG__ Register bits
    namespace mcfg___bits {
        constexpr uint32_t ULBT = (3 << 0);  ///< Undefined Length Burst Type
    }

    /// SCFG__ Register bits
    namespace scfg___bits {
        constexpr uint32_t SLOT_CYCLE = (9 << 0);  ///< Maximum Bus Grant Duration for Masters
        constexpr uint32_t DEFMSTR_TYPE = (2 << 16);  ///< Default Master Type
        constexpr uint32_t FIXED_DEFMSTR = (4 << 18);  ///< Fixed Default Master
    }

    /// PRAS0 Register bits
    namespace pras0_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
    }

    /// PRAS1 Register bits
    namespace pras1_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
    }

    /// PRAS2 Register bits
    namespace pras2_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
    }

    /// PRAS3 Register bits
    namespace pras3_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
    }

    /// PRAS4 Register bits
    namespace pras4_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
    }

    /// MRCR Register bits
    namespace mrcr_bits {
        constexpr uint32_t RCB0 = (1U << 0);  ///< Remap Command Bit for Master 0
        constexpr uint32_t RCB1 = (1U << 1);  ///< Remap Command Bit for Master 1
        constexpr uint32_t RCB2 = (1U << 2);  ///< Remap Command Bit for Master 2
        constexpr uint32_t RCB3 = (1U << 3);  ///< Remap Command Bit for Master 3
        constexpr uint32_t RCB4 = (1U << 4);  ///< Remap Command Bit for Master 4
        constexpr uint32_t RCB5 = (1U << 5);  ///< Remap Command Bit for Master 5
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect ENable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY (Write-only)
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// PMECC Peripheral
// ============================================================================

namespace pmecc {
    /// Base addresses
    constexpr uint32_t PMECC_BASE = 0xFFFFE000;

    /// PMECC Register structure
    struct Registers {
        volatile uint32_t CFG;  ///< Offset: 0x00 - PMECC Configuration Register
        volatile uint32_t SAREA;  ///< Offset: 0x04 - PMECC Spare Area Size Register
        volatile uint32_t SADDR;  ///< Offset: 0x08 - PMECC Start Address Register
        volatile uint32_t EADDR;  ///< Offset: 0x0C - PMECC End Address Register
        volatile uint32_t CLK;  ///< Offset: 0x10 - PMECC Clock Control Register
        volatile uint32_t CTRL;  ///< Offset: 0x14 - PMECC Control Register
        volatile uint32_t SR;  ///< Offset: 0x18 - PMECC Status Register
        volatile uint32_t IER;  ///< Offset: 0x1C - PMECC Interrupt Enable register
        volatile uint32_t IDR;  ///< Offset: 0x20 - PMECC Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x24 - PMECC Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x28 - PMECC Interrupt Status Register
        volatile uint32_t ECC0_0;  ///< Offset: 0x40 - PMECC ECC 0 Register (sec_num = 0)
        volatile uint32_t ECC1_0;  ///< Offset: 0x44 - PMECC ECC 1 Register (sec_num = 0)
        volatile uint32_t ECC2_0;  ///< Offset: 0x48 - PMECC ECC 2 Register (sec_num = 0)
        volatile uint32_t ECC3_0;  ///< Offset: 0x4C - PMECC ECC 3 Register (sec_num = 0)
        volatile uint32_t ECC4_0;  ///< Offset: 0x50 - PMECC ECC 4 Register (sec_num = 0)
        volatile uint32_t ECC5_0;  ///< Offset: 0x54 - PMECC ECC 5 Register (sec_num = 0)
        volatile uint32_t ECC6_0;  ///< Offset: 0x58 - PMECC ECC 6 Register (sec_num = 0)
        volatile uint32_t ECC7_0;  ///< Offset: 0x5C - PMECC ECC 7 Register (sec_num = 0)
        volatile uint32_t ECC8_0;  ///< Offset: 0x60 - PMECC ECC 8 Register (sec_num = 0)
        volatile uint32_t ECC9_0;  ///< Offset: 0x64 - PMECC ECC 9 Register (sec_num = 0)
        volatile uint32_t ECC10_0;  ///< Offset: 0x68 - PMECC ECC 10 Register (sec_num = 0)
        volatile uint32_t ECC0_1;  ///< Offset: 0x80 - PMECC ECC 0 Register (sec_num = 1)
        volatile uint32_t ECC1_1;  ///< Offset: 0x84 - PMECC ECC 1 Register (sec_num = 1)
        volatile uint32_t ECC2_1;  ///< Offset: 0x88 - PMECC ECC 2 Register (sec_num = 1)
        volatile uint32_t ECC3_1;  ///< Offset: 0x8C - PMECC ECC 3 Register (sec_num = 1)
        volatile uint32_t ECC4_1;  ///< Offset: 0x90 - PMECC ECC 4 Register (sec_num = 1)
        volatile uint32_t ECC5_1;  ///< Offset: 0x94 - PMECC ECC 5 Register (sec_num = 1)
        volatile uint32_t ECC6_1;  ///< Offset: 0x98 - PMECC ECC 6 Register (sec_num = 1)
        volatile uint32_t ECC7_1;  ///< Offset: 0x9C - PMECC ECC 7 Register (sec_num = 1)
        volatile uint32_t ECC8_1;  ///< Offset: 0xA0 - PMECC ECC 8 Register (sec_num = 1)
        volatile uint32_t ECC9_1;  ///< Offset: 0xA4 - PMECC ECC 9 Register (sec_num = 1)
        volatile uint32_t ECC10_1;  ///< Offset: 0xA8 - PMECC ECC 10 Register (sec_num = 1)
        volatile uint32_t ECC0_2;  ///< Offset: 0xC0 - PMECC ECC 0 Register (sec_num = 2)
        volatile uint32_t ECC1_2;  ///< Offset: 0xC4 - PMECC ECC 1 Register (sec_num = 2)
        volatile uint32_t ECC2_2;  ///< Offset: 0xC8 - PMECC ECC 2 Register (sec_num = 2)
        volatile uint32_t ECC3_2;  ///< Offset: 0xCC - PMECC ECC 3 Register (sec_num = 2)
        volatile uint32_t ECC4_2;  ///< Offset: 0xD0 - PMECC ECC 4 Register (sec_num = 2)
        volatile uint32_t ECC5_2;  ///< Offset: 0xD4 - PMECC ECC 5 Register (sec_num = 2)
        volatile uint32_t ECC6_2;  ///< Offset: 0xD8 - PMECC ECC 6 Register (sec_num = 2)
        volatile uint32_t ECC7_2;  ///< Offset: 0xDC - PMECC ECC 7 Register (sec_num = 2)
        volatile uint32_t ECC8_2;  ///< Offset: 0xE0 - PMECC ECC 8 Register (sec_num = 2)
        volatile uint32_t ECC9_2;  ///< Offset: 0xE4 - PMECC ECC 9 Register (sec_num = 2)
        volatile uint32_t ECC10_2;  ///< Offset: 0xE8 - PMECC ECC 10 Register (sec_num = 2)
        volatile uint32_t ECC0_3;  ///< Offset: 0x100 - PMECC ECC 0 Register (sec_num = 3)
        volatile uint32_t ECC1_3;  ///< Offset: 0x104 - PMECC ECC 1 Register (sec_num = 3)
        volatile uint32_t ECC2_3;  ///< Offset: 0x108 - PMECC ECC 2 Register (sec_num = 3)
        volatile uint32_t ECC3_3;  ///< Offset: 0x10C - PMECC ECC 3 Register (sec_num = 3)
        volatile uint32_t ECC4_3;  ///< Offset: 0x110 - PMECC ECC 4 Register (sec_num = 3)
        volatile uint32_t ECC5_3;  ///< Offset: 0x114 - PMECC ECC 5 Register (sec_num = 3)
        volatile uint32_t ECC6_3;  ///< Offset: 0x118 - PMECC ECC 6 Register (sec_num = 3)
        volatile uint32_t ECC7_3;  ///< Offset: 0x11C - PMECC ECC 7 Register (sec_num = 3)
        volatile uint32_t ECC8_3;  ///< Offset: 0x120 - PMECC ECC 8 Register (sec_num = 3)
        volatile uint32_t ECC9_3;  ///< Offset: 0x124 - PMECC ECC 9 Register (sec_num = 3)
        volatile uint32_t ECC10_3;  ///< Offset: 0x128 - PMECC ECC 10 Register (sec_num = 3)
        volatile uint32_t ECC0_4;  ///< Offset: 0x140 - PMECC ECC 0 Register (sec_num = 4)
        volatile uint32_t ECC1_4;  ///< Offset: 0x144 - PMECC ECC 1 Register (sec_num = 4)
        volatile uint32_t ECC2_4;  ///< Offset: 0x148 - PMECC ECC 2 Register (sec_num = 4)
        volatile uint32_t ECC3_4;  ///< Offset: 0x14C - PMECC ECC 3 Register (sec_num = 4)
        volatile uint32_t ECC4_4;  ///< Offset: 0x150 - PMECC ECC 4 Register (sec_num = 4)
        volatile uint32_t ECC5_4;  ///< Offset: 0x154 - PMECC ECC 5 Register (sec_num = 4)
        volatile uint32_t ECC6_4;  ///< Offset: 0x158 - PMECC ECC 6 Register (sec_num = 4)
        volatile uint32_t ECC7_4;  ///< Offset: 0x15C - PMECC ECC 7 Register (sec_num = 4)
        volatile uint32_t ECC8_4;  ///< Offset: 0x160 - PMECC ECC 8 Register (sec_num = 4)
        volatile uint32_t ECC9_4;  ///< Offset: 0x164 - PMECC ECC 9 Register (sec_num = 4)
        volatile uint32_t ECC10_4;  ///< Offset: 0x168 - PMECC ECC 10 Register (sec_num = 4)
        volatile uint32_t ECC0_5;  ///< Offset: 0x180 - PMECC ECC 0 Register (sec_num = 5)
        volatile uint32_t ECC1_5;  ///< Offset: 0x184 - PMECC ECC 1 Register (sec_num = 5)
        volatile uint32_t ECC2_5;  ///< Offset: 0x188 - PMECC ECC 2 Register (sec_num = 5)
        volatile uint32_t ECC3_5;  ///< Offset: 0x18C - PMECC ECC 3 Register (sec_num = 5)
        volatile uint32_t ECC4_5;  ///< Offset: 0x190 - PMECC ECC 4 Register (sec_num = 5)
        volatile uint32_t ECC5_5;  ///< Offset: 0x194 - PMECC ECC 5 Register (sec_num = 5)
        volatile uint32_t ECC6_5;  ///< Offset: 0x198 - PMECC ECC 6 Register (sec_num = 5)
        volatile uint32_t ECC7_5;  ///< Offset: 0x19C - PMECC ECC 7 Register (sec_num = 5)
        volatile uint32_t ECC8_5;  ///< Offset: 0x1A0 - PMECC ECC 8 Register (sec_num = 5)
        volatile uint32_t ECC9_5;  ///< Offset: 0x1A4 - PMECC ECC 9 Register (sec_num = 5)
        volatile uint32_t ECC10_5;  ///< Offset: 0x1A8 - PMECC ECC 10 Register (sec_num = 5)
        volatile uint32_t ECC0_6;  ///< Offset: 0x1C0 - PMECC ECC 0 Register (sec_num = 6)
        volatile uint32_t ECC1_6;  ///< Offset: 0x1C4 - PMECC ECC 1 Register (sec_num = 6)
        volatile uint32_t ECC2_6;  ///< Offset: 0x1C8 - PMECC ECC 2 Register (sec_num = 6)
        volatile uint32_t ECC3_6;  ///< Offset: 0x1CC - PMECC ECC 3 Register (sec_num = 6)
        volatile uint32_t ECC4_6;  ///< Offset: 0x1D0 - PMECC ECC 4 Register (sec_num = 6)
        volatile uint32_t ECC5_6;  ///< Offset: 0x1D4 - PMECC ECC 5 Register (sec_num = 6)
        volatile uint32_t ECC6_6;  ///< Offset: 0x1D8 - PMECC ECC 6 Register (sec_num = 6)
        volatile uint32_t ECC7_6;  ///< Offset: 0x1DC - PMECC ECC 7 Register (sec_num = 6)
        volatile uint32_t ECC8_6;  ///< Offset: 0x1E0 - PMECC ECC 8 Register (sec_num = 6)
        volatile uint32_t ECC9_6;  ///< Offset: 0x1E4 - PMECC ECC 9 Register (sec_num = 6)
        volatile uint32_t ECC10_6;  ///< Offset: 0x1E8 - PMECC ECC 10 Register (sec_num = 6)
        volatile uint32_t ECC0_7;  ///< Offset: 0x200 - PMECC ECC 0 Register (sec_num = 7)
        volatile uint32_t ECC1_7;  ///< Offset: 0x204 - PMECC ECC 1 Register (sec_num = 7)
        volatile uint32_t ECC2_7;  ///< Offset: 0x208 - PMECC ECC 2 Register (sec_num = 7)
        volatile uint32_t ECC3_7;  ///< Offset: 0x20C - PMECC ECC 3 Register (sec_num = 7)
        volatile uint32_t ECC4_7;  ///< Offset: 0x210 - PMECC ECC 4 Register (sec_num = 7)
        volatile uint32_t ECC5_7;  ///< Offset: 0x214 - PMECC ECC 5 Register (sec_num = 7)
        volatile uint32_t ECC6_7;  ///< Offset: 0x218 - PMECC ECC 6 Register (sec_num = 7)
        volatile uint32_t ECC7_7;  ///< Offset: 0x21C - PMECC ECC 7 Register (sec_num = 7)
        volatile uint32_t ECC8_7;  ///< Offset: 0x220 - PMECC ECC 8 Register (sec_num = 7)
        volatile uint32_t ECC9_7;  ///< Offset: 0x224 - PMECC ECC 9 Register (sec_num = 7)
        volatile uint32_t ECC10_7;  ///< Offset: 0x228 - PMECC ECC 10 Register (sec_num = 7)
        volatile uint32_t REM0_0;  ///< Offset: 0x240 - PMECC REM 0 Register (sec_num = 0)
        volatile uint32_t REM1_0;  ///< Offset: 0x244 - PMECC REM 1 Register (sec_num = 0)
        volatile uint32_t REM2_0;  ///< Offset: 0x248 - PMECC REM 2 Register (sec_num = 0)
        volatile uint32_t REM3_0;  ///< Offset: 0x24C - PMECC REM 3 Register (sec_num = 0)
        volatile uint32_t REM4_0;  ///< Offset: 0x250 - PMECC REM 4 Register (sec_num = 0)
        volatile uint32_t REM5_0;  ///< Offset: 0x254 - PMECC REM 5 Register (sec_num = 0)
        volatile uint32_t REM6_0;  ///< Offset: 0x258 - PMECC REM 6 Register (sec_num = 0)
        volatile uint32_t REM7_0;  ///< Offset: 0x25C - PMECC REM 7 Register (sec_num = 0)
        volatile uint32_t REM8_0;  ///< Offset: 0x260 - PMECC REM 8 Register (sec_num = 0)
        volatile uint32_t REM9_0;  ///< Offset: 0x264 - PMECC REM 9 Register (sec_num = 0)
        volatile uint32_t REM10_0;  ///< Offset: 0x268 - PMECC REM 10 Register (sec_num = 0)
        volatile uint32_t REM11_0;  ///< Offset: 0x26C - PMECC REM 11 Register (sec_num = 0)
        volatile uint32_t REM0_1;  ///< Offset: 0x280 - PMECC REM 0 Register (sec_num = 1)
        volatile uint32_t REM1_1;  ///< Offset: 0x284 - PMECC REM 1 Register (sec_num = 1)
        volatile uint32_t REM2_1;  ///< Offset: 0x288 - PMECC REM 2 Register (sec_num = 1)
        volatile uint32_t REM3_1;  ///< Offset: 0x28C - PMECC REM 3 Register (sec_num = 1)
        volatile uint32_t REM4_1;  ///< Offset: 0x290 - PMECC REM 4 Register (sec_num = 1)
        volatile uint32_t REM5_1;  ///< Offset: 0x294 - PMECC REM 5 Register (sec_num = 1)
        volatile uint32_t REM6_1;  ///< Offset: 0x298 - PMECC REM 6 Register (sec_num = 1)
        volatile uint32_t REM7_1;  ///< Offset: 0x29C - PMECC REM 7 Register (sec_num = 1)
        volatile uint32_t REM8_1;  ///< Offset: 0x2A0 - PMECC REM 8 Register (sec_num = 1)
        volatile uint32_t REM9_1;  ///< Offset: 0x2A4 - PMECC REM 9 Register (sec_num = 1)
        volatile uint32_t REM10_1;  ///< Offset: 0x2A8 - PMECC REM 10 Register (sec_num = 1)
        volatile uint32_t REM11_1;  ///< Offset: 0x2AC - PMECC REM 11 Register (sec_num = 1)
        volatile uint32_t REM0_2;  ///< Offset: 0x2C0 - PMECC REM 0 Register (sec_num = 2)
        volatile uint32_t REM1_2;  ///< Offset: 0x2C4 - PMECC REM 1 Register (sec_num = 2)
        volatile uint32_t REM2_2;  ///< Offset: 0x2C8 - PMECC REM 2 Register (sec_num = 2)
        volatile uint32_t REM3_2;  ///< Offset: 0x2CC - PMECC REM 3 Register (sec_num = 2)
        volatile uint32_t REM4_2;  ///< Offset: 0x2D0 - PMECC REM 4 Register (sec_num = 2)
        volatile uint32_t REM5_2;  ///< Offset: 0x2D4 - PMECC REM 5 Register (sec_num = 2)
        volatile uint32_t REM6_2;  ///< Offset: 0x2D8 - PMECC REM 6 Register (sec_num = 2)
        volatile uint32_t REM7_2;  ///< Offset: 0x2DC - PMECC REM 7 Register (sec_num = 2)
        volatile uint32_t REM8_2;  ///< Offset: 0x2E0 - PMECC REM 8 Register (sec_num = 2)
        volatile uint32_t REM9_2;  ///< Offset: 0x2E4 - PMECC REM 9 Register (sec_num = 2)
        volatile uint32_t REM10_2;  ///< Offset: 0x2E8 - PMECC REM 10 Register (sec_num = 2)
        volatile uint32_t REM11_2;  ///< Offset: 0x2EC - PMECC REM 11 Register (sec_num = 2)
        volatile uint32_t REM0_3;  ///< Offset: 0x300 - PMECC REM 0 Register (sec_num = 3)
        volatile uint32_t REM1_3;  ///< Offset: 0x304 - PMECC REM 1 Register (sec_num = 3)
        volatile uint32_t REM2_3;  ///< Offset: 0x308 - PMECC REM 2 Register (sec_num = 3)
        volatile uint32_t REM3_3;  ///< Offset: 0x30C - PMECC REM 3 Register (sec_num = 3)
        volatile uint32_t REM4_3;  ///< Offset: 0x310 - PMECC REM 4 Register (sec_num = 3)
        volatile uint32_t REM5_3;  ///< Offset: 0x314 - PMECC REM 5 Register (sec_num = 3)
        volatile uint32_t REM6_3;  ///< Offset: 0x318 - PMECC REM 6 Register (sec_num = 3)
        volatile uint32_t REM7_3;  ///< Offset: 0x31C - PMECC REM 7 Register (sec_num = 3)
        volatile uint32_t REM8_3;  ///< Offset: 0x320 - PMECC REM 8 Register (sec_num = 3)
        volatile uint32_t REM9_3;  ///< Offset: 0x324 - PMECC REM 9 Register (sec_num = 3)
        volatile uint32_t REM10_3;  ///< Offset: 0x328 - PMECC REM 10 Register (sec_num = 3)
        volatile uint32_t REM11_3;  ///< Offset: 0x32C - PMECC REM 11 Register (sec_num = 3)
        volatile uint32_t REM0_4;  ///< Offset: 0x340 - PMECC REM 0 Register (sec_num = 4)
        volatile uint32_t REM1_4;  ///< Offset: 0x344 - PMECC REM 1 Register (sec_num = 4)
        volatile uint32_t REM2_4;  ///< Offset: 0x348 - PMECC REM 2 Register (sec_num = 4)
        volatile uint32_t REM3_4;  ///< Offset: 0x34C - PMECC REM 3 Register (sec_num = 4)
        volatile uint32_t REM4_4;  ///< Offset: 0x350 - PMECC REM 4 Register (sec_num = 4)
        volatile uint32_t REM5_4;  ///< Offset: 0x354 - PMECC REM 5 Register (sec_num = 4)
        volatile uint32_t REM6_4;  ///< Offset: 0x358 - PMECC REM 6 Register (sec_num = 4)
        volatile uint32_t REM7_4;  ///< Offset: 0x35C - PMECC REM 7 Register (sec_num = 4)
        volatile uint32_t REM8_4;  ///< Offset: 0x360 - PMECC REM 8 Register (sec_num = 4)
        volatile uint32_t REM9_4;  ///< Offset: 0x364 - PMECC REM 9 Register (sec_num = 4)
        volatile uint32_t REM10_4;  ///< Offset: 0x368 - PMECC REM 10 Register (sec_num = 4)
        volatile uint32_t REM11_4;  ///< Offset: 0x36C - PMECC REM 11 Register (sec_num = 4)
        volatile uint32_t REM0_5;  ///< Offset: 0x380 - PMECC REM 0 Register (sec_num = 5)
        volatile uint32_t REM1_5;  ///< Offset: 0x384 - PMECC REM 1 Register (sec_num = 5)
        volatile uint32_t REM2_5;  ///< Offset: 0x388 - PMECC REM 2 Register (sec_num = 5)
        volatile uint32_t REM3_5;  ///< Offset: 0x38C - PMECC REM 3 Register (sec_num = 5)
        volatile uint32_t REM4_5;  ///< Offset: 0x390 - PMECC REM 4 Register (sec_num = 5)
        volatile uint32_t REM5_5;  ///< Offset: 0x394 - PMECC REM 5 Register (sec_num = 5)
        volatile uint32_t REM6_5;  ///< Offset: 0x398 - PMECC REM 6 Register (sec_num = 5)
        volatile uint32_t REM7_5;  ///< Offset: 0x39C - PMECC REM 7 Register (sec_num = 5)
        volatile uint32_t REM8_5;  ///< Offset: 0x3A0 - PMECC REM 8 Register (sec_num = 5)
        volatile uint32_t REM9_5;  ///< Offset: 0x3A4 - PMECC REM 9 Register (sec_num = 5)
        volatile uint32_t REM10_5;  ///< Offset: 0x3A8 - PMECC REM 10 Register (sec_num = 5)
        volatile uint32_t REM11_5;  ///< Offset: 0x3AC - PMECC REM 11 Register (sec_num = 5)
        volatile uint32_t REM0_6;  ///< Offset: 0x3C0 - PMECC REM 0 Register (sec_num = 6)
        volatile uint32_t REM1_6;  ///< Offset: 0x3C4 - PMECC REM 1 Register (sec_num = 6)
        volatile uint32_t REM2_6;  ///< Offset: 0x3C8 - PMECC REM 2 Register (sec_num = 6)
        volatile uint32_t REM3_6;  ///< Offset: 0x3CC - PMECC REM 3 Register (sec_num = 6)
        volatile uint32_t REM4_6;  ///< Offset: 0x3D0 - PMECC REM 4 Register (sec_num = 6)
        volatile uint32_t REM5_6;  ///< Offset: 0x3D4 - PMECC REM 5 Register (sec_num = 6)
        volatile uint32_t REM6_6;  ///< Offset: 0x3D8 - PMECC REM 6 Register (sec_num = 6)
        volatile uint32_t REM7_6;  ///< Offset: 0x3DC - PMECC REM 7 Register (sec_num = 6)
        volatile uint32_t REM8_6;  ///< Offset: 0x3E0 - PMECC REM 8 Register (sec_num = 6)
        volatile uint32_t REM9_6;  ///< Offset: 0x3E4 - PMECC REM 9 Register (sec_num = 6)
        volatile uint32_t REM10_6;  ///< Offset: 0x3E8 - PMECC REM 10 Register (sec_num = 6)
        volatile uint32_t REM11_6;  ///< Offset: 0x3EC - PMECC REM 11 Register (sec_num = 6)
        volatile uint32_t REM0_7;  ///< Offset: 0x400 - PMECC REM 0 Register (sec_num = 7)
        volatile uint32_t REM1_7;  ///< Offset: 0x404 - PMECC REM 1 Register (sec_num = 7)
        volatile uint32_t REM2_7;  ///< Offset: 0x408 - PMECC REM 2 Register (sec_num = 7)
        volatile uint32_t REM3_7;  ///< Offset: 0x40C - PMECC REM 3 Register (sec_num = 7)
        volatile uint32_t REM4_7;  ///< Offset: 0x410 - PMECC REM 4 Register (sec_num = 7)
        volatile uint32_t REM5_7;  ///< Offset: 0x414 - PMECC REM 5 Register (sec_num = 7)
        volatile uint32_t REM6_7;  ///< Offset: 0x418 - PMECC REM 6 Register (sec_num = 7)
        volatile uint32_t REM7_7;  ///< Offset: 0x41C - PMECC REM 7 Register (sec_num = 7)
        volatile uint32_t REM8_7;  ///< Offset: 0x420 - PMECC REM 8 Register (sec_num = 7)
        volatile uint32_t REM9_7;  ///< Offset: 0x424 - PMECC REM 9 Register (sec_num = 7)
        volatile uint32_t REM10_7;  ///< Offset: 0x428 - PMECC REM 10 Register (sec_num = 7)
        volatile uint32_t REM11_7;  ///< Offset: 0x42C - PMECC REM 11 Register (sec_num = 7)
    };

    /// Peripheral instances
    inline Registers* PMECC = reinterpret_cast<Registers*>(PMECC_BASE);

    // Bit definitions
    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t BCH_ERR = (3 << 0);  ///< Error Correct Capability
        constexpr uint32_t SECTORSZ = (1U << 4);  ///< Sector Size
        constexpr uint32_t PAGESIZE = (2 << 8);  ///< Number of Sectors in the Page
        constexpr uint32_t NANDWR = (1U << 12);  ///< NAND Write Access
        constexpr uint32_t SPAREEN = (1U << 16);  ///< Spare Enable
        constexpr uint32_t AUTO_ = (1U << 20);  ///< Automatic Mode Enable (renamed from AUTO_)
    }

    /// SAREA Register bits
    namespace sarea_bits {
        constexpr uint32_t SPARESIZE = (9 << 0);  ///< Spare Area Size
    }

    /// SADDR Register bits
    namespace saddr_bits {
        constexpr uint32_t STARTADDR = (9 << 0);  ///< ECC Area Start Address (byte oriented address)
    }

    /// EADDR Register bits
    namespace eaddr_bits {
        constexpr uint32_t ENDADDR = (9 << 0);  ///< ECC Area End Address (byte oriented address)
    }

    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t CLKCTRL = (3 << 0);  ///< Clock Control Register
    }

    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t RST = (1U << 0);  ///< Reset the PMECC Module
        constexpr uint32_t DATA = (1U << 1);  ///< Start a Data Phase
        constexpr uint32_t USER = (1U << 2);  ///< Start a User Mode Phase
        constexpr uint32_t ENABLE = (1U << 4);  ///< PMECC Module Enable
        constexpr uint32_t DISABLE = (1U << 5);  ///< PMECC Module Disable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t BUSY = (1U << 0);  ///< The Kernel of the PMECC is Busy
        constexpr uint32_t ENABLE = (1U << 4);  ///< PMECC Module Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t ERRIE = (1U << 0);  ///< Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t ERRID = (1U << 0);  ///< Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t ERRIM = (1U << 0);  ///< Error Interrupt Enable
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t ERRIS = (8 << 0);  ///< Error Interrupt Status Register
    }

    /// ECC0_0 Register bits
    namespace ecc0_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC1_0 Register bits
    namespace ecc1_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC2_0 Register bits
    namespace ecc2_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC3_0 Register bits
    namespace ecc3_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC4_0 Register bits
    namespace ecc4_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC5_0 Register bits
    namespace ecc5_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC6_0 Register bits
    namespace ecc6_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC7_0 Register bits
    namespace ecc7_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC8_0 Register bits
    namespace ecc8_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC9_0 Register bits
    namespace ecc9_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC10_0 Register bits
    namespace ecc10_0_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC0_1 Register bits
    namespace ecc0_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC1_1 Register bits
    namespace ecc1_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC2_1 Register bits
    namespace ecc2_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC3_1 Register bits
    namespace ecc3_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC4_1 Register bits
    namespace ecc4_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC5_1 Register bits
    namespace ecc5_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC6_1 Register bits
    namespace ecc6_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC7_1 Register bits
    namespace ecc7_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC8_1 Register bits
    namespace ecc8_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC9_1 Register bits
    namespace ecc9_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC10_1 Register bits
    namespace ecc10_1_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC0_2 Register bits
    namespace ecc0_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC1_2 Register bits
    namespace ecc1_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC2_2 Register bits
    namespace ecc2_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC3_2 Register bits
    namespace ecc3_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC4_2 Register bits
    namespace ecc4_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC5_2 Register bits
    namespace ecc5_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC6_2 Register bits
    namespace ecc6_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC7_2 Register bits
    namespace ecc7_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC8_2 Register bits
    namespace ecc8_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC9_2 Register bits
    namespace ecc9_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC10_2 Register bits
    namespace ecc10_2_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC0_3 Register bits
    namespace ecc0_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC1_3 Register bits
    namespace ecc1_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC2_3 Register bits
    namespace ecc2_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC3_3 Register bits
    namespace ecc3_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC4_3 Register bits
    namespace ecc4_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC5_3 Register bits
    namespace ecc5_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC6_3 Register bits
    namespace ecc6_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC7_3 Register bits
    namespace ecc7_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC8_3 Register bits
    namespace ecc8_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC9_3 Register bits
    namespace ecc9_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC10_3 Register bits
    namespace ecc10_3_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC0_4 Register bits
    namespace ecc0_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC1_4 Register bits
    namespace ecc1_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC2_4 Register bits
    namespace ecc2_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC3_4 Register bits
    namespace ecc3_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC4_4 Register bits
    namespace ecc4_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC5_4 Register bits
    namespace ecc5_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC6_4 Register bits
    namespace ecc6_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC7_4 Register bits
    namespace ecc7_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC8_4 Register bits
    namespace ecc8_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC9_4 Register bits
    namespace ecc9_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC10_4 Register bits
    namespace ecc10_4_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC0_5 Register bits
    namespace ecc0_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC1_5 Register bits
    namespace ecc1_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC2_5 Register bits
    namespace ecc2_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC3_5 Register bits
    namespace ecc3_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC4_5 Register bits
    namespace ecc4_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC5_5 Register bits
    namespace ecc5_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC6_5 Register bits
    namespace ecc6_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC7_5 Register bits
    namespace ecc7_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC8_5 Register bits
    namespace ecc8_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC9_5 Register bits
    namespace ecc9_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC10_5 Register bits
    namespace ecc10_5_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC0_6 Register bits
    namespace ecc0_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC1_6 Register bits
    namespace ecc1_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC2_6 Register bits
    namespace ecc2_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC3_6 Register bits
    namespace ecc3_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC4_6 Register bits
    namespace ecc4_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC5_6 Register bits
    namespace ecc5_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC6_6 Register bits
    namespace ecc6_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC7_6 Register bits
    namespace ecc7_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC8_6 Register bits
    namespace ecc8_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC9_6 Register bits
    namespace ecc9_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC10_6 Register bits
    namespace ecc10_6_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC0_7 Register bits
    namespace ecc0_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC1_7 Register bits
    namespace ecc1_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC2_7 Register bits
    namespace ecc2_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC3_7 Register bits
    namespace ecc3_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC4_7 Register bits
    namespace ecc4_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC5_7 Register bits
    namespace ecc5_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC6_7 Register bits
    namespace ecc6_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC7_7 Register bits
    namespace ecc7_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC8_7 Register bits
    namespace ecc8_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC9_7 Register bits
    namespace ecc9_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// ECC10_7 Register bits
    namespace ecc10_7_bits {
        constexpr uint32_t ECC = (32 << 0);  ///< BCH Redundancy
    }

    /// REM0_0 Register bits
    namespace rem0_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM1_0 Register bits
    namespace rem1_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM2_0 Register bits
    namespace rem2_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM3_0 Register bits
    namespace rem3_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM4_0 Register bits
    namespace rem4_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM5_0 Register bits
    namespace rem5_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM6_0 Register bits
    namespace rem6_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM7_0 Register bits
    namespace rem7_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM8_0 Register bits
    namespace rem8_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM9_0 Register bits
    namespace rem9_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM10_0 Register bits
    namespace rem10_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM11_0 Register bits
    namespace rem11_0_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM0_1 Register bits
    namespace rem0_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM1_1 Register bits
    namespace rem1_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM2_1 Register bits
    namespace rem2_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM3_1 Register bits
    namespace rem3_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM4_1 Register bits
    namespace rem4_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM5_1 Register bits
    namespace rem5_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM6_1 Register bits
    namespace rem6_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM7_1 Register bits
    namespace rem7_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM8_1 Register bits
    namespace rem8_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM9_1 Register bits
    namespace rem9_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM10_1 Register bits
    namespace rem10_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM11_1 Register bits
    namespace rem11_1_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM0_2 Register bits
    namespace rem0_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM1_2 Register bits
    namespace rem1_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM2_2 Register bits
    namespace rem2_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM3_2 Register bits
    namespace rem3_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM4_2 Register bits
    namespace rem4_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM5_2 Register bits
    namespace rem5_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM6_2 Register bits
    namespace rem6_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM7_2 Register bits
    namespace rem7_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM8_2 Register bits
    namespace rem8_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM9_2 Register bits
    namespace rem9_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM10_2 Register bits
    namespace rem10_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM11_2 Register bits
    namespace rem11_2_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM0_3 Register bits
    namespace rem0_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM1_3 Register bits
    namespace rem1_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM2_3 Register bits
    namespace rem2_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM3_3 Register bits
    namespace rem3_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM4_3 Register bits
    namespace rem4_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM5_3 Register bits
    namespace rem5_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM6_3 Register bits
    namespace rem6_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM7_3 Register bits
    namespace rem7_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM8_3 Register bits
    namespace rem8_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM9_3 Register bits
    namespace rem9_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM10_3 Register bits
    namespace rem10_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM11_3 Register bits
    namespace rem11_3_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM0_4 Register bits
    namespace rem0_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM1_4 Register bits
    namespace rem1_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM2_4 Register bits
    namespace rem2_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM3_4 Register bits
    namespace rem3_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM4_4 Register bits
    namespace rem4_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM5_4 Register bits
    namespace rem5_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM6_4 Register bits
    namespace rem6_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM7_4 Register bits
    namespace rem7_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM8_4 Register bits
    namespace rem8_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM9_4 Register bits
    namespace rem9_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM10_4 Register bits
    namespace rem10_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM11_4 Register bits
    namespace rem11_4_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM0_5 Register bits
    namespace rem0_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM1_5 Register bits
    namespace rem1_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM2_5 Register bits
    namespace rem2_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM3_5 Register bits
    namespace rem3_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM4_5 Register bits
    namespace rem4_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM5_5 Register bits
    namespace rem5_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM6_5 Register bits
    namespace rem6_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM7_5 Register bits
    namespace rem7_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM8_5 Register bits
    namespace rem8_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM9_5 Register bits
    namespace rem9_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM10_5 Register bits
    namespace rem10_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM11_5 Register bits
    namespace rem11_5_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM0_6 Register bits
    namespace rem0_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM1_6 Register bits
    namespace rem1_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM2_6 Register bits
    namespace rem2_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM3_6 Register bits
    namespace rem3_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM4_6 Register bits
    namespace rem4_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM5_6 Register bits
    namespace rem5_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM6_6 Register bits
    namespace rem6_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM7_6 Register bits
    namespace rem7_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM8_6 Register bits
    namespace rem8_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM9_6 Register bits
    namespace rem9_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM10_6 Register bits
    namespace rem10_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM11_6 Register bits
    namespace rem11_6_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM0_7 Register bits
    namespace rem0_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM1_7 Register bits
    namespace rem1_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM2_7 Register bits
    namespace rem2_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM3_7 Register bits
    namespace rem3_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM4_7 Register bits
    namespace rem4_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM5_7 Register bits
    namespace rem5_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM6_7 Register bits
    namespace rem6_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM7_7 Register bits
    namespace rem7_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM8_7 Register bits
    namespace rem8_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM9_7 Register bits
    namespace rem9_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM10_7 Register bits
    namespace rem10_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

    /// REM11_7 Register bits
    namespace rem11_7_bits {
        constexpr uint32_t REM2NP1 = (14 << 0);  ///< BCH Remainder 2 * N + 1
        constexpr uint32_t REM2NP3 = (14 << 16);  ///< BCH Remainder 2 * N + 3
    }

}

// ============================================================================
// PMERRLOC Peripheral
// ============================================================================

namespace pmerrloc {
    /// Base addresses
    constexpr uint32_t PMERRLOC_BASE = 0xFFFFE600;

    /// PMERRLOC Register structure
    struct Registers {
        volatile uint32_t ELCFG;  ///< Offset: 0x00 - Error Location Configuration Register
        volatile uint32_t ELPRIM;  ///< Offset: 0x04 - Error Location Primitive Register
        volatile uint32_t ELEN;  ///< Offset: 0x08 - Error Location Enable Register
        volatile uint32_t ELDIS;  ///< Offset: 0x0C - Error Location Disable Register
        volatile uint32_t ELSR;  ///< Offset: 0x10 - Error Location Status Register
        volatile uint32_t ELIER;  ///< Offset: 0x14 - Error Location Interrupt Enable register
        volatile uint32_t ELIDR;  ///< Offset: 0x18 - Error Location Interrupt Disable Register
        volatile uint32_t ELIMR;  ///< Offset: 0x1C - Error Location Interrupt Mask Register
        volatile uint32_t ELISR;  ///< Offset: 0x20 - Error Location Interrupt Status Register
        volatile uint32_t SIGMA__;  ///< Offset: 0x28 - PMECC SIGMA 0 Register (renamed from SIGMA__)
        volatile uint32_t EL__;  ///< Offset: 0x8C - PMECC Error Location 0 Register (renamed from EL__)
    };

    /// Peripheral instances
    inline Registers* PMERRLOC = reinterpret_cast<Registers*>(PMERRLOC_BASE);

    // Bit definitions
    /// ELCFG Register bits
    namespace elcfg_bits {
        constexpr uint32_t SECTORSZ = (1U << 0);  ///< Sector Size
        constexpr uint32_t ERRNUM = (5 << 16);  ///< Number of Errors
    }

    /// ELPRIM Register bits
    namespace elprim_bits {
        constexpr uint32_t PRIMITIV = (16 << 0);  ///< Primitive Polynomial
    }

    /// ELEN Register bits
    namespace elen_bits {
        constexpr uint32_t ENINIT = (14 << 0);  ///< Initial Number of Bits in the Codeword
    }

    /// ELDIS Register bits
    namespace eldis_bits {
        constexpr uint32_t DIS = (1U << 0);  ///< Disable Error Location Engine
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t BUSY = (1U << 0);  ///< Error Location Engine Busy
    }

    /// ELIER Register bits
    namespace elier_bits {
        constexpr uint32_t DONE = (1U << 0);  ///< Computation Terminated Interrupt Enable
    }

    /// ELIDR Register bits
    namespace elidr_bits {
        constexpr uint32_t DONE = (1U << 0);  ///< Computation Terminated Interrupt Disable
    }

    /// ELIMR Register bits
    namespace elimr_bits {
        constexpr uint32_t DONE = (1U << 0);  ///< Computation Terminated Interrupt Mask
    }

    /// ELISR Register bits
    namespace elisr_bits {
        constexpr uint32_t DONE = (1U << 0);  ///< Computation Terminated Interrupt Status
        constexpr uint32_t ERR_CNT = (5 << 8);  ///< Error Counter value
    }

    /// SIGMA__ Register bits
    namespace sigma___bits {
        constexpr uint32_t SIGMAN = (14 << 0);  ///< SIGMAN
    }

    /// EL__ Register bits
    namespace el___bits {
        constexpr uint32_t ERRLOCN = (14 << 0);  ///< Error Position within the set {sector area, spare area}.
    }

}

// ============================================================================
// DDRSDRC Peripheral
// ============================================================================

namespace ddrsdrc {
    /// Base addresses
    constexpr uint32_t DDRSDRC_BASE = 0xFFFFE800;

    /// DDRSDRC Register structure
    struct Registers {
        volatile uint32_t MR;  ///< Offset: 0x00 - DDRSDRC Mode Register
        volatile uint32_t RTR;  ///< Offset: 0x04 - DDRSDRC Refresh Timer Register
        volatile uint32_t CR;  ///< Offset: 0x08 - DDRSDRC Configuration Register
        volatile uint32_t TPR0;  ///< Offset: 0x0C - DDRSDRC Timing Parameter 0 Register
        volatile uint32_t TPR1;  ///< Offset: 0x10 - DDRSDRC Timing Parameter 1 Register
        volatile uint32_t TPR2;  ///< Offset: 0x14 - DDRSDRC Timing Parameter 2 Register
        volatile uint32_t LPR;  ///< Offset: 0x1C - DDRSDRC Low-power Register
        volatile uint32_t MD;  ///< Offset: 0x20 - DDRSDRC Memory Device Register
        volatile uint32_t DLL;  ///< Offset: 0x24 - DDRSDRC DLL Information Register
        volatile uint32_t HS;  ///< Offset: 0x2C - DDRSDRC High Speed Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - DDRSDRC Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - DDRSDRC Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* DDRSDRC = reinterpret_cast<Registers*>(DDRSDRC_BASE);

    // Bit definitions
    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t MODE = (3 << 0);  ///< DDRSDRC Command Mode
    }

    /// RTR Register bits
    namespace rtr_bits {
        constexpr uint32_t COUNT = (12 << 0);  ///< DDRSDRC Refresh Timer Count
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t NC = (2 << 0);  ///< Number of Column Bits
        constexpr uint32_t NR = (2 << 2);  ///< Number of Row Bits
        constexpr uint32_t CAS = (3 << 4);  ///< CAS Latency
        constexpr uint32_t DLL = (1U << 7);  ///< Reset DLL
        constexpr uint32_t DIC = (1U << 8);  ///< Output Driver Impedance Control
        constexpr uint32_t DIS_DLL = (1U << 9);  ///< Disable DLL
        constexpr uint32_t OCD = (3 << 12);  ///< Off-chip Driver
        constexpr uint32_t EBISHARE = (1U << 16);  ///< External Bus Interface is Shared
        constexpr uint32_t ACTBST = (1U << 18);  ///< ACTIVE Bank X to Burst Stop Read Access Bank Y
        constexpr uint32_t NB = (1U << 20);  ///< Number of Banks
        constexpr uint32_t DECOD = (1U << 22);  ///< Type of Decoding
    }

    /// TPR0 Register bits
    namespace tpr0_bits {
        constexpr uint32_t TRAS = (4 << 0);  ///< Active to Precharge Delay
        constexpr uint32_t TRCD = (4 << 4);  ///< Row to Column Delay
        constexpr uint32_t TWR = (4 << 8);  ///< Write Recovery Delay
        constexpr uint32_t TRC = (4 << 12);  ///< Row Cycle Delay
        constexpr uint32_t TRP = (4 << 16);  ///< Row Precharge Delay
        constexpr uint32_t TRRD = (4 << 20);  ///< Active bankA to Active bankB
        constexpr uint32_t TWTR = (3 << 24);  ///< Internal Write to Read Delay
        constexpr uint32_t REDUCE_WRRD = (1U << 27);  ///< Reduce Write to Read Delay
        constexpr uint32_t TMRD = (4 << 28);  ///< Load Mode Register Command to Active or Refresh Command
    }

    /// TPR1 Register bits
    namespace tpr1_bits {
        constexpr uint32_t TRFC = (5 << 0);  ///< Row Cycle Delay
        constexpr uint32_t TXSNR = (8 << 8);  ///< Exit Self Refresh Delay to Non-read Command
        constexpr uint32_t TXSRD = (8 << 16);  ///< ExiT Self Refresh Delay to Read Command
        constexpr uint32_t TXP = (4 << 24);  ///< Exit Power-down Delay to First Command
    }

    /// TPR2 Register bits
    namespace tpr2_bits {
        constexpr uint32_t TXARD = (4 << 0);  ///< Exit Active Power Down Delay to Read Command in Mode "Fast Exit".
        constexpr uint32_t TXARDS = (4 << 4);  ///< Exit Active Power Down Delay to Read Command in Mode "Slow Exit".
        constexpr uint32_t TRPA = (4 << 8);  ///< Row Precharge All Delay
        constexpr uint32_t TRTP = (3 << 12);  ///< Read to Precharge
        constexpr uint32_t TFAW = (4 << 16);  ///< Four Active window
    }

    /// LPR Register bits
    namespace lpr_bits {
        constexpr uint32_t LPCB = (2 << 0);  ///< Low-power Command Bit
        constexpr uint32_t CLK_FR = (1U << 2);  ///< Clock Frozen Command Bit
        constexpr uint32_t PASR = (3 << 4);  ///< Partial Array Self Refresh
        constexpr uint32_t DS = (3 << 8);  ///< Drive Strength
        constexpr uint32_t TIMEOUT = (2 << 12);  ///< Low Power Mode
        constexpr uint32_t APDE = (1U << 16);  ///< Active Power Down Exit Time
        constexpr uint32_t UPD_MR = (2 << 20);  ///< Update Load Mode Register and Extended Mode Register
    }

    /// MD Register bits
    namespace md_bits {
        constexpr uint32_t MD = (3 << 0);  ///< Memory Device
        constexpr uint32_t DBW = (1U << 4);  ///< Data Bus Width
    }

    /// DLL Register bits
    namespace dll_bits {
        constexpr uint32_t MDINC = (1U << 0);  ///< DLL Master Delay Increment
        constexpr uint32_t MDDEC = (1U << 1);  ///< DLL Master Delay Decrement
        constexpr uint32_t MDOVF = (1U << 2);  ///< DLL Master Delay Overflow Flag
        constexpr uint32_t MDVAL = (8 << 8);  ///< DLL Master Delay Value
    }

    /// HS Register bits
    namespace hs_bits {
        constexpr uint32_t DIS_ANTICIP_READ = (1U << 2);  ///< Anticip Read Access
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// SMC Peripheral
// ============================================================================

namespace smc {
    /// Base addresses
    constexpr uint32_t SMC_BASE = 0xFFFFEA00;

    /// SMC Register structure
    struct Registers {
        volatile uint32_t SETUP0;  ///< Offset: 0x00 - SMC Setup Register (CS_number = 0)
        volatile uint32_t PULSE0;  ///< Offset: 0x04 - SMC Pulse Register (CS_number = 0)
        volatile uint32_t CYCLE0;  ///< Offset: 0x08 - SMC Cycle Register (CS_number = 0)
        volatile uint32_t MODE0;  ///< Offset: 0x0C - SMC Mode Register (CS_number = 0)
        volatile uint32_t SETUP1;  ///< Offset: 0x10 - SMC Setup Register (CS_number = 1)
        volatile uint32_t PULSE1;  ///< Offset: 0x14 - SMC Pulse Register (CS_number = 1)
        volatile uint32_t CYCLE1;  ///< Offset: 0x18 - SMC Cycle Register (CS_number = 1)
        volatile uint32_t MODE1;  ///< Offset: 0x1C - SMC Mode Register (CS_number = 1)
        volatile uint32_t SETUP2;  ///< Offset: 0x20 - SMC Setup Register (CS_number = 2)
        volatile uint32_t PULSE2;  ///< Offset: 0x24 - SMC Pulse Register (CS_number = 2)
        volatile uint32_t CYCLE2;  ///< Offset: 0x28 - SMC Cycle Register (CS_number = 2)
        volatile uint32_t MODE2;  ///< Offset: 0x2C - SMC Mode Register (CS_number = 2)
        volatile uint32_t SETUP3;  ///< Offset: 0x30 - SMC Setup Register (CS_number = 3)
        volatile uint32_t PULSE3;  ///< Offset: 0x34 - SMC Pulse Register (CS_number = 3)
        volatile uint32_t CYCLE3;  ///< Offset: 0x38 - SMC Cycle Register (CS_number = 3)
        volatile uint32_t MODE3;  ///< Offset: 0x3C - SMC Mode Register (CS_number = 3)
        volatile uint32_t SETUP4;  ///< Offset: 0x40 - SMC Setup Register (CS_number = 4)
        volatile uint32_t PULSE4;  ///< Offset: 0x44 - SMC Pulse Register (CS_number = 4)
        volatile uint32_t CYCLE4;  ///< Offset: 0x48 - SMC Cycle Register (CS_number = 4)
        volatile uint32_t MODE4;  ///< Offset: 0x4C - SMC Mode Register (CS_number = 4)
        volatile uint32_t SETUP5;  ///< Offset: 0x50 - SMC Setup Register (CS_number = 5)
        volatile uint32_t PULSE5;  ///< Offset: 0x54 - SMC Pulse Register (CS_number = 5)
        volatile uint32_t CYCLE5;  ///< Offset: 0x58 - SMC Cycle Register (CS_number = 5)
        volatile uint32_t MODE5;  ///< Offset: 0x5C - SMC Mode Register (CS_number = 5)
        volatile uint32_t DELAY1;  ///< Offset: 0xC0 - SMC Delay on I/O
        volatile uint32_t DELAY2;  ///< Offset: 0xC4 - SMC Delay on I/O
        volatile uint32_t DELAY3;  ///< Offset: 0xC8 - SMC Delay on I/O
        volatile uint32_t DELAY4;  ///< Offset: 0xCC - SMC Delay on I/O
        volatile uint32_t DELAY5;  ///< Offset: 0xD0 - SMC Delay on I/O
        volatile uint32_t DELAY6;  ///< Offset: 0xD4 - SMC Delay on I/O
        volatile uint32_t DELAY7;  ///< Offset: 0xD8 - SMC Delay on I/O
        volatile uint32_t DELAY8;  ///< Offset: 0xDC - SMC Delay on I/O
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - SMC Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - SMC Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* SMC = reinterpret_cast<Registers*>(SMC_BASE);

    // Bit definitions
    /// SETUP0 Register bits
    namespace setup0_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE0 Register bits
    namespace pulse0_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE0 Register bits
    namespace cycle0_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE0 Register bits
    namespace mode0_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t BAT = (1U << 8);  ///< Byte Access Type
        constexpr uint32_t DBW = (2 << 12);  ///< Data Bus Width
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// SETUP1 Register bits
    namespace setup1_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE1 Register bits
    namespace pulse1_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE1 Register bits
    namespace cycle1_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE1 Register bits
    namespace mode1_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t BAT = (1U << 8);  ///< Byte Access Type
        constexpr uint32_t DBW = (2 << 12);  ///< Data Bus Width
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// SETUP2 Register bits
    namespace setup2_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE2 Register bits
    namespace pulse2_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE2 Register bits
    namespace cycle2_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE2 Register bits
    namespace mode2_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t BAT = (1U << 8);  ///< Byte Access Type
        constexpr uint32_t DBW = (2 << 12);  ///< Data Bus Width
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// SETUP3 Register bits
    namespace setup3_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE3 Register bits
    namespace pulse3_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE3 Register bits
    namespace cycle3_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE3 Register bits
    namespace mode3_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t BAT = (1U << 8);  ///< Byte Access Type
        constexpr uint32_t DBW = (2 << 12);  ///< Data Bus Width
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// SETUP4 Register bits
    namespace setup4_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE4 Register bits
    namespace pulse4_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE4 Register bits
    namespace cycle4_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE4 Register bits
    namespace mode4_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t BAT = (1U << 8);  ///< Byte Access Type
        constexpr uint32_t DBW = (2 << 12);  ///< Data Bus Width
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// SETUP5 Register bits
    namespace setup5_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE5 Register bits
    namespace pulse5_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE5 Register bits
    namespace cycle5_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE5 Register bits
    namespace mode5_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t BAT = (1U << 8);  ///< Byte Access Type
        constexpr uint32_t DBW = (2 << 12);  ///< Data Bus Width
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// DELAY1 Register bits
    namespace delay1_bits {
        constexpr uint32_t Delay1 = (4 << 0);  ///< Delay1
        constexpr uint32_t Delay2 = (4 << 4);  ///< Delay2
        constexpr uint32_t Delay3 = (4 << 8);  ///< Delay3
        constexpr uint32_t Delay4 = (4 << 12);  ///< Delay4
        constexpr uint32_t Delay5 = (4 << 16);  ///< Delay5
        constexpr uint32_t Delay6 = (4 << 20);  ///< Delay6
        constexpr uint32_t Delay7 = (4 << 24);  ///< Delay7
        constexpr uint32_t Delay8 = (4 << 28);  ///< Delay8
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAC_BASE = 0xFFFFEC00;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t GCFG;  ///< Offset: 0x00 - DMAC Global Configuration Register
        volatile uint32_t EN;  ///< Offset: 0x04 - DMAC Enable Register
        volatile uint32_t SREQ;  ///< Offset: 0x08 - DMAC Software Single Request Register
        volatile uint32_t CREQ;  ///< Offset: 0x0C - DMAC Software Chunk Transfer Request Register
        volatile uint32_t LAST;  ///< Offset: 0x10 - DMAC Software Last Transfer Flag Register
        volatile uint32_t EBCIER;  ///< Offset: 0x18 - DMAC Error, Chained Buffer Transfer Completed Interrupt...
        volatile uint32_t EBCIDR;  ///< Offset: 0x1C - DMAC Error, Chained Buffer Transfer Completed Interrupt...
        volatile uint32_t EBCIMR;  ///< Offset: 0x20 - DMAC Error, Chained Buffer Transfer Completed Interrupt...
        volatile uint32_t EBCISR;  ///< Offset: 0x24 - DMAC Error, Chained Buffer Transfer Completed Interrupt...
        volatile uint32_t CHER;  ///< Offset: 0x28 - DMAC Channel Handler Enable Register
        volatile uint32_t CHDR;  ///< Offset: 0x2C - DMAC Channel Handler Disable Register
        volatile uint32_t CHSR;  ///< Offset: 0x30 - DMAC Channel Handler Status Register
        volatile uint32_t SADDR0;  ///< Offset: 0x3C - DMAC Channel Source Address Register (ch_num = 0)
        volatile uint32_t DADDR0;  ///< Offset: 0x40 - DMAC Channel Destination Address Register (ch_num = 0)
        volatile uint32_t DSCR0;  ///< Offset: 0x44 - DMAC Channel Descriptor Address Register (ch_num = 0)
        volatile uint32_t CTRLA0;  ///< Offset: 0x48 - DMAC Channel Control A Register (ch_num = 0)
        volatile uint32_t CTRLB0;  ///< Offset: 0x4C - DMAC Channel Control B Register (ch_num = 0)
        volatile uint32_t CFG0;  ///< Offset: 0x50 - DMAC Channel Configuration Register (ch_num = 0)
        volatile uint32_t SPIP0;  ///< Offset: 0x54 - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP0;  ///< Offset: 0x58 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR1;  ///< Offset: 0x64 - DMAC Channel Source Address Register (ch_num = 1)
        volatile uint32_t DADDR1;  ///< Offset: 0x68 - DMAC Channel Destination Address Register (ch_num = 1)
        volatile uint32_t DSCR1;  ///< Offset: 0x6C - DMAC Channel Descriptor Address Register (ch_num = 1)
        volatile uint32_t CTRLA1;  ///< Offset: 0x70 - DMAC Channel Control A Register (ch_num = 1)
        volatile uint32_t CTRLB1;  ///< Offset: 0x74 - DMAC Channel Control B Register (ch_num = 1)
        volatile uint32_t CFG1;  ///< Offset: 0x78 - DMAC Channel Configuration Register (ch_num = 1)
        volatile uint32_t SPIP1;  ///< Offset: 0x7C - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP1;  ///< Offset: 0x80 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR2;  ///< Offset: 0x8C - DMAC Channel Source Address Register (ch_num = 2)
        volatile uint32_t DADDR2;  ///< Offset: 0x90 - DMAC Channel Destination Address Register (ch_num = 2)
        volatile uint32_t DSCR2;  ///< Offset: 0x94 - DMAC Channel Descriptor Address Register (ch_num = 2)
        volatile uint32_t CTRLA2;  ///< Offset: 0x98 - DMAC Channel Control A Register (ch_num = 2)
        volatile uint32_t CTRLB2;  ///< Offset: 0x9C - DMAC Channel Control B Register (ch_num = 2)
        volatile uint32_t CFG2;  ///< Offset: 0xA0 - DMAC Channel Configuration Register (ch_num = 2)
        volatile uint32_t SPIP2;  ///< Offset: 0xA4 - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP2;  ///< Offset: 0xA8 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR3;  ///< Offset: 0xB4 - DMAC Channel Source Address Register (ch_num = 3)
        volatile uint32_t DADDR3;  ///< Offset: 0xB8 - DMAC Channel Destination Address Register (ch_num = 3)
        volatile uint32_t DSCR3;  ///< Offset: 0xBC - DMAC Channel Descriptor Address Register (ch_num = 3)
        volatile uint32_t CTRLA3;  ///< Offset: 0xC0 - DMAC Channel Control A Register (ch_num = 3)
        volatile uint32_t CTRLB3;  ///< Offset: 0xC4 - DMAC Channel Control B Register (ch_num = 3)
        volatile uint32_t CFG3;  ///< Offset: 0xC8 - DMAC Channel Configuration Register (ch_num = 3)
        volatile uint32_t SPIP3;  ///< Offset: 0xCC - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP3;  ///< Offset: 0xD0 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR4;  ///< Offset: 0xDC - DMAC Channel Source Address Register (ch_num = 4)
        volatile uint32_t DADDR4;  ///< Offset: 0xE0 - DMAC Channel Destination Address Register (ch_num = 4)
        volatile uint32_t DSCR4;  ///< Offset: 0xE4 - DMAC Channel Descriptor Address Register (ch_num = 4)
        volatile uint32_t CTRLA4;  ///< Offset: 0xE8 - DMAC Channel Control A Register (ch_num = 4)
        volatile uint32_t CTRLB4;  ///< Offset: 0xEC - DMAC Channel Control B Register (ch_num = 4)
        volatile uint32_t CFG4;  ///< Offset: 0xF0 - DMAC Channel Configuration Register (ch_num = 4)
        volatile uint32_t SPIP4;  ///< Offset: 0xF4 - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP4;  ///< Offset: 0xF8 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR5;  ///< Offset: 0x104 - DMAC Channel Source Address Register (ch_num = 5)
        volatile uint32_t DADDR5;  ///< Offset: 0x108 - DMAC Channel Destination Address Register (ch_num = 5)
        volatile uint32_t DSCR5;  ///< Offset: 0x10C - DMAC Channel Descriptor Address Register (ch_num = 5)
        volatile uint32_t CTRLA5;  ///< Offset: 0x110 - DMAC Channel Control A Register (ch_num = 5)
        volatile uint32_t CTRLB5;  ///< Offset: 0x114 - DMAC Channel Control B Register (ch_num = 5)
        volatile uint32_t CFG5;  ///< Offset: 0x118 - DMAC Channel Configuration Register (ch_num = 5)
        volatile uint32_t SPIP5;  ///< Offset: 0x11C - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP5;  ///< Offset: 0x120 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR6;  ///< Offset: 0x12C - DMAC Channel Source Address Register (ch_num = 6)
        volatile uint32_t DADDR6;  ///< Offset: 0x130 - DMAC Channel Destination Address Register (ch_num = 6)
        volatile uint32_t DSCR6;  ///< Offset: 0x134 - DMAC Channel Descriptor Address Register (ch_num = 6)
        volatile uint32_t CTRLA6;  ///< Offset: 0x138 - DMAC Channel Control A Register (ch_num = 6)
        volatile uint32_t CTRLB6;  ///< Offset: 0x13C - DMAC Channel Control B Register (ch_num = 6)
        volatile uint32_t CFG6;  ///< Offset: 0x140 - DMAC Channel Configuration Register (ch_num = 6)
        volatile uint32_t SPIP6;  ///< Offset: 0x144 - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP6;  ///< Offset: 0x148 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR7;  ///< Offset: 0x154 - DMAC Channel Source Address Register (ch_num = 7)
        volatile uint32_t DADDR7;  ///< Offset: 0x158 - DMAC Channel Destination Address Register (ch_num = 7)
        volatile uint32_t DSCR7;  ///< Offset: 0x15C - DMAC Channel Descriptor Address Register (ch_num = 7)
        volatile uint32_t CTRLA7;  ///< Offset: 0x160 - DMAC Channel Control A Register (ch_num = 7)
        volatile uint32_t CTRLB7;  ///< Offset: 0x164 - DMAC Channel Control B Register (ch_num = 7)
        volatile uint32_t CFG7;  ///< Offset: 0x168 - DMAC Channel Configuration Register (ch_num = 7)
        volatile uint32_t SPIP7;  ///< Offset: 0x16C - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP7;  ///< Offset: 0x170 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t WPMR;  ///< Offset: 0x1E4 - DMAC Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0x1E8 - DMAC Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* DMAC = reinterpret_cast<Registers*>(DMAC_BASE);

    // Bit definitions
    /// GCFG Register bits
    namespace gcfg_bits {
        constexpr uint32_t ARB_CFG = (1U << 4);  ///< Arbiter Configuration
        constexpr uint32_t DICEN = (1U << 8);  ///< Descriptor Integrity Check
    }

    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< ENABLE
    }

    /// SREQ Register bits
    namespace sreq_bits {
        constexpr uint32_t SSREQ0 = (1U << 0);  ///< Source Request
        constexpr uint32_t DSREQ0 = (1U << 1);  ///< Destination Request
        constexpr uint32_t SSREQ1 = (1U << 2);  ///< Source Request
        constexpr uint32_t DSREQ1 = (1U << 3);  ///< Destination Request
        constexpr uint32_t SSREQ2 = (1U << 4);  ///< Source Request
        constexpr uint32_t DSREQ2 = (1U << 5);  ///< Destination Request
        constexpr uint32_t SSREQ3 = (1U << 6);  ///< Source Request
        constexpr uint32_t DSREQ3 = (1U << 7);  ///< Destination Request
        constexpr uint32_t SSREQ4 = (1U << 8);  ///< Source Request
        constexpr uint32_t DSREQ4 = (1U << 9);  ///< Destination Request
        constexpr uint32_t SSREQ5 = (1U << 10);  ///< Source Request
        constexpr uint32_t DSREQ5 = (1U << 11);  ///< Destination Request
        constexpr uint32_t SSREQ6 = (1U << 12);  ///< Source Request
        constexpr uint32_t DSREQ6 = (1U << 13);  ///< Destination Request
        constexpr uint32_t SSREQ7 = (1U << 14);  ///< Source Request
        constexpr uint32_t DSREQ7 = (1U << 15);  ///< Destination Request
    }

    /// CREQ Register bits
    namespace creq_bits {
        constexpr uint32_t SCREQ0 = (1U << 0);  ///< Source Chunk Request
        constexpr uint32_t DCREQ0 = (1U << 1);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ1 = (1U << 2);  ///< Source Chunk Request
        constexpr uint32_t DCREQ1 = (1U << 3);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ2 = (1U << 4);  ///< Source Chunk Request
        constexpr uint32_t DCREQ2 = (1U << 5);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ3 = (1U << 6);  ///< Source Chunk Request
        constexpr uint32_t DCREQ3 = (1U << 7);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ4 = (1U << 8);  ///< Source Chunk Request
        constexpr uint32_t DCREQ4 = (1U << 9);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ5 = (1U << 10);  ///< Source Chunk Request
        constexpr uint32_t DCREQ5 = (1U << 11);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ6 = (1U << 12);  ///< Source Chunk Request
        constexpr uint32_t DCREQ6 = (1U << 13);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ7 = (1U << 14);  ///< Source Chunk Request
        constexpr uint32_t DCREQ7 = (1U << 15);  ///< Destination Chunk Request
    }

    /// LAST Register bits
    namespace last_bits {
        constexpr uint32_t SLAST0 = (1U << 0);  ///< Source Last
        constexpr uint32_t DLAST0 = (1U << 1);  ///< Destination Last
        constexpr uint32_t SLAST1 = (1U << 2);  ///< Source Last
        constexpr uint32_t DLAST1 = (1U << 3);  ///< Destination Last
        constexpr uint32_t SLAST2 = (1U << 4);  ///< Source Last
        constexpr uint32_t DLAST2 = (1U << 5);  ///< Destination Last
        constexpr uint32_t SLAST3 = (1U << 6);  ///< Source Last
        constexpr uint32_t DLAST3 = (1U << 7);  ///< Destination Last
        constexpr uint32_t SLAST4 = (1U << 8);  ///< Source Last
        constexpr uint32_t DLAST4 = (1U << 9);  ///< Destination Last
        constexpr uint32_t SLAST5 = (1U << 10);  ///< Source Last
        constexpr uint32_t DLAST5 = (1U << 11);  ///< Destination Last
        constexpr uint32_t SLAST6 = (1U << 12);  ///< Source Last
        constexpr uint32_t DLAST6 = (1U << 13);  ///< Destination Last
        constexpr uint32_t SLAST7 = (1U << 14);  ///< Source Last
        constexpr uint32_t DLAST7 = (1U << 15);  ///< Destination Last
    }

    /// EBCIER Register bits
    namespace ebcier_bits {
        constexpr uint32_t BTC0 = (1U << 0);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC1 = (1U << 1);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC2 = (1U << 2);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC3 = (1U << 3);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC4 = (1U << 4);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC5 = (1U << 5);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC6 = (1U << 6);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC7 = (1U << 7);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC0 = (1U << 8);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC1 = (1U << 9);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC2 = (1U << 10);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC3 = (1U << 11);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC4 = (1U << 12);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC5 = (1U << 13);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC6 = (1U << 14);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC7 = (1U << 15);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t ERR0 = (1U << 16);  ///< Access Error [7:0]
        constexpr uint32_t ERR1 = (1U << 17);  ///< Access Error [7:0]
        constexpr uint32_t ERR2 = (1U << 18);  ///< Access Error [7:0]
        constexpr uint32_t ERR3 = (1U << 19);  ///< Access Error [7:0]
        constexpr uint32_t ERR4 = (1U << 20);  ///< Access Error [7:0]
        constexpr uint32_t ERR5 = (1U << 21);  ///< Access Error [7:0]
        constexpr uint32_t ERR6 = (1U << 22);  ///< Access Error [7:0]
        constexpr uint32_t ERR7 = (1U << 23);  ///< Access Error [7:0]
        constexpr uint32_t DICERR0 = (1U << 24);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR1 = (1U << 25);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR2 = (1U << 26);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR3 = (1U << 27);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR4 = (1U << 28);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR5 = (1U << 29);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR6 = (1U << 30);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR7 = (1U << 31);  ///< Descriptor Integrity Check Error [7:0]
    }

    /// EBCIDR Register bits
    namespace ebcidr_bits {
        constexpr uint32_t BTC0 = (1U << 0);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC1 = (1U << 1);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC2 = (1U << 2);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC3 = (1U << 3);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC4 = (1U << 4);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC5 = (1U << 5);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC6 = (1U << 6);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC7 = (1U << 7);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC0 = (1U << 8);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC1 = (1U << 9);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC2 = (1U << 10);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC3 = (1U << 11);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC4 = (1U << 12);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC5 = (1U << 13);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC6 = (1U << 14);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC7 = (1U << 15);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t ERR0 = (1U << 16);  ///< Access Error [7:0]
        constexpr uint32_t ERR1 = (1U << 17);  ///< Access Error [7:0]
        constexpr uint32_t ERR2 = (1U << 18);  ///< Access Error [7:0]
        constexpr uint32_t ERR3 = (1U << 19);  ///< Access Error [7:0]
        constexpr uint32_t ERR4 = (1U << 20);  ///< Access Error [7:0]
        constexpr uint32_t ERR5 = (1U << 21);  ///< Access Error [7:0]
        constexpr uint32_t ERR6 = (1U << 22);  ///< Access Error [7:0]
        constexpr uint32_t ERR7 = (1U << 23);  ///< Access Error [7:0]
        constexpr uint32_t DICERR0 = (1U << 24);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR1 = (1U << 25);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR2 = (1U << 26);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR3 = (1U << 27);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR4 = (1U << 28);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR5 = (1U << 29);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR6 = (1U << 30);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR7 = (1U << 31);  ///< Descriptor Integrity Check Error [7:0]
    }

    /// EBCIMR Register bits
    namespace ebcimr_bits {
        constexpr uint32_t BTC0 = (1U << 0);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC1 = (1U << 1);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC2 = (1U << 2);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC3 = (1U << 3);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC4 = (1U << 4);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC5 = (1U << 5);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC6 = (1U << 6);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC7 = (1U << 7);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC0 = (1U << 8);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC1 = (1U << 9);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC2 = (1U << 10);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC3 = (1U << 11);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC4 = (1U << 12);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC5 = (1U << 13);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC6 = (1U << 14);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC7 = (1U << 15);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t ERR0 = (1U << 16);  ///< Access Error [7:0]
        constexpr uint32_t ERR1 = (1U << 17);  ///< Access Error [7:0]
        constexpr uint32_t ERR2 = (1U << 18);  ///< Access Error [7:0]
        constexpr uint32_t ERR3 = (1U << 19);  ///< Access Error [7:0]
        constexpr uint32_t ERR4 = (1U << 20);  ///< Access Error [7:0]
        constexpr uint32_t ERR5 = (1U << 21);  ///< Access Error [7:0]
        constexpr uint32_t ERR6 = (1U << 22);  ///< Access Error [7:0]
        constexpr uint32_t ERR7 = (1U << 23);  ///< Access Error [7:0]
        constexpr uint32_t DICERR0 = (1U << 24);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR1 = (1U << 25);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR2 = (1U << 26);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR3 = (1U << 27);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR4 = (1U << 28);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR5 = (1U << 29);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR6 = (1U << 30);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR7 = (1U << 31);  ///< Descriptor Integrity Check Error [7:0]
    }

    /// EBCISR Register bits
    namespace ebcisr_bits {
        constexpr uint32_t BTC0 = (1U << 0);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC1 = (1U << 1);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC2 = (1U << 2);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC3 = (1U << 3);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC4 = (1U << 4);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC5 = (1U << 5);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC6 = (1U << 6);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC7 = (1U << 7);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC0 = (1U << 8);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC1 = (1U << 9);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC2 = (1U << 10);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC3 = (1U << 11);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC4 = (1U << 12);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC5 = (1U << 13);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC6 = (1U << 14);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC7 = (1U << 15);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t ERR0 = (1U << 16);  ///< Access Error [7:0]
        constexpr uint32_t ERR1 = (1U << 17);  ///< Access Error [7:0]
        constexpr uint32_t ERR2 = (1U << 18);  ///< Access Error [7:0]
        constexpr uint32_t ERR3 = (1U << 19);  ///< Access Error [7:0]
        constexpr uint32_t ERR4 = (1U << 20);  ///< Access Error [7:0]
        constexpr uint32_t ERR5 = (1U << 21);  ///< Access Error [7:0]
        constexpr uint32_t ERR6 = (1U << 22);  ///< Access Error [7:0]
        constexpr uint32_t ERR7 = (1U << 23);  ///< Access Error [7:0]
        constexpr uint32_t DICERR0 = (1U << 24);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR1 = (1U << 25);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR2 = (1U << 26);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR3 = (1U << 27);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR4 = (1U << 28);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR5 = (1U << 29);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR6 = (1U << 30);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR7 = (1U << 31);  ///< Descriptor Integrity Check Error [7:0]
    }

    /// CHER Register bits
    namespace cher_bits {
        constexpr uint32_t ENA0 = (1U << 0);  ///< Enable [7:0]
        constexpr uint32_t ENA1 = (1U << 1);  ///< Enable [7:0]
        constexpr uint32_t ENA2 = (1U << 2);  ///< Enable [7:0]
        constexpr uint32_t ENA3 = (1U << 3);  ///< Enable [7:0]
        constexpr uint32_t ENA4 = (1U << 4);  ///< Enable [7:0]
        constexpr uint32_t ENA5 = (1U << 5);  ///< Enable [7:0]
        constexpr uint32_t ENA6 = (1U << 6);  ///< Enable [7:0]
        constexpr uint32_t ENA7 = (1U << 7);  ///< Enable [7:0]
        constexpr uint32_t SUSP0 = (1U << 8);  ///< Suspend [7:0]
        constexpr uint32_t SUSP1 = (1U << 9);  ///< Suspend [7:0]
        constexpr uint32_t SUSP2 = (1U << 10);  ///< Suspend [7:0]
        constexpr uint32_t SUSP3 = (1U << 11);  ///< Suspend [7:0]
        constexpr uint32_t SUSP4 = (1U << 12);  ///< Suspend [7:0]
        constexpr uint32_t SUSP5 = (1U << 13);  ///< Suspend [7:0]
        constexpr uint32_t SUSP6 = (1U << 14);  ///< Suspend [7:0]
        constexpr uint32_t SUSP7 = (1U << 15);  ///< Suspend [7:0]
        constexpr uint32_t KEEP0 = (1U << 24);  ///< Keep on [7:0]
        constexpr uint32_t KEEP1 = (1U << 25);  ///< Keep on [7:0]
        constexpr uint32_t KEEP2 = (1U << 26);  ///< Keep on [7:0]
        constexpr uint32_t KEEP3 = (1U << 27);  ///< Keep on [7:0]
        constexpr uint32_t KEEP4 = (1U << 28);  ///< Keep on [7:0]
        constexpr uint32_t KEEP5 = (1U << 29);  ///< Keep on [7:0]
        constexpr uint32_t KEEP6 = (1U << 30);  ///< Keep on [7:0]
        constexpr uint32_t KEEP7 = (1U << 31);  ///< Keep on [7:0]
    }

    /// CHDR Register bits
    namespace chdr_bits {
        constexpr uint32_t DIS0 = (1U << 0);  ///< Disable [7:0]
        constexpr uint32_t DIS1 = (1U << 1);  ///< Disable [7:0]
        constexpr uint32_t DIS2 = (1U << 2);  ///< Disable [7:0]
        constexpr uint32_t DIS3 = (1U << 3);  ///< Disable [7:0]
        constexpr uint32_t DIS4 = (1U << 4);  ///< Disable [7:0]
        constexpr uint32_t DIS5 = (1U << 5);  ///< Disable [7:0]
        constexpr uint32_t DIS6 = (1U << 6);  ///< Disable [7:0]
        constexpr uint32_t DIS7 = (1U << 7);  ///< Disable [7:0]
        constexpr uint32_t RES0 = (1U << 8);  ///< Resume [7:0]
        constexpr uint32_t RES1 = (1U << 9);  ///< Resume [7:0]
        constexpr uint32_t RES2 = (1U << 10);  ///< Resume [7:0]
        constexpr uint32_t RES3 = (1U << 11);  ///< Resume [7:0]
        constexpr uint32_t RES4 = (1U << 12);  ///< Resume [7:0]
        constexpr uint32_t RES5 = (1U << 13);  ///< Resume [7:0]
        constexpr uint32_t RES6 = (1U << 14);  ///< Resume [7:0]
        constexpr uint32_t RES7 = (1U << 15);  ///< Resume [7:0]
    }

    /// CHSR Register bits
    namespace chsr_bits {
        constexpr uint32_t ENA0 = (1U << 0);  ///< Enable [7:0]
        constexpr uint32_t ENA1 = (1U << 1);  ///< Enable [7:0]
        constexpr uint32_t ENA2 = (1U << 2);  ///< Enable [7:0]
        constexpr uint32_t ENA3 = (1U << 3);  ///< Enable [7:0]
        constexpr uint32_t ENA4 = (1U << 4);  ///< Enable [7:0]
        constexpr uint32_t ENA5 = (1U << 5);  ///< Enable [7:0]
        constexpr uint32_t ENA6 = (1U << 6);  ///< Enable [7:0]
        constexpr uint32_t ENA7 = (1U << 7);  ///< Enable [7:0]
        constexpr uint32_t SUSP0 = (1U << 8);  ///< Suspend [7:0]
        constexpr uint32_t SUSP1 = (1U << 9);  ///< Suspend [7:0]
        constexpr uint32_t SUSP2 = (1U << 10);  ///< Suspend [7:0]
        constexpr uint32_t SUSP3 = (1U << 11);  ///< Suspend [7:0]
        constexpr uint32_t SUSP4 = (1U << 12);  ///< Suspend [7:0]
        constexpr uint32_t SUSP5 = (1U << 13);  ///< Suspend [7:0]
        constexpr uint32_t SUSP6 = (1U << 14);  ///< Suspend [7:0]
        constexpr uint32_t SUSP7 = (1U << 15);  ///< Suspend [7:0]
        constexpr uint32_t EMPT0 = (1U << 16);  ///< Empty [7:0]
        constexpr uint32_t EMPT1 = (1U << 17);  ///< Empty [7:0]
        constexpr uint32_t EMPT2 = (1U << 18);  ///< Empty [7:0]
        constexpr uint32_t EMPT3 = (1U << 19);  ///< Empty [7:0]
        constexpr uint32_t EMPT4 = (1U << 20);  ///< Empty [7:0]
        constexpr uint32_t EMPT5 = (1U << 21);  ///< Empty [7:0]
        constexpr uint32_t EMPT6 = (1U << 22);  ///< Empty [7:0]
        constexpr uint32_t EMPT7 = (1U << 23);  ///< Empty [7:0]
        constexpr uint32_t STAL0 = (1U << 24);  ///< Stalled [7:0]
        constexpr uint32_t STAL1 = (1U << 25);  ///< Stalled [7:0]
        constexpr uint32_t STAL2 = (1U << 26);  ///< Stalled [7:0]
        constexpr uint32_t STAL3 = (1U << 27);  ///< Stalled [7:0]
        constexpr uint32_t STAL4 = (1U << 28);  ///< Stalled [7:0]
        constexpr uint32_t STAL5 = (1U << 29);  ///< Stalled [7:0]
        constexpr uint32_t STAL6 = (1U << 30);  ///< Stalled [7:0]
        constexpr uint32_t STAL7 = (1U << 31);  ///< Stalled [7:0]
    }

    /// SADDR0 Register bits
    namespace saddr0_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR0 Register bits
    namespace daddr0_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR0 Register bits
    namespace dscr0_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< The buffer transfer descriptor is fetched via AHB-Lite Interface 0
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA0 Register bits
    namespace ctrla0_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< DONE
    }

    /// CTRLB0 Register bits
    namespace ctrlb0_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (3 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< IEN
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG0 Register bits
    namespace cfg0_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP0 Register bits
    namespace spip0_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP0 Register bits
    namespace dpip0_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR1 Register bits
    namespace saddr1_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR1 Register bits
    namespace daddr1_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR1 Register bits
    namespace dscr1_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< The buffer transfer descriptor is fetched via AHB-Lite Interface 0
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA1 Register bits
    namespace ctrla1_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< DONE
    }

    /// CTRLB1 Register bits
    namespace ctrlb1_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (3 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< IEN
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG1 Register bits
    namespace cfg1_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP1 Register bits
    namespace spip1_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP1 Register bits
    namespace dpip1_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR2 Register bits
    namespace saddr2_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR2 Register bits
    namespace daddr2_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR2 Register bits
    namespace dscr2_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< The buffer transfer descriptor is fetched via AHB-Lite Interface 0
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA2 Register bits
    namespace ctrla2_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< DONE
    }

    /// CTRLB2 Register bits
    namespace ctrlb2_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (3 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< IEN
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG2 Register bits
    namespace cfg2_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP2 Register bits
    namespace spip2_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP2 Register bits
    namespace dpip2_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR3 Register bits
    namespace saddr3_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR3 Register bits
    namespace daddr3_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR3 Register bits
    namespace dscr3_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< The buffer transfer descriptor is fetched via AHB-Lite Interface 0
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA3 Register bits
    namespace ctrla3_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< DONE
    }

    /// CTRLB3 Register bits
    namespace ctrlb3_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (3 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< IEN
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG3 Register bits
    namespace cfg3_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP3 Register bits
    namespace spip3_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP3 Register bits
    namespace dpip3_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR4 Register bits
    namespace saddr4_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR4 Register bits
    namespace daddr4_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR4 Register bits
    namespace dscr4_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< The buffer transfer descriptor is fetched via AHB-Lite Interface 0
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA4 Register bits
    namespace ctrla4_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< DONE
    }

    /// CTRLB4 Register bits
    namespace ctrlb4_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (3 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< IEN
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG4 Register bits
    namespace cfg4_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP4 Register bits
    namespace spip4_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP4 Register bits
    namespace dpip4_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR5 Register bits
    namespace saddr5_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR5 Register bits
    namespace daddr5_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR5 Register bits
    namespace dscr5_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< The buffer transfer descriptor is fetched via AHB-Lite Interface 0
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA5 Register bits
    namespace ctrla5_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< DONE
    }

    /// CTRLB5 Register bits
    namespace ctrlb5_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (3 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< IEN
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG5 Register bits
    namespace cfg5_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP5 Register bits
    namespace spip5_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP5 Register bits
    namespace dpip5_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR6 Register bits
    namespace saddr6_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR6 Register bits
    namespace daddr6_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR6 Register bits
    namespace dscr6_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< The buffer transfer descriptor is fetched via AHB-Lite Interface 0
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA6 Register bits
    namespace ctrla6_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< DONE
    }

    /// CTRLB6 Register bits
    namespace ctrlb6_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (3 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< IEN
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG6 Register bits
    namespace cfg6_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP6 Register bits
    namespace spip6_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP6 Register bits
    namespace dpip6_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR7 Register bits
    namespace saddr7_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR7 Register bits
    namespace daddr7_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR7 Register bits
    namespace dscr7_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< The buffer transfer descriptor is fetched via AHB-Lite Interface 0
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA7 Register bits
    namespace ctrla7_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< DONE
    }

    /// CTRLB7 Register bits
    namespace ctrlb7_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (3 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< IEN
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG7 Register bits
    namespace cfg7_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP7 Register bits
    namespace spip7_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP7 Register bits
    namespace dpip7_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// AIC Peripheral
// ============================================================================

namespace aic {
    /// Base addresses
    constexpr uint32_t AIC_BASE = 0xFFFFF000;

    /// AIC Register structure
    struct Registers {
        volatile uint32_t SMR__;  ///< Offset: 0x00 - Source Mode Register (renamed from SMR__)
        volatile uint32_t SVR__;  ///< Offset: 0x80 - Source Vector Register (renamed from SVR__)
        volatile uint32_t IVR;  ///< Offset: 0x100 - Interrupt Vector Register
        volatile uint32_t FVR;  ///< Offset: 0x104 - FIQ Interrupt Vector Register
        volatile uint32_t ISR;  ///< Offset: 0x108 - Interrupt Status Register
        volatile uint32_t IPR;  ///< Offset: 0x10C - Interrupt Pending Register
        volatile uint32_t IMR;  ///< Offset: 0x110 - Interrupt Mask Register
        volatile uint32_t CISR;  ///< Offset: 0x114 - Core Interrupt Status Register
        volatile uint32_t IECR;  ///< Offset: 0x120 - Interrupt Enable Command Register
        volatile uint32_t IDCR;  ///< Offset: 0x124 - Interrupt Disable Command Register
        volatile uint32_t ICCR;  ///< Offset: 0x128 - Interrupt Clear Command Register
        volatile uint32_t ISCR;  ///< Offset: 0x12C - Interrupt Set Command Register
        volatile uint32_t EOICR;  ///< Offset: 0x130 - End of Interrupt Command Register
        volatile uint32_t SPU;  ///< Offset: 0x134 - Spurious Interrupt Vector Register
        volatile uint32_t DCR;  ///< Offset: 0x138 - Debug Control Register
        volatile uint32_t FFER;  ///< Offset: 0x140 - Fast Forcing Enable Register
        volatile uint32_t FFDR;  ///< Offset: 0x144 - Fast Forcing Disable Register
        volatile uint32_t FFSR;  ///< Offset: 0x148 - Fast Forcing Status Register
        volatile uint32_t WPMR;  ///< Offset: 0x1E4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0x1E8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* AIC = reinterpret_cast<Registers*>(AIC_BASE);

    // Bit definitions
    /// SMR__ Register bits
    namespace smr___bits {
        constexpr uint32_t PRIOR = (3 << 0);  ///< Priority Level
        constexpr uint32_t SRCTYPE = (2 << 5);  ///< Interrupt Source Type
    }

    /// SVR__ Register bits
    namespace svr___bits {
        constexpr uint32_t VECTOR = (32 << 0);  ///< Source Vector
    }

    /// IVR Register bits
    namespace ivr_bits {
        constexpr uint32_t IRQV = (32 << 0);  ///< Interrupt Vector Register
    }

    /// FVR Register bits
    namespace fvr_bits {
        constexpr uint32_t FIQV = (32 << 0);  ///< FIQ Vector Register
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t IRQID = (5 << 0);  ///< Current Interrupt Identifier
    }

    /// IPR Register bits
    namespace ipr_bits {
        constexpr uint32_t FIQ = (1U << 0);  ///< Interrupt Pending
        constexpr uint32_t SYS = (1U << 1);  ///< Interrupt Pending
        constexpr uint32_t PID2 = (1U << 2);  ///< Interrupt Pending
        constexpr uint32_t PID3 = (1U << 3);  ///< Interrupt Pending
        constexpr uint32_t PID4 = (1U << 4);  ///< Interrupt Pending
        constexpr uint32_t PID5 = (1U << 5);  ///< Interrupt Pending
        constexpr uint32_t PID6 = (1U << 6);  ///< Interrupt Pending
        constexpr uint32_t PID7 = (1U << 7);  ///< Interrupt Pending
        constexpr uint32_t PID8 = (1U << 8);  ///< Interrupt Pending
        constexpr uint32_t PID9 = (1U << 9);  ///< Interrupt Pending
        constexpr uint32_t PID10 = (1U << 10);  ///< Interrupt Pending
        constexpr uint32_t PID11 = (1U << 11);  ///< Interrupt Pending
        constexpr uint32_t PID12 = (1U << 12);  ///< Interrupt Pending
        constexpr uint32_t PID13 = (1U << 13);  ///< Interrupt Pending
        constexpr uint32_t PID14 = (1U << 14);  ///< Interrupt Pending
        constexpr uint32_t PID15 = (1U << 15);  ///< Interrupt Pending
        constexpr uint32_t PID16 = (1U << 16);  ///< Interrupt Pending
        constexpr uint32_t PID17 = (1U << 17);  ///< Interrupt Pending
        constexpr uint32_t PID18 = (1U << 18);  ///< Interrupt Pending
        constexpr uint32_t PID19 = (1U << 19);  ///< Interrupt Pending
        constexpr uint32_t PID20 = (1U << 20);  ///< Interrupt Pending
        constexpr uint32_t PID21 = (1U << 21);  ///< Interrupt Pending
        constexpr uint32_t PID22 = (1U << 22);  ///< Interrupt Pending
        constexpr uint32_t PID23 = (1U << 23);  ///< Interrupt Pending
        constexpr uint32_t PID24 = (1U << 24);  ///< Interrupt Pending
        constexpr uint32_t PID25 = (1U << 25);  ///< Interrupt Pending
        constexpr uint32_t PID26 = (1U << 26);  ///< Interrupt Pending
        constexpr uint32_t PID27 = (1U << 27);  ///< Interrupt Pending
        constexpr uint32_t PID28 = (1U << 28);  ///< Interrupt Pending
        constexpr uint32_t PID29 = (1U << 29);  ///< Interrupt Pending
        constexpr uint32_t PID30 = (1U << 30);  ///< Interrupt Pending
        constexpr uint32_t PID31 = (1U << 31);  ///< Interrupt Pending
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t FIQ = (1U << 0);  ///< Interrupt Mask
        constexpr uint32_t SYS = (1U << 1);  ///< Interrupt Mask
        constexpr uint32_t PID2 = (1U << 2);  ///< Interrupt Mask
        constexpr uint32_t PID3 = (1U << 3);  ///< Interrupt Mask
        constexpr uint32_t PID4 = (1U << 4);  ///< Interrupt Mask
        constexpr uint32_t PID5 = (1U << 5);  ///< Interrupt Mask
        constexpr uint32_t PID6 = (1U << 6);  ///< Interrupt Mask
        constexpr uint32_t PID7 = (1U << 7);  ///< Interrupt Mask
        constexpr uint32_t PID8 = (1U << 8);  ///< Interrupt Mask
        constexpr uint32_t PID9 = (1U << 9);  ///< Interrupt Mask
        constexpr uint32_t PID10 = (1U << 10);  ///< Interrupt Mask
        constexpr uint32_t PID11 = (1U << 11);  ///< Interrupt Mask
        constexpr uint32_t PID12 = (1U << 12);  ///< Interrupt Mask
        constexpr uint32_t PID13 = (1U << 13);  ///< Interrupt Mask
        constexpr uint32_t PID14 = (1U << 14);  ///< Interrupt Mask
        constexpr uint32_t PID15 = (1U << 15);  ///< Interrupt Mask
        constexpr uint32_t PID16 = (1U << 16);  ///< Interrupt Mask
        constexpr uint32_t PID17 = (1U << 17);  ///< Interrupt Mask
        constexpr uint32_t PID18 = (1U << 18);  ///< Interrupt Mask
        constexpr uint32_t PID19 = (1U << 19);  ///< Interrupt Mask
        constexpr uint32_t PID20 = (1U << 20);  ///< Interrupt Mask
        constexpr uint32_t PID21 = (1U << 21);  ///< Interrupt Mask
        constexpr uint32_t PID22 = (1U << 22);  ///< Interrupt Mask
        constexpr uint32_t PID23 = (1U << 23);  ///< Interrupt Mask
        constexpr uint32_t PID24 = (1U << 24);  ///< Interrupt Mask
        constexpr uint32_t PID25 = (1U << 25);  ///< Interrupt Mask
        constexpr uint32_t PID26 = (1U << 26);  ///< Interrupt Mask
        constexpr uint32_t PID27 = (1U << 27);  ///< Interrupt Mask
        constexpr uint32_t PID28 = (1U << 28);  ///< Interrupt Mask
        constexpr uint32_t PID29 = (1U << 29);  ///< Interrupt Mask
        constexpr uint32_t PID30 = (1U << 30);  ///< Interrupt Mask
        constexpr uint32_t PID31 = (1U << 31);  ///< Interrupt Mask
    }

    /// CISR Register bits
    namespace cisr_bits {
        constexpr uint32_t NFIQ = (1U << 0);  ///< NFIQ Status
        constexpr uint32_t NIRQ = (1U << 1);  ///< NIRQ Status
    }

    /// IECR Register bits
    namespace iecr_bits {
        constexpr uint32_t FIQ = (1U << 0);  ///< Interrupt Enable
        constexpr uint32_t SYS = (1U << 1);  ///< Interrupt Enable
        constexpr uint32_t PID2 = (1U << 2);  ///< Interrupt Enable
        constexpr uint32_t PID3 = (1U << 3);  ///< Interrupt Enable
        constexpr uint32_t PID4 = (1U << 4);  ///< Interrupt Enable
        constexpr uint32_t PID5 = (1U << 5);  ///< Interrupt Enable
        constexpr uint32_t PID6 = (1U << 6);  ///< Interrupt Enable
        constexpr uint32_t PID7 = (1U << 7);  ///< Interrupt Enable
        constexpr uint32_t PID8 = (1U << 8);  ///< Interrupt Enable
        constexpr uint32_t PID9 = (1U << 9);  ///< Interrupt Enable
        constexpr uint32_t PID10 = (1U << 10);  ///< Interrupt Enable
        constexpr uint32_t PID11 = (1U << 11);  ///< Interrupt Enable
        constexpr uint32_t PID12 = (1U << 12);  ///< Interrupt Enable
        constexpr uint32_t PID13 = (1U << 13);  ///< Interrupt Enable
        constexpr uint32_t PID14 = (1U << 14);  ///< Interrupt Enable
        constexpr uint32_t PID15 = (1U << 15);  ///< Interrupt Enable
        constexpr uint32_t PID16 = (1U << 16);  ///< Interrupt Enable
        constexpr uint32_t PID17 = (1U << 17);  ///< Interrupt Enable
        constexpr uint32_t PID18 = (1U << 18);  ///< Interrupt Enable
        constexpr uint32_t PID19 = (1U << 19);  ///< Interrupt Enable
        constexpr uint32_t PID20 = (1U << 20);  ///< Interrupt Enable
        constexpr uint32_t PID21 = (1U << 21);  ///< Interrupt Enable
        constexpr uint32_t PID22 = (1U << 22);  ///< Interrupt Enable
        constexpr uint32_t PID23 = (1U << 23);  ///< Interrupt Enable
        constexpr uint32_t PID24 = (1U << 24);  ///< Interrupt Enable
        constexpr uint32_t PID25 = (1U << 25);  ///< Interrupt Enable
        constexpr uint32_t PID26 = (1U << 26);  ///< Interrupt Enable
        constexpr uint32_t PID27 = (1U << 27);  ///< Interrupt Enable
        constexpr uint32_t PID28 = (1U << 28);  ///< Interrupt Enable
        constexpr uint32_t PID29 = (1U << 29);  ///< Interrupt Enable
        constexpr uint32_t PID30 = (1U << 30);  ///< Interrupt Enable
        constexpr uint32_t PID31 = (1U << 31);  ///< Interrupt Enable
    }

    /// IDCR Register bits
    namespace idcr_bits {
        constexpr uint32_t FIQ = (1U << 0);  ///< Interrupt Disable
        constexpr uint32_t SYS = (1U << 1);  ///< Interrupt Disable
        constexpr uint32_t PID2 = (1U << 2);  ///< Interrupt Disable
        constexpr uint32_t PID3 = (1U << 3);  ///< Interrupt Disable
        constexpr uint32_t PID4 = (1U << 4);  ///< Interrupt Disable
        constexpr uint32_t PID5 = (1U << 5);  ///< Interrupt Disable
        constexpr uint32_t PID6 = (1U << 6);  ///< Interrupt Disable
        constexpr uint32_t PID7 = (1U << 7);  ///< Interrupt Disable
        constexpr uint32_t PID8 = (1U << 8);  ///< Interrupt Disable
        constexpr uint32_t PID9 = (1U << 9);  ///< Interrupt Disable
        constexpr uint32_t PID10 = (1U << 10);  ///< Interrupt Disable
        constexpr uint32_t PID11 = (1U << 11);  ///< Interrupt Disable
        constexpr uint32_t PID12 = (1U << 12);  ///< Interrupt Disable
        constexpr uint32_t PID13 = (1U << 13);  ///< Interrupt Disable
        constexpr uint32_t PID14 = (1U << 14);  ///< Interrupt Disable
        constexpr uint32_t PID15 = (1U << 15);  ///< Interrupt Disable
        constexpr uint32_t PID16 = (1U << 16);  ///< Interrupt Disable
        constexpr uint32_t PID17 = (1U << 17);  ///< Interrupt Disable
        constexpr uint32_t PID18 = (1U << 18);  ///< Interrupt Disable
        constexpr uint32_t PID19 = (1U << 19);  ///< Interrupt Disable
        constexpr uint32_t PID20 = (1U << 20);  ///< Interrupt Disable
        constexpr uint32_t PID21 = (1U << 21);  ///< Interrupt Disable
        constexpr uint32_t PID22 = (1U << 22);  ///< Interrupt Disable
        constexpr uint32_t PID23 = (1U << 23);  ///< Interrupt Disable
        constexpr uint32_t PID24 = (1U << 24);  ///< Interrupt Disable
        constexpr uint32_t PID25 = (1U << 25);  ///< Interrupt Disable
        constexpr uint32_t PID26 = (1U << 26);  ///< Interrupt Disable
        constexpr uint32_t PID27 = (1U << 27);  ///< Interrupt Disable
        constexpr uint32_t PID28 = (1U << 28);  ///< Interrupt Disable
        constexpr uint32_t PID29 = (1U << 29);  ///< Interrupt Disable
        constexpr uint32_t PID30 = (1U << 30);  ///< Interrupt Disable
        constexpr uint32_t PID31 = (1U << 31);  ///< Interrupt Disable
    }

    /// ICCR Register bits
    namespace iccr_bits {
        constexpr uint32_t FIQ = (1U << 0);  ///< Interrupt Clear
        constexpr uint32_t SYS = (1U << 1);  ///< Interrupt Clear
        constexpr uint32_t PID2 = (1U << 2);  ///< Interrupt Clear
        constexpr uint32_t PID3 = (1U << 3);  ///< Interrupt Clear
        constexpr uint32_t PID4 = (1U << 4);  ///< Interrupt Clear
        constexpr uint32_t PID5 = (1U << 5);  ///< Interrupt Clear
        constexpr uint32_t PID6 = (1U << 6);  ///< Interrupt Clear
        constexpr uint32_t PID7 = (1U << 7);  ///< Interrupt Clear
        constexpr uint32_t PID8 = (1U << 8);  ///< Interrupt Clear
        constexpr uint32_t PID9 = (1U << 9);  ///< Interrupt Clear
        constexpr uint32_t PID10 = (1U << 10);  ///< Interrupt Clear
        constexpr uint32_t PID11 = (1U << 11);  ///< Interrupt Clear
        constexpr uint32_t PID12 = (1U << 12);  ///< Interrupt Clear
        constexpr uint32_t PID13 = (1U << 13);  ///< Interrupt Clear
        constexpr uint32_t PID14 = (1U << 14);  ///< Interrupt Clear
        constexpr uint32_t PID15 = (1U << 15);  ///< Interrupt Clear
        constexpr uint32_t PID16 = (1U << 16);  ///< Interrupt Clear
        constexpr uint32_t PID17 = (1U << 17);  ///< Interrupt Clear
        constexpr uint32_t PID18 = (1U << 18);  ///< Interrupt Clear
        constexpr uint32_t PID19 = (1U << 19);  ///< Interrupt Clear
        constexpr uint32_t PID20 = (1U << 20);  ///< Interrupt Clear
        constexpr uint32_t PID21 = (1U << 21);  ///< Interrupt Clear
        constexpr uint32_t PID22 = (1U << 22);  ///< Interrupt Clear
        constexpr uint32_t PID23 = (1U << 23);  ///< Interrupt Clear
        constexpr uint32_t PID24 = (1U << 24);  ///< Interrupt Clear
        constexpr uint32_t PID25 = (1U << 25);  ///< Interrupt Clear
        constexpr uint32_t PID26 = (1U << 26);  ///< Interrupt Clear
        constexpr uint32_t PID27 = (1U << 27);  ///< Interrupt Clear
        constexpr uint32_t PID28 = (1U << 28);  ///< Interrupt Clear
        constexpr uint32_t PID29 = (1U << 29);  ///< Interrupt Clear
        constexpr uint32_t PID30 = (1U << 30);  ///< Interrupt Clear
        constexpr uint32_t PID31 = (1U << 31);  ///< Interrupt Clear
    }

    /// ISCR Register bits
    namespace iscr_bits {
        constexpr uint32_t FIQ = (1U << 0);  ///< Interrupt Set
        constexpr uint32_t SYS = (1U << 1);  ///< Interrupt Set
        constexpr uint32_t PID2 = (1U << 2);  ///< Interrupt Set
        constexpr uint32_t PID3 = (1U << 3);  ///< Interrupt Set
        constexpr uint32_t PID4 = (1U << 4);  ///< Interrupt Set
        constexpr uint32_t PID5 = (1U << 5);  ///< Interrupt Set
        constexpr uint32_t PID6 = (1U << 6);  ///< Interrupt Set
        constexpr uint32_t PID7 = (1U << 7);  ///< Interrupt Set
        constexpr uint32_t PID8 = (1U << 8);  ///< Interrupt Set
        constexpr uint32_t PID9 = (1U << 9);  ///< Interrupt Set
        constexpr uint32_t PID10 = (1U << 10);  ///< Interrupt Set
        constexpr uint32_t PID11 = (1U << 11);  ///< Interrupt Set
        constexpr uint32_t PID12 = (1U << 12);  ///< Interrupt Set
        constexpr uint32_t PID13 = (1U << 13);  ///< Interrupt Set
        constexpr uint32_t PID14 = (1U << 14);  ///< Interrupt Set
        constexpr uint32_t PID15 = (1U << 15);  ///< Interrupt Set
        constexpr uint32_t PID16 = (1U << 16);  ///< Interrupt Set
        constexpr uint32_t PID17 = (1U << 17);  ///< Interrupt Set
        constexpr uint32_t PID18 = (1U << 18);  ///< Interrupt Set
        constexpr uint32_t PID19 = (1U << 19);  ///< Interrupt Set
        constexpr uint32_t PID20 = (1U << 20);  ///< Interrupt Set
        constexpr uint32_t PID21 = (1U << 21);  ///< Interrupt Set
        constexpr uint32_t PID22 = (1U << 22);  ///< Interrupt Set
        constexpr uint32_t PID23 = (1U << 23);  ///< Interrupt Set
        constexpr uint32_t PID24 = (1U << 24);  ///< Interrupt Set
        constexpr uint32_t PID25 = (1U << 25);  ///< Interrupt Set
        constexpr uint32_t PID26 = (1U << 26);  ///< Interrupt Set
        constexpr uint32_t PID27 = (1U << 27);  ///< Interrupt Set
        constexpr uint32_t PID28 = (1U << 28);  ///< Interrupt Set
        constexpr uint32_t PID29 = (1U << 29);  ///< Interrupt Set
        constexpr uint32_t PID30 = (1U << 30);  ///< Interrupt Set
        constexpr uint32_t PID31 = (1U << 31);  ///< Interrupt Set
    }

    /// SPU Register bits
    namespace spu_bits {
        constexpr uint32_t SIVR = (32 << 0);  ///< Spurious Interrupt Vector Register
    }

    /// DCR Register bits
    namespace dcr_bits {
        constexpr uint32_t PROT = (1U << 0);  ///< Protection Mode
        constexpr uint32_t GMSK = (1U << 1);  ///< General Mask
    }

    /// FFER Register bits
    namespace ffer_bits {
        constexpr uint32_t SYS = (1U << 1);  ///< Fast Forcing Enable
        constexpr uint32_t PID2 = (1U << 2);  ///< Fast Forcing Enable
        constexpr uint32_t PID3 = (1U << 3);  ///< Fast Forcing Enable
        constexpr uint32_t PID4 = (1U << 4);  ///< Fast Forcing Enable
        constexpr uint32_t PID5 = (1U << 5);  ///< Fast Forcing Enable
        constexpr uint32_t PID6 = (1U << 6);  ///< Fast Forcing Enable
        constexpr uint32_t PID7 = (1U << 7);  ///< Fast Forcing Enable
        constexpr uint32_t PID8 = (1U << 8);  ///< Fast Forcing Enable
        constexpr uint32_t PID9 = (1U << 9);  ///< Fast Forcing Enable
        constexpr uint32_t PID10 = (1U << 10);  ///< Fast Forcing Enable
        constexpr uint32_t PID11 = (1U << 11);  ///< Fast Forcing Enable
        constexpr uint32_t PID12 = (1U << 12);  ///< Fast Forcing Enable
        constexpr uint32_t PID13 = (1U << 13);  ///< Fast Forcing Enable
        constexpr uint32_t PID14 = (1U << 14);  ///< Fast Forcing Enable
        constexpr uint32_t PID15 = (1U << 15);  ///< Fast Forcing Enable
        constexpr uint32_t PID16 = (1U << 16);  ///< Fast Forcing Enable
        constexpr uint32_t PID17 = (1U << 17);  ///< Fast Forcing Enable
        constexpr uint32_t PID18 = (1U << 18);  ///< Fast Forcing Enable
        constexpr uint32_t PID19 = (1U << 19);  ///< Fast Forcing Enable
        constexpr uint32_t PID20 = (1U << 20);  ///< Fast Forcing Enable
        constexpr uint32_t PID21 = (1U << 21);  ///< Fast Forcing Enable
        constexpr uint32_t PID22 = (1U << 22);  ///< Fast Forcing Enable
        constexpr uint32_t PID23 = (1U << 23);  ///< Fast Forcing Enable
        constexpr uint32_t PID24 = (1U << 24);  ///< Fast Forcing Enable
        constexpr uint32_t PID25 = (1U << 25);  ///< Fast Forcing Enable
        constexpr uint32_t PID26 = (1U << 26);  ///< Fast Forcing Enable
        constexpr uint32_t PID27 = (1U << 27);  ///< Fast Forcing Enable
        constexpr uint32_t PID28 = (1U << 28);  ///< Fast Forcing Enable
        constexpr uint32_t PID29 = (1U << 29);  ///< Fast Forcing Enable
        constexpr uint32_t PID30 = (1U << 30);  ///< Fast Forcing Enable
        constexpr uint32_t PID31 = (1U << 31);  ///< Fast Forcing Enable
    }

    /// FFDR Register bits
    namespace ffdr_bits {
        constexpr uint32_t SYS = (1U << 1);  ///< Fast Forcing Disable
        constexpr uint32_t PID2 = (1U << 2);  ///< Fast Forcing Disable
        constexpr uint32_t PID3 = (1U << 3);  ///< Fast Forcing Disable
        constexpr uint32_t PID4 = (1U << 4);  ///< Fast Forcing Disable
        constexpr uint32_t PID5 = (1U << 5);  ///< Fast Forcing Disable
        constexpr uint32_t PID6 = (1U << 6);  ///< Fast Forcing Disable
        constexpr uint32_t PID7 = (1U << 7);  ///< Fast Forcing Disable
        constexpr uint32_t PID8 = (1U << 8);  ///< Fast Forcing Disable
        constexpr uint32_t PID9 = (1U << 9);  ///< Fast Forcing Disable
        constexpr uint32_t PID10 = (1U << 10);  ///< Fast Forcing Disable
        constexpr uint32_t PID11 = (1U << 11);  ///< Fast Forcing Disable
        constexpr uint32_t PID12 = (1U << 12);  ///< Fast Forcing Disable
        constexpr uint32_t PID13 = (1U << 13);  ///< Fast Forcing Disable
        constexpr uint32_t PID14 = (1U << 14);  ///< Fast Forcing Disable
        constexpr uint32_t PID15 = (1U << 15);  ///< Fast Forcing Disable
        constexpr uint32_t PID16 = (1U << 16);  ///< Fast Forcing Disable
        constexpr uint32_t PID17 = (1U << 17);  ///< Fast Forcing Disable
        constexpr uint32_t PID18 = (1U << 18);  ///< Fast Forcing Disable
        constexpr uint32_t PID19 = (1U << 19);  ///< Fast Forcing Disable
        constexpr uint32_t PID20 = (1U << 20);  ///< Fast Forcing Disable
        constexpr uint32_t PID21 = (1U << 21);  ///< Fast Forcing Disable
        constexpr uint32_t PID22 = (1U << 22);  ///< Fast Forcing Disable
        constexpr uint32_t PID23 = (1U << 23);  ///< Fast Forcing Disable
        constexpr uint32_t PID24 = (1U << 24);  ///< Fast Forcing Disable
        constexpr uint32_t PID25 = (1U << 25);  ///< Fast Forcing Disable
        constexpr uint32_t PID26 = (1U << 26);  ///< Fast Forcing Disable
        constexpr uint32_t PID27 = (1U << 27);  ///< Fast Forcing Disable
        constexpr uint32_t PID28 = (1U << 28);  ///< Fast Forcing Disable
        constexpr uint32_t PID29 = (1U << 29);  ///< Fast Forcing Disable
        constexpr uint32_t PID30 = (1U << 30);  ///< Fast Forcing Disable
        constexpr uint32_t PID31 = (1U << 31);  ///< Fast Forcing Disable
    }

    /// FFSR Register bits
    namespace ffsr_bits {
        constexpr uint32_t SYS = (1U << 1);  ///< Fast Forcing Status
        constexpr uint32_t PID2 = (1U << 2);  ///< Fast Forcing Status
        constexpr uint32_t PID3 = (1U << 3);  ///< Fast Forcing Status
        constexpr uint32_t PID4 = (1U << 4);  ///< Fast Forcing Status
        constexpr uint32_t PID5 = (1U << 5);  ///< Fast Forcing Status
        constexpr uint32_t PID6 = (1U << 6);  ///< Fast Forcing Status
        constexpr uint32_t PID7 = (1U << 7);  ///< Fast Forcing Status
        constexpr uint32_t PID8 = (1U << 8);  ///< Fast Forcing Status
        constexpr uint32_t PID9 = (1U << 9);  ///< Fast Forcing Status
        constexpr uint32_t PID10 = (1U << 10);  ///< Fast Forcing Status
        constexpr uint32_t PID11 = (1U << 11);  ///< Fast Forcing Status
        constexpr uint32_t PID12 = (1U << 12);  ///< Fast Forcing Status
        constexpr uint32_t PID13 = (1U << 13);  ///< Fast Forcing Status
        constexpr uint32_t PID14 = (1U << 14);  ///< Fast Forcing Status
        constexpr uint32_t PID15 = (1U << 15);  ///< Fast Forcing Status
        constexpr uint32_t PID16 = (1U << 16);  ///< Fast Forcing Status
        constexpr uint32_t PID17 = (1U << 17);  ///< Fast Forcing Status
        constexpr uint32_t PID18 = (1U << 18);  ///< Fast Forcing Status
        constexpr uint32_t PID19 = (1U << 19);  ///< Fast Forcing Status
        constexpr uint32_t PID20 = (1U << 20);  ///< Fast Forcing Status
        constexpr uint32_t PID21 = (1U << 21);  ///< Fast Forcing Status
        constexpr uint32_t PID22 = (1U << 22);  ///< Fast Forcing Status
        constexpr uint32_t PID23 = (1U << 23);  ///< Fast Forcing Status
        constexpr uint32_t PID24 = (1U << 24);  ///< Fast Forcing Status
        constexpr uint32_t PID25 = (1U << 25);  ///< Fast Forcing Status
        constexpr uint32_t PID26 = (1U << 26);  ///< Fast Forcing Status
        constexpr uint32_t PID27 = (1U << 27);  ///< Fast Forcing Status
        constexpr uint32_t PID28 = (1U << 28);  ///< Fast Forcing Status
        constexpr uint32_t PID29 = (1U << 29);  ///< Fast Forcing Status
        constexpr uint32_t PID30 = (1U << 30);  ///< Fast Forcing Status
        constexpr uint32_t PID31 = (1U << 31);  ///< Fast Forcing Status
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// DBGU Peripheral
// ============================================================================

namespace dbgu {
    /// Base addresses
    constexpr uint32_t DBGU_BASE = 0xFFFFF200;

    /// DBGU Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t IER;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t SR;  ///< Offset: 0x14 - Status Register
        volatile uint32_t RHR;  ///< Offset: 0x18 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x1C - Transmit Holding Register
        volatile uint32_t BRGR;  ///< Offset: 0x20 - Baud Rate Generator Register
        volatile uint32_t CIDR;  ///< Offset: 0x40 - Chip ID Register
        volatile uint32_t EXID;  ///< Offset: 0x44 - Chip ID Extension Register
        volatile uint32_t FNR;  ///< Offset: 0x48 - Force NTRST Register
    };

    /// Peripheral instances
    inline Registers* DBGU = reinterpret_cast<Registers*>(DBGU_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RSTRX = (1U << 2);  ///< Reset Receiver
        constexpr uint32_t RSTTX = (1U << 3);  ///< Reset Transmitter
        constexpr uint32_t RXEN = (1U << 4);  ///< Receiver Enable
        constexpr uint32_t RXDIS = (1U << 5);  ///< Receiver Disable
        constexpr uint32_t TXEN = (1U << 6);  ///< Transmitter Enable
        constexpr uint32_t TXDIS = (1U << 7);  ///< Transmitter Disable
        constexpr uint32_t RSTSTA = (1U << 8);  ///< Reset Status Bits
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t PAR = (3 << 9);  ///< Parity Type
        constexpr uint32_t CHMODE = (2 << 14);  ///< Channel Mode
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Enable RXRDY Interrupt
        constexpr uint32_t TXRDY = (1U << 1);  ///< Enable TXRDY Interrupt
        constexpr uint32_t OVRE = (1U << 5);  ///< Enable Overrun Error Interrupt
        constexpr uint32_t FRAME = (1U << 6);  ///< Enable Framing Error Interrupt
        constexpr uint32_t PARE = (1U << 7);  ///< Enable Parity Error Interrupt
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Enable TXEMPTY Interrupt
        constexpr uint32_t COMMTX = (1U << 30);  ///< Enable COMMTX (from ARM) Interrupt
        constexpr uint32_t COMMRX = (1U << 31);  ///< Enable COMMRX (from ARM) Interrupt
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Disable RXRDY Interrupt
        constexpr uint32_t TXRDY = (1U << 1);  ///< Disable TXRDY Interrupt
        constexpr uint32_t OVRE = (1U << 5);  ///< Disable Overrun Error Interrupt
        constexpr uint32_t FRAME = (1U << 6);  ///< Disable Framing Error Interrupt
        constexpr uint32_t PARE = (1U << 7);  ///< Disable Parity Error Interrupt
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Disable TXEMPTY Interrupt
        constexpr uint32_t COMMTX = (1U << 30);  ///< Disable COMMTX (from ARM) Interrupt
        constexpr uint32_t COMMRX = (1U << 31);  ///< Disable COMMRX (from ARM) Interrupt
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Mask RXRDY Interrupt
        constexpr uint32_t TXRDY = (1U << 1);  ///< Disable TXRDY Interrupt
        constexpr uint32_t OVRE = (1U << 5);  ///< Mask Overrun Error Interrupt
        constexpr uint32_t FRAME = (1U << 6);  ///< Mask Framing Error Interrupt
        constexpr uint32_t PARE = (1U << 7);  ///< Mask Parity Error Interrupt
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Mask TXEMPTY Interrupt
        constexpr uint32_t COMMTX = (1U << 30);  ///< Mask COMMTX Interrupt
        constexpr uint32_t COMMRX = (1U << 31);  ///< Mask COMMRX Interrupt
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t COMMTX = (1U << 30);  ///< Debug Communication Channel Write Status
        constexpr uint32_t COMMRX = (1U << 31);  ///< Debug Communication Channel Read Status
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RXCHR = (8 << 0);  ///< Received Character
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TXCHR = (8 << 0);  ///< Character to be Transmitted
    }

    /// BRGR Register bits
    namespace brgr_bits {
        constexpr uint32_t CD = (16 << 0);  ///< Clock Divisor
    }

    /// CIDR Register bits
    namespace cidr_bits {
        constexpr uint32_t VERSION = (5 << 0);  ///< Version of the Device
        constexpr uint32_t EPROC = (3 << 5);  ///< Embedded Processor
        constexpr uint32_t NVPSIZ = (4 << 8);  ///< Nonvolatile Program Memory Size
        constexpr uint32_t NVPSIZ2 = (4 << 12);  ///< None
        constexpr uint32_t SRAMSIZ = (4 << 16);  ///< Internal SRAM Size
        constexpr uint32_t ARCH = (8 << 20);  ///< Architecture Identifier
        constexpr uint32_t NVPTYP = (3 << 28);  ///< Nonvolatile Program Memory Type
        constexpr uint32_t EXT = (1U << 31);  ///< Extension Flag
    }

    /// EXID Register bits
    namespace exid_bits {
        constexpr uint32_t EXID = (32 << 0);  ///< Chip ID Extension
    }

    /// FNR Register bits
    namespace fnr_bits {
        constexpr uint32_t FNTRST = (1U << 0);  ///< Force NTRST
    }

}

// ============================================================================
// PIOA Peripheral
// ============================================================================

namespace pioa {
    /// Base addresses
    constexpr uint32_t PIOA_BASE = 0xFFFFF400;

    /// PIOA Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DELAYR;  ///< Offset: 0x110 - IO Delay Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x114 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x118 - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOA = reinterpret_cast<Registers*>(PIOA_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DELAYR Register bits
    namespace delayr_bits {
        constexpr uint32_t Delay0 = (4 << 0);  ///< Delay0
        constexpr uint32_t Delay1 = (4 << 4);  ///< Delay1
        constexpr uint32_t Delay2 = (4 << 8);  ///< Delay2
        constexpr uint32_t Delay3 = (4 << 12);  ///< Delay3
        constexpr uint32_t Delay4 = (4 << 16);  ///< Delay4
        constexpr uint32_t Delay5 = (4 << 20);  ///< Delay5
        constexpr uint32_t Delay6 = (4 << 24);  ///< Delay6
        constexpr uint32_t Delay7 = (4 << 28);  ///< Delay7
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PIOB Peripheral
// ============================================================================

namespace piob {
    /// Base addresses
    constexpr uint32_t PIOB_BASE = 0xFFFFF600;

    /// PIOB Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DELAYR;  ///< Offset: 0x110 - IO Delay Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x114 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x118 - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOB = reinterpret_cast<Registers*>(PIOB_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DELAYR Register bits
    namespace delayr_bits {
        constexpr uint32_t Delay0 = (4 << 0);  ///< Delay0
        constexpr uint32_t Delay1 = (4 << 4);  ///< Delay1
        constexpr uint32_t Delay2 = (4 << 8);  ///< Delay2
        constexpr uint32_t Delay3 = (4 << 12);  ///< Delay3
        constexpr uint32_t Delay4 = (4 << 16);  ///< Delay4
        constexpr uint32_t Delay5 = (4 << 20);  ///< Delay5
        constexpr uint32_t Delay6 = (4 << 24);  ///< Delay6
        constexpr uint32_t Delay7 = (4 << 28);  ///< Delay7
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PIOC Peripheral
// ============================================================================

namespace pioc {
    /// Base addresses
    constexpr uint32_t PIOC_BASE = 0xFFFFF800;

    /// PIOC Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DELAYR;  ///< Offset: 0x110 - IO Delay Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x114 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x118 - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOC = reinterpret_cast<Registers*>(PIOC_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DELAYR Register bits
    namespace delayr_bits {
        constexpr uint32_t Delay0 = (4 << 0);  ///< Delay0
        constexpr uint32_t Delay1 = (4 << 4);  ///< Delay1
        constexpr uint32_t Delay2 = (4 << 8);  ///< Delay2
        constexpr uint32_t Delay3 = (4 << 12);  ///< Delay3
        constexpr uint32_t Delay4 = (4 << 16);  ///< Delay4
        constexpr uint32_t Delay5 = (4 << 20);  ///< Delay5
        constexpr uint32_t Delay6 = (4 << 24);  ///< Delay6
        constexpr uint32_t Delay7 = (4 << 28);  ///< Delay7
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PIOD Peripheral
// ============================================================================

namespace piod {
    /// Base addresses
    constexpr uint32_t PIOD_BASE = 0xFFFFFA00;

    /// PIOD Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DELAYR;  ///< Offset: 0x110 - IO Delay Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x114 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x118 - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOD = reinterpret_cast<Registers*>(PIOD_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DELAYR Register bits
    namespace delayr_bits {
        constexpr uint32_t Delay0 = (4 << 0);  ///< Delay0
        constexpr uint32_t Delay1 = (4 << 4);  ///< Delay1
        constexpr uint32_t Delay2 = (4 << 8);  ///< Delay2
        constexpr uint32_t Delay3 = (4 << 12);  ///< Delay3
        constexpr uint32_t Delay4 = (4 << 16);  ///< Delay4
        constexpr uint32_t Delay5 = (4 << 20);  ///< Delay5
        constexpr uint32_t Delay6 = (4 << 24);  ///< Delay6
        constexpr uint32_t Delay7 = (4 << 28);  ///< Delay7
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PMC Peripheral
// ============================================================================

namespace pmc {
    /// Base addresses
    constexpr uint32_t PMC_BASE = 0xFFFFFC00;

    /// PMC Register structure
    struct Registers {
        volatile uint32_t PMC_SCER;  ///< Offset: 0x00 - System Clock Enable Register
        volatile uint32_t PMC_SCDR;  ///< Offset: 0x04 - System Clock Disable Register
        volatile uint32_t PMC_SCSR;  ///< Offset: 0x08 - System Clock Status Register
        volatile uint32_t PMC_PCER;  ///< Offset: 0x10 - Peripheral Clock Enable Register
        volatile uint32_t PMC_PCDR;  ///< Offset: 0x14 - Peripheral Clock Disable Register
        volatile uint32_t PMC_PCSR;  ///< Offset: 0x18 - Peripheral Clock Status Register
        volatile uint32_t CKGR_MOR;  ///< Offset: 0x20 - Main Oscillator Register
        volatile uint32_t CKGR_MCFR;  ///< Offset: 0x24 - Main Clock Frequency Register
        volatile uint32_t CKGR_PLLAR;  ///< Offset: 0x28 - PLLA Register
        volatile uint32_t CKGR_PLLBR;  ///< Offset: 0x2C - PLLB Register
        volatile uint32_t PMC_MCKR;  ///< Offset: 0x30 - Master Clock Register
        volatile uint32_t PMC_USB;  ///< Offset: 0x38 - USB Clock Register
        volatile uint32_t PMC_PCK__;  ///< Offset: 0x40 - Programmable Clock 0 Register (renamed from PMC_PCK__)
        volatile uint32_t PMC_IER;  ///< Offset: 0x60 - Interrupt Enable Register
        volatile uint32_t PMC_IDR;  ///< Offset: 0x64 - Interrupt Disable Register
        volatile uint32_t PMC_SR;  ///< Offset: 0x68 - Status Register
        volatile uint32_t PMC_IMR;  ///< Offset: 0x6C - Interrupt Mask Register
        volatile uint32_t PMC_PLLICPR;  ///< Offset: 0x80 - PLL Charge Pump Current Register
        volatile uint32_t PMC_WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t PMC_WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t PMC_PCR;  ///< Offset: 0x10C - Peripheral Control Register
    };

    /// Peripheral instances
    inline Registers* PMC = reinterpret_cast<Registers*>(PMC_BASE);

    // Bit definitions
    /// PMC_SCER Register bits
    namespace pmc_scer_bits {
        constexpr uint32_t DDRCK = (1U << 2);  ///< DDR Clock Enable
        constexpr uint32_t LCDCK = (1U << 3);  ///< LCD Clock Enable
        constexpr uint32_t UHP = (1U << 6);  ///< USB Host OHCI Clocks Enable
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Clock Enable
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Enable
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Enable
    }

    /// PMC_SCDR Register bits
    namespace pmc_scdr_bits {
        constexpr uint32_t PCK = (1U << 0);  ///< Processor Clock Disable
        constexpr uint32_t DDRCK = (1U << 2);  ///< DDR Clock Disable
        constexpr uint32_t LCDCK = (1U << 3);  ///< LCD Clock Disable
        constexpr uint32_t UHP = (1U << 6);  ///< USB Host OHCI Clock Disable
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Clock Enable
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Disable
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Disable
    }

    /// PMC_SCSR Register bits
    namespace pmc_scsr_bits {
        constexpr uint32_t PCK = (1U << 0);  ///< Processor Clock Status
        constexpr uint32_t DDRCK = (1U << 2);  ///< DDR Clock Status
        constexpr uint32_t LCDCK = (1U << 3);  ///< LCD Clock Status
        constexpr uint32_t UHP = (1U << 6);  ///< USB Host Port Clock Status
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Port Clock Status
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Status
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Status
    }

    /// PMC_PCER Register bits
    namespace pmc_pcer_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Enable
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Enable
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Enable
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Enable
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Enable
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Enable
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Enable
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Enable
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Enable
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Enable
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Enable
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Enable
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Enable
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Enable
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Enable
        constexpr uint32_t PID17 = (1U << 17);  ///< Peripheral Clock 17 Enable
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Enable
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Enable
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Enable
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Enable
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Enable
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Enable
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Enable
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Enable
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Enable
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Enable
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Enable
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Enable
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Enable
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Enable
    }

    /// PMC_PCDR Register bits
    namespace pmc_pcdr_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Disable
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Disable
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Disable
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Disable
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Disable
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Disable
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Disable
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Disable
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Disable
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Disable
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Disable
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Disable
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Disable
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Disable
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Disable
        constexpr uint32_t PID17 = (1U << 17);  ///< Peripheral Clock 17 Disable
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Disable
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Disable
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Disable
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Disable
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Disable
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Disable
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Disable
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Disable
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Disable
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Disable
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Disable
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Disable
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Disable
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Disable
    }

    /// PMC_PCSR Register bits
    namespace pmc_pcsr_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Status
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Status
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Status
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Status
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Status
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Status
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Status
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Status
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Status
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Status
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Status
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Status
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Status
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Status
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Status
        constexpr uint32_t PID17 = (1U << 17);  ///< Peripheral Clock 17 Status
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Status
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Status
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Status
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Status
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Status
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Status
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Status
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Status
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Status
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Status
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Status
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Status
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Status
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Status
    }

    /// CKGR_MOR Register bits
    namespace ckgr_mor_bits {
        constexpr uint32_t MOSCXTEN = (1U << 0);  ///< Main Crystal Oscillator Enable
        constexpr uint32_t MOSCXTBY = (1U << 1);  ///< Main Crystal Oscillator Bypass
        constexpr uint32_t MOSCRCEN = (1U << 3);  ///< Main On-Chip RC Oscillator Enable
        constexpr uint32_t MOSCXTST = (8 << 8);  ///< Main Crystal Oscillator Start-up Time
        constexpr uint32_t KEY = (8 << 16);  ///< Password
        constexpr uint32_t MOSCSEL = (1U << 24);  ///< Main Oscillator Selection
        constexpr uint32_t CFDEN = (1U << 25);  ///< Clock Failure Detector Enable
    }

    /// CKGR_MCFR Register bits
    namespace ckgr_mcfr_bits {
        constexpr uint32_t MAINF = (16 << 0);  ///< Main Clock Frequency
        constexpr uint32_t MAINFRDY = (1U << 16);  ///< Main Clock Ready
        constexpr uint32_t RCMEAS = (1U << 20);  ///< RC Measure
    }

    /// CKGR_PLLAR Register bits
    namespace ckgr_pllar_bits {
        constexpr uint32_t DIVA = (8 << 0);  ///< Divider A
        constexpr uint32_t PLLACOUNT = (6 << 8);  ///< PLLA Counter
        constexpr uint32_t OUTA = (2 << 14);  ///< PLLA Clock Frequency Range
        constexpr uint32_t MULA = (11 << 16);  ///< PLLA Multiplier
        constexpr uint32_t STUCKTO1 = (1U << 29);  ///< STUCKTO1
    }

    /// CKGR_PLLBR Register bits
    namespace ckgr_pllbr_bits {
        constexpr uint32_t DIVB = (8 << 0);  ///< Divider B
        constexpr uint32_t PLLBCOUNT = (6 << 8);  ///< PLLB Counter
        constexpr uint32_t OUTB = (2 << 14);  ///< PLLB Clock Frequency Range
        constexpr uint32_t MULB = (11 << 16);  ///< PLLB Multiplier
    }

    /// PMC_MCKR Register bits
    namespace pmc_mckr_bits {
        constexpr uint32_t CSS = (2 << 0);  ///< Master/Processor Clock Source Selection
        constexpr uint32_t PRES = (3 << 4);  ///< Master/Processor Clock Prescaler
        constexpr uint32_t MDIV = (2 << 8);  ///< Master Clock Division
        constexpr uint32_t PLLADIV2 = (1U << 12);  ///< PLLA divisor by 2
    }

    /// PMC_USB Register bits
    namespace pmc_usb_bits {
        constexpr uint32_t USBS = (1U << 0);  ///< USB OHCI Input Clock Selection
        constexpr uint32_t USBDIV = (4 << 8);  ///< Divider for USB Clock
    }

    /// PMC_PCK__ Register bits
    namespace pmc_pck___bits {
        constexpr uint32_t CSS = (3 << 0);  ///< Master Clock Source Selection
        constexpr uint32_t PRES = (3 << 4);  ///< Programmable Clock Prescaler
    }

    /// PMC_IER Register bits
    namespace pmc_ier_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Enable
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Enable
        constexpr uint32_t LOCKB = (1U << 2);  ///< PLLB Lock Interrupt Enable
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Enable
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Enable
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Enable
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Enable
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Enable
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Enable
    }

    /// PMC_IDR Register bits
    namespace pmc_idr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Disable
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Disable
        constexpr uint32_t LOCKB = (1U << 2);  ///< PLLB Lock Interrupt Disable
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Disable
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Disable
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Disable
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Disable
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Disable
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Disable
    }

    /// PMC_SR Register bits
    namespace pmc_sr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main XTAL Oscillator Status
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Status
        constexpr uint32_t LOCKB = (1U << 2);  ///< PLLB Lock Status
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Status
        constexpr uint32_t OSCSELS = (1U << 7);  ///< Slow Clock Oscillator Selection
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready Status
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready Status
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Oscillator Status
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event
        constexpr uint32_t CFDS = (1U << 19);  ///< Clock Failure Detector Status
        constexpr uint32_t FOS = (1U << 20);  ///< Clock Failure Detector Fault Output Status
    }

    /// PMC_IMR Register bits
    namespace pmc_imr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Mask
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Mask
        constexpr uint32_t LOCKB = (1U << 2);  ///< PLLB Lock Interrupt Mask
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Mask
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Mask
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Mask
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Mask
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Mask
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Mask
    }

    /// PMC_PLLICPR Register bits
    namespace pmc_pllicpr_bits {
        constexpr uint32_t ICPLLA = (1U << 0);  ///< Charge Pump Current
    }

    /// PMC_WPMR Register bits
    namespace pmc_wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// PMC_WPSR Register bits
    namespace pmc_wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// PMC_PCR Register bits
    namespace pmc_pcr_bits {
        constexpr uint32_t PID = (6 << 0);  ///< Peripheral ID
        constexpr uint32_t CMD = (1U << 12);  ///< Command
        constexpr uint32_t DIV = (2 << 16);  ///< Divisor value
        constexpr uint32_t EN = (1U << 28);  ///< Enable
    }

}

// ============================================================================
// RSTC Peripheral
// ============================================================================

namespace rstc {
    /// Base addresses
    constexpr uint32_t RSTC_BASE = 0xFFFFFE00;

    /// RSTC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t SR;  ///< Offset: 0x04 - Status Register
        volatile uint32_t MR;  ///< Offset: 0x08 - Mode Register
    };

    /// Peripheral instances
    inline Registers* RSTC = reinterpret_cast<Registers*>(RSTC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PROCRST = (1U << 0);  ///< Processor Reset
        constexpr uint32_t PERRST = (1U << 2);  ///< Peripheral Reset
        constexpr uint32_t EXTRST = (1U << 3);  ///< External Reset
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t URSTS = (1U << 0);  ///< User Reset Status
        constexpr uint32_t RSTTYP = (3 << 8);  ///< Reset Type
        constexpr uint32_t NRSTL = (1U << 16);  ///< NRST Pin Level
        constexpr uint32_t SRCMP = (1U << 17);  ///< Software Reset Command in Progress
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t ERSTL = (4 << 8);  ///< External Reset Length
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

}

// ============================================================================
// SHDWC Peripheral
// ============================================================================

namespace shdwc {
    /// Base addresses
    constexpr uint32_t SHDWC_BASE = 0xFFFFFE10;

    /// SHDWC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Shutdown Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Shutdown Mode Register
        volatile uint32_t SR;  ///< Offset: 0x08 - Shutdown Status Register
    };

    /// Peripheral instances
    inline Registers* SHDWC = reinterpret_cast<Registers*>(SHDWC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SHDW = (1U << 0);  ///< Shutdown Command
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t WKMODE0 = (2 << 0);  ///< Wake-up Mode 0
        constexpr uint32_t CPTWK0 = (4 << 4);  ///< Counter on Wake-up 0
        constexpr uint32_t RTCWKEN = (1U << 17);  ///< Real-time Clock Wake-up Enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t WAKEUP0 = (1U << 0);  ///< Wake-up 0 Status
        constexpr uint32_t RTCWK = (1U << 17);  ///< Real-time Clock Wake-up
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WDT_BASE = 0xFFFFFE40;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t SR;  ///< Offset: 0x08 - Status Register
    };

    /// Peripheral instances
    inline Registers* WDT = reinterpret_cast<Registers*>(WDT_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WDRSTT = (1U << 0);  ///< Watchdog Restart
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t WDV = (12 << 0);  ///< Watchdog Counter Value
        constexpr uint32_t WDFIEN = (1U << 12);  ///< Watchdog Fault Interrupt Enable
        constexpr uint32_t WDRSTEN = (1U << 13);  ///< Watchdog Reset Enable
        constexpr uint32_t WDRPROC = (1U << 14);  ///< Watchdog Reset Processor
        constexpr uint32_t WDDIS = (1U << 15);  ///< Watchdog Disable
        constexpr uint32_t WDD = (12 << 16);  ///< Watchdog Delta Value
        constexpr uint32_t WDDBGHLT = (1U << 28);  ///< Watchdog Debug Halt
        constexpr uint32_t WDIDLEHLT = (1U << 29);  ///< Watchdog Idle Halt
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t WDUNF = (1U << 0);  ///< Watchdog Underflow
        constexpr uint32_t WDERR = (1U << 1);  ///< Watchdog Error
    }

}

// ============================================================================
// SCKC Peripheral
// ============================================================================

namespace sckc {
    /// Base addresses
    constexpr uint32_t SCKC_BASE = 0xFFFFFE50;

    /// SCKC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Slow Clock Configuration Register
    };

    /// Peripheral instances
    inline Registers* SCKC = reinterpret_cast<Registers*>(SCKC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RCEN = (1U << 0);  ///< Internal 32 kHz RC Oscillator
        constexpr uint32_t OSC32EN = (1U << 1);  ///< 32,768 Hz Oscillator
        constexpr uint32_t OSC32BYP = (1U << 2);  ///< 32,768Hz Oscillator Bypass
        constexpr uint32_t OSCSEL = (1U << 3);  ///< Slow Clock Selector
    }

}

// ============================================================================
// BSC Peripheral
// ============================================================================

namespace bsc {
    /// Base addresses
    constexpr uint32_t BSC_BASE = 0xFFFFFE54;

    /// BSC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Boot Sequence Configuration Register
    };

    /// Peripheral instances
    inline Registers* BSC = reinterpret_cast<Registers*>(BSC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t BOOT = (8 << 0);  ///< Boot media sequence
        constexpr uint32_t BOOTKEY = (16 << 16);  ///< valid key to write BSC_CR register; it needs to be written at the same time as the BOOT field.
    }

}

// ============================================================================
// GPBR Peripheral
// ============================================================================

namespace gpbr {
    /// Base addresses
    constexpr uint32_t GPBR_BASE = 0xFFFFFE60;

    /// GPBR Register structure
    struct Registers {
        volatile uint32_t GPBR__;  ///< Offset: 0x00 - General Purpose Backup Register (renamed from GPBR__)
    };

    /// Peripheral instances
    inline Registers* GPBR = reinterpret_cast<Registers*>(GPBR_BASE);

    // Bit definitions
    /// GPBR__ Register bits
    namespace gpbr___bits {
        constexpr uint32_t GPBR_VALUE = (32 << 0);  ///< Value of GPBR x
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0xFFFFFEB0;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t TIMR;  ///< Offset: 0x08 - Time Register
        volatile uint32_t CALR;  ///< Offset: 0x0C - Calendar Register
        volatile uint32_t TIMALR;  ///< Offset: 0x10 - Time Alarm Register
        volatile uint32_t CALALR;  ///< Offset: 0x14 - Calendar Alarm Register
        volatile uint32_t SR;  ///< Offset: 0x18 - Status Register
        volatile uint32_t SCCR;  ///< Offset: 0x1C - Status Clear Command Register
        volatile uint32_t IER;  ///< Offset: 0x20 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x24 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x28 - Interrupt Mask Register
        volatile uint32_t VER;  ///< Offset: 0x2C - Valid Entry Register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t UPDTIM = (1U << 0);  ///< Update Request Time Register
        constexpr uint32_t UPDCAL = (1U << 1);  ///< Update Request Calendar Register
        constexpr uint32_t TIMEVSEL = (2 << 8);  ///< Time Event Selection
        constexpr uint32_t CALEVSEL = (2 << 16);  ///< Calendar Event Selection
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t HRMOD = (1U << 0);  ///< 12-/24-hour Mode
    }

    /// TIMR Register bits
    namespace timr_bits {
        constexpr uint32_t SEC = (7 << 0);  ///< Current Second
        constexpr uint32_t MIN = (7 << 8);  ///< Current Minute
        constexpr uint32_t HOUR = (6 << 16);  ///< Current Hour
        constexpr uint32_t AMPM = (1U << 22);  ///< Ante Meridiem Post Meridiem Indicator
    }

    /// CALR Register bits
    namespace calr_bits {
        constexpr uint32_t CENT = (7 << 0);  ///< Current Century
        constexpr uint32_t YEAR = (8 << 8);  ///< Current Year
        constexpr uint32_t MONTH = (5 << 16);  ///< Current Month
        constexpr uint32_t DAY = (3 << 21);  ///< Current Day in Current Week
        constexpr uint32_t DATE = (6 << 24);  ///< Current Day in Current Month
    }

    /// TIMALR Register bits
    namespace timalr_bits {
        constexpr uint32_t SEC = (7 << 0);  ///< Second Alarm
        constexpr uint32_t SECEN = (1U << 7);  ///< Second Alarm Enable
        constexpr uint32_t MIN = (7 << 8);  ///< Minute Alarm
        constexpr uint32_t MINEN = (1U << 15);  ///< Minute Alarm Enable
        constexpr uint32_t HOUR = (6 << 16);  ///< Hour Alarm
        constexpr uint32_t AMPM = (1U << 22);  ///< AM/PM Indicator
        constexpr uint32_t HOUREN = (1U << 23);  ///< Hour Alarm Enable
    }

    /// CALALR Register bits
    namespace calalr_bits {
        constexpr uint32_t MONTH = (5 << 16);  ///< Month Alarm
        constexpr uint32_t MTHEN = (1U << 23);  ///< Month Alarm Enable
        constexpr uint32_t DATE = (6 << 24);  ///< Date Alarm
        constexpr uint32_t DATEEN = (1U << 31);  ///< Date Alarm Enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t ACKUPD = (1U << 0);  ///< Acknowledge for Update
        constexpr uint32_t ALARM = (1U << 1);  ///< Alarm Flag
        constexpr uint32_t SEC = (1U << 2);  ///< Second Event
        constexpr uint32_t TIMEV = (1U << 3);  ///< Time Event
        constexpr uint32_t CALEV = (1U << 4);  ///< Calendar Event
    }

    /// SCCR Register bits
    namespace sccr_bits {
        constexpr uint32_t ACKCLR = (1U << 0);  ///< Acknowledge Clear
        constexpr uint32_t ALRCLR = (1U << 1);  ///< Alarm Clear
        constexpr uint32_t SECCLR = (1U << 2);  ///< Second Clear
        constexpr uint32_t TIMCLR = (1U << 3);  ///< Time Clear
        constexpr uint32_t CALCLR = (1U << 4);  ///< Calendar Clear
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t ACKEN = (1U << 0);  ///< Acknowledge Update Interrupt Enable
        constexpr uint32_t ALREN = (1U << 1);  ///< Alarm Interrupt Enable
        constexpr uint32_t SECEN = (1U << 2);  ///< Second Event Interrupt Enable
        constexpr uint32_t TIMEN = (1U << 3);  ///< Time Event Interrupt Enable
        constexpr uint32_t CALEN = (1U << 4);  ///< Calendar Event Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t ACKDIS = (1U << 0);  ///< Acknowledge Update Interrupt Disable
        constexpr uint32_t ALRDIS = (1U << 1);  ///< Alarm Interrupt Disable
        constexpr uint32_t SECDIS = (1U << 2);  ///< Second Event Interrupt Disable
        constexpr uint32_t TIMDIS = (1U << 3);  ///< Time Event Interrupt Disable
        constexpr uint32_t CALDIS = (1U << 4);  ///< Calendar Event Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t ACK = (1U << 0);  ///< Acknowledge Update Interrupt Mask
        constexpr uint32_t ALR = (1U << 1);  ///< Alarm Interrupt Mask
        constexpr uint32_t SEC = (1U << 2);  ///< Second Event Interrupt Mask
        constexpr uint32_t TIM = (1U << 3);  ///< Time Event Interrupt Mask
        constexpr uint32_t CAL = (1U << 4);  ///< Calendar Event Interrupt Mask
    }

    /// VER Register bits
    namespace ver_bits {
        constexpr uint32_t NVTIM = (1U << 0);  ///< Non-valid Time
        constexpr uint32_t NVCAL = (1U << 1);  ///< Non-valid Calendar
        constexpr uint32_t NVTIMALR = (1U << 2);  ///< Non-valid Time Alarm
        constexpr uint32_t NVCALALR = (1U << 3);  ///< Non-valid Calendar Alarm
    }

}


} // namespace alloy::generated::at91sam9n12

#endif // ALLOY_GENERATED_AT91SAM9N12_PERIPHERALS_HPP