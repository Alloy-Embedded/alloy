/// Auto-generated code for ATSAM3S8C
/// Generated by Alloy Code Generator
/// Source: atmel_sam.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:01:27
#ifndef ALLOY_GENERATED_ATSAM3S8C_PERIPHERALS_HPP
#define ALLOY_GENERATED_ATSAM3S8C_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::atsam3s8c {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_hsmci = true;
    constexpr uint32_t num_hsmci_instances = 1;
    constexpr bool has_ssc = true;
    constexpr uint32_t num_ssc_instances = 1;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 1;
    constexpr bool has_tim = true;
    constexpr uint32_t num_tim_instances = 2;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 2;
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 1;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 5;
    constexpr bool has_udp = true;
    constexpr uint32_t num_udp_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 1;
    constexpr bool has_dac = true;
    constexpr uint32_t num_dac_instances = 1;
    constexpr bool has_acc = true;
    constexpr uint32_t num_acc_instances = 1;
    constexpr bool has_rcc = true;
    constexpr uint32_t num_rcc_instances = 1;
    constexpr bool has_smc = true;
    constexpr uint32_t num_smc_instances = 1;
    constexpr bool has_matrix = true;
    constexpr uint32_t num_matrix_instances = 1;
    constexpr bool has_pmc = true;
    constexpr uint32_t num_pmc_instances = 1;
    constexpr bool has_chipid = true;
    constexpr uint32_t num_chipid_instances = 1;
    constexpr bool has_efc = true;
    constexpr uint32_t num_efc_instances = 1;
    constexpr bool has_pioa = true;
    constexpr uint32_t num_pioa_instances = 1;
    constexpr bool has_piob = true;
    constexpr uint32_t num_piob_instances = 1;
    constexpr bool has_pioc = true;
    constexpr uint32_t num_pioc_instances = 1;
    constexpr bool has_rstc = true;
    constexpr uint32_t num_rstc_instances = 1;
    constexpr bool has_supc = true;
    constexpr uint32_t num_supc_instances = 1;
    constexpr bool has_rtt = true;
    constexpr uint32_t num_rtt_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;
    constexpr bool has_gpbr = true;
    constexpr uint32_t num_gpbr_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct hsmci_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tim_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct peripheral_count<struct udp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dac_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct acc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rcc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct smc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct matrix_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pmc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct chipid_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct efc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pioa_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct piob_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pioc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rstc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct supc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtt_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpbr_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits

    // USART-specific traits
    constexpr bool has_usart0 = true;
    constexpr bool has_usart1 = true;
    constexpr bool has_usart2 = true;
    constexpr bool has_uart0 = true;
    constexpr bool has_uart1 = true;
}

// ============================================================================
// HSMCI Peripheral
// ============================================================================

namespace hsmci {
    /// Base addresses
    constexpr uint32_t HSMCI_BASE = 0x40000000;

    /// HSMCI Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t DTOR;  ///< Offset: 0x08 - Data Timeout Register
        volatile uint32_t SDCR;  ///< Offset: 0x0C - SD/SDIO Card Register
        volatile uint32_t ARGR;  ///< Offset: 0x10 - Argument Register
        volatile uint32_t CMDR;  ///< Offset: 0x14 - Command Register
        volatile uint32_t BLKR;  ///< Offset: 0x18 - Block Register
        volatile uint32_t CSTOR;  ///< Offset: 0x1C - Completion Signal Timeout Register
        volatile uint32_t RSPR[%s];  ///< Offset: 0x20 - Response Register
        volatile uint32_t RDR;  ///< Offset: 0x30 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x34 - Transmit Data Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t CFG;  ///< Offset: 0x54 - Configuration Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protection Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
        volatile uint32_t FIFO[%s];  ///< Offset: 0x200 - FIFO Memory Aperture0
        volatile uint32_t RPR;  ///< Offset: 0x100 - Receive Pointer Register
        volatile uint32_t RCR;  ///< Offset: 0x104 - Receive Counter Register
        volatile uint32_t TPR;  ///< Offset: 0x108 - Transmit Pointer Register
        volatile uint32_t TCR;  ///< Offset: 0x10C - Transmit Counter Register
        volatile uint32_t RNPR;  ///< Offset: 0x110 - Receive Next Pointer Register
        volatile uint32_t RNCR;  ///< Offset: 0x114 - Receive Next Counter Register
        volatile uint32_t TNPR;  ///< Offset: 0x118 - Transmit Next Pointer Register
        volatile uint32_t TNCR;  ///< Offset: 0x11C - Transmit Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x120 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x124 - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* HSMCI = reinterpret_cast<Registers*>(HSMCI_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t MCIEN = (1U << 0);  ///< Multi-Media Interface Enable
        constexpr uint32_t MCIDIS = (1U << 1);  ///< Multi-Media Interface Disable
        constexpr uint32_t PWSEN = (1U << 2);  ///< Power Save Mode Enable
        constexpr uint32_t PWSDIS = (1U << 3);  ///< Power Save Mode Disable
        constexpr uint32_t SWRST = (1U << 7);  ///< Software Reset
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t CLKDIV = (8 << 0);  ///< Clock Divider
        constexpr uint32_t PWSDIV = (3 << 8);  ///< Power Saving Divider
        constexpr uint32_t RDPROOF = (1U << 11);  ///< RDPROOF
        constexpr uint32_t WRPROOF = (1U << 12);  ///< WRPROOF
        constexpr uint32_t FBYTE = (1U << 13);  ///< Force Byte Transfer
        constexpr uint32_t PADV = (1U << 14);  ///< Padding Value
        constexpr uint32_t PDCMODE = (1U << 15);  ///< PDC-oriented Mode
    }

    /// DTOR Register bits
    namespace dtor_bits {
        constexpr uint32_t DTOCYC = (4 << 0);  ///< Data Timeout Cycle Number
        constexpr uint32_t DTOMUL = (3 << 4);  ///< Data Timeout Multiplier
    }

    /// SDCR Register bits
    namespace sdcr_bits {
        constexpr uint32_t SDCSEL = (2 << 0);  ///< SDCard/SDIO Slot
        constexpr uint32_t SDCBUS = (2 << 6);  ///< SDCard/SDIO Bus Width
    }

    /// ARGR Register bits
    namespace argr_bits {
        constexpr uint32_t ARG = (32 << 0);  ///< Command Argument
    }

    /// CMDR Register bits
    namespace cmdr_bits {
        constexpr uint32_t CMDNB = (6 << 0);  ///< Command Number
        constexpr uint32_t RSPTYP = (2 << 6);  ///< Response Type
        constexpr uint32_t SPCMD = (3 << 8);  ///< Special Command
        constexpr uint32_t OPDCMD = (1U << 11);  ///< Open Drain Command
        constexpr uint32_t MAXLAT = (1U << 12);  ///< Max Latency for Command to Response
        constexpr uint32_t TRCMD = (2 << 16);  ///< Transfer Command
        constexpr uint32_t TRDIR = (1U << 18);  ///< Transfer Direction
        constexpr uint32_t TRTYP = (3 << 19);  ///< Transfer Type
        constexpr uint32_t IOSPCMD = (2 << 24);  ///< SDIO Special Command
        constexpr uint32_t ATACS = (1U << 26);  ///< ATA with Command Completion Signal
        constexpr uint32_t BOOT_ACK = (1U << 27);  ///< Boot Operation Acknowledge.
    }

    /// BLKR Register bits
    namespace blkr_bits {
        constexpr uint32_t BCNT = (16 << 0);  ///< MMC/SDIO Block Count - SDIO Byte Count
        constexpr uint32_t BLKLEN = (16 << 16);  ///< Data Block Length
    }

    /// CSTOR Register bits
    namespace cstor_bits {
        constexpr uint32_t CSTOCYC = (4 << 0);  ///< Completion Signal Timeout Cycle Number
        constexpr uint32_t CSTOMUL = (3 << 4);  ///< Completion Signal Timeout Multiplier
    }

    /// RSPR[%s] Register bits
    namespace rspr[%s]_bits {
        constexpr uint32_t RSP = (32 << 0);  ///< Response
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Write
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< HSMCI Not Busy
        constexpr uint32_t ENDRX = (1U << 6);  ///< End of RX Buffer
        constexpr uint32_t ENDTX = (1U << 7);  ///< End of TX Buffer
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status
        constexpr uint32_t CSRCV = (1U << 13);  ///< CE-ATA Completion Signal Received
        constexpr uint32_t RXBUFF = (1U << 14);  ///< RX Buffer Full
        constexpr uint32_t TXBUFE = (1U << 15);  ///< TX Buffer Empty
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty flag
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done flag
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Enable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Enable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 6);  ///< End of Receive Buffer Interrupt Enable
        constexpr uint32_t ENDTX = (1U << 7);  ///< End of Transmit Buffer Interrupt Enable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Enable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Enable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Enable
        constexpr uint32_t RXBUFF = (1U << 14);  ///< Receive Buffer Full Interrupt Enable
        constexpr uint32_t TXBUFE = (1U << 15);  ///< Transmit Buffer Empty Interrupt Enable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Enable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Enable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Enable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Enable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Enable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Enable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Enable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Timeout Error Interrupt Enable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt enable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt enable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Enable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Enable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Enable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Disable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Disable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 6);  ///< End of Receive Buffer Interrupt Disable
        constexpr uint32_t ENDTX = (1U << 7);  ///< End of Transmit Buffer Interrupt Disable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Disable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Disable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal received interrupt Disable
        constexpr uint32_t RXBUFF = (1U << 14);  ///< Receive Buffer Full Interrupt Disable
        constexpr uint32_t TXBUFE = (1U << 15);  ///< Transmit Buffer Empty Interrupt Disable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Disable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Disable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Disable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Disable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Disable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Disable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Disable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time out Error Interrupt Disable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt Disable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Disable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Disable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Disable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Disable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Mask
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Mask
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 6);  ///< End of Receive Buffer Interrupt Mask
        constexpr uint32_t ENDTX = (1U << 7);  ///< End of Transmit Buffer Interrupt Mask
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Mask
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Mask
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Mask
        constexpr uint32_t RXBUFF = (1U << 14);  ///< Receive Buffer Full Interrupt Mask
        constexpr uint32_t TXBUFE = (1U << 15);  ///< Transmit Buffer Empty Interrupt Mask
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Mask
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Mask
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Mask
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Mask
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Mask
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Mask
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Mask
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error Interrupt Mask
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO Empty Interrupt Mask
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Mask
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received Interrupt Mask
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error Interrupt Mask
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Mask
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Mask
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t FIFOMODE = (1U << 0);  ///< HSMCI Internal FIFO control mode
        constexpr uint32_t FERRCTRL = (1U << 4);  ///< Flow Error flag reset control mode
        constexpr uint32_t HSMODE = (1U << 8);  ///< High Speed Mode
        constexpr uint32_t LSYNC = (1U << 12);  ///< Synchronize on the last block
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WP_EN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WP_KEY = (24 << 8);  ///< Write Protection Key password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WP_VS = (4 << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WP_VSRC = (16 << 8);  ///< Write Protection Violation SouRCe
    }

    /// RPR Register bits
    namespace rpr_bits {
        constexpr uint32_t RXPTR = (32 << 0);  ///< Receive Pointer Register
    }

    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t RXCTR = (16 << 0);  ///< Receive Counter Register
    }

    /// TPR Register bits
    namespace tpr_bits {
        constexpr uint32_t TXPTR = (32 << 0);  ///< Transmit Counter Register
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t TXCTR = (16 << 0);  ///< Transmit Counter Register
    }

    /// RNPR Register bits
    namespace rnpr_bits {
        constexpr uint32_t RXNPTR = (32 << 0);  ///< Receive Next Pointer
    }

    /// RNCR Register bits
    namespace rncr_bits {
        constexpr uint32_t RXNCTR = (16 << 0);  ///< Receive Next Counter
    }

    /// TNPR Register bits
    namespace tnpr_bits {
        constexpr uint32_t TXNPTR = (32 << 0);  ///< Transmit Next Pointer
    }

    /// TNCR Register bits
    namespace tncr_bits {
        constexpr uint32_t TXNCTR = (16 << 0);  ///< Transmit Counter Next
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// SSC Peripheral
// ============================================================================

namespace ssc {
    /// Base addresses
    constexpr uint32_t SSC_BASE = 0x40004000;

    /// SSC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t CMR;  ///< Offset: 0x04 - Clock Mode Register
        volatile uint32_t RCMR;  ///< Offset: 0x10 - Receive Clock Mode Register
        volatile uint32_t RFMR;  ///< Offset: 0x14 - Receive Frame Mode Register
        volatile uint32_t TCMR;  ///< Offset: 0x18 - Transmit Clock Mode Register
        volatile uint32_t TFMR;  ///< Offset: 0x1C - Transmit Frame Mode Register
        volatile uint32_t RHR;  ///< Offset: 0x20 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x24 - Transmit Holding Register
        volatile uint32_t RSHR;  ///< Offset: 0x30 - Receive Sync. Holding Register
        volatile uint32_t TSHR;  ///< Offset: 0x34 - Transmit Sync. Holding Register
        volatile uint32_t RC0R;  ///< Offset: 0x38 - Receive Compare 0 Register
        volatile uint32_t RC1R;  ///< Offset: 0x3C - Receive Compare 1 Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t RPR;  ///< Offset: 0x100 - Receive Pointer Register
        volatile uint32_t RCR;  ///< Offset: 0x104 - Receive Counter Register
        volatile uint32_t TPR;  ///< Offset: 0x108 - Transmit Pointer Register
        volatile uint32_t TCR;  ///< Offset: 0x10C - Transmit Counter Register
        volatile uint32_t RNPR;  ///< Offset: 0x110 - Receive Next Pointer Register
        volatile uint32_t RNCR;  ///< Offset: 0x114 - Receive Next Counter Register
        volatile uint32_t TNPR;  ///< Offset: 0x118 - Transmit Next Pointer Register
        volatile uint32_t TNCR;  ///< Offset: 0x11C - Transmit Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x120 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x124 - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* SSC = reinterpret_cast<Registers*>(SSC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RXEN = (1U << 0);  ///< Receive Enable
        constexpr uint32_t RXDIS = (1U << 1);  ///< Receive Disable
        constexpr uint32_t TXEN = (1U << 8);  ///< Transmit Enable
        constexpr uint32_t TXDIS = (1U << 9);  ///< Transmit Disable
        constexpr uint32_t SWRST = (1U << 15);  ///< Software Reset
    }

    /// CMR Register bits
    namespace cmr_bits {
        constexpr uint32_t DIV = (12 << 0);  ///< Clock Divider
    }

    /// RCMR Register bits
    namespace rcmr_bits {
        constexpr uint32_t CKS = (2 << 0);  ///< Receive Clock Selection
        constexpr uint32_t CKO = (3 << 2);  ///< Receive Clock Output Mode Selection
        constexpr uint32_t CKI = (1U << 5);  ///< Receive Clock Inversion
        constexpr uint32_t CKG = (2 << 6);  ///< Receive Clock Gating Selection
        constexpr uint32_t START = (4 << 8);  ///< Receive Start Selection
        constexpr uint32_t STOP = (1U << 12);  ///< Receive Stop Selection
        constexpr uint32_t STTDLY = (8 << 16);  ///< Receive Start Delay
        constexpr uint32_t PERIOD = (8 << 24);  ///< Receive Period Divider Selection
    }

    /// RFMR Register bits
    namespace rfmr_bits {
        constexpr uint32_t DATLEN = (5 << 0);  ///< Data Length
        constexpr uint32_t LOOP = (1U << 5);  ///< Loop Mode
        constexpr uint32_t MSBF = (1U << 7);  ///< Most Significant Bit First
        constexpr uint32_t DATNB = (4 << 8);  ///< Data Number per Frame
        constexpr uint32_t FSLEN = (4 << 16);  ///< Receive Frame Sync Length
        constexpr uint32_t FSOS = (3 << 20);  ///< Receive Frame Sync Output Selection
        constexpr uint32_t FSEDGE = (1U << 24);  ///< Frame Sync Edge Detection
        constexpr uint32_t FSLEN_EXT = (4 << 28);  ///< FSLEN Field Extension
    }

    /// TCMR Register bits
    namespace tcmr_bits {
        constexpr uint32_t CKS = (2 << 0);  ///< Transmit Clock Selection
        constexpr uint32_t CKO = (3 << 2);  ///< Transmit Clock Output Mode Selection
        constexpr uint32_t CKI = (1U << 5);  ///< Transmit Clock Inversion
        constexpr uint32_t CKG = (2 << 6);  ///< Transmit Clock Gating Selection
        constexpr uint32_t START = (4 << 8);  ///< Transmit Start Selection
        constexpr uint32_t STTDLY = (8 << 16);  ///< Transmit Start Delay
        constexpr uint32_t PERIOD = (8 << 24);  ///< Transmit Period Divider Selection
    }

    /// TFMR Register bits
    namespace tfmr_bits {
        constexpr uint32_t DATLEN = (5 << 0);  ///< Data Length
        constexpr uint32_t DATDEF = (1U << 5);  ///< Data Default Value
        constexpr uint32_t MSBF = (1U << 7);  ///< Most Significant Bit First
        constexpr uint32_t DATNB = (4 << 8);  ///< Data Number per frame
        constexpr uint32_t FSLEN = (4 << 16);  ///< Transmit Frame Sync Length
        constexpr uint32_t FSOS = (3 << 20);  ///< Transmit Frame Sync Output Selection
        constexpr uint32_t FSDEN = (1U << 23);  ///< Frame Sync Data Enable
        constexpr uint32_t FSEDGE = (1U << 24);  ///< Frame Sync Edge Detection
        constexpr uint32_t FSLEN_EXT = (4 << 28);  ///< FSLEN Field Extension
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RDAT = (32 << 0);  ///< Receive Data
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TDAT = (32 << 0);  ///< Transmit Data
    }

    /// RSHR Register bits
    namespace rshr_bits {
        constexpr uint32_t RSDAT = (16 << 0);  ///< Receive Synchronization Data
    }

    /// TSHR Register bits
    namespace tshr_bits {
        constexpr uint32_t TSDAT = (16 << 0);  ///< Transmit Synchronization Data
    }

    /// RC0R Register bits
    namespace rc0r_bits {
        constexpr uint32_t CP0 = (16 << 0);  ///< Receive Compare Data 0
    }

    /// RC1R Register bits
    namespace rc1r_bits {
        constexpr uint32_t CP1 = (16 << 0);  ///< Receive Compare Data 1
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty
        constexpr uint32_t ENDTX = (1U << 2);  ///< End of Transmission
        constexpr uint32_t TXBUFE = (1U << 3);  ///< Transmit Buffer Empty
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun
        constexpr uint32_t ENDRX = (1U << 6);  ///< End of Reception
        constexpr uint32_t RXBUFF = (1U << 7);  ///< Receive Buffer Full
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1
        constexpr uint32_t TXSYN = (1U << 10);  ///< Transmit Sync
        constexpr uint32_t RXSYN = (1U << 11);  ///< Receive Sync
        constexpr uint32_t TXEN = (1U << 16);  ///< Transmit Enable
        constexpr uint32_t RXEN = (1U << 17);  ///< Receive Enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Enable
        constexpr uint32_t ENDTX = (1U << 2);  ///< End of Transmission Interrupt Enable
        constexpr uint32_t TXBUFE = (1U << 3);  ///< Transmit Buffer Empty Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Enable
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 6);  ///< End of Reception Interrupt Enable
        constexpr uint32_t RXBUFF = (1U << 7);  ///< Receive Buffer Full Interrupt Enable
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Enable
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Enable
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Enable
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Disable
        constexpr uint32_t ENDTX = (1U << 2);  ///< End of Transmission Interrupt Disable
        constexpr uint32_t TXBUFE = (1U << 3);  ///< Transmit Buffer Empty Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Disable
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 6);  ///< End of Reception Interrupt Disable
        constexpr uint32_t RXBUFF = (1U << 7);  ///< Receive Buffer Full Interrupt Disable
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Disable
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Disable
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Enable
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Enable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Mask
        constexpr uint32_t ENDTX = (1U << 2);  ///< End of Transmission Interrupt Mask
        constexpr uint32_t TXBUFE = (1U << 3);  ///< Transmit Buffer Empty Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Mask
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 6);  ///< End of Reception Interrupt Mask
        constexpr uint32_t RXBUFF = (1U << 7);  ///< Receive Buffer Full Interrupt Mask
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Mask
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Mask
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Mask
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Mask
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// RPR Register bits
    namespace rpr_bits {
        constexpr uint32_t RXPTR = (32 << 0);  ///< Receive Pointer Register
    }

    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t RXCTR = (16 << 0);  ///< Receive Counter Register
    }

    /// TPR Register bits
    namespace tpr_bits {
        constexpr uint32_t TXPTR = (32 << 0);  ///< Transmit Counter Register
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t TXCTR = (16 << 0);  ///< Transmit Counter Register
    }

    /// RNPR Register bits
    namespace rnpr_bits {
        constexpr uint32_t RXNPTR = (32 << 0);  ///< Receive Next Pointer
    }

    /// RNCR Register bits
    namespace rncr_bits {
        constexpr uint32_t RXNCTR = (16 << 0);  ///< Receive Next Counter
    }

    /// TNPR Register bits
    namespace tnpr_bits {
        constexpr uint32_t TXNPTR = (32 << 0);  ///< Transmit Next Pointer
    }

    /// TNCR Register bits
    namespace tncr_bits {
        constexpr uint32_t TXNCTR = (16 << 0);  ///< Transmit Counter Next
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI_BASE = 0x40008000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t RDR;  ///< Offset: 0x08 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x0C - Transmit Data Register
        volatile uint32_t SR;  ///< Offset: 0x10 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x14 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x18 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x1C - Interrupt Mask Register
        volatile uint32_t CSR[%s];  ///< Offset: 0x30 - Chip Select Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protection Control Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
        volatile uint32_t RPR;  ///< Offset: 0x100 - Receive Pointer Register
        volatile uint32_t RCR;  ///< Offset: 0x104 - Receive Counter Register
        volatile uint32_t TPR;  ///< Offset: 0x108 - Transmit Pointer Register
        volatile uint32_t TCR;  ///< Offset: 0x10C - Transmit Counter Register
        volatile uint32_t RNPR;  ///< Offset: 0x110 - Receive Next Pointer Register
        volatile uint32_t RNCR;  ///< Offset: 0x114 - Receive Next Counter Register
        volatile uint32_t TNPR;  ///< Offset: 0x118 - Transmit Next Pointer Register
        volatile uint32_t TNCR;  ///< Offset: 0x11C - Transmit Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x120 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x124 - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* SPI = reinterpret_cast<Registers*>(SPI_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SPIEN = (1U << 0);  ///< SPI Enable
        constexpr uint32_t SPIDIS = (1U << 1);  ///< SPI Disable
        constexpr uint32_t SWRST = (1U << 7);  ///< SPI Software Reset
        constexpr uint32_t LASTXFER = (1U << 24);  ///< Last Transfer
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t MSTR = (1U << 0);  ///< Master/Slave Mode
        constexpr uint32_t PS = (1U << 1);  ///< Peripheral Select
        constexpr uint32_t PCSDEC = (1U << 2);  ///< Chip Select Decode
        constexpr uint32_t MODFDIS = (1U << 4);  ///< Mode Fault Detection
        constexpr uint32_t WDRBT = (1U << 5);  ///< Wait Data Read Before Transfer
        constexpr uint32_t LLB = (1U << 7);  ///< Local Loopback Enable
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
        constexpr uint32_t DLYBCS = (8 << 24);  ///< Delay Between Chip Selects
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t RD = (16 << 0);  ///< Receive Data
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t TD = (16 << 0);  ///< Transmit Data
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
        constexpr uint32_t LASTXFER = (1U << 24);  ///< Last Transfer
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit Data Register Empty
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Status
        constexpr uint32_t ENDRX = (1U << 4);  ///< End of RX buffer
        constexpr uint32_t ENDTX = (1U << 5);  ///< End of TX buffer
        constexpr uint32_t RXBUFF = (1U << 6);  ///< RX Buffer Full
        constexpr uint32_t TXBUFE = (1U << 7);  ///< TX Buffer Empty
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty
        constexpr uint32_t UNDES = (1U << 10);  ///< Underrun Error Status (Slave Mode Only)
        constexpr uint32_t SPIENS = (1U << 16);  ///< SPI Enable Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Enable
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Enable
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Enable
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 4);  ///< End of Receive Buffer Interrupt Enable
        constexpr uint32_t ENDTX = (1U << 5);  ///< End of Transmit Buffer Interrupt Enable
        constexpr uint32_t RXBUFF = (1U << 6);  ///< Receive Buffer Full Interrupt Enable
        constexpr uint32_t TXBUFE = (1U << 7);  ///< Transmit Buffer Empty Interrupt Enable
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Enable
        constexpr uint32_t UNDES = (1U << 10);  ///< Underrun Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Disable
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Disable
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Disable
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 4);  ///< End of Receive Buffer Interrupt Disable
        constexpr uint32_t ENDTX = (1U << 5);  ///< End of Transmit Buffer Interrupt Disable
        constexpr uint32_t RXBUFF = (1U << 6);  ///< Receive Buffer Full Interrupt Disable
        constexpr uint32_t TXBUFE = (1U << 7);  ///< Transmit Buffer Empty Interrupt Disable
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Disable
        constexpr uint32_t UNDES = (1U << 10);  ///< Underrun Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Mask
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Mask
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Mask
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 4);  ///< End of Receive Buffer Interrupt Mask
        constexpr uint32_t ENDTX = (1U << 5);  ///< End of Transmit Buffer Interrupt Mask
        constexpr uint32_t RXBUFF = (1U << 6);  ///< Receive Buffer Full Interrupt Mask
        constexpr uint32_t TXBUFE = (1U << 7);  ///< Transmit Buffer Empty Interrupt Mask
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Mask
        constexpr uint32_t UNDES = (1U << 10);  ///< Underrun Error Interrupt Mask
    }

    /// CSR[%s] Register bits
    namespace csr[%s]_bits {
        constexpr uint32_t CPOL = (1U << 0);  ///< Clock Polarity
        constexpr uint32_t NCPHA = (1U << 1);  ///< Clock Phase
        constexpr uint32_t CSNAAT = (1U << 2);  ///< Chip Select Not Active After Transfer (Ignored if CSAAT = 1)
        constexpr uint32_t CSAAT = (1U << 3);  ///< Chip Select Active After Transfer
        constexpr uint32_t BITS = (4 << 4);  ///< Bits Per Transfer
        constexpr uint32_t SCBR = (8 << 8);  ///< Serial Clock Baud Rate
        constexpr uint32_t DLYBS = (8 << 16);  ///< Delay Before SPCK
        constexpr uint32_t DLYBCT = (8 << 24);  ///< Delay Between Consecutive Transfers
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protection Key Password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WPVSRC = (8 << 8);  ///< Write Protection Violation Source
    }

    /// RPR Register bits
    namespace rpr_bits {
        constexpr uint32_t RXPTR = (32 << 0);  ///< Receive Pointer Register
    }

    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t RXCTR = (16 << 0);  ///< Receive Counter Register
    }

    /// TPR Register bits
    namespace tpr_bits {
        constexpr uint32_t TXPTR = (32 << 0);  ///< Transmit Counter Register
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t TXCTR = (16 << 0);  ///< Transmit Counter Register
    }

    /// RNPR Register bits
    namespace rnpr_bits {
        constexpr uint32_t RXNPTR = (32 << 0);  ///< Receive Next Pointer
    }

    /// RNCR Register bits
    namespace rncr_bits {
        constexpr uint32_t RXNCTR = (16 << 0);  ///< Receive Next Counter
    }

    /// TNPR Register bits
    namespace tnpr_bits {
        constexpr uint32_t TXNPTR = (32 << 0);  ///< Transmit Next Pointer
    }

    /// TNCR Register bits
    namespace tncr_bits {
        constexpr uint32_t TXNCTR = (16 << 0);  ///< Transmit Counter Next
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TC0_BASE = 0x40010000;
    constexpr uint32_t TC1_BASE = 0x40014000;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CCR0;  ///< Offset: 0x00 - Channel Control Register (channel = 0)
        volatile uint32_t CMR0;  ///< Offset: 0x04 - Channel Mode Register (channel = 0)
        volatile uint32_t CMR0_WAVE_EQ_1;  ///< Offset: 0x04 - Channel Mode Register (channel = 0)
        volatile uint32_t SMMR0;  ///< Offset: 0x08 - Stepper Motor Mode Register (channel = 0)
        volatile uint32_t CV0;  ///< Offset: 0x10 - Counter Value (channel = 0)
        volatile uint32_t RA0;  ///< Offset: 0x14 - Register A (channel = 0)
        volatile uint32_t RB0;  ///< Offset: 0x18 - Register B (channel = 0)
        volatile uint32_t RC0;  ///< Offset: 0x1C - Register C (channel = 0)
        volatile uint32_t SR0;  ///< Offset: 0x20 - Status Register (channel = 0)
        volatile uint32_t IER0;  ///< Offset: 0x24 - Interrupt Enable Register (channel = 0)
        volatile uint32_t IDR0;  ///< Offset: 0x28 - Interrupt Disable Register (channel = 0)
        volatile uint32_t IMR0;  ///< Offset: 0x2C - Interrupt Mask Register (channel = 0)
        volatile uint32_t CCR1;  ///< Offset: 0x40 - Channel Control Register (channel = 1)
        volatile uint32_t CMR1;  ///< Offset: 0x44 - Channel Mode Register (channel = 1)
        volatile uint32_t CMR1_WAVE_EQ_1;  ///< Offset: 0x44 - Channel Mode Register (channel = 1)
        volatile uint32_t SMMR1;  ///< Offset: 0x48 - Stepper Motor Mode Register (channel = 1)
        volatile uint32_t CV1;  ///< Offset: 0x50 - Counter Value (channel = 1)
        volatile uint32_t RA1;  ///< Offset: 0x54 - Register A (channel = 1)
        volatile uint32_t RB1;  ///< Offset: 0x58 - Register B (channel = 1)
        volatile uint32_t RC1;  ///< Offset: 0x5C - Register C (channel = 1)
        volatile uint32_t SR1;  ///< Offset: 0x60 - Status Register (channel = 1)
        volatile uint32_t IER1;  ///< Offset: 0x64 - Interrupt Enable Register (channel = 1)
        volatile uint32_t IDR1;  ///< Offset: 0x68 - Interrupt Disable Register (channel = 1)
        volatile uint32_t IMR1;  ///< Offset: 0x6C - Interrupt Mask Register (channel = 1)
        volatile uint32_t CCR2;  ///< Offset: 0x80 - Channel Control Register (channel = 2)
        volatile uint32_t CMR2;  ///< Offset: 0x84 - Channel Mode Register (channel = 2)
        volatile uint32_t CMR2_WAVE_EQ_1;  ///< Offset: 0x84 - Channel Mode Register (channel = 2)
        volatile uint32_t SMMR2;  ///< Offset: 0x88 - Stepper Motor Mode Register (channel = 2)
        volatile uint32_t CV2;  ///< Offset: 0x90 - Counter Value (channel = 2)
        volatile uint32_t RA2;  ///< Offset: 0x94 - Register A (channel = 2)
        volatile uint32_t RB2;  ///< Offset: 0x98 - Register B (channel = 2)
        volatile uint32_t RC2;  ///< Offset: 0x9C - Register C (channel = 2)
        volatile uint32_t SR2;  ///< Offset: 0xA0 - Status Register (channel = 2)
        volatile uint32_t IER2;  ///< Offset: 0xA4 - Interrupt Enable Register (channel = 2)
        volatile uint32_t IDR2;  ///< Offset: 0xA8 - Interrupt Disable Register (channel = 2)
        volatile uint32_t IMR2;  ///< Offset: 0xAC - Interrupt Mask Register (channel = 2)
        volatile uint32_t BCR;  ///< Offset: 0xC0 - Block Control Register
        volatile uint32_t BMR;  ///< Offset: 0xC4 - Block Mode Register
        volatile uint32_t QIER;  ///< Offset: 0xC8 - QDEC Interrupt Enable Register
        volatile uint32_t QIDR;  ///< Offset: 0xCC - QDEC Interrupt Disable Register
        volatile uint32_t QIMR;  ///< Offset: 0xD0 - QDEC Interrupt Mask Register
        volatile uint32_t QISR;  ///< Offset: 0xD4 - QDEC Interrupt Status Register
        volatile uint32_t FMR;  ///< Offset: 0xD8 - Fault Mode Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
    };

    /// Peripheral instances
    inline Registers* TC0 = reinterpret_cast<Registers*>(TC0_BASE);
    inline Registers* TC1 = reinterpret_cast<Registers*>(TC1_BASE);

    // Bit definitions
    /// CCR0 Register bits
    namespace ccr0_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR0 Register bits
    namespace cmr0_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR0_WAVE_EQ_1 Register bits
    namespace cmr0_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// SMMR0 Register bits
    namespace smmr0_bits {
        constexpr uint32_t GCEN = (1U << 0);  ///< Gray Count Enable
        constexpr uint32_t DOWN = (1U << 1);  ///< DOWN Count
    }

    /// CV0 Register bits
    namespace cv0_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA0 Register bits
    namespace ra0_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB0 Register bits
    namespace rb0_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC0 Register bits
    namespace rc0_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR0 Register bits
    namespace sr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER0 Register bits
    namespace ier0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR0 Register bits
    namespace idr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR0 Register bits
    namespace imr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR1 Register bits
    namespace cmr1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR1_WAVE_EQ_1 Register bits
    namespace cmr1_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// SMMR1 Register bits
    namespace smmr1_bits {
        constexpr uint32_t GCEN = (1U << 0);  ///< Gray Count Enable
        constexpr uint32_t DOWN = (1U << 1);  ///< DOWN Count
    }

    /// CV1 Register bits
    namespace cv1_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA1 Register bits
    namespace ra1_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB1 Register bits
    namespace rb1_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC1 Register bits
    namespace rc1_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR1 Register bits
    namespace sr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER1 Register bits
    namespace ier1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR1 Register bits
    namespace idr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR1 Register bits
    namespace imr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR2 Register bits
    namespace cmr2_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR2_WAVE_EQ_1 Register bits
    namespace cmr2_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// SMMR2 Register bits
    namespace smmr2_bits {
        constexpr uint32_t GCEN = (1U << 0);  ///< Gray Count Enable
        constexpr uint32_t DOWN = (1U << 1);  ///< DOWN Count
    }

    /// CV2 Register bits
    namespace cv2_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA2 Register bits
    namespace ra2_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB2 Register bits
    namespace rb2_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC2 Register bits
    namespace rc2_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR2 Register bits
    namespace sr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER2 Register bits
    namespace ier2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR2 Register bits
    namespace idr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR2 Register bits
    namespace imr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// BCR Register bits
    namespace bcr_bits {
        constexpr uint32_t SYNC = (1U << 0);  ///< Synchro Command
    }

    /// BMR Register bits
    namespace bmr_bits {
        constexpr uint32_t TC0XC0S = (2 << 0);  ///< External Clock Signal 0 Selection
        constexpr uint32_t TC1XC1S = (2 << 2);  ///< External Clock Signal 1 Selection
        constexpr uint32_t TC2XC2S = (2 << 4);  ///< External Clock Signal 2 Selection
        constexpr uint32_t QDEN = (1U << 8);  ///< Quadrature Decoder ENabled
        constexpr uint32_t POSEN = (1U << 9);  ///< POSition ENabled
        constexpr uint32_t SPEEDEN = (1U << 10);  ///< SPEED ENabled
        constexpr uint32_t QDTRANS = (1U << 11);  ///< Quadrature Decoding TRANSparent
        constexpr uint32_t EDGPHA = (1U << 12);  ///< EDGe on PHA count mode
        constexpr uint32_t INVA = (1U << 13);  ///< INVerted phA
        constexpr uint32_t INVB = (1U << 14);  ///< INVerted phB
        constexpr uint32_t INVIDX = (1U << 15);  ///< INVerted InDeX
        constexpr uint32_t SWAP = (1U << 16);  ///< SWAP PHA and PHB
        constexpr uint32_t IDXPHB = (1U << 17);  ///< InDeX pin is PHB pin
        constexpr uint32_t FILTER = (1U << 19);  ///< FILTER
        constexpr uint32_t MAXFILT = (6 << 20);  ///< MAXimum FILTer
    }

    /// QIER Register bits
    namespace qier_bits {
        constexpr uint32_t IDX = (1U << 0);  ///< InDeX
        constexpr uint32_t DIRCHG = (1U << 1);  ///< DIRection CHanGe
        constexpr uint32_t QERR = (1U << 2);  ///< Quadrature ERRor
    }

    /// QIDR Register bits
    namespace qidr_bits {
        constexpr uint32_t IDX = (1U << 0);  ///< InDeX
        constexpr uint32_t DIRCHG = (1U << 1);  ///< DIRection CHanGe
        constexpr uint32_t QERR = (1U << 2);  ///< Quadrature ERRor
    }

    /// QIMR Register bits
    namespace qimr_bits {
        constexpr uint32_t IDX = (1U << 0);  ///< InDeX
        constexpr uint32_t DIRCHG = (1U << 1);  ///< DIRection CHanGe
        constexpr uint32_t QERR = (1U << 2);  ///< Quadrature ERRor
    }

    /// QISR Register bits
    namespace qisr_bits {
        constexpr uint32_t IDX = (1U << 0);  ///< InDeX
        constexpr uint32_t DIRCHG = (1U << 1);  ///< DIRection CHanGe
        constexpr uint32_t QERR = (1U << 2);  ///< Quadrature ERRor
        constexpr uint32_t DIR = (1U << 8);  ///< DIRection
    }

    /// FMR Register bits
    namespace fmr_bits {
        constexpr uint32_t ENCF0 = (1U << 0);  ///< ENable Compare Fault Channel 0
        constexpr uint32_t ENCF1 = (1U << 1);  ///< ENable Compare Fault Channel 1
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t TWI0_BASE = 0x40018000;
    constexpr uint32_t TWI1_BASE = 0x4001C000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MMR;  ///< Offset: 0x04 - Master Mode Register
        volatile uint32_t SMR;  ///< Offset: 0x08 - Slave Mode Register
        volatile uint32_t IADR;  ///< Offset: 0x0C - Internal Address Register
        volatile uint32_t CWGR;  ///< Offset: 0x10 - Clock Waveform Generator Register
        volatile uint32_t SR;  ///< Offset: 0x20 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x24 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x28 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x2C - Interrupt Mask Register
        volatile uint32_t RHR;  ///< Offset: 0x30 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x34 - Transmit Holding Register
        volatile uint32_t RPR;  ///< Offset: 0x100 - Receive Pointer Register
        volatile uint32_t RCR;  ///< Offset: 0x104 - Receive Counter Register
        volatile uint32_t TPR;  ///< Offset: 0x108 - Transmit Pointer Register
        volatile uint32_t TCR;  ///< Offset: 0x10C - Transmit Counter Register
        volatile uint32_t RNPR;  ///< Offset: 0x110 - Receive Next Pointer Register
        volatile uint32_t RNCR;  ///< Offset: 0x114 - Receive Next Counter Register
        volatile uint32_t TNPR;  ///< Offset: 0x118 - Transmit Next Pointer Register
        volatile uint32_t TNCR;  ///< Offset: 0x11C - Transmit Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x120 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x124 - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* TWI0 = reinterpret_cast<Registers*>(TWI0_BASE);
    inline Registers* TWI1 = reinterpret_cast<Registers*>(TWI1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t START = (1U << 0);  ///< Send a START Condition
        constexpr uint32_t STOP = (1U << 1);  ///< Send a STOP Condition
        constexpr uint32_t MSEN = (1U << 2);  ///< TWI Master Mode Enabled
        constexpr uint32_t MSDIS = (1U << 3);  ///< TWI Master Mode Disabled
        constexpr uint32_t SVEN = (1U << 4);  ///< TWI Slave Mode Enabled
        constexpr uint32_t SVDIS = (1U << 5);  ///< TWI Slave Mode Disabled
        constexpr uint32_t QUICK = (1U << 6);  ///< SMBUS Quick Command
        constexpr uint32_t SWRST = (1U << 7);  ///< Software Reset
    }

    /// MMR Register bits
    namespace mmr_bits {
        constexpr uint32_t IADRSZ = (2 << 8);  ///< Internal Device Address Size
        constexpr uint32_t MREAD = (1U << 12);  ///< Master Read Direction
        constexpr uint32_t DADR = (7 << 16);  ///< Device Address
    }

    /// SMR Register bits
    namespace smr_bits {
        constexpr uint32_t SADR = (7 << 16);  ///< Slave Address
    }

    /// IADR Register bits
    namespace iadr_bits {
        constexpr uint32_t IADR = (24 << 0);  ///< Internal Address
    }

    /// CWGR Register bits
    namespace cwgr_bits {
        constexpr uint32_t CLDIV = (8 << 0);  ///< Clock Low Divider
        constexpr uint32_t CHDIV = (8 << 8);  ///< Clock High Divider
        constexpr uint32_t CKDIV = (3 << 16);  ///< Clock Divider
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed (automatically set / reset)
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready (automatically set / reset)
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready (automatically set / reset)
        constexpr uint32_t SVREAD = (1U << 3);  ///< Slave Read (automatically set / reset)
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access (automatically set / reset)
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access (clear on read)
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error (clear on read)
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledged (clear on read)
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost (clear on read)
        constexpr uint32_t SCLWS = (1U << 10);  ///< Clock Wait State (automatically set / reset)
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access (clear on read)
        constexpr uint32_t ENDRX = (1U << 12);  ///< End of RX buffer
        constexpr uint32_t ENDTX = (1U << 13);  ///< End of TX buffer
        constexpr uint32_t RXBUFF = (1U << 14);  ///< RX Buffer Full
        constexpr uint32_t TXBUFE = (1U << 15);  ///< TX Buffer Empty
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Enable
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Enable
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Enable
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Enable
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Enable
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Enable
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 12);  ///< End of Receive Buffer Interrupt Enable
        constexpr uint32_t ENDTX = (1U << 13);  ///< End of Transmit Buffer Interrupt Enable
        constexpr uint32_t RXBUFF = (1U << 14);  ///< Receive Buffer Full Interrupt Enable
        constexpr uint32_t TXBUFE = (1U << 15);  ///< Transmit Buffer Empty Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Disable
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Disable
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Disable
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Disable
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Disable
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Disable
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 12);  ///< End of Receive Buffer Interrupt Disable
        constexpr uint32_t ENDTX = (1U << 13);  ///< End of Transmit Buffer Interrupt Disable
        constexpr uint32_t RXBUFF = (1U << 14);  ///< Receive Buffer Full Interrupt Disable
        constexpr uint32_t TXBUFE = (1U << 15);  ///< Transmit Buffer Empty Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Mask
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Mask
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Mask
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Mask
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Mask
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Mask
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 12);  ///< End of Receive Buffer Interrupt Mask
        constexpr uint32_t ENDTX = (1U << 13);  ///< End of Transmit Buffer Interrupt Mask
        constexpr uint32_t RXBUFF = (1U << 14);  ///< Receive Buffer Full Interrupt Mask
        constexpr uint32_t TXBUFE = (1U << 15);  ///< Transmit Buffer Empty Interrupt Mask
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RXDATA = (8 << 0);  ///< Master or Slave Receive Holding Data
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TXDATA = (8 << 0);  ///< Master or Slave Transmit Holding Data
    }

    /// RPR Register bits
    namespace rpr_bits {
        constexpr uint32_t RXPTR = (32 << 0);  ///< Receive Pointer Register
    }

    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t RXCTR = (16 << 0);  ///< Receive Counter Register
    }

    /// TPR Register bits
    namespace tpr_bits {
        constexpr uint32_t TXPTR = (32 << 0);  ///< Transmit Counter Register
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t TXCTR = (16 << 0);  ///< Transmit Counter Register
    }

    /// RNPR Register bits
    namespace rnpr_bits {
        constexpr uint32_t RXNPTR = (32 << 0);  ///< Receive Next Pointer
    }

    /// RNCR Register bits
    namespace rncr_bits {
        constexpr uint32_t RXNCTR = (16 << 0);  ///< Receive Next Counter
    }

    /// TNPR Register bits
    namespace tnpr_bits {
        constexpr uint32_t TXNPTR = (32 << 0);  ///< Transmit Next Pointer
    }

    /// TNCR Register bits
    namespace tncr_bits {
        constexpr uint32_t TXNCTR = (16 << 0);  ///< Transmit Counter Next
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t PWM_BASE = 0x40020000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t CLK;  ///< Offset: 0x00 - PWM Clock Register
        volatile uint32_t ENA;  ///< Offset: 0x04 - PWM Enable Register
        volatile uint32_t DIS;  ///< Offset: 0x08 - PWM Disable Register
        volatile uint32_t SR;  ///< Offset: 0x0C - PWM Status Register
        volatile uint32_t IER1;  ///< Offset: 0x10 - PWM Interrupt Enable Register 1
        volatile uint32_t IDR1;  ///< Offset: 0x14 - PWM Interrupt Disable Register 1
        volatile uint32_t IMR1;  ///< Offset: 0x18 - PWM Interrupt Mask Register 1
        volatile uint32_t ISR1;  ///< Offset: 0x1C - PWM Interrupt Status Register 1
        volatile uint32_t SCM;  ///< Offset: 0x20 - PWM Sync Channels Mode Register
        volatile uint32_t SCUC;  ///< Offset: 0x28 - PWM Sync Channels Update Control Register
        volatile uint32_t SCUP;  ///< Offset: 0x2C - PWM Sync Channels Update Period Register
        volatile uint32_t SCUPUPD;  ///< Offset: 0x30 - PWM Sync Channels Update Period Update Register
        volatile uint32_t IER2;  ///< Offset: 0x34 - PWM Interrupt Enable Register 2
        volatile uint32_t IDR2;  ///< Offset: 0x38 - PWM Interrupt Disable Register 2
        volatile uint32_t IMR2;  ///< Offset: 0x3C - PWM Interrupt Mask Register 2
        volatile uint32_t ISR2;  ///< Offset: 0x40 - PWM Interrupt Status Register 2
        volatile uint32_t OOV;  ///< Offset: 0x44 - PWM Output Override Value Register
        volatile uint32_t OS;  ///< Offset: 0x48 - PWM Output Selection Register
        volatile uint32_t OSS;  ///< Offset: 0x4C - PWM Output Selection Set Register
        volatile uint32_t OSC;  ///< Offset: 0x50 - PWM Output Selection Clear Register
        volatile uint32_t OSSUPD;  ///< Offset: 0x54 - PWM Output Selection Set Update Register
        volatile uint32_t OSCUPD;  ///< Offset: 0x58 - PWM Output Selection Clear Update Register
        volatile uint32_t FMR;  ///< Offset: 0x5C - PWM Fault Mode Register
        volatile uint32_t FSR;  ///< Offset: 0x60 - PWM Fault Status Register
        volatile uint32_t FCR;  ///< Offset: 0x64 - PWM Fault Clear Register
        volatile uint32_t FPV;  ///< Offset: 0x68 - PWM Fault Protection Value Register
        volatile uint32_t FPE;  ///< Offset: 0x6C - PWM Fault Protection Enable Register
        volatile uint32_t ELMR[%s];  ///< Offset: 0x7C - PWM Event Line 0 Mode Register
        volatile uint32_t WPCR;  ///< Offset: 0xE4 - PWM Write Protect Control Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - PWM Write Protect Status Register
        volatile uint32_t CMPV0;  ///< Offset: 0x130 - PWM Comparison 0 Value Register
        volatile uint32_t CMPVUPD0;  ///< Offset: 0x134 - PWM Comparison 0 Value Update Register
        volatile uint32_t CMPM0;  ///< Offset: 0x138 - PWM Comparison 0 Mode Register
        volatile uint32_t CMPMUPD0;  ///< Offset: 0x13C - PWM Comparison 0 Mode Update Register
        volatile uint32_t CMPV1;  ///< Offset: 0x140 - PWM Comparison 1 Value Register
        volatile uint32_t CMPVUPD1;  ///< Offset: 0x144 - PWM Comparison 1 Value Update Register
        volatile uint32_t CMPM1;  ///< Offset: 0x148 - PWM Comparison 1 Mode Register
        volatile uint32_t CMPMUPD1;  ///< Offset: 0x14C - PWM Comparison 1 Mode Update Register
        volatile uint32_t CMPV2;  ///< Offset: 0x150 - PWM Comparison 2 Value Register
        volatile uint32_t CMPVUPD2;  ///< Offset: 0x154 - PWM Comparison 2 Value Update Register
        volatile uint32_t CMPM2;  ///< Offset: 0x158 - PWM Comparison 2 Mode Register
        volatile uint32_t CMPMUPD2;  ///< Offset: 0x15C - PWM Comparison 2 Mode Update Register
        volatile uint32_t CMPV3;  ///< Offset: 0x160 - PWM Comparison 3 Value Register
        volatile uint32_t CMPVUPD3;  ///< Offset: 0x164 - PWM Comparison 3 Value Update Register
        volatile uint32_t CMPM3;  ///< Offset: 0x168 - PWM Comparison 3 Mode Register
        volatile uint32_t CMPMUPD3;  ///< Offset: 0x16C - PWM Comparison 3 Mode Update Register
        volatile uint32_t CMPV4;  ///< Offset: 0x170 - PWM Comparison 4 Value Register
        volatile uint32_t CMPVUPD4;  ///< Offset: 0x174 - PWM Comparison 4 Value Update Register
        volatile uint32_t CMPM4;  ///< Offset: 0x178 - PWM Comparison 4 Mode Register
        volatile uint32_t CMPMUPD4;  ///< Offset: 0x17C - PWM Comparison 4 Mode Update Register
        volatile uint32_t CMPV5;  ///< Offset: 0x180 - PWM Comparison 5 Value Register
        volatile uint32_t CMPVUPD5;  ///< Offset: 0x184 - PWM Comparison 5 Value Update Register
        volatile uint32_t CMPM5;  ///< Offset: 0x188 - PWM Comparison 5 Mode Register
        volatile uint32_t CMPMUPD5;  ///< Offset: 0x18C - PWM Comparison 5 Mode Update Register
        volatile uint32_t CMPV6;  ///< Offset: 0x190 - PWM Comparison 6 Value Register
        volatile uint32_t CMPVUPD6;  ///< Offset: 0x194 - PWM Comparison 6 Value Update Register
        volatile uint32_t CMPM6;  ///< Offset: 0x198 - PWM Comparison 6 Mode Register
        volatile uint32_t CMPMUPD6;  ///< Offset: 0x19C - PWM Comparison 6 Mode Update Register
        volatile uint32_t CMPV7;  ///< Offset: 0x1A0 - PWM Comparison 7 Value Register
        volatile uint32_t CMPVUPD7;  ///< Offset: 0x1A4 - PWM Comparison 7 Value Update Register
        volatile uint32_t CMPM7;  ///< Offset: 0x1A8 - PWM Comparison 7 Mode Register
        volatile uint32_t CMPMUPD7;  ///< Offset: 0x1AC - PWM Comparison 7 Mode Update Register
        volatile uint32_t CMR0;  ///< Offset: 0x200 - PWM Channel Mode Register (ch_num = 0)
        volatile uint32_t CDTY0;  ///< Offset: 0x204 - PWM Channel Duty Cycle Register (ch_num = 0)
        volatile uint32_t CDTYUPD0;  ///< Offset: 0x208 - PWM Channel Duty Cycle Update Register (ch_num = 0)
        volatile uint32_t CPRD0;  ///< Offset: 0x20C - PWM Channel Period Register (ch_num = 0)
        volatile uint32_t CPRDUPD0;  ///< Offset: 0x210 - PWM Channel Period Update Register (ch_num = 0)
        volatile uint32_t CCNT0;  ///< Offset: 0x214 - PWM Channel Counter Register (ch_num = 0)
        volatile uint32_t DT0;  ///< Offset: 0x218 - PWM Channel Dead Time Register (ch_num = 0)
        volatile uint32_t DTUPD0;  ///< Offset: 0x21C - PWM Channel Dead Time Update Register (ch_num = 0)
        volatile uint32_t CMR1;  ///< Offset: 0x220 - PWM Channel Mode Register (ch_num = 1)
        volatile uint32_t CDTY1;  ///< Offset: 0x224 - PWM Channel Duty Cycle Register (ch_num = 1)
        volatile uint32_t CDTYUPD1;  ///< Offset: 0x228 - PWM Channel Duty Cycle Update Register (ch_num = 1)
        volatile uint32_t CPRD1;  ///< Offset: 0x22C - PWM Channel Period Register (ch_num = 1)
        volatile uint32_t CPRDUPD1;  ///< Offset: 0x230 - PWM Channel Period Update Register (ch_num = 1)
        volatile uint32_t CCNT1;  ///< Offset: 0x234 - PWM Channel Counter Register (ch_num = 1)
        volatile uint32_t DT1;  ///< Offset: 0x238 - PWM Channel Dead Time Register (ch_num = 1)
        volatile uint32_t DTUPD1;  ///< Offset: 0x23C - PWM Channel Dead Time Update Register (ch_num = 1)
        volatile uint32_t CMR2;  ///< Offset: 0x240 - PWM Channel Mode Register (ch_num = 2)
        volatile uint32_t CDTY2;  ///< Offset: 0x244 - PWM Channel Duty Cycle Register (ch_num = 2)
        volatile uint32_t CDTYUPD2;  ///< Offset: 0x248 - PWM Channel Duty Cycle Update Register (ch_num = 2)
        volatile uint32_t CPRD2;  ///< Offset: 0x24C - PWM Channel Period Register (ch_num = 2)
        volatile uint32_t CPRDUPD2;  ///< Offset: 0x250 - PWM Channel Period Update Register (ch_num = 2)
        volatile uint32_t CCNT2;  ///< Offset: 0x254 - PWM Channel Counter Register (ch_num = 2)
        volatile uint32_t DT2;  ///< Offset: 0x258 - PWM Channel Dead Time Register (ch_num = 2)
        volatile uint32_t DTUPD2;  ///< Offset: 0x25C - PWM Channel Dead Time Update Register (ch_num = 2)
        volatile uint32_t CMR3;  ///< Offset: 0x260 - PWM Channel Mode Register (ch_num = 3)
        volatile uint32_t CDTY3;  ///< Offset: 0x264 - PWM Channel Duty Cycle Register (ch_num = 3)
        volatile uint32_t CDTYUPD3;  ///< Offset: 0x268 - PWM Channel Duty Cycle Update Register (ch_num = 3)
        volatile uint32_t CPRD3;  ///< Offset: 0x26C - PWM Channel Period Register (ch_num = 3)
        volatile uint32_t CPRDUPD3;  ///< Offset: 0x270 - PWM Channel Period Update Register (ch_num = 3)
        volatile uint32_t CCNT3;  ///< Offset: 0x274 - PWM Channel Counter Register (ch_num = 3)
        volatile uint32_t DT3;  ///< Offset: 0x278 - PWM Channel Dead Time Register (ch_num = 3)
        volatile uint32_t DTUPD3;  ///< Offset: 0x27C - PWM Channel Dead Time Update Register (ch_num = 3)
        volatile uint32_t TPR;  ///< Offset: 0x108 - Transmit Pointer Register
        volatile uint32_t TCR;  ///< Offset: 0x10C - Transmit Counter Register
        volatile uint32_t TNPR;  ///< Offset: 0x118 - Transmit Next Pointer Register
        volatile uint32_t TNCR;  ///< Offset: 0x11C - Transmit Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x120 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x124 - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* PWM = reinterpret_cast<Registers*>(PWM_BASE);

    // Bit definitions
    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t DIVA = (8 << 0);  ///< CLKA, CLKB Divide Factor
        constexpr uint32_t PREA = (4 << 8);  ///< CLKA, CLKB Source Clock Selection
        constexpr uint32_t DIVB = (8 << 16);  ///< CLKA, CLKB Divide Factor
        constexpr uint32_t PREB = (4 << 24);  ///< CLKA, CLKB Source Clock Selection
    }

    /// ENA Register bits
    namespace ena_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// DIS Register bits
    namespace dis_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// IER1 Register bits
    namespace ier1_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Counter Event on Channel 0 Interrupt Enable
        constexpr uint32_t CHID1 = (1U << 1);  ///< Counter Event on Channel 1 Interrupt Enable
        constexpr uint32_t CHID2 = (1U << 2);  ///< Counter Event on Channel 2 Interrupt Enable
        constexpr uint32_t CHID3 = (1U << 3);  ///< Counter Event on Channel 3 Interrupt Enable
        constexpr uint32_t FCHID0 = (1U << 16);  ///< Fault Protection Trigger on Channel 0 Interrupt Enable
        constexpr uint32_t FCHID1 = (1U << 17);  ///< Fault Protection Trigger on Channel 1 Interrupt Enable
        constexpr uint32_t FCHID2 = (1U << 18);  ///< Fault Protection Trigger on Channel 2 Interrupt Enable
        constexpr uint32_t FCHID3 = (1U << 19);  ///< Fault Protection Trigger on Channel 3 Interrupt Enable
    }

    /// IDR1 Register bits
    namespace idr1_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Counter Event on Channel 0 Interrupt Disable
        constexpr uint32_t CHID1 = (1U << 1);  ///< Counter Event on Channel 1 Interrupt Disable
        constexpr uint32_t CHID2 = (1U << 2);  ///< Counter Event on Channel 2 Interrupt Disable
        constexpr uint32_t CHID3 = (1U << 3);  ///< Counter Event on Channel 3 Interrupt Disable
        constexpr uint32_t FCHID0 = (1U << 16);  ///< Fault Protection Trigger on Channel 0 Interrupt Disable
        constexpr uint32_t FCHID1 = (1U << 17);  ///< Fault Protection Trigger on Channel 1 Interrupt Disable
        constexpr uint32_t FCHID2 = (1U << 18);  ///< Fault Protection Trigger on Channel 2 Interrupt Disable
        constexpr uint32_t FCHID3 = (1U << 19);  ///< Fault Protection Trigger on Channel 3 Interrupt Disable
    }

    /// IMR1 Register bits
    namespace imr1_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Counter Event on Channel 0 Interrupt Mask
        constexpr uint32_t CHID1 = (1U << 1);  ///< Counter Event on Channel 1 Interrupt Mask
        constexpr uint32_t CHID2 = (1U << 2);  ///< Counter Event on Channel 2 Interrupt Mask
        constexpr uint32_t CHID3 = (1U << 3);  ///< Counter Event on Channel 3 Interrupt Mask
        constexpr uint32_t FCHID0 = (1U << 16);  ///< Fault Protection Trigger on Channel 0 Interrupt Mask
        constexpr uint32_t FCHID1 = (1U << 17);  ///< Fault Protection Trigger on Channel 1 Interrupt Mask
        constexpr uint32_t FCHID2 = (1U << 18);  ///< Fault Protection Trigger on Channel 2 Interrupt Mask
        constexpr uint32_t FCHID3 = (1U << 19);  ///< Fault Protection Trigger on Channel 3 Interrupt Mask
    }

    /// ISR1 Register bits
    namespace isr1_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Counter Event on Channel 0
        constexpr uint32_t CHID1 = (1U << 1);  ///< Counter Event on Channel 1
        constexpr uint32_t CHID2 = (1U << 2);  ///< Counter Event on Channel 2
        constexpr uint32_t CHID3 = (1U << 3);  ///< Counter Event on Channel 3
        constexpr uint32_t FCHID0 = (1U << 16);  ///< Fault Protection Trigger on Channel 0
        constexpr uint32_t FCHID1 = (1U << 17);  ///< Fault Protection Trigger on Channel 1
        constexpr uint32_t FCHID2 = (1U << 18);  ///< Fault Protection Trigger on Channel 2
        constexpr uint32_t FCHID3 = (1U << 19);  ///< Fault Protection Trigger on Channel 3
    }

    /// SCM Register bits
    namespace scm_bits {
        constexpr uint32_t SYNC0 = (1U << 0);  ///< Synchronous Channel 0
        constexpr uint32_t SYNC1 = (1U << 1);  ///< Synchronous Channel 1
        constexpr uint32_t SYNC2 = (1U << 2);  ///< Synchronous Channel 2
        constexpr uint32_t SYNC3 = (1U << 3);  ///< Synchronous Channel 3
        constexpr uint32_t UPDM = (2 << 16);  ///< Synchronous Channels Update Mode
        constexpr uint32_t PTRM = (1U << 20);  ///< PDC Transfer Request Mode
        constexpr uint32_t PTRCS = (3 << 21);  ///< PDC Transfer Request Comparison Selection
    }

    /// SCUC Register bits
    namespace scuc_bits {
        constexpr uint32_t UPDULOCK = (1U << 0);  ///< Synchronous Channels Update Unlock
    }

    /// SCUP Register bits
    namespace scup_bits {
        constexpr uint32_t UPR = (4 << 0);  ///< Update Period
        constexpr uint32_t UPRCNT = (4 << 4);  ///< Update Period Counter
    }

    /// SCUPUPD Register bits
    namespace scupupd_bits {
        constexpr uint32_t UPRUPD = (4 << 0);  ///< Update Period Update
    }

    /// IER2 Register bits
    namespace ier2_bits {
        constexpr uint32_t WRDY = (1U << 0);  ///< Write Ready for Synchronous Channels Update Interrupt Enable
        constexpr uint32_t ENDTX = (1U << 1);  ///< PDC End of TX Buffer Interrupt Enable
        constexpr uint32_t TXBUFE = (1U << 2);  ///< PDC TX Buffer Empty Interrupt Enable
        constexpr uint32_t UNRE = (1U << 3);  ///< Synchronous Channels Update Underrun Error Interrupt Enable
        constexpr uint32_t CMPM0 = (1U << 8);  ///< Comparison 0 Match Interrupt Enable
        constexpr uint32_t CMPM1 = (1U << 9);  ///< Comparison 1 Match Interrupt Enable
        constexpr uint32_t CMPM2 = (1U << 10);  ///< Comparison 2 Match Interrupt Enable
        constexpr uint32_t CMPM3 = (1U << 11);  ///< Comparison 3 Match Interrupt Enable
        constexpr uint32_t CMPM4 = (1U << 12);  ///< Comparison 4 Match Interrupt Enable
        constexpr uint32_t CMPM5 = (1U << 13);  ///< Comparison 5 Match Interrupt Enable
        constexpr uint32_t CMPM6 = (1U << 14);  ///< Comparison 6 Match Interrupt Enable
        constexpr uint32_t CMPM7 = (1U << 15);  ///< Comparison 7 Match Interrupt Enable
        constexpr uint32_t CMPU0 = (1U << 16);  ///< Comparison 0 Update Interrupt Enable
        constexpr uint32_t CMPU1 = (1U << 17);  ///< Comparison 1 Update Interrupt Enable
        constexpr uint32_t CMPU2 = (1U << 18);  ///< Comparison 2 Update Interrupt Enable
        constexpr uint32_t CMPU3 = (1U << 19);  ///< Comparison 3 Update Interrupt Enable
        constexpr uint32_t CMPU4 = (1U << 20);  ///< Comparison 4 Update Interrupt Enable
        constexpr uint32_t CMPU5 = (1U << 21);  ///< Comparison 5 Update Interrupt Enable
        constexpr uint32_t CMPU6 = (1U << 22);  ///< Comparison 6 Update Interrupt Enable
        constexpr uint32_t CMPU7 = (1U << 23);  ///< Comparison 7 Update Interrupt Enable
    }

    /// IDR2 Register bits
    namespace idr2_bits {
        constexpr uint32_t WRDY = (1U << 0);  ///< Write Ready for Synchronous Channels Update Interrupt Disable
        constexpr uint32_t ENDTX = (1U << 1);  ///< PDC End of TX Buffer Interrupt Disable
        constexpr uint32_t TXBUFE = (1U << 2);  ///< PDC TX Buffer Empty Interrupt Disable
        constexpr uint32_t UNRE = (1U << 3);  ///< Synchronous Channels Update Underrun Error Interrupt Disable
        constexpr uint32_t CMPM0 = (1U << 8);  ///< Comparison 0 Match Interrupt Disable
        constexpr uint32_t CMPM1 = (1U << 9);  ///< Comparison 1 Match Interrupt Disable
        constexpr uint32_t CMPM2 = (1U << 10);  ///< Comparison 2 Match Interrupt Disable
        constexpr uint32_t CMPM3 = (1U << 11);  ///< Comparison 3 Match Interrupt Disable
        constexpr uint32_t CMPM4 = (1U << 12);  ///< Comparison 4 Match Interrupt Disable
        constexpr uint32_t CMPM5 = (1U << 13);  ///< Comparison 5 Match Interrupt Disable
        constexpr uint32_t CMPM6 = (1U << 14);  ///< Comparison 6 Match Interrupt Disable
        constexpr uint32_t CMPM7 = (1U << 15);  ///< Comparison 7 Match Interrupt Disable
        constexpr uint32_t CMPU0 = (1U << 16);  ///< Comparison 0 Update Interrupt Disable
        constexpr uint32_t CMPU1 = (1U << 17);  ///< Comparison 1 Update Interrupt Disable
        constexpr uint32_t CMPU2 = (1U << 18);  ///< Comparison 2 Update Interrupt Disable
        constexpr uint32_t CMPU3 = (1U << 19);  ///< Comparison 3 Update Interrupt Disable
        constexpr uint32_t CMPU4 = (1U << 20);  ///< Comparison 4 Update Interrupt Disable
        constexpr uint32_t CMPU5 = (1U << 21);  ///< Comparison 5 Update Interrupt Disable
        constexpr uint32_t CMPU6 = (1U << 22);  ///< Comparison 6 Update Interrupt Disable
        constexpr uint32_t CMPU7 = (1U << 23);  ///< Comparison 7 Update Interrupt Disable
    }

    /// IMR2 Register bits
    namespace imr2_bits {
        constexpr uint32_t WRDY = (1U << 0);  ///< Write Ready for Synchronous Channels Update Interrupt Mask
        constexpr uint32_t ENDTX = (1U << 1);  ///< PDC End of TX Buffer Interrupt Mask
        constexpr uint32_t TXBUFE = (1U << 2);  ///< PDC TX Buffer Empty Interrupt Mask
        constexpr uint32_t UNRE = (1U << 3);  ///< Synchronous Channels Update Underrun Error Interrupt Mask
        constexpr uint32_t CMPM0 = (1U << 8);  ///< Comparison 0 Match Interrupt Mask
        constexpr uint32_t CMPM1 = (1U << 9);  ///< Comparison 1 Match Interrupt Mask
        constexpr uint32_t CMPM2 = (1U << 10);  ///< Comparison 2 Match Interrupt Mask
        constexpr uint32_t CMPM3 = (1U << 11);  ///< Comparison 3 Match Interrupt Mask
        constexpr uint32_t CMPM4 = (1U << 12);  ///< Comparison 4 Match Interrupt Mask
        constexpr uint32_t CMPM5 = (1U << 13);  ///< Comparison 5 Match Interrupt Mask
        constexpr uint32_t CMPM6 = (1U << 14);  ///< Comparison 6 Match Interrupt Mask
        constexpr uint32_t CMPM7 = (1U << 15);  ///< Comparison 7 Match Interrupt Mask
        constexpr uint32_t CMPU0 = (1U << 16);  ///< Comparison 0 Update Interrupt Mask
        constexpr uint32_t CMPU1 = (1U << 17);  ///< Comparison 1 Update Interrupt Mask
        constexpr uint32_t CMPU2 = (1U << 18);  ///< Comparison 2 Update Interrupt Mask
        constexpr uint32_t CMPU3 = (1U << 19);  ///< Comparison 3 Update Interrupt Mask
        constexpr uint32_t CMPU4 = (1U << 20);  ///< Comparison 4 Update Interrupt Mask
        constexpr uint32_t CMPU5 = (1U << 21);  ///< Comparison 5 Update Interrupt Mask
        constexpr uint32_t CMPU6 = (1U << 22);  ///< Comparison 6 Update Interrupt Mask
        constexpr uint32_t CMPU7 = (1U << 23);  ///< Comparison 7 Update Interrupt Mask
    }

    /// ISR2 Register bits
    namespace isr2_bits {
        constexpr uint32_t WRDY = (1U << 0);  ///< Write Ready for Synchronous Channels Update
        constexpr uint32_t ENDTX = (1U << 1);  ///< PDC End of TX Buffer
        constexpr uint32_t TXBUFE = (1U << 2);  ///< PDC TX Buffer Empty
        constexpr uint32_t UNRE = (1U << 3);  ///< Synchronous Channels Update Underrun Error
        constexpr uint32_t CMPM0 = (1U << 8);  ///< Comparison 0 Match
        constexpr uint32_t CMPM1 = (1U << 9);  ///< Comparison 1 Match
        constexpr uint32_t CMPM2 = (1U << 10);  ///< Comparison 2 Match
        constexpr uint32_t CMPM3 = (1U << 11);  ///< Comparison 3 Match
        constexpr uint32_t CMPM4 = (1U << 12);  ///< Comparison 4 Match
        constexpr uint32_t CMPM5 = (1U << 13);  ///< Comparison 5 Match
        constexpr uint32_t CMPM6 = (1U << 14);  ///< Comparison 6 Match
        constexpr uint32_t CMPM7 = (1U << 15);  ///< Comparison 7 Match
        constexpr uint32_t CMPU0 = (1U << 16);  ///< Comparison 0 Update
        constexpr uint32_t CMPU1 = (1U << 17);  ///< Comparison 1 Update
        constexpr uint32_t CMPU2 = (1U << 18);  ///< Comparison 2 Update
        constexpr uint32_t CMPU3 = (1U << 19);  ///< Comparison 3 Update
        constexpr uint32_t CMPU4 = (1U << 20);  ///< Comparison 4 Update
        constexpr uint32_t CMPU5 = (1U << 21);  ///< Comparison 5 Update
        constexpr uint32_t CMPU6 = (1U << 22);  ///< Comparison 6 Update
        constexpr uint32_t CMPU7 = (1U << 23);  ///< Comparison 7 Update
    }

    /// OOV Register bits
    namespace oov_bits {
        constexpr uint32_t OOVH0 = (1U << 0);  ///< Output Override Value for PWMH output of the channel 0
        constexpr uint32_t OOVH1 = (1U << 1);  ///< Output Override Value for PWMH output of the channel 1
        constexpr uint32_t OOVH2 = (1U << 2);  ///< Output Override Value for PWMH output of the channel 2
        constexpr uint32_t OOVH3 = (1U << 3);  ///< Output Override Value for PWMH output of the channel 3
        constexpr uint32_t OOVL0 = (1U << 16);  ///< Output Override Value for PWML output of the channel 0
        constexpr uint32_t OOVL1 = (1U << 17);  ///< Output Override Value for PWML output of the channel 1
        constexpr uint32_t OOVL2 = (1U << 18);  ///< Output Override Value for PWML output of the channel 2
        constexpr uint32_t OOVL3 = (1U << 19);  ///< Output Override Value for PWML output of the channel 3
    }

    /// OS Register bits
    namespace os_bits {
        constexpr uint32_t OSH0 = (1U << 0);  ///< Output Selection for PWMH output of the channel 0
        constexpr uint32_t OSH1 = (1U << 1);  ///< Output Selection for PWMH output of the channel 1
        constexpr uint32_t OSH2 = (1U << 2);  ///< Output Selection for PWMH output of the channel 2
        constexpr uint32_t OSH3 = (1U << 3);  ///< Output Selection for PWMH output of the channel 3
        constexpr uint32_t OSL0 = (1U << 16);  ///< Output Selection for PWML output of the channel 0
        constexpr uint32_t OSL1 = (1U << 17);  ///< Output Selection for PWML output of the channel 1
        constexpr uint32_t OSL2 = (1U << 18);  ///< Output Selection for PWML output of the channel 2
        constexpr uint32_t OSL3 = (1U << 19);  ///< Output Selection for PWML output of the channel 3
    }

    /// OSS Register bits
    namespace oss_bits {
        constexpr uint32_t OSSH0 = (1U << 0);  ///< Output Selection Set for PWMH output of the channel 0
        constexpr uint32_t OSSH1 = (1U << 1);  ///< Output Selection Set for PWMH output of the channel 1
        constexpr uint32_t OSSH2 = (1U << 2);  ///< Output Selection Set for PWMH output of the channel 2
        constexpr uint32_t OSSH3 = (1U << 3);  ///< Output Selection Set for PWMH output of the channel 3
        constexpr uint32_t OSSL0 = (1U << 16);  ///< Output Selection Set for PWML output of the channel 0
        constexpr uint32_t OSSL1 = (1U << 17);  ///< Output Selection Set for PWML output of the channel 1
        constexpr uint32_t OSSL2 = (1U << 18);  ///< Output Selection Set for PWML output of the channel 2
        constexpr uint32_t OSSL3 = (1U << 19);  ///< Output Selection Set for PWML output of the channel 3
    }

    /// OSC Register bits
    namespace osc_bits {
        constexpr uint32_t OSCH0 = (1U << 0);  ///< Output Selection Clear for PWMH output of the channel 0
        constexpr uint32_t OSCH1 = (1U << 1);  ///< Output Selection Clear for PWMH output of the channel 1
        constexpr uint32_t OSCH2 = (1U << 2);  ///< Output Selection Clear for PWMH output of the channel 2
        constexpr uint32_t OSCH3 = (1U << 3);  ///< Output Selection Clear for PWMH output of the channel 3
        constexpr uint32_t OSCL0 = (1U << 16);  ///< Output Selection Clear for PWML output of the channel 0
        constexpr uint32_t OSCL1 = (1U << 17);  ///< Output Selection Clear for PWML output of the channel 1
        constexpr uint32_t OSCL2 = (1U << 18);  ///< Output Selection Clear for PWML output of the channel 2
        constexpr uint32_t OSCL3 = (1U << 19);  ///< Output Selection Clear for PWML output of the channel 3
    }

    /// OSSUPD Register bits
    namespace ossupd_bits {
        constexpr uint32_t OSSUPH0 = (1U << 0);  ///< Output Selection Set for PWMH output of the channel 0
        constexpr uint32_t OSSUPH1 = (1U << 1);  ///< Output Selection Set for PWMH output of the channel 1
        constexpr uint32_t OSSUPH2 = (1U << 2);  ///< Output Selection Set for PWMH output of the channel 2
        constexpr uint32_t OSSUPH3 = (1U << 3);  ///< Output Selection Set for PWMH output of the channel 3
        constexpr uint32_t OSSUPL0 = (1U << 16);  ///< Output Selection Set for PWML output of the channel 0
        constexpr uint32_t OSSUPL1 = (1U << 17);  ///< Output Selection Set for PWML output of the channel 1
        constexpr uint32_t OSSUPL2 = (1U << 18);  ///< Output Selection Set for PWML output of the channel 2
        constexpr uint32_t OSSUPL3 = (1U << 19);  ///< Output Selection Set for PWML output of the channel 3
    }

    /// OSCUPD Register bits
    namespace oscupd_bits {
        constexpr uint32_t OSCUPH0 = (1U << 0);  ///< Output Selection Clear for PWMH output of the channel 0
        constexpr uint32_t OSCUPH1 = (1U << 1);  ///< Output Selection Clear for PWMH output of the channel 1
        constexpr uint32_t OSCUPH2 = (1U << 2);  ///< Output Selection Clear for PWMH output of the channel 2
        constexpr uint32_t OSCUPH3 = (1U << 3);  ///< Output Selection Clear for PWMH output of the channel 3
        constexpr uint32_t OSCUPL0 = (1U << 16);  ///< Output Selection Clear for PWML output of the channel 0
        constexpr uint32_t OSCUPL1 = (1U << 17);  ///< Output Selection Clear for PWML output of the channel 1
        constexpr uint32_t OSCUPL2 = (1U << 18);  ///< Output Selection Clear for PWML output of the channel 2
        constexpr uint32_t OSCUPL3 = (1U << 19);  ///< Output Selection Clear for PWML output of the channel 3
    }

    /// FMR Register bits
    namespace fmr_bits {
        constexpr uint32_t FPOL = (8 << 0);  ///< Fault Polarity (fault input bit varies from 0 to 5)
        constexpr uint32_t FMOD = (8 << 8);  ///< Fault Activation Mode (fault input bit varies from 0 to 5)
        constexpr uint32_t FFIL = (8 << 16);  ///< Fault Filtering (fault input bit varies from 0 to 5)
    }

    /// FSR Register bits
    namespace fsr_bits {
        constexpr uint32_t FIV = (8 << 0);  ///< Fault Input Value (fault input bit varies from 0 to 5)
        constexpr uint32_t FS = (8 << 8);  ///< Fault Status (fault input bit varies from 0 to 5)
    }

    /// FCR Register bits
    namespace fcr_bits {
        constexpr uint32_t FCLR = (8 << 0);  ///< Fault Clear (fault input bit varies from 0 to 5)
    }

    /// FPV Register bits
    namespace fpv_bits {
        constexpr uint32_t FPVH0 = (1U << 0);  ///< Fault Protection Value for PWMH output on channel 0
        constexpr uint32_t FPVH1 = (1U << 1);  ///< Fault Protection Value for PWMH output on channel 1
        constexpr uint32_t FPVH2 = (1U << 2);  ///< Fault Protection Value for PWMH output on channel 2
        constexpr uint32_t FPVH3 = (1U << 3);  ///< Fault Protection Value for PWMH output on channel 3
        constexpr uint32_t FPVL0 = (1U << 16);  ///< Fault Protection Value for PWML output on channel 0
        constexpr uint32_t FPVL1 = (1U << 17);  ///< Fault Protection Value for PWML output on channel 1
        constexpr uint32_t FPVL2 = (1U << 18);  ///< Fault Protection Value for PWML output on channel 2
        constexpr uint32_t FPVL3 = (1U << 19);  ///< Fault Protection Value for PWML output on channel 3
    }

    /// FPE Register bits
    namespace fpe_bits {
        constexpr uint32_t FPE0 = (8 << 0);  ///< Fault Protection Enable for channel 0 (fault input bit varies from 0 to 5)
        constexpr uint32_t FPE1 = (8 << 8);  ///< Fault Protection Enable for channel 1 (fault input bit varies from 0 to 5)
        constexpr uint32_t FPE2 = (8 << 16);  ///< Fault Protection Enable for channel 2 (fault input bit varies from 0 to 5)
        constexpr uint32_t FPE3 = (8 << 24);  ///< Fault Protection Enable for channel 3 (fault input bit varies from 0 to 5)
    }

    /// ELMR[%s] Register bits
    namespace elmr[%s]_bits {
        constexpr uint32_t CSEL0 = (1U << 0);  ///< Comparison 0 Selection
        constexpr uint32_t CSEL1 = (1U << 1);  ///< Comparison 1 Selection
        constexpr uint32_t CSEL2 = (1U << 2);  ///< Comparison 2 Selection
        constexpr uint32_t CSEL3 = (1U << 3);  ///< Comparison 3 Selection
        constexpr uint32_t CSEL4 = (1U << 4);  ///< Comparison 4 Selection
        constexpr uint32_t CSEL5 = (1U << 5);  ///< Comparison 5 Selection
        constexpr uint32_t CSEL6 = (1U << 6);  ///< Comparison 6 Selection
        constexpr uint32_t CSEL7 = (1U << 7);  ///< Comparison 7 Selection
    }

    /// WPCR Register bits
    namespace wpcr_bits {
        constexpr uint32_t WPCMD = (2 << 0);  ///< Write Protect Command
        constexpr uint32_t WPRG0 = (1U << 2);  ///< Write Protect Register Group 0
        constexpr uint32_t WPRG1 = (1U << 3);  ///< Write Protect Register Group 1
        constexpr uint32_t WPRG2 = (1U << 4);  ///< Write Protect Register Group 2
        constexpr uint32_t WPRG3 = (1U << 5);  ///< Write Protect Register Group 3
        constexpr uint32_t WPRG4 = (1U << 6);  ///< Write Protect Register Group 4
        constexpr uint32_t WPRG5 = (1U << 7);  ///< Write Protect Register Group 5
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect Key
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPSWS0 = (1U << 0);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS1 = (1U << 1);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS2 = (1U << 2);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS3 = (1U << 3);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS4 = (1U << 4);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS5 = (1U << 5);  ///< Write Protect SW Status
        constexpr uint32_t WPVS = (1U << 7);  ///< Write Protect Violation Status
        constexpr uint32_t WPHWS0 = (1U << 8);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS1 = (1U << 9);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS2 = (1U << 10);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS3 = (1U << 11);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS4 = (1U << 12);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS5 = (1U << 13);  ///< Write Protect HW Status
        constexpr uint32_t WPVSRC = (16 << 16);  ///< Write Protect Violation Source
    }

    /// CMPV0 Register bits
    namespace cmpv0_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD0 Register bits
    namespace cmpvupd0_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM0 Register bits
    namespace cmpm0_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD0 Register bits
    namespace cmpmupd0_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV1 Register bits
    namespace cmpv1_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD1 Register bits
    namespace cmpvupd1_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM1 Register bits
    namespace cmpm1_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD1 Register bits
    namespace cmpmupd1_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV2 Register bits
    namespace cmpv2_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD2 Register bits
    namespace cmpvupd2_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM2 Register bits
    namespace cmpm2_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD2 Register bits
    namespace cmpmupd2_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV3 Register bits
    namespace cmpv3_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD3 Register bits
    namespace cmpvupd3_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM3 Register bits
    namespace cmpm3_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD3 Register bits
    namespace cmpmupd3_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV4 Register bits
    namespace cmpv4_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD4 Register bits
    namespace cmpvupd4_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM4 Register bits
    namespace cmpm4_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD4 Register bits
    namespace cmpmupd4_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV5 Register bits
    namespace cmpv5_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD5 Register bits
    namespace cmpvupd5_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM5 Register bits
    namespace cmpm5_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD5 Register bits
    namespace cmpmupd5_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV6 Register bits
    namespace cmpv6_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD6 Register bits
    namespace cmpvupd6_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM6 Register bits
    namespace cmpm6_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD6 Register bits
    namespace cmpmupd6_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV7 Register bits
    namespace cmpv7_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD7 Register bits
    namespace cmpvupd7_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM7 Register bits
    namespace cmpm7_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD7 Register bits
    namespace cmpmupd7_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMR0 Register bits
    namespace cmr0_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CES = (1U << 10);  ///< Counter Event Selection
        constexpr uint32_t DTE = (1U << 16);  ///< Dead-Time Generator Enable
        constexpr uint32_t DTHI = (1U << 17);  ///< Dead-Time PWMHx Output Inverted
        constexpr uint32_t DTLI = (1U << 18);  ///< Dead-Time PWMLx Output Inverted
    }

    /// CDTY0 Register bits
    namespace cdty0_bits {
        constexpr uint32_t CDTY = (24 << 0);  ///< Channel Duty-Cycle
    }

    /// CDTYUPD0 Register bits
    namespace cdtyupd0_bits {
        constexpr uint32_t CDTYUPD = (24 << 0);  ///< Channel Duty-Cycle Update
    }

    /// CPRD0 Register bits
    namespace cprd0_bits {
        constexpr uint32_t CPRD = (24 << 0);  ///< Channel Period
    }

    /// CPRDUPD0 Register bits
    namespace cprdupd0_bits {
        constexpr uint32_t CPRDUPD = (24 << 0);  ///< Channel Period Update
    }

    /// CCNT0 Register bits
    namespace ccnt0_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< Channel Counter Register
    }

    /// DT0 Register bits
    namespace dt0_bits {
        constexpr uint32_t DTH = (16 << 0);  ///< Dead-Time Value for PWMHx Output
        constexpr uint32_t DTL = (16 << 16);  ///< Dead-Time Value for PWMLx Output
    }

    /// DTUPD0 Register bits
    namespace dtupd0_bits {
        constexpr uint32_t DTHUPD = (16 << 0);  ///< Dead-Time Value Update for PWMHx Output
        constexpr uint32_t DTLUPD = (16 << 16);  ///< Dead-Time Value Update for PWMLx Output
    }

    /// CMR1 Register bits
    namespace cmr1_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CES = (1U << 10);  ///< Counter Event Selection
        constexpr uint32_t DTE = (1U << 16);  ///< Dead-Time Generator Enable
        constexpr uint32_t DTHI = (1U << 17);  ///< Dead-Time PWMHx Output Inverted
        constexpr uint32_t DTLI = (1U << 18);  ///< Dead-Time PWMLx Output Inverted
    }

    /// CDTY1 Register bits
    namespace cdty1_bits {
        constexpr uint32_t CDTY = (24 << 0);  ///< Channel Duty-Cycle
    }

    /// CDTYUPD1 Register bits
    namespace cdtyupd1_bits {
        constexpr uint32_t CDTYUPD = (24 << 0);  ///< Channel Duty-Cycle Update
    }

    /// CPRD1 Register bits
    namespace cprd1_bits {
        constexpr uint32_t CPRD = (24 << 0);  ///< Channel Period
    }

    /// CPRDUPD1 Register bits
    namespace cprdupd1_bits {
        constexpr uint32_t CPRDUPD = (24 << 0);  ///< Channel Period Update
    }

    /// CCNT1 Register bits
    namespace ccnt1_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< Channel Counter Register
    }

    /// DT1 Register bits
    namespace dt1_bits {
        constexpr uint32_t DTH = (16 << 0);  ///< Dead-Time Value for PWMHx Output
        constexpr uint32_t DTL = (16 << 16);  ///< Dead-Time Value for PWMLx Output
    }

    /// DTUPD1 Register bits
    namespace dtupd1_bits {
        constexpr uint32_t DTHUPD = (16 << 0);  ///< Dead-Time Value Update for PWMHx Output
        constexpr uint32_t DTLUPD = (16 << 16);  ///< Dead-Time Value Update for PWMLx Output
    }

    /// CMR2 Register bits
    namespace cmr2_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CES = (1U << 10);  ///< Counter Event Selection
        constexpr uint32_t DTE = (1U << 16);  ///< Dead-Time Generator Enable
        constexpr uint32_t DTHI = (1U << 17);  ///< Dead-Time PWMHx Output Inverted
        constexpr uint32_t DTLI = (1U << 18);  ///< Dead-Time PWMLx Output Inverted
    }

    /// CDTY2 Register bits
    namespace cdty2_bits {
        constexpr uint32_t CDTY = (24 << 0);  ///< Channel Duty-Cycle
    }

    /// CDTYUPD2 Register bits
    namespace cdtyupd2_bits {
        constexpr uint32_t CDTYUPD = (24 << 0);  ///< Channel Duty-Cycle Update
    }

    /// CPRD2 Register bits
    namespace cprd2_bits {
        constexpr uint32_t CPRD = (24 << 0);  ///< Channel Period
    }

    /// CPRDUPD2 Register bits
    namespace cprdupd2_bits {
        constexpr uint32_t CPRDUPD = (24 << 0);  ///< Channel Period Update
    }

    /// CCNT2 Register bits
    namespace ccnt2_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< Channel Counter Register
    }

    /// DT2 Register bits
    namespace dt2_bits {
        constexpr uint32_t DTH = (16 << 0);  ///< Dead-Time Value for PWMHx Output
        constexpr uint32_t DTL = (16 << 16);  ///< Dead-Time Value for PWMLx Output
    }

    /// DTUPD2 Register bits
    namespace dtupd2_bits {
        constexpr uint32_t DTHUPD = (16 << 0);  ///< Dead-Time Value Update for PWMHx Output
        constexpr uint32_t DTLUPD = (16 << 16);  ///< Dead-Time Value Update for PWMLx Output
    }

    /// CMR3 Register bits
    namespace cmr3_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CES = (1U << 10);  ///< Counter Event Selection
        constexpr uint32_t DTE = (1U << 16);  ///< Dead-Time Generator Enable
        constexpr uint32_t DTHI = (1U << 17);  ///< Dead-Time PWMHx Output Inverted
        constexpr uint32_t DTLI = (1U << 18);  ///< Dead-Time PWMLx Output Inverted
    }

    /// CDTY3 Register bits
    namespace cdty3_bits {
        constexpr uint32_t CDTY = (24 << 0);  ///< Channel Duty-Cycle
    }

    /// CDTYUPD3 Register bits
    namespace cdtyupd3_bits {
        constexpr uint32_t CDTYUPD = (24 << 0);  ///< Channel Duty-Cycle Update
    }

    /// CPRD3 Register bits
    namespace cprd3_bits {
        constexpr uint32_t CPRD = (24 << 0);  ///< Channel Period
    }

    /// CPRDUPD3 Register bits
    namespace cprdupd3_bits {
        constexpr uint32_t CPRDUPD = (24 << 0);  ///< Channel Period Update
    }

    /// CCNT3 Register bits
    namespace ccnt3_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< Channel Counter Register
    }

    /// DT3 Register bits
    namespace dt3_bits {
        constexpr uint32_t DTH = (16 << 0);  ///< Dead-Time Value for PWMHx Output
        constexpr uint32_t DTL = (16 << 16);  ///< Dead-Time Value for PWMLx Output
    }

    /// DTUPD3 Register bits
    namespace dtupd3_bits {
        constexpr uint32_t DTHUPD = (16 << 0);  ///< Dead-Time Value Update for PWMHx Output
        constexpr uint32_t DTLUPD = (16 << 16);  ///< Dead-Time Value Update for PWMLx Output
    }

    /// TPR Register bits
    namespace tpr_bits {
        constexpr uint32_t TXPTR = (32 << 0);  ///< Transmit Counter Register
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t TXCTR = (16 << 0);  ///< Transmit Counter Register
    }

    /// TNPR Register bits
    namespace tnpr_bits {
        constexpr uint32_t TXNPTR = (32 << 0);  ///< Transmit Next Pointer
    }

    /// TNCR Register bits
    namespace tncr_bits {
        constexpr uint32_t TXNCTR = (16 << 0);  ///< Transmit Counter Next
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART0_BASE = 0x40024000;
    constexpr uint32_t USART1_BASE = 0x40028000;
    constexpr uint32_t USART2_BASE = 0x4002C000;
    constexpr uint32_t UART0_BASE = 0x400E0600;
    constexpr uint32_t UART1_BASE = 0x400E0800;

    /// USART Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t CR_SPI_MODE;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t MR_SPI_MODE;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t IER;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IER_SPI_MODE;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IDR_SPI_MODE;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t IMR_SPI_MODE;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t CSR;  ///< Offset: 0x14 - Channel Status Register
        volatile uint32_t CSR_SPI_MODE;  ///< Offset: 0x14 - Channel Status Register
        volatile uint32_t RHR;  ///< Offset: 0x18 - Receiver Holding Register
        volatile uint32_t THR;  ///< Offset: 0x1C - Transmitter Holding Register
        volatile uint32_t BRGR;  ///< Offset: 0x20 - Baud Rate Generator Register
        volatile uint32_t RTOR;  ///< Offset: 0x24 - Receiver Time-out Register
        volatile uint32_t TTGR;  ///< Offset: 0x28 - Transmitter Timeguard Register
        volatile uint32_t FIDI;  ///< Offset: 0x40 - FI DI Ratio Register
        volatile uint32_t NER;  ///< Offset: 0x44 - Number of Errors Register
        volatile uint32_t IF;  ///< Offset: 0x4C - IrDA Filter Register
        volatile uint32_t MAN;  ///< Offset: 0x50 - Manchester Encoder Decoder Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t VERSION;  ///< Offset: 0xFC - Version Register
        volatile uint32_t RPR;  ///< Offset: 0x100 - Receive Pointer Register
        volatile uint32_t RCR;  ///< Offset: 0x104 - Receive Counter Register
        volatile uint32_t TPR;  ///< Offset: 0x108 - Transmit Pointer Register
        volatile uint32_t TCR;  ///< Offset: 0x10C - Transmit Counter Register
        volatile uint32_t RNPR;  ///< Offset: 0x110 - Receive Next Pointer Register
        volatile uint32_t RNCR;  ///< Offset: 0x114 - Receive Next Counter Register
        volatile uint32_t TNPR;  ///< Offset: 0x118 - Transmit Next Pointer Register
        volatile uint32_t TNCR;  ///< Offset: 0x11C - Transmit Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x120 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x124 - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* USART0 = reinterpret_cast<Registers*>(USART0_BASE);
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);
    inline Registers* UART1 = reinterpret_cast<Registers*>(UART1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RSTRX = (1U << 2);  ///< Reset Receiver
        constexpr uint32_t RSTTX = (1U << 3);  ///< Reset Transmitter
        constexpr uint32_t RXEN = (1U << 4);  ///< Receiver Enable
        constexpr uint32_t RXDIS = (1U << 5);  ///< Receiver Disable
        constexpr uint32_t TXEN = (1U << 6);  ///< Transmitter Enable
        constexpr uint32_t TXDIS = (1U << 7);  ///< Transmitter Disable
        constexpr uint32_t RSTSTA = (1U << 8);  ///< Reset Status Bits
        constexpr uint32_t STTBRK = (1U << 9);  ///< Start Break
        constexpr uint32_t STPBRK = (1U << 10);  ///< Stop Break
        constexpr uint32_t STTTO = (1U << 11);  ///< Start Time-out
        constexpr uint32_t SENDA = (1U << 12);  ///< Send Address
        constexpr uint32_t RSTIT = (1U << 13);  ///< Reset Iterations
        constexpr uint32_t RSTNACK = (1U << 14);  ///< Reset Non Acknowledge
        constexpr uint32_t RETTO = (1U << 15);  ///< Rearm Time-out
        constexpr uint32_t DTREN = (1U << 16);  ///< Data Terminal Ready Enable
        constexpr uint32_t DTRDIS = (1U << 17);  ///< Data Terminal Ready Disable
        constexpr uint32_t RTSEN = (1U << 18);  ///< Request to Send Enable
        constexpr uint32_t RTSDIS = (1U << 19);  ///< Request to Send Disable
    }

    /// CR_SPI_MODE Register bits
    namespace cr_spi_mode_bits {
        constexpr uint32_t RSTRX = (1U << 2);  ///< Reset Receiver
        constexpr uint32_t RSTTX = (1U << 3);  ///< Reset Transmitter
        constexpr uint32_t RXEN = (1U << 4);  ///< Receiver Enable
        constexpr uint32_t RXDIS = (1U << 5);  ///< Receiver Disable
        constexpr uint32_t TXEN = (1U << 6);  ///< Transmitter Enable
        constexpr uint32_t TXDIS = (1U << 7);  ///< Transmitter Disable
        constexpr uint32_t RSTSTA = (1U << 8);  ///< Reset Status Bits
        constexpr uint32_t FCS = (1U << 18);  ///< Force SPI Chip Select
        constexpr uint32_t RCS = (1U << 19);  ///< Release SPI Chip Select
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t USART_MODE = (4 << 0);  ///< USART Mode of Operation
        constexpr uint32_t USCLKS = (2 << 4);  ///< Clock Selection
        constexpr uint32_t CHRL = (2 << 6);  ///< Character Length.
        constexpr uint32_t SYNC = (1U << 8);  ///< Synchronous Mode Select
        constexpr uint32_t PAR = (3 << 9);  ///< Parity Type
        constexpr uint32_t NBSTOP = (2 << 12);  ///< Number of Stop Bits
        constexpr uint32_t CHMODE = (2 << 14);  ///< Channel Mode
        constexpr uint32_t MSBF = (1U << 16);  ///< Bit Order
        constexpr uint32_t MODE9 = (1U << 17);  ///< 9-bit Character Length
        constexpr uint32_t CLKO = (1U << 18);  ///< Clock Output Select
        constexpr uint32_t OVER = (1U << 19);  ///< Oversampling Mode
        constexpr uint32_t INACK = (1U << 20);  ///< Inhibit Non Acknowledge
        constexpr uint32_t DSNACK = (1U << 21);  ///< Disable Successive NACK
        constexpr uint32_t VAR_SYNC = (1U << 22);  ///< Variable Synchronization of Command/Data Sync Start Frame Delimiter
        constexpr uint32_t INVDATA = (1U << 23);  ///< INverted Data
        constexpr uint32_t MAX_ITERATION = (3 << 24);  ///< Maximum Number of Automatic Iteration
        constexpr uint32_t FILTER = (1U << 28);  ///< Infrared Receive Line Filter
        constexpr uint32_t MAN = (1U << 29);  ///< Manchester Encoder/Decoder Enable
        constexpr uint32_t MODSYNC = (1U << 30);  ///< Manchester Synchronization Mode
        constexpr uint32_t ONEBIT = (1U << 31);  ///< Start Frame Delimiter Selector
    }

    /// MR_SPI_MODE Register bits
    namespace mr_spi_mode_bits {
        constexpr uint32_t USART_MODE = (4 << 0);  ///< USART Mode of Operation
        constexpr uint32_t USCLKS = (2 << 4);  ///< Clock Selection
        constexpr uint32_t CHRL = (2 << 6);  ///< Character Length.
        constexpr uint32_t CPHA = (1U << 8);  ///< SPI Clock Phase
        constexpr uint32_t CPOL = (1U << 16);  ///< SPI Clock Polarity
        constexpr uint32_t WRDBT = (1U << 20);  ///< Wait Read Data Before Transfer
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Enable
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 3);  ///< End of Receive Transfer Interrupt Enable (available in all USART modes of operation)
        constexpr uint32_t ENDTX = (1U << 4);  ///< End of Transmit Interrupt Enable (available in all USART modes of operation)
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Enable
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Enable
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Enable
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached Interrupt Enable
        constexpr uint32_t TXBUFE = (1U << 11);  ///< Buffer Empty Interrupt Enable (available in all USART modes of operation)
        constexpr uint32_t RXBUFF = (1U << 12);  ///< Buffer Full Interrupt Enable (available in all USART modes of operation)
        constexpr uint32_t NACK = (1U << 13);  ///< Non AcknowledgeInterrupt Enable
        constexpr uint32_t RIIC = (1U << 16);  ///< Ring Indicator Input Change Enable
        constexpr uint32_t DSRIC = (1U << 17);  ///< Data Set Ready Input Change Enable
        constexpr uint32_t DCDIC = (1U << 18);  ///< Data Carrier Detect Input Change Interrupt Enable
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Enable
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Enable
    }

    /// IER_SPI_MODE Register bits
    namespace ier_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Enable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Enable
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Disable
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 3);  ///< End of Receive Transfer Interrupt Disable (available in all USART modes of operation)
        constexpr uint32_t ENDTX = (1U << 4);  ///< End of Transmit Interrupt Disable (available in all USART modes of operation)
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Disable
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Disable
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Disable
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached Interrupt Disable
        constexpr uint32_t TXBUFE = (1U << 11);  ///< Buffer Empty Interrupt Disable (available in all USART modes of operation)
        constexpr uint32_t RXBUFF = (1U << 12);  ///< Buffer Full Interrupt Disable (available in all USART modes of operation)
        constexpr uint32_t NACK = (1U << 13);  ///< Non AcknowledgeInterrupt Disable
        constexpr uint32_t RIIC = (1U << 16);  ///< Ring Indicator Input Change Disable
        constexpr uint32_t DSRIC = (1U << 17);  ///< Data Set Ready Input Change Disable
        constexpr uint32_t DCDIC = (1U << 18);  ///< Data Carrier Detect Input Change Interrupt Disable
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Disable
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Disable
    }

    /// IDR_SPI_MODE Register bits
    namespace idr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Disable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Disable
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Mask
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 3);  ///< End of Receive Transfer Interrupt Mask (available in all USART modes of operation)
        constexpr uint32_t ENDTX = (1U << 4);  ///< End of Transmit Interrupt Mask (available in all USART modes of operation)
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Mask
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Mask
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Mask
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached Interrupt Mask
        constexpr uint32_t TXBUFE = (1U << 11);  ///< Buffer Empty Interrupt Mask (available in all USART modes of operation)
        constexpr uint32_t RXBUFF = (1U << 12);  ///< Buffer Full Interrupt Mask (available in all USART modes of operation)
        constexpr uint32_t NACK = (1U << 13);  ///< Non AcknowledgeInterrupt Mask
        constexpr uint32_t RIIC = (1U << 16);  ///< Ring Indicator Input Change Mask
        constexpr uint32_t DSRIC = (1U << 17);  ///< Data Set Ready Input Change Mask
        constexpr uint32_t DCDIC = (1U << 18);  ///< Data Carrier Detect Input Change Interrupt Mask
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Mask
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Mask
    }

    /// IMR_SPI_MODE Register bits
    namespace imr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Mask
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Mask
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Mask
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t RXBRK = (1U << 2);  ///< Break Received/End of Break
        constexpr uint32_t ENDRX = (1U << 3);  ///< End of Receiver Transfer
        constexpr uint32_t ENDTX = (1U << 4);  ///< End of Transmitter Transfer
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Receiver Time-out
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached
        constexpr uint32_t TXBUFE = (1U << 11);  ///< Transmission Buffer Empty
        constexpr uint32_t RXBUFF = (1U << 12);  ///< Reception Buffer Full
        constexpr uint32_t NACK = (1U << 13);  ///< Non AcknowledgeInterrupt
        constexpr uint32_t RIIC = (1U << 16);  ///< Ring Indicator Input Change Flag
        constexpr uint32_t DSRIC = (1U << 17);  ///< Data Set Ready Input Change Flag
        constexpr uint32_t DCDIC = (1U << 18);  ///< Data Carrier Detect Input Change Flag
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Flag
        constexpr uint32_t RI = (1U << 20);  ///< Image of RI Input
        constexpr uint32_t DSR = (1U << 21);  ///< Image of DSR Input
        constexpr uint32_t DCD = (1U << 22);  ///< Image of DCD Input
        constexpr uint32_t CTS = (1U << 23);  ///< Image of CTS Input
        constexpr uint32_t MANERR = (1U << 24);  ///< Manchester Error
    }

    /// CSR_SPI_MODE Register bits
    namespace csr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t UNRE = (1U << 10);  ///< Underrun Error
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RXCHR = (9 << 0);  ///< Received Character
        constexpr uint32_t RXSYNH = (1U << 15);  ///< Received Sync
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TXCHR = (9 << 0);  ///< Character to be Transmitted
        constexpr uint32_t TXSYNH = (1U << 15);  ///< Sync Field to be transmitted
    }

    /// BRGR Register bits
    namespace brgr_bits {
        constexpr uint32_t CD = (16 << 0);  ///< Clock Divider
        constexpr uint32_t FP = (3 << 16);  ///< Fractional Part
    }

    /// RTOR Register bits
    namespace rtor_bits {
        constexpr uint32_t TO = (16 << 0);  ///< Time-out Value
    }

    /// TTGR Register bits
    namespace ttgr_bits {
        constexpr uint32_t TG = (8 << 0);  ///< Timeguard Value
    }

    /// FIDI Register bits
    namespace fidi_bits {
        constexpr uint32_t FI_DI_RATIO = (11 << 0);  ///< FI Over DI Ratio Value
    }

    /// NER Register bits
    namespace ner_bits {
        constexpr uint32_t NB_ERRORS = (8 << 0);  ///< Number of Errors
    }

    /// IF Register bits
    namespace if_bits {
        constexpr uint32_t IRDA_FILTER = (8 << 0);  ///< IrDA Filter
    }

    /// MAN Register bits
    namespace man_bits {
        constexpr uint32_t TX_PL = (4 << 0);  ///< Transmitter Preamble Length
        constexpr uint32_t TX_PP = (2 << 8);  ///< Transmitter Preamble Pattern
        constexpr uint32_t TX_MPOL = (1U << 12);  ///< Transmitter Manchester Polarity
        constexpr uint32_t RX_PL = (4 << 16);  ///< Receiver Preamble Length
        constexpr uint32_t RX_PP = (2 << 24);  ///< Receiver Preamble Pattern detected
        constexpr uint32_t RX_MPOL = (1U << 28);  ///< Receiver Manchester Polarity
        constexpr uint32_t ONE = (1U << 29);  ///< Must Be Set to 1
        constexpr uint32_t DRIFT = (1U << 30);  ///< Drift compensation
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// VERSION Register bits
    namespace version_bits {
        constexpr uint32_t VERSION = (12 << 0);  ///< Harware Module Version
        constexpr uint32_t MFN = (3 << 16);  ///< Metal Fix Number
    }

    /// RPR Register bits
    namespace rpr_bits {
        constexpr uint32_t RXPTR = (32 << 0);  ///< Receive Pointer Register
    }

    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t RXCTR = (16 << 0);  ///< Receive Counter Register
    }

    /// TPR Register bits
    namespace tpr_bits {
        constexpr uint32_t TXPTR = (32 << 0);  ///< Transmit Counter Register
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t TXCTR = (16 << 0);  ///< Transmit Counter Register
    }

    /// RNPR Register bits
    namespace rnpr_bits {
        constexpr uint32_t RXNPTR = (32 << 0);  ///< Receive Next Pointer
    }

    /// RNCR Register bits
    namespace rncr_bits {
        constexpr uint32_t RXNCTR = (16 << 0);  ///< Receive Next Counter
    }

    /// TNPR Register bits
    namespace tnpr_bits {
        constexpr uint32_t TXNPTR = (32 << 0);  ///< Transmit Next Pointer
    }

    /// TNCR Register bits
    namespace tncr_bits {
        constexpr uint32_t TXNCTR = (16 << 0);  ///< Transmit Counter Next
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// UDP Peripheral
// ============================================================================

namespace udp {
    /// Base addresses
    constexpr uint32_t UDP_BASE = 0x40034000;

    /// UDP Register structure
    struct Registers {
        volatile uint32_t FRM_NUM;  ///< Offset: 0x00 - Frame Number Register
        volatile uint32_t GLB_STAT;  ///< Offset: 0x04 - Global State Register
        volatile uint32_t FADDR;  ///< Offset: 0x08 - Function Address Register
        volatile uint32_t IER;  ///< Offset: 0x10 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x14 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x1C - Interrupt Status Register
        volatile uint32_t ICR;  ///< Offset: 0x20 - Interrupt Clear Register
        volatile uint32_t RST_EP;  ///< Offset: 0x28 - Reset Endpoint Register
        volatile uint32_t CSR[%s];  ///< Offset: 0x30 - Endpoint Control and Status Register
        volatile uint32_t CSR0_ISOENDPT;  ///< Offset: 0x30 - Endpoint Control and Status Register
        volatile uint32_t FDR[%s];  ///< Offset: 0x50 - Endpoint FIFO Data Register
        volatile uint32_t TXVC;  ///< Offset: 0x74 - Transceiver Control Register
    };

    /// Peripheral instances
    inline Registers* UDP = reinterpret_cast<Registers*>(UDP_BASE);

    // Bit definitions
    /// FRM_NUM Register bits
    namespace frm_num_bits {
        constexpr uint32_t FRM_NUM = (11 << 0);  ///< Frame Number as Defined in the Packet Field Formats
        constexpr uint32_t FRM_ERR = (1U << 16);  ///< Frame Error
        constexpr uint32_t FRM_OK = (1U << 17);  ///< Frame OK
    }

    /// GLB_STAT Register bits
    namespace glb_stat_bits {
        constexpr uint32_t FADDEN = (1U << 0);  ///< Function Address Enable
        constexpr uint32_t CONFG = (1U << 1);  ///< Configured
        constexpr uint32_t ESR = (1U << 2);  ///< Enable Send Resume
        constexpr uint32_t RSMINPR = (1U << 3);  ///< RSMINPR
        constexpr uint32_t RMWUPE = (1U << 4);  ///< Remote Wake Up Enable
    }

    /// FADDR Register bits
    namespace faddr_bits {
        constexpr uint32_t FADD = (7 << 0);  ///< Function Address Value
        constexpr uint32_t FEN = (1U << 8);  ///< Function Enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t EP0INT = (1U << 0);  ///< Enable Endpoint 0 Interrupt
        constexpr uint32_t EP1INT = (1U << 1);  ///< Enable Endpoint 1 Interrupt
        constexpr uint32_t EP2INT = (1U << 2);  ///< Enable Endpoint 2Interrupt
        constexpr uint32_t EP3INT = (1U << 3);  ///< Enable Endpoint 3 Interrupt
        constexpr uint32_t EP4INT = (1U << 4);  ///< Enable Endpoint 4 Interrupt
        constexpr uint32_t EP5INT = (1U << 5);  ///< Enable Endpoint 5 Interrupt
        constexpr uint32_t EP6INT = (1U << 6);  ///< Enable Endpoint 6 Interrupt
        constexpr uint32_t EP7INT = (1U << 7);  ///< Enable Endpoint 7 Interrupt
        constexpr uint32_t RXSUSP = (1U << 8);  ///< Enable UDP Suspend Interrupt
        constexpr uint32_t RXRSM = (1U << 9);  ///< Enable UDP Resume Interrupt
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Enable Start Of Frame Interrupt
        constexpr uint32_t WAKEUP = (1U << 13);  ///< Enable UDP bus Wakeup Interrupt
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t EP0INT = (1U << 0);  ///< Disable Endpoint 0 Interrupt
        constexpr uint32_t EP1INT = (1U << 1);  ///< Disable Endpoint 1 Interrupt
        constexpr uint32_t EP2INT = (1U << 2);  ///< Disable Endpoint 2 Interrupt
        constexpr uint32_t EP3INT = (1U << 3);  ///< Disable Endpoint 3 Interrupt
        constexpr uint32_t EP4INT = (1U << 4);  ///< Disable Endpoint 4 Interrupt
        constexpr uint32_t EP5INT = (1U << 5);  ///< Disable Endpoint 5 Interrupt
        constexpr uint32_t EP6INT = (1U << 6);  ///< Disable Endpoint 6 Interrupt
        constexpr uint32_t EP7INT = (1U << 7);  ///< Disable Endpoint 7 Interrupt
        constexpr uint32_t RXSUSP = (1U << 8);  ///< Disable UDP Suspend Interrupt
        constexpr uint32_t RXRSM = (1U << 9);  ///< Disable UDP Resume Interrupt
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Disable Start Of Frame Interrupt
        constexpr uint32_t WAKEUP = (1U << 13);  ///< Disable USB Bus Interrupt
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t EP0INT = (1U << 0);  ///< Mask Endpoint 0 Interrupt
        constexpr uint32_t EP1INT = (1U << 1);  ///< Mask Endpoint 1 Interrupt
        constexpr uint32_t EP2INT = (1U << 2);  ///< Mask Endpoint 2 Interrupt
        constexpr uint32_t EP3INT = (1U << 3);  ///< Mask Endpoint 3 Interrupt
        constexpr uint32_t EP4INT = (1U << 4);  ///< Mask Endpoint 4 Interrupt
        constexpr uint32_t EP5INT = (1U << 5);  ///< Mask Endpoint 5 Interrupt
        constexpr uint32_t EP6INT = (1U << 6);  ///< Mask Endpoint 6 Interrupt
        constexpr uint32_t EP7INT = (1U << 7);  ///< Mask Endpoint 7 Interrupt
        constexpr uint32_t RXSUSP = (1U << 8);  ///< Mask UDP Suspend Interrupt
        constexpr uint32_t RXRSM = (1U << 9);  ///< Mask UDP Resume Interrupt.
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Mask Start Of Frame Interrupt
        constexpr uint32_t BIT12 = (1U << 12);  ///< UDP_IMR Bit 12
        constexpr uint32_t WAKEUP = (1U << 13);  ///< USB Bus WAKEUP Interrupt
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t EP0INT = (1U << 0);  ///< Endpoint 0 Interrupt Status
        constexpr uint32_t EP1INT = (1U << 1);  ///< Endpoint 1 Interrupt Status
        constexpr uint32_t EP2INT = (1U << 2);  ///< Endpoint 2 Interrupt Status
        constexpr uint32_t EP3INT = (1U << 3);  ///< Endpoint 3 Interrupt Status
        constexpr uint32_t EP4INT = (1U << 4);  ///< Endpoint 4 Interrupt Status
        constexpr uint32_t EP5INT = (1U << 5);  ///< Endpoint 5 Interrupt Status
        constexpr uint32_t EP6INT = (1U << 6);  ///< Endpoint 6 Interrupt Status
        constexpr uint32_t EP7INT = (1U << 7);  ///< Endpoint 7Interrupt Status
        constexpr uint32_t RXSUSP = (1U << 8);  ///< UDP Suspend Interrupt Status
        constexpr uint32_t RXRSM = (1U << 9);  ///< UDP Resume Interrupt Status
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Start of Frame Interrupt Status
        constexpr uint32_t ENDBUSRES = (1U << 12);  ///< End of BUS Reset Interrupt Status
        constexpr uint32_t WAKEUP = (1U << 13);  ///< UDP Resume Interrupt Status
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t RXSUSP = (1U << 8);  ///< Clear UDP Suspend Interrupt
        constexpr uint32_t RXRSM = (1U << 9);  ///< Clear UDP Resume Interrupt
        constexpr uint32_t EXTRSM = (1U << 10);  ///< EXTRSM
        constexpr uint32_t SOFINT = (1U << 11);  ///< Clear Start Of Frame Interrupt
        constexpr uint32_t ENDBUSRES = (1U << 12);  ///< Clear End of Bus Reset Interrupt
        constexpr uint32_t WAKEUP = (1U << 13);  ///< Clear Wakeup Interrupt
    }

    /// RST_EP Register bits
    namespace rst_ep_bits {
        constexpr uint32_t EP0 = (1U << 0);  ///< Reset Endpoint 0
        constexpr uint32_t EP1 = (1U << 1);  ///< Reset Endpoint 1
        constexpr uint32_t EP2 = (1U << 2);  ///< Reset Endpoint 2
        constexpr uint32_t EP3 = (1U << 3);  ///< Reset Endpoint 3
        constexpr uint32_t EP4 = (1U << 4);  ///< Reset Endpoint 4
        constexpr uint32_t EP5 = (1U << 5);  ///< Reset Endpoint 5
        constexpr uint32_t EP6 = (1U << 6);  ///< Reset Endpoint 6
        constexpr uint32_t EP7 = (1U << 7);  ///< Reset Endpoint 7
    }

    /// CSR[%s] Register bits
    namespace csr[%s]_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Generates an IN Packet with Data Previously Written in the DPR
        constexpr uint32_t RX_DATA_BK0 = (1U << 1);  ///< Receive Data Bank 0
        constexpr uint32_t RXSETUP = (1U << 2);  ///< Received Setup
        constexpr uint32_t STALLSENT = (1U << 3);  ///< Stall Sent
        constexpr uint32_t TXPKTRDY = (1U << 4);  ///< Transmit Packet Ready
        constexpr uint32_t FORCESTALL = (1U << 5);  ///< Force Stall (used by Control, Bulk and Isochronous Endpoints)
        constexpr uint32_t RX_DATA_BK1 = (1U << 6);  ///< Receive Data Bank 1 (only used by endpoints with ping-pong attributes)
        constexpr uint32_t DIR = (1U << 7);  ///< Transfer Direction (only available for control endpoints)
        constexpr uint32_t EPTYPE = (3 << 8);  ///< Endpoint Type
        constexpr uint32_t DTGLE = (1U << 11);  ///< Data Toggle
        constexpr uint32_t EPEDS = (1U << 15);  ///< Endpoint Enable Disable
        constexpr uint32_t RXBYTECNT = (11 << 16);  ///< Number of Bytes Available in the FIFO
    }

    /// CSR0_ISOENDPT Register bits
    namespace csr0_isoendpt_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Generates an IN Packet with Data Previously Written in the DPR
        constexpr uint32_t RX_DATA_BK0 = (1U << 1);  ///< Receive Data Bank 0
        constexpr uint32_t RXSETUP = (1U << 2);  ///< Received Setup
        constexpr uint32_t ISOERROR = (1U << 3);  ///< A CRC error has been detected in an isochronous transfer
        constexpr uint32_t TXPKTRDY = (1U << 4);  ///< Transmit Packet Ready
        constexpr uint32_t FORCESTALL = (1U << 5);  ///< Force Stall (used by Control, Bulk and Isochronous Endpoints)
        constexpr uint32_t RX_DATA_BK1 = (1U << 6);  ///< Receive Data Bank 1 (only used by endpoints with ping-pong attributes)
        constexpr uint32_t DIR = (1U << 7);  ///< Transfer Direction (only available for control endpoints)
        constexpr uint32_t EPTYPE = (3 << 8);  ///< Endpoint Type
        constexpr uint32_t DTGLE = (1U << 11);  ///< Data Toggle
        constexpr uint32_t EPEDS = (1U << 15);  ///< Endpoint Enable Disable
        constexpr uint32_t RXBYTECNT = (11 << 16);  ///< Number of Bytes Available in the FIFO
    }

    /// FDR[%s] Register bits
    namespace fdr[%s]_bits {
        constexpr uint32_t FIFO_DATA = (8 << 0);  ///< FIFO Data Value
    }

    /// TXVC Register bits
    namespace txvc_bits {
        constexpr uint32_t TXVDIS = (1U << 8);  ///< Transceiver Disable
        constexpr uint32_t PUON = (1U << 9);  ///< Pull-up On
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_BASE = 0x40038000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t SEQR1;  ///< Offset: 0x08 - Channel Sequence Register 1
        volatile uint32_t SEQR2;  ///< Offset: 0x0C - Channel Sequence Register 2
        volatile uint32_t CHER;  ///< Offset: 0x10 - Channel Enable Register
        volatile uint32_t CHDR;  ///< Offset: 0x14 - Channel Disable Register
        volatile uint32_t CHSR;  ///< Offset: 0x18 - Channel Status Register
        volatile uint32_t LCDR;  ///< Offset: 0x20 - Last Converted Data Register
        volatile uint32_t IER;  ///< Offset: 0x24 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x28 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x2C - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x30 - Interrupt Status Register
        volatile uint32_t OVER;  ///< Offset: 0x3C - Overrun Status Register
        volatile uint32_t EMR;  ///< Offset: 0x40 - Extended Mode Register
        volatile uint32_t CWR;  ///< Offset: 0x44 - Compare Window Register
        volatile uint32_t CGR;  ///< Offset: 0x48 - Channel Gain Register
        volatile uint32_t COR;  ///< Offset: 0x4C - Channel Offset Register
        volatile uint32_t CDR[%s];  ///< Offset: 0x50 - Channel Data Register
        volatile uint32_t ACR;  ///< Offset: 0x94 - Analog Control Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t RPR;  ///< Offset: 0x100 - Receive Pointer Register
        volatile uint32_t RCR;  ///< Offset: 0x104 - Receive Counter Register
        volatile uint32_t RNPR;  ///< Offset: 0x110 - Receive Next Pointer Register
        volatile uint32_t RNCR;  ///< Offset: 0x114 - Receive Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x120 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x124 - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* ADC = reinterpret_cast<Registers*>(ADC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SWRST = (1U << 0);  ///< Software Reset
        constexpr uint32_t START = (1U << 1);  ///< Start Conversion
        constexpr uint32_t AUTOCAL = (1U << 3);  ///< Automatic Calibration of ADC
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t TRGEN = (1U << 0);  ///< Trigger Enable
        constexpr uint32_t TRGSEL = (3 << 1);  ///< Trigger Selection
        constexpr uint32_t LOWRES = (1U << 4);  ///< Resolution
        constexpr uint32_t SLEEP = (1U << 5);  ///< Sleep Mode
        constexpr uint32_t FWUP = (1U << 6);  ///< Fast Wake Up
        constexpr uint32_t FREERUN = (1U << 7);  ///< Free Run Mode
        constexpr uint32_t PRESCAL = (8 << 8);  ///< Prescaler Rate Selection
        constexpr uint32_t STARTUP = (4 << 16);  ///< Start Up Time
        constexpr uint32_t SETTLING = (2 << 20);  ///< Analog Settling Time
        constexpr uint32_t ANACH = (1U << 23);  ///< Analog Change
        constexpr uint32_t TRACKTIM = (4 << 24);  ///< Tracking Time
        constexpr uint32_t TRANSFER = (2 << 28);  ///< Transfer Period
        constexpr uint32_t USEQ = (1U << 31);  ///< Use Sequence Enable
    }

    /// SEQR1 Register bits
    namespace seqr1_bits {
        constexpr uint32_t USCH1 = (3 << 0);  ///< User Sequence Number 1
        constexpr uint32_t USCH2 = (3 << 4);  ///< User Sequence Number 2
        constexpr uint32_t USCH3 = (3 << 8);  ///< User Sequence Number 3
        constexpr uint32_t USCH4 = (3 << 12);  ///< User Sequence Number 4
        constexpr uint32_t USCH5 = (3 << 16);  ///< User Sequence Number 5
        constexpr uint32_t USCH6 = (3 << 20);  ///< User Sequence Number 6
        constexpr uint32_t USCH7 = (3 << 24);  ///< User Sequence Number 7
        constexpr uint32_t USCH8 = (3 << 28);  ///< User Sequence Number 8
    }

    /// SEQR2 Register bits
    namespace seqr2_bits {
        constexpr uint32_t USCH9 = (3 << 0);  ///< User Sequence Number 9
        constexpr uint32_t USCH10 = (3 << 4);  ///< User Sequence Number 10
        constexpr uint32_t USCH11 = (3 << 8);  ///< User Sequence Number 11
        constexpr uint32_t USCH12 = (3 << 12);  ///< User Sequence Number 12
        constexpr uint32_t USCH13 = (3 << 16);  ///< User Sequence Number 13
        constexpr uint32_t USCH14 = (3 << 20);  ///< User Sequence Number 14
        constexpr uint32_t USCH15 = (3 << 24);  ///< User Sequence Number 15
        constexpr uint32_t USCH16 = (3 << 28);  ///< User Sequence Number 16
    }

    /// CHER Register bits
    namespace cher_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Enable
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Enable
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Enable
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Enable
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Enable
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Enable
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Enable
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Enable
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Enable
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Enable
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Enable
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Enable
        constexpr uint32_t CH12 = (1U << 12);  ///< Channel 12 Enable
        constexpr uint32_t CH13 = (1U << 13);  ///< Channel 13 Enable
        constexpr uint32_t CH14 = (1U << 14);  ///< Channel 14 Enable
        constexpr uint32_t CH15 = (1U << 15);  ///< Channel 15 Enable
    }

    /// CHDR Register bits
    namespace chdr_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Disable
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Disable
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Disable
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Disable
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Disable
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Disable
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Disable
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Disable
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Disable
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Disable
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Disable
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Disable
        constexpr uint32_t CH12 = (1U << 12);  ///< Channel 12 Disable
        constexpr uint32_t CH13 = (1U << 13);  ///< Channel 13 Disable
        constexpr uint32_t CH14 = (1U << 14);  ///< Channel 14 Disable
        constexpr uint32_t CH15 = (1U << 15);  ///< Channel 15 Disable
    }

    /// CHSR Register bits
    namespace chsr_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Status
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Status
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Status
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Status
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Status
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Status
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Status
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Status
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Status
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Status
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Status
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Status
        constexpr uint32_t CH12 = (1U << 12);  ///< Channel 12 Status
        constexpr uint32_t CH13 = (1U << 13);  ///< Channel 13 Status
        constexpr uint32_t CH14 = (1U << 14);  ///< Channel 14 Status
        constexpr uint32_t CH15 = (1U << 15);  ///< Channel 15 Status
    }

    /// LCDR Register bits
    namespace lcdr_bits {
        constexpr uint32_t LDATA = (12 << 0);  ///< Last Data Converted
        constexpr uint32_t CHNB = (4 << 12);  ///< Channel Number
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Enable 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Enable 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Enable 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Enable 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Enable 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Enable 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Enable 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Enable 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Enable 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Enable 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Enable 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Enable 11
        constexpr uint32_t EOC12 = (1U << 12);  ///< End of Conversion Interrupt Enable 12
        constexpr uint32_t EOC13 = (1U << 13);  ///< End of Conversion Interrupt Enable 13
        constexpr uint32_t EOC14 = (1U << 14);  ///< End of Conversion Interrupt Enable 14
        constexpr uint32_t EOC15 = (1U << 15);  ///< End of Conversion Interrupt Enable 15
        constexpr uint32_t EOCAL = (1U << 23);  ///< End of Calibration Sequence
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Enable
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Enable
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 27);  ///< End of Receive Buffer Interrupt Enable
        constexpr uint32_t RXBUFF = (1U << 28);  ///< Receive Buffer Full Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Disable 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Disable 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Disable 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Disable 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Disable 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Disable 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Disable 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Disable 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Disable 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Disable 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Disable 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Disable 11
        constexpr uint32_t EOC12 = (1U << 12);  ///< End of Conversion Interrupt Disable 12
        constexpr uint32_t EOC13 = (1U << 13);  ///< End of Conversion Interrupt Disable 13
        constexpr uint32_t EOC14 = (1U << 14);  ///< End of Conversion Interrupt Disable 14
        constexpr uint32_t EOC15 = (1U << 15);  ///< End of Conversion Interrupt Disable 15
        constexpr uint32_t EOCAL = (1U << 23);  ///< End of Calibration Sequence
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Disable
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Disable
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 27);  ///< End of Receive Buffer Interrupt Disable
        constexpr uint32_t RXBUFF = (1U << 28);  ///< Receive Buffer Full Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Mask 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Mask 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Mask 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Mask 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Mask 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Mask 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Mask 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Mask 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Mask 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Mask 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Mask 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Mask 11
        constexpr uint32_t EOC12 = (1U << 12);  ///< End of Conversion Interrupt Mask 12
        constexpr uint32_t EOC13 = (1U << 13);  ///< End of Conversion Interrupt Mask 13
        constexpr uint32_t EOC14 = (1U << 14);  ///< End of Conversion Interrupt Mask 14
        constexpr uint32_t EOC15 = (1U << 15);  ///< End of Conversion Interrupt Mask 15
        constexpr uint32_t EOCAL = (1U << 23);  ///< End of Calibration Sequence
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Mask
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Mask
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 27);  ///< End of Receive Buffer Interrupt Mask
        constexpr uint32_t RXBUFF = (1U << 28);  ///< Receive Buffer Full Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion 11
        constexpr uint32_t EOC12 = (1U << 12);  ///< End of Conversion 12
        constexpr uint32_t EOC13 = (1U << 13);  ///< End of Conversion 13
        constexpr uint32_t EOC14 = (1U << 14);  ///< End of Conversion 14
        constexpr uint32_t EOC15 = (1U << 15);  ///< End of Conversion 15
        constexpr uint32_t EOCAL = (1U << 23);  ///< End of Calibration Sequence
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Error
        constexpr uint32_t ENDRX = (1U << 27);  ///< End of RX Buffer
        constexpr uint32_t RXBUFF = (1U << 28);  ///< RX Buffer Full
    }

    /// OVER Register bits
    namespace over_bits {
        constexpr uint32_t OVRE0 = (1U << 0);  ///< Overrun Error 0
        constexpr uint32_t OVRE1 = (1U << 1);  ///< Overrun Error 1
        constexpr uint32_t OVRE2 = (1U << 2);  ///< Overrun Error 2
        constexpr uint32_t OVRE3 = (1U << 3);  ///< Overrun Error 3
        constexpr uint32_t OVRE4 = (1U << 4);  ///< Overrun Error 4
        constexpr uint32_t OVRE5 = (1U << 5);  ///< Overrun Error 5
        constexpr uint32_t OVRE6 = (1U << 6);  ///< Overrun Error 6
        constexpr uint32_t OVRE7 = (1U << 7);  ///< Overrun Error 7
        constexpr uint32_t OVRE8 = (1U << 8);  ///< Overrun Error 8
        constexpr uint32_t OVRE9 = (1U << 9);  ///< Overrun Error 9
        constexpr uint32_t OVRE10 = (1U << 10);  ///< Overrun Error 10
        constexpr uint32_t OVRE11 = (1U << 11);  ///< Overrun Error 11
        constexpr uint32_t OVRE12 = (1U << 12);  ///< Overrun Error 12
        constexpr uint32_t OVRE13 = (1U << 13);  ///< Overrun Error 13
        constexpr uint32_t OVRE14 = (1U << 14);  ///< Overrun Error 14
        constexpr uint32_t OVRE15 = (1U << 15);  ///< Overrun Error 15
    }

    /// EMR Register bits
    namespace emr_bits {
        constexpr uint32_t CMPMODE = (2 << 0);  ///< Comparison Mode
        constexpr uint32_t CMPSEL = (4 << 4);  ///< Comparison Selected Channel
        constexpr uint32_t CMPALL = (1U << 9);  ///< Compare All Channels
        constexpr uint32_t CMPFILTER = (2 << 12);  ///< Compare Event Filtering
        constexpr uint32_t TAG = (1U << 24);  ///< TAG of ADC_LDCR register
    }

    /// CWR Register bits
    namespace cwr_bits {
        constexpr uint32_t LOWTHRES = (12 << 0);  ///< Low Threshold
        constexpr uint32_t HIGHTHRES = (12 << 16);  ///< High Threshold
    }

    /// CGR Register bits
    namespace cgr_bits {
        constexpr uint32_t GAIN0 = (2 << 0);  ///< Gain for channel 0
        constexpr uint32_t GAIN1 = (2 << 2);  ///< Gain for channel 1
        constexpr uint32_t GAIN2 = (2 << 4);  ///< Gain for channel 2
        constexpr uint32_t GAIN3 = (2 << 6);  ///< Gain for channel 3
        constexpr uint32_t GAIN4 = (2 << 8);  ///< Gain for channel 4
        constexpr uint32_t GAIN5 = (2 << 10);  ///< Gain for channel 5
        constexpr uint32_t GAIN6 = (2 << 12);  ///< Gain for channel 6
        constexpr uint32_t GAIN7 = (2 << 14);  ///< Gain for channel 7
        constexpr uint32_t GAIN8 = (2 << 16);  ///< Gain for channel 8
        constexpr uint32_t GAIN9 = (2 << 18);  ///< Gain for channel 9
        constexpr uint32_t GAIN10 = (2 << 20);  ///< Gain for channel 10
        constexpr uint32_t GAIN11 = (2 << 22);  ///< Gain for channel 11
        constexpr uint32_t GAIN12 = (2 << 24);  ///< Gain for channel 12
        constexpr uint32_t GAIN13 = (2 << 26);  ///< Gain for channel 13
        constexpr uint32_t GAIN14 = (2 << 28);  ///< Gain for channel 14
        constexpr uint32_t GAIN15 = (2 << 30);  ///< Gain for channel 15
    }

    /// COR Register bits
    namespace cor_bits {
        constexpr uint32_t OFF0 = (1U << 0);  ///< Offset for channel 0
        constexpr uint32_t OFF1 = (1U << 1);  ///< Offset for channel 1
        constexpr uint32_t OFF2 = (1U << 2);  ///< Offset for channel 2
        constexpr uint32_t OFF3 = (1U << 3);  ///< Offset for channel 3
        constexpr uint32_t OFF4 = (1U << 4);  ///< Offset for channel 4
        constexpr uint32_t OFF5 = (1U << 5);  ///< Offset for channel 5
        constexpr uint32_t OFF6 = (1U << 6);  ///< Offset for channel 6
        constexpr uint32_t OFF7 = (1U << 7);  ///< Offset for channel 7
        constexpr uint32_t OFF8 = (1U << 8);  ///< Offset for channel 8
        constexpr uint32_t OFF9 = (1U << 9);  ///< Offset for channel 9
        constexpr uint32_t OFF10 = (1U << 10);  ///< Offset for channel 10
        constexpr uint32_t OFF11 = (1U << 11);  ///< Offset for channel 11
        constexpr uint32_t OFF12 = (1U << 12);  ///< Offset for channel 12
        constexpr uint32_t OFF13 = (1U << 13);  ///< Offset for channel 13
        constexpr uint32_t OFF14 = (1U << 14);  ///< Offset for channel 14
        constexpr uint32_t OFF15 = (1U << 15);  ///< Offset for channel 15
        constexpr uint32_t DIFF0 = (1U << 16);  ///< Differential inputs for channel 0
        constexpr uint32_t DIFF1 = (1U << 17);  ///< Differential inputs for channel 1
        constexpr uint32_t DIFF2 = (1U << 18);  ///< Differential inputs for channel 2
        constexpr uint32_t DIFF3 = (1U << 19);  ///< Differential inputs for channel 3
        constexpr uint32_t DIFF4 = (1U << 20);  ///< Differential inputs for channel 4
        constexpr uint32_t DIFF5 = (1U << 21);  ///< Differential inputs for channel 5
        constexpr uint32_t DIFF6 = (1U << 22);  ///< Differential inputs for channel 6
        constexpr uint32_t DIFF7 = (1U << 23);  ///< Differential inputs for channel 7
        constexpr uint32_t DIFF8 = (1U << 24);  ///< Differential inputs for channel 8
        constexpr uint32_t DIFF9 = (1U << 25);  ///< Differential inputs for channel 9
        constexpr uint32_t DIFF10 = (1U << 26);  ///< Differential inputs for channel 10
        constexpr uint32_t DIFF11 = (1U << 27);  ///< Differential inputs for channel 11
        constexpr uint32_t DIFF12 = (1U << 28);  ///< Differential inputs for channel 12
        constexpr uint32_t DIFF13 = (1U << 29);  ///< Differential inputs for channel 13
        constexpr uint32_t DIFF14 = (1U << 30);  ///< Differential inputs for channel 14
        constexpr uint32_t DIFF15 = (1U << 31);  ///< Differential inputs for channel 15
    }

    /// CDR[%s] Register bits
    namespace cdr[%s]_bits {
        constexpr uint32_t DATA = (12 << 0);  ///< Converted Data
    }

    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t TSON = (1U << 4);  ///< Temperature Sensor On
        constexpr uint32_t IBCTL = (2 << 8);  ///< ADC Bias Current Control
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// RPR Register bits
    namespace rpr_bits {
        constexpr uint32_t RXPTR = (32 << 0);  ///< Receive Pointer Register
    }

    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t RXCTR = (16 << 0);  ///< Receive Counter Register
    }

    /// RNPR Register bits
    namespace rnpr_bits {
        constexpr uint32_t RXNPTR = (32 << 0);  ///< Receive Next Pointer
    }

    /// RNCR Register bits
    namespace rncr_bits {
        constexpr uint32_t RXNCTR = (16 << 0);  ///< Receive Next Counter
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DACC_BASE = 0x4003C000;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t CHER;  ///< Offset: 0x10 - Channel Enable Register
        volatile uint32_t CHDR;  ///< Offset: 0x14 - Channel Disable Register
        volatile uint32_t CHSR;  ///< Offset: 0x18 - Channel Status Register
        volatile uint32_t CDR;  ///< Offset: 0x20 - Conversion Data Register
        volatile uint32_t IER;  ///< Offset: 0x24 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x28 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x2C - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x30 - Interrupt Status Register
        volatile uint32_t ACR;  ///< Offset: 0x94 - Analog Current Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status register
        volatile uint32_t TPR;  ///< Offset: 0x108 - Transmit Pointer Register
        volatile uint32_t TCR;  ///< Offset: 0x10C - Transmit Counter Register
        volatile uint32_t TNPR;  ///< Offset: 0x118 - Transmit Next Pointer Register
        volatile uint32_t TNCR;  ///< Offset: 0x11C - Transmit Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x120 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x124 - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* DACC = reinterpret_cast<Registers*>(DACC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SWRST = (1U << 0);  ///< Software Reset
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t TRGEN = (1U << 0);  ///< Trigger Enable
        constexpr uint32_t TRGSEL = (3 << 1);  ///< Trigger Selection
        constexpr uint32_t WORD = (1U << 4);  ///< Word Transfer
        constexpr uint32_t SLEEP = (1U << 5);  ///< Sleep Mode
        constexpr uint32_t FASTWKUP = (1U << 6);  ///< Fast Wake up Mode
        constexpr uint32_t REFRESH = (8 << 8);  ///< Refresh Period
        constexpr uint32_t USER_SEL = (2 << 16);  ///< User Channel Selection
        constexpr uint32_t TAG = (1U << 20);  ///< Tag Selection Mode
        constexpr uint32_t MAXS = (1U << 21);  ///< Max Speed Mode
        constexpr uint32_t STARTUP = (6 << 24);  ///< Startup Time Selection
    }

    /// CHER Register bits
    namespace cher_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Enable
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Enable
    }

    /// CHDR Register bits
    namespace chdr_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Disable
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Disable
    }

    /// CHSR Register bits
    namespace chsr_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Status
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Status
    }

    /// CDR Register bits
    namespace cdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Convert
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t EOC = (1U << 1);  ///< End of Conversion Interrupt Enable
        constexpr uint32_t ENDTX = (1U << 2);  ///< End of Transmit Buffer Interrupt Enable
        constexpr uint32_t TXBUFE = (1U << 3);  ///< Transmit Buffer Empty Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Disable.
        constexpr uint32_t EOC = (1U << 1);  ///< End of Conversion Interrupt Disable
        constexpr uint32_t ENDTX = (1U << 2);  ///< End of Transmit Buffer Interrupt Disable
        constexpr uint32_t TXBUFE = (1U << 3);  ///< Transmit Buffer Empty Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t EOC = (1U << 1);  ///< End of Conversion Interrupt Mask
        constexpr uint32_t ENDTX = (1U << 2);  ///< End of Transmit Buffer Interrupt Mask
        constexpr uint32_t TXBUFE = (1U << 3);  ///< Transmit Buffer Empty Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Flag
        constexpr uint32_t EOC = (1U << 1);  ///< End of Conversion Interrupt Flag
        constexpr uint32_t ENDTX = (1U << 2);  ///< End of DMA Interrupt Flag
        constexpr uint32_t TXBUFE = (1U << 3);  ///< Transmit Buffer Empty
    }

    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t IBCTLCH0 = (2 << 0);  ///< Analog Output Current Control
        constexpr uint32_t IBCTLCH1 = (2 << 2);  ///< Analog Output Current Control
        constexpr uint32_t IBCTLDACCORE = (2 << 8);  ///< Bias Current Control for DAC Core
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPROTERR = (1U << 0);  ///< Write protection error
        constexpr uint32_t WPROTADDR = (8 << 8);  ///< Write protection error address
    }

    /// TPR Register bits
    namespace tpr_bits {
        constexpr uint32_t TXPTR = (32 << 0);  ///< Transmit Counter Register
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t TXCTR = (16 << 0);  ///< Transmit Counter Register
    }

    /// TNPR Register bits
    namespace tnpr_bits {
        constexpr uint32_t TXNPTR = (32 << 0);  ///< Transmit Next Pointer
    }

    /// TNCR Register bits
    namespace tncr_bits {
        constexpr uint32_t TXNCTR = (16 << 0);  ///< Transmit Counter Next
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// ACC Peripheral
// ============================================================================

namespace acc {
    /// Base addresses
    constexpr uint32_t ACC_BASE = 0x40040000;

    /// ACC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t IER;  ///< Offset: 0x24 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x28 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x2C - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x30 - Interrupt Status Register
        volatile uint32_t ACR;  ///< Offset: 0x94 - Analog Control Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* ACC = reinterpret_cast<Registers*>(ACC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SWRST = (1U << 0);  ///< SoftWare ReSeT
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t SELMINUS = (3 << 0);  ///< SELection for MINUS comparator input
        constexpr uint32_t SELPLUS = (3 << 4);  ///< SELection for PLUS comparator input
        constexpr uint32_t ACEN = (1U << 8);  ///< Analog Comparator ENable
        constexpr uint32_t EDGETYP = (2 << 9);  ///< EDGE TYPe
        constexpr uint32_t INV = (1U << 12);  ///< INVert comparator output
        constexpr uint32_t SELFS = (1U << 13);  ///< SELection of Fault Source
        constexpr uint32_t FE = (1U << 14);  ///< Fault Enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t CE = (1U << 0);  ///< Comparison Edge
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t CE = (1U << 0);  ///< Comparison Edge
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t CE = (1U << 0);  ///< Comparison Edge
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t CE = (1U << 0);  ///< Comparison Edge
        constexpr uint32_t SCO = (1U << 1);  ///< Synchronized Comparator Output
        constexpr uint32_t MASK = (1U << 31);  ///< MASK
    }

    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t ISEL = (1U << 0);  ///< Current SELection
        constexpr uint32_t HYST = (2 << 1);  ///< HYSTeresis selection
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPROTERR = (1U << 0);  ///< Write PROTection ERRor
    }

}

// ============================================================================
// RCC Peripheral
// ============================================================================

namespace rcc {
    /// Base addresses
    constexpr uint32_t CRCCU_BASE = 0x40044000;

    /// RCC Register structure
    struct Registers {
        volatile uint32_t DSCR;  ///< Offset: 0x00 - CRCCU Descriptor Base Register
        volatile uint32_t DMA_EN;  ///< Offset: 0x08 - CRCCU DMA Enable Register
        volatile uint32_t DMA_DIS;  ///< Offset: 0x0C - CRCCU DMA Disable Register
        volatile uint32_t DMA_SR;  ///< Offset: 0x10 - CRCCU DMA Status Register
        volatile uint32_t DMA_IER;  ///< Offset: 0x14 - CRCCU DMA Interrupt Enable Register
        volatile uint32_t DMA_IDR;  ///< Offset: 0x18 - CRCCU DMA Interrupt Disable Register
        volatile uint32_t DMA_IMR;  ///< Offset: 0x1C - CRCCU DMA Interrupt Mask Register
        volatile uint32_t DMA_ISR;  ///< Offset: 0x20 - CRCCU DMA Interrupt Status Register
        volatile uint32_t CR;  ///< Offset: 0x34 - CRCCU Control Register
        volatile uint32_t MR;  ///< Offset: 0x38 - CRCCU Mode Register
        volatile uint32_t SR;  ///< Offset: 0x3C - CRCCU Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - CRCCU Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - CRCCU Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - CRCCU Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - CRCCU Interrupt Status Register
    };

    /// Peripheral instances
    inline Registers* CRCCU = reinterpret_cast<Registers*>(CRCCU_BASE);

    // Bit definitions
    /// DSCR Register bits
    namespace dscr_bits {
        constexpr uint32_t DSCR = (23 << 9);  ///< Descriptor Base Address
    }

    /// DMA_EN Register bits
    namespace dma_en_bits {
        constexpr uint32_t DMAEN = (1U << 0);  ///< DMA Enable Register
    }

    /// DMA_DIS Register bits
    namespace dma_dis_bits {
        constexpr uint32_t DMADIS = (1U << 0);  ///< DMA Disable Register
    }

    /// DMA_SR Register bits
    namespace dma_sr_bits {
        constexpr uint32_t DMASR = (1U << 0);  ///< DMA Status Register
    }

    /// DMA_IER Register bits
    namespace dma_ier_bits {
        constexpr uint32_t DMAIER = (1U << 0);  ///< Interrupt Enable register
    }

    /// DMA_IDR Register bits
    namespace dma_idr_bits {
        constexpr uint32_t DMAIDR = (1U << 0);  ///< Interrupt Disable register
    }

    /// DMA_IMR Register bits
    namespace dma_imr_bits {
        constexpr uint32_t DMAIMR = (1U << 0);  ///< Interrupt Mask Register
    }

    /// DMA_ISR Register bits
    namespace dma_isr_bits {
        constexpr uint32_t DMAISR = (1U << 0);  ///< Interrupt Status register
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RESET = (1U << 0);  ///< CRC Computation Reset
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< CRC Enable
        constexpr uint32_t COMPARE = (1U << 1);  ///< CRC Compare
        constexpr uint32_t PTYPE = (2 << 2);  ///< Primitive Polynomial
        constexpr uint32_t DIVIDER = (4 << 4);  ///< Request Divider
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CRC = (32 << 0);  ///< Cyclic Redundancy Check Value
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t ERRIER = (1U << 0);  ///< CRC Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t ERRIDR = (1U << 0);  ///< CRC Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t ERRIMR = (1U << 0);  ///< CRC Error Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t ERRISR = (1U << 0);  ///< CRC Error Interrupt Status
    }

}

// ============================================================================
// SMC Peripheral
// ============================================================================

namespace smc {
    /// Base addresses
    constexpr uint32_t SMC_BASE = 0x400E0000;

    /// SMC Register structure
    struct Registers {
        volatile uint32_t SETUP0;  ///< Offset: 0x00 - SMC Setup Register (CS_number = 0)
        volatile uint32_t PULSE0;  ///< Offset: 0x04 - SMC Pulse Register (CS_number = 0)
        volatile uint32_t CYCLE0;  ///< Offset: 0x08 - SMC Cycle Register (CS_number = 0)
        volatile uint32_t MODE0;  ///< Offset: 0x0C - SMC Mode Register (CS_number = 0)
        volatile uint32_t SETUP1;  ///< Offset: 0x10 - SMC Setup Register (CS_number = 1)
        volatile uint32_t PULSE1;  ///< Offset: 0x14 - SMC Pulse Register (CS_number = 1)
        volatile uint32_t CYCLE1;  ///< Offset: 0x18 - SMC Cycle Register (CS_number = 1)
        volatile uint32_t MODE1;  ///< Offset: 0x1C - SMC Mode Register (CS_number = 1)
        volatile uint32_t SETUP2;  ///< Offset: 0x20 - SMC Setup Register (CS_number = 2)
        volatile uint32_t PULSE2;  ///< Offset: 0x24 - SMC Pulse Register (CS_number = 2)
        volatile uint32_t CYCLE2;  ///< Offset: 0x28 - SMC Cycle Register (CS_number = 2)
        volatile uint32_t MODE2;  ///< Offset: 0x2C - SMC Mode Register (CS_number = 2)
        volatile uint32_t SETUP3;  ///< Offset: 0x30 - SMC Setup Register (CS_number = 3)
        volatile uint32_t PULSE3;  ///< Offset: 0x34 - SMC Pulse Register (CS_number = 3)
        volatile uint32_t CYCLE3;  ///< Offset: 0x38 - SMC Cycle Register (CS_number = 3)
        volatile uint32_t MODE3;  ///< Offset: 0x3C - SMC Mode Register (CS_number = 3)
        volatile uint32_t OCMS;  ///< Offset: 0x80 - SMC OCMS MODE Register
        volatile uint32_t KEY1;  ///< Offset: 0x84 - SMC OCMS KEY1 Register
        volatile uint32_t KEY2;  ///< Offset: 0x88 - SMC OCMS KEY2 Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - SMC Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - SMC Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* SMC = reinterpret_cast<Registers*>(SMC_BASE);

    // Bit definitions
    /// SETUP0 Register bits
    namespace setup0_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE0 Register bits
    namespace pulse0_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE0 Register bits
    namespace cycle0_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE0 Register bits
    namespace mode0_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// SETUP1 Register bits
    namespace setup1_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE1 Register bits
    namespace pulse1_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE1 Register bits
    namespace cycle1_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE1 Register bits
    namespace mode1_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// SETUP2 Register bits
    namespace setup2_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE2 Register bits
    namespace pulse2_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE2 Register bits
    namespace cycle2_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE2 Register bits
    namespace mode2_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// SETUP3 Register bits
    namespace setup3_bits {
        constexpr uint32_t NWE_SETUP = (6 << 0);  ///< NWE Setup Length
        constexpr uint32_t NCS_WR_SETUP = (6 << 8);  ///< NCS Setup Length in WRITE Access
        constexpr uint32_t NRD_SETUP = (6 << 16);  ///< NRD Setup Length
        constexpr uint32_t NCS_RD_SETUP = (6 << 24);  ///< NCS Setup Length in READ Access
    }

    /// PULSE3 Register bits
    namespace pulse3_bits {
        constexpr uint32_t NWE_PULSE = (7 << 0);  ///< NWE Pulse Length
        constexpr uint32_t NCS_WR_PULSE = (7 << 8);  ///< NCS Pulse Length in WRITE Access
        constexpr uint32_t NRD_PULSE = (7 << 16);  ///< NRD Pulse Length
        constexpr uint32_t NCS_RD_PULSE = (7 << 24);  ///< NCS Pulse Length in READ Access
    }

    /// CYCLE3 Register bits
    namespace cycle3_bits {
        constexpr uint32_t NWE_CYCLE = (9 << 0);  ///< Total Write Cycle Length
        constexpr uint32_t NRD_CYCLE = (9 << 16);  ///< Total Read Cycle Length
    }

    /// MODE3 Register bits
    namespace mode3_bits {
        constexpr uint32_t READ_MODE = (1U << 0);  ///< READ_MODE
        constexpr uint32_t WRITE_MODE = (1U << 1);  ///< WRITE_MODE
        constexpr uint32_t EXNW_MODE = (2 << 4);  ///< NWAIT Mode
        constexpr uint32_t TDF_CYCLES = (4 << 16);  ///< Data Float Time
        constexpr uint32_t TDF_MODE = (1U << 20);  ///< TDF Optimization
        constexpr uint32_t PMEN = (1U << 24);  ///< Page Mode Enabled
        constexpr uint32_t PS = (2 << 28);  ///< Page Size
    }

    /// OCMS Register bits
    namespace ocms_bits {
        constexpr uint32_t SMSE = (1U << 0);  ///< Static Memory Controller Scrambling Enable
        constexpr uint32_t CS0SE = (1U << 16);  ///< Chip Select (x = 0 to 3) Scrambling Enable
        constexpr uint32_t CS1SE = (1U << 17);  ///< Chip Select (x = 0 to 3) Scrambling Enable
        constexpr uint32_t CS2SE = (1U << 18);  ///< Chip Select (x = 0 to 3) Scrambling Enable
        constexpr uint32_t CS3SE = (1U << 19);  ///< Chip Select (x = 0 to 3) Scrambling Enable
    }

    /// KEY1 Register bits
    namespace key1_bits {
        constexpr uint32_t KEY1 = (32 << 0);  ///< Off Chip Memory Scrambling (OCMS) Key Part 1
    }

    /// KEY2 Register bits
    namespace key2_bits {
        constexpr uint32_t KEY2 = (32 << 0);  ///< Off Chip Memory Scrambling (OCMS) Key Part 2
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// MATRIX Peripheral
// ============================================================================

namespace matrix {
    /// Base addresses
    constexpr uint32_t MATRIX_BASE = 0x400E0200;

    /// MATRIX Register structure
    struct Registers {
        volatile uint32_t MATRIX_MCFG[%s];  ///< Offset: 0x00 - Master Configuration Register
        volatile uint32_t MATRIX_SCFG[%s];  ///< Offset: 0x40 - Slave Configuration Register
        volatile uint32_t MATRIX_PRAS0;  ///< Offset: 0x80 - Priority Register A for Slave 0
        volatile uint32_t MATRIX_PRAS1;  ///< Offset: 0x88 - Priority Register A for Slave 1
        volatile uint32_t MATRIX_PRAS2;  ///< Offset: 0x90 - Priority Register A for Slave 2
        volatile uint32_t MATRIX_PRAS3;  ///< Offset: 0x98 - Priority Register A for Slave 3
        volatile uint32_t MATRIX_PRAS4;  ///< Offset: 0xA0 - Priority Register A for Slave 4
        volatile uint32_t CCFG_SYSIO;  ///< Offset: 0x114 - System I/O Configuration register
        volatile uint32_t CCFG_SMCNFCS;  ///< Offset: 0x11C - SMC Chip Select NAND Flash Assignment Register
        volatile uint32_t MATRIX_WPMR;  ///< Offset: 0x1E4 - Write Protect Mode Register
        volatile uint32_t MATRIX_WPSR;  ///< Offset: 0x1E8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* MATRIX = reinterpret_cast<Registers*>(MATRIX_BASE);

    // Bit definitions
    /// MATRIX_MCFG[%s] Register bits
    namespace matrix_mcfg[%s]_bits {
        constexpr uint32_t ULBT = (3 << 0);  ///< Undefined Length Burst Type
    }

    /// MATRIX_SCFG[%s] Register bits
    namespace matrix_scfg[%s]_bits {
        constexpr uint32_t SLOT_CYCLE = (8 << 0);  ///< Maximum Number of Allowed Cycles for a Burst
        constexpr uint32_t DEFMSTR_TYPE = (2 << 16);  ///< Default Master Type
        constexpr uint32_t FIXED_DEFMSTR = (3 << 18);  ///< Fixed Default Master
        constexpr uint32_t ARBT = (2 << 24);  ///< Arbitration Type
    }

    /// MATRIX_PRAS0 Register bits
    namespace matrix_pras0_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
    }

    /// MATRIX_PRAS1 Register bits
    namespace matrix_pras1_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
    }

    /// MATRIX_PRAS2 Register bits
    namespace matrix_pras2_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
    }

    /// MATRIX_PRAS3 Register bits
    namespace matrix_pras3_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
    }

    /// MATRIX_PRAS4 Register bits
    namespace matrix_pras4_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
    }

    /// CCFG_SYSIO Register bits
    namespace ccfg_sysio_bits {
        constexpr uint32_t SYSIO4 = (1U << 4);  ///< PB4 or TDI Assignment
        constexpr uint32_t SYSIO5 = (1U << 5);  ///< PB5 or TDO/TRACESWO Assignment
        constexpr uint32_t SYSIO6 = (1U << 6);  ///< PB6 or TMS/SWDIO Assignment
        constexpr uint32_t SYSIO7 = (1U << 7);  ///< PB7 or TCK/SWCLK Assignment
        constexpr uint32_t SYSIO10 = (1U << 10);  ///< PB10 or DDM Assignment
        constexpr uint32_t SYSIO11 = (1U << 11);  ///< PB11 or DDP Assignment
        constexpr uint32_t SYSIO12 = (1U << 12);  ///< PB12 or ERASE Assignment
    }

    /// CCFG_SMCNFCS Register bits
    namespace ccfg_smcnfcs_bits {
        constexpr uint32_t SMC_NFCS0 = (1U << 0);  ///< SMC NAND Flash Chip Select 0 Assignment
        constexpr uint32_t SMC_NFCS1 = (1U << 1);  ///< SMC NAND Flash Chip Select 1 Assignment
        constexpr uint32_t SMC_NFCS2 = (1U << 2);  ///< SMC NAND Flash Chip Select 2 Assignment
        constexpr uint32_t SMC_NFCS3 = (1U << 3);  ///< SMC NAND Flash Chip Select 3 Assignment
    }

    /// MATRIX_WPMR Register bits
    namespace matrix_wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect ENable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY (Write-only)
    }

    /// MATRIX_WPSR Register bits
    namespace matrix_wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// PMC Peripheral
// ============================================================================

namespace pmc {
    /// Base addresses
    constexpr uint32_t PMC_BASE = 0x400E0400;

    /// PMC Register structure
    struct Registers {
        volatile uint32_t PMC_SCER;  ///< Offset: 0x00 - System Clock Enable Register
        volatile uint32_t PMC_SCDR;  ///< Offset: 0x04 - System Clock Disable Register
        volatile uint32_t PMC_SCSR;  ///< Offset: 0x08 - System Clock Status Register
        volatile uint32_t PMC_PCER0;  ///< Offset: 0x10 - Peripheral Clock Enable Register 0
        volatile uint32_t PMC_PCDR0;  ///< Offset: 0x14 - Peripheral Clock Disable Register 0
        volatile uint32_t PMC_PCSR0;  ///< Offset: 0x18 - Peripheral Clock Status Register 0
        volatile uint32_t CKGR_MOR;  ///< Offset: 0x20 - Main Oscillator Register
        volatile uint32_t CKGR_MCFR;  ///< Offset: 0x24 - Main Clock Frequency Register
        volatile uint32_t CKGR_PLLAR;  ///< Offset: 0x28 - PLLA Register
        volatile uint32_t CKGR_PLLBR;  ///< Offset: 0x2C - PLLB Register
        volatile uint32_t PMC_MCKR;  ///< Offset: 0x30 - Master Clock Register
        volatile uint32_t PMC_USB;  ///< Offset: 0x38 - USB Clock Register
        volatile uint32_t PMC_PCK[%s];  ///< Offset: 0x40 - Programmable Clock 0 Register
        volatile uint32_t PMC_IER;  ///< Offset: 0x60 - Interrupt Enable Register
        volatile uint32_t PMC_IDR;  ///< Offset: 0x64 - Interrupt Disable Register
        volatile uint32_t PMC_SR;  ///< Offset: 0x68 - Status Register
        volatile uint32_t PMC_IMR;  ///< Offset: 0x6C - Interrupt Mask Register
        volatile uint32_t PMC_FSMR;  ///< Offset: 0x70 - Fast Startup Mode Register
        volatile uint32_t PMC_FSPR;  ///< Offset: 0x74 - Fast Startup Polarity Register
        volatile uint32_t PMC_FOCR;  ///< Offset: 0x78 - Fault Output Clear Register
        volatile uint32_t PMC_WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t PMC_WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t PMC_PCER1;  ///< Offset: 0x100 - Peripheral Clock Enable Register 1
        volatile uint32_t PMC_PCDR1;  ///< Offset: 0x104 - Peripheral Clock Disable Register 1
        volatile uint32_t PMC_PCSR1;  ///< Offset: 0x108 - Peripheral Clock Status Register 1
        volatile uint32_t PMC_OCR;  ///< Offset: 0x110 - Oscillator Calibration Register
    };

    /// Peripheral instances
    inline Registers* PMC = reinterpret_cast<Registers*>(PMC_BASE);

    // Bit definitions
    /// PMC_SCER Register bits
    namespace pmc_scer_bits {
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Port Clock Enable
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Enable
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Enable
        constexpr uint32_t PCK2 = (1U << 10);  ///< Programmable Clock 2 Output Enable
    }

    /// PMC_SCDR Register bits
    namespace pmc_scdr_bits {
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Port Clock Disable
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Disable
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Disable
        constexpr uint32_t PCK2 = (1U << 10);  ///< Programmable Clock 2 Output Disable
    }

    /// PMC_SCSR Register bits
    namespace pmc_scsr_bits {
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Port Clock Status
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Status
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Status
        constexpr uint32_t PCK2 = (1U << 10);  ///< Programmable Clock 2 Output Status
    }

    /// PMC_PCER0 Register bits
    namespace pmc_pcer0_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Enable
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Enable
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Enable
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Enable
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Enable
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Enable
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Enable
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Enable
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Enable
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Enable
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Enable
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Enable
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Enable
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Enable
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Enable
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Enable
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Enable
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Enable
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Enable
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Enable
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Enable
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Enable
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Enable
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Enable
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Enable
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Enable
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Enable
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Enable
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Enable
    }

    /// PMC_PCDR0 Register bits
    namespace pmc_pcdr0_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Disable
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Disable
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Disable
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Disable
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Disable
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Disable
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Disable
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Disable
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Disable
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Disable
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Disable
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Disable
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Disable
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Disable
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Disable
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Disable
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Disable
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Disable
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Disable
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Disable
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Disable
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Disable
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Disable
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Disable
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Disable
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Disable
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Disable
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Disable
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Disable
    }

    /// PMC_PCSR0 Register bits
    namespace pmc_pcsr0_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Status
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Status
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Status
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Status
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Status
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Status
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Status
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Status
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Status
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Status
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Status
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Status
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Status
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Status
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Status
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Status
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Status
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Status
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Status
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Status
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Status
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Status
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Status
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Status
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Status
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Status
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Status
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Status
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Status
    }

    /// CKGR_MOR Register bits
    namespace ckgr_mor_bits {
        constexpr uint32_t MOSCXTEN = (1U << 0);  ///< Main Crystal Oscillator Enable
        constexpr uint32_t MOSCXTBY = (1U << 1);  ///< Main Crystal Oscillator Bypass
        constexpr uint32_t MOSCRCEN = (1U << 3);  ///< Main On-Chip RC Oscillator Enable
        constexpr uint32_t MOSCRCF = (3 << 4);  ///< Main On-Chip RC Oscillator Frequency Selection
        constexpr uint32_t MOSCXTST = (8 << 8);  ///< Main Crystal Oscillator Start-up Time
        constexpr uint32_t KEY = (8 << 16);  ///< Password
        constexpr uint32_t MOSCSEL = (1U << 24);  ///< Main Oscillator Selection
        constexpr uint32_t CFDEN = (1U << 25);  ///< Clock Failure Detector Enable
    }

    /// CKGR_MCFR Register bits
    namespace ckgr_mcfr_bits {
        constexpr uint32_t MAINF = (16 << 0);  ///< Main Clock Frequency
        constexpr uint32_t MAINFRDY = (1U << 16);  ///< Main Clock Ready
        constexpr uint32_t RCMEAS = (1U << 20);  ///< RC Oscillator Frequency Measure (write-only)
    }

    /// CKGR_PLLAR Register bits
    namespace ckgr_pllar_bits {
        constexpr uint32_t DIVA = (8 << 0);  ///< Divider
        constexpr uint32_t PLLACOUNT = (6 << 8);  ///< PLLA Counter
        constexpr uint32_t MULA = (11 << 16);  ///< PLLA Multiplier
        constexpr uint32_t ONE = (1U << 29);  ///< Must Be Set to 1
    }

    /// CKGR_PLLBR Register bits
    namespace ckgr_pllbr_bits {
        constexpr uint32_t DIVB = (8 << 0);  ///< Divider
        constexpr uint32_t PLLBCOUNT = (6 << 8);  ///< PLLB Counter
        constexpr uint32_t MULB = (11 << 16);  ///< PLLB Multiplier
    }

    /// PMC_MCKR Register bits
    namespace pmc_mckr_bits {
        constexpr uint32_t CSS = (2 << 0);  ///< Master Clock Source Selection
        constexpr uint32_t PRES = (3 << 4);  ///< Processor Clock Prescaler
        constexpr uint32_t PLLADIV2 = (1U << 12);  ///< PLLA Divisor by 2
        constexpr uint32_t PLLBDIV2 = (1U << 13);  ///< PLLB Divisor by 2
    }

    /// PMC_USB Register bits
    namespace pmc_usb_bits {
        constexpr uint32_t USBS = (1U << 0);  ///< USB Input Clock Selection
        constexpr uint32_t USBDIV = (4 << 8);  ///< Divider for USB Clock.
    }

    /// PMC_PCK[%s] Register bits
    namespace pmc_pck[%s]_bits {
        constexpr uint32_t CSS = (3 << 0);  ///< Master Clock Source Selection
        constexpr uint32_t PRES = (3 << 4);  ///< Programmable Clock Prescaler
    }

    /// PMC_IER Register bits
    namespace pmc_ier_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Enable
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Enable
        constexpr uint32_t LOCKB = (1U << 2);  ///< PLLB Lock Interrupt Enable
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Enable
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Enable
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Enable
        constexpr uint32_t PCKRDY2 = (1U << 10);  ///< Programmable Clock Ready 2 Interrupt Enable
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Enable
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Enable
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Enable
    }

    /// PMC_IDR Register bits
    namespace pmc_idr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Disable
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Disable
        constexpr uint32_t LOCKB = (1U << 2);  ///< PLLB Lock Interrupt Disable
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Disable
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Disable
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Disable
        constexpr uint32_t PCKRDY2 = (1U << 10);  ///< Programmable Clock Ready 2 Interrupt Disable
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Disable
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Disable
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Disable
    }

    /// PMC_SR Register bits
    namespace pmc_sr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main XTAL Oscillator Status
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Status
        constexpr uint32_t LOCKB = (1U << 2);  ///< PLLB Lock Status
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Status
        constexpr uint32_t OSCSELS = (1U << 7);  ///< Slow Clock Oscillator Selection
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready Status
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready Status
        constexpr uint32_t PCKRDY2 = (1U << 10);  ///< Programmable Clock Ready Status
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Oscillator Status
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event
        constexpr uint32_t CFDS = (1U << 19);  ///< Clock Failure Detector Status
        constexpr uint32_t FOS = (1U << 20);  ///< Clock Failure Detector Fault Output Status
    }

    /// PMC_IMR Register bits
    namespace pmc_imr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Mask
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Mask
        constexpr uint32_t LOCKB = (1U << 2);  ///< PLLB Lock Interrupt Mask
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Mask
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Mask
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Mask
        constexpr uint32_t PCKRDY2 = (1U << 10);  ///< Programmable Clock Ready 2 Interrupt Mask
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Mask
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Mask
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Mask
    }

    /// PMC_FSMR Register bits
    namespace pmc_fsmr_bits {
        constexpr uint32_t FSTT0 = (1U << 0);  ///< Fast Startup Input Enable 0
        constexpr uint32_t FSTT1 = (1U << 1);  ///< Fast Startup Input Enable 1
        constexpr uint32_t FSTT2 = (1U << 2);  ///< Fast Startup Input Enable 2
        constexpr uint32_t FSTT3 = (1U << 3);  ///< Fast Startup Input Enable 3
        constexpr uint32_t FSTT4 = (1U << 4);  ///< Fast Startup Input Enable 4
        constexpr uint32_t FSTT5 = (1U << 5);  ///< Fast Startup Input Enable 5
        constexpr uint32_t FSTT6 = (1U << 6);  ///< Fast Startup Input Enable 6
        constexpr uint32_t FSTT7 = (1U << 7);  ///< Fast Startup Input Enable 7
        constexpr uint32_t FSTT8 = (1U << 8);  ///< Fast Startup Input Enable 8
        constexpr uint32_t FSTT9 = (1U << 9);  ///< Fast Startup Input Enable 9
        constexpr uint32_t FSTT10 = (1U << 10);  ///< Fast Startup Input Enable 10
        constexpr uint32_t FSTT11 = (1U << 11);  ///< Fast Startup Input Enable 11
        constexpr uint32_t FSTT12 = (1U << 12);  ///< Fast Startup Input Enable 12
        constexpr uint32_t FSTT13 = (1U << 13);  ///< Fast Startup Input Enable 13
        constexpr uint32_t FSTT14 = (1U << 14);  ///< Fast Startup Input Enable 14
        constexpr uint32_t FSTT15 = (1U << 15);  ///< Fast Startup Input Enable 15
        constexpr uint32_t RTTAL = (1U << 16);  ///< RTT Alarm Enable
        constexpr uint32_t RTCAL = (1U << 17);  ///< RTC Alarm Enable
        constexpr uint32_t USBAL = (1U << 18);  ///< USB Alarm Enable
        constexpr uint32_t LPM = (1U << 20);  ///< Low Power Mode
    }

    /// PMC_FSPR Register bits
    namespace pmc_fspr_bits {
        constexpr uint32_t FSTP0 = (1U << 0);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP1 = (1U << 1);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP2 = (1U << 2);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP3 = (1U << 3);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP4 = (1U << 4);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP5 = (1U << 5);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP6 = (1U << 6);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP7 = (1U << 7);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP8 = (1U << 8);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP9 = (1U << 9);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP10 = (1U << 10);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP11 = (1U << 11);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP12 = (1U << 12);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP13 = (1U << 13);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP14 = (1U << 14);  ///< Fast Startup Input Polarityx
        constexpr uint32_t FSTP15 = (1U << 15);  ///< Fast Startup Input Polarityx
    }

    /// PMC_FOCR Register bits
    namespace pmc_focr_bits {
        constexpr uint32_t FOCLR = (1U << 0);  ///< Fault Output Clear
    }

    /// PMC_WPMR Register bits
    namespace pmc_wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// PMC_WPSR Register bits
    namespace pmc_wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// PMC_PCER1 Register bits
    namespace pmc_pcer1_bits {
        constexpr uint32_t PID32 = (1U << 0);  ///< Peripheral Clock 32 Enable
        constexpr uint32_t PID33 = (1U << 1);  ///< Peripheral Clock 33 Enable
        constexpr uint32_t PID34 = (1U << 2);  ///< Peripheral Clock 34 Enable
    }

    /// PMC_PCDR1 Register bits
    namespace pmc_pcdr1_bits {
        constexpr uint32_t PID32 = (1U << 0);  ///< Peripheral Clock 32 Disable
        constexpr uint32_t PID33 = (1U << 1);  ///< Peripheral Clock 33 Disable
        constexpr uint32_t PID34 = (1U << 2);  ///< Peripheral Clock 34 Disable
    }

    /// PMC_PCSR1 Register bits
    namespace pmc_pcsr1_bits {
        constexpr uint32_t PID32 = (1U << 0);  ///< Peripheral Clock 32 Status
        constexpr uint32_t PID33 = (1U << 1);  ///< Peripheral Clock 33 Status
        constexpr uint32_t PID34 = (1U << 2);  ///< Peripheral Clock 34 Status
    }

    /// PMC_OCR Register bits
    namespace pmc_ocr_bits {
        constexpr uint32_t CAL4 = (7 << 0);  ///< RC Oscillator Calibration bits for 4 Mhz
        constexpr uint32_t SEL4 = (1U << 7);  ///< Selection of RC Oscillator Calibration bits for 4 Mhz
        constexpr uint32_t CAL8 = (7 << 8);  ///< RC Oscillator Calibration bits for 8 Mhz
        constexpr uint32_t SEL8 = (1U << 15);  ///< Selection of RC Oscillator Calibration bits for 8 Mhz
        constexpr uint32_t CAL12 = (7 << 16);  ///< RC Oscillator Calibration bits for 12 Mhz
        constexpr uint32_t SEL12 = (1U << 23);  ///< Selection of RC Oscillator Calibration bits for 12 Mhz
    }

}

// ============================================================================
// CHIPID Peripheral
// ============================================================================

namespace chipid {
    /// Base addresses
    constexpr uint32_t CHIPID_BASE = 0x400E0740;

    /// CHIPID Register structure
    struct Registers {
        volatile uint32_t CIDR;  ///< Offset: 0x00 - Chip ID Register
        volatile uint32_t EXID;  ///< Offset: 0x04 - Chip ID Extension Register
    };

    /// Peripheral instances
    inline Registers* CHIPID = reinterpret_cast<Registers*>(CHIPID_BASE);

    // Bit definitions
    /// CIDR Register bits
    namespace cidr_bits {
        constexpr uint32_t VERSION = (5 << 0);  ///< Version of the Device
        constexpr uint32_t EPROC = (3 << 5);  ///< Embedded Processor
        constexpr uint32_t NVPSIZ = (4 << 8);  ///< Nonvolatile Program Memory Size
        constexpr uint32_t NVPSIZ2 = (4 << 12);  ///< Second Nonvolatile Program Memory Size
        constexpr uint32_t SRAMSIZ = (4 << 16);  ///< Internal SRAM Size
        constexpr uint32_t ARCH = (8 << 20);  ///< Architecture Identifier
        constexpr uint32_t NVPTYP = (3 << 28);  ///< Nonvolatile Program Memory Type
        constexpr uint32_t EXT = (1U << 31);  ///< Extension Flag
    }

    /// EXID Register bits
    namespace exid_bits {
        constexpr uint32_t EXID = (32 << 0);  ///< Chip ID Extension
    }

}

// ============================================================================
// EFC Peripheral
// ============================================================================

namespace efc {
    /// Base addresses
    constexpr uint32_t EFC_BASE = 0x400E0A00;

    /// EFC Register structure
    struct Registers {
        volatile uint32_t FMR;  ///< Offset: 0x00 - EEFC Flash Mode Register
        volatile uint32_t FCR;  ///< Offset: 0x04 - EEFC Flash Command Register
        volatile uint32_t FSR;  ///< Offset: 0x08 - EEFC Flash Status Register
        volatile uint32_t FRR;  ///< Offset: 0x0C - EEFC Flash Result Register
    };

    /// Peripheral instances
    inline Registers* EFC = reinterpret_cast<Registers*>(EFC_BASE);

    // Bit definitions
    /// FMR Register bits
    namespace fmr_bits {
        constexpr uint32_t FRDY = (1U << 0);  ///< Ready Interrupt Enable
        constexpr uint32_t FWS = (4 << 8);  ///< Flash Wait State
        constexpr uint32_t SCOD = (1U << 16);  ///< Sequential Code Optimization Disable
        constexpr uint32_t FAM = (1U << 24);  ///< Flash Access Mode
    }

    /// FCR Register bits
    namespace fcr_bits {
        constexpr uint32_t FCMD = (8 << 0);  ///< Flash Command
        constexpr uint32_t FARG = (16 << 8);  ///< Flash Command Argument
        constexpr uint32_t FKEY = (8 << 24);  ///< Flash Writing Protection Key
    }

    /// FSR Register bits
    namespace fsr_bits {
        constexpr uint32_t FRDY = (1U << 0);  ///< Flash Ready Status
        constexpr uint32_t FCMDE = (1U << 1);  ///< Flash Command Error Status
        constexpr uint32_t FLOCKE = (1U << 2);  ///< Flash Lock Error Status
    }

    /// FRR Register bits
    namespace frr_bits {
        constexpr uint32_t FVALUE = (32 << 0);  ///< Flash Result Value
    }

}

// ============================================================================
// PIOA Peripheral
// ============================================================================

namespace pioa {
    /// Base addresses
    constexpr uint32_t PIOA_BASE = 0x400E0E00;

    /// PIOA Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR[%s];  ///< Offset: 0x70 - Peripheral Select Register
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t PCMR;  ///< Offset: 0x150 - Parallel Capture Mode Register
        volatile uint32_t PCIER;  ///< Offset: 0x154 - Parallel Capture Interrupt Enable Register
        volatile uint32_t PCIDR;  ///< Offset: 0x158 - Parallel Capture Interrupt Disable Register
        volatile uint32_t PCIMR;  ///< Offset: 0x15C - Parallel Capture Interrupt Mask Register
        volatile uint32_t PCISR;  ///< Offset: 0x160 - Parallel Capture Interrupt Status Register
        volatile uint32_t PCRHR;  ///< Offset: 0x164 - Parallel Capture Reception Holding Register
        volatile uint32_t RPR;  ///< Offset: 0x168 - Receive Pointer Register
        volatile uint32_t RCR;  ///< Offset: 0x16C - Receive Counter Register
        volatile uint32_t RNPR;  ///< Offset: 0x178 - Receive Next Pointer Register
        volatile uint32_t RNCR;  ///< Offset: 0x17C - Receive Next Counter Register
        volatile uint32_t PTCR;  ///< Offset: 0x188 - Transfer Control Register
        volatile uint32_t PTSR;  ///< Offset: 0x18C - Transfer Status Register
    };

    /// Peripheral instances
    inline Registers* PIOA = reinterpret_cast<Registers*>(PIOA_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR[%s] Register bits
    namespace abcdsr[%s]_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// PCMR Register bits
    namespace pcmr_bits {
        constexpr uint32_t PCEN = (1U << 0);  ///< Parallel Capture Mode Enable
        constexpr uint32_t DSIZE = (2 << 4);  ///< Parallel Capture Mode Data Size
        constexpr uint32_t ALWYS = (1U << 9);  ///< Parallel Capture Mode Always Sampling
        constexpr uint32_t HALFS = (1U << 10);  ///< Parallel Capture Mode Half Sampling
        constexpr uint32_t FRSTS = (1U << 11);  ///< Parallel Capture Mode First Sample
    }

    /// PCIER Register bits
    namespace pcier_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Enable
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Enable
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Enable
    }

    /// PCIDR Register bits
    namespace pcidr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Disable
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Disable
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Disable
    }

    /// PCIMR Register bits
    namespace pcimr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Mask
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Mask
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Mask
    }

    /// PCISR Register bits
    namespace pcisr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error.
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer.
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full
    }

    /// PCRHR Register bits
    namespace pcrhr_bits {
        constexpr uint32_t RDATA = (32 << 0);  ///< Parallel Capture Mode Reception Data.
    }

    /// RPR Register bits
    namespace rpr_bits {
        constexpr uint32_t RXPTR = (32 << 0);  ///< Receive Pointer Register
    }

    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t RXCTR = (16 << 0);  ///< Receive Counter Register
    }

    /// RNPR Register bits
    namespace rnpr_bits {
        constexpr uint32_t RXNPTR = (32 << 0);  ///< Receive Next Pointer
    }

    /// RNCR Register bits
    namespace rncr_bits {
        constexpr uint32_t RXNCTR = (16 << 0);  ///< Receive Next Counter
    }

    /// PTCR Register bits
    namespace ptcr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t RXTDIS = (1U << 1);  ///< Receiver Transfer Disable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
        constexpr uint32_t TXTDIS = (1U << 9);  ///< Transmitter Transfer Disable
    }

    /// PTSR Register bits
    namespace ptsr_bits {
        constexpr uint32_t RXTEN = (1U << 0);  ///< Receiver Transfer Enable
        constexpr uint32_t TXTEN = (1U << 8);  ///< Transmitter Transfer Enable
    }

}

// ============================================================================
// PIOB Peripheral
// ============================================================================

namespace piob {
    /// Base addresses
    constexpr uint32_t PIOB_BASE = 0x400E1000;

    /// PIOB Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR[%s];  ///< Offset: 0x70 - Peripheral Select Register
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t PCMR;  ///< Offset: 0x150 - Parallel Capture Mode Register
        volatile uint32_t PCIER;  ///< Offset: 0x154 - Parallel Capture Interrupt Enable Register
        volatile uint32_t PCIDR;  ///< Offset: 0x158 - Parallel Capture Interrupt Disable Register
        volatile uint32_t PCIMR;  ///< Offset: 0x15C - Parallel Capture Interrupt Mask Register
        volatile uint32_t PCISR;  ///< Offset: 0x160 - Parallel Capture Interrupt Status Register
        volatile uint32_t PCRHR;  ///< Offset: 0x164 - Parallel Capture Reception Holding Register
    };

    /// Peripheral instances
    inline Registers* PIOB = reinterpret_cast<Registers*>(PIOB_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR[%s] Register bits
    namespace abcdsr[%s]_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// PCMR Register bits
    namespace pcmr_bits {
        constexpr uint32_t PCEN = (1U << 0);  ///< Parallel Capture Mode Enable
        constexpr uint32_t DSIZE = (2 << 4);  ///< Parallel Capture Mode Data Size
        constexpr uint32_t ALWYS = (1U << 9);  ///< Parallel Capture Mode Always Sampling
        constexpr uint32_t HALFS = (1U << 10);  ///< Parallel Capture Mode Half Sampling
        constexpr uint32_t FRSTS = (1U << 11);  ///< Parallel Capture Mode First Sample
    }

    /// PCIER Register bits
    namespace pcier_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Enable
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Enable
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Enable
    }

    /// PCIDR Register bits
    namespace pcidr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Disable
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Disable
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Disable
    }

    /// PCIMR Register bits
    namespace pcimr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Mask
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Mask
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Mask
    }

    /// PCISR Register bits
    namespace pcisr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error.
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer.
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full
    }

    /// PCRHR Register bits
    namespace pcrhr_bits {
        constexpr uint32_t RDATA = (32 << 0);  ///< Parallel Capture Mode Reception Data.
    }

}

// ============================================================================
// PIOC Peripheral
// ============================================================================

namespace pioc {
    /// Base addresses
    constexpr uint32_t PIOC_BASE = 0x400E1200;

    /// PIOC Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR[%s];  ///< Offset: 0x70 - Peripheral Select Register
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t PCMR;  ///< Offset: 0x150 - Parallel Capture Mode Register
        volatile uint32_t PCIER;  ///< Offset: 0x154 - Parallel Capture Interrupt Enable Register
        volatile uint32_t PCIDR;  ///< Offset: 0x158 - Parallel Capture Interrupt Disable Register
        volatile uint32_t PCIMR;  ///< Offset: 0x15C - Parallel Capture Interrupt Mask Register
        volatile uint32_t PCISR;  ///< Offset: 0x160 - Parallel Capture Interrupt Status Register
        volatile uint32_t PCRHR;  ///< Offset: 0x164 - Parallel Capture Reception Holding Register
    };

    /// Peripheral instances
    inline Registers* PIOC = reinterpret_cast<Registers*>(PIOC_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR[%s] Register bits
    namespace abcdsr[%s]_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// PCMR Register bits
    namespace pcmr_bits {
        constexpr uint32_t PCEN = (1U << 0);  ///< Parallel Capture Mode Enable
        constexpr uint32_t DSIZE = (2 << 4);  ///< Parallel Capture Mode Data Size
        constexpr uint32_t ALWYS = (1U << 9);  ///< Parallel Capture Mode Always Sampling
        constexpr uint32_t HALFS = (1U << 10);  ///< Parallel Capture Mode Half Sampling
        constexpr uint32_t FRSTS = (1U << 11);  ///< Parallel Capture Mode First Sample
    }

    /// PCIER Register bits
    namespace pcier_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Enable
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Enable
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Enable
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Enable
    }

    /// PCIDR Register bits
    namespace pcidr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Disable
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Disable
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Disable
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Disable
    }

    /// PCIMR Register bits
    namespace pcimr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready Interrupt Mask
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error Interrupt Mask
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer Interrupt Mask
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full Interrupt Mask
    }

    /// PCISR Register bits
    namespace pcisr_bits {
        constexpr uint32_t DRDY = (1U << 0);  ///< Parallel Capture Mode Data Ready
        constexpr uint32_t OVRE = (1U << 1);  ///< Parallel Capture Mode Overrun Error.
        constexpr uint32_t ENDRX = (1U << 2);  ///< End of Reception Transfer.
        constexpr uint32_t RXBUFF = (1U << 3);  ///< Reception Buffer Full
    }

    /// PCRHR Register bits
    namespace pcrhr_bits {
        constexpr uint32_t RDATA = (32 << 0);  ///< Parallel Capture Mode Reception Data.
    }

}

// ============================================================================
// RSTC Peripheral
// ============================================================================

namespace rstc {
    /// Base addresses
    constexpr uint32_t RSTC_BASE = 0x400E1400;

    /// RSTC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t SR;  ///< Offset: 0x04 - Status Register
        volatile uint32_t MR;  ///< Offset: 0x08 - Mode Register
    };

    /// Peripheral instances
    inline Registers* RSTC = reinterpret_cast<Registers*>(RSTC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PROCRST = (1U << 0);  ///< Processor Reset
        constexpr uint32_t PERRST = (1U << 2);  ///< Peripheral Reset
        constexpr uint32_t EXTRST = (1U << 3);  ///< External Reset
        constexpr uint32_t KEY = (8 << 24);  ///< System Reset Key
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t URSTS = (1U << 0);  ///< User Reset Status
        constexpr uint32_t RSTTYP = (3 << 8);  ///< Reset Type
        constexpr uint32_t NRSTL = (1U << 16);  ///< NRST Pin Level
        constexpr uint32_t SRCMP = (1U << 17);  ///< Software Reset Command in Progress
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t URSTEN = (1U << 0);  ///< User Reset Enable
        constexpr uint32_t URSTIEN = (1U << 4);  ///< User Reset Interrupt Enable
        constexpr uint32_t ERSTL = (4 << 8);  ///< External Reset Length
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

}

// ============================================================================
// SUPC Peripheral
// ============================================================================

namespace supc {
    /// Base addresses
    constexpr uint32_t SUPC_BASE = 0x400E1410;

    /// SUPC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Supply Controller Control Register
        volatile uint32_t SMMR;  ///< Offset: 0x04 - Supply Controller Supply Monitor Mode Register
        volatile uint32_t MR;  ///< Offset: 0x08 - Supply Controller Mode Register
        volatile uint32_t WUMR;  ///< Offset: 0x0C - Supply Controller Wake Up Mode Register
        volatile uint32_t WUIR;  ///< Offset: 0x10 - Supply Controller Wake Up Inputs Register
        volatile uint32_t SR;  ///< Offset: 0x14 - Supply Controller Status Register
    };

    /// Peripheral instances
    inline Registers* SUPC = reinterpret_cast<Registers*>(SUPC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t VROFF = (1U << 2);  ///< Voltage Regulator Off
        constexpr uint32_t XTALSEL = (1U << 3);  ///< Crystal Oscillator Select
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

    /// SMMR Register bits
    namespace smmr_bits {
        constexpr uint32_t SMTH = (4 << 0);  ///< Supply Monitor Threshold
        constexpr uint32_t SMSMPL = (3 << 8);  ///< Supply Monitor Sampling Period
        constexpr uint32_t SMRSTEN = (1U << 12);  ///< Supply Monitor Reset Enable
        constexpr uint32_t SMIEN = (1U << 13);  ///< Supply Monitor Interrupt Enable
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t BODRSTEN = (1U << 12);  ///< Brownout Detector Reset Enable
        constexpr uint32_t BODDIS = (1U << 13);  ///< Brownout Detector Disable
        constexpr uint32_t ONREG = (1U << 14);  ///< Voltage Regulator enable
        constexpr uint32_t OSCBYPASS = (1U << 20);  ///< Oscillator Bypass
        constexpr uint32_t KEY = (8 << 24);  ///< Password Key
    }

    /// WUMR Register bits
    namespace wumr_bits {
        constexpr uint32_t SMEN = (1U << 1);  ///< Supply Monitor Wake Up Enable
        constexpr uint32_t RTTEN = (1U << 2);  ///< Real Time Timer Wake Up Enable
        constexpr uint32_t RTCEN = (1U << 3);  ///< Real Time Clock Wake Up Enable
        constexpr uint32_t LPDBCEN0 = (1U << 5);  ///< Low power Debouncer ENable WKUP0
        constexpr uint32_t LPDBCEN1 = (1U << 6);  ///< Low power Debouncer ENable WKUP1
        constexpr uint32_t LPDBCCLR = (1U << 7);  ///< Low power Debouncer Clear
        constexpr uint32_t WKUPDBC = (3 << 12);  ///< Wake Up Inputs Debouncer Period
        constexpr uint32_t LPDBC = (3 << 16);  ///< Low Power DeBounCer Period
    }

    /// WUIR Register bits
    namespace wuir_bits {
        constexpr uint32_t WKUPEN0 = (1U << 0);  ///< Wake Up Input Enable 0
        constexpr uint32_t WKUPEN1 = (1U << 1);  ///< Wake Up Input Enable 1
        constexpr uint32_t WKUPEN2 = (1U << 2);  ///< Wake Up Input Enable 2
        constexpr uint32_t WKUPEN3 = (1U << 3);  ///< Wake Up Input Enable 3
        constexpr uint32_t WKUPEN4 = (1U << 4);  ///< Wake Up Input Enable 4
        constexpr uint32_t WKUPEN5 = (1U << 5);  ///< Wake Up Input Enable 5
        constexpr uint32_t WKUPEN6 = (1U << 6);  ///< Wake Up Input Enable 6
        constexpr uint32_t WKUPEN7 = (1U << 7);  ///< Wake Up Input Enable 7
        constexpr uint32_t WKUPEN8 = (1U << 8);  ///< Wake Up Input Enable 8
        constexpr uint32_t WKUPEN9 = (1U << 9);  ///< Wake Up Input Enable 9
        constexpr uint32_t WKUPEN10 = (1U << 10);  ///< Wake Up Input Enable 10
        constexpr uint32_t WKUPEN11 = (1U << 11);  ///< Wake Up Input Enable 11
        constexpr uint32_t WKUPEN12 = (1U << 12);  ///< Wake Up Input Enable 12
        constexpr uint32_t WKUPEN13 = (1U << 13);  ///< Wake Up Input Enable 13
        constexpr uint32_t WKUPEN14 = (1U << 14);  ///< Wake Up Input Enable 14
        constexpr uint32_t WKUPEN15 = (1U << 15);  ///< Wake Up Input Enable 15
        constexpr uint32_t WKUPT0 = (1U << 16);  ///< Wake Up Input Type 0
        constexpr uint32_t WKUPT1 = (1U << 17);  ///< Wake Up Input Type 1
        constexpr uint32_t WKUPT2 = (1U << 18);  ///< Wake Up Input Type 2
        constexpr uint32_t WKUPT3 = (1U << 19);  ///< Wake Up Input Type 3
        constexpr uint32_t WKUPT4 = (1U << 20);  ///< Wake Up Input Type 4
        constexpr uint32_t WKUPT5 = (1U << 21);  ///< Wake Up Input Type 5
        constexpr uint32_t WKUPT6 = (1U << 22);  ///< Wake Up Input Type 6
        constexpr uint32_t WKUPT7 = (1U << 23);  ///< Wake Up Input Type 7
        constexpr uint32_t WKUPT8 = (1U << 24);  ///< Wake Up Input Type 8
        constexpr uint32_t WKUPT9 = (1U << 25);  ///< Wake Up Input Type 9
        constexpr uint32_t WKUPT10 = (1U << 26);  ///< Wake Up Input Type 10
        constexpr uint32_t WKUPT11 = (1U << 27);  ///< Wake Up Input Type 11
        constexpr uint32_t WKUPT12 = (1U << 28);  ///< Wake Up Input Type 12
        constexpr uint32_t WKUPT13 = (1U << 29);  ///< Wake Up Input Type 13
        constexpr uint32_t WKUPT14 = (1U << 30);  ///< Wake Up Input Type 14
        constexpr uint32_t WKUPT15 = (1U << 31);  ///< Wake Up Input Type 15
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t WKUPS = (1U << 1);  ///< WKUP Wake Up Status
        constexpr uint32_t SMWS = (1U << 2);  ///< Supply Monitor Detection Wake Up Status
        constexpr uint32_t BODRSTS = (1U << 3);  ///< Brownout Detector Reset Status
        constexpr uint32_t SMRSTS = (1U << 4);  ///< Supply Monitor Reset Status
        constexpr uint32_t SMS = (1U << 5);  ///< Supply Monitor Status
        constexpr uint32_t SMOS = (1U << 6);  ///< Supply Monitor Output Status
        constexpr uint32_t OSCSEL = (1U << 7);  ///< 32-kHz Oscillator Selection Status
        constexpr uint32_t LPDBCS0 = (1U << 13);  ///< Low Power Debouncer Wake Up Status on WKUP0
        constexpr uint32_t LPDBCS1 = (1U << 14);  ///< Low Power Debouncer Wake Up Status on WKUP1
        constexpr uint32_t WKUPIS0 = (1U << 16);  ///< WKUP Input Status 0
        constexpr uint32_t WKUPIS1 = (1U << 17);  ///< WKUP Input Status 1
        constexpr uint32_t WKUPIS2 = (1U << 18);  ///< WKUP Input Status 2
        constexpr uint32_t WKUPIS3 = (1U << 19);  ///< WKUP Input Status 3
        constexpr uint32_t WKUPIS4 = (1U << 20);  ///< WKUP Input Status 4
        constexpr uint32_t WKUPIS5 = (1U << 21);  ///< WKUP Input Status 5
        constexpr uint32_t WKUPIS6 = (1U << 22);  ///< WKUP Input Status 6
        constexpr uint32_t WKUPIS7 = (1U << 23);  ///< WKUP Input Status 7
        constexpr uint32_t WKUPIS8 = (1U << 24);  ///< WKUP Input Status 8
        constexpr uint32_t WKUPIS9 = (1U << 25);  ///< WKUP Input Status 9
        constexpr uint32_t WKUPIS10 = (1U << 26);  ///< WKUP Input Status 10
        constexpr uint32_t WKUPIS11 = (1U << 27);  ///< WKUP Input Status 11
        constexpr uint32_t WKUPIS12 = (1U << 28);  ///< WKUP Input Status 12
        constexpr uint32_t WKUPIS13 = (1U << 29);  ///< WKUP Input Status 13
        constexpr uint32_t WKUPIS14 = (1U << 30);  ///< WKUP Input Status 14
        constexpr uint32_t WKUPIS15 = (1U << 31);  ///< WKUP Input Status 15
    }

}

// ============================================================================
// RTT Peripheral
// ============================================================================

namespace rtt {
    /// Base addresses
    constexpr uint32_t RTT_BASE = 0x400E1430;

    /// RTT Register structure
    struct Registers {
        volatile uint32_t MR;  ///< Offset: 0x00 - Mode Register
        volatile uint32_t AR;  ///< Offset: 0x04 - Alarm Register
        volatile uint32_t VR;  ///< Offset: 0x08 - Value Register
        volatile uint32_t SR;  ///< Offset: 0x0C - Status Register
    };

    /// Peripheral instances
    inline Registers* RTT = reinterpret_cast<Registers*>(RTT_BASE);

    // Bit definitions
    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t RTPRES = (16 << 0);  ///< Real-time Timer Prescaler Value
        constexpr uint32_t ALMIEN = (1U << 16);  ///< Alarm Interrupt Enable
        constexpr uint32_t RTTINCIEN = (1U << 17);  ///< Real-time Timer Increment Interrupt Enable
        constexpr uint32_t RTTRST = (1U << 18);  ///< Real-time Timer Restart
        constexpr uint32_t RTTDIS = (1U << 20);  ///< Real-time Timer Disable
        constexpr uint32_t RTC1HZ = (1U << 24);  ///< Real-Time Clock 1Hz Clock Selection
    }

    /// AR Register bits
    namespace ar_bits {
        constexpr uint32_t ALMV = (32 << 0);  ///< Alarm Value
    }

    /// VR Register bits
    namespace vr_bits {
        constexpr uint32_t CRTV = (32 << 0);  ///< Current Real-time Value
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t ALMS = (1U << 0);  ///< Real-time Alarm Status
        constexpr uint32_t RTTINC = (1U << 1);  ///< Real-time Timer Increment
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WDT_BASE = 0x400E1450;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t SR;  ///< Offset: 0x08 - Status Register
    };

    /// Peripheral instances
    inline Registers* WDT = reinterpret_cast<Registers*>(WDT_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WDRSTT = (1U << 0);  ///< Watchdog Restart
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t WDV = (12 << 0);  ///< Watchdog Counter Value
        constexpr uint32_t WDFIEN = (1U << 12);  ///< Watchdog Fault Interrupt Enable
        constexpr uint32_t WDRSTEN = (1U << 13);  ///< Watchdog Reset Enable
        constexpr uint32_t WDRPROC = (1U << 14);  ///< Watchdog Reset Processor
        constexpr uint32_t WDDIS = (1U << 15);  ///< Watchdog Disable
        constexpr uint32_t WDD = (12 << 16);  ///< Watchdog Delta Value
        constexpr uint32_t WDDBGHLT = (1U << 28);  ///< Watchdog Debug Halt
        constexpr uint32_t WDIDLEHLT = (1U << 29);  ///< Watchdog Idle Halt
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t WDUNF = (1U << 0);  ///< Watchdog Underflow
        constexpr uint32_t WDERR = (1U << 1);  ///< Watchdog Error
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x400E1460;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t TIMR;  ///< Offset: 0x08 - Time Register
        volatile uint32_t CALR;  ///< Offset: 0x0C - Calendar Register
        volatile uint32_t TIMALR;  ///< Offset: 0x10 - Time Alarm Register
        volatile uint32_t CALALR;  ///< Offset: 0x14 - Calendar Alarm Register
        volatile uint32_t SR;  ///< Offset: 0x18 - Status Register
        volatile uint32_t SCCR;  ///< Offset: 0x1C - Status Clear Command Register
        volatile uint32_t IER;  ///< Offset: 0x20 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x24 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x28 - Interrupt Mask Register
        volatile uint32_t VER;  ///< Offset: 0x2C - Valid Entry Register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t UPDTIM = (1U << 0);  ///< Update Request Time Register
        constexpr uint32_t UPDCAL = (1U << 1);  ///< Update Request Calendar Register
        constexpr uint32_t TIMEVSEL = (2 << 8);  ///< Time Event Selection
        constexpr uint32_t CALEVSEL = (2 << 16);  ///< Calendar Event Selection
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t HRMOD = (1U << 0);  ///< 12-/24-hour Mode
        constexpr uint32_t PERSIAN = (1U << 1);  ///< PERSIAN Calendar
        constexpr uint32_t NEGPPM = (1U << 4);  ///< NEGative PPM Correction
        constexpr uint32_t CORRECTION = (7 << 8);  ///< Slow Clock Correction
        constexpr uint32_t HIGHPPM = (1U << 15);  ///< HIGH PPM Correction
        constexpr uint32_t OUT0 = (3 << 16);  ///< RTCOUT0 Output Source Selection
        constexpr uint32_t OUT1 = (3 << 20);  ///< RTCOUT1 Output Source Selection
        constexpr uint32_t THIGH = (3 << 24);  ///< High Duration of the Output Pulse
        constexpr uint32_t TPERIOD = (2 << 28);  ///< Period of the Output Pulse
    }

    /// TIMR Register bits
    namespace timr_bits {
        constexpr uint32_t SEC = (7 << 0);  ///< Current Second
        constexpr uint32_t MIN = (7 << 8);  ///< Current Minute
        constexpr uint32_t HOUR = (6 << 16);  ///< Current Hour
        constexpr uint32_t AMPM = (1U << 22);  ///< Ante Meridiem Post Meridiem Indicator
    }

    /// CALR Register bits
    namespace calr_bits {
        constexpr uint32_t CENT = (7 << 0);  ///< Current Century
        constexpr uint32_t YEAR = (8 << 8);  ///< Current Year
        constexpr uint32_t MONTH = (5 << 16);  ///< Current Month
        constexpr uint32_t DAY = (3 << 21);  ///< Current Day in Current Week
        constexpr uint32_t DATE = (6 << 24);  ///< Current Day in Current Month
    }

    /// TIMALR Register bits
    namespace timalr_bits {
        constexpr uint32_t SEC = (7 << 0);  ///< Second Alarm
        constexpr uint32_t SECEN = (1U << 7);  ///< Second Alarm Enable
        constexpr uint32_t MIN = (7 << 8);  ///< Minute Alarm
        constexpr uint32_t MINEN = (1U << 15);  ///< Minute Alarm Enable
        constexpr uint32_t HOUR = (6 << 16);  ///< Hour Alarm
        constexpr uint32_t AMPM = (1U << 22);  ///< AM/PM Indicator
        constexpr uint32_t HOUREN = (1U << 23);  ///< Hour Alarm Enable
    }

    /// CALALR Register bits
    namespace calalr_bits {
        constexpr uint32_t MONTH = (5 << 16);  ///< Month Alarm
        constexpr uint32_t MTHEN = (1U << 23);  ///< Month Alarm Enable
        constexpr uint32_t DATE = (6 << 24);  ///< Date Alarm
        constexpr uint32_t DATEEN = (1U << 31);  ///< Date Alarm Enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t ACKUPD = (1U << 0);  ///< Acknowledge for Update
        constexpr uint32_t ALARM = (1U << 1);  ///< Alarm Flag
        constexpr uint32_t SEC = (1U << 2);  ///< Second Event
        constexpr uint32_t TIMEV = (1U << 3);  ///< Time Event
        constexpr uint32_t CALEV = (1U << 4);  ///< Calendar Event
        constexpr uint32_t TDERR = (1U << 5);  ///< Time and/or Date Free Running Error
    }

    /// SCCR Register bits
    namespace sccr_bits {
        constexpr uint32_t ACKCLR = (1U << 0);  ///< Acknowledge Clear
        constexpr uint32_t ALRCLR = (1U << 1);  ///< Alarm Clear
        constexpr uint32_t SECCLR = (1U << 2);  ///< Second Clear
        constexpr uint32_t TIMCLR = (1U << 3);  ///< Time Clear
        constexpr uint32_t CALCLR = (1U << 4);  ///< Calendar Clear
        constexpr uint32_t TDERRCLR = (1U << 5);  ///< Time and/or Date Free Running Error Clear
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t ACKEN = (1U << 0);  ///< Acknowledge Update Interrupt Enable
        constexpr uint32_t ALREN = (1U << 1);  ///< Alarm Interrupt Enable
        constexpr uint32_t SECEN = (1U << 2);  ///< Second Event Interrupt Enable
        constexpr uint32_t TIMEN = (1U << 3);  ///< Time Event Interrupt Enable
        constexpr uint32_t CALEN = (1U << 4);  ///< Calendar Event Interrupt Enable
        constexpr uint32_t TDERREN = (1U << 5);  ///< Time and/or Date Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t ACKDIS = (1U << 0);  ///< Acknowledge Update Interrupt Disable
        constexpr uint32_t ALRDIS = (1U << 1);  ///< Alarm Interrupt Disable
        constexpr uint32_t SECDIS = (1U << 2);  ///< Second Event Interrupt Disable
        constexpr uint32_t TIMDIS = (1U << 3);  ///< Time Event Interrupt Disable
        constexpr uint32_t CALDIS = (1U << 4);  ///< Calendar Event Interrupt Disable
        constexpr uint32_t TDERRDIS = (1U << 5);  ///< Time and/or Date Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t ACK = (1U << 0);  ///< Acknowledge Update Interrupt Mask
        constexpr uint32_t ALR = (1U << 1);  ///< Alarm Interrupt Mask
        constexpr uint32_t SEC = (1U << 2);  ///< Second Event Interrupt Mask
        constexpr uint32_t TIM = (1U << 3);  ///< Time Event Interrupt Mask
        constexpr uint32_t CAL = (1U << 4);  ///< Calendar Event Interrupt Mask
    }

    /// VER Register bits
    namespace ver_bits {
        constexpr uint32_t NVTIM = (1U << 0);  ///< Non-valid Time
        constexpr uint32_t NVCAL = (1U << 1);  ///< Non-valid Calendar
        constexpr uint32_t NVTIMALR = (1U << 2);  ///< Non-valid Time Alarm
        constexpr uint32_t NVCALALR = (1U << 3);  ///< Non-valid Calendar Alarm
    }

}

// ============================================================================
// GPBR Peripheral
// ============================================================================

namespace gpbr {
    /// Base addresses
    constexpr uint32_t GPBR_BASE = 0x400E1490;

    /// GPBR Register structure
    struct Registers {
        volatile uint32_t GPBR[%s];  ///< Offset: 0x00 - General Purpose Backup Register
    };

    /// Peripheral instances
    inline Registers* GPBR = reinterpret_cast<Registers*>(GPBR_BASE);

    // Bit definitions
    /// GPBR[%s] Register bits
    namespace gpbr[%s]_bits {
        constexpr uint32_t GPBR_VALUE = (32 << 0);  ///< Value of GPBR x
    }

}


} // namespace alloy::generated::atsam3s8c

#endif // ALLOY_GENERATED_ATSAM3S8C_PERIPHERALS_HPP