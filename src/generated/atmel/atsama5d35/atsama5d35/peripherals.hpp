/// Auto-generated code for ATSAMA5D35
/// Generated by Alloy Code Generator
/// Source: atmel_sama5.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 17:44:46
#ifndef ALLOY_GENERATED_ATSAMA5D35_PERIPHERALS_HPP
#define ALLOY_GENERATED_ATSAMA5D35_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::atsama5d35 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_smd = true;
    constexpr uint32_t num_smd_instances = 1;
    constexpr bool has_aximx = true;
    constexpr uint32_t num_aximx_instances = 1;
    constexpr bool has_hsmci0 = true;
    constexpr uint32_t num_hsmci0_instances = 1;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 2;
    constexpr bool has_ssc0 = true;
    constexpr uint32_t num_ssc0_instances = 1;
    constexpr bool has_can = true;
    constexpr uint32_t num_can_instances = 2;
    constexpr bool has_tim = true;
    constexpr uint32_t num_tim_instances = 3;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 3;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 6;
    constexpr bool has_gmac = true;
    constexpr uint32_t num_gmac_instances = 1;
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 1;
    constexpr bool has_isi = true;
    constexpr uint32_t num_isi_instances = 1;
    constexpr bool has_sfr = true;
    constexpr uint32_t num_sfr_instances = 1;
    constexpr bool has_hsmci1 = true;
    constexpr uint32_t num_hsmci1_instances = 1;
    constexpr bool has_hsmci2 = true;
    constexpr uint32_t num_hsmci2_instances = 1;
    constexpr bool has_ssc1 = true;
    constexpr uint32_t num_ssc1_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 1;
    constexpr bool has_eth = true;
    constexpr uint32_t num_eth_instances = 1;
    constexpr bool has_udphs = true;
    constexpr uint32_t num_udphs_instances = 1;
    constexpr bool has_rng = true;
    constexpr uint32_t num_rng_instances = 1;
    constexpr bool has_fuse = true;
    constexpr uint32_t num_fuse_instances = 1;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 2;
    constexpr bool has_mpddrc = true;
    constexpr uint32_t num_mpddrc_instances = 1;
    constexpr bool has_matrix = true;
    constexpr uint32_t num_matrix_instances = 1;
    constexpr bool has_dbgu = true;
    constexpr uint32_t num_dbgu_instances = 1;
    constexpr bool has_aic = true;
    constexpr uint32_t num_aic_instances = 1;
    constexpr bool has_pioa = true;
    constexpr uint32_t num_pioa_instances = 1;
    constexpr bool has_piob = true;
    constexpr uint32_t num_piob_instances = 1;
    constexpr bool has_pioc = true;
    constexpr uint32_t num_pioc_instances = 1;
    constexpr bool has_piod = true;
    constexpr uint32_t num_piod_instances = 1;
    constexpr bool has_pioe = true;
    constexpr uint32_t num_pioe_instances = 1;
    constexpr bool has_pmc = true;
    constexpr uint32_t num_pmc_instances = 1;
    constexpr bool has_rstc = true;
    constexpr uint32_t num_rstc_instances = 1;
    constexpr bool has_shdwc = true;
    constexpr uint32_t num_shdwc_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 1;
    constexpr bool has_sckc = true;
    constexpr uint32_t num_sckc_instances = 1;
    constexpr bool has_bsc = true;
    constexpr uint32_t num_bsc_instances = 1;
    constexpr bool has_gpbr = true;
    constexpr uint32_t num_gpbr_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct smd_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct aximx_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct hsmci0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct ssc0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct can_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct tim_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 6;
    };
    template<>
    struct peripheral_count<struct gmac_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct isi_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sfr_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct hsmci1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct hsmci2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssc1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct eth_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct udphs_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rng_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fuse_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct mpddrc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct matrix_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dbgu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct aic_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pioa_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct piob_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pioc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct piod_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pioe_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pmc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rstc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct shdwc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sckc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bsc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpbr_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits

    // USART-specific traits
    constexpr bool has_usart0 = true;
    constexpr bool has_usart1 = true;
    constexpr bool has_uart0 = true;
    constexpr bool has_usart2 = true;
    constexpr bool has_usart3 = true;
    constexpr bool has_uart1 = true;
}

// ============================================================================
// SMD Peripheral
// ============================================================================

namespace smd {
    /// Base addresses
    constexpr uint32_t SMD_BASE = 0x00400000;

    /// SMD Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SMD = reinterpret_cast<Registers*>(SMD_BASE);

}

// ============================================================================
// AXIMX Peripheral
// ============================================================================

namespace aximx {
    /// Base addresses
    constexpr uint32_t AXIMX_BASE = 0x00800000;

    /// AXIMX Register structure
    struct Registers {
        volatile uint32_t REMAP;  ///< Offset: 0x00 - Remap Register
        volatile uint32_t PERIPH_ID4;  ///< Offset: 0x1FD0 - Peripheral ID Register 4
        volatile uint32_t PERIPH_ID5;  ///< Offset: 0x1FD4 - Peripheral ID Register 5
        volatile uint32_t PERIPH_ID6;  ///< Offset: 0x1FD8 - Peripheral ID Register 6
        volatile uint32_t PERIPH_ID7;  ///< Offset: 0x1FDC - Peripheral ID Register 7
        volatile uint32_t PERIPH_ID0;  ///< Offset: 0x1FE0 - Peripheral ID Register 0
        volatile uint32_t PERIPH_ID1;  ///< Offset: 0x1FE4 - Peripheral ID Register 1
        volatile uint32_t PERIPH_ID2;  ///< Offset: 0x1FE8 - Peripheral ID Register 2
        volatile uint32_t PERIPH_ID3;  ///< Offset: 0x1FEC - Peripheral ID Register 3
        volatile uint32_t COMP_ID__;  ///< Offset: 0x1FF0 - Component ID Register (renamed from COMP_ID__)
        volatile uint32_t AMIB3_FN_MOD_BM_ISS;  ///< Offset: 0x5008 - AMIB3 Bus Matrix Functionality Modification Register
        volatile uint32_t AMIB3_FN_MOD2;  ///< Offset: 0x5024 - AMIB3 Bypass Merge
        volatile uint32_t ASIB0_READ_QOS;  ///< Offset: 0x42100 - ASIB0 Read Channel QoS Register
        volatile uint32_t ASIB0_WRITE_QOS;  ///< Offset: 0x42104 - ASIB0 Write Channel QoS Register
        volatile uint32_t ASIB1_FN_MOD_AHB;  ///< Offset: 0x43028 - ASIB1 AHB Functionality Modification Register
        volatile uint32_t ASIB1_READ_QOS;  ///< Offset: 0x43100 - ASIB1 Read Channel QoS Register
        volatile uint32_t ASIB1_WRITE_QOS;  ///< Offset: 0x43104 - ASIB1 Write Channel QoS Register
        volatile uint32_t ASIB1_FN_MOD;  ///< Offset: 0x43108 - ASIB1 Issuing Functionality Modification Register
    };

    /// Peripheral instances
    inline Registers* AXIMX = reinterpret_cast<Registers*>(AXIMX_BASE);

    // Bit definitions
    /// REMAP Register bits
    namespace remap_bits {
        constexpr uint32_t REMAP0 = (1U << 0);  ///< Remap State 0
        constexpr uint32_t REMAP1 = (1U << 1);  ///< Remap State 1
    }

    /// PERIPH_ID4 Register bits
    namespace periph_id4_bits {
        constexpr uint32_t ID = (8 << 0);  ///< Peripheral ID
    }

    /// PERIPH_ID5 Register bits
    namespace periph_id5_bits {
        constexpr uint32_t ID = (8 << 0);  ///< Peripheral ID
    }

    /// PERIPH_ID6 Register bits
    namespace periph_id6_bits {
        constexpr uint32_t ID = (8 << 0);  ///< Peripheral ID
    }

    /// PERIPH_ID7 Register bits
    namespace periph_id7_bits {
        constexpr uint32_t ID = (8 << 0);  ///< Peripheral ID
    }

    /// PERIPH_ID0 Register bits
    namespace periph_id0_bits {
        constexpr uint32_t ID = (8 << 0);  ///< Peripheral ID
    }

    /// PERIPH_ID1 Register bits
    namespace periph_id1_bits {
        constexpr uint32_t ID = (8 << 0);  ///< Peripheral ID
    }

    /// PERIPH_ID2 Register bits
    namespace periph_id2_bits {
        constexpr uint32_t ID = (8 << 0);  ///< Peripheral ID
    }

    /// PERIPH_ID3 Register bits
    namespace periph_id3_bits {
        constexpr uint32_t ID = (8 << 0);  ///< Peripheral ID
    }

    /// COMP_ID__ Register bits
    namespace comp_id___bits {
        constexpr uint32_t ID = (8 << 0);  ///< Component ID
    }

    /// AMIB3_FN_MOD_BM_ISS Register bits
    namespace amib3_fn_mod_bm_iss_bits {
        constexpr uint32_t RD_ISS = (1U << 0);  ///< Read Issuing
        constexpr uint32_t WR_ISS = (1U << 1);  ///< Write Issuing
    }

    /// AMIB3_FN_MOD2 Register bits
    namespace amib3_fn_mod2_bits {
        constexpr uint32_t BP_MRG = (1U << 0);  ///< Bypass Merge
    }

    /// ASIB0_READ_QOS Register bits
    namespace asib0_read_qos_bits {
        constexpr uint32_t RD_QOS = (4 << 0);  ///< Read QoS
    }

    /// ASIB0_WRITE_QOS Register bits
    namespace asib0_write_qos_bits {
        constexpr uint32_t WR_QOS = (4 << 0);  ///< Write QoS
    }

    /// ASIB1_FN_MOD_AHB Register bits
    namespace asib1_fn_mod_ahb_bits {
        constexpr uint32_t RD_INCR_OVR = (1U << 0);  ///< Read INCR Override
        constexpr uint32_t WR_INCR_OVR = (1U << 1);  ///< Write INCR override
        constexpr uint32_t LOCK_OVR = (1U << 2);  ///< Lock Override
    }

    /// ASIB1_READ_QOS Register bits
    namespace asib1_read_qos_bits {
        constexpr uint32_t RD_QOS = (4 << 0);  ///< Read QoS
    }

    /// ASIB1_WRITE_QOS Register bits
    namespace asib1_write_qos_bits {
        constexpr uint32_t WR_QOS = (4 << 0);  ///< Write QoS
    }

    /// ASIB1_FN_MOD Register bits
    namespace asib1_fn_mod_bits {
        constexpr uint32_t RD_ISS = (1U << 0);  ///< Read Issuing
        constexpr uint32_t WR_ISS = (1U << 1);  ///< Write Issuing
    }

}

// ============================================================================
// HSMCI0 Peripheral
// ============================================================================

namespace hsmci0 {
    /// Base addresses
    constexpr uint32_t HSMCI0_BASE = 0xF0000000;

    /// HSMCI0 Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t DTOR;  ///< Offset: 0x08 - Data Timeout Register
        volatile uint32_t SDCR;  ///< Offset: 0x0C - SD/SDIO Card Register
        volatile uint32_t ARGR;  ///< Offset: 0x10 - Argument Register
        volatile uint32_t CMDR;  ///< Offset: 0x14 - Command Register
        volatile uint32_t BLKR;  ///< Offset: 0x18 - Block Register
        volatile uint32_t CSTOR;  ///< Offset: 0x1C - Completion Signal Timeout Register
        volatile uint32_t RSPR__;  ///< Offset: 0x20 - Response Register (renamed from RSPR__)
        volatile uint32_t RDR;  ///< Offset: 0x30 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x34 - Transmit Data Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t DMA;  ///< Offset: 0x50 - DMA Configuration Register
        volatile uint32_t CFG;  ///< Offset: 0x54 - Configuration Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protection Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
        volatile uint32_t FIFO__;  ///< Offset: 0x200 - FIFO Memory Aperture0 (renamed from FIFO__)
    };

    /// Peripheral instances
    inline Registers* HSMCI0 = reinterpret_cast<Registers*>(HSMCI0_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t MCIEN = (1U << 0);  ///< Multi-Media Interface Enable
        constexpr uint32_t MCIDIS = (1U << 1);  ///< Multi-Media Interface Disable
        constexpr uint32_t PWSEN = (1U << 2);  ///< Power Save Mode Enable
        constexpr uint32_t PWSDIS = (1U << 3);  ///< Power Save Mode Disable
        constexpr uint32_t SWRST = (1U << 7);  ///< Software Reset
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t CLKDIV = (8 << 0);  ///< Clock Divider
        constexpr uint32_t PWSDIV = (3 << 8);  ///< Power Saving Divider
        constexpr uint32_t RDPROOF = (1U << 11);  ///< Read Proof Enable
        constexpr uint32_t WRPROOF = (1U << 12);  ///< Write Proof Enable
        constexpr uint32_t FBYTE = (1U << 13);  ///< Force Byte Transfer
        constexpr uint32_t PADV = (1U << 14);  ///< Padding Value
        constexpr uint32_t CLKODD = (1U << 16);  ///< Clock divider is odd
    }

    /// DTOR Register bits
    namespace dtor_bits {
        constexpr uint32_t DTOCYC = (4 << 0);  ///< Data Timeout Cycle Number
        constexpr uint32_t DTOMUL = (3 << 4);  ///< Data Timeout Multiplier
    }

    /// SDCR Register bits
    namespace sdcr_bits {
        constexpr uint32_t SDCSEL = (2 << 0);  ///< SDCard/SDIO Slot
        constexpr uint32_t SDCBUS = (2 << 6);  ///< SDCard/SDIO Bus Width
    }

    /// ARGR Register bits
    namespace argr_bits {
        constexpr uint32_t ARG = (32 << 0);  ///< Command Argument
    }

    /// CMDR Register bits
    namespace cmdr_bits {
        constexpr uint32_t CMDNB = (6 << 0);  ///< Command Number
        constexpr uint32_t RSPTYP = (2 << 6);  ///< Response Type
        constexpr uint32_t SPCMD = (3 << 8);  ///< Special Command
        constexpr uint32_t OPDCMD = (1U << 11);  ///< Open Drain Command
        constexpr uint32_t MAXLAT = (1U << 12);  ///< Max Latency for Command to Response
        constexpr uint32_t TRCMD = (2 << 16);  ///< Transfer Command
        constexpr uint32_t TRDIR = (1U << 18);  ///< Transfer Direction
        constexpr uint32_t TRTYP = (3 << 19);  ///< Transfer Type
        constexpr uint32_t IOSPCMD = (2 << 24);  ///< SDIO Special Command
        constexpr uint32_t ATACS = (1U << 26);  ///< ATA with Command Completion Signal
        constexpr uint32_t BOOT_ACK = (1U << 27);  ///< Boot Operation Acknowledge.
    }

    /// BLKR Register bits
    namespace blkr_bits {
        constexpr uint32_t BCNT = (16 << 0);  ///< MMC/SDIO Block Count - SDIO Byte Count
        constexpr uint32_t BLKLEN = (16 << 16);  ///< Data Block Length
    }

    /// CSTOR Register bits
    namespace cstor_bits {
        constexpr uint32_t CSTOCYC = (4 << 0);  ///< Completion Signal Timeout Cycle Number
        constexpr uint32_t CSTOMUL = (3 << 4);  ///< Completion Signal Timeout Multiplier
    }

    /// RSPR__ Register bits
    namespace rspr___bits {
        constexpr uint32_t RSP = (32 << 0);  ///< Response
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Write
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< HSMCI Not Busy
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status
        constexpr uint32_t CSRCV = (1U << 13);  ///< CE-ATA Completion Signal Received
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer done
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty flag
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done flag
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Enable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Enable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Enable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Enable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Enable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Enable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Enable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Enable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Enable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Enable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Enable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Enable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Enable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Timeout Error Interrupt Enable
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Enable
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer completed Interrupt Enable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt enable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt enable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Enable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Enable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Enable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Disable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Disable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Disable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Disable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Disable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal received interrupt Disable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Disable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Disable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Disable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Disable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Disable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Disable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Disable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time out Error Interrupt Disable
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Disable
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer completed Interrupt Disable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt Disable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Disable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Disable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Disable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Disable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Mask
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Mask
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Mask
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Mask
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Mask
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Mask
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Mask
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Mask
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Mask
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Mask
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Mask
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Mask
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Mask
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error Interrupt Mask
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Mask
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer Completed Interrupt Mask
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO Empty Interrupt Mask
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Mask
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received Interrupt Mask
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error Interrupt Mask
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Mask
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Mask
    }

    /// DMA Register bits
    namespace dma_bits {
        constexpr uint32_t OFFSET = (2 << 0);  ///< DMA Write Buffer Offset
        constexpr uint32_t CHKSIZE = (3 << 4);  ///< DMA Channel Read and Write Chunk Size
        constexpr uint32_t DMAEN = (1U << 8);  ///< DMA Hardware Handshaking Enable
        constexpr uint32_t ROPT = (1U << 12);  ///< Read Optimization with padding
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t FIFOMODE = (1U << 0);  ///< HSMCI Internal FIFO control mode
        constexpr uint32_t FERRCTRL = (1U << 4);  ///< Flow Error flag reset control mode
        constexpr uint32_t HSMODE = (1U << 8);  ///< High Speed Mode
        constexpr uint32_t LSYNC = (1U << 12);  ///< Synchronize on the last block
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WP_EN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WP_KEY = (24 << 8);  ///< Write Protection Key password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WP_VS = (4 << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WP_VSRC = (16 << 8);  ///< Write Protection Violation SouRCe
    }

    /// FIFO__ Register bits
    namespace fifo___bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read or Data to Write
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI0_BASE = 0xF0004000;
    constexpr uint32_t SPI1_BASE = 0xF8008000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t RDR;  ///< Offset: 0x08 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x0C - Transmit Data Register
        volatile uint32_t SR;  ///< Offset: 0x10 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x14 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x18 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x1C - Interrupt Mask Register
        volatile uint32_t CSR__;  ///< Offset: 0x30 - Chip Select Register (renamed from CSR__)
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protection Control Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
    };

    /// Peripheral instances
    inline Registers* SPI0 = reinterpret_cast<Registers*>(SPI0_BASE);
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SPIEN = (1U << 0);  ///< SPI Enable
        constexpr uint32_t SPIDIS = (1U << 1);  ///< SPI Disable
        constexpr uint32_t SWRST = (1U << 7);  ///< SPI Software Reset
        constexpr uint32_t LASTXFER = (1U << 24);  ///< Last Transfer
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t MSTR = (1U << 0);  ///< Master/Slave Mode
        constexpr uint32_t PS = (1U << 1);  ///< Peripheral Select
        constexpr uint32_t PCSDEC = (1U << 2);  ///< Chip Select Decode
        constexpr uint32_t MODFDIS = (1U << 4);  ///< Mode Fault Detection
        constexpr uint32_t WDRBT = (1U << 5);  ///< Wait Data Read Before Transfer
        constexpr uint32_t LLB = (1U << 7);  ///< Local Loopback Enable
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
        constexpr uint32_t DLYBCS = (8 << 24);  ///< Delay Between Chip Selects
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t RD = (16 << 0);  ///< Receive Data
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t TD = (16 << 0);  ///< Transmit Data
        constexpr uint32_t PCS = (4 << 16);  ///< Peripheral Chip Select
        constexpr uint32_t LASTXFER = (1U << 24);  ///< Last Transfer
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit Data Register Empty
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Status
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty
        constexpr uint32_t UNDES = (1U << 10);  ///< Underrun Error Status (Slave Mode Only)
        constexpr uint32_t SPIENS = (1U << 16);  ///< SPI Enable Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Enable
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Enable
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Enable
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Enable
        constexpr uint32_t UNDES = (1U << 10);  ///< Underrun Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Disable
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Disable
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Disable
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Disable
        constexpr uint32_t UNDES = (1U << 10);  ///< Underrun Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t RDRF = (1U << 0);  ///< Receive Data Register Full Interrupt Mask
        constexpr uint32_t TDRE = (1U << 1);  ///< SPI Transmit Data Register Empty Interrupt Mask
        constexpr uint32_t MODF = (1U << 2);  ///< Mode Fault Error Interrupt Mask
        constexpr uint32_t OVRES = (1U << 3);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t NSSR = (1U << 8);  ///< NSS Rising Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmission Registers Empty Mask
        constexpr uint32_t UNDES = (1U << 10);  ///< Underrun Error Interrupt Mask
    }

    /// CSR__ Register bits
    namespace csr___bits {
        constexpr uint32_t CPOL = (1U << 0);  ///< Clock Polarity
        constexpr uint32_t NCPHA = (1U << 1);  ///< Clock Phase
        constexpr uint32_t CSNAAT = (1U << 2);  ///< Chip Select Not Active After Transfer (Ignored if CSAAT = 1)
        constexpr uint32_t CSAAT = (1U << 3);  ///< Chip Select Active After Transfer
        constexpr uint32_t BITS = (4 << 4);  ///< Bits Per Transfer
        constexpr uint32_t SCBR = (8 << 8);  ///< Serial Clock Baud Rate
        constexpr uint32_t DLYBS = (8 << 16);  ///< Delay Before SPCK
        constexpr uint32_t DLYBCT = (8 << 24);  ///< Delay Between Consecutive Transfers
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protection Key Password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WPVSRC = (8 << 8);  ///< Write Protection Violation Source
    }

}

// ============================================================================
// SSC0 Peripheral
// ============================================================================

namespace ssc0 {
    /// Base addresses
    constexpr uint32_t SSC0_BASE = 0xF0008000;

    /// SSC0 Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t CMR;  ///< Offset: 0x04 - Clock Mode Register
        volatile uint32_t RCMR;  ///< Offset: 0x10 - Receive Clock Mode Register
        volatile uint32_t RFMR;  ///< Offset: 0x14 - Receive Frame Mode Register
        volatile uint32_t TCMR;  ///< Offset: 0x18 - Transmit Clock Mode Register
        volatile uint32_t TFMR;  ///< Offset: 0x1C - Transmit Frame Mode Register
        volatile uint32_t RHR;  ///< Offset: 0x20 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x24 - Transmit Holding Register
        volatile uint32_t RSHR;  ///< Offset: 0x30 - Receive Sync. Holding Register
        volatile uint32_t TSHR;  ///< Offset: 0x34 - Transmit Sync. Holding Register
        volatile uint32_t RC0R;  ///< Offset: 0x38 - Receive Compare 0 Register
        volatile uint32_t RC1R;  ///< Offset: 0x3C - Receive Compare 1 Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* SSC0 = reinterpret_cast<Registers*>(SSC0_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RXEN = (1U << 0);  ///< Receive Enable
        constexpr uint32_t RXDIS = (1U << 1);  ///< Receive Disable
        constexpr uint32_t TXEN = (1U << 8);  ///< Transmit Enable
        constexpr uint32_t TXDIS = (1U << 9);  ///< Transmit Disable
        constexpr uint32_t SWRST = (1U << 15);  ///< Software Reset
    }

    /// CMR Register bits
    namespace cmr_bits {
        constexpr uint32_t DIV = (12 << 0);  ///< Clock Divider
    }

    /// RCMR Register bits
    namespace rcmr_bits {
        constexpr uint32_t CKS = (2 << 0);  ///< Receive Clock Selection
        constexpr uint32_t CKO = (3 << 2);  ///< Receive Clock Output Mode Selection
        constexpr uint32_t CKI = (1U << 5);  ///< Receive Clock Inversion
        constexpr uint32_t CKG = (2 << 6);  ///< Receive Clock Gating Selection
        constexpr uint32_t START = (4 << 8);  ///< Receive Start Selection
        constexpr uint32_t STOP = (1U << 12);  ///< Receive Stop Selection
        constexpr uint32_t STTDLY = (8 << 16);  ///< Receive Start Delay
        constexpr uint32_t PERIOD = (8 << 24);  ///< Receive Period Divider Selection
    }

    /// RFMR Register bits
    namespace rfmr_bits {
        constexpr uint32_t DATLEN = (5 << 0);  ///< Data Length
        constexpr uint32_t LOOP = (1U << 5);  ///< Loop Mode
        constexpr uint32_t MSBF = (1U << 7);  ///< Most Significant Bit First
        constexpr uint32_t DATNB = (4 << 8);  ///< Data Number per Frame
        constexpr uint32_t FSLEN = (4 << 16);  ///< Receive Frame Sync Length
        constexpr uint32_t FSOS = (3 << 20);  ///< Receive Frame Sync Output Selection
        constexpr uint32_t FSEDGE = (1U << 24);  ///< Frame Sync Edge Detection
        constexpr uint32_t FSLEN_EXT = (4 << 28);  ///< FSLEN Field Extension
    }

    /// TCMR Register bits
    namespace tcmr_bits {
        constexpr uint32_t CKS = (2 << 0);  ///< Transmit Clock Selection
        constexpr uint32_t CKO = (3 << 2);  ///< Transmit Clock Output Mode Selection
        constexpr uint32_t CKI = (1U << 5);  ///< Transmit Clock Inversion
        constexpr uint32_t CKG = (2 << 6);  ///< Transmit Clock Gating Selection
        constexpr uint32_t START = (4 << 8);  ///< Transmit Start Selection
        constexpr uint32_t STTDLY = (8 << 16);  ///< Transmit Start Delay
        constexpr uint32_t PERIOD = (8 << 24);  ///< Transmit Period Divider Selection
    }

    /// TFMR Register bits
    namespace tfmr_bits {
        constexpr uint32_t DATLEN = (5 << 0);  ///< Data Length
        constexpr uint32_t DATDEF = (1U << 5);  ///< Data Default Value
        constexpr uint32_t MSBF = (1U << 7);  ///< Most Significant Bit First
        constexpr uint32_t DATNB = (4 << 8);  ///< Data Number per frame
        constexpr uint32_t FSLEN = (4 << 16);  ///< Transmit Frame Sync Length
        constexpr uint32_t FSOS = (3 << 20);  ///< Transmit Frame Sync Output Selection
        constexpr uint32_t FSDEN = (1U << 23);  ///< Frame Sync Data Enable
        constexpr uint32_t FSEDGE = (1U << 24);  ///< Frame Sync Edge Detection
        constexpr uint32_t FSLEN_EXT = (4 << 28);  ///< FSLEN Field Extension
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RDAT = (32 << 0);  ///< Receive Data
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TDAT = (32 << 0);  ///< Transmit Data
    }

    /// RSHR Register bits
    namespace rshr_bits {
        constexpr uint32_t RSDAT = (16 << 0);  ///< Receive Synchronization Data
    }

    /// TSHR Register bits
    namespace tshr_bits {
        constexpr uint32_t TSDAT = (16 << 0);  ///< Transmit Synchronization Data
    }

    /// RC0R Register bits
    namespace rc0r_bits {
        constexpr uint32_t CP0 = (16 << 0);  ///< Receive Compare Data 0
    }

    /// RC1R Register bits
    namespace rc1r_bits {
        constexpr uint32_t CP1 = (16 << 0);  ///< Receive Compare Data 1
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1
        constexpr uint32_t TXSYN = (1U << 10);  ///< Transmit Sync
        constexpr uint32_t RXSYN = (1U << 11);  ///< Receive Sync
        constexpr uint32_t TXEN = (1U << 16);  ///< Transmit Enable
        constexpr uint32_t RXEN = (1U << 17);  ///< Receive Enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Enable
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Enable
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Enable
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Enable
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Enable
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Disable
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Disable
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Disable
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Disable
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Enable
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Enable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Mask
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Mask
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Mask
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Mask
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Mask
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Mask
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN0_BASE = 0xF000C000;
    constexpr uint32_t CAN1_BASE = 0xF8010000;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t MR;  ///< Offset: 0x00 - Mode Register
        volatile uint32_t IER;  ///< Offset: 0x04 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x08 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x0C - Interrupt Mask Register
        volatile uint32_t SR;  ///< Offset: 0x10 - Status Register
        volatile uint32_t BR;  ///< Offset: 0x14 - Baudrate Register
        volatile uint32_t TIM;  ///< Offset: 0x18 - Timer Register
        volatile uint32_t TIMESTP;  ///< Offset: 0x1C - Timestamp Register
        volatile uint32_t ECR;  ///< Offset: 0x20 - Error Counter Register
        volatile uint32_t TCR;  ///< Offset: 0x24 - Transfer Command Register
        volatile uint32_t ACR;  ///< Offset: 0x28 - Abort Command Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t MMR0;  ///< Offset: 0x200 - Mailbox Mode Register (MB = 0)
        volatile uint32_t MAM0;  ///< Offset: 0x204 - Mailbox Acceptance Mask Register (MB = 0)
        volatile uint32_t MID0;  ///< Offset: 0x208 - Mailbox ID Register (MB = 0)
        volatile uint32_t MFID0;  ///< Offset: 0x20C - Mailbox Family ID Register (MB = 0)
        volatile uint32_t MSR0;  ///< Offset: 0x210 - Mailbox Status Register (MB = 0)
        volatile uint32_t MDL0;  ///< Offset: 0x214 - Mailbox Data Low Register (MB = 0)
        volatile uint32_t MDH0;  ///< Offset: 0x218 - Mailbox Data High Register (MB = 0)
        volatile uint32_t MCR0;  ///< Offset: 0x21C - Mailbox Control Register (MB = 0)
        volatile uint32_t MMR1;  ///< Offset: 0x220 - Mailbox Mode Register (MB = 1)
        volatile uint32_t MAM1;  ///< Offset: 0x224 - Mailbox Acceptance Mask Register (MB = 1)
        volatile uint32_t MID1;  ///< Offset: 0x228 - Mailbox ID Register (MB = 1)
        volatile uint32_t MFID1;  ///< Offset: 0x22C - Mailbox Family ID Register (MB = 1)
        volatile uint32_t MSR1;  ///< Offset: 0x230 - Mailbox Status Register (MB = 1)
        volatile uint32_t MDL1;  ///< Offset: 0x234 - Mailbox Data Low Register (MB = 1)
        volatile uint32_t MDH1;  ///< Offset: 0x238 - Mailbox Data High Register (MB = 1)
        volatile uint32_t MCR1;  ///< Offset: 0x23C - Mailbox Control Register (MB = 1)
        volatile uint32_t MMR2;  ///< Offset: 0x240 - Mailbox Mode Register (MB = 2)
        volatile uint32_t MAM2;  ///< Offset: 0x244 - Mailbox Acceptance Mask Register (MB = 2)
        volatile uint32_t MID2;  ///< Offset: 0x248 - Mailbox ID Register (MB = 2)
        volatile uint32_t MFID2;  ///< Offset: 0x24C - Mailbox Family ID Register (MB = 2)
        volatile uint32_t MSR2;  ///< Offset: 0x250 - Mailbox Status Register (MB = 2)
        volatile uint32_t MDL2;  ///< Offset: 0x254 - Mailbox Data Low Register (MB = 2)
        volatile uint32_t MDH2;  ///< Offset: 0x258 - Mailbox Data High Register (MB = 2)
        volatile uint32_t MCR2;  ///< Offset: 0x25C - Mailbox Control Register (MB = 2)
        volatile uint32_t MMR3;  ///< Offset: 0x260 - Mailbox Mode Register (MB = 3)
        volatile uint32_t MAM3;  ///< Offset: 0x264 - Mailbox Acceptance Mask Register (MB = 3)
        volatile uint32_t MID3;  ///< Offset: 0x268 - Mailbox ID Register (MB = 3)
        volatile uint32_t MFID3;  ///< Offset: 0x26C - Mailbox Family ID Register (MB = 3)
        volatile uint32_t MSR3;  ///< Offset: 0x270 - Mailbox Status Register (MB = 3)
        volatile uint32_t MDL3;  ///< Offset: 0x274 - Mailbox Data Low Register (MB = 3)
        volatile uint32_t MDH3;  ///< Offset: 0x278 - Mailbox Data High Register (MB = 3)
        volatile uint32_t MCR3;  ///< Offset: 0x27C - Mailbox Control Register (MB = 3)
        volatile uint32_t MMR4;  ///< Offset: 0x280 - Mailbox Mode Register (MB = 4)
        volatile uint32_t MAM4;  ///< Offset: 0x284 - Mailbox Acceptance Mask Register (MB = 4)
        volatile uint32_t MID4;  ///< Offset: 0x288 - Mailbox ID Register (MB = 4)
        volatile uint32_t MFID4;  ///< Offset: 0x28C - Mailbox Family ID Register (MB = 4)
        volatile uint32_t MSR4;  ///< Offset: 0x290 - Mailbox Status Register (MB = 4)
        volatile uint32_t MDL4;  ///< Offset: 0x294 - Mailbox Data Low Register (MB = 4)
        volatile uint32_t MDH4;  ///< Offset: 0x298 - Mailbox Data High Register (MB = 4)
        volatile uint32_t MCR4;  ///< Offset: 0x29C - Mailbox Control Register (MB = 4)
        volatile uint32_t MMR5;  ///< Offset: 0x2A0 - Mailbox Mode Register (MB = 5)
        volatile uint32_t MAM5;  ///< Offset: 0x2A4 - Mailbox Acceptance Mask Register (MB = 5)
        volatile uint32_t MID5;  ///< Offset: 0x2A8 - Mailbox ID Register (MB = 5)
        volatile uint32_t MFID5;  ///< Offset: 0x2AC - Mailbox Family ID Register (MB = 5)
        volatile uint32_t MSR5;  ///< Offset: 0x2B0 - Mailbox Status Register (MB = 5)
        volatile uint32_t MDL5;  ///< Offset: 0x2B4 - Mailbox Data Low Register (MB = 5)
        volatile uint32_t MDH5;  ///< Offset: 0x2B8 - Mailbox Data High Register (MB = 5)
        volatile uint32_t MCR5;  ///< Offset: 0x2BC - Mailbox Control Register (MB = 5)
        volatile uint32_t MMR6;  ///< Offset: 0x2C0 - Mailbox Mode Register (MB = 6)
        volatile uint32_t MAM6;  ///< Offset: 0x2C4 - Mailbox Acceptance Mask Register (MB = 6)
        volatile uint32_t MID6;  ///< Offset: 0x2C8 - Mailbox ID Register (MB = 6)
        volatile uint32_t MFID6;  ///< Offset: 0x2CC - Mailbox Family ID Register (MB = 6)
        volatile uint32_t MSR6;  ///< Offset: 0x2D0 - Mailbox Status Register (MB = 6)
        volatile uint32_t MDL6;  ///< Offset: 0x2D4 - Mailbox Data Low Register (MB = 6)
        volatile uint32_t MDH6;  ///< Offset: 0x2D8 - Mailbox Data High Register (MB = 6)
        volatile uint32_t MCR6;  ///< Offset: 0x2DC - Mailbox Control Register (MB = 6)
        volatile uint32_t MMR7;  ///< Offset: 0x2E0 - Mailbox Mode Register (MB = 7)
        volatile uint32_t MAM7;  ///< Offset: 0x2E4 - Mailbox Acceptance Mask Register (MB = 7)
        volatile uint32_t MID7;  ///< Offset: 0x2E8 - Mailbox ID Register (MB = 7)
        volatile uint32_t MFID7;  ///< Offset: 0x2EC - Mailbox Family ID Register (MB = 7)
        volatile uint32_t MSR7;  ///< Offset: 0x2F0 - Mailbox Status Register (MB = 7)
        volatile uint32_t MDL7;  ///< Offset: 0x2F4 - Mailbox Data Low Register (MB = 7)
        volatile uint32_t MDH7;  ///< Offset: 0x2F8 - Mailbox Data High Register (MB = 7)
        volatile uint32_t MCR7;  ///< Offset: 0x2FC - Mailbox Control Register (MB = 7)
    };

    /// Peripheral instances
    inline Registers* CAN0 = reinterpret_cast<Registers*>(CAN0_BASE);
    inline Registers* CAN1 = reinterpret_cast<Registers*>(CAN1_BASE);

    // Bit definitions
    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t CANEN = (1U << 0);  ///< CAN Controller Enable
        constexpr uint32_t LPM = (1U << 1);  ///< Disable/Enable Low Power Mode
        constexpr uint32_t ABM = (1U << 2);  ///< Disable/Enable Autobaud/Listen mode
        constexpr uint32_t OVL = (1U << 3);  ///< Disable/Enable Overload Frame
        constexpr uint32_t TEOF = (1U << 4);  ///< Timestamp messages at each end of Frame
        constexpr uint32_t TTM = (1U << 5);  ///< Disable/Enable Time Triggered Mode
        constexpr uint32_t TIMFRZ = (1U << 6);  ///< Enable Timer Freeze
        constexpr uint32_t DRPT = (1U << 7);  ///< Disable Repeat
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t MB0 = (1U << 0);  ///< Mailbox 0 Interrupt Enable
        constexpr uint32_t MB1 = (1U << 1);  ///< Mailbox 1 Interrupt Enable
        constexpr uint32_t MB2 = (1U << 2);  ///< Mailbox 2 Interrupt Enable
        constexpr uint32_t MB3 = (1U << 3);  ///< Mailbox 3 Interrupt Enable
        constexpr uint32_t MB4 = (1U << 4);  ///< Mailbox 4 Interrupt Enable
        constexpr uint32_t MB5 = (1U << 5);  ///< Mailbox 5 Interrupt Enable
        constexpr uint32_t MB6 = (1U << 6);  ///< Mailbox 6 Interrupt Enable
        constexpr uint32_t MB7 = (1U << 7);  ///< Mailbox 7 Interrupt Enable
        constexpr uint32_t ERRA = (1U << 16);  ///< Error Active Mode Interrupt Enable
        constexpr uint32_t WARN = (1U << 17);  ///< Warning Limit Interrupt Enable
        constexpr uint32_t ERRP = (1U << 18);  ///< Error Passive Mode Interrupt Enable
        constexpr uint32_t BOFF = (1U << 19);  ///< Bus Off Mode Interrupt Enable
        constexpr uint32_t SLEEP = (1U << 20);  ///< Sleep Interrupt Enable
        constexpr uint32_t WAKEUP = (1U << 21);  ///< Wakeup Interrupt Enable
        constexpr uint32_t TOVF = (1U << 22);  ///< Timer Overflow Interrupt Enable
        constexpr uint32_t TSTP = (1U << 23);  ///< TimeStamp Interrupt Enable
        constexpr uint32_t CERR = (1U << 24);  ///< CRC Error Interrupt Enable
        constexpr uint32_t SERR = (1U << 25);  ///< Stuffing Error Interrupt Enable
        constexpr uint32_t AERR = (1U << 26);  ///< Acknowledgment Error Interrupt Enable
        constexpr uint32_t FERR = (1U << 27);  ///< Form Error Interrupt Enable
        constexpr uint32_t BERR = (1U << 28);  ///< Bit Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t MB0 = (1U << 0);  ///< Mailbox 0 Interrupt Disable
        constexpr uint32_t MB1 = (1U << 1);  ///< Mailbox 1 Interrupt Disable
        constexpr uint32_t MB2 = (1U << 2);  ///< Mailbox 2 Interrupt Disable
        constexpr uint32_t MB3 = (1U << 3);  ///< Mailbox 3 Interrupt Disable
        constexpr uint32_t MB4 = (1U << 4);  ///< Mailbox 4 Interrupt Disable
        constexpr uint32_t MB5 = (1U << 5);  ///< Mailbox 5 Interrupt Disable
        constexpr uint32_t MB6 = (1U << 6);  ///< Mailbox 6 Interrupt Disable
        constexpr uint32_t MB7 = (1U << 7);  ///< Mailbox 7 Interrupt Disable
        constexpr uint32_t ERRA = (1U << 16);  ///< Error Active Mode Interrupt Disable
        constexpr uint32_t WARN = (1U << 17);  ///< Warning Limit Interrupt Disable
        constexpr uint32_t ERRP = (1U << 18);  ///< Error Passive Mode Interrupt Disable
        constexpr uint32_t BOFF = (1U << 19);  ///< Bus Off Mode Interrupt Disable
        constexpr uint32_t SLEEP = (1U << 20);  ///< Sleep Interrupt Disable
        constexpr uint32_t WAKEUP = (1U << 21);  ///< Wakeup Interrupt Disable
        constexpr uint32_t TOVF = (1U << 22);  ///< Timer Overflow Interrupt
        constexpr uint32_t TSTP = (1U << 23);  ///< TimeStamp Interrupt Disable
        constexpr uint32_t CERR = (1U << 24);  ///< CRC Error Interrupt Disable
        constexpr uint32_t SERR = (1U << 25);  ///< Stuffing Error Interrupt Disable
        constexpr uint32_t AERR = (1U << 26);  ///< Acknowledgment Error Interrupt Disable
        constexpr uint32_t FERR = (1U << 27);  ///< Form Error Interrupt Disable
        constexpr uint32_t BERR = (1U << 28);  ///< Bit Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t MB0 = (1U << 0);  ///< Mailbox 0 Interrupt Mask
        constexpr uint32_t MB1 = (1U << 1);  ///< Mailbox 1 Interrupt Mask
        constexpr uint32_t MB2 = (1U << 2);  ///< Mailbox 2 Interrupt Mask
        constexpr uint32_t MB3 = (1U << 3);  ///< Mailbox 3 Interrupt Mask
        constexpr uint32_t MB4 = (1U << 4);  ///< Mailbox 4 Interrupt Mask
        constexpr uint32_t MB5 = (1U << 5);  ///< Mailbox 5 Interrupt Mask
        constexpr uint32_t MB6 = (1U << 6);  ///< Mailbox 6 Interrupt Mask
        constexpr uint32_t MB7 = (1U << 7);  ///< Mailbox 7 Interrupt Mask
        constexpr uint32_t ERRA = (1U << 16);  ///< Error Active Mode Interrupt Mask
        constexpr uint32_t WARN = (1U << 17);  ///< Warning Limit Interrupt Mask
        constexpr uint32_t ERRP = (1U << 18);  ///< Error Passive Mode Interrupt Mask
        constexpr uint32_t BOFF = (1U << 19);  ///< Bus Off Mode Interrupt Mask
        constexpr uint32_t SLEEP = (1U << 20);  ///< Sleep Interrupt Mask
        constexpr uint32_t WAKEUP = (1U << 21);  ///< Wakeup Interrupt Mask
        constexpr uint32_t TOVF = (1U << 22);  ///< Timer Overflow Interrupt Mask
        constexpr uint32_t TSTP = (1U << 23);  ///< Timestamp Interrupt Mask
        constexpr uint32_t CERR = (1U << 24);  ///< CRC Error Interrupt Mask
        constexpr uint32_t SERR = (1U << 25);  ///< Stuffing Error Interrupt Mask
        constexpr uint32_t AERR = (1U << 26);  ///< Acknowledgment Error Interrupt Mask
        constexpr uint32_t FERR = (1U << 27);  ///< Form Error Interrupt Mask
        constexpr uint32_t BERR = (1U << 28);  ///< Bit Error Interrupt Mask
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t MB0 = (1U << 0);  ///< Mailbox 0 Event
        constexpr uint32_t MB1 = (1U << 1);  ///< Mailbox 1 Event
        constexpr uint32_t MB2 = (1U << 2);  ///< Mailbox 2 Event
        constexpr uint32_t MB3 = (1U << 3);  ///< Mailbox 3 Event
        constexpr uint32_t MB4 = (1U << 4);  ///< Mailbox 4 Event
        constexpr uint32_t MB5 = (1U << 5);  ///< Mailbox 5 Event
        constexpr uint32_t MB6 = (1U << 6);  ///< Mailbox 6 Event
        constexpr uint32_t MB7 = (1U << 7);  ///< Mailbox 7 Event
        constexpr uint32_t ERRA = (1U << 16);  ///< Error Active Mode
        constexpr uint32_t WARN = (1U << 17);  ///< Warning Limit
        constexpr uint32_t ERRP = (1U << 18);  ///< Error Passive Mode
        constexpr uint32_t BOFF = (1U << 19);  ///< Bus Off Mode
        constexpr uint32_t SLEEP = (1U << 20);  ///< CAN controller in Low power Mode
        constexpr uint32_t WAKEUP = (1U << 21);  ///< CAN controller is not in Low power Mode
        constexpr uint32_t TOVF = (1U << 22);  ///< Timer Overflow
        constexpr uint32_t TSTP = (1U << 23);  ///< TSTP
        constexpr uint32_t CERR = (1U << 24);  ///< Mailbox CRC Error
        constexpr uint32_t SERR = (1U << 25);  ///< Mailbox Stuffing Error
        constexpr uint32_t AERR = (1U << 26);  ///< Acknowledgment Error
        constexpr uint32_t FERR = (1U << 27);  ///< Form Error
        constexpr uint32_t BERR = (1U << 28);  ///< Bit Error
        constexpr uint32_t RBSY = (1U << 29);  ///< Receiver busy
        constexpr uint32_t TBSY = (1U << 30);  ///< Transmitter busy
        constexpr uint32_t OVLSY = (1U << 31);  ///< Overload busy
    }

    /// BR Register bits
    namespace br_bits {
        constexpr uint32_t PHASE2 = (3 << 0);  ///< Phase 2 segment
        constexpr uint32_t PHASE1 = (3 << 4);  ///< Phase 1 segment
        constexpr uint32_t PROPAG = (3 << 8);  ///< Programming time segment
        constexpr uint32_t SJW = (2 << 12);  ///< Re-synchronization jump width
        constexpr uint32_t BRP = (7 << 16);  ///< Baudrate Prescaler.
        constexpr uint32_t SMP = (1U << 24);  ///< Sampling Mode
    }

    /// TIM Register bits
    namespace tim_bits {
        constexpr uint32_t TIMER = (16 << 0);  ///< Timer
    }

    /// TIMESTP Register bits
    namespace timestp_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timestamp
    }

    /// ECR Register bits
    namespace ecr_bits {
        constexpr uint32_t REC = (8 << 0);  ///< Receive Error Counter
        constexpr uint32_t TEC = (9 << 16);  ///< Transmit Error Counter
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t MB0 = (1U << 0);  ///< Transfer Request for Mailbox 0
        constexpr uint32_t MB1 = (1U << 1);  ///< Transfer Request for Mailbox 1
        constexpr uint32_t MB2 = (1U << 2);  ///< Transfer Request for Mailbox 2
        constexpr uint32_t MB3 = (1U << 3);  ///< Transfer Request for Mailbox 3
        constexpr uint32_t MB4 = (1U << 4);  ///< Transfer Request for Mailbox 4
        constexpr uint32_t MB5 = (1U << 5);  ///< Transfer Request for Mailbox 5
        constexpr uint32_t MB6 = (1U << 6);  ///< Transfer Request for Mailbox 6
        constexpr uint32_t MB7 = (1U << 7);  ///< Transfer Request for Mailbox 7
        constexpr uint32_t TIMRST = (1U << 31);  ///< Timer Reset
    }

    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t MB0 = (1U << 0);  ///< Abort Request for Mailbox 0
        constexpr uint32_t MB1 = (1U << 1);  ///< Abort Request for Mailbox 1
        constexpr uint32_t MB2 = (1U << 2);  ///< Abort Request for Mailbox 2
        constexpr uint32_t MB3 = (1U << 3);  ///< Abort Request for Mailbox 3
        constexpr uint32_t MB4 = (1U << 4);  ///< Abort Request for Mailbox 4
        constexpr uint32_t MB5 = (1U << 5);  ///< Abort Request for Mailbox 5
        constexpr uint32_t MB6 = (1U << 6);  ///< Abort Request for Mailbox 6
        constexpr uint32_t MB7 = (1U << 7);  ///< Abort Request for Mailbox 7
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< SPI Write Protection Key Password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WPVSRC = (8 << 8);  ///< Write Protection Violation Source
    }

    /// MMR0 Register bits
    namespace mmr0_bits {
        constexpr uint32_t MTIMEMARK = (16 << 0);  ///< Mailbox Timemark
        constexpr uint32_t PRIOR = (4 << 16);  ///< Mailbox Priority
        constexpr uint32_t MOT = (3 << 24);  ///< Mailbox Object Type
    }

    /// MAM0 Register bits
    namespace mam0_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MID0 Register bits
    namespace mid0_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MFID0 Register bits
    namespace mfid0_bits {
        constexpr uint32_t MFID = (29 << 0);  ///< Family ID
    }

    /// MSR0 Register bits
    namespace msr0_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timer value
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MABT = (1U << 22);  ///< Mailbox Message Abort
        constexpr uint32_t MRDY = (1U << 23);  ///< Mailbox Ready
        constexpr uint32_t MMI = (1U << 24);  ///< Mailbox Message Ignored
    }

    /// MDL0 Register bits
    namespace mdl0_bits {
        constexpr uint32_t MDL = (32 << 0);  ///< Message Data Low Value
    }

    /// MDH0 Register bits
    namespace mdh0_bits {
        constexpr uint32_t MDH = (32 << 0);  ///< Message Data High Value
    }

    /// MCR0 Register bits
    namespace mcr0_bits {
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MACR = (1U << 22);  ///< Abort Request for Mailbox x
        constexpr uint32_t MTCR = (1U << 23);  ///< Mailbox Transfer Command
    }

    /// MMR1 Register bits
    namespace mmr1_bits {
        constexpr uint32_t MTIMEMARK = (16 << 0);  ///< Mailbox Timemark
        constexpr uint32_t PRIOR = (4 << 16);  ///< Mailbox Priority
        constexpr uint32_t MOT = (3 << 24);  ///< Mailbox Object Type
    }

    /// MAM1 Register bits
    namespace mam1_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MID1 Register bits
    namespace mid1_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MFID1 Register bits
    namespace mfid1_bits {
        constexpr uint32_t MFID = (29 << 0);  ///< Family ID
    }

    /// MSR1 Register bits
    namespace msr1_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timer value
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MABT = (1U << 22);  ///< Mailbox Message Abort
        constexpr uint32_t MRDY = (1U << 23);  ///< Mailbox Ready
        constexpr uint32_t MMI = (1U << 24);  ///< Mailbox Message Ignored
    }

    /// MDL1 Register bits
    namespace mdl1_bits {
        constexpr uint32_t MDL = (32 << 0);  ///< Message Data Low Value
    }

    /// MDH1 Register bits
    namespace mdh1_bits {
        constexpr uint32_t MDH = (32 << 0);  ///< Message Data High Value
    }

    /// MCR1 Register bits
    namespace mcr1_bits {
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MACR = (1U << 22);  ///< Abort Request for Mailbox x
        constexpr uint32_t MTCR = (1U << 23);  ///< Mailbox Transfer Command
    }

    /// MMR2 Register bits
    namespace mmr2_bits {
        constexpr uint32_t MTIMEMARK = (16 << 0);  ///< Mailbox Timemark
        constexpr uint32_t PRIOR = (4 << 16);  ///< Mailbox Priority
        constexpr uint32_t MOT = (3 << 24);  ///< Mailbox Object Type
    }

    /// MAM2 Register bits
    namespace mam2_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MID2 Register bits
    namespace mid2_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MFID2 Register bits
    namespace mfid2_bits {
        constexpr uint32_t MFID = (29 << 0);  ///< Family ID
    }

    /// MSR2 Register bits
    namespace msr2_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timer value
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MABT = (1U << 22);  ///< Mailbox Message Abort
        constexpr uint32_t MRDY = (1U << 23);  ///< Mailbox Ready
        constexpr uint32_t MMI = (1U << 24);  ///< Mailbox Message Ignored
    }

    /// MDL2 Register bits
    namespace mdl2_bits {
        constexpr uint32_t MDL = (32 << 0);  ///< Message Data Low Value
    }

    /// MDH2 Register bits
    namespace mdh2_bits {
        constexpr uint32_t MDH = (32 << 0);  ///< Message Data High Value
    }

    /// MCR2 Register bits
    namespace mcr2_bits {
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MACR = (1U << 22);  ///< Abort Request for Mailbox x
        constexpr uint32_t MTCR = (1U << 23);  ///< Mailbox Transfer Command
    }

    /// MMR3 Register bits
    namespace mmr3_bits {
        constexpr uint32_t MTIMEMARK = (16 << 0);  ///< Mailbox Timemark
        constexpr uint32_t PRIOR = (4 << 16);  ///< Mailbox Priority
        constexpr uint32_t MOT = (3 << 24);  ///< Mailbox Object Type
    }

    /// MAM3 Register bits
    namespace mam3_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MID3 Register bits
    namespace mid3_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MFID3 Register bits
    namespace mfid3_bits {
        constexpr uint32_t MFID = (29 << 0);  ///< Family ID
    }

    /// MSR3 Register bits
    namespace msr3_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timer value
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MABT = (1U << 22);  ///< Mailbox Message Abort
        constexpr uint32_t MRDY = (1U << 23);  ///< Mailbox Ready
        constexpr uint32_t MMI = (1U << 24);  ///< Mailbox Message Ignored
    }

    /// MDL3 Register bits
    namespace mdl3_bits {
        constexpr uint32_t MDL = (32 << 0);  ///< Message Data Low Value
    }

    /// MDH3 Register bits
    namespace mdh3_bits {
        constexpr uint32_t MDH = (32 << 0);  ///< Message Data High Value
    }

    /// MCR3 Register bits
    namespace mcr3_bits {
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MACR = (1U << 22);  ///< Abort Request for Mailbox x
        constexpr uint32_t MTCR = (1U << 23);  ///< Mailbox Transfer Command
    }

    /// MMR4 Register bits
    namespace mmr4_bits {
        constexpr uint32_t MTIMEMARK = (16 << 0);  ///< Mailbox Timemark
        constexpr uint32_t PRIOR = (4 << 16);  ///< Mailbox Priority
        constexpr uint32_t MOT = (3 << 24);  ///< Mailbox Object Type
    }

    /// MAM4 Register bits
    namespace mam4_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MID4 Register bits
    namespace mid4_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MFID4 Register bits
    namespace mfid4_bits {
        constexpr uint32_t MFID = (29 << 0);  ///< Family ID
    }

    /// MSR4 Register bits
    namespace msr4_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timer value
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MABT = (1U << 22);  ///< Mailbox Message Abort
        constexpr uint32_t MRDY = (1U << 23);  ///< Mailbox Ready
        constexpr uint32_t MMI = (1U << 24);  ///< Mailbox Message Ignored
    }

    /// MDL4 Register bits
    namespace mdl4_bits {
        constexpr uint32_t MDL = (32 << 0);  ///< Message Data Low Value
    }

    /// MDH4 Register bits
    namespace mdh4_bits {
        constexpr uint32_t MDH = (32 << 0);  ///< Message Data High Value
    }

    /// MCR4 Register bits
    namespace mcr4_bits {
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MACR = (1U << 22);  ///< Abort Request for Mailbox x
        constexpr uint32_t MTCR = (1U << 23);  ///< Mailbox Transfer Command
    }

    /// MMR5 Register bits
    namespace mmr5_bits {
        constexpr uint32_t MTIMEMARK = (16 << 0);  ///< Mailbox Timemark
        constexpr uint32_t PRIOR = (4 << 16);  ///< Mailbox Priority
        constexpr uint32_t MOT = (3 << 24);  ///< Mailbox Object Type
    }

    /// MAM5 Register bits
    namespace mam5_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MID5 Register bits
    namespace mid5_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MFID5 Register bits
    namespace mfid5_bits {
        constexpr uint32_t MFID = (29 << 0);  ///< Family ID
    }

    /// MSR5 Register bits
    namespace msr5_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timer value
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MABT = (1U << 22);  ///< Mailbox Message Abort
        constexpr uint32_t MRDY = (1U << 23);  ///< Mailbox Ready
        constexpr uint32_t MMI = (1U << 24);  ///< Mailbox Message Ignored
    }

    /// MDL5 Register bits
    namespace mdl5_bits {
        constexpr uint32_t MDL = (32 << 0);  ///< Message Data Low Value
    }

    /// MDH5 Register bits
    namespace mdh5_bits {
        constexpr uint32_t MDH = (32 << 0);  ///< Message Data High Value
    }

    /// MCR5 Register bits
    namespace mcr5_bits {
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MACR = (1U << 22);  ///< Abort Request for Mailbox x
        constexpr uint32_t MTCR = (1U << 23);  ///< Mailbox Transfer Command
    }

    /// MMR6 Register bits
    namespace mmr6_bits {
        constexpr uint32_t MTIMEMARK = (16 << 0);  ///< Mailbox Timemark
        constexpr uint32_t PRIOR = (4 << 16);  ///< Mailbox Priority
        constexpr uint32_t MOT = (3 << 24);  ///< Mailbox Object Type
    }

    /// MAM6 Register bits
    namespace mam6_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MID6 Register bits
    namespace mid6_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MFID6 Register bits
    namespace mfid6_bits {
        constexpr uint32_t MFID = (29 << 0);  ///< Family ID
    }

    /// MSR6 Register bits
    namespace msr6_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timer value
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MABT = (1U << 22);  ///< Mailbox Message Abort
        constexpr uint32_t MRDY = (1U << 23);  ///< Mailbox Ready
        constexpr uint32_t MMI = (1U << 24);  ///< Mailbox Message Ignored
    }

    /// MDL6 Register bits
    namespace mdl6_bits {
        constexpr uint32_t MDL = (32 << 0);  ///< Message Data Low Value
    }

    /// MDH6 Register bits
    namespace mdh6_bits {
        constexpr uint32_t MDH = (32 << 0);  ///< Message Data High Value
    }

    /// MCR6 Register bits
    namespace mcr6_bits {
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MACR = (1U << 22);  ///< Abort Request for Mailbox x
        constexpr uint32_t MTCR = (1U << 23);  ///< Mailbox Transfer Command
    }

    /// MMR7 Register bits
    namespace mmr7_bits {
        constexpr uint32_t MTIMEMARK = (16 << 0);  ///< Mailbox Timemark
        constexpr uint32_t PRIOR = (4 << 16);  ///< Mailbox Priority
        constexpr uint32_t MOT = (3 << 24);  ///< Mailbox Object Type
    }

    /// MAM7 Register bits
    namespace mam7_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MID7 Register bits
    namespace mid7_bits {
        constexpr uint32_t MIDvB = (18 << 0);  ///< Complementary bits for identifier in extended frame mode
        constexpr uint32_t MIDvA = (11 << 18);  ///< Identifier for standard frame mode
        constexpr uint32_t MIDE = (1U << 29);  ///< Identifier Version
    }

    /// MFID7 Register bits
    namespace mfid7_bits {
        constexpr uint32_t MFID = (29 << 0);  ///< Family ID
    }

    /// MSR7 Register bits
    namespace msr7_bits {
        constexpr uint32_t MTIMESTAMP = (16 << 0);  ///< Timer value
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MABT = (1U << 22);  ///< Mailbox Message Abort
        constexpr uint32_t MRDY = (1U << 23);  ///< Mailbox Ready
        constexpr uint32_t MMI = (1U << 24);  ///< Mailbox Message Ignored
    }

    /// MDL7 Register bits
    namespace mdl7_bits {
        constexpr uint32_t MDL = (32 << 0);  ///< Message Data Low Value
    }

    /// MDH7 Register bits
    namespace mdh7_bits {
        constexpr uint32_t MDH = (32 << 0);  ///< Message Data High Value
    }

    /// MCR7 Register bits
    namespace mcr7_bits {
        constexpr uint32_t MDLC = (4 << 16);  ///< Mailbox Data Length Code
        constexpr uint32_t MRTR = (1U << 20);  ///< Mailbox Remote Transmission Request
        constexpr uint32_t MACR = (1U << 22);  ///< Abort Request for Mailbox x
        constexpr uint32_t MTCR = (1U << 23);  ///< Mailbox Transfer Command
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TC0_BASE = 0xF0010000;
    constexpr uint32_t TC1_BASE = 0xF8014000;
    constexpr uint32_t PIT_BASE = 0xFFFFFE30;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CCR0;  ///< Offset: 0x00 - Channel Control Register (channel = 0)
        volatile uint32_t CMR0;  ///< Offset: 0x04 - Channel Mode Register (channel = 0)
        volatile uint32_t CMR0_WAVE_EQ_1;  ///< Offset: 0x04 - Channel Mode Register (channel = 0)
        volatile uint32_t SMMR0;  ///< Offset: 0x08 - Stepper Motor Mode Register (channel = 0)
        volatile uint32_t RAB0;  ///< Offset: 0x0C - Register AB (channel = 0)
        volatile uint32_t CV0;  ///< Offset: 0x10 - Counter Value (channel = 0)
        volatile uint32_t RA0;  ///< Offset: 0x14 - Register A (channel = 0)
        volatile uint32_t RB0;  ///< Offset: 0x18 - Register B (channel = 0)
        volatile uint32_t RC0;  ///< Offset: 0x1C - Register C (channel = 0)
        volatile uint32_t SR0;  ///< Offset: 0x20 - Status Register (channel = 0)
        volatile uint32_t IER0;  ///< Offset: 0x24 - Interrupt Enable Register (channel = 0)
        volatile uint32_t IDR0;  ///< Offset: 0x28 - Interrupt Disable Register (channel = 0)
        volatile uint32_t IMR0;  ///< Offset: 0x2C - Interrupt Mask Register (channel = 0)
        volatile uint32_t CCR1;  ///< Offset: 0x40 - Channel Control Register (channel = 1)
        volatile uint32_t CMR1;  ///< Offset: 0x44 - Channel Mode Register (channel = 1)
        volatile uint32_t CMR1_WAVE_EQ_1;  ///< Offset: 0x44 - Channel Mode Register (channel = 1)
        volatile uint32_t SMMR1;  ///< Offset: 0x48 - Stepper Motor Mode Register (channel = 1)
        volatile uint32_t RAB1;  ///< Offset: 0x4C - Register AB (channel = 1)
        volatile uint32_t CV1;  ///< Offset: 0x50 - Counter Value (channel = 1)
        volatile uint32_t RA1;  ///< Offset: 0x54 - Register A (channel = 1)
        volatile uint32_t RB1;  ///< Offset: 0x58 - Register B (channel = 1)
        volatile uint32_t RC1;  ///< Offset: 0x5C - Register C (channel = 1)
        volatile uint32_t SR1;  ///< Offset: 0x60 - Status Register (channel = 1)
        volatile uint32_t IER1;  ///< Offset: 0x64 - Interrupt Enable Register (channel = 1)
        volatile uint32_t IDR1;  ///< Offset: 0x68 - Interrupt Disable Register (channel = 1)
        volatile uint32_t IMR1;  ///< Offset: 0x6C - Interrupt Mask Register (channel = 1)
        volatile uint32_t CCR2;  ///< Offset: 0x80 - Channel Control Register (channel = 2)
        volatile uint32_t CMR2;  ///< Offset: 0x84 - Channel Mode Register (channel = 2)
        volatile uint32_t CMR2_WAVE_EQ_1;  ///< Offset: 0x84 - Channel Mode Register (channel = 2)
        volatile uint32_t SMMR2;  ///< Offset: 0x88 - Stepper Motor Mode Register (channel = 2)
        volatile uint32_t RAB2;  ///< Offset: 0x8C - Register AB (channel = 2)
        volatile uint32_t CV2;  ///< Offset: 0x90 - Counter Value (channel = 2)
        volatile uint32_t RA2;  ///< Offset: 0x94 - Register A (channel = 2)
        volatile uint32_t RB2;  ///< Offset: 0x98 - Register B (channel = 2)
        volatile uint32_t RC2;  ///< Offset: 0x9C - Register C (channel = 2)
        volatile uint32_t SR2;  ///< Offset: 0xA0 - Status Register (channel = 2)
        volatile uint32_t IER2;  ///< Offset: 0xA4 - Interrupt Enable Register (channel = 2)
        volatile uint32_t IDR2;  ///< Offset: 0xA8 - Interrupt Disable Register (channel = 2)
        volatile uint32_t IMR2;  ///< Offset: 0xAC - Interrupt Mask Register (channel = 2)
        volatile uint32_t BCR;  ///< Offset: 0xC0 - Block Control Register
        volatile uint32_t BMR;  ///< Offset: 0xC4 - Block Mode Register
        volatile uint32_t QIER;  ///< Offset: 0xC8 - QDEC Interrupt Enable Register
        volatile uint32_t QIDR;  ///< Offset: 0xCC - QDEC Interrupt Disable Register
        volatile uint32_t QIMR;  ///< Offset: 0xD0 - QDEC Interrupt Mask Register
        volatile uint32_t QISR;  ///< Offset: 0xD4 - QDEC Interrupt Status Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
    };

    /// Peripheral instances
    inline Registers* TC0 = reinterpret_cast<Registers*>(TC0_BASE);
    inline Registers* TC1 = reinterpret_cast<Registers*>(TC1_BASE);
    inline Registers* PIT = reinterpret_cast<Registers*>(PIT_BASE);

    // Bit definitions
    /// CCR0 Register bits
    namespace ccr0_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR0 Register bits
    namespace cmr0_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR0_WAVE_EQ_1 Register bits
    namespace cmr0_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// SMMR0 Register bits
    namespace smmr0_bits {
        constexpr uint32_t GCEN = (1U << 0);  ///< Gray Count Enable
        constexpr uint32_t DOWN = (1U << 1);  ///< DOWN Count
    }

    /// RAB0 Register bits
    namespace rab0_bits {
        constexpr uint32_t RAB = (32 << 0);  ///< Register A or Register B
    }

    /// CV0 Register bits
    namespace cv0_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA0 Register bits
    namespace ra0_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB0 Register bits
    namespace rb0_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC0 Register bits
    namespace rc0_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR0 Register bits
    namespace sr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER0 Register bits
    namespace ier0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR0 Register bits
    namespace idr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR0 Register bits
    namespace imr0_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR1 Register bits
    namespace cmr1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR1_WAVE_EQ_1 Register bits
    namespace cmr1_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// SMMR1 Register bits
    namespace smmr1_bits {
        constexpr uint32_t GCEN = (1U << 0);  ///< Gray Count Enable
        constexpr uint32_t DOWN = (1U << 1);  ///< DOWN Count
    }

    /// RAB1 Register bits
    namespace rab1_bits {
        constexpr uint32_t RAB = (32 << 0);  ///< Register A or Register B
    }

    /// CV1 Register bits
    namespace cv1_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA1 Register bits
    namespace ra1_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB1 Register bits
    namespace rb1_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC1 Register bits
    namespace rc1_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR1 Register bits
    namespace sr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER1 Register bits
    namespace ier1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR1 Register bits
    namespace idr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR1 Register bits
    namespace imr1_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< Counter Clock Enable Command
        constexpr uint32_t CLKDIS = (1U << 1);  ///< Counter Clock Disable Command
        constexpr uint32_t SWTRG = (1U << 2);  ///< Software Trigger Command
    }

    /// CMR2 Register bits
    namespace cmr2_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t LDBSTOP = (1U << 6);  ///< Counter Clock Stopped with RB Loading
        constexpr uint32_t LDBDIS = (1U << 7);  ///< Counter Clock Disable with RB Loading
        constexpr uint32_t ETRGEDG = (2 << 8);  ///< External Trigger Edge Selection
        constexpr uint32_t ABETRG = (1U << 10);  ///< TIOA or TIOB External Trigger Selection
        constexpr uint32_t CPCTRG = (1U << 14);  ///< RC Compare Trigger Enable
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t LDRA = (2 << 16);  ///< RA Loading Edge Selection
        constexpr uint32_t LDRB = (2 << 18);  ///< RB Loading Edge Selection
    }

    /// CMR2_WAVE_EQ_1 Register bits
    namespace cmr2_wave_eq_1_bits {
        constexpr uint32_t TCCLKS = (3 << 0);  ///< Clock Selection
        constexpr uint32_t CLKI = (1U << 3);  ///< Clock Invert
        constexpr uint32_t BURST = (2 << 4);  ///< Burst Signal Selection
        constexpr uint32_t CPCSTOP = (1U << 6);  ///< Counter Clock Stopped with RC Compare
        constexpr uint32_t CPCDIS = (1U << 7);  ///< Counter Clock Disable with RC Compare
        constexpr uint32_t EEVTEDG = (2 << 8);  ///< External Event Edge Selection
        constexpr uint32_t EEVT = (2 << 10);  ///< External Event Selection
        constexpr uint32_t ENETRG = (1U << 12);  ///< External Event Trigger Enable
        constexpr uint32_t WAVSEL = (2 << 13);  ///< Waveform Selection
        constexpr uint32_t WAVE = (1U << 15);  ///< Waveform Mode
        constexpr uint32_t ACPA = (2 << 16);  ///< RA Compare Effect on TIOA
        constexpr uint32_t ACPC = (2 << 18);  ///< RC Compare Effect on TIOA
        constexpr uint32_t AEEVT = (2 << 20);  ///< External Event Effect on TIOA
        constexpr uint32_t ASWTRG = (2 << 22);  ///< Software Trigger Effect on TIOA
        constexpr uint32_t BCPB = (2 << 24);  ///< RB Compare Effect on TIOB
        constexpr uint32_t BCPC = (2 << 26);  ///< RC Compare Effect on TIOB
        constexpr uint32_t BEEVT = (2 << 28);  ///< External Event Effect on TIOB
        constexpr uint32_t BSWTRG = (2 << 30);  ///< Software Trigger Effect on TIOB
    }

    /// SMMR2 Register bits
    namespace smmr2_bits {
        constexpr uint32_t GCEN = (1U << 0);  ///< Gray Count Enable
        constexpr uint32_t DOWN = (1U << 1);  ///< DOWN Count
    }

    /// RAB2 Register bits
    namespace rab2_bits {
        constexpr uint32_t RAB = (32 << 0);  ///< Register A or Register B
    }

    /// CV2 Register bits
    namespace cv2_bits {
        constexpr uint32_t CV = (32 << 0);  ///< Counter Value
    }

    /// RA2 Register bits
    namespace ra2_bits {
        constexpr uint32_t RA = (32 << 0);  ///< Register A
    }

    /// RB2 Register bits
    namespace rb2_bits {
        constexpr uint32_t RB = (32 << 0);  ///< Register B
    }

    /// RC2 Register bits
    namespace rc2_bits {
        constexpr uint32_t RC = (32 << 0);  ///< Register C
    }

    /// SR2 Register bits
    namespace sr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow Status
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun Status
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare Status
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare Status
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare Status
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading Status
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading Status
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger Status
        constexpr uint32_t CLKSTA = (1U << 16);  ///< Clock Enabling Status
        constexpr uint32_t MTIOA = (1U << 17);  ///< TIOA Mirror
        constexpr uint32_t MTIOB = (1U << 18);  ///< TIOB Mirror
    }

    /// IER2 Register bits
    namespace ier2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IDR2 Register bits
    namespace idr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// IMR2 Register bits
    namespace imr2_bits {
        constexpr uint32_t COVFS = (1U << 0);  ///< Counter Overflow
        constexpr uint32_t LOVRS = (1U << 1);  ///< Load Overrun
        constexpr uint32_t CPAS = (1U << 2);  ///< RA Compare
        constexpr uint32_t CPBS = (1U << 3);  ///< RB Compare
        constexpr uint32_t CPCS = (1U << 4);  ///< RC Compare
        constexpr uint32_t LDRAS = (1U << 5);  ///< RA Loading
        constexpr uint32_t LDRBS = (1U << 6);  ///< RB Loading
        constexpr uint32_t ETRGS = (1U << 7);  ///< External Trigger
    }

    /// BCR Register bits
    namespace bcr_bits {
        constexpr uint32_t SYNC = (1U << 0);  ///< Synchro Command
    }

    /// BMR Register bits
    namespace bmr_bits {
        constexpr uint32_t TC0XC0S = (2 << 0);  ///< External Clock Signal 0 Selection
        constexpr uint32_t TC1XC1S = (2 << 2);  ///< External Clock Signal 1 Selection
        constexpr uint32_t TC2XC2S = (2 << 4);  ///< External Clock Signal 2 Selection
        constexpr uint32_t QDEN = (1U << 8);  ///< Quadrature Decoder ENabled
        constexpr uint32_t POSEN = (1U << 9);  ///< POSition ENabled
        constexpr uint32_t SPEEDEN = (1U << 10);  ///< SPEED ENabled
        constexpr uint32_t QDTRANS = (1U << 11);  ///< Quadrature Decoding TRANSparent
        constexpr uint32_t EDGPHA = (1U << 12);  ///< EDGe on PHA count mode
        constexpr uint32_t INVA = (1U << 13);  ///< INVerted phA
        constexpr uint32_t INVB = (1U << 14);  ///< INVerted phB
        constexpr uint32_t INVIDX = (1U << 15);  ///< INVerted InDeX
        constexpr uint32_t SWAP = (1U << 16);  ///< SWAP PHA and PHB
        constexpr uint32_t IDXPHB = (1U << 17);  ///< InDeX pin is PHB pin
        constexpr uint32_t FILTER = (1U << 19);  ///< FILTER
        constexpr uint32_t MAXFILT = (6 << 20);  ///< MAXimum FILTer
    }

    /// QIER Register bits
    namespace qier_bits {
        constexpr uint32_t IDX = (1U << 0);  ///< InDeX
        constexpr uint32_t DIRCHG = (1U << 1);  ///< DIRection CHanGe
        constexpr uint32_t QERR = (1U << 2);  ///< Quadrature ERRor
    }

    /// QIDR Register bits
    namespace qidr_bits {
        constexpr uint32_t IDX = (1U << 0);  ///< InDeX
        constexpr uint32_t DIRCHG = (1U << 1);  ///< DIRection CHanGe
        constexpr uint32_t QERR = (1U << 2);  ///< Quadrature ERRor
    }

    /// QIMR Register bits
    namespace qimr_bits {
        constexpr uint32_t IDX = (1U << 0);  ///< InDeX
        constexpr uint32_t DIRCHG = (1U << 1);  ///< DIRection CHanGe
        constexpr uint32_t QERR = (1U << 2);  ///< Quadrature ERRor
    }

    /// QISR Register bits
    namespace qisr_bits {
        constexpr uint32_t IDX = (1U << 0);  ///< InDeX
        constexpr uint32_t DIRCHG = (1U << 1);  ///< DIRection CHanGe
        constexpr uint32_t QERR = (1U << 2);  ///< Quadrature ERRor
        constexpr uint32_t DIR = (1U << 8);  ///< DIRection
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t TWI0_BASE = 0xF0014000;
    constexpr uint32_t TWI1_BASE = 0xF0018000;
    constexpr uint32_t TWI2_BASE = 0xF801C000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MMR;  ///< Offset: 0x04 - Master Mode Register
        volatile uint32_t SMR;  ///< Offset: 0x08 - Slave Mode Register
        volatile uint32_t IADR;  ///< Offset: 0x0C - Internal Address Register
        volatile uint32_t CWGR;  ///< Offset: 0x10 - Clock Waveform Generator Register
        volatile uint32_t SR;  ///< Offset: 0x20 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x24 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x28 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x2C - Interrupt Mask Register
        volatile uint32_t RHR;  ///< Offset: 0x30 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x34 - Transmit Holding Register
        volatile uint32_t WPROT_MODE;  ///< Offset: 0xE4 - Protection Mode Register
        volatile uint32_t WPROT_STATUS;  ///< Offset: 0xE8 - Protection Status Register
    };

    /// Peripheral instances
    inline Registers* TWI0 = reinterpret_cast<Registers*>(TWI0_BASE);
    inline Registers* TWI1 = reinterpret_cast<Registers*>(TWI1_BASE);
    inline Registers* TWI2 = reinterpret_cast<Registers*>(TWI2_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t START = (1U << 0);  ///< Send a START Condition
        constexpr uint32_t STOP = (1U << 1);  ///< Send a STOP Condition
        constexpr uint32_t MSEN = (1U << 2);  ///< TWI Master Mode Enabled
        constexpr uint32_t MSDIS = (1U << 3);  ///< TWI Master Mode Disabled
        constexpr uint32_t SVEN = (1U << 4);  ///< TWI Slave Mode Enabled
        constexpr uint32_t SVDIS = (1U << 5);  ///< TWI Slave Mode Disabled
        constexpr uint32_t QUICK = (1U << 6);  ///< SMBUS Quick Command
        constexpr uint32_t SWRST = (1U << 7);  ///< Software Reset
    }

    /// MMR Register bits
    namespace mmr_bits {
        constexpr uint32_t IADRSZ = (2 << 8);  ///< Internal Device Address Size
        constexpr uint32_t MREAD = (1U << 12);  ///< Master Read Direction
        constexpr uint32_t DADR = (7 << 16);  ///< Device Address
    }

    /// SMR Register bits
    namespace smr_bits {
        constexpr uint32_t SADR = (7 << 16);  ///< Slave Address
    }

    /// IADR Register bits
    namespace iadr_bits {
        constexpr uint32_t IADR = (24 << 0);  ///< Internal Address
    }

    /// CWGR Register bits
    namespace cwgr_bits {
        constexpr uint32_t CLDIV = (8 << 0);  ///< Clock Low Divider
        constexpr uint32_t CHDIV = (8 << 8);  ///< Clock High Divider
        constexpr uint32_t CKDIV = (3 << 16);  ///< Clock Divider
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed (automatically set / reset)
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready (automatically set / reset)
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready (automatically set / reset)
        constexpr uint32_t SVREAD = (1U << 3);  ///< Slave Read (automatically set / reset)
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access (automatically set / reset)
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access (clear on read)
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error (clear on read)
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledged (clear on read)
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost (clear on read)
        constexpr uint32_t SCLWS = (1U << 10);  ///< Clock Wait State (automatically set / reset)
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access (clear on read)
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Enable
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Enable
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Enable
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Enable
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Enable
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Enable
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Disable
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Disable
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Disable
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Disable
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Disable
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Disable
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t TXCOMP = (1U << 0);  ///< Transmission Completed Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receive Holding Register Ready Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Holding Register Ready Interrupt Mask
        constexpr uint32_t SVACC = (1U << 4);  ///< Slave Access Interrupt Mask
        constexpr uint32_t GACC = (1U << 5);  ///< General Call Access Interrupt Mask
        constexpr uint32_t OVRE = (1U << 6);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t NACK = (1U << 8);  ///< Not Acknowledge Interrupt Mask
        constexpr uint32_t ARBLST = (1U << 9);  ///< Arbitration Lost Interrupt Mask
        constexpr uint32_t SCL_WS = (1U << 10);  ///< Clock Wait State Interrupt Mask
        constexpr uint32_t EOSACC = (1U << 11);  ///< End Of Slave Access Interrupt Mask
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RXDATA = (8 << 0);  ///< Master or Slave Receive Holding Data
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TXDATA = (8 << 0);  ///< Master or Slave Transmit Holding Data
    }

    /// WPROT_MODE Register bits
    namespace wprot_mode_bits {
        constexpr uint32_t WPROT = (1U << 0);  ///< Write protection bit
        constexpr uint32_t SECURITY_CODE = (24 << 8);  ///< Write protection mode security code
    }

    /// WPROT_STATUS Register bits
    namespace wprot_status_bits {
        constexpr uint32_t WPROTERR = (1U << 0);  ///< Write Protection Error
        constexpr uint32_t WPROTADDR = (24 << 8);  ///< Write Protection Error Address
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART0_BASE = 0xF001C000;
    constexpr uint32_t USART1_BASE = 0xF0020000;
    constexpr uint32_t UART0_BASE = 0xF0024000;
    constexpr uint32_t USART2_BASE = 0xF8020000;
    constexpr uint32_t USART3_BASE = 0xF8024000;
    constexpr uint32_t UART1_BASE = 0xF8028000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t CR_SPI_MODE;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t MR_SPI_MODE;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t IER;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IER_SPI_MODE;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IDR_SPI_MODE;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t IMR_SPI_MODE;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t CSR;  ///< Offset: 0x14 - Channel Status Register
        volatile uint32_t CSR_SPI_MODE;  ///< Offset: 0x14 - Channel Status Register
        volatile uint32_t RHR;  ///< Offset: 0x18 - Receiver Holding Register
        volatile uint32_t THR;  ///< Offset: 0x1C - Transmitter Holding Register
        volatile uint32_t BRGR;  ///< Offset: 0x20 - Baud Rate Generator Register
        volatile uint32_t RTOR;  ///< Offset: 0x24 - Receiver Time-out Register
        volatile uint32_t TTGR;  ///< Offset: 0x28 - Transmitter Timeguard Register
        volatile uint32_t FIDI;  ///< Offset: 0x40 - FI DI Ratio Register
        volatile uint32_t NER;  ///< Offset: 0x44 - Number of Errors Register
        volatile uint32_t IF_;  ///< Offset: 0x4C - IrDA Filter Register (renamed from IF_)
        volatile uint32_t MAN;  ///< Offset: 0x50 - Manchester Encoder Decoder Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* USART0 = reinterpret_cast<Registers*>(USART0_BASE);
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);
    inline Registers* USART3 = reinterpret_cast<Registers*>(USART3_BASE);
    inline Registers* UART1 = reinterpret_cast<Registers*>(UART1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RSTRX = (1U << 2);  ///< Reset Receiver
        constexpr uint32_t RSTTX = (1U << 3);  ///< Reset Transmitter
        constexpr uint32_t RXEN = (1U << 4);  ///< Receiver Enable
        constexpr uint32_t RXDIS = (1U << 5);  ///< Receiver Disable
        constexpr uint32_t TXEN = (1U << 6);  ///< Transmitter Enable
        constexpr uint32_t TXDIS = (1U << 7);  ///< Transmitter Disable
        constexpr uint32_t RSTSTA = (1U << 8);  ///< Reset Status Bits
        constexpr uint32_t STTBRK = (1U << 9);  ///< Start Break
        constexpr uint32_t STPBRK = (1U << 10);  ///< Stop Break
        constexpr uint32_t STTTO = (1U << 11);  ///< Start Time-out
        constexpr uint32_t SENDA = (1U << 12);  ///< Send Address
        constexpr uint32_t RSTIT = (1U << 13);  ///< Reset Iterations
        constexpr uint32_t RSTNACK = (1U << 14);  ///< Reset Non Acknowledge
        constexpr uint32_t RETTO = (1U << 15);  ///< Rearm Time-out
        constexpr uint32_t RTSEN = (1U << 18);  ///< Request to Send Enable
        constexpr uint32_t RTSDIS = (1U << 19);  ///< Request to Send Disable
    }

    /// CR_SPI_MODE Register bits
    namespace cr_spi_mode_bits {
        constexpr uint32_t RSTRX = (1U << 2);  ///< Reset Receiver
        constexpr uint32_t RSTTX = (1U << 3);  ///< Reset Transmitter
        constexpr uint32_t RXEN = (1U << 4);  ///< Receiver Enable
        constexpr uint32_t RXDIS = (1U << 5);  ///< Receiver Disable
        constexpr uint32_t TXEN = (1U << 6);  ///< Transmitter Enable
        constexpr uint32_t TXDIS = (1U << 7);  ///< Transmitter Disable
        constexpr uint32_t RSTSTA = (1U << 8);  ///< Reset Status Bits
        constexpr uint32_t FCS = (1U << 18);  ///< Force SPI Chip Select
        constexpr uint32_t RCS = (1U << 19);  ///< Release SPI Chip Select
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t USART_MODE = (4 << 0);  ///< USART Mode of Operation
        constexpr uint32_t USCLKS = (2 << 4);  ///< Clock Selection
        constexpr uint32_t CHRL = (2 << 6);  ///< Character Length.
        constexpr uint32_t SYNC = (1U << 8);  ///< Synchronous Mode Select
        constexpr uint32_t PAR = (3 << 9);  ///< Parity Type
        constexpr uint32_t NBSTOP = (2 << 12);  ///< Number of Stop Bits
        constexpr uint32_t CHMODE = (2 << 14);  ///< Channel Mode
        constexpr uint32_t MSBF = (1U << 16);  ///< Bit Order
        constexpr uint32_t MODE9 = (1U << 17);  ///< 9-bit Character Length
        constexpr uint32_t CLKO = (1U << 18);  ///< Clock Output Select
        constexpr uint32_t OVER = (1U << 19);  ///< Oversampling Mode
        constexpr uint32_t INACK = (1U << 20);  ///< Inhibit Non Acknowledge
        constexpr uint32_t DSNACK = (1U << 21);  ///< Disable Successive NACK
        constexpr uint32_t VAR_SYNC = (1U << 22);  ///< Variable Synchronization of Command/Data Sync Start Frame Delimiter
        constexpr uint32_t INVDATA = (1U << 23);  ///< Inverted Data
        constexpr uint32_t MAX_ITERATION = (3 << 24);  ///< Maximum Number of Automatic Iteration
        constexpr uint32_t FILTER = (1U << 28);  ///< Infrared Receive Line Filter
        constexpr uint32_t MAN = (1U << 29);  ///< Manchester Encoder/Decoder Enable
        constexpr uint32_t MODSYNC = (1U << 30);  ///< Manchester Synchronization Mode
        constexpr uint32_t ONEBIT = (1U << 31);  ///< Start Frame Delimiter Selector
    }

    /// MR_SPI_MODE Register bits
    namespace mr_spi_mode_bits {
        constexpr uint32_t USART_MODE = (4 << 0);  ///< USART Mode of Operation
        constexpr uint32_t USCLKS = (2 << 4);  ///< Clock Selection
        constexpr uint32_t CHRL = (2 << 6);  ///< Character Length.
        constexpr uint32_t CPHA = (1U << 8);  ///< SPI Clock Phase
        constexpr uint32_t CPOL = (1U << 16);  ///< SPI Clock Polarity
        constexpr uint32_t WRDBT = (1U << 20);  ///< Wait Read Data Before Transfer
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Enable
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Enable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Enable
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Enable
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Enable
        constexpr uint32_t ITER = (1U << 10);  ///< Max number of Repetitions Reached Interrupt Enable
        constexpr uint32_t NACK = (1U << 13);  ///< Non AcknowledgeInterrupt Enable
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Enable
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Enable
    }

    /// IER_SPI_MODE Register bits
    namespace ier_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Enable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Enable
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Disable
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Disable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Enable
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Disable
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Disable
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Disable
        constexpr uint32_t ITER = (1U << 10);  ///< Max Number of Repetitions Reached Interrupt Disable
        constexpr uint32_t NACK = (1U << 13);  ///< Non AcknowledgeInterrupt Disable
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Disable
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Disable
    }

    /// IDR_SPI_MODE Register bits
    namespace idr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Disable
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Disable
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Mask
        constexpr uint32_t RXBRK = (1U << 2);  ///< Receiver Break Interrupt Mask
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error Interrupt Mask
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error Interrupt Mask
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Time-out Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Mask
        constexpr uint32_t ITER = (1U << 10);  ///< Max Number of Repetitions Reached Interrupt Mask
        constexpr uint32_t NACK = (1U << 13);  ///< Non AcknowledgeInterrupt Mask
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Interrupt Mask
        constexpr uint32_t MANE = (1U << 24);  ///< Manchester Error Interrupt Mask
    }

    /// IMR_SPI_MODE Register bits
    namespace imr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< RXRDY Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 1);  ///< TXRDY Interrupt Mask
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< TXEMPTY Interrupt Mask
        constexpr uint32_t UNRE = (1U << 10);  ///< SPI Underrun Error Interrupt Mask
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t RXBRK = (1U << 2);  ///< Break Received/End of Break
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error
        constexpr uint32_t TIMEOUT = (1U << 8);  ///< Receiver Time-out
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t ITER = (1U << 10);  ///< MaxNumber of Repetitions Reached
        constexpr uint32_t NACK = (1U << 13);  ///< Non AcknowledgeInterrupt
        constexpr uint32_t CTSIC = (1U << 19);  ///< Clear to Send Input Change Flag
        constexpr uint32_t CTS = (1U << 23);  ///< Image of CTS Input
        constexpr uint32_t MANERR = (1U << 24);  ///< Manchester Error
    }

    /// CSR_SPI_MODE Register bits
    namespace csr_spi_mode_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t UNRE = (1U << 10);  ///< Underrun Error
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RXCHR = (9 << 0);  ///< Received Character
        constexpr uint32_t RXSYNH = (1U << 15);  ///< Received Sync
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TXCHR = (9 << 0);  ///< Character to be Transmitted
        constexpr uint32_t TXSYNH = (1U << 15);  ///< Sync Field to be Transmitted
    }

    /// BRGR Register bits
    namespace brgr_bits {
        constexpr uint32_t CD = (16 << 0);  ///< Clock Divider
        constexpr uint32_t FP = (3 << 16);  ///< Fractional Part
    }

    /// RTOR Register bits
    namespace rtor_bits {
        constexpr uint32_t TO = (16 << 0);  ///< Time-out Value
    }

    /// TTGR Register bits
    namespace ttgr_bits {
        constexpr uint32_t TG = (8 << 0);  ///< Timeguard Value
    }

    /// FIDI Register bits
    namespace fidi_bits {
        constexpr uint32_t FI_DI_RATIO = (11 << 0);  ///< FI Over DI Ratio Value
    }

    /// NER Register bits
    namespace ner_bits {
        constexpr uint32_t NB_ERRORS = (8 << 0);  ///< Number of Errors
    }

    /// IF_ Register bits
    namespace if__bits {
        constexpr uint32_t IRDA_FILTER = (8 << 0);  ///< IrDA Filter
    }

    /// MAN Register bits
    namespace man_bits {
        constexpr uint32_t TX_PL = (4 << 0);  ///< Transmitter Preamble Length
        constexpr uint32_t TX_PP = (2 << 8);  ///< Transmitter Preamble Pattern
        constexpr uint32_t TX_MPOL = (1U << 12);  ///< Transmitter Manchester Polarity
        constexpr uint32_t RX_PL = (4 << 16);  ///< Receiver Preamble Length
        constexpr uint32_t RX_PP = (2 << 24);  ///< Receiver Preamble Pattern detected
        constexpr uint32_t RX_MPOL = (1U << 28);  ///< Receiver Manchester Polarity
        constexpr uint32_t ONE = (1U << 29);  ///< Must Be Set to 1
        constexpr uint32_t DRIFT = (1U << 30);  ///< Drift Compensation
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// GMAC Peripheral
// ============================================================================

namespace gmac {
    /// Base addresses
    constexpr uint32_t GMAC_BASE = 0xF0028000;

    /// GMAC Register structure
    struct Registers {
        volatile uint32_t NCR;  ///< Offset: 0x00 - Network Control Register
        volatile uint32_t NCFGR;  ///< Offset: 0x04 - Network Configuration Register
        volatile uint32_t NSR;  ///< Offset: 0x08 - Network Status Register
        volatile uint32_t UR;  ///< Offset: 0x0C - User Register
        volatile uint32_t DCFGR;  ///< Offset: 0x10 - DMA Configuration Register
        volatile uint32_t TSR;  ///< Offset: 0x14 - Transmit Status Register
        volatile uint32_t RBQB;  ///< Offset: 0x18 - Receive Buffer Queue Base Address
        volatile uint32_t TBQB;  ///< Offset: 0x1C - Transmit Buffer Queue Base Address
        volatile uint32_t RSR;  ///< Offset: 0x20 - Receive Status Register
        volatile uint32_t ISR;  ///< Offset: 0x24 - Interrupt Status Register
        volatile uint32_t IER;  ///< Offset: 0x28 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x2C - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x30 - Interrupt Mask Register
        volatile uint32_t MAN;  ///< Offset: 0x34 - PHY Maintenance Register
        volatile uint32_t RPQ;  ///< Offset: 0x38 - Received Pause Quantum Register
        volatile uint32_t TPQ;  ///< Offset: 0x3C - Transmit Pause Quantum Register
        volatile uint32_t TPSF;  ///< Offset: 0x40 - TX Partial Store and Forward Register
        volatile uint32_t RPSF;  ///< Offset: 0x44 - RX Partial Store and Forward Register
        volatile uint32_t HRB;  ///< Offset: 0x80 - Hash Register Bottom [31:0]
        volatile uint32_t HRT;  ///< Offset: 0x84 - Hash Register Top [63:32]
        volatile uint32_t SAB1;  ///< Offset: 0x88 - Specific Address 1 Bottom [31:0] Register
        volatile uint32_t SAT1;  ///< Offset: 0x8C - Specific Address 1 Top [47:32] Register
        volatile uint32_t SAB2;  ///< Offset: 0x90 - Specific Address 2 Bottom [31:0] Register
        volatile uint32_t SAT2;  ///< Offset: 0x94 - Specific Address 2 Top [47:32] Register
        volatile uint32_t SAB3;  ///< Offset: 0x98 - Specific Address 3 Bottom [31:0] Register
        volatile uint32_t SAT3;  ///< Offset: 0x9C - Specific Address 3 Top [47:32] Register
        volatile uint32_t SAB4;  ///< Offset: 0xA0 - Specific Address 4 Bottom [31:0] Register
        volatile uint32_t SAT4;  ///< Offset: 0xA4 - Specific Address 4 Top [47:32] Register
        volatile uint32_t TIDM__;  ///< Offset: 0xA8 - Type ID Match 1 Register (renamed from TIDM__)
        volatile uint32_t WOL;  ///< Offset: 0xB8 - Wake on LAN Register
        volatile uint32_t IPGS;  ///< Offset: 0xBC - IPG Stretch Register
        volatile uint32_t SVLAN;  ///< Offset: 0xC0 - Stacked VLAN Register
        volatile uint32_t TPFCP;  ///< Offset: 0xC4 - Transmit PFC Pause Register
        volatile uint32_t SAMB1;  ///< Offset: 0xC8 - Specific Address 1 Mask Bottom [31:0] Register
        volatile uint32_t SAMT1;  ///< Offset: 0xCC - Specific Address 1 Mask Top [47:32] Register
        volatile uint32_t OTLO;  ///< Offset: 0x100 - Octets Transmitted [31:0] Register
        volatile uint32_t OTHI;  ///< Offset: 0x104 - Octets Transmitted [47:32] Register
        volatile uint32_t FT;  ///< Offset: 0x108 - Frames Transmitted Register
        volatile uint32_t BCFT;  ///< Offset: 0x10C - Broadcast Frames Transmitted Register
        volatile uint32_t MFT;  ///< Offset: 0x110 - Multicast Frames Transmitted Register
        volatile uint32_t PFT;  ///< Offset: 0x114 - Pause Frames Transmitted Register
        volatile uint32_t BFT64;  ///< Offset: 0x118 - 64 Byte Frames Transmitted Register
        volatile uint32_t TBFT127;  ///< Offset: 0x11C - 65 to 127 Byte Frames Transmitted Register
        volatile uint32_t TBFT255;  ///< Offset: 0x120 - 128 to 255 Byte Frames Transmitted Register
        volatile uint32_t TBFT511;  ///< Offset: 0x124 - 256 to 511 Byte Frames Transmitted Register
        volatile uint32_t TBFT1023;  ///< Offset: 0x128 - 512 to 1023 Byte Frames Transmitted Register
        volatile uint32_t TBFT1518;  ///< Offset: 0x12C - 1024 to 1518 Byte Frames Transmitted Register
        volatile uint32_t GTBFT1518;  ///< Offset: 0x130 - Greater Than 1518 Byte Frames Transmitted Register
        volatile uint32_t TUR;  ///< Offset: 0x134 - Transmit Under Runs Register
        volatile uint32_t SCF;  ///< Offset: 0x138 - Single Collision Frames Register
        volatile uint32_t MCF;  ///< Offset: 0x13C - Multiple Collision Frames Register
        volatile uint32_t EC;  ///< Offset: 0x140 - Excessive Collisions Register
        volatile uint32_t LC;  ///< Offset: 0x144 - Late Collisions Register
        volatile uint32_t DTF;  ///< Offset: 0x148 - Deferred Transmission Frames Register
        volatile uint32_t CSE;  ///< Offset: 0x14C - Carrier Sense Errors Register
        volatile uint32_t ORLO;  ///< Offset: 0x150 - Octets Received [31:0] Received
        volatile uint32_t ORHI;  ///< Offset: 0x154 - Octets Received [47:32] Received
        volatile uint32_t FR;  ///< Offset: 0x158 - Frames Received Register
        volatile uint32_t BCFR;  ///< Offset: 0x15C - Broadcast Frames Received Register
        volatile uint32_t MFR;  ///< Offset: 0x160 - Multicast Frames Received Register
        volatile uint32_t PFR;  ///< Offset: 0x164 - Pause Frames Received Register
        volatile uint32_t BFR64;  ///< Offset: 0x168 - 64 Byte Frames Received Register
        volatile uint32_t TBFR127;  ///< Offset: 0x16C - 65 to 127 Byte Frames Received Register
        volatile uint32_t TBFR255;  ///< Offset: 0x170 - 128 to 255 Byte Frames Received Register
        volatile uint32_t TBFR511;  ///< Offset: 0x174 - 256 to 511Byte Frames Received Register
        volatile uint32_t TBFR1023;  ///< Offset: 0x178 - 512 to 1023 Byte Frames Received Register
        volatile uint32_t TBFR1518;  ///< Offset: 0x17C - 1024 to 1518 Byte Frames Received Register
        volatile uint32_t TMXBFR;  ///< Offset: 0x180 - 1519 to Maximum Byte Frames Received Register
        volatile uint32_t UFR;  ///< Offset: 0x184 - Undersize Frames Received Register
        volatile uint32_t OFR;  ///< Offset: 0x188 - Oversize Frames Received Register
        volatile uint32_t JR;  ///< Offset: 0x18C - Jabbers Received Register
        volatile uint32_t FCSE;  ///< Offset: 0x190 - Frame Check Sequence Errors Register
        volatile uint32_t LFFE;  ///< Offset: 0x194 - Length Field Frame Errors Register
        volatile uint32_t RSE;  ///< Offset: 0x198 - Receive Symbol Errors Register
        volatile uint32_t AE;  ///< Offset: 0x19C - Alignment Errors Register
        volatile uint32_t RRE;  ///< Offset: 0x1A0 - Receive Resource Errors Register
        volatile uint32_t ROE;  ///< Offset: 0x1A4 - Receive Overrun Register
        volatile uint32_t IHCE;  ///< Offset: 0x1A8 - IP Header Checksum Errors Register
        volatile uint32_t TCE;  ///< Offset: 0x1AC - TCP Checksum Errors Register
        volatile uint32_t UCE;  ///< Offset: 0x1B0 - UDP Checksum Errors Register
        volatile uint32_t TSSS;  ///< Offset: 0x1C8 - 1588 Timer Sync Strobe Seconds Register
        volatile uint32_t TSSN;  ///< Offset: 0x1CC - 1588 Timer Sync Strobe Nanoseconds Register
        volatile uint32_t TS;  ///< Offset: 0x1D0 - 1588 Timer Seconds Register
        volatile uint32_t TN;  ///< Offset: 0x1D4 - 1588 Timer Nanoseconds Register
        volatile uint32_t TA;  ///< Offset: 0x1D8 - 1588 Timer Adjust Register
        volatile uint32_t TI;  ///< Offset: 0x1DC - 1588 Timer Increment Register
        volatile uint32_t EFTS;  ///< Offset: 0x1E0 - PTP Event Frame Transmitted Seconds
        volatile uint32_t EFTN;  ///< Offset: 0x1E4 - PTP Event Frame Transmitted Nanoseconds
        volatile uint32_t EFRS;  ///< Offset: 0x1E8 - PTP Event Frame Received Seconds
        volatile uint32_t EFRN;  ///< Offset: 0x1EC - PTP Event Frame Received Nanoseconds
        volatile uint32_t PEFTS;  ///< Offset: 0x1F0 - PTP Peer Event Frame Transmitted Seconds
        volatile uint32_t PEFTN;  ///< Offset: 0x1F4 - PTP Peer Event Frame Transmitted Nanoseconds
        volatile uint32_t PEFRS;  ///< Offset: 0x1F8 - PTP Peer Event Frame Received Seconds
        volatile uint32_t PEFRN;  ///< Offset: 0x1FC - PTP Peer Event Frame Received Nanoseconds
        volatile uint32_t ISRPQ__;  ///< Offset: 0x400 - Interrupt Status Register Priority Queue (renamed from ISRPQ__)
        volatile uint32_t TBQBAPQ__;  ///< Offset: 0x440 - Transmit Buffer Queue Base Address Priority Queue (renamed from TBQBAPQ__)
        volatile uint32_t RBQBAPQ__;  ///< Offset: 0x480 - Receive Buffer Queue Base Address Priority Queue (renamed from RBQBAPQ__)
        volatile uint32_t RBSRPQ__;  ///< Offset: 0x4A0 - Receive Buffer Size Register Priority Queue (renamed from RBSRPQ__)
        volatile uint32_t ST1RPQ__;  ///< Offset: 0x500 - Screening Type1 Register Priority Queue (renamed from ST1RPQ__)
        volatile uint32_t ST2RPQ__;  ///< Offset: 0x540 - Screening Type2 Register Priority Queue (renamed from ST2RPQ__)
        volatile uint32_t IERPQ__;  ///< Offset: 0x600 - Interrupt Enable Register Priority Queue (renamed from IERPQ__)
        volatile uint32_t IDRPQ__;  ///< Offset: 0x620 - Interrupt Disable Register Priority Queue (renamed from IDRPQ__)
        volatile uint32_t IMRPQ__;  ///< Offset: 0x640 - Interrupt Mask Register Priority Queue (renamed from IMRPQ__)
    };

    /// Peripheral instances
    inline Registers* GMAC = reinterpret_cast<Registers*>(GMAC_BASE);

    // Bit definitions
    /// NCR Register bits
    namespace ncr_bits {
        constexpr uint32_t LB = (1U << 0);  ///< Loop Back
        constexpr uint32_t LBL = (1U << 1);  ///< Loop Back Local
        constexpr uint32_t RXEN = (1U << 2);  ///< Receive Enable
        constexpr uint32_t TXEN = (1U << 3);  ///< Transmit Enable
        constexpr uint32_t MPE = (1U << 4);  ///< Management Port Enable
        constexpr uint32_t CLRSTAT = (1U << 5);  ///< Clear Statistics Registers
        constexpr uint32_t INCSTAT = (1U << 6);  ///< Increment Statistics Registers
        constexpr uint32_t WESTAT = (1U << 7);  ///< Write Enable for Statistics Registers
        constexpr uint32_t BP = (1U << 8);  ///< Back pressure
        constexpr uint32_t TSTART = (1U << 9);  ///< Start Transmission
        constexpr uint32_t THALT = (1U << 10);  ///< Transmit Halt
        constexpr uint32_t TXPF = (1U << 11);  ///< Transmit Pause Frame
        constexpr uint32_t TXZQPF = (1U << 12);  ///< Transmit Zero Quantum Pause Frame
        constexpr uint32_t RDS = (1U << 14);  ///< Read Snapshot
        constexpr uint32_t SRTSM = (1U << 15);  ///< Store Receive Time Stamp to Memory
        constexpr uint32_t ENPBPR = (1U << 16);  ///< Enable PFC Priority-based Pause Reception
        constexpr uint32_t TXPBPF = (1U << 17);  ///< Transmit PFC Priority-based Pause Frame
        constexpr uint32_t FNP = (1U << 18);  ///< Flush Next Packet
    }

    /// NCFGR Register bits
    namespace ncfgr_bits {
        constexpr uint32_t SPD = (1U << 0);  ///< Speed
        constexpr uint32_t FD = (1U << 1);  ///< Full Duplex
        constexpr uint32_t DNVLAN = (1U << 2);  ///< Discard Non-VLAN FRAMES
        constexpr uint32_t JFRAME = (1U << 3);  ///< Jumbo Frame Size
        constexpr uint32_t CAF = (1U << 4);  ///< Copy All Frames
        constexpr uint32_t NBC = (1U << 5);  ///< No Broadcast
        constexpr uint32_t MTIHEN = (1U << 6);  ///< Multicast Hash Enable
        constexpr uint32_t UNIHEN = (1U << 7);  ///< Unicast Hash Enable
        constexpr uint32_t MAXFS = (1U << 8);  ///< 1536 Maximum Frame Size
        constexpr uint32_t GBE = (1U << 10);  ///< Gigabit Mode Enable
        constexpr uint32_t PIS = (1U << 11);  ///< Physical Interface Select
        constexpr uint32_t RTY = (1U << 12);  ///< Retry Test
        constexpr uint32_t PEN = (1U << 13);  ///< Pause Enable
        constexpr uint32_t RXBUFO = (2 << 14);  ///< Receive Buffer Offset
        constexpr uint32_t LFERD = (1U << 16);  ///< Length Field Error Frame Discard
        constexpr uint32_t RFCS = (1U << 17);  ///< Remove FCS
        constexpr uint32_t CLK = (3 << 18);  ///< MDC CLock Division
        constexpr uint32_t DBW = (2 << 21);  ///< Data Bus Width
        constexpr uint32_t DCPF = (1U << 23);  ///< Disable Copy of Pause Frames
        constexpr uint32_t RXCOEN = (1U << 24);  ///< Receive Checksum Offload Enable
        constexpr uint32_t EFRHD = (1U << 25);  ///< Enable Frames Received in Half Duplex
        constexpr uint32_t IRXFCS = (1U << 26);  ///< Ignore RX FCS
        constexpr uint32_t IPGSEN = (1U << 28);  ///< IP Stretch Enable
        constexpr uint32_t RXBP = (1U << 29);  ///< Receive Bad Preamble
        constexpr uint32_t IRXER = (1U << 30);  ///< Ignore IPG rx_er
    }

    /// NSR Register bits
    namespace nsr_bits {
        constexpr uint32_t MDIO = (1U << 1);  ///< MDIO Input Status
        constexpr uint32_t IDLE = (1U << 2);  ///< PHY Management Logic Idle
    }

    /// UR Register bits
    namespace ur_bits {
        constexpr uint32_t RGMII = (1U << 0);  ///< RGMII Mode
        constexpr uint32_t HDFC = (1U << 6);  ///< Half Duplex Flow Control
        constexpr uint32_t BPDG = (1U << 7);  ///< BPDG Bypass Deglitchers
    }

    /// DCFGR Register bits
    namespace dcfgr_bits {
        constexpr uint32_t FBLDO = (5 << 0);  ///< Fixed Burst Length for DMA Data Operations:
        constexpr uint32_t ESMA = (1U << 6);  ///< Endian Swap Mode Enable for Management Descriptor Accesses
        constexpr uint32_t ESPA = (1U << 7);  ///< Endian Swap Mode Enable for Packet Data Accesses
        constexpr uint32_t RXBMS = (2 << 8);  ///< Receiver Packet Buffer Memory Size Select
        constexpr uint32_t TXPBMS = (1U << 10);  ///< Transmitter Packet Buffer Memory Size Select
        constexpr uint32_t TXCOEN = (1U << 11);  ///< Transmitter Checksum Generation Offload Enable
        constexpr uint32_t DRBS = (8 << 16);  ///< DMA Receive Buffer Size
        constexpr uint32_t DDRP = (1U << 24);  ///< DMA Discard Receive Packets
    }

    /// TSR Register bits
    namespace tsr_bits {
        constexpr uint32_t UBR = (1U << 0);  ///< Used Bit Read
        constexpr uint32_t COL = (1U << 1);  ///< Collision Occurred
        constexpr uint32_t RLE = (1U << 2);  ///< Retry Limit Exceeded
        constexpr uint32_t TXGO = (1U << 3);  ///< Transmit Go
        constexpr uint32_t TFC = (1U << 4);  ///< Transmit Frame Corruption due to AHB error
        constexpr uint32_t TXCOMP = (1U << 5);  ///< Transmit Complete
        constexpr uint32_t UND = (1U << 6);  ///< Transmit Under Run
        constexpr uint32_t LCO = (1U << 7);  ///< Late Collision Occurred
        constexpr uint32_t HRESP = (1U << 8);  ///< HRESP Not OK
    }

    /// RBQB Register bits
    namespace rbqb_bits {
        constexpr uint32_t ADDR = (30 << 2);  ///< Receive buffer queue base address
    }

    /// TBQB Register bits
    namespace tbqb_bits {
        constexpr uint32_t ADDR = (30 << 2);  ///< Transmit Buffer Queue Base Address
    }

    /// RSR Register bits
    namespace rsr_bits {
        constexpr uint32_t BNA = (1U << 0);  ///< Buffer Not Available
        constexpr uint32_t REC = (1U << 1);  ///< Frame Received
        constexpr uint32_t RXOVR = (1U << 2);  ///< Receive Overrun
        constexpr uint32_t HNO = (1U << 3);  ///< HRESP Not OK
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t MFS = (1U << 0);  ///< Management Frame Sent
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< RX Used Bit Read
        constexpr uint32_t TXUBR = (1U << 3);  ///< TX Used Bit Read
        constexpr uint32_t TUR = (1U << 4);  ///< Transmit Under Run
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded or Late Collision
        constexpr uint32_t TFC = (1U << 6);  ///< Transmit Frame Corruption due to AHB error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< HRESP Not OK
        constexpr uint32_t PFNZ = (1U << 12);  ///< Pause Frame with Non-zero Pause Quantum Received
        constexpr uint32_t PTZ = (1U << 13);  ///< Pause Time Zero
        constexpr uint32_t PFTR = (1U << 14);  ///< Pause Frame Transmitted
        constexpr uint32_t EXINT = (1U << 15);  ///< External Interrupt
        constexpr uint32_t DRQFR = (1U << 18);  ///< PTP Delay Request Frame Received
        constexpr uint32_t SFR = (1U << 19);  ///< PTP Sync Frame Received
        constexpr uint32_t DRQFT = (1U << 20);  ///< PTP Delay Request Frame Transmitted
        constexpr uint32_t SFT = (1U << 21);  ///< PTP Sync Frame Transmitted
        constexpr uint32_t PDRQFR = (1U << 22);  ///< PDelay Request Frame Received
        constexpr uint32_t PDRSFR = (1U << 23);  ///< PDelay Response Frame Received
        constexpr uint32_t PDRQFT = (1U << 24);  ///< PDelay Request Frame Transmitted
        constexpr uint32_t PDRSFT = (1U << 25);  ///< PDelay Response Frame Transmitted
        constexpr uint32_t SRI = (1U << 26);  ///< TSU Seconds Register Increment
        constexpr uint32_t WOL = (1U << 28);  ///< Wake On LAN
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t MFS = (1U << 0);  ///< Management Frame Sent
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< RX Used Bit Read
        constexpr uint32_t TXUBR = (1U << 3);  ///< TX Used Bit Read
        constexpr uint32_t TUR = (1U << 4);  ///< Transmit Under Run
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded or Late Collision
        constexpr uint32_t TFC = (1U << 6);  ///< Transmit Frame Corruption due to AHB error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< HRESP Not OK
        constexpr uint32_t PFNZ = (1U << 12);  ///< Pause Frame with Non-zero Pause Quantum Received
        constexpr uint32_t PTZ = (1U << 13);  ///< Pause Time Zero
        constexpr uint32_t PFTR = (1U << 14);  ///< Pause Frame Transmitted
        constexpr uint32_t EXINT = (1U << 15);  ///< External Interrupt
        constexpr uint32_t DRQFR = (1U << 18);  ///< PTP Delay Request Frame Received
        constexpr uint32_t SFR = (1U << 19);  ///< PTP Sync Frame Received
        constexpr uint32_t DRQFT = (1U << 20);  ///< PTP Delay Request Frame Transmitted
        constexpr uint32_t SFT = (1U << 21);  ///< PTP Sync Frame Transmitted
        constexpr uint32_t PDRQFR = (1U << 22);  ///< PDelay Request Frame Received
        constexpr uint32_t PDRSFR = (1U << 23);  ///< PDelay Response Frame Received
        constexpr uint32_t PDRQFT = (1U << 24);  ///< PDelay Request Frame Transmitted
        constexpr uint32_t PDRSFT = (1U << 25);  ///< PDelay Response Frame Transmitted
        constexpr uint32_t SRI = (1U << 26);  ///< TSU Seconds Register Increment
        constexpr uint32_t WOL = (1U << 28);  ///< Wake On LAN
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t MFS = (1U << 0);  ///< Management Frame Sent
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< RX Used Bit Read
        constexpr uint32_t TXUBR = (1U << 3);  ///< TX Used Bit Read
        constexpr uint32_t TUR = (1U << 4);  ///< Transmit Under Run
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded or Late Collision
        constexpr uint32_t TFC = (1U << 6);  ///< Transmit Frame Corruption due to AHB error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< HRESP Not OK
        constexpr uint32_t PFNZ = (1U << 12);  ///< Pause Frame with Non-zero Pause Quantum Received
        constexpr uint32_t PTZ = (1U << 13);  ///< Pause Time Zero
        constexpr uint32_t PFTR = (1U << 14);  ///< Pause Frame Transmitted
        constexpr uint32_t EXINT = (1U << 15);  ///< External Interrupt
        constexpr uint32_t DRQFR = (1U << 18);  ///< PTP Delay Request Frame Received
        constexpr uint32_t SFR = (1U << 19);  ///< PTP Sync Frame Received
        constexpr uint32_t DRQFT = (1U << 20);  ///< PTP Delay Request Frame Transmitted
        constexpr uint32_t SFT = (1U << 21);  ///< PTP Sync Frame Transmitted
        constexpr uint32_t PDRQFR = (1U << 22);  ///< PDelay Request Frame Received
        constexpr uint32_t PDRSFR = (1U << 23);  ///< PDelay Response Frame Received
        constexpr uint32_t PDRQFT = (1U << 24);  ///< PDelay Request Frame Transmitted
        constexpr uint32_t PDRSFT = (1U << 25);  ///< PDelay Response Frame Transmitted
        constexpr uint32_t SRI = (1U << 26);  ///< TSU Seconds Register Increment
        constexpr uint32_t WOL = (1U << 28);  ///< Wake On LAN
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t MFS = (1U << 0);  ///< Management Frame Sent
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< RX Used Bit Read
        constexpr uint32_t TXUBR = (1U << 3);  ///< TX Used Bit Read
        constexpr uint32_t TUR = (1U << 4);  ///< Transmit Under Run
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded or Late Collision
        constexpr uint32_t TFC = (1U << 6);  ///< Transmit Frame Corruption due to AHB error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< HRESP Not OK
        constexpr uint32_t PFNZ = (1U << 12);  ///< Pause Frame with Non-zero Pause Quantum Received
        constexpr uint32_t PTZ = (1U << 13);  ///< Pause Time Zero
        constexpr uint32_t PFTR = (1U << 14);  ///< Pause Frame Transmitted
        constexpr uint32_t EXINT = (1U << 15);  ///< External Interrupt
        constexpr uint32_t DRQFR = (1U << 18);  ///< PTP Delay Request Frame Received
        constexpr uint32_t SFR = (1U << 19);  ///< PTP Sync Frame Received
        constexpr uint32_t DRQFT = (1U << 20);  ///< PTP Delay Request Frame Transmitted
        constexpr uint32_t SFT = (1U << 21);  ///< PTP Sync Frame Transmitted
        constexpr uint32_t PDRQFR = (1U << 22);  ///< PDelay Request Frame Received
        constexpr uint32_t PDRSFR = (1U << 23);  ///< PDelay Response Frame Received
        constexpr uint32_t PDRQFT = (1U << 24);  ///< PDelay Request Frame Transmitted
        constexpr uint32_t PDRSFT = (1U << 25);  ///< PDelay Response Frame Transmitted
    }

    /// MAN Register bits
    namespace man_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< PHY Data
        constexpr uint32_t WTN = (2 << 16);  ///< Write Ten
        constexpr uint32_t REGA = (5 << 18);  ///< Register Address
        constexpr uint32_t PHYA = (5 << 23);  ///< PHY Address
        constexpr uint32_t OP = (2 << 28);  ///< Operation
        constexpr uint32_t CLTTO = (1U << 30);  ///< Clause 22 Operation
        constexpr uint32_t WZO = (1U << 31);  ///< Write ZERO
    }

    /// RPQ Register bits
    namespace rpq_bits {
        constexpr uint32_t RPQ = (16 << 0);  ///< Received Pause Quantum
    }

    /// TPQ Register bits
    namespace tpq_bits {
        constexpr uint32_t TPQ = (16 << 0);  ///< Transmit Pause Quantum
    }

    /// TPSF Register bits
    namespace tpsf_bits {
        constexpr uint32_t TPB1ADR = (12 << 0);  ///< tx_pbuf_addr-1:0
        constexpr uint32_t ENTXP = (1U << 31);  ///< Enable TX Partial Store and Forward Operation
    }

    /// RPSF Register bits
    namespace rpsf_bits {
        constexpr uint32_t RPB1ADR = (12 << 0);  ///< rx_pbuf_addr-1:0
        constexpr uint32_t ENRXP = (1U << 31);  ///< Enable RX Partial Store and Forward Operation
    }

    /// HRB Register bits
    namespace hrb_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< Hash Address
    }

    /// HRT Register bits
    namespace hrt_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< Hash Address
    }

    /// SAB1 Register bits
    namespace sab1_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< Specific Address 1
    }

    /// SAT1 Register bits
    namespace sat1_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< Specific Address 1
    }

    /// SAB2 Register bits
    namespace sab2_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< Specific Address 2
    }

    /// SAT2 Register bits
    namespace sat2_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< Specific Address 2
    }

    /// SAB3 Register bits
    namespace sab3_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< Specific Address 3
    }

    /// SAT3 Register bits
    namespace sat3_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< Specific Address 3
    }

    /// SAB4 Register bits
    namespace sab4_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< Specific Address 4
    }

    /// SAT4 Register bits
    namespace sat4_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< Specific Address 4
    }

    /// TIDM__ Register bits
    namespace tidm___bits {
        constexpr uint32_t TID = (16 << 0);  ///< Type ID Match 1
    }

    /// WOL Register bits
    namespace wol_bits {
        constexpr uint32_t IP = (16 << 0);  ///< ARP Request IP Address
        constexpr uint32_t MAG = (1U << 16);  ///< Magic Packet Event Enable
        constexpr uint32_t ARP = (1U << 17);  ///< ARP Request IP Address
        constexpr uint32_t SA1 = (1U << 18);  ///< Specific Address Register 1 Event Enable
        constexpr uint32_t MTI = (1U << 19);  ///< Multicast Hash Event Enable
    }

    /// IPGS Register bits
    namespace ipgs_bits {
        constexpr uint32_t FL = (16 << 0);  ///< Frame Length
    }

    /// SVLAN Register bits
    namespace svlan_bits {
        constexpr uint32_t VLAN_TYPE = (16 << 0);  ///< User Defined VLAN_TYPE Field
        constexpr uint32_t ESVLAN = (1U << 31);  ///< Enable Stacked VLAN Processing Mode
    }

    /// TPFCP Register bits
    namespace tpfcp_bits {
        constexpr uint32_t PEV = (8 << 0);  ///< Priority Enable Vector
        constexpr uint32_t PQ = (8 << 8);  ///< Pause Quantum
    }

    /// SAMB1 Register bits
    namespace samb1_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< Specific Address 1 Mask
    }

    /// SAMT1 Register bits
    namespace samt1_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< Specific Address 1 Mask
    }

    /// OTLO Register bits
    namespace otlo_bits {
        constexpr uint32_t TXO = (32 << 0);  ///< Transmitted Octets
    }

    /// OTHI Register bits
    namespace othi_bits {
        constexpr uint32_t TXO = (16 << 0);  ///< Transmitted Octets
    }

    /// FT Register bits
    namespace ft_bits {
        constexpr uint32_t FTX = (32 << 0);  ///< Frames Transmitted without Error
    }

    /// BCFT Register bits
    namespace bcft_bits {
        constexpr uint32_t BFTX = (32 << 0);  ///< Broadcast Frames Transmitted without Error
    }

    /// MFT Register bits
    namespace mft_bits {
        constexpr uint32_t MFTX = (32 << 0);  ///< Multicast Frames Transmitted without Error
    }

    /// PFT Register bits
    namespace pft_bits {
        constexpr uint32_t PFTX = (16 << 0);  ///< Pause Frames Transmitted Register
    }

    /// BFT64 Register bits
    namespace bft64_bits {
        constexpr uint32_t NFTX = (32 << 0);  ///< 64 Byte Frames Transmitted without Error
    }

    /// TBFT127 Register bits
    namespace tbft127_bits {
        constexpr uint32_t NFTX = (32 << 0);  ///< 65 to 127 Byte Frames Transmitted without Error
    }

    /// TBFT255 Register bits
    namespace tbft255_bits {
        constexpr uint32_t NFTX = (32 << 0);  ///< 128 to 255 Byte Frames Transmitted without Error
    }

    /// TBFT511 Register bits
    namespace tbft511_bits {
        constexpr uint32_t NFTX = (32 << 0);  ///< 256 to 511 Byte Frames Transmitted without Error
    }

    /// TBFT1023 Register bits
    namespace tbft1023_bits {
        constexpr uint32_t NFTX = (32 << 0);  ///< 512 to 1023 Byte Frames Transmitted without Error
    }

    /// TBFT1518 Register bits
    namespace tbft1518_bits {
        constexpr uint32_t NFTX = (32 << 0);  ///< 1024 to 1518 Byte Frames Transmitted without Error
    }

    /// GTBFT1518 Register bits
    namespace gtbft1518_bits {
        constexpr uint32_t NFTX = (32 << 0);  ///< Greater than 1518 Byte Frames Transmitted without Error
    }

    /// TUR Register bits
    namespace tur_bits {
        constexpr uint32_t TXUNR = (10 << 0);  ///< Transmit Under Runs
    }

    /// SCF Register bits
    namespace scf_bits {
        constexpr uint32_t SCOL = (18 << 0);  ///< Single Collision
    }

    /// MCF Register bits
    namespace mcf_bits {
        constexpr uint32_t MCOL = (18 << 0);  ///< Multiple Collision
    }

    /// EC Register bits
    namespace ec_bits {
        constexpr uint32_t XCOL = (10 << 0);  ///< Excessive Collisions
    }

    /// LC Register bits
    namespace lc_bits {
        constexpr uint32_t LCOL = (10 << 0);  ///< Late Collisions
    }

    /// DTF Register bits
    namespace dtf_bits {
        constexpr uint32_t DEFT = (18 << 0);  ///< Deferred Transmission
    }

    /// CSE Register bits
    namespace cse_bits {
        constexpr uint32_t CSR = (10 << 0);  ///< Carrier Sense Error
    }

    /// ORLO Register bits
    namespace orlo_bits {
        constexpr uint32_t RXO = (32 << 0);  ///< Received Octets
    }

    /// ORHI Register bits
    namespace orhi_bits {
        constexpr uint32_t RXO = (16 << 0);  ///< Received Octets
    }

    /// FR Register bits
    namespace fr_bits {
        constexpr uint32_t FRX = (32 << 0);  ///< Frames Received without Error
    }

    /// BCFR Register bits
    namespace bcfr_bits {
        constexpr uint32_t BFRX = (32 << 0);  ///< Broadcast Frames Received without Error
    }

    /// MFR Register bits
    namespace mfr_bits {
        constexpr uint32_t MFRX = (32 << 0);  ///< Multicast Frames Received without Error
    }

    /// PFR Register bits
    namespace pfr_bits {
        constexpr uint32_t PFRX = (16 << 0);  ///< Pause Frames Received Register
    }

    /// BFR64 Register bits
    namespace bfr64_bits {
        constexpr uint32_t NFRX = (32 << 0);  ///< 64 Byte Frames Received without Error
    }

    /// TBFR127 Register bits
    namespace tbfr127_bits {
        constexpr uint32_t NFRX = (32 << 0);  ///< 65 to 127 Byte Frames Received without Error
    }

    /// TBFR255 Register bits
    namespace tbfr255_bits {
        constexpr uint32_t NFRX = (32 << 0);  ///< 128 to 255 Byte Frames Received without Error
    }

    /// TBFR511 Register bits
    namespace tbfr511_bits {
        constexpr uint32_t NFRX = (32 << 0);  ///< 256 to 511 Byte Frames Received without Error
    }

    /// TBFR1023 Register bits
    namespace tbfr1023_bits {
        constexpr uint32_t NFRX = (32 << 0);  ///< 512 to 1023 Byte Frames Received without Error
    }

    /// TBFR1518 Register bits
    namespace tbfr1518_bits {
        constexpr uint32_t NFRX = (32 << 0);  ///< 1024 to 1518 Byte Frames Received without Error
    }

    /// TMXBFR Register bits
    namespace tmxbfr_bits {
        constexpr uint32_t NFRX = (32 << 0);  ///< 1519 to Maximum Byte Frames Received without Error
    }

    /// UFR Register bits
    namespace ufr_bits {
        constexpr uint32_t UFRX = (10 << 0);  ///< Undersize Frames Received
    }

    /// OFR Register bits
    namespace ofr_bits {
        constexpr uint32_t OFRX = (10 << 0);  ///< Oversized Frames Received
    }

    /// JR Register bits
    namespace jr_bits {
        constexpr uint32_t JRX = (10 << 0);  ///< Jabbers Received
    }

    /// FCSE Register bits
    namespace fcse_bits {
        constexpr uint32_t FCKR = (10 << 0);  ///< Frame Check Sequence Errors
    }

    /// LFFE Register bits
    namespace lffe_bits {
        constexpr uint32_t LFER = (10 << 0);  ///< Length Field Frame Errors
    }

    /// RSE Register bits
    namespace rse_bits {
        constexpr uint32_t RXSE = (10 << 0);  ///< Receive Symbol Errors
    }

    /// AE Register bits
    namespace ae_bits {
        constexpr uint32_t AER = (10 << 0);  ///< Alignment Errors
    }

    /// RRE Register bits
    namespace rre_bits {
        constexpr uint32_t RXRER = (18 << 0);  ///< Receive Resource Errors
    }

    /// ROE Register bits
    namespace roe_bits {
        constexpr uint32_t RXOVR = (10 << 0);  ///< Receive Overruns
    }

    /// IHCE Register bits
    namespace ihce_bits {
        constexpr uint32_t HCKER = (8 << 0);  ///< IP Header Checksum Errors
    }

    /// TCE Register bits
    namespace tce_bits {
        constexpr uint32_t TCKER = (8 << 0);  ///< TCP Checksum Errors
    }

    /// UCE Register bits
    namespace uce_bits {
        constexpr uint32_t UCKER = (8 << 0);  ///< UDP Checksum Errors
    }

    /// TSSS Register bits
    namespace tsss_bits {
        constexpr uint32_t VTS = (32 << 0);  ///< Value of Timer Seconds Register Capture
    }

    /// TSSN Register bits
    namespace tssn_bits {
        constexpr uint32_t VTN = (30 << 0);  ///< Value Timer Nanoseconds Register Capture
    }

    /// TS Register bits
    namespace ts_bits {
        constexpr uint32_t TCS = (32 << 0);  ///< Timer Count in Seconds
    }

    /// TN Register bits
    namespace tn_bits {
        constexpr uint32_t TNS = (30 << 0);  ///< Timer Count in Nanoseconds
    }

    /// TA Register bits
    namespace ta_bits {
        constexpr uint32_t ITDT = (30 << 0);  ///< Increment/Decrement
        constexpr uint32_t ADJ = (1U << 31);  ///< Adjust 1588 Timer
    }

    /// TI Register bits
    namespace ti_bits {
        constexpr uint32_t CNS = (8 << 0);  ///< Count Nanoseconds
        constexpr uint32_t ACNS = (8 << 8);  ///< Alternative Count Nanoseconds
        constexpr uint32_t NIT = (8 << 16);  ///< Number of Increments
    }

    /// EFTS Register bits
    namespace efts_bits {
        constexpr uint32_t RUD = (32 << 0);  ///< Register Update
    }

    /// EFTN Register bits
    namespace eftn_bits {
        constexpr uint32_t RUD = (30 << 0);  ///< Register Update
    }

    /// EFRS Register bits
    namespace efrs_bits {
        constexpr uint32_t RUD = (32 << 0);  ///< Register Update
    }

    /// EFRN Register bits
    namespace efrn_bits {
        constexpr uint32_t RUD = (30 << 0);  ///< Register Update
    }

    /// PEFTS Register bits
    namespace pefts_bits {
        constexpr uint32_t RUD = (32 << 0);  ///< Register Update
    }

    /// PEFTN Register bits
    namespace peftn_bits {
        constexpr uint32_t RUD = (30 << 0);  ///< Register Update
    }

    /// PEFRS Register bits
    namespace pefrs_bits {
        constexpr uint32_t RUD = (32 << 0);  ///< Register Update
    }

    /// PEFRN Register bits
    namespace pefrn_bits {
        constexpr uint32_t RUD = (30 << 0);  ///< Register Update
    }

    /// ISRPQ__ Register bits
    namespace isrpq___bits {
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< RX Used Bit Read
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded or Late Collision
        constexpr uint32_t TFC = (1U << 6);  ///< Transmit Frame Corruption due to AHB error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< HRESP Not OK
    }

    /// TBQBAPQ__ Register bits
    namespace tbqbapq___bits {
        constexpr uint32_t TXBQBA = (6 << 2);  ///< Transmit Buffer Queue Base Address
    }

    /// RBQBAPQ__ Register bits
    namespace rbqbapq___bits {
        constexpr uint32_t RXBQBA = (6 << 2);  ///< Receive Buffer Queue Base Address
    }

    /// RBSRPQ__ Register bits
    namespace rbsrpq___bits {
        constexpr uint32_t RBS = (16 << 0);  ///< Receive Buffer Size
    }

    /// ST1RPQ__ Register bits
    namespace st1rpq___bits {
        constexpr uint32_t QNB = (4 << 0);  ///< Que Number (0->7)
        constexpr uint32_t DSTCM = (8 << 4);  ///< Differentiated Services or Traffic Class Match
        constexpr uint32_t UDPM = (16 << 12);  ///< UDP Port Match
        constexpr uint32_t DSTCE = (1U << 28);  ///< Differentiated Services or Traffic Class Match Enable
        constexpr uint32_t UDPE = (1U << 29);  ///< UDP Port Match Enable
    }

    /// ST2RPQ__ Register bits
    namespace st2rpq___bits {
        constexpr uint32_t QNB = (4 << 0);  ///< Que Number (0->7)
        constexpr uint32_t VLANP = (4 << 4);  ///< VLAN Priority
        constexpr uint32_t VLANE = (1U << 8);  ///< VLAN Enable
    }

    /// IERPQ__ Register bits
    namespace ierpq___bits {
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< RX Used Bit Read
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded or Late Collision
        constexpr uint32_t TFC = (1U << 6);  ///< Transmit Frame Corruption due to AHB error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< HRESP Not OK
    }

    /// IDRPQ__ Register bits
    namespace idrpq___bits {
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< RX Used Bit Read
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded or Late Collision
        constexpr uint32_t TFC = (1U << 6);  ///< Transmit Frame Corruption due to AHB error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< HRESP Not OK
    }

    /// IMRPQ__ Register bits
    namespace imrpq___bits {
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< RX Used Bit Read
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded or Late Collision
        constexpr uint32_t AHB = (1U << 6);  ///< AHB Error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< HRESP Not OK
    }

}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t PWM_BASE = 0xF002C000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t CLK;  ///< Offset: 0x00 - PWM Clock Register
        volatile uint32_t ENA;  ///< Offset: 0x04 - PWM Enable Register
        volatile uint32_t DIS;  ///< Offset: 0x08 - PWM Disable Register
        volatile uint32_t SR;  ///< Offset: 0x0C - PWM Status Register
        volatile uint32_t IER1;  ///< Offset: 0x10 - PWM Interrupt Enable Register 1
        volatile uint32_t IDR1;  ///< Offset: 0x14 - PWM Interrupt Disable Register 1
        volatile uint32_t IMR1;  ///< Offset: 0x18 - PWM Interrupt Mask Register 1
        volatile uint32_t ISR1;  ///< Offset: 0x1C - PWM Interrupt Status Register 1
        volatile uint32_t SCM;  ///< Offset: 0x20 - PWM Sync Channels Mode Register
        volatile uint32_t SCUC;  ///< Offset: 0x28 - PWM Sync Channels Update Control Register
        volatile uint32_t SCUP;  ///< Offset: 0x2C - PWM Sync Channels Update Period Register
        volatile uint32_t SCUPUPD;  ///< Offset: 0x30 - PWM Sync Channels Update Period Update Register
        volatile uint32_t IER2;  ///< Offset: 0x34 - PWM Interrupt Enable Register 2
        volatile uint32_t IDR2;  ///< Offset: 0x38 - PWM Interrupt Disable Register 2
        volatile uint32_t IMR2;  ///< Offset: 0x3C - PWM Interrupt Mask Register 2
        volatile uint32_t ISR2;  ///< Offset: 0x40 - PWM Interrupt Status Register 2
        volatile uint32_t OOV;  ///< Offset: 0x44 - PWM Output Override Value Register
        volatile uint32_t OS;  ///< Offset: 0x48 - PWM Output Selection Register
        volatile uint32_t OSS;  ///< Offset: 0x4C - PWM Output Selection Set Register
        volatile uint32_t OSC;  ///< Offset: 0x50 - PWM Output Selection Clear Register
        volatile uint32_t OSSUPD;  ///< Offset: 0x54 - PWM Output Selection Set Update Register
        volatile uint32_t OSCUPD;  ///< Offset: 0x58 - PWM Output Selection Clear Update Register
        volatile uint32_t FMR;  ///< Offset: 0x5C - PWM Fault Mode Register
        volatile uint32_t FSR;  ///< Offset: 0x60 - PWM Fault Status Register
        volatile uint32_t FCR;  ///< Offset: 0x64 - PWM Fault Clear Register
        volatile uint32_t FPV;  ///< Offset: 0x68 - PWM Fault Protection Value Register
        volatile uint32_t FPE;  ///< Offset: 0x6C - PWM Fault Protection Enable Register
        volatile uint32_t ELMR__;  ///< Offset: 0x7C - PWM Event Line 0 Mode Register (renamed from ELMR__)
        volatile uint32_t SMMR;  ///< Offset: 0xB0 - PWM Stepper Motor Mode Register
        volatile uint32_t WPCR;  ///< Offset: 0xE4 - PWM Write Protect Control Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - PWM Write Protect Status Register
        volatile uint32_t CMPV0;  ///< Offset: 0x130 - PWM Comparison 0 Value Register
        volatile uint32_t CMPVUPD0;  ///< Offset: 0x134 - PWM Comparison 0 Value Update Register
        volatile uint32_t CMPM0;  ///< Offset: 0x138 - PWM Comparison 0 Mode Register
        volatile uint32_t CMPMUPD0;  ///< Offset: 0x13C - PWM Comparison 0 Mode Update Register
        volatile uint32_t CMPV1;  ///< Offset: 0x140 - PWM Comparison 1 Value Register
        volatile uint32_t CMPVUPD1;  ///< Offset: 0x144 - PWM Comparison 1 Value Update Register
        volatile uint32_t CMPM1;  ///< Offset: 0x148 - PWM Comparison 1 Mode Register
        volatile uint32_t CMPMUPD1;  ///< Offset: 0x14C - PWM Comparison 1 Mode Update Register
        volatile uint32_t CMPV2;  ///< Offset: 0x150 - PWM Comparison 2 Value Register
        volatile uint32_t CMPVUPD2;  ///< Offset: 0x154 - PWM Comparison 2 Value Update Register
        volatile uint32_t CMPM2;  ///< Offset: 0x158 - PWM Comparison 2 Mode Register
        volatile uint32_t CMPMUPD2;  ///< Offset: 0x15C - PWM Comparison 2 Mode Update Register
        volatile uint32_t CMPV3;  ///< Offset: 0x160 - PWM Comparison 3 Value Register
        volatile uint32_t CMPVUPD3;  ///< Offset: 0x164 - PWM Comparison 3 Value Update Register
        volatile uint32_t CMPM3;  ///< Offset: 0x168 - PWM Comparison 3 Mode Register
        volatile uint32_t CMPMUPD3;  ///< Offset: 0x16C - PWM Comparison 3 Mode Update Register
        volatile uint32_t CMPV4;  ///< Offset: 0x170 - PWM Comparison 4 Value Register
        volatile uint32_t CMPVUPD4;  ///< Offset: 0x174 - PWM Comparison 4 Value Update Register
        volatile uint32_t CMPM4;  ///< Offset: 0x178 - PWM Comparison 4 Mode Register
        volatile uint32_t CMPMUPD4;  ///< Offset: 0x17C - PWM Comparison 4 Mode Update Register
        volatile uint32_t CMPV5;  ///< Offset: 0x180 - PWM Comparison 5 Value Register
        volatile uint32_t CMPVUPD5;  ///< Offset: 0x184 - PWM Comparison 5 Value Update Register
        volatile uint32_t CMPM5;  ///< Offset: 0x188 - PWM Comparison 5 Mode Register
        volatile uint32_t CMPMUPD5;  ///< Offset: 0x18C - PWM Comparison 5 Mode Update Register
        volatile uint32_t CMPV6;  ///< Offset: 0x190 - PWM Comparison 6 Value Register
        volatile uint32_t CMPVUPD6;  ///< Offset: 0x194 - PWM Comparison 6 Value Update Register
        volatile uint32_t CMPM6;  ///< Offset: 0x198 - PWM Comparison 6 Mode Register
        volatile uint32_t CMPMUPD6;  ///< Offset: 0x19C - PWM Comparison 6 Mode Update Register
        volatile uint32_t CMPV7;  ///< Offset: 0x1A0 - PWM Comparison 7 Value Register
        volatile uint32_t CMPVUPD7;  ///< Offset: 0x1A4 - PWM Comparison 7 Value Update Register
        volatile uint32_t CMPM7;  ///< Offset: 0x1A8 - PWM Comparison 7 Mode Register
        volatile uint32_t CMPMUPD7;  ///< Offset: 0x1AC - PWM Comparison 7 Mode Update Register
        volatile uint32_t CMR0;  ///< Offset: 0x200 - PWM Channel Mode Register (ch_num = 0)
        volatile uint32_t CDTY0;  ///< Offset: 0x204 - PWM Channel Duty Cycle Register (ch_num = 0)
        volatile uint32_t CDTYUPD0;  ///< Offset: 0x208 - PWM Channel Duty Cycle Update Register (ch_num = 0)
        volatile uint32_t CPRD0;  ///< Offset: 0x20C - PWM Channel Period Register (ch_num = 0)
        volatile uint32_t CPRDUPD0;  ///< Offset: 0x210 - PWM Channel Period Update Register (ch_num = 0)
        volatile uint32_t CCNT0;  ///< Offset: 0x214 - PWM Channel Counter Register (ch_num = 0)
        volatile uint32_t DT0;  ///< Offset: 0x218 - PWM Channel Dead Time Register (ch_num = 0)
        volatile uint32_t DTUPD0;  ///< Offset: 0x21C - PWM Channel Dead Time Update Register (ch_num = 0)
        volatile uint32_t CMR1;  ///< Offset: 0x220 - PWM Channel Mode Register (ch_num = 1)
        volatile uint32_t CDTY1;  ///< Offset: 0x224 - PWM Channel Duty Cycle Register (ch_num = 1)
        volatile uint32_t CDTYUPD1;  ///< Offset: 0x228 - PWM Channel Duty Cycle Update Register (ch_num = 1)
        volatile uint32_t CPRD1;  ///< Offset: 0x22C - PWM Channel Period Register (ch_num = 1)
        volatile uint32_t CPRDUPD1;  ///< Offset: 0x230 - PWM Channel Period Update Register (ch_num = 1)
        volatile uint32_t CCNT1;  ///< Offset: 0x234 - PWM Channel Counter Register (ch_num = 1)
        volatile uint32_t DT1;  ///< Offset: 0x238 - PWM Channel Dead Time Register (ch_num = 1)
        volatile uint32_t DTUPD1;  ///< Offset: 0x23C - PWM Channel Dead Time Update Register (ch_num = 1)
        volatile uint32_t CMR2;  ///< Offset: 0x240 - PWM Channel Mode Register (ch_num = 2)
        volatile uint32_t CDTY2;  ///< Offset: 0x244 - PWM Channel Duty Cycle Register (ch_num = 2)
        volatile uint32_t CDTYUPD2;  ///< Offset: 0x248 - PWM Channel Duty Cycle Update Register (ch_num = 2)
        volatile uint32_t CPRD2;  ///< Offset: 0x24C - PWM Channel Period Register (ch_num = 2)
        volatile uint32_t CPRDUPD2;  ///< Offset: 0x250 - PWM Channel Period Update Register (ch_num = 2)
        volatile uint32_t CCNT2;  ///< Offset: 0x254 - PWM Channel Counter Register (ch_num = 2)
        volatile uint32_t DT2;  ///< Offset: 0x258 - PWM Channel Dead Time Register (ch_num = 2)
        volatile uint32_t DTUPD2;  ///< Offset: 0x25C - PWM Channel Dead Time Update Register (ch_num = 2)
        volatile uint32_t CMR3;  ///< Offset: 0x260 - PWM Channel Mode Register (ch_num = 3)
        volatile uint32_t CDTY3;  ///< Offset: 0x264 - PWM Channel Duty Cycle Register (ch_num = 3)
        volatile uint32_t CDTYUPD3;  ///< Offset: 0x268 - PWM Channel Duty Cycle Update Register (ch_num = 3)
        volatile uint32_t CPRD3;  ///< Offset: 0x26C - PWM Channel Period Register (ch_num = 3)
        volatile uint32_t CPRDUPD3;  ///< Offset: 0x270 - PWM Channel Period Update Register (ch_num = 3)
        volatile uint32_t CCNT3;  ///< Offset: 0x274 - PWM Channel Counter Register (ch_num = 3)
        volatile uint32_t DT3;  ///< Offset: 0x278 - PWM Channel Dead Time Register (ch_num = 3)
        volatile uint32_t DTUPD3;  ///< Offset: 0x27C - PWM Channel Dead Time Update Register (ch_num = 3)
    };

    /// Peripheral instances
    inline Registers* PWM = reinterpret_cast<Registers*>(PWM_BASE);

    // Bit definitions
    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t DIVA = (8 << 0);  ///< CLKA, CLKB Divide Factor
        constexpr uint32_t PREA = (4 << 8);  ///< CLKA, CLKB Source Clock Selection
        constexpr uint32_t DIVB = (8 << 16);  ///< CLKA, CLKB Divide Factor
        constexpr uint32_t PREB = (4 << 24);  ///< CLKA, CLKB Source Clock Selection
    }

    /// ENA Register bits
    namespace ena_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// DIS Register bits
    namespace dis_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Channel ID
        constexpr uint32_t CHID1 = (1U << 1);  ///< Channel ID
        constexpr uint32_t CHID2 = (1U << 2);  ///< Channel ID
        constexpr uint32_t CHID3 = (1U << 3);  ///< Channel ID
    }

    /// IER1 Register bits
    namespace ier1_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Counter Event on Channel 0 Interrupt Enable
        constexpr uint32_t CHID1 = (1U << 1);  ///< Counter Event on Channel 1 Interrupt Enable
        constexpr uint32_t CHID2 = (1U << 2);  ///< Counter Event on Channel 2 Interrupt Enable
        constexpr uint32_t CHID3 = (1U << 3);  ///< Counter Event on Channel 3 Interrupt Enable
        constexpr uint32_t FCHID0 = (1U << 16);  ///< Fault Protection Trigger on Channel 0 Interrupt Enable
        constexpr uint32_t FCHID1 = (1U << 17);  ///< Fault Protection Trigger on Channel 1 Interrupt Enable
        constexpr uint32_t FCHID2 = (1U << 18);  ///< Fault Protection Trigger on Channel 2 Interrupt Enable
        constexpr uint32_t FCHID3 = (1U << 19);  ///< Fault Protection Trigger on Channel 3 Interrupt Enable
    }

    /// IDR1 Register bits
    namespace idr1_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Counter Event on Channel 0 Interrupt Disable
        constexpr uint32_t CHID1 = (1U << 1);  ///< Counter Event on Channel 1 Interrupt Disable
        constexpr uint32_t CHID2 = (1U << 2);  ///< Counter Event on Channel 2 Interrupt Disable
        constexpr uint32_t CHID3 = (1U << 3);  ///< Counter Event on Channel 3 Interrupt Disable
        constexpr uint32_t FCHID0 = (1U << 16);  ///< Fault Protection Trigger on Channel 0 Interrupt Disable
        constexpr uint32_t FCHID1 = (1U << 17);  ///< Fault Protection Trigger on Channel 1 Interrupt Disable
        constexpr uint32_t FCHID2 = (1U << 18);  ///< Fault Protection Trigger on Channel 2 Interrupt Disable
        constexpr uint32_t FCHID3 = (1U << 19);  ///< Fault Protection Trigger on Channel 3 Interrupt Disable
    }

    /// IMR1 Register bits
    namespace imr1_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Counter Event on Channel 0 Interrupt Mask
        constexpr uint32_t CHID1 = (1U << 1);  ///< Counter Event on Channel 1 Interrupt Mask
        constexpr uint32_t CHID2 = (1U << 2);  ///< Counter Event on Channel 2 Interrupt Mask
        constexpr uint32_t CHID3 = (1U << 3);  ///< Counter Event on Channel 3 Interrupt Mask
        constexpr uint32_t FCHID0 = (1U << 16);  ///< Fault Protection Trigger on Channel 0 Interrupt Mask
        constexpr uint32_t FCHID1 = (1U << 17);  ///< Fault Protection Trigger on Channel 1 Interrupt Mask
        constexpr uint32_t FCHID2 = (1U << 18);  ///< Fault Protection Trigger on Channel 2 Interrupt Mask
        constexpr uint32_t FCHID3 = (1U << 19);  ///< Fault Protection Trigger on Channel 3 Interrupt Mask
    }

    /// ISR1 Register bits
    namespace isr1_bits {
        constexpr uint32_t CHID0 = (1U << 0);  ///< Counter Event on Channel 0
        constexpr uint32_t CHID1 = (1U << 1);  ///< Counter Event on Channel 1
        constexpr uint32_t CHID2 = (1U << 2);  ///< Counter Event on Channel 2
        constexpr uint32_t CHID3 = (1U << 3);  ///< Counter Event on Channel 3
        constexpr uint32_t FCHID0 = (1U << 16);  ///< Fault Protection Trigger on Channel 0
        constexpr uint32_t FCHID1 = (1U << 17);  ///< Fault Protection Trigger on Channel 1
        constexpr uint32_t FCHID2 = (1U << 18);  ///< Fault Protection Trigger on Channel 2
        constexpr uint32_t FCHID3 = (1U << 19);  ///< Fault Protection Trigger on Channel 3
    }

    /// SCM Register bits
    namespace scm_bits {
        constexpr uint32_t SYNC0 = (1U << 0);  ///< Synchronous Channel 0
        constexpr uint32_t SYNC1 = (1U << 1);  ///< Synchronous Channel 1
        constexpr uint32_t SYNC2 = (1U << 2);  ///< Synchronous Channel 2
        constexpr uint32_t SYNC3 = (1U << 3);  ///< Synchronous Channel 3
        constexpr uint32_t UPDM = (2 << 16);  ///< Synchronous Channels Update Mode
    }

    /// SCUC Register bits
    namespace scuc_bits {
        constexpr uint32_t UPDULOCK = (1U << 0);  ///< Synchronous Channels Update Unlock
    }

    /// SCUP Register bits
    namespace scup_bits {
        constexpr uint32_t UPR = (4 << 0);  ///< Update Period
        constexpr uint32_t UPRCNT = (4 << 4);  ///< Update Period Counter
    }

    /// SCUPUPD Register bits
    namespace scupupd_bits {
        constexpr uint32_t UPRUPD = (4 << 0);  ///< Update Period Update
    }

    /// IER2 Register bits
    namespace ier2_bits {
        constexpr uint32_t WRDY = (1U << 0);  ///< Write Ready for Synchronous Channels Update Interrupt Enable
        constexpr uint32_t UNRE = (1U << 3);  ///< Synchronous Channels Update Underrun Error Interrupt Enable
        constexpr uint32_t CMPM0 = (1U << 8);  ///< Comparison 0 Match Interrupt Enable
        constexpr uint32_t CMPM1 = (1U << 9);  ///< Comparison 1 Match Interrupt Enable
        constexpr uint32_t CMPM2 = (1U << 10);  ///< Comparison 2 Match Interrupt Enable
        constexpr uint32_t CMPM3 = (1U << 11);  ///< Comparison 3 Match Interrupt Enable
        constexpr uint32_t CMPM4 = (1U << 12);  ///< Comparison 4 Match Interrupt Enable
        constexpr uint32_t CMPM5 = (1U << 13);  ///< Comparison 5 Match Interrupt Enable
        constexpr uint32_t CMPM6 = (1U << 14);  ///< Comparison 6 Match Interrupt Enable
        constexpr uint32_t CMPM7 = (1U << 15);  ///< Comparison 7 Match Interrupt Enable
        constexpr uint32_t CMPU0 = (1U << 16);  ///< Comparison 0 Update Interrupt Enable
        constexpr uint32_t CMPU1 = (1U << 17);  ///< Comparison 1 Update Interrupt Enable
        constexpr uint32_t CMPU2 = (1U << 18);  ///< Comparison 2 Update Interrupt Enable
        constexpr uint32_t CMPU3 = (1U << 19);  ///< Comparison 3 Update Interrupt Enable
        constexpr uint32_t CMPU4 = (1U << 20);  ///< Comparison 4 Update Interrupt Enable
        constexpr uint32_t CMPU5 = (1U << 21);  ///< Comparison 5 Update Interrupt Enable
        constexpr uint32_t CMPU6 = (1U << 22);  ///< Comparison 6 Update Interrupt Enable
        constexpr uint32_t CMPU7 = (1U << 23);  ///< Comparison 7 Update Interrupt Enable
    }

    /// IDR2 Register bits
    namespace idr2_bits {
        constexpr uint32_t WRDY = (1U << 0);  ///< Write Ready for Synchronous Channels Update Interrupt Disable
        constexpr uint32_t UNRE = (1U << 3);  ///< Synchronous Channels Update Underrun Error Interrupt Disable
        constexpr uint32_t CMPM0 = (1U << 8);  ///< Comparison 0 Match Interrupt Disable
        constexpr uint32_t CMPM1 = (1U << 9);  ///< Comparison 1 Match Interrupt Disable
        constexpr uint32_t CMPM2 = (1U << 10);  ///< Comparison 2 Match Interrupt Disable
        constexpr uint32_t CMPM3 = (1U << 11);  ///< Comparison 3 Match Interrupt Disable
        constexpr uint32_t CMPM4 = (1U << 12);  ///< Comparison 4 Match Interrupt Disable
        constexpr uint32_t CMPM5 = (1U << 13);  ///< Comparison 5 Match Interrupt Disable
        constexpr uint32_t CMPM6 = (1U << 14);  ///< Comparison 6 Match Interrupt Disable
        constexpr uint32_t CMPM7 = (1U << 15);  ///< Comparison 7 Match Interrupt Disable
        constexpr uint32_t CMPU0 = (1U << 16);  ///< Comparison 0 Update Interrupt Disable
        constexpr uint32_t CMPU1 = (1U << 17);  ///< Comparison 1 Update Interrupt Disable
        constexpr uint32_t CMPU2 = (1U << 18);  ///< Comparison 2 Update Interrupt Disable
        constexpr uint32_t CMPU3 = (1U << 19);  ///< Comparison 3 Update Interrupt Disable
        constexpr uint32_t CMPU4 = (1U << 20);  ///< Comparison 4 Update Interrupt Disable
        constexpr uint32_t CMPU5 = (1U << 21);  ///< Comparison 5 Update Interrupt Disable
        constexpr uint32_t CMPU6 = (1U << 22);  ///< Comparison 6 Update Interrupt Disable
        constexpr uint32_t CMPU7 = (1U << 23);  ///< Comparison 7 Update Interrupt Disable
    }

    /// IMR2 Register bits
    namespace imr2_bits {
        constexpr uint32_t WRDY = (1U << 0);  ///< Write Ready for Synchronous Channels Update Interrupt Mask
        constexpr uint32_t UNRE = (1U << 3);  ///< Synchronous Channels Update Underrun Error Interrupt Mask
        constexpr uint32_t CMPM0 = (1U << 8);  ///< Comparison 0 Match Interrupt Mask
        constexpr uint32_t CMPM1 = (1U << 9);  ///< Comparison 1 Match Interrupt Mask
        constexpr uint32_t CMPM2 = (1U << 10);  ///< Comparison 2 Match Interrupt Mask
        constexpr uint32_t CMPM3 = (1U << 11);  ///< Comparison 3 Match Interrupt Mask
        constexpr uint32_t CMPM4 = (1U << 12);  ///< Comparison 4 Match Interrupt Mask
        constexpr uint32_t CMPM5 = (1U << 13);  ///< Comparison 5 Match Interrupt Mask
        constexpr uint32_t CMPM6 = (1U << 14);  ///< Comparison 6 Match Interrupt Mask
        constexpr uint32_t CMPM7 = (1U << 15);  ///< Comparison 7 Match Interrupt Mask
        constexpr uint32_t CMPU0 = (1U << 16);  ///< Comparison 0 Update Interrupt Mask
        constexpr uint32_t CMPU1 = (1U << 17);  ///< Comparison 1 Update Interrupt Mask
        constexpr uint32_t CMPU2 = (1U << 18);  ///< Comparison 2 Update Interrupt Mask
        constexpr uint32_t CMPU3 = (1U << 19);  ///< Comparison 3 Update Interrupt Mask
        constexpr uint32_t CMPU4 = (1U << 20);  ///< Comparison 4 Update Interrupt Mask
        constexpr uint32_t CMPU5 = (1U << 21);  ///< Comparison 5 Update Interrupt Mask
        constexpr uint32_t CMPU6 = (1U << 22);  ///< Comparison 6 Update Interrupt Mask
        constexpr uint32_t CMPU7 = (1U << 23);  ///< Comparison 7 Update Interrupt Mask
    }

    /// ISR2 Register bits
    namespace isr2_bits {
        constexpr uint32_t WRDY = (1U << 0);  ///< Write Ready for Synchronous Channels Update
        constexpr uint32_t UNRE = (1U << 3);  ///< Synchronous Channels Update Underrun Error
        constexpr uint32_t CMPM0 = (1U << 8);  ///< Comparison 0 Match
        constexpr uint32_t CMPM1 = (1U << 9);  ///< Comparison 1 Match
        constexpr uint32_t CMPM2 = (1U << 10);  ///< Comparison 2 Match
        constexpr uint32_t CMPM3 = (1U << 11);  ///< Comparison 3 Match
        constexpr uint32_t CMPM4 = (1U << 12);  ///< Comparison 4 Match
        constexpr uint32_t CMPM5 = (1U << 13);  ///< Comparison 5 Match
        constexpr uint32_t CMPM6 = (1U << 14);  ///< Comparison 6 Match
        constexpr uint32_t CMPM7 = (1U << 15);  ///< Comparison 7 Match
        constexpr uint32_t CMPU0 = (1U << 16);  ///< Comparison 0 Update
        constexpr uint32_t CMPU1 = (1U << 17);  ///< Comparison 1 Update
        constexpr uint32_t CMPU2 = (1U << 18);  ///< Comparison 2 Update
        constexpr uint32_t CMPU3 = (1U << 19);  ///< Comparison 3 Update
        constexpr uint32_t CMPU4 = (1U << 20);  ///< Comparison 4 Update
        constexpr uint32_t CMPU5 = (1U << 21);  ///< Comparison 5 Update
        constexpr uint32_t CMPU6 = (1U << 22);  ///< Comparison 6 Update
        constexpr uint32_t CMPU7 = (1U << 23);  ///< Comparison 7 Update
    }

    /// OOV Register bits
    namespace oov_bits {
        constexpr uint32_t OOVH0 = (1U << 0);  ///< Output Override Value for PWMH output of the channel 0
        constexpr uint32_t OOVH1 = (1U << 1);  ///< Output Override Value for PWMH output of the channel 1
        constexpr uint32_t OOVH2 = (1U << 2);  ///< Output Override Value for PWMH output of the channel 2
        constexpr uint32_t OOVH3 = (1U << 3);  ///< Output Override Value for PWMH output of the channel 3
        constexpr uint32_t OOVL0 = (1U << 16);  ///< Output Override Value for PWML output of the channel 0
        constexpr uint32_t OOVL1 = (1U << 17);  ///< Output Override Value for PWML output of the channel 1
        constexpr uint32_t OOVL2 = (1U << 18);  ///< Output Override Value for PWML output of the channel 2
        constexpr uint32_t OOVL3 = (1U << 19);  ///< Output Override Value for PWML output of the channel 3
    }

    /// OS Register bits
    namespace os_bits {
        constexpr uint32_t OSH0 = (1U << 0);  ///< Output Selection for PWMH output of the channel 0
        constexpr uint32_t OSH1 = (1U << 1);  ///< Output Selection for PWMH output of the channel 1
        constexpr uint32_t OSH2 = (1U << 2);  ///< Output Selection for PWMH output of the channel 2
        constexpr uint32_t OSH3 = (1U << 3);  ///< Output Selection for PWMH output of the channel 3
        constexpr uint32_t OSL0 = (1U << 16);  ///< Output Selection for PWML output of the channel 0
        constexpr uint32_t OSL1 = (1U << 17);  ///< Output Selection for PWML output of the channel 1
        constexpr uint32_t OSL2 = (1U << 18);  ///< Output Selection for PWML output of the channel 2
        constexpr uint32_t OSL3 = (1U << 19);  ///< Output Selection for PWML output of the channel 3
    }

    /// OSS Register bits
    namespace oss_bits {
        constexpr uint32_t OSSH0 = (1U << 0);  ///< Output Selection Set for PWMH output of the channel 0
        constexpr uint32_t OSSH1 = (1U << 1);  ///< Output Selection Set for PWMH output of the channel 1
        constexpr uint32_t OSSH2 = (1U << 2);  ///< Output Selection Set for PWMH output of the channel 2
        constexpr uint32_t OSSH3 = (1U << 3);  ///< Output Selection Set for PWMH output of the channel 3
        constexpr uint32_t OSSL0 = (1U << 16);  ///< Output Selection Set for PWML output of the channel 0
        constexpr uint32_t OSSL1 = (1U << 17);  ///< Output Selection Set for PWML output of the channel 1
        constexpr uint32_t OSSL2 = (1U << 18);  ///< Output Selection Set for PWML output of the channel 2
        constexpr uint32_t OSSL3 = (1U << 19);  ///< Output Selection Set for PWML output of the channel 3
    }

    /// OSC Register bits
    namespace osc_bits {
        constexpr uint32_t OSCH0 = (1U << 0);  ///< Output Selection Clear for PWMH output of the channel 0
        constexpr uint32_t OSCH1 = (1U << 1);  ///< Output Selection Clear for PWMH output of the channel 1
        constexpr uint32_t OSCH2 = (1U << 2);  ///< Output Selection Clear for PWMH output of the channel 2
        constexpr uint32_t OSCH3 = (1U << 3);  ///< Output Selection Clear for PWMH output of the channel 3
        constexpr uint32_t OSCL0 = (1U << 16);  ///< Output Selection Clear for PWML output of the channel 0
        constexpr uint32_t OSCL1 = (1U << 17);  ///< Output Selection Clear for PWML output of the channel 1
        constexpr uint32_t OSCL2 = (1U << 18);  ///< Output Selection Clear for PWML output of the channel 2
        constexpr uint32_t OSCL3 = (1U << 19);  ///< Output Selection Clear for PWML output of the channel 3
    }

    /// OSSUPD Register bits
    namespace ossupd_bits {
        constexpr uint32_t OSSUPH0 = (1U << 0);  ///< Output Selection Set for PWMH output of the channel 0
        constexpr uint32_t OSSUPH1 = (1U << 1);  ///< Output Selection Set for PWMH output of the channel 1
        constexpr uint32_t OSSUPH2 = (1U << 2);  ///< Output Selection Set for PWMH output of the channel 2
        constexpr uint32_t OSSUPH3 = (1U << 3);  ///< Output Selection Set for PWMH output of the channel 3
        constexpr uint32_t OSSUPL0 = (1U << 16);  ///< Output Selection Set for PWML output of the channel 0
        constexpr uint32_t OSSUPL1 = (1U << 17);  ///< Output Selection Set for PWML output of the channel 1
        constexpr uint32_t OSSUPL2 = (1U << 18);  ///< Output Selection Set for PWML output of the channel 2
        constexpr uint32_t OSSUPL3 = (1U << 19);  ///< Output Selection Set for PWML output of the channel 3
    }

    /// OSCUPD Register bits
    namespace oscupd_bits {
        constexpr uint32_t OSCUPH0 = (1U << 0);  ///< Output Selection Clear for PWMH output of the channel 0
        constexpr uint32_t OSCUPH1 = (1U << 1);  ///< Output Selection Clear for PWMH output of the channel 1
        constexpr uint32_t OSCUPH2 = (1U << 2);  ///< Output Selection Clear for PWMH output of the channel 2
        constexpr uint32_t OSCUPH3 = (1U << 3);  ///< Output Selection Clear for PWMH output of the channel 3
        constexpr uint32_t OSCUPL0 = (1U << 16);  ///< Output Selection Clear for PWML output of the channel 0
        constexpr uint32_t OSCUPL1 = (1U << 17);  ///< Output Selection Clear for PWML output of the channel 1
        constexpr uint32_t OSCUPL2 = (1U << 18);  ///< Output Selection Clear for PWML output of the channel 2
        constexpr uint32_t OSCUPL3 = (1U << 19);  ///< Output Selection Clear for PWML output of the channel 3
    }

    /// FMR Register bits
    namespace fmr_bits {
        constexpr uint32_t FPOL = (8 << 0);  ///< Fault Polarity (fault input bit varies from 0 to )
        constexpr uint32_t FMOD = (8 << 8);  ///< Fault Activation Mode (fault input bit varies from 0 to )
        constexpr uint32_t FFIL = (8 << 16);  ///< Fault Filtering (fault input bit varies from 0 to )
    }

    /// FSR Register bits
    namespace fsr_bits {
        constexpr uint32_t FIV = (8 << 0);  ///< Fault Input Value (fault input bit varies from 0 to )
        constexpr uint32_t FS = (8 << 8);  ///< Fault Status (fault input bit varies from 0 to )
    }

    /// FCR Register bits
    namespace fcr_bits {
        constexpr uint32_t FCLR = (8 << 0);  ///< Fault Clear (fault input bit varies from 0 to )
    }

    /// FPV Register bits
    namespace fpv_bits {
        constexpr uint32_t FPVH0 = (1U << 0);  ///< Fault Protection Value for PWMH output on channel 0
        constexpr uint32_t FPVH1 = (1U << 1);  ///< Fault Protection Value for PWMH output on channel 1
        constexpr uint32_t FPVH2 = (1U << 2);  ///< Fault Protection Value for PWMH output on channel 2
        constexpr uint32_t FPVH3 = (1U << 3);  ///< Fault Protection Value for PWMH output on channel 3
        constexpr uint32_t FPVL0 = (1U << 16);  ///< Fault Protection Value for PWML output on channel 0
        constexpr uint32_t FPVL1 = (1U << 17);  ///< Fault Protection Value for PWML output on channel 1
        constexpr uint32_t FPVL2 = (1U << 18);  ///< Fault Protection Value for PWML output on channel 2
        constexpr uint32_t FPVL3 = (1U << 19);  ///< Fault Protection Value for PWML output on channel 3
    }

    /// FPE Register bits
    namespace fpe_bits {
        constexpr uint32_t FPE0 = (8 << 0);  ///< Fault Protection Enable for channel 0 (fault input bit varies from 0 to )
        constexpr uint32_t FPE1 = (8 << 8);  ///< Fault Protection Enable for channel 1 (fault input bit varies from 0 to )
        constexpr uint32_t FPE2 = (8 << 16);  ///< Fault Protection Enable for channel 2 (fault input bit varies from 0 to )
        constexpr uint32_t FPE3 = (8 << 24);  ///< Fault Protection Enable for channel 3 (fault input bit varies from 0 to )
    }

    /// ELMR__ Register bits
    namespace elmr___bits {
        constexpr uint32_t CSEL0 = (1U << 0);  ///< Comparison 0 Selection
        constexpr uint32_t CSEL1 = (1U << 1);  ///< Comparison 1 Selection
        constexpr uint32_t CSEL2 = (1U << 2);  ///< Comparison 2 Selection
        constexpr uint32_t CSEL3 = (1U << 3);  ///< Comparison 3 Selection
        constexpr uint32_t CSEL4 = (1U << 4);  ///< Comparison 4 Selection
        constexpr uint32_t CSEL5 = (1U << 5);  ///< Comparison 5 Selection
        constexpr uint32_t CSEL6 = (1U << 6);  ///< Comparison 6 Selection
        constexpr uint32_t CSEL7 = (1U << 7);  ///< Comparison 7 Selection
    }

    /// SMMR Register bits
    namespace smmr_bits {
        constexpr uint32_t GCEN0 = (1U << 0);  ///< Gray Count ENable
        constexpr uint32_t GCEN1 = (1U << 1);  ///< Gray Count ENable
        constexpr uint32_t DOWN0 = (1U << 16);  ///< DOWN Count
        constexpr uint32_t DOWN1 = (1U << 17);  ///< DOWN Count
    }

    /// WPCR Register bits
    namespace wpcr_bits {
        constexpr uint32_t WPCMD = (2 << 0);  ///< Write Protect Command
        constexpr uint32_t WPRG0 = (1U << 2);  ///< Write Protect Register Group 0
        constexpr uint32_t WPRG1 = (1U << 3);  ///< Write Protect Register Group 1
        constexpr uint32_t WPRG2 = (1U << 4);  ///< Write Protect Register Group 2
        constexpr uint32_t WPRG3 = (1U << 5);  ///< Write Protect Register Group 3
        constexpr uint32_t WPRG4 = (1U << 6);  ///< Write Protect Register Group 4
        constexpr uint32_t WPRG5 = (1U << 7);  ///< Write Protect Register Group 5
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect Key
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPSWS0 = (1U << 0);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS1 = (1U << 1);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS2 = (1U << 2);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS3 = (1U << 3);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS4 = (1U << 4);  ///< Write Protect SW Status
        constexpr uint32_t WPSWS5 = (1U << 5);  ///< Write Protect SW Status
        constexpr uint32_t WPVS = (1U << 7);  ///< Write Protect Violation Status
        constexpr uint32_t WPHWS0 = (1U << 8);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS1 = (1U << 9);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS2 = (1U << 10);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS3 = (1U << 11);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS4 = (1U << 12);  ///< Write Protect HW Status
        constexpr uint32_t WPHWS5 = (1U << 13);  ///< Write Protect HW Status
        constexpr uint32_t WPVSRC = (16 << 16);  ///< Write Protect Violation Source
    }

    /// CMPV0 Register bits
    namespace cmpv0_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD0 Register bits
    namespace cmpvupd0_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM0 Register bits
    namespace cmpm0_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD0 Register bits
    namespace cmpmupd0_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV1 Register bits
    namespace cmpv1_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD1 Register bits
    namespace cmpvupd1_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM1 Register bits
    namespace cmpm1_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD1 Register bits
    namespace cmpmupd1_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV2 Register bits
    namespace cmpv2_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD2 Register bits
    namespace cmpvupd2_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM2 Register bits
    namespace cmpm2_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD2 Register bits
    namespace cmpmupd2_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV3 Register bits
    namespace cmpv3_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD3 Register bits
    namespace cmpvupd3_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM3 Register bits
    namespace cmpm3_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD3 Register bits
    namespace cmpmupd3_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV4 Register bits
    namespace cmpv4_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD4 Register bits
    namespace cmpvupd4_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM4 Register bits
    namespace cmpm4_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD4 Register bits
    namespace cmpmupd4_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV5 Register bits
    namespace cmpv5_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD5 Register bits
    namespace cmpvupd5_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM5 Register bits
    namespace cmpm5_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD5 Register bits
    namespace cmpmupd5_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV6 Register bits
    namespace cmpv6_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD6 Register bits
    namespace cmpvupd6_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM6 Register bits
    namespace cmpm6_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD6 Register bits
    namespace cmpmupd6_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMPV7 Register bits
    namespace cmpv7_bits {
        constexpr uint32_t CV = (24 << 0);  ///< Comparison x Value
        constexpr uint32_t CVM = (1U << 24);  ///< Comparison x Value Mode
    }

    /// CMPVUPD7 Register bits
    namespace cmpvupd7_bits {
        constexpr uint32_t CVUPD = (24 << 0);  ///< Comparison x Value Update
        constexpr uint32_t CVMUPD = (1U << 24);  ///< Comparison x Value Mode Update
    }

    /// CMPM7 Register bits
    namespace cmpm7_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Comparison x Enable
        constexpr uint32_t CTR = (4 << 4);  ///< Comparison x Trigger
        constexpr uint32_t CPR = (4 << 8);  ///< Comparison x Period
        constexpr uint32_t CPRCNT = (4 << 12);  ///< Comparison x Period Counter
        constexpr uint32_t CUPR = (4 << 16);  ///< Comparison x Update Period
        constexpr uint32_t CUPRCNT = (4 << 20);  ///< Comparison x Update Period Counter
    }

    /// CMPMUPD7 Register bits
    namespace cmpmupd7_bits {
        constexpr uint32_t CENUPD = (1U << 0);  ///< Comparison x Enable Update
        constexpr uint32_t CTRUPD = (4 << 4);  ///< Comparison x Trigger Update
        constexpr uint32_t CPRUPD = (4 << 8);  ///< Comparison x Period Update
        constexpr uint32_t CUPRUPD = (4 << 16);  ///< Comparison x Update Period Update
    }

    /// CMR0 Register bits
    namespace cmr0_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CES = (1U << 10);  ///< Counter Event Selection
        constexpr uint32_t DTE = (1U << 16);  ///< Dead-Time Generator Enable
        constexpr uint32_t DTHI = (1U << 17);  ///< Dead-Time PWMHx Output Inverted
        constexpr uint32_t DTLI = (1U << 18);  ///< Dead-Time PWMLx Output Inverted
    }

    /// CDTY0 Register bits
    namespace cdty0_bits {
        constexpr uint32_t CDTY = (24 << 0);  ///< Channel Duty-Cycle
    }

    /// CDTYUPD0 Register bits
    namespace cdtyupd0_bits {
        constexpr uint32_t CDTYUPD = (24 << 0);  ///< Channel Duty-Cycle Update
    }

    /// CPRD0 Register bits
    namespace cprd0_bits {
        constexpr uint32_t CPRD = (24 << 0);  ///< Channel Period
    }

    /// CPRDUPD0 Register bits
    namespace cprdupd0_bits {
        constexpr uint32_t CPRDUPD = (24 << 0);  ///< Channel Period Update
    }

    /// CCNT0 Register bits
    namespace ccnt0_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< Channel Counter Register
    }

    /// DT0 Register bits
    namespace dt0_bits {
        constexpr uint32_t DTH = (16 << 0);  ///< Dead-Time Value for PWMHx Output
        constexpr uint32_t DTL = (16 << 16);  ///< Dead-Time Value for PWMLx Output
    }

    /// DTUPD0 Register bits
    namespace dtupd0_bits {
        constexpr uint32_t DTHUPD = (16 << 0);  ///< Dead-Time Value Update for PWMHx Output
        constexpr uint32_t DTLUPD = (16 << 16);  ///< Dead-Time Value Update for PWMLx Output
    }

    /// CMR1 Register bits
    namespace cmr1_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CES = (1U << 10);  ///< Counter Event Selection
        constexpr uint32_t DTE = (1U << 16);  ///< Dead-Time Generator Enable
        constexpr uint32_t DTHI = (1U << 17);  ///< Dead-Time PWMHx Output Inverted
        constexpr uint32_t DTLI = (1U << 18);  ///< Dead-Time PWMLx Output Inverted
    }

    /// CDTY1 Register bits
    namespace cdty1_bits {
        constexpr uint32_t CDTY = (24 << 0);  ///< Channel Duty-Cycle
    }

    /// CDTYUPD1 Register bits
    namespace cdtyupd1_bits {
        constexpr uint32_t CDTYUPD = (24 << 0);  ///< Channel Duty-Cycle Update
    }

    /// CPRD1 Register bits
    namespace cprd1_bits {
        constexpr uint32_t CPRD = (24 << 0);  ///< Channel Period
    }

    /// CPRDUPD1 Register bits
    namespace cprdupd1_bits {
        constexpr uint32_t CPRDUPD = (24 << 0);  ///< Channel Period Update
    }

    /// CCNT1 Register bits
    namespace ccnt1_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< Channel Counter Register
    }

    /// DT1 Register bits
    namespace dt1_bits {
        constexpr uint32_t DTH = (16 << 0);  ///< Dead-Time Value for PWMHx Output
        constexpr uint32_t DTL = (16 << 16);  ///< Dead-Time Value for PWMLx Output
    }

    /// DTUPD1 Register bits
    namespace dtupd1_bits {
        constexpr uint32_t DTHUPD = (16 << 0);  ///< Dead-Time Value Update for PWMHx Output
        constexpr uint32_t DTLUPD = (16 << 16);  ///< Dead-Time Value Update for PWMLx Output
    }

    /// CMR2 Register bits
    namespace cmr2_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CES = (1U << 10);  ///< Counter Event Selection
        constexpr uint32_t DTE = (1U << 16);  ///< Dead-Time Generator Enable
        constexpr uint32_t DTHI = (1U << 17);  ///< Dead-Time PWMHx Output Inverted
        constexpr uint32_t DTLI = (1U << 18);  ///< Dead-Time PWMLx Output Inverted
    }

    /// CDTY2 Register bits
    namespace cdty2_bits {
        constexpr uint32_t CDTY = (24 << 0);  ///< Channel Duty-Cycle
    }

    /// CDTYUPD2 Register bits
    namespace cdtyupd2_bits {
        constexpr uint32_t CDTYUPD = (24 << 0);  ///< Channel Duty-Cycle Update
    }

    /// CPRD2 Register bits
    namespace cprd2_bits {
        constexpr uint32_t CPRD = (24 << 0);  ///< Channel Period
    }

    /// CPRDUPD2 Register bits
    namespace cprdupd2_bits {
        constexpr uint32_t CPRDUPD = (24 << 0);  ///< Channel Period Update
    }

    /// CCNT2 Register bits
    namespace ccnt2_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< Channel Counter Register
    }

    /// DT2 Register bits
    namespace dt2_bits {
        constexpr uint32_t DTH = (16 << 0);  ///< Dead-Time Value for PWMHx Output
        constexpr uint32_t DTL = (16 << 16);  ///< Dead-Time Value for PWMLx Output
    }

    /// DTUPD2 Register bits
    namespace dtupd2_bits {
        constexpr uint32_t DTHUPD = (16 << 0);  ///< Dead-Time Value Update for PWMHx Output
        constexpr uint32_t DTLUPD = (16 << 16);  ///< Dead-Time Value Update for PWMLx Output
    }

    /// CMR3 Register bits
    namespace cmr3_bits {
        constexpr uint32_t CPRE = (4 << 0);  ///< Channel Pre-scaler
        constexpr uint32_t CALG = (1U << 8);  ///< Channel Alignment
        constexpr uint32_t CPOL = (1U << 9);  ///< Channel Polarity
        constexpr uint32_t CES = (1U << 10);  ///< Counter Event Selection
        constexpr uint32_t DTE = (1U << 16);  ///< Dead-Time Generator Enable
        constexpr uint32_t DTHI = (1U << 17);  ///< Dead-Time PWMHx Output Inverted
        constexpr uint32_t DTLI = (1U << 18);  ///< Dead-Time PWMLx Output Inverted
    }

    /// CDTY3 Register bits
    namespace cdty3_bits {
        constexpr uint32_t CDTY = (24 << 0);  ///< Channel Duty-Cycle
    }

    /// CDTYUPD3 Register bits
    namespace cdtyupd3_bits {
        constexpr uint32_t CDTYUPD = (24 << 0);  ///< Channel Duty-Cycle Update
    }

    /// CPRD3 Register bits
    namespace cprd3_bits {
        constexpr uint32_t CPRD = (24 << 0);  ///< Channel Period
    }

    /// CPRDUPD3 Register bits
    namespace cprdupd3_bits {
        constexpr uint32_t CPRDUPD = (24 << 0);  ///< Channel Period Update
    }

    /// CCNT3 Register bits
    namespace ccnt3_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< Channel Counter Register
    }

    /// DT3 Register bits
    namespace dt3_bits {
        constexpr uint32_t DTH = (16 << 0);  ///< Dead-Time Value for PWMHx Output
        constexpr uint32_t DTL = (16 << 16);  ///< Dead-Time Value for PWMLx Output
    }

    /// DTUPD3 Register bits
    namespace dtupd3_bits {
        constexpr uint32_t DTHUPD = (16 << 0);  ///< Dead-Time Value Update for PWMHx Output
        constexpr uint32_t DTLUPD = (16 << 16);  ///< Dead-Time Value Update for PWMLx Output
    }

}

// ============================================================================
// ISI Peripheral
// ============================================================================

namespace isi {
    /// Base addresses
    constexpr uint32_t ISI_BASE = 0xF0034000;

    /// ISI Register structure
    struct Registers {
        volatile uint32_t CFG1;  ///< Offset: 0x00 - ISI Configuration 1 Register
        volatile uint32_t CFG2;  ///< Offset: 0x04 - ISI Configuration 2 Register
        volatile uint32_t PSIZE;  ///< Offset: 0x08 - ISI Preview Size Register
        volatile uint32_t PDECF;  ///< Offset: 0x0C - ISI Preview Decimation Factor Register
        volatile uint32_t Y2R_SET0;  ///< Offset: 0x10 - ISI CSC YCrCb To RGB Set 0 Register
        volatile uint32_t Y2R_SET1;  ///< Offset: 0x14 - ISI CSC YCrCb To RGB Set 1 Register
        volatile uint32_t R2Y_SET0;  ///< Offset: 0x18 - ISI CSC RGB To YCrCb Set 0 Register
        volatile uint32_t R2Y_SET1;  ///< Offset: 0x1C - ISI CSC RGB To YCrCb Set 1 Register
        volatile uint32_t R2Y_SET2;  ///< Offset: 0x20 - ISI CSC RGB To YCrCb Set 2 Register
        volatile uint32_t CR;  ///< Offset: 0x24 - ISI Control Register
        volatile uint32_t SR;  ///< Offset: 0x28 - ISI Status Register
        volatile uint32_t IER;  ///< Offset: 0x2C - ISI Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x30 - ISI Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x34 - ISI Interrupt Mask Register
        volatile uint32_t DMA_CHER;  ///< Offset: 0x38 - DMA Channel Enable Register
        volatile uint32_t DMA_CHDR;  ///< Offset: 0x3C - DMA Channel Disable Register
        volatile uint32_t DMA_CHSR;  ///< Offset: 0x40 - DMA Channel Status Register
        volatile uint32_t DMA_P_ADDR;  ///< Offset: 0x44 - DMA Preview Base Address Register
        volatile uint32_t DMA_P_CTRL;  ///< Offset: 0x48 - DMA Preview Control Register
        volatile uint32_t DMA_P_DSCR;  ///< Offset: 0x4C - DMA Preview Descriptor Address Register
        volatile uint32_t DMA_C_ADDR;  ///< Offset: 0x50 - DMA Codec Base Address Register
        volatile uint32_t DMA_C_CTRL;  ///< Offset: 0x54 - DMA Codec Control Register
        volatile uint32_t DMA_C_DSCR;  ///< Offset: 0x58 - DMA Codec Descriptor Address Register
        volatile uint32_t WPCR;  ///< Offset: 0xE4 - Write Protection Control Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
    };

    /// Peripheral instances
    inline Registers* ISI = reinterpret_cast<Registers*>(ISI_BASE);

    // Bit definitions
    /// CFG1 Register bits
    namespace cfg1_bits {
        constexpr uint32_t HSYNC_POL = (1U << 2);  ///< Horizontal Synchronization Polarity
        constexpr uint32_t VSYNC_POL = (1U << 3);  ///< Vertical Synchronization Polarity
        constexpr uint32_t PIXCLK_POL = (1U << 4);  ///< Pixel Clock Polarity
        constexpr uint32_t EMB_SYNC = (1U << 6);  ///< Embedded Synchronization
        constexpr uint32_t CRC_SYNC = (1U << 7);  ///< Embedded Synchronization Correction
        constexpr uint32_t FRATE = (3 << 8);  ///< Frame Rate [0..7]
        constexpr uint32_t DISCR = (1U << 11);  ///< Disable Codec Request
        constexpr uint32_t FULL = (1U << 12);  ///< Full Mode is Allowed
        constexpr uint32_t THMASK = (2 << 13);  ///< Threshold Mask
        constexpr uint32_t SLD = (8 << 16);  ///< Start of Line Delay
        constexpr uint32_t SFD = (8 << 24);  ///< Start of Frame Delay
    }

    /// CFG2 Register bits
    namespace cfg2_bits {
        constexpr uint32_t IM_VSIZE = (11 << 0);  ///< Vertical Size of the Image Sensor [0..2047]:
        constexpr uint32_t GS_MODE = (1U << 11);  ///< GS_MODE
        constexpr uint32_t RGB_MODE = (1U << 12);  ///< RGB Input Mode:
        constexpr uint32_t GRAYSCALE = (1U << 13);  ///< GRAYSCALE
        constexpr uint32_t RGB_SWAP = (1U << 14);  ///< RGB_SWAP
        constexpr uint32_t COL_SPACE = (1U << 15);  ///< Color Space for the Image Data
        constexpr uint32_t IM_HSIZE = (11 << 16);  ///< Horizontal Size of the Image Sensor [0..2047]
        constexpr uint32_t YCC_SWAP = (2 << 28);  ///< Defines the YCC Image Data
        constexpr uint32_t RGB_CFG = (2 << 30);  ///< Defines RGB Pattern when RGB_MODE is set to 1
    }

    /// PSIZE Register bits
    namespace psize_bits {
        constexpr uint32_t PREV_VSIZE = (10 << 0);  ///< Vertical Size for the Preview Path
        constexpr uint32_t PREV_HSIZE = (10 << 16);  ///< Horizontal Size for the Preview Path
    }

    /// PDECF Register bits
    namespace pdecf_bits {
        constexpr uint32_t DEC_FACTOR = (8 << 0);  ///< Decimation Factor
    }

    /// Y2R_SET0 Register bits
    namespace y2r_set0_bits {
        constexpr uint32_t C0 = (8 << 0);  ///< Color Space Conversion Matrix Coefficient C0
        constexpr uint32_t C1 = (8 << 8);  ///< Color Space Conversion Matrix Coefficient C1
        constexpr uint32_t C2 = (8 << 16);  ///< Color Space Conversion Matrix Coefficient C2
        constexpr uint32_t C3 = (8 << 24);  ///< Color Space Conversion Matrix Coefficient C3
    }

    /// Y2R_SET1 Register bits
    namespace y2r_set1_bits {
        constexpr uint32_t C4 = (9 << 0);  ///< Color Space Conversion Matrix Coefficient C4
        constexpr uint32_t Yoff = (1U << 12);  ///< Color Space Conversion Luminance Default Offset
        constexpr uint32_t Croff = (1U << 13);  ///< Color Space Conversion Red Chrominance Default Offset
        constexpr uint32_t Cboff = (1U << 14);  ///< Color Space Conversion Blue Chrominance Default Offset
    }

    /// R2Y_SET0 Register bits
    namespace r2y_set0_bits {
        constexpr uint32_t C0 = (7 << 0);  ///< Color Space Conversion Matrix Coefficient C0
        constexpr uint32_t C1 = (7 << 8);  ///< Color Space Conversion Matrix Coefficient C1
        constexpr uint32_t C2 = (7 << 16);  ///< Color Space Conversion Matrix Coefficient C2
        constexpr uint32_t Roff = (1U << 24);  ///< Color Space Conversion Red Component Offset
    }

    /// R2Y_SET1 Register bits
    namespace r2y_set1_bits {
        constexpr uint32_t C3 = (7 << 0);  ///< Color Space Conversion Matrix Coefficient C3
        constexpr uint32_t C4 = (7 << 8);  ///< Color Space Conversion Matrix Coefficient C4
        constexpr uint32_t C5 = (7 << 16);  ///< Color Space Conversion Matrix Coefficient C5
        constexpr uint32_t Goff = (1U << 24);  ///< Color Space Conversion Green Component Offset
    }

    /// R2Y_SET2 Register bits
    namespace r2y_set2_bits {
        constexpr uint32_t C6 = (7 << 0);  ///< Color Space Conversion Matrix Coefficient C6
        constexpr uint32_t C7 = (7 << 8);  ///< Color Space Conversion Matrix Coefficient C7
        constexpr uint32_t C8 = (7 << 16);  ///< Color Space Conversion Matrix Coefficient C8
        constexpr uint32_t Boff = (1U << 24);  ///< Color Space Conversion Blue Component Offset
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t ISI_EN = (1U << 0);  ///< ISI Module Enable Request
        constexpr uint32_t ISI_DIS = (1U << 1);  ///< ISI Module Disable Request
        constexpr uint32_t ISI_SRST = (1U << 2);  ///< ISI Software Reset Request
        constexpr uint32_t ISI_CDC = (1U << 8);  ///< ISI Codec Request
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< ENABLE
        constexpr uint32_t DIS_DONE = (1U << 1);  ///< Module Disable Request has Terminated
        constexpr uint32_t SRST = (1U << 2);  ///< Module Software Reset Request has Terminated
        constexpr uint32_t CDC_PND = (1U << 8);  ///< Pending Codec Request (this bit is a status bit)
        constexpr uint32_t VSYNC = (1U << 10);  ///< Vertical Synchronization
        constexpr uint32_t PXFR_DONE = (1U << 16);  ///< Preview DMA Transfer has Terminated.
        constexpr uint32_t CXFR_DONE = (1U << 17);  ///< Codec DMA Transfer has Terminated.
        constexpr uint32_t SIP = (1U << 19);  ///< Synchronization in Progress (this is a status bit)
        constexpr uint32_t P_OVR = (1U << 24);  ///< Preview Datapath Overflow
        constexpr uint32_t C_OVR = (1U << 25);  ///< Codec Datapath Overflow
        constexpr uint32_t CRC_ERR = (1U << 26);  ///< CRC Synchronization Error
        constexpr uint32_t FR_OVR = (1U << 27);  ///< Frame Rate Overrun
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t DIS_DONE = (1U << 1);  ///< Disable Done Interrupt Enable
        constexpr uint32_t SRST = (1U << 2);  ///< Software Reset Interrupt Enable
        constexpr uint32_t VSYNC = (1U << 10);  ///< Vertical Synchronization Interrupt Enable
        constexpr uint32_t PXFR_DONE = (1U << 16);  ///< Preview DMA Transfer Done Interrupt Enable
        constexpr uint32_t CXFR_DONE = (1U << 17);  ///< Codec DMA Transfer Done Interrupt Enable
        constexpr uint32_t P_OVR = (1U << 24);  ///< Preview Datapath Overflow Interrupt Enable
        constexpr uint32_t C_OVR = (1U << 25);  ///< Codec Datapath Overflow Interrupt Enable
        constexpr uint32_t CRC_ERR = (1U << 26);  ///< Embedded Synchronization CRC Error Interrupt Enable
        constexpr uint32_t FR_OVR = (1U << 27);  ///< Frame Rate Overflow Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t DIS_DONE = (1U << 1);  ///< Disable Done Interrupt Disable
        constexpr uint32_t SRST = (1U << 2);  ///< Software Reset Interrupt Disable
        constexpr uint32_t VSYNC = (1U << 10);  ///< Vertical Synchronization Interrupt Disable
        constexpr uint32_t PXFR_DONE = (1U << 16);  ///< Preview DMA Transfer Done Interrupt Disable
        constexpr uint32_t CXFR_DONE = (1U << 17);  ///< Codec DMA Transfer Done Interrupt Disable
        constexpr uint32_t P_OVR = (1U << 24);  ///< Preview Datapath Overflow Interrupt Disable
        constexpr uint32_t C_OVR = (1U << 25);  ///< Codec Datapath Overflow Interrupt Disable
        constexpr uint32_t CRC_ERR = (1U << 26);  ///< Embedded Synchronization CRC Error Interrupt Disable
        constexpr uint32_t FR_OVR = (1U << 27);  ///< Frame Rate Overflow Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t DIS_DONE = (1U << 1);  ///< Module Disable Operation Completed
        constexpr uint32_t SRST = (1U << 2);  ///< Software Reset Completed
        constexpr uint32_t VSYNC = (1U << 10);  ///< Vertical Synchronization
        constexpr uint32_t PXFR_DONE = (1U << 16);  ///< Preview DMA Transfer Interrupt
        constexpr uint32_t CXFR_DONE = (1U << 17);  ///< Codec DMA Transfer Interrupt
        constexpr uint32_t P_OVR = (1U << 24);  ///< FIFO Preview Overflow
        constexpr uint32_t C_OVR = (1U << 25);  ///< FIFO Codec Overflow
        constexpr uint32_t CRC_ERR = (1U << 26);  ///< CRC Synchronization Error
        constexpr uint32_t FR_OVR = (1U << 27);  ///< Frame Rate Overrun
    }

    /// DMA_CHER Register bits
    namespace dma_cher_bits {
        constexpr uint32_t P_CH_EN = (1U << 0);  ///< Preview Channel Enable
        constexpr uint32_t C_CH_EN = (1U << 1);  ///< Codec Channel Enable
    }

    /// DMA_CHDR Register bits
    namespace dma_chdr_bits {
        constexpr uint32_t P_CH_DIS = (1U << 0);  ///< P_CH_DIS
        constexpr uint32_t C_CH_DIS = (1U << 1);  ///< C_CH_DIS
    }

    /// DMA_CHSR Register bits
    namespace dma_chsr_bits {
        constexpr uint32_t P_CH_S = (1U << 0);  ///< P_CH_S
        constexpr uint32_t C_CH_S = (1U << 1);  ///< C_CH_S
    }

    /// DMA_P_ADDR Register bits
    namespace dma_p_addr_bits {
        constexpr uint32_t P_ADDR = (30 << 2);  ///< Preview Image Base Address. (This address is word aligned.)
    }

    /// DMA_P_CTRL Register bits
    namespace dma_p_ctrl_bits {
        constexpr uint32_t P_FETCH = (1U << 0);  ///< Descriptor Fetch Control Field
        constexpr uint32_t P_WB = (1U << 1);  ///< Descriptor Writeback Control Field
        constexpr uint32_t P_IEN = (1U << 2);  ///< Transfer Done Flag Control
        constexpr uint32_t P_DONE = (1U << 3);  ///< (This field is only updated in the memory.)
    }

    /// DMA_P_DSCR Register bits
    namespace dma_p_dscr_bits {
        constexpr uint32_t P_DSCR = (30 << 2);  ///< Preview Descriptor Base Address (This address is word aligned.)
    }

    /// DMA_C_ADDR Register bits
    namespace dma_c_addr_bits {
        constexpr uint32_t C_ADDR = (30 << 2);  ///< Codec Image Base Address (This address is word aligned.)
    }

    /// DMA_C_CTRL Register bits
    namespace dma_c_ctrl_bits {
        constexpr uint32_t C_FETCH = (1U << 0);  ///< Descriptor Fetch Control Field
        constexpr uint32_t C_WB = (1U << 1);  ///< Descriptor Writeback Control Field
        constexpr uint32_t C_IEN = (1U << 2);  ///< Transfer Done flag control
        constexpr uint32_t C_DONE = (1U << 3);  ///< (This field is only updated in the memory.)
    }

    /// DMA_C_DSCR Register bits
    namespace dma_c_dscr_bits {
        constexpr uint32_t C_DSCR = (30 << 2);  ///< Codec Descriptor Base Address (This address is word aligned.)
    }

    /// WPCR Register bits
    namespace wpcr_bits {
        constexpr uint32_t WP_EN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WP_KEY = (24 << 8);  ///< Write Protection KEY Password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WP_VS = (4 << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WP_VSRC = (16 << 8);  ///< Write Protection Violation Source
    }

}

// ============================================================================
// SFR Peripheral
// ============================================================================

namespace sfr {
    /// Base addresses
    constexpr uint32_t SFR_BASE = 0xF0038000;

    /// SFR Register structure
    struct Registers {
        volatile uint32_t OHCIICR;  ///< Offset: 0x10 - OHCI Interrupt Configuration Register
        volatile uint32_t OHCIISR;  ///< Offset: 0x14 - OHCI Interrupt Status Register
        volatile uint32_t AHB;  ///< Offset: 0x20 - AHB Configuration Register
        volatile uint32_t BRIDGE;  ///< Offset: 0x24 - Bridge Configuration Register
        volatile uint32_t SECURE;  ///< Offset: 0x28 - Security Configuration Register
        volatile uint32_t UTMICKTRIM;  ///< Offset: 0x30 - UTMI Clock Trimming Register
        volatile uint32_t UTMIHSTRIM;  ///< Offset: 0x34 - UTMI High Speed Trimming Register
        volatile uint32_t UTMIFSTRIM;  ///< Offset: 0x38 - UTMI Full Speed Trimming Register
        volatile uint32_t UTMISWAP;  ///< Offset: 0x3C - UTMI DP/DM Pin Swapping Register
        volatile uint32_t EBICFG;  ///< Offset: 0x40 - EBI Configuration Register
    };

    /// Peripheral instances
    inline Registers* SFR = reinterpret_cast<Registers*>(SFR_BASE);

    // Bit definitions
    /// OHCIICR Register bits
    namespace ohciicr_bits {
        constexpr uint32_t RES0 = (1U << 0);  ///< USB PORTx RESET
        constexpr uint32_t RES1 = (1U << 1);  ///< USB PORTx RESET
        constexpr uint32_t RES2 = (1U << 2);  ///< USB PORTx RESET
        constexpr uint32_t ARIE = (1U << 4);  ///< OHCI Asynchronous Resume Interrupt Enable
        constexpr uint32_t APPSTART = (1U << 5);  ///< Reserved
        constexpr uint32_t UDPPUDIS = (1U << 23);  ///< OHCI USB DEVICE PULL-UP DISABLE
    }

    /// OHCIISR Register bits
    namespace ohciisr_bits {
        constexpr uint32_t RIS0 = (1U << 0);  ///< OHCI Resume Interrupt Status Port 0
        constexpr uint32_t RIS1 = (1U << 1);  ///< OHCI Resume Interrupt Status Port 1
        constexpr uint32_t RIS2 = (1U << 2);  ///< OHCI Resume Interrupt Status Port 2
    }

    /// AHB Register bits
    namespace ahb_bits {
        constexpr uint32_t PFETCH10 = (1U << 10);  ///< AHB MASTERx 10 Converter Prefetch
        constexpr uint32_t PFETCH11 = (1U << 11);  ///< AHB MASTERx 11 Converter Prefetch
        constexpr uint32_t PFETCH12 = (1U << 12);  ///< AHB MASTERx 12 Converter Prefetch
        constexpr uint32_t PFETCH13 = (1U << 13);  ///< AHB MASTERx 13 Converter Prefetch
        constexpr uint32_t PFETCH14 = (1U << 14);  ///< AHB MASTERx 14 Converter Prefetch
        constexpr uint32_t DLBOPT10 = (1U << 26);  ///< AHB MASTERx 10 Converter Define Length Burst Optimization
        constexpr uint32_t DLBOPT11 = (1U << 27);  ///< AHB MASTERx 11 Converter Define Length Burst Optimization
        constexpr uint32_t DLBOPT12 = (1U << 28);  ///< AHB MASTERx 12 Converter Define Length Burst Optimization
        constexpr uint32_t DLBOPT13 = (1U << 29);  ///< AHB MASTERx 13 Converter Define Length Burst Optimization
        constexpr uint32_t DLBOPT14 = (1U << 30);  ///< AHB MASTERx 14 Converter Define Length Burst Optimization
    }

    /// BRIDGE Register bits
    namespace bridge_bits {
        constexpr uint32_t APBTURBO = (1U << 0);  ///< AHB to APB Bridge mode
        constexpr uint32_t AXI2AHBSEL = (1U << 8);  ///< AXI to AHB bridge for DDR controller selection
    }

    /// SECURE Register bits
    namespace secure_bits {
        constexpr uint32_t ROM = (1U << 0);  ///< Disable Access to ROM Code
        constexpr uint32_t FUSE = (1U << 8);  ///< Disable Access to Fuse Controller
    }

    /// UTMICKTRIM Register bits
    namespace utmicktrim_bits {
        constexpr uint32_t FREQ = (2 << 0);  ///< UTMI Reference Clock Frequency
        constexpr uint32_t VBG = (4 << 16);  ///< UTMI Band Gap Voltage Trimming
    }

    /// UTMIHSTRIM Register bits
    namespace utmihstrim_bits {
        constexpr uint32_t SQUELCH = (3 << 0);  ///< UTMI HS SQUELCH Voltage Trimming
        constexpr uint32_t DISC = (3 << 4);  ///< UTMI Disconnect Voltage Trimming
        constexpr uint32_t SLOPE0 = (3 << 8);  ///< UTMI HS PORTx Transceiver Slope Trimming
        constexpr uint32_t SLOPE1 = (3 << 12);  ///< UTMI HS PORTx Transceiver Slope Trimming
        constexpr uint32_t SLOPE2 = (3 << 16);  ///< UTMI HS PORTx Transceiver Slope Trimming
    }

    /// UTMIFSTRIM Register bits
    namespace utmifstrim_bits {
        constexpr uint32_t RISE = (3 << 0);  ///< FS Transceiver output rising slope trimming
        constexpr uint32_t FALL = (3 << 4);  ///< FS Transceiver output falling slope trimming
        constexpr uint32_t XCVR = (2 << 8);  ///< FS Transceiver crossover voltage trimming
        constexpr uint32_t ZN = (3 << 16);  ///< FS Transceiver NMOS impedance trimming
        constexpr uint32_t ZP = (3 << 20);  ///< FS Transceiver PMOS impedance trimming
    }

    /// UTMISWAP Register bits
    namespace utmiswap_bits {
        constexpr uint32_t PORT0 = (1U << 0);  ///< PORT 0 DP/DM Pin Swapping
        constexpr uint32_t PORT1 = (1U << 1);  ///< PORT 1 DP/DM Pin Swapping
        constexpr uint32_t PORT2 = (1U << 2);  ///< PORT 2 DP/DM Pin Swapping
    }

    /// EBICFG Register bits
    namespace ebicfg_bits {
        constexpr uint32_t DRIVE0 = (2 << 0);  ///< EBI Pins Drive Level
        constexpr uint32_t PULL0 = (2 << 2);  ///< EBI Pins Pull Value
        constexpr uint32_t SCH0 = (1U << 4);  ///< EBI Pins Schmitt Trigger
        constexpr uint32_t DRIVE1 = (2 << 8);  ///< EBI Pins Drive Level
        constexpr uint32_t PULL1 = (2 << 10);  ///< EBI Pins Pull Value
        constexpr uint32_t SCH1 = (1U << 12);  ///< EBI Pins Schmitt Trigger
        constexpr uint32_t BMS = (1U << 16);  ///< BMS Sampled Value (Read Only)
    }

}

// ============================================================================
// HSMCI1 Peripheral
// ============================================================================

namespace hsmci1 {
    /// Base addresses
    constexpr uint32_t HSMCI1_BASE = 0xF8000000;

    /// HSMCI1 Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t DTOR;  ///< Offset: 0x08 - Data Timeout Register
        volatile uint32_t SDCR;  ///< Offset: 0x0C - SD/SDIO Card Register
        volatile uint32_t ARGR;  ///< Offset: 0x10 - Argument Register
        volatile uint32_t CMDR;  ///< Offset: 0x14 - Command Register
        volatile uint32_t BLKR;  ///< Offset: 0x18 - Block Register
        volatile uint32_t CSTOR;  ///< Offset: 0x1C - Completion Signal Timeout Register
        volatile uint32_t RSPR__;  ///< Offset: 0x20 - Response Register (renamed from RSPR__)
        volatile uint32_t RDR;  ///< Offset: 0x30 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x34 - Transmit Data Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t DMA;  ///< Offset: 0x50 - DMA Configuration Register
        volatile uint32_t CFG;  ///< Offset: 0x54 - Configuration Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protection Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
        volatile uint32_t FIFO__;  ///< Offset: 0x200 - FIFO Memory Aperture0 (renamed from FIFO__)
    };

    /// Peripheral instances
    inline Registers* HSMCI1 = reinterpret_cast<Registers*>(HSMCI1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t MCIEN = (1U << 0);  ///< Multi-Media Interface Enable
        constexpr uint32_t MCIDIS = (1U << 1);  ///< Multi-Media Interface Disable
        constexpr uint32_t PWSEN = (1U << 2);  ///< Power Save Mode Enable
        constexpr uint32_t PWSDIS = (1U << 3);  ///< Power Save Mode Disable
        constexpr uint32_t SWRST = (1U << 7);  ///< Software Reset
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t CLKDIV = (8 << 0);  ///< Clock Divider
        constexpr uint32_t PWSDIV = (3 << 8);  ///< Power Saving Divider
        constexpr uint32_t RDPROOF = (1U << 11);  ///< Read Proof Enable
        constexpr uint32_t WRPROOF = (1U << 12);  ///< Write Proof Enable
        constexpr uint32_t FBYTE = (1U << 13);  ///< Force Byte Transfer
        constexpr uint32_t PADV = (1U << 14);  ///< Padding Value
        constexpr uint32_t CLKODD = (1U << 16);  ///< Clock divider is odd
    }

    /// DTOR Register bits
    namespace dtor_bits {
        constexpr uint32_t DTOCYC = (4 << 0);  ///< Data Timeout Cycle Number
        constexpr uint32_t DTOMUL = (3 << 4);  ///< Data Timeout Multiplier
    }

    /// SDCR Register bits
    namespace sdcr_bits {
        constexpr uint32_t SDCSEL = (2 << 0);  ///< SDCard/SDIO Slot
        constexpr uint32_t SDCBUS = (2 << 6);  ///< SDCard/SDIO Bus Width
    }

    /// ARGR Register bits
    namespace argr_bits {
        constexpr uint32_t ARG = (32 << 0);  ///< Command Argument
    }

    /// CMDR Register bits
    namespace cmdr_bits {
        constexpr uint32_t CMDNB = (6 << 0);  ///< Command Number
        constexpr uint32_t RSPTYP = (2 << 6);  ///< Response Type
        constexpr uint32_t SPCMD = (3 << 8);  ///< Special Command
        constexpr uint32_t OPDCMD = (1U << 11);  ///< Open Drain Command
        constexpr uint32_t MAXLAT = (1U << 12);  ///< Max Latency for Command to Response
        constexpr uint32_t TRCMD = (2 << 16);  ///< Transfer Command
        constexpr uint32_t TRDIR = (1U << 18);  ///< Transfer Direction
        constexpr uint32_t TRTYP = (3 << 19);  ///< Transfer Type
        constexpr uint32_t IOSPCMD = (2 << 24);  ///< SDIO Special Command
        constexpr uint32_t ATACS = (1U << 26);  ///< ATA with Command Completion Signal
        constexpr uint32_t BOOT_ACK = (1U << 27);  ///< Boot Operation Acknowledge.
    }

    /// BLKR Register bits
    namespace blkr_bits {
        constexpr uint32_t BCNT = (16 << 0);  ///< MMC/SDIO Block Count - SDIO Byte Count
        constexpr uint32_t BLKLEN = (16 << 16);  ///< Data Block Length
    }

    /// CSTOR Register bits
    namespace cstor_bits {
        constexpr uint32_t CSTOCYC = (4 << 0);  ///< Completion Signal Timeout Cycle Number
        constexpr uint32_t CSTOMUL = (3 << 4);  ///< Completion Signal Timeout Multiplier
    }

    /// RSPR__ Register bits
    namespace rspr___bits {
        constexpr uint32_t RSP = (32 << 0);  ///< Response
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Write
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< HSMCI Not Busy
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status
        constexpr uint32_t CSRCV = (1U << 13);  ///< CE-ATA Completion Signal Received
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer done
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty flag
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done flag
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Enable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Enable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Enable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Enable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Enable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Enable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Enable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Enable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Enable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Enable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Enable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Enable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Enable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Timeout Error Interrupt Enable
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Enable
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer completed Interrupt Enable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt enable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt enable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Enable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Enable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Enable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Disable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Disable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Disable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Disable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Disable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal received interrupt Disable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Disable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Disable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Disable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Disable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Disable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Disable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Disable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time out Error Interrupt Disable
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Disable
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer completed Interrupt Disable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt Disable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Disable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Disable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Disable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Disable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Mask
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Mask
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Mask
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Mask
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Mask
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Mask
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Mask
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Mask
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Mask
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Mask
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Mask
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Mask
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Mask
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error Interrupt Mask
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Mask
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer Completed Interrupt Mask
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO Empty Interrupt Mask
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Mask
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received Interrupt Mask
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error Interrupt Mask
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Mask
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Mask
    }

    /// DMA Register bits
    namespace dma_bits {
        constexpr uint32_t OFFSET = (2 << 0);  ///< DMA Write Buffer Offset
        constexpr uint32_t CHKSIZE = (3 << 4);  ///< DMA Channel Read and Write Chunk Size
        constexpr uint32_t DMAEN = (1U << 8);  ///< DMA Hardware Handshaking Enable
        constexpr uint32_t ROPT = (1U << 12);  ///< Read Optimization with padding
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t FIFOMODE = (1U << 0);  ///< HSMCI Internal FIFO control mode
        constexpr uint32_t FERRCTRL = (1U << 4);  ///< Flow Error flag reset control mode
        constexpr uint32_t HSMODE = (1U << 8);  ///< High Speed Mode
        constexpr uint32_t LSYNC = (1U << 12);  ///< Synchronize on the last block
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WP_EN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WP_KEY = (24 << 8);  ///< Write Protection Key password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WP_VS = (4 << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WP_VSRC = (16 << 8);  ///< Write Protection Violation SouRCe
    }

    /// FIFO__ Register bits
    namespace fifo___bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read or Data to Write
    }

}

// ============================================================================
// HSMCI2 Peripheral
// ============================================================================

namespace hsmci2 {
    /// Base addresses
    constexpr uint32_t HSMCI2_BASE = 0xF8004000;

    /// HSMCI2 Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t DTOR;  ///< Offset: 0x08 - Data Timeout Register
        volatile uint32_t SDCR;  ///< Offset: 0x0C - SD/SDIO Card Register
        volatile uint32_t ARGR;  ///< Offset: 0x10 - Argument Register
        volatile uint32_t CMDR;  ///< Offset: 0x14 - Command Register
        volatile uint32_t BLKR;  ///< Offset: 0x18 - Block Register
        volatile uint32_t CSTOR;  ///< Offset: 0x1C - Completion Signal Timeout Register
        volatile uint32_t RSPR__;  ///< Offset: 0x20 - Response Register (renamed from RSPR__)
        volatile uint32_t RDR;  ///< Offset: 0x30 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x34 - Transmit Data Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t DMA;  ///< Offset: 0x50 - DMA Configuration Register
        volatile uint32_t CFG;  ///< Offset: 0x54 - Configuration Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protection Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protection Status Register
        volatile uint32_t FIFO__;  ///< Offset: 0x200 - FIFO Memory Aperture0 (renamed from FIFO__)
    };

    /// Peripheral instances
    inline Registers* HSMCI2 = reinterpret_cast<Registers*>(HSMCI2_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t MCIEN = (1U << 0);  ///< Multi-Media Interface Enable
        constexpr uint32_t MCIDIS = (1U << 1);  ///< Multi-Media Interface Disable
        constexpr uint32_t PWSEN = (1U << 2);  ///< Power Save Mode Enable
        constexpr uint32_t PWSDIS = (1U << 3);  ///< Power Save Mode Disable
        constexpr uint32_t SWRST = (1U << 7);  ///< Software Reset
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t CLKDIV = (8 << 0);  ///< Clock Divider
        constexpr uint32_t PWSDIV = (3 << 8);  ///< Power Saving Divider
        constexpr uint32_t RDPROOF = (1U << 11);  ///< Read Proof Enable
        constexpr uint32_t WRPROOF = (1U << 12);  ///< Write Proof Enable
        constexpr uint32_t FBYTE = (1U << 13);  ///< Force Byte Transfer
        constexpr uint32_t PADV = (1U << 14);  ///< Padding Value
        constexpr uint32_t CLKODD = (1U << 16);  ///< Clock divider is odd
    }

    /// DTOR Register bits
    namespace dtor_bits {
        constexpr uint32_t DTOCYC = (4 << 0);  ///< Data Timeout Cycle Number
        constexpr uint32_t DTOMUL = (3 << 4);  ///< Data Timeout Multiplier
    }

    /// SDCR Register bits
    namespace sdcr_bits {
        constexpr uint32_t SDCSEL = (2 << 0);  ///< SDCard/SDIO Slot
        constexpr uint32_t SDCBUS = (2 << 6);  ///< SDCard/SDIO Bus Width
    }

    /// ARGR Register bits
    namespace argr_bits {
        constexpr uint32_t ARG = (32 << 0);  ///< Command Argument
    }

    /// CMDR Register bits
    namespace cmdr_bits {
        constexpr uint32_t CMDNB = (6 << 0);  ///< Command Number
        constexpr uint32_t RSPTYP = (2 << 6);  ///< Response Type
        constexpr uint32_t SPCMD = (3 << 8);  ///< Special Command
        constexpr uint32_t OPDCMD = (1U << 11);  ///< Open Drain Command
        constexpr uint32_t MAXLAT = (1U << 12);  ///< Max Latency for Command to Response
        constexpr uint32_t TRCMD = (2 << 16);  ///< Transfer Command
        constexpr uint32_t TRDIR = (1U << 18);  ///< Transfer Direction
        constexpr uint32_t TRTYP = (3 << 19);  ///< Transfer Type
        constexpr uint32_t IOSPCMD = (2 << 24);  ///< SDIO Special Command
        constexpr uint32_t ATACS = (1U << 26);  ///< ATA with Command Completion Signal
        constexpr uint32_t BOOT_ACK = (1U << 27);  ///< Boot Operation Acknowledge.
    }

    /// BLKR Register bits
    namespace blkr_bits {
        constexpr uint32_t BCNT = (16 << 0);  ///< MMC/SDIO Block Count - SDIO Byte Count
        constexpr uint32_t BLKLEN = (16 << 16);  ///< Data Block Length
    }

    /// CSTOR Register bits
    namespace cstor_bits {
        constexpr uint32_t CSTOCYC = (4 << 0);  ///< Completion Signal Timeout Cycle Number
        constexpr uint32_t CSTOMUL = (3 << 4);  ///< Completion Signal Timeout Multiplier
    }

    /// RSPR__ Register bits
    namespace rspr___bits {
        constexpr uint32_t RSP = (32 << 0);  ///< Response
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Write
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< HSMCI Not Busy
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status
        constexpr uint32_t CSRCV = (1U << 13);  ///< CE-ATA Completion Signal Received
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer done
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty flag
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done flag
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Enable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Enable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Enable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Enable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Enable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Enable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Enable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Enable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Enable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Enable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Enable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Enable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Enable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Timeout Error Interrupt Enable
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Enable
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer completed Interrupt Enable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt enable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt enable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Enable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Enable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Enable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Disable
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Disable
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Disable
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Disable
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Disable
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal received interrupt Disable
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Disable
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Disable
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Disable
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Disable
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Disable
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Disable
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Disable
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time out Error Interrupt Disable
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Disable
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer completed Interrupt Disable
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO empty Interrupt Disable
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Disable
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Acknowledge Interrupt Disable
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Acknowledge Error Interrupt Disable
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Disable
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t CMDRDY = (1U << 0);  ///< Command Ready Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 1);  ///< Receiver Ready Interrupt Mask
        constexpr uint32_t TXRDY = (1U << 2);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t BLKE = (1U << 3);  ///< Data Block Ended Interrupt Mask
        constexpr uint32_t DTIP = (1U << 4);  ///< Data Transfer in Progress Interrupt Mask
        constexpr uint32_t NOTBUSY = (1U << 5);  ///< Data Not Busy Interrupt Mask
        constexpr uint32_t SDIOIRQA = (1U << 8);  ///< SDIO Interrupt for Slot A Interrupt Mask
        constexpr uint32_t SDIOWAIT = (1U << 12);  ///< SDIO Read Wait Operation Status Interrupt Mask
        constexpr uint32_t CSRCV = (1U << 13);  ///< Completion Signal Received Interrupt Mask
        constexpr uint32_t RINDE = (1U << 16);  ///< Response Index Error Interrupt Mask
        constexpr uint32_t RDIRE = (1U << 17);  ///< Response Direction Error Interrupt Mask
        constexpr uint32_t RCRCE = (1U << 18);  ///< Response CRC Error Interrupt Mask
        constexpr uint32_t RENDE = (1U << 19);  ///< Response End Bit Error Interrupt Mask
        constexpr uint32_t RTOE = (1U << 20);  ///< Response Time-out Error Interrupt Mask
        constexpr uint32_t DCRCE = (1U << 21);  ///< Data CRC Error Interrupt Mask
        constexpr uint32_t DTOE = (1U << 22);  ///< Data Time-out Error Interrupt Mask
        constexpr uint32_t CSTOE = (1U << 23);  ///< Completion Signal Time-out Error Interrupt Mask
        constexpr uint32_t BLKOVRE = (1U << 24);  ///< DMA Block Overrun Error Interrupt Mask
        constexpr uint32_t DMADONE = (1U << 25);  ///< DMA Transfer Completed Interrupt Mask
        constexpr uint32_t FIFOEMPTY = (1U << 26);  ///< FIFO Empty Interrupt Mask
        constexpr uint32_t XFRDONE = (1U << 27);  ///< Transfer Done Interrupt Mask
        constexpr uint32_t ACKRCV = (1U << 28);  ///< Boot Operation Acknowledge Received Interrupt Mask
        constexpr uint32_t ACKRCVE = (1U << 29);  ///< Boot Operation Acknowledge Error Interrupt Mask
        constexpr uint32_t OVRE = (1U << 30);  ///< Overrun Interrupt Mask
        constexpr uint32_t UNRE = (1U << 31);  ///< Underrun Interrupt Mask
    }

    /// DMA Register bits
    namespace dma_bits {
        constexpr uint32_t OFFSET = (2 << 0);  ///< DMA Write Buffer Offset
        constexpr uint32_t CHKSIZE = (3 << 4);  ///< DMA Channel Read and Write Chunk Size
        constexpr uint32_t DMAEN = (1U << 8);  ///< DMA Hardware Handshaking Enable
        constexpr uint32_t ROPT = (1U << 12);  ///< Read Optimization with padding
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t FIFOMODE = (1U << 0);  ///< HSMCI Internal FIFO control mode
        constexpr uint32_t FERRCTRL = (1U << 4);  ///< Flow Error flag reset control mode
        constexpr uint32_t HSMODE = (1U << 8);  ///< High Speed Mode
        constexpr uint32_t LSYNC = (1U << 12);  ///< Synchronize on the last block
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WP_EN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WP_KEY = (24 << 8);  ///< Write Protection Key password
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WP_VS = (4 << 0);  ///< Write Protection Violation Status
        constexpr uint32_t WP_VSRC = (16 << 8);  ///< Write Protection Violation SouRCe
    }

    /// FIFO__ Register bits
    namespace fifo___bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Read or Data to Write
    }

}

// ============================================================================
// SSC1 Peripheral
// ============================================================================

namespace ssc1 {
    /// Base addresses
    constexpr uint32_t SSC1_BASE = 0xF800C000;

    /// SSC1 Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t CMR;  ///< Offset: 0x04 - Clock Mode Register
        volatile uint32_t RCMR;  ///< Offset: 0x10 - Receive Clock Mode Register
        volatile uint32_t RFMR;  ///< Offset: 0x14 - Receive Frame Mode Register
        volatile uint32_t TCMR;  ///< Offset: 0x18 - Transmit Clock Mode Register
        volatile uint32_t TFMR;  ///< Offset: 0x1C - Transmit Frame Mode Register
        volatile uint32_t RHR;  ///< Offset: 0x20 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x24 - Transmit Holding Register
        volatile uint32_t RSHR;  ///< Offset: 0x30 - Receive Sync. Holding Register
        volatile uint32_t TSHR;  ///< Offset: 0x34 - Transmit Sync. Holding Register
        volatile uint32_t RC0R;  ///< Offset: 0x38 - Receive Compare 0 Register
        volatile uint32_t RC1R;  ///< Offset: 0x3C - Receive Compare 1 Register
        volatile uint32_t SR;  ///< Offset: 0x40 - Status Register
        volatile uint32_t IER;  ///< Offset: 0x44 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x48 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x4C - Interrupt Mask Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* SSC1 = reinterpret_cast<Registers*>(SSC1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RXEN = (1U << 0);  ///< Receive Enable
        constexpr uint32_t RXDIS = (1U << 1);  ///< Receive Disable
        constexpr uint32_t TXEN = (1U << 8);  ///< Transmit Enable
        constexpr uint32_t TXDIS = (1U << 9);  ///< Transmit Disable
        constexpr uint32_t SWRST = (1U << 15);  ///< Software Reset
    }

    /// CMR Register bits
    namespace cmr_bits {
        constexpr uint32_t DIV = (12 << 0);  ///< Clock Divider
    }

    /// RCMR Register bits
    namespace rcmr_bits {
        constexpr uint32_t CKS = (2 << 0);  ///< Receive Clock Selection
        constexpr uint32_t CKO = (3 << 2);  ///< Receive Clock Output Mode Selection
        constexpr uint32_t CKI = (1U << 5);  ///< Receive Clock Inversion
        constexpr uint32_t CKG = (2 << 6);  ///< Receive Clock Gating Selection
        constexpr uint32_t START = (4 << 8);  ///< Receive Start Selection
        constexpr uint32_t STOP = (1U << 12);  ///< Receive Stop Selection
        constexpr uint32_t STTDLY = (8 << 16);  ///< Receive Start Delay
        constexpr uint32_t PERIOD = (8 << 24);  ///< Receive Period Divider Selection
    }

    /// RFMR Register bits
    namespace rfmr_bits {
        constexpr uint32_t DATLEN = (5 << 0);  ///< Data Length
        constexpr uint32_t LOOP = (1U << 5);  ///< Loop Mode
        constexpr uint32_t MSBF = (1U << 7);  ///< Most Significant Bit First
        constexpr uint32_t DATNB = (4 << 8);  ///< Data Number per Frame
        constexpr uint32_t FSLEN = (4 << 16);  ///< Receive Frame Sync Length
        constexpr uint32_t FSOS = (3 << 20);  ///< Receive Frame Sync Output Selection
        constexpr uint32_t FSEDGE = (1U << 24);  ///< Frame Sync Edge Detection
        constexpr uint32_t FSLEN_EXT = (4 << 28);  ///< FSLEN Field Extension
    }

    /// TCMR Register bits
    namespace tcmr_bits {
        constexpr uint32_t CKS = (2 << 0);  ///< Transmit Clock Selection
        constexpr uint32_t CKO = (3 << 2);  ///< Transmit Clock Output Mode Selection
        constexpr uint32_t CKI = (1U << 5);  ///< Transmit Clock Inversion
        constexpr uint32_t CKG = (2 << 6);  ///< Transmit Clock Gating Selection
        constexpr uint32_t START = (4 << 8);  ///< Transmit Start Selection
        constexpr uint32_t STTDLY = (8 << 16);  ///< Transmit Start Delay
        constexpr uint32_t PERIOD = (8 << 24);  ///< Transmit Period Divider Selection
    }

    /// TFMR Register bits
    namespace tfmr_bits {
        constexpr uint32_t DATLEN = (5 << 0);  ///< Data Length
        constexpr uint32_t DATDEF = (1U << 5);  ///< Data Default Value
        constexpr uint32_t MSBF = (1U << 7);  ///< Most Significant Bit First
        constexpr uint32_t DATNB = (4 << 8);  ///< Data Number per frame
        constexpr uint32_t FSLEN = (4 << 16);  ///< Transmit Frame Sync Length
        constexpr uint32_t FSOS = (3 << 20);  ///< Transmit Frame Sync Output Selection
        constexpr uint32_t FSDEN = (1U << 23);  ///< Frame Sync Data Enable
        constexpr uint32_t FSEDGE = (1U << 24);  ///< Frame Sync Edge Detection
        constexpr uint32_t FSLEN_EXT = (4 << 28);  ///< FSLEN Field Extension
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RDAT = (32 << 0);  ///< Receive Data
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TDAT = (32 << 0);  ///< Transmit Data
    }

    /// RSHR Register bits
    namespace rshr_bits {
        constexpr uint32_t RSDAT = (16 << 0);  ///< Receive Synchronization Data
    }

    /// TSHR Register bits
    namespace tshr_bits {
        constexpr uint32_t TSDAT = (16 << 0);  ///< Transmit Synchronization Data
    }

    /// RC0R Register bits
    namespace rc0r_bits {
        constexpr uint32_t CP0 = (16 << 0);  ///< Receive Compare Data 0
    }

    /// RC1R Register bits
    namespace rc1r_bits {
        constexpr uint32_t CP1 = (16 << 0);  ///< Receive Compare Data 1
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1
        constexpr uint32_t TXSYN = (1U << 10);  ///< Transmit Sync
        constexpr uint32_t RXSYN = (1U << 11);  ///< Receive Sync
        constexpr uint32_t TXEN = (1U << 16);  ///< Transmit Enable
        constexpr uint32_t RXEN = (1U << 17);  ///< Receive Enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Enable
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Enable
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Enable
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Enable
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Enable
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Enable
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Enable
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Disable
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Disable
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Disable
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Disable
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Disable
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Disable
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Enable
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Enable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t TXRDY = (1U << 0);  ///< Transmit Ready Interrupt Mask
        constexpr uint32_t TXEMPTY = (1U << 1);  ///< Transmit Empty Interrupt Mask
        constexpr uint32_t RXRDY = (1U << 4);  ///< Receive Ready Interrupt Mask
        constexpr uint32_t OVRUN = (1U << 5);  ///< Receive Overrun Interrupt Mask
        constexpr uint32_t CP0 = (1U << 8);  ///< Compare 0 Interrupt Mask
        constexpr uint32_t CP1 = (1U << 9);  ///< Compare 1 Interrupt Mask
        constexpr uint32_t TXSYN = (1U << 10);  ///< Tx Sync Interrupt Mask
        constexpr uint32_t RXSYN = (1U << 11);  ///< Rx Sync Interrupt Mask
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_BASE = 0xF8018000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t SEQR1;  ///< Offset: 0x08 - Channel Sequence Register 1
        volatile uint32_t SEQR2;  ///< Offset: 0x0C - Channel Sequence Register 2
        volatile uint32_t CHER;  ///< Offset: 0x10 - Channel Enable Register
        volatile uint32_t CHDR;  ///< Offset: 0x14 - Channel Disable Register
        volatile uint32_t CHSR;  ///< Offset: 0x18 - Channel Status Register
        volatile uint32_t LCDR;  ///< Offset: 0x20 - Last Converted Data Register
        volatile uint32_t IER;  ///< Offset: 0x24 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x28 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x2C - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x30 - Interrupt Status Register
        volatile uint32_t OVER;  ///< Offset: 0x3C - Overrun Status Register
        volatile uint32_t EMR;  ///< Offset: 0x40 - Extended Mode Register
        volatile uint32_t CWR;  ///< Offset: 0x44 - Compare Window Register
        volatile uint32_t CGR;  ///< Offset: 0x48 - Channel Gain Register
        volatile uint32_t COR;  ///< Offset: 0x4C - Channel Offset Register
        volatile uint32_t CDR__;  ///< Offset: 0x50 - Channel Data Register (renamed from CDR__)
        volatile uint32_t ACR;  ///< Offset: 0x94 - Analog Control Register
        volatile uint32_t TSMR;  ///< Offset: 0xB0 - Touchscreen Mode Register
        volatile uint32_t XPOSR;  ///< Offset: 0xB4 - Touchscreen X Position Register
        volatile uint32_t YPOSR;  ///< Offset: 0xB8 - Touchscreen Y Position Register
        volatile uint32_t PRESSR;  ///< Offset: 0xBC - Touchscreen Pressure Register
        volatile uint32_t TRGR;  ///< Offset: 0xC0 - Trigger Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* ADC = reinterpret_cast<Registers*>(ADC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SWRST = (1U << 0);  ///< Software Reset
        constexpr uint32_t START = (1U << 1);  ///< Start Conversion
        constexpr uint32_t TSCALIB = (1U << 2);  ///< Touchscreen Calibration
        constexpr uint32_t AUTOCAL = (1U << 3);  ///< Automatic Calibration of ADC
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t TRGSEL = (3 << 1);  ///< Trigger Selection
        constexpr uint32_t SLEEP = (1U << 5);  ///< Sleep Mode
        constexpr uint32_t FWUP = (1U << 6);  ///< Fast Wake Up
        constexpr uint32_t PRESCAL = (8 << 8);  ///< Prescaler Rate Selection
        constexpr uint32_t STARTUP = (4 << 16);  ///< Start Up Time
        constexpr uint32_t SETTLING = (2 << 20);  ///< Analog Settling Time
        constexpr uint32_t ANACH = (1U << 23);  ///< Analog Change
        constexpr uint32_t TRACKTIM = (4 << 24);  ///< Tracking Time
        constexpr uint32_t USEQ = (1U << 31);  ///< Use Sequence Enable
    }

    /// SEQR1 Register bits
    namespace seqr1_bits {
        constexpr uint32_t USCH1 = (4 << 0);  ///< User Sequence Number 1
        constexpr uint32_t USCH2 = (4 << 4);  ///< User Sequence Number 2
        constexpr uint32_t USCH3 = (4 << 8);  ///< User Sequence Number 3
        constexpr uint32_t USCH4 = (4 << 12);  ///< User Sequence Number 4
        constexpr uint32_t USCH5 = (4 << 16);  ///< User Sequence Number 5
        constexpr uint32_t USCH6 = (4 << 20);  ///< User Sequence Number 6
        constexpr uint32_t USCH7 = (4 << 24);  ///< User Sequence Number 7
        constexpr uint32_t USCH8 = (4 << 28);  ///< User Sequence Number 8
    }

    /// SEQR2 Register bits
    namespace seqr2_bits {
        constexpr uint32_t USCH9 = (4 << 0);  ///< User Sequence Number 9
        constexpr uint32_t USCH10 = (4 << 4);  ///< User Sequence Number 10
        constexpr uint32_t USCH11 = (4 << 8);  ///< User Sequence Number 11
    }

    /// CHER Register bits
    namespace cher_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Enable
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Enable
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Enable
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Enable
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Enable
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Enable
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Enable
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Enable
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Enable
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Enable
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Enable
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Enable
    }

    /// CHDR Register bits
    namespace chdr_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Disable
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Disable
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Disable
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Disable
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Disable
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Disable
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Disable
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Disable
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Disable
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Disable
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Disable
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Disable
    }

    /// CHSR Register bits
    namespace chsr_bits {
        constexpr uint32_t CH0 = (1U << 0);  ///< Channel 0 Status
        constexpr uint32_t CH1 = (1U << 1);  ///< Channel 1 Status
        constexpr uint32_t CH2 = (1U << 2);  ///< Channel 2 Status
        constexpr uint32_t CH3 = (1U << 3);  ///< Channel 3 Status
        constexpr uint32_t CH4 = (1U << 4);  ///< Channel 4 Status
        constexpr uint32_t CH5 = (1U << 5);  ///< Channel 5 Status
        constexpr uint32_t CH6 = (1U << 6);  ///< Channel 6 Status
        constexpr uint32_t CH7 = (1U << 7);  ///< Channel 7 Status
        constexpr uint32_t CH8 = (1U << 8);  ///< Channel 8 Status
        constexpr uint32_t CH9 = (1U << 9);  ///< Channel 9 Status
        constexpr uint32_t CH10 = (1U << 10);  ///< Channel 10 Status
        constexpr uint32_t CH11 = (1U << 11);  ///< Channel 11 Status
    }

    /// LCDR Register bits
    namespace lcdr_bits {
        constexpr uint32_t LDATA = (12 << 0);  ///< Last Data Converted
        constexpr uint32_t CHNB = (4 << 12);  ///< Channel Number
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Enable 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Enable 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Enable 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Enable 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Enable 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Enable 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Enable 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Enable 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Enable 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Enable 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Enable 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Enable 11
        constexpr uint32_t XRDY = (1U << 20);  ///< Touchscreen Measure XPOS Ready Interrupt Enable
        constexpr uint32_t YRDY = (1U << 21);  ///< Touchscreen Measure YPOS Ready Interrupt Enable
        constexpr uint32_t PRDY = (1U << 22);  ///< Touchscreen Measure Pressure Ready Interrupt Enable
        constexpr uint32_t EOCAL = (1U << 23);  ///< End of Calibration Sequence
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Enable
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Enable
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Enable
        constexpr uint32_t PEN = (1U << 29);  ///< Pen Contact Interrupt Enable
        constexpr uint32_t NOPEN = (1U << 30);  ///< No Pen Contact Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Disable 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Disable 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Disable 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Disable 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Disable 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Disable 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Disable 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Disable 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Disable 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Disable 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Disable 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Disable 11
        constexpr uint32_t XRDY = (1U << 20);  ///< Touchscreen Measure XPOS Ready Interrupt Disable
        constexpr uint32_t YRDY = (1U << 21);  ///< Touchscreen Measure YPOS Ready Interrupt Disable
        constexpr uint32_t PRDY = (1U << 22);  ///< Touchscreen Measure Pressure Ready Interrupt Disable
        constexpr uint32_t EOCAL = (1U << 23);  ///< End of Calibration Sequence
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Disable
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Disable
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Disable
        constexpr uint32_t PEN = (1U << 29);  ///< Pen Contact Interrupt Disable
        constexpr uint32_t NOPEN = (1U << 30);  ///< No Pen Contact Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion Interrupt Mask 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion Interrupt Mask 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion Interrupt Mask 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion Interrupt Mask 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion Interrupt Mask 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion Interrupt Mask 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion Interrupt Mask 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion Interrupt Mask 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion Interrupt Mask 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion Interrupt Mask 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion Interrupt Mask 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion Interrupt Mask 11
        constexpr uint32_t XRDY = (1U << 20);  ///< Touchscreen Measure XPOS Ready Interrupt Mask
        constexpr uint32_t YRDY = (1U << 21);  ///< Touchscreen Measure YPOS Ready Interrupt Mask
        constexpr uint32_t PRDY = (1U << 22);  ///< Touchscreen Measure Pressure Ready Interrupt Mask
        constexpr uint32_t EOCAL = (1U << 23);  ///< End of Calibration Sequence
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready Interrupt Mask
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error Interrupt Mask
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Event Interrupt Mask
        constexpr uint32_t PEN = (1U << 29);  ///< Pen Contact Interrupt Mask
        constexpr uint32_t NOPEN = (1U << 30);  ///< No Pen Contact Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t EOC0 = (1U << 0);  ///< End of Conversion 0
        constexpr uint32_t EOC1 = (1U << 1);  ///< End of Conversion 1
        constexpr uint32_t EOC2 = (1U << 2);  ///< End of Conversion 2
        constexpr uint32_t EOC3 = (1U << 3);  ///< End of Conversion 3
        constexpr uint32_t EOC4 = (1U << 4);  ///< End of Conversion 4
        constexpr uint32_t EOC5 = (1U << 5);  ///< End of Conversion 5
        constexpr uint32_t EOC6 = (1U << 6);  ///< End of Conversion 6
        constexpr uint32_t EOC7 = (1U << 7);  ///< End of Conversion 7
        constexpr uint32_t EOC8 = (1U << 8);  ///< End of Conversion 8
        constexpr uint32_t EOC9 = (1U << 9);  ///< End of Conversion 9
        constexpr uint32_t EOC10 = (1U << 10);  ///< End of Conversion 10
        constexpr uint32_t EOC11 = (1U << 11);  ///< End of Conversion 11
        constexpr uint32_t XRDY = (1U << 20);  ///< Touchscreen XPOS Measure Ready
        constexpr uint32_t YRDY = (1U << 21);  ///< Touchscreen YPOS Measure Ready
        constexpr uint32_t PRDY = (1U << 22);  ///< Touchscreen Pressure Measure Ready
        constexpr uint32_t EOCAL = (1U << 23);  ///< End of Calibration Sequence
        constexpr uint32_t DRDY = (1U << 24);  ///< Data Ready
        constexpr uint32_t GOVRE = (1U << 25);  ///< General Overrun Error
        constexpr uint32_t COMPE = (1U << 26);  ///< Comparison Error
        constexpr uint32_t PEN = (1U << 29);  ///< Pen contact
        constexpr uint32_t NOPEN = (1U << 30);  ///< No Pen contact
        constexpr uint32_t PENS = (1U << 31);  ///< Pen detect Status
    }

    /// OVER Register bits
    namespace over_bits {
        constexpr uint32_t OVRE0 = (1U << 0);  ///< Overrun Error 0
        constexpr uint32_t OVRE1 = (1U << 1);  ///< Overrun Error 1
        constexpr uint32_t OVRE2 = (1U << 2);  ///< Overrun Error 2
        constexpr uint32_t OVRE3 = (1U << 3);  ///< Overrun Error 3
        constexpr uint32_t OVRE4 = (1U << 4);  ///< Overrun Error 4
        constexpr uint32_t OVRE5 = (1U << 5);  ///< Overrun Error 5
        constexpr uint32_t OVRE6 = (1U << 6);  ///< Overrun Error 6
        constexpr uint32_t OVRE7 = (1U << 7);  ///< Overrun Error 7
        constexpr uint32_t OVRE8 = (1U << 8);  ///< Overrun Error 8
        constexpr uint32_t OVRE9 = (1U << 9);  ///< Overrun Error 9
        constexpr uint32_t OVRE10 = (1U << 10);  ///< Overrun Error 10
        constexpr uint32_t OVRE11 = (1U << 11);  ///< Overrun Error 11
    }

    /// EMR Register bits
    namespace emr_bits {
        constexpr uint32_t CMPMODE = (2 << 0);  ///< Comparison Mode
        constexpr uint32_t CMPSEL = (4 << 4);  ///< Comparison Selected Channel
        constexpr uint32_t CMPALL = (1U << 9);  ///< Compare All Channels
        constexpr uint32_t CMPFILTER = (2 << 12);  ///< Compare Event Filtering
        constexpr uint32_t TAG = (1U << 24);  ///< TAG of the ADC_LDCR register
    }

    /// CWR Register bits
    namespace cwr_bits {
        constexpr uint32_t LOWTHRES = (12 << 0);  ///< Low Threshold
        constexpr uint32_t HIGHTHRES = (12 << 16);  ///< High Threshold
    }

    /// CGR Register bits
    namespace cgr_bits {
        constexpr uint32_t GAIN0 = (2 << 0);  ///< Gain for channel 0
        constexpr uint32_t GAIN1 = (2 << 2);  ///< Gain for channel 1
        constexpr uint32_t GAIN2 = (2 << 4);  ///< Gain for channel 2
        constexpr uint32_t GAIN3 = (2 << 6);  ///< Gain for channel 3
        constexpr uint32_t GAIN4 = (2 << 8);  ///< Gain for channel 4
        constexpr uint32_t GAIN5 = (2 << 10);  ///< Gain for channel 5
        constexpr uint32_t GAIN6 = (2 << 12);  ///< Gain for channel 6
        constexpr uint32_t GAIN7 = (2 << 14);  ///< Gain for channel 7
        constexpr uint32_t GAIN8 = (2 << 16);  ///< Gain for channel 8
        constexpr uint32_t GAIN9 = (2 << 18);  ///< Gain for channel 9
        constexpr uint32_t GAIN10 = (2 << 20);  ///< Gain for channel 10
        constexpr uint32_t GAIN11 = (2 << 22);  ///< Gain for channel 11
    }

    /// COR Register bits
    namespace cor_bits {
        constexpr uint32_t OFF0 = (1U << 0);  ///< Offset for channel 0
        constexpr uint32_t OFF1 = (1U << 1);  ///< Offset for channel 1
        constexpr uint32_t OFF2 = (1U << 2);  ///< Offset for channel 2
        constexpr uint32_t OFF3 = (1U << 3);  ///< Offset for channel 3
        constexpr uint32_t OFF4 = (1U << 4);  ///< Offset for channel 4
        constexpr uint32_t OFF5 = (1U << 5);  ///< Offset for channel 5
        constexpr uint32_t OFF6 = (1U << 6);  ///< Offset for channel 6
        constexpr uint32_t OFF7 = (1U << 7);  ///< Offset for channel 7
        constexpr uint32_t OFF8 = (1U << 8);  ///< Offset for channel 8
        constexpr uint32_t OFF9 = (1U << 9);  ///< Offset for channel 9
        constexpr uint32_t OFF10 = (1U << 10);  ///< Offset for channel 10
        constexpr uint32_t OFF11 = (1U << 11);  ///< Offset for channel 11
        constexpr uint32_t DIFF0 = (1U << 16);  ///< Differential inputs for channel 0
        constexpr uint32_t DIFF1 = (1U << 17);  ///< Differential inputs for channel 1
        constexpr uint32_t DIFF2 = (1U << 18);  ///< Differential inputs for channel 2
        constexpr uint32_t DIFF3 = (1U << 19);  ///< Differential inputs for channel 3
        constexpr uint32_t DIFF4 = (1U << 20);  ///< Differential inputs for channel 4
        constexpr uint32_t DIFF5 = (1U << 21);  ///< Differential inputs for channel 5
        constexpr uint32_t DIFF6 = (1U << 22);  ///< Differential inputs for channel 6
        constexpr uint32_t DIFF7 = (1U << 23);  ///< Differential inputs for channel 7
        constexpr uint32_t DIFF8 = (1U << 24);  ///< Differential inputs for channel 8
        constexpr uint32_t DIFF9 = (1U << 25);  ///< Differential inputs for channel 9
        constexpr uint32_t DIFF10 = (1U << 26);  ///< Differential inputs for channel 10
        constexpr uint32_t DIFF11 = (1U << 27);  ///< Differential inputs for channel 11
    }

    /// CDR__ Register bits
    namespace cdr___bits {
        constexpr uint32_t DATA = (12 << 0);  ///< Converted Data
    }

    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t PENDETSENS = (2 << 0);  ///< Pen Detection Sensitivity
    }

    /// TSMR Register bits
    namespace tsmr_bits {
        constexpr uint32_t TSMODE = (2 << 0);  ///< Touchscreen Mode
        constexpr uint32_t TSAV = (2 << 4);  ///< Touchscreen Average
        constexpr uint32_t TSFREQ = (4 << 8);  ///< Touchscreen Frequency
        constexpr uint32_t TSSCTIM = (4 << 16);  ///< Touchscreen Switches Closure Time
        constexpr uint32_t NOTSDMA = (1U << 22);  ///< No TouchScreen DMA
        constexpr uint32_t PENDET = (1U << 24);  ///< Pen Contact Detection Enable
        constexpr uint32_t PENDBC = (4 << 28);  ///< Pen Detect Debouncing Period
    }

    /// XPOSR Register bits
    namespace xposr_bits {
        constexpr uint32_t XPOS = (12 << 0);  ///< X Position
        constexpr uint32_t XSCALE = (12 << 16);  ///< Scale of XPOS
    }

    /// YPOSR Register bits
    namespace yposr_bits {
        constexpr uint32_t YPOS = (12 << 0);  ///< Y Position
        constexpr uint32_t YSCALE = (12 << 16);  ///< Scale of YPOS
    }

    /// PRESSR Register bits
    namespace pressr_bits {
        constexpr uint32_t Z1 = (12 << 0);  ///< Data of Z1 Measurement
        constexpr uint32_t Z2 = (12 << 16);  ///< Data of Z2 Measurement
    }

    /// TRGR Register bits
    namespace trgr_bits {
        constexpr uint32_t TRGMOD = (3 << 0);  ///< Trigger Mode
        constexpr uint32_t TRGPER = (16 << 16);  ///< Trigger Period
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// ETH Peripheral
// ============================================================================

namespace eth {
    /// Base addresses
    constexpr uint32_t EMAC_BASE = 0xF802C000;

    /// ETH Register structure
    struct Registers {
        volatile uint32_t NCR;  ///< Offset: 0x00 - Network Control Register
        volatile uint32_t NCFGR;  ///< Offset: 0x04 - Network Configuration Register
        volatile uint32_t NSR;  ///< Offset: 0x08 - Network Status Register
        volatile uint32_t TSR;  ///< Offset: 0x14 - Transmit Status Register
        volatile uint32_t RBQP;  ///< Offset: 0x18 - Receive Buffer Queue Pointer Register
        volatile uint32_t TBQP;  ///< Offset: 0x1C - Transmit Buffer Queue Pointer Register
        volatile uint32_t RSR;  ///< Offset: 0x20 - Receive Status Register
        volatile uint32_t ISR;  ///< Offset: 0x24 - Interrupt Status Register
        volatile uint32_t IER;  ///< Offset: 0x28 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x2C - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x30 - Interrupt Mask Register
        volatile uint32_t MAN;  ///< Offset: 0x34 - Phy Maintenance Register
        volatile uint32_t PTR;  ///< Offset: 0x38 - Pause Time Register
        volatile uint32_t PFR;  ///< Offset: 0x3C - Pause Frames Received Register
        volatile uint32_t FTO;  ///< Offset: 0x40 - Frames Transmitted Ok Register
        volatile uint32_t SCF;  ///< Offset: 0x44 - Single Collision Frames Register
        volatile uint32_t MCF;  ///< Offset: 0x48 - Multiple Collision Frames Register
        volatile uint32_t FRO;  ///< Offset: 0x4C - Frames Received Ok Register
        volatile uint32_t FCSE;  ///< Offset: 0x50 - Frame Check Sequence Errors Register
        volatile uint32_t ALE;  ///< Offset: 0x54 - Alignment Errors Register
        volatile uint32_t DTF;  ///< Offset: 0x58 - Deferred Transmission Frames Register
        volatile uint32_t LCOL;  ///< Offset: 0x5C - Late Collisions Register
        volatile uint32_t ECOL;  ///< Offset: 0x60 - Excessive Collisions Register
        volatile uint32_t TUND;  ///< Offset: 0x64 - Transmit Underrun Errors Register
        volatile uint32_t CSE;  ///< Offset: 0x68 - Carrier Sense Errors Register
        volatile uint32_t RRE;  ///< Offset: 0x6C - Receive Resource Errors Register
        volatile uint32_t ROV;  ///< Offset: 0x70 - Receive Overrun Errors Register
        volatile uint32_t RSE;  ///< Offset: 0x74 - Receive Symbol Errors Register
        volatile uint32_t ELE;  ///< Offset: 0x78 - Excessive Length Errors Register
        volatile uint32_t RJA;  ///< Offset: 0x7C - Receive Jabbers Register
        volatile uint32_t USF;  ///< Offset: 0x80 - Undersize Frames Register
        volatile uint32_t STE;  ///< Offset: 0x84 - SQE Test Errors Register
        volatile uint32_t RLE;  ///< Offset: 0x88 - Received Length Field Mismatch Register
        volatile uint32_t HRB;  ///< Offset: 0x90 - Hash Register Bottom [31:0] Register
        volatile uint32_t HRT;  ///< Offset: 0x94 - Hash Register Top [63:32] Register
        volatile uint32_t SA1B;  ///< Offset: 0x98 - Specific Address 1 Bottom Register
        volatile uint32_t SA1T;  ///< Offset: 0x9C - Specific Address 1 Top Register
        volatile uint32_t SA2B;  ///< Offset: 0xA0 - Specific Address 2 Bottom Register
        volatile uint32_t SA2T;  ///< Offset: 0xA4 - Specific Address 2 Top Register
        volatile uint32_t SA3B;  ///< Offset: 0xA8 - Specific Address 3 Bottom Register
        volatile uint32_t SA3T;  ///< Offset: 0xAC - Specific Address 3 Top Register
        volatile uint32_t SA4B;  ///< Offset: 0xB0 - Specific Address 4 Bottom Register
        volatile uint32_t SA4T;  ///< Offset: 0xB4 - Specific Address 4 Top Register
        volatile uint32_t TID;  ///< Offset: 0xB8 - Type ID Checking Register
        volatile uint32_t USRIO;  ///< Offset: 0xC0 - User Input/Output Register
        volatile uint32_t WOL;  ///< Offset: 0xC4 - Wake on LAN Register
    };

    /// Peripheral instances
    inline Registers* EMAC = reinterpret_cast<Registers*>(EMAC_BASE);

    // Bit definitions
    /// NCR Register bits
    namespace ncr_bits {
        constexpr uint32_t LB = (1U << 0);  ///< LoopBack
        constexpr uint32_t LLB = (1U << 1);  ///< Loopback local
        constexpr uint32_t RE = (1U << 2);  ///< Receive enable
        constexpr uint32_t TE = (1U << 3);  ///< Transmit enable
        constexpr uint32_t MPE = (1U << 4);  ///< Management port enable
        constexpr uint32_t CLRSTAT = (1U << 5);  ///< Clear statistics registers
        constexpr uint32_t INCSTAT = (1U << 6);  ///< Increment statistics registers
        constexpr uint32_t WESTAT = (1U << 7);  ///< Write enable for statistics registers
        constexpr uint32_t BP = (1U << 8);  ///< Back pressure
        constexpr uint32_t TSTART = (1U << 9);  ///< Start transmission
        constexpr uint32_t THALT = (1U << 10);  ///< Transmit halt
    }

    /// NCFGR Register bits
    namespace ncfgr_bits {
        constexpr uint32_t SPD = (1U << 0);  ///< Speed
        constexpr uint32_t FD = (1U << 1);  ///< Full Duplex
        constexpr uint32_t JFRAME = (1U << 3);  ///< Jumbo Frames
        constexpr uint32_t CAF = (1U << 4);  ///< Copy All Frames
        constexpr uint32_t NBC = (1U << 5);  ///< No Broadcast
        constexpr uint32_t MTI = (1U << 6);  ///< Multicast Hash Enable
        constexpr uint32_t UNI = (1U << 7);  ///< Unicast Hash Enable
        constexpr uint32_t BIG = (1U << 8);  ///< Receive 1536 bytes frames
        constexpr uint32_t CLK = (2 << 10);  ///< MDC clock divider
        constexpr uint32_t RTY = (1U << 12);  ///< Retry test
        constexpr uint32_t PAE = (1U << 13);  ///< Pause Enable
        constexpr uint32_t RBOF = (2 << 14);  ///< Receive Buffer Offset
        constexpr uint32_t RLCE = (1U << 16);  ///< Receive Length field Checking Enable
        constexpr uint32_t DRFCS = (1U << 17);  ///< Discard Receive FCS
        constexpr uint32_t EFRHD = (1U << 18);  ///< EFRHD
        constexpr uint32_t IRXFCS = (1U << 19);  ///< Ignore RX FCS
    }

    /// NSR Register bits
    namespace nsr_bits {
        constexpr uint32_t MDIO = (1U << 1);  ///< MDIO
        constexpr uint32_t IDLE = (1U << 2);  ///< IDLE
    }

    /// TSR Register bits
    namespace tsr_bits {
        constexpr uint32_t UBR = (1U << 0);  ///< Used Bit Read
        constexpr uint32_t COL = (1U << 1);  ///< Collision Occurred
        constexpr uint32_t RLES = (1U << 2);  ///< Retry Limit exceeded
        constexpr uint32_t TGO = (1U << 3);  ///< Transmit Go
        constexpr uint32_t BEX = (1U << 4);  ///< Buffers exhausted mid frame
        constexpr uint32_t COMP = (1U << 5);  ///< Transmit Complete
        constexpr uint32_t UND = (1U << 6);  ///< Transmit Underrun
    }

    /// RBQP Register bits
    namespace rbqp_bits {
        constexpr uint32_t ADDR = (30 << 2);  ///< Receive buffer queue pointer address
    }

    /// TBQP Register bits
    namespace tbqp_bits {
        constexpr uint32_t ADDR = (30 << 2);  ///< Transmit buffer queue pointer address
    }

    /// RSR Register bits
    namespace rsr_bits {
        constexpr uint32_t BNA = (1U << 0);  ///< Buffer Not Available
        constexpr uint32_t REC = (1U << 1);  ///< Frame Received
        constexpr uint32_t OVR = (1U << 2);  ///< Receive Overrun
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t MFD = (1U << 0);  ///< Management Frame Done
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< Receive Used Bit Read
        constexpr uint32_t TXUBR = (1U << 3);  ///< Transmit Used Bit Read
        constexpr uint32_t TUND = (1U << 4);  ///< Ethernet Transmit Buffer Underrun
        constexpr uint32_t RLEX = (1U << 5);  ///< Retry Limit Exceeded
        constexpr uint32_t TXERR = (1U << 6);  ///< Transmit Error
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< Hresp not OK
        constexpr uint32_t PFRE = (1U << 12);  ///< Pause Frame Received
        constexpr uint32_t PTZ = (1U << 13);  ///< Pause Time Zero
        constexpr uint32_t WOL = (1U << 14);  ///< Wake On LAN
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t MFD = (1U << 0);  ///< Management Frame sent
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< Receive Used Bit Read
        constexpr uint32_t TXUBR = (1U << 3);  ///< Transmit Used Bit Read
        constexpr uint32_t TUND = (1U << 4);  ///< Ethernet Transmit Buffer Underrun
        constexpr uint32_t RLE = (1U << 5);  ///< Retry Limit Exceeded
        constexpr uint32_t TXERR = (1U << 6);  ///< TXERR
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< Hresp not OK
        constexpr uint32_t PFR = (1U << 12);  ///< Pause Frame Received
        constexpr uint32_t PTZ = (1U << 13);  ///< Pause Time Zero
        constexpr uint32_t WOL = (1U << 14);  ///< Wake On LAN
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t MFD = (1U << 0);  ///< Management Frame sent
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< Receive Used Bit Read
        constexpr uint32_t TXUBR = (1U << 3);  ///< Transmit Used Bit Read
        constexpr uint32_t TUND = (1U << 4);  ///< Ethernet Transmit Buffer Underrun
        constexpr uint32_t RLE = (1U << 5);  ///< Retry Limit Exceeded
        constexpr uint32_t TXERR = (1U << 6);  ///< TXERR
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< Hresp not OK
        constexpr uint32_t PFR = (1U << 12);  ///< Pause Frame Received
        constexpr uint32_t PTZ = (1U << 13);  ///< Pause Time Zero
        constexpr uint32_t WOL = (1U << 14);  ///< Wake On LAN
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t MFD = (1U << 0);  ///< Management Frame sent
        constexpr uint32_t RCOMP = (1U << 1);  ///< Receive Complete
        constexpr uint32_t RXUBR = (1U << 2);  ///< Receive Used Bit Read
        constexpr uint32_t TXUBR = (1U << 3);  ///< Transmit Used Bit Read
        constexpr uint32_t TUND = (1U << 4);  ///< Ethernet Transmit Buffer Underrun
        constexpr uint32_t RLE = (1U << 5);  ///< Retry Limit Exceeded
        constexpr uint32_t TXERR = (1U << 6);  ///< TXERR
        constexpr uint32_t TCOMP = (1U << 7);  ///< Transmit Complete
        constexpr uint32_t ROVR = (1U << 10);  ///< Receive Overrun
        constexpr uint32_t HRESP = (1U << 11);  ///< Hresp not OK
        constexpr uint32_t PFR = (1U << 12);  ///< Pause Frame Received
        constexpr uint32_t PTZ = (1U << 13);  ///< Pause Time Zero
        constexpr uint32_t WOL = (1U << 14);  ///< Wake On LAN
    }

    /// MAN Register bits
    namespace man_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
        constexpr uint32_t CODE = (2 << 16);  ///< CODE
        constexpr uint32_t REGA = (5 << 18);  ///< Register Address
        constexpr uint32_t PHYA = (5 << 23);  ///< PHY Address
        constexpr uint32_t RW = (2 << 28);  ///< Read-write
        constexpr uint32_t SOF = (2 << 30);  ///< Start of frame
    }

    /// PTR Register bits
    namespace ptr_bits {
        constexpr uint32_t PTIME = (16 << 0);  ///< Pause Time
    }

    /// PFR Register bits
    namespace pfr_bits {
        constexpr uint32_t FROK = (16 << 0);  ///< Pause Frames received OK
    }

    /// FTO Register bits
    namespace fto_bits {
        constexpr uint32_t FTOK = (24 << 0);  ///< Frames Transmitted OK
    }

    /// SCF Register bits
    namespace scf_bits {
        constexpr uint32_t SCF = (16 << 0);  ///< Single Collision Frames
    }

    /// MCF Register bits
    namespace mcf_bits {
        constexpr uint32_t MCF = (16 << 0);  ///< Multicollision Frames
    }

    /// FRO Register bits
    namespace fro_bits {
        constexpr uint32_t FROK = (24 << 0);  ///< Frames Received OK
    }

    /// FCSE Register bits
    namespace fcse_bits {
        constexpr uint32_t FCSE = (8 << 0);  ///< Frame Check Sequence Errors
    }

    /// ALE Register bits
    namespace ale_bits {
        constexpr uint32_t ALE = (8 << 0);  ///< Alignment Errors
    }

    /// DTF Register bits
    namespace dtf_bits {
        constexpr uint32_t DTF = (16 << 0);  ///< Deferred Transmission Frames
    }

    /// LCOL Register bits
    namespace lcol_bits {
        constexpr uint32_t LCOL = (8 << 0);  ///< Late Collisions
    }

    /// ECOL Register bits
    namespace ecol_bits {
        constexpr uint32_t EXCOL = (8 << 0);  ///< Excessive Collisions
    }

    /// TUND Register bits
    namespace tund_bits {
        constexpr uint32_t TUND = (8 << 0);  ///< Transmit Underruns
    }

    /// CSE Register bits
    namespace cse_bits {
        constexpr uint32_t CSE = (8 << 0);  ///< Carrier Sense Errors
    }

    /// RRE Register bits
    namespace rre_bits {
        constexpr uint32_t RRE = (16 << 0);  ///< Receive Resource Errors
    }

    /// ROV Register bits
    namespace rov_bits {
        constexpr uint32_t ROVR = (8 << 0);  ///< Receive Overrun
    }

    /// RSE Register bits
    namespace rse_bits {
        constexpr uint32_t RSE = (8 << 0);  ///< Receive Symbol Errors
    }

    /// ELE Register bits
    namespace ele_bits {
        constexpr uint32_t EXL = (8 << 0);  ///< Excessive Length Errors
    }

    /// RJA Register bits
    namespace rja_bits {
        constexpr uint32_t RJB = (8 << 0);  ///< Receive Jabbers
    }

    /// USF Register bits
    namespace usf_bits {
        constexpr uint32_t USF = (8 << 0);  ///< Undersize frames
    }

    /// STE Register bits
    namespace ste_bits {
        constexpr uint32_t SQER = (8 << 0);  ///< SQE test errors
    }

    /// RLE Register bits
    namespace rle_bits {
        constexpr uint32_t RLFM = (8 << 0);  ///< Receive Length Field Mismatch
    }

    /// HRB Register bits
    namespace hrb_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< ADDR
    }

    /// HRT Register bits
    namespace hrt_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< ADDR
    }

    /// SA1B Register bits
    namespace sa1b_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< ADDR
    }

    /// SA1T Register bits
    namespace sa1t_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< ADDR
    }

    /// SA2B Register bits
    namespace sa2b_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< ADDR
    }

    /// SA2T Register bits
    namespace sa2t_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< ADDR
    }

    /// SA3B Register bits
    namespace sa3b_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< ADDR
    }

    /// SA3T Register bits
    namespace sa3t_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< ADDR
    }

    /// SA4B Register bits
    namespace sa4b_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< ADDR
    }

    /// SA4T Register bits
    namespace sa4t_bits {
        constexpr uint32_t ADDR = (16 << 0);  ///< ADDR
    }

    /// TID Register bits
    namespace tid_bits {
        constexpr uint32_t TID = (16 << 0);  ///< Type ID checking
    }

    /// USRIO Register bits
    namespace usrio_bits {
        constexpr uint32_t RMII = (1U << 0);  ///< Reduce MII
        constexpr uint32_t CLKEN = (1U << 1);  ///< Clock Enable
    }

    /// WOL Register bits
    namespace wol_bits {
        constexpr uint32_t IP = (16 << 0);  ///< ARP request IP address
        constexpr uint32_t MAG = (1U << 16);  ///< Magic packet event enable
        constexpr uint32_t ARP = (1U << 17);  ///< ARP request IP address
        constexpr uint32_t SA1 = (1U << 18);  ///< Specific address register 1 event enable
        constexpr uint32_t MTI = (1U << 19);  ///< Multicast hash event enable
    }

}

// ============================================================================
// UDPHS Peripheral
// ============================================================================

namespace udphs {
    /// Base addresses
    constexpr uint32_t UDPHS_BASE = 0xF8030000;

    /// UDPHS Register structure
    struct Registers {
        volatile uint32_t CTRL;  ///< Offset: 0x00 - UDPHS Control Register
        volatile uint32_t FNUM;  ///< Offset: 0x04 - UDPHS Frame Number Register
        volatile uint32_t IEN;  ///< Offset: 0x10 - UDPHS Interrupt Enable Register
        volatile uint32_t INTSTA;  ///< Offset: 0x14 - UDPHS Interrupt Status Register
        volatile uint32_t CLRINT;  ///< Offset: 0x18 - UDPHS Clear Interrupt Register
        volatile uint32_t EPTRST;  ///< Offset: 0x1C - UDPHS Endpoints Reset Register
        volatile uint32_t TST;  ///< Offset: 0xE0 - UDPHS Test Register
        volatile uint32_t EPTCFG0;  ///< Offset: 0x100 - UDPHS Endpoint Configuration Register (endpoint = 0)
        volatile uint32_t EPTCTLENB0;  ///< Offset: 0x104 - UDPHS Endpoint Control Enable Register (endpoint = 0)
        volatile uint32_t EPTCTLENB0_ISOENDPT;  ///< Offset: 0x104 - UDPHS Endpoint Control Enable Register (endpoint = 0)
        volatile uint32_t EPTCTLDIS0;  ///< Offset: 0x108 - UDPHS Endpoint Control Disable Register (endpoint = 0)
        volatile uint32_t EPTCTLDIS0_ISOENDPT;  ///< Offset: 0x108 - UDPHS Endpoint Control Disable Register (endpoint = 0)
        volatile uint32_t EPTCTL0;  ///< Offset: 0x10C - UDPHS Endpoint Control Register (endpoint = 0)
        volatile uint32_t EPTCTL0_ISOENDPT;  ///< Offset: 0x10C - UDPHS Endpoint Control Register (endpoint = 0)
        volatile uint32_t EPTSETSTA0;  ///< Offset: 0x114 - UDPHS Endpoint Set Status Register (endpoint = 0)
        volatile uint32_t EPTSETSTA0_ISOENDPT;  ///< Offset: 0x114 - UDPHS Endpoint Set Status Register (endpoint = 0)
        volatile uint32_t EPTCLRSTA0;  ///< Offset: 0x118 - UDPHS Endpoint Clear Status Register (endpoint = 0)
        volatile uint32_t EPTCLRSTA0_ISOENDPT;  ///< Offset: 0x118 - UDPHS Endpoint Clear Status Register (endpoint = 0)
        volatile uint32_t EPTSTA0;  ///< Offset: 0x11C - UDPHS Endpoint Status Register (endpoint = 0)
        volatile uint32_t EPTSTA0_ISOENDPT;  ///< Offset: 0x11C - UDPHS Endpoint Status Register (endpoint = 0)
        volatile uint32_t EPTCFG1;  ///< Offset: 0x120 - UDPHS Endpoint Configuration Register (endpoint = 1)
        volatile uint32_t EPTCTLENB1;  ///< Offset: 0x124 - UDPHS Endpoint Control Enable Register (endpoint = 1)
        volatile uint32_t EPTCTLENB1_ISOENDPT;  ///< Offset: 0x124 - UDPHS Endpoint Control Enable Register (endpoint = 1)
        volatile uint32_t EPTCTLDIS1;  ///< Offset: 0x128 - UDPHS Endpoint Control Disable Register (endpoint = 1)
        volatile uint32_t EPTCTLDIS1_ISOENDPT;  ///< Offset: 0x128 - UDPHS Endpoint Control Disable Register (endpoint = 1)
        volatile uint32_t EPTCTL1;  ///< Offset: 0x12C - UDPHS Endpoint Control Register (endpoint = 1)
        volatile uint32_t EPTCTL1_ISOENDPT;  ///< Offset: 0x12C - UDPHS Endpoint Control Register (endpoint = 1)
        volatile uint32_t EPTSETSTA1;  ///< Offset: 0x134 - UDPHS Endpoint Set Status Register (endpoint = 1)
        volatile uint32_t EPTSETSTA1_ISOENDPT;  ///< Offset: 0x134 - UDPHS Endpoint Set Status Register (endpoint = 1)
        volatile uint32_t EPTCLRSTA1;  ///< Offset: 0x138 - UDPHS Endpoint Clear Status Register (endpoint = 1)
        volatile uint32_t EPTCLRSTA1_ISOENDPT;  ///< Offset: 0x138 - UDPHS Endpoint Clear Status Register (endpoint = 1)
        volatile uint32_t EPTSTA1;  ///< Offset: 0x13C - UDPHS Endpoint Status Register (endpoint = 1)
        volatile uint32_t EPTSTA1_ISOENDPT;  ///< Offset: 0x13C - UDPHS Endpoint Status Register (endpoint = 1)
        volatile uint32_t EPTCFG2;  ///< Offset: 0x140 - UDPHS Endpoint Configuration Register (endpoint = 2)
        volatile uint32_t EPTCTLENB2;  ///< Offset: 0x144 - UDPHS Endpoint Control Enable Register (endpoint = 2)
        volatile uint32_t EPTCTLENB2_ISOENDPT;  ///< Offset: 0x144 - UDPHS Endpoint Control Enable Register (endpoint = 2)
        volatile uint32_t EPTCTLDIS2;  ///< Offset: 0x148 - UDPHS Endpoint Control Disable Register (endpoint = 2)
        volatile uint32_t EPTCTLDIS2_ISOENDPT;  ///< Offset: 0x148 - UDPHS Endpoint Control Disable Register (endpoint = 2)
        volatile uint32_t EPTCTL2;  ///< Offset: 0x14C - UDPHS Endpoint Control Register (endpoint = 2)
        volatile uint32_t EPTCTL2_ISOENDPT;  ///< Offset: 0x14C - UDPHS Endpoint Control Register (endpoint = 2)
        volatile uint32_t EPTSETSTA2;  ///< Offset: 0x154 - UDPHS Endpoint Set Status Register (endpoint = 2)
        volatile uint32_t EPTSETSTA2_ISOENDPT;  ///< Offset: 0x154 - UDPHS Endpoint Set Status Register (endpoint = 2)
        volatile uint32_t EPTCLRSTA2;  ///< Offset: 0x158 - UDPHS Endpoint Clear Status Register (endpoint = 2)
        volatile uint32_t EPTCLRSTA2_ISOENDPT;  ///< Offset: 0x158 - UDPHS Endpoint Clear Status Register (endpoint = 2)
        volatile uint32_t EPTSTA2;  ///< Offset: 0x15C - UDPHS Endpoint Status Register (endpoint = 2)
        volatile uint32_t EPTSTA2_ISOENDPT;  ///< Offset: 0x15C - UDPHS Endpoint Status Register (endpoint = 2)
        volatile uint32_t EPTCFG3;  ///< Offset: 0x160 - UDPHS Endpoint Configuration Register (endpoint = 3)
        volatile uint32_t EPTCTLENB3;  ///< Offset: 0x164 - UDPHS Endpoint Control Enable Register (endpoint = 3)
        volatile uint32_t EPTCTLENB3_ISOENDPT;  ///< Offset: 0x164 - UDPHS Endpoint Control Enable Register (endpoint = 3)
        volatile uint32_t EPTCTLDIS3;  ///< Offset: 0x168 - UDPHS Endpoint Control Disable Register (endpoint = 3)
        volatile uint32_t EPTCTLDIS3_ISOENDPT;  ///< Offset: 0x168 - UDPHS Endpoint Control Disable Register (endpoint = 3)
        volatile uint32_t EPTCTL3;  ///< Offset: 0x16C - UDPHS Endpoint Control Register (endpoint = 3)
        volatile uint32_t EPTCTL3_ISOENDPT;  ///< Offset: 0x16C - UDPHS Endpoint Control Register (endpoint = 3)
        volatile uint32_t EPTSETSTA3;  ///< Offset: 0x174 - UDPHS Endpoint Set Status Register (endpoint = 3)
        volatile uint32_t EPTSETSTA3_ISOENDPT;  ///< Offset: 0x174 - UDPHS Endpoint Set Status Register (endpoint = 3)
        volatile uint32_t EPTCLRSTA3;  ///< Offset: 0x178 - UDPHS Endpoint Clear Status Register (endpoint = 3)
        volatile uint32_t EPTCLRSTA3_ISOENDPT;  ///< Offset: 0x178 - UDPHS Endpoint Clear Status Register (endpoint = 3)
        volatile uint32_t EPTSTA3;  ///< Offset: 0x17C - UDPHS Endpoint Status Register (endpoint = 3)
        volatile uint32_t EPTSTA3_ISOENDPT;  ///< Offset: 0x17C - UDPHS Endpoint Status Register (endpoint = 3)
        volatile uint32_t EPTCFG4;  ///< Offset: 0x180 - UDPHS Endpoint Configuration Register (endpoint = 4)
        volatile uint32_t EPTCTLENB4;  ///< Offset: 0x184 - UDPHS Endpoint Control Enable Register (endpoint = 4)
        volatile uint32_t EPTCTLENB4_ISOENDPT;  ///< Offset: 0x184 - UDPHS Endpoint Control Enable Register (endpoint = 4)
        volatile uint32_t EPTCTLDIS4;  ///< Offset: 0x188 - UDPHS Endpoint Control Disable Register (endpoint = 4)
        volatile uint32_t EPTCTLDIS4_ISOENDPT;  ///< Offset: 0x188 - UDPHS Endpoint Control Disable Register (endpoint = 4)
        volatile uint32_t EPTCTL4;  ///< Offset: 0x18C - UDPHS Endpoint Control Register (endpoint = 4)
        volatile uint32_t EPTCTL4_ISOENDPT;  ///< Offset: 0x18C - UDPHS Endpoint Control Register (endpoint = 4)
        volatile uint32_t EPTSETSTA4;  ///< Offset: 0x194 - UDPHS Endpoint Set Status Register (endpoint = 4)
        volatile uint32_t EPTSETSTA4_ISOENDPT;  ///< Offset: 0x194 - UDPHS Endpoint Set Status Register (endpoint = 4)
        volatile uint32_t EPTCLRSTA4;  ///< Offset: 0x198 - UDPHS Endpoint Clear Status Register (endpoint = 4)
        volatile uint32_t EPTCLRSTA4_ISOENDPT;  ///< Offset: 0x198 - UDPHS Endpoint Clear Status Register (endpoint = 4)
        volatile uint32_t EPTSTA4;  ///< Offset: 0x19C - UDPHS Endpoint Status Register (endpoint = 4)
        volatile uint32_t EPTSTA4_ISOENDPT;  ///< Offset: 0x19C - UDPHS Endpoint Status Register (endpoint = 4)
        volatile uint32_t EPTCFG5;  ///< Offset: 0x1A0 - UDPHS Endpoint Configuration Register (endpoint = 5)
        volatile uint32_t EPTCTLENB5;  ///< Offset: 0x1A4 - UDPHS Endpoint Control Enable Register (endpoint = 5)
        volatile uint32_t EPTCTLENB5_ISOENDPT;  ///< Offset: 0x1A4 - UDPHS Endpoint Control Enable Register (endpoint = 5)
        volatile uint32_t EPTCTLDIS5;  ///< Offset: 0x1A8 - UDPHS Endpoint Control Disable Register (endpoint = 5)
        volatile uint32_t EPTCTLDIS5_ISOENDPT;  ///< Offset: 0x1A8 - UDPHS Endpoint Control Disable Register (endpoint = 5)
        volatile uint32_t EPTCTL5;  ///< Offset: 0x1AC - UDPHS Endpoint Control Register (endpoint = 5)
        volatile uint32_t EPTCTL5_ISOENDPT;  ///< Offset: 0x1AC - UDPHS Endpoint Control Register (endpoint = 5)
        volatile uint32_t EPTSETSTA5;  ///< Offset: 0x1B4 - UDPHS Endpoint Set Status Register (endpoint = 5)
        volatile uint32_t EPTSETSTA5_ISOENDPT;  ///< Offset: 0x1B4 - UDPHS Endpoint Set Status Register (endpoint = 5)
        volatile uint32_t EPTCLRSTA5;  ///< Offset: 0x1B8 - UDPHS Endpoint Clear Status Register (endpoint = 5)
        volatile uint32_t EPTCLRSTA5_ISOENDPT;  ///< Offset: 0x1B8 - UDPHS Endpoint Clear Status Register (endpoint = 5)
        volatile uint32_t EPTSTA5;  ///< Offset: 0x1BC - UDPHS Endpoint Status Register (endpoint = 5)
        volatile uint32_t EPTSTA5_ISOENDPT;  ///< Offset: 0x1BC - UDPHS Endpoint Status Register (endpoint = 5)
        volatile uint32_t EPTCFG6;  ///< Offset: 0x1C0 - UDPHS Endpoint Configuration Register (endpoint = 6)
        volatile uint32_t EPTCTLENB6;  ///< Offset: 0x1C4 - UDPHS Endpoint Control Enable Register (endpoint = 6)
        volatile uint32_t EPTCTLENB6_ISOENDPT;  ///< Offset: 0x1C4 - UDPHS Endpoint Control Enable Register (endpoint = 6)
        volatile uint32_t EPTCTLDIS6;  ///< Offset: 0x1C8 - UDPHS Endpoint Control Disable Register (endpoint = 6)
        volatile uint32_t EPTCTLDIS6_ISOENDPT;  ///< Offset: 0x1C8 - UDPHS Endpoint Control Disable Register (endpoint = 6)
        volatile uint32_t EPTCTL6;  ///< Offset: 0x1CC - UDPHS Endpoint Control Register (endpoint = 6)
        volatile uint32_t EPTCTL6_ISOENDPT;  ///< Offset: 0x1CC - UDPHS Endpoint Control Register (endpoint = 6)
        volatile uint32_t EPTSETSTA6;  ///< Offset: 0x1D4 - UDPHS Endpoint Set Status Register (endpoint = 6)
        volatile uint32_t EPTSETSTA6_ISOENDPT;  ///< Offset: 0x1D4 - UDPHS Endpoint Set Status Register (endpoint = 6)
        volatile uint32_t EPTCLRSTA6;  ///< Offset: 0x1D8 - UDPHS Endpoint Clear Status Register (endpoint = 6)
        volatile uint32_t EPTCLRSTA6_ISOENDPT;  ///< Offset: 0x1D8 - UDPHS Endpoint Clear Status Register (endpoint = 6)
        volatile uint32_t EPTSTA6;  ///< Offset: 0x1DC - UDPHS Endpoint Status Register (endpoint = 6)
        volatile uint32_t EPTSTA6_ISOENDPT;  ///< Offset: 0x1DC - UDPHS Endpoint Status Register (endpoint = 6)
        volatile uint32_t EPTCFG7;  ///< Offset: 0x1E0 - UDPHS Endpoint Configuration Register (endpoint = 7)
        volatile uint32_t EPTCTLENB7;  ///< Offset: 0x1E4 - UDPHS Endpoint Control Enable Register (endpoint = 7)
        volatile uint32_t EPTCTLENB7_ISOENDPT;  ///< Offset: 0x1E4 - UDPHS Endpoint Control Enable Register (endpoint = 7)
        volatile uint32_t EPTCTLDIS7;  ///< Offset: 0x1E8 - UDPHS Endpoint Control Disable Register (endpoint = 7)
        volatile uint32_t EPTCTLDIS7_ISOENDPT;  ///< Offset: 0x1E8 - UDPHS Endpoint Control Disable Register (endpoint = 7)
        volatile uint32_t EPTCTL7;  ///< Offset: 0x1EC - UDPHS Endpoint Control Register (endpoint = 7)
        volatile uint32_t EPTCTL7_ISOENDPT;  ///< Offset: 0x1EC - UDPHS Endpoint Control Register (endpoint = 7)
        volatile uint32_t EPTSETSTA7;  ///< Offset: 0x1F4 - UDPHS Endpoint Set Status Register (endpoint = 7)
        volatile uint32_t EPTSETSTA7_ISOENDPT;  ///< Offset: 0x1F4 - UDPHS Endpoint Set Status Register (endpoint = 7)
        volatile uint32_t EPTCLRSTA7;  ///< Offset: 0x1F8 - UDPHS Endpoint Clear Status Register (endpoint = 7)
        volatile uint32_t EPTCLRSTA7_ISOENDPT;  ///< Offset: 0x1F8 - UDPHS Endpoint Clear Status Register (endpoint = 7)
        volatile uint32_t EPTSTA7;  ///< Offset: 0x1FC - UDPHS Endpoint Status Register (endpoint = 7)
        volatile uint32_t EPTSTA7_ISOENDPT;  ///< Offset: 0x1FC - UDPHS Endpoint Status Register (endpoint = 7)
        volatile uint32_t EPTCFG8;  ///< Offset: 0x200 - UDPHS Endpoint Configuration Register (endpoint = 8)
        volatile uint32_t EPTCTLENB8;  ///< Offset: 0x204 - UDPHS Endpoint Control Enable Register (endpoint = 8)
        volatile uint32_t EPTCTLENB8_ISOENDPT;  ///< Offset: 0x204 - UDPHS Endpoint Control Enable Register (endpoint = 8)
        volatile uint32_t EPTCTLDIS8;  ///< Offset: 0x208 - UDPHS Endpoint Control Disable Register (endpoint = 8)
        volatile uint32_t EPTCTLDIS8_ISOENDPT;  ///< Offset: 0x208 - UDPHS Endpoint Control Disable Register (endpoint = 8)
        volatile uint32_t EPTCTL8;  ///< Offset: 0x20C - UDPHS Endpoint Control Register (endpoint = 8)
        volatile uint32_t EPTCTL8_ISOENDPT;  ///< Offset: 0x20C - UDPHS Endpoint Control Register (endpoint = 8)
        volatile uint32_t EPTSETSTA8;  ///< Offset: 0x214 - UDPHS Endpoint Set Status Register (endpoint = 8)
        volatile uint32_t EPTSETSTA8_ISOENDPT;  ///< Offset: 0x214 - UDPHS Endpoint Set Status Register (endpoint = 8)
        volatile uint32_t EPTCLRSTA8;  ///< Offset: 0x218 - UDPHS Endpoint Clear Status Register (endpoint = 8)
        volatile uint32_t EPTCLRSTA8_ISOENDPT;  ///< Offset: 0x218 - UDPHS Endpoint Clear Status Register (endpoint = 8)
        volatile uint32_t EPTSTA8;  ///< Offset: 0x21C - UDPHS Endpoint Status Register (endpoint = 8)
        volatile uint32_t EPTSTA8_ISOENDPT;  ///< Offset: 0x21C - UDPHS Endpoint Status Register (endpoint = 8)
        volatile uint32_t EPTCFG9;  ///< Offset: 0x220 - UDPHS Endpoint Configuration Register (endpoint = 9)
        volatile uint32_t EPTCTLENB9;  ///< Offset: 0x224 - UDPHS Endpoint Control Enable Register (endpoint = 9)
        volatile uint32_t EPTCTLENB9_ISOENDPT;  ///< Offset: 0x224 - UDPHS Endpoint Control Enable Register (endpoint = 9)
        volatile uint32_t EPTCTLDIS9;  ///< Offset: 0x228 - UDPHS Endpoint Control Disable Register (endpoint = 9)
        volatile uint32_t EPTCTLDIS9_ISOENDPT;  ///< Offset: 0x228 - UDPHS Endpoint Control Disable Register (endpoint = 9)
        volatile uint32_t EPTCTL9;  ///< Offset: 0x22C - UDPHS Endpoint Control Register (endpoint = 9)
        volatile uint32_t EPTCTL9_ISOENDPT;  ///< Offset: 0x22C - UDPHS Endpoint Control Register (endpoint = 9)
        volatile uint32_t EPTSETSTA9;  ///< Offset: 0x234 - UDPHS Endpoint Set Status Register (endpoint = 9)
        volatile uint32_t EPTSETSTA9_ISOENDPT;  ///< Offset: 0x234 - UDPHS Endpoint Set Status Register (endpoint = 9)
        volatile uint32_t EPTCLRSTA9;  ///< Offset: 0x238 - UDPHS Endpoint Clear Status Register (endpoint = 9)
        volatile uint32_t EPTCLRSTA9_ISOENDPT;  ///< Offset: 0x238 - UDPHS Endpoint Clear Status Register (endpoint = 9)
        volatile uint32_t EPTSTA9;  ///< Offset: 0x23C - UDPHS Endpoint Status Register (endpoint = 9)
        volatile uint32_t EPTSTA9_ISOENDPT;  ///< Offset: 0x23C - UDPHS Endpoint Status Register (endpoint = 9)
        volatile uint32_t EPTCFG10;  ///< Offset: 0x240 - UDPHS Endpoint Configuration Register (endpoint = 10)
        volatile uint32_t EPTCTLENB10;  ///< Offset: 0x244 - UDPHS Endpoint Control Enable Register (endpoint = 10)
        volatile uint32_t EPTCTLENB10_ISOENDPT;  ///< Offset: 0x244 - UDPHS Endpoint Control Enable Register (endpoint = 10)
        volatile uint32_t EPTCTLDIS10;  ///< Offset: 0x248 - UDPHS Endpoint Control Disable Register (endpoint = 10)
        volatile uint32_t EPTCTLDIS10_ISOENDPT;  ///< Offset: 0x248 - UDPHS Endpoint Control Disable Register (endpoint = 10)
        volatile uint32_t EPTCTL10;  ///< Offset: 0x24C - UDPHS Endpoint Control Register (endpoint = 10)
        volatile uint32_t EPTCTL10_ISOENDPT;  ///< Offset: 0x24C - UDPHS Endpoint Control Register (endpoint = 10)
        volatile uint32_t EPTSETSTA10;  ///< Offset: 0x254 - UDPHS Endpoint Set Status Register (endpoint = 10)
        volatile uint32_t EPTSETSTA10_ISOENDPT;  ///< Offset: 0x254 - UDPHS Endpoint Set Status Register (endpoint = 10)
        volatile uint32_t EPTCLRSTA10;  ///< Offset: 0x258 - UDPHS Endpoint Clear Status Register (endpoint = 10)
        volatile uint32_t EPTCLRSTA10_ISOENDPT;  ///< Offset: 0x258 - UDPHS Endpoint Clear Status Register (endpoint = 10)
        volatile uint32_t EPTSTA10;  ///< Offset: 0x25C - UDPHS Endpoint Status Register (endpoint = 10)
        volatile uint32_t EPTSTA10_ISOENDPT;  ///< Offset: 0x25C - UDPHS Endpoint Status Register (endpoint = 10)
        volatile uint32_t EPTCFG11;  ///< Offset: 0x260 - UDPHS Endpoint Configuration Register (endpoint = 11)
        volatile uint32_t EPTCTLENB11;  ///< Offset: 0x264 - UDPHS Endpoint Control Enable Register (endpoint = 11)
        volatile uint32_t EPTCTLENB11_ISOENDPT;  ///< Offset: 0x264 - UDPHS Endpoint Control Enable Register (endpoint = 11)
        volatile uint32_t EPTCTLDIS11;  ///< Offset: 0x268 - UDPHS Endpoint Control Disable Register (endpoint = 11)
        volatile uint32_t EPTCTLDIS11_ISOENDPT;  ///< Offset: 0x268 - UDPHS Endpoint Control Disable Register (endpoint = 11)
        volatile uint32_t EPTCTL11;  ///< Offset: 0x26C - UDPHS Endpoint Control Register (endpoint = 11)
        volatile uint32_t EPTCTL11_ISOENDPT;  ///< Offset: 0x26C - UDPHS Endpoint Control Register (endpoint = 11)
        volatile uint32_t EPTSETSTA11;  ///< Offset: 0x274 - UDPHS Endpoint Set Status Register (endpoint = 11)
        volatile uint32_t EPTSETSTA11_ISOENDPT;  ///< Offset: 0x274 - UDPHS Endpoint Set Status Register (endpoint = 11)
        volatile uint32_t EPTCLRSTA11;  ///< Offset: 0x278 - UDPHS Endpoint Clear Status Register (endpoint = 11)
        volatile uint32_t EPTCLRSTA11_ISOENDPT;  ///< Offset: 0x278 - UDPHS Endpoint Clear Status Register (endpoint = 11)
        volatile uint32_t EPTSTA11;  ///< Offset: 0x27C - UDPHS Endpoint Status Register (endpoint = 11)
        volatile uint32_t EPTSTA11_ISOENDPT;  ///< Offset: 0x27C - UDPHS Endpoint Status Register (endpoint = 11)
        volatile uint32_t EPTCFG12;  ///< Offset: 0x280 - UDPHS Endpoint Configuration Register (endpoint = 12)
        volatile uint32_t EPTCTLENB12;  ///< Offset: 0x284 - UDPHS Endpoint Control Enable Register (endpoint = 12)
        volatile uint32_t EPTCTLENB12_ISOENDPT;  ///< Offset: 0x284 - UDPHS Endpoint Control Enable Register (endpoint = 12)
        volatile uint32_t EPTCTLDIS12;  ///< Offset: 0x288 - UDPHS Endpoint Control Disable Register (endpoint = 12)
        volatile uint32_t EPTCTLDIS12_ISOENDPT;  ///< Offset: 0x288 - UDPHS Endpoint Control Disable Register (endpoint = 12)
        volatile uint32_t EPTCTL12;  ///< Offset: 0x28C - UDPHS Endpoint Control Register (endpoint = 12)
        volatile uint32_t EPTCTL12_ISOENDPT;  ///< Offset: 0x28C - UDPHS Endpoint Control Register (endpoint = 12)
        volatile uint32_t EPTSETSTA12;  ///< Offset: 0x294 - UDPHS Endpoint Set Status Register (endpoint = 12)
        volatile uint32_t EPTSETSTA12_ISOENDPT;  ///< Offset: 0x294 - UDPHS Endpoint Set Status Register (endpoint = 12)
        volatile uint32_t EPTCLRSTA12;  ///< Offset: 0x298 - UDPHS Endpoint Clear Status Register (endpoint = 12)
        volatile uint32_t EPTCLRSTA12_ISOENDPT;  ///< Offset: 0x298 - UDPHS Endpoint Clear Status Register (endpoint = 12)
        volatile uint32_t EPTSTA12;  ///< Offset: 0x29C - UDPHS Endpoint Status Register (endpoint = 12)
        volatile uint32_t EPTSTA12_ISOENDPT;  ///< Offset: 0x29C - UDPHS Endpoint Status Register (endpoint = 12)
        volatile uint32_t EPTCFG13;  ///< Offset: 0x2A0 - UDPHS Endpoint Configuration Register (endpoint = 13)
        volatile uint32_t EPTCTLENB13;  ///< Offset: 0x2A4 - UDPHS Endpoint Control Enable Register (endpoint = 13)
        volatile uint32_t EPTCTLENB13_ISOENDPT;  ///< Offset: 0x2A4 - UDPHS Endpoint Control Enable Register (endpoint = 13)
        volatile uint32_t EPTCTLDIS13;  ///< Offset: 0x2A8 - UDPHS Endpoint Control Disable Register (endpoint = 13)
        volatile uint32_t EPTCTLDIS13_ISOENDPT;  ///< Offset: 0x2A8 - UDPHS Endpoint Control Disable Register (endpoint = 13)
        volatile uint32_t EPTCTL13;  ///< Offset: 0x2AC - UDPHS Endpoint Control Register (endpoint = 13)
        volatile uint32_t EPTCTL13_ISOENDPT;  ///< Offset: 0x2AC - UDPHS Endpoint Control Register (endpoint = 13)
        volatile uint32_t EPTSETSTA13;  ///< Offset: 0x2B4 - UDPHS Endpoint Set Status Register (endpoint = 13)
        volatile uint32_t EPTSETSTA13_ISOENDPT;  ///< Offset: 0x2B4 - UDPHS Endpoint Set Status Register (endpoint = 13)
        volatile uint32_t EPTCLRSTA13;  ///< Offset: 0x2B8 - UDPHS Endpoint Clear Status Register (endpoint = 13)
        volatile uint32_t EPTCLRSTA13_ISOENDPT;  ///< Offset: 0x2B8 - UDPHS Endpoint Clear Status Register (endpoint = 13)
        volatile uint32_t EPTSTA13;  ///< Offset: 0x2BC - UDPHS Endpoint Status Register (endpoint = 13)
        volatile uint32_t EPTSTA13_ISOENDPT;  ///< Offset: 0x2BC - UDPHS Endpoint Status Register (endpoint = 13)
        volatile uint32_t EPTCFG14;  ///< Offset: 0x2C0 - UDPHS Endpoint Configuration Register (endpoint = 14)
        volatile uint32_t EPTCTLENB14;  ///< Offset: 0x2C4 - UDPHS Endpoint Control Enable Register (endpoint = 14)
        volatile uint32_t EPTCTLENB14_ISOENDPT;  ///< Offset: 0x2C4 - UDPHS Endpoint Control Enable Register (endpoint = 14)
        volatile uint32_t EPTCTLDIS14;  ///< Offset: 0x2C8 - UDPHS Endpoint Control Disable Register (endpoint = 14)
        volatile uint32_t EPTCTLDIS14_ISOENDPT;  ///< Offset: 0x2C8 - UDPHS Endpoint Control Disable Register (endpoint = 14)
        volatile uint32_t EPTCTL14;  ///< Offset: 0x2CC - UDPHS Endpoint Control Register (endpoint = 14)
        volatile uint32_t EPTCTL14_ISOENDPT;  ///< Offset: 0x2CC - UDPHS Endpoint Control Register (endpoint = 14)
        volatile uint32_t EPTSETSTA14;  ///< Offset: 0x2D4 - UDPHS Endpoint Set Status Register (endpoint = 14)
        volatile uint32_t EPTSETSTA14_ISOENDPT;  ///< Offset: 0x2D4 - UDPHS Endpoint Set Status Register (endpoint = 14)
        volatile uint32_t EPTCLRSTA14;  ///< Offset: 0x2D8 - UDPHS Endpoint Clear Status Register (endpoint = 14)
        volatile uint32_t EPTCLRSTA14_ISOENDPT;  ///< Offset: 0x2D8 - UDPHS Endpoint Clear Status Register (endpoint = 14)
        volatile uint32_t EPTSTA14;  ///< Offset: 0x2DC - UDPHS Endpoint Status Register (endpoint = 14)
        volatile uint32_t EPTSTA14_ISOENDPT;  ///< Offset: 0x2DC - UDPHS Endpoint Status Register (endpoint = 14)
        volatile uint32_t EPTCFG15;  ///< Offset: 0x2E0 - UDPHS Endpoint Configuration Register (endpoint = 15)
        volatile uint32_t EPTCTLENB15;  ///< Offset: 0x2E4 - UDPHS Endpoint Control Enable Register (endpoint = 15)
        volatile uint32_t EPTCTLENB15_ISOENDPT;  ///< Offset: 0x2E4 - UDPHS Endpoint Control Enable Register (endpoint = 15)
        volatile uint32_t EPTCTLDIS15;  ///< Offset: 0x2E8 - UDPHS Endpoint Control Disable Register (endpoint = 15)
        volatile uint32_t EPTCTLDIS15_ISOENDPT;  ///< Offset: 0x2E8 - UDPHS Endpoint Control Disable Register (endpoint = 15)
        volatile uint32_t EPTCTL15;  ///< Offset: 0x2EC - UDPHS Endpoint Control Register (endpoint = 15)
        volatile uint32_t EPTCTL15_ISOENDPT;  ///< Offset: 0x2EC - UDPHS Endpoint Control Register (endpoint = 15)
        volatile uint32_t EPTSETSTA15;  ///< Offset: 0x2F4 - UDPHS Endpoint Set Status Register (endpoint = 15)
        volatile uint32_t EPTSETSTA15_ISOENDPT;  ///< Offset: 0x2F4 - UDPHS Endpoint Set Status Register (endpoint = 15)
        volatile uint32_t EPTCLRSTA15;  ///< Offset: 0x2F8 - UDPHS Endpoint Clear Status Register (endpoint = 15)
        volatile uint32_t EPTCLRSTA15_ISOENDPT;  ///< Offset: 0x2F8 - UDPHS Endpoint Clear Status Register (endpoint = 15)
        volatile uint32_t EPTSTA15;  ///< Offset: 0x2FC - UDPHS Endpoint Status Register (endpoint = 15)
        volatile uint32_t EPTSTA15_ISOENDPT;  ///< Offset: 0x2FC - UDPHS Endpoint Status Register (endpoint = 15)
        volatile uint32_t DMANXTDSC0;  ///< Offset: 0x300 - UDPHS DMA Next Descriptor Address Register (channel = 0)
        volatile uint32_t DMAADDRESS0;  ///< Offset: 0x304 - UDPHS DMA Channel Address Register (channel = 0)
        volatile uint32_t DMACONTROL0;  ///< Offset: 0x308 - UDPHS DMA Channel Control Register (channel = 0)
        volatile uint32_t DMASTATUS0;  ///< Offset: 0x30C - UDPHS DMA Channel Status Register (channel = 0)
        volatile uint32_t DMANXTDSC1;  ///< Offset: 0x310 - UDPHS DMA Next Descriptor Address Register (channel = 1)
        volatile uint32_t DMAADDRESS1;  ///< Offset: 0x314 - UDPHS DMA Channel Address Register (channel = 1)
        volatile uint32_t DMACONTROL1;  ///< Offset: 0x318 - UDPHS DMA Channel Control Register (channel = 1)
        volatile uint32_t DMASTATUS1;  ///< Offset: 0x31C - UDPHS DMA Channel Status Register (channel = 1)
        volatile uint32_t DMANXTDSC2;  ///< Offset: 0x320 - UDPHS DMA Next Descriptor Address Register (channel = 2)
        volatile uint32_t DMAADDRESS2;  ///< Offset: 0x324 - UDPHS DMA Channel Address Register (channel = 2)
        volatile uint32_t DMACONTROL2;  ///< Offset: 0x328 - UDPHS DMA Channel Control Register (channel = 2)
        volatile uint32_t DMASTATUS2;  ///< Offset: 0x32C - UDPHS DMA Channel Status Register (channel = 2)
        volatile uint32_t DMANXTDSC3;  ///< Offset: 0x330 - UDPHS DMA Next Descriptor Address Register (channel = 3)
        volatile uint32_t DMAADDRESS3;  ///< Offset: 0x334 - UDPHS DMA Channel Address Register (channel = 3)
        volatile uint32_t DMACONTROL3;  ///< Offset: 0x338 - UDPHS DMA Channel Control Register (channel = 3)
        volatile uint32_t DMASTATUS3;  ///< Offset: 0x33C - UDPHS DMA Channel Status Register (channel = 3)
        volatile uint32_t DMANXTDSC4;  ///< Offset: 0x340 - UDPHS DMA Next Descriptor Address Register (channel = 4)
        volatile uint32_t DMAADDRESS4;  ///< Offset: 0x344 - UDPHS DMA Channel Address Register (channel = 4)
        volatile uint32_t DMACONTROL4;  ///< Offset: 0x348 - UDPHS DMA Channel Control Register (channel = 4)
        volatile uint32_t DMASTATUS4;  ///< Offset: 0x34C - UDPHS DMA Channel Status Register (channel = 4)
        volatile uint32_t DMANXTDSC5;  ///< Offset: 0x350 - UDPHS DMA Next Descriptor Address Register (channel = 5)
        volatile uint32_t DMAADDRESS5;  ///< Offset: 0x354 - UDPHS DMA Channel Address Register (channel = 5)
        volatile uint32_t DMACONTROL5;  ///< Offset: 0x358 - UDPHS DMA Channel Control Register (channel = 5)
        volatile uint32_t DMASTATUS5;  ///< Offset: 0x35C - UDPHS DMA Channel Status Register (channel = 5)
        volatile uint32_t DMANXTDSC6;  ///< Offset: 0x360 - UDPHS DMA Next Descriptor Address Register (channel = 6)
        volatile uint32_t DMAADDRESS6;  ///< Offset: 0x364 - UDPHS DMA Channel Address Register (channel = 6)
        volatile uint32_t DMACONTROL6;  ///< Offset: 0x368 - UDPHS DMA Channel Control Register (channel = 6)
        volatile uint32_t DMASTATUS6;  ///< Offset: 0x36C - UDPHS DMA Channel Status Register (channel = 6)
    };

    /// Peripheral instances
    inline Registers* UDPHS = reinterpret_cast<Registers*>(UDPHS_BASE);

    // Bit definitions
    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t DEV_ADDR = (7 << 0);  ///< UDPHS Address
        constexpr uint32_t FADDR_EN = (1U << 7);  ///< Function Address Enable
        constexpr uint32_t EN_UDPHS = (1U << 8);  ///< UDPHS Enable
        constexpr uint32_t DETACH = (1U << 9);  ///< Detach Command
        constexpr uint32_t REWAKEUP = (1U << 10);  ///< Send Remote Wake Up
        constexpr uint32_t PULLD_DIS = (1U << 11);  ///< Pull-Down Disable
    }

    /// FNUM Register bits
    namespace fnum_bits {
        constexpr uint32_t MICRO_FRAME_NUM = (3 << 0);  ///< Microframe Number
        constexpr uint32_t FRAME_NUMBER = (11 << 3);  ///< Frame Number as defined in the Packet Field Formats
        constexpr uint32_t FNUM_ERR = (1U << 31);  ///< Frame Number CRC Error
    }

    /// IEN Register bits
    namespace ien_bits {
        constexpr uint32_t DET_SUSPD = (1U << 1);  ///< Suspend Interrupt Enable
        constexpr uint32_t MICRO_SOF = (1U << 2);  ///< Micro-SOF Interrupt Enable
        constexpr uint32_t INT_SOF = (1U << 3);  ///< SOF Interrupt Enable
        constexpr uint32_t ENDRESET = (1U << 4);  ///< End Of Reset Interrupt Enable
        constexpr uint32_t WAKE_UP = (1U << 5);  ///< Wake Up CPU Interrupt Enable
        constexpr uint32_t ENDOFRSM = (1U << 6);  ///< End Of Resume Interrupt Enable
        constexpr uint32_t UPSTR_RES = (1U << 7);  ///< Upstream Resume Interrupt Enable
        constexpr uint32_t EPT_0 = (1U << 8);  ///< Endpoint 0 Interrupt Enable
        constexpr uint32_t EPT_1 = (1U << 9);  ///< Endpoint 1 Interrupt Enable
        constexpr uint32_t EPT_2 = (1U << 10);  ///< Endpoint 2 Interrupt Enable
        constexpr uint32_t EPT_3 = (1U << 11);  ///< Endpoint 3 Interrupt Enable
        constexpr uint32_t EPT_4 = (1U << 12);  ///< Endpoint 4 Interrupt Enable
        constexpr uint32_t EPT_5 = (1U << 13);  ///< Endpoint 5 Interrupt Enable
        constexpr uint32_t EPT_6 = (1U << 14);  ///< Endpoint 6 Interrupt Enable
        constexpr uint32_t EPT_7 = (1U << 15);  ///< Endpoint 7 Interrupt Enable
        constexpr uint32_t EPT_8 = (1U << 16);  ///< Endpoint 8 Interrupt Enable
        constexpr uint32_t EPT_9 = (1U << 17);  ///< Endpoint 9 Interrupt Enable
        constexpr uint32_t EPT_10 = (1U << 18);  ///< Endpoint 10 Interrupt Enable
        constexpr uint32_t EPT_11 = (1U << 19);  ///< Endpoint 11 Interrupt Enable
        constexpr uint32_t EPT_12 = (1U << 20);  ///< Endpoint 12 Interrupt Enable
        constexpr uint32_t EPT_13 = (1U << 21);  ///< Endpoint 13 Interrupt Enable
        constexpr uint32_t EPT_14 = (1U << 22);  ///< Endpoint 14 Interrupt Enable
        constexpr uint32_t EPT_15 = (1U << 23);  ///< Endpoint 15 Interrupt Enable
        constexpr uint32_t DMA_1 = (1U << 25);  ///< DMA Channel 1 Interrupt Enable
        constexpr uint32_t DMA_2 = (1U << 26);  ///< DMA Channel 2 Interrupt Enable
        constexpr uint32_t DMA_3 = (1U << 27);  ///< DMA Channel 3 Interrupt Enable
        constexpr uint32_t DMA_4 = (1U << 28);  ///< DMA Channel 4 Interrupt Enable
        constexpr uint32_t DMA_5 = (1U << 29);  ///< DMA Channel 5 Interrupt Enable
        constexpr uint32_t DMA_6 = (1U << 30);  ///< DMA Channel 6 Interrupt Enable
        constexpr uint32_t DMA_7 = (1U << 31);  ///< DMA Channel 7 Interrupt Enable
    }

    /// INTSTA Register bits
    namespace intsta_bits {
        constexpr uint32_t SPEED = (1U << 0);  ///< Speed Status
        constexpr uint32_t DET_SUSPD = (1U << 1);  ///< Suspend Interrupt
        constexpr uint32_t MICRO_SOF = (1U << 2);  ///< Micro Start Of Frame Interrupt
        constexpr uint32_t INT_SOF = (1U << 3);  ///< Start Of Frame Interrupt
        constexpr uint32_t ENDRESET = (1U << 4);  ///< End Of Reset Interrupt
        constexpr uint32_t WAKE_UP = (1U << 5);  ///< Wake Up CPU Interrupt
        constexpr uint32_t ENDOFRSM = (1U << 6);  ///< End Of Resume Interrupt
        constexpr uint32_t UPSTR_RES = (1U << 7);  ///< Upstream Resume Interrupt
        constexpr uint32_t EPT_0 = (1U << 8);  ///< Endpoint 0 Interrupt
        constexpr uint32_t EPT_1 = (1U << 9);  ///< Endpoint 1 Interrupt
        constexpr uint32_t EPT_2 = (1U << 10);  ///< Endpoint 2 Interrupt
        constexpr uint32_t EPT_3 = (1U << 11);  ///< Endpoint 3 Interrupt
        constexpr uint32_t EPT_4 = (1U << 12);  ///< Endpoint 4 Interrupt
        constexpr uint32_t EPT_5 = (1U << 13);  ///< Endpoint 5 Interrupt
        constexpr uint32_t EPT_6 = (1U << 14);  ///< Endpoint 6 Interrupt
        constexpr uint32_t EPT_7 = (1U << 15);  ///< Endpoint 7 Interrupt
        constexpr uint32_t EPT_8 = (1U << 16);  ///< Endpoint 8 Interrupt
        constexpr uint32_t EPT_9 = (1U << 17);  ///< Endpoint 9 Interrupt
        constexpr uint32_t EPT_10 = (1U << 18);  ///< Endpoint 10 Interrupt
        constexpr uint32_t EPT_11 = (1U << 19);  ///< Endpoint 11 Interrupt
        constexpr uint32_t EPT_12 = (1U << 20);  ///< Endpoint 12 Interrupt
        constexpr uint32_t EPT_13 = (1U << 21);  ///< Endpoint 13 Interrupt
        constexpr uint32_t EPT_14 = (1U << 22);  ///< Endpoint 14 Interrupt
        constexpr uint32_t EPT_15 = (1U << 23);  ///< Endpoint 15 Interrupt
        constexpr uint32_t DMA_1 = (1U << 25);  ///< DMA Channel 1 Interrupt
        constexpr uint32_t DMA_2 = (1U << 26);  ///< DMA Channel 2 Interrupt
        constexpr uint32_t DMA_3 = (1U << 27);  ///< DMA Channel 3 Interrupt
        constexpr uint32_t DMA_4 = (1U << 28);  ///< DMA Channel 4 Interrupt
        constexpr uint32_t DMA_5 = (1U << 29);  ///< DMA Channel 5 Interrupt
        constexpr uint32_t DMA_6 = (1U << 30);  ///< DMA Channel 6 Interrupt
        constexpr uint32_t DMA_7 = (1U << 31);  ///< DMA Channel 7 Interrupt
    }

    /// CLRINT Register bits
    namespace clrint_bits {
        constexpr uint32_t DET_SUSPD = (1U << 1);  ///< Suspend Interrupt Clear
        constexpr uint32_t MICRO_SOF = (1U << 2);  ///< Micro Start Of Frame Interrupt Clear
        constexpr uint32_t INT_SOF = (1U << 3);  ///< Start Of Frame Interrupt Clear
        constexpr uint32_t ENDRESET = (1U << 4);  ///< End Of Reset Interrupt Clear
        constexpr uint32_t WAKE_UP = (1U << 5);  ///< Wake Up CPU Interrupt Clear
        constexpr uint32_t ENDOFRSM = (1U << 6);  ///< End Of Resume Interrupt Clear
        constexpr uint32_t UPSTR_RES = (1U << 7);  ///< Upstream Resume Interrupt Clear
    }

    /// EPTRST Register bits
    namespace eptrst_bits {
        constexpr uint32_t EPT_0 = (1U << 0);  ///< Endpoint 0 Reset
        constexpr uint32_t EPT_1 = (1U << 1);  ///< Endpoint 1 Reset
        constexpr uint32_t EPT_2 = (1U << 2);  ///< Endpoint 2 Reset
        constexpr uint32_t EPT_3 = (1U << 3);  ///< Endpoint 3 Reset
        constexpr uint32_t EPT_4 = (1U << 4);  ///< Endpoint 4 Reset
        constexpr uint32_t EPT_5 = (1U << 5);  ///< Endpoint 5 Reset
        constexpr uint32_t EPT_6 = (1U << 6);  ///< Endpoint 6 Reset
        constexpr uint32_t EPT_7 = (1U << 7);  ///< Endpoint 7 Reset
        constexpr uint32_t EPT_8 = (1U << 8);  ///< Endpoint 8 Reset
        constexpr uint32_t EPT_9 = (1U << 9);  ///< Endpoint 9 Reset
        constexpr uint32_t EPT_10 = (1U << 10);  ///< Endpoint 10 Reset
        constexpr uint32_t EPT_11 = (1U << 11);  ///< Endpoint 11 Reset
        constexpr uint32_t EPT_12 = (1U << 12);  ///< Endpoint 12 Reset
        constexpr uint32_t EPT_13 = (1U << 13);  ///< Endpoint 13 Reset
        constexpr uint32_t EPT_14 = (1U << 14);  ///< Endpoint 14 Reset
        constexpr uint32_t EPT_15 = (1U << 15);  ///< Endpoint 15 Reset
    }

    /// TST Register bits
    namespace tst_bits {
        constexpr uint32_t SPEED_CFG = (2 << 0);  ///< Speed Configuration
        constexpr uint32_t TST_J = (1U << 2);  ///< Test J Mode
        constexpr uint32_t TST_K = (1U << 3);  ///< Test K Mode
        constexpr uint32_t TST_PKT = (1U << 4);  ///< Test Packet Mode
        constexpr uint32_t OPMODE2 = (1U << 5);  ///< OpMode2
    }

    /// EPTCFG0 Register bits
    namespace eptcfg0_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB0 Register bits
    namespace eptctlenb0_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB0_ISOENDPT Register bits
    namespace eptctlenb0_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS0 Register bits
    namespace eptctldis0_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS0_ISOENDPT Register bits
    namespace eptctldis0_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL0 Register bits
    namespace eptctl0_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL0_ISOENDPT Register bits
    namespace eptctl0_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA0 Register bits
    namespace eptsetsta0_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA0_ISOENDPT Register bits
    namespace eptsetsta0_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA0 Register bits
    namespace eptclrsta0_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA0_ISOENDPT Register bits
    namespace eptclrsta0_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA0 Register bits
    namespace eptsta0_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA0_ISOENDPT Register bits
    namespace eptsta0_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG1 Register bits
    namespace eptcfg1_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB1 Register bits
    namespace eptctlenb1_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB1_ISOENDPT Register bits
    namespace eptctlenb1_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS1 Register bits
    namespace eptctldis1_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS1_ISOENDPT Register bits
    namespace eptctldis1_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL1 Register bits
    namespace eptctl1_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL1_ISOENDPT Register bits
    namespace eptctl1_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA1 Register bits
    namespace eptsetsta1_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA1_ISOENDPT Register bits
    namespace eptsetsta1_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA1 Register bits
    namespace eptclrsta1_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA1_ISOENDPT Register bits
    namespace eptclrsta1_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA1 Register bits
    namespace eptsta1_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA1_ISOENDPT Register bits
    namespace eptsta1_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG2 Register bits
    namespace eptcfg2_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB2 Register bits
    namespace eptctlenb2_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB2_ISOENDPT Register bits
    namespace eptctlenb2_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS2 Register bits
    namespace eptctldis2_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS2_ISOENDPT Register bits
    namespace eptctldis2_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL2 Register bits
    namespace eptctl2_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL2_ISOENDPT Register bits
    namespace eptctl2_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA2 Register bits
    namespace eptsetsta2_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA2_ISOENDPT Register bits
    namespace eptsetsta2_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA2 Register bits
    namespace eptclrsta2_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA2_ISOENDPT Register bits
    namespace eptclrsta2_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA2 Register bits
    namespace eptsta2_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA2_ISOENDPT Register bits
    namespace eptsta2_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG3 Register bits
    namespace eptcfg3_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB3 Register bits
    namespace eptctlenb3_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB3_ISOENDPT Register bits
    namespace eptctlenb3_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS3 Register bits
    namespace eptctldis3_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS3_ISOENDPT Register bits
    namespace eptctldis3_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL3 Register bits
    namespace eptctl3_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL3_ISOENDPT Register bits
    namespace eptctl3_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA3 Register bits
    namespace eptsetsta3_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA3_ISOENDPT Register bits
    namespace eptsetsta3_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA3 Register bits
    namespace eptclrsta3_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA3_ISOENDPT Register bits
    namespace eptclrsta3_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA3 Register bits
    namespace eptsta3_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA3_ISOENDPT Register bits
    namespace eptsta3_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG4 Register bits
    namespace eptcfg4_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB4 Register bits
    namespace eptctlenb4_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB4_ISOENDPT Register bits
    namespace eptctlenb4_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS4 Register bits
    namespace eptctldis4_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS4_ISOENDPT Register bits
    namespace eptctldis4_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL4 Register bits
    namespace eptctl4_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL4_ISOENDPT Register bits
    namespace eptctl4_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA4 Register bits
    namespace eptsetsta4_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA4_ISOENDPT Register bits
    namespace eptsetsta4_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA4 Register bits
    namespace eptclrsta4_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA4_ISOENDPT Register bits
    namespace eptclrsta4_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA4 Register bits
    namespace eptsta4_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA4_ISOENDPT Register bits
    namespace eptsta4_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG5 Register bits
    namespace eptcfg5_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB5 Register bits
    namespace eptctlenb5_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB5_ISOENDPT Register bits
    namespace eptctlenb5_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS5 Register bits
    namespace eptctldis5_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS5_ISOENDPT Register bits
    namespace eptctldis5_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL5 Register bits
    namespace eptctl5_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL5_ISOENDPT Register bits
    namespace eptctl5_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA5 Register bits
    namespace eptsetsta5_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA5_ISOENDPT Register bits
    namespace eptsetsta5_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA5 Register bits
    namespace eptclrsta5_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA5_ISOENDPT Register bits
    namespace eptclrsta5_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA5 Register bits
    namespace eptsta5_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA5_ISOENDPT Register bits
    namespace eptsta5_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG6 Register bits
    namespace eptcfg6_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB6 Register bits
    namespace eptctlenb6_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB6_ISOENDPT Register bits
    namespace eptctlenb6_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS6 Register bits
    namespace eptctldis6_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS6_ISOENDPT Register bits
    namespace eptctldis6_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL6 Register bits
    namespace eptctl6_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL6_ISOENDPT Register bits
    namespace eptctl6_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA6 Register bits
    namespace eptsetsta6_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA6_ISOENDPT Register bits
    namespace eptsetsta6_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA6 Register bits
    namespace eptclrsta6_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA6_ISOENDPT Register bits
    namespace eptclrsta6_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA6 Register bits
    namespace eptsta6_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA6_ISOENDPT Register bits
    namespace eptsta6_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG7 Register bits
    namespace eptcfg7_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB7 Register bits
    namespace eptctlenb7_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB7_ISOENDPT Register bits
    namespace eptctlenb7_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS7 Register bits
    namespace eptctldis7_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS7_ISOENDPT Register bits
    namespace eptctldis7_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL7 Register bits
    namespace eptctl7_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL7_ISOENDPT Register bits
    namespace eptctl7_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA7 Register bits
    namespace eptsetsta7_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA7_ISOENDPT Register bits
    namespace eptsetsta7_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA7 Register bits
    namespace eptclrsta7_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA7_ISOENDPT Register bits
    namespace eptclrsta7_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA7 Register bits
    namespace eptsta7_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA7_ISOENDPT Register bits
    namespace eptsta7_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG8 Register bits
    namespace eptcfg8_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB8 Register bits
    namespace eptctlenb8_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB8_ISOENDPT Register bits
    namespace eptctlenb8_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS8 Register bits
    namespace eptctldis8_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS8_ISOENDPT Register bits
    namespace eptctldis8_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL8 Register bits
    namespace eptctl8_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL8_ISOENDPT Register bits
    namespace eptctl8_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA8 Register bits
    namespace eptsetsta8_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA8_ISOENDPT Register bits
    namespace eptsetsta8_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA8 Register bits
    namespace eptclrsta8_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA8_ISOENDPT Register bits
    namespace eptclrsta8_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA8 Register bits
    namespace eptsta8_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA8_ISOENDPT Register bits
    namespace eptsta8_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG9 Register bits
    namespace eptcfg9_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB9 Register bits
    namespace eptctlenb9_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB9_ISOENDPT Register bits
    namespace eptctlenb9_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS9 Register bits
    namespace eptctldis9_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS9_ISOENDPT Register bits
    namespace eptctldis9_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL9 Register bits
    namespace eptctl9_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL9_ISOENDPT Register bits
    namespace eptctl9_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA9 Register bits
    namespace eptsetsta9_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA9_ISOENDPT Register bits
    namespace eptsetsta9_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA9 Register bits
    namespace eptclrsta9_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA9_ISOENDPT Register bits
    namespace eptclrsta9_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA9 Register bits
    namespace eptsta9_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA9_ISOENDPT Register bits
    namespace eptsta9_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG10 Register bits
    namespace eptcfg10_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB10 Register bits
    namespace eptctlenb10_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB10_ISOENDPT Register bits
    namespace eptctlenb10_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS10 Register bits
    namespace eptctldis10_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS10_ISOENDPT Register bits
    namespace eptctldis10_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL10 Register bits
    namespace eptctl10_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL10_ISOENDPT Register bits
    namespace eptctl10_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA10 Register bits
    namespace eptsetsta10_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA10_ISOENDPT Register bits
    namespace eptsetsta10_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA10 Register bits
    namespace eptclrsta10_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA10_ISOENDPT Register bits
    namespace eptclrsta10_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA10 Register bits
    namespace eptsta10_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA10_ISOENDPT Register bits
    namespace eptsta10_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG11 Register bits
    namespace eptcfg11_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB11 Register bits
    namespace eptctlenb11_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB11_ISOENDPT Register bits
    namespace eptctlenb11_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS11 Register bits
    namespace eptctldis11_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS11_ISOENDPT Register bits
    namespace eptctldis11_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL11 Register bits
    namespace eptctl11_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL11_ISOENDPT Register bits
    namespace eptctl11_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA11 Register bits
    namespace eptsetsta11_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA11_ISOENDPT Register bits
    namespace eptsetsta11_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA11 Register bits
    namespace eptclrsta11_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA11_ISOENDPT Register bits
    namespace eptclrsta11_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA11 Register bits
    namespace eptsta11_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA11_ISOENDPT Register bits
    namespace eptsta11_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG12 Register bits
    namespace eptcfg12_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB12 Register bits
    namespace eptctlenb12_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB12_ISOENDPT Register bits
    namespace eptctlenb12_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS12 Register bits
    namespace eptctldis12_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS12_ISOENDPT Register bits
    namespace eptctldis12_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL12 Register bits
    namespace eptctl12_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL12_ISOENDPT Register bits
    namespace eptctl12_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA12 Register bits
    namespace eptsetsta12_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA12_ISOENDPT Register bits
    namespace eptsetsta12_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA12 Register bits
    namespace eptclrsta12_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA12_ISOENDPT Register bits
    namespace eptclrsta12_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA12 Register bits
    namespace eptsta12_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA12_ISOENDPT Register bits
    namespace eptsta12_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG13 Register bits
    namespace eptcfg13_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB13 Register bits
    namespace eptctlenb13_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB13_ISOENDPT Register bits
    namespace eptctlenb13_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS13 Register bits
    namespace eptctldis13_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS13_ISOENDPT Register bits
    namespace eptctldis13_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL13 Register bits
    namespace eptctl13_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL13_ISOENDPT Register bits
    namespace eptctl13_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA13 Register bits
    namespace eptsetsta13_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA13_ISOENDPT Register bits
    namespace eptsetsta13_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA13 Register bits
    namespace eptclrsta13_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA13_ISOENDPT Register bits
    namespace eptclrsta13_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA13 Register bits
    namespace eptsta13_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA13_ISOENDPT Register bits
    namespace eptsta13_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG14 Register bits
    namespace eptcfg14_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB14 Register bits
    namespace eptctlenb14_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB14_ISOENDPT Register bits
    namespace eptctlenb14_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS14 Register bits
    namespace eptctldis14_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS14_ISOENDPT Register bits
    namespace eptctldis14_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL14 Register bits
    namespace eptctl14_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL14_ISOENDPT Register bits
    namespace eptctl14_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA14 Register bits
    namespace eptsetsta14_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA14_ISOENDPT Register bits
    namespace eptsetsta14_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA14 Register bits
    namespace eptclrsta14_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA14_ISOENDPT Register bits
    namespace eptclrsta14_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA14 Register bits
    namespace eptsta14_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA14_ISOENDPT Register bits
    namespace eptsta14_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTCFG15 Register bits
    namespace eptcfg15_bits {
        constexpr uint32_t EPT_SIZE = (3 << 0);  ///< Endpoint Size
        constexpr uint32_t EPT_DIR = (1U << 3);  ///< Endpoint Direction
        constexpr uint32_t EPT_TYPE = (2 << 4);  ///< Endpoint Type
        constexpr uint32_t BK_NUMBER = (2 << 6);  ///< Number of Banks
        constexpr uint32_t NB_TRANS = (2 << 8);  ///< Number Of Transaction per Microframe
        constexpr uint32_t EPT_MAPD = (1U << 31);  ///< Endpoint Mapped
    }

    /// EPTCTLENB15 Register bits
    namespace eptctlenb15_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLENB15_ISOENDPT Register bits
    namespace eptctlenb15_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enable (Only for high bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Send/Short Packet Interrupt Enable
    }

    /// EPTCTLDIS15 Register bits
    namespace eptctldis15_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Enable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Disable
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Disable
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Disable
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Disable
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTLDIS15_ISOENDPT Register bits
    namespace eptctldis15_isoendpt_bits {
        constexpr uint32_t EPT_DISABL = (1U << 0);  ///< Endpoint Disable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Disable
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupts Disable DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Disable (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Disable
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Disable
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Disable
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Disable
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Disable
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< bank flush error Interrupt Disable
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Disable
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Disable
    }

    /// EPTCTL15 Register bits
    namespace eptctl15_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled (Not for CONTROL Endpoints)
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t NYET_DIS = (1U << 4);  ///< NYET Disable (Only for High Speed Bulk OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Interrupt Enabled
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Interrupt Enabled
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Interrupt Enabled
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Interrupt Enabled
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTCTL15_ISOENDPT Register bits
    namespace eptctl15_isoendpt_bits {
        constexpr uint32_t EPT_ENABL = (1U << 0);  ///< Endpoint Enable
        constexpr uint32_t AUTO_VALID = (1U << 1);  ///< Packet Auto-Valid Enabled
        constexpr uint32_t INTDIS_DMA = (1U << 3);  ///< Interrupt Disables DMA
        constexpr uint32_t DATAX_RX = (1U << 6);  ///< DATAx Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t MDATA_RX = (1U << 7);  ///< MDATA Interrupt Enabled (Only for High Bandwidth Isochronous OUT endpoints)
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error Interrupt Enabled
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Interrupt Enabled
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Interrupt Enabled
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Interrupt Enabled
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< ISO CRC Error/Number of Transaction Error Interrupt Enabled
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Interrupt Enabled
        constexpr uint32_t BUSY_BANK = (1U << 18);  ///< Busy Bank Interrupt Enabled
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet Interrupt Enabled
    }

    /// EPTSETSTA15 Register bits
    namespace eptsetsta15_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Set
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTSETSTA15_ISOENDPT Register bits
    namespace eptsetsta15_isoendpt_bits {
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< KILL Bank Set (for IN Endpoint)
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready Set
    }

    /// EPTCLRSTA15 Register bits
    namespace eptclrsta15_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request Clear
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP Clear
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent Clear
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAKIN Clear
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAKOUT Clear
    }

    /// EPTCLRSTA15_ISOENDPT Register bits
    namespace eptclrsta15_isoendpt_bits {
        constexpr uint32_t TOGGLESQ = (1U << 6);  ///< Data Toggle Clear
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data Clear
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete Clear
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow Clear
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< Number of Transaction Error Clear
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error Clear
    }

    /// EPTSTA15 Register bits
    namespace eptsta15_bits {
        constexpr uint32_t FRCESTALL = (1U << 5);  ///< Stall Handshake Request
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY = (1U << 11);  ///< TX Packet Ready
        constexpr uint32_t RX_SETUP = (1U << 12);  ///< Received SETUP
        constexpr uint32_t STALL_SNT = (1U << 13);  ///< Stall Sent
        constexpr uint32_t NAK_IN = (1U << 14);  ///< NAK IN
        constexpr uint32_t NAK_OUT = (1U << 15);  ///< NAK OUT
        constexpr uint32_t CURBK_CTLDIR = (2 << 16);  ///< Current Bank/Control Direction
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// EPTSTA15_ISOENDPT Register bits
    namespace eptsta15_isoendpt_bits {
        constexpr uint32_t TOGGLESQ_STA = (2 << 6);  ///< Toggle Sequencing
        constexpr uint32_t ERR_OVFLW = (1U << 8);  ///< Overflow Error
        constexpr uint32_t RXRDY_TXKL = (1U << 9);  ///< Received OUT Data/KILL Bank
        constexpr uint32_t TX_COMPLT = (1U << 10);  ///< Transmitted IN Data Complete
        constexpr uint32_t TXRDY_TRER = (1U << 11);  ///< TX Packet Ready/Transaction Error
        constexpr uint32_t ERR_FL_ISO = (1U << 12);  ///< Error Flow
        constexpr uint32_t ERR_CRC_NTR = (1U << 13);  ///< CRC ISO Error/Number of Transaction Error
        constexpr uint32_t ERR_FLUSH = (1U << 14);  ///< Bank Flush Error
        constexpr uint32_t CURBK = (2 << 16);  ///< Current Bank
        constexpr uint32_t BUSY_BANK_STA = (2 << 18);  ///< Busy Bank Number
        constexpr uint32_t BYTE_COUNT = (11 << 20);  ///< UDPHS Byte Count
        constexpr uint32_t SHRT_PCKT = (1U << 31);  ///< Short Packet
    }

    /// DMANXTDSC0 Register bits
    namespace dmanxtdsc0_bits {
        constexpr uint32_t NXT_DSC_ADD = (32 << 0);  ///< Next Descriptor Address
    }

    /// DMAADDRESS0 Register bits
    namespace dmaaddress0_bits {
        constexpr uint32_t BUFF_ADD = (32 << 0);  ///< Buffer Address
    }

    /// DMACONTROL0 Register bits
    namespace dmacontrol0_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< (Channel Enable Command)
        constexpr uint32_t LDNXT_DSC = (1U << 1);  ///< Load Next Channel Transfer Descriptor Enable (Command)
        constexpr uint32_t END_TR_EN = (1U << 2);  ///< End of Transfer Enable (Control)
        constexpr uint32_t END_B_EN = (1U << 3);  ///< End of Buffer Enable (Control)
        constexpr uint32_t END_TR_IT = (1U << 4);  ///< End of Transfer Interrupt Enable
        constexpr uint32_t END_BUFFIT = (1U << 5);  ///< End of Buffer Interrupt Enable
        constexpr uint32_t DESC_LD_IT = (1U << 6);  ///< Descriptor Loaded Interrupt Enable
        constexpr uint32_t BURST_LCK = (1U << 7);  ///< Burst Lock Enable
        constexpr uint32_t BUFF_LENGTH = (16 << 16);  ///< Buffer Byte Length (Write-only)
    }

    /// DMASTATUS0 Register bits
    namespace dmastatus0_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< Channel Enable Status
        constexpr uint32_t CHANN_ACT = (1U << 1);  ///< Channel Active Status
        constexpr uint32_t END_TR_ST = (1U << 4);  ///< End of Channel Transfer Status
        constexpr uint32_t END_BF_ST = (1U << 5);  ///< End of Channel Buffer Status
        constexpr uint32_t DESC_LDST = (1U << 6);  ///< Descriptor Loaded Status
        constexpr uint32_t BUFF_COUNT = (16 << 16);  ///< Buffer Byte Count
    }

    /// DMANXTDSC1 Register bits
    namespace dmanxtdsc1_bits {
        constexpr uint32_t NXT_DSC_ADD = (32 << 0);  ///< Next Descriptor Address
    }

    /// DMAADDRESS1 Register bits
    namespace dmaaddress1_bits {
        constexpr uint32_t BUFF_ADD = (32 << 0);  ///< Buffer Address
    }

    /// DMACONTROL1 Register bits
    namespace dmacontrol1_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< (Channel Enable Command)
        constexpr uint32_t LDNXT_DSC = (1U << 1);  ///< Load Next Channel Transfer Descriptor Enable (Command)
        constexpr uint32_t END_TR_EN = (1U << 2);  ///< End of Transfer Enable (Control)
        constexpr uint32_t END_B_EN = (1U << 3);  ///< End of Buffer Enable (Control)
        constexpr uint32_t END_TR_IT = (1U << 4);  ///< End of Transfer Interrupt Enable
        constexpr uint32_t END_BUFFIT = (1U << 5);  ///< End of Buffer Interrupt Enable
        constexpr uint32_t DESC_LD_IT = (1U << 6);  ///< Descriptor Loaded Interrupt Enable
        constexpr uint32_t BURST_LCK = (1U << 7);  ///< Burst Lock Enable
        constexpr uint32_t BUFF_LENGTH = (16 << 16);  ///< Buffer Byte Length (Write-only)
    }

    /// DMASTATUS1 Register bits
    namespace dmastatus1_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< Channel Enable Status
        constexpr uint32_t CHANN_ACT = (1U << 1);  ///< Channel Active Status
        constexpr uint32_t END_TR_ST = (1U << 4);  ///< End of Channel Transfer Status
        constexpr uint32_t END_BF_ST = (1U << 5);  ///< End of Channel Buffer Status
        constexpr uint32_t DESC_LDST = (1U << 6);  ///< Descriptor Loaded Status
        constexpr uint32_t BUFF_COUNT = (16 << 16);  ///< Buffer Byte Count
    }

    /// DMANXTDSC2 Register bits
    namespace dmanxtdsc2_bits {
        constexpr uint32_t NXT_DSC_ADD = (32 << 0);  ///< Next Descriptor Address
    }

    /// DMAADDRESS2 Register bits
    namespace dmaaddress2_bits {
        constexpr uint32_t BUFF_ADD = (32 << 0);  ///< Buffer Address
    }

    /// DMACONTROL2 Register bits
    namespace dmacontrol2_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< (Channel Enable Command)
        constexpr uint32_t LDNXT_DSC = (1U << 1);  ///< Load Next Channel Transfer Descriptor Enable (Command)
        constexpr uint32_t END_TR_EN = (1U << 2);  ///< End of Transfer Enable (Control)
        constexpr uint32_t END_B_EN = (1U << 3);  ///< End of Buffer Enable (Control)
        constexpr uint32_t END_TR_IT = (1U << 4);  ///< End of Transfer Interrupt Enable
        constexpr uint32_t END_BUFFIT = (1U << 5);  ///< End of Buffer Interrupt Enable
        constexpr uint32_t DESC_LD_IT = (1U << 6);  ///< Descriptor Loaded Interrupt Enable
        constexpr uint32_t BURST_LCK = (1U << 7);  ///< Burst Lock Enable
        constexpr uint32_t BUFF_LENGTH = (16 << 16);  ///< Buffer Byte Length (Write-only)
    }

    /// DMASTATUS2 Register bits
    namespace dmastatus2_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< Channel Enable Status
        constexpr uint32_t CHANN_ACT = (1U << 1);  ///< Channel Active Status
        constexpr uint32_t END_TR_ST = (1U << 4);  ///< End of Channel Transfer Status
        constexpr uint32_t END_BF_ST = (1U << 5);  ///< End of Channel Buffer Status
        constexpr uint32_t DESC_LDST = (1U << 6);  ///< Descriptor Loaded Status
        constexpr uint32_t BUFF_COUNT = (16 << 16);  ///< Buffer Byte Count
    }

    /// DMANXTDSC3 Register bits
    namespace dmanxtdsc3_bits {
        constexpr uint32_t NXT_DSC_ADD = (32 << 0);  ///< Next Descriptor Address
    }

    /// DMAADDRESS3 Register bits
    namespace dmaaddress3_bits {
        constexpr uint32_t BUFF_ADD = (32 << 0);  ///< Buffer Address
    }

    /// DMACONTROL3 Register bits
    namespace dmacontrol3_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< (Channel Enable Command)
        constexpr uint32_t LDNXT_DSC = (1U << 1);  ///< Load Next Channel Transfer Descriptor Enable (Command)
        constexpr uint32_t END_TR_EN = (1U << 2);  ///< End of Transfer Enable (Control)
        constexpr uint32_t END_B_EN = (1U << 3);  ///< End of Buffer Enable (Control)
        constexpr uint32_t END_TR_IT = (1U << 4);  ///< End of Transfer Interrupt Enable
        constexpr uint32_t END_BUFFIT = (1U << 5);  ///< End of Buffer Interrupt Enable
        constexpr uint32_t DESC_LD_IT = (1U << 6);  ///< Descriptor Loaded Interrupt Enable
        constexpr uint32_t BURST_LCK = (1U << 7);  ///< Burst Lock Enable
        constexpr uint32_t BUFF_LENGTH = (16 << 16);  ///< Buffer Byte Length (Write-only)
    }

    /// DMASTATUS3 Register bits
    namespace dmastatus3_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< Channel Enable Status
        constexpr uint32_t CHANN_ACT = (1U << 1);  ///< Channel Active Status
        constexpr uint32_t END_TR_ST = (1U << 4);  ///< End of Channel Transfer Status
        constexpr uint32_t END_BF_ST = (1U << 5);  ///< End of Channel Buffer Status
        constexpr uint32_t DESC_LDST = (1U << 6);  ///< Descriptor Loaded Status
        constexpr uint32_t BUFF_COUNT = (16 << 16);  ///< Buffer Byte Count
    }

    /// DMANXTDSC4 Register bits
    namespace dmanxtdsc4_bits {
        constexpr uint32_t NXT_DSC_ADD = (32 << 0);  ///< Next Descriptor Address
    }

    /// DMAADDRESS4 Register bits
    namespace dmaaddress4_bits {
        constexpr uint32_t BUFF_ADD = (32 << 0);  ///< Buffer Address
    }

    /// DMACONTROL4 Register bits
    namespace dmacontrol4_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< (Channel Enable Command)
        constexpr uint32_t LDNXT_DSC = (1U << 1);  ///< Load Next Channel Transfer Descriptor Enable (Command)
        constexpr uint32_t END_TR_EN = (1U << 2);  ///< End of Transfer Enable (Control)
        constexpr uint32_t END_B_EN = (1U << 3);  ///< End of Buffer Enable (Control)
        constexpr uint32_t END_TR_IT = (1U << 4);  ///< End of Transfer Interrupt Enable
        constexpr uint32_t END_BUFFIT = (1U << 5);  ///< End of Buffer Interrupt Enable
        constexpr uint32_t DESC_LD_IT = (1U << 6);  ///< Descriptor Loaded Interrupt Enable
        constexpr uint32_t BURST_LCK = (1U << 7);  ///< Burst Lock Enable
        constexpr uint32_t BUFF_LENGTH = (16 << 16);  ///< Buffer Byte Length (Write-only)
    }

    /// DMASTATUS4 Register bits
    namespace dmastatus4_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< Channel Enable Status
        constexpr uint32_t CHANN_ACT = (1U << 1);  ///< Channel Active Status
        constexpr uint32_t END_TR_ST = (1U << 4);  ///< End of Channel Transfer Status
        constexpr uint32_t END_BF_ST = (1U << 5);  ///< End of Channel Buffer Status
        constexpr uint32_t DESC_LDST = (1U << 6);  ///< Descriptor Loaded Status
        constexpr uint32_t BUFF_COUNT = (16 << 16);  ///< Buffer Byte Count
    }

    /// DMANXTDSC5 Register bits
    namespace dmanxtdsc5_bits {
        constexpr uint32_t NXT_DSC_ADD = (32 << 0);  ///< Next Descriptor Address
    }

    /// DMAADDRESS5 Register bits
    namespace dmaaddress5_bits {
        constexpr uint32_t BUFF_ADD = (32 << 0);  ///< Buffer Address
    }

    /// DMACONTROL5 Register bits
    namespace dmacontrol5_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< (Channel Enable Command)
        constexpr uint32_t LDNXT_DSC = (1U << 1);  ///< Load Next Channel Transfer Descriptor Enable (Command)
        constexpr uint32_t END_TR_EN = (1U << 2);  ///< End of Transfer Enable (Control)
        constexpr uint32_t END_B_EN = (1U << 3);  ///< End of Buffer Enable (Control)
        constexpr uint32_t END_TR_IT = (1U << 4);  ///< End of Transfer Interrupt Enable
        constexpr uint32_t END_BUFFIT = (1U << 5);  ///< End of Buffer Interrupt Enable
        constexpr uint32_t DESC_LD_IT = (1U << 6);  ///< Descriptor Loaded Interrupt Enable
        constexpr uint32_t BURST_LCK = (1U << 7);  ///< Burst Lock Enable
        constexpr uint32_t BUFF_LENGTH = (16 << 16);  ///< Buffer Byte Length (Write-only)
    }

    /// DMASTATUS5 Register bits
    namespace dmastatus5_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< Channel Enable Status
        constexpr uint32_t CHANN_ACT = (1U << 1);  ///< Channel Active Status
        constexpr uint32_t END_TR_ST = (1U << 4);  ///< End of Channel Transfer Status
        constexpr uint32_t END_BF_ST = (1U << 5);  ///< End of Channel Buffer Status
        constexpr uint32_t DESC_LDST = (1U << 6);  ///< Descriptor Loaded Status
        constexpr uint32_t BUFF_COUNT = (16 << 16);  ///< Buffer Byte Count
    }

    /// DMANXTDSC6 Register bits
    namespace dmanxtdsc6_bits {
        constexpr uint32_t NXT_DSC_ADD = (32 << 0);  ///< Next Descriptor Address
    }

    /// DMAADDRESS6 Register bits
    namespace dmaaddress6_bits {
        constexpr uint32_t BUFF_ADD = (32 << 0);  ///< Buffer Address
    }

    /// DMACONTROL6 Register bits
    namespace dmacontrol6_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< (Channel Enable Command)
        constexpr uint32_t LDNXT_DSC = (1U << 1);  ///< Load Next Channel Transfer Descriptor Enable (Command)
        constexpr uint32_t END_TR_EN = (1U << 2);  ///< End of Transfer Enable (Control)
        constexpr uint32_t END_B_EN = (1U << 3);  ///< End of Buffer Enable (Control)
        constexpr uint32_t END_TR_IT = (1U << 4);  ///< End of Transfer Interrupt Enable
        constexpr uint32_t END_BUFFIT = (1U << 5);  ///< End of Buffer Interrupt Enable
        constexpr uint32_t DESC_LD_IT = (1U << 6);  ///< Descriptor Loaded Interrupt Enable
        constexpr uint32_t BURST_LCK = (1U << 7);  ///< Burst Lock Enable
        constexpr uint32_t BUFF_LENGTH = (16 << 16);  ///< Buffer Byte Length (Write-only)
    }

    /// DMASTATUS6 Register bits
    namespace dmastatus6_bits {
        constexpr uint32_t CHANN_ENB = (1U << 0);  ///< Channel Enable Status
        constexpr uint32_t CHANN_ACT = (1U << 1);  ///< Channel Active Status
        constexpr uint32_t END_TR_ST = (1U << 4);  ///< End of Channel Transfer Status
        constexpr uint32_t END_BF_ST = (1U << 5);  ///< End of Channel Buffer Status
        constexpr uint32_t DESC_LDST = (1U << 6);  ///< Descriptor Loaded Status
        constexpr uint32_t BUFF_COUNT = (16 << 16);  ///< Buffer Byte Count
    }

}

// ============================================================================
// RNG Peripheral
// ============================================================================

namespace rng {
    /// Base addresses
    constexpr uint32_t TRNG_BASE = 0xF8040000;

    /// RNG Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t IER;  ///< Offset: 0x10 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x14 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x1C - Interrupt Status Register
        volatile uint32_t ODATA;  ///< Offset: 0x50 - Output Data Register
    };

    /// Peripheral instances
    inline Registers* TRNG = reinterpret_cast<Registers*>(TRNG_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Enables the TRNG to provide random values
        constexpr uint32_t KEY = (24 << 8);  ///< Security Key
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t DATRDY = (1U << 0);  ///< Data Ready Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t DATRDY = (1U << 0);  ///< Data Ready Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t DATRDY = (1U << 0);  ///< Data Ready Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t DATRDY = (1U << 0);  ///< Data Ready
    }

    /// ODATA Register bits
    namespace odata_bits {
        constexpr uint32_t ODATA = (32 << 0);  ///< Output Data
    }

}

// ============================================================================
// FUSE Peripheral
// ============================================================================

namespace fuse {
    /// Base addresses
    constexpr uint32_t FUSE_BASE = 0xFFFFE400;

    /// FUSE Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Fuse Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Fuse Mode Register
        volatile uint32_t IR;  ///< Offset: 0x08 - Fuse Index Register
        volatile uint32_t DR;  ///< Offset: 0x0C - Fuse Data Register
        volatile uint32_t SR__;  ///< Offset: 0x10 - Fuse Status Register (renamed from SR__)
    };

    /// Peripheral instances
    inline Registers* FUSE = reinterpret_cast<Registers*>(FUSE_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WRQ = (1U << 0);  ///< Write Request
        constexpr uint32_t RRQ = (1U << 1);  ///< Read Request
        constexpr uint32_t KEY = (8 << 8);  ///< Key code
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t MSK = (1U << 0);  ///< Mask Fuse Status Registers
    }

    /// IR Register bits
    namespace ir_bits {
        constexpr uint32_t WS = (1U << 0);  ///< Write Status
        constexpr uint32_t RS = (1U << 1);  ///< Read Status
        constexpr uint32_t WSEL = (4 << 8);  ///< Word Selection
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data to Program
    }

    /// SR__ Register bits
    namespace sr___bits {
        constexpr uint32_t FUSE = (32 << 0);  ///< Fuse Status
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAC0_BASE = 0xFFFFE600;
    constexpr uint32_t DMAC1_BASE = 0xFFFFE800;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t GCFG;  ///< Offset: 0x00 - DMAC Global Configuration Register
        volatile uint32_t EN;  ///< Offset: 0x04 - DMAC Enable Register
        volatile uint32_t SREQ;  ///< Offset: 0x08 - DMAC Software Single Request Register
        volatile uint32_t CREQ;  ///< Offset: 0x0C - DMAC Software Chunk Transfer Request Register
        volatile uint32_t LAST;  ///< Offset: 0x10 - DMAC Software Last Transfer Flag Register
        volatile uint32_t EBCIER;  ///< Offset: 0x18 - DMAC Error, Chained Buffer Transfer Completed Interrupt...
        volatile uint32_t EBCIDR;  ///< Offset: 0x1C - DMAC Error, Chained Buffer Transfer Completed Interrupt...
        volatile uint32_t EBCIMR;  ///< Offset: 0x20 - DMAC Error, Chained Buffer Transfer Completed Interrupt...
        volatile uint32_t EBCISR;  ///< Offset: 0x24 - DMAC Error, Chained Buffer Transfer Completed Interrupt...
        volatile uint32_t CHER;  ///< Offset: 0x28 - DMAC Channel Handler Enable Register
        volatile uint32_t CHDR;  ///< Offset: 0x2C - DMAC Channel Handler Disable Register
        volatile uint32_t CHSR;  ///< Offset: 0x30 - DMAC Channel Handler Status Register
        volatile uint32_t SADDR0;  ///< Offset: 0x3C - DMAC Channel Source Address Register (ch_num = 0)
        volatile uint32_t DADDR0;  ///< Offset: 0x40 - DMAC Channel Destination Address Register (ch_num = 0)
        volatile uint32_t DSCR0;  ///< Offset: 0x44 - DMAC Channel Descriptor Address Register (ch_num = 0)
        volatile uint32_t CTRLA0;  ///< Offset: 0x48 - DMAC Channel Control A Register (ch_num = 0)
        volatile uint32_t CTRLB0;  ///< Offset: 0x4C - DMAC Channel Control B Register (ch_num = 0)
        volatile uint32_t CFG0;  ///< Offset: 0x50 - DMAC Channel Configuration Register (ch_num = 0)
        volatile uint32_t SPIP0;  ///< Offset: 0x54 - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP0;  ///< Offset: 0x58 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR1;  ///< Offset: 0x64 - DMAC Channel Source Address Register (ch_num = 1)
        volatile uint32_t DADDR1;  ///< Offset: 0x68 - DMAC Channel Destination Address Register (ch_num = 1)
        volatile uint32_t DSCR1;  ///< Offset: 0x6C - DMAC Channel Descriptor Address Register (ch_num = 1)
        volatile uint32_t CTRLA1;  ///< Offset: 0x70 - DMAC Channel Control A Register (ch_num = 1)
        volatile uint32_t CTRLB1;  ///< Offset: 0x74 - DMAC Channel Control B Register (ch_num = 1)
        volatile uint32_t CFG1;  ///< Offset: 0x78 - DMAC Channel Configuration Register (ch_num = 1)
        volatile uint32_t SPIP1;  ///< Offset: 0x7C - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP1;  ///< Offset: 0x80 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR2;  ///< Offset: 0x8C - DMAC Channel Source Address Register (ch_num = 2)
        volatile uint32_t DADDR2;  ///< Offset: 0x90 - DMAC Channel Destination Address Register (ch_num = 2)
        volatile uint32_t DSCR2;  ///< Offset: 0x94 - DMAC Channel Descriptor Address Register (ch_num = 2)
        volatile uint32_t CTRLA2;  ///< Offset: 0x98 - DMAC Channel Control A Register (ch_num = 2)
        volatile uint32_t CTRLB2;  ///< Offset: 0x9C - DMAC Channel Control B Register (ch_num = 2)
        volatile uint32_t CFG2;  ///< Offset: 0xA0 - DMAC Channel Configuration Register (ch_num = 2)
        volatile uint32_t SPIP2;  ///< Offset: 0xA4 - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP2;  ///< Offset: 0xA8 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR3;  ///< Offset: 0xB4 - DMAC Channel Source Address Register (ch_num = 3)
        volatile uint32_t DADDR3;  ///< Offset: 0xB8 - DMAC Channel Destination Address Register (ch_num = 3)
        volatile uint32_t DSCR3;  ///< Offset: 0xBC - DMAC Channel Descriptor Address Register (ch_num = 3)
        volatile uint32_t CTRLA3;  ///< Offset: 0xC0 - DMAC Channel Control A Register (ch_num = 3)
        volatile uint32_t CTRLB3;  ///< Offset: 0xC4 - DMAC Channel Control B Register (ch_num = 3)
        volatile uint32_t CFG3;  ///< Offset: 0xC8 - DMAC Channel Configuration Register (ch_num = 3)
        volatile uint32_t SPIP3;  ///< Offset: 0xCC - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP3;  ///< Offset: 0xD0 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR4;  ///< Offset: 0xDC - DMAC Channel Source Address Register (ch_num = 4)
        volatile uint32_t DADDR4;  ///< Offset: 0xE0 - DMAC Channel Destination Address Register (ch_num = 4)
        volatile uint32_t DSCR4;  ///< Offset: 0xE4 - DMAC Channel Descriptor Address Register (ch_num = 4)
        volatile uint32_t CTRLA4;  ///< Offset: 0xE8 - DMAC Channel Control A Register (ch_num = 4)
        volatile uint32_t CTRLB4;  ///< Offset: 0xEC - DMAC Channel Control B Register (ch_num = 4)
        volatile uint32_t CFG4;  ///< Offset: 0xF0 - DMAC Channel Configuration Register (ch_num = 4)
        volatile uint32_t SPIP4;  ///< Offset: 0xF4 - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP4;  ///< Offset: 0xF8 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR5;  ///< Offset: 0x104 - DMAC Channel Source Address Register (ch_num = 5)
        volatile uint32_t DADDR5;  ///< Offset: 0x108 - DMAC Channel Destination Address Register (ch_num = 5)
        volatile uint32_t DSCR5;  ///< Offset: 0x10C - DMAC Channel Descriptor Address Register (ch_num = 5)
        volatile uint32_t CTRLA5;  ///< Offset: 0x110 - DMAC Channel Control A Register (ch_num = 5)
        volatile uint32_t CTRLB5;  ///< Offset: 0x114 - DMAC Channel Control B Register (ch_num = 5)
        volatile uint32_t CFG5;  ///< Offset: 0x118 - DMAC Channel Configuration Register (ch_num = 5)
        volatile uint32_t SPIP5;  ///< Offset: 0x11C - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP5;  ///< Offset: 0x120 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR6;  ///< Offset: 0x12C - DMAC Channel Source Address Register (ch_num = 6)
        volatile uint32_t DADDR6;  ///< Offset: 0x130 - DMAC Channel Destination Address Register (ch_num = 6)
        volatile uint32_t DSCR6;  ///< Offset: 0x134 - DMAC Channel Descriptor Address Register (ch_num = 6)
        volatile uint32_t CTRLA6;  ///< Offset: 0x138 - DMAC Channel Control A Register (ch_num = 6)
        volatile uint32_t CTRLB6;  ///< Offset: 0x13C - DMAC Channel Control B Register (ch_num = 6)
        volatile uint32_t CFG6;  ///< Offset: 0x140 - DMAC Channel Configuration Register (ch_num = 6)
        volatile uint32_t SPIP6;  ///< Offset: 0x144 - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP6;  ///< Offset: 0x148 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t SADDR7;  ///< Offset: 0x154 - DMAC Channel Source Address Register (ch_num = 7)
        volatile uint32_t DADDR7;  ///< Offset: 0x158 - DMAC Channel Destination Address Register (ch_num = 7)
        volatile uint32_t DSCR7;  ///< Offset: 0x15C - DMAC Channel Descriptor Address Register (ch_num = 7)
        volatile uint32_t CTRLA7;  ///< Offset: 0x160 - DMAC Channel Control A Register (ch_num = 7)
        volatile uint32_t CTRLB7;  ///< Offset: 0x164 - DMAC Channel Control B Register (ch_num = 7)
        volatile uint32_t CFG7;  ///< Offset: 0x168 - DMAC Channel Configuration Register (ch_num = 7)
        volatile uint32_t SPIP7;  ///< Offset: 0x16C - DMAC Channel Source Picture-in-Picture Configuration...
        volatile uint32_t DPIP7;  ///< Offset: 0x170 - DMAC Channel Destination Picture-in-Picture...
        volatile uint32_t WPMR;  ///< Offset: 0x1E4 - DMAC Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0x1E8 - DMAC Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* DMAC0 = reinterpret_cast<Registers*>(DMAC0_BASE);
    inline Registers* DMAC1 = reinterpret_cast<Registers*>(DMAC1_BASE);

    // Bit definitions
    /// GCFG Register bits
    namespace gcfg_bits {
        constexpr uint32_t ARB_CFG = (1U << 4);  ///< Arbiter Configuration
        constexpr uint32_t DICEN = (1U << 8);  ///< Descriptor Integrity Check
    }

    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< General Enable of DMA
    }

    /// SREQ Register bits
    namespace sreq_bits {
        constexpr uint32_t SSREQ0 = (1U << 0);  ///< Source Request
        constexpr uint32_t DSREQ0 = (1U << 1);  ///< Destination Request
        constexpr uint32_t SSREQ1 = (1U << 2);  ///< Source Request
        constexpr uint32_t DSREQ1 = (1U << 3);  ///< Destination Request
        constexpr uint32_t SSREQ2 = (1U << 4);  ///< Source Request
        constexpr uint32_t DSREQ2 = (1U << 5);  ///< Destination Request
        constexpr uint32_t SSREQ3 = (1U << 6);  ///< Source Request
        constexpr uint32_t DSREQ3 = (1U << 7);  ///< Destination Request
        constexpr uint32_t SSREQ4 = (1U << 8);  ///< Source Request
        constexpr uint32_t DSREQ4 = (1U << 9);  ///< Destination Request
        constexpr uint32_t SSREQ5 = (1U << 10);  ///< Source Request
        constexpr uint32_t DSREQ5 = (1U << 11);  ///< Destination Request
        constexpr uint32_t SSREQ6 = (1U << 12);  ///< Source Request
        constexpr uint32_t DSREQ6 = (1U << 13);  ///< Destination Request
        constexpr uint32_t SSREQ7 = (1U << 14);  ///< Source Request
        constexpr uint32_t DSREQ7 = (1U << 15);  ///< Destination Request
    }

    /// CREQ Register bits
    namespace creq_bits {
        constexpr uint32_t SCREQ0 = (1U << 0);  ///< Source Chunk Request
        constexpr uint32_t DCREQ0 = (1U << 1);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ1 = (1U << 2);  ///< Source Chunk Request
        constexpr uint32_t DCREQ1 = (1U << 3);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ2 = (1U << 4);  ///< Source Chunk Request
        constexpr uint32_t DCREQ2 = (1U << 5);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ3 = (1U << 6);  ///< Source Chunk Request
        constexpr uint32_t DCREQ3 = (1U << 7);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ4 = (1U << 8);  ///< Source Chunk Request
        constexpr uint32_t DCREQ4 = (1U << 9);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ5 = (1U << 10);  ///< Source Chunk Request
        constexpr uint32_t DCREQ5 = (1U << 11);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ6 = (1U << 12);  ///< Source Chunk Request
        constexpr uint32_t DCREQ6 = (1U << 13);  ///< Destination Chunk Request
        constexpr uint32_t SCREQ7 = (1U << 14);  ///< Source Chunk Request
        constexpr uint32_t DCREQ7 = (1U << 15);  ///< Destination Chunk Request
    }

    /// LAST Register bits
    namespace last_bits {
        constexpr uint32_t SLAST0 = (1U << 0);  ///< Source Last
        constexpr uint32_t DLAST0 = (1U << 1);  ///< Destination Last
        constexpr uint32_t SLAST1 = (1U << 2);  ///< Source Last
        constexpr uint32_t DLAST1 = (1U << 3);  ///< Destination Last
        constexpr uint32_t SLAST2 = (1U << 4);  ///< Source Last
        constexpr uint32_t DLAST2 = (1U << 5);  ///< Destination Last
        constexpr uint32_t SLAST3 = (1U << 6);  ///< Source Last
        constexpr uint32_t DLAST3 = (1U << 7);  ///< Destination Last
        constexpr uint32_t SLAST4 = (1U << 8);  ///< Source Last
        constexpr uint32_t DLAST4 = (1U << 9);  ///< Destination Last
        constexpr uint32_t SLAST5 = (1U << 10);  ///< Source Last
        constexpr uint32_t DLAST5 = (1U << 11);  ///< Destination Last
        constexpr uint32_t SLAST6 = (1U << 12);  ///< Source Last
        constexpr uint32_t DLAST6 = (1U << 13);  ///< Destination Last
        constexpr uint32_t SLAST7 = (1U << 14);  ///< Source Last
        constexpr uint32_t DLAST7 = (1U << 15);  ///< Destination Last
    }

    /// EBCIER Register bits
    namespace ebcier_bits {
        constexpr uint32_t BTC0 = (1U << 0);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC1 = (1U << 1);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC2 = (1U << 2);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC3 = (1U << 3);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC4 = (1U << 4);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC5 = (1U << 5);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC6 = (1U << 6);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC7 = (1U << 7);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC0 = (1U << 8);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC1 = (1U << 9);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC2 = (1U << 10);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC3 = (1U << 11);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC4 = (1U << 12);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC5 = (1U << 13);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC6 = (1U << 14);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC7 = (1U << 15);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t ERR0 = (1U << 16);  ///< Access Error [7:0]
        constexpr uint32_t ERR1 = (1U << 17);  ///< Access Error [7:0]
        constexpr uint32_t ERR2 = (1U << 18);  ///< Access Error [7:0]
        constexpr uint32_t ERR3 = (1U << 19);  ///< Access Error [7:0]
        constexpr uint32_t ERR4 = (1U << 20);  ///< Access Error [7:0]
        constexpr uint32_t ERR5 = (1U << 21);  ///< Access Error [7:0]
        constexpr uint32_t ERR6 = (1U << 22);  ///< Access Error [7:0]
        constexpr uint32_t ERR7 = (1U << 23);  ///< Access Error [7:0]
        constexpr uint32_t DICERR0 = (1U << 24);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR1 = (1U << 25);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR2 = (1U << 26);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR3 = (1U << 27);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR4 = (1U << 28);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR5 = (1U << 29);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR6 = (1U << 30);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR7 = (1U << 31);  ///< Descriptor Integrity Check Error [7:0]
    }

    /// EBCIDR Register bits
    namespace ebcidr_bits {
        constexpr uint32_t BTC0 = (1U << 0);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC1 = (1U << 1);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC2 = (1U << 2);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC3 = (1U << 3);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC4 = (1U << 4);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC5 = (1U << 5);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC6 = (1U << 6);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC7 = (1U << 7);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC0 = (1U << 8);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC1 = (1U << 9);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC2 = (1U << 10);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC3 = (1U << 11);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC4 = (1U << 12);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC5 = (1U << 13);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC6 = (1U << 14);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC7 = (1U << 15);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t ERR0 = (1U << 16);  ///< Access Error [7:0]
        constexpr uint32_t ERR1 = (1U << 17);  ///< Access Error [7:0]
        constexpr uint32_t ERR2 = (1U << 18);  ///< Access Error [7:0]
        constexpr uint32_t ERR3 = (1U << 19);  ///< Access Error [7:0]
        constexpr uint32_t ERR4 = (1U << 20);  ///< Access Error [7:0]
        constexpr uint32_t ERR5 = (1U << 21);  ///< Access Error [7:0]
        constexpr uint32_t ERR6 = (1U << 22);  ///< Access Error [7:0]
        constexpr uint32_t ERR7 = (1U << 23);  ///< Access Error [7:0]
        constexpr uint32_t DICERR0 = (1U << 24);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR1 = (1U << 25);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR2 = (1U << 26);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR3 = (1U << 27);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR4 = (1U << 28);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR5 = (1U << 29);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR6 = (1U << 30);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR7 = (1U << 31);  ///< Descriptor Integrity Check Error [7:0]
    }

    /// EBCIMR Register bits
    namespace ebcimr_bits {
        constexpr uint32_t BTC0 = (1U << 0);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC1 = (1U << 1);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC2 = (1U << 2);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC3 = (1U << 3);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC4 = (1U << 4);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC5 = (1U << 5);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC6 = (1U << 6);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC7 = (1U << 7);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC0 = (1U << 8);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC1 = (1U << 9);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC2 = (1U << 10);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC3 = (1U << 11);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC4 = (1U << 12);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC5 = (1U << 13);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC6 = (1U << 14);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC7 = (1U << 15);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t ERR0 = (1U << 16);  ///< Access Error [7:0]
        constexpr uint32_t ERR1 = (1U << 17);  ///< Access Error [7:0]
        constexpr uint32_t ERR2 = (1U << 18);  ///< Access Error [7:0]
        constexpr uint32_t ERR3 = (1U << 19);  ///< Access Error [7:0]
        constexpr uint32_t ERR4 = (1U << 20);  ///< Access Error [7:0]
        constexpr uint32_t ERR5 = (1U << 21);  ///< Access Error [7:0]
        constexpr uint32_t ERR6 = (1U << 22);  ///< Access Error [7:0]
        constexpr uint32_t ERR7 = (1U << 23);  ///< Access Error [7:0]
        constexpr uint32_t DICERR0 = (1U << 24);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR1 = (1U << 25);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR2 = (1U << 26);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR3 = (1U << 27);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR4 = (1U << 28);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR5 = (1U << 29);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR6 = (1U << 30);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR7 = (1U << 31);  ///< Descriptor Integrity Check Error [7:0]
    }

    /// EBCISR Register bits
    namespace ebcisr_bits {
        constexpr uint32_t BTC0 = (1U << 0);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC1 = (1U << 1);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC2 = (1U << 2);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC3 = (1U << 3);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC4 = (1U << 4);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC5 = (1U << 5);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC6 = (1U << 6);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t BTC7 = (1U << 7);  ///< Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC0 = (1U << 8);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC1 = (1U << 9);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC2 = (1U << 10);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC3 = (1U << 11);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC4 = (1U << 12);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC5 = (1U << 13);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC6 = (1U << 14);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t CBTC7 = (1U << 15);  ///< Chained Buffer Transfer Completed [7:0]
        constexpr uint32_t ERR0 = (1U << 16);  ///< Access Error [7:0]
        constexpr uint32_t ERR1 = (1U << 17);  ///< Access Error [7:0]
        constexpr uint32_t ERR2 = (1U << 18);  ///< Access Error [7:0]
        constexpr uint32_t ERR3 = (1U << 19);  ///< Access Error [7:0]
        constexpr uint32_t ERR4 = (1U << 20);  ///< Access Error [7:0]
        constexpr uint32_t ERR5 = (1U << 21);  ///< Access Error [7:0]
        constexpr uint32_t ERR6 = (1U << 22);  ///< Access Error [7:0]
        constexpr uint32_t ERR7 = (1U << 23);  ///< Access Error [7:0]
        constexpr uint32_t DICERR0 = (1U << 24);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR1 = (1U << 25);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR2 = (1U << 26);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR3 = (1U << 27);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR4 = (1U << 28);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR5 = (1U << 29);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR6 = (1U << 30);  ///< Descriptor Integrity Check Error [7:0]
        constexpr uint32_t DICERR7 = (1U << 31);  ///< Descriptor Integrity Check Error [7:0]
    }

    /// CHER Register bits
    namespace cher_bits {
        constexpr uint32_t ENA0 = (1U << 0);  ///< Enable [7:0]
        constexpr uint32_t ENA1 = (1U << 1);  ///< Enable [7:0]
        constexpr uint32_t ENA2 = (1U << 2);  ///< Enable [7:0]
        constexpr uint32_t ENA3 = (1U << 3);  ///< Enable [7:0]
        constexpr uint32_t ENA4 = (1U << 4);  ///< Enable [7:0]
        constexpr uint32_t ENA5 = (1U << 5);  ///< Enable [7:0]
        constexpr uint32_t ENA6 = (1U << 6);  ///< Enable [7:0]
        constexpr uint32_t ENA7 = (1U << 7);  ///< Enable [7:0]
        constexpr uint32_t SUSP0 = (1U << 8);  ///< Suspend [7:0]
        constexpr uint32_t SUSP1 = (1U << 9);  ///< Suspend [7:0]
        constexpr uint32_t SUSP2 = (1U << 10);  ///< Suspend [7:0]
        constexpr uint32_t SUSP3 = (1U << 11);  ///< Suspend [7:0]
        constexpr uint32_t SUSP4 = (1U << 12);  ///< Suspend [7:0]
        constexpr uint32_t SUSP5 = (1U << 13);  ///< Suspend [7:0]
        constexpr uint32_t SUSP6 = (1U << 14);  ///< Suspend [7:0]
        constexpr uint32_t SUSP7 = (1U << 15);  ///< Suspend [7:0]
        constexpr uint32_t KEEP0 = (1U << 24);  ///< Keep on [7:0]
        constexpr uint32_t KEEP1 = (1U << 25);  ///< Keep on [7:0]
        constexpr uint32_t KEEP2 = (1U << 26);  ///< Keep on [7:0]
        constexpr uint32_t KEEP3 = (1U << 27);  ///< Keep on [7:0]
        constexpr uint32_t KEEP4 = (1U << 28);  ///< Keep on [7:0]
        constexpr uint32_t KEEP5 = (1U << 29);  ///< Keep on [7:0]
        constexpr uint32_t KEEP6 = (1U << 30);  ///< Keep on [7:0]
        constexpr uint32_t KEEP7 = (1U << 31);  ///< Keep on [7:0]
    }

    /// CHDR Register bits
    namespace chdr_bits {
        constexpr uint32_t DIS0 = (1U << 0);  ///< Disable [7:0]
        constexpr uint32_t DIS1 = (1U << 1);  ///< Disable [7:0]
        constexpr uint32_t DIS2 = (1U << 2);  ///< Disable [7:0]
        constexpr uint32_t DIS3 = (1U << 3);  ///< Disable [7:0]
        constexpr uint32_t DIS4 = (1U << 4);  ///< Disable [7:0]
        constexpr uint32_t DIS5 = (1U << 5);  ///< Disable [7:0]
        constexpr uint32_t DIS6 = (1U << 6);  ///< Disable [7:0]
        constexpr uint32_t DIS7 = (1U << 7);  ///< Disable [7:0]
        constexpr uint32_t RES0 = (1U << 8);  ///< Resume [7:0]
        constexpr uint32_t RES1 = (1U << 9);  ///< Resume [7:0]
        constexpr uint32_t RES2 = (1U << 10);  ///< Resume [7:0]
        constexpr uint32_t RES3 = (1U << 11);  ///< Resume [7:0]
        constexpr uint32_t RES4 = (1U << 12);  ///< Resume [7:0]
        constexpr uint32_t RES5 = (1U << 13);  ///< Resume [7:0]
        constexpr uint32_t RES6 = (1U << 14);  ///< Resume [7:0]
        constexpr uint32_t RES7 = (1U << 15);  ///< Resume [7:0]
    }

    /// CHSR Register bits
    namespace chsr_bits {
        constexpr uint32_t ENA0 = (1U << 0);  ///< Enable [7:0]
        constexpr uint32_t ENA1 = (1U << 1);  ///< Enable [7:0]
        constexpr uint32_t ENA2 = (1U << 2);  ///< Enable [7:0]
        constexpr uint32_t ENA3 = (1U << 3);  ///< Enable [7:0]
        constexpr uint32_t ENA4 = (1U << 4);  ///< Enable [7:0]
        constexpr uint32_t ENA5 = (1U << 5);  ///< Enable [7:0]
        constexpr uint32_t ENA6 = (1U << 6);  ///< Enable [7:0]
        constexpr uint32_t ENA7 = (1U << 7);  ///< Enable [7:0]
        constexpr uint32_t SUSP0 = (1U << 8);  ///< Suspend [7:0]
        constexpr uint32_t SUSP1 = (1U << 9);  ///< Suspend [7:0]
        constexpr uint32_t SUSP2 = (1U << 10);  ///< Suspend [7:0]
        constexpr uint32_t SUSP3 = (1U << 11);  ///< Suspend [7:0]
        constexpr uint32_t SUSP4 = (1U << 12);  ///< Suspend [7:0]
        constexpr uint32_t SUSP5 = (1U << 13);  ///< Suspend [7:0]
        constexpr uint32_t SUSP6 = (1U << 14);  ///< Suspend [7:0]
        constexpr uint32_t SUSP7 = (1U << 15);  ///< Suspend [7:0]
        constexpr uint32_t EMPT0 = (1U << 16);  ///< Empty [7:0]
        constexpr uint32_t EMPT1 = (1U << 17);  ///< Empty [7:0]
        constexpr uint32_t EMPT2 = (1U << 18);  ///< Empty [7:0]
        constexpr uint32_t EMPT3 = (1U << 19);  ///< Empty [7:0]
        constexpr uint32_t EMPT4 = (1U << 20);  ///< Empty [7:0]
        constexpr uint32_t EMPT5 = (1U << 21);  ///< Empty [7:0]
        constexpr uint32_t EMPT6 = (1U << 22);  ///< Empty [7:0]
        constexpr uint32_t EMPT7 = (1U << 23);  ///< Empty [7:0]
        constexpr uint32_t STAL0 = (1U << 24);  ///< Stalled [7:0]
        constexpr uint32_t STAL1 = (1U << 25);  ///< Stalled [7:0]
        constexpr uint32_t STAL2 = (1U << 26);  ///< Stalled [7:0]
        constexpr uint32_t STAL3 = (1U << 27);  ///< Stalled [7:0]
        constexpr uint32_t STAL4 = (1U << 28);  ///< Stalled [7:0]
        constexpr uint32_t STAL5 = (1U << 29);  ///< Stalled [7:0]
        constexpr uint32_t STAL6 = (1U << 30);  ///< Stalled [7:0]
        constexpr uint32_t STAL7 = (1U << 31);  ///< Stalled [7:0]
    }

    /// SADDR0 Register bits
    namespace saddr0_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR0 Register bits
    namespace daddr0_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR0 Register bits
    namespace dscr0_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< Descriptor Interface Selection
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA0 Register bits
    namespace ctrla0_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< Current Descriptor Stop Command and Transfer Completed Memory Indicator
    }

    /// CTRLB0 Register bits
    namespace ctrlb0_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (2 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< Interrupt Enable Not
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG0 Register bits
    namespace cfg0_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP0 Register bits
    namespace spip0_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP0 Register bits
    namespace dpip0_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR1 Register bits
    namespace saddr1_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR1 Register bits
    namespace daddr1_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR1 Register bits
    namespace dscr1_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< Descriptor Interface Selection
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA1 Register bits
    namespace ctrla1_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< Current Descriptor Stop Command and Transfer Completed Memory Indicator
    }

    /// CTRLB1 Register bits
    namespace ctrlb1_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (2 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< Interrupt Enable Not
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG1 Register bits
    namespace cfg1_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP1 Register bits
    namespace spip1_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP1 Register bits
    namespace dpip1_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR2 Register bits
    namespace saddr2_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR2 Register bits
    namespace daddr2_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR2 Register bits
    namespace dscr2_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< Descriptor Interface Selection
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA2 Register bits
    namespace ctrla2_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< Current Descriptor Stop Command and Transfer Completed Memory Indicator
    }

    /// CTRLB2 Register bits
    namespace ctrlb2_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (2 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< Interrupt Enable Not
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG2 Register bits
    namespace cfg2_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP2 Register bits
    namespace spip2_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP2 Register bits
    namespace dpip2_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR3 Register bits
    namespace saddr3_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR3 Register bits
    namespace daddr3_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR3 Register bits
    namespace dscr3_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< Descriptor Interface Selection
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA3 Register bits
    namespace ctrla3_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< Current Descriptor Stop Command and Transfer Completed Memory Indicator
    }

    /// CTRLB3 Register bits
    namespace ctrlb3_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (2 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< Interrupt Enable Not
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG3 Register bits
    namespace cfg3_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP3 Register bits
    namespace spip3_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP3 Register bits
    namespace dpip3_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR4 Register bits
    namespace saddr4_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR4 Register bits
    namespace daddr4_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR4 Register bits
    namespace dscr4_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< Descriptor Interface Selection
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA4 Register bits
    namespace ctrla4_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< Current Descriptor Stop Command and Transfer Completed Memory Indicator
    }

    /// CTRLB4 Register bits
    namespace ctrlb4_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (2 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< Interrupt Enable Not
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG4 Register bits
    namespace cfg4_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP4 Register bits
    namespace spip4_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP4 Register bits
    namespace dpip4_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR5 Register bits
    namespace saddr5_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR5 Register bits
    namespace daddr5_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR5 Register bits
    namespace dscr5_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< Descriptor Interface Selection
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA5 Register bits
    namespace ctrla5_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< Current Descriptor Stop Command and Transfer Completed Memory Indicator
    }

    /// CTRLB5 Register bits
    namespace ctrlb5_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (2 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< Interrupt Enable Not
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG5 Register bits
    namespace cfg5_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP5 Register bits
    namespace spip5_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP5 Register bits
    namespace dpip5_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR6 Register bits
    namespace saddr6_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR6 Register bits
    namespace daddr6_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR6 Register bits
    namespace dscr6_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< Descriptor Interface Selection
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA6 Register bits
    namespace ctrla6_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< Current Descriptor Stop Command and Transfer Completed Memory Indicator
    }

    /// CTRLB6 Register bits
    namespace ctrlb6_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (2 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< Interrupt Enable Not
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG6 Register bits
    namespace cfg6_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP6 Register bits
    namespace spip6_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP6 Register bits
    namespace dpip6_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// SADDR7 Register bits
    namespace saddr7_bits {
        constexpr uint32_t SADDR = (32 << 0);  ///< Channel x Source Address
    }

    /// DADDR7 Register bits
    namespace daddr7_bits {
        constexpr uint32_t DADDR = (32 << 0);  ///< Channel x Destination Address
    }

    /// DSCR7 Register bits
    namespace dscr7_bits {
        constexpr uint32_t DSCR_IF = (2 << 0);  ///< Descriptor Interface Selection
        constexpr uint32_t DSCR = (30 << 2);  ///< Buffer Transfer Descriptor Address
    }

    /// CTRLA7 Register bits
    namespace ctrla7_bits {
        constexpr uint32_t BTSIZE = (16 << 0);  ///< Buffer Transfer Size
        constexpr uint32_t SCSIZE = (3 << 16);  ///< Source Chunk Transfer Size.
        constexpr uint32_t DCSIZE = (3 << 20);  ///< Destination Chunk Transfer Size
        constexpr uint32_t SRC_WIDTH = (2 << 24);  ///< Transfer Width for the Source
        constexpr uint32_t DST_WIDTH = (2 << 28);  ///< Transfer Width for the Destination
        constexpr uint32_t DONE = (1U << 31);  ///< Current Descriptor Stop Command and Transfer Completed Memory Indicator
    }

    /// CTRLB7 Register bits
    namespace ctrlb7_bits {
        constexpr uint32_t SIF = (2 << 0);  ///< Source Interface Selection Field
        constexpr uint32_t DIF = (2 << 4);  ///< Destination Interface Selection Field
        constexpr uint32_t SRC_PIP = (1U << 8);  ///< Source Picture-in-Picture Mode
        constexpr uint32_t DST_PIP = (1U << 12);  ///< Destination Picture-in-Picture Mode
        constexpr uint32_t SRC_DSCR = (1U << 16);  ///< Source Address Descriptor
        constexpr uint32_t DST_DSCR = (1U << 20);  ///< Destination Address Descriptor
        constexpr uint32_t FC = (2 << 21);  ///< Flow Control
        constexpr uint32_t SRC_INCR = (2 << 24);  ///< Incrementing, Decrementing or Fixed Address for the Source
        constexpr uint32_t DST_INCR = (2 << 28);  ///< Incrementing, Decrementing or Fixed Address for the Destination
        constexpr uint32_t IEN = (1U << 30);  ///< Interrupt Enable Not
        constexpr uint32_t AUTO_ = (1U << 31);  ///< Automatic Multiple Buffer Transfer (renamed from AUTO_)
    }

    /// CFG7 Register bits
    namespace cfg7_bits {
        constexpr uint32_t SRC_PER = (4 << 0);  ///< Source with Peripheral identifier
        constexpr uint32_t DST_PER = (4 << 4);  ///< Destination with Peripheral identifier
        constexpr uint32_t SRC_REP = (1U << 8);  ///< Source Reloaded from Previous
        constexpr uint32_t SRC_H2SEL = (1U << 9);  ///< Software or Hardware Selection for the Source
        constexpr uint32_t SRC_PER_MSB = (2 << 10);  ///< SRC_PER Most Significant Bits
        constexpr uint32_t DST_REP = (1U << 12);  ///< Destination Reloaded from Previous
        constexpr uint32_t DST_H2SEL = (1U << 13);  ///< Software or Hardware Selection for the Destination
        constexpr uint32_t DST_PER_MSB = (2 << 14);  ///< DST_PER Most Significant Bits
        constexpr uint32_t SOD = (1U << 16);  ///< Stop On Done
        constexpr uint32_t LOCK_IF = (1U << 20);  ///< Interface Lock
        constexpr uint32_t LOCK_B = (1U << 21);  ///< Bus Lock
        constexpr uint32_t LOCK_IF_L = (1U << 22);  ///< Master Interface Arbiter Lock
        constexpr uint32_t AHB_PROT = (3 << 24);  ///< AHB Protection
        constexpr uint32_t FIFOCFG = (2 << 28);  ///< FIFO Configuration
    }

    /// SPIP7 Register bits
    namespace spip7_bits {
        constexpr uint32_t SPIP_HOLE = (16 << 0);  ///< Source Picture-in-Picture Hole
        constexpr uint32_t SPIP_BOUNDARY = (10 << 16);  ///< Source Picture-in-Picture Boundary
    }

    /// DPIP7 Register bits
    namespace dpip7_bits {
        constexpr uint32_t DPIP_HOLE = (16 << 0);  ///< Destination Picture-in-Picture Hole
        constexpr uint32_t DPIP_BOUNDARY = (10 << 16);  ///< Destination Picture-in-Picture Boundary
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// MPDDRC Peripheral
// ============================================================================

namespace mpddrc {
    /// Base addresses
    constexpr uint32_t MPDDRC_BASE = 0xFFFFEA00;

    /// MPDDRC Register structure
    struct Registers {
        volatile uint32_t MR;  ///< Offset: 0x00 - MPDDRC Mode Register
        volatile uint32_t RTR;  ///< Offset: 0x04 - MPDDRC Refresh Timer Register
        volatile uint32_t CR;  ///< Offset: 0x08 - MPDDRC Configuration Register
        volatile uint32_t TPR0;  ///< Offset: 0x0C - MPDDRC Timing Parameter 0 Register
        volatile uint32_t TPR1;  ///< Offset: 0x10 - MPDDRC Timing Parameter 1 Register
        volatile uint32_t TPR2;  ///< Offset: 0x14 - MPDDRC Timing Parameter 2 Register
        volatile uint32_t LPR;  ///< Offset: 0x1C - MPDDRC Low-power Register
        volatile uint32_t MD;  ///< Offset: 0x20 - MPDDRC Memory Device Register
        volatile uint32_t HS;  ///< Offset: 0x24 - MPDDRC High Speed Register
        volatile uint32_t LPDDR2_LPR;  ///< Offset: 0x28 - MPDDRC LPDDR2 Low-power Register
        volatile uint32_t LPDDR2_CAL_MR4;  ///< Offset: 0x2C - MPDDRC LPDDR2 Calibration and MR4 Register
        volatile uint32_t LPDDR2_TIM_CAL;  ///< Offset: 0x30 - MPDDRC LPDDR2 Timing Calibration Register
        volatile uint32_t IO_CALIBR;  ///< Offset: 0x34 - MPDDRC IO Calibration
        volatile uint32_t SAW__;  ///< Offset: 0x44 - MPDDRC Smart Adaptation Wrapper 0 Register (renamed from SAW__)
        volatile uint32_t DLL_MO;  ///< Offset: 0x74 - MPDDRC DLL Master Offset Register
        volatile uint32_t DLL_SOF;  ///< Offset: 0x78 - MPDDRC DLL Slave Offset Register
        volatile uint32_t DLL_MS;  ///< Offset: 0x7C - MPDDRC DLL Status Master Register
        volatile uint32_t DLL_SS__;  ///< Offset: 0x80 - MPDDRC DLL Status Slave 0 Register (renamed from DLL_SS__)
        volatile uint32_t WPCR;  ///< Offset: 0xE4 - MPDDRC Write Protect Control Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - MPDDRC Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* MPDDRC = reinterpret_cast<Registers*>(MPDDRC_BASE);

    // Bit definitions
    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t MODE = (3 << 0);  ///< MPDDRC Command Mode
        constexpr uint32_t MRS = (8 << 8);  ///< Mode Register Select LPDDR2
    }

    /// RTR Register bits
    namespace rtr_bits {
        constexpr uint32_t COUNT = (12 << 0);  ///< MPDDRC Refresh Timer Count
        constexpr uint32_t ADJ_REF = (1U << 16);  ///< Adjust Refresh Rate
        constexpr uint32_t REF_PB = (1U << 17);  ///< Refresh Per Bank
        constexpr uint32_t MR4_VALUE = (3 << 20);  ///< Content of MR4 Register
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t NC = (2 << 0);  ///< Number of Column Bits.
        constexpr uint32_t NR = (2 << 2);  ///< Number of Row Bits
        constexpr uint32_t CAS = (3 << 4);  ///< CAS Latency
        constexpr uint32_t DLL = (1U << 7);  ///< Reset DLL
        constexpr uint32_t DIC_DS = (1U << 8);  ///< Output Driver Impedance Control (Drive Strength)
        constexpr uint32_t DIS_DLL = (1U << 9);  ///< DISABLE DLL
        constexpr uint32_t ZQ = (2 << 10);  ///< ZQ Calibration
        constexpr uint32_t OCD = (3 << 12);  ///< Off-chip Driver
        constexpr uint32_t DQMS = (1U << 16);  ///< Mask Data is Shared
        constexpr uint32_t ENRDM = (1U << 17);  ///< Enable Read Measure
        constexpr uint32_t NB = (1U << 20);  ///< Number of Banks.
        constexpr uint32_t NDQS = (1U << 21);  ///< Not DQS:
        constexpr uint32_t DECOD = (1U << 22);  ///< Type of Decoding
        constexpr uint32_t UNAL = (1U << 23);  ///< Support Unaligned Access
    }

    /// TPR0 Register bits
    namespace tpr0_bits {
        constexpr uint32_t TRAS = (4 << 0);  ///< Active to Precharge Delay
        constexpr uint32_t TRCD = (4 << 4);  ///< Row to Column Delay
        constexpr uint32_t TWR = (4 << 8);  ///< Write Recovery Delay
        constexpr uint32_t TRC = (4 << 12);  ///< Row Cycle Delay
        constexpr uint32_t TRP = (4 << 16);  ///< Row Precharge Delay
        constexpr uint32_t TRRD = (4 << 20);  ///< Active BankA to Active BankB
        constexpr uint32_t TWTR = (3 << 24);  ///< Internal Write to Read Delay
        constexpr uint32_t RDC_WRRD = (1U << 27);  ///< Reduce Write to Read Delay
        constexpr uint32_t TMRD = (4 << 28);  ///< Load Mode Register Command to Activate or Refresh Command
    }

    /// TPR1 Register bits
    namespace tpr1_bits {
        constexpr uint32_t TRFC = (7 << 0);  ///< Row Cycle Delay
        constexpr uint32_t TXSNR = (8 << 8);  ///< Exit Self Refresh Delay to Non Read Command
        constexpr uint32_t TXSRD = (8 << 16);  ///< Exit Self Refresh Delay to Read Command
        constexpr uint32_t TXP = (4 << 24);  ///< Exit Power-down Delay to First Command
    }

    /// TPR2 Register bits
    namespace tpr2_bits {
        constexpr uint32_t TXARD = (4 << 0);  ///< Exit Active Power Down Delay to Read Command in Mode "Fast Exit".
        constexpr uint32_t TXARDS = (4 << 4);  ///< Exit Active Power Down Delay to Read Command in Mode "Slow Exit".
        constexpr uint32_t TRPA = (4 << 8);  ///< Row Precharge All Delay
        constexpr uint32_t TRTP = (3 << 12);  ///< Read to Precharge
        constexpr uint32_t TFAW = (4 << 16);  ///< Four Active Windows
    }

    /// LPR Register bits
    namespace lpr_bits {
        constexpr uint32_t LPCB = (2 << 0);  ///< Low-power Command Bit
        constexpr uint32_t CLK_FR = (1U << 2);  ///< Clock Frozen Command Bit
        constexpr uint32_t LPDDR2_PWOFF = (1U << 3);  ///< LPDDR2 Power Off Bit
        constexpr uint32_t PASR = (3 << 4);  ///< Partial Array Self Refresh
        constexpr uint32_t DS = (3 << 8);  ///< Drive Strength
        constexpr uint32_t TIMEOUT = (2 << 12);  ///< Enter Low-power Mode
        constexpr uint32_t APDE = (1U << 16);  ///< Active Power Down Exit Time
        constexpr uint32_t UPD_MR = (2 << 20);  ///< Update Load Mode Register and Extended Mode Register
    }

    /// MD Register bits
    namespace md_bits {
        constexpr uint32_t MD = (3 << 0);  ///< Memory Device
        constexpr uint32_t DBW = (1U << 4);  ///< Data Bus Width
    }

    /// HS Register bits
    namespace hs_bits {
        constexpr uint32_t DIS_ANTICIP_READ = (1U << 2);  ///< Disable Anticip Read Access
    }

    /// LPDDR2_LPR Register bits
    namespace lpddr2_lpr_bits {
        constexpr uint32_t BK_MASK_PASR = (8 << 0);  ///< Bank Mask Bit/PASR
        constexpr uint32_t SEG_MASK = (16 << 8);  ///< Segment Mask Bit
        constexpr uint32_t DS = (4 << 24);  ///< Drive strength
    }

    /// LPDDR2_CAL_MR4 Register bits
    namespace lpddr2_cal_mr4_bits {
        constexpr uint32_t COUNT_CAL = (16 << 0);  ///< LPDDR2 Calibration Timer Count
        constexpr uint32_t MR4_READ = (16 << 16);  ///< Mode Register 4 Read Interval
    }

    /// LPDDR2_TIM_CAL Register bits
    namespace lpddr2_tim_cal_bits {
        constexpr uint32_t ZQCS = (8 << 0);  ///< ZQ Calibration Short
    }

    /// IO_CALIBR Register bits
    namespace io_calibr_bits {
        constexpr uint32_t RDIV = (3 << 0);  ///< Resistor Divider, output driver impedance
        constexpr uint32_t TZQIO = (3 << 8);  ///< IO Calibration
        constexpr uint32_t CALCODEP = (4 << 16);  ///< Number of Transistor P
        constexpr uint32_t CALCODEN = (4 << 20);  ///< Number of Transistor N
    }

    /// SAW__ Register bits
    namespace saw___bits {
        constexpr uint32_t FLUSH_MAX = (8 << 0);  ///< Clears FIFO Content
        constexpr uint32_t INCR_THRESH = (6 << 8);  ///< Incremental Threshold
        constexpr uint32_t PFCH_THRESH = (6 << 16);  ///< Prefetch Threshold
    }

    /// DLL_MO Register bits
    namespace dll_mo_bits {
        constexpr uint32_t MOFF = (4 << 0);  ///< DLL Master Delay Line Offset
        constexpr uint32_t CLK90OFF = (5 << 8);  ///< DLL CLK90 Delay Line Offset
        constexpr uint32_t SELOFF = (1U << 16);  ///< DLL Offset Selection
    }

    /// DLL_SOF Register bits
    namespace dll_sof_bits {
        constexpr uint32_t S0OFF = (5 << 0);  ///< DLL Slave 0 Delay Line Offset ([x=0..3])
        constexpr uint32_t S1OFF = (5 << 8);  ///< DLL Slave 1 Delay Line Offset ([x=0..3])
        constexpr uint32_t S2OFF = (5 << 16);  ///< DLL Slave 2 Delay Line Offset ([x=0..3])
        constexpr uint32_t S3OFF = (5 << 24);  ///< DLL Slave 3 Delay Line Offset ([x=0..3])
    }

    /// DLL_MS Register bits
    namespace dll_ms_bits {
        constexpr uint32_t MDINC = (1U << 0);  ///< DLL Master Delay Increment
        constexpr uint32_t MDDEC = (1U << 1);  ///< DLL Master Delay Decrement
        constexpr uint32_t MDOVF = (1U << 2);  ///< DLL Master Delay Overflow Flag
        constexpr uint32_t MDVAL = (8 << 8);  ///< DLL Master Delay Value
    }

    /// DLL_SS__ Register bits
    namespace dll_ss___bits {
        constexpr uint32_t SDCOVF = (1U << 0);  ///< DLL Slave x Delay Correction Overflow Flag
        constexpr uint32_t SDCUDF = (1U << 1);  ///< DLL Slave x Delay Correction Underflow Flag
        constexpr uint32_t SDERF = (1U << 2);  ///< DLL Slave x Delay Correction Error Flag
        constexpr uint32_t SDVAL = (8 << 8);  ///< DLL Slave x Delay Value
        constexpr uint32_t SDCVAL = (8 << 16);  ///< DLL Slave x Delay Correction Value
    }

    /// WPCR Register bits
    namespace wpcr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protection KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protection Enable
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protection Violation Source
    }

}

// ============================================================================
// MATRIX Peripheral
// ============================================================================

namespace matrix {
    /// Base addresses
    constexpr uint32_t MATRIX_BASE = 0xFFFFEC00;

    /// MATRIX Register structure
    struct Registers {
        volatile uint32_t MCFG__;  ///< Offset: 0x00 - Master Configuration Register (renamed from MCFG__)
        volatile uint32_t SCFG__;  ///< Offset: 0x40 - Slave Configuration Register (renamed from SCFG__)
        volatile uint32_t PRAS0;  ///< Offset: 0x80 - Priority Register A for Slave 0
        volatile uint32_t PRBS0;  ///< Offset: 0x84 - Priority Register B for Slave 0
        volatile uint32_t PRAS1;  ///< Offset: 0x88 - Priority Register A for Slave 1
        volatile uint32_t PRBS1;  ///< Offset: 0x8C - Priority Register B for Slave 1
        volatile uint32_t PRAS2;  ///< Offset: 0x90 - Priority Register A for Slave 2
        volatile uint32_t PRBS2;  ///< Offset: 0x94 - Priority Register B for Slave 2
        volatile uint32_t PRAS3;  ///< Offset: 0x98 - Priority Register A for Slave 3
        volatile uint32_t PRBS3;  ///< Offset: 0x9C - Priority Register B for Slave 3
        volatile uint32_t PRAS4;  ///< Offset: 0xA0 - Priority Register A for Slave 4
        volatile uint32_t PRBS4;  ///< Offset: 0xA4 - Priority Register B for Slave 4
        volatile uint32_t PRAS5;  ///< Offset: 0xA8 - Priority Register A for Slave 5
        volatile uint32_t PRBS5;  ///< Offset: 0xAC - Priority Register B for Slave 5
        volatile uint32_t PRAS6;  ///< Offset: 0xB0 - Priority Register A for Slave 6
        volatile uint32_t PRBS6;  ///< Offset: 0xB4 - Priority Register B for Slave 6
        volatile uint32_t PRAS7;  ///< Offset: 0xB8 - Priority Register A for Slave 7
        volatile uint32_t PRBS7;  ///< Offset: 0xBC - Priority Register B for Slave 7
        volatile uint32_t PRAS8;  ///< Offset: 0xC0 - Priority Register A for Slave 8
        volatile uint32_t PRBS8;  ///< Offset: 0xC4 - Priority Register B for Slave 8
        volatile uint32_t PRAS9;  ///< Offset: 0xC8 - Priority Register A for Slave 9
        volatile uint32_t PRBS9;  ///< Offset: 0xCC - Priority Register B for Slave 9
        volatile uint32_t PRAS10;  ///< Offset: 0xD0 - Priority Register A for Slave 10
        volatile uint32_t PRBS10;  ///< Offset: 0xD4 - Priority Register B for Slave 10
        volatile uint32_t PRAS11;  ///< Offset: 0xD8 - Priority Register A for Slave 11
        volatile uint32_t PRBS11;  ///< Offset: 0xDC - Priority Register B for Slave 11
        volatile uint32_t PRAS12;  ///< Offset: 0xE0 - Priority Register A for Slave 12
        volatile uint32_t PRBS12;  ///< Offset: 0xE4 - Priority Register B for Slave 12
        volatile uint32_t PRAS13;  ///< Offset: 0xE8 - Priority Register A for Slave 13
        volatile uint32_t PRBS13;  ///< Offset: 0xEC - Priority Register B for Slave 13
        volatile uint32_t PRAS14;  ///< Offset: 0xF0 - Priority Register A for Slave 14
        volatile uint32_t PRBS14;  ///< Offset: 0xF4 - Priority Register B for Slave 14
        volatile uint32_t PRAS15;  ///< Offset: 0xF8 - Priority Register A for Slave 15
        volatile uint32_t PRBS15;  ///< Offset: 0xFC - Priority Register B for Slave 15
        volatile uint32_t MRCR;  ///< Offset: 0x100 - Master Remap Control Register
        volatile uint32_t SFR__;  ///< Offset: 0x110 - Special Function Register (renamed from SFR__)
        volatile uint32_t WPMR;  ///< Offset: 0x1E4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0x1E8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* MATRIX = reinterpret_cast<Registers*>(MATRIX_BASE);

    // Bit definitions
    /// MCFG__ Register bits
    namespace mcfg___bits {
        constexpr uint32_t ULBT = (3 << 0);  ///< Undefined Length Burst Type
    }

    /// SCFG__ Register bits
    namespace scfg___bits {
        constexpr uint32_t SLOT_CYCLE = (9 << 0);  ///< Maximum Bus Grant Duration for Masters
        constexpr uint32_t DEFMSTR_TYPE = (2 << 16);  ///< Default Master Type
        constexpr uint32_t FIXED_DEFMSTR = (4 << 18);  ///< Fixed Default Master
    }

    /// PRAS0 Register bits
    namespace pras0_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS0 Register bits
    namespace prbs0_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS1 Register bits
    namespace pras1_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS1 Register bits
    namespace prbs1_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS2 Register bits
    namespace pras2_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS2 Register bits
    namespace prbs2_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS3 Register bits
    namespace pras3_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS3 Register bits
    namespace prbs3_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS4 Register bits
    namespace pras4_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS4 Register bits
    namespace prbs4_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS5 Register bits
    namespace pras5_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS5 Register bits
    namespace prbs5_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS6 Register bits
    namespace pras6_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS6 Register bits
    namespace prbs6_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS7 Register bits
    namespace pras7_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS7 Register bits
    namespace prbs7_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS8 Register bits
    namespace pras8_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS8 Register bits
    namespace prbs8_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS9 Register bits
    namespace pras9_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS9 Register bits
    namespace prbs9_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS10 Register bits
    namespace pras10_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS10 Register bits
    namespace prbs10_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS11 Register bits
    namespace pras11_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS11 Register bits
    namespace prbs11_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS12 Register bits
    namespace pras12_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS12 Register bits
    namespace prbs12_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS13 Register bits
    namespace pras13_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS13 Register bits
    namespace prbs13_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS14 Register bits
    namespace pras14_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS14 Register bits
    namespace prbs14_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// PRAS15 Register bits
    namespace pras15_bits {
        constexpr uint32_t M0PR = (2 << 0);  ///< Master 0 Priority
        constexpr uint32_t M1PR = (2 << 4);  ///< Master 1 Priority
        constexpr uint32_t M2PR = (2 << 8);  ///< Master 2 Priority
        constexpr uint32_t M3PR = (2 << 12);  ///< Master 3 Priority
        constexpr uint32_t M4PR = (2 << 16);  ///< Master 4 Priority
        constexpr uint32_t M5PR = (2 << 20);  ///< Master 5 Priority
        constexpr uint32_t M6PR = (2 << 24);  ///< Master 6 Priority
        constexpr uint32_t M7PR = (2 << 28);  ///< Master 7 Priority
    }

    /// PRBS15 Register bits
    namespace prbs15_bits {
        constexpr uint32_t M8PR = (2 << 0);  ///< Master 8 Priority
        constexpr uint32_t M9PR = (2 << 4);  ///< Master 9 Priority
        constexpr uint32_t M10PR = (2 << 8);  ///< Master 10 Priority
        constexpr uint32_t M11PR = (2 << 12);  ///< Master 11 Priority
        constexpr uint32_t M12PR = (2 << 16);  ///< Master 12 Priority
        constexpr uint32_t M13PR = (2 << 20);  ///< Master 13 Priority
        constexpr uint32_t M14PR = (2 << 24);  ///< Master 14 Priority
        constexpr uint32_t M15PR = (2 << 28);  ///< Master 15 Priority
    }

    /// MRCR Register bits
    namespace mrcr_bits {
        constexpr uint32_t RCB0 = (1U << 0);  ///< RCB0
        constexpr uint32_t RCB1 = (1U << 1);  ///< RCB1
        constexpr uint32_t RCB2 = (1U << 2);  ///< RCB2
        constexpr uint32_t RCB3 = (1U << 3);  ///< RCB3
        constexpr uint32_t RCB4 = (1U << 4);  ///< RCB4
        constexpr uint32_t RCB5 = (1U << 5);  ///< RCB5
        constexpr uint32_t RCB6 = (1U << 6);  ///< RCB6
        constexpr uint32_t RCB7 = (1U << 7);  ///< RCB7
        constexpr uint32_t RCB8 = (1U << 8);  ///< RCB8
        constexpr uint32_t RCB9 = (1U << 9);  ///< RCB9
        constexpr uint32_t RCB10 = (1U << 10);  ///< RCB10
        constexpr uint32_t RCB11 = (1U << 11);  ///< RCB11
        constexpr uint32_t RCB12 = (1U << 12);  ///< RCB12
        constexpr uint32_t RCB13 = (1U << 13);  ///< RCB13
        constexpr uint32_t RCB14 = (1U << 14);  ///< RCB14
        constexpr uint32_t RCB15 = (1U << 15);  ///< RCB15
    }

    /// SFR__ Register bits
    namespace sfr___bits {
        constexpr uint32_t SFR = (32 << 0);  ///< Special Function Register Fields
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY (Write-only)
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// DBGU Peripheral
// ============================================================================

namespace dbgu {
    /// Base addresses
    constexpr uint32_t DBGU_BASE = 0xFFFFEE00;

    /// DBGU Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t IER;  ///< Offset: 0x08 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x0C - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x10 - Interrupt Mask Register
        volatile uint32_t SR;  ///< Offset: 0x14 - Status Register
        volatile uint32_t RHR;  ///< Offset: 0x18 - Receive Holding Register
        volatile uint32_t THR;  ///< Offset: 0x1C - Transmit Holding Register
        volatile uint32_t BRGR;  ///< Offset: 0x20 - Baud Rate Generator Register
        volatile uint32_t CIDR;  ///< Offset: 0x40 - Chip ID Register
        volatile uint32_t EXID;  ///< Offset: 0x44 - Chip ID Extension Register
        volatile uint32_t FNR;  ///< Offset: 0x48 - Force NTRST Register
    };

    /// Peripheral instances
    inline Registers* DBGU = reinterpret_cast<Registers*>(DBGU_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RSTRX = (1U << 2);  ///< Reset Receiver
        constexpr uint32_t RSTTX = (1U << 3);  ///< Reset Transmitter
        constexpr uint32_t RXEN = (1U << 4);  ///< Receiver Enable
        constexpr uint32_t RXDIS = (1U << 5);  ///< Receiver Disable
        constexpr uint32_t TXEN = (1U << 6);  ///< Transmitter Enable
        constexpr uint32_t TXDIS = (1U << 7);  ///< Transmitter Disable
        constexpr uint32_t RSTSTA = (1U << 8);  ///< Reset Status Bits
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t PAR = (3 << 9);  ///< Parity Type
        constexpr uint32_t CHMODE = (2 << 14);  ///< Channel Mode
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Enable RXRDY Interrupt
        constexpr uint32_t TXRDY = (1U << 1);  ///< Enable TXRDY Interrupt
        constexpr uint32_t OVRE = (1U << 5);  ///< Enable Overrun Error Interrupt
        constexpr uint32_t FRAME = (1U << 6);  ///< Enable Framing Error Interrupt
        constexpr uint32_t PARE = (1U << 7);  ///< Enable Parity Error Interrupt
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Enable TXEMPTY Interrupt
        constexpr uint32_t COMMTX = (1U << 30);  ///< Enable COMMTX (from ARM) Interrupt
        constexpr uint32_t COMMRX = (1U << 31);  ///< Enable COMMRX (from ARM) Interrupt
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Disable RXRDY Interrupt
        constexpr uint32_t TXRDY = (1U << 1);  ///< Disable TXRDY Interrupt
        constexpr uint32_t OVRE = (1U << 5);  ///< Disable Overrun Error Interrupt
        constexpr uint32_t FRAME = (1U << 6);  ///< Disable Framing Error Interrupt
        constexpr uint32_t PARE = (1U << 7);  ///< Disable Parity Error Interrupt
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Disable TXEMPTY Interrupt
        constexpr uint32_t COMMTX = (1U << 30);  ///< Disable COMMTX (from ARM) Interrupt
        constexpr uint32_t COMMRX = (1U << 31);  ///< Disable COMMRX (from ARM) Interrupt
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Mask RXRDY Interrupt
        constexpr uint32_t TXRDY = (1U << 1);  ///< Disable TXRDY Interrupt
        constexpr uint32_t OVRE = (1U << 5);  ///< Mask Overrun Error Interrupt
        constexpr uint32_t FRAME = (1U << 6);  ///< Mask Framing Error Interrupt
        constexpr uint32_t PARE = (1U << 7);  ///< Mask Parity Error Interrupt
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Mask TXEMPTY Interrupt
        constexpr uint32_t COMMTX = (1U << 30);  ///< Mask COMMTX Interrupt
        constexpr uint32_t COMMRX = (1U << 31);  ///< Mask COMMRX Interrupt
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t RXRDY = (1U << 0);  ///< Receiver Ready
        constexpr uint32_t TXRDY = (1U << 1);  ///< Transmitter Ready
        constexpr uint32_t OVRE = (1U << 5);  ///< Overrun Error
        constexpr uint32_t FRAME = (1U << 6);  ///< Framing Error
        constexpr uint32_t PARE = (1U << 7);  ///< Parity Error
        constexpr uint32_t TXEMPTY = (1U << 9);  ///< Transmitter Empty
        constexpr uint32_t COMMTX = (1U << 30);  ///< Debug Communication Channel Write Status
        constexpr uint32_t COMMRX = (1U << 31);  ///< Debug Communication Channel Read Status
    }

    /// RHR Register bits
    namespace rhr_bits {
        constexpr uint32_t RXCHR = (8 << 0);  ///< Received Character
    }

    /// THR Register bits
    namespace thr_bits {
        constexpr uint32_t TXCHR = (8 << 0);  ///< Character to be Transmitted
    }

    /// BRGR Register bits
    namespace brgr_bits {
        constexpr uint32_t CD = (16 << 0);  ///< Clock Divisor
    }

    /// CIDR Register bits
    namespace cidr_bits {
        constexpr uint32_t VERSION = (5 << 0);  ///< Version of the Device
        constexpr uint32_t EPROC = (3 << 5);  ///< Embedded Processor
        constexpr uint32_t NVPSIZ = (4 << 8);  ///< Nonvolatile Program Memory Size
        constexpr uint32_t NVPSIZ2 = (4 << 12);  ///< None
        constexpr uint32_t SRAMSIZ = (4 << 16);  ///< Internal SRAM Size
        constexpr uint32_t ARCH = (8 << 20);  ///< Architecture Identifier
        constexpr uint32_t NVPTYP = (3 << 28);  ///< Nonvolatile Program Memory Type
        constexpr uint32_t EXT = (1U << 31);  ///< Extension Flag
    }

    /// EXID Register bits
    namespace exid_bits {
        constexpr uint32_t EXID = (32 << 0);  ///< Chip ID Extension
    }

    /// FNR Register bits
    namespace fnr_bits {
        constexpr uint32_t FNTRST = (1U << 0);  ///< Force NTRST
    }

}

// ============================================================================
// AIC Peripheral
// ============================================================================

namespace aic {
    /// Base addresses
    constexpr uint32_t AIC_BASE = 0xFFFFF000;

    /// AIC Register structure
    struct Registers {
        volatile uint32_t SSR;  ///< Offset: 0x00 - Source Select Register
        volatile uint32_t SMR;  ///< Offset: 0x04 - Source Mode Register
        volatile uint32_t SVR;  ///< Offset: 0x08 - Source Vector Register
        volatile uint32_t IVR;  ///< Offset: 0x10 - Interrupt Vector Register
        volatile uint32_t FVR;  ///< Offset: 0x14 - FIQ Interrupt Vector Register
        volatile uint32_t ISR;  ///< Offset: 0x18 - Interrupt Status Register
        volatile uint32_t IPR0;  ///< Offset: 0x20 - Interrupt Pending Register 0
        volatile uint32_t IPR1;  ///< Offset: 0x24 - Interrupt Pending Register 1
        volatile uint32_t IPR2;  ///< Offset: 0x28 - Interrupt Pending Register 2
        volatile uint32_t IPR3;  ///< Offset: 0x2C - Interrupt Pending Register 3
        volatile uint32_t IMR;  ///< Offset: 0x30 - Interrupt Mask Register
        volatile uint32_t CISR;  ///< Offset: 0x34 - Core Interrupt Status Register
        volatile uint32_t EOICR;  ///< Offset: 0x38 - End of Interrupt Command Register
        volatile uint32_t SPU;  ///< Offset: 0x3C - Spurious Interrupt Vector Register
        volatile uint32_t IECR;  ///< Offset: 0x40 - Interrupt Enable Command Register
        volatile uint32_t IDCR;  ///< Offset: 0x44 - Interrupt Disable Command Register
        volatile uint32_t ICCR;  ///< Offset: 0x48 - Interrupt Clear Command Register
        volatile uint32_t ISCR;  ///< Offset: 0x4C - Interrupt Set Command Register
        volatile uint32_t FFER;  ///< Offset: 0x50 - Fast Forcing Enable Register
        volatile uint32_t FFDR;  ///< Offset: 0x54 - Fast Forcing Disable Register
        volatile uint32_t FFSR;  ///< Offset: 0x58 - Fast Forcing Status Register
        volatile uint32_t DCR;  ///< Offset: 0x6C - Debug Control Register
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
    };

    /// Peripheral instances
    inline Registers* AIC = reinterpret_cast<Registers*>(AIC_BASE);

    // Bit definitions
    /// SSR Register bits
    namespace ssr_bits {
        constexpr uint32_t INTSEL = (7 << 0);  ///< Interrupt line Selection
    }

    /// SMR Register bits
    namespace smr_bits {
        constexpr uint32_t PRIOR = (3 << 0);  ///< Priority Level
        constexpr uint32_t SRCTYPE = (2 << 5);  ///< Interrupt Source Type
    }

    /// SVR Register bits
    namespace svr_bits {
        constexpr uint32_t VECTOR = (32 << 0);  ///< Source Vector
    }

    /// IVR Register bits
    namespace ivr_bits {
        constexpr uint32_t IRQV = (32 << 0);  ///< Interrupt Vector Register
    }

    /// FVR Register bits
    namespace fvr_bits {
        constexpr uint32_t FIQV = (32 << 0);  ///< FIQ Vector Register
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t IRQID = (7 << 0);  ///< Current Interrupt Identifier
    }

    /// IPR0 Register bits
    namespace ipr0_bits {
        constexpr uint32_t FIQ = (1U << 0);  ///< Interrupt Pending
        constexpr uint32_t SYS = (1U << 1);  ///< Interrupt Pending
        constexpr uint32_t PID2 = (1U << 2);  ///< Interrupt Pending
        constexpr uint32_t PID3 = (1U << 3);  ///< Interrupt Pending
        constexpr uint32_t PID4 = (1U << 4);  ///< Interrupt Pending
        constexpr uint32_t PID5 = (1U << 5);  ///< Interrupt Pending
        constexpr uint32_t PID6 = (1U << 6);  ///< Interrupt Pending
        constexpr uint32_t PID7 = (1U << 7);  ///< Interrupt Pending
        constexpr uint32_t PID8 = (1U << 8);  ///< Interrupt Pending
        constexpr uint32_t PID9 = (1U << 9);  ///< Interrupt Pending
        constexpr uint32_t PID10 = (1U << 10);  ///< Interrupt Pending
        constexpr uint32_t PID11 = (1U << 11);  ///< Interrupt Pending
        constexpr uint32_t PID12 = (1U << 12);  ///< Interrupt Pending
        constexpr uint32_t PID13 = (1U << 13);  ///< Interrupt Pending
        constexpr uint32_t PID14 = (1U << 14);  ///< Interrupt Pending
        constexpr uint32_t PID15 = (1U << 15);  ///< Interrupt Pending
        constexpr uint32_t PID16 = (1U << 16);  ///< Interrupt Pending
        constexpr uint32_t PID17 = (1U << 17);  ///< Interrupt Pending
        constexpr uint32_t PID18 = (1U << 18);  ///< Interrupt Pending
        constexpr uint32_t PID19 = (1U << 19);  ///< Interrupt Pending
        constexpr uint32_t PID20 = (1U << 20);  ///< Interrupt Pending
        constexpr uint32_t PID21 = (1U << 21);  ///< Interrupt Pending
        constexpr uint32_t PID22 = (1U << 22);  ///< Interrupt Pending
        constexpr uint32_t PID23 = (1U << 23);  ///< Interrupt Pending
        constexpr uint32_t PID24 = (1U << 24);  ///< Interrupt Pending
        constexpr uint32_t PID25 = (1U << 25);  ///< Interrupt Pending
        constexpr uint32_t PID26 = (1U << 26);  ///< Interrupt Pending
        constexpr uint32_t PID27 = (1U << 27);  ///< Interrupt Pending
        constexpr uint32_t PID28 = (1U << 28);  ///< Interrupt Pending
        constexpr uint32_t PID29 = (1U << 29);  ///< Interrupt Pending
        constexpr uint32_t PID30 = (1U << 30);  ///< Interrupt Pending
        constexpr uint32_t PID31 = (1U << 31);  ///< Interrupt Pending
    }

    /// IPR1 Register bits
    namespace ipr1_bits {
        constexpr uint32_t PID32 = (1U << 0);  ///< Interrupt Pending
        constexpr uint32_t PID33 = (1U << 1);  ///< Interrupt Pending
        constexpr uint32_t PID34 = (1U << 2);  ///< Interrupt Pending
        constexpr uint32_t PID35 = (1U << 3);  ///< Interrupt Pending
        constexpr uint32_t PID36 = (1U << 4);  ///< Interrupt Pending
        constexpr uint32_t PID37 = (1U << 5);  ///< Interrupt Pending
        constexpr uint32_t PID38 = (1U << 6);  ///< Interrupt Pending
        constexpr uint32_t PID39 = (1U << 7);  ///< Interrupt Pending
        constexpr uint32_t PID40 = (1U << 8);  ///< Interrupt Pending
        constexpr uint32_t PID41 = (1U << 9);  ///< Interrupt Pending
        constexpr uint32_t PID42 = (1U << 10);  ///< Interrupt Pending
        constexpr uint32_t PID43 = (1U << 11);  ///< Interrupt Pending
        constexpr uint32_t PID44 = (1U << 12);  ///< Interrupt Pending
        constexpr uint32_t PID45 = (1U << 13);  ///< Interrupt Pending
        constexpr uint32_t PID46 = (1U << 14);  ///< Interrupt Pending
        constexpr uint32_t PID47 = (1U << 15);  ///< Interrupt Pending
        constexpr uint32_t PID48 = (1U << 16);  ///< Interrupt Pending
        constexpr uint32_t PID49 = (1U << 17);  ///< Interrupt Pending
        constexpr uint32_t PID50 = (1U << 18);  ///< Interrupt Pending
        constexpr uint32_t PID51 = (1U << 19);  ///< Interrupt Pending
        constexpr uint32_t PID52 = (1U << 20);  ///< Interrupt Pending
        constexpr uint32_t PID53 = (1U << 21);  ///< Interrupt Pending
        constexpr uint32_t PID54 = (1U << 22);  ///< Interrupt Pending
        constexpr uint32_t PID55 = (1U << 23);  ///< Interrupt Pending
        constexpr uint32_t PID56 = (1U << 24);  ///< Interrupt Pending
        constexpr uint32_t PID57 = (1U << 25);  ///< Interrupt Pending
        constexpr uint32_t PID58 = (1U << 26);  ///< Interrupt Pending
        constexpr uint32_t PID59 = (1U << 27);  ///< Interrupt Pending
        constexpr uint32_t PID60 = (1U << 28);  ///< Interrupt Pending
        constexpr uint32_t PID61 = (1U << 29);  ///< Interrupt Pending
        constexpr uint32_t PID62 = (1U << 30);  ///< Interrupt Pending
        constexpr uint32_t PID63 = (1U << 31);  ///< Interrupt Pending
    }

    /// IPR2 Register bits
    namespace ipr2_bits {
        constexpr uint32_t PID64 = (1U << 0);  ///< Interrupt Pending
        constexpr uint32_t PID65 = (1U << 1);  ///< Interrupt Pending
        constexpr uint32_t PID66 = (1U << 2);  ///< Interrupt Pending
        constexpr uint32_t PID67 = (1U << 3);  ///< Interrupt Pending
        constexpr uint32_t PID68 = (1U << 4);  ///< Interrupt Pending
        constexpr uint32_t PID69 = (1U << 5);  ///< Interrupt Pending
        constexpr uint32_t PID70 = (1U << 6);  ///< Interrupt Pending
        constexpr uint32_t PID71 = (1U << 7);  ///< Interrupt Pending
        constexpr uint32_t PID72 = (1U << 8);  ///< Interrupt Pending
        constexpr uint32_t PID73 = (1U << 9);  ///< Interrupt Pending
        constexpr uint32_t PID74 = (1U << 10);  ///< Interrupt Pending
        constexpr uint32_t PID75 = (1U << 11);  ///< Interrupt Pending
        constexpr uint32_t PID76 = (1U << 12);  ///< Interrupt Pending
        constexpr uint32_t PID77 = (1U << 13);  ///< Interrupt Pending
        constexpr uint32_t PID78 = (1U << 14);  ///< Interrupt Pending
        constexpr uint32_t PID79 = (1U << 15);  ///< Interrupt Pending
        constexpr uint32_t PID80 = (1U << 16);  ///< Interrupt Pending
        constexpr uint32_t PID81 = (1U << 17);  ///< Interrupt Pending
        constexpr uint32_t PID82 = (1U << 18);  ///< Interrupt Pending
        constexpr uint32_t PID83 = (1U << 19);  ///< Interrupt Pending
        constexpr uint32_t PID84 = (1U << 20);  ///< Interrupt Pending
        constexpr uint32_t PID85 = (1U << 21);  ///< Interrupt Pending
        constexpr uint32_t PID86 = (1U << 22);  ///< Interrupt Pending
        constexpr uint32_t PID87 = (1U << 23);  ///< Interrupt Pending
        constexpr uint32_t PID88 = (1U << 24);  ///< Interrupt Pending
        constexpr uint32_t PID89 = (1U << 25);  ///< Interrupt Pending
        constexpr uint32_t PID90 = (1U << 26);  ///< Interrupt Pending
        constexpr uint32_t PID91 = (1U << 27);  ///< Interrupt Pending
        constexpr uint32_t PID92 = (1U << 28);  ///< Interrupt Pending
        constexpr uint32_t PID93 = (1U << 29);  ///< Interrupt Pending
        constexpr uint32_t PID94 = (1U << 30);  ///< Interrupt Pending
        constexpr uint32_t PID95 = (1U << 31);  ///< Interrupt Pending
    }

    /// IPR3 Register bits
    namespace ipr3_bits {
        constexpr uint32_t PID96 = (1U << 0);  ///< Interrupt Pending
        constexpr uint32_t PID97 = (1U << 1);  ///< Interrupt Pending
        constexpr uint32_t PID98 = (1U << 2);  ///< Interrupt Pending
        constexpr uint32_t PID99 = (1U << 3);  ///< Interrupt Pending
        constexpr uint32_t PID100 = (1U << 4);  ///< Interrupt Pending
        constexpr uint32_t PID101 = (1U << 5);  ///< Interrupt Pending
        constexpr uint32_t PID102 = (1U << 6);  ///< Interrupt Pending
        constexpr uint32_t PID103 = (1U << 7);  ///< Interrupt Pending
        constexpr uint32_t PID104 = (1U << 8);  ///< Interrupt Pending
        constexpr uint32_t PID105 = (1U << 9);  ///< Interrupt Pending
        constexpr uint32_t PID106 = (1U << 10);  ///< Interrupt Pending
        constexpr uint32_t PID107 = (1U << 11);  ///< Interrupt Pending
        constexpr uint32_t PID108 = (1U << 12);  ///< Interrupt Pending
        constexpr uint32_t PID109 = (1U << 13);  ///< Interrupt Pending
        constexpr uint32_t PID110 = (1U << 14);  ///< Interrupt Pending
        constexpr uint32_t PID111 = (1U << 15);  ///< Interrupt Pending
        constexpr uint32_t PID112 = (1U << 16);  ///< Interrupt Pending
        constexpr uint32_t PID113 = (1U << 17);  ///< Interrupt Pending
        constexpr uint32_t PID114 = (1U << 18);  ///< Interrupt Pending
        constexpr uint32_t PID115 = (1U << 19);  ///< Interrupt Pending
        constexpr uint32_t PID116 = (1U << 20);  ///< Interrupt Pending
        constexpr uint32_t PID117 = (1U << 21);  ///< Interrupt Pending
        constexpr uint32_t PID118 = (1U << 22);  ///< Interrupt Pending
        constexpr uint32_t PID119 = (1U << 23);  ///< Interrupt Pending
        constexpr uint32_t PID120 = (1U << 24);  ///< Interrupt Pending
        constexpr uint32_t PID121 = (1U << 25);  ///< Interrupt Pending
        constexpr uint32_t PID122 = (1U << 26);  ///< Interrupt Pending
        constexpr uint32_t PID123 = (1U << 27);  ///< Interrupt Pending
        constexpr uint32_t PID124 = (1U << 28);  ///< Interrupt Pending
        constexpr uint32_t PID125 = (1U << 29);  ///< Interrupt Pending
        constexpr uint32_t PID126 = (1U << 30);  ///< Interrupt Pending
        constexpr uint32_t PID127 = (1U << 31);  ///< Interrupt Pending
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t INTM = (1U << 0);  ///< Interrupt Mask
    }

    /// CISR Register bits
    namespace cisr_bits {
        constexpr uint32_t NFIQ = (1U << 0);  ///< NFIQ Status
        constexpr uint32_t NIRQ = (1U << 1);  ///< NIRQ Status
    }

    /// EOICR Register bits
    namespace eoicr_bits {
        constexpr uint32_t ENDIT = (1U << 0);  ///< Interrupt Processing Complete Command
    }

    /// SPU Register bits
    namespace spu_bits {
        constexpr uint32_t SIVR = (32 << 0);  ///< Spurious Interrupt Vector Register
    }

    /// IECR Register bits
    namespace iecr_bits {
        constexpr uint32_t INTEN = (1U << 0);  ///< Interrupt Enable
    }

    /// IDCR Register bits
    namespace idcr_bits {
        constexpr uint32_t INTD = (1U << 0);  ///< Interrupt Disable
    }

    /// ICCR Register bits
    namespace iccr_bits {
        constexpr uint32_t INTCLR = (1U << 0);  ///< Interrupt Clear
    }

    /// ISCR Register bits
    namespace iscr_bits {
        constexpr uint32_t INTSET = (1U << 0);  ///< Interrupt Set
    }

    /// FFER Register bits
    namespace ffer_bits {
        constexpr uint32_t FFEN = (1U << 0);  ///< Fast Forcing Enable
    }

    /// FFDR Register bits
    namespace ffdr_bits {
        constexpr uint32_t FFDIS = (1U << 0);  ///< Fast Forcing Disable
    }

    /// FFSR Register bits
    namespace ffsr_bits {
        constexpr uint32_t FFS = (1U << 0);  ///< Fast Forcing Status
    }

    /// DCR Register bits
    namespace dcr_bits {
        constexpr uint32_t PROT = (1U << 0);  ///< Protection Mode
        constexpr uint32_t GMSK = (1U << 1);  ///< General Mask
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

}

// ============================================================================
// PIOA Peripheral
// ============================================================================

namespace pioa {
    /// Base addresses
    constexpr uint32_t PIOA_BASE = 0xFFFFF200;

    /// PIOA Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x118 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x11C - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOA = reinterpret_cast<Registers*>(PIOA_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO Line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO Line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO Line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO Line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO Line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO Line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO Line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO Line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO Line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO Line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO Line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO Line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO Line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO Line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO Line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO Line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PIOB Peripheral
// ============================================================================

namespace piob {
    /// Base addresses
    constexpr uint32_t PIOB_BASE = 0xFFFFF400;

    /// PIOB Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x118 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x11C - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOB = reinterpret_cast<Registers*>(PIOB_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO Line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO Line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO Line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO Line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO Line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO Line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO Line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO Line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO Line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO Line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO Line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO Line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO Line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO Line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO Line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO Line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PIOC Peripheral
// ============================================================================

namespace pioc {
    /// Base addresses
    constexpr uint32_t PIOC_BASE = 0xFFFFF600;

    /// PIOC Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x118 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x11C - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOC = reinterpret_cast<Registers*>(PIOC_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO Line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO Line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO Line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO Line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO Line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO Line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO Line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO Line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO Line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO Line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO Line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO Line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO Line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO Line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO Line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO Line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PIOD Peripheral
// ============================================================================

namespace piod {
    /// Base addresses
    constexpr uint32_t PIOD_BASE = 0xFFFFF800;

    /// PIOD Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x118 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x11C - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOD = reinterpret_cast<Registers*>(PIOD_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO Line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO Line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO Line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO Line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO Line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO Line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO Line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO Line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO Line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO Line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO Line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO Line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO Line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO Line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO Line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO Line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PIOE Peripheral
// ============================================================================

namespace pioe {
    /// Base addresses
    constexpr uint32_t PIOE_BASE = 0xFFFFFA00;

    /// PIOE Register structure
    struct Registers {
        volatile uint32_t PER;  ///< Offset: 0x00 - PIO Enable Register
        volatile uint32_t PDR;  ///< Offset: 0x04 - PIO Disable Register
        volatile uint32_t PSR;  ///< Offset: 0x08 - PIO Status Register
        volatile uint32_t OER;  ///< Offset: 0x10 - Output Enable Register
        volatile uint32_t ODR;  ///< Offset: 0x14 - Output Disable Register
        volatile uint32_t OSR;  ///< Offset: 0x18 - Output Status Register
        volatile uint32_t IFER;  ///< Offset: 0x20 - Glitch Input Filter Enable Register
        volatile uint32_t IFDR;  ///< Offset: 0x24 - Glitch Input Filter Disable Register
        volatile uint32_t IFSR;  ///< Offset: 0x28 - Glitch Input Filter Status Register
        volatile uint32_t SODR;  ///< Offset: 0x30 - Set Output Data Register
        volatile uint32_t CODR;  ///< Offset: 0x34 - Clear Output Data Register
        volatile uint32_t ODSR;  ///< Offset: 0x38 - Output Data Status Register
        volatile uint32_t PDSR;  ///< Offset: 0x3C - Pin Data Status Register
        volatile uint32_t IER;  ///< Offset: 0x40 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x44 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x48 - Interrupt Mask Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Interrupt Status Register
        volatile uint32_t MDER;  ///< Offset: 0x50 - Multi-driver Enable Register
        volatile uint32_t MDDR;  ///< Offset: 0x54 - Multi-driver Disable Register
        volatile uint32_t MDSR;  ///< Offset: 0x58 - Multi-driver Status Register
        volatile uint32_t PUDR;  ///< Offset: 0x60 - Pull-up Disable Register
        volatile uint32_t PUER;  ///< Offset: 0x64 - Pull-up Enable Register
        volatile uint32_t PUSR;  ///< Offset: 0x68 - Pad Pull-up Status Register
        volatile uint32_t ABCDSR__;  ///< Offset: 0x70 - Peripheral Select Register (renamed from ABCDSR__)
        volatile uint32_t IFSCDR;  ///< Offset: 0x80 - Input Filter Slow Clock Disable Register
        volatile uint32_t IFSCER;  ///< Offset: 0x84 - Input Filter Slow Clock Enable Register
        volatile uint32_t IFSCSR;  ///< Offset: 0x88 - Input Filter Slow Clock Status Register
        volatile uint32_t SCDR;  ///< Offset: 0x8C - Slow Clock Divider Debouncing Register
        volatile uint32_t PPDDR;  ///< Offset: 0x90 - Pad Pull-down Disable Register
        volatile uint32_t PPDER;  ///< Offset: 0x94 - Pad Pull-down Enable Register
        volatile uint32_t PPDSR;  ///< Offset: 0x98 - Pad Pull-down Status Register
        volatile uint32_t OWER;  ///< Offset: 0xA0 - Output Write Enable
        volatile uint32_t OWDR;  ///< Offset: 0xA4 - Output Write Disable
        volatile uint32_t OWSR;  ///< Offset: 0xA8 - Output Write Status Register
        volatile uint32_t AIMER;  ///< Offset: 0xB0 - Additional Interrupt Modes Enable Register
        volatile uint32_t AIMDR;  ///< Offset: 0xB4 - Additional Interrupt Modes Disables Register
        volatile uint32_t AIMMR;  ///< Offset: 0xB8 - Additional Interrupt Modes Mask Register
        volatile uint32_t ESR;  ///< Offset: 0xC0 - Edge Select Register
        volatile uint32_t LSR;  ///< Offset: 0xC4 - Level Select Register
        volatile uint32_t ELSR;  ///< Offset: 0xC8 - Edge/Level Status Register
        volatile uint32_t FELLSR;  ///< Offset: 0xD0 - Falling Edge/Low Level Select Register
        volatile uint32_t REHLSR;  ///< Offset: 0xD4 - Rising Edge/ High Level Select Register
        volatile uint32_t FRLHSR;  ///< Offset: 0xD8 - Fall/Rise - Low/High Status Register
        volatile uint32_t LOCKSR;  ///< Offset: 0xE0 - Lock Status
        volatile uint32_t WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t SCHMITT;  ///< Offset: 0x100 - Schmitt Trigger Register
        volatile uint32_t DRIVER1;  ///< Offset: 0x118 - I/O Drive Register 1
        volatile uint32_t DRIVER2;  ///< Offset: 0x11C - I/O Drive Register 2
    };

    /// Peripheral instances
    inline Registers* PIOE = reinterpret_cast<Registers*>(PIOE_BASE);

    // Bit definitions
    /// PER Register bits
    namespace per_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Enable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Enable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Enable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Enable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Enable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Enable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Enable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Enable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Enable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Enable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Enable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Enable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Enable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Enable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Enable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Enable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Enable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Enable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Enable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Enable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Enable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Enable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Enable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Enable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Enable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Enable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Enable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Enable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Enable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Enable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Enable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Enable
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Disable
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Disable
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Disable
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Disable
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Disable
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Disable
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Disable
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Disable
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Disable
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Disable
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Disable
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Disable
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Disable
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Disable
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Disable
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Disable
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Disable
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Disable
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Disable
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Disable
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Disable
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Disable
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Disable
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Disable
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Disable
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Disable
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Disable
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Disable
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Disable
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Disable
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Disable
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Disable
    }

    /// PSR Register bits
    namespace psr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Status
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Status
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Status
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Status
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Status
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Status
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Status
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Status
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Status
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Status
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Status
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Status
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Status
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Status
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Status
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Status
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Status
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Status
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Status
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Status
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Status
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Status
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Status
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Status
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Status
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Status
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Status
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Status
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Status
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Status
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Status
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Status
    }

    /// OER Register bits
    namespace oer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Enable
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Output Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Output Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Output Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Output Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Output Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Output Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Output Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Output Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Output Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Output Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Output Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Output Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Output Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Output Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Output Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Output Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Output Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Output Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Output Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Output Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Output Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Output Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Output Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Output Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Output Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Output Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Output Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Output Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Output Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Output Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Output Disable
    }

    /// OSR Register bits
    namespace osr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Status
    }

    /// IFER Register bits
    namespace ifer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Enable
    }

    /// IFDR Register bits
    namespace ifdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filter Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filter Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filter Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filter Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filter Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filter Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filter Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filter Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filter Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filter Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filter Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filter Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filter Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filter Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filter Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filter Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filter Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filter Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filter Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filter Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filter Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filter Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filter Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filter Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filter Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filter Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filter Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filter Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filter Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filter Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filter Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filter Disable
    }

    /// IFSR Register bits
    namespace ifsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Filer Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Filer Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Filer Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Filer Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Filer Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Filer Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Filer Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Filer Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Filer Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Filer Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Filer Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Filer Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Filer Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Filer Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Filer Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Filer Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Filer Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Filer Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Filer Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Filer Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Filer Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Filer Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Filer Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Filer Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Filer Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Filer Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Filer Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Filer Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Filer Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Filer Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Filer Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Filer Status
    }

    /// SODR Register bits
    namespace sodr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Set Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Set Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Set Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Set Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Set Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Set Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Set Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Set Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Set Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Set Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Set Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Set Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Set Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Set Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Set Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Set Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Set Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Set Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Set Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Set Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Set Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Set Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Set Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Set Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Set Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Set Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Set Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Set Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Set Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Set Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Set Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Set Output Data
    }

    /// CODR Register bits
    namespace codr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Clear Output Data
        constexpr uint32_t P1 = (1U << 1);  ///< Clear Output Data
        constexpr uint32_t P2 = (1U << 2);  ///< Clear Output Data
        constexpr uint32_t P3 = (1U << 3);  ///< Clear Output Data
        constexpr uint32_t P4 = (1U << 4);  ///< Clear Output Data
        constexpr uint32_t P5 = (1U << 5);  ///< Clear Output Data
        constexpr uint32_t P6 = (1U << 6);  ///< Clear Output Data
        constexpr uint32_t P7 = (1U << 7);  ///< Clear Output Data
        constexpr uint32_t P8 = (1U << 8);  ///< Clear Output Data
        constexpr uint32_t P9 = (1U << 9);  ///< Clear Output Data
        constexpr uint32_t P10 = (1U << 10);  ///< Clear Output Data
        constexpr uint32_t P11 = (1U << 11);  ///< Clear Output Data
        constexpr uint32_t P12 = (1U << 12);  ///< Clear Output Data
        constexpr uint32_t P13 = (1U << 13);  ///< Clear Output Data
        constexpr uint32_t P14 = (1U << 14);  ///< Clear Output Data
        constexpr uint32_t P15 = (1U << 15);  ///< Clear Output Data
        constexpr uint32_t P16 = (1U << 16);  ///< Clear Output Data
        constexpr uint32_t P17 = (1U << 17);  ///< Clear Output Data
        constexpr uint32_t P18 = (1U << 18);  ///< Clear Output Data
        constexpr uint32_t P19 = (1U << 19);  ///< Clear Output Data
        constexpr uint32_t P20 = (1U << 20);  ///< Clear Output Data
        constexpr uint32_t P21 = (1U << 21);  ///< Clear Output Data
        constexpr uint32_t P22 = (1U << 22);  ///< Clear Output Data
        constexpr uint32_t P23 = (1U << 23);  ///< Clear Output Data
        constexpr uint32_t P24 = (1U << 24);  ///< Clear Output Data
        constexpr uint32_t P25 = (1U << 25);  ///< Clear Output Data
        constexpr uint32_t P26 = (1U << 26);  ///< Clear Output Data
        constexpr uint32_t P27 = (1U << 27);  ///< Clear Output Data
        constexpr uint32_t P28 = (1U << 28);  ///< Clear Output Data
        constexpr uint32_t P29 = (1U << 29);  ///< Clear Output Data
        constexpr uint32_t P30 = (1U << 30);  ///< Clear Output Data
        constexpr uint32_t P31 = (1U << 31);  ///< Clear Output Data
    }

    /// ODSR Register bits
    namespace odsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// PDSR Register bits
    namespace pdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Data Status
        constexpr uint32_t P1 = (1U << 1);  ///< Output Data Status
        constexpr uint32_t P2 = (1U << 2);  ///< Output Data Status
        constexpr uint32_t P3 = (1U << 3);  ///< Output Data Status
        constexpr uint32_t P4 = (1U << 4);  ///< Output Data Status
        constexpr uint32_t P5 = (1U << 5);  ///< Output Data Status
        constexpr uint32_t P6 = (1U << 6);  ///< Output Data Status
        constexpr uint32_t P7 = (1U << 7);  ///< Output Data Status
        constexpr uint32_t P8 = (1U << 8);  ///< Output Data Status
        constexpr uint32_t P9 = (1U << 9);  ///< Output Data Status
        constexpr uint32_t P10 = (1U << 10);  ///< Output Data Status
        constexpr uint32_t P11 = (1U << 11);  ///< Output Data Status
        constexpr uint32_t P12 = (1U << 12);  ///< Output Data Status
        constexpr uint32_t P13 = (1U << 13);  ///< Output Data Status
        constexpr uint32_t P14 = (1U << 14);  ///< Output Data Status
        constexpr uint32_t P15 = (1U << 15);  ///< Output Data Status
        constexpr uint32_t P16 = (1U << 16);  ///< Output Data Status
        constexpr uint32_t P17 = (1U << 17);  ///< Output Data Status
        constexpr uint32_t P18 = (1U << 18);  ///< Output Data Status
        constexpr uint32_t P19 = (1U << 19);  ///< Output Data Status
        constexpr uint32_t P20 = (1U << 20);  ///< Output Data Status
        constexpr uint32_t P21 = (1U << 21);  ///< Output Data Status
        constexpr uint32_t P22 = (1U << 22);  ///< Output Data Status
        constexpr uint32_t P23 = (1U << 23);  ///< Output Data Status
        constexpr uint32_t P24 = (1U << 24);  ///< Output Data Status
        constexpr uint32_t P25 = (1U << 25);  ///< Output Data Status
        constexpr uint32_t P26 = (1U << 26);  ///< Output Data Status
        constexpr uint32_t P27 = (1U << 27);  ///< Output Data Status
        constexpr uint32_t P28 = (1U << 28);  ///< Output Data Status
        constexpr uint32_t P29 = (1U << 29);  ///< Output Data Status
        constexpr uint32_t P30 = (1U << 30);  ///< Output Data Status
        constexpr uint32_t P31 = (1U << 31);  ///< Output Data Status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Enable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Enable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Enable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Enable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Enable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Enable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Enable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Enable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Enable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Enable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Enable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Enable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Enable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Enable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Enable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Enable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Enable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Enable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Enable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Enable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Enable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Enable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Enable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Enable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Enable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Enable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Enable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Enable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Enable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Enable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Enable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Disable
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Disable
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Disable
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Disable
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Disable
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Disable
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Disable
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Disable
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Disable
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Disable
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Disable
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Disable
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Disable
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Disable
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Disable
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Disable
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Disable
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Disable
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Disable
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Disable
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Disable
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Disable
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Disable
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Disable
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Disable
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Disable
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Disable
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Disable
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Disable
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Disable
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Disable
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Mask
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Mask
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Mask
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Mask
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Mask
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Mask
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Mask
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Mask
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Mask
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Mask
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Mask
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Mask
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Mask
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Mask
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Mask
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Mask
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Mask
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Mask
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Mask
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Mask
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Mask
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Mask
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Mask
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Mask
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Mask
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Mask
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Mask
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Mask
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Mask
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Mask
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Mask
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Mask
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Input Change Interrupt Status
        constexpr uint32_t P1 = (1U << 1);  ///< Input Change Interrupt Status
        constexpr uint32_t P2 = (1U << 2);  ///< Input Change Interrupt Status
        constexpr uint32_t P3 = (1U << 3);  ///< Input Change Interrupt Status
        constexpr uint32_t P4 = (1U << 4);  ///< Input Change Interrupt Status
        constexpr uint32_t P5 = (1U << 5);  ///< Input Change Interrupt Status
        constexpr uint32_t P6 = (1U << 6);  ///< Input Change Interrupt Status
        constexpr uint32_t P7 = (1U << 7);  ///< Input Change Interrupt Status
        constexpr uint32_t P8 = (1U << 8);  ///< Input Change Interrupt Status
        constexpr uint32_t P9 = (1U << 9);  ///< Input Change Interrupt Status
        constexpr uint32_t P10 = (1U << 10);  ///< Input Change Interrupt Status
        constexpr uint32_t P11 = (1U << 11);  ///< Input Change Interrupt Status
        constexpr uint32_t P12 = (1U << 12);  ///< Input Change Interrupt Status
        constexpr uint32_t P13 = (1U << 13);  ///< Input Change Interrupt Status
        constexpr uint32_t P14 = (1U << 14);  ///< Input Change Interrupt Status
        constexpr uint32_t P15 = (1U << 15);  ///< Input Change Interrupt Status
        constexpr uint32_t P16 = (1U << 16);  ///< Input Change Interrupt Status
        constexpr uint32_t P17 = (1U << 17);  ///< Input Change Interrupt Status
        constexpr uint32_t P18 = (1U << 18);  ///< Input Change Interrupt Status
        constexpr uint32_t P19 = (1U << 19);  ///< Input Change Interrupt Status
        constexpr uint32_t P20 = (1U << 20);  ///< Input Change Interrupt Status
        constexpr uint32_t P21 = (1U << 21);  ///< Input Change Interrupt Status
        constexpr uint32_t P22 = (1U << 22);  ///< Input Change Interrupt Status
        constexpr uint32_t P23 = (1U << 23);  ///< Input Change Interrupt Status
        constexpr uint32_t P24 = (1U << 24);  ///< Input Change Interrupt Status
        constexpr uint32_t P25 = (1U << 25);  ///< Input Change Interrupt Status
        constexpr uint32_t P26 = (1U << 26);  ///< Input Change Interrupt Status
        constexpr uint32_t P27 = (1U << 27);  ///< Input Change Interrupt Status
        constexpr uint32_t P28 = (1U << 28);  ///< Input Change Interrupt Status
        constexpr uint32_t P29 = (1U << 29);  ///< Input Change Interrupt Status
        constexpr uint32_t P30 = (1U << 30);  ///< Input Change Interrupt Status
        constexpr uint32_t P31 = (1U << 31);  ///< Input Change Interrupt Status
    }

    /// MDER Register bits
    namespace mder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Enable.
    }

    /// MDDR Register bits
    namespace mddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Disable.
    }

    /// MDSR Register bits
    namespace mdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Multi Drive Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Multi Drive Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Multi Drive Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Multi Drive Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Multi Drive Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Multi Drive Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Multi Drive Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Multi Drive Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Multi Drive Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Multi Drive Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Multi Drive Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Multi Drive Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Multi Drive Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Multi Drive Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Multi Drive Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Multi Drive Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Multi Drive Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Multi Drive Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Multi Drive Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Multi Drive Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Multi Drive Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Multi Drive Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Multi Drive Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Multi Drive Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Multi Drive Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Multi Drive Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Multi Drive Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Multi Drive Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Multi Drive Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Multi Drive Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Multi Drive Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Multi Drive Status.
    }

    /// PUDR Register bits
    namespace pudr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Disable.
    }

    /// PUER Register bits
    namespace puer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Enable.
    }

    /// PUSR Register bits
    namespace pusr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Up Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Up Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Up Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Up Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Up Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Up Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Up Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Up Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Up Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Up Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Up Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Up Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Up Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Up Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Up Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Up Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Up Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Up Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Up Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Up Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Up Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Up Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Up Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Up Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Up Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Up Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Up Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Up Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Up Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Up Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Up Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Up Status.
    }

    /// ABCDSR__ Register bits
    namespace abcdsr___bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral Select.
    }

    /// IFSCDR Register bits
    namespace ifscdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< PIO Clock Glitch Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< PIO Clock Glitch Filtering Select.
    }

    /// IFSCER Register bits
    namespace ifscer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Debouncing Filtering Select.
        constexpr uint32_t P1 = (1U << 1);  ///< Debouncing Filtering Select.
        constexpr uint32_t P2 = (1U << 2);  ///< Debouncing Filtering Select.
        constexpr uint32_t P3 = (1U << 3);  ///< Debouncing Filtering Select.
        constexpr uint32_t P4 = (1U << 4);  ///< Debouncing Filtering Select.
        constexpr uint32_t P5 = (1U << 5);  ///< Debouncing Filtering Select.
        constexpr uint32_t P6 = (1U << 6);  ///< Debouncing Filtering Select.
        constexpr uint32_t P7 = (1U << 7);  ///< Debouncing Filtering Select.
        constexpr uint32_t P8 = (1U << 8);  ///< Debouncing Filtering Select.
        constexpr uint32_t P9 = (1U << 9);  ///< Debouncing Filtering Select.
        constexpr uint32_t P10 = (1U << 10);  ///< Debouncing Filtering Select.
        constexpr uint32_t P11 = (1U << 11);  ///< Debouncing Filtering Select.
        constexpr uint32_t P12 = (1U << 12);  ///< Debouncing Filtering Select.
        constexpr uint32_t P13 = (1U << 13);  ///< Debouncing Filtering Select.
        constexpr uint32_t P14 = (1U << 14);  ///< Debouncing Filtering Select.
        constexpr uint32_t P15 = (1U << 15);  ///< Debouncing Filtering Select.
        constexpr uint32_t P16 = (1U << 16);  ///< Debouncing Filtering Select.
        constexpr uint32_t P17 = (1U << 17);  ///< Debouncing Filtering Select.
        constexpr uint32_t P18 = (1U << 18);  ///< Debouncing Filtering Select.
        constexpr uint32_t P19 = (1U << 19);  ///< Debouncing Filtering Select.
        constexpr uint32_t P20 = (1U << 20);  ///< Debouncing Filtering Select.
        constexpr uint32_t P21 = (1U << 21);  ///< Debouncing Filtering Select.
        constexpr uint32_t P22 = (1U << 22);  ///< Debouncing Filtering Select.
        constexpr uint32_t P23 = (1U << 23);  ///< Debouncing Filtering Select.
        constexpr uint32_t P24 = (1U << 24);  ///< Debouncing Filtering Select.
        constexpr uint32_t P25 = (1U << 25);  ///< Debouncing Filtering Select.
        constexpr uint32_t P26 = (1U << 26);  ///< Debouncing Filtering Select.
        constexpr uint32_t P27 = (1U << 27);  ///< Debouncing Filtering Select.
        constexpr uint32_t P28 = (1U << 28);  ///< Debouncing Filtering Select.
        constexpr uint32_t P29 = (1U << 29);  ///< Debouncing Filtering Select.
        constexpr uint32_t P30 = (1U << 30);  ///< Debouncing Filtering Select.
        constexpr uint32_t P31 = (1U << 31);  ///< Debouncing Filtering Select.
    }

    /// IFSCSR Register bits
    namespace ifscsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P1 = (1U << 1);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P2 = (1U << 2);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P3 = (1U << 3);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P4 = (1U << 4);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P5 = (1U << 5);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P6 = (1U << 6);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P7 = (1U << 7);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P8 = (1U << 8);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P9 = (1U << 9);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P10 = (1U << 10);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P11 = (1U << 11);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P12 = (1U << 12);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P13 = (1U << 13);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P14 = (1U << 14);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P15 = (1U << 15);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P16 = (1U << 16);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P17 = (1U << 17);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P18 = (1U << 18);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P19 = (1U << 19);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P20 = (1U << 20);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P21 = (1U << 21);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P22 = (1U << 22);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P23 = (1U << 23);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P24 = (1U << 24);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P25 = (1U << 25);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P26 = (1U << 26);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P27 = (1U << 27);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P28 = (1U << 28);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P29 = (1U << 29);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P30 = (1U << 30);  ///< Glitch or Debouncing Filter Selection Status
        constexpr uint32_t P31 = (1U << 31);  ///< Glitch or Debouncing Filter Selection Status
    }

    /// SCDR Register bits
    namespace scdr_bits {
        constexpr uint32_t DIV = (14 << 0);  ///< DIV
    }

    /// PPDDR Register bits
    namespace ppddr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Disable.
    }

    /// PPDER Register bits
    namespace ppder_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Enable.
    }

    /// PPDSR Register bits
    namespace ppdsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Pull Down Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Pull Down Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Pull Down Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Pull Down Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Pull Down Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Pull Down Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Pull Down Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Pull Down Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Pull Down Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Pull Down Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Pull Down Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Pull Down Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Pull Down Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Pull Down Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Pull Down Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Pull Down Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Pull Down Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Pull Down Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Pull Down Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Pull Down Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Pull Down Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Pull Down Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Pull Down Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Pull Down Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Pull Down Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Pull Down Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Pull Down Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Pull Down Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Pull Down Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Pull Down Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Pull Down Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Pull Down Status.
    }

    /// OWER Register bits
    namespace ower_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Enable.
    }

    /// OWDR Register bits
    namespace owdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Disable.
    }

    /// OWSR Register bits
    namespace owsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Output Write Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Output Write Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Output Write Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Output Write Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Output Write Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Output Write Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Output Write Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Output Write Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Output Write Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Output Write Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Output Write Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Output Write Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Output Write Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Output Write Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Output Write Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Output Write Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Output Write Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Output Write Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Output Write Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Output Write Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Output Write Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Output Write Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Output Write Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Output Write Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Output Write Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Output Write Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Output Write Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Output Write Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Output Write Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Output Write Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Output Write Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Output Write Status.
    }

    /// AIMER Register bits
    namespace aimer_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Enable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Enable.
    }

    /// AIMDR Register bits
    namespace aimdr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P1 = (1U << 1);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P2 = (1U << 2);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P3 = (1U << 3);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P4 = (1U << 4);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P5 = (1U << 5);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P6 = (1U << 6);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P7 = (1U << 7);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P8 = (1U << 8);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P9 = (1U << 9);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P10 = (1U << 10);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P11 = (1U << 11);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P12 = (1U << 12);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P13 = (1U << 13);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P14 = (1U << 14);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P15 = (1U << 15);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P16 = (1U << 16);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P17 = (1U << 17);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P18 = (1U << 18);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P19 = (1U << 19);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P20 = (1U << 20);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P21 = (1U << 21);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P22 = (1U << 22);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P23 = (1U << 23);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P24 = (1U << 24);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P25 = (1U << 25);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P26 = (1U << 26);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P27 = (1U << 27);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P28 = (1U << 28);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P29 = (1U << 29);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P30 = (1U << 30);  ///< Additional Interrupt Modes Disable.
        constexpr uint32_t P31 = (1U << 31);  ///< Additional Interrupt Modes Disable.
    }

    /// AIMMR Register bits
    namespace aimmr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Peripheral CD Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Peripheral CD Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Peripheral CD Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Peripheral CD Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Peripheral CD Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Peripheral CD Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Peripheral CD Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Peripheral CD Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Peripheral CD Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Peripheral CD Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Peripheral CD Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Peripheral CD Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Peripheral CD Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Peripheral CD Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Peripheral CD Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Peripheral CD Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Peripheral CD Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Peripheral CD Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Peripheral CD Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Peripheral CD Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Peripheral CD Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Peripheral CD Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Peripheral CD Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Peripheral CD Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Peripheral CD Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Peripheral CD Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Peripheral CD Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Peripheral CD Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Peripheral CD Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Peripheral CD Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Peripheral CD Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Peripheral CD Status.
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge Interrupt Selection.
    }

    /// LSR Register bits
    namespace lsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Level Interrupt Selection.
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge/Level Interrupt source selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge/Level Interrupt source selection.
    }

    /// FELLSR Register bits
    namespace fellsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Falling Edge/Low Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Falling Edge/Low Level Interrupt Selection.
    }

    /// REHLSR Register bits
    namespace rehlsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Rising Edge /High Level Interrupt Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Rising Edge /High Level Interrupt Selection.
    }

    /// FRLHSR Register bits
    namespace frlhsr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P1 = (1U << 1);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P2 = (1U << 2);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P3 = (1U << 3);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P4 = (1U << 4);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P5 = (1U << 5);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P6 = (1U << 6);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P7 = (1U << 7);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P8 = (1U << 8);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P9 = (1U << 9);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P10 = (1U << 10);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P11 = (1U << 11);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P12 = (1U << 12);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P13 = (1U << 13);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P14 = (1U << 14);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P15 = (1U << 15);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P16 = (1U << 16);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P17 = (1U << 17);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P18 = (1U << 18);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P19 = (1U << 19);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P20 = (1U << 20);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P21 = (1U << 21);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P22 = (1U << 22);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P23 = (1U << 23);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P24 = (1U << 24);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P25 = (1U << 25);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P26 = (1U << 26);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P27 = (1U << 27);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P28 = (1U << 28);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P29 = (1U << 29);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P30 = (1U << 30);  ///< Edge /Level Interrupt Source Selection.
        constexpr uint32_t P31 = (1U << 31);  ///< Edge /Level Interrupt Source Selection.
    }

    /// LOCKSR Register bits
    namespace locksr_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Lock Status.
        constexpr uint32_t P1 = (1U << 1);  ///< Lock Status.
        constexpr uint32_t P2 = (1U << 2);  ///< Lock Status.
        constexpr uint32_t P3 = (1U << 3);  ///< Lock Status.
        constexpr uint32_t P4 = (1U << 4);  ///< Lock Status.
        constexpr uint32_t P5 = (1U << 5);  ///< Lock Status.
        constexpr uint32_t P6 = (1U << 6);  ///< Lock Status.
        constexpr uint32_t P7 = (1U << 7);  ///< Lock Status.
        constexpr uint32_t P8 = (1U << 8);  ///< Lock Status.
        constexpr uint32_t P9 = (1U << 9);  ///< Lock Status.
        constexpr uint32_t P10 = (1U << 10);  ///< Lock Status.
        constexpr uint32_t P11 = (1U << 11);  ///< Lock Status.
        constexpr uint32_t P12 = (1U << 12);  ///< Lock Status.
        constexpr uint32_t P13 = (1U << 13);  ///< Lock Status.
        constexpr uint32_t P14 = (1U << 14);  ///< Lock Status.
        constexpr uint32_t P15 = (1U << 15);  ///< Lock Status.
        constexpr uint32_t P16 = (1U << 16);  ///< Lock Status.
        constexpr uint32_t P17 = (1U << 17);  ///< Lock Status.
        constexpr uint32_t P18 = (1U << 18);  ///< Lock Status.
        constexpr uint32_t P19 = (1U << 19);  ///< Lock Status.
        constexpr uint32_t P20 = (1U << 20);  ///< Lock Status.
        constexpr uint32_t P21 = (1U << 21);  ///< Lock Status.
        constexpr uint32_t P22 = (1U << 22);  ///< Lock Status.
        constexpr uint32_t P23 = (1U << 23);  ///< Lock Status.
        constexpr uint32_t P24 = (1U << 24);  ///< Lock Status.
        constexpr uint32_t P25 = (1U << 25);  ///< Lock Status.
        constexpr uint32_t P26 = (1U << 26);  ///< Lock Status.
        constexpr uint32_t P27 = (1U << 27);  ///< Lock Status.
        constexpr uint32_t P28 = (1U << 28);  ///< Lock Status.
        constexpr uint32_t P29 = (1U << 29);  ///< Lock Status.
        constexpr uint32_t P30 = (1U << 30);  ///< Lock Status.
        constexpr uint32_t P31 = (1U << 31);  ///< Lock Status.
    }

    /// WPMR Register bits
    namespace wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// WPSR Register bits
    namespace wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// SCHMITT Register bits
    namespace schmitt_bits {
        constexpr uint32_t SCHMITT0 = (1U << 0);  ///< SCHMITT0
        constexpr uint32_t SCHMITT1 = (1U << 1);  ///< SCHMITT1
        constexpr uint32_t SCHMITT2 = (1U << 2);  ///< SCHMITT2
        constexpr uint32_t SCHMITT3 = (1U << 3);  ///< SCHMITT3
        constexpr uint32_t SCHMITT4 = (1U << 4);  ///< SCHMITT4
        constexpr uint32_t SCHMITT5 = (1U << 5);  ///< SCHMITT5
        constexpr uint32_t SCHMITT6 = (1U << 6);  ///< SCHMITT6
        constexpr uint32_t SCHMITT7 = (1U << 7);  ///< SCHMITT7
        constexpr uint32_t SCHMITT8 = (1U << 8);  ///< SCHMITT8
        constexpr uint32_t SCHMITT9 = (1U << 9);  ///< SCHMITT9
        constexpr uint32_t SCHMITT10 = (1U << 10);  ///< SCHMITT10
        constexpr uint32_t SCHMITT11 = (1U << 11);  ///< SCHMITT11
        constexpr uint32_t SCHMITT12 = (1U << 12);  ///< SCHMITT12
        constexpr uint32_t SCHMITT13 = (1U << 13);  ///< SCHMITT13
        constexpr uint32_t SCHMITT14 = (1U << 14);  ///< SCHMITT14
        constexpr uint32_t SCHMITT15 = (1U << 15);  ///< SCHMITT15
        constexpr uint32_t SCHMITT16 = (1U << 16);  ///< SCHMITT16
        constexpr uint32_t SCHMITT17 = (1U << 17);  ///< SCHMITT17
        constexpr uint32_t SCHMITT18 = (1U << 18);  ///< SCHMITT18
        constexpr uint32_t SCHMITT19 = (1U << 19);  ///< SCHMITT19
        constexpr uint32_t SCHMITT20 = (1U << 20);  ///< SCHMITT20
        constexpr uint32_t SCHMITT21 = (1U << 21);  ///< SCHMITT21
        constexpr uint32_t SCHMITT22 = (1U << 22);  ///< SCHMITT22
        constexpr uint32_t SCHMITT23 = (1U << 23);  ///< SCHMITT23
        constexpr uint32_t SCHMITT24 = (1U << 24);  ///< SCHMITT24
        constexpr uint32_t SCHMITT25 = (1U << 25);  ///< SCHMITT25
        constexpr uint32_t SCHMITT26 = (1U << 26);  ///< SCHMITT26
        constexpr uint32_t SCHMITT27 = (1U << 27);  ///< SCHMITT27
        constexpr uint32_t SCHMITT28 = (1U << 28);  ///< SCHMITT28
        constexpr uint32_t SCHMITT29 = (1U << 29);  ///< SCHMITT29
        constexpr uint32_t SCHMITT30 = (1U << 30);  ///< SCHMITT30
        constexpr uint32_t SCHMITT31 = (1U << 31);  ///< SCHMITT31
    }

    /// DRIVER1 Register bits
    namespace driver1_bits {
        constexpr uint32_t LINE0 = (2 << 0);  ///< Drive of PIO Line 0
        constexpr uint32_t LINE1 = (2 << 2);  ///< Drive of PIO Line 1
        constexpr uint32_t LINE2 = (2 << 4);  ///< Drive of PIO Line 2
        constexpr uint32_t LINE3 = (2 << 6);  ///< Drive of PIO Line 3
        constexpr uint32_t LINE4 = (2 << 8);  ///< Drive of PIO Line 4
        constexpr uint32_t LINE5 = (2 << 10);  ///< Drive of PIO Line 5
        constexpr uint32_t LINE6 = (2 << 12);  ///< Drive of PIO Line 6
        constexpr uint32_t LINE7 = (2 << 14);  ///< Drive of PIO Line 7
        constexpr uint32_t LINE8 = (2 << 16);  ///< Drive of PIO Line 8
        constexpr uint32_t LINE9 = (2 << 18);  ///< Drive of PIO Line 9
        constexpr uint32_t LINE10 = (2 << 20);  ///< Drive of PIO Line 10
        constexpr uint32_t LINE11 = (2 << 22);  ///< Drive of PIO Line 11
        constexpr uint32_t LINE12 = (2 << 24);  ///< Drive of PIO Line 12
        constexpr uint32_t LINE13 = (2 << 26);  ///< Drive of PIO Line 13
        constexpr uint32_t LINE14 = (2 << 28);  ///< Drive of PIO Line 14
        constexpr uint32_t LINE15 = (2 << 30);  ///< Drive of PIO Line 15
    }

    /// DRIVER2 Register bits
    namespace driver2_bits {
        constexpr uint32_t LINE16 = (2 << 0);  ///< Drive of PIO line 16
        constexpr uint32_t LINE17 = (2 << 2);  ///< Drive of PIO line 17
        constexpr uint32_t LINE18 = (2 << 4);  ///< Drive of PIO line 18
        constexpr uint32_t LINE19 = (2 << 6);  ///< Drive of PIO line 19
        constexpr uint32_t LINE20 = (2 << 8);  ///< Drive of PIO line 20
        constexpr uint32_t LINE21 = (2 << 10);  ///< Drive of PIO line 21
        constexpr uint32_t LINE22 = (2 << 12);  ///< Drive of PIO line 22
        constexpr uint32_t LINE23 = (2 << 14);  ///< Drive of PIO line 23
        constexpr uint32_t LINE24 = (2 << 16);  ///< Drive of PIO line 24
        constexpr uint32_t LINE25 = (2 << 18);  ///< Drive of PIO line 25
        constexpr uint32_t LINE26 = (2 << 20);  ///< Drive of PIO line 26
        constexpr uint32_t LINE27 = (2 << 22);  ///< Drive of PIO line 27
        constexpr uint32_t LINE28 = (2 << 24);  ///< Drive of PIO line 28
        constexpr uint32_t LINE29 = (2 << 26);  ///< Drive of PIO line 29
        constexpr uint32_t LINE30 = (2 << 28);  ///< Drive of PIO line 30
        constexpr uint32_t LINE31 = (2 << 30);  ///< Drive of PIO line 31
    }

}

// ============================================================================
// PMC Peripheral
// ============================================================================

namespace pmc {
    /// Base addresses
    constexpr uint32_t PMC_BASE = 0xFFFFFC00;

    /// PMC Register structure
    struct Registers {
        volatile uint32_t PMC_SCER;  ///< Offset: 0x00 - System Clock Enable Register
        volatile uint32_t PMC_SCDR;  ///< Offset: 0x04 - System Clock Disable Register
        volatile uint32_t PMC_SCSR;  ///< Offset: 0x08 - System Clock Status Register
        volatile uint32_t PMC_PCER0;  ///< Offset: 0x10 - Peripheral Clock Enable Register 0
        volatile uint32_t PMC_PCDR0;  ///< Offset: 0x14 - Peripheral Clock Disable Register 0
        volatile uint32_t PMC_PCSR0;  ///< Offset: 0x18 - Peripheral Clock Status Register 0
        volatile uint32_t CKGR_UCKR;  ///< Offset: 0x1C - UTMI Clock Register
        volatile uint32_t CKGR_MOR;  ///< Offset: 0x20 - Main Oscillator Register
        volatile uint32_t CKGR_MCFR;  ///< Offset: 0x24 - Main Clock Frequency Register
        volatile uint32_t CKGR_PLLAR;  ///< Offset: 0x28 - PLLA Register
        volatile uint32_t PMC_MCKR;  ///< Offset: 0x30 - Master Clock Register
        volatile uint32_t PMC_USB;  ///< Offset: 0x38 - USB Clock Register
        volatile uint32_t PMC_SMD;  ///< Offset: 0x3C - Soft Modem Clock Register
        volatile uint32_t PMC_PCK__;  ///< Offset: 0x40 - Programmable Clock 0 Register (renamed from PMC_PCK__)
        volatile uint32_t PMC_IER;  ///< Offset: 0x60 - Interrupt Enable Register
        volatile uint32_t PMC_IDR;  ///< Offset: 0x64 - Interrupt Disable Register
        volatile uint32_t PMC_SR;  ///< Offset: 0x68 - Status Register
        volatile uint32_t PMC_IMR;  ///< Offset: 0x6C - Interrupt Mask Register
        volatile uint32_t PMC_PLLICPR;  ///< Offset: 0x80 - PLL Charge Pump Current Register
        volatile uint32_t PMC_WPMR;  ///< Offset: 0xE4 - Write Protect Mode Register
        volatile uint32_t PMC_WPSR;  ///< Offset: 0xE8 - Write Protect Status Register
        volatile uint32_t PMC_PCER1;  ///< Offset: 0x100 - Peripheral Clock Enable Register 1
        volatile uint32_t PMC_PCDR1;  ///< Offset: 0x104 - Peripheral Clock Disable Register 1
        volatile uint32_t PMC_PCSR1;  ///< Offset: 0x108 - Peripheral Clock Status Register 1
        volatile uint32_t PMC_PCR;  ///< Offset: 0x10C - Peripheral Control Register
    };

    /// Peripheral instances
    inline Registers* PMC = reinterpret_cast<Registers*>(PMC_BASE);

    // Bit definitions
    /// PMC_SCER Register bits
    namespace pmc_scer_bits {
        constexpr uint32_t DDRCK = (1U << 2);  ///< DDR Clock Enable
        constexpr uint32_t SMDCK = (1U << 4);  ///< SMD Clock Enable
        constexpr uint32_t UHP = (1U << 6);  ///< USB Host OHCI Clocks Enable
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Clock Enable
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Enable
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Enable
        constexpr uint32_t PCK2 = (1U << 10);  ///< Programmable Clock 2 Output Enable
    }

    /// PMC_SCDR Register bits
    namespace pmc_scdr_bits {
        constexpr uint32_t PCK = (1U << 0);  ///< Processor Clock Disable
        constexpr uint32_t DDRCK = (1U << 2);  ///< DDR Clock Disable
        constexpr uint32_t SMDCK = (1U << 4);  ///< SMD Clock Disable
        constexpr uint32_t UHP = (1U << 6);  ///< USB Host OHCI Clock Disable
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Clock Enable
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Disable
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Disable
        constexpr uint32_t PCK2 = (1U << 10);  ///< Programmable Clock 2 Output Disable
    }

    /// PMC_SCSR Register bits
    namespace pmc_scsr_bits {
        constexpr uint32_t PCK = (1U << 0);  ///< Processor Clock Status
        constexpr uint32_t DDRCK = (1U << 2);  ///< DDR Clock Status
        constexpr uint32_t SMDCK = (1U << 4);  ///< SMD Clock Status
        constexpr uint32_t UHP = (1U << 6);  ///< USB Host Port Clock Status
        constexpr uint32_t UDP = (1U << 7);  ///< USB Device Port Clock Status
        constexpr uint32_t PCK0 = (1U << 8);  ///< Programmable Clock 0 Output Status
        constexpr uint32_t PCK1 = (1U << 9);  ///< Programmable Clock 1 Output Status
        constexpr uint32_t PCK2 = (1U << 10);  ///< Programmable Clock 2 Output Status
    }

    /// PMC_PCER0 Register bits
    namespace pmc_pcer0_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Enable
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Enable
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Enable
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Enable
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Enable
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Enable
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Enable
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Enable
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Enable
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Enable
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Enable
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Enable
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Enable
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Enable
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Enable
        constexpr uint32_t PID17 = (1U << 17);  ///< Peripheral Clock 17 Enable
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Enable
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Enable
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Enable
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Enable
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Enable
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Enable
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Enable
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Enable
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Enable
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Enable
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Enable
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Enable
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Enable
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Enable
    }

    /// PMC_PCDR0 Register bits
    namespace pmc_pcdr0_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Disable
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Disable
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Disable
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Disable
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Disable
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Disable
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Disable
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Disable
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Disable
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Disable
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Disable
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Disable
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Disable
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Disable
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Disable
        constexpr uint32_t PID17 = (1U << 17);  ///< Peripheral Clock 17 Disable
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Disable
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Disable
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Disable
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Disable
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Disable
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Disable
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Disable
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Disable
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Disable
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Disable
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Disable
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Disable
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Disable
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Disable
    }

    /// PMC_PCSR0 Register bits
    namespace pmc_pcsr0_bits {
        constexpr uint32_t PID2 = (1U << 2);  ///< Peripheral Clock 2 Status
        constexpr uint32_t PID3 = (1U << 3);  ///< Peripheral Clock 3 Status
        constexpr uint32_t PID4 = (1U << 4);  ///< Peripheral Clock 4 Status
        constexpr uint32_t PID5 = (1U << 5);  ///< Peripheral Clock 5 Status
        constexpr uint32_t PID6 = (1U << 6);  ///< Peripheral Clock 6 Status
        constexpr uint32_t PID7 = (1U << 7);  ///< Peripheral Clock 7 Status
        constexpr uint32_t PID8 = (1U << 8);  ///< Peripheral Clock 8 Status
        constexpr uint32_t PID9 = (1U << 9);  ///< Peripheral Clock 9 Status
        constexpr uint32_t PID10 = (1U << 10);  ///< Peripheral Clock 10 Status
        constexpr uint32_t PID11 = (1U << 11);  ///< Peripheral Clock 11 Status
        constexpr uint32_t PID12 = (1U << 12);  ///< Peripheral Clock 12 Status
        constexpr uint32_t PID13 = (1U << 13);  ///< Peripheral Clock 13 Status
        constexpr uint32_t PID14 = (1U << 14);  ///< Peripheral Clock 14 Status
        constexpr uint32_t PID15 = (1U << 15);  ///< Peripheral Clock 15 Status
        constexpr uint32_t PID16 = (1U << 16);  ///< Peripheral Clock 16 Status
        constexpr uint32_t PID17 = (1U << 17);  ///< Peripheral Clock 17 Status
        constexpr uint32_t PID18 = (1U << 18);  ///< Peripheral Clock 18 Status
        constexpr uint32_t PID19 = (1U << 19);  ///< Peripheral Clock 19 Status
        constexpr uint32_t PID20 = (1U << 20);  ///< Peripheral Clock 20 Status
        constexpr uint32_t PID21 = (1U << 21);  ///< Peripheral Clock 21 Status
        constexpr uint32_t PID22 = (1U << 22);  ///< Peripheral Clock 22 Status
        constexpr uint32_t PID23 = (1U << 23);  ///< Peripheral Clock 23 Status
        constexpr uint32_t PID24 = (1U << 24);  ///< Peripheral Clock 24 Status
        constexpr uint32_t PID25 = (1U << 25);  ///< Peripheral Clock 25 Status
        constexpr uint32_t PID26 = (1U << 26);  ///< Peripheral Clock 26 Status
        constexpr uint32_t PID27 = (1U << 27);  ///< Peripheral Clock 27 Status
        constexpr uint32_t PID28 = (1U << 28);  ///< Peripheral Clock 28 Status
        constexpr uint32_t PID29 = (1U << 29);  ///< Peripheral Clock 29 Status
        constexpr uint32_t PID30 = (1U << 30);  ///< Peripheral Clock 30 Status
        constexpr uint32_t PID31 = (1U << 31);  ///< Peripheral Clock 31 Status
    }

    /// CKGR_UCKR Register bits
    namespace ckgr_uckr_bits {
        constexpr uint32_t UPLLEN = (1U << 16);  ///< UTMI PLL Enable
        constexpr uint32_t UPLLCOUNT = (4 << 20);  ///< UTMI PLL Start-up Time
        constexpr uint32_t BIASEN = (1U << 24);  ///< UTMI BIAS Enable
        constexpr uint32_t BIASCOUNT = (4 << 28);  ///< UTMI BIAS Start-up Time
    }

    /// CKGR_MOR Register bits
    namespace ckgr_mor_bits {
        constexpr uint32_t MOSCXTEN = (1U << 0);  ///< Main Crystal Oscillator Enable
        constexpr uint32_t MOSCXTBY = (1U << 1);  ///< Main Crystal Oscillator Bypass
        constexpr uint32_t MOSCRCEN = (1U << 3);  ///< Main On-Chip RC Oscillator Enable
        constexpr uint32_t MOSCXTST = (8 << 8);  ///< Main Crystal Oscillator Start-up Time
        constexpr uint32_t KEY = (8 << 16);  ///< Password
        constexpr uint32_t MOSCSEL = (1U << 24);  ///< Main Oscillator Selection
        constexpr uint32_t CFDEN = (1U << 25);  ///< Clock Failure Detector Enable
    }

    /// CKGR_MCFR Register bits
    namespace ckgr_mcfr_bits {
        constexpr uint32_t MAINF = (16 << 0);  ///< Main Clock Frequency
        constexpr uint32_t MAINFRDY = (1U << 16);  ///< Main Clock Ready
    }

    /// CKGR_PLLAR Register bits
    namespace ckgr_pllar_bits {
        constexpr uint32_t DIVA = (8 << 0);  ///< Divider A
        constexpr uint32_t PLLACOUNT = (6 << 8);  ///< PLLA Counter
        constexpr uint32_t OUTA = (2 << 14);  ///< PLLA Clock Frequency Range
        constexpr uint32_t MULA = (11 << 16);  ///< PLLA Multiplier
        constexpr uint32_t STUCKTO1 = (1U << 29);  ///< STUCKTO1
    }

    /// PMC_MCKR Register bits
    namespace pmc_mckr_bits {
        constexpr uint32_t CSS = (2 << 0);  ///< Master/Processor Clock Source Selection
        constexpr uint32_t PRES = (3 << 4);  ///< Master/Processor Clock Prescaler
        constexpr uint32_t MDIV = (2 << 8);  ///< Master Clock Division
        constexpr uint32_t PLLADIV2 = (1U << 12);  ///< PLLA divisor by 2
    }

    /// PMC_USB Register bits
    namespace pmc_usb_bits {
        constexpr uint32_t USBS = (1U << 0);  ///< USB OHCI Input Clock Selection
        constexpr uint32_t USBDIV = (4 << 8);  ///< Divider for USB OHCI Clock.
    }

    /// PMC_SMD Register bits
    namespace pmc_smd_bits {
        constexpr uint32_t SMDS = (1U << 0);  ///< SMD input clock selection
        constexpr uint32_t SMDDIV = (5 << 8);  ///< Divider for SMD Clock.
    }

    /// PMC_PCK__ Register bits
    namespace pmc_pck___bits {
        constexpr uint32_t CSS = (3 << 0);  ///< Master Clock Source Selection
        constexpr uint32_t PRES = (3 << 4);  ///< Programmable Clock Prescaler
    }

    /// PMC_IER Register bits
    namespace pmc_ier_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Enable
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Enable
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Enable
        constexpr uint32_t LOCKU = (1U << 6);  ///< UTMI PLL Lock Interrupt Enable
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Enable
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Enable
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Enable
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Enable
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Enable
    }

    /// PMC_IDR Register bits
    namespace pmc_idr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Disable
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Disable
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Disable
        constexpr uint32_t LOCKU = (1U << 6);  ///< UTMI PLL Lock Interrupt Enable
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Disable
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Disable
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Disable
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Disable
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Disable
    }

    /// PMC_SR Register bits
    namespace pmc_sr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main XTAL Oscillator Status
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Status
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Status
        constexpr uint32_t LOCKU = (1U << 6);  ///< UPLL Clock Status
        constexpr uint32_t OSCSELS = (1U << 7);  ///< Slow Clock Oscillator Selection
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready Status
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready Status
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Oscillator Status
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event
        constexpr uint32_t CFDS = (1U << 19);  ///< Clock Failure Detector Status
        constexpr uint32_t FOS = (1U << 20);  ///< Clock Failure Detector Fault Output Status
    }

    /// PMC_IMR Register bits
    namespace pmc_imr_bits {
        constexpr uint32_t MOSCXTS = (1U << 0);  ///< Main Crystal Oscillator Status Interrupt Mask
        constexpr uint32_t LOCKA = (1U << 1);  ///< PLLA Lock Interrupt Mask
        constexpr uint32_t MCKRDY = (1U << 3);  ///< Master Clock Ready Interrupt Mask
        constexpr uint32_t PCKRDY0 = (1U << 8);  ///< Programmable Clock Ready 0 Interrupt Mask
        constexpr uint32_t PCKRDY1 = (1U << 9);  ///< Programmable Clock Ready 1 Interrupt Mask
        constexpr uint32_t MOSCSELS = (1U << 16);  ///< Main Oscillator Selection Status Interrupt Mask
        constexpr uint32_t MOSCRCS = (1U << 17);  ///< Main On-Chip RC Status Interrupt Mask
        constexpr uint32_t CFDEV = (1U << 18);  ///< Clock Failure Detector Event Interrupt Mask
    }

    /// PMC_PLLICPR Register bits
    namespace pmc_pllicpr_bits {
        constexpr uint32_t ICPLLA = (1U << 0);  ///< Charge Pump Current
    }

    /// PMC_WPMR Register bits
    namespace pmc_wpmr_bits {
        constexpr uint32_t WPEN = (1U << 0);  ///< Write Protect Enable
        constexpr uint32_t WPKEY = (24 << 8);  ///< Write Protect KEY
    }

    /// PMC_WPSR Register bits
    namespace pmc_wpsr_bits {
        constexpr uint32_t WPVS = (1U << 0);  ///< Write Protect Violation Status
        constexpr uint32_t WPVSRC = (16 << 8);  ///< Write Protect Violation Source
    }

    /// PMC_PCER1 Register bits
    namespace pmc_pcer1_bits {
        constexpr uint32_t PID32 = (1U << 0);  ///< Peripheral Clock 32 Enable
        constexpr uint32_t PID33 = (1U << 1);  ///< Peripheral Clock 33 Enable
        constexpr uint32_t PID34 = (1U << 2);  ///< Peripheral Clock 34 Enable
        constexpr uint32_t PID35 = (1U << 3);  ///< Peripheral Clock 35 Enable
        constexpr uint32_t PID36 = (1U << 4);  ///< Peripheral Clock 36 Enable
        constexpr uint32_t PID37 = (1U << 5);  ///< Peripheral Clock 37 Enable
        constexpr uint32_t PID38 = (1U << 6);  ///< Peripheral Clock 38 Enable
        constexpr uint32_t PID39 = (1U << 7);  ///< Peripheral Clock 39 Enable
        constexpr uint32_t PID40 = (1U << 8);  ///< Peripheral Clock 40 Enable
        constexpr uint32_t PID41 = (1U << 9);  ///< Peripheral Clock 41 Enable
        constexpr uint32_t PID42 = (1U << 10);  ///< Peripheral Clock 42 Enable
        constexpr uint32_t PID43 = (1U << 11);  ///< Peripheral Clock 43 Enable
        constexpr uint32_t PID44 = (1U << 12);  ///< Peripheral Clock 44 Enable
        constexpr uint32_t PID45 = (1U << 13);  ///< Peripheral Clock 45 Enable
        constexpr uint32_t PID46 = (1U << 14);  ///< Peripheral Clock 46 Enable
        constexpr uint32_t PID47 = (1U << 15);  ///< Peripheral Clock 47 Enable
        constexpr uint32_t PID48 = (1U << 16);  ///< Peripheral Clock 48 Enable
        constexpr uint32_t PID49 = (1U << 17);  ///< Peripheral Clock 49 Enable
        constexpr uint32_t PID50 = (1U << 18);  ///< Peripheral Clock 50 Enable
        constexpr uint32_t PID51 = (1U << 19);  ///< Peripheral Clock 51 Enable
        constexpr uint32_t PID53 = (2 << 20);  ///< Peripheral Clock 53 Enable
        constexpr uint32_t PID54 = (1U << 22);  ///< Peripheral Clock 54 Enable
        constexpr uint32_t PID55 = (1U << 23);  ///< Peripheral Clock 55 Enable
        constexpr uint32_t PID56 = (1U << 24);  ///< Peripheral Clock 56 Enable
        constexpr uint32_t PID57 = (1U << 25);  ///< Peripheral Clock 57 Enable
        constexpr uint32_t PID58 = (1U << 26);  ///< Peripheral Clock 58 Enable
        constexpr uint32_t PID59 = (1U << 27);  ///< Peripheral Clock 59 Enable
        constexpr uint32_t PID60 = (1U << 28);  ///< Peripheral Clock 60 Enable
        constexpr uint32_t PID61 = (1U << 29);  ///< Peripheral Clock 61 Enable
        constexpr uint32_t PID62 = (1U << 30);  ///< Peripheral Clock 62 Enable
        constexpr uint32_t PID63 = (1U << 31);  ///< Peripheral Clock 63 Enable
    }

    /// PMC_PCDR1 Register bits
    namespace pmc_pcdr1_bits {
        constexpr uint32_t PID32 = (1U << 0);  ///< Peripheral Clock 32 Disable
        constexpr uint32_t PID33 = (1U << 1);  ///< Peripheral Clock 33 Disable
        constexpr uint32_t PID34 = (1U << 2);  ///< Peripheral Clock 34 Disable
        constexpr uint32_t PID35 = (1U << 3);  ///< Peripheral Clock 35 Disable
        constexpr uint32_t PID36 = (1U << 4);  ///< Peripheral Clock 36 Disable
        constexpr uint32_t PID37 = (1U << 5);  ///< Peripheral Clock 37 Disable
        constexpr uint32_t PID38 = (1U << 6);  ///< Peripheral Clock 38 Disable
        constexpr uint32_t PID39 = (1U << 7);  ///< Peripheral Clock 39 Disable
        constexpr uint32_t PID40 = (1U << 8);  ///< Peripheral Clock 40 Disable
        constexpr uint32_t PID41 = (1U << 9);  ///< Peripheral Clock 41 Disable
        constexpr uint32_t PID42 = (1U << 10);  ///< Peripheral Clock 42 Disable
        constexpr uint32_t PID43 = (1U << 11);  ///< Peripheral Clock 43 Disable
        constexpr uint32_t PID44 = (1U << 12);  ///< Peripheral Clock 44 Disable
        constexpr uint32_t PID45 = (1U << 13);  ///< Peripheral Clock 45 Disable
        constexpr uint32_t PID46 = (1U << 14);  ///< Peripheral Clock 46 Disable
        constexpr uint32_t PID47 = (1U << 15);  ///< Peripheral Clock 47 Disable
        constexpr uint32_t PID48 = (1U << 16);  ///< Peripheral Clock 48 Disable
        constexpr uint32_t PID49 = (1U << 17);  ///< Peripheral Clock 49 Disable
        constexpr uint32_t PID50 = (1U << 18);  ///< Peripheral Clock 50 Disable
        constexpr uint32_t PID51 = (1U << 19);  ///< Peripheral Clock 51 Disable
        constexpr uint32_t PID53 = (2 << 20);  ///< Peripheral Clock 53 Disable
        constexpr uint32_t PID54 = (1U << 22);  ///< Peripheral Clock 54 Disable
        constexpr uint32_t PID55 = (1U << 23);  ///< Peripheral Clock 55 Disable
        constexpr uint32_t PID56 = (1U << 24);  ///< Peripheral Clock 56 Disable
        constexpr uint32_t PID57 = (1U << 25);  ///< Peripheral Clock 57 Disable
        constexpr uint32_t PID58 = (1U << 26);  ///< Peripheral Clock 58 Disable
        constexpr uint32_t PID59 = (1U << 27);  ///< Peripheral Clock 59 Disable
        constexpr uint32_t PID60 = (1U << 28);  ///< Peripheral Clock 60 Disable
        constexpr uint32_t PID61 = (1U << 29);  ///< Peripheral Clock 61 Disable
        constexpr uint32_t PID62 = (1U << 30);  ///< Peripheral Clock 62 Disable
        constexpr uint32_t PID63 = (1U << 31);  ///< Peripheral Clock 63 Disable
    }

    /// PMC_PCSR1 Register bits
    namespace pmc_pcsr1_bits {
        constexpr uint32_t PID32 = (1U << 0);  ///< Peripheral Clock 32 Status
        constexpr uint32_t PID33 = (1U << 1);  ///< Peripheral Clock 33 Status
        constexpr uint32_t PID34 = (1U << 2);  ///< Peripheral Clock 34 Status
        constexpr uint32_t PID35 = (1U << 3);  ///< Peripheral Clock 35 Status
        constexpr uint32_t PID36 = (1U << 4);  ///< Peripheral Clock 36 Status
        constexpr uint32_t PID37 = (1U << 5);  ///< Peripheral Clock 37 Status
        constexpr uint32_t PID38 = (1U << 6);  ///< Peripheral Clock 38 Status
        constexpr uint32_t PID39 = (1U << 7);  ///< Peripheral Clock 39 Status
        constexpr uint32_t PID40 = (1U << 8);  ///< Peripheral Clock 40 Status
        constexpr uint32_t PID41 = (1U << 9);  ///< Peripheral Clock 41 Status
        constexpr uint32_t PID42 = (1U << 10);  ///< Peripheral Clock 42 Status
        constexpr uint32_t PID43 = (1U << 11);  ///< Peripheral Clock 43 Status
        constexpr uint32_t PID44 = (1U << 12);  ///< Peripheral Clock 44 Status
        constexpr uint32_t PID45 = (1U << 13);  ///< Peripheral Clock 45 Status
        constexpr uint32_t PID46 = (1U << 14);  ///< Peripheral Clock 46 Status
        constexpr uint32_t PID47 = (1U << 15);  ///< Peripheral Clock 47 Status
        constexpr uint32_t PID48 = (1U << 16);  ///< Peripheral Clock 48 Status
        constexpr uint32_t PID49 = (1U << 17);  ///< Peripheral Clock 49 Status
        constexpr uint32_t PID50 = (1U << 18);  ///< Peripheral Clock 50 Status
        constexpr uint32_t PID51 = (1U << 19);  ///< Peripheral Clock 51 Status
        constexpr uint32_t PID53 = (2 << 20);  ///< Peripheral Clock 53 Status
        constexpr uint32_t PID54 = (1U << 22);  ///< Peripheral Clock 54 Status
        constexpr uint32_t PID55 = (1U << 23);  ///< Peripheral Clock 55 Status
        constexpr uint32_t PID56 = (1U << 24);  ///< Peripheral Clock 56 Status
        constexpr uint32_t PID57 = (1U << 25);  ///< Peripheral Clock 57 Status
        constexpr uint32_t PID58 = (1U << 26);  ///< Peripheral Clock 58 Status
        constexpr uint32_t PID59 = (1U << 27);  ///< Peripheral Clock 59 Status
        constexpr uint32_t PID60 = (1U << 28);  ///< Peripheral Clock 60 Status
        constexpr uint32_t PID61 = (1U << 29);  ///< Peripheral Clock 61 Status
        constexpr uint32_t PID62 = (1U << 30);  ///< Peripheral Clock 62 Status
        constexpr uint32_t PID63 = (1U << 31);  ///< Peripheral Clock 63 Status
    }

    /// PMC_PCR Register bits
    namespace pmc_pcr_bits {
        constexpr uint32_t PID = (6 << 0);  ///< Peripheral ID
        constexpr uint32_t CMD = (1U << 12);  ///< Command
        constexpr uint32_t DIV = (2 << 16);  ///< Divisor Value
        constexpr uint32_t EN = (1U << 28);  ///< Enable
    }

}

// ============================================================================
// RSTC Peripheral
// ============================================================================

namespace rstc {
    /// Base addresses
    constexpr uint32_t RSTC_BASE = 0xFFFFFE00;

    /// RSTC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t SR;  ///< Offset: 0x04 - Status Register
        volatile uint32_t MR;  ///< Offset: 0x08 - Mode Register
    };

    /// Peripheral instances
    inline Registers* RSTC = reinterpret_cast<Registers*>(RSTC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PROCRST = (1U << 0);  ///< Processor Reset
        constexpr uint32_t PERRST = (1U << 2);  ///< Peripheral Reset
        constexpr uint32_t EXTRST = (1U << 3);  ///< External Reset
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t URSTS = (1U << 0);  ///< User Reset Status
        constexpr uint32_t RSTTYP = (3 << 8);  ///< Reset Type
        constexpr uint32_t NRSTL = (1U << 16);  ///< NRST Pin Level
        constexpr uint32_t SRCMP = (1U << 17);  ///< Software Reset Command in Progress
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t ERSTL = (4 << 8);  ///< External Reset Length
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

}

// ============================================================================
// SHDWC Peripheral
// ============================================================================

namespace shdwc {
    /// Base addresses
    constexpr uint32_t SHDWC_BASE = 0xFFFFFE10;

    /// SHDWC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Shutdown Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Shutdown Mode Register
        volatile uint32_t SR;  ///< Offset: 0x08 - Shutdown Status Register
    };

    /// Peripheral instances
    inline Registers* SHDWC = reinterpret_cast<Registers*>(SHDWC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t SHDW = (1U << 0);  ///< Shutdown Command
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t WKMODE0 = (2 << 0);  ///< Wake-up Mode 0
        constexpr uint32_t CPTWK0 = (4 << 4);  ///< Counter on Wake-up 0
        constexpr uint32_t RTCWKEN = (1U << 17);  ///< Real-time Clock Wake-up Enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t WAKEUP0 = (1U << 0);  ///< Wake-up 0 Status
        constexpr uint32_t RTCWK = (1U << 17);  ///< Real-time Clock Wake-up
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WDT_BASE = 0xFFFFFE40;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t SR;  ///< Offset: 0x08 - Status Register
    };

    /// Peripheral instances
    inline Registers* WDT = reinterpret_cast<Registers*>(WDT_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WDRSTT = (1U << 0);  ///< Watchdog Restart
        constexpr uint32_t KEY = (8 << 24);  ///< Password
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t WDV = (12 << 0);  ///< Watchdog Counter Value
        constexpr uint32_t WDFIEN = (1U << 12);  ///< Watchdog Fault Interrupt Enable
        constexpr uint32_t WDRSTEN = (1U << 13);  ///< Watchdog Reset Enable
        constexpr uint32_t WDRPROC = (1U << 14);  ///< Watchdog Reset Processor
        constexpr uint32_t WDDIS = (1U << 15);  ///< Watchdog Disable
        constexpr uint32_t WDD = (12 << 16);  ///< Watchdog Delta Value
        constexpr uint32_t WDDBGHLT = (1U << 28);  ///< Watchdog Debug Halt
        constexpr uint32_t WDIDLEHLT = (1U << 29);  ///< Watchdog Idle Halt
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t WDUNF = (1U << 0);  ///< Watchdog Underflow
        constexpr uint32_t WDERR = (1U << 1);  ///< Watchdog Error
    }

}

// ============================================================================
// SCKC Peripheral
// ============================================================================

namespace sckc {
    /// Base addresses
    constexpr uint32_t SCKC_BASE = 0xFFFFFE50;

    /// SCKC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Slow Clock Configuration Register
    };

    /// Peripheral instances
    inline Registers* SCKC = reinterpret_cast<Registers*>(SCKC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RCEN = (1U << 0);  ///< Internal 32 kHz RC Oscillator
        constexpr uint32_t OSC32EN = (1U << 1);  ///< 32768 Hz Oscillator
        constexpr uint32_t OSC32BYP = (1U << 2);  ///< 32768Hz Oscillator Bypass
        constexpr uint32_t OSCSEL = (1U << 3);  ///< Slow Clock Selector
    }

}

// ============================================================================
// BSC Peripheral
// ============================================================================

namespace bsc {
    /// Base addresses
    constexpr uint32_t BSC_BASE = 0xFFFFFE54;

    /// BSC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Boot Sequence Configuration Register
    };

    /// Peripheral instances
    inline Registers* BSC = reinterpret_cast<Registers*>(BSC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t BOOT = (8 << 0);  ///< Boot media sequence
        constexpr uint32_t BOOTKEY = (16 << 16);  ///< valid key to write BSC_CR register; it needs to be written at the same time as the BOOT field.
    }

}

// ============================================================================
// GPBR Peripheral
// ============================================================================

namespace gpbr {
    /// Base addresses
    constexpr uint32_t GPBR_BASE = 0xFFFFFE60;

    /// GPBR Register structure
    struct Registers {
        volatile uint32_t GPBR__;  ///< Offset: 0x00 - General Purpose Backup Register (renamed from GPBR__)
    };

    /// Peripheral instances
    inline Registers* GPBR = reinterpret_cast<Registers*>(GPBR_BASE);

    // Bit definitions
    /// GPBR__ Register bits
    namespace gpbr___bits {
        constexpr uint32_t GPBR_VALUE = (32 << 0);  ///< Value of GPBR x
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0xFFFFFEB0;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control Register
        volatile uint32_t MR;  ///< Offset: 0x04 - Mode Register
        volatile uint32_t TIMR;  ///< Offset: 0x08 - Time Register
        volatile uint32_t CALR;  ///< Offset: 0x0C - Calendar Register
        volatile uint32_t TIMALR;  ///< Offset: 0x10 - Time Alarm Register
        volatile uint32_t CALALR;  ///< Offset: 0x14 - Calendar Alarm Register
        volatile uint32_t SR;  ///< Offset: 0x18 - Status Register
        volatile uint32_t SCCR;  ///< Offset: 0x1C - Status Clear Command Register
        volatile uint32_t IER;  ///< Offset: 0x20 - Interrupt Enable Register
        volatile uint32_t IDR;  ///< Offset: 0x24 - Interrupt Disable Register
        volatile uint32_t IMR;  ///< Offset: 0x28 - Interrupt Mask Register
        volatile uint32_t VER;  ///< Offset: 0x2C - Valid Entry Register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t UPDTIM = (1U << 0);  ///< Update Request Time Register
        constexpr uint32_t UPDCAL = (1U << 1);  ///< Update Request Calendar Register
        constexpr uint32_t TIMEVSEL = (2 << 8);  ///< Time Event Selection
        constexpr uint32_t CALEVSEL = (2 << 16);  ///< Calendar Event Selection
    }

    /// MR Register bits
    namespace mr_bits {
        constexpr uint32_t HRMOD = (1U << 0);  ///< 12-/24-hour Mode
    }

    /// TIMR Register bits
    namespace timr_bits {
        constexpr uint32_t SEC = (7 << 0);  ///< Current Second
        constexpr uint32_t MIN = (7 << 8);  ///< Current Minute
        constexpr uint32_t HOUR = (6 << 16);  ///< Current Hour
        constexpr uint32_t AMPM = (1U << 22);  ///< Ante Meridiem Post Meridiem Indicator
    }

    /// CALR Register bits
    namespace calr_bits {
        constexpr uint32_t CENT = (7 << 0);  ///< Current Century
        constexpr uint32_t YEAR = (8 << 8);  ///< Current Year
        constexpr uint32_t MONTH = (5 << 16);  ///< Current Month
        constexpr uint32_t DAY = (3 << 21);  ///< Current Day in Current Week
        constexpr uint32_t DATE = (6 << 24);  ///< Current Day in Current Month
    }

    /// TIMALR Register bits
    namespace timalr_bits {
        constexpr uint32_t SEC = (7 << 0);  ///< Second Alarm
        constexpr uint32_t SECEN = (1U << 7);  ///< Second Alarm Enable
        constexpr uint32_t MIN = (7 << 8);  ///< Minute Alarm
        constexpr uint32_t MINEN = (1U << 15);  ///< Minute Alarm Enable
        constexpr uint32_t HOUR = (6 << 16);  ///< Hour Alarm
        constexpr uint32_t AMPM = (1U << 22);  ///< AM/PM Indicator
        constexpr uint32_t HOUREN = (1U << 23);  ///< Hour Alarm Enable
    }

    /// CALALR Register bits
    namespace calalr_bits {
        constexpr uint32_t MONTH = (5 << 16);  ///< Month Alarm
        constexpr uint32_t MTHEN = (1U << 23);  ///< Month Alarm Enable
        constexpr uint32_t DATE = (6 << 24);  ///< Date Alarm
        constexpr uint32_t DATEEN = (1U << 31);  ///< Date Alarm Enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t ACKUPD = (1U << 0);  ///< Acknowledge for Update
        constexpr uint32_t ALARM = (1U << 1);  ///< Alarm Flag
        constexpr uint32_t SEC = (1U << 2);  ///< Second Event
        constexpr uint32_t TIMEV = (1U << 3);  ///< Time Event
        constexpr uint32_t CALEV = (1U << 4);  ///< Calendar Event
    }

    /// SCCR Register bits
    namespace sccr_bits {
        constexpr uint32_t ACKCLR = (1U << 0);  ///< Acknowledge Clear
        constexpr uint32_t ALRCLR = (1U << 1);  ///< Alarm Clear
        constexpr uint32_t SECCLR = (1U << 2);  ///< Second Clear
        constexpr uint32_t TIMCLR = (1U << 3);  ///< Time Clear
        constexpr uint32_t CALCLR = (1U << 4);  ///< Calendar Clear
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t ACKEN = (1U << 0);  ///< Acknowledge Update Interrupt Enable
        constexpr uint32_t ALREN = (1U << 1);  ///< Alarm Interrupt Enable
        constexpr uint32_t SECEN = (1U << 2);  ///< Second Event Interrupt Enable
        constexpr uint32_t TIMEN = (1U << 3);  ///< Time Event Interrupt Enable
        constexpr uint32_t CALEN = (1U << 4);  ///< Calendar Event Interrupt Enable
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t ACKDIS = (1U << 0);  ///< Acknowledge Update Interrupt Disable
        constexpr uint32_t ALRDIS = (1U << 1);  ///< Alarm Interrupt Disable
        constexpr uint32_t SECDIS = (1U << 2);  ///< Second Event Interrupt Disable
        constexpr uint32_t TIMDIS = (1U << 3);  ///< Time Event Interrupt Disable
        constexpr uint32_t CALDIS = (1U << 4);  ///< Calendar Event Interrupt Disable
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t ACK = (1U << 0);  ///< Acknowledge Update Interrupt Mask
        constexpr uint32_t ALR = (1U << 1);  ///< Alarm Interrupt Mask
        constexpr uint32_t SEC = (1U << 2);  ///< Second Event Interrupt Mask
        constexpr uint32_t TIM = (1U << 3);  ///< Time Event Interrupt Mask
        constexpr uint32_t CAL = (1U << 4);  ///< Calendar Event Interrupt Mask
    }

    /// VER Register bits
    namespace ver_bits {
        constexpr uint32_t NVTIM = (1U << 0);  ///< Non-valid Time
        constexpr uint32_t NVCAL = (1U << 1);  ///< Non-valid Calendar
        constexpr uint32_t NVTIMALR = (1U << 2);  ///< Non-valid Time Alarm
        constexpr uint32_t NVCALALR = (1U << 3);  ///< Non-valid Calendar Alarm
    }

}


} // namespace alloy::generated::atsama5d35

#endif // ALLOY_GENERATED_ATSAMA5D35_PERIPHERALS_HPP