/// Auto-generated code for AT32F413xx_v2
/// Generated by Alloy Code Generator
/// Source: arterytek_sam.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 17:44:01
#ifndef ALLOY_GENERATED_AT32F413XX_V2_PERIPHERALS_HPP
#define ALLOY_GENERATED_AT32F413XX_V2_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::at32f413xx_v2 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_pwc = true;
    constexpr uint32_t num_pwc_instances = 1;
    constexpr bool has_crm = true;
    constexpr uint32_t num_crm_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 5;
    constexpr bool has_iomux = true;
    constexpr uint32_t num_iomux_instances = 1;
    constexpr bool has_exint = true;
    constexpr uint32_t num_exint_instances = 1;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 2;
    constexpr bool has_sdio = true;
    constexpr uint32_t num_sdio_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;
    constexpr bool has_bpr = true;
    constexpr uint32_t num_bpr_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 2;
    constexpr bool has_tmr1 = true;
    constexpr uint32_t num_tmr1_instances = 1;
    constexpr bool has_tmr8 = true;
    constexpr uint32_t num_tmr8_instances = 1;
    constexpr bool has_tmr2 = true;
    constexpr uint32_t num_tmr2_instances = 1;
    constexpr bool has_tmr3 = true;
    constexpr uint32_t num_tmr3_instances = 1;
    constexpr bool has_tmr4 = true;
    constexpr uint32_t num_tmr4_instances = 1;
    constexpr bool has_tmr5 = true;
    constexpr uint32_t num_tmr5_instances = 1;
    constexpr bool has_tmr9 = true;
    constexpr uint32_t num_tmr9_instances = 1;
    constexpr bool has_tmr10 = true;
    constexpr uint32_t num_tmr10_instances = 1;
    constexpr bool has_tmr11 = true;
    constexpr uint32_t num_tmr11_instances = 1;
    constexpr bool has_acc = true;
    constexpr uint32_t num_acc_instances = 1;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 2;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 2;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 5;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 2;
    constexpr bool has_can = true;
    constexpr uint32_t num_can_instances = 2;
    constexpr bool has_debug = true;
    constexpr uint32_t num_debug_instances = 1;
    constexpr bool has_crc = true;
    constexpr uint32_t num_crc_instances = 1;
    constexpr bool has_flash = true;
    constexpr uint32_t num_flash_instances = 1;
    constexpr bool has_nvic = true;
    constexpr uint32_t num_nvic_instances = 1;
    constexpr bool has_usb = true;
    constexpr uint32_t num_usb_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct pwc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crm_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct peripheral_count<struct iomux_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct exint_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct sdio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bpr_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct tmr1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr8_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr4_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr5_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr9_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr10_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr11_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct acc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct can_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct debug_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct flash_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct nvic_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usb_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 5;
    constexpr uint32_t max_gpio_pins = 80;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_usart1 = true;
    constexpr bool has_usart2 = true;
    constexpr bool has_usart3 = true;
    constexpr bool has_uart4 = true;
    constexpr bool has_uart5 = true;
}

// ============================================================================
// PWC Peripheral
// ============================================================================

namespace pwc {
    /// Base addresses
    constexpr uint32_t PWC_BASE = 0x40007000;

    /// PWC Register structure
    struct Registers {
        volatile uint32_t CTRL;  ///< Offset: 0x00 - Power control register
        volatile uint32_t CTRLSTS;  ///< Offset: 0x04 - Power control and status register
    };

    /// Peripheral instances
    inline Registers* PWC = reinterpret_cast<Registers*>(PWC_BASE);

    // Bit definitions
    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t LPSEL = (1U << 1);  ///< Low power mode select when Cortex-M4F sleepdeep
        constexpr uint32_t CLSWEF = (1U << 2);  ///< Clear SWEF flag
        constexpr uint32_t CLSEF = (1U << 3);  ///< Clear SEF flag
        constexpr uint32_t PVMEN = (1U << 4);  ///< Power voltage monitoring enable
        constexpr uint32_t PVMSEL = (3 << 5);  ///< Power voltage monitoring boundary select
        constexpr uint32_t BPWEN = (1U << 8);  ///< Battery powered domain write enable
    }

    /// CTRLSTS Register bits
    namespace ctrlsts_bits {
        constexpr uint32_t SWEF = (1U << 0);  ///< Standby wake-up event flag
        constexpr uint32_t SEF = (1U << 1);  ///< Standby mode entry flag
        constexpr uint32_t PVMOF = (1U << 2);  ///< Power voltage monitoring output flag
        constexpr uint32_t SWPEN = (1U << 8);  ///< Standby wake-up pin enable
    }

}

// ============================================================================
// CRM Peripheral
// ============================================================================

namespace crm {
    /// Base addresses
    constexpr uint32_t CRM_BASE = 0x40021000;

    /// CRM Register structure
    struct Registers {
        volatile uint32_t CTRL;  ///< Offset: 0x00 - Clock control register
        volatile uint32_t CFG;  ///< Offset: 0x04 - Clock configuration register
        volatile uint32_t CLKINT;  ///< Offset: 0x08 - Clock interrupt register
        volatile uint32_t APB2RST;  ///< Offset: 0x0C - APB2 peripheral reset register
        volatile uint32_t APB1RST;  ///< Offset: 0x10 - APB1 peripheral reset register
        volatile uint32_t AHBEN;  ///< Offset: 0x14 - AHB Peripheral Clock enable register
        volatile uint32_t APB2EN;  ///< Offset: 0x18 - APB2 peripheral clock enable register
        volatile uint32_t APB1EN;  ///< Offset: 0x1C - APB1 peripheral clock enable register
        volatile uint32_t BPDC;  ///< Offset: 0x20 - Battery powered domain control register
        volatile uint32_t CTRLSTS;  ///< Offset: 0x24 - Control/status register
        volatile uint32_t MISC1;  ///< Offset: 0x30 - Miscellaneous register 1
        volatile uint32_t MISC2;  ///< Offset: 0x50 - Miscellaneous register 2
        volatile uint32_t MISC3;  ///< Offset: 0x54 - Miscellaneous register 3
        volatile uint32_t INTMAP;  ///< Offset: 0x5C - Interrupt remap register
    };

    /// Peripheral instances
    inline Registers* CRM = reinterpret_cast<Registers*>(CRM_BASE);

    // Bit definitions
    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t HICKEN = (1U << 0);  ///< High speed internal clock enable
        constexpr uint32_t HICKSTBL = (1U << 1);  ///< High speed internal clock ready flag
        constexpr uint32_t HICKTRIM = (6 << 2);  ///< High speed internal clock trimming
        constexpr uint32_t HICKCAL = (8 << 8);  ///< High speed internal clock calibration
        constexpr uint32_t HEXTEN = (1U << 16);  ///< High speed exernal crystal enable
        constexpr uint32_t HEXTSTBL = (1U << 17);  ///< High speed exernal crystal ready flag
        constexpr uint32_t HEXTBYPS = (1U << 18);  ///< High speed exernal crystal bypass
        constexpr uint32_t CFDEN = (1U << 19);  ///< Clock failure detection enable
        constexpr uint32_t PLLEN = (1U << 24);  ///< PLL enable
        constexpr uint32_t PLLSTBL = (1U << 25);  ///< PLL clock ready flag
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t SCLKSEL = (2 << 0);  ///< System clock select
        constexpr uint32_t SCLKSTS = (2 << 2);  ///< System Clock select Status
        constexpr uint32_t AHBDIV = (4 << 4);  ///< AHB division
        constexpr uint32_t APB1DIV = (3 << 8);  ///< APB1 division
        constexpr uint32_t APB2DIV = (3 << 11);  ///< APB2 division
        constexpr uint32_t ADCDIV1_0 = (2 << 14);  ///< ADC division bit1 and bit0
        constexpr uint32_t PLLRCS = (1U << 16);  ///< PLL reference clock select
        constexpr uint32_t PLLHEXTDIV = (1U << 17);  ///< HEXT division selection for PLL entry clock
        constexpr uint32_t PLLMULT3_0 = (4 << 18);  ///< PLL Multiplication Factor bit3 to bit0
        constexpr uint32_t USBDIV1_0 = (2 << 22);  ///< USB division bit1 and bit0
        constexpr uint32_t CLKOUT_SEL = (3 << 24);  ///< Clock output selection bit2 to bit0
        constexpr uint32_t USBDIV2 = (1U << 27);  ///< USB division bit2
        constexpr uint32_t ADCDIV2 = (1U << 28);  ///< ADC division bit2
        constexpr uint32_t PLLMULT5_4 = (2 << 29);  ///< PLL Multiplication Factor bit5 and bit4
        constexpr uint32_t PLLRANGE = (1U << 31);  ///< PLL clock output frequency up 72MHz or not
    }

    /// CLKINT Register bits
    namespace clkint_bits {
        constexpr uint32_t LICKSTBLF = (1U << 0);  ///< LICK ready interrupt flag
        constexpr uint32_t LEXTSTBLF = (1U << 1);  ///< LEXT ready interrupt flag
        constexpr uint32_t HICKSTBLF = (1U << 2);  ///< HICK ready interrupt flag
        constexpr uint32_t HEXTSTBLF = (1U << 3);  ///< HEXT ready interrupt flag
        constexpr uint32_t PLLSTBLF = (1U << 4);  ///< PLL ready interrupt flag
        constexpr uint32_t CFDF = (1U << 7);  ///< Clock failure detection interrupt flag
        constexpr uint32_t LICKSTBLIEN = (1U << 8);  ///< LICK ready interrupt enable
        constexpr uint32_t LEXTSTBLIEN = (1U << 9);  ///< LEXT ready interrupt enable
        constexpr uint32_t HICKSTBLIEN = (1U << 10);  ///< HICK ready interrupt enable
        constexpr uint32_t HEXTSTBLIEN = (1U << 11);  ///< HEXT ready interrupt enable
        constexpr uint32_t PLLSTBLIEN = (1U << 12);  ///< PLL ready interrupt enable
        constexpr uint32_t LICKSTBLFC = (1U << 16);  ///< LICK ready interrupt clear
        constexpr uint32_t LEXTSTBLFC = (1U << 17);  ///< LEXT ready interrupt clear
        constexpr uint32_t HICKSTBLFC = (1U << 18);  ///< HICK ready interrupt clear
        constexpr uint32_t HEXTSTBLFC = (1U << 19);  ///< HEXT ready interrupt clear
        constexpr uint32_t PLLSTBLFC = (1U << 20);  ///< PLL ready interrupt clear
        constexpr uint32_t CFDFC = (1U << 23);  ///< Clock failure detection interrupt clear
    }

    /// APB2RST Register bits
    namespace apb2rst_bits {
        constexpr uint32_t IOMUXRST = (1U << 0);  ///< MUX function I/O reset
        constexpr uint32_t GPIOARST = (1U << 2);  ///< IO port A reset
        constexpr uint32_t GPIOBRST = (1U << 3);  ///< IO port B reset
        constexpr uint32_t GPIOCRST = (1U << 4);  ///< IO port C reset
        constexpr uint32_t GPIODRST = (1U << 5);  ///< IO port D reset
        constexpr uint32_t GPIOFRST = (1U << 7);  ///< IO port F reset
        constexpr uint32_t ADC1RST = (1U << 9);  ///< ADC1 reset
        constexpr uint32_t ADC2RST = (1U << 10);  ///< ADC2 reset
        constexpr uint32_t TMR1RST = (1U << 11);  ///< Timer1 reset
        constexpr uint32_t SPI1RST = (1U << 12);  ///< SPI1 reset
        constexpr uint32_t TMR8RST = (1U << 13);  ///< Timer8 reset
        constexpr uint32_t USART1RST = (1U << 14);  ///< USART1 reset
        constexpr uint32_t TMR9RST = (1U << 19);  ///< Timer9 reset
        constexpr uint32_t TMR10RST = (1U << 20);  ///< Timer10 reset
        constexpr uint32_t TMR11RST = (1U << 21);  ///< Timer11 reset
        constexpr uint32_t ACCRST = (1U << 22);  ///< ACC reset
    }

    /// APB1RST Register bits
    namespace apb1rst_bits {
        constexpr uint32_t TMR2RST = (1U << 0);  ///< Timer 2 reset
        constexpr uint32_t TMR3RST = (1U << 1);  ///< Timer 3 reset
        constexpr uint32_t TMR4RST = (1U << 2);  ///< Timer 4 reset
        constexpr uint32_t TMR5RST = (1U << 3);  ///< Timer 5 reset
        constexpr uint32_t WWDTRST = (1U << 11);  ///< Window watchdog timer reset
        constexpr uint32_t SPI2RST = (1U << 14);  ///< SPI2 reset
        constexpr uint32_t USART2RST = (1U << 17);  ///< USART 2 reset
        constexpr uint32_t USART3RST = (1U << 18);  ///< USART 3 reset
        constexpr uint32_t UART4RST = (1U << 19);  ///< UART 4 reset
        constexpr uint32_t UART5RST = (1U << 20);  ///< UART 5 reset
        constexpr uint32_t I2C1RST = (1U << 21);  ///< I2C1 reset
        constexpr uint32_t I2C2RST = (1U << 22);  ///< I2C2 reset
        constexpr uint32_t USBRST = (1U << 23);  ///< USB reset
        constexpr uint32_t CAN1RST = (1U << 25);  ///< CAN1 reset
        constexpr uint32_t BPRRST = (1U << 27);  ///< Battery powered domain register reset
        constexpr uint32_t PWCRST = (1U << 28);  ///< Power controller reset
        constexpr uint32_t CAN2RST = (1U << 31);  ///< CAN2 reset
    }

    /// AHBEN Register bits
    namespace ahben_bits {
        constexpr uint32_t DMA1EN = (1U << 0);  ///< DMA1 clock enable
        constexpr uint32_t DMA2EN = (1U << 1);  ///< DMA2 clock enable
        constexpr uint32_t SRAMEN = (1U << 2);  ///< SRAM interface clock enable
        constexpr uint32_t FLASHEN = (1U << 4);  ///< FLASH clock enable
        constexpr uint32_t CRCEN = (1U << 6);  ///< CRC clock enable
        constexpr uint32_t SDIO1EN = (1U << 10);  ///< SDIO1 clock enable
    }

    /// APB2EN Register bits
    namespace apb2en_bits {
        constexpr uint32_t IOMUXEN = (1U << 0);  ///< MUX function I/O clock enable
        constexpr uint32_t GPIOAEN = (1U << 2);  ///< I/O port A clock enable
        constexpr uint32_t GPIOBEN = (1U << 3);  ///< I/O port B clock enable
        constexpr uint32_t GPIOCEN = (1U << 4);  ///< I/O port C clock enable
        constexpr uint32_t GPIODEN = (1U << 5);  ///< I/O port D clock enable
        constexpr uint32_t GPIOFEN = (1U << 7);  ///< I/O port F clock enable
        constexpr uint32_t ADC1EN = (1U << 9);  ///< ADC1 clock enable
        constexpr uint32_t ADC2EN = (1U << 10);  ///< ADC2 clock enable
        constexpr uint32_t TMR1EN = (1U << 11);  ///< Timer1 clock enable
        constexpr uint32_t SPI1EN = (1U << 12);  ///< SPI1 clock enable
        constexpr uint32_t TMR8EN = (1U << 13);  ///< Timer8 clock enable
        constexpr uint32_t USART1EN = (1U << 14);  ///< USART1 clock enable
        constexpr uint32_t TMR9EN = (1U << 19);  ///< Timer9 clock enable
        constexpr uint32_t TMR10EN = (1U << 20);  ///< Timer10 clock enable
        constexpr uint32_t TMR11EN = (1U << 21);  ///< Timer11 clock enable
        constexpr uint32_t ACCEN = (1U << 22);  ///< ACC clock enable
    }

    /// APB1EN Register bits
    namespace apb1en_bits {
        constexpr uint32_t TMR2EN = (1U << 0);  ///< Timer2 clock enable
        constexpr uint32_t TMR3EN = (1U << 1);  ///< Timer3 clock enable
        constexpr uint32_t TMR4EN = (1U << 2);  ///< Timer4 clock enable
        constexpr uint32_t TMR5EN = (1U << 3);  ///< Timer5 clock enable
        constexpr uint32_t WWDTEN = (1U << 11);  ///< Window watchdog timer clock enable
        constexpr uint32_t SPI2EN = (1U << 14);  ///< SPI2 clock enable
        constexpr uint32_t USART2EN = (1U << 17);  ///< USART2 clock enable
        constexpr uint32_t USART3EN = (1U << 18);  ///< USART3 clock enable
        constexpr uint32_t UART4EN = (1U << 19);  ///< UART4 clock enable
        constexpr uint32_t UART5EN = (1U << 20);  ///< UART5 clock enable
        constexpr uint32_t I2C1EN = (1U << 21);  ///< I2C1 clock enable
        constexpr uint32_t I2C2EN = (1U << 22);  ///< I2C2 clock enable
        constexpr uint32_t USBEN = (1U << 23);  ///< USB clock enable
        constexpr uint32_t CAN1EN = (1U << 25);  ///< CAN1 clock enable
        constexpr uint32_t BPREN = (1U << 27);  ///< Barrery powered domain register clock enable
        constexpr uint32_t PWCEN = (1U << 28);  ///< Power clock enable
        constexpr uint32_t CAN2EN = (1U << 31);  ///< CAN2 clock enable
    }

    /// BPDC Register bits
    namespace bpdc_bits {
        constexpr uint32_t LEXTEN = (1U << 0);  ///< Low speed external crystal enable
        constexpr uint32_t LEXTSTBL = (1U << 1);  ///< Low speed external crystal ready
        constexpr uint32_t LEXTBYPS = (1U << 2);  ///< Low speed external crystal bypass
        constexpr uint32_t RTCSEL = (2 << 8);  ///< RTC clock selection
        constexpr uint32_t RTCEN = (1U << 15);  ///< RTC clock enable
        constexpr uint32_t BPDRST = (1U << 16);  ///< Battery powered domain software reset
    }

    /// CTRLSTS Register bits
    namespace ctrlsts_bits {
        constexpr uint32_t LICKEN = (1U << 0);  ///< Low speed internal clock enable
        constexpr uint32_t LICKSTBL = (1U << 1);  ///< Low speed internal clock ready
        constexpr uint32_t RSTFC = (1U << 24);  ///< Reset flag clear
        constexpr uint32_t NRSTF = (1U << 26);  ///< PIN reset flag
        constexpr uint32_t PORRSTF = (1U << 27);  ///< POR/LVR reset flag
        constexpr uint32_t SWRSTF = (1U << 28);  ///< Software reset flag
        constexpr uint32_t WDTRSTF = (1U << 29);  ///< Watchdog timer reset flag
        constexpr uint32_t WWDTRSTF = (1U << 30);  ///< Window watchdog timer reset flag
        constexpr uint32_t LPRSTF = (1U << 31);  ///< Low-power reset flag
    }

    /// MISC1 Register bits
    namespace misc1_bits {
        constexpr uint32_t HICKCAL_KEY = (8 << 0);  ///< HICKCAL write key value
        constexpr uint32_t CLKOUT_SEL3 = (1U << 16);  ///< Clock output bit3
        constexpr uint32_t USBBUFS = (1U << 24);  ///< USB buffer size selection
        constexpr uint32_t HICKDIV = (1U << 25);  ///< HICK 6 divider selection
        constexpr uint32_t CLKOUTDIV = (4 << 28);  ///< Clock output division
    }

    /// MISC2 Register bits
    namespace misc2_bits {
        constexpr uint32_t CLK_TO_TMR = (1U << 16);  ///< Clock output internal connect to timer10
    }

    /// MISC3 Register bits
    namespace misc3_bits {
        constexpr uint32_t AUTO_STEP_EN = (2 << 4);  ///< Auto step en
        constexpr uint32_t HICK_TO_USB = (1U << 8);  ///< HICK to usb clock
        constexpr uint32_t HICK_TO_SCLK = (1U << 9);  ///< HICK to system clock
    }

    /// INTMAP Register bits
    namespace intmap_bits {
        constexpr uint32_t USB_INT_MAP = (1U << 0);  ///< USBDEV interrupt remap
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIOA_BASE = 0x40010800;
    constexpr uint32_t GPIOB_BASE = 0x40010C00;
    constexpr uint32_t GPIOC_BASE = 0x40011000;
    constexpr uint32_t GPIOD_BASE = 0x40011400;
    constexpr uint32_t GPIOF_BASE = 0x40011C00;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t CFGLR;  ///< Offset: 0x00 - GPIO function configurate low register
        volatile uint32_t CFGHR;  ///< Offset: 0x04 - GPIO function configurate high register
        volatile uint32_t IDT;  ///< Offset: 0x08 - Port input data register
        volatile uint32_t ODT;  ///< Offset: 0x0C - Port output data register
        volatile uint32_t SCR;  ///< Offset: 0x10 - Port bit set/clear register
        volatile uint32_t CLR;  ///< Offset: 0x14 - Port bit reset register
        volatile uint32_t WPR;  ///< Offset: 0x18 - Port write protect register
    };

    /// Peripheral instances
    inline Registers* GPIOA = reinterpret_cast<Registers*>(GPIOA_BASE);
    inline Registers* GPIOB = reinterpret_cast<Registers*>(GPIOB_BASE);
    inline Registers* GPIOC = reinterpret_cast<Registers*>(GPIOC_BASE);
    inline Registers* GPIOD = reinterpret_cast<Registers*>(GPIOD_BASE);
    inline Registers* GPIOF = reinterpret_cast<Registers*>(GPIOF_BASE);

    // Bit definitions
    /// CFGLR Register bits
    namespace cfglr_bits {
        constexpr uint32_t IOMC0 = (2 << 0);  ///< Port n.0 mode configurate bits
        constexpr uint32_t IOFC0 = (2 << 2);  ///< Port n.0 function configurate bits
        constexpr uint32_t IOMC1 = (2 << 4);  ///< Port n.1 mode configurate bits
        constexpr uint32_t IOFC1 = (2 << 6);  ///< Port n.1 function configurate bits
        constexpr uint32_t IOMC2 = (2 << 8);  ///< Port n.2 mode configurate bits
        constexpr uint32_t IOFC2 = (2 << 10);  ///< Port n.2 function configurate bits
        constexpr uint32_t IOMC3 = (2 << 12);  ///< Port n.3 mode configurate bits
        constexpr uint32_t IOFC3 = (2 << 14);  ///< Port n.3 function configurate bits
        constexpr uint32_t IOMC4 = (2 << 16);  ///< Port n.4 mode configurate bits
        constexpr uint32_t IOFC4 = (2 << 18);  ///< Port n.4 function configurate bits
        constexpr uint32_t IOMC5 = (2 << 20);  ///< Port n.5 mode configurate bits
        constexpr uint32_t IOFC5 = (2 << 22);  ///< Port n.5 function configurate bits
        constexpr uint32_t IOMC6 = (2 << 24);  ///< Port n.6 mode configurate bits
        constexpr uint32_t IOFC6 = (2 << 26);  ///< Port n.6 function configurate bits
        constexpr uint32_t IOMC7 = (2 << 28);  ///< Port n.7 mode configurate bits
        constexpr uint32_t IOFC7 = (2 << 30);  ///< Port n.7 function configurate bits
    }

    /// CFGHR Register bits
    namespace cfghr_bits {
        constexpr uint32_t IOMC8 = (2 << 0);  ///< Port n.8 mode configurate bits
        constexpr uint32_t IOFC8 = (2 << 2);  ///< Port n.8 function configurate bits
        constexpr uint32_t IOMC9 = (2 << 4);  ///< Port n.9 mode configurate bits
        constexpr uint32_t IOFC9 = (2 << 6);  ///< Port n.9 function configurate bits
        constexpr uint32_t IOMC10 = (2 << 8);  ///< Port n.10 mode configurate bits
        constexpr uint32_t IOFC10 = (2 << 10);  ///< Port n.10 function configurate bits
        constexpr uint32_t IOMC11 = (2 << 12);  ///< Port n.11 mode configurate bits
        constexpr uint32_t IOFC11 = (2 << 14);  ///< Port n.11 function configurate bits
        constexpr uint32_t IOMC12 = (2 << 16);  ///< Port n.12 mode configurate bits
        constexpr uint32_t IOFC12 = (2 << 18);  ///< Port n.12 function configurate bits
        constexpr uint32_t IOMC13 = (2 << 20);  ///< Port n.13 mode configurate bits
        constexpr uint32_t IOFC13 = (2 << 22);  ///< Port n.13 function configurate bits
        constexpr uint32_t IOMC14 = (2 << 24);  ///< Port n.14 mode configurate bits
        constexpr uint32_t IOFC14 = (2 << 26);  ///< Port n.14 function configurate bits
        constexpr uint32_t IOMC15 = (2 << 28);  ///< Port n.15 mode configurate bits
        constexpr uint32_t IOFC15 = (2 << 30);  ///< Port n.15 function configurate bits
    }

    /// IDT Register bits
    namespace idt_bits {
        constexpr uint32_t IDT0 = (1U << 0);  ///< Port input data
        constexpr uint32_t IDT1 = (1U << 1);  ///< Port input data
        constexpr uint32_t IDT2 = (1U << 2);  ///< Port input data
        constexpr uint32_t IDT3 = (1U << 3);  ///< Port input data
        constexpr uint32_t IDT4 = (1U << 4);  ///< Port input data
        constexpr uint32_t IDT5 = (1U << 5);  ///< Port input data
        constexpr uint32_t IDT6 = (1U << 6);  ///< Port input data
        constexpr uint32_t IDT7 = (1U << 7);  ///< Port input data
        constexpr uint32_t IDT8 = (1U << 8);  ///< Port input data
        constexpr uint32_t IDT9 = (1U << 9);  ///< Port input data
        constexpr uint32_t IDT10 = (1U << 10);  ///< Port input data
        constexpr uint32_t IDT11 = (1U << 11);  ///< Port input data
        constexpr uint32_t IDT12 = (1U << 12);  ///< Port input data
        constexpr uint32_t IDT13 = (1U << 13);  ///< Port input data
        constexpr uint32_t IDT14 = (1U << 14);  ///< Port input data
        constexpr uint32_t IDT15 = (1U << 15);  ///< Port input data
    }

    /// ODT Register bits
    namespace odt_bits {
        constexpr uint32_t ODT0 = (1U << 0);  ///< Port output data
        constexpr uint32_t ODT1 = (1U << 1);  ///< Port output data
        constexpr uint32_t ODT2 = (1U << 2);  ///< Port output data
        constexpr uint32_t ODT3 = (1U << 3);  ///< Port output data
        constexpr uint32_t ODT4 = (1U << 4);  ///< Port output data
        constexpr uint32_t ODT5 = (1U << 5);  ///< Port output data
        constexpr uint32_t ODT6 = (1U << 6);  ///< Port output data
        constexpr uint32_t ODT7 = (1U << 7);  ///< Port output data
        constexpr uint32_t ODT8 = (1U << 8);  ///< Port output data
        constexpr uint32_t ODT9 = (1U << 9);  ///< Port output data
        constexpr uint32_t ODT10 = (1U << 10);  ///< Port output data
        constexpr uint32_t ODT11 = (1U << 11);  ///< Port output data
        constexpr uint32_t ODT12 = (1U << 12);  ///< Port output data
        constexpr uint32_t ODT13 = (1U << 13);  ///< Port output data
        constexpr uint32_t ODT14 = (1U << 14);  ///< Port output data
        constexpr uint32_t ODT15 = (1U << 15);  ///< Port output data
    }

    /// SCR Register bits
    namespace scr_bits {
        constexpr uint32_t IOSB0 = (1U << 0);  ///< Set bit 0
        constexpr uint32_t IOSB1 = (1U << 1);  ///< Set bit 1
        constexpr uint32_t IOSB2 = (1U << 2);  ///< Set bit 1
        constexpr uint32_t IOSB3 = (1U << 3);  ///< Set bit 3
        constexpr uint32_t IOSB4 = (1U << 4);  ///< Set bit 4
        constexpr uint32_t IOSB5 = (1U << 5);  ///< Set bit 5
        constexpr uint32_t IOSB6 = (1U << 6);  ///< Set bit 6
        constexpr uint32_t IOSB7 = (1U << 7);  ///< Set bit 7
        constexpr uint32_t IOSB8 = (1U << 8);  ///< Set bit 8
        constexpr uint32_t IOSB9 = (1U << 9);  ///< Set bit 9
        constexpr uint32_t IOSB10 = (1U << 10);  ///< Set bit 10
        constexpr uint32_t IOSB11 = (1U << 11);  ///< Set bit 11
        constexpr uint32_t IOSB12 = (1U << 12);  ///< Set bit 12
        constexpr uint32_t IOSB13 = (1U << 13);  ///< Set bit 13
        constexpr uint32_t IOSB14 = (1U << 14);  ///< Set bit 14
        constexpr uint32_t IOSB15 = (1U << 15);  ///< Set bit 15
        constexpr uint32_t IOCB0 = (1U << 16);  ///< Clear bit 0
        constexpr uint32_t IOCB1 = (1U << 17);  ///< Clear bit 1
        constexpr uint32_t IOCB2 = (1U << 18);  ///< Clear bit 2
        constexpr uint32_t IOCB3 = (1U << 19);  ///< Clear bit 3
        constexpr uint32_t IOCB4 = (1U << 20);  ///< Clear bit 4
        constexpr uint32_t IOCB5 = (1U << 21);  ///< Clear bit 5
        constexpr uint32_t IOCB6 = (1U << 22);  ///< Clear bit 6
        constexpr uint32_t IOCB7 = (1U << 23);  ///< Clear bit 7
        constexpr uint32_t IOCB8 = (1U << 24);  ///< Clear bit 8
        constexpr uint32_t IOCB9 = (1U << 25);  ///< Clear bit 9
        constexpr uint32_t IOCB10 = (1U << 26);  ///< Clear bit 10
        constexpr uint32_t IOCB11 = (1U << 27);  ///< Clear bit 11
        constexpr uint32_t IOCB12 = (1U << 28);  ///< Clear bit 12
        constexpr uint32_t IOCB13 = (1U << 29);  ///< Clear bit 13
        constexpr uint32_t IOCB14 = (1U << 30);  ///< Clear bit 14
        constexpr uint32_t IOCB15 = (1U << 31);  ///< Clear bit 15
    }

    /// CLR Register bits
    namespace clr_bits {
        constexpr uint32_t IOCB0 = (1U << 0);  ///< Clear bit 0
        constexpr uint32_t IOCB1 = (1U << 1);  ///< Clear bit 1
        constexpr uint32_t IOCB2 = (1U << 2);  ///< Clear bit 1
        constexpr uint32_t IOCB3 = (1U << 3);  ///< Clear bit 3
        constexpr uint32_t IOCB4 = (1U << 4);  ///< Clear bit 4
        constexpr uint32_t IOCB5 = (1U << 5);  ///< Clear bit 5
        constexpr uint32_t IOCB6 = (1U << 6);  ///< Clear bit 6
        constexpr uint32_t IOCB7 = (1U << 7);  ///< Clear bit 7
        constexpr uint32_t IOCB8 = (1U << 8);  ///< Clear bit 8
        constexpr uint32_t IOCB9 = (1U << 9);  ///< Clear bit 9
        constexpr uint32_t IOCB10 = (1U << 10);  ///< Clear bit 10
        constexpr uint32_t IOCB11 = (1U << 11);  ///< Clear bit 11
        constexpr uint32_t IOCB12 = (1U << 12);  ///< Clear bit 12
        constexpr uint32_t IOCB13 = (1U << 13);  ///< Clear bit 13
        constexpr uint32_t IOCB14 = (1U << 14);  ///< Clear bit 14
        constexpr uint32_t IOCB15 = (1U << 15);  ///< Clear bit 15
    }

    /// WPR Register bits
    namespace wpr_bits {
        constexpr uint32_t WPEN0 = (1U << 0);  ///< Write protect enable 0
        constexpr uint32_t WPEN1 = (1U << 1);  ///< Write protect enable 1
        constexpr uint32_t WPEN2 = (1U << 2);  ///< Write protect enable 2
        constexpr uint32_t WPEN3 = (1U << 3);  ///< Write protect enable 3
        constexpr uint32_t WPEN4 = (1U << 4);  ///< Write protect enable 4
        constexpr uint32_t WPEN5 = (1U << 5);  ///< Write protect enable 5
        constexpr uint32_t WPEN6 = (1U << 6);  ///< Write protect enable 6
        constexpr uint32_t WPEN7 = (1U << 7);  ///< Write protect enable 7
        constexpr uint32_t WPEN8 = (1U << 8);  ///< Write protect enable 8
        constexpr uint32_t WPEN9 = (1U << 9);  ///< Write protect enable 9
        constexpr uint32_t WPEN10 = (1U << 10);  ///< Write protect enable 10
        constexpr uint32_t WPEN11 = (1U << 11);  ///< Write protect enable 11
        constexpr uint32_t WPEN12 = (1U << 12);  ///< Write protect enable 12
        constexpr uint32_t WPEN13 = (1U << 13);  ///< Write protect enable 13
        constexpr uint32_t WPEN14 = (1U << 14);  ///< Write protect enable 14
        constexpr uint32_t WPEN15 = (1U << 15);  ///< Write protect enable 15
        constexpr uint32_t WPSEQ = (1U << 16);  ///< Write protect sequence
    }

}

// ============================================================================
// IOMUX Peripheral
// ============================================================================

namespace iomux {
    /// Base addresses
    constexpr uint32_t IOMUX_BASE = 0x40010000;

    /// IOMUX Register structure
    struct Registers {
        volatile uint32_t EVTOUT;  ///< Offset: 0x00 - Event output register
        volatile uint32_t REMAP;  ///< Offset: 0x04 - IO MUX remap register
        volatile uint32_t EXINTC1;  ///< Offset: 0x08 - External interrupt configuration register 1
        volatile uint32_t EXINTC2;  ///< Offset: 0x0C - External interrupt configuration register 2
        volatile uint32_t EXINTC3;  ///< Offset: 0x10 - External interrupt configuration register 3
        volatile uint32_t EXINTC4;  ///< Offset: 0x14 - External interrupt configuration register 4
        volatile uint32_t REMAP2;  ///< Offset: 0x1C - IO MUX remap register 2
        volatile uint32_t REMAP3;  ///< Offset: 0x20 - IO MUX remap register 3
        volatile uint32_t REMAP4;  ///< Offset: 0x24 - IO MUX remap register 4
        volatile uint32_t REMAP5;  ///< Offset: 0x28 - IO MUX remap register 5
        volatile uint32_t REMAP6;  ///< Offset: 0x2C - IO MUX remap register 6
        volatile uint32_t REMAP7;  ///< Offset: 0x30 - IO MUX remap register 7
    };

    /// Peripheral instances
    inline Registers* IOMUX = reinterpret_cast<Registers*>(IOMUX_BASE);

    // Bit definitions
    /// EVTOUT Register bits
    namespace evtout_bits {
        constexpr uint32_t SELPIN = (4 << 0);  ///< Select pin
        constexpr uint32_t SELPORT = (3 << 4);  ///< Select port
        constexpr uint32_t EVOEN = (1U << 7);  ///< Event output enable
    }

    /// REMAP Register bits
    namespace remap_bits {
        constexpr uint32_t SPI1_MUX0 = (1U << 0);  ///< SPI1 muxing bit0
        constexpr uint32_t I2C1_MUX = (1U << 1);  ///< I2C1 muxing
        constexpr uint32_t USART1_MUX = (1U << 2);  ///< USART1 muxing
        constexpr uint32_t USART3_MUX = (2 << 4);  ///< USART3 muxing
        constexpr uint32_t TMR1_MUX = (2 << 6);  ///< TMR1 muxing
        constexpr uint32_t TMR2_MUX = (2 << 8);  ///< TMR2 muxing
        constexpr uint32_t TMR3_MUX = (2 << 10);  ///< TMR3 muxing
        constexpr uint32_t CAN_MUX = (2 << 13);  ///< CAN1 muxing
        constexpr uint32_t PD01_MUX = (1U << 15);  ///< PD0/PD1 muxing on OSCIN/OSCOUT
        constexpr uint32_t TMR5CH4_MUX = (1U << 16);  ///< TMR5 channel4 internal muxing
        constexpr uint32_t ADC1_ETP_MUX = (1U << 17);  ///< ADC1 external trigger preempted conversion muxing
        constexpr uint32_t ADC1_ETO_MUX = (1U << 18);  ///< ADC1 external trigger ordinary conversion muxing
        constexpr uint32_t ADC2_ETP_MUX = (1U << 19);  ///< ADC2 external trigger preempted conversion muxing
        constexpr uint32_t ADC2_ETO_MUX = (1U << 20);  ///< ADC2 external trigger ordinary conversion muxing
        constexpr uint32_t SWJTAG_MUX = (3 << 24);  ///< SWD JTAG muxing
        constexpr uint32_t SPI1_MUX1 = (1U << 31);  ///< SPI1 muxing bit1
    }

    /// EXINTC1 Register bits
    namespace exintc1_bits {
        constexpr uint32_t EXINT0 = (4 << 0);  ///< Configure EXINT0 source
        constexpr uint32_t EXINT1 = (4 << 4);  ///< Configure EXINT1 source
        constexpr uint32_t EXINT2 = (4 << 8);  ///< Configure EXINT2 source
        constexpr uint32_t EXINT3 = (4 << 12);  ///< Configure EXINT3 source
    }

    /// EXINTC2 Register bits
    namespace exintc2_bits {
        constexpr uint32_t EXINT4 = (4 << 0);  ///< Configure EXINT4 source
        constexpr uint32_t EXINT5 = (4 << 4);  ///< Configure EXINT5 source
        constexpr uint32_t EXINT6 = (4 << 8);  ///< Configure EXINT6 source
        constexpr uint32_t EXINT7 = (4 << 12);  ///< Configure EXINT7 source
    }

    /// EXINTC3 Register bits
    namespace exintc3_bits {
        constexpr uint32_t EXINT8 = (4 << 0);  ///< Configure EXINT8 source
        constexpr uint32_t EXINT9 = (4 << 4);  ///< Configure EXINT9 source
        constexpr uint32_t EXINT10 = (4 << 8);  ///< Configure EXINT10 source
        constexpr uint32_t EXINT11 = (4 << 12);  ///< Configure EXINT11 source
    }

    /// EXINTC4 Register bits
    namespace exintc4_bits {
        constexpr uint32_t EXINT12 = (4 << 0);  ///< Configure EXINT12 source
        constexpr uint32_t EXINT13 = (4 << 4);  ///< Configure EXINT13 source
        constexpr uint32_t EXINT14 = (4 << 8);  ///< Configure EXINT14 source
        constexpr uint32_t EXINT15 = (4 << 12);  ///< Configure EXINT15 source
    }

    /// REMAP2 Register bits
    namespace remap2_bits {
        constexpr uint32_t EXT_SPIM_EN_MUX = (1U << 21);  ///< SPIM enable
    }

    /// REMAP3 Register bits
    namespace remap3_bits {
        constexpr uint32_t TMR9_GMUX = (4 << 0);  ///< TMR9 muxing
        constexpr uint32_t TMR10_GMUX = (4 << 4);  ///< TMR10 muxing
        constexpr uint32_t TMR11_GMUX = (4 << 8);  ///< TMR11 muxing
    }

    /// REMAP4 Register bits
    namespace remap4_bits {
        constexpr uint32_t TMR1_GMUX = (4 << 0);  ///< TMR1 muxing
        constexpr uint32_t TMR2_GMUX = (3 << 4);  ///< TMR2 muxing
        constexpr uint32_t TMR2ITR1_GMUX = (1U << 7);  ///< TMR2 internal trigger 1 muxing
        constexpr uint32_t TMR3_GMUX = (4 << 8);  ///< TMR3 muxing
        constexpr uint32_t TMR5_GMUX = (3 << 16);  ///< TMR5 muxing
        constexpr uint32_t TMR5CH4_GMUX = (1U << 19);  ///< TMR5 channel4 internal muxing
    }

    /// REMAP5 Register bits
    namespace remap5_bits {
        constexpr uint32_t I2C1_GMUX = (4 << 4);  ///< I2C1 muxing
        constexpr uint32_t I2C2_GMUX = (4 << 8);  ///< I2C2 muxing
        constexpr uint32_t SPI1_GMUX = (4 << 16);  ///< SPI1 muxing
        constexpr uint32_t SPI2_GMUX = (4 << 20);  ///< SPI2 muxing
    }

    /// REMAP6 Register bits
    namespace remap6_bits {
        constexpr uint32_t CAN1_GMUX = (4 << 0);  ///< CAN1 muxing
        constexpr uint32_t CAN2_GMUX = (4 << 4);  ///< CAN2 muxing
        constexpr uint32_t SDIO1_GMUX = (4 << 8);  ///< SDIO1 muxing
        constexpr uint32_t USART1_GMUX = (4 << 16);  ///< USART1 muxing
        constexpr uint32_t USART3_GMUX = (4 << 24);  ///< USART3 muxing
        constexpr uint32_t UART4_GMUX = (4 << 28);  ///< UART4 muxing
    }

    /// REMAP7 Register bits
    namespace remap7_bits {
        constexpr uint32_t EXT_SPIM_GMUX = (3 << 0);  ///< SPIM muxing
        constexpr uint32_t EXT_SPIM_GEN = (1U << 3);  ///< SPIM enable
        constexpr uint32_t ADC1_ETP_GMUX = (1U << 4);  ///< ADC1 external trigger preempted conversion muxing
        constexpr uint32_t ADC1_ETO_GMUX = (1U << 5);  ///< ADC1 external trigger ordinary conversion muxing
        constexpr uint32_t ADC2_ETP_GMUX = (1U << 8);  ///< ADC2 external trigger preempted conversion muxing
        constexpr uint32_t ADC2_ETO_GMUX = (1U << 9);  ///< ADC2 external trigger ordinary conversion muxing
        constexpr uint32_t SWJTAG_GMUX = (3 << 16);  ///< Serial wire JTAG muxing
        constexpr uint32_t PD01_GMUX = (1U << 20);  ///< PortD0/PortD1 mappingon OSC_IN/OSC_OUT
    }

}

// ============================================================================
// EXINT Peripheral
// ============================================================================

namespace exint {
    /// Base addresses
    constexpr uint32_t EXINT_BASE = 0x40010400;

    /// EXINT Register structure
    struct Registers {
        volatile uint32_t INTEN;  ///< Offset: 0x00 - Interrupt enable register
        volatile uint32_t EVTEN;  ///< Offset: 0x04 - Event enable register
        volatile uint32_t POLCFG1;  ///< Offset: 0x08 - Rising polarity configuration register
        volatile uint32_t POLCFG2;  ///< Offset: 0x0C - Falling polarity configuration register
        volatile uint32_t SWTRG;  ///< Offset: 0x10 - Software triggle register
        volatile uint32_t INTSTS;  ///< Offset: 0x14 - Interrupt status register
    };

    /// Peripheral instances
    inline Registers* EXINT = reinterpret_cast<Registers*>(EXINT_BASE);

    // Bit definitions
    /// INTEN Register bits
    namespace inten_bits {
        constexpr uint32_t INTEN0 = (1U << 0);  ///< Interrupt enable or disable on line 0
        constexpr uint32_t INTEN1 = (1U << 1);  ///< Interrupt enable or disable on line 1
        constexpr uint32_t INTEN2 = (1U << 2);  ///< Interrupt enable or disable on line 2
        constexpr uint32_t INTEN3 = (1U << 3);  ///< Interrupt enable or disable on line 3
        constexpr uint32_t INTEN4 = (1U << 4);  ///< Interrupt enable or disable on line 4
        constexpr uint32_t INTEN5 = (1U << 5);  ///< Interrupt enable or disable on line 5
        constexpr uint32_t INTEN6 = (1U << 6);  ///< Interrupt enable or disable on line 6
        constexpr uint32_t INTEN7 = (1U << 7);  ///< Interrupt enable or disable on line 7
        constexpr uint32_t INTEN8 = (1U << 8);  ///< Interrupt enable or disable on line 8
        constexpr uint32_t INTEN9 = (1U << 9);  ///< Interrupt enable or disable on line 9
        constexpr uint32_t INTEN10 = (1U << 10);  ///< Interrupt enable or disable on line 10
        constexpr uint32_t INTEN11 = (1U << 11);  ///< Interrupt enable or disable on line 11
        constexpr uint32_t INTEN12 = (1U << 12);  ///< Interrupt enable or disable on line 12
        constexpr uint32_t INTEN13 = (1U << 13);  ///< Interrupt enable or disable on line 13
        constexpr uint32_t INTEN14 = (1U << 14);  ///< Interrupt enable or disable on line 14
        constexpr uint32_t INTEN15 = (1U << 15);  ///< Interrupt enable or disable on line 15
        constexpr uint32_t INTEN16 = (1U << 16);  ///< Interrupt enable or disable on line 16
        constexpr uint32_t INTEN17 = (1U << 17);  ///< Interrupt enable or disable on line 17
        constexpr uint32_t INTEN18 = (1U << 18);  ///< Interrupt enable or disable on line 18
    }

    /// EVTEN Register bits
    namespace evten_bits {
        constexpr uint32_t EVTEN0 = (1U << 0);  ///< Event enable or disable on line 0
        constexpr uint32_t EVTEN1 = (1U << 1);  ///< Event enable or disable on line 1
        constexpr uint32_t EVTEN2 = (1U << 2);  ///< Event enable or disable on line 2
        constexpr uint32_t EVTEN3 = (1U << 3);  ///< Event enable or disable on line 3
        constexpr uint32_t EVTEN4 = (1U << 4);  ///< Event enable or disable on line 4
        constexpr uint32_t EVTEN5 = (1U << 5);  ///< Event enable or disable on line 5
        constexpr uint32_t EVTEN6 = (1U << 6);  ///< Event enable or disable on line 6
        constexpr uint32_t EVTEN7 = (1U << 7);  ///< Event enable or disable on line 7
        constexpr uint32_t EVTEN8 = (1U << 8);  ///< Event enable or disable on line 8
        constexpr uint32_t EVTEN9 = (1U << 9);  ///< Event enable or disable on line 9
        constexpr uint32_t EVTEN10 = (1U << 10);  ///< Event enable or disable on line 10
        constexpr uint32_t EVTEN11 = (1U << 11);  ///< Event enable or disable on line 11
        constexpr uint32_t EVTEN12 = (1U << 12);  ///< Event enable or disable on line 12
        constexpr uint32_t EVTEN13 = (1U << 13);  ///< Event enable or disable on line 13
        constexpr uint32_t EVTEN14 = (1U << 14);  ///< Event enable or disable on line 14
        constexpr uint32_t EVTEN15 = (1U << 15);  ///< Event enable or disable on line 15
        constexpr uint32_t EVTEN16 = (1U << 16);  ///< Event enable or disable on line 16
        constexpr uint32_t EVTEN17 = (1U << 17);  ///< Event enable or disable on line 17
        constexpr uint32_t EVTEN18 = (1U << 18);  ///< Event enable or disable on line 18
    }

    /// POLCFG1 Register bits
    namespace polcfg1_bits {
        constexpr uint32_t RP0 = (1U << 0);  ///< Rising polarity configuration bit of line 0
        constexpr uint32_t RP1 = (1U << 1);  ///< Rising polarity configuration bit of line 1
        constexpr uint32_t RP2 = (1U << 2);  ///< Rising polarity configuration bit of line 2
        constexpr uint32_t RP3 = (1U << 3);  ///< Rising polarity configuration bit of line 3
        constexpr uint32_t RP4 = (1U << 4);  ///< Rising polarity configuration bit of line 4
        constexpr uint32_t RP5 = (1U << 5);  ///< Rising polarity configuration bit of line 5
        constexpr uint32_t RP6 = (1U << 6);  ///< Rising polarity configuration bit of linee 6
        constexpr uint32_t RP7 = (1U << 7);  ///< Rising polarity configuration bit of line 7
        constexpr uint32_t RP8 = (1U << 8);  ///< Rising polarity configuration bit of line 8
        constexpr uint32_t RP9 = (1U << 9);  ///< Rising polarity configuration bit of line 9
        constexpr uint32_t RP10 = (1U << 10);  ///< Rising polarity configuration bit of line 10
        constexpr uint32_t RP11 = (1U << 11);  ///< Rising polarity configuration bit of line 11
        constexpr uint32_t RP12 = (1U << 12);  ///< Rising polarity configuration bit of line 12
        constexpr uint32_t RP13 = (1U << 13);  ///< Rising polarity configuration bit of line 13
        constexpr uint32_t RP14 = (1U << 14);  ///< Rising polarity configuration bit of line 14
        constexpr uint32_t RP15 = (1U << 15);  ///< Rising polarity configuration bit of line 15
        constexpr uint32_t RP16 = (1U << 16);  ///< Rising polarity configuration bit of line 16
        constexpr uint32_t RP17 = (1U << 17);  ///< Rising polarity configuration bit of line 17
        constexpr uint32_t RP18 = (1U << 18);  ///< Rising polarity configuration bit of line 18
    }

    /// POLCFG2 Register bits
    namespace polcfg2_bits {
        constexpr uint32_t FP0 = (1U << 0);  ///< Falling polarity event configuration bit of line 0
        constexpr uint32_t FP1 = (1U << 1);  ///< Falling polarity event configuration bit of line 1
        constexpr uint32_t FP2 = (1U << 2);  ///< Falling polarity event configuration bit of line 2
        constexpr uint32_t FP3 = (1U << 3);  ///< Falling polarity event configuration bit of line 3
        constexpr uint32_t FP4 = (1U << 4);  ///< Falling polarity event configuration bit of line 4
        constexpr uint32_t FP5 = (1U << 5);  ///< Falling polarity event configuration bit of line 5
        constexpr uint32_t FP6 = (1U << 6);  ///< Falling polarity event configuration bit of line 6
        constexpr uint32_t FP7 = (1U << 7);  ///< Falling polarity event configuration bit of line 7
        constexpr uint32_t FP8 = (1U << 8);  ///< Falling polarity event configuration bit of line 8
        constexpr uint32_t FP9 = (1U << 9);  ///< Falling polarity event configuration bit of line 9
        constexpr uint32_t FP10 = (1U << 10);  ///< Falling polarity event configuration bit of line 10
        constexpr uint32_t FP11 = (1U << 11);  ///< Falling polarity event configuration bit of line 11
        constexpr uint32_t FP12 = (1U << 12);  ///< Falling polarity event configuration bit of line 12
        constexpr uint32_t FP13 = (1U << 13);  ///< Falling polarity event configuration bit of line 13
        constexpr uint32_t FP14 = (1U << 14);  ///< Falling polarity event configuration bit of line 14
        constexpr uint32_t FP15 = (1U << 15);  ///< Falling polarity event configuration bit of line 15
        constexpr uint32_t FP16 = (1U << 16);  ///< Falling polarity event configuration bit of line 16
        constexpr uint32_t FP17 = (1U << 17);  ///< Falling polarity event configuration bit of line 17
        constexpr uint32_t FP18 = (1U << 18);  ///< Falling polarity event configuration bit of line 18
    }

    /// SWTRG Register bits
    namespace swtrg_bits {
        constexpr uint32_t SWT0 = (1U << 0);  ///< Software triggle on line 0
        constexpr uint32_t SWT1 = (1U << 1);  ///< Software triggle on line 1
        constexpr uint32_t SWT2 = (1U << 2);  ///< Software triggle on line 2
        constexpr uint32_t SWT3 = (1U << 3);  ///< Software triggle on line 3
        constexpr uint32_t SWT4 = (1U << 4);  ///< Software triggle on line 4
        constexpr uint32_t SWT5 = (1U << 5);  ///< Software triggle on line 5
        constexpr uint32_t SWT6 = (1U << 6);  ///< Software triggle on line 6
        constexpr uint32_t SWT7 = (1U << 7);  ///< Software triggle on line 7
        constexpr uint32_t SWT8 = (1U << 8);  ///< Software triggle on line 8
        constexpr uint32_t SWT9 = (1U << 9);  ///< Software triggle on line 9
        constexpr uint32_t SWT10 = (1U << 10);  ///< Software triggle on line 10
        constexpr uint32_t SWT11 = (1U << 11);  ///< Software triggle on line 11
        constexpr uint32_t SWT12 = (1U << 12);  ///< Software triggle on line 12
        constexpr uint32_t SWT13 = (1U << 13);  ///< Software triggle on line 13
        constexpr uint32_t SWT14 = (1U << 14);  ///< Software triggle on line 14
        constexpr uint32_t SWT15 = (1U << 15);  ///< Software triggle on line 15
        constexpr uint32_t SWT16 = (1U << 16);  ///< Software triggle on line 16
        constexpr uint32_t SWT17 = (1U << 17);  ///< Software triggle on line 17
        constexpr uint32_t SWT18 = (1U << 18);  ///< Software triggle on line 18
    }

    /// INTSTS Register bits
    namespace intsts_bits {
        constexpr uint32_t LINE0 = (1U << 0);  ///< Line 0 state bit
        constexpr uint32_t LINE1 = (1U << 1);  ///< Line 1 state bit
        constexpr uint32_t LINE2 = (1U << 2);  ///< Line 2 state bit
        constexpr uint32_t LINE3 = (1U << 3);  ///< Line 3 state bit
        constexpr uint32_t LINE4 = (1U << 4);  ///< Line 4 state bit
        constexpr uint32_t LINE5 = (1U << 5);  ///< Line 5 state bit
        constexpr uint32_t LINE6 = (1U << 6);  ///< Line 6 state bit
        constexpr uint32_t LINE7 = (1U << 7);  ///< Line 7 state bit
        constexpr uint32_t LINE8 = (1U << 8);  ///< Line 8 state bit
        constexpr uint32_t LINE9 = (1U << 9);  ///< Line 9 state bit
        constexpr uint32_t LINE10 = (1U << 10);  ///< Line 10 state bit
        constexpr uint32_t LINE11 = (1U << 11);  ///< Line 11 state bit
        constexpr uint32_t LINE12 = (1U << 12);  ///< Line 12 state bit
        constexpr uint32_t LINE13 = (1U << 13);  ///< Line 13 state bit
        constexpr uint32_t LINE14 = (1U << 14);  ///< Line 14 state bit
        constexpr uint32_t LINE15 = (1U << 15);  ///< Line 15 state bit
        constexpr uint32_t LINE16 = (1U << 16);  ///< Line 16 state bit
        constexpr uint32_t LINE17 = (1U << 17);  ///< Line 17 state bit
        constexpr uint32_t LINE18 = (1U << 18);  ///< Line 18 state bit
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMA1_BASE = 0x40020000;
    constexpr uint32_t DMA2_BASE = 0x40020400;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t STS;  ///< Offset: 0x00 - DMA status register (DMA_STS)
        volatile uint32_t CLR;  ///< Offset: 0x04 - DMA flag clear register (DMA_CLR)
        volatile uint32_t C1CTRL;  ///< Offset: 0x08 - DMA channel configuration register
        volatile uint32_t C1DTCNT;  ///< Offset: 0x0C - DMA channel 1 number of data to transfer register
        volatile uint32_t C1PADDR;  ///< Offset: 0x10 - DMA channel 1 peripheral base address register
        volatile uint32_t C1MADDR;  ///< Offset: 0x14 - DMA channel 1 memory base address register
        volatile uint32_t C2CTRL;  ///< Offset: 0x1C - DMA channel configuration register
        volatile uint32_t C2DTCNT;  ///< Offset: 0x20 - DMA channel 2 number of data to transferregister
        volatile uint32_t C2PADDR;  ///< Offset: 0x24 - DMA channel 2 peripheral base address register
        volatile uint32_t C2MADDR;  ///< Offset: 0x28 - DMA channel 2 memory base address register
        volatile uint32_t C3CTRL;  ///< Offset: 0x30 - DMA channel configuration register
        volatile uint32_t C3DTCNT;  ///< Offset: 0x34 - DMA channel 3 number of data to transfer register
        volatile uint32_t C3PADDR;  ///< Offset: 0x38 - DMA channel 3 peripheral base address register
        volatile uint32_t C3MADDR;  ///< Offset: 0x3C - DMA channel 3 memory base address register
        volatile uint32_t C4CTRL;  ///< Offset: 0x44 - DMA channel configuration register
        volatile uint32_t C4DTCNT;  ///< Offset: 0x48 - DMA channel 4 number of data to transfer register
        volatile uint32_t C4PADDR;  ///< Offset: 0x4C - DMA channel 4 peripheral base address register
        volatile uint32_t C4MADDR;  ///< Offset: 0x50 - DMA channel 4 memory base address register
        volatile uint32_t C5CTRL;  ///< Offset: 0x58 - DMA channel configuration register
        volatile uint32_t C5DTCNT;  ///< Offset: 0x5C - DMA channel 5 number of data to transfer register
        volatile uint32_t C5PADDR;  ///< Offset: 0x60 - DMA channel 5 peripheral base address register
        volatile uint32_t C5MADDR;  ///< Offset: 0x64 - DMA channel 5 memory base address register
        volatile uint32_t C6CTRL;  ///< Offset: 0x6C - DMA channel configuration register
        volatile uint32_t C6DTCNT;  ///< Offset: 0x70 - DMA channel 6 number of data to transfer register
        volatile uint32_t C6PADDR;  ///< Offset: 0x74 - DMA channel 6 peripheral address base register
        volatile uint32_t C6MADDR;  ///< Offset: 0x78 - DMA channel 6 memory address base register
        volatile uint32_t C7CTRL;  ///< Offset: 0x80 - DMA channel configuration register
        volatile uint32_t C7DTCNT;  ///< Offset: 0x84 - DMA channel 7 number of data to transfer register
        volatile uint32_t C7PADDR;  ///< Offset: 0x88 - DMA channel 7 peripheral base address register
        volatile uint32_t C7MADDR;  ///< Offset: 0x8C - DMA channel 7 memory base address register
        volatile uint32_t DMA_SRC_SEL0;  ///< Offset: 0xA0 - DMA channel source assignment register
        volatile uint32_t DMA_SRC_SEL1;  ///< Offset: 0xA4 - DMA channel source assignment register
    };

    /// Peripheral instances
    inline Registers* DMA1 = reinterpret_cast<Registers*>(DMA1_BASE);
    inline Registers* DMA2 = reinterpret_cast<Registers*>(DMA2_BASE);

    // Bit definitions
    /// STS Register bits
    namespace sts_bits {
        constexpr uint32_t GF1 = (1U << 0);  ///< Channel 1 Global event flag
        constexpr uint32_t GF2 = (1U << 4);  ///< Channel 2 Global event flag
        constexpr uint32_t GF3 = (1U << 8);  ///< Channel 3 Global event flag
        constexpr uint32_t GF4 = (1U << 12);  ///< Channel 4 Global event flag
        constexpr uint32_t GF5 = (1U << 16);  ///< Channel 5 Global event flag
        constexpr uint32_t GF6 = (1U << 20);  ///< Channel 6 Global event flag
        constexpr uint32_t GF7 = (1U << 24);  ///< Channel 7 Global event flag
        constexpr uint32_t FDTF1 = (1U << 1);  ///< Channel 1 full data transfer event flag
        constexpr uint32_t FDTF2 = (1U << 5);  ///< Channel 2 full data transfer event flag
        constexpr uint32_t FDTF3 = (1U << 9);  ///< Channel 3 full data transfer event flag
        constexpr uint32_t FDTF4 = (1U << 13);  ///< Channel 4 full data transfer event flag
        constexpr uint32_t FDTF5 = (1U << 17);  ///< Channel 5 full data transfer event flag
        constexpr uint32_t FDTF6 = (1U << 21);  ///< Channel 6 full data transfer event flag
        constexpr uint32_t FDTF7 = (1U << 25);  ///< Channel 7 full data transfer event flag
        constexpr uint32_t HDTF1 = (1U << 2);  ///< Channel 1 half data transfer event flag
        constexpr uint32_t HDTF2 = (1U << 6);  ///< Channel 2 half data transfer event flag
        constexpr uint32_t HDTF3 = (1U << 10);  ///< Channel 3 half data transfer event flag
        constexpr uint32_t HDTF4 = (1U << 14);  ///< Channel 4 half data transfer event flag
        constexpr uint32_t HDTF5 = (1U << 18);  ///< Channel 5 half data transfer event flag
        constexpr uint32_t HDTF6 = (1U << 22);  ///< Channel 6 half data transfer event flag
        constexpr uint32_t HDTF7 = (1U << 26);  ///< Channel 7 half data transfer event flag
        constexpr uint32_t DTERRF1 = (1U << 3);  ///< Channel 1 data transfer error event flag
        constexpr uint32_t DTERRF2 = (1U << 7);  ///< Channel 2 data transfer error event flag
        constexpr uint32_t DTERRF3 = (1U << 11);  ///< Channel 3 data transfer error event flag
        constexpr uint32_t DTERRF4 = (1U << 15);  ///< Channel 4 data transfer error event flag
        constexpr uint32_t DTERRF5 = (1U << 19);  ///< Channel 5 data transfer error event flag
        constexpr uint32_t DTERRF6 = (1U << 23);  ///< Channel 6 data transfer error event flag
        constexpr uint32_t DTERRF7 = (1U << 27);  ///< Channel 7 data transfer error event flag
    }

    /// CLR Register bits
    namespace clr_bits {
        constexpr uint32_t GFC1 = (1U << 0);  ///< Channel 1 Global flag clear
        constexpr uint32_t GFC2 = (1U << 4);  ///< Channel 2 Global flag clear
        constexpr uint32_t GFC3 = (1U << 8);  ///< Channel 3 Global flag clear
        constexpr uint32_t GFC4 = (1U << 12);  ///< Channel 4 Global flag clear
        constexpr uint32_t GFC5 = (1U << 16);  ///< Channel 5 Global flag clear
        constexpr uint32_t GFC6 = (1U << 20);  ///< Channel 6 Global flag clear
        constexpr uint32_t GFC7 = (1U << 24);  ///< Channel 7 Global flag clear
        constexpr uint32_t FDTFC1 = (1U << 1);  ///< Channel 1 full data transfer flag clear
        constexpr uint32_t FDTFC2 = (1U << 5);  ///< Channel 2 full data transfer flag clear
        constexpr uint32_t FDTFC3 = (1U << 9);  ///< Channel 3 full data transfer flag clear
        constexpr uint32_t FDTFC4 = (1U << 13);  ///< Channel 4 full data transfer flag clear
        constexpr uint32_t FDTFC5 = (1U << 17);  ///< Channel 5 full data transfer flag clear
        constexpr uint32_t FDTFC6 = (1U << 21);  ///< Channel 6 full data transfer flag clear
        constexpr uint32_t FDTFC7 = (1U << 25);  ///< Channel 7 full data transfer flag clear
        constexpr uint32_t HDTFC1 = (1U << 2);  ///< Channel 1 half data transfer flag clear
        constexpr uint32_t HDTFC2 = (1U << 6);  ///< Channel 2 half data transfer flag clear
        constexpr uint32_t HDTFC3 = (1U << 10);  ///< Channel 3 half data transfer flag clear
        constexpr uint32_t HDTFC4 = (1U << 14);  ///< Channel 4 half data transfer flag clear
        constexpr uint32_t HDTFC5 = (1U << 18);  ///< Channel 5 half data transfer flag clear
        constexpr uint32_t HDTFC6 = (1U << 22);  ///< Channel 6 half data transfer flag clear
        constexpr uint32_t HDTFC7 = (1U << 26);  ///< Channel 7 half data transfer flag clear
        constexpr uint32_t DTERRFC1 = (1U << 3);  ///< Channel 1 data transfer error flag clear
        constexpr uint32_t DTERRFC2 = (1U << 7);  ///< Channel 2 data transfer error flag clear
        constexpr uint32_t DTERRFC3 = (1U << 11);  ///< Channel 3 data transfer error flag clear
        constexpr uint32_t DTERRFC4 = (1U << 15);  ///< Channel 4 data transfer error flag clear
        constexpr uint32_t DTERRFC5 = (1U << 19);  ///< Channel 5 data transfer error flag clear
        constexpr uint32_t DTERRFC6 = (1U << 23);  ///< Channel 6 data transfer error flag clear
        constexpr uint32_t DTERRFC7 = (1U << 27);  ///< Channel 7 data transfer error flag clear
    }

    /// C1CTRL Register bits
    namespace c1ctrl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FDTIEN = (1U << 1);  ///< Full data transfer interrupt enable
        constexpr uint32_t HDTIEN = (1U << 2);  ///< Half data transfer interrupt enable
        constexpr uint32_t DTERRIEN = (1U << 3);  ///< Data transfer error interrupt enable
        constexpr uint32_t DTD = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t LM = (1U << 5);  ///< Loop mode
        constexpr uint32_t PINCM = (1U << 6);  ///< Peripheral address increment mode
        constexpr uint32_t MINCM = (1U << 7);  ///< Memory address increment mode
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Peripheral data bit width
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Memory data bit width
        constexpr uint32_t CHPL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to memory mode
    }

    /// C1DTCNT Register bits
    namespace c1dtcnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Number of data to transfer
    }

    /// C1PADDR Register bits
    namespace c1paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral address
    }

    /// C1MADDR Register bits
    namespace c1maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory address
    }

    /// C2CTRL Register bits
    namespace c2ctrl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FDTIEN = (1U << 1);  ///< Full data transfer interrupt enable
        constexpr uint32_t HDTIEN = (1U << 2);  ///< Half data transfer interrupt enable
        constexpr uint32_t DTERRIEN = (1U << 3);  ///< Data transfer error interrupt enable
        constexpr uint32_t DTD = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t LM = (1U << 5);  ///< Loop mode
        constexpr uint32_t PINCM = (1U << 6);  ///< Peripheral address increment mode
        constexpr uint32_t MINCM = (1U << 7);  ///< Memory address increment mode
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Peripheral data bit width
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Memory data bit width
        constexpr uint32_t CHPL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to memory mode
    }

    /// C2DTCNT Register bits
    namespace c2dtcnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Number of data to transfer
    }

    /// C2PADDR Register bits
    namespace c2paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral address
    }

    /// C2MADDR Register bits
    namespace c2maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory address
    }

    /// C3CTRL Register bits
    namespace c3ctrl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FDTIEN = (1U << 1);  ///< Full data transfer interrupt enable
        constexpr uint32_t HDTIEN = (1U << 2);  ///< Half data transfer interrupt enable
        constexpr uint32_t DTERRIEN = (1U << 3);  ///< Data transfer error interrupt enable
        constexpr uint32_t DTD = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t LM = (1U << 5);  ///< Loop mode
        constexpr uint32_t PINCM = (1U << 6);  ///< Peripheral address increment mode
        constexpr uint32_t MINCM = (1U << 7);  ///< Memory address increment mode
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Peripheral data bit width
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Memory data bit width
        constexpr uint32_t CHPL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to memory mode
    }

    /// C3DTCNT Register bits
    namespace c3dtcnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Number of data to transfer
    }

    /// C3PADDR Register bits
    namespace c3paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral address
    }

    /// C3MADDR Register bits
    namespace c3maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory address
    }

    /// C4CTRL Register bits
    namespace c4ctrl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FDTIEN = (1U << 1);  ///< Full data transfer interrupt enable
        constexpr uint32_t HDTIEN = (1U << 2);  ///< Half data transfer interrupt enable
        constexpr uint32_t DTERRIEN = (1U << 3);  ///< Data transfer error interrupt enable
        constexpr uint32_t DTD = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t LM = (1U << 5);  ///< Loop mode
        constexpr uint32_t PINCM = (1U << 6);  ///< Peripheral address increment mode
        constexpr uint32_t MINCM = (1U << 7);  ///< Memory address increment mode
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Peripheral data bit width
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Memory data bit width
        constexpr uint32_t CHPL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to memory mode
    }

    /// C4DTCNT Register bits
    namespace c4dtcnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Number of data to transfer
    }

    /// C4PADDR Register bits
    namespace c4paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral address
    }

    /// C4MADDR Register bits
    namespace c4maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory address
    }

    /// C5CTRL Register bits
    namespace c5ctrl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FDTIEN = (1U << 1);  ///< Full data transfer interrupt enable
        constexpr uint32_t HDTIEN = (1U << 2);  ///< Half data transfer interrupt enable
        constexpr uint32_t DTERRIEN = (1U << 3);  ///< Data transfer error interrupt enable
        constexpr uint32_t DTD = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t LM = (1U << 5);  ///< Loop mode
        constexpr uint32_t PINCM = (1U << 6);  ///< Peripheral address increment mode
        constexpr uint32_t MINCM = (1U << 7);  ///< Memory address increment mode
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Peripheral data bit width
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Memory data bit width
        constexpr uint32_t CHPL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to memory mode
    }

    /// C5DTCNT Register bits
    namespace c5dtcnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Number of data to transfer
    }

    /// C5PADDR Register bits
    namespace c5paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral address
    }

    /// C5MADDR Register bits
    namespace c5maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory address
    }

    /// C6CTRL Register bits
    namespace c6ctrl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FDTIEN = (1U << 1);  ///< Full data transfer interrupt enable
        constexpr uint32_t HDTIEN = (1U << 2);  ///< Half data transfer interrupt enable
        constexpr uint32_t DTERRIEN = (1U << 3);  ///< Data transfer error interrupt enable
        constexpr uint32_t DTD = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t LM = (1U << 5);  ///< Loop mode
        constexpr uint32_t PINCM = (1U << 6);  ///< Peripheral address increment mode
        constexpr uint32_t MINCM = (1U << 7);  ///< Memory address increment mode
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Peripheral data bit width
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Memory data bit width
        constexpr uint32_t CHPL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to memory mode
    }

    /// C6DTCNT Register bits
    namespace c6dtcnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Number of data to transfer
    }

    /// C6PADDR Register bits
    namespace c6paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral address
    }

    /// C6MADDR Register bits
    namespace c6maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory address
    }

    /// C7CTRL Register bits
    namespace c7ctrl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FDTIEN = (1U << 1);  ///< Full data transfer interrupt enable
        constexpr uint32_t HDTIEN = (1U << 2);  ///< Half data transfer interrupt enable
        constexpr uint32_t DTERRIEN = (1U << 3);  ///< Data transfer error interrupt enable
        constexpr uint32_t DTD = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t LM = (1U << 5);  ///< Loop mode
        constexpr uint32_t PINCM = (1U << 6);  ///< Peripheral address increment mode
        constexpr uint32_t MINCM = (1U << 7);  ///< Memory address increment mode
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Peripheral data bit width
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Memory data bit width
        constexpr uint32_t CHPL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to memory mode
    }

    /// C7DTCNT Register bits
    namespace c7dtcnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Number of data to transfer
    }

    /// C7PADDR Register bits
    namespace c7paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral address
    }

    /// C7MADDR Register bits
    namespace c7maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory address
    }

    /// DMA_SRC_SEL0 Register bits
    namespace dma_src_sel0_bits {
        constexpr uint32_t CH1_SRC = (8 << 0);  ///< CH1 SRC select
        constexpr uint32_t CH2_SRC = (8 << 8);  ///< CH2 SRC select
        constexpr uint32_t CH3_SRC = (8 << 16);  ///< CH3 SRC select
        constexpr uint32_t CH4_SRC = (8 << 24);  ///< CH4 SRC select
    }

    /// DMA_SRC_SEL1 Register bits
    namespace dma_src_sel1_bits {
        constexpr uint32_t CH5_SRC = (8 << 0);  ///< CH5 SRC select
        constexpr uint32_t CH6_SRC = (8 << 8);  ///< CH6 SRC select
        constexpr uint32_t CH7_SRC = (8 << 16);  ///< CH7 SRC select
        constexpr uint32_t DMA_FLEX_EN = (1U << 24);  ///< DMA FLEX Enable
    }

}

// ============================================================================
// SDIO Peripheral
// ============================================================================

namespace sdio {
    /// Base addresses
    constexpr uint32_t SDIO_BASE = 0x40018000;

    /// SDIO Register structure
    struct Registers {
        volatile uint32_t PWRCTRL;  ///< Offset: 0x00 - Bits 1:0 = PWRCTRL: Power supply control bits
        volatile uint32_t CLKCTRL;  ///< Offset: 0x04 - SD clock control register (SDIO_CLKCTRL)
        volatile uint32_t ARGU;  ///< Offset: 0x08 - Bits 31:0 = : Command argument
        volatile uint32_t CMDCTRL;  ///< Offset: 0x0C - SDIO command control register (SDIO_CMDCTRL)
        volatile uint32_t RSPCMD;  ///< Offset: 0x10 - SDIO command register
        volatile uint32_t RSP1;  ///< Offset: 0x14 - Bits 31:0 = CARDSTATUS1
        volatile uint32_t RSP2;  ///< Offset: 0x18 - Bits 31:0 = CARDSTATUS2
        volatile uint32_t RSP3;  ///< Offset: 0x1C - Bits 31:0 = CARDSTATUS3
        volatile uint32_t RSP4;  ///< Offset: 0x20 - Bits 31:0 = CARDSTATUS4
        volatile uint32_t DTTMR;  ///< Offset: 0x24 - Bits 31:0 = TIMEOUT: Data timeout period
        volatile uint32_t DTLEN;  ///< Offset: 0x28 - Bits 24:0 = DATALENGTH: Data length value
        volatile uint32_t DTCTRL;  ///< Offset: 0x2C - SDIO data control register (SDIO_DCTRL)
        volatile uint32_t DTCNT;  ///< Offset: 0x30 - Bits 24:0 = DATACOUNT: Data count value
        volatile uint32_t STS;  ///< Offset: 0x34 - SDIO status register (SDIO_STS)
        volatile uint32_t INTCLR;  ///< Offset: 0x38 - SDIO interrupt clear register (SDIO_INTCLR)
        volatile uint32_t INTEN;  ///< Offset: 0x3C - SDIO mask register (SDIO_INTEN)
        volatile uint32_t BUFCNT;  ///< Offset: 0x48 - Bits 23:0 = BUFCOUNT: Remaining number of words to be...
        volatile uint32_t BUF;  ///< Offset: 0x80 - bits 31:0 = Buffer Data: Receive and transmit buffer data
    };

    /// Peripheral instances
    inline Registers* SDIO = reinterpret_cast<Registers*>(SDIO_BASE);

    // Bit definitions
    /// PWRCTRL Register bits
    namespace pwrctrl_bits {
        constexpr uint32_t PS = (2 << 0);  ///< Power switch
    }

    /// CLKCTRL Register bits
    namespace clkctrl_bits {
        constexpr uint32_t CLKDIV = (8 << 0);  ///< Clock division
        constexpr uint32_t CLKOEN = (1U << 8);  ///< Clock output enable
        constexpr uint32_t PWRSVEN = (1U << 9);  ///< Power saving mode enable
        constexpr uint32_t BYPSEN = (1U << 10);  ///< Clock divider bypass enable bit
        constexpr uint32_t BUSWS = (2 << 11);  ///< Bus width selection
        constexpr uint32_t CLKEDS = (1U << 13);  ///< SDIO_CK edge selection bit
        constexpr uint32_t HFCEN = (1U << 14);  ///< Hardware flow control enable
        constexpr uint32_t CLKDIV98 = (2 << 15);  ///< Clock divide factor bit9 and bit8
    }

    /// ARGU Register bits
    namespace argu_bits {
        constexpr uint32_t ARGU = (32 << 0);  ///< Command argument
    }

    /// CMDCTRL Register bits
    namespace cmdctrl_bits {
        constexpr uint32_t CMDIDX = (6 << 0);  ///< CMDIDX
        constexpr uint32_t RSPWT = (2 << 6);  ///< Wait for response
        constexpr uint32_t INTWT = (1U << 8);  ///< CCSM wait for interrupt
        constexpr uint32_t PNDWT = (1U << 9);  ///< CCSM wait for end of transfer
        constexpr uint32_t CCSMEN = (1U << 10);  ///< Command channel state machine
        constexpr uint32_t IOSUSP = (1U << 11);  ///< SD I/O suspend command
    }

    /// RSPCMD Register bits
    namespace rspcmd_bits {
        constexpr uint32_t RSPCMD = (6 << 0);  ///< RSPCMD
    }

    /// RSP1 Register bits
    namespace rsp1_bits {
        constexpr uint32_t CARDSTS1 = (32 << 0);  ///< CARDSTATUS1
    }

    /// RSP2 Register bits
    namespace rsp2_bits {
        constexpr uint32_t CARDSTS2 = (32 << 0);  ///< CARDSTATUS2
    }

    /// RSP3 Register bits
    namespace rsp3_bits {
        constexpr uint32_t CARDSTS3 = (32 << 0);  ///< CARDSTATUS3
    }

    /// RSP4 Register bits
    namespace rsp4_bits {
        constexpr uint32_t CARDSTS4 = (32 << 0);  ///< CARDSTATUS4
    }

    /// DTTMR Register bits
    namespace dttmr_bits {
        constexpr uint32_t TIMEOUT = (32 << 0);  ///< Data timeout period
    }

    /// DTLEN Register bits
    namespace dtlen_bits {
        constexpr uint32_t DTLEN = (25 << 0);  ///< Data length value
    }

    /// DTCTRL Register bits
    namespace dtctrl_bits {
        constexpr uint32_t TFREN = (1U << 0);  ///< DTEN
        constexpr uint32_t TFRDIR = (1U << 1);  ///< DTDIR
        constexpr uint32_t TFRMODE = (1U << 2);  ///< DTMODE
        constexpr uint32_t DMAEN = (1U << 3);  ///< DMAEN
        constexpr uint32_t BLKSIZE = (4 << 4);  ///< DBLOCKSIZE
        constexpr uint32_t RDWTSTART = (1U << 8);  ///< PWSTART
        constexpr uint32_t RDWTSTOP = (1U << 9);  ///< PWSTOP
        constexpr uint32_t RDWTMODE = (1U << 10);  ///< RWMOD
        constexpr uint32_t IOEN = (1U << 11);  ///< SD I/O function enable
    }

    /// DTCNT Register bits
    namespace dtcnt_bits {
        constexpr uint32_t CNT = (25 << 0);  ///< Data count value
    }

    /// STS Register bits
    namespace sts_bits {
        constexpr uint32_t CMDFAIL = (1U << 0);  ///< Command crc fail
        constexpr uint32_t DTFAIL = (1U << 1);  ///< Data crc fail
        constexpr uint32_t CMDTIMEOUT = (1U << 2);  ///< Command timeout
        constexpr uint32_t DTTIMEOUT = (1U << 3);  ///< Data timeout
        constexpr uint32_t TXERRU = (1U << 4);  ///< Tx under run error
        constexpr uint32_t RXERRO = (1U << 5);  ///< Rx over run error
        constexpr uint32_t CMDRSPCMPL = (1U << 6);  ///< Command response complete
        constexpr uint32_t CMDCMPL = (1U << 7);  ///< Command sent
        constexpr uint32_t DTCMPL = (1U << 8);  ///< Data sent
        constexpr uint32_t SBITERR = (1U << 9);  ///< Start bit error
        constexpr uint32_t DTBLKCMPL = (1U << 10);  ///< Data block sent
        constexpr uint32_t DOCMD = (1U << 11);  ///< Command transfer in progress
        constexpr uint32_t DOTX = (1U << 12);  ///< Data transmit in progress
        constexpr uint32_t DORX = (1U << 13);  ///< Data receive in progress
        constexpr uint32_t TXBUFH = (1U << 14);  ///< Tx buffer half empty
        constexpr uint32_t RXBUFH = (1U << 15);  ///< Rx buffer half empty
        constexpr uint32_t TXBUFF = (1U << 16);  ///< Tx buffer full
        constexpr uint32_t RXBUFF = (1U << 17);  ///< Rx buffer full
        constexpr uint32_t TXBUFE = (1U << 18);  ///< Tx buffer empty
        constexpr uint32_t RXBUFE = (1U << 19);  ///< Rx buffer empty
        constexpr uint32_t TXBUF = (1U << 20);  ///< Tx data vaild
        constexpr uint32_t RXBUF = (1U << 21);  ///< Rx data vaild
        constexpr uint32_t IOIF = (1U << 22);  ///< SD I/O interrupt
    }

    /// INTCLR Register bits
    namespace intclr_bits {
        constexpr uint32_t CMDFAIL = (1U << 0);  ///< Command crc fail flag clear
        constexpr uint32_t DTFAIL = (1U << 1);  ///< Data crc fail flag clear
        constexpr uint32_t CMDTIMEOUT = (1U << 2);  ///< Command timeout flag clear
        constexpr uint32_t DTTIMEOUT = (1U << 3);  ///< Data timeout flag clear
        constexpr uint32_t TXERRU = (1U << 4);  ///< Tx under run error flag clear
        constexpr uint32_t RXERRU = (1U << 5);  ///< Rx over run error flag clear
        constexpr uint32_t CMDRSPCMPL = (1U << 6);  ///< Command response complete flag clear
        constexpr uint32_t CMDCMPL = (1U << 7);  ///< Command sent flag clear
        constexpr uint32_t DTCMPL = (1U << 8);  ///< Data sent flag clear
        constexpr uint32_t SBITERR = (1U << 9);  ///< Start bit error flag clear
        constexpr uint32_t DTBLKCMPL = (1U << 10);  ///< Data block sent clear
        constexpr uint32_t IOIF = (1U << 22);  ///< SD I/O interrupt flag clear
    }

    /// INTEN Register bits
    namespace inten_bits {
        constexpr uint32_t CMDFAILIEN = (1U << 0);  ///< Command crc fail interrupt enable
        constexpr uint32_t DTFAILIEN = (1U << 1);  ///< Data crc fail interrupt enable
        constexpr uint32_t CMDTIMEOUTIEN = (1U << 2);  ///< Command timeout interrupt enable
        constexpr uint32_t DTTIMEOUTIEN = (1U << 3);  ///< Data timeout interrupt enable
        constexpr uint32_t TXERRUIEN = (1U << 4);  ///< Tx under run interrupt enable
        constexpr uint32_t RXERRUIEN = (1U << 5);  ///< Rx over run interrupt enable
        constexpr uint32_t CMDRSPCMPLIEN = (1U << 6);  ///< Command response complete interrupt enable
        constexpr uint32_t CMDCMPLIEN = (1U << 7);  ///< Command sent complete interrupt enable
        constexpr uint32_t DTCMPLIEN = (1U << 8);  ///< Data sent complete interrupt enable
        constexpr uint32_t SBITERRIEN = (1U << 9);  ///< Start bit error interrupt enable
        constexpr uint32_t DTBLKCMPLIEN = (1U << 10);  ///< Data block sent complete interrupt enable
        constexpr uint32_t DOCMDIEN = (1U << 11);  ///< Command acting interrupt enable
        constexpr uint32_t DOTXIEN = (1U << 12);  ///< Data transmit acting interrupt enable
        constexpr uint32_t DORXIEN = (1U << 13);  ///< Data receive acting interrupt enable
        constexpr uint32_t TXBUFHIEN = (1U << 14);  ///< Tx buffer half empty interrupt enable
        constexpr uint32_t RXBUFHIEN = (1U << 15);  ///< Rx buffer half empty interrupt enable
        constexpr uint32_t TXBUFFIEN = (1U << 16);  ///< Tx buffer full interrupt enable
        constexpr uint32_t RXBUFFIEN = (1U << 17);  ///< Rx buffer full interrupt enable
        constexpr uint32_t TXBUFEIEN = (1U << 18);  ///< Tx buffer empty interrupt enable
        constexpr uint32_t RXBUFEIEN = (1U << 19);  ///< Rx buffer empty interrupt enable
        constexpr uint32_t TXBUFIEN = (1U << 20);  ///< Tx buffer data vaild interrupt enable
        constexpr uint32_t RXBUFIEN = (1U << 21);  ///< Rx buffer data vaild interrupt enable
        constexpr uint32_t IOIFIEN = (1U << 22);  ///< SD I/O interrupt enable
    }

    /// BUFCNT Register bits
    namespace bufcnt_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< FIF0COUNT
    }

    /// BUF Register bits
    namespace buf_bits {
        constexpr uint32_t DT = (32 << 0);  ///< Buffer data
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x40002800;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t CTRLH;  ///< Offset: 0x00 - RTC Control Register High
        volatile uint32_t CTRLL;  ///< Offset: 0x04 - RTC Control Register Low
        volatile uint32_t DIVH;  ///< Offset: 0x08 - RTC Divider Register High
        volatile uint32_t DIVL;  ///< Offset: 0x0C - RTC Divider Register Low
        volatile uint32_t DIVCNTH;  ///< Offset: 0x10 - RTC Divider Register High
        volatile uint32_t DIVCNTL;  ///< Offset: 0x14 - RTC Divider Register Low
        volatile uint32_t CNTH;  ///< Offset: 0x18 - RTC Counter Register High
        volatile uint32_t CNTL;  ///< Offset: 0x1C - RTC Counter Register Low
        volatile uint32_t TAH;  ///< Offset: 0x20 - RTC Alarm Register High
        volatile uint32_t TAL;  ///< Offset: 0x24 - Time alarm register low
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// CTRLH Register bits
    namespace ctrlh_bits {
        constexpr uint32_t OVFIEN = (1U << 0);  ///< Overflow interrupt enable
        constexpr uint32_t TAIEN = (1U << 1);  ///< Time alarm interrupt enable
        constexpr uint32_t TSIEN = (1U << 2);  ///< Time second interrupt enable
    }

    /// CTRLL Register bits
    namespace ctrll_bits {
        constexpr uint32_t TSF = (1U << 0);  ///< Time second flag
        constexpr uint32_t TAF = (1U << 1);  ///< Time alarm flag
        constexpr uint32_t OVFF = (1U << 2);  ///< Overflow Flag
        constexpr uint32_t UPDF = (1U << 3);  ///< RTC update finish
        constexpr uint32_t CFGEN = (1U << 4);  ///< RTC configuration enable
        constexpr uint32_t CFGF = (1U << 5);  ///< RTC configuration finish
    }

    /// DIVH Register bits
    namespace divh_bits {
        constexpr uint32_t DIV = (4 << 0);  ///< RTC divider high
    }

    /// DIVL Register bits
    namespace divl_bits {
        constexpr uint32_t DIV = (16 << 0);  ///< RTC divider low
    }

    /// DIVCNTH Register bits
    namespace divcnth_bits {
        constexpr uint32_t DIVCNT = (4 << 0);  ///< RTC divider register high
    }

    /// DIVCNTL Register bits
    namespace divcntl_bits {
        constexpr uint32_t DIVCNT = (16 << 0);  ///< RTC divider register low
    }

    /// CNTH Register bits
    namespace cnth_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< RTC counter register high
    }

    /// CNTL Register bits
    namespace cntl_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< RTC counter register low
    }

    /// TAH Register bits
    namespace tah_bits {
        constexpr uint32_t TA = (16 << 0);  ///< Time alarm register high
    }

    /// TAL Register bits
    namespace tal_bits {
        constexpr uint32_t TA = (16 << 0);  ///< RTC alarm register low
    }

}

// ============================================================================
// BPR Peripheral
// ============================================================================

namespace bpr {
    /// Base addresses
    constexpr uint32_t BPR_BASE = 0x40006C04;

    /// BPR Register structure
    struct Registers {
        volatile uint32_t DT1;  ///< Offset: 0x00 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT2;  ///< Offset: 0x04 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT3;  ///< Offset: 0x08 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT4;  ///< Offset: 0x0C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT5;  ///< Offset: 0x10 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT6;  ///< Offset: 0x14 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT7;  ///< Offset: 0x18 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT8;  ///< Offset: 0x1C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT9;  ///< Offset: 0x20 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT10;  ///< Offset: 0x24 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT11;  ///< Offset: 0x3C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT12;  ///< Offset: 0x40 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT13;  ///< Offset: 0x44 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT14;  ///< Offset: 0x48 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT15;  ///< Offset: 0x4C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT16;  ///< Offset: 0x50 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT17;  ///< Offset: 0x54 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT18;  ///< Offset: 0x58 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT19;  ///< Offset: 0x5C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT20;  ///< Offset: 0x60 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT21;  ///< Offset: 0x64 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT22;  ///< Offset: 0x68 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT23;  ///< Offset: 0x6C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT24;  ///< Offset: 0x70 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT25;  ///< Offset: 0x74 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT26;  ///< Offset: 0x78 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT27;  ///< Offset: 0x7C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT28;  ///< Offset: 0x80 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT29;  ///< Offset: 0x84 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT30;  ///< Offset: 0x88 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT31;  ///< Offset: 0x8C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT32;  ///< Offset: 0x90 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT33;  ///< Offset: 0x94 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT34;  ///< Offset: 0x98 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT35;  ///< Offset: 0x9C - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT36;  ///< Offset: 0xA0 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT37;  ///< Offset: 0xA4 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT38;  ///< Offset: 0xA8 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT39;  ///< Offset: 0xAC - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT40;  ///< Offset: 0xB0 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT41;  ///< Offset: 0xB4 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t DT42;  ///< Offset: 0xB8 - Battery powered domain data register (BPR_DTx)
        volatile uint32_t RTCCAL;  ///< Offset: 0x28 - RTC clock calibration register (BPR_RTCCAL)
        volatile uint32_t CTRL;  ///< Offset: 0x2C - BPR control register (BPR_CTRL)
        volatile uint32_t CTRLSTS;  ///< Offset: 0x30 - BPR control/status register (BPR_CTRLSTS)
    };

    /// Peripheral instances
    inline Registers* BPR = reinterpret_cast<Registers*>(BPR_BASE);

    // Bit definitions
    /// DT1 Register bits
    namespace dt1_bits {
        constexpr uint32_t DT1 = (16 << 0);  ///< BPR data1
    }

    /// DT2 Register bits
    namespace dt2_bits {
        constexpr uint32_t DT2 = (16 << 0);  ///< BPR data2
    }

    /// DT3 Register bits
    namespace dt3_bits {
        constexpr uint32_t DT3 = (16 << 0);  ///< BPR data3
    }

    /// DT4 Register bits
    namespace dt4_bits {
        constexpr uint32_t DT4 = (16 << 0);  ///< BPR data4
    }

    /// DT5 Register bits
    namespace dt5_bits {
        constexpr uint32_t DT5 = (16 << 0);  ///< BPR data5
    }

    /// DT6 Register bits
    namespace dt6_bits {
        constexpr uint32_t DT6 = (16 << 0);  ///< BPR data6
    }

    /// DT7 Register bits
    namespace dt7_bits {
        constexpr uint32_t DT7 = (16 << 0);  ///< BPR data7
    }

    /// DT8 Register bits
    namespace dt8_bits {
        constexpr uint32_t DT8 = (16 << 0);  ///< BPR data8
    }

    /// DT9 Register bits
    namespace dt9_bits {
        constexpr uint32_t DT9 = (16 << 0);  ///< BPR data9
    }

    /// DT10 Register bits
    namespace dt10_bits {
        constexpr uint32_t DT10 = (16 << 0);  ///< BPR data10
    }

    /// DT11 Register bits
    namespace dt11_bits {
        constexpr uint32_t DT11 = (16 << 0);  ///< BPR data11
    }

    /// DT12 Register bits
    namespace dt12_bits {
        constexpr uint32_t DT12 = (16 << 0);  ///< BPR data12
    }

    /// DT13 Register bits
    namespace dt13_bits {
        constexpr uint32_t DT13 = (16 << 0);  ///< BPR data13
    }

    /// DT14 Register bits
    namespace dt14_bits {
        constexpr uint32_t DT14 = (16 << 0);  ///< BPR data14
    }

    /// DT15 Register bits
    namespace dt15_bits {
        constexpr uint32_t DT15 = (16 << 0);  ///< BPR data15
    }

    /// DT16 Register bits
    namespace dt16_bits {
        constexpr uint32_t DT16 = (16 << 0);  ///< BPR data16
    }

    /// DT17 Register bits
    namespace dt17_bits {
        constexpr uint32_t DT17 = (16 << 0);  ///< BPR data17
    }

    /// DT18 Register bits
    namespace dt18_bits {
        constexpr uint32_t DT18 = (16 << 0);  ///< BPR data18
    }

    /// DT19 Register bits
    namespace dt19_bits {
        constexpr uint32_t DT19 = (16 << 0);  ///< BPR data19
    }

    /// DT20 Register bits
    namespace dt20_bits {
        constexpr uint32_t DT20 = (16 << 0);  ///< BPR data20
    }

    /// DT21 Register bits
    namespace dt21_bits {
        constexpr uint32_t DT21 = (16 << 0);  ///< BPR data21
    }

    /// DT22 Register bits
    namespace dt22_bits {
        constexpr uint32_t DT22 = (16 << 0);  ///< BPR data22
    }

    /// DT23 Register bits
    namespace dt23_bits {
        constexpr uint32_t DT23 = (16 << 0);  ///< BPR data23
    }

    /// DT24 Register bits
    namespace dt24_bits {
        constexpr uint32_t DT24 = (16 << 0);  ///< BPR data24
    }

    /// DT25 Register bits
    namespace dt25_bits {
        constexpr uint32_t DT25 = (16 << 0);  ///< BPR data25
    }

    /// DT26 Register bits
    namespace dt26_bits {
        constexpr uint32_t DT26 = (16 << 0);  ///< BPR data26
    }

    /// DT27 Register bits
    namespace dt27_bits {
        constexpr uint32_t DT27 = (16 << 0);  ///< BPR data27
    }

    /// DT28 Register bits
    namespace dt28_bits {
        constexpr uint32_t DT28 = (16 << 0);  ///< BPR data28
    }

    /// DT29 Register bits
    namespace dt29_bits {
        constexpr uint32_t DT29 = (16 << 0);  ///< BPR data29
    }

    /// DT30 Register bits
    namespace dt30_bits {
        constexpr uint32_t DT30 = (16 << 0);  ///< BPR data30
    }

    /// DT31 Register bits
    namespace dt31_bits {
        constexpr uint32_t DT31 = (16 << 0);  ///< BPR data31
    }

    /// DT32 Register bits
    namespace dt32_bits {
        constexpr uint32_t DT32 = (16 << 0);  ///< BPR data32
    }

    /// DT33 Register bits
    namespace dt33_bits {
        constexpr uint32_t DT33 = (16 << 0);  ///< BPR data33
    }

    /// DT34 Register bits
    namespace dt34_bits {
        constexpr uint32_t DT34 = (16 << 0);  ///< BPR data34
    }

    /// DT35 Register bits
    namespace dt35_bits {
        constexpr uint32_t DT35 = (16 << 0);  ///< BPR data35
    }

    /// DT36 Register bits
    namespace dt36_bits {
        constexpr uint32_t DT36 = (16 << 0);  ///< BPR data36
    }

    /// DT37 Register bits
    namespace dt37_bits {
        constexpr uint32_t DT37 = (16 << 0);  ///< BPR data37
    }

    /// DT38 Register bits
    namespace dt38_bits {
        constexpr uint32_t DT38 = (16 << 0);  ///< BPR data38
    }

    /// DT39 Register bits
    namespace dt39_bits {
        constexpr uint32_t DT39 = (16 << 0);  ///< BPR data39
    }

    /// DT40 Register bits
    namespace dt40_bits {
        constexpr uint32_t DT40 = (16 << 0);  ///< BPR data40
    }

    /// DT41 Register bits
    namespace dt41_bits {
        constexpr uint32_t DT41 = (16 << 0);  ///< BPR data41
    }

    /// DT42 Register bits
    namespace dt42_bits {
        constexpr uint32_t DT42 = (16 << 0);  ///< BPR data42
    }

    /// RTCCAL Register bits
    namespace rtccal_bits {
        constexpr uint32_t CALVAL = (7 << 0);  ///< Calibration value
        constexpr uint32_t CALOUT = (1U << 7);  ///< Calibration Clock Output
        constexpr uint32_t OUTEN = (1U << 8);  ///< Output enable
        constexpr uint32_t OUTSEL = (1U << 9);  ///< Output selection
    }

    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t TPEN = (1U << 0);  ///< Tamper pin enable
        constexpr uint32_t TPP = (1U << 1);  ///< TAMPER pin polarity
    }

    /// CTRLSTS Register bits
    namespace ctrlsts_bits {
        constexpr uint32_t TPEFCLR = (1U << 0);  ///< Tamper event flag clear
        constexpr uint32_t TPIFCLR = (1U << 1);  ///< Tamper interrupt flag clear
        constexpr uint32_t TPIEN = (1U << 2);  ///< Tamper pin interrupt enable
        constexpr uint32_t TPEF = (1U << 8);  ///< Tamper event flag
        constexpr uint32_t TPIF = (1U << 9);  ///< Tamper interrupt flag
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WDT_BASE = 0x40003000;
    constexpr uint32_t WWDT_BASE = 0x40002C00;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t CMD;  ///< Offset: 0x00 - Command register
        volatile uint32_t DIV;  ///< Offset: 0x04 - Division register
        volatile uint32_t RLD;  ///< Offset: 0x08 - Reload register
        volatile uint32_t STS;  ///< Offset: 0x0C - Status register
    };

    /// Peripheral instances
    inline Registers* WDT = reinterpret_cast<Registers*>(WDT_BASE);
    inline Registers* WWDT = reinterpret_cast<Registers*>(WWDT_BASE);

    // Bit definitions
    /// CMD Register bits
    namespace cmd_bits {
        constexpr uint32_t CMD = (16 << 0);  ///< Command register
    }

    /// DIV Register bits
    namespace div_bits {
        constexpr uint32_t DIV = (3 << 0);  ///< Division divider
    }

    /// RLD Register bits
    namespace rld_bits {
        constexpr uint32_t RLD = (12 << 0);  ///< Reload value
    }

    /// STS Register bits
    namespace sts_bits {
        constexpr uint32_t DIVF = (1U << 0);  ///< Division value update complete flag
        constexpr uint32_t RLDF = (1U << 1);  ///< Reload value update complete flag
    }

}

// ============================================================================
// TMR1 Peripheral
// ============================================================================

namespace tmr1 {
    /// Base addresses
    constexpr uint32_t TMR1_BASE = 0x40012C00;

    /// TMR1 Register structure
    struct Registers {
        volatile uint32_t CTRL1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CTRL2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t STCTRL;  ///< Offset: 0x08 - Subordinate TMR control register
        volatile uint32_t IDEN;  ///< Offset: 0x0C - Interrupt/DMA enable register
        volatile uint32_t ISTS;  ///< Offset: 0x10 - Interrupt status register
        volatile uint32_t SWEVT;  ///< Offset: 0x14 - Software event register
        volatile uint32_t CM1_OUTPUT;  ///< Offset: 0x18 - Channel output mode register
        volatile uint32_t CM1_INPUT;  ///< Offset: 0x18 - Channel input mode register 1
        volatile uint32_t CM2_OUTPUT;  ///< Offset: 0x1C - Channel output mode register 2
        volatile uint32_t CM2_INPUT;  ///< Offset: 0x1C - Channel input mode register 2
        volatile uint32_t CCTRL;  ///< Offset: 0x20 - Channel control register
        volatile uint32_t CVAL;  ///< Offset: 0x24 - Counter value
        volatile uint32_t DIV;  ///< Offset: 0x28 - Divider value
        volatile uint32_t PR;  ///< Offset: 0x2C - Period value
        volatile uint32_t RPR;  ///< Offset: 0x30 - Repetition of period value
        volatile uint32_t C1DT;  ///< Offset: 0x34 - Channel 1 data register
        volatile uint32_t C2DT;  ///< Offset: 0x38 - Channel 2 data register
        volatile uint32_t C3DT;  ///< Offset: 0x3C - Channel 3 data register
        volatile uint32_t C4DT;  ///< Offset: 0x40 - Channel 4 data register
        volatile uint32_t BRK;  ///< Offset: 0x44 - Brake register
        volatile uint32_t DMACTRL;  ///< Offset: 0x48 - DMA control register
        volatile uint32_t DMADT;  ///< Offset: 0x4C - DMA data register
    };

    /// Peripheral instances
    inline Registers* TMR1 = reinterpret_cast<Registers*>(TMR1_BASE);

    // Bit definitions
    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t CLKDIV = (2 << 8);  ///< Clock divider
        constexpr uint32_t PRBEN = (1U << 7);  ///< Period buffer enable
        constexpr uint32_t TWCMSEL = (2 << 5);  ///< Two-way count mode selection
        constexpr uint32_t OWCDIR = (1U << 4);  ///< One-way count direction
        constexpr uint32_t OCMEN = (1U << 3);  ///< One cycle mode enable
        constexpr uint32_t OVFS = (1U << 2);  ///< Overflow event source
        constexpr uint32_t OVFEN = (1U << 1);  ///< Overflow event enable
        constexpr uint32_t TMREN = (1U << 0);  ///< TMR enable
    }

    /// CTRL2 Register bits
    namespace ctrl2_bits {
        constexpr uint32_t C4IOS = (1U << 14);  ///< Channel 4 idle output state
        constexpr uint32_t C3CIOS = (1U << 13);  ///< Channel 3 complementary idle output state
        constexpr uint32_t C3IOS = (1U << 12);  ///< Channel 3 idle output state
        constexpr uint32_t C2CIOS = (1U << 11);  ///< Channel 2 complementary idle output state
        constexpr uint32_t C2IOS = (1U << 10);  ///< Channel 2 idle output state
        constexpr uint32_t C1CIOS = (1U << 9);  ///< Channel 1 complementary idle output state
        constexpr uint32_t C1IOS = (1U << 8);  ///< Channel 1 idle output state
        constexpr uint32_t C1INSEL = (1U << 7);  ///< C1IN selection
        constexpr uint32_t PTOS = (3 << 4);  ///< Primary TMR output selection
        constexpr uint32_t DRS = (1U << 3);  ///< DMA request source
        constexpr uint32_t CCFS = (1U << 2);  ///< Channel control bit flash select
        constexpr uint32_t CBCTRL = (1U << 0);  ///< Channel buffer control
    }

    /// STCTRL Register bits
    namespace stctrl_bits {
        constexpr uint32_t ESP = (1U << 15);  ///< External signal polarity
        constexpr uint32_t ECMBEN = (1U << 14);  ///< External clock mode B enable
        constexpr uint32_t ESDIV = (2 << 12);  ///< External signal divider
        constexpr uint32_t ESF = (4 << 8);  ///< External signal filter
        constexpr uint32_t STS = (1U << 7);  ///< Subordinate TMR synchronization
        constexpr uint32_t STIS = (3 << 4);  ///< Subordinate TMR input selection
        constexpr uint32_t SMSEL = (3 << 0);  ///< Subordinate TMR mode selection
    }

    /// IDEN Register bits
    namespace iden_bits {
        constexpr uint32_t TDEN = (1U << 14);  ///< Trigger DMA request enable
        constexpr uint32_t HALLDE = (1U << 13);  ///< HALL DMA request enable
        constexpr uint32_t C4DEN = (1U << 12);  ///< Channel 4 DMA request enable
        constexpr uint32_t C3DEN = (1U << 11);  ///< Channel 3 DMA request enable
        constexpr uint32_t C2DEN = (1U << 10);  ///< Channel 2 DMA request enable
        constexpr uint32_t C1DEN = (1U << 9);  ///< Channel 1 DMA request enable
        constexpr uint32_t OVFDEN = (1U << 8);  ///< Overflow DMA request enable
        constexpr uint32_t BRKIE = (1U << 7);  ///< Brake interrupt enable
        constexpr uint32_t TIEN = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t HALLIEN = (1U << 5);  ///< HALL interrupt enable
        constexpr uint32_t C4IEN = (1U << 4);  ///< Channel 4 interrupt enable
        constexpr uint32_t C3IEN = (1U << 3);  ///< Channel 3 interrupt enable
        constexpr uint32_t C2IEN = (1U << 2);  ///< Channel 2 interrupt enable
        constexpr uint32_t C1IEN = (1U << 1);  ///< Channel 1 interrupt enable
        constexpr uint32_t OVFIEN = (1U << 0);  ///< Overflow interrupt enable
    }

    /// ISTS Register bits
    namespace ists_bits {
        constexpr uint32_t C4RF = (1U << 12);  ///< Channel 4 recapture flag
        constexpr uint32_t C3RF = (1U << 11);  ///< Channel 3 recapture flag
        constexpr uint32_t C2RF = (1U << 10);  ///< Channel 2 recapture flag
        constexpr uint32_t C1RF = (1U << 9);  ///< Channel 1 recapture flag
        constexpr uint32_t BRKIF = (1U << 7);  ///< Brake interrupt flag
        constexpr uint32_t TRGIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t HALLIF = (1U << 5);  ///< HALL interrupt flag
        constexpr uint32_t C4IF = (1U << 4);  ///< Channel 4 interrupt flag
        constexpr uint32_t C3IF = (1U << 3);  ///< Channel 3 interrupt flag
        constexpr uint32_t C2IF = (1U << 2);  ///< Channel 2 interrupt flag
        constexpr uint32_t C1IF = (1U << 1);  ///< Channel 1 interrupt flag
        constexpr uint32_t OVFIF = (1U << 0);  ///< Overflow interrupt flag
    }

    /// SWEVT Register bits
    namespace swevt_bits {
        constexpr uint32_t BRKSWTR = (1U << 7);  ///< Brake event triggered by software
        constexpr uint32_t TRGSWTR = (1U << 6);  ///< Trigger event triggered by software
        constexpr uint32_t HALLSWTR = (1U << 5);  ///< HALL event triggered by software
        constexpr uint32_t C4SWTR = (1U << 4);  ///< Channel 4 event triggered by software
        constexpr uint32_t C3SWTR = (1U << 3);  ///< Channel 3 event triggered by software
        constexpr uint32_t C2SWTR = (1U << 2);  ///< Channel 2 event triggered by software
        constexpr uint32_t C1SWTR = (1U << 1);  ///< Channel 1 event triggered by software
        constexpr uint32_t OVFSWTR = (1U << 0);  ///< Overflow event triggered by software
    }

    /// CM1_OUTPUT Register bits
    namespace cm1_output_bits {
        constexpr uint32_t C2OSEN = (1U << 15);  ///< Channel 2 output switch enable
        constexpr uint32_t C2OCTRL = (3 << 12);  ///< Channel 2 output control
        constexpr uint32_t C2OBEN = (1U << 11);  ///< Channel 2 output buffer enable
        constexpr uint32_t C2OIEN = (1U << 10);  ///< Channel 2 output immediately enable
        constexpr uint32_t C2C = (2 << 8);  ///< Channel 2 configure
        constexpr uint32_t C1OSEN = (1U << 7);  ///< Channel 1 output switch enable
        constexpr uint32_t C1OCTRL = (3 << 4);  ///< Channel 1 output control
        constexpr uint32_t C1OBEN = (1U << 3);  ///< Channel 1 output buffer enable
        constexpr uint32_t C1OIEN = (1U << 2);  ///< Channel 1 output immediately enable
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CM1_INPUT Register bits
    namespace cm1_input_bits {
        constexpr uint32_t C2DF = (4 << 12);  ///< Channel 2 digital filter
        constexpr uint32_t C2IDIV = (2 << 10);  ///< Channel 2 input divider
        constexpr uint32_t C2C = (2 << 8);  ///< Channel 2 configure
        constexpr uint32_t C1DF = (4 << 4);  ///< Channel 1 digital filter
        constexpr uint32_t C1IDIV = (2 << 2);  ///< Channel 1 input divider
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CM2_OUTPUT Register bits
    namespace cm2_output_bits {
        constexpr uint32_t C4OSEN = (1U << 15);  ///< Channel 4 output switch enable
        constexpr uint32_t C4OCTRL = (3 << 12);  ///< Channel 4 output control
        constexpr uint32_t C4OBEN = (1U << 11);  ///< Channel 4 output buffer enable
        constexpr uint32_t C4OIEN = (1U << 10);  ///< Channel 4 output immediately enable
        constexpr uint32_t C4C = (2 << 8);  ///< Channel 4 configure
        constexpr uint32_t C3OSEN = (1U << 7);  ///< Channel 3 output switch enable
        constexpr uint32_t C3OCTRL = (3 << 4);  ///< Channel 3 output control
        constexpr uint32_t C3OBEN = (1U << 3);  ///< Channel 3 output buffer enable
        constexpr uint32_t C3OIEN = (1U << 2);  ///< Channel 3 output immediately enable
        constexpr uint32_t C3C = (2 << 0);  ///< Channel 3 configure
    }

    /// CM2_INPUT Register bits
    namespace cm2_input_bits {
        constexpr uint32_t C4DF = (4 << 12);  ///< Channel 4 digital filter
        constexpr uint32_t C4IDIV = (2 << 10);  ///< Channel 4 input divider
        constexpr uint32_t C4C = (2 << 8);  ///< Channel 4 configure
        constexpr uint32_t C3DF = (4 << 4);  ///< Channel 3 digital filter
        constexpr uint32_t C3IDIV = (2 << 2);  ///< Channel 3 input divider
        constexpr uint32_t C3C = (2 << 0);  ///< Channel 3 configure
    }

    /// CCTRL Register bits
    namespace cctrl_bits {
        constexpr uint32_t C4P = (1U << 13);  ///< Channel 4 Polarity
        constexpr uint32_t C4EN = (1U << 12);  ///< Channel 4 enable
        constexpr uint32_t C3CP = (1U << 11);  ///< Channel 3 complementary polarity
        constexpr uint32_t C3CEN = (1U << 10);  ///< Channel 3 complementary enable
        constexpr uint32_t C3P = (1U << 9);  ///< Channel 3 Polarity
        constexpr uint32_t C3EN = (1U << 8);  ///< Channel 3 enable
        constexpr uint32_t C2CP = (1U << 7);  ///< Channel 2 complementary polarity
        constexpr uint32_t C2CEN = (1U << 6);  ///< Channel 2 complementary enable
        constexpr uint32_t C2P = (1U << 5);  ///< Channel 2 Polarity
        constexpr uint32_t C2EN = (1U << 4);  ///< Channel 2 enable
        constexpr uint32_t C1CP = (1U << 3);  ///< Channel 1 complementary polarity
        constexpr uint32_t C1CEN = (1U << 2);  ///< Channel 1 complementary enable
        constexpr uint32_t C1P = (1U << 1);  ///< Channel 1 Polarity
        constexpr uint32_t C1EN = (1U << 0);  ///< Channel 1 enable
    }

    /// CVAL Register bits
    namespace cval_bits {
        constexpr uint32_t CVAL = (16 << 0);  ///< Counter value
    }

    /// DIV Register bits
    namespace div_bits {
        constexpr uint32_t DIV = (16 << 0);  ///< Divider value
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (16 << 0);  ///< Period value
    }

    /// RPR Register bits
    namespace rpr_bits {
        constexpr uint32_t RPR = (8 << 0);  ///< Repetition of period value
    }

    /// C1DT Register bits
    namespace c1dt_bits {
        constexpr uint32_t C1DT = (16 << 0);  ///< Channel 1 data register
    }

    /// C2DT Register bits
    namespace c2dt_bits {
        constexpr uint32_t C2DT = (16 << 0);  ///< Channel 2 data register
    }

    /// C3DT Register bits
    namespace c3dt_bits {
        constexpr uint32_t C3DT = (16 << 0);  ///< Channel 3 data register
    }

    /// C4DT Register bits
    namespace c4dt_bits {
        constexpr uint32_t C4DT = (16 << 0);  ///< Channel 4 data register
    }

    /// BRK Register bits
    namespace brk_bits {
        constexpr uint32_t OEN = (1U << 15);  ///< Output enable
        constexpr uint32_t AOEN = (1U << 14);  ///< Automatic output enable
        constexpr uint32_t BRKV = (1U << 13);  ///< Brake input validity
        constexpr uint32_t BRKEN = (1U << 12);  ///< Brake enable
        constexpr uint32_t FCSOEN = (1U << 11);  ///< Frozen channel status when holistic output enable
        constexpr uint32_t FCSODIS = (1U << 10);  ///< Frozen channel status when holistic output disable
        constexpr uint32_t WPC = (2 << 8);  ///< Write protected configuration
        constexpr uint32_t DTC = (8 << 0);  ///< Dead-time configuration
    }

    /// DMACTRL Register bits
    namespace dmactrl_bits {
        constexpr uint32_t DTB = (5 << 8);  ///< DMA transfer bytes
        constexpr uint32_t ADDR = (5 << 0);  ///< DMA transfer address offset
    }

    /// DMADT Register bits
    namespace dmadt_bits {
        constexpr uint32_t DMADT = (16 << 0);  ///< DMA data register
    }

}

// ============================================================================
// TMR8 Peripheral
// ============================================================================

namespace tmr8 {
    /// Base addresses
    constexpr uint32_t TMR8_BASE = 0x40013400;

    /// TMR8 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TMR8 = reinterpret_cast<Registers*>(TMR8_BASE);

}

// ============================================================================
// TMR2 Peripheral
// ============================================================================

namespace tmr2 {
    /// Base addresses
    constexpr uint32_t TMR2_BASE = 0x40000000;

    /// TMR2 Register structure
    struct Registers {
        volatile uint32_t CTRL1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CTRL2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t STCTRL;  ///< Offset: 0x08 - Subordinate TMR control register
        volatile uint32_t IDEN;  ///< Offset: 0x0C - Interrupt/DMA enable register
        volatile uint32_t ISTS;  ///< Offset: 0x10 - Interrupt status register
        volatile uint32_t SWEVT;  ///< Offset: 0x14 - Software event register
        volatile uint32_t CM1_OUTPUT;  ///< Offset: 0x18 - Channel output mode register
        volatile uint32_t CM1_INPUT;  ///< Offset: 0x18 - Channel input mode register 1
        volatile uint32_t CM2_OUTPUT;  ///< Offset: 0x1C - Channel output mode register 2
        volatile uint32_t CM2_INPUT;  ///< Offset: 0x1C - Channel input mode register 2
        volatile uint32_t CCTRL;  ///< Offset: 0x20 - Channel control register
        volatile uint32_t CVAL;  ///< Offset: 0x24 - Counter value
        volatile uint32_t DIV;  ///< Offset: 0x28 - Divider value
        volatile uint32_t PR;  ///< Offset: 0x2C - Period value
        volatile uint32_t C1DT;  ///< Offset: 0x34 - Channel 1 data register
        volatile uint32_t C2DT;  ///< Offset: 0x38 - Channel 2 data register
        volatile uint32_t C3DT;  ///< Offset: 0x3C - Channel 3 data register
        volatile uint32_t C4DT;  ///< Offset: 0x40 - Channel 4 data register
        volatile uint32_t DMACTRL;  ///< Offset: 0x48 - DMA control register
        volatile uint32_t DMADT;  ///< Offset: 0x4C - DMA data register
    };

    /// Peripheral instances
    inline Registers* TMR2 = reinterpret_cast<Registers*>(TMR2_BASE);

    // Bit definitions
    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t PMEN = (1U << 10);  ///< Plus Mode Enable
        constexpr uint32_t CLKDIV = (2 << 8);  ///< Clock divider
        constexpr uint32_t PRBEN = (1U << 7);  ///< Period buffer enable
        constexpr uint32_t TWCMSEL = (2 << 5);  ///< Two-way count mode selection
        constexpr uint32_t OWCDIR = (1U << 4);  ///< One-way count direction
        constexpr uint32_t OCMEN = (1U << 3);  ///< One cycle mode enable
        constexpr uint32_t OVFS = (1U << 2);  ///< Overflow event source
        constexpr uint32_t OVFEN = (1U << 1);  ///< Overflow event enable
        constexpr uint32_t TMREN = (1U << 0);  ///< TMR enable
    }

    /// CTRL2 Register bits
    namespace ctrl2_bits {
        constexpr uint32_t C1INSEL = (1U << 7);  ///< C1IN selection
        constexpr uint32_t PTOS = (3 << 4);  ///< Primary TMR output selection
        constexpr uint32_t DRS = (1U << 3);  ///< DMA request source
    }

    /// STCTRL Register bits
    namespace stctrl_bits {
        constexpr uint32_t ESP = (1U << 15);  ///< External signal polarity
        constexpr uint32_t ECMBEN = (1U << 14);  ///< External clock mode B enable
        constexpr uint32_t ESDIV = (2 << 12);  ///< External signal divider
        constexpr uint32_t ESF = (4 << 8);  ///< External signal filter
        constexpr uint32_t STS = (1U << 7);  ///< Subordinate TMR synchronization
        constexpr uint32_t STIS = (3 << 4);  ///< Subordinate TMR input selection
        constexpr uint32_t SMSEL = (3 << 0);  ///< Subordinate TMR mode selection
    }

    /// IDEN Register bits
    namespace iden_bits {
        constexpr uint32_t TDEN = (1U << 14);  ///< Trigger DMA request enable
        constexpr uint32_t C4DEN = (1U << 12);  ///< Channel 4 DMA request enable
        constexpr uint32_t C3DEN = (1U << 11);  ///< Channel 3 DMA request enable
        constexpr uint32_t C2DEN = (1U << 10);  ///< Channel 2 DMA request enable
        constexpr uint32_t C1DEN = (1U << 9);  ///< Channel 1 DMA request enable
        constexpr uint32_t OVFDEN = (1U << 8);  ///< Overflow DMA request enable
        constexpr uint32_t TIEN = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t C4IEN = (1U << 4);  ///< Channel 4 interrupt enable
        constexpr uint32_t C3IEN = (1U << 3);  ///< Channel 3 interrupt enable
        constexpr uint32_t C2IEN = (1U << 2);  ///< Channel 2 interrupt enable
        constexpr uint32_t C1IEN = (1U << 1);  ///< Channel 1 interrupt enable
        constexpr uint32_t OVFIEN = (1U << 0);  ///< Overflow interrupt enable
    }

    /// ISTS Register bits
    namespace ists_bits {
        constexpr uint32_t C4RF = (1U << 12);  ///< Channel 4 recapture flag
        constexpr uint32_t C3RF = (1U << 11);  ///< Channel 3 recapture flag
        constexpr uint32_t C2RF = (1U << 10);  ///< Channel 2 recapture flag
        constexpr uint32_t C1RF = (1U << 9);  ///< Channel 1 recapture flag
        constexpr uint32_t TRGIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t C4IF = (1U << 4);  ///< Channel 4 interrupt flag
        constexpr uint32_t C3IF = (1U << 3);  ///< Channel 3 interrupt flag
        constexpr uint32_t C2IF = (1U << 2);  ///< Channel 2 interrupt flag
        constexpr uint32_t C1IF = (1U << 1);  ///< Channel 1 interrupt flag
        constexpr uint32_t OVFIF = (1U << 0);  ///< Overflow interrupt flag
    }

    /// SWEVT Register bits
    namespace swevt_bits {
        constexpr uint32_t TRGSWTR = (1U << 6);  ///< Trigger event triggered by software
        constexpr uint32_t C4SWTR = (1U << 4);  ///< Channel 4 event triggered by software
        constexpr uint32_t C3SWTR = (1U << 3);  ///< Channel 3 event triggered by software
        constexpr uint32_t C2SWTR = (1U << 2);  ///< Channel 2 event triggered by software
        constexpr uint32_t C1SWTR = (1U << 1);  ///< Channel 1 event triggered by software
        constexpr uint32_t OVFSWTR = (1U << 0);  ///< Overflow event triggered by software
    }

    /// CM1_OUTPUT Register bits
    namespace cm1_output_bits {
        constexpr uint32_t C2OSEN = (1U << 15);  ///< Channel 2 output switch enable
        constexpr uint32_t C2OCTRL = (3 << 12);  ///< Channel 2 output control
        constexpr uint32_t C2OBEN = (1U << 11);  ///< Channel 2 output buffer enable
        constexpr uint32_t C2OIEN = (1U << 10);  ///< Channel 2 output immediately enable
        constexpr uint32_t C2C = (2 << 8);  ///< Channel 2 configure
        constexpr uint32_t C1OSEN = (1U << 7);  ///< Channel 1 output switch enable
        constexpr uint32_t C1OCTRL = (3 << 4);  ///< Channel 1 output control
        constexpr uint32_t C1OBEN = (1U << 3);  ///< Channel 1 output buffer enable
        constexpr uint32_t C1OIEN = (1U << 2);  ///< Channel 1 output immediately enable
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CM1_INPUT Register bits
    namespace cm1_input_bits {
        constexpr uint32_t C2DF = (4 << 12);  ///< Channel 2 digital filter
        constexpr uint32_t C2IDIV = (2 << 10);  ///< Channel 2 input divider
        constexpr uint32_t C2C = (2 << 8);  ///< Channel 2 configure
        constexpr uint32_t C1DF = (4 << 4);  ///< Channel 1 digital filter
        constexpr uint32_t C1IDIV = (2 << 2);  ///< Channel 1 input divider
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CM2_OUTPUT Register bits
    namespace cm2_output_bits {
        constexpr uint32_t C4OSEN = (1U << 15);  ///< Channel 4 output switch enable
        constexpr uint32_t C4OCTRL = (3 << 12);  ///< Channel 4 output control
        constexpr uint32_t C4OBEN = (1U << 11);  ///< Channel 4 output buffer enable
        constexpr uint32_t C4OIEN = (1U << 10);  ///< Channel 4 output immediately enable
        constexpr uint32_t C4C = (2 << 8);  ///< Channel 4 configure
        constexpr uint32_t C3OSEN = (1U << 7);  ///< Channel 3 output switch enable
        constexpr uint32_t C3OCTRL = (3 << 4);  ///< Channel 3 output control
        constexpr uint32_t C3OBEN = (1U << 3);  ///< Channel 3 output buffer enable
        constexpr uint32_t C3OIEN = (1U << 2);  ///< Channel 3 output immediately enable
        constexpr uint32_t C3C = (2 << 0);  ///< Channel 3 configure
    }

    /// CM2_INPUT Register bits
    namespace cm2_input_bits {
        constexpr uint32_t C4DF = (4 << 12);  ///< Channel 4 digital filter
        constexpr uint32_t C4IDIV = (2 << 10);  ///< Channel 4 input divider
        constexpr uint32_t C4C = (2 << 8);  ///< Channel 4 configure
        constexpr uint32_t C3DF = (4 << 4);  ///< Channel 3 digital filter
        constexpr uint32_t C3IDIV = (2 << 2);  ///< Channel 3 input divider
        constexpr uint32_t C3C = (2 << 0);  ///< Channel 3 configure
    }

    /// CCTRL Register bits
    namespace cctrl_bits {
        constexpr uint32_t C4P = (1U << 13);  ///< Channel 4 Polarity
        constexpr uint32_t C4EN = (1U << 12);  ///< Channel 4 enable
        constexpr uint32_t C3P = (1U << 9);  ///< Channel 3 Polarity
        constexpr uint32_t C3EN = (1U << 8);  ///< Channel 3 enable
        constexpr uint32_t C2P = (1U << 5);  ///< Channel 2 Polarity
        constexpr uint32_t C2EN = (1U << 4);  ///< Channel 2 enable
        constexpr uint32_t C1P = (1U << 1);  ///< Channel 1 Polarity
        constexpr uint32_t C1EN = (1U << 0);  ///< Channel 1 enable
    }

    /// CVAL Register bits
    namespace cval_bits {
        constexpr uint32_t CVAL = (32 << 0);  ///< Counter value
    }

    /// DIV Register bits
    namespace div_bits {
        constexpr uint32_t DIV = (16 << 0);  ///< Divider value
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (32 << 0);  ///< Period value
    }

    /// C1DT Register bits
    namespace c1dt_bits {
        constexpr uint32_t C1DT = (32 << 0);  ///< Channel 1 data register
    }

    /// C2DT Register bits
    namespace c2dt_bits {
        constexpr uint32_t C2DT = (32 << 0);  ///< Channel 2 data register
    }

    /// C3DT Register bits
    namespace c3dt_bits {
        constexpr uint32_t C3DT = (32 << 0);  ///< Channel 3 data register
    }

    /// C4DT Register bits
    namespace c4dt_bits {
        constexpr uint32_t C4DT = (32 << 0);  ///< Channel 4 data register
    }

    /// DMACTRL Register bits
    namespace dmactrl_bits {
        constexpr uint32_t DTB = (5 << 8);  ///< DMA transfer bytes
        constexpr uint32_t ADDR = (5 << 0);  ///< DMA transfer address offset
    }

    /// DMADT Register bits
    namespace dmadt_bits {
        constexpr uint32_t DMADT = (16 << 0);  ///< DMA data register
    }

}

// ============================================================================
// TMR3 Peripheral
// ============================================================================

namespace tmr3 {
    /// Base addresses
    constexpr uint32_t TMR3_BASE = 0x40000400;

    /// TMR3 Register structure
    struct Registers {
        volatile uint32_t CTRL1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CTRL2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t STCTRL;  ///< Offset: 0x08 - Subordinate TMR control register
        volatile uint32_t IDEN;  ///< Offset: 0x0C - Interrupt/DMA enable register
        volatile uint32_t ISTS;  ///< Offset: 0x10 - Interrupt status register
        volatile uint32_t SWEVT;  ///< Offset: 0x14 - Software event register
        volatile uint32_t CM1_OUTPUT;  ///< Offset: 0x18 - Channel output mode register
        volatile uint32_t CM1_INPUT;  ///< Offset: 0x18 - Channel input mode register 1
        volatile uint32_t CM2_OUTPUT;  ///< Offset: 0x1C - Channel output mode register 2
        volatile uint32_t CM2_INPUT;  ///< Offset: 0x1C - Channel input mode register 2
        volatile uint32_t CCTRL;  ///< Offset: 0x20 - Channel control register
        volatile uint32_t CVAL;  ///< Offset: 0x24 - Counter value
        volatile uint32_t DIV;  ///< Offset: 0x28 - Divider value
        volatile uint32_t PR;  ///< Offset: 0x2C - Period value
        volatile uint32_t C1DT;  ///< Offset: 0x34 - Channel 1 data register
        volatile uint32_t C2DT;  ///< Offset: 0x38 - Channel 2 data register
        volatile uint32_t C3DT;  ///< Offset: 0x3C - Channel 3 data register
        volatile uint32_t C4DT;  ///< Offset: 0x40 - Channel 4 data register
        volatile uint32_t DMACTRL;  ///< Offset: 0x48 - DMA control register
        volatile uint32_t DMADT;  ///< Offset: 0x4C - DMA data register
    };

    /// Peripheral instances
    inline Registers* TMR3 = reinterpret_cast<Registers*>(TMR3_BASE);

    // Bit definitions
    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t CLKDIV = (2 << 8);  ///< Clock divider
        constexpr uint32_t PRBEN = (1U << 7);  ///< Period buffer enable
        constexpr uint32_t TWCMSEL = (2 << 5);  ///< Two-way count mode selection
        constexpr uint32_t OWCDIR = (1U << 4);  ///< One-way count direction
        constexpr uint32_t OCMEN = (1U << 3);  ///< One cycle mode enable
        constexpr uint32_t OVFS = (1U << 2);  ///< Overflow event source
        constexpr uint32_t OVFEN = (1U << 1);  ///< Overflow event enable
        constexpr uint32_t TMREN = (1U << 0);  ///< TMR enable
    }

    /// CTRL2 Register bits
    namespace ctrl2_bits {
        constexpr uint32_t C1INSEL = (1U << 7);  ///< C1IN selection
        constexpr uint32_t PTOS = (3 << 4);  ///< Primary TMR output selection
        constexpr uint32_t DRS = (1U << 3);  ///< DMA request source
    }

    /// STCTRL Register bits
    namespace stctrl_bits {
        constexpr uint32_t ESP = (1U << 15);  ///< External signal polarity
        constexpr uint32_t ECMBEN = (1U << 14);  ///< External clock mode B enable
        constexpr uint32_t ESDIV = (2 << 12);  ///< External signal divider
        constexpr uint32_t ESF = (4 << 8);  ///< External signal filter
        constexpr uint32_t STS = (1U << 7);  ///< Subordinate TMR synchronization
        constexpr uint32_t STIS = (3 << 4);  ///< Subordinate TMR input selection
        constexpr uint32_t SMSEL = (3 << 0);  ///< Subordinate TMR mode selection
    }

    /// IDEN Register bits
    namespace iden_bits {
        constexpr uint32_t TDEN = (1U << 14);  ///< Trigger DMA request enable
        constexpr uint32_t C4DEN = (1U << 12);  ///< Channel 4 DMA request enable
        constexpr uint32_t C3DEN = (1U << 11);  ///< Channel 3 DMA request enable
        constexpr uint32_t C2DEN = (1U << 10);  ///< Channel 2 DMA request enable
        constexpr uint32_t C1DEN = (1U << 9);  ///< Channel 1 DMA request enable
        constexpr uint32_t OVFDEN = (1U << 8);  ///< Overflow DMA request enable
        constexpr uint32_t TIEN = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t C4IEN = (1U << 4);  ///< Channel 4 interrupt enable
        constexpr uint32_t C3IEN = (1U << 3);  ///< Channel 3 interrupt enable
        constexpr uint32_t C2IEN = (1U << 2);  ///< Channel 2 interrupt enable
        constexpr uint32_t C1IEN = (1U << 1);  ///< Channel 1 interrupt enable
        constexpr uint32_t OVFIEN = (1U << 0);  ///< Overflow interrupt enable
    }

    /// ISTS Register bits
    namespace ists_bits {
        constexpr uint32_t C4RF = (1U << 12);  ///< Channel 4 recapture flag
        constexpr uint32_t C3RF = (1U << 11);  ///< Channel 3 recapture flag
        constexpr uint32_t C2RF = (1U << 10);  ///< Channel 2 recapture flag
        constexpr uint32_t C1RF = (1U << 9);  ///< Channel 1 recapture flag
        constexpr uint32_t TRGIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t C4IF = (1U << 4);  ///< Channel 4 interrupt flag
        constexpr uint32_t C3IF = (1U << 3);  ///< Channel 3 interrupt flag
        constexpr uint32_t C2IF = (1U << 2);  ///< Channel 2 interrupt flag
        constexpr uint32_t C1IF = (1U << 1);  ///< Channel 1 interrupt flag
        constexpr uint32_t OVFIF = (1U << 0);  ///< Overflow interrupt flag
    }

    /// SWEVT Register bits
    namespace swevt_bits {
        constexpr uint32_t TRGSWTR = (1U << 6);  ///< Trigger event triggered by software
        constexpr uint32_t C4SWTR = (1U << 4);  ///< Channel 4 event triggered by software
        constexpr uint32_t C3SWTR = (1U << 3);  ///< Channel 3 event triggered by software
        constexpr uint32_t C2SWTR = (1U << 2);  ///< Channel 2 event triggered by software
        constexpr uint32_t C1SWTR = (1U << 1);  ///< Channel 1 event triggered by software
        constexpr uint32_t OVFSWTR = (1U << 0);  ///< Overflow event triggered by software
    }

    /// CM1_OUTPUT Register bits
    namespace cm1_output_bits {
        constexpr uint32_t C2OSEN = (1U << 15);  ///< Channel 2 output switch enable
        constexpr uint32_t C2OCTRL = (3 << 12);  ///< Channel 2 output control
        constexpr uint32_t C2OBEN = (1U << 11);  ///< Channel 2 output buffer enable
        constexpr uint32_t C2OIEN = (1U << 10);  ///< Channel 2 output immediately enable
        constexpr uint32_t C2C = (2 << 8);  ///< Channel 2 configure
        constexpr uint32_t C1OSEN = (1U << 7);  ///< Channel 1 output switch enable
        constexpr uint32_t C1OCTRL = (3 << 4);  ///< Channel 1 output control
        constexpr uint32_t C1OBEN = (1U << 3);  ///< Channel 1 output buffer enable
        constexpr uint32_t C1OIEN = (1U << 2);  ///< Channel 1 output immediately enable
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CM1_INPUT Register bits
    namespace cm1_input_bits {
        constexpr uint32_t C2DF = (4 << 12);  ///< Channel 2 digital filter
        constexpr uint32_t C2IDIV = (2 << 10);  ///< Channel 2 input divider
        constexpr uint32_t C2C = (2 << 8);  ///< Channel 2 configure
        constexpr uint32_t C1DF = (4 << 4);  ///< Channel 1 digital filter
        constexpr uint32_t C1IDIV = (2 << 2);  ///< Channel 1 input divider
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CM2_OUTPUT Register bits
    namespace cm2_output_bits {
        constexpr uint32_t C4OSEN = (1U << 15);  ///< Channel 4 output switch enable
        constexpr uint32_t C4OCTRL = (3 << 12);  ///< Channel 4 output control
        constexpr uint32_t C4OBEN = (1U << 11);  ///< Channel 4 output buffer enable
        constexpr uint32_t C4OIEN = (1U << 10);  ///< Channel 4 output immediately enable
        constexpr uint32_t C4C = (2 << 8);  ///< Channel 4 configure
        constexpr uint32_t C3OSEN = (1U << 7);  ///< Channel 3 output switch enable
        constexpr uint32_t C3OCTRL = (3 << 4);  ///< Channel 3 output control
        constexpr uint32_t C3OBEN = (1U << 3);  ///< Channel 3 output buffer enable
        constexpr uint32_t C3OIEN = (1U << 2);  ///< Channel 3 output immediately enable
        constexpr uint32_t C3C = (2 << 0);  ///< Channel 3 configure
    }

    /// CM2_INPUT Register bits
    namespace cm2_input_bits {
        constexpr uint32_t C4DF = (4 << 12);  ///< Channel 4 digital filter
        constexpr uint32_t C4IDIV = (2 << 10);  ///< Channel 4 input divider
        constexpr uint32_t C4C = (2 << 8);  ///< Channel 4 configure
        constexpr uint32_t C3DF = (4 << 4);  ///< Channel 3 digital filter
        constexpr uint32_t C3IDIV = (2 << 2);  ///< Channel 3 input divider
        constexpr uint32_t C3C = (2 << 0);  ///< Channel 3 configure
    }

    /// CCTRL Register bits
    namespace cctrl_bits {
        constexpr uint32_t C4P = (1U << 13);  ///< Channel 4 Polarity
        constexpr uint32_t C4EN = (1U << 12);  ///< Channel 4 enable
        constexpr uint32_t C3P = (1U << 9);  ///< Channel 3 Polarity
        constexpr uint32_t C3EN = (1U << 8);  ///< Channel 3 enable
        constexpr uint32_t C2P = (1U << 5);  ///< Channel 2 Polarity
        constexpr uint32_t C2EN = (1U << 4);  ///< Channel 2 enable
        constexpr uint32_t C1P = (1U << 1);  ///< Channel 1 Polarity
        constexpr uint32_t C1EN = (1U << 0);  ///< Channel 1 enable
    }

    /// CVAL Register bits
    namespace cval_bits {
        constexpr uint32_t CVAL = (16 << 0);  ///< Counter value
    }

    /// DIV Register bits
    namespace div_bits {
        constexpr uint32_t DIV = (16 << 0);  ///< Divider value
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (16 << 0);  ///< Period value
    }

    /// C1DT Register bits
    namespace c1dt_bits {
        constexpr uint32_t C1DT = (16 << 0);  ///< Channel 1 data register
    }

    /// C2DT Register bits
    namespace c2dt_bits {
        constexpr uint32_t C2DT = (16 << 0);  ///< Channel 2 data register
    }

    /// C3DT Register bits
    namespace c3dt_bits {
        constexpr uint32_t C3DT = (16 << 0);  ///< Channel 3 data register
    }

    /// C4DT Register bits
    namespace c4dt_bits {
        constexpr uint32_t C4DT = (16 << 0);  ///< Channel 4 data register
    }

    /// DMACTRL Register bits
    namespace dmactrl_bits {
        constexpr uint32_t DTB = (5 << 8);  ///< DMA transfer bytes
        constexpr uint32_t ADDR = (5 << 0);  ///< DMA transfer address offset
    }

    /// DMADT Register bits
    namespace dmadt_bits {
        constexpr uint32_t DMADT = (16 << 0);  ///< DMA data register
    }

}

// ============================================================================
// TMR4 Peripheral
// ============================================================================

namespace tmr4 {
    /// Base addresses
    constexpr uint32_t TMR4_BASE = 0x40000800;

    /// TMR4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TMR4 = reinterpret_cast<Registers*>(TMR4_BASE);

}

// ============================================================================
// TMR5 Peripheral
// ============================================================================

namespace tmr5 {
    /// Base addresses
    constexpr uint32_t TMR5_BASE = 0x40000C00;

    /// TMR5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TMR5 = reinterpret_cast<Registers*>(TMR5_BASE);

}

// ============================================================================
// TMR9 Peripheral
// ============================================================================

namespace tmr9 {
    /// Base addresses
    constexpr uint32_t TMR9_BASE = 0x40014C00;

    /// TMR9 Register structure
    struct Registers {
        volatile uint32_t CTRL1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t STCTRL;  ///< Offset: 0x08 - Subordinate TMR control register
        volatile uint32_t IDEN;  ///< Offset: 0x0C - Interrupt/DMA enable register
        volatile uint32_t ISTS;  ///< Offset: 0x10 - Interrupt status register
        volatile uint32_t SWEVT;  ///< Offset: 0x14 - Software event register
        volatile uint32_t CM1_OUTPUT;  ///< Offset: 0x18 - Channel output mode register
        volatile uint32_t CM1_INPUT;  ///< Offset: 0x18 - Channel input mode register 1
        volatile uint32_t CCTRL;  ///< Offset: 0x20 - Channel control register
        volatile uint32_t CVAL;  ///< Offset: 0x24 - Counter value
        volatile uint32_t DIV;  ///< Offset: 0x28 - Divider value
        volatile uint32_t PR;  ///< Offset: 0x2C - Period value
        volatile uint32_t C1DT;  ///< Offset: 0x34 - Channel 1 data register
        volatile uint32_t C2DT;  ///< Offset: 0x38 - Channel 2 data register
    };

    /// Peripheral instances
    inline Registers* TMR9 = reinterpret_cast<Registers*>(TMR9_BASE);

    // Bit definitions
    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t CLKDIV = (2 << 8);  ///< Clock divider
        constexpr uint32_t PRBEN = (1U << 7);  ///< Period buffer enable
        constexpr uint32_t OCMEN = (1U << 3);  ///< One cycle mode enable
        constexpr uint32_t OVFS = (1U << 2);  ///< Overflow event source
        constexpr uint32_t OVFEN = (1U << 1);  ///< Overflow event enable
        constexpr uint32_t TMREN = (1U << 0);  ///< TMR enable
    }

    /// STCTRL Register bits
    namespace stctrl_bits {
        constexpr uint32_t STIS = (3 << 4);  ///< Subordinate TMR input selection
        constexpr uint32_t SMSEL = (3 << 0);  ///< Subordinate TMR mode selection
    }

    /// IDEN Register bits
    namespace iden_bits {
        constexpr uint32_t TIEN = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t C2IEN = (1U << 2);  ///< Channel 2 interrupt enable
        constexpr uint32_t C1IEN = (1U << 1);  ///< Channel 1 interrupt enable
        constexpr uint32_t OVFIEN = (1U << 0);  ///< Overflow interrupt enable
    }

    /// ISTS Register bits
    namespace ists_bits {
        constexpr uint32_t C2RF = (1U << 10);  ///< Channel 2 recapture flag
        constexpr uint32_t C1RF = (1U << 9);  ///< Channel 1 recapture flag
        constexpr uint32_t TRGIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t C2IF = (1U << 2);  ///< Channel 2 interrupt flag
        constexpr uint32_t C1IF = (1U << 1);  ///< Channel 1 interrupt flag
        constexpr uint32_t OVFIF = (1U << 0);  ///< Overflow interrupt flag
    }

    /// SWEVT Register bits
    namespace swevt_bits {
        constexpr uint32_t TRGSWTR = (1U << 6);  ///< Trigger event triggered by software
        constexpr uint32_t C2SWTR = (1U << 2);  ///< Channel 2 event triggered by software
        constexpr uint32_t C1SWTR = (1U << 1);  ///< Channel 1 event triggered by software
        constexpr uint32_t OVFSWTR = (1U << 0);  ///< Overflow event triggered by software
    }

    /// CM1_OUTPUT Register bits
    namespace cm1_output_bits {
        constexpr uint32_t C2OCTRL = (3 << 12);  ///< Channel 2 output control
        constexpr uint32_t C2OBEN = (1U << 11);  ///< Channel 2 output buffer enable
        constexpr uint32_t C2OIEN = (1U << 10);  ///< Channel 2 output immediately enable
        constexpr uint32_t C2C = (2 << 8);  ///< Channel 2 configure
        constexpr uint32_t C1OCTRL = (3 << 4);  ///< Channel 1 output control
        constexpr uint32_t C1OBEN = (1U << 3);  ///< Channel 1 output buffer enable
        constexpr uint32_t C1OIEN = (1U << 2);  ///< Channel 1 output immediately enable
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CM1_INPUT Register bits
    namespace cm1_input_bits {
        constexpr uint32_t C2DF = (4 << 12);  ///< Channel 2 digital filter
        constexpr uint32_t C2IDIV = (2 << 10);  ///< Channel 2 input divider
        constexpr uint32_t C2C = (2 << 8);  ///< Channel 2 configure
        constexpr uint32_t C1DF = (4 << 4);  ///< Channel 1 digital filter
        constexpr uint32_t C1IDIV = (2 << 2);  ///< Channel 1 input divider
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CCTRL Register bits
    namespace cctrl_bits {
        constexpr uint32_t C2CP = (1U << 7);  ///< Channel 2 complementary polarity
        constexpr uint32_t C2CEN = (1U << 6);  ///< Channel 2 complementary enable
        constexpr uint32_t C2P = (1U << 5);  ///< Channel 2 Polarity
        constexpr uint32_t C2EN = (1U << 4);  ///< Channel 2 enable
        constexpr uint32_t C1CP = (1U << 3);  ///< Channel 1 complementary polarity
        constexpr uint32_t C1CEN = (1U << 2);  ///< Channel 1 complementary enable
        constexpr uint32_t C1P = (1U << 1);  ///< Channel 1 Polarity
        constexpr uint32_t C1EN = (1U << 0);  ///< Channel 1 enable
    }

    /// CVAL Register bits
    namespace cval_bits {
        constexpr uint32_t CVAL = (16 << 0);  ///< Counter value
    }

    /// DIV Register bits
    namespace div_bits {
        constexpr uint32_t DIV = (16 << 0);  ///< Divider value
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (16 << 0);  ///< Period value
    }

    /// C1DT Register bits
    namespace c1dt_bits {
        constexpr uint32_t C1DT = (16 << 0);  ///< Channel 1 data register
    }

    /// C2DT Register bits
    namespace c2dt_bits {
        constexpr uint32_t C2DT = (16 << 0);  ///< Channel 2 data register
    }

}

// ============================================================================
// TMR10 Peripheral
// ============================================================================

namespace tmr10 {
    /// Base addresses
    constexpr uint32_t TMR10_BASE = 0x40015000;

    /// TMR10 Register structure
    struct Registers {
        volatile uint32_t CTRL1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t IDEN;  ///< Offset: 0x0C - Interrupt/DMA enable register
        volatile uint32_t ISTS;  ///< Offset: 0x10 - Interrupt status register
        volatile uint32_t SWEVT;  ///< Offset: 0x14 - Software event register
        volatile uint32_t CM1_OUTPUT;  ///< Offset: 0x18 - Channel output mode register
        volatile uint32_t CM1_INPUT;  ///< Offset: 0x18 - Channel input mode register 1
        volatile uint32_t CCTRL;  ///< Offset: 0x20 - Channel control register
        volatile uint32_t CVAL;  ///< Offset: 0x24 - Counter value
        volatile uint32_t DIV;  ///< Offset: 0x28 - Divider value
        volatile uint32_t PR;  ///< Offset: 0x2C - Period value
        volatile uint32_t C1DT;  ///< Offset: 0x34 - Channel 1 data register
    };

    /// Peripheral instances
    inline Registers* TMR10 = reinterpret_cast<Registers*>(TMR10_BASE);

    // Bit definitions
    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t CLKDIV = (2 << 8);  ///< Clock divider
        constexpr uint32_t PRBEN = (1U << 7);  ///< Period buffer enable
        constexpr uint32_t OCMEN = (1U << 3);  ///< One cycle mode enable
        constexpr uint32_t OVFS = (1U << 2);  ///< Overflow event source
        constexpr uint32_t OVFEN = (1U << 1);  ///< Overflow event enable
        constexpr uint32_t TMREN = (1U << 0);  ///< TMR enable
    }

    /// IDEN Register bits
    namespace iden_bits {
        constexpr uint32_t C1IEN = (1U << 1);  ///< Channel 1 interrupt enable
        constexpr uint32_t OVFIEN = (1U << 0);  ///< Overflow interrupt enable
    }

    /// ISTS Register bits
    namespace ists_bits {
        constexpr uint32_t C1RF = (1U << 9);  ///< Channel 1 recapture flag
        constexpr uint32_t C1IF = (1U << 1);  ///< Channel 1 interrupt flag
        constexpr uint32_t OVFIF = (1U << 0);  ///< Overflow interrupt flag
    }

    /// SWEVT Register bits
    namespace swevt_bits {
        constexpr uint32_t C1SWTR = (1U << 1);  ///< Channel 1 event triggered by software
        constexpr uint32_t OVFSWTR = (1U << 0);  ///< Overflow event triggered by software
    }

    /// CM1_OUTPUT Register bits
    namespace cm1_output_bits {
        constexpr uint32_t C1OCTRL = (3 << 4);  ///< Channel 1 output control
        constexpr uint32_t C1OBEN = (1U << 3);  ///< Channel 1 output buffer enable
        constexpr uint32_t C1OIEN = (1U << 2);  ///< Channel 1 output immediately enable
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CM1_INPUT Register bits
    namespace cm1_input_bits {
        constexpr uint32_t C1DF = (4 << 4);  ///< Channel 1 digital filter
        constexpr uint32_t C1IDIV = (2 << 2);  ///< Channel 1 input divider
        constexpr uint32_t C1C = (2 << 0);  ///< Channel 1 configure
    }

    /// CCTRL Register bits
    namespace cctrl_bits {
        constexpr uint32_t C1CP = (1U << 3);  ///< Channel 1 complementary polarity
        constexpr uint32_t C1P = (1U << 1);  ///< Channel 1 Polarity
        constexpr uint32_t C1EN = (1U << 0);  ///< Channel 1 enable
    }

    /// CVAL Register bits
    namespace cval_bits {
        constexpr uint32_t CVAL = (16 << 0);  ///< Counter value
    }

    /// DIV Register bits
    namespace div_bits {
        constexpr uint32_t DIV = (16 << 0);  ///< Divider value
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (16 << 0);  ///< Period value
    }

    /// C1DT Register bits
    namespace c1dt_bits {
        constexpr uint32_t C1DT = (16 << 0);  ///< Channel 1 data register
    }

}

// ============================================================================
// TMR11 Peripheral
// ============================================================================

namespace tmr11 {
    /// Base addresses
    constexpr uint32_t TMR11_BASE = 0x40015400;

    /// TMR11 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TMR11 = reinterpret_cast<Registers*>(TMR11_BASE);

}

// ============================================================================
// ACC Peripheral
// ============================================================================

namespace acc {
    /// Base addresses
    constexpr uint32_t ACC_BASE = 0x40015800;

    /// ACC Register structure
    struct Registers {
        volatile uint32_t STS;  ///< Offset: 0x00 - status register
        volatile uint32_t CTRL1;  ///< Offset: 0x04 - control register 1
        volatile uint32_t CTRL2;  ///< Offset: 0x08 - control register 2
        volatile uint32_t C1;  ///< Offset: 0x0C - compare value 1
        volatile uint32_t C2;  ///< Offset: 0x10 - compare value 2
        volatile uint32_t C3;  ///< Offset: 0x14 - compare value 3
    };

    /// Peripheral instances
    inline Registers* ACC = reinterpret_cast<Registers*>(ACC_BASE);

    // Bit definitions
    /// STS Register bits
    namespace sts_bits {
        constexpr uint32_t RSLOST = (1U << 1);  ///< Reference Signal Lost
        constexpr uint32_t CALRDY = (1U << 0);  ///< Internal high-speed clock calibration ready
    }

    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t STEP = (4 << 8);  ///< STEP
        constexpr uint32_t CALRDYIEN = (1U << 5);  ///< CALRDY interrupt enable
        constexpr uint32_t EIEN = (1U << 4);  ///< RSLOST error interrupt enable
        constexpr uint32_t ENTRIM = (1U << 1);  ///< Enable trim
        constexpr uint32_t CALON = (1U << 0);  ///< Calibration on
    }

    /// CTRL2 Register bits
    namespace ctrl2_bits {
        constexpr uint32_t HICKTWK = (6 << 8);  ///< Internal high-speed auto clock trimming
        constexpr uint32_t HICKCAL = (8 << 0);  ///< Internal high-speed auto clock calibration
    }

    /// C1 Register bits
    namespace c1_bits {
        constexpr uint32_t C1 = (16 << 0);  ///< Compare 1
    }

    /// C2 Register bits
    namespace c2_bits {
        constexpr uint32_t C2 = (16 << 0);  ///< Compare 2
    }

    /// C3 Register bits
    namespace c3_bits {
        constexpr uint32_t C3 = (16 << 0);  ///< Compare 3
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C1_BASE = 0x40005400;
    constexpr uint32_t I2C2_BASE = 0x40005800;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CTRL1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CTRL2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t OADDR1;  ///< Offset: 0x08 - Own address register 1
        volatile uint32_t OADDR2;  ///< Offset: 0x0C - Own address register 2
        volatile uint32_t DT;  ///< Offset: 0x10 - Data register
        volatile uint32_t STS1;  ///< Offset: 0x14 - Status register 1
        volatile uint32_t STS2;  ///< Offset: 0x18 - Status register 2
        volatile uint32_t CLKCTRL;  ///< Offset: 0x1C - Clock control register
        volatile uint32_t TMRISE;  ///< Offset: 0x20 - TRISE register
    };

    /// Peripheral instances
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);
    inline Registers* I2C2 = reinterpret_cast<Registers*>(I2C2_BASE);

    // Bit definitions
    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t RESET = (1U << 15);  ///< I2C peripheral reset
        constexpr uint32_t SMBALERT = (1U << 13);  ///< SMBus alert pin set
        constexpr uint32_t PECTEN = (1U << 12);  ///< Request PEC transmission enable
        constexpr uint32_t MACKCTRL = (1U << 11);  ///< Master receiving mode acknowledge control
        constexpr uint32_t ACKEN = (1U << 10);  ///< Acknowledge enable
        constexpr uint32_t GENSTOP = (1U << 9);  ///< Stop generation
        constexpr uint32_t GENSTART = (1U << 8);  ///< Start generation
        constexpr uint32_t STRETCH = (1U << 7);  ///< Clock stretching mode
        constexpr uint32_t GCAEN = (1U << 6);  ///< General call address enable
        constexpr uint32_t PECEN = (1U << 5);  ///< PEC calculation enable
        constexpr uint32_t ARPEN = (1U << 4);  ///< SMBus address resolution protocol enable
        constexpr uint32_t SMBMODE = (1U << 3);  ///< SMBus device mode
        constexpr uint32_t PERMODE = (1U << 1);  ///< I2C peripheral mode
        constexpr uint32_t I2CEN = (1U << 0);  ///< Peripheral enable
    }

    /// CTRL2 Register bits
    namespace ctrl2_bits {
        constexpr uint32_t DMAEND = (1U << 12);  ///< DMA transfer end indication
        constexpr uint32_t DMAEN = (1U << 11);  ///< DMA transfer enable
        constexpr uint32_t DATAIEN = (1U << 10);  ///< Data transmission interrupt enable
        constexpr uint32_t EVTIEN = (1U << 9);  ///< Event interrupt enable
        constexpr uint32_t ERRIEN = (1U << 8);  ///< Error interrupt enable
        constexpr uint32_t CLKFREQ = (8 << 0);  ///< Input clock frequency
    }

    /// OADDR1 Register bits
    namespace oaddr1_bits {
        constexpr uint32_t ADDR1MODE = (1U << 15);  ///< Address mode
        constexpr uint32_t ADDR1 = (10 << 0);  ///< Own address 1
    }

    /// OADDR2 Register bits
    namespace oaddr2_bits {
        constexpr uint32_t ADDR2 = (7 << 1);  ///< Own address 2
        constexpr uint32_t ADDR2EN = (1U << 0);  ///< Own address 2 enable
    }

    /// DT Register bits
    namespace dt_bits {
        constexpr uint32_t DT = (8 << 0);  ///< data register
    }

    /// STS1 Register bits
    namespace sts1_bits {
        constexpr uint32_t ALERTF = (1U << 15);  ///< SMBus alert
        constexpr uint32_t TMOUT = (1U << 14);  ///< Timeout error
        constexpr uint32_t PECERR = (1U << 12);  ///< PEC receive error
        constexpr uint32_t OUF = (1U << 11);  ///< Overflow or underflow
        constexpr uint32_t ACKFAIL = (1U << 10);  ///< Acknowledge failure
        constexpr uint32_t ARLOST = (1U << 9);  ///< Arbitration lost (master mode)
        constexpr uint32_t BUSERR = (1U << 8);  ///< Bus error
        constexpr uint32_t TDBE = (1U << 7);  ///< Transmit data buffer empty (transmitters)
        constexpr uint32_t RDBF = (1U << 6);  ///< Receive data buffer full (receivers)
        constexpr uint32_t STOPF = (1U << 4);  ///< Stop detection (slave mode)
        constexpr uint32_t ADDRHF = (1U << 3);  ///< address header match (Master mode)
        constexpr uint32_t TDC = (1U << 2);  ///< Transmit data complete
        constexpr uint32_t ADDR7F = (1U << 1);  ///< Address sent (master mode)/matched (slave mode)
        constexpr uint32_t STARTF = (1U << 0);  ///< Start bit (Master mode)
    }

    /// STS2 Register bits
    namespace sts2_bits {
        constexpr uint32_t PECVAL = (8 << 8);  ///< PEC value
        constexpr uint32_t ADDR2F = (1U << 7);  ///< Received address 2
        constexpr uint32_t HOSTADDRF = (1U << 6);  ///< SMBus host address receiving
        constexpr uint32_t DEVADDRF = (1U << 5);  ///< SMBus device address receiving
        constexpr uint32_t GCADDRF = (1U << 4);  ///< General call address reception
        constexpr uint32_t DIRF = (1U << 2);  ///< Transmission direction
        constexpr uint32_t BUSYF = (1U << 1);  ///< Bus busy
        constexpr uint32_t TRMODE = (1U << 0);  ///< Transmission mode
    }

    /// CLKCTRL Register bits
    namespace clkctrl_bits {
        constexpr uint32_t SPEEDMODE = (1U << 15);  ///< Speed mode selection
        constexpr uint32_t DUTYMODE = (1U << 14);  ///< Fast mode duty cycle
        constexpr uint32_t SPEED = (12 << 0);  ///< I2C bus speed config
    }

    /// TMRISE Register bits
    namespace tmrise_bits {
        constexpr uint32_t RISETIME = (6 << 0);  ///< I2C bus rise time
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI1_BASE = 0x40013000;
    constexpr uint32_t SPI2_BASE = 0x40003800;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CTRL1;  ///< Offset: 0x00 - control register 1
        volatile uint32_t CTRL2;  ///< Offset: 0x04 - control register 2
        volatile uint32_t STS;  ///< Offset: 0x08 - status register
        volatile uint32_t DT;  ///< Offset: 0x0C - data register
        volatile uint32_t CPOLY;  ///< Offset: 0x10 - CRC polynomial register
        volatile uint32_t RCRC;  ///< Offset: 0x14 - Receive CRC register
        volatile uint32_t TCRC;  ///< Offset: 0x18 - Transmit CRC register
        volatile uint32_t I2SCTRL;  ///< Offset: 0x1C - I2S control register
        volatile uint32_t I2SCLK;  ///< Offset: 0x20 - I2S clock register
    };

    /// Peripheral instances
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);
    inline Registers* SPI2 = reinterpret_cast<Registers*>(SPI2_BASE);

    // Bit definitions
    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t SLBEN = (1U << 15);  ///< Single line bidirectional half-duplex enable
        constexpr uint32_t SLBTD = (1U << 14);  ///< Single line bidirectional half-duplex transmission direction
        constexpr uint32_t CCEN = (1U << 13);  ///< CRC calculation enable
        constexpr uint32_t NTC = (1U << 12);  ///< Next transmission CRC
        constexpr uint32_t FBN = (1U << 11);  ///< frame bit num
        constexpr uint32_t ORA = (1U << 10);  ///< Only receive active
        constexpr uint32_t SWCSEN = (1U << 9);  ///< Software CS enable
        constexpr uint32_t SWCSIL = (1U << 8);  ///< Software CS internal level
        constexpr uint32_t LTF = (1U << 7);  ///< LSB transmit first
        constexpr uint32_t SPIEN = (1U << 6);  ///< SPI enable
        constexpr uint32_t MDIV2_0 = (3 << 3);  ///< Master clock frequency division bit2-0
        constexpr uint32_t MSTEN = (1U << 2);  ///< Master enable
        constexpr uint32_t CLKPOL = (1U << 1);  ///< Clock polarity
        constexpr uint32_t CLKPHA = (1U << 0);  ///< Clock phase
    }

    /// CTRL2 Register bits
    namespace ctrl2_bits {
        constexpr uint32_t MDIV3 = (1U << 8);  ///< Master clock frequency division bit3
        constexpr uint32_t TDBEIE = (1U << 7);  ///< Transmit data buffer empty interrupt enable
        constexpr uint32_t RDBFIE = (1U << 6);  ///< Receive data buffer full interrupt enable
        constexpr uint32_t ERRIE = (1U << 5);  ///< Error interrupt enable
        constexpr uint32_t HWCSOE = (1U << 2);  ///< Hardware CS output enable
        constexpr uint32_t DMATEN = (1U << 1);  ///< DMA transmit enable
        constexpr uint32_t DMAREN = (1U << 0);  ///< DMA receive enable
    }

    /// STS Register bits
    namespace sts_bits {
        constexpr uint32_t BF = (1U << 7);  ///< Busy flag
        constexpr uint32_t ROERR = (1U << 6);  ///< Receiver overflow error
        constexpr uint32_t MMERR = (1U << 5);  ///< Master mode error
        constexpr uint32_t CCERR = (1U << 4);  ///< CRC calculation error
        constexpr uint32_t TUERR = (1U << 3);  ///< Transmitter underload error
        constexpr uint32_t ACS = (1U << 2);  ///< Audio channel state
        constexpr uint32_t TDBE = (1U << 1);  ///< Transmit data buffer empty
        constexpr uint32_t RDBF = (1U << 0);  ///< Receive data buffer full
    }

    /// DT Register bits
    namespace dt_bits {
        constexpr uint32_t DT = (16 << 0);  ///< Data value
    }

    /// CPOLY Register bits
    namespace cpoly_bits {
        constexpr uint32_t CPOLY = (16 << 0);  ///< CRC polynomial
    }

    /// RCRC Register bits
    namespace rcrc_bits {
        constexpr uint32_t RCRC = (16 << 0);  ///< Receive CRC
    }

    /// TCRC Register bits
    namespace tcrc_bits {
        constexpr uint32_t TCRC = (16 << 0);  ///< Transmit CRC
    }

    /// I2SCTRL Register bits
    namespace i2sctrl_bits {
        constexpr uint32_t I2SMSEL = (1U << 11);  ///< I2S mode select
        constexpr uint32_t I2SEN = (1U << 10);  ///< I2S Enable
        constexpr uint32_t OPERSEL = (2 << 8);  ///< I2S operation select
        constexpr uint32_t PCMFSSEL = (1U << 7);  ///< PCM frame synchronization select
        constexpr uint32_t STDSEL = (2 << 4);  ///< I2S standard select
        constexpr uint32_t I2SCLKPOL = (1U << 3);  ///< I2S clock polarity
        constexpr uint32_t I2SDBN = (2 << 1);  ///< I2S data bit num
        constexpr uint32_t I2SCBN = (1U << 0);  ///< I2S channel bit num
    }

    /// I2SCLK Register bits
    namespace i2sclk_bits {
        constexpr uint32_t I2SDIV9_8 = (2 << 10);  ///< I2S division bit9 and bit8
        constexpr uint32_t I2SMCLKOE = (1U << 9);  ///< I2S master clock output enable
        constexpr uint32_t I2SODD = (1U << 8);  ///< Odd result for I2S division
        constexpr uint32_t I2SDIV7_0 = (8 << 0);  ///< I2S division bit7 to bit0
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART1_BASE = 0x40013800;
    constexpr uint32_t USART2_BASE = 0x40004400;
    constexpr uint32_t USART3_BASE = 0x40004800;
    constexpr uint32_t UART4_BASE = 0x40004C00;
    constexpr uint32_t UART5_BASE = 0x40005000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t STS;  ///< Offset: 0x00 - Status register
        volatile uint32_t DT;  ///< Offset: 0x04 - Data register
        volatile uint32_t BAUDR;  ///< Offset: 0x08 - Baud rate register
        volatile uint32_t CTRL1;  ///< Offset: 0x0C - Control register 1
        volatile uint32_t CTRL2;  ///< Offset: 0x10 - Control register 2
        volatile uint32_t CTRL3;  ///< Offset: 0x14 - Control register 3
        volatile uint32_t GDIV;  ///< Offset: 0x18 - Guard time and division register
    };

    /// Peripheral instances
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);
    inline Registers* USART3 = reinterpret_cast<Registers*>(USART3_BASE);
    inline Registers* UART4 = reinterpret_cast<Registers*>(UART4_BASE);
    inline Registers* UART5 = reinterpret_cast<Registers*>(UART5_BASE);

    // Bit definitions
    /// STS Register bits
    namespace sts_bits {
        constexpr uint32_t CTSCF = (1U << 9);  ///< CTS change flag
        constexpr uint32_t BFF = (1U << 8);  ///< Break frame flag
        constexpr uint32_t TDBE = (1U << 7);  ///< Transmit data buffer empty
        constexpr uint32_t TDC = (1U << 6);  ///< Transmit data complete
        constexpr uint32_t RDBF = (1U << 5);  ///< Receive data buffer full
        constexpr uint32_t IDLEF = (1U << 4);  ///< IDLE flag
        constexpr uint32_t ROERR = (1U << 3);  ///< Receiver overflow error
        constexpr uint32_t NERR = (1U << 2);  ///< Noise error
        constexpr uint32_t FERR = (1U << 1);  ///< Framing error
        constexpr uint32_t PERR = (1U << 0);  ///< Parity error
    }

    /// DT Register bits
    namespace dt_bits {
        constexpr uint32_t DT = (9 << 0);  ///< Data value
    }

    /// BAUDR Register bits
    namespace baudr_bits {
        constexpr uint32_t DIV = (16 << 0);  ///< Division
    }

    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t UEN = (1U << 13);  ///< USART enable
        constexpr uint32_t DBN = (1U << 12);  ///< Data bit num
        constexpr uint32_t WUM = (1U << 11);  ///< Wake up mode
        constexpr uint32_t PEN = (1U << 10);  ///< Parity enable
        constexpr uint32_t PSEL = (1U << 9);  ///< Parity selection
        constexpr uint32_t PERRIEN = (1U << 8);  ///< PERR interrupt enable
        constexpr uint32_t TDBEIEN = (1U << 7);  ///< TDBE interrupt enable
        constexpr uint32_t TDCIEN = (1U << 6);  ///< TDC interrupt enable
        constexpr uint32_t RDBFIEN = (1U << 5);  ///< RDBF interrupt enable
        constexpr uint32_t IDLEIEN = (1U << 4);  ///< IDLE interrupt enable
        constexpr uint32_t TEN = (1U << 3);  ///< Transmitter enable
        constexpr uint32_t REN = (1U << 2);  ///< Receiver enable
        constexpr uint32_t RM = (1U << 1);  ///< Receiver mute
        constexpr uint32_t SBF = (1U << 0);  ///< Send break frame
    }

    /// CTRL2 Register bits
    namespace ctrl2_bits {
        constexpr uint32_t LINEN = (1U << 14);  ///< LIN mode enable
        constexpr uint32_t STOPBN = (2 << 12);  ///< STOP bit num
        constexpr uint32_t CLKEN = (1U << 11);  ///< Clock enable
        constexpr uint32_t CLKPOL = (1U << 10);  ///< Clock polarity
        constexpr uint32_t CLKPHA = (1U << 9);  ///< Clock phase
        constexpr uint32_t LBCP = (1U << 8);  ///< Last bit clock pulse
        constexpr uint32_t BFIEN = (1U << 6);  ///< Break frame interrupt enable
        constexpr uint32_t BFBN = (1U << 5);  ///< Break frame bit num
        constexpr uint32_t ID = (4 << 0);  ///< USART identification
    }

    /// CTRL3 Register bits
    namespace ctrl3_bits {
        constexpr uint32_t CTSCFIEN = (1U << 10);  ///< CTSCF interrupt enable
        constexpr uint32_t CTSEN = (1U << 9);  ///< CTS enable
        constexpr uint32_t RTSEN = (1U << 8);  ///< RTS enable
        constexpr uint32_t DMATEN = (1U << 7);  ///< DMA transmitter enable
        constexpr uint32_t DMAREN = (1U << 6);  ///< DMA receiver enable
        constexpr uint32_t SCMEN = (1U << 5);  ///< Smartcard mode enable
        constexpr uint32_t SCNACKEN = (1U << 4);  ///< Smartcard NACK enable
        constexpr uint32_t SLBEN = (1U << 3);  ///< Single line bidirectional half-duplex enable
        constexpr uint32_t IRDALP = (1U << 2);  ///< IrDA low-power mode
        constexpr uint32_t IRDAEN = (1U << 1);  ///< IrDA enable
        constexpr uint32_t ERRIEN = (1U << 0);  ///< Error interrupt enable
    }

    /// GDIV Register bits
    namespace gdiv_bits {
        constexpr uint32_t SCGT = (8 << 8);  ///< Smart card guard time value
        constexpr uint32_t ISDIV = (8 << 0);  ///< IrDA/smartcard division value
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC1_BASE = 0x40012400;
    constexpr uint32_t ADC2_BASE = 0x40012800;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t STS;  ///< Offset: 0x00 - status register
        volatile uint32_t CTRL1;  ///< Offset: 0x04 - control register 1
        volatile uint32_t CTRL2;  ///< Offset: 0x08 - control register 2
        volatile uint32_t SPT1;  ///< Offset: 0x0C - sample time register 1
        volatile uint32_t SPT2;  ///< Offset: 0x10 - sample time register 2
        volatile uint32_t PCDTO1;  ///< Offset: 0x14 - Preempted channel 1 data offset register
        volatile uint32_t PCDTO2;  ///< Offset: 0x18 - Preempted channel 2 data offset register
        volatile uint32_t PCDTO3;  ///< Offset: 0x1C - Preempted channel 3 data offset register
        volatile uint32_t PCDTO4;  ///< Offset: 0x20 - Preempted channel 4 data offset register
        volatile uint32_t VMHB;  ///< Offset: 0x24 - Voltage monitoring high boundary register
        volatile uint32_t VMLB;  ///< Offset: 0x28 - Voltage monitoring low boundary register
        volatile uint32_t OSQ1;  ///< Offset: 0x2C - Ordinary sequence register 1
        volatile uint32_t OSQ2;  ///< Offset: 0x30 - Ordinary sequence register 2
        volatile uint32_t OSQ3;  ///< Offset: 0x34 - Ordinary sequence register 3
        volatile uint32_t PSQ;  ///< Offset: 0x38 - Preempted sequence register
        volatile uint32_t PDT1;  ///< Offset: 0x3C - Preempted data register 1
        volatile uint32_t PDT2;  ///< Offset: 0x40 - Preempted data register 2
        volatile uint32_t PDT3;  ///< Offset: 0x44 - Preempted data register 3
        volatile uint32_t PDT4;  ///< Offset: 0x48 - Preempted data register 4
        volatile uint32_t ODT;  ///< Offset: 0x4C - Ordinary data register
    };

    /// Peripheral instances
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);
    inline Registers* ADC2 = reinterpret_cast<Registers*>(ADC2_BASE);

    // Bit definitions
    /// STS Register bits
    namespace sts_bits {
        constexpr uint32_t OCCS = (1U << 4);  ///< Ordinary channel conversion start flag
        constexpr uint32_t PCCS = (1U << 3);  ///< Preempted channel conversion start flag
        constexpr uint32_t PCCE = (1U << 2);  ///< Preempted channels conversion end flag
        constexpr uint32_t CCE = (1U << 1);  ///< Channels conversion end flag
        constexpr uint32_t VMOR = (1U << 0);  ///< Voltage monitoring out of range flag
    }

    /// CTRL1 Register bits
    namespace ctrl1_bits {
        constexpr uint32_t OCVMEN = (1U << 23);  ///< Voltage monitoring enable on ordinary channels
        constexpr uint32_t PCVMEN = (1U << 22);  ///< Voltage monitoring enable on preempted channels
        constexpr uint32_t MSSEL = (4 << 16);  ///< Master slave mode select
        constexpr uint32_t OCPCNT = (3 << 13);  ///< Partitioned mode conversion count of ordinary channels
        constexpr uint32_t PCPEN = (1U << 12);  ///< Partitioned mode enable on preempted channels
        constexpr uint32_t OCPEN = (1U << 11);  ///< Partitioned mode enable on ordinary channels
        constexpr uint32_t PCAUTOEN = (1U << 10);  ///< Preempted group automatic conversion enable after ordinary group
        constexpr uint32_t VMSGEN = (1U << 9);  ///< Voltage monitoring enable on a single channel
        constexpr uint32_t SQEN = (1U << 8);  ///< Sequence mode enable
        constexpr uint32_t PCCEIEN = (1U << 7);  ///< Conversion end interrupt enable for preempted channels
        constexpr uint32_t VMORIEN = (1U << 6);  ///< Voltage monitoring out of range interrupt enable
        constexpr uint32_t CCEIEN = (1U << 5);  ///< Channel conversion end interrupt enable
        constexpr uint32_t VMCSEL = (5 << 0);  ///< Voltage monitoring channel select
    }

    /// CTRL2 Register bits
    namespace ctrl2_bits {
        constexpr uint32_t OCTESEL_H = (1U << 25);  ///< High bit of trigger event select for ordinary channels conversion
        constexpr uint32_t PCTESEL_H = (1U << 24);  ///< High bit of trigger event select for preempted channels conversion
        constexpr uint32_t ITSRVEN = (1U << 23);  ///< Internal temperature sensor and VINTRV enable
        constexpr uint32_t OCSWTRG = (1U << 22);  ///< Conversion trigger by software of ordinary channels
        constexpr uint32_t PCSWTRG = (1U << 21);  ///< Conversion trigger by software of preempted channels
        constexpr uint32_t OCTEN = (1U << 20);  ///< Trigger mode enable for ordinary channels conversion
        constexpr uint32_t OCTESEL_L = (3 << 17);  ///< Low bit of trigger event select for ordinary channels conversion
        constexpr uint32_t PCTEN = (1U << 15);  ///< Trigger mode enable for preempted channels conversion
        constexpr uint32_t PCTESEL_L = (3 << 12);  ///< Low bit of trigger event select for preempted channels conversion
        constexpr uint32_t DTALIGN = (1U << 11);  ///< Data alignment
        constexpr uint32_t OCDMAEN = (1U << 8);  ///< DMA transfer enable of ordinary channels
        constexpr uint32_t ADCALINIT = (1U << 3);  ///< initialize A/D calibration
        constexpr uint32_t ADCAL = (1U << 2);  ///< A/D Calibration
        constexpr uint32_t RPEN = (1U << 1);  ///< Repeat mode enable
        constexpr uint32_t ADCEN = (1U << 0);  ///< A/D converter enable
    }

    /// SPT1 Register bits
    namespace spt1_bits {
        constexpr uint32_t CSPT17 = (3 << 21);  ///< Selection sample time of channel ADC_IN17
        constexpr uint32_t CSPT16 = (3 << 18);  ///< Selection sample time of channel ADC_IN16
        constexpr uint32_t CSPT15 = (3 << 15);  ///< Selection sample time of channel ADC_IN15
        constexpr uint32_t CSPT14 = (3 << 12);  ///< Selection sample time of channel ADC_IN14
        constexpr uint32_t CSPT13 = (3 << 9);  ///< Selection sample time of channel ADC_IN13
        constexpr uint32_t CSPT12 = (3 << 6);  ///< Selection sample time of channel ADC_IN12
        constexpr uint32_t CSPT11 = (3 << 3);  ///< Selection sample time of channel ADC_IN11
        constexpr uint32_t CSPT10 = (3 << 0);  ///< Selection sample time of channel ADC_IN10
    }

    /// SPT2 Register bits
    namespace spt2_bits {
        constexpr uint32_t CSPT9 = (3 << 27);  ///< Selection sample time of channel ADC_IN9
        constexpr uint32_t CSPT8 = (3 << 24);  ///< Selection sample time of channel ADC_IN8
        constexpr uint32_t CSPT7 = (3 << 21);  ///< Selection sample time of channel ADC_IN7
        constexpr uint32_t CSPT6 = (3 << 18);  ///< Selection sample time of channel ADC_IN6
        constexpr uint32_t CSPT5 = (3 << 15);  ///< Selection sample time of channel ADC_IN5
        constexpr uint32_t CSPT4 = (3 << 12);  ///< Selection sample time of channel ADC_IN4
        constexpr uint32_t CSPT3 = (3 << 9);  ///< Selection sample time of channel ADC_IN3
        constexpr uint32_t CSPT2 = (3 << 6);  ///< Selection sample time of channel ADC_IN2
        constexpr uint32_t CSPT1 = (3 << 3);  ///< Selection sample time of channel ADC_IN1
        constexpr uint32_t CSPT0 = (3 << 0);  ///< Selection sample time of channel ADC_IN0
    }

    /// PCDTO1 Register bits
    namespace pcdto1_bits {
        constexpr uint32_t PCDTO1 = (12 << 0);  ///< Data offset for Preempted channel 1
    }

    /// PCDTO2 Register bits
    namespace pcdto2_bits {
        constexpr uint32_t PCDTO2 = (12 << 0);  ///< Data offset for Preempted channel 2
    }

    /// PCDTO3 Register bits
    namespace pcdto3_bits {
        constexpr uint32_t PCDTO3 = (12 << 0);  ///< Data offset for Preempted channel 3
    }

    /// PCDTO4 Register bits
    namespace pcdto4_bits {
        constexpr uint32_t PCDTO4 = (12 << 0);  ///< Data offset for Preempted channel 4
    }

    /// VMHB Register bits
    namespace vmhb_bits {
        constexpr uint32_t VMHB = (12 << 0);  ///< Voltage monitoring high boundary
    }

    /// VMLB Register bits
    namespace vmlb_bits {
        constexpr uint32_t VMLB = (12 << 0);  ///< Voltage monitoring low boundary
    }

    /// OSQ1 Register bits
    namespace osq1_bits {
        constexpr uint32_t OCLEN = (4 << 20);  ///< Ordinary conversion sequence length
        constexpr uint32_t OSN16 = (5 << 15);  ///< Number of 16th conversion in ordinary sequence
        constexpr uint32_t OSN15 = (5 << 10);  ///< Number of 15th conversion in ordinary sequence
        constexpr uint32_t OSN14 = (5 << 5);  ///< Number of 14th conversion in ordinary sequence
        constexpr uint32_t OSN13 = (5 << 0);  ///< Number of 13th conversion in ordinary sequence
    }

    /// OSQ2 Register bits
    namespace osq2_bits {
        constexpr uint32_t OSN12 = (5 << 25);  ///< Number of 12th conversion in ordinary sequence
        constexpr uint32_t OSN11 = (5 << 20);  ///< Number of 11th conversion in ordinary sequence
        constexpr uint32_t OSN10 = (5 << 15);  ///< Number of 10th conversion in ordinary sequence
        constexpr uint32_t OSN9 = (5 << 10);  ///< Number of 8th conversion in ordinary sequence
        constexpr uint32_t OSN8 = (5 << 5);  ///< Number of 7th conversion in ordinary sequence
        constexpr uint32_t OSN7 = (5 << 0);  ///< Number of 13th conversion in ordinary sequence
    }

    /// OSQ3 Register bits
    namespace osq3_bits {
        constexpr uint32_t OSN6 = (5 << 25);  ///< Number of 6th conversion in ordinary sequence
        constexpr uint32_t OSN5 = (5 << 20);  ///< Number of 5th conversion in ordinary sequence
        constexpr uint32_t OSN4 = (5 << 15);  ///< Number of 4th conversion in ordinary sequence
        constexpr uint32_t OSN3 = (5 << 10);  ///< number of 3rd conversion in ordinary sequence
        constexpr uint32_t OSN2 = (5 << 5);  ///< Number of 2nd conversion in ordinary sequence
        constexpr uint32_t OSN1 = (5 << 0);  ///< Number of 1st conversion in ordinary sequence
    }

    /// PSQ Register bits
    namespace psq_bits {
        constexpr uint32_t PCLEN = (2 << 20);  ///< Preempted conversion sequence length
        constexpr uint32_t PSN4 = (5 << 15);  ///< Number of 4th conversion in Preempted sequence
        constexpr uint32_t PSN3 = (5 << 10);  ///< Number of 3rd conversion in Preempted sequence
        constexpr uint32_t PSN2 = (5 << 5);  ///< Number of 2nd conversion in Preempted sequence
        constexpr uint32_t PSN1 = (5 << 0);  ///< Number of 1st conversion in Preempted sequence
    }

    /// PDT1 Register bits
    namespace pdt1_bits {
        constexpr uint32_t PDT1 = (16 << 0);  ///< Preempted data
    }

    /// PDT2 Register bits
    namespace pdt2_bits {
        constexpr uint32_t PDT2 = (16 << 0);  ///< Preempted data
    }

    /// PDT3 Register bits
    namespace pdt3_bits {
        constexpr uint32_t PDT3 = (16 << 0);  ///< Preempted data
    }

    /// PDT4 Register bits
    namespace pdt4_bits {
        constexpr uint32_t PDT4 = (16 << 0);  ///< Preempted data
    }

    /// ODT Register bits
    namespace odt_bits {
        constexpr uint32_t ADC2ODT = (16 << 16);  ///< ADC2 conversion data of ordinary channel
        constexpr uint32_t ODT = (16 << 0);  ///< Conversion data of ordinary channel
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN1_BASE = 0x40006400;
    constexpr uint32_t CAN2_BASE = 0x40006800;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t MCTRL;  ///< Offset: 0x00 - Main control register
        volatile uint32_t MSTS;  ///< Offset: 0x04 - Main status register
        volatile uint32_t TSTS;  ///< Offset: 0x08 - Transmit status register
        volatile uint32_t RF0;  ///< Offset: 0x0C - Receive FIFO 0 register
        volatile uint32_t RF1;  ///< Offset: 0x10 - Receive FIFO 1 register
        volatile uint32_t INTEN;  ///< Offset: 0x14 - Interrupt enable register
        volatile uint32_t ESTS;  ///< Offset: 0x18 - Error status register
        volatile uint32_t BTMG;  ///< Offset: 0x1C - Bit timing register
        volatile uint32_t TMI0;  ///< Offset: 0x180 - Transmit mailbox 0 identifier register
        volatile uint32_t TMC0;  ///< Offset: 0x184 - Transmit mailbox 0 data length and time stamp register
        volatile uint32_t TMDTL0;  ///< Offset: 0x188 - Transmit mailbox 0 low byte data register
        volatile uint32_t TMDTH0;  ///< Offset: 0x18C - Transmit mailbox 0 high byte data register
        volatile uint32_t TMI1;  ///< Offset: 0x190 - Transmit mailbox 1 identifier register
        volatile uint32_t TMC1;  ///< Offset: 0x194 - Transmit mailbox 1 data length and time stamp register
        volatile uint32_t TMDTL1;  ///< Offset: 0x198 - Transmit mailbox 1 low byte data register
        volatile uint32_t TMDTH1;  ///< Offset: 0x19C - Transmit mailbox 1 high byte data register
        volatile uint32_t TMI2;  ///< Offset: 0x1A0 - Transmit mailbox 2 identifier register
        volatile uint32_t TMC2;  ///< Offset: 0x1A4 - Transmit mailbox 2 data length and time stamp register
        volatile uint32_t TMDTL2;  ///< Offset: 0x1A8 - Transmit mailbox 2 low byte data register
        volatile uint32_t TMDTH2;  ///< Offset: 0x1AC - Transmit mailbox 2 high byte data register
        volatile uint32_t RFI0;  ///< Offset: 0x1B0 - Receive FIFO 0 register
        volatile uint32_t RFC0;  ///< Offset: 0x1B4 - Receive FIFO 0 data length and time stamp register
        volatile uint32_t RFDTL0;  ///< Offset: 0x1B8 - Receive FIFO 0 low byte data register
        volatile uint32_t RFDTH0;  ///< Offset: 0x1BC - Receive FIFO 0 high byte data register
        volatile uint32_t RFI1;  ///< Offset: 0x1C0 - Receive FIFO 1 register
        volatile uint32_t RFC1;  ///< Offset: 0x1C4 - Receive FIFO 1 data length and time stamp register
        volatile uint32_t RFDTL1;  ///< Offset: 0x1C8 - Receive FIFO 1 low byte data register
        volatile uint32_t RFDTH1;  ///< Offset: 0x1CC - Receive FIFO 1 high byte data register
        volatile uint32_t FCTRL;  ///< Offset: 0x200 - Filter control register
        volatile uint32_t FMCFG;  ///< Offset: 0x204 - Filter mode config register
        volatile uint32_t FBWCFG;  ///< Offset: 0x20C - Filter bit width config register
        volatile uint32_t FRF;  ///< Offset: 0x214 - Filter related FIFO register
        volatile uint32_t FACFG;  ///< Offset: 0x21C - Filter activate configuration register
        volatile uint32_t F0FB1;  ///< Offset: 0x240 - Filter bank 0 filtrate bit register 1
        volatile uint32_t F0FB2;  ///< Offset: 0x244 - Filter bank 0 filtrate bit register 2
        volatile uint32_t F1FB1;  ///< Offset: 0x248 - Filter bank 1 filtrate bit register 1
        volatile uint32_t F1FB2;  ///< Offset: 0x24C - Filter bank 1 filtrate bit register 2
        volatile uint32_t F2FB1;  ///< Offset: 0x250 - Filter bank 2 filtrate bit register 1
        volatile uint32_t F2FB2;  ///< Offset: 0x254 - Filter bank 2 filtrate bit register 2
        volatile uint32_t F3FB1;  ///< Offset: 0x258 - Filter bank 3 filtrate bit register 1
        volatile uint32_t F3FB2;  ///< Offset: 0x25C - Filter bank 3 filtrate bit register 2
        volatile uint32_t F4FB1;  ///< Offset: 0x260 - Filter bank 4 filtrate bit register 1
        volatile uint32_t F4FB2;  ///< Offset: 0x264 - Filter bank 4 filtrate bit register 2
        volatile uint32_t F5FB1;  ///< Offset: 0x268 - Filter bank 5 filtrate bit register 1
        volatile uint32_t F5FB2;  ///< Offset: 0x26C - Filter bank 5 filtrate bit register 2
        volatile uint32_t F6FB1;  ///< Offset: 0x270 - Filter bank 6 filtrate bit register 1
        volatile uint32_t F6FB2;  ///< Offset: 0x274 - Filter bank 6 filtrate bit register 2
        volatile uint32_t F7FB1;  ///< Offset: 0x278 - Filter bank 7 filtrate bit register 1
        volatile uint32_t F7FB2;  ///< Offset: 0x27C - Filter bank 7 filtrate bit register 2
        volatile uint32_t F8FB1;  ///< Offset: 0x280 - Filter bank 8 filtrate bit filtrate bit register 1
        volatile uint32_t F8FB2;  ///< Offset: 0x284 - Filter bank 8 filtrate bit filtrate bit register 2
        volatile uint32_t F9FB1;  ///< Offset: 0x288 - Filter bank 9 filtrate bit filtrate bit filtrate bit...
        volatile uint32_t F9FB2;  ///< Offset: 0x28C - Filter bank 9 filtrate bit filtrate bit filtrate bit...
        volatile uint32_t F10FB1;  ///< Offset: 0x290 - Filter bank 10 filtrate bit register 1
        volatile uint32_t F10FB2;  ///< Offset: 0x294 - Filter bank 10 filtrate bit register 2
        volatile uint32_t F11FB1;  ///< Offset: 0x298 - Filter bank 11 filtrate bit register 1
        volatile uint32_t F11FB2;  ///< Offset: 0x29C - Filter bank 11 filtrate bit register 2
        volatile uint32_t F12FB1;  ///< Offset: 0x2A0 - Filter bank 12 filtrate bit filtrate bit register 1
        volatile uint32_t F12FB2;  ///< Offset: 0x2A4 - Filter bank 12 filtrate bit filtrate bit register 2
        volatile uint32_t F13FB1;  ///< Offset: 0x2A8 - Filter bank 13 filtrate bit filtrate bit register 1
        volatile uint32_t F13FB2;  ///< Offset: 0x2AC - Filter bank 13 filtrate bit filtrate bit register 2
    };

    /// Peripheral instances
    inline Registers* CAN1 = reinterpret_cast<Registers*>(CAN1_BASE);
    inline Registers* CAN2 = reinterpret_cast<Registers*>(CAN2_BASE);

    // Bit definitions
    /// MCTRL Register bits
    namespace mctrl_bits {
        constexpr uint32_t PTD = (1U << 16);  ///< Prohibit transmission when debug
        constexpr uint32_t SPRST = (1U << 15);  ///< Software partial reset
        constexpr uint32_t TTCEN = (1U << 7);  ///< Time triggered communication mode enable
        constexpr uint32_t AEBOEN = (1U << 6);  ///< Automatic exit bus-off enable
        constexpr uint32_t AEDEN = (1U << 5);  ///< Automatic exit doze mode enable
        constexpr uint32_t PRSFEN = (1U << 4);  ///< Prohibit retransmission when sending fails enable
        constexpr uint32_t MDRSEL = (1U << 3);  ///< Message discarding rule select when overflow
        constexpr uint32_t MMSSR = (1U << 2);  ///< Multiple message sending sequence rule
        constexpr uint32_t DZEN = (1U << 1);  ///< Doze mode enable
        constexpr uint32_t FZEN = (1U << 0);  ///< Freeze mode enable
    }

    /// MSTS Register bits
    namespace msts_bits {
        constexpr uint32_t REALRX = (1U << 11);  ///< Real time level of RX pin
        constexpr uint32_t LSAMPRX = (1U << 10);  ///< Last sample level of RX pin
        constexpr uint32_t CURS = (1U << 9);  ///< Currently receiving status
        constexpr uint32_t CUSS = (1U << 8);  ///< Currently sending status
        constexpr uint32_t EDZIF = (1U << 4);  ///< Enter doze mode interrupt flag
        constexpr uint32_t QDZIF = (1U << 3);  ///< Quit doze mode interrupt flag
        constexpr uint32_t EOIF = (1U << 2);  ///< Error occur Interrupt flag
        constexpr uint32_t DZC = (1U << 1);  ///< Doze mode confirm
        constexpr uint32_t FZC = (1U << 0);  ///< Freeze mode confirm
    }

    /// TSTS Register bits
    namespace tsts_bits {
        constexpr uint32_t TM2LPF = (1U << 31);  ///< Transmit mailbox 2 lowest priority flag
        constexpr uint32_t TM1LPF = (1U << 30);  ///< Transmit mailbox 1 lowest priority flag
        constexpr uint32_t TM0LPF = (1U << 29);  ///< Transmit mailbox 0 lowest priority flag
        constexpr uint32_t TM2EF = (1U << 28);  ///< Transmit mailbox 2 empty flag
        constexpr uint32_t TM1EF = (1U << 27);  ///< Transmit mailbox 1 empty flag
        constexpr uint32_t TM0EF = (1U << 26);  ///< Transmit mailbox 0 empty flag
        constexpr uint32_t TMNR = (2 << 24);  ///< Transmit Mailbox number record
        constexpr uint32_t TM2CT = (1U << 23);  ///< Transmit mailbox 2 cancel transmission
        constexpr uint32_t TM2TEF = (1U << 19);  ///< Transmit mailbox 2 transmission error flag
        constexpr uint32_t TM2ALF = (1U << 18);  ///< Transmit mailbox 2 arbitration lost flag
        constexpr uint32_t TM2TSF = (1U << 17);  ///< Transmit mailbox 2 transmission success flag
        constexpr uint32_t TM2TCF = (1U << 16);  ///< transmit mailbox 2 transmission complete flag
        constexpr uint32_t TM1CT = (1U << 15);  ///< Transmit mailbox 1 cancel transmission
        constexpr uint32_t TM1TEF = (1U << 11);  ///< Transmit mailbox 1 transmission error flag
        constexpr uint32_t TM1ALF = (1U << 10);  ///< Transmit mailbox 1 arbitration lost flag
        constexpr uint32_t TM1TSF = (1U << 9);  ///< Transmit mailbox 1 transmission success flag
        constexpr uint32_t TM1TCF = (1U << 8);  ///< Transmit mailbox 1 transmission complete flag
        constexpr uint32_t TM0CT = (1U << 7);  ///< Transmit mailbox 0 cancel transmission
        constexpr uint32_t TM0TEF = (1U << 3);  ///< Transmit mailbox 0 transmission error flag
        constexpr uint32_t TM0ALF = (1U << 2);  ///< Transmit mailbox 0 arbitration lost flag
        constexpr uint32_t TM0TSF = (1U << 1);  ///< Transmit mailbox 0 transmission success flag
        constexpr uint32_t TM0TCF = (1U << 0);  ///< Transmit mailbox 0 transmission complete flag
    }

    /// RF0 Register bits
    namespace rf0_bits {
        constexpr uint32_t RF0R = (1U << 5);  ///< Receive FIFO 0 release
        constexpr uint32_t RF0OF = (1U << 4);  ///< Receive FIFO 0 overflow flag
        constexpr uint32_t RF0FF = (1U << 3);  ///< Receive FIFO 0 full flag
        constexpr uint32_t RF0MN = (2 << 0);  ///< Receive FIFO 0 message num
    }

    /// RF1 Register bits
    namespace rf1_bits {
        constexpr uint32_t RF1R = (1U << 5);  ///< Receive FIFO 1 release
        constexpr uint32_t RF1OF = (1U << 4);  ///< Receive FIFO 1 overflow flag
        constexpr uint32_t RF1FF = (1U << 3);  ///< Receive FIFO 1 full flag
        constexpr uint32_t RF1MN = (2 << 0);  ///< Receive FIFO 1 message num
    }

    /// INTEN Register bits
    namespace inten_bits {
        constexpr uint32_t EDZIEN = (1U << 17);  ///< Enter doze mode interrupt enable
        constexpr uint32_t QDZIEN = (1U << 16);  ///< Quit doze mode interrupt enable
        constexpr uint32_t EOIEN = (1U << 15);  ///< Error occur interrupt enable
        constexpr uint32_t ETRIEN = (1U << 11);  ///< Error type record interrupt enable
        constexpr uint32_t BOIEN = (1U << 10);  ///< Bus-off interrupt enable
        constexpr uint32_t EPIEN = (1U << 9);  ///< Error passive interrupt enable
        constexpr uint32_t EAIEN = (1U << 8);  ///< Error active interrupt enable
        constexpr uint32_t RF1OIEN = (1U << 6);  ///< Receive FIFO 1 overflow interrupt enable
        constexpr uint32_t RF1FIEN = (1U << 5);  ///< Receive FIFO 1 full interrupt enable
        constexpr uint32_t RF1MIEN = (1U << 4);  ///< FIFO 1 receive message interrupt enable
        constexpr uint32_t RF0OIEN = (1U << 3);  ///< Receive FIFO 0 overflow interrupt enable
        constexpr uint32_t RF0FIEN = (1U << 2);  ///< Receive FIFO 0 full interrupt enable
        constexpr uint32_t RF0MIEN = (1U << 1);  ///< FIFO 0 receive message interrupt enable
        constexpr uint32_t TCIEN = (1U << 0);  ///< Transmission complete interrupt enable
    }

    /// ESTS Register bits
    namespace ests_bits {
        constexpr uint32_t REC = (8 << 24);  ///< Receive error counter
        constexpr uint32_t TEC = (8 << 16);  ///< Transmit error counter
        constexpr uint32_t ETR = (3 << 4);  ///< Error type record
        constexpr uint32_t BOF = (1U << 2);  ///< Bus-off flag
        constexpr uint32_t EPF = (1U << 1);  ///< Error passive flag
        constexpr uint32_t EAF = (1U << 0);  ///< Error active flag
    }

    /// BTMG Register bits
    namespace btmg_bits {
        constexpr uint32_t LOEN = (1U << 31);  ///< Listen-Only mode
        constexpr uint32_t LBEN = (1U << 30);  ///< Loop back mode
        constexpr uint32_t RSAW = (2 << 24);  ///< Resynchronization adjust width
        constexpr uint32_t BTS2 = (3 << 20);  ///< Bit time segment 2
        constexpr uint32_t BTS1 = (4 << 16);  ///< Bit time segment 1
        constexpr uint32_t BRDIV = (12 << 0);  ///< Baud rate division
    }

    /// TMI0 Register bits
    namespace tmi0_bits {
        constexpr uint32_t TMSID = (11 << 21);  ///< Transmit mailbox standard identifier or extended identifier high bytes
        constexpr uint32_t TMEID = (18 << 3);  ///< Ttransmit mailbox extended identifier
        constexpr uint32_t TMIDSEL = (1U << 2);  ///< Transmit mailbox identifier type select
        constexpr uint32_t TMFRSEL = (1U << 1);  ///< Transmit mailbox frame type select
        constexpr uint32_t TMSR = (1U << 0);  ///< Transmit mailbox send request
    }

    /// TMC0 Register bits
    namespace tmc0_bits {
        constexpr uint32_t TMTS = (16 << 16);  ///< Transmit mailbox time stamp
        constexpr uint32_t TMTSTEN = (1U << 8);  ///< Transmit mailbox time stamp transmit enable
        constexpr uint32_t TMDTBL = (4 << 0);  ///< Transmit mailbox data byte length
    }

    /// TMDTL0 Register bits
    namespace tmdtl0_bits {
        constexpr uint32_t TMDT3 = (8 << 24);  ///< Transmit mailbox data byte 3
        constexpr uint32_t TMDT2 = (8 << 16);  ///< Transmit mailbox data byte 2
        constexpr uint32_t TMDT1 = (8 << 8);  ///< Transmit mailbox data byte 1
        constexpr uint32_t TMDT0 = (8 << 0);  ///< Transmit mailbox data byte 0
    }

    /// TMDTH0 Register bits
    namespace tmdth0_bits {
        constexpr uint32_t TMDT7 = (8 << 24);  ///< Transmit mailbox data byte 7
        constexpr uint32_t TMDT6 = (8 << 16);  ///< Transmit mailbox data byte 6
        constexpr uint32_t TMDT5 = (8 << 8);  ///< Transmit mailbox data byte 5
        constexpr uint32_t TMDT4 = (8 << 0);  ///< Transmit mailbox data byte 4
    }

    /// TMI1 Register bits
    namespace tmi1_bits {
        constexpr uint32_t TMSID = (11 << 21);  ///< Transmit mailbox standard identifier or extended identifier high bytes
        constexpr uint32_t TMEID = (18 << 3);  ///< Ttransmit mailbox extended identifier
        constexpr uint32_t TMIDSEL = (1U << 2);  ///< Transmit mailbox identifier type select
        constexpr uint32_t TMFRSEL = (1U << 1);  ///< Transmit mailbox frame type select
        constexpr uint32_t TMSR = (1U << 0);  ///< Transmit mailbox send request
    }

    /// TMC1 Register bits
    namespace tmc1_bits {
        constexpr uint32_t TMTS = (16 << 16);  ///< Transmit mailbox time stamp
        constexpr uint32_t TMTSTEN = (1U << 8);  ///< Transmit mailbox time stamp transmit enable
        constexpr uint32_t TMDTBL = (4 << 0);  ///< Transmit mailbox data byte length
    }

    /// TMDTL1 Register bits
    namespace tmdtl1_bits {
        constexpr uint32_t TMDT3 = (8 << 24);  ///< Transmit mailbox data byte 3
        constexpr uint32_t TMDT2 = (8 << 16);  ///< Transmit mailbox data byte 2
        constexpr uint32_t TMDT1 = (8 << 8);  ///< Transmit mailbox data byte 1
        constexpr uint32_t TMDT0 = (8 << 0);  ///< Transmit mailbox data byte 0
    }

    /// TMDTH1 Register bits
    namespace tmdth1_bits {
        constexpr uint32_t TMDT7 = (8 << 24);  ///< Transmit mailbox data byte 7
        constexpr uint32_t TMDT6 = (8 << 16);  ///< Transmit mailbox data byte 6
        constexpr uint32_t TMDT5 = (8 << 8);  ///< Transmit mailbox data byte 5
        constexpr uint32_t TMDT4 = (8 << 0);  ///< Transmit mailbox data byte 4
    }

    /// TMI2 Register bits
    namespace tmi2_bits {
        constexpr uint32_t TMSID = (11 << 21);  ///< Transmit mailbox standard identifier or extended identifier high bytes
        constexpr uint32_t TMEID = (18 << 3);  ///< Ttransmit mailbox extended identifier
        constexpr uint32_t TMIDSEL = (1U << 2);  ///< Transmit mailbox identifier type select
        constexpr uint32_t TMFRSEL = (1U << 1);  ///< Transmit mailbox frame type select
        constexpr uint32_t TMSR = (1U << 0);  ///< Transmit mailbox send request
    }

    /// TMC2 Register bits
    namespace tmc2_bits {
        constexpr uint32_t TMTS = (16 << 16);  ///< Transmit mailbox time stamp
        constexpr uint32_t TMTSTEN = (1U << 8);  ///< Transmit mailbox time stamp transmit enable
        constexpr uint32_t TMDTBL = (4 << 0);  ///< Transmit mailbox data byte length
    }

    /// TMDTL2 Register bits
    namespace tmdtl2_bits {
        constexpr uint32_t TMDT3 = (8 << 24);  ///< Transmit mailbox data byte 3
        constexpr uint32_t TMDT2 = (8 << 16);  ///< Transmit mailbox data byte 2
        constexpr uint32_t TMDT1 = (8 << 8);  ///< Transmit mailbox data byte 1
        constexpr uint32_t TMDT0 = (8 << 0);  ///< Transmit mailbox data byte 0
    }

    /// TMDTH2 Register bits
    namespace tmdth2_bits {
        constexpr uint32_t TMDT7 = (8 << 24);  ///< Transmit mailbox data byte 7
        constexpr uint32_t TMDT6 = (8 << 16);  ///< Transmit mailbox data byte 6
        constexpr uint32_t TMDT5 = (8 << 8);  ///< Transmit mailbox data byte 5
        constexpr uint32_t TMDT4 = (8 << 0);  ///< Transmit mailbox data byte 4
    }

    /// RFI0 Register bits
    namespace rfi0_bits {
        constexpr uint32_t RFSID = (11 << 21);  ///< Receive FIFO standard identifier or receive FIFO extended identifier
        constexpr uint32_t RFEID = (18 << 3);  ///< Receive FIFO extended identifier
        constexpr uint32_t RFIDI = (1U << 2);  ///< Receive FIFO identifier type indication
        constexpr uint32_t RFFRI = (1U << 1);  ///< Receive FIFO frame type indication
    }

    /// RFC0 Register bits
    namespace rfc0_bits {
        constexpr uint32_t RFTS = (16 << 16);  ///< Receive FIFO time stamp
        constexpr uint32_t RFFMN = (8 << 8);  ///< Receive FIFO filter match number
        constexpr uint32_t RFDTL = (4 << 0);  ///< Receive FIFO data length
    }

    /// RFDTL0 Register bits
    namespace rfdtl0_bits {
        constexpr uint32_t RFDT3 = (8 << 24);  ///< Receive FIFO data byte 3
        constexpr uint32_t RFDT2 = (8 << 16);  ///< Receive FIFO data byte 2
        constexpr uint32_t RFDT1 = (8 << 8);  ///< Receive FIFO data byte 1
        constexpr uint32_t RFDT0 = (8 << 0);  ///< Receive FIFO data byte 0
    }

    /// RFDTH0 Register bits
    namespace rfdth0_bits {
        constexpr uint32_t RFDT7 = (8 << 24);  ///< Receive FIFO data byte 7
        constexpr uint32_t RFDT6 = (8 << 16);  ///< Receive FIFO data byte 6
        constexpr uint32_t RFDT5 = (8 << 8);  ///< Receive FIFO data byte 5
        constexpr uint32_t RFDT4 = (8 << 0);  ///< Receive FIFO data byte 4
    }

    /// RFI1 Register bits
    namespace rfi1_bits {
        constexpr uint32_t RFSID = (11 << 21);  ///< Receive FIFO standard identifier or receive FIFO extended identifier
        constexpr uint32_t RFEID = (18 << 3);  ///< Receive FIFO extended identifier
        constexpr uint32_t RFIDI = (1U << 2);  ///< Receive FIFO identifier type indication
        constexpr uint32_t RFFRI = (1U << 1);  ///< Receive FIFO frame type indication
    }

    /// RFC1 Register bits
    namespace rfc1_bits {
        constexpr uint32_t RFTS = (16 << 16);  ///< Receive FIFO time stamp
        constexpr uint32_t RFFMN = (8 << 8);  ///< Receive FIFO filter match number
        constexpr uint32_t RFDTL = (4 << 0);  ///< Receive FIFO data length
    }

    /// RFDTL1 Register bits
    namespace rfdtl1_bits {
        constexpr uint32_t RFDT3 = (8 << 24);  ///< Receive FIFO data byte 3
        constexpr uint32_t RFDT2 = (8 << 16);  ///< Receive FIFO data byte 2
        constexpr uint32_t RFDT1 = (8 << 8);  ///< Receive FIFO data byte 1
        constexpr uint32_t RFDT0 = (8 << 0);  ///< Receive FIFO data byte 0
    }

    /// RFDTH1 Register bits
    namespace rfdth1_bits {
        constexpr uint32_t RFDT7 = (8 << 24);  ///< Receive FIFO data byte 7
        constexpr uint32_t RFDT6 = (8 << 16);  ///< Receive FIFO data byte 6
        constexpr uint32_t RFDT5 = (8 << 8);  ///< Receive FIFO data byte 5
        constexpr uint32_t RFDT4 = (8 << 0);  ///< Receive FIFO data byte 4
    }

    /// FCTRL Register bits
    namespace fctrl_bits {
        constexpr uint32_t FCS = (1U << 0);  ///< Filters configure switch
    }

    /// FMCFG Register bits
    namespace fmcfg_bits {
        constexpr uint32_t FMSEL0 = (1U << 0);  ///< Filter mode select
        constexpr uint32_t FMSEL1 = (1U << 1);  ///< Filter mode select
        constexpr uint32_t FMSEL2 = (1U << 2);  ///< Filter mode select
        constexpr uint32_t FMSEL3 = (1U << 3);  ///< Filter mode select
        constexpr uint32_t FMSEL4 = (1U << 4);  ///< Filter mode select
        constexpr uint32_t FMSEL5 = (1U << 5);  ///< Filter mode select
        constexpr uint32_t FMSEL6 = (1U << 6);  ///< Filter mode select
        constexpr uint32_t FMSEL7 = (1U << 7);  ///< Filter mode select
        constexpr uint32_t FMSEL8 = (1U << 8);  ///< Filter mode select
        constexpr uint32_t FMSEL9 = (1U << 9);  ///< Filter mode select
        constexpr uint32_t FMSEL10 = (1U << 10);  ///< Filter mode select
        constexpr uint32_t FMSEL11 = (1U << 11);  ///< Filter mode select
        constexpr uint32_t FMSEL12 = (1U << 12);  ///< Filter mode select
        constexpr uint32_t FMSEL13 = (1U << 13);  ///< Filter mode select
    }

    /// FBWCFG Register bits
    namespace fbwcfg_bits {
        constexpr uint32_t FBWSEL0 = (1U << 0);  ///< Filter bit width select
        constexpr uint32_t FBWSEL1 = (1U << 1);  ///< Filter bit width select
        constexpr uint32_t FBWSEL2 = (1U << 2);  ///< Filter bit width select
        constexpr uint32_t FBWSEL3 = (1U << 3);  ///< Filter bit width select
        constexpr uint32_t FBWSEL4 = (1U << 4);  ///< Filter bit width select
        constexpr uint32_t FBWSEL5 = (1U << 5);  ///< Filter bit width select
        constexpr uint32_t FBWSEL6 = (1U << 6);  ///< Filter bit width select
        constexpr uint32_t FBWSEL7 = (1U << 7);  ///< Filter bit width select
        constexpr uint32_t FBWSEL8 = (1U << 8);  ///< Filter bit width select
        constexpr uint32_t FBWSEL9 = (1U << 9);  ///< Filter bit width select
        constexpr uint32_t FBWSEL10 = (1U << 10);  ///< Filter bit width select
        constexpr uint32_t FBWSEL11 = (1U << 11);  ///< Filter bit width select
        constexpr uint32_t FBWSEL12 = (1U << 12);  ///< Filter bit width select
        constexpr uint32_t FBWSEL13 = (1U << 13);  ///< Filter bit width select
    }

    /// FRF Register bits
    namespace frf_bits {
        constexpr uint32_t FRFSEL0 = (1U << 0);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL1 = (1U << 1);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL2 = (1U << 2);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL3 = (1U << 3);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL4 = (1U << 4);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL5 = (1U << 5);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL6 = (1U << 6);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL7 = (1U << 7);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL8 = (1U << 8);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL9 = (1U << 9);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL10 = (1U << 10);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL11 = (1U << 11);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL12 = (1U << 12);  ///< Filter relation FIFO select
        constexpr uint32_t FRFSEL13 = (1U << 13);  ///< Filter relation FIFO select
    }

    /// FACFG Register bits
    namespace facfg_bits {
        constexpr uint32_t FAEN0 = (1U << 0);  ///< Filter activate enable
        constexpr uint32_t FAEN1 = (1U << 1);  ///< Filter activate enable
        constexpr uint32_t FAEN2 = (1U << 2);  ///< Filter activate enable
        constexpr uint32_t FAEN3 = (1U << 3);  ///< Filter activate enable
        constexpr uint32_t FAEN4 = (1U << 4);  ///< Filter activate enable
        constexpr uint32_t FAEN5 = (1U << 5);  ///< Filter activate enable
        constexpr uint32_t FAEN6 = (1U << 6);  ///< Filter activate enable
        constexpr uint32_t FAEN7 = (1U << 7);  ///< Filter activate enable
        constexpr uint32_t FAEN8 = (1U << 8);  ///< Filter activate enable
        constexpr uint32_t FAEN9 = (1U << 9);  ///< Filter activate enable
        constexpr uint32_t FAEN10 = (1U << 10);  ///< Filter activate enable
        constexpr uint32_t FAEN11 = (1U << 11);  ///< Filter activate enable
        constexpr uint32_t FAEN12 = (1U << 12);  ///< Filter activate enable
        constexpr uint32_t FAEN13 = (1U << 13);  ///< Filter activate enable
    }

    /// F0FB1 Register bits
    namespace f0fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F0FB2 Register bits
    namespace f0fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F1FB1 Register bits
    namespace f1fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F1FB2 Register bits
    namespace f1fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F2FB1 Register bits
    namespace f2fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F2FB2 Register bits
    namespace f2fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F3FB1 Register bits
    namespace f3fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F3FB2 Register bits
    namespace f3fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F4FB1 Register bits
    namespace f4fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F4FB2 Register bits
    namespace f4fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F5FB1 Register bits
    namespace f5fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F5FB2 Register bits
    namespace f5fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F6FB1 Register bits
    namespace f6fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F6FB2 Register bits
    namespace f6fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F7FB1 Register bits
    namespace f7fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F7FB2 Register bits
    namespace f7fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F8FB1 Register bits
    namespace f8fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F8FB2 Register bits
    namespace f8fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F9FB1 Register bits
    namespace f9fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F9FB2 Register bits
    namespace f9fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F10FB1 Register bits
    namespace f10fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F10FB2 Register bits
    namespace f10fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F11FB1 Register bits
    namespace f11fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F11FB2 Register bits
    namespace f11fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F12FB1 Register bits
    namespace f12fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F12FB2 Register bits
    namespace f12fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F13FB1 Register bits
    namespace f13fb1_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

    /// F13FB2 Register bits
    namespace f13fb2_bits {
        constexpr uint32_t FFDB0 = (1U << 0);  ///< Filter data bit
        constexpr uint32_t FFDB1 = (1U << 1);  ///< Filter data bit
        constexpr uint32_t FFDB2 = (1U << 2);  ///< Filter data bit
        constexpr uint32_t FFDB3 = (1U << 3);  ///< Filter data bit
        constexpr uint32_t FFDB4 = (1U << 4);  ///< Filter data bit
        constexpr uint32_t FFDB5 = (1U << 5);  ///< Filter data bit
        constexpr uint32_t FFDB6 = (1U << 6);  ///< Filter data bit
        constexpr uint32_t FFDB7 = (1U << 7);  ///< Filter data bit
        constexpr uint32_t FFDB8 = (1U << 8);  ///< Filter data bit
        constexpr uint32_t FFDB9 = (1U << 9);  ///< Filter data bit
        constexpr uint32_t FFDB10 = (1U << 10);  ///< Filter data bit
        constexpr uint32_t FFDB11 = (1U << 11);  ///< Filter data bit
        constexpr uint32_t FFDB12 = (1U << 12);  ///< Filter data bit
        constexpr uint32_t FFDB13 = (1U << 13);  ///< Filter data bit
        constexpr uint32_t FFDB14 = (1U << 14);  ///< Filter data bit
        constexpr uint32_t FFDB15 = (1U << 15);  ///< Filter data bit
        constexpr uint32_t FFDB16 = (1U << 16);  ///< Filter data bit
        constexpr uint32_t FFDB17 = (1U << 17);  ///< Filter data bit
        constexpr uint32_t FFDB18 = (1U << 18);  ///< Filter data bit
        constexpr uint32_t FFDB19 = (1U << 19);  ///< Filter data bit
        constexpr uint32_t FFDB20 = (1U << 20);  ///< Filter data bit
        constexpr uint32_t FFDB21 = (1U << 21);  ///< Filter data bit
        constexpr uint32_t FFDB22 = (1U << 22);  ///< Filter data bit
        constexpr uint32_t FFDB23 = (1U << 23);  ///< Filter data bit
        constexpr uint32_t FFDB24 = (1U << 24);  ///< Filter data bit
        constexpr uint32_t FFDB25 = (1U << 25);  ///< Filter data bit
        constexpr uint32_t FFDB26 = (1U << 26);  ///< Filter data bit
        constexpr uint32_t FFDB27 = (1U << 27);  ///< Filter data bit
        constexpr uint32_t FFDB28 = (1U << 28);  ///< Filter data bit
        constexpr uint32_t FFDB29 = (1U << 29);  ///< Filter data bit
        constexpr uint32_t FFDB30 = (1U << 30);  ///< Filter data bit
        constexpr uint32_t FFDB31 = (1U << 31);  ///< Filter data bit
    }

}

// ============================================================================
// DEBUG Peripheral
// ============================================================================

namespace debug {
    /// Base addresses
    constexpr uint32_t DEBUG_BASE = 0xE0042000;

    /// DEBUG Register structure
    struct Registers {
        volatile uint32_t IDCODE;  ///< Offset: 0x00 - DEBUG_IDCODE
        volatile uint32_t CTRL;  ///< Offset: 0x04 - DEBUG_CTRL
    };

    /// Peripheral instances
    inline Registers* DEBUG = reinterpret_cast<Registers*>(DEBUG_BASE);

    // Bit definitions
    /// IDCODE Register bits
    namespace idcode_bits {
        constexpr uint32_t PID = (32 << 0);  ///< PID
    }

    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t SLEEP_DEBUG = (1U << 0);  ///< SLEEP_DEBUG
        constexpr uint32_t DEEPSLEEP_DEBUG = (1U << 1);  ///< DEEPSLEEP_DEBUG
        constexpr uint32_t STANDBY_DEBUG = (1U << 2);  ///< STANDBY_DEBUG
        constexpr uint32_t TRACE_IOEN = (1U << 5);  ///< TRACE_IOEN
        constexpr uint32_t TRACE_MODE = (2 << 6);  ///< TRACE_MODE
        constexpr uint32_t WDT_PAUSE = (1U << 8);  ///< WDT_PAUSE
        constexpr uint32_t WWDT_PAUSE = (1U << 9);  ///< WWDT_PAUSE
        constexpr uint32_t TMR1_PAUSE = (1U << 10);  ///< TMR1_PAUSE
        constexpr uint32_t TMR2_PAUSE = (1U << 11);  ///< TMR2_PAUSE
        constexpr uint32_t TMR3_PAUSE = (1U << 12);  ///< TMR3_PAUSE
        constexpr uint32_t TMR4_PAUSE = (1U << 13);  ///< TMR4_PAUSE
        constexpr uint32_t CAN1_PAUSE = (1U << 14);  ///< CAN1_PAUSE
        constexpr uint32_t I2C1_SMBUS_TIMEOUT = (1U << 15);  ///< I2C1_SMBUS_TIMEOUT
        constexpr uint32_t I2C2_SMBUS_TIMEOUT = (1U << 16);  ///< I2C2_SMBUS_TIMEOUT
        constexpr uint32_t TMR8_PAUSE = (1U << 17);  ///< TMR8_PAUSE
        constexpr uint32_t TMR5_PAUSE = (1U << 18);  ///< TMR5_PAUSE
        constexpr uint32_t CAN2_PAUSE = (1U << 21);  ///< CAN2_PAUSE
        constexpr uint32_t TMR9_PAUSE = (1U << 28);  ///< TMR9_PAUSE
        constexpr uint32_t TMR10_PAUSE = (1U << 29);  ///< TMR10_PAUSE
        constexpr uint32_t TMR11_PAUSE = (1U << 30);  ///< TMR11_PAUSE
    }

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40023000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t DT;  ///< Offset: 0x00 - Data register
        volatile uint32_t CDT;  ///< Offset: 0x04 - Common data register
        volatile uint32_t CTRL;  ///< Offset: 0x08 - Control register
        volatile uint32_t IDT;  ///< Offset: 0x10 - Initial data register
        volatile uint32_t POLY;  ///< Offset: 0x14 - Polynomial coefficient register
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// DT Register bits
    namespace dt_bits {
        constexpr uint32_t DT = (32 << 0);  ///< Data Register
    }

    /// CDT Register bits
    namespace cdt_bits {
        constexpr uint32_t CDT = (1U << 0);  ///< Common Data
    }

    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t RST = (1U << 0);  ///< Reset bit
        constexpr uint32_t POLY_SIZE = (2 << 3);  ///< Polynomial size
        constexpr uint32_t REVID = (2 << 5);  ///< Reverse input data
        constexpr uint32_t REVOD = (1U << 7);  ///< Reverse output data
    }

    /// IDT Register bits
    namespace idt_bits {
        constexpr uint32_t IDT = (32 << 0);  ///< Initial Data
    }

    /// POLY Register bits
    namespace poly_bits {
        constexpr uint32_t POLY = (32 << 0);  ///< polynomial coefficient
    }

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_BASE = 0x40022000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t PSR;  ///< Offset: 0x00 - Performance selection register
        volatile uint32_t UNLOCK;  ///< Offset: 0x04 - Unlock register
        volatile uint32_t USD_UNLOCK;  ///< Offset: 0x08 - USD unlock register
        volatile uint32_t STS;  ///< Offset: 0x0C - Status register
        volatile uint32_t CTRL;  ///< Offset: 0x10 - Control register
        volatile uint32_t ADDR;  ///< Offset: 0x14 - Address register
        volatile uint32_t USD;  ///< Offset: 0x1C - User system data register
        volatile uint32_t EPPS;  ///< Offset: 0x20 - Erase/program protection status register
        volatile uint32_t UNLOCK3;  ///< Offset: 0x84 - Unlock 3 register
        volatile uint32_t SELECT;  ///< Offset: 0x88 - Select register
        volatile uint32_t STS3;  ///< Offset: 0x8C - Status 3 register
        volatile uint32_t CTRL3;  ///< Offset: 0x90 - Control 3 register
        volatile uint32_t ADDR3;  ///< Offset: 0x94 - Address 3 register
        volatile uint32_t DA;  ///< Offset: 0x98 - Spim decryption address
        volatile uint32_t SLIB_STS0;  ///< Offset: 0xCC - sLib status 0 register
        volatile uint32_t SLIB_STS1;  ///< Offset: 0xD0 - sLib status 1 register
        volatile uint32_t SLIB_PWD_CLR;  ///< Offset: 0xD4 - SLIB password clear register
        volatile uint32_t SLIB_MISC_STS;  ///< Offset: 0xD8 - sLib misc status register
        volatile uint32_t SLIB_SET_PWD;  ///< Offset: 0xDC - sLib password setting register
        volatile uint32_t SLIB_SET_RANGE;  ///< Offset: 0xE0 - Configure sLib range register
        volatile uint32_t SLIB_UNLOCK;  ///< Offset: 0xF0 - sLib unlock register
        volatile uint32_t CRC_CTRL;  ///< Offset: 0xF4 - Flash CRC controler register
        volatile uint32_t CRC_CHKR;  ///< Offset: 0xF8 - FLASH CRC check result register
    };

    /// Peripheral instances
    inline Registers* FLASH = reinterpret_cast<Registers*>(FLASH_BASE);

    // Bit definitions
    /// UNLOCK Register bits
    namespace unlock_bits {
        constexpr uint32_t UKVAL = (32 << 0);  ///< Unlock key value
    }

    /// USD_UNLOCK Register bits
    namespace usd_unlock_bits {
        constexpr uint32_t USD_UKVAL = (32 << 0);  ///< User system data Unlock key value
    }

    /// STS Register bits
    namespace sts_bits {
        constexpr uint32_t ODF = (1U << 5);  ///< Operate done flag
        constexpr uint32_t EPPERR = (1U << 4);  ///< Erase/program protection error
        constexpr uint32_t PRGMERR = (1U << 2);  ///< program error
        constexpr uint32_t OBF = (1U << 0);  ///< Operate busy flag
    }

    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t FPRGM = (1U << 0);  ///< Flash program
        constexpr uint32_t SECERS = (1U << 1);  ///< Sector erase
        constexpr uint32_t BANKERS = (1U << 2);  ///< Bank erase
        constexpr uint32_t USDPRGM = (1U << 4);  ///< User system data program
        constexpr uint32_t USDERS = (1U << 5);  ///< User system data erase
        constexpr uint32_t ERSTR = (1U << 6);  ///< Erasing start
        constexpr uint32_t OPLK = (1U << 7);  ///< Operation lock
        constexpr uint32_t USDULKS = (1U << 9);  ///< User system data unlock success
        constexpr uint32_t ERRIE = (1U << 10);  ///< Error interrupt enable
        constexpr uint32_t ODFIE = (1U << 12);  ///< Operation done flag interrupt enable
    }

    /// ADDR Register bits
    namespace addr_bits {
        constexpr uint32_t FA = (32 << 0);  ///< Flash Address
    }

    /// USD Register bits
    namespace usd_bits {
        constexpr uint32_t USDERR = (1U << 0);  ///< User system data error
        constexpr uint32_t FAP = (1U << 1);  ///< FLASH access protection
        constexpr uint32_t nWDT_ATO_EN = (1U << 2);  ///< WDT auto enable
        constexpr uint32_t nDEPSLP_RST = (1U << 3);  ///< Deepsleep reset
        constexpr uint32_t nSTDBY_RST = (1U << 4);  ///< Standby reset
        constexpr uint32_t BTOPT = (1U << 5);  ///< boot option
        constexpr uint32_t USER_D0 = (8 << 10);  ///< User data 0
        constexpr uint32_t USER_D1 = (8 << 18);  ///< User data 1
    }

    /// EPPS Register bits
    namespace epps_bits {
        constexpr uint32_t EPPS = (32 << 0);  ///< Erase/program protection status
    }

    /// UNLOCK3 Register bits
    namespace unlock3_bits {
        constexpr uint32_t UKVAL = (32 << 0);  ///< Unlock key value
    }

    /// SELECT Register bits
    namespace select_bits {
        constexpr uint32_t SELECT = (32 << 0);  ///< spim type selection
    }

    /// STS3 Register bits
    namespace sts3_bits {
        constexpr uint32_t OBF = (1U << 0);  ///< Operate busy flag
        constexpr uint32_t PRGMERR = (1U << 2);  ///< program error
        constexpr uint32_t EPPERR = (1U << 4);  ///< Erase/program protection error
        constexpr uint32_t ODF = (1U << 5);  ///< Operate done flag
    }

    /// CTRL3 Register bits
    namespace ctrl3_bits {
        constexpr uint32_t FPRGM = (1U << 0);  ///< Flash program
        constexpr uint32_t SECERS = (1U << 1);  ///< Sector erase
        constexpr uint32_t CHPERS = (1U << 2);  ///< Chip erase
        constexpr uint32_t ERSTR = (1U << 6);  ///< Erasing start
        constexpr uint32_t OPLK = (1U << 7);  ///< Operation lock
        constexpr uint32_t ERRIE = (1U << 10);  ///< Error interrupt enable
        constexpr uint32_t ODFIE = (1U << 12);  ///< Operation done flag interrupt enable
    }

    /// ADDR3 Register bits
    namespace addr3_bits {
        constexpr uint32_t FA = (32 << 0);  ///< Flash Address
    }

    /// DA Register bits
    namespace da_bits {
        constexpr uint32_t FDA = (32 << 0);  ///< Flash decryption address
    }

    /// SLIB_STS0 Register bits
    namespace slib_sts0_bits {
        constexpr uint32_t SLIB_ENF = (1U << 3);  ///< sLib enabled flag
    }

    /// SLIB_STS1 Register bits
    namespace slib_sts1_bits {
        constexpr uint32_t SLIB_SS = (11 << 0);  ///< sLib start sector
        constexpr uint32_t SLIB_DAT_SS = (11 << 11);  ///< sLib data start sector
        constexpr uint32_t SLIB_ES = (10 << 22);  ///< sLib end sector
    }

    /// SLIB_PWD_CLR Register bits
    namespace slib_pwd_clr_bits {
        constexpr uint32_t SLIB_PCLR_VAL = (32 << 0);  ///< sLib password clear value
    }

    /// SLIB_MISC_STS Register bits
    namespace slib_misc_sts_bits {
        constexpr uint32_t SLIB_PWD_ERR = (1U << 0);  ///< sLib password error
        constexpr uint32_t SLIB_PWD_OK = (1U << 1);  ///< sLib password ok
        constexpr uint32_t SLIB_ULKF = (1U << 2);  ///< sLib unlock flag
        constexpr uint32_t SLIB_RCNT = (9 << 16);  ///< sLib remaining count
    }

    /// SLIB_SET_PWD Register bits
    namespace slib_set_pwd_bits {
        constexpr uint32_t SLIB_PSET_VAL = (32 << 0);  ///< sLib password setting val
    }

    /// SLIB_SET_RANGE Register bits
    namespace slib_set_range_bits {
        constexpr uint32_t SLIB_SS_SET = (11 << 0);  ///< sLib start sector setting
        constexpr uint32_t SLIB_DSS_SET = (11 << 11);  ///< sLib data start sector setting
        constexpr uint32_t SLIB_ES_SET = (10 << 22);  ///< sLib end sector setting
    }

    /// SLIB_UNLOCK Register bits
    namespace slib_unlock_bits {
        constexpr uint32_t SLIB_UKVAL = (32 << 0);  ///< sLib unlock key value
    }

    /// CRC_CTRL Register bits
    namespace crc_ctrl_bits {
        constexpr uint32_t CRC_SS = (7 << 0);  ///< CRC start sector
        constexpr uint32_t CRC_SN = (7 << 7);  ///< CRC sector numbler
        constexpr uint32_t CRC_STRT = (1U << 14);  ///< CRC start
    }

    /// CRC_CHKR Register bits
    namespace crc_chkr_bits {
        constexpr uint32_t CRC_CHKR = (32 << 0);  ///< CRC check result
    }

}

// ============================================================================
// NVIC Peripheral
// ============================================================================

namespace nvic {
    /// Base addresses
    constexpr uint32_t NVIC_BASE = 0xE000E000;

    /// NVIC Register structure
    struct Registers {
        volatile uint32_t ICTR;  ///< Offset: 0x04 - Interrupt Controller Type Register
        volatile uint32_t STIR;  ///< Offset: 0xF00 - Software Triggered Interrupt Register
        volatile uint32_t ISER0;  ///< Offset: 0x100 - Interrupt Set-Enable Register
        volatile uint32_t ISER1;  ///< Offset: 0x104 - Interrupt Set-Enable Register
        volatile uint32_t ICER0;  ///< Offset: 0x180 - Interrupt Clear-Enable Register
        volatile uint32_t ICER1;  ///< Offset: 0x184 - Interrupt Clear-Enable Register
        volatile uint32_t ISPR0;  ///< Offset: 0x200 - Interrupt Set-Pending Register
        volatile uint32_t ISPR1;  ///< Offset: 0x204 - Interrupt Set-Pending Register
        volatile uint32_t ICPR0;  ///< Offset: 0x280 - Interrupt Clear-Pending Register
        volatile uint32_t ICPR1;  ///< Offset: 0x284 - Interrupt Clear-Pending Register
        volatile uint32_t IABR0;  ///< Offset: 0x300 - Interrupt Active Bit Register
        volatile uint32_t IABR1;  ///< Offset: 0x304 - Interrupt Active Bit Register
        volatile uint32_t IPR0;  ///< Offset: 0x400 - Interrupt Priority Register
        volatile uint32_t IPR1;  ///< Offset: 0x404 - Interrupt Priority Register
        volatile uint32_t IPR2;  ///< Offset: 0x408 - Interrupt Priority Register
        volatile uint32_t IPR3;  ///< Offset: 0x40C - Interrupt Priority Register
        volatile uint32_t IPR4;  ///< Offset: 0x410 - Interrupt Priority Register
        volatile uint32_t IPR5;  ///< Offset: 0x414 - Interrupt Priority Register
        volatile uint32_t IPR6;  ///< Offset: 0x418 - Interrupt Priority Register
        volatile uint32_t IPR7;  ///< Offset: 0x41C - Interrupt Priority Register
        volatile uint32_t IPR8;  ///< Offset: 0x420 - Interrupt Priority Register
        volatile uint32_t IPR9;  ///< Offset: 0x424 - Interrupt Priority Register
        volatile uint32_t IPR10;  ///< Offset: 0x428 - Interrupt Priority Register
        volatile uint32_t IPR11;  ///< Offset: 0x42C - Interrupt Priority Register
        volatile uint32_t IPR12;  ///< Offset: 0x430 - Interrupt Priority Register
        volatile uint32_t IPR13;  ///< Offset: 0x434 - Interrupt Priority Register
        volatile uint32_t IPR14;  ///< Offset: 0x438 - Interrupt Priority Register
    };

    /// Peripheral instances
    inline Registers* NVIC = reinterpret_cast<Registers*>(NVIC_BASE);

    // Bit definitions
    /// ICTR Register bits
    namespace ictr_bits {
        constexpr uint32_t INTLINESNUM = (4 << 0);  ///< Total number of interrupt lines in groups
    }

    /// STIR Register bits
    namespace stir_bits {
        constexpr uint32_t INTID = (9 << 0);  ///< interrupt to be triggered
    }

    /// ISER0 Register bits
    namespace iser0_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ISER1 Register bits
    namespace iser1_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ICER0 Register bits
    namespace icer0_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ICER1 Register bits
    namespace icer1_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ISPR0 Register bits
    namespace ispr0_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ISPR1 Register bits
    namespace ispr1_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ICPR0 Register bits
    namespace icpr0_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// ICPR1 Register bits
    namespace icpr1_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// IABR0 Register bits
    namespace iabr0_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IABR1 Register bits
    namespace iabr1_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IPR0 Register bits
    namespace ipr0_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR1 Register bits
    namespace ipr1_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR2 Register bits
    namespace ipr2_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR3 Register bits
    namespace ipr3_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR4 Register bits
    namespace ipr4_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR5 Register bits
    namespace ipr5_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR6 Register bits
    namespace ipr6_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR7 Register bits
    namespace ipr7_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR8 Register bits
    namespace ipr8_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR9 Register bits
    namespace ipr9_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR10 Register bits
    namespace ipr10_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR11 Register bits
    namespace ipr11_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR12 Register bits
    namespace ipr12_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR13 Register bits
    namespace ipr13_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR14 Register bits
    namespace ipr14_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USBFS_BASE = 0x40005C00;

    /// USB Register structure
    struct Registers {
        volatile uint32_t EPT0;  ///< Offset: 0x00 - endpoint 0 register
        volatile uint32_t EPT1;  ///< Offset: 0x04 - endpoint 1 register
        volatile uint32_t EPT2;  ///< Offset: 0x08 - endpoint 2 register
        volatile uint32_t EPT3;  ///< Offset: 0x0C - endpoint 3 register
        volatile uint32_t EPT4;  ///< Offset: 0x10 - endpoint 4 register
        volatile uint32_t EPT5;  ///< Offset: 0x14 - endpoint 5 register
        volatile uint32_t EPT6;  ///< Offset: 0x18 - endpoint 6 register
        volatile uint32_t EPT7;  ///< Offset: 0x1C - endpoint 7 register
        volatile uint32_t CTRL;  ///< Offset: 0x40 - control register
        volatile uint32_t INTSTS;  ///< Offset: 0x44 - interrupt status register
        volatile uint32_t SOFRNUM;  ///< Offset: 0x48 - frame number register
        volatile uint32_t DEVADDR;  ///< Offset: 0x4C - device address
        volatile uint32_t BUFTBL;  ///< Offset: 0x50 - Buffer table address
        volatile uint32_t CFG;  ///< Offset: 0x60 - CFG control register
    };

    /// Peripheral instances
    inline Registers* USBFS = reinterpret_cast<Registers*>(USBFS_BASE);

    // Bit definitions
    /// EPT0 Register bits
    namespace ept0_bits {
        constexpr uint32_t EPTADDR = (4 << 0);  ///< Endpoint address
        constexpr uint32_t TXSTS = (2 << 4);  ///< Tx status
        constexpr uint32_t TXDTS = (1U << 6);  ///< Tx data toggle synchronization
        constexpr uint32_t TXTC = (1U << 7);  ///< Tx transaction completed
        constexpr uint32_t EXF = (1U << 8);  ///< Endpoint extend function
        constexpr uint32_t TRANS_TYPE = (2 << 9);  ///< Transfer type
        constexpr uint32_t SETUPTC = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t RXSTS = (2 << 12);  ///< Rx Status
        constexpr uint32_t RXDTS = (1U << 14);  ///< Rx data toggle synchronization
        constexpr uint32_t RXTC = (1U << 15);  ///< Rx transaction completed
    }

    /// EPT1 Register bits
    namespace ept1_bits {
        constexpr uint32_t EPTADDR = (4 << 0);  ///< Endpoint address
        constexpr uint32_t TXSTS = (2 << 4);  ///< Tx status
        constexpr uint32_t TXDTS = (1U << 6);  ///< Tx data toggle synchronization
        constexpr uint32_t TXTC = (1U << 7);  ///< Tx transaction completed
        constexpr uint32_t EXF = (1U << 8);  ///< Endpoint extend function
        constexpr uint32_t TRANS_TYPE = (2 << 9);  ///< Transfer type
        constexpr uint32_t SETUPTC = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t RXSTS = (2 << 12);  ///< Rx Status
        constexpr uint32_t RXDTS = (1U << 14);  ///< Rx data toggle synchronization
        constexpr uint32_t RXTC = (1U << 15);  ///< Rx transaction completed
    }

    /// EPT2 Register bits
    namespace ept2_bits {
        constexpr uint32_t EPTADDR = (4 << 0);  ///< Endpoint address
        constexpr uint32_t TXSTS = (2 << 4);  ///< Tx status
        constexpr uint32_t TXDTS = (1U << 6);  ///< Tx data toggle synchronization
        constexpr uint32_t TXTC = (1U << 7);  ///< Tx transaction completed
        constexpr uint32_t EXF = (1U << 8);  ///< Endpoint extend function
        constexpr uint32_t TRANS_TYPE = (2 << 9);  ///< Transfer type
        constexpr uint32_t SETUPTC = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t RXSTS = (2 << 12);  ///< Rx Status
        constexpr uint32_t RXDTS = (1U << 14);  ///< Rx data toggle synchronization
        constexpr uint32_t RXTC = (1U << 15);  ///< Rx transaction completed
    }

    /// EPT3 Register bits
    namespace ept3_bits {
        constexpr uint32_t EPTADDR = (4 << 0);  ///< Endpoint address
        constexpr uint32_t TXSTS = (2 << 4);  ///< Tx status
        constexpr uint32_t TXDTS = (1U << 6);  ///< Tx data toggle synchronization
        constexpr uint32_t TXTC = (1U << 7);  ///< Tx transaction completed
        constexpr uint32_t EXF = (1U << 8);  ///< Endpoint extend function
        constexpr uint32_t TRANS_TYPE = (2 << 9);  ///< Transfer type
        constexpr uint32_t SETUPTC = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t RXSTS = (2 << 12);  ///< Rx Status
        constexpr uint32_t RXDTS = (1U << 14);  ///< Rx data toggle synchronization
        constexpr uint32_t RXTC = (1U << 15);  ///< Rx transaction completed
    }

    /// EPT4 Register bits
    namespace ept4_bits {
        constexpr uint32_t EPTADDR = (4 << 0);  ///< Endpoint address
        constexpr uint32_t TXSTS = (2 << 4);  ///< Tx status
        constexpr uint32_t TXDTS = (1U << 6);  ///< Tx data toggle synchronization
        constexpr uint32_t TXTC = (1U << 7);  ///< Tx transaction completed
        constexpr uint32_t EXF = (1U << 8);  ///< Endpoint extend function
        constexpr uint32_t TRANS_TYPE = (2 << 9);  ///< Transfer type
        constexpr uint32_t SETUPTC = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t RXSTS = (2 << 12);  ///< Rx Status
        constexpr uint32_t RXDTS = (1U << 14);  ///< Rx data toggle synchronization
        constexpr uint32_t RXTC = (1U << 15);  ///< Rx transaction completed
    }

    /// EPT5 Register bits
    namespace ept5_bits {
        constexpr uint32_t EPTADDR = (4 << 0);  ///< Endpoint address
        constexpr uint32_t TXSTS = (2 << 4);  ///< Tx status
        constexpr uint32_t TXDTS = (1U << 6);  ///< Tx data toggle synchronization
        constexpr uint32_t TXTC = (1U << 7);  ///< Tx transaction completed
        constexpr uint32_t EXF = (1U << 8);  ///< Endpoint extend function
        constexpr uint32_t TRANS_TYPE = (2 << 9);  ///< Transfer type
        constexpr uint32_t SETUPTC = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t RXSTS = (2 << 12);  ///< Rx Status
        constexpr uint32_t RXDTS = (1U << 14);  ///< Rx data toggle synchronization
        constexpr uint32_t RXTC = (1U << 15);  ///< Rx transaction completed
    }

    /// EPT6 Register bits
    namespace ept6_bits {
        constexpr uint32_t EPTADDR = (4 << 0);  ///< Endpoint address
        constexpr uint32_t TXSTS = (2 << 4);  ///< Tx status
        constexpr uint32_t TXDTS = (1U << 6);  ///< Tx data toggle synchronization
        constexpr uint32_t TXTC = (1U << 7);  ///< Tx transaction completed
        constexpr uint32_t EXF = (1U << 8);  ///< Endpoint extend function
        constexpr uint32_t TRANS_TYPE = (2 << 9);  ///< Transfer type
        constexpr uint32_t SETUPTC = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t RXSTS = (2 << 12);  ///< Rx Status
        constexpr uint32_t RXDTS = (1U << 14);  ///< Rx data toggle synchronization
        constexpr uint32_t RXTC = (1U << 15);  ///< Rx transaction completed
    }

    /// EPT7 Register bits
    namespace ept7_bits {
        constexpr uint32_t EPTADDR = (4 << 0);  ///< Endpoint address
        constexpr uint32_t TXSTS = (2 << 4);  ///< Tx status
        constexpr uint32_t TXDTS = (1U << 6);  ///< Tx data toggle synchronization
        constexpr uint32_t TXTC = (1U << 7);  ///< Tx transaction completed
        constexpr uint32_t EXF = (1U << 8);  ///< Endpoint extend function
        constexpr uint32_t TRANS_TYPE = (2 << 9);  ///< Transfer type
        constexpr uint32_t SETUPTC = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t RXSTS = (2 << 12);  ///< Rx Status
        constexpr uint32_t RXDTS = (1U << 14);  ///< Rx data toggle synchronization
        constexpr uint32_t RXTC = (1U << 15);  ///< Rx transaction completed
    }

    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t CSRST = (1U << 0);  ///< Core soft reset
        constexpr uint32_t DISUSB = (1U << 1);  ///< Disable usb phy
        constexpr uint32_t LPM = (1U << 2);  ///< Low power mode
        constexpr uint32_t SSP = (1U << 3);  ///< Soft suspend config
        constexpr uint32_t GRESUME = (1U << 4);  ///< Generate resume request
        constexpr uint32_t LSOFIEN = (1U << 8);  ///< Lost start of frame interrupt enable
        constexpr uint32_t SOFIEN = (1U << 9);  ///< Start of frame interrupt enable
        constexpr uint32_t RSTIEN = (1U << 10);  ///< Bus reset interrupt enable
        constexpr uint32_t SPIEN = (1U << 11);  ///< Bus suspend mode interrupt enable
        constexpr uint32_t WKIEN = (1U << 12);  ///< Wakeup/Remote wakeup interrupt enable
        constexpr uint32_t BEIEN = (1U << 13);  ///< Bus error interrupt enable
        constexpr uint32_t UCFORIEN = (1U << 14);  ///< USB Core fifo overrun interrupt enable
        constexpr uint32_t TCIEN = (1U << 15);  ///< transmission completed interrupt enable
    }

    /// INTSTS Register bits
    namespace intsts_bits {
        constexpr uint32_t EPT_NUM = (4 << 0);  ///< Endpoint number
        constexpr uint32_t INOUT = (1U << 4);  ///< In/Out transaction
        constexpr uint32_t LSOF = (1U << 8);  ///< Lost start of frame
        constexpr uint32_t SOF = (1U << 9);  ///< start of frame
        constexpr uint32_t RST = (1U << 10);  ///< Bus reset
        constexpr uint32_t SP = (1U << 11);  ///< Bus suspend
        constexpr uint32_t WK = (1U << 12);  ///< Wakeup
        constexpr uint32_t BE = (1U << 13);  ///< Bus error
        constexpr uint32_t UCFOR = (1U << 14);  ///< USB core fifo overrun memory
        constexpr uint32_t TC = (1U << 15);  ///< transaction completed
    }

    /// SOFRNUM Register bits
    namespace sofrnum_bits {
        constexpr uint32_t SOFNUM = (11 << 0);  ///< Start of frame number
        constexpr uint32_t LSOFNUM = (2 << 11);  ///< Lost start of frame number
        constexpr uint32_t CLCK = (1U << 13);  ///< Connect locked
        constexpr uint32_t DMSTS = (1U << 14);  ///< DM status
        constexpr uint32_t DPSTS = (1U << 15);  ///< DP status
    }

    /// DEVADDR Register bits
    namespace devaddr_bits {
        constexpr uint32_t ADDR = (7 << 0);  ///< Host assign device address
        constexpr uint32_t CEN = (1U << 7);  ///< USB core enable
    }

    /// BUFTBL Register bits
    namespace buftbl_bits {
        constexpr uint32_t BTADDR = (13 << 3);  ///< Endpoint buffer table start address
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t SOFOUTEN = (1U << 0);  ///< SOF output enable
    }

}


} // namespace alloy::generated::at32f413xx_v2

#endif // ALLOY_GENERATED_AT32F413XX_V2_PERIPHERALS_HPP