/// Auto-generated code for R7FA6T2BD
/// Generated by Alloy Code Generator
/// Source: renesas_r7fa6t2bd.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 17:44:39
#ifndef ALLOY_GENERATED_R7FA6T2BD_PERIPHERALS_HPP
#define ALLOY_GENERATED_R7FA6T2BD_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::r7fa6t2bd {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_rmpu = true;
    constexpr uint32_t num_rmpu_instances = 1;
    constexpr bool has_tzf = true;
    constexpr uint32_t num_tzf_instances = 1;
    constexpr bool has_sram = true;
    constexpr uint32_t num_sram_instances = 1;
    constexpr bool has_bus = true;
    constexpr uint32_t num_bus_instances = 1;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 9;
    constexpr bool has_dtc = true;
    constexpr uint32_t num_dtc_instances = 1;
    constexpr bool has_icu = true;
    constexpr uint32_t num_icu_instances = 1;
    constexpr bool has_cache = true;
    constexpr uint32_t num_cache_instances = 1;
    constexpr bool has_cpscu = true;
    constexpr uint32_t num_cpscu_instances = 1;
    constexpr bool has_dbg = true;
    constexpr uint32_t num_dbg_instances = 1;
    constexpr bool has_fcache = true;
    constexpr uint32_t num_fcache_instances = 1;
    constexpr bool has_sysc = true;
    constexpr uint32_t num_sysc_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 7;
    constexpr bool has_pfs = true;
    constexpr uint32_t num_pfs_instances = 1;
    constexpr bool has_iirfa = true;
    constexpr uint32_t num_iirfa_instances = 1;
    constexpr bool has_tfu = true;
    constexpr uint32_t num_tfu_instances = 1;
    constexpr bool has_elc = true;
    constexpr uint32_t num_elc_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 2;
    constexpr bool has_cac = true;
    constexpr uint32_t num_cac_instances = 1;
    constexpr bool has_mstp = true;
    constexpr uint32_t num_mstp_instances = 1;
    constexpr bool has_kint = true;
    constexpr uint32_t num_kint_instances = 1;
    constexpr bool has_poeg = true;
    constexpr uint32_t num_poeg_instances = 1;
    constexpr bool has_can = true;
    constexpr uint32_t num_can_instances = 1;
    constexpr bool has_pscu = true;
    constexpr uint32_t num_pscu_instances = 1;
    constexpr bool has_agtw = true;
    constexpr uint32_t num_agtw_instances = 2;
    constexpr bool has_tsn = true;
    constexpr uint32_t num_tsn_instances = 1;
    constexpr bool has_acmphs0 = true;
    constexpr uint32_t num_acmphs0_instances = 1;
    constexpr bool has_acmphs1 = true;
    constexpr uint32_t num_acmphs1_instances = 1;
    constexpr bool has_acmphs2 = true;
    constexpr uint32_t num_acmphs2_instances = 1;
    constexpr bool has_acmphs3 = true;
    constexpr uint32_t num_acmphs3_instances = 1;
    constexpr bool has_crc = true;
    constexpr uint32_t num_crc_instances = 1;
    constexpr bool has_doc = true;
    constexpr uint32_t num_doc_instances = 1;
    constexpr bool has_sci = true;
    constexpr uint32_t num_sci_instances = 6;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 2;
    constexpr bool has_iic = true;
    constexpr uint32_t num_iic_instances = 2;
    constexpr bool has_iic0wu = true;
    constexpr uint32_t num_iic0wu_instances = 1;
    constexpr bool has_eccmb = true;
    constexpr uint32_t num_eccmb_instances = 1;
    constexpr bool has_gpt320 = true;
    constexpr uint32_t num_gpt320_instances = 1;
    constexpr bool has_gpt321 = true;
    constexpr uint32_t num_gpt321_instances = 1;
    constexpr bool has_gpt322 = true;
    constexpr uint32_t num_gpt322_instances = 1;
    constexpr bool has_gpt323 = true;
    constexpr uint32_t num_gpt323_instances = 1;
    constexpr bool has_gpt324 = true;
    constexpr uint32_t num_gpt324_instances = 1;
    constexpr bool has_gpt325 = true;
    constexpr uint32_t num_gpt325_instances = 1;
    constexpr bool has_gpt326 = true;
    constexpr uint32_t num_gpt326_instances = 1;
    constexpr bool has_gpt327 = true;
    constexpr uint32_t num_gpt327_instances = 1;
    constexpr bool has_gpt328 = true;
    constexpr uint32_t num_gpt328_instances = 1;
    constexpr bool has_gpt329 = true;
    constexpr uint32_t num_gpt329_instances = 1;
    constexpr bool has_gpt = true;
    constexpr uint32_t num_gpt_instances = 2;
    constexpr bool has_pdg = true;
    constexpr uint32_t num_pdg_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 1;
    constexpr bool has_dac = true;
    constexpr uint32_t num_dac_instances = 2;
    constexpr bool has_tsd = true;
    constexpr uint32_t num_tsd_instances = 1;
    constexpr bool has_flad = true;
    constexpr uint32_t num_flad_instances = 1;
    constexpr bool has_faci = true;
    constexpr uint32_t num_faci_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct rmpu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tzf_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sram_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bus_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 9;
    };
    template<>
    struct peripheral_count<struct dtc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct icu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct cache_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct cpscu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dbg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fcache_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sysc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 7;
    };
    template<>
    struct peripheral_count<struct pfs_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct iirfa_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tfu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct elc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct cac_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mstp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct kint_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct poeg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct can_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pscu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct agtw_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct tsn_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct acmphs0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct acmphs1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct acmphs2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct acmphs3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct doc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sci_tag> {
        static constexpr uint32_t value = 6;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct iic_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct iic0wu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct eccmb_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt320_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt321_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt322_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt323_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt324_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt325_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt326_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt327_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt328_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt329_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpt_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct pdg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dac_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct tsd_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct flad_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct faci_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 7;
    constexpr uint32_t max_gpio_pins = 112;  // 16 pins per port

    // USART-specific traits
}

// ============================================================================
// RMPU Peripheral
// ============================================================================

namespace rmpu {
    /// Base addresses
    constexpr uint32_t RMPU_BASE = 0x40000000;

    /// RMPU Register structure
    struct Registers {
        volatile uint32_t MMPUOAD;  ///< Offset: 0x00 - MMPU Operation After Detection Register
        volatile uint32_t MMPUOADPT;  ///< Offset: 0x04 - MMPU Operation After Detection Protect Register
        volatile uint32_t MMPUENDMAC;  ///< Offset: 0x100 - MMPU Enable Register for DMAC
        volatile uint32_t MMPUENPTDMAC;  ///< Offset: 0x104 - MMPU Enable Protect Register for DMAC
        volatile uint32_t MMPURPTDMAC;  ///< Offset: 0x108 - MMPU Regions Protect Register for DMAC
        volatile uint32_t MMPURPTDMAC_SEC;  ///< Offset: 0x10C - MMPU Regions Protect register for DMAC Secure
        volatile uint32_t MMPUACDMAC;  ///< Offset: 0x200 - MMPU Access Control Register for DMAC (renamed from MMPUACDMAC)
        volatile uint32_t MMPUSDMAC;  ///< Offset: 0x204 - MMPU Start Address Register for DMAC (renamed from MMPUSDMAC)
        volatile uint32_t MMPUEDMAC;  ///< Offset: 0x208 - MMPU End Address Register for DMAC (renamed from MMPUEDMAC)
    };

    /// Peripheral instances
    inline Registers* RMPU = reinterpret_cast<Registers*>(RMPU_BASE);

    // Bit definitions
    /// MMPUOAD Register bits
    namespace mmpuoad_bits {
        constexpr uint32_t OAD = (1U << 0);  ///< Operation after detection
        constexpr uint32_t KEY = (8 << 8);  ///< This bit enables or disables writes to the OAD bit.
    }

    /// MMPUOADPT Register bits
    namespace mmpuoadpt_bits {
        constexpr uint32_t PROTECT = (1U << 0);  ///< Protection of register
        constexpr uint32_t KEY = (8 << 8);  ///< Key code
    }

    /// MMPUENDMAC Register bits
    namespace mmpuendmac_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Bus Master MPU of DMAC enable
        constexpr uint32_t KEY = (8 << 8);  ///< These bits enable or disable writes to the ENABLE bit.
    }

    /// MMPUENPTDMAC Register bits
    namespace mmpuenptdmac_bits {
        constexpr uint32_t PROTECT = (1U << 0);  ///< Protection of register
        constexpr uint32_t KEY = (8 << 8);  ///< These bits enable or disable writes to the PROTECT bit.
    }

    /// MMPURPTDMAC Register bits
    namespace mmpurptdmac_bits {
        constexpr uint32_t PROTECT = (1U << 0);  ///< Protection of register
        constexpr uint32_t KEY = (8 << 8);  ///< These bits enable or disable writes to the PROTECT bit.
    }

    /// MMPURPTDMAC_SEC Register bits
    namespace mmpurptdmac_sec_bits {
        constexpr uint32_t PROTECT = (1U << 0);  ///< Protection of register
        constexpr uint32_t KEY = (8 << 8);  ///< These bits enable or disable writes to the PROTECT bit.
    }

    /// MMPUACDMAC Register bits
    namespace mmpuacdmac_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Region enable
        constexpr uint32_t RP = (1U << 1);  ///< Read protection
        constexpr uint32_t WP = (1U << 2);  ///< Write protection
    }

    /// MMPUSDMAC Register bits
    namespace mmpusdmac_bits {
        constexpr uint32_t MMPUS = (27 << 5);  ///< Region start address register
    }

    /// MMPUEDMAC Register bits
    namespace mmpuedmac_bits {
        constexpr uint32_t MMPUE = (27 << 5);  ///< Region end address register
    }

}

// ============================================================================
// TZF Peripheral
// ============================================================================

namespace tzf {
    /// Base addresses
    constexpr uint32_t TZF_BASE = 0x40000E00;

    /// TZF Register structure
    struct Registers {
        volatile uint32_t TZFOAD;  ///< Offset: 0x00 - TrustZone Filter Operation After Detection Register
        volatile uint32_t TZFPT;  ///< Offset: 0x04 - TrustZone Filter Protect Register
    };

    /// Peripheral instances
    inline Registers* TZF = reinterpret_cast<Registers*>(TZF_BASE);

    // Bit definitions
    /// TZFOAD Register bits
    namespace tzfoad_bits {
        constexpr uint32_t OAD = (1U << 0);  ///< Operation after detection
        constexpr uint32_t KEY = (8 << 8);  ///< KeyCode
    }

    /// TZFPT Register bits
    namespace tzfpt_bits {
        constexpr uint32_t PROTECT = (1U << 0);  ///< Protection of register
        constexpr uint32_t KEY = (8 << 8);  ///< KeyCode
    }

}

// ============================================================================
// SRAM Peripheral
// ============================================================================

namespace sram {
    /// Base addresses
    constexpr uint32_t SRAM_BASE = 0x40002000;

    /// SRAM Register structure
    struct Registers {
        volatile uint32_t PARIOAD;  ///< Offset: 0x00 - SRAM Parity Error Operation After Detection Register
        volatile uint32_t SRAMPRCR;  ///< Offset: 0x04 - SRAM Protection Register
        volatile uint32_t ECCMODE;  ///< Offset: 0xC0 - ECC Operating Mode Control Register
        volatile uint32_t ECC2STS;  ///< Offset: 0xC1 - ECC 2-Bit Error Status Register
        volatile uint32_t ECC1STSEN;  ///< Offset: 0xC2 - ECC 1-Bit Error Information Update Enable Register
        volatile uint32_t ECC1STS;  ///< Offset: 0xC3 - ECC 1-Bit Error Status Register
        volatile uint32_t ECCPRCR;  ///< Offset: 0xC4 - ECC Protection Register
        volatile uint32_t ECCPRCR2;  ///< Offset: 0xD0 - ECC Protection Register 2
        volatile uint32_t ECCETST;  ///< Offset: 0xD4 - ECC Test Control Register
        volatile uint32_t ECCOAD;  ///< Offset: 0xD8 - SRAM ECC Error Operation After Detection Register
    };

    /// Peripheral instances
    inline Registers* SRAM = reinterpret_cast<Registers*>(SRAM_BASE);

    // Bit definitions
    /// PARIOAD Register bits
    namespace parioad_bits {
        constexpr uint32_t OAD = (1U << 0);  ///< Operation After Detection
    }

    /// SRAMPRCR Register bits
    namespace sramprcr_bits {
        constexpr uint32_t SRAMPRCR = (1U << 0);  ///< Register Write Control
        constexpr uint32_t KW = (7 << 1);  ///< Write Key Code
    }

    /// ECCMODE Register bits
    namespace eccmode_bits {
        constexpr uint32_t ECCMOD = (2 << 0);  ///< ECC Operating Mode Select
    }

    /// ECC2STS Register bits
    namespace ecc2sts_bits {
        constexpr uint32_t ECC2ERR = (1U << 0);  ///< ECC 2-Bit Error Status
    }

    /// ECC1STSEN Register bits
    namespace ecc1stsen_bits {
        constexpr uint32_t E1STSEN = (1U << 0);  ///< ECC 1-Bit Error Information Update Enable
    }

    /// ECC1STS Register bits
    namespace ecc1sts_bits {
        constexpr uint32_t ECC1ERR = (1U << 0);  ///< ECC 1-Bit Error Status
    }

    /// ECCPRCR Register bits
    namespace eccprcr_bits {
        constexpr uint32_t ECCPRCR = (1U << 0);  ///< Register Write Control
        constexpr uint32_t KW = (7 << 1);  ///< Write Key Code
    }

    /// ECCPRCR2 Register bits
    namespace eccprcr2_bits {
        constexpr uint32_t ECCPRCR2 = (1U << 0);  ///< Register Write Control
        constexpr uint32_t KW2 = (7 << 1);  ///< Write Key Code
    }

    /// ECCETST Register bits
    namespace eccetst_bits {
        constexpr uint32_t TSTBYP = (1U << 0);  ///< ECC Bypass Select
    }

    /// ECCOAD Register bits
    namespace eccoad_bits {
        constexpr uint32_t OAD = (1U << 0);  ///< Operation After Detection
    }

}

// ============================================================================
// BUS Peripheral
// ============================================================================

namespace bus {
    /// Base addresses
    constexpr uint32_t BUS_BASE = 0x40003000;

    /// BUS Register structure
    struct Registers {
        volatile uint32_t BUSSCNTFHBIU;  ///< Offset: 0x1100 - Slave Bus Control Register
        volatile uint32_t BUSSCNTFLBIU;  ///< Offset: 0x1104 - Slave Bus Control Register
        volatile uint32_t BUSSCNTS0BIU;  ///< Offset: 0x1110 - Slave Bus Control Register
        volatile uint32_t BUSSCNTPSBIU;  ///< Offset: 0x1120 - Slave Bus Control Register
        volatile uint32_t BUSSCNTPLBIU;  ///< Offset: 0x1130 - Slave Bus Control Register
        volatile uint32_t BUSSCNTPHBIU;  ///< Offset: 0x1134 - Slave Bus Control Register
        volatile uint32_t BUSERRADD;  ///< Offset: 0x1800 - BUS Error Address Register (renamed from BUSERRADD)
        volatile uint32_t BUSERRRW;  ///< Offset: 0x1804 - BUS Error Read Write Register (renamed from BUSERRRW)
        volatile uint32_t BTZFERRADD;  ///< Offset: 0x1900 - BUS TZF Error Address Register (renamed from BTZFERRADD)
        volatile uint32_t BTZFERRRW;  ///< Offset: 0x1904 - BUS TZF Error Read Write Register (renamed from BTZFERRRW)
        volatile uint32_t BUSERRSTAT;  ///< Offset: 0x1A00 - BUS Error Status Register %s (renamed from BUSERRSTAT)
        volatile uint32_t BUSERRCLR;  ///< Offset: 0x1A08 - BUS Error Clear Register %s (renamed from BUSERRCLR)
        volatile uint32_t DMACDTCERRSTAT;  ///< Offset: 0x1A24 - DMAC/DTC Error Status Register
        volatile uint32_t DMACDTCERRCLR;  ///< Offset: 0x1A2C - DMAC/DTC Error Clear Register
    };

    /// Peripheral instances
    inline Registers* BUS = reinterpret_cast<Registers*>(BUS_BASE);

    // Bit definitions
    /// BUSSCNTFHBIU Register bits
    namespace busscntfhbiu_bits {
        constexpr uint32_t ARBS = (2 << 0);  ///< Arbitration Select for two masters
    }

    /// BUSSCNTFLBIU Register bits
    namespace busscntflbiu_bits {
        constexpr uint32_t ARBS = (2 << 0);  ///< Arbitration Select for two masters
    }

    /// BUSSCNTS0BIU Register bits
    namespace busscnts0biu_bits {
        constexpr uint32_t ARBS = (2 << 0);  ///< Arbitration Select for two masters
    }

    /// BUSSCNTPSBIU Register bits
    namespace busscntpsbiu_bits {
        constexpr uint32_t ARBS = (1U << 0);  ///< Arbitration Select for two masters
    }

    /// BUSSCNTPLBIU Register bits
    namespace busscntplbiu_bits {
        constexpr uint32_t ARBS = (1U << 0);  ///< Arbitration Select for two masters
    }

    /// BUSSCNTPHBIU Register bits
    namespace busscntphbiu_bits {
        constexpr uint32_t ARBS = (1U << 0);  ///< Arbitration Select for two masters
    }

    /// BUSERRADD Register bits
    namespace buserradd_bits {
        constexpr uint32_t BERAD = (32 << 0);  ///< Bus Error Address
    }

    /// BUSERRRW Register bits
    namespace buserrrw_bits {
        constexpr uint32_t RWSTAT = (1U << 0);  ///< Error Access Read/Write Status
    }

    /// BTZFERRADD Register bits
    namespace btzferradd_bits {
        constexpr uint32_t BTZFERAD = (32 << 0);  ///< Bus TrustZone Filter Error Address
    }

    /// BTZFERRRW Register bits
    namespace btzferrrw_bits {
        constexpr uint32_t TRWSTAT = (1U << 0);  ///< TrustZone filter error access Read/Write Status
    }

    /// BUSERRSTAT Register bits
    namespace buserrstat_bits {
        constexpr uint32_t SLERRSTAT = (1U << 0);  ///< Slave bus Error Status
        constexpr uint32_t STERRSTAT = (1U << 1);  ///< Slave TrustZone filter Error Status
        constexpr uint32_t MMERRSTAT = (1U << 3);  ///< Master MPU Error Status
        constexpr uint32_t ILERRSTAT = (1U << 4);  ///< Illegal address access Error Status
    }

    /// BUSERRCLR Register bits
    namespace buserrclr_bits {
        constexpr uint32_t SLERRCLR = (1U << 0);  ///< Slave bus Error Clear
        constexpr uint32_t STERRCLR = (1U << 1);  ///< Slave TrustZone filter Error Clear
        constexpr uint32_t MMERRCLR = (1U << 3);  ///< Master MPU Error Clear
        constexpr uint32_t ILERRCLR = (1U << 4);  ///< Illegal Address Access Error Clear
    }

    /// DMACDTCERRSTAT Register bits
    namespace dmacdtcerrstat_bits {
        constexpr uint32_t MTERRSTAT = (1U << 0);  ///< Master TrustZone Filter Error Status
    }

    /// DMACDTCERRCLR Register bits
    namespace dmacdtcerrclr_bits {
        constexpr uint32_t MTERRCLR = (1U << 0);  ///< Master TrustZone filter Error Clear
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAC0_BASE = 0x40005000;
    constexpr uint32_t DMAC1_BASE = 0x40005040;
    constexpr uint32_t DMAC2_BASE = 0x40005080;
    constexpr uint32_t DMAC3_BASE = 0x400050C0;
    constexpr uint32_t DMAC4_BASE = 0x40005100;
    constexpr uint32_t DMAC5_BASE = 0x40005140;
    constexpr uint32_t DMAC6_BASE = 0x40005180;
    constexpr uint32_t DMAC7_BASE = 0x400051C0;
    constexpr uint32_t DMA_BASE = 0x40005200;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t DMSAR;  ///< Offset: 0x00 - DMA Source Address Register
        volatile uint32_t DMDAR;  ///< Offset: 0x04 - DMA Destination Address Register
        volatile uint32_t DMCRA;  ///< Offset: 0x08 - DMA Transfer Count Register
        volatile uint32_t DMCRB;  ///< Offset: 0x0C - DMA Block Transfer Count Register
        volatile uint32_t DMTMD;  ///< Offset: 0x10 - DMA Transfer Mode Register
        volatile uint32_t DMINT;  ///< Offset: 0x13 - DMA Interrupt Setting Register
        volatile uint32_t DMAMD;  ///< Offset: 0x14 - DMA Address Mode Register
        volatile uint32_t DMOFR;  ///< Offset: 0x18 - DMA Offset Register
        volatile uint32_t DMCNT;  ///< Offset: 0x1C - DMA Transfer Enable Register
        volatile uint32_t DMREQ;  ///< Offset: 0x1D - DMA Software Start Register
        volatile uint32_t DMSTS;  ///< Offset: 0x1E - DMA Status Register
        volatile uint32_t DMSRR;  ///< Offset: 0x20 - DMA Source Reload Address Register
        volatile uint32_t DMDRR;  ///< Offset: 0x24 - DMA Destination Reload Address Register
        volatile uint32_t DMSBS;  ///< Offset: 0x28 - DMA Source Buffer Size Register
        volatile uint32_t DMDBS;  ///< Offset: 0x2C - DMA Destination Buffer Size Register
    };

    /// Peripheral instances
    inline Registers* DMAC0 = reinterpret_cast<Registers*>(DMAC0_BASE);
    inline Registers* DMAC1 = reinterpret_cast<Registers*>(DMAC1_BASE);
    inline Registers* DMAC2 = reinterpret_cast<Registers*>(DMAC2_BASE);
    inline Registers* DMAC3 = reinterpret_cast<Registers*>(DMAC3_BASE);
    inline Registers* DMAC4 = reinterpret_cast<Registers*>(DMAC4_BASE);
    inline Registers* DMAC5 = reinterpret_cast<Registers*>(DMAC5_BASE);
    inline Registers* DMAC6 = reinterpret_cast<Registers*>(DMAC6_BASE);
    inline Registers* DMAC7 = reinterpret_cast<Registers*>(DMAC7_BASE);
    inline Registers* DMA = reinterpret_cast<Registers*>(DMA_BASE);

    // Bit definitions
    /// DMCRA Register bits
    namespace dmcra_bits {
        constexpr uint32_t DMCRAL = (16 << 0);  ///< Lower bits of transfer count
        constexpr uint32_t DMCRAH = (10 << 16);  ///< Upper bits of transfer count
    }

    /// DMCRB Register bits
    namespace dmcrb_bits {
        constexpr uint32_t DMCRBL = (16 << 0);  ///< Functions as a number of block, repeat or repeat-block transfer counter.
        constexpr uint32_t DMCRBH = (16 << 16);  ///< Specifies the number of block, repeat or repeat-block transfer operations.
    }

    /// DMTMD Register bits
    namespace dmtmd_bits {
        constexpr uint32_t DCTG = (2 << 0);  ///< Transfer Request Source Select
        constexpr uint32_t SZ = (2 << 8);  ///< Transfer Data Size Select
        constexpr uint32_t TKP = (1U << 10);  ///< Transfer Keeping
        constexpr uint32_t DTS = (2 << 12);  ///< Repeat Area Select
        constexpr uint32_t MD = (2 << 14);  ///< Transfer Mode Select
    }

    /// DMINT Register bits
    namespace dmint_bits {
        constexpr uint32_t DARIE = (1U << 0);  ///< Destination Address Extended Repeat Area Overflow Interrupt Enable
        constexpr uint32_t SARIE = (1U << 1);  ///< Source Address Extended Repeat Area Overflow Interrupt Enable
        constexpr uint32_t RPTIE = (1U << 2);  ///< Repeat Size End Interrupt Enable
        constexpr uint32_t ESIE = (1U << 3);  ///< Transfer Escape End Interrupt Enable
        constexpr uint32_t DTIE = (1U << 4);  ///< Transfer End Interrupt Enable
    }

    /// DMAMD Register bits
    namespace dmamd_bits {
        constexpr uint32_t DARA = (5 << 0);  ///< Destination Address Extended Repeat Area
        constexpr uint32_t DADR = (1U << 5);  ///< Destination Address Update Select After Reload
        constexpr uint32_t DM = (2 << 6);  ///< Destination Address Update Mode
        constexpr uint32_t SARA = (5 << 8);  ///< Source Address Extended Repeat Area
        constexpr uint32_t SADR = (1U << 13);  ///< Source Address Update Select After Reload
        constexpr uint32_t SM = (2 << 14);  ///< Source Address Update Mode
    }

    /// DMCNT Register bits
    namespace dmcnt_bits {
        constexpr uint32_t DTE = (1U << 0);  ///< DMA Transfer Enable
    }

    /// DMREQ Register bits
    namespace dmreq_bits {
        constexpr uint32_t SWREQ = (1U << 0);  ///< DMA Software Start
        constexpr uint32_t CLRS = (1U << 4);  ///< DMA Software Start Bit Auto Clear Select
    }

    /// DMSTS Register bits
    namespace dmsts_bits {
        constexpr uint32_t ESIF = (1U << 0);  ///< Transfer Escape End Interrupt Flag
        constexpr uint32_t DTIF = (1U << 4);  ///< Transfer End Interrupt Flag
        constexpr uint32_t ACT = (1U << 7);  ///< DMAC Active Flag
    }

    /// DMSBS Register bits
    namespace dmsbs_bits {
        constexpr uint32_t DMSBSL = (16 << 0);  ///< Functions as data transfer counter in repeat-block transfer mode
        constexpr uint32_t DMSBSH = (16 << 16);  ///< Specifies the repeat-area size in repeat-block transfer mode
    }

    /// DMDBS Register bits
    namespace dmdbs_bits {
        constexpr uint32_t DMDBSL = (16 << 0);  ///< Functions as data transfer counter in repeat-block transfer mode.
        constexpr uint32_t DMDBSH = (16 << 16);  ///< Specifies the repeat-area size in repeat-block transfer mode.
    }

}

// ============================================================================
// DTC Peripheral
// ============================================================================

namespace dtc {
    /// Base addresses
    constexpr uint32_t DTC_BASE = 0x40005400;

    /// DTC Register structure
    struct Registers {
        volatile uint32_t DTCCR;  ///< Offset: 0x00 - DTC Control Register
        volatile uint32_t DTCVBR;  ///< Offset: 0x04 - DTC Vector Base Register
        volatile uint32_t DTCST;  ///< Offset: 0x0C - DTC Module Start Register
        volatile uint32_t DTCSTS;  ///< Offset: 0x0E - DTC Status Register
        volatile uint32_t DTCCR_SEC;  ///< Offset: 0x10 - DTC Control Register for secure Region
        volatile uint32_t DTCVBR_SEC;  ///< Offset: 0x14 - DTC Vector Base Register for secure Region
        volatile uint32_t DTEVR;  ///< Offset: 0x20 - DTC Error Vector Register
    };

    /// Peripheral instances
    inline Registers* DTC = reinterpret_cast<Registers*>(DTC_BASE);

    // Bit definitions
    /// DTCCR Register bits
    namespace dtccr_bits {
        constexpr uint32_t RRS = (1U << 4);  ///< DTC Transfer Information Read Skip Enable
    }

    /// DTCST Register bits
    namespace dtcst_bits {
        constexpr uint32_t DTCST = (1U << 0);  ///< DTC Module Start
    }

    /// DTCSTS Register bits
    namespace dtcsts_bits {
        constexpr uint32_t VECN = (8 << 0);  ///< DTC-Activating Vector Number Monitoring
        constexpr uint32_t ACT = (1U << 15);  ///< DTC Active Flag
    }

    /// DTCCR_SEC Register bits
    namespace dtccr_sec_bits {
        constexpr uint32_t RRS = (1U << 4);  ///< DTC Transfer Information Read Skip Enable for Secure
    }

    /// DTEVR Register bits
    namespace dtevr_bits {
        constexpr uint32_t DTEV = (8 << 0);  ///< DTC Error Vector Number
        constexpr uint32_t DTEVSAM = (1U << 8);  ///< DTC Error Vector Number SA Monitor
        constexpr uint32_t DTESTA = (1U << 16);  ///< DTC Error Status Flag
    }

}

// ============================================================================
// ICU Peripheral
// ============================================================================

namespace icu {
    /// Base addresses
    constexpr uint32_t ICU_BASE = 0x40006000;

    /// ICU Register structure
    struct Registers {
        volatile uint32_t IRQCR;  ///< Offset: 0x00 - IRQ Control Register %s (renamed from IRQCR)
        volatile uint32_t NMICR;  ///< Offset: 0x100 - NMI Pin Interrupt Control Register
        volatile uint32_t NMIER;  ///< Offset: 0x120 - Non-Maskable Interrupt Enable Register
        volatile uint32_t NMICLR;  ///< Offset: 0x130 - Non-Maskable Interrupt Status Clear Register
        volatile uint32_t NMISR;  ///< Offset: 0x140 - Non-Maskable Interrupt Status Register
        volatile uint32_t WUPEN0;  ///< Offset: 0x1A0 - Wake Up Interrupt Enable Register 0
        volatile uint32_t SELSR0;  ///< Offset: 0x200 - SYS Event Link Setting Register
        volatile uint32_t DELSR;  ///< Offset: 0x280 - DMAC Event Link Setting Register %s (renamed from DELSR)
        volatile uint32_t IELSR;  ///< Offset: 0x300 - ICU Event Link Setting Register %s (renamed from IELSR)
    };

    /// Peripheral instances
    inline Registers* ICU = reinterpret_cast<Registers*>(ICU_BASE);

    // Bit definitions
    /// IRQCR Register bits
    namespace irqcr_bits {
        constexpr uint32_t IRQMD = (2 << 0);  ///< IRQi Detection Sense Select
        constexpr uint32_t FCLKSEL = (2 << 4);  ///< IRQi Digital Filter Sampling Clock Select
        constexpr uint32_t FLTEN = (1U << 7);  ///< IRQi Digital Filter Enable
    }

    /// NMICR Register bits
    namespace nmicr_bits {
        constexpr uint32_t NMIMD = (1U << 0);  ///< NMI Detection Set
        constexpr uint32_t NFCLKSEL = (2 << 4);  ///< NMI Digital Filter Sampling Clock Select
        constexpr uint32_t NFLTEN = (1U << 7);  ///< NMI Digital Filter Enable
    }

    /// NMIER Register bits
    namespace nmier_bits {
        constexpr uint32_t IWDTEN = (1U << 0);  ///< IWDT Underflow/Refresh Error Interrupt Enable
        constexpr uint32_t WDTEN = (1U << 1);  ///< WDT Underflow/Refresh Error Interrupt Enable
        constexpr uint32_t LVD1EN = (1U << 2);  ///< Voltage monitor 1 Interrupt Enable
        constexpr uint32_t LVD2EN = (1U << 3);  ///< Voltage monitor 2 Interrupt Enable
        constexpr uint32_t OSTEN = (1U << 6);  ///< Oscillation Stop Detection Interrupt Enable
        constexpr uint32_t NMIEN = (1U << 7);  ///< NMI Pin Interrupt Enable
        constexpr uint32_t RPEEN = (1U << 8);  ///< SRAM Parity Error Interrupt Enable
        constexpr uint32_t RECCEN = (1U << 9);  ///< SRAM ECC Error Interrupt Enable
        constexpr uint32_t BUSMEN = (1U << 11);  ///< Bus Master MPU Error Interrupt Enable
        constexpr uint32_t TZFEN = (1U << 13);  ///< Disabled
        constexpr uint32_t CPEEN = (1U << 15);  ///< Disabled
    }

    /// NMICLR Register bits
    namespace nmiclr_bits {
        constexpr uint32_t IWDTCLR = (1U << 0);  ///< IWDT Underflow/Refresh Error Interrupt Status Flag Clear
        constexpr uint32_t WDTCLR = (1U << 1);  ///< WDT Underflow/Refresh Error Interrupt Status Flag Clear
        constexpr uint32_t LVD1CLR = (1U << 2);  ///< Voltage Monitor 1 Interrupt Status Flag Clear
        constexpr uint32_t LVD2CLR = (1U << 3);  ///< Voltage Monitor 2 Interrupt Status Flag Clear
        constexpr uint32_t OSTCLR = (1U << 6);  ///< Oscillation Stop Detection Interrupt Status Flag Clear
        constexpr uint32_t NMICLR = (1U << 7);  ///< NMI Pin Interrupt Status Flag Clear
        constexpr uint32_t RPECLR = (1U << 8);  ///< SRAM Parity Error Interrupt Status Flag Clear
        constexpr uint32_t RECCCLR = (1U << 9);  ///< SRAM ECC Error Interrupt Status Flag Clear
        constexpr uint32_t BUSMCLR = (1U << 11);  ///< Bus Master MPU Error Interrupt Status Flag Clear
        constexpr uint32_t TZFCLR = (1U << 13);  ///< No effect
        constexpr uint32_t CPECLR = (1U << 15);  ///< No effect
    }

    /// NMISR Register bits
    namespace nmisr_bits {
        constexpr uint32_t IWDTST = (1U << 0);  ///< IWDT Underflow/Refresh Error Interrupt Status Flag
        constexpr uint32_t WDTST = (1U << 1);  ///< WDT Underflow/Refresh Error Interrupt Status Flag
        constexpr uint32_t LVD1ST = (1U << 2);  ///< Voltage Monitor 1 Interrupt Status Flag
        constexpr uint32_t LVD2ST = (1U << 3);  ///< Voltage Monitor 2 Interrupt Status Flag
        constexpr uint32_t OSTST = (1U << 6);  ///< Oscillation Stop Detection Interrupt Status Flag
        constexpr uint32_t NMIST = (1U << 7);  ///< NMI Pin Interrupt Status Flag
        constexpr uint32_t RPEST = (1U << 8);  ///< SRAM Parity Error Interrupt Status Flag
        constexpr uint32_t RECCST = (1U << 9);  ///< SRAM ECC Error Interrupt Status Flag
        constexpr uint32_t BUSMST = (1U << 11);  ///< Bus Master MPU Error Interrupt Status Flag
        constexpr uint32_t TZFST = (1U << 13);  ///< Interrupt not requested
        constexpr uint32_t CPEST = (1U << 15);  ///< Interrupt not requested
    }

    /// WUPEN0 Register bits
    namespace wupen0_bits {
        constexpr uint32_t IRQWUPEN = (16 << 0);  ///< IRQn Interrupt Software Standby/Snooze Mode Returns Enable bit (n = 0 to 15)
        constexpr uint32_t IWDTWUPEN = (1U << 16);  ///< IWDT Interrupt Software Standby/Snooze Mode Returns Enable bit
        constexpr uint32_t KEYWUPEN = (1U << 17);  ///< Key interrupt S/W standby returns enable bit
        constexpr uint32_t LVD1WUPEN = (1U << 18);  ///< LVD1 Interrupt Software Standby/Snooze Mode Returns Enable bit
        constexpr uint32_t LVD2WUPEN = (1U << 19);  ///< LVD2 Interrupt Software Standby/Snooze Mode Returns Enable bit
        constexpr uint32_t AGT1UDWUPEN = (1U << 28);  ///< AGT1 Underflow Interrupt Software Standby/Snooze Mode Returns Enable bit
        constexpr uint32_t AGT1CAWUPEN = (1U << 29);  ///< AGT1 Compare Match A Interrupt Software Standby/Snooze Mode Returns Enable bit
        constexpr uint32_t AGT1CBWUPEN = (1U << 30);  ///< AGT1 Compare Match B Interrupt Software Standby/Snooze Mode Returns Enable bit
        constexpr uint32_t IIC0WUPEN = (1U << 31);  ///< IIC0 Address Match Interrupt Software Standby/Snooze Mode Returns Enable bit
    }

    /// DELSR Register bits
    namespace delsr_bits {
        constexpr uint32_t DELS = (9 << 0);  ///< DMAC Event Link Select
        constexpr uint32_t IR = (1U << 16);  ///< DMAC Activation Request Status Flag
    }

}

// ============================================================================
// CACHE Peripheral
// ============================================================================

namespace cache {
    /// Base addresses
    constexpr uint32_t CACHE_BASE = 0x40007000;

    /// CACHE Register structure
    struct Registers {
        volatile uint32_t CCACTL;  ///< Offset: 0x00 - C-Cache Control Register
        volatile uint32_t CCAFCT;  ///< Offset: 0x04 - C-Cache Flush Control Register
        volatile uint32_t CCALCF;  ///< Offset: 0x08 - C-Cache Line Configuration Register
        volatile uint32_t SCACTL;  ///< Offset: 0x40 - S-Cache Control Register
        volatile uint32_t SCAFCT;  ///< Offset: 0x44 - S-Cache Flush Control Register
        volatile uint32_t SCALCF;  ///< Offset: 0x48 - S-Cache Line Configuration Register
        volatile uint32_t CAPOAD;  ///< Offset: 0x200 - Cache Parity Error Operation After Detection Register
        volatile uint32_t CAPRCR;  ///< Offset: 0x204 - Cache Protection Register
    };

    /// Peripheral instances
    inline Registers* CACHE = reinterpret_cast<Registers*>(CACHE_BASE);

    // Bit definitions
    /// CCACTL Register bits
    namespace ccactl_bits {
        constexpr uint32_t ENC = (1U << 0);  ///< C-Cache Enable
    }

    /// CCAFCT Register bits
    namespace ccafct_bits {
        constexpr uint32_t FC = (1U << 0);  ///< C-Cache Flush
    }

    /// CCALCF Register bits
    namespace ccalcf_bits {
        constexpr uint32_t CC = (2 << 0);  ///< C-Cache Line Size
    }

    /// SCACTL Register bits
    namespace scactl_bits {
        constexpr uint32_t ENS = (1U << 0);  ///< S-Cache Enable
    }

    /// SCAFCT Register bits
    namespace scafct_bits {
        constexpr uint32_t FS = (1U << 0);  ///< S-Cache Flush
    }

    /// SCALCF Register bits
    namespace scalcf_bits {
        constexpr uint32_t CS = (2 << 0);  ///< S-Cache Line Size
    }

    /// CAPOAD Register bits
    namespace capoad_bits {
        constexpr uint32_t OAD = (1U << 0);  ///< Operation after Detection
    }

    /// CAPRCR Register bits
    namespace caprcr_bits {
        constexpr uint32_t PRCR = (1U << 0);  ///< Register Write Control
        constexpr uint32_t KW = (7 << 1);  ///< Write key code
    }

}

// ============================================================================
// CPSCU Peripheral
// ============================================================================

namespace cpscu {
    /// Base addresses
    constexpr uint32_t CPSCU_BASE = 0x40008000;

    /// CPSCU Register structure
    struct Registers {
        volatile uint32_t CSAR;  ///< Offset: 0x00 - Cache Security Attribution Register
        volatile uint32_t SRAMSAR;  ///< Offset: 0x10 - SRAM Security Attribution Register
        volatile uint32_t STBRAMSAR;  ///< Offset: 0x14 - Standby RAM memory Security Attribution Register
        volatile uint32_t DTCSAR;  ///< Offset: 0x30 - DTC Controller Security Attribution Register
        volatile uint32_t DMACSAR;  ///< Offset: 0x34 - DMAC Controller Security Attribution Register
        volatile uint32_t ICUSARA;  ///< Offset: 0x40 - Interrupt Controller Unit Security Attribution Register A
        volatile uint32_t ICUSARB;  ///< Offset: 0x44 - Interrupt Controller Unit Security Attribution Register B
        volatile uint32_t ICUSARC;  ///< Offset: 0x48 - Interrupt Controller Unit Security Attribution Register C
        volatile uint32_t ICUSARD;  ///< Offset: 0x4C - Interrupt Controller Unit Security Attribution Register D
        volatile uint32_t ICUSARE;  ///< Offset: 0x50 - Interrupt Controller Unit Security Attribution Register E
        volatile uint32_t ICUSARG;  ///< Offset: 0x70 - Interrupt Controller Unit Security Attribution Register G
        volatile uint32_t ICUSARH;  ///< Offset: 0x74 - Interrupt Controller Unit Security Attribution Register H
        volatile uint32_t ICUSARI;  ///< Offset: 0x78 - Interrupt Controller Unit Security Attribution Register I
        volatile uint32_t BUSSARA;  ///< Offset: 0x100 - BUS Security Attribution Register A
        volatile uint32_t BUSSARB;  ///< Offset: 0x104 - BUS Security Attribution Register B
        volatile uint32_t MMPUSARA;  ///< Offset: 0x130 - Master Memory Protection Unit Security Attribution Register A
        volatile uint32_t MMPUSARB;  ///< Offset: 0x134 - Master Memory Protection Unit Security Attribution Register B
        volatile uint32_t TZFSAR;  ///< Offset: 0x180 - TrustZone Filter Security Attribution Register
        volatile uint32_t CPUDSAR;  ///< Offset: 0x1B0 - CPU Debug Security Attribution Register
    };

    /// Peripheral instances
    inline Registers* CPSCU = reinterpret_cast<Registers*>(CPSCU_BASE);

    // Bit definitions
    /// CSAR Register bits
    namespace csar_bits {
        constexpr uint32_t CACHESA = (1U << 0);  ///< Security Attributes of Registers for Cache Control
        constexpr uint32_t CACHELSA = (1U << 1);  ///< Security Attributes of Registers for Cache Line Configuration
        constexpr uint32_t CACHEESA = (1U << 2);  ///< Security Attributes of Registers for Cache Error
    }

    /// SRAMSAR Register bits
    namespace sramsar_bits {
        constexpr uint32_t SRAMSA0 = (1U << 0);  ///< Security attributes of registers for SRAM Protection
        constexpr uint32_t SRAMSA2 = (1U << 2);  ///< Security attributes of registers for ECC Relation
    }

    /// STBRAMSAR Register bits
    namespace stbramsar_bits {
        constexpr uint32_t NSBSTBR = (4 << 0);  ///< Security attributes of each region for Standby RAM
    }

    /// DTCSAR Register bits
    namespace dtcsar_bits {
        constexpr uint32_t DTCSTSA = (1U << 0);  ///< DTC Security Attribution
    }

    /// DMACSAR Register bits
    namespace dmacsar_bits {
        constexpr uint32_t DMASTSA = (1U << 0);  ///< DMAST Security Attribution
    }

    /// ICUSARA Register bits
    namespace icusara_bits {
        constexpr uint32_t SAIRQCR00 = (1U << 0);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR01 = (1U << 1);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR02 = (1U << 2);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR03 = (1U << 3);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR04 = (1U << 4);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR05 = (1U << 5);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR06 = (1U << 6);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR07 = (1U << 7);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR08 = (1U << 8);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR09 = (1U << 9);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR10 = (1U << 10);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR11 = (1U << 11);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR12 = (1U << 12);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR13 = (1U << 13);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR14 = (1U << 14);  ///< Security attributes of registers for the IRQCRn register
        constexpr uint32_t SAIRQCR15 = (1U << 15);  ///< Security attributes of registers for the IRQCRn register
    }

    /// ICUSARB Register bits
    namespace icusarb_bits {
        constexpr uint32_t SANMI = (1U << 0);  ///< Security attributes of registers for nonmaskable interrupt
    }

    /// ICUSARC Register bits
    namespace icusarc_bits {
        constexpr uint32_t SADMAC0 = (1U << 0);  ///< Security attributes of registers for DMAC channel
        constexpr uint32_t SADMAC1 = (1U << 1);  ///< Security attributes of registers for DMAC channel
        constexpr uint32_t SADMAC2 = (1U << 2);  ///< Security attributes of registers for DMAC channel
        constexpr uint32_t SADMAC3 = (1U << 3);  ///< Security attributes of registers for DMAC channel
        constexpr uint32_t SADMAC4 = (1U << 4);  ///< Security attributes of registers for DMAC channel
        constexpr uint32_t SADMAC5 = (1U << 5);  ///< Security attributes of registers for DMAC channel
        constexpr uint32_t SADMAC6 = (1U << 6);  ///< Security attributes of registers for DMAC channel
        constexpr uint32_t SADMAC7 = (1U << 7);  ///< Security attributes of registers for DMAC channel
    }

    /// ICUSARD Register bits
    namespace icusard_bits {
        constexpr uint32_t SASELSR0 = (1U << 0);  ///< Security attributes of registers for SELSR0
    }

    /// ICUSARE Register bits
    namespace icusare_bits {
        constexpr uint32_t SAIWDTWUP = (1U << 16);  ///< Security attributes of registers for WUPEN0.b16
        constexpr uint32_t SAKEYWUP = (1U << 17);  ///< Security attributes of registers for WUPEN0.b17
        constexpr uint32_t SALVD1WUP = (1U << 18);  ///< Security attributes of registers for WUPEN0.b18
        constexpr uint32_t SALVD2WUP = (1U << 19);  ///< Security attributes of registers for WUPEN0.b19
        constexpr uint32_t SAAGT1UDWUP = (1U << 28);  ///< Security attributes of registers for WUPEN0.b28
        constexpr uint32_t SAAGT1CAWUP = (1U << 29);  ///< Security attributes of registers for WUPEN0.b29
        constexpr uint32_t SAAGT1CBWUP = (1U << 30);  ///< Security attributes of registers for WUPEN0.b30
        constexpr uint32_t SAIIC0WUP = (1U << 31);  ///< Security attributes of registers for WUPEN0.b31
    }

    /// ICUSARG Register bits
    namespace icusarg_bits {
        constexpr uint32_t SAIELSR00 = (1U << 0);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR01 = (1U << 1);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR02 = (1U << 2);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR03 = (1U << 3);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR04 = (1U << 4);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR05 = (1U << 5);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR06 = (1U << 6);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR07 = (1U << 7);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR08 = (1U << 8);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR09 = (1U << 9);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR10 = (1U << 10);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR11 = (1U << 11);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR12 = (1U << 12);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR13 = (1U << 13);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR14 = (1U << 14);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR15 = (1U << 15);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR16 = (1U << 16);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR17 = (1U << 17);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR18 = (1U << 18);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR19 = (1U << 19);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR20 = (1U << 20);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR21 = (1U << 21);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR22 = (1U << 22);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR23 = (1U << 23);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR24 = (1U << 24);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR25 = (1U << 25);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR26 = (1U << 26);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR27 = (1U << 27);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR28 = (1U << 28);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR29 = (1U << 29);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR30 = (1U << 30);  ///< Security attributes of registers for IELSR31 to IELSR0
        constexpr uint32_t SAIELSR31 = (1U << 31);  ///< Security attributes of registers for IELSR31 to IELSR0
    }

    /// ICUSARH Register bits
    namespace icusarh_bits {
        constexpr uint32_t SAIELSR32 = (1U << 0);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR33 = (1U << 1);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR34 = (1U << 2);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR35 = (1U << 3);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR36 = (1U << 4);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR37 = (1U << 5);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR38 = (1U << 6);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR39 = (1U << 7);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR40 = (1U << 8);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR41 = (1U << 9);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR42 = (1U << 10);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR43 = (1U << 11);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR44 = (1U << 12);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR45 = (1U << 13);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR46 = (1U << 14);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR47 = (1U << 15);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR48 = (1U << 16);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR49 = (1U << 17);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR50 = (1U << 18);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR51 = (1U << 19);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR52 = (1U << 20);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR53 = (1U << 21);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR54 = (1U << 22);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR55 = (1U << 23);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR56 = (1U << 24);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR57 = (1U << 25);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR58 = (1U << 26);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR59 = (1U << 27);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR60 = (1U << 28);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR61 = (1U << 29);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR62 = (1U << 30);  ///< Security attributes of registers for IELSR63 to IELSR32
        constexpr uint32_t SAIELSR63 = (1U << 31);  ///< Security attributes of registers for IELSR63 to IELSR32
    }

    /// ICUSARI Register bits
    namespace icusari_bits {
        constexpr uint32_t SAIELSR64 = (1U << 0);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR65 = (1U << 1);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR66 = (1U << 2);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR67 = (1U << 3);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR68 = (1U << 4);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR69 = (1U << 5);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR70 = (1U << 6);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR71 = (1U << 7);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR72 = (1U << 8);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR73 = (1U << 9);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR74 = (1U << 10);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR75 = (1U << 11);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR76 = (1U << 12);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR77 = (1U << 13);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR78 = (1U << 14);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR79 = (1U << 15);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR80 = (1U << 16);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR81 = (1U << 17);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR82 = (1U << 18);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR83 = (1U << 19);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR84 = (1U << 20);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR85 = (1U << 21);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR86 = (1U << 22);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR87 = (1U << 23);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR88 = (1U << 24);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR89 = (1U << 25);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR90 = (1U << 26);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR91 = (1U << 27);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR92 = (1U << 28);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR93 = (1U << 29);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR94 = (1U << 30);  ///< Security attributes of registers for IELSR95 to IELSR64
        constexpr uint32_t SAIELSR95 = (1U << 31);  ///< Security attributes of registers for IELSR95 to IELSR64
    }

    /// BUSSARA Register bits
    namespace bussara_bits {
        constexpr uint32_t BUSSA0 = (1U << 0);  ///< BUS Security Attribution A0
    }

    /// BUSSARB Register bits
    namespace bussarb_bits {
        constexpr uint32_t BUSSB0 = (1U << 0);  ///< BUS Security Attribution B0
    }

    /// MMPUSARA Register bits
    namespace mmpusara_bits {
        constexpr uint32_t MMPUASAn = (8 << 0);  ///< MMPUA Security Attribution (n = 0 to 7)
    }

    /// MMPUSARB Register bits
    namespace mmpusarb_bits {
        constexpr uint32_t MMPUBSA0 = (1U << 0);  ///< MMPUB Security Attribution
    }

    /// TZFSAR Register bits
    namespace tzfsar_bits {
        constexpr uint32_t TZFSA0 = (1U << 0);  ///< Security attributes of registers for TrustZone Filter
    }

    /// CPUDSAR Register bits
    namespace cpudsar_bits {
        constexpr uint32_t CPUDSA0 = (1U << 0);  ///< CPU Debug Security Attribution 0
    }

}

// ============================================================================
// DBG Peripheral
// ============================================================================

namespace dbg {
    /// Base addresses
    constexpr uint32_t DBG_BASE = 0x4001B000;

    /// DBG Register structure
    struct Registers {
        volatile uint32_t DBGSTR;  ///< Offset: 0x00 - Debug Status Register
        volatile uint32_t DBGSTOPCR;  ///< Offset: 0x10 - Debug Stop Control Register
    };

    /// Peripheral instances
    inline Registers* DBG = reinterpret_cast<Registers*>(DBG_BASE);

    // Bit definitions
    /// DBGSTR Register bits
    namespace dbgstr_bits {
        constexpr uint32_t CDBGPWRUPREQ = (1U << 28);  ///< Debug power-up request
        constexpr uint32_t CDBGPWRUPACK = (1U << 29);  ///< Debug power-up acknowledge
    }

    /// DBGSTOPCR Register bits
    namespace dbgstopcr_bits {
        constexpr uint32_t DBGSTOP_IWDT = (1U << 0);  ///< Mask bit for IWDT reset/interrupt in the OCD run mode
        constexpr uint32_t DBGSTOP_WDT = (1U << 1);  ///< Mask bit for WDT reset/interrupt in the OCD run mode
        constexpr uint32_t DBGSTOP_LVD0 = (1U << 16);  ///< Mask bit for LVD0 reset
        constexpr uint32_t DBGSTOP_LVD1 = (1U << 17);  ///< Mask bit for LVD1 reset/interrupt
        constexpr uint32_t DBGSTOP_LVD2 = (1U << 18);  ///< Mask bit for LVD2 reset/interrupt
        constexpr uint32_t DBGSTOP_RPER = (1U << 24);  ///< Mask bit for SRAM parity error reset/interrupt
        constexpr uint32_t DBGSTOP_RECCR = (1U << 25);  ///< Mask bit for SRAM ECC error reset/interrupt
        constexpr uint32_t DBGSTOP_CPER = (1U << 31);  ///< Mask bit for Cache SRAM parity error reset/interrupt
    }

}

// ============================================================================
// FCACHE Peripheral
// ============================================================================

namespace fcache {
    /// Base addresses
    constexpr uint32_t FCACHE_BASE = 0x4001C100;

    /// FCACHE Register structure
    struct Registers {
        volatile uint32_t FCACHEE;  ///< Offset: 0x00 - Flash Cache Enable Register
        volatile uint32_t FCACHEIV;  ///< Offset: 0x04 - Flash Cache Invalidate Register
        volatile uint32_t FLWT;  ///< Offset: 0x1C - Flash Wait Cycle Register
        volatile uint32_t FSAR;  ///< Offset: 0x40 - Flash Security Attribution Register
    };

    /// Peripheral instances
    inline Registers* FCACHE = reinterpret_cast<Registers*>(FCACHE_BASE);

    // Bit definitions
    /// FCACHEE Register bits
    namespace fcachee_bits {
        constexpr uint32_t FCACHEEN = (1U << 0);  ///< Flash Cache Enable
    }

    /// FCACHEIV Register bits
    namespace fcacheiv_bits {
        constexpr uint32_t FCACHEIV = (1U << 0);  ///< Flash Cache Invalidate
    }

    /// FLWT Register bits
    namespace flwt_bits {
        constexpr uint32_t FLWT = (3 << 0);  ///< Flash Wait Cycle
    }

    /// FSAR Register bits
    namespace fsar_bits {
        constexpr uint32_t FLWTSA = (1U << 0);  ///< FLWT Security Attribution
        constexpr uint32_t FCKMHZSA = (1U << 8);  ///< FCKMHZ Security Attribution
    }

}

// ============================================================================
// SYSC Peripheral
// ============================================================================

namespace sysc {
    /// Base addresses
    constexpr uint32_t SYSC_BASE = 0x4001E000;

    /// SYSC Register structure
    struct Registers {
        volatile uint32_t SBYCR;  ///< Offset: 0x0C - Standby Control Register
        volatile uint32_t SCKDIVCR;  ///< Offset: 0x20 - System Clock Division Control Register
        volatile uint32_t SCKSCR;  ///< Offset: 0x26 - System Clock Source Control Register
        volatile uint32_t PLLCCR;  ///< Offset: 0x28 - PLL Clock Control Register
        volatile uint32_t PLLCR;  ///< Offset: 0x2A - PLL Control Register
        volatile uint32_t MOSCCR;  ///< Offset: 0x32 - Main Clock Oscillator Control Register
        volatile uint32_t HOCOCR;  ///< Offset: 0x36 - High-Speed On-Chip Oscillator Control Register
        volatile uint32_t MOCOCR;  ///< Offset: 0x38 - Middle-Speed On-Chip Oscillator Control Register
        volatile uint32_t OSCSF;  ///< Offset: 0x3C - Oscillation Stabilization Flag Register
        volatile uint32_t CKOCR;  ///< Offset: 0x3E - Clock Out Control Register
        volatile uint32_t TRCKCR;  ///< Offset: 0x3F - Trace Clock Control Register
        volatile uint32_t OSTDCR;  ///< Offset: 0x40 - Oscillation Stop Detection Control Register
        volatile uint32_t OSTDSR;  ///< Offset: 0x41 - Oscillation Stop Detection Status Register
        volatile uint32_t PLL2CCR;  ///< Offset: 0x48 - PLL2 Clock Control Register
        volatile uint32_t PLL2CR;  ///< Offset: 0x4A - PLL2 Control Register
        volatile uint32_t MOCOUTCR;  ///< Offset: 0x61 - MOCO User Trimming Control Register
        volatile uint32_t HOCOUTCR;  ///< Offset: 0x62 - HOCO User Trimming Control Register
        volatile uint32_t SCISPICKDIVCR;  ///< Offset: 0x6D - SCI SPI Clock Division Control Register
        volatile uint32_t CANFDCKDIVCR;  ///< Offset: 0x6E - CANFD Clock Division Control Register
        volatile uint32_t GPTCKDIVCR;  ///< Offset: 0x6F - GPT Clock Division Control Register
        volatile uint32_t IICCKDIVCR;  ///< Offset: 0x70 - IIC Clock Division Control Register
        volatile uint32_t SCISPICKCR;  ///< Offset: 0x75 - SCI SPI Clock Control Register
        volatile uint32_t CANFDCKCR;  ///< Offset: 0x76 - CANFD Clock Control Register
        volatile uint32_t GPTCKCR;  ///< Offset: 0x77 - GPT Clock Control Register
        volatile uint32_t IICCKCR;  ///< Offset: 0x78 - IIC Clock Control Register
        volatile uint32_t SNZCR;  ///< Offset: 0x92 - Snooze Control Register
        volatile uint32_t SNZEDCR0;  ///< Offset: 0x94 - Snooze End Control Register 0
        volatile uint32_t SNZREQCR0;  ///< Offset: 0x98 - Snooze Request Control Register 0
        volatile uint32_t OPCCR;  ///< Offset: 0xA0 - Operating Power Control Register
        volatile uint32_t MOSCWTCR;  ///< Offset: 0xA2 - Main Clock Oscillator Wait Control Register
        volatile uint32_t RSTSR1;  ///< Offset: 0xC0 - Reset Status Register 1
        volatile uint32_t LVD1CR1;  ///< Offset: 0xE0 - Voltage Monitor 1 Circuit Control Register
        volatile uint32_t LVD1SR;  ///< Offset: 0xE1 - Voltage Monitor 1 Circuit Status Register
        volatile uint32_t LVD2CR1;  ///< Offset: 0xE2 - Voltage Monitor 2 Circuit Control Register 1
        volatile uint32_t LVD2SR;  ///< Offset: 0xE3 - Voltage Monitor 2 Circuit Status Register
        volatile uint32_t CGFSAR;  ///< Offset: 0x3C0 - Clock Generation Function Security Attribute Register
        volatile uint32_t RSTSAR;  ///< Offset: 0x3C4 - Reset Security Attribution Register
        volatile uint32_t LPMSAR;  ///< Offset: 0x3C8 - Low Power Mode Security Attribution Register
        volatile uint32_t LVDSAR;  ///< Offset: 0x3CC - Low Voltage Detection Security Attribution Register
        volatile uint32_t DPFSAR;  ///< Offset: 0x3E0 - Deep Software Standby Interrupt Factor Security...
        volatile uint32_t PRCR;  ///< Offset: 0x3FE - Protect Register
        volatile uint32_t DPSBYCR;  ///< Offset: 0x400 - Deep Software Standby Control Register
        volatile uint32_t DPSWCR;  ///< Offset: 0x401 - Deep Software Standby Wait Control Register
        volatile uint32_t DPSIER0;  ///< Offset: 0x402 - Deep Software Standby Interrupt Enable Register 0
        volatile uint32_t DPSIER1;  ///< Offset: 0x403 - Deep Software Standby Interrupt Enable Register 1
        volatile uint32_t DPSIER2;  ///< Offset: 0x404 - Deep Software Standby Interrupt Enable Register 2
        volatile uint32_t DPSIFR0;  ///< Offset: 0x406 - Deep Software Standby Interrupt Flag Register 0
        volatile uint32_t DPSIFR1;  ///< Offset: 0x407 - Deep Software Standby Interrupt Flag Register 1
        volatile uint32_t DPSIFR2;  ///< Offset: 0x408 - Deep Software Standby Interrupt Flag Register 2
        volatile uint32_t DPSIEGR0;  ///< Offset: 0x40A - Deep Software Standby Interrupt Edge Register 0
        volatile uint32_t DPSIEGR1;  ///< Offset: 0x40B - Deep Software Standby Interrupt Edge Register 1
        volatile uint32_t DPSIEGR2;  ///< Offset: 0x40C - Deep Software Standby Interrupt Edge Register 2
        volatile uint32_t SYOCDCR;  ///< Offset: 0x40E - System Control OCD Control Register
        volatile uint32_t RSTSR0;  ///< Offset: 0x410 - Reset Status Register 0
        volatile uint32_t RSTSR2;  ///< Offset: 0x411 - Reset Status Register 2
        volatile uint32_t MOMCR;  ///< Offset: 0x413 - Main Clock Oscillator Mode Oscillation Control Register
        volatile uint32_t FWEPROR;  ///< Offset: 0x416 - Flash P/E Protect Register
        volatile uint32_t LVD1CMPCR;  ///< Offset: 0x417 - Voltage Monitoring 1 Comparator Control Register
        volatile uint32_t LVD2CMPCR;  ///< Offset: 0x418 - Voltage Monitoring 2 Comparator Control Register
        volatile uint32_t LVD1CR0;  ///< Offset: 0x41A - Voltage Monitor 1 Circuit Control Register 0
        volatile uint32_t LVD2CR0;  ///< Offset: 0x41B - Voltage Monitor 2 Circuit Control Register 0
        volatile uint32_t LOCOCR;  ///< Offset: 0x490 - Low-Speed On-Chip Oscillator Control Register
        volatile uint32_t LOCOUTCR;  ///< Offset: 0x492 - LOCO User Trimming Control Register
    };

    /// Peripheral instances
    inline Registers* SYSC = reinterpret_cast<Registers*>(SYSC_BASE);

    // Bit definitions
    /// SBYCR Register bits
    namespace sbycr_bits {
        constexpr uint32_t SSBY = (1U << 15);  ///< Software Standby Mode Select
    }

    /// SCKDIVCR Register bits
    namespace sckdivcr_bits {
        constexpr uint32_t PCKD = (3 << 0);  ///< Peripheral Module Clock D (PCLKD) Select
        constexpr uint32_t PCKC = (3 << 4);  ///< Peripheral Module Clock C (PCLKC) Select
        constexpr uint32_t PCKB = (3 << 8);  ///< Peripheral Module Clock B (PCLKB) Select
        constexpr uint32_t PCKA = (3 << 12);  ///< Peripheral Module Clock A (PCLKA) Select
        constexpr uint32_t RSV = (3 << 16);  ///< Reserved. Set these bits to the same value as PCKB[2:0].
        constexpr uint32_t ICK = (3 << 24);  ///< System Clock (ICLK) Select
        constexpr uint32_t FCK = (3 << 28);  ///< FlashIF Clock (FCLK) Select
    }

    /// SCKSCR Register bits
    namespace sckscr_bits {
        constexpr uint32_t CKSEL = (3 << 0);  ///< Clock Source Select
    }

    /// PLLCCR Register bits
    namespace pllccr_bits {
        constexpr uint32_t PLIDIV = (2 << 0);  ///< PLL Input Frequency Division Ratio Select
        constexpr uint32_t PLSRCSEL = (1U << 4);  ///< PLL Clock Source Select
        constexpr uint32_t PLLMUL = (6 << 8);  ///< PLL Frequency Multiplication Factor Select
    }

    /// PLLCR Register bits
    namespace pllcr_bits {
        constexpr uint32_t PLLSTP = (1U << 0);  ///< PLL Stop Control
    }

    /// MOSCCR Register bits
    namespace mosccr_bits {
        constexpr uint32_t MOSTP = (1U << 0);  ///< Main Clock Oscillator Stop
    }

    /// HOCOCR Register bits
    namespace hococr_bits {
        constexpr uint32_t HCSTP = (1U << 0);  ///< HOCO Stop
    }

    /// MOCOCR Register bits
    namespace mococr_bits {
        constexpr uint32_t MCSTP = (1U << 0);  ///< MOCO Stop
    }

    /// OSCSF Register bits
    namespace oscsf_bits {
        constexpr uint32_t HOCOSF = (1U << 0);  ///< HOCO Clock Oscillation Stabilization Flag
        constexpr uint32_t MOSCSF = (1U << 3);  ///< Main Clock Oscillation Stabilization Flag
        constexpr uint32_t PLLSF = (1U << 5);  ///< PLL Clock Oscillation Stabilization Flag
        constexpr uint32_t PLL2SF = (1U << 6);  ///< PLL2 Clock Oscillation Stabilization Flag
    }

    /// CKOCR Register bits
    namespace ckocr_bits {
        constexpr uint32_t CKOSEL = (3 << 0);  ///< Clock Out Source Select
        constexpr uint32_t CKODIV = (3 << 4);  ///< Clock Output Frequency Division Ratio
        constexpr uint32_t CKOEN = (1U << 7);  ///< Clock Out Enable
    }

    /// TRCKCR Register bits
    namespace trckcr_bits {
        constexpr uint32_t TRCK = (4 << 0);  ///< Trace Clock operating frequency select
        constexpr uint32_t TRCKEN = (1U << 7);  ///< Trace Clock operating Enable
    }

    /// OSTDCR Register bits
    namespace ostdcr_bits {
        constexpr uint32_t OSTDIE = (1U << 0);  ///< Oscillation Stop Detection Interrupt Enable
        constexpr uint32_t OSTDE = (1U << 7);  ///< Oscillation Stop Detection Function Enable
    }

    /// OSTDSR Register bits
    namespace ostdsr_bits {
        constexpr uint32_t OSTDF = (1U << 0);  ///< Oscillation Stop Detection Flag
    }

    /// PLL2CCR Register bits
    namespace pll2ccr_bits {
        constexpr uint32_t PL2IDIV = (2 << 0);  ///< PLL2 Input Frequency Division Ratio Select
        constexpr uint32_t PL2SRCSEL = (1U << 4);  ///< PLL2 Clock Source Select
        constexpr uint32_t PLL2MUL = (6 << 8);  ///< PLL2 Frequency Multiplication Factor Select
    }

    /// PLL2CR Register bits
    namespace pll2cr_bits {
        constexpr uint32_t PLL2STP = (1U << 0);  ///< PLL2 Stop Control
    }

    /// MOCOUTCR Register bits
    namespace mocoutcr_bits {
        constexpr uint32_t MOCOUTRM = (8 << 0);  ///< MOCO User Trimming
    }

    /// HOCOUTCR Register bits
    namespace hocoutcr_bits {
        constexpr uint32_t HOCOUTRM = (8 << 0);  ///< HOCO User Trimming
    }

    /// SCISPICKDIVCR Register bits
    namespace scispickdivcr_bits {
        constexpr uint32_t SCISPICKDIV = (3 << 0);  ///< SCI SPI Clock (SCISPICLK) Division Select
    }

    /// CANFDCKDIVCR Register bits
    namespace canfdckdivcr_bits {
        constexpr uint32_t CANFDCKDIV = (3 << 0);  ///< CANFD clock (CANFDCLK) Division Select
    }

    /// GPTCKDIVCR Register bits
    namespace gptckdivcr_bits {
        constexpr uint32_t GPTCKDIV = (3 << 0);  ///< GPT clock (GPTCLK) Division Select
    }

    /// IICCKDIVCR Register bits
    namespace iicckdivcr_bits {
        constexpr uint32_t IICCKDIV = (3 << 0);  ///< IIC clock (IICCLK) Division Select
    }

    /// SCISPICKCR Register bits
    namespace scispickcr_bits {
        constexpr uint32_t SCISPICKSEL = (3 << 0);  ///< SCI SPI Clock (SCISPICLK) Source Select
        constexpr uint32_t SCISPICKSREQ = (1U << 6);  ///< SCI SPI Clock (SCISPICLK) Switching Request
        constexpr uint32_t SCISPICKSRDY = (1U << 7);  ///< SCI SPI Clock (SCISPICLK) Switching Ready state flag
    }

    /// CANFDCKCR Register bits
    namespace canfdckcr_bits {
        constexpr uint32_t CANFDCKSEL = (3 << 0);  ///< CANFD clock (CANFDCLK) Source Select
        constexpr uint32_t CANFDCKSREQ = (1U << 6);  ///< CANFD clock (CANFDCLK) Switching Request
        constexpr uint32_t CANFDCKSRDY = (1U << 7);  ///< CANFD clock (CANFDCLK) Switching Ready state flag
    }

    /// GPTCKCR Register bits
    namespace gptckcr_bits {
        constexpr uint32_t GPTCKSEL = (3 << 0);  ///< GPT clock (GPTCLK) Source Select
        constexpr uint32_t GPTCKSREQ = (1U << 6);  ///< GPT clock (GPTCLK) Switching Request
        constexpr uint32_t GPTCKSRDY = (1U << 7);  ///< GPT clock (GPTCLK) Switching Ready state flag
    }

    /// IICCKCR Register bits
    namespace iicckcr_bits {
        constexpr uint32_t IICCKSEL = (3 << 0);  ///< IIC clock (IICCLK) Source Select
        constexpr uint32_t IICCKSREQ = (1U << 6);  ///< IIC clock (IICCLK) Switching Request
        constexpr uint32_t IICCKSRDY = (1U << 7);  ///< IIC clock (IICCLK) Switching Ready state flag
    }

    /// SNZCR Register bits
    namespace snzcr_bits {
        constexpr uint32_t RXDREQEN = (1U << 0);  ///< RXD0 Snooze Request Enable
        constexpr uint32_t SNZDTCEN = (1U << 1);  ///< DTC Enable in Snooze mode
        constexpr uint32_t SNZE = (1U << 7);  ///< Snooze mode Enable
    }

    /// SNZEDCR0 Register bits
    namespace snzedcr0_bits {
        constexpr uint32_t AGTUNFED = (1U << 0);  ///< AGT1 Underflow Snooze End Enable
        constexpr uint32_t DTCZRED = (1U << 1);  ///< Last DTC Transmission Completion Snooze End Enable
        constexpr uint32_t DTCNZRED = (1U << 2);  ///< Not Last DTC Transmission Completion Snooze End Enable
        constexpr uint32_t SCI0UMTED = (1U << 7);  ///< SCI0 Address Mismatch Snooze End Enable
    }

    /// SNZREQCR0 Register bits
    namespace snzreqcr0_bits {
        constexpr uint32_t SNZREQEN0 = (1U << 0);  ///< Enable IRQ0 pin snooze request
        constexpr uint32_t SNZREQEN1 = (1U << 1);  ///< Enable IRQ1 pin snooze request
        constexpr uint32_t SNZREQEN2 = (1U << 2);  ///< Enable IRQ2 pin snooze request
        constexpr uint32_t SNZREQEN3 = (1U << 3);  ///< Enable IRQ3 pin snooze request
        constexpr uint32_t SNZREQEN4 = (1U << 4);  ///< Enable IRQ4 pin snooze request
        constexpr uint32_t SNZREQEN5 = (1U << 5);  ///< Enable IRQ5 pin snooze request
        constexpr uint32_t SNZREQEN6 = (1U << 6);  ///< Enable IRQ6 pin snooze request
        constexpr uint32_t SNZREQEN7 = (1U << 7);  ///< Enable IRQ7 pin snooze request
        constexpr uint32_t SNZREQEN8 = (1U << 8);  ///< Enable IRQ8 pin snooze request
        constexpr uint32_t SNZREQEN9 = (1U << 9);  ///< Enable IRQ9 pin snooze request
        constexpr uint32_t SNZREQEN10 = (1U << 10);  ///< Enable IRQ10 pin snooze request
        constexpr uint32_t SNZREQEN11 = (1U << 11);  ///< Enable IRQ11 pin snooze request
        constexpr uint32_t SNZREQEN12 = (1U << 12);  ///< Enable IRQ12 pin snooze request
        constexpr uint32_t SNZREQEN13 = (1U << 13);  ///< Enable IRQ13 pin snooze request
        constexpr uint32_t SNZREQEN14 = (1U << 14);  ///< Enable IRQ14 pin snooze request
        constexpr uint32_t SNZREQEN15 = (1U << 15);  ///< Enable IRQ15 pin snooze request
        constexpr uint32_t SNZREQEN17 = (1U << 17);  ///< Enable Key Interrupt snooze request
        constexpr uint32_t SNZREQEN28 = (1U << 28);  ///< Enable AGT1 underflow snooze request
        constexpr uint32_t SNZREQEN29 = (1U << 29);  ///< Enable AGT1 compare match A snooze request
        constexpr uint32_t SNZREQEN30 = (1U << 30);  ///< Enable AGT1 compare match B snooze request
    }

    /// OPCCR Register bits
    namespace opccr_bits {
        constexpr uint32_t OPCM = (2 << 0);  ///< Operating Power Control Mode Select
        constexpr uint32_t OPCMTSF = (1U << 4);  ///< Operating Power Control Mode Transition Status Flag
    }

    /// MOSCWTCR Register bits
    namespace moscwtcr_bits {
        constexpr uint32_t MSTS = (4 << 0);  ///< Main Clock Oscillator Wait Time Setting
    }

    /// RSTSR1 Register bits
    namespace rstsr1_bits {
        constexpr uint32_t IWDTRF = (1U << 0);  ///< Independent Watchdog Timer Reset Detect Flag
        constexpr uint32_t WDTRF = (1U << 1);  ///< Watchdog Timer Reset Detect Flag
        constexpr uint32_t SWRF = (1U << 2);  ///< Software Reset Detect Flag
        constexpr uint32_t RPERF = (1U << 8);  ///< SRAM Parity Error Reset Detect Flag
        constexpr uint32_t REERF = (1U << 9);  ///< SRAM ECC Error Reset Detect Flag
        constexpr uint32_t BUSMRF = (1U << 11);  ///< Bus Master MPU Error Reset Detect Flag
        constexpr uint32_t TZERF = (1U << 13);  ///< TrustZone Error Reset Detect Flag
        constexpr uint32_t CPERF = (1U << 15);  ///< Cache Parity Error Reset Detect Flag
    }

    /// LVD1CR1 Register bits
    namespace lvd1cr1_bits {
        constexpr uint32_t IDTSEL = (2 << 0);  ///< Voltage Monitor 1 Interrupt Generation Condition Select
        constexpr uint32_t IRQSEL = (1U << 2);  ///< Voltage Monitor 1 Interrupt Type Select
    }

    /// LVD1SR Register bits
    namespace lvd1sr_bits {
        constexpr uint32_t DET = (1U << 0);  ///< Voltage Monitor 1 Voltage Variation Detection Flag
        constexpr uint32_t MON = (1U << 1);  ///< Voltage Monitor 1 Signal Monitor Flag
    }

    /// LVD2CR1 Register bits
    namespace lvd2cr1_bits {
        constexpr uint32_t IDTSEL = (2 << 0);  ///< Voltage Monitor 2 Interrupt Generation Condition Select
        constexpr uint32_t IRQSEL = (1U << 2);  ///< Voltage Monitor 2 Interrupt Type Select
    }

    /// LVD2SR Register bits
    namespace lvd2sr_bits {
        constexpr uint32_t DET = (1U << 0);  ///< Voltage Monitor 2 Voltage Variation Detection Flag
        constexpr uint32_t MON = (1U << 1);  ///< Voltage Monitor 2 Signal Monitor Flag
    }

    /// CGFSAR Register bits
    namespace cgfsar_bits {
        constexpr uint32_t NONSEC00 = (1U << 0);  ///< Non Secure Attribute bit 00
        constexpr uint32_t NONSEC02 = (1U << 2);  ///< Non Secure Attribute bit 02
        constexpr uint32_t NONSEC03 = (1U << 3);  ///< Non Secure Attribute bit 03
        constexpr uint32_t NONSEC04 = (1U << 4);  ///< Non Secure Attribute bit 04
        constexpr uint32_t NONSEC05 = (1U << 5);  ///< Non Secure Attribute bit 05
        constexpr uint32_t NONSEC06 = (1U << 6);  ///< Non Secure Attribute bit 06
        constexpr uint32_t NONSEC08 = (1U << 8);  ///< Non Secure Attribute bit 08
        constexpr uint32_t NONSEC09 = (1U << 9);  ///< Non Secure Attribute bit 09
        constexpr uint32_t NONSEC11 = (1U << 11);  ///< Non Secure Attribute bit 11
        constexpr uint32_t NONSEC17 = (1U << 17);  ///< Non Secure Attribute bit 17
        constexpr uint32_t NONSEC18 = (1U << 18);  ///< Non Secure Attribute bit 18
        constexpr uint32_t NONSEC19 = (1U << 19);  ///< Non Secure Attribute bit 19
        constexpr uint32_t NONSEC20 = (1U << 20);  ///< Non Secure Attribute bit 20
    }

    /// RSTSAR Register bits
    namespace rstsar_bits {
        constexpr uint32_t NONSEC0 = (1U << 0);  ///< Non Secure Attribute bit 0
        constexpr uint32_t NONSEC1 = (1U << 1);  ///< Non Secure Attribute bit 1
        constexpr uint32_t NONSEC2 = (1U << 2);  ///< Non Secure Attribute bit 2
    }

    /// LPMSAR Register bits
    namespace lpmsar_bits {
        constexpr uint32_t NONSEC0 = (1U << 0);  ///< Non Secure Attribute bit 0
        constexpr uint32_t NONSEC2 = (1U << 2);  ///< Non Secure Attribute bit 2
        constexpr uint32_t NONSEC4 = (1U << 4);  ///< Non Secure Attribute bit 4
        constexpr uint32_t NONSEC8 = (1U << 8);  ///< Non Secure Attribute bit 8
        constexpr uint32_t NONSEC9 = (1U << 9);  ///< Non Secure Attribute bit 9
    }

    /// LVDSAR Register bits
    namespace lvdsar_bits {
        constexpr uint32_t NONSEC0 = (1U << 0);  ///< Non Secure Attribute bit 0
        constexpr uint32_t NONSEC1 = (1U << 1);  ///< Non Secure Attribute bit 1
    }

    /// DPFSAR Register bits
    namespace dpfsar_bits {
        constexpr uint32_t DPFSA0 = (1U << 0);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 0 to 7)
        constexpr uint32_t DPFSA1 = (1U << 1);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 0 to 7)
        constexpr uint32_t DPFSA2 = (1U << 2);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 0 to 7)
        constexpr uint32_t DPFSA3 = (1U << 3);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 0 to 7)
        constexpr uint32_t DPFSA4 = (1U << 4);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 0 to 7)
        constexpr uint32_t DPFSA5 = (1U << 5);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 0 to 7)
        constexpr uint32_t DPFSA6 = (1U << 6);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 0 to 7)
        constexpr uint32_t DPFSA7 = (1U << 7);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 0 to 7)
        constexpr uint32_t DPFSA8 = (1U << 8);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 8 to 15)
        constexpr uint32_t DPFSA9 = (1U << 9);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 8 to 15)
        constexpr uint32_t DPFSA10 = (1U << 10);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 8 to 15)
        constexpr uint32_t DPFSA11 = (1U << 11);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 8 to 15)
        constexpr uint32_t DPFSA12 = (1U << 12);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 8 to 15)
        constexpr uint32_t DPFSA13 = (1U << 13);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 8 to 15)
        constexpr uint32_t DPFSA14 = (1U << 14);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 8 to 15)
        constexpr uint32_t DPFSA15 = (1U << 15);  ///< Deep Software Standby Interrupt Factor Security Attribute bit n (n = 8 to 15)
        constexpr uint32_t DPFSA16 = (1U << 16);  ///< Deep Software Standby Interrupt Factor Security Attribute bit 16
        constexpr uint32_t DPFSA17 = (1U << 17);  ///< Deep Software Standby Interrupt Factor Security Attribute bit 17
        constexpr uint32_t DPFSA20 = (1U << 20);  ///< Deep Software Standby Interrupt Factor Security Attribute bit 20
    }

    /// PRCR Register bits
    namespace prcr_bits {
        constexpr uint32_t PRC0 = (1U << 0);  ///< Enable writing to the registers related to the clock generation circuit
        constexpr uint32_t PRC1 = (1U << 1);  ///< Enable writing to the registers related to the low power modes
        constexpr uint32_t PRC3 = (1U << 3);  ///< Enable writing to the registers related to the LVD
        constexpr uint32_t PRC4 = (1U << 4);  ///< Disable writes
        constexpr uint32_t PRKEY = (8 << 8);  ///< PRC Key Code
    }

    /// DPSBYCR Register bits
    namespace dpsbycr_bits {
        constexpr uint32_t DEEPCUT = (2 << 0);  ///< Power-Supply Control
        constexpr uint32_t IOKEEP = (1U << 6);  ///< I/O Port Rentention
        constexpr uint32_t DPSBY = (1U << 7);  ///< Deep Software Standby
    }

    /// DPSWCR Register bits
    namespace dpswcr_bits {
        constexpr uint32_t WTSTS = (6 << 0);  ///< Deep Software Wait Standby Time Setting Bit
    }

    /// DPSIER0 Register bits
    namespace dpsier0_bits {
        constexpr uint32_t DIRQ0E = (1U << 0);  ///< IRQ0-DS Pin Enable
        constexpr uint32_t DIRQ1E = (1U << 1);  ///< IRQ1-DS Pin Enable
        constexpr uint32_t DIRQ2E = (1U << 2);  ///< IRQ2-DS Pin Enable
        constexpr uint32_t DIRQ3E = (1U << 3);  ///< IRQ3-DS Pin Enable
        constexpr uint32_t DIRQ4E = (1U << 4);  ///< IRQ4-DS Pin Enable
        constexpr uint32_t DIRQ5E = (1U << 5);  ///< IRQ5-DS Pin Enable
        constexpr uint32_t DIRQ6E = (1U << 6);  ///< IRQ6-DS Pin Enable
        constexpr uint32_t DIRQ7E = (1U << 7);  ///< IRQ7-DS Pin Enable
    }

    /// DPSIER1 Register bits
    namespace dpsier1_bits {
        constexpr uint32_t DIRQ8E = (1U << 0);  ///< IRQ8-DS Pin Enable
        constexpr uint32_t DIRQ9E = (1U << 1);  ///< IRQ9-DS Pin Enable
        constexpr uint32_t DIRQ10E = (1U << 2);  ///< IRQ10-DS Pin Enable
        constexpr uint32_t DIRQ11E = (1U << 3);  ///< IRQ11-DS Pin Enable
        constexpr uint32_t DIRQ12E = (1U << 4);  ///< IRQ12-DS Pin Enable
        constexpr uint32_t DIRQ13E = (1U << 5);  ///< IRQ13-DS Pin Enable
        constexpr uint32_t DIRQ14E = (1U << 6);  ///< IRQ14-DS Pin Enable
        constexpr uint32_t DIRQ15E = (1U << 7);  ///< IRQ15-DS Pin Enable
    }

    /// DPSIER2 Register bits
    namespace dpsier2_bits {
        constexpr uint32_t DLVD1IE = (1U << 0);  ///< LVD1 Deep Software Standby Cancel Signal Enable
        constexpr uint32_t DLVD2IE = (1U << 1);  ///< LVD2 Deep Software Standby Cancel Signal Enable
        constexpr uint32_t DNMIE = (1U << 4);  ///< NMI Pin Enable
    }

    /// DPSIFR0 Register bits
    namespace dpsifr0_bits {
        constexpr uint32_t DIRQ0F = (1U << 0);  ///< IRQ0-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ1F = (1U << 1);  ///< IRQ1-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ2F = (1U << 2);  ///< IRQ2-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ3F = (1U << 3);  ///< IRQ3-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ4F = (1U << 4);  ///< IRQ4-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ5F = (1U << 5);  ///< IRQ5-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ6F = (1U << 6);  ///< IRQ6-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ7F = (1U << 7);  ///< IRQ7-DS Pin Deep Software Standby Cancel Flag
    }

    /// DPSIFR1 Register bits
    namespace dpsifr1_bits {
        constexpr uint32_t DIRQ8F = (1U << 0);  ///< IRQ8-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ9F = (1U << 1);  ///< IRQ9-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ10F = (1U << 2);  ///< IRQ10-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ11F = (1U << 3);  ///< IRQ11-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ12F = (1U << 4);  ///< IRQ12-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ13F = (1U << 5);  ///< IRQ13-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ14F = (1U << 6);  ///< IRQ14-DS Pin Deep Software Standby Cancel Flag
        constexpr uint32_t DIRQ15F = (1U << 7);  ///< IRQ15-DS Pin Deep Software Standby Cancel Flag
    }

    /// DPSIFR2 Register bits
    namespace dpsifr2_bits {
        constexpr uint32_t DLVD1IF = (1U << 0);  ///< LVD1 Deep Software Standby Cancel Flag
        constexpr uint32_t DLVD2IF = (1U << 1);  ///< LVD2 Deep Software Standby Cancel Flag
        constexpr uint32_t DNMIF = (1U << 4);  ///< NMI Pin Deep Software Standby Cancel Flag
    }

    /// DPSIEGR0 Register bits
    namespace dpsiegr0_bits {
        constexpr uint32_t DIRQ0EG = (1U << 0);  ///< IRQ0-DS Pin Edge Select
        constexpr uint32_t DIRQ1EG = (1U << 1);  ///< IRQ1-DS Pin Edge Select
        constexpr uint32_t DIRQ2EG = (1U << 2);  ///< IRQ2-DS Pin Edge Select
        constexpr uint32_t DIRQ3EG = (1U << 3);  ///< IRQ3-DS Pin Edge Select
        constexpr uint32_t DIRQ4EG = (1U << 4);  ///< IRQ4-DS Pin Edge Select
        constexpr uint32_t DIRQ5EG = (1U << 5);  ///< IRQ5-DS Pin Edge Select
        constexpr uint32_t DIRQ6EG = (1U << 6);  ///< IRQ6-DS Pin Edge Select
        constexpr uint32_t DIRQ7EG = (1U << 7);  ///< IRQ7-DS Pin Edge Select
    }

    /// DPSIEGR1 Register bits
    namespace dpsiegr1_bits {
        constexpr uint32_t DIRQ8EG = (1U << 0);  ///< IRQ8-DS Pin Edge Select
        constexpr uint32_t DIRQ9EG = (1U << 1);  ///< IRQ9-DS Pin Edge Select
        constexpr uint32_t DIRQ10EG = (1U << 2);  ///< IRQ10-DS Pin Edge Select
        constexpr uint32_t DIRQ11EG = (1U << 3);  ///< IRQ11-DS Pin Edge Select
        constexpr uint32_t DIRQ12EG = (1U << 4);  ///< IRQ12-DS Pin Edge Select
        constexpr uint32_t DIRQ13EG = (1U << 5);  ///< IRQ13-DS Pin Edge Select
        constexpr uint32_t DIRQ14EG = (1U << 6);  ///< IRQ14-DS Pin Edge Select
        constexpr uint32_t DIRQ15EG = (1U << 7);  ///< IRQ15-DS Pin Edge Select
    }

    /// DPSIEGR2 Register bits
    namespace dpsiegr2_bits {
        constexpr uint32_t DLVD1EG = (1U << 0);  ///< LVD1 Edge Select
        constexpr uint32_t DLVD2EG = (1U << 1);  ///< LVD2 Edge Select
        constexpr uint32_t DNMIEG = (1U << 4);  ///< NMI Pin Edge Select
    }

    /// SYOCDCR Register bits
    namespace syocdcr_bits {
        constexpr uint32_t DOCDF = (1U << 0);  ///< Deep Software Standby OCD flag
        constexpr uint32_t DBGEN = (1U << 7);  ///< Debugger Enable bit
    }

    /// RSTSR0 Register bits
    namespace rstsr0_bits {
        constexpr uint32_t PORF = (1U << 0);  ///< Power-On Reset Detect Flag
        constexpr uint32_t LVD0RF = (1U << 1);  ///< Voltage Monitor 0 Reset Detect Flag
        constexpr uint32_t LVD1RF = (1U << 2);  ///< Voltage Monitor 1 Reset Detect Flag
        constexpr uint32_t LVD2RF = (1U << 3);  ///< Voltage Monitor 2 Reset Detect Flag
        constexpr uint32_t DPSRSTF = (1U << 7);  ///< Deep Software Standby Reset Detect Flag
    }

    /// RSTSR2 Register bits
    namespace rstsr2_bits {
        constexpr uint32_t CWSF = (1U << 0);  ///< Cold/Warm Start Determination Flag
    }

    /// MOMCR Register bits
    namespace momcr_bits {
        constexpr uint32_t MODRV = (2 << 4);  ///< Main Clock Oscillator Drive Capability 0 Switching
        constexpr uint32_t MOSEL = (1U << 6);  ///< Main Clock Oscillator Switching
    }

    /// FWEPROR Register bits
    namespace fwepror_bits {
        constexpr uint32_t FLWE = (2 << 0);  ///< Flash Programming and Erasure
    }

    /// LVD1CMPCR Register bits
    namespace lvd1cmpcr_bits {
        constexpr uint32_t LVD1LVL = (5 << 0);  ///< Voltage Detection 1 Level Select (Standard voltage during drop in voltage)
        constexpr uint32_t LVD1E = (1U << 7);  ///< Voltage Detection 1 Enable
    }

    /// LVD2CMPCR Register bits
    namespace lvd2cmpcr_bits {
        constexpr uint32_t LVD2LVL = (3 << 0);  ///< Voltage Detection 2 Level Select (Standard voltage during drop in voltage)
        constexpr uint32_t LVD2E = (1U << 7);  ///< Voltage Detection 2 Enable
    }

    /// LVD1CR0 Register bits
    namespace lvd1cr0_bits {
        constexpr uint32_t RIE = (1U << 0);  ///< Voltage Monitor 1 Interrupt/Reset Enable
        constexpr uint32_t DFDIS = (1U << 1);  ///< Voltage monitor 1 Digital Filter Disabled Mode Select
        constexpr uint32_t CMPE = (1U << 2);  ///< Voltage Monitor 1 Circuit Comparison Result Output Enable
        constexpr uint32_t FSAMP = (2 << 4);  ///< Sampling Clock Select
        constexpr uint32_t RI = (1U << 6);  ///< Voltage Monitor 1 Circuit Mode Select
        constexpr uint32_t RN = (1U << 7);  ///< Voltage Monitor 1 Reset Negate Select
    }

    /// LVD2CR0 Register bits
    namespace lvd2cr0_bits {
        constexpr uint32_t RIE = (1U << 0);  ///< Voltage Monitor 2 Interrupt/Reset Enable
        constexpr uint32_t DFDIS = (1U << 1);  ///< Voltage monitor 2 Digital Filter Disabled Mode Select
        constexpr uint32_t CMPE = (1U << 2);  ///< Voltage Monitor 2 Circuit Comparison Result Output Enable
        constexpr uint32_t FSAMP = (2 << 4);  ///< Sampling Clock Select
        constexpr uint32_t RI = (1U << 6);  ///< Voltage Monitor 2 Circuit Mode Select
        constexpr uint32_t RN = (1U << 7);  ///< Voltage Monitor 2 Reset Negate Select
    }

    /// LOCOCR Register bits
    namespace lococr_bits {
        constexpr uint32_t LCSTP = (1U << 0);  ///< LOCO Stop
    }

    /// LOCOUTCR Register bits
    namespace locoutcr_bits {
        constexpr uint32_t LOCOUTRM = (8 << 0);  ///< LOCO User Trimming
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t PORT0_BASE = 0x4001F000;
    constexpr uint32_t PORT2_BASE = 0x4001F040;
    constexpr uint32_t PORTA_BASE = 0x4001F140;
    constexpr uint32_t PORTB_BASE = 0x4001F160;
    constexpr uint32_t PORTC_BASE = 0x4001F180;
    constexpr uint32_t PORTD_BASE = 0x4001F1A0;
    constexpr uint32_t PORTE_BASE = 0x4001F1C0;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t PCNTR1;  ///< Offset: 0x00 - Port Control Register 1
        volatile uint32_t PDR;  ///< Offset: 0x00 - Port Control Register 1
        volatile uint32_t PODR;  ///< Offset: 0x02 - Port Control Register 1
        volatile uint32_t PCNTR2;  ///< Offset: 0x04 - Port Control Register 2
        volatile uint32_t PIDR;  ///< Offset: 0x04 - Port Control Register 2
        volatile uint32_t PCNTR3;  ///< Offset: 0x08 - Port Control Register 3
        volatile uint32_t POSR;  ///< Offset: 0x08 - Port Control Register 3
        volatile uint32_t PORR;  ///< Offset: 0x0A - Port Control Register 3
    };

    /// Peripheral instances
    inline Registers* PORT0 = reinterpret_cast<Registers*>(PORT0_BASE);
    inline Registers* PORT2 = reinterpret_cast<Registers*>(PORT2_BASE);
    inline Registers* PORTA = reinterpret_cast<Registers*>(PORTA_BASE);
    inline Registers* PORTB = reinterpret_cast<Registers*>(PORTB_BASE);
    inline Registers* PORTC = reinterpret_cast<Registers*>(PORTC_BASE);
    inline Registers* PORTD = reinterpret_cast<Registers*>(PORTD_BASE);
    inline Registers* PORTE = reinterpret_cast<Registers*>(PORTE_BASE);

    // Bit definitions
    /// PCNTR1 Register bits
    namespace pcntr1_bits {
        constexpr uint32_t PDR00 = (1U << 0);  ///< Pmn Direction
        constexpr uint32_t PDR01 = (1U << 1);  ///< Pmn Direction
        constexpr uint32_t PDR02 = (1U << 2);  ///< Pmn Direction
        constexpr uint32_t PDR03 = (1U << 3);  ///< Pmn Direction
        constexpr uint32_t PDR04 = (1U << 4);  ///< Pmn Direction
        constexpr uint32_t PDR05 = (1U << 5);  ///< Pmn Direction
        constexpr uint32_t PDR06 = (1U << 6);  ///< Pmn Direction
        constexpr uint32_t PDR07 = (1U << 7);  ///< Pmn Direction
        constexpr uint32_t PDR08 = (1U << 8);  ///< Pmn Direction
        constexpr uint32_t PDR09 = (1U << 9);  ///< Pmn Direction
        constexpr uint32_t PDR10 = (1U << 10);  ///< Pmn Direction
        constexpr uint32_t PDR11 = (1U << 11);  ///< Pmn Direction
        constexpr uint32_t PDR12 = (1U << 12);  ///< Pmn Direction
        constexpr uint32_t PDR13 = (1U << 13);  ///< Pmn Direction
        constexpr uint32_t PDR14 = (1U << 14);  ///< Pmn Direction
        constexpr uint32_t PDR15 = (1U << 15);  ///< Pmn Direction
        constexpr uint32_t PODR00 = (1U << 16);  ///< Pmn Output Data
        constexpr uint32_t PODR01 = (1U << 17);  ///< Pmn Output Data
        constexpr uint32_t PODR02 = (1U << 18);  ///< Pmn Output Data
        constexpr uint32_t PODR03 = (1U << 19);  ///< Pmn Output Data
        constexpr uint32_t PODR04 = (1U << 20);  ///< Pmn Output Data
        constexpr uint32_t PODR05 = (1U << 21);  ///< Pmn Output Data
        constexpr uint32_t PODR06 = (1U << 22);  ///< Pmn Output Data
        constexpr uint32_t PODR07 = (1U << 23);  ///< Pmn Output Data
        constexpr uint32_t PODR08 = (1U << 24);  ///< Pmn Output Data
        constexpr uint32_t PODR09 = (1U << 25);  ///< Pmn Output Data
        constexpr uint32_t PODR10 = (1U << 26);  ///< Pmn Output Data
        constexpr uint32_t PODR11 = (1U << 27);  ///< Pmn Output Data
        constexpr uint32_t PODR12 = (1U << 28);  ///< Pmn Output Data
        constexpr uint32_t PODR13 = (1U << 29);  ///< Pmn Output Data
        constexpr uint32_t PODR14 = (1U << 30);  ///< Pmn Output Data
        constexpr uint32_t PODR15 = (1U << 31);  ///< Pmn Output Data
    }

    /// PDR Register bits
    namespace pdr_bits {
        constexpr uint32_t PDR00 = (1U << 0);  ///< Pmn Direction
        constexpr uint32_t PDR01 = (1U << 1);  ///< Pmn Direction
        constexpr uint32_t PDR02 = (1U << 2);  ///< Pmn Direction
        constexpr uint32_t PDR03 = (1U << 3);  ///< Pmn Direction
        constexpr uint32_t PDR04 = (1U << 4);  ///< Pmn Direction
        constexpr uint32_t PDR05 = (1U << 5);  ///< Pmn Direction
        constexpr uint32_t PDR06 = (1U << 6);  ///< Pmn Direction
        constexpr uint32_t PDR07 = (1U << 7);  ///< Pmn Direction
        constexpr uint32_t PDR08 = (1U << 8);  ///< Pmn Direction
        constexpr uint32_t PDR09 = (1U << 9);  ///< Pmn Direction
        constexpr uint32_t PDR10 = (1U << 10);  ///< Pmn Direction
        constexpr uint32_t PDR11 = (1U << 11);  ///< Pmn Direction
        constexpr uint32_t PDR12 = (1U << 12);  ///< Pmn Direction
        constexpr uint32_t PDR13 = (1U << 13);  ///< Pmn Direction
        constexpr uint32_t PDR14 = (1U << 14);  ///< Pmn Direction
        constexpr uint32_t PDR15 = (1U << 15);  ///< Pmn Direction
    }

    /// PODR Register bits
    namespace podr_bits {
        constexpr uint32_t PODR00 = (1U << 0);  ///< Pmn Output Data
        constexpr uint32_t PODR01 = (1U << 1);  ///< Pmn Output Data
        constexpr uint32_t PODR02 = (1U << 2);  ///< Pmn Output Data
        constexpr uint32_t PODR03 = (1U << 3);  ///< Pmn Output Data
        constexpr uint32_t PODR04 = (1U << 4);  ///< Pmn Output Data
        constexpr uint32_t PODR05 = (1U << 5);  ///< Pmn Output Data
        constexpr uint32_t PODR06 = (1U << 6);  ///< Pmn Output Data
        constexpr uint32_t PODR07 = (1U << 7);  ///< Pmn Output Data
        constexpr uint32_t PODR08 = (1U << 8);  ///< Pmn Output Data
        constexpr uint32_t PODR09 = (1U << 9);  ///< Pmn Output Data
        constexpr uint32_t PODR10 = (1U << 10);  ///< Pmn Output Data
        constexpr uint32_t PODR11 = (1U << 11);  ///< Pmn Output Data
        constexpr uint32_t PODR12 = (1U << 12);  ///< Pmn Output Data
        constexpr uint32_t PODR13 = (1U << 13);  ///< Pmn Output Data
        constexpr uint32_t PODR14 = (1U << 14);  ///< Pmn Output Data
        constexpr uint32_t PODR15 = (1U << 15);  ///< Pmn Output Data
    }

    /// PCNTR2 Register bits
    namespace pcntr2_bits {
        constexpr uint32_t PIDR00 = (1U << 0);  ///< Pmn State
        constexpr uint32_t PIDR01 = (1U << 1);  ///< Pmn State
        constexpr uint32_t PIDR02 = (1U << 2);  ///< Pmn State
        constexpr uint32_t PIDR03 = (1U << 3);  ///< Pmn State
        constexpr uint32_t PIDR04 = (1U << 4);  ///< Pmn State
        constexpr uint32_t PIDR05 = (1U << 5);  ///< Pmn State
        constexpr uint32_t PIDR06 = (1U << 6);  ///< Pmn State
        constexpr uint32_t PIDR07 = (1U << 7);  ///< Pmn State
        constexpr uint32_t PIDR08 = (1U << 8);  ///< Pmn State
        constexpr uint32_t PIDR09 = (1U << 9);  ///< Pmn State
        constexpr uint32_t PIDR10 = (1U << 10);  ///< Pmn State
        constexpr uint32_t PIDR11 = (1U << 11);  ///< Pmn State
        constexpr uint32_t PIDR12 = (1U << 12);  ///< Pmn State
        constexpr uint32_t PIDR13 = (1U << 13);  ///< Pmn State
        constexpr uint32_t PIDR14 = (1U << 14);  ///< Pmn State
        constexpr uint32_t PIDR15 = (1U << 15);  ///< Pmn State
    }

    /// PIDR Register bits
    namespace pidr_bits {
        constexpr uint32_t PIDR00 = (1U << 0);  ///< Pmn State
        constexpr uint32_t PIDR01 = (1U << 1);  ///< Pmn State
        constexpr uint32_t PIDR02 = (1U << 2);  ///< Pmn State
        constexpr uint32_t PIDR03 = (1U << 3);  ///< Pmn State
        constexpr uint32_t PIDR04 = (1U << 4);  ///< Pmn State
        constexpr uint32_t PIDR05 = (1U << 5);  ///< Pmn State
        constexpr uint32_t PIDR06 = (1U << 6);  ///< Pmn State
        constexpr uint32_t PIDR07 = (1U << 7);  ///< Pmn State
        constexpr uint32_t PIDR08 = (1U << 8);  ///< Pmn State
        constexpr uint32_t PIDR09 = (1U << 9);  ///< Pmn State
        constexpr uint32_t PIDR10 = (1U << 10);  ///< Pmn State
        constexpr uint32_t PIDR11 = (1U << 11);  ///< Pmn State
        constexpr uint32_t PIDR12 = (1U << 12);  ///< Pmn State
        constexpr uint32_t PIDR13 = (1U << 13);  ///< Pmn State
        constexpr uint32_t PIDR14 = (1U << 14);  ///< Pmn State
        constexpr uint32_t PIDR15 = (1U << 15);  ///< Pmn State
    }

    /// PCNTR3 Register bits
    namespace pcntr3_bits {
        constexpr uint32_t POSR00 = (1U << 0);  ///< Pmn Output Set
        constexpr uint32_t POSR01 = (1U << 1);  ///< Pmn Output Set
        constexpr uint32_t POSR02 = (1U << 2);  ///< Pmn Output Set
        constexpr uint32_t POSR03 = (1U << 3);  ///< Pmn Output Set
        constexpr uint32_t POSR04 = (1U << 4);  ///< Pmn Output Set
        constexpr uint32_t POSR05 = (1U << 5);  ///< Pmn Output Set
        constexpr uint32_t POSR06 = (1U << 6);  ///< Pmn Output Set
        constexpr uint32_t POSR07 = (1U << 7);  ///< Pmn Output Set
        constexpr uint32_t POSR08 = (1U << 8);  ///< Pmn Output Set
        constexpr uint32_t POSR09 = (1U << 9);  ///< Pmn Output Set
        constexpr uint32_t POSR10 = (1U << 10);  ///< Pmn Output Set
        constexpr uint32_t POSR11 = (1U << 11);  ///< Pmn Output Set
        constexpr uint32_t POSR12 = (1U << 12);  ///< Pmn Output Set
        constexpr uint32_t POSR13 = (1U << 13);  ///< Pmn Output Set
        constexpr uint32_t POSR14 = (1U << 14);  ///< Pmn Output Set
        constexpr uint32_t POSR15 = (1U << 15);  ///< Pmn Output Set
        constexpr uint32_t PORR00 = (1U << 16);  ///< Pmn Output Reset
        constexpr uint32_t PORR01 = (1U << 17);  ///< Pmn Output Reset
        constexpr uint32_t PORR02 = (1U << 18);  ///< Pmn Output Reset
        constexpr uint32_t PORR03 = (1U << 19);  ///< Pmn Output Reset
        constexpr uint32_t PORR04 = (1U << 20);  ///< Pmn Output Reset
        constexpr uint32_t PORR05 = (1U << 21);  ///< Pmn Output Reset
        constexpr uint32_t PORR06 = (1U << 22);  ///< Pmn Output Reset
        constexpr uint32_t PORR07 = (1U << 23);  ///< Pmn Output Reset
        constexpr uint32_t PORR08 = (1U << 24);  ///< Pmn Output Reset
        constexpr uint32_t PORR09 = (1U << 25);  ///< Pmn Output Reset
        constexpr uint32_t PORR10 = (1U << 26);  ///< Pmn Output Reset
        constexpr uint32_t PORR11 = (1U << 27);  ///< Pmn Output Reset
        constexpr uint32_t PORR12 = (1U << 28);  ///< Pmn Output Reset
        constexpr uint32_t PORR13 = (1U << 29);  ///< Pmn Output Reset
        constexpr uint32_t PORR14 = (1U << 30);  ///< Pmn Output Reset
        constexpr uint32_t PORR15 = (1U << 31);  ///< Pmn Output Reset
    }

    /// POSR Register bits
    namespace posr_bits {
        constexpr uint32_t POSR00 = (1U << 0);  ///< Pmn Output Set
        constexpr uint32_t POSR01 = (1U << 1);  ///< Pmn Output Set
        constexpr uint32_t POSR02 = (1U << 2);  ///< Pmn Output Set
        constexpr uint32_t POSR03 = (1U << 3);  ///< Pmn Output Set
        constexpr uint32_t POSR04 = (1U << 4);  ///< Pmn Output Set
        constexpr uint32_t POSR05 = (1U << 5);  ///< Pmn Output Set
        constexpr uint32_t POSR06 = (1U << 6);  ///< Pmn Output Set
        constexpr uint32_t POSR07 = (1U << 7);  ///< Pmn Output Set
        constexpr uint32_t POSR08 = (1U << 8);  ///< Pmn Output Set
        constexpr uint32_t POSR09 = (1U << 9);  ///< Pmn Output Set
        constexpr uint32_t POSR10 = (1U << 10);  ///< Pmn Output Set
        constexpr uint32_t POSR11 = (1U << 11);  ///< Pmn Output Set
        constexpr uint32_t POSR12 = (1U << 12);  ///< Pmn Output Set
        constexpr uint32_t POSR13 = (1U << 13);  ///< Pmn Output Set
        constexpr uint32_t POSR14 = (1U << 14);  ///< Pmn Output Set
        constexpr uint32_t POSR15 = (1U << 15);  ///< Pmn Output Set
    }

    /// PORR Register bits
    namespace porr_bits {
        constexpr uint32_t PORR00 = (1U << 0);  ///< Pmn Output Reset
        constexpr uint32_t PORR01 = (1U << 1);  ///< Pmn Output Reset
        constexpr uint32_t PORR02 = (1U << 2);  ///< Pmn Output Reset
        constexpr uint32_t PORR03 = (1U << 3);  ///< Pmn Output Reset
        constexpr uint32_t PORR04 = (1U << 4);  ///< Pmn Output Reset
        constexpr uint32_t PORR05 = (1U << 5);  ///< Pmn Output Reset
        constexpr uint32_t PORR06 = (1U << 6);  ///< Pmn Output Reset
        constexpr uint32_t PORR07 = (1U << 7);  ///< Pmn Output Reset
        constexpr uint32_t PORR08 = (1U << 8);  ///< Pmn Output Reset
        constexpr uint32_t PORR09 = (1U << 9);  ///< Pmn Output Reset
        constexpr uint32_t PORR10 = (1U << 10);  ///< Pmn Output Reset
        constexpr uint32_t PORR11 = (1U << 11);  ///< Pmn Output Reset
        constexpr uint32_t PORR12 = (1U << 12);  ///< Pmn Output Reset
        constexpr uint32_t PORR13 = (1U << 13);  ///< Pmn Output Reset
        constexpr uint32_t PORR14 = (1U << 14);  ///< Pmn Output Reset
        constexpr uint32_t PORR15 = (1U << 15);  ///< Pmn Output Reset
    }

}

// ============================================================================
// PFS Peripheral
// ============================================================================

namespace pfs {
    /// Base addresses
    constexpr uint32_t PFS_B_BASE = 0x4001F800;

    /// PFS Register structure
    struct Registers {
        volatile uint32_t P00PFS;  ///< Offset: 0x00 - Port 00%s Pin Function Select Register (renamed from P00PFS)
        volatile uint32_t P00PFS_HA;  ///< Offset: 0x00 - Port 00%s Pin Function Select Register (renamed from P00PFS_HA)
        volatile uint32_t P00PFS_BY;  ///< Offset: 0x00 - Port 00%s Pin Function Select Register (renamed from P00PFS_BY)
        volatile uint32_t P002PFS;  ///< Offset: 0x08 - Port 002 Pin Function Select Register
        volatile uint32_t P002PFS_HA;  ///< Offset: 0x08 - Port 002 Pin Function Select Register
        volatile uint32_t P002PFS_BY;  ///< Offset: 0x08 - Port 002 Pin Function Select Register
        volatile uint32_t P201PFS;  ///< Offset: 0x84 - Port 201 Pin Function Select Register
        volatile uint32_t P201PFS_HA;  ///< Offset: 0x84 - Port 201 Pin Function Select Register
        volatile uint32_t P201PFS_BY;  ///< Offset: 0x84 - Port 201 Pin Function Select Register
        volatile uint32_t PA0PFS;  ///< Offset: 0x298 - Port A0%s Pin Function Select Register (renamed from PA0PFS)
        volatile uint32_t PA0PFS_HA;  ///< Offset: 0x298 - Port A0%s Pin Function Select Register (renamed from PA0PFS_HA)
        volatile uint32_t PA0PFS_BY;  ///< Offset: 0x298 - Port A0%s Pin Function Select Register (renamed from PA0PFS_BY)
        volatile uint32_t PA1PFS;  ///< Offset: 0x2B8 - Port A1%s Pin Function Select Register (renamed from PA1PFS)
        volatile uint32_t PA1PFS_HA;  ///< Offset: 0x2B8 - Port A1%s Pin Function Select Register (renamed from PA1PFS_HA)
        volatile uint32_t PA1PFS_BY;  ///< Offset: 0x2B8 - Port A1%s Pin Function Select Register (renamed from PA1PFS_BY)
        volatile uint32_t PA13PFS;  ///< Offset: 0x2B4 - Port A13 Pin Function Select Register
        volatile uint32_t PA13PFS_HA;  ///< Offset: 0x2B4 - Port A13 Pin Function Select Register
        volatile uint32_t PA13PFS_BY;  ///< Offset: 0x2B4 - Port A13 Pin Function Select Register
        volatile uint32_t PB0PFS;  ///< Offset: 0x2D0 - Port B0%s Pin Function Select Register (renamed from PB0PFS)
        volatile uint32_t PB0PFS_HA;  ///< Offset: 0x2D0 - Port B0%s Pin Function Select Register (renamed from PB0PFS_HA)
        volatile uint32_t PB0PFS_BY;  ///< Offset: 0x2D0 - Port B0%s Pin Function Select Register (renamed from PB0PFS_BY)
        volatile uint32_t PB02PFS;  ///< Offset: 0x2C8 - Port B02 Pin Function Select Register
        volatile uint32_t PB02PFS_HA;  ///< Offset: 0x2C8 - Port B02 Pin Function Select Register
        volatile uint32_t PB02PFS_BY;  ///< Offset: 0x2C8 - Port B02 Pin Function Select Register
        volatile uint32_t PB03PFS;  ///< Offset: 0x2CC - Port B03 Pin Function Select Register
        volatile uint32_t PB03PFS_HA;  ///< Offset: 0x2CC - Port B03 Pin Function Select Register
        volatile uint32_t PB03PFS_BY;  ///< Offset: 0x2CC - Port B03 Pin Function Select Register
        volatile uint32_t PB10PFS;  ///< Offset: 0x2E8 - Port B10 Pin Function Select Register
        volatile uint32_t PB10PFS_HA;  ///< Offset: 0x2E8 - Port B10 Pin Function Select Register
        volatile uint32_t PB10PFS_BY;  ///< Offset: 0x2E8 - Port B10 Pin Function Select Register
        volatile uint32_t PB1PFS;  ///< Offset: 0x2F0 - Port B1%s Pin Function Select Register (renamed from PB1PFS)
        volatile uint32_t PB1PFS_HA;  ///< Offset: 0x2F0 - Port B1%s Pin Function Select Register (renamed from PB1PFS_HA)
        volatile uint32_t PB1PFS_BY;  ///< Offset: 0x2F0 - Port B1%s Pin Function Select Register (renamed from PB1PFS_BY)
        volatile uint32_t PC0PFS;  ///< Offset: 0x300 - Port C0%s Pin Function Select Register (renamed from PC0PFS)
        volatile uint32_t PC0PFS_HA;  ///< Offset: 0x300 - Port C0%s Pin Function Select Register (renamed from PC0PFS_HA)
        volatile uint32_t PC0PFS_BY;  ///< Offset: 0x300 - Port C0%s Pin Function Select Register (renamed from PC0PFS_BY)
        volatile uint32_t PC1PFS;  ///< Offset: 0x328 - Port C1%s Pin Function Select Register (renamed from PC1PFS)
        volatile uint32_t PC1PFS_HA;  ///< Offset: 0x328 - Port C1%s Pin Function Select Register (renamed from PC1PFS_HA)
        volatile uint32_t PC1PFS_BY;  ///< Offset: 0x328 - Port C1%s Pin Function Select Register (renamed from PC1PFS_BY)
        volatile uint32_t PD0PFS;  ///< Offset: 0x340 - Port D0%s Pin Function Select Register (renamed from PD0PFS)
        volatile uint32_t PD0PFS_HA;  ///< Offset: 0x340 - Port D0%s Pin Function Select Register (renamed from PD0PFS_HA)
        volatile uint32_t PD0PFS_BY;  ///< Offset: 0x340 - Port D0%s Pin Function Select Register (renamed from PD0PFS_BY)
        volatile uint32_t PD1PFS;  ///< Offset: 0x368 - Port D1%s Pin Function Select Register (renamed from PD1PFS)
        volatile uint32_t PD1PFS_HA;  ///< Offset: 0x368 - Port D1%s Pin Function Select Register (renamed from PD1PFS_HA)
        volatile uint32_t PD1PFS_BY;  ///< Offset: 0x368 - Port D1%s Pin Function Select Register (renamed from PD1PFS_BY)
        volatile uint32_t PE0PFS;  ///< Offset: 0x3A0 - Port E0%s Pin Function Select Register (renamed from PE0PFS)
        volatile uint32_t PE0PFS_HA;  ///< Offset: 0x3A0 - Port E0%s Pin Function Select Register (renamed from PE0PFS_HA)
        volatile uint32_t PE0PFS_BY;  ///< Offset: 0x3A0 - Port E0%s Pin Function Select Register (renamed from PE0PFS_BY)
        volatile uint32_t PE1PFS;  ///< Offset: 0x3A8 - Port E1%s Pin Function Select Register (renamed from PE1PFS)
        volatile uint32_t PE1PFS_HA;  ///< Offset: 0x3A8 - Port E1%s Pin Function Select Register (renamed from PE1PFS_HA)
        volatile uint32_t PE1PFS_BY;  ///< Offset: 0x3A8 - Port E1%s Pin Function Select Register (renamed from PE1PFS_BY)
        volatile uint32_t PWPR;  ///< Offset: 0x50C - Write-Protect Register
        volatile uint32_t PWPRS;  ///< Offset: 0x514 - Write-Protect Register for Secure
        volatile uint32_t P0SAR;  ///< Offset: 0x530 - Port 0 Security Attribution register
        volatile uint32_t P2SAR;  ///< Offset: 0x538 - Port 2 Security Attribution register
        volatile uint32_t PASAR;  ///< Offset: 0x558 - Port A Security Attribution register
        volatile uint32_t PBSAR;  ///< Offset: 0x55C - Port B Security Attribution register
        volatile uint32_t PCSAR;  ///< Offset: 0x560 - Port C Security Attribution register
        volatile uint32_t PDSAR;  ///< Offset: 0x564 - Port D Security Attribution register
        volatile uint32_t PESAR;  ///< Offset: 0x568 - Port E Security Attribution register
    };

    /// Peripheral instances
    inline Registers* PFS_B = reinterpret_cast<Registers*>(PFS_B_BASE);

    // Bit definitions
    /// P00PFS Register bits
    namespace p00pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// P00PFS_HA Register bits
    namespace p00pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// P00PFS_BY Register bits
    namespace p00pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// P002PFS Register bits
    namespace p002pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// P002PFS_HA Register bits
    namespace p002pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// P002PFS_BY Register bits
    namespace p002pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// P201PFS Register bits
    namespace p201pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// P201PFS_HA Register bits
    namespace p201pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// P201PFS_BY Register bits
    namespace p201pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PA0PFS Register bits
    namespace pa0pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PA0PFS_HA Register bits
    namespace pa0pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PA0PFS_BY Register bits
    namespace pa0pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PA1PFS Register bits
    namespace pa1pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PA1PFS_HA Register bits
    namespace pa1pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PA1PFS_BY Register bits
    namespace pa1pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PA13PFS Register bits
    namespace pa13pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PA13PFS_HA Register bits
    namespace pa13pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PA13PFS_BY Register bits
    namespace pa13pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PB0PFS Register bits
    namespace pb0pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PB0PFS_HA Register bits
    namespace pb0pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PB0PFS_BY Register bits
    namespace pb0pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PB02PFS Register bits
    namespace pb02pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PB02PFS_HA Register bits
    namespace pb02pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PB02PFS_BY Register bits
    namespace pb02pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PB03PFS Register bits
    namespace pb03pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PB03PFS_HA Register bits
    namespace pb03pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PB03PFS_BY Register bits
    namespace pb03pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PB10PFS Register bits
    namespace pb10pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PB10PFS_HA Register bits
    namespace pb10pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PB10PFS_BY Register bits
    namespace pb10pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PB1PFS Register bits
    namespace pb1pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PB1PFS_HA Register bits
    namespace pb1pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PB1PFS_BY Register bits
    namespace pb1pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PC0PFS Register bits
    namespace pc0pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PC0PFS_HA Register bits
    namespace pc0pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PC0PFS_BY Register bits
    namespace pc0pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PC1PFS Register bits
    namespace pc1pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PC1PFS_HA Register bits
    namespace pc1pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PC1PFS_BY Register bits
    namespace pc1pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PD0PFS Register bits
    namespace pd0pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PD0PFS_HA Register bits
    namespace pd0pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PD0PFS_BY Register bits
    namespace pd0pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PD1PFS Register bits
    namespace pd1pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PD1PFS_HA Register bits
    namespace pd1pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PD1PFS_BY Register bits
    namespace pd1pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PE0PFS Register bits
    namespace pe0pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PE0PFS_HA Register bits
    namespace pe0pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PE0PFS_BY Register bits
    namespace pe0pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PE1PFS Register bits
    namespace pe1pfs_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
        constexpr uint32_t PMR = (1U << 16);  ///< Port Mode Control
        constexpr uint32_t PSEL = (5 << 24);  ///< Peripheral Select
    }

    /// PE1PFS_HA Register bits
    namespace pe1pfs_ha_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
        constexpr uint32_t DSCR = (2 << 10);  ///< Port Drive Capability
        constexpr uint32_t EOFR = (2 << 12);  ///< Event on Falling/Event on Rising
        constexpr uint32_t ISEL = (1U << 14);  ///< IRQ Input Enable
        constexpr uint32_t ASEL = (1U << 15);  ///< Analog Input Enable
    }

    /// PE1PFS_BY Register bits
    namespace pe1pfs_by_bits {
        constexpr uint32_t PODR = (1U << 0);  ///< Port Output Data
        constexpr uint32_t PIDR = (1U << 1);  ///< Pmn State
        constexpr uint32_t PDR = (1U << 2);  ///< Port Direction
        constexpr uint32_t PCR = (1U << 4);  ///< Pull-up Control
        constexpr uint32_t NCODR = (1U << 6);  ///< N-Channel Open-Drain Control
    }

    /// PWPR Register bits
    namespace pwpr_bits {
        constexpr uint32_t PFSWE = (1U << 6);  ///< PmnPFS Register Write Enable
        constexpr uint32_t B0WI = (1U << 7);  ///< PFSWE Bit Write Disable
    }

    /// PWPRS Register bits
    namespace pwprs_bits {
        constexpr uint32_t PFSWE = (1U << 6);  ///< PmnPFS Register Write Enable
        constexpr uint32_t B0WI = (1U << 7);  ///< PFSWE Bit Write Disable
    }

    /// P0SAR Register bits
    namespace p0sar_bits {
        constexpr uint32_t PMNSA = (16 << 0);  ///< Pmn Security Attribution
    }

    /// P2SAR Register bits
    namespace p2sar_bits {
        constexpr uint32_t PMNSA = (16 << 0);  ///< Pmn Security Attribution
    }

    /// PASAR Register bits
    namespace pasar_bits {
        constexpr uint32_t PMNSA = (16 << 0);  ///< Pmn Security Attribution
    }

    /// PBSAR Register bits
    namespace pbsar_bits {
        constexpr uint32_t PMNSA = (16 << 0);  ///< Pmn Security Attribution
    }

    /// PCSAR Register bits
    namespace pcsar_bits {
        constexpr uint32_t PMNSA = (16 << 0);  ///< Pmn Security Attribution
    }

    /// PDSAR Register bits
    namespace pdsar_bits {
        constexpr uint32_t PMNSA = (16 << 0);  ///< Pmn Security Attribution
    }

    /// PESAR Register bits
    namespace pesar_bits {
        constexpr uint32_t PMNSA = (16 << 0);  ///< Pmn Security Attribution
    }

}

// ============================================================================
// IIRFA Peripheral
// ============================================================================

namespace iirfa {
    /// Base addresses
    constexpr uint32_t IIRFA_BASE = 0x40020000;

    /// IIRFA Register structure
    struct Registers {
        volatile uint32_t IIRCPRCS;  ///< Offset: 0x00 - Channel Processing Status Register
        volatile uint32_t IIRCPRCFF;  ///< Offset: 0x04 - Channel Processing Completion Flag Register
        volatile uint32_t IIRORDYF;  ///< Offset: 0x08 - Output Data Preparation Completion Flag Register
        volatile uint32_t IIRCERRF;  ///< Offset: 0x0C - Operation Error Flag Register
        volatile uint32_t IIROPCNT;  ///< Offset: 0x10 - Operation Control Register
        volatile uint32_t IIRECCCNT;  ///< Offset: 0x20 - ECC Control Register
        volatile uint32_t IIRECCINT;  ///< Offset: 0x28 - ECC Interrupt Enable Register
        volatile uint32_t IIRECCEF;  ///< Offset: 0x30 - ECC Error Flag Register
        volatile uint32_t IIRECCEFCLR;  ///< Offset: 0x34 - ECC Error Flag Clear Register
        volatile uint32_t IIRESEADR;  ///< Offset: 0x38 - ECC 1-bit Error Address Register
        volatile uint32_t IIREDEADR;  ///< Offset: 0x3C - ECC 2-bit Error Address Register
        volatile uint32_t IIRCHINP;  ///< Offset: 0x100 - Channel %s Input Register (renamed from IIRCHINP)
        volatile uint32_t IIRCHOUT;  ///< Offset: 0x104 - Channel %s Output Register (renamed from IIRCHOUT)
        volatile uint32_t IIRCHCNT;  ///< Offset: 0x108 - Channel %s Control Register (renamed from IIRCHCNT)
        volatile uint32_t IIRCHINT;  ///< Offset: 0x10C - Channel %s Interrupt Enable Register (renamed from IIRCHINT)
        volatile uint32_t IIRCHSTS;  ///< Offset: 0x10D - Channel %s Status Register (renamed from IIRCHSTS)
        volatile uint32_t IIRCHFCLR;  ///< Offset: 0x10E - Channel %s Flag Clear Register (renamed from IIRCHFCLR)
        volatile uint32_t IIRSTGB0;  ///< Offset: 0x400 - Stage %s Coefficient b0 Register (renamed from IIRSTGB0)
        volatile uint32_t IIRSTGB1;  ///< Offset: 0x404 - Stage %s Coefficient b1 Register (renamed from IIRSTGB1)
        volatile uint32_t IIRSTGB2;  ///< Offset: 0x408 - Stage %s Coefficient b2 Register (renamed from IIRSTGB2)
        volatile uint32_t IIRSTGA1;  ///< Offset: 0x40C - Stage %s Coefficient a1 Register (renamed from IIRSTGA1)
        volatile uint32_t IIRSTGA2;  ///< Offset: 0x410 - Stage %s Coefficient a2 Register (renamed from IIRSTGA2)
        volatile uint32_t IIRSTGD0;  ///< Offset: 0x414 - Stage %s Delay Data D0 Register (renamed from IIRSTGD0)
        volatile uint32_t IIRSTGD1;  ///< Offset: 0x418 - Stage %s Delay Data D1 Register (renamed from IIRSTGD1)
    };

    /// Peripheral instances
    inline Registers* IIRFA = reinterpret_cast<Registers*>(IIRFA_BASE);

    // Bit definitions
    /// IIRCPRCS Register bits
    namespace iircprcs_bits {
        constexpr uint32_t CPRCS = (16 << 0);  ///< Channel processing status bit
    }

    /// IIRCPRCFF Register bits
    namespace iircprcff_bits {
        constexpr uint32_t CPRCFF = (16 << 0);  ///< Channel processing completion flag
    }

    /// IIRORDYF Register bits
    namespace iirordyf_bits {
        constexpr uint32_t ORDYF = (16 << 0);  ///< Output data preparation completion flag
    }

    /// IIRCERRF Register bits
    namespace iircerrf_bits {
        constexpr uint32_t CERRF = (16 << 0);  ///< Operation error flag
    }

    /// IIROPCNT Register bits
    namespace iiropcnt_bits {
        constexpr uint32_t RND = (3 << 0);  ///< Setting for the rounding mode for addition and multiplication
    }

    /// IIRECCCNT Register bits
    namespace iirecccnt_bits {
        constexpr uint32_t ECCMD = (1U << 0);  ///< ECC setting bit
        constexpr uint32_t ECCWBDIS = (1U << 1);  ///< ECC-corrected data write-back disable bit
    }

    /// IIRECCINT Register bits
    namespace iireccint_bits {
        constexpr uint32_t ESEIE = (1U << 0);  ///< ECC 1-bit error interrupt enable bit
        constexpr uint32_t EDEIE = (1U << 1);  ///< ECC 2-bit error interrupt enable bit
    }

    /// IIRECCEF Register bits
    namespace iireccef_bits {
        constexpr uint32_t ESEF = (1U << 0);  ///< ECC 1-bit error flag
        constexpr uint32_t EDEF = (1U << 1);  ///< ECC 2-bit error flag
    }

    /// IIRECCEFCLR Register bits
    namespace iireccefclr_bits {
        constexpr uint32_t ESEFCLR = (1U << 0);  ///< ECC 1-bit error flag clear bit
        constexpr uint32_t EDEFCLR = (1U << 1);  ///< ECC 2-bit error status flag clear bit
    }

    /// IIRESEADR Register bits
    namespace iireseadr_bits {
        constexpr uint32_t SEADR = (11 << 0);  ///< Error address
    }

    /// IIREDEADR Register bits
    namespace iiredeadr_bits {
        constexpr uint32_t DEADR = (11 << 0);  ///< Error address
    }

    /// IIRCHCNT Register bits
    namespace iirchcnt_bits {
        constexpr uint32_t STGSEL = (32 << 0);  ///< Stage selection bit
    }

    /// IIRCHINT Register bits
    namespace iirchint_bits {
        constexpr uint32_t CPRCFIE = (1U << 1);  ///< Channel processing completion interrupt enable bit
        constexpr uint32_t ORDYIE = (1U << 2);  ///< Output data preparation completion interrupt enable bit
        constexpr uint32_t CERRIE = (1U << 3);  ///< Operation error interrupt enable bit
    }

    /// IIRCHSTS Register bits
    namespace iirchsts_bits {
        constexpr uint32_t CPRCS = (1U << 0);  ///< Channel processing status flag
        constexpr uint32_t CPRCFF = (1U << 1);  ///< Channel processing completion flag
        constexpr uint32_t ORDYF = (1U << 2);  ///< Output data preparation completion flag
        constexpr uint32_t CERRF = (1U << 3);  ///< Operation error flag
    }

    /// IIRCHFCLR Register bits
    namespace iirchfclr_bits {
        constexpr uint32_t CPRCFFCLR = (1U << 1);  ///< Channel processing completion flag clear bit
        constexpr uint32_t CERRFCLR = (1U << 3);  ///< Operation error flag clear bit
    }

}

// ============================================================================
// TFU Peripheral
// ============================================================================

namespace tfu {
    /// Base addresses
    constexpr uint32_t TFU_BASE = 0x40021000;

    /// TFU Register structure
    struct Registers {
        volatile uint32_t TRGSTS;  ///< Offset: 0x08 - Trigonometric Status Register
        volatile uint32_t SCDT0;  ///< Offset: 0x10 - Sine Cosine Data Register 0
        volatile uint32_t SCDT1;  ///< Offset: 0x14 - Sine Cosine Data Register 1
        volatile uint32_t ATDT0;  ///< Offset: 0x18 - Arctangent Data Register 0
        volatile uint32_t ATDT1;  ///< Offset: 0x1C - Arctangent Data Register 1
    };

    /// Peripheral instances
    inline Registers* TFU = reinterpret_cast<Registers*>(TFU_BASE);

    // Bit definitions
    /// TRGSTS Register bits
    namespace trgsts_bits {
        constexpr uint32_t BSYF = (1U << 0);  ///< Calculation in progress flag
        constexpr uint32_t ERRF = (1U << 1);  ///< Input error flag
    }

    /// SCDT0 Register bits
    namespace scdt0_bits {
        constexpr uint32_t SCDT0 = (32 << 0);  ///< Sine Cosine Data Register 0 (single-precision floating-point)
    }

    /// SCDT1 Register bits
    namespace scdt1_bits {
        constexpr uint32_t SCDT1 = (32 << 0);  ///< Sine Cosine Data Register 1 (single-precision floating-point)
    }

    /// ATDT0 Register bits
    namespace atdt0_bits {
        constexpr uint32_t ATDT0 = (32 << 0);  ///< Arctangent Data Register 0 (single-precision floating-point)
    }

    /// ATDT1 Register bits
    namespace atdt1_bits {
        constexpr uint32_t ATDT1 = (32 << 0);  ///< Arctangent Data Register 1 (single-precision floating-point)
    }

}

// ============================================================================
// ELC Peripheral
// ============================================================================

namespace elc {
    /// Base addresses
    constexpr uint32_t ELC_B_BASE = 0x40082000;

    /// ELC Register structure
    struct Registers {
        volatile uint32_t ELCR;  ///< Offset: 0x00 - Event Link Controller Register
        volatile uint32_t ELSEGR;  ///< Offset: 0x04 - Event Link Software Event Generation Register %s (renamed from ELSEGR)
        volatile uint32_t ELSR;  ///< Offset: 0x90 - Event Link Setting Register %s (renamed from ELSR)
        volatile uint32_t ELCSARA;  ///< Offset: 0xE0 - Event Link Controller Security Attribution Register A
        volatile uint32_t ELCSARB;  ///< Offset: 0xE4 - Event Link Controller Security Attribution Register B
    };

    /// Peripheral instances
    inline Registers* ELC_B = reinterpret_cast<Registers*>(ELC_B_BASE);

    // Bit definitions
    /// ELCR Register bits
    namespace elcr_bits {
        constexpr uint32_t ELCON = (1U << 7);  ///< All Event Link Enable
    }

    /// ELSEGR Register bits
    namespace elsegr_bits {
        constexpr uint32_t SEG = (1U << 0);  ///< Software Event Generation
        constexpr uint32_t WE = (1U << 6);  ///< SEG Bit Write Enable
        constexpr uint32_t WI = (1U << 7);  ///< ELSEGR Register Write Disable
    }

    /// ELSR Register bits
    namespace elsr_bits {
        constexpr uint32_t ELS = (9 << 0);  ///< Event Link Select
    }

    /// ELCSARA Register bits
    namespace elcsara_bits {
        constexpr uint32_t ELCR = (1U << 0);  ///< Event Link Controller Register Security Attribution
        constexpr uint32_t ELSEGR0 = (1U << 1);  ///< Event Link Software Event Generation Register 0 Security Attribution
        constexpr uint32_t ELSEGR1 = (1U << 2);  ///< Event Link Software Event Generation Register 1 Security Attribution
    }

    /// ELCSARB Register bits
    namespace elcsarb_bits {
        constexpr uint32_t ELSR0 = (1U << 0);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR1 = (1U << 1);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR2 = (1U << 2);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR3 = (1U << 3);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR4 = (1U << 4);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR5 = (1U << 5);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR6 = (1U << 6);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR7 = (1U << 7);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR12 = (1U << 12);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR13 = (1U << 13);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR14 = (1U << 14);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR15 = (1U << 15);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR16 = (1U << 16);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR17 = (1U << 17);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR19 = (1U << 19);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR20 = (1U << 20);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR21 = (1U << 21);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR22 = (1U << 22);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR23 = (1U << 23);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR24 = (1U << 24);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR28 = (1U << 28);  ///< Event Link Setting Register n Security Attribution
        constexpr uint32_t ELSR29 = (1U << 29);  ///< Event Link Setting Register n Security Attribution
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t IWDT_BASE = 0x40083200;
    constexpr uint32_t WDT_BASE = 0x40083400;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t IWDTRR;  ///< Offset: 0x00 - IWDT Refresh Register
        volatile uint32_t IWDTSR;  ///< Offset: 0x04 - IWDT Status Register
    };

    /// Peripheral instances
    inline Registers* IWDT = reinterpret_cast<Registers*>(IWDT_BASE);
    inline Registers* WDT = reinterpret_cast<Registers*>(WDT_BASE);

    // Bit definitions
    /// IWDTSR Register bits
    namespace iwdtsr_bits {
        constexpr uint32_t CNTVAL = (14 << 0);  ///< Down-counter Value
        constexpr uint32_t UNDFF = (1U << 14);  ///< Underflow Flag
        constexpr uint32_t REFEF = (1U << 15);  ///< Refresh Error Flag
    }

}

// ============================================================================
// CAC Peripheral
// ============================================================================

namespace cac {
    /// Base addresses
    constexpr uint32_t CAC_BASE = 0x40083600;

    /// CAC Register structure
    struct Registers {
        volatile uint32_t CACR0;  ///< Offset: 0x00 - CAC Control Register 0
        volatile uint32_t CACR1;  ///< Offset: 0x01 - CAC Control Register 1
        volatile uint32_t CACR2;  ///< Offset: 0x02 - CAC Control Register 2
        volatile uint32_t CAICR;  ///< Offset: 0x03 - CAC Interrupt Control Register
        volatile uint32_t CASTR;  ///< Offset: 0x04 - CAC Status Register
        volatile uint32_t CAULVR;  ///< Offset: 0x06 - CAC Upper-Limit Value Setting Register
        volatile uint32_t CALLVR;  ///< Offset: 0x08 - CAC Lower-Limit Value Setting Register
        volatile uint32_t CACNTBR;  ///< Offset: 0x0A - CAC Counter Buffer Register
    };

    /// Peripheral instances
    inline Registers* CAC = reinterpret_cast<Registers*>(CAC_BASE);

    // Bit definitions
    /// CACR0 Register bits
    namespace cacr0_bits {
        constexpr uint32_t CFME = (1U << 0);  ///< Clock Frequency Measurement Enable
    }

    /// CACR1 Register bits
    namespace cacr1_bits {
        constexpr uint32_t CACREFE = (1U << 0);  ///< CACREF Pin Input Enable
        constexpr uint32_t FMCS = (3 << 1);  ///< Measurement Target Clock Select
        constexpr uint32_t TCSS = (2 << 4);  ///< Timer Count Clock Source Select
        constexpr uint32_t EDGES = (2 << 6);  ///< Valid Edge Select
    }

    /// CACR2 Register bits
    namespace cacr2_bits {
        constexpr uint32_t RPS = (1U << 0);  ///< Reference Signal Select
        constexpr uint32_t RSCS = (3 << 1);  ///< Measurement Reference Clock Select
        constexpr uint32_t RCDS = (2 << 4);  ///< Measurement Reference Clock Frequency Division Ratio Select
        constexpr uint32_t DFS = (2 << 6);  ///< Digital Filter Select
    }

    /// CAICR Register bits
    namespace caicr_bits {
        constexpr uint32_t FERRIE = (1U << 0);  ///< Frequency Error Interrupt Request Enable
        constexpr uint32_t MENDIE = (1U << 1);  ///< Measurement End Interrupt Request Enable
        constexpr uint32_t OVFIE = (1U << 2);  ///< Overflow Interrupt Request Enable
        constexpr uint32_t FERRFCL = (1U << 4);  ///< FERRF Clear
        constexpr uint32_t MENDFCL = (1U << 5);  ///< MENDF Clear
        constexpr uint32_t OVFFCL = (1U << 6);  ///< OVFF Clear
    }

    /// CASTR Register bits
    namespace castr_bits {
        constexpr uint32_t FERRF = (1U << 0);  ///< Frequency Error Flag
        constexpr uint32_t MENDF = (1U << 1);  ///< Measurement End Flag
        constexpr uint32_t OVFF = (1U << 2);  ///< Overflow Flag
    }

}

// ============================================================================
// MSTP Peripheral
// ============================================================================

namespace mstp {
    /// Base addresses
    constexpr uint32_t MSTP_BASE = 0x40084000;

    /// MSTP Register structure
    struct Registers {
        volatile uint32_t MSTPCRA;  ///< Offset: 0x00 - Module Stop Control Register A
        volatile uint32_t MSTPCRB;  ///< Offset: 0x04 - Module Stop Control Register B
        volatile uint32_t MSTPCRC;  ///< Offset: 0x08 - Module Stop Control Register C
        volatile uint32_t MSTPCRD;  ///< Offset: 0x0C - Module Stop Control Register D
        volatile uint32_t MSTPCRE;  ///< Offset: 0x10 - Module Stop Control Register E
    };

    /// Peripheral instances
    inline Registers* MSTP = reinterpret_cast<Registers*>(MSTP_BASE);

    // Bit definitions
    /// MSTPCRA Register bits
    namespace mstpcra_bits {
        constexpr uint32_t MSTPA0 = (1U << 0);  ///< SRAM0 Module Stop
        constexpr uint32_t MSTPA7 = (1U << 7);  ///< Standby SRAM Module Stop
        constexpr uint32_t MSTPA22 = (1U << 22);  ///< DMA Controller/Data Transfer Controller Module Stop
    }

    /// MSTPCRB Register bits
    namespace mstpcrb_bits {
        constexpr uint32_t MSTPB8 = (1U << 8);  ///< I2C Bus Interface 1 Module Stop
        constexpr uint32_t MSTPB9 = (1U << 9);  ///< I2C Bus Interface 0 Module Stop
        constexpr uint32_t MSTPB18 = (1U << 18);  ///< Serial Peripheral Interface 1 Module Stop
        constexpr uint32_t MSTPB19 = (1U << 19);  ///< Serial Peripheral Interface 0 Module Stop
        constexpr uint32_t MSTPB22 = (1U << 22);  ///< Serial Communication Interface 9 Module Stop
        constexpr uint32_t MSTPB27 = (1U << 27);  ///< Serial Communication Interface 4 Module Stop
        constexpr uint32_t MSTPB28 = (1U << 28);  ///< Serial Communication Interface 3 Module Stop
        constexpr uint32_t MSTPB29 = (1U << 29);  ///< Serial Communication Interface 2 Module Stop
        constexpr uint32_t MSTPB30 = (1U << 30);  ///< Serial Communication Interface 1 Module Stop
        constexpr uint32_t MSTPB31 = (1U << 31);  ///< Serial Communication Interface 0 Module Stop
    }

    /// MSTPCRC Register bits
    namespace mstpcrc_bits {
        constexpr uint32_t MSTPC0 = (1U << 0);  ///< Clock Frequency Accuracy Measurement Circuit Module Stop
        constexpr uint32_t MSTPC1 = (1U << 1);  ///< Cyclic Redundancy Check Module Stop
        constexpr uint32_t MSTPC13 = (1U << 13);  ///< Data Operation Circuit Module Stop
        constexpr uint32_t MSTPC14 = (1U << 14);  ///< Event Link Controller Module Stop
        constexpr uint32_t MSTPC20 = (1U << 20);  ///< Trigonometric Function Unit Module Stop
        constexpr uint32_t MSTPC21 = (1U << 21);  ///< IIR Filter Accelerator Module Stop
        constexpr uint32_t MSTPC27 = (1U << 27);  ///< CANFD Module Stop
        constexpr uint32_t MSTPC31 = (1U << 31);  ///< Secure Cryptographic Engine Module Stop
    }

    /// MSTPCRD Register bits
    namespace mstpcrd_bits {
        constexpr uint32_t MSTPD2 = (1U << 2);  ///< Low Power Asynchronous General Purpose Timer 1 Module Stop
        constexpr uint32_t MSTPD3 = (1U << 3);  ///< Low Power Asynchronous General Purpose Timer 0 Module Stop
        constexpr uint32_t MSTPD11 = (1U << 11);  ///< Port Output Enable for GPT Group D Module Stop
        constexpr uint32_t MSTPD12 = (1U << 12);  ///< Port Output Enable for GPT Group C Module Stop
        constexpr uint32_t MSTPD13 = (1U << 13);  ///< Port Output Enable for GPT Group B Module Stop
        constexpr uint32_t MSTPD14 = (1U << 14);  ///< Port Output Enable for GPT Group A Module Stop
        constexpr uint32_t MSTPD16 = (1U << 16);  ///< A/D Converter Module Stop
        constexpr uint32_t MSTPD19 = (1U << 19);  ///< 12-bit D/A Converter 1 Module Stop
        constexpr uint32_t MSTPD20 = (1U << 20);  ///< 12-bit D/A Converter 0 Module Stop
        constexpr uint32_t MSTPD22 = (1U << 22);  ///< Temperature Sensor Module Stop
        constexpr uint32_t MSTPD25 = (1U << 25);  ///< High-Speed Analog Comparator 3 Module Stop
        constexpr uint32_t MSTPD26 = (1U << 26);  ///< High-Speed Analog Comparator 2 Module Stop
        constexpr uint32_t MSTPD27 = (1U << 27);  ///< High-Speed Analog Comparator 1 Module Stop
        constexpr uint32_t MSTPD28 = (1U << 28);  ///< High-Speed Analog Comparator 0 Module Stop
    }

    /// MSTPCRE Register bits
    namespace mstpcre_bits {
        constexpr uint32_t MSTPE4 = (1U << 4);  ///< Key Interrupt Function Module Stop
        constexpr uint32_t MSTPE31 = (1U << 31);  ///< General PWM Timer and PWM Delay Generation Circuit Module Stop
    }

}

// ============================================================================
// KINT Peripheral
// ============================================================================

namespace kint {
    /// Base addresses
    constexpr uint32_t KINT_BASE = 0x40085000;

    /// KINT Register structure
    struct Registers {
        volatile uint32_t KRCTL;  ///< Offset: 0x00 - Key Return Control Register
        volatile uint32_t KRF;  ///< Offset: 0x04 - Key Return Flag Register
        volatile uint32_t KRM;  ///< Offset: 0x08 - Key Return Mode Register
    };

    /// Peripheral instances
    inline Registers* KINT = reinterpret_cast<Registers*>(KINT_BASE);

    // Bit definitions
    /// KRCTL Register bits
    namespace krctl_bits {
        constexpr uint32_t KREG = (1U << 0);  ///< Detection Edge Selection (KR00 to KR07 pins)
        constexpr uint32_t KRMD = (1U << 7);  ///< Usage of Key Interrupt Flags (KRF.KIF0 to KRF.KIF7)
    }

    /// KRF Register bits
    namespace krf_bits {
        constexpr uint32_t KIF0 = (1U << 0);  ///< Key Interrupt Flag n
        constexpr uint32_t KIF1 = (1U << 1);  ///< Key Interrupt Flag n
        constexpr uint32_t KIF2 = (1U << 2);  ///< Key Interrupt Flag n
        constexpr uint32_t KIF3 = (1U << 3);  ///< Key Interrupt Flag n
        constexpr uint32_t KIF4 = (1U << 4);  ///< Key Interrupt Flag n
        constexpr uint32_t KIF5 = (1U << 5);  ///< Key Interrupt Flag n
        constexpr uint32_t KIF6 = (1U << 6);  ///< Key Interrupt Flag n
        constexpr uint32_t KIF7 = (1U << 7);  ///< Key Interrupt Flag n
    }

    /// KRM Register bits
    namespace krm_bits {
        constexpr uint32_t KIMC0 = (1U << 0);  ///< Key Interrupt Mode Control n
        constexpr uint32_t KIMC1 = (1U << 1);  ///< Key Interrupt Mode Control n
        constexpr uint32_t KIMC2 = (1U << 2);  ///< Key Interrupt Mode Control n
        constexpr uint32_t KIMC3 = (1U << 3);  ///< Key Interrupt Mode Control n
        constexpr uint32_t KIMC4 = (1U << 4);  ///< Key Interrupt Mode Control n
        constexpr uint32_t KIMC5 = (1U << 5);  ///< Key Interrupt Mode Control n
        constexpr uint32_t KIMC6 = (1U << 6);  ///< Key Interrupt Mode Control n
        constexpr uint32_t KIMC7 = (1U << 7);  ///< Key Interrupt Mode Control n
    }

}

// ============================================================================
// POEG Peripheral
// ============================================================================

namespace poeg {
    /// Base addresses
    constexpr uint32_t POEG_BASE = 0x4008A000;

    /// POEG Register structure
    struct Registers {
        volatile uint32_t POEGGA;  ///< Offset: 0x00 - POEG Group A Setting Register
        volatile uint32_t GTONCWPA;  ///< Offset: 0x40 - GPT Output Stopping Control Group A Write Protection Register
        volatile uint32_t GTONCCRA;  ///< Offset: 0x44 - GPT Output Stopping Control Group A Controlling Register
        volatile uint32_t POEGGB;  ///< Offset: 0x100 - POEG Group B Setting Register
        volatile uint32_t GTONCWPB;  ///< Offset: 0x140 - GPT Output Stopping Control Group B Write Protection Register
        volatile uint32_t GTONCCRB;  ///< Offset: 0x144 - GPT Output Stopping Control Group B Controlling Register
        volatile uint32_t POEGGC;  ///< Offset: 0x200 - POEG Group C Setting Register
        volatile uint32_t GTONCWPC;  ///< Offset: 0x240 - GPT Output Stopping Control Group C Write Protection Register
        volatile uint32_t GTONCCRC;  ///< Offset: 0x244 - GPT Output Stopping Control Group C Controlling Register
        volatile uint32_t POEGGD;  ///< Offset: 0x300 - POEG Group D Setting Register
        volatile uint32_t GTONCWPD;  ///< Offset: 0x340 - GPT Output Stopping Control Group D Write Protection Register
        volatile uint32_t GTONCCRD;  ///< Offset: 0x344 - GPT Output Stopping Control Group D Controlling Register
    };

    /// Peripheral instances
    inline Registers* POEG = reinterpret_cast<Registers*>(POEG_BASE);

    // Bit definitions
    /// POEGGA Register bits
    namespace poegga_bits {
        constexpr uint32_t PIDF = (1U << 0);  ///< Port Input Detection Flag
        constexpr uint32_t IOCF = (1U << 1);  ///< GPT or ACMPHS Output Stop Request Detection Flag
        constexpr uint32_t OSTPF = (1U << 2);  ///< Oscillation Stop Detection Flag
        constexpr uint32_t SSF = (1U << 3);  ///< Software Stop Flag
        constexpr uint32_t PIDE = (1U << 4);  ///< Port Input Detection Enable
        constexpr uint32_t IOCE = (1U << 5);  ///< GPT Output Stop Request Enable
        constexpr uint32_t OSTPE = (1U << 6);  ///< Enable Stopping Output on Stopping of Oscillation
        constexpr uint32_t CDRE0 = (1U << 8);  ///< ACMPHS0 Enable
        constexpr uint32_t CDRE1 = (1U << 9);  ///< ACMPHS1 Enable
        constexpr uint32_t CDRE2 = (1U << 10);  ///< ACMPHS2 Enable
        constexpr uint32_t CDRE3 = (1U << 11);  ///< ACMPHS3 Enable
        constexpr uint32_t ST = (1U << 16);  ///< GTETRGn Input Status Flag
        constexpr uint32_t INV = (1U << 28);  ///< GTETRGn Input Inverting
        constexpr uint32_t NFEN = (1U << 29);  ///< Noise filter Enable
        constexpr uint32_t NFCS = (2 << 30);  ///< Noise filter Clock Select
    }

    /// GTONCWPA Register bits
    namespace gtoncwpa_bits {
        constexpr uint32_t WP = (1U << 0);  ///< Register Writing Disable
        constexpr uint32_t PRKEY = (8 << 8);  ///< Key Code
    }

    /// GTONCCRA Register bits
    namespace gtonccra_bits {
        constexpr uint32_t NE = (1U << 0);  ///< Direct Stopping Request Setting
        constexpr uint32_t NFS = (4 << 4);  ///< Direct Stopping Request Selection
        constexpr uint32_t NFV = (1U << 8);  ///< Direct Stopping Request Active Sense
    }

    /// POEGGB Register bits
    namespace poeggb_bits {
        constexpr uint32_t PIDF = (1U << 0);  ///< Port Input Detection Flag
        constexpr uint32_t IOCF = (1U << 1);  ///< GPT or ACMPHS Output Stop Request Detection Flag
        constexpr uint32_t OSTPF = (1U << 2);  ///< Oscillation Stop Detection Flag
        constexpr uint32_t SSF = (1U << 3);  ///< Software Stop Flag
        constexpr uint32_t PIDE = (1U << 4);  ///< Port Input Detection Enable
        constexpr uint32_t IOCE = (1U << 5);  ///< GPT Output Stop Request Enable
        constexpr uint32_t OSTPE = (1U << 6);  ///< Enable Stopping Output on Stopping of Oscillation
        constexpr uint32_t CDRE0 = (1U << 8);  ///< ACMPHS0 Enable
        constexpr uint32_t CDRE1 = (1U << 9);  ///< ACMPHS1 Enable
        constexpr uint32_t CDRE2 = (1U << 10);  ///< ACMPHS2 Enable
        constexpr uint32_t CDRE3 = (1U << 11);  ///< ACMPHS3 Enable
        constexpr uint32_t ST = (1U << 16);  ///< GTETRGn Input Status Flag
        constexpr uint32_t INV = (1U << 28);  ///< GTETRGn Input Inverting
        constexpr uint32_t NFEN = (1U << 29);  ///< Noise filter Enable
        constexpr uint32_t NFCS = (2 << 30);  ///< Noise filter Clock Select
    }

    /// GTONCWPB Register bits
    namespace gtoncwpb_bits {
        constexpr uint32_t WP = (1U << 0);  ///< Register Writing Disable
        constexpr uint32_t PRKEY = (8 << 8);  ///< Key Code
    }

    /// GTONCCRB Register bits
    namespace gtonccrb_bits {
        constexpr uint32_t NE = (1U << 0);  ///< Direct Stopping Request Setting
        constexpr uint32_t NFS = (4 << 4);  ///< Direct Stopping Request Selection
        constexpr uint32_t NFV = (1U << 8);  ///< Direct Stopping Request Active Sense
    }

    /// POEGGC Register bits
    namespace poeggc_bits {
        constexpr uint32_t PIDF = (1U << 0);  ///< Port Input Detection Flag
        constexpr uint32_t IOCF = (1U << 1);  ///< GPT or ACMPHS Output Stop Request Detection Flag
        constexpr uint32_t OSTPF = (1U << 2);  ///< Oscillation Stop Detection Flag
        constexpr uint32_t SSF = (1U << 3);  ///< Software Stop Flag
        constexpr uint32_t PIDE = (1U << 4);  ///< Port Input Detection Enable
        constexpr uint32_t IOCE = (1U << 5);  ///< GPT Output Stop Request Enable
        constexpr uint32_t OSTPE = (1U << 6);  ///< Enable Stopping Output on Stopping of Oscillation
        constexpr uint32_t CDRE0 = (1U << 8);  ///< ACMPHS0 Enable
        constexpr uint32_t CDRE1 = (1U << 9);  ///< ACMPHS1 Enable
        constexpr uint32_t CDRE2 = (1U << 10);  ///< ACMPHS2 Enable
        constexpr uint32_t CDRE3 = (1U << 11);  ///< ACMPHS3 Enable
        constexpr uint32_t ST = (1U << 16);  ///< GTETRGn Input Status Flag
        constexpr uint32_t INV = (1U << 28);  ///< GTETRGn Input Inverting
        constexpr uint32_t NFEN = (1U << 29);  ///< Noise filter Enable
        constexpr uint32_t NFCS = (2 << 30);  ///< Noise filter Clock Select
    }

    /// GTONCWPC Register bits
    namespace gtoncwpc_bits {
        constexpr uint32_t WP = (1U << 0);  ///< Register Writing Disable
        constexpr uint32_t PRKEY = (8 << 8);  ///< Key Code
    }

    /// GTONCCRC Register bits
    namespace gtonccrc_bits {
        constexpr uint32_t NE = (1U << 0);  ///< Direct Stopping Request Setting
        constexpr uint32_t NFS = (4 << 4);  ///< Direct Stopping Request Selection
        constexpr uint32_t NFV = (1U << 8);  ///< Direct Stopping Request Active Sense
    }

    /// POEGGD Register bits
    namespace poeggd_bits {
        constexpr uint32_t PIDF = (1U << 0);  ///< Port Input Detection Flag
        constexpr uint32_t IOCF = (1U << 1);  ///< GPT or ACMPHS Output Stop Request Detection Flag
        constexpr uint32_t OSTPF = (1U << 2);  ///< Oscillation Stop Detection Flag
        constexpr uint32_t SSF = (1U << 3);  ///< Software Stop Flag
        constexpr uint32_t PIDE = (1U << 4);  ///< Port Input Detection Enable
        constexpr uint32_t IOCE = (1U << 5);  ///< GPT Output Stop Request Enable
        constexpr uint32_t OSTPE = (1U << 6);  ///< Enable Stopping Output on Stopping of Oscillation
        constexpr uint32_t CDRE0 = (1U << 8);  ///< ACMPHS0 Enable
        constexpr uint32_t CDRE1 = (1U << 9);  ///< ACMPHS1 Enable
        constexpr uint32_t CDRE2 = (1U << 10);  ///< ACMPHS2 Enable
        constexpr uint32_t CDRE3 = (1U << 11);  ///< ACMPHS3 Enable
        constexpr uint32_t ST = (1U << 16);  ///< GTETRGn Input Status Flag
        constexpr uint32_t INV = (1U << 28);  ///< GTETRGn Input Inverting
        constexpr uint32_t NFEN = (1U << 29);  ///< Noise filter Enable
        constexpr uint32_t NFCS = (2 << 30);  ///< Noise filter Clock Select
    }

    /// GTONCWPD Register bits
    namespace gtoncwpd_bits {
        constexpr uint32_t WP = (1U << 0);  ///< Register Writing Disable
        constexpr uint32_t PRKEY = (8 << 8);  ///< Key Code
    }

    /// GTONCCRD Register bits
    namespace gtonccrd_bits {
        constexpr uint32_t NE = (1U << 0);  ///< Direct Stopping Request Setting
        constexpr uint32_t NFS = (4 << 4);  ///< Direct Stopping Request Selection
        constexpr uint32_t NFV = (1U << 8);  ///< Direct Stopping Request Active Sense
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CANFD_B_BASE = 0x400B0000;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t CFDC0NCFG;  ///< Offset: 0x00 - Channel 0 Nominal Bitrate Configuration Register
        volatile uint32_t CFDC0CTR;  ///< Offset: 0x04 - Channel 0 Control Register
        volatile uint32_t CFDC0STS;  ///< Offset: 0x08 - Channel 0 Status Register
        volatile uint32_t CFDC0ERFL;  ///< Offset: 0x0C - Channel 0 Error Flag Register
        volatile uint32_t CFDGCFG;  ///< Offset: 0x14 - Global Configuration Register
        volatile uint32_t CFDGCTR;  ///< Offset: 0x18 - Global Control Register
        volatile uint32_t CFDGSTS;  ///< Offset: 0x1C - Global Status Register
        volatile uint32_t CFDGERFL;  ///< Offset: 0x20 - Global Error Flag Register
        volatile uint32_t CFDGTSC;  ///< Offset: 0x24 - Global Timestamp Counter Register
        volatile uint32_t CFDGAFLECTR;  ///< Offset: 0x28 - Global Acceptance Filter List Entry Control Register
        volatile uint32_t CFDGAFLCFG;  ///< Offset: 0x2C - Global Acceptance Filter List Configuration Register
        volatile uint32_t CFDRMNB;  ///< Offset: 0x30 - RX Message Buffer Number Register
        volatile uint32_t CFDRMND;  ///< Offset: 0x34 - RX Message Buffer New Data Register
        volatile uint32_t CFDRMIEC;  ///< Offset: 0x38 - RX Message Buffer Interrupt Enable Configuration Register
        volatile uint32_t CFDRFCC;  ///< Offset: 0x3C - RX FIFO Configuration/Control Registers %s (renamed from CFDRFCC)
        volatile uint32_t CFDRFSTS;  ///< Offset: 0x44 - RX FIFO Status Registers %s (renamed from CFDRFSTS)
        volatile uint32_t CFDRFPCTR;  ///< Offset: 0x4C - RX FIFO Pointer Control Registers %s (renamed from CFDRFPCTR)
        volatile uint32_t CFDCFCC;  ///< Offset: 0x54 - Common FIFO Configuration/Control Register
        volatile uint32_t CFDCFSTS;  ///< Offset: 0x58 - Common FIFO Status Register
        volatile uint32_t CFDCFPCTR;  ///< Offset: 0x5C - Common FIFO Pointer Control Register
        volatile uint32_t CFDFESTS;  ///< Offset: 0x60 - FIFO Empty Status Register
        volatile uint32_t CFDFFSTS;  ///< Offset: 0x64 - FIFO Full Status Register
        volatile uint32_t CFDFMSTS;  ///< Offset: 0x68 - FIFO Message Lost Status Register
        volatile uint32_t CFDRFISTS;  ///< Offset: 0x6C - RX FIFO Interrupt Flag Status Register
        volatile uint32_t CFDTMC;  ///< Offset: 0x70 - TX Message Buffer Control Registers %s (renamed from CFDTMC)
        volatile uint32_t CFDTMSTS;  ///< Offset: 0x74 - TX Message Buffer Status Registers %s (renamed from CFDTMSTS)
        volatile uint32_t CFDTMTRSTS;  ///< Offset: 0x78 - TX Message Buffer Transmission Request Status Register
        volatile uint32_t CFDTMTARSTS;  ///< Offset: 0x7C - TX Message Buffer Transmission Abort Request Status Register
        volatile uint32_t CFDTMTCSTS;  ///< Offset: 0x80 - TX Message Buffer Transmission Completion Status Register
        volatile uint32_t CFDTMTASTS;  ///< Offset: 0x84 - TX Message Buffer Transmission Abort Status Register
        volatile uint32_t CFDTMIEC;  ///< Offset: 0x88 - TX Message Buffer Interrupt Enable Configuration Register
        volatile uint32_t CFDTXQCC;  ///< Offset: 0x8C - TX Queue Configuration/Control Register
        volatile uint32_t CFDTXQSTS;  ///< Offset: 0x90 - TX Queue Status Register
        volatile uint32_t CFDTXQPCTR;  ///< Offset: 0x94 - TX Queue Pointer Control Register
        volatile uint32_t CFDTHLCC;  ///< Offset: 0x98 - TX History List Configuration/Control Register
        volatile uint32_t CFDTHLSTS;  ///< Offset: 0x9C - TX History List Status Register
        volatile uint32_t CFDTHLPCTR;  ///< Offset: 0xA0 - TX History List Pointer Control Register
        volatile uint32_t CFDGTINTSTS;  ///< Offset: 0xA4 - Global TX Interrupt Status Register
        volatile uint32_t CFDGTSTCFG;  ///< Offset: 0xA8 - Global Test Configuration Register
        volatile uint32_t CFDGTSTCTR;  ///< Offset: 0xAC - Global Test Control Register
        volatile uint32_t CFDGFDCFG;  ///< Offset: 0xB0 - Global FD Configuration Register
        volatile uint32_t CFDGLOCKK;  ///< Offset: 0xB8 - Global Lock Key Register
        volatile uint32_t CFDGAFLIGNENT;  ///< Offset: 0xC0 - Global AFL Ignore Entry Register
        volatile uint32_t CFDGAFLIGNCTR;  ///< Offset: 0xC4 - Global AFL Ignore Control Register
        volatile uint32_t CFDCDTCT;  ///< Offset: 0xC8 - DMA Transfer Control Register
        volatile uint32_t CFDCDTSTS;  ///< Offset: 0xCC - DMA Transfer Status Register
        volatile uint32_t CFDGRSTC;  ///< Offset: 0xD8 - Global SW reset Register
        volatile uint32_t CFDC0DCFG;  ///< Offset: 0x100 - Channel 0 Data Bitrate Configuration Register
        volatile uint32_t CFDC0FDCFG;  ///< Offset: 0x104 - Channel 0 CANFD Configuration Register
        volatile uint32_t CFDC0FDCTR;  ///< Offset: 0x108 - Channel 0 CANFD Control Register
        volatile uint32_t CFDC0FDSTS;  ///< Offset: 0x10C - Channel 0 CANFD Status Register
        volatile uint32_t CFDC0FDCRC;  ///< Offset: 0x110 - Channel 0 CANFD CRC Register
        volatile uint32_t CFDGAFLID;  ///< Offset: 0x120 - Global Acceptance Filter List ID Registers (renamed from CFDGAFLID)
        volatile uint32_t CFDGAFLM;  ///< Offset: 0x124 - Global Acceptance Filter List Mask Registers (renamed from CFDGAFLM)
        volatile uint32_t CFDGAFLP0;  ///< Offset: 0x128 - Global Acceptance Filter List Pointer 0 Registers (renamed from CFDGAFLP0)
        volatile uint32_t CFDGAFLP1;  ///< Offset: 0x12C - Global Acceptance Filter List Pointer 1 Registers (renamed from CFDGAFLP1)
        volatile uint32_t CFDRPGACC;  ///< Offset: 0x280 - RAM Test Page Access Registers %s (renamed from CFDRPGACC)
        volatile uint32_t CFDRFID;  ///< Offset: 0x520 - RX FIFO Access ID Register %s (renamed from CFDRFID)
        volatile uint32_t CFDRFPTR;  ///< Offset: 0x524 - RX FIFO Access Pointer Register %s (renamed from CFDRFPTR)
        volatile uint32_t CFDRFFDSTS;  ///< Offset: 0x528 - RX FIFO Access CANFD Status Register %s (renamed from CFDRFFDSTS)
        volatile uint32_t CFDRFDF_0;  ///< Offset: 0x52C - RX FIFO Access Data Field 0 Register %s (renamed from CFDRFDF_0)
        volatile uint32_t CFDRFDF_1;  ///< Offset: 0x530 - RX FIFO Access Data Field 1 Register %s (renamed from CFDRFDF_1)
        volatile uint32_t CFDRFDF_2;  ///< Offset: 0x534 - RX FIFO Access Data Field 2 Register %s (renamed from CFDRFDF_2)
        volatile uint32_t CFDRFDF_3;  ///< Offset: 0x538 - RX FIFO Access Data Field 3 Register %s (renamed from CFDRFDF_3)
        volatile uint32_t CFDRFDF_4;  ///< Offset: 0x53C - RX FIFO Access Data Field 4 Register %s (renamed from CFDRFDF_4)
        volatile uint32_t CFDRFDF_5;  ///< Offset: 0x540 - RX FIFO Access Data Field 5 Register %s (renamed from CFDRFDF_5)
        volatile uint32_t CFDRFDF_6;  ///< Offset: 0x544 - RX FIFO Access Data Field 6 Register %s (renamed from CFDRFDF_6)
        volatile uint32_t CFDRFDF_7;  ///< Offset: 0x548 - RX FIFO Access Data Field 7 Register %s (renamed from CFDRFDF_7)
        volatile uint32_t CFDRFDF_8;  ///< Offset: 0x54C - RX FIFO Access Data Field 8 Register %s (renamed from CFDRFDF_8)
        volatile uint32_t CFDRFDF_9;  ///< Offset: 0x550 - RX FIFO Access Data Field 9 Register %s (renamed from CFDRFDF_9)
        volatile uint32_t CFDRFDF_10;  ///< Offset: 0x554 - RX FIFO Access Data Field 10 Register %s (renamed from CFDRFDF_10)
        volatile uint32_t CFDRFDF_11;  ///< Offset: 0x558 - RX FIFO Access Data Field 11 Register %s (renamed from CFDRFDF_11)
        volatile uint32_t CFDRFDF_12;  ///< Offset: 0x55C - RX FIFO Access Data Field 12 Register %s (renamed from CFDRFDF_12)
        volatile uint32_t CFDRFDF_13;  ///< Offset: 0x560 - RX FIFO Access Data Field 13 Register %s (renamed from CFDRFDF_13)
        volatile uint32_t CFDRFDF_14;  ///< Offset: 0x564 - RX FIFO Access Data Field 14 Register %s (renamed from CFDRFDF_14)
        volatile uint32_t CFDRFDF_15;  ///< Offset: 0x568 - RX FIFO Access Data Field 15 Register %s (renamed from CFDRFDF_15)
        volatile uint32_t CFDCFID;  ///< Offset: 0x5B8 - Common FIFO Access ID Register
        volatile uint32_t CFDCFPTR;  ///< Offset: 0x5BC - Common FIFO Access Pointer Register
        volatile uint32_t CFDCFFDCSTS;  ///< Offset: 0x5C0 - Common FIFO Access CANFD Control/Status Register
        volatile uint32_t CFDCFDF;  ///< Offset: 0x5C4 - Common FIFO Access Data Field %s Registers (renamed from CFDCFDF)
        volatile uint32_t CFDTMID;  ///< Offset: 0x604 - TX Message Buffer ID Registers (renamed from CFDTMID)
        volatile uint32_t CFDTMPTR;  ///< Offset: 0x608 - TX Message Buffer Pointer Register (renamed from CFDTMPTR)
        volatile uint32_t CFDTMFDCTR;  ///< Offset: 0x60C - TX Message Buffer CANFD Control Register (renamed from CFDTMFDCTR)
        volatile uint32_t CFDTMDF_0;  ///< Offset: 0x610 - TX Message Buffer Data Field Register (renamed from CFDTMDF_0)
        volatile uint32_t CFDTMDF_1;  ///< Offset: 0x614 - TX Message Buffer Data Field Register (renamed from CFDTMDF_1)
        volatile uint32_t CFDTMDF_2;  ///< Offset: 0x618 - TX Message Buffer Data Field Register (renamed from CFDTMDF_2)
        volatile uint32_t CFDTMDF_3;  ///< Offset: 0x61C - TX Message Buffer Data Field Register (renamed from CFDTMDF_3)
        volatile uint32_t CFDTMDF_4;  ///< Offset: 0x620 - TX Message Buffer Data Field Register (renamed from CFDTMDF_4)
        volatile uint32_t CFDTMDF_5;  ///< Offset: 0x624 - TX Message Buffer Data Field Register (renamed from CFDTMDF_5)
        volatile uint32_t CFDTMDF_6;  ///< Offset: 0x628 - TX Message Buffer Data Field Register (renamed from CFDTMDF_6)
        volatile uint32_t CFDTMDF_7;  ///< Offset: 0x62C - TX Message Buffer Data Field Register (renamed from CFDTMDF_7)
        volatile uint32_t CFDTMDF_8;  ///< Offset: 0x630 - TX Message Buffer Data Field Register (renamed from CFDTMDF_8)
        volatile uint32_t CFDTMDF_9;  ///< Offset: 0x634 - TX Message Buffer Data Field Register (renamed from CFDTMDF_9)
        volatile uint32_t CFDTMDF_10;  ///< Offset: 0x638 - TX Message Buffer Data Field Register (renamed from CFDTMDF_10)
        volatile uint32_t CFDTMDF_11;  ///< Offset: 0x63C - TX Message Buffer Data Field Register (renamed from CFDTMDF_11)
        volatile uint32_t CFDTMDF_12;  ///< Offset: 0x640 - TX Message Buffer Data Field Register (renamed from CFDTMDF_12)
        volatile uint32_t CFDTMDF_13;  ///< Offset: 0x644 - TX Message Buffer Data Field Register (renamed from CFDTMDF_13)
        volatile uint32_t CFDTMDF_14;  ///< Offset: 0x648 - TX Message Buffer Data Field Register (renamed from CFDTMDF_14)
        volatile uint32_t CFDTMDF_15;  ///< Offset: 0x64C - TX Message Buffer Data Field Register (renamed from CFDTMDF_15)
        volatile uint32_t CFDTHLACC0;  ///< Offset: 0x740 - TX History List Access Register 0
        volatile uint32_t CFDTHLACC1;  ///< Offset: 0x744 - TX History List Access Register 1
        volatile uint32_t CFDRMID;  ///< Offset: 0x1520 - RX Message Buffer ID Registers (renamed from CFDRMID)
        volatile uint32_t CFDRMPTR;  ///< Offset: 0x1524 - RX Message Buffer Pointer Registers (renamed from CFDRMPTR)
        volatile uint32_t CFDRMFDSTS;  ///< Offset: 0x1528 - RX Message Buffer CANFD Status Registers (renamed from CFDRMFDSTS)
        volatile uint32_t CFDRMDF_0;  ///< Offset: 0x152C - RX Message Buffer Data Field 0 Registers (renamed from CFDRMDF_0)
        volatile uint32_t CFDRMDF_1;  ///< Offset: 0x1530 - RX Message Buffer Data Field 1 Registers (renamed from CFDRMDF_1)
        volatile uint32_t CFDRMDF_2;  ///< Offset: 0x1534 - RX Message Buffer Data Field 2 Registers (renamed from CFDRMDF_2)
        volatile uint32_t CFDRMDF_3;  ///< Offset: 0x1538 - RX Message Buffer Data Field 3 Registers (renamed from CFDRMDF_3)
        volatile uint32_t CFDRMDF_4;  ///< Offset: 0x153C - RX Message Buffer Data Field 4 Registers (renamed from CFDRMDF_4)
        volatile uint32_t CFDRMDF_5;  ///< Offset: 0x1540 - RX Message Buffer Data Field 5 Registers (renamed from CFDRMDF_5)
        volatile uint32_t CFDRMDF_6;  ///< Offset: 0x1544 - RX Message Buffer Data Field 6 Registers (renamed from CFDRMDF_6)
        volatile uint32_t CFDRMDF_7;  ///< Offset: 0x1548 - RX Message Buffer Data Field 7 Registers (renamed from CFDRMDF_7)
        volatile uint32_t CFDRMDF_8;  ///< Offset: 0x154C - RX Message Buffer Data Field 8 Registers (renamed from CFDRMDF_8)
        volatile uint32_t CFDRMDF_9;  ///< Offset: 0x1550 - RX Message Buffer Data Field 9 Registers (renamed from CFDRMDF_9)
        volatile uint32_t CFDRMDF_10;  ///< Offset: 0x1554 - RX Message Buffer Data Field 10 Registers (renamed from CFDRMDF_10)
        volatile uint32_t CFDRMDF_11;  ///< Offset: 0x1558 - RX Message Buffer Data Field 11 Registers (renamed from CFDRMDF_11)
        volatile uint32_t CFDRMDF_12;  ///< Offset: 0x155C - RX Message Buffer Data Field 12 Registers (renamed from CFDRMDF_12)
        volatile uint32_t CFDRMDF_13;  ///< Offset: 0x1560 - RX Message Buffer Data Field 13 Registers (renamed from CFDRMDF_13)
        volatile uint32_t CFDRMDF_14;  ///< Offset: 0x1564 - RX Message Buffer Data Field 14 Registers (renamed from CFDRMDF_14)
        volatile uint32_t CFDRMDF_15;  ///< Offset: 0x1568 - RX Message Buffer Data Field 15 Registers (renamed from CFDRMDF_15)
    };

    /// Peripheral instances
    inline Registers* CANFD_B = reinterpret_cast<Registers*>(CANFD_B_BASE);

    // Bit definitions
    /// CFDC0NCFG Register bits
    namespace cfdc0ncfg_bits {
        constexpr uint32_t NBRP = (10 << 0);  ///< Channel Nominal Baud Rate Prescaler
        constexpr uint32_t NSJW = (7 << 10);  ///< Resynchronization Jump Width
        constexpr uint32_t NTSEG1 = (8 << 17);  ///< Timing Segment 1
        constexpr uint32_t NTSEG2 = (7 << 25);  ///< Timing Segment 2
    }

    /// CFDC0CTR Register bits
    namespace cfdc0ctr_bits {
        constexpr uint32_t CHMDC = (2 << 0);  ///< Channel Mode Control
        constexpr uint32_t CSLPR = (1U << 2);  ///< Channel Sleep Request
        constexpr uint32_t RTBO = (1U << 3);  ///< Return from Bus-Off
        constexpr uint32_t BEIE = (1U << 8);  ///< Bus Error Interrupt Enable
        constexpr uint32_t EWIE = (1U << 9);  ///< Error Warning Interrupt Enable
        constexpr uint32_t EPIE = (1U << 10);  ///< Error Passive Interrupt Enable
        constexpr uint32_t BOEIE = (1U << 11);  ///< Bus-Off Entry Interrupt Enable
        constexpr uint32_t BORIE = (1U << 12);  ///< Bus-Off Recovery Interrupt Enable
        constexpr uint32_t OLIE = (1U << 13);  ///< Overload Interrupt Enable
        constexpr uint32_t BLIE = (1U << 14);  ///< Bus Lock Interrupt Enable
        constexpr uint32_t ALIE = (1U << 15);  ///< Arbitration Lost Interrupt Enable
        constexpr uint32_t TAIE = (1U << 16);  ///< Transmission Abort Interrupt Enable
        constexpr uint32_t EOCOIE = (1U << 17);  ///< Error Occurrence Counter Overflow Interrupt Enable
        constexpr uint32_t SOCOIE = (1U << 18);  ///< Successful Occurrence Counter Overflow Interrupt Enable
        constexpr uint32_t TDCVFIE = (1U << 19);  ///< Transceiver Delay Compensation Violation Interrupt Enable
        constexpr uint32_t BOM = (2 << 21);  ///< Channel Bus-Off Mode
        constexpr uint32_t ERRD = (1U << 23);  ///< Channel Error Display
        constexpr uint32_t CTME = (1U << 24);  ///< Channel Test Mode Enable
        constexpr uint32_t CTMS = (2 << 25);  ///< Channel Test Mode Select
        constexpr uint32_t BFT = (1U << 30);  ///< Bit Flip Test
        constexpr uint32_t ROM = (1U << 31);  ///< Restricted Operation Mode
    }

    /// CFDC0STS Register bits
    namespace cfdc0sts_bits {
        constexpr uint32_t CRSTSTS = (1U << 0);  ///< Channel Reset Status
        constexpr uint32_t CHLTSTS = (1U << 1);  ///< Channel Halt Status
        constexpr uint32_t CSLPSTS = (1U << 2);  ///< Channel Sleep Status
        constexpr uint32_t EPSTS = (1U << 3);  ///< Channel Error Passive Status
        constexpr uint32_t BOSTS = (1U << 4);  ///< Channel Bus-Off Status
        constexpr uint32_t TRMSTS = (1U << 5);  ///< Channel Transmit Status
        constexpr uint32_t RECSTS = (1U << 6);  ///< Channel Receive Status
        constexpr uint32_t COMSTS = (1U << 7);  ///< Channel Communication Status
        constexpr uint32_t ESIF = (1U << 8);  ///< Error State Indication Flag
        constexpr uint32_t REC = (8 << 16);  ///< Reception Error Count
        constexpr uint32_t TEC = (8 << 24);  ///< Transmission Error Count
    }

    /// CFDC0ERFL Register bits
    namespace cfdc0erfl_bits {
        constexpr uint32_t BEF = (1U << 0);  ///< Bus Error Flag
        constexpr uint32_t EWF = (1U << 1);  ///< Error Warning Flag
        constexpr uint32_t EPF = (1U << 2);  ///< Error Passive Flag
        constexpr uint32_t BOEF = (1U << 3);  ///< Bus-Off Entry Flag
        constexpr uint32_t BORF = (1U << 4);  ///< Bus-Off Recovery Flag
        constexpr uint32_t OVLF = (1U << 5);  ///< Overload Flag
        constexpr uint32_t BLF = (1U << 6);  ///< Bus Lock Flag
        constexpr uint32_t ALF = (1U << 7);  ///< Arbitration Lost Flag
        constexpr uint32_t SERR = (1U << 8);  ///< Stuff Error
        constexpr uint32_t FERR = (1U << 9);  ///< Form Error
        constexpr uint32_t AERR = (1U << 10);  ///< Acknowledge Error
        constexpr uint32_t CERR = (1U << 11);  ///< CRC Error
        constexpr uint32_t B1ERR = (1U << 12);  ///< Bit 1 Error
        constexpr uint32_t B0ERR = (1U << 13);  ///< Bit 0 Error
        constexpr uint32_t ADERR = (1U << 14);  ///< Acknowledge Delimiter Error
        constexpr uint32_t CRCREG = (15 << 16);  ///< CRC Register value
    }

    /// CFDGCFG Register bits
    namespace cfdgcfg_bits {
        constexpr uint32_t TPRI = (1U << 0);  ///< Transmission Priority
        constexpr uint32_t DCE = (1U << 1);  ///< DLC Check Enable
        constexpr uint32_t DRE = (1U << 2);  ///< DLC Replacement Enable
        constexpr uint32_t MME = (1U << 3);  ///< Mirror Mode Enable
        constexpr uint32_t DCS = (1U << 4);  ///< Data Link Controller Clock Select
        constexpr uint32_t CMPOC = (1U << 5);  ///< CANFD Message Payload Overflow Configuration
        constexpr uint32_t TSP = (4 << 8);  ///< Timestamp Prescaler
        constexpr uint32_t TSSS = (1U << 12);  ///< Timestamp Source Select
        constexpr uint32_t ITRCP = (16 << 16);  ///< Interval Timer Reference Clock Prescaler
    }

    /// CFDGCTR Register bits
    namespace cfdgctr_bits {
        constexpr uint32_t GMDC = (2 << 0);  ///< Global Mode Control
        constexpr uint32_t GSLPR = (1U << 2);  ///< Global Sleep Request
        constexpr uint32_t DEIE = (1U << 8);  ///< DLC Check Interrupt Enable
        constexpr uint32_t MEIE = (1U << 9);  ///< Message Lost Error Interrupt Enable
        constexpr uint32_t THLEIE = (1U << 10);  ///< TX History List Entry Lost Interrupt Enable
        constexpr uint32_t CMPOFIE = (1U << 11);  ///< CANFD Message Payload Overflow Flag Interrupt Enable
        constexpr uint32_t TSRST = (1U << 16);  ///< Timestamp Reset
    }

    /// CFDGSTS Register bits
    namespace cfdgsts_bits {
        constexpr uint32_t GRSTSTS = (1U << 0);  ///< Global Reset Status
        constexpr uint32_t GHLTSTS = (1U << 1);  ///< Global Halt Status
        constexpr uint32_t GSLPSTS = (1U << 2);  ///< Global Sleep Status
        constexpr uint32_t GRAMINIT = (1U << 3);  ///< Global RAM Initialization
    }

    /// CFDGERFL Register bits
    namespace cfdgerfl_bits {
        constexpr uint32_t DEF = (1U << 0);  ///< DLC Error Flag
        constexpr uint32_t MES = (1U << 1);  ///< Message Lost Error Status
        constexpr uint32_t THLES = (1U << 2);  ///< TX History List Entry Lost Error Status
        constexpr uint32_t CMPOF = (1U << 3);  ///< CANFD Message Payload Overflow Flag
        constexpr uint32_t EEF0 = (1U << 16);  ///< ECC Error Flag
    }

    /// CFDGTSC Register bits
    namespace cfdgtsc_bits {
        constexpr uint32_t TS = (16 << 0);  ///< Timestamp value
    }

    /// CFDGAFLECTR Register bits
    namespace cfdgaflectr_bits {
        constexpr uint32_t AFLPN = (1U << 0);  ///< Acceptance Filter List Page Number
        constexpr uint32_t AFLDAE = (1U << 8);  ///< Acceptance Filter List Data Access Enable
    }

    /// CFDGAFLCFG Register bits
    namespace cfdgaflcfg_bits {
        constexpr uint32_t RNC0 = (6 << 16);  ///< Rule Number
    }

    /// CFDRMNB Register bits
    namespace cfdrmnb_bits {
        constexpr uint32_t NRXMB = (6 << 0);  ///< Number of RX Message Buffers
        constexpr uint32_t RMPLS = (3 << 8);  ///< Reception Message Buffer Payload Data Size
    }

    /// CFDRMND Register bits
    namespace cfdrmnd_bits {
        constexpr uint32_t RMNS = (32 << 0);  ///< RX Message Buffer New Data Status
    }

    /// CFDRMIEC Register bits
    namespace cfdrmiec_bits {
        constexpr uint32_t RMIEg = (32 << 0);  ///< RX Message Buffer Interrupt Enable
    }

    /// CFDRFCC Register bits
    namespace cfdrfcc_bits {
        constexpr uint32_t RFE = (1U << 0);  ///< RX FIFO Enable
        constexpr uint32_t RFIE = (1U << 1);  ///< RX FIFO Interrupt Enable
        constexpr uint32_t RFPLS = (3 << 4);  ///< Rx FIFO Payload Data Size Configuration
        constexpr uint32_t RFDC = (3 << 8);  ///< RX FIFO Depth Configuration
        constexpr uint32_t RFIM = (1U << 12);  ///< RX FIFO Interrupt Mode
        constexpr uint32_t RFIGCV = (3 << 13);  ///< RX FIFO Interrupt Generation Counter Value
    }

    /// CFDRFSTS Register bits
    namespace cfdrfsts_bits {
        constexpr uint32_t RFEMP = (1U << 0);  ///< RX FIFO Empty
        constexpr uint32_t RFFLL = (1U << 1);  ///< RX FIFO Full
        constexpr uint32_t RFMLT = (1U << 2);  ///< RX FIFO Message Lost
        constexpr uint32_t RFIF = (1U << 3);  ///< RX FIFO Interrupt Flag
        constexpr uint32_t RFMC = (6 << 8);  ///< RX FIFO Message Count
    }

    /// CFDRFPCTR Register bits
    namespace cfdrfpctr_bits {
        constexpr uint32_t RFPC = (8 << 0);  ///< RX FIFO Pointer Control
    }

    /// CFDCFCC Register bits
    namespace cfdcfcc_bits {
        constexpr uint32_t CFE = (1U << 0);  ///< Common FIFO Enable
        constexpr uint32_t CFRXIE = (1U << 1);  ///< Common FIFO RX Interrupt Enable
        constexpr uint32_t CFTXIE = (1U << 2);  ///< Common FIFO TX Interrupt Enable
        constexpr uint32_t CFPLS = (3 << 4);  ///< Common FIFO Payload Data Size Configuration
        constexpr uint32_t CFM = (1U << 8);  ///< Common FIFO Mode
        constexpr uint32_t CFITSS = (1U << 10);  ///< Common FIFO Interval Timer Source Select
        constexpr uint32_t CFITR = (1U << 11);  ///< Common FIFO Interval Timer Resolution
        constexpr uint32_t CFIM = (1U << 12);  ///< Common FIFO Interrupt Mode
        constexpr uint32_t CFIGCV = (3 << 13);  ///< Common FIFO Interrupt Generation Counter Value
        constexpr uint32_t CFTML = (2 << 16);  ///< Common FIFO TX Message Buffer Link
        constexpr uint32_t CFDC = (3 << 21);  ///< Common FIFO Depth Configuration
        constexpr uint32_t CFITT = (8 << 24);  ///< Common FIFO Interval Transmission Time
    }

    /// CFDCFSTS Register bits
    namespace cfdcfsts_bits {
        constexpr uint32_t CFEMP = (1U << 0);  ///< Common FIFO Empty
        constexpr uint32_t CFFLL = (1U << 1);  ///< Common FIFO Full
        constexpr uint32_t CFMLT = (1U << 2);  ///< Common FIFO Message Lost
        constexpr uint32_t CFRXIF = (1U << 3);  ///< Common RX FIFO Interrupt Flag
        constexpr uint32_t CFTXIF = (1U << 4);  ///< Common TX FIFO Interrupt Flag
        constexpr uint32_t CFMC = (6 << 8);  ///< Common FIFO Message Count
    }

    /// CFDCFPCTR Register bits
    namespace cfdcfpctr_bits {
        constexpr uint32_t CFPC = (8 << 0);  ///< Common FIFO Pointer Control
    }

    /// CFDFESTS Register bits
    namespace cfdfests_bits {
        constexpr uint32_t RFXEMP = (2 << 0);  ///< RX FIFO Empty Status
        constexpr uint32_t CFEMP = (1U << 8);  ///< Common FIFO Empty Status
    }

    /// CFDFFSTS Register bits
    namespace cfdffsts_bits {
        constexpr uint32_t RFXFLL = (2 << 0);  ///< RX FIF0 Full Status
        constexpr uint32_t CFFLL = (1U << 8);  ///< Common FIF0 Full Status
    }

    /// CFDFMSTS Register bits
    namespace cfdfmsts_bits {
        constexpr uint32_t RFXMLT = (2 << 0);  ///< RX FIFO Message Lost Status
        constexpr uint32_t CFMLT = (1U << 8);  ///< Common FIFO Message Lost Status
    }

    /// CFDRFISTS Register bits
    namespace cfdrfists_bits {
        constexpr uint32_t RFXIF = (2 << 0);  ///< RX FIFO[x] Interrupt Flag Status
    }

    /// CFDTMC Register bits
    namespace cfdtmc_bits {
        constexpr uint32_t TMTR = (1U << 0);  ///< TX Message Buffer Transmission Request
        constexpr uint32_t TMTAR = (1U << 1);  ///< TX Message Buffer Transmission Abort Request
        constexpr uint32_t TMOM = (1U << 2);  ///< TX Message Buffer One-shot Mode
    }

    /// CFDTMSTS Register bits
    namespace cfdtmsts_bits {
        constexpr uint32_t TMTSTS = (1U << 0);  ///< TX Message Buffer Transmission Status
        constexpr uint32_t TMTRF = (2 << 1);  ///< TX Message Buffer Transmission Result Flag
        constexpr uint32_t TMTRM = (1U << 3);  ///< TX Message Buffer Transmission Request Mirrored
        constexpr uint32_t TMTARM = (1U << 4);  ///< TX Message Buffer Transmission Abort Request Mirrored
    }

    /// CFDTMTRSTS Register bits
    namespace cfdtmtrsts_bits {
        constexpr uint32_t CFDTMTRSTS = (4 << 0);  ///< TX Message Buffer Transmission Request Status
    }

    /// CFDTMTARSTS Register bits
    namespace cfdtmtarsts_bits {
        constexpr uint32_t CFDTMTARSTS = (4 << 0);  ///< TX Message Buffer Transmission Abort Request Status
    }

    /// CFDTMTCSTS Register bits
    namespace cfdtmtcsts_bits {
        constexpr uint32_t CFDTMTCSTS = (4 << 0);  ///< TX Message Buffer Transmission Completion Status
    }

    /// CFDTMTASTS Register bits
    namespace cfdtmtasts_bits {
        constexpr uint32_t CFDTMTASTS = (4 << 0);  ///< TX Message Buffer Transmission Abort Status
    }

    /// CFDTMIEC Register bits
    namespace cfdtmiec_bits {
        constexpr uint32_t TMIEg = (4 << 0);  ///< TX Message Buffer Interrupt Enable
    }

    /// CFDTXQCC Register bits
    namespace cfdtxqcc_bits {
        constexpr uint32_t TXQE = (1U << 0);  ///< TX Queue Enable
        constexpr uint32_t TXQTXIE = (1U << 5);  ///< TX Queue TX Interrupt Enable
        constexpr uint32_t TXQIM = (1U << 7);  ///< TX Queue Interrupt Mode
        constexpr uint32_t TXQDC = (2 << 8);  ///< TX Queue Depth Configuration
    }

    /// CFDTXQSTS Register bits
    namespace cfdtxqsts_bits {
        constexpr uint32_t TXQEMP = (1U << 0);  ///< TX Queue Empty
        constexpr uint32_t TXQFLL = (1U << 1);  ///< TX Queue Full
        constexpr uint32_t TXQTXIF = (1U << 2);  ///< TX Queue TX Interrupt Flag
        constexpr uint32_t TXQMC = (3 << 8);  ///< TX Queue Message Count
    }

    /// CFDTXQPCTR Register bits
    namespace cfdtxqpctr_bits {
        constexpr uint32_t TXQPC = (8 << 0);  ///< TX Queue Pointer Control
    }

    /// CFDTHLCC Register bits
    namespace cfdthlcc_bits {
        constexpr uint32_t THLE = (1U << 0);  ///< TX History List Enable
        constexpr uint32_t THLIE = (1U << 8);  ///< TX History List Interrupt Enable
        constexpr uint32_t THLIM = (1U << 9);  ///< TX History List Interrupt Mode
        constexpr uint32_t THLDTE = (1U << 10);  ///< TX History List Dedicated TX Enable
    }

    /// CFDTHLSTS Register bits
    namespace cfdthlsts_bits {
        constexpr uint32_t THLEMP = (1U << 0);  ///< TX History List Empty
        constexpr uint32_t THLFLL = (1U << 1);  ///< TX History List Full
        constexpr uint32_t THLELT = (1U << 2);  ///< TX History List Entry Lost
        constexpr uint32_t THLIF = (1U << 3);  ///< TX History List Interrupt Flag
        constexpr uint32_t THLMC = (4 << 8);  ///< TX History List Message Count
    }

    /// CFDTHLPCTR Register bits
    namespace cfdthlpctr_bits {
        constexpr uint32_t THLPC = (8 << 0);  ///< TX History List Pointer Control
    }

    /// CFDGTINTSTS Register bits
    namespace cfdgtintsts_bits {
        constexpr uint32_t TSIF0 = (1U << 0);  ///< TX Successful Interrupt Flag
        constexpr uint32_t TAI0 = (1U << 1);  ///< TX Abort Interrupt Flag
        constexpr uint32_t TQIF0 = (1U << 2);  ///< TX Queue Interrupt Flag
        constexpr uint32_t CFTIF0 = (1U << 3);  ///< COM FIFO TX Mode Interrupt Flag
        constexpr uint32_t THIF0 = (1U << 4);  ///< TX History List Interrupt
    }

    /// CFDGTSTCFG Register bits
    namespace cfdgtstcfg_bits {
        constexpr uint32_t RTMPS = (4 << 16);  ///< RAM Test Mode Page Select
    }

    /// CFDGTSTCTR Register bits
    namespace cfdgtstctr_bits {
        constexpr uint32_t RTME = (1U << 2);  ///< RAM Test Mode Enable
    }

    /// CFDGFDCFG Register bits
    namespace cfdgfdcfg_bits {
        constexpr uint32_t RPED = (1U << 0);  ///< RES Bit Protocol Exception Disable
        constexpr uint32_t TSCCFG = (2 << 8);  ///< Timestamp Capture Configuration
    }

    /// CFDGLOCKK Register bits
    namespace cfdglockk_bits {
        constexpr uint32_t LOCK = (16 << 0);  ///< Lock Key
    }

    /// CFDGAFLIGNENT Register bits
    namespace cfdgaflignent_bits {
        constexpr uint32_t IRN = (5 << 0);  ///< Ignore Rule Number
    }

    /// CFDGAFLIGNCTR Register bits
    namespace cfdgaflignctr_bits {
        constexpr uint32_t IREN = (1U << 0);  ///< Ignore Rule Enable
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

    /// CFDCDTCT Register bits
    namespace cfdcdtct_bits {
        constexpr uint32_t RFDMAE0 = (1U << 0);  ///< DMA Transfer Enable for RXFIFO 0
        constexpr uint32_t RFDMAE1 = (1U << 1);  ///< DMA Transfer Enable for RXFIFO 1
        constexpr uint32_t CFDMAE = (1U << 8);  ///< DMA Transfer Enable for Common FIFO 0
    }

    /// CFDCDTSTS Register bits
    namespace cfdcdtsts_bits {
        constexpr uint32_t RFDMASTS0 = (1U << 0);  ///< DMA Transfer Status for RX FIFO 0
        constexpr uint32_t RFDMASTS1 = (1U << 1);  ///< DMA Transfer Status for RX FIFO 1
        constexpr uint32_t CFDMASTS = (1U << 8);  ///< DMA Transfer Status only for Common FIFO
    }

    /// CFDGRSTC Register bits
    namespace cfdgrstc_bits {
        constexpr uint32_t SRST = (1U << 0);  ///< SW Reset
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

    /// CFDC0DCFG Register bits
    namespace cfdc0dcfg_bits {
        constexpr uint32_t DBRP = (8 << 0);  ///< Channel Data Baud Rate Prescaler
        constexpr uint32_t DTSEG1 = (5 << 8);  ///< Timing Segment 1
        constexpr uint32_t DTSEG2 = (4 << 16);  ///< Timing Segment 2
        constexpr uint32_t DSJW = (4 << 24);  ///< Resynchronization Jump Width
    }

    /// CFDC0FDCFG Register bits
    namespace cfdc0fdcfg_bits {
        constexpr uint32_t EOCCFG = (3 << 0);  ///< Error Occurrence Counter Configuration
        constexpr uint32_t TDCOC = (1U << 8);  ///< Transceiver Delay Compensation Offset Configuration
        constexpr uint32_t TDCE = (1U << 9);  ///< Transceiver Delay Compensation Enable
        constexpr uint32_t ESIC = (1U << 10);  ///< Error State Indication Configuration
        constexpr uint32_t TDCO = (8 << 16);  ///< Transceiver Delay Compensation Offset
        constexpr uint32_t FDOE = (1U << 28);  ///< FD-Only Enable
        constexpr uint32_t REFE = (1U << 29);  ///< RX Edge Filter Enable
        constexpr uint32_t CLOE = (1U << 30);  ///< Classical CAN Enable
    }

    /// CFDC0FDCTR Register bits
    namespace cfdc0fdctr_bits {
        constexpr uint32_t EOCCLR = (1U << 0);  ///< Error Occurrence Counter Clear
        constexpr uint32_t SOCCLR = (1U << 1);  ///< Successful Occurrence Counter Clear
    }

    /// CFDC0FDSTS Register bits
    namespace cfdc0fdsts_bits {
        constexpr uint32_t TDCR = (8 << 0);  ///< Transceiver Delay Compensation Result
        constexpr uint32_t EOCO = (1U << 8);  ///< Error Occurrence Counter Overflow
        constexpr uint32_t SOCO = (1U << 9);  ///< Successful Occurrence Counter Overflow
        constexpr uint32_t TDCVF = (1U << 15);  ///< Transceiver Delay Compensation Violation Flag
        constexpr uint32_t EOC = (8 << 16);  ///< Error Occurrence Counter
        constexpr uint32_t SOC = (8 << 24);  ///< Successful occurrence counter
    }

    /// CFDC0FDCRC Register bits
    namespace cfdc0fdcrc_bits {
        constexpr uint32_t CRCREG = (21 << 0);  ///< CRC Register value
        constexpr uint32_t SCNT = (4 << 24);  ///< Stuff bit count
    }

    /// CFDGAFLID Register bits
    namespace cfdgaflid_bits {
        constexpr uint32_t GAFLID = (29 << 0);  ///< Global Acceptance Filter List Entry ID Field
        constexpr uint32_t GAFLLB = (1U << 29);  ///< Global Acceptance Filter List Entry Loopback Configuration
        constexpr uint32_t GAFLRTR = (1U << 30);  ///< Global Acceptance Filter List Entry RTR Field
        constexpr uint32_t GAFLIDE = (1U << 31);  ///< Global Acceptance Filter List Entry IDE Field
    }

    /// CFDGAFLM Register bits
    namespace cfdgaflm_bits {
        constexpr uint32_t GAFLIDM = (29 << 0);  ///< Global Acceptance Filter List ID Mask Field
        constexpr uint32_t GAFLIFL1 = (1U << 29);  ///< Global Acceptance Filter List Information Label 1
        constexpr uint32_t GAFLRTRM = (1U << 30);  ///< Global Acceptance Filter List Entry RTR Mask
        constexpr uint32_t GAFLIDEM = (1U << 31);  ///< Global Acceptance Filter List IDE Mask
    }

    /// CFDGAFLP0 Register bits
    namespace cfdgaflp0_bits {
        constexpr uint32_t GAFLDLC = (4 << 0);  ///< Global Acceptance Filter List DLC Field
        constexpr uint32_t GAFLIFL0 = (1U << 7);  ///< Global Acceptance Filter List Information Label 0
        constexpr uint32_t GAFLRMDP = (5 << 8);  ///< Global Acceptance Filter List RX Message Buffer Direction Pointer
        constexpr uint32_t GAFLRMV = (1U << 15);  ///< Global Acceptance Filter List RX Message Buffer Valid
        constexpr uint32_t GAFLPTR = (16 << 16);  ///< Global Acceptance Filter List Pointer
    }

    /// CFDGAFLP1 Register bits
    namespace cfdgaflp1_bits {
        constexpr uint32_t GAFLFDP0 = (1U << 0);  ///< Global Acceptance Filter List FIFO Direction Pointer
        constexpr uint32_t GAFLFDP1 = (1U << 1);  ///< Global Acceptance Filter List FIFO Direction Pointer
        constexpr uint32_t GAFLFDP8 = (1U << 8);  ///< Global Acceptance Filter List FIFO Direction Pointer
    }

    /// CFDRPGACC Register bits
    namespace cfdrpgacc_bits {
        constexpr uint32_t RDTA = (32 << 0);  ///< RAM Data Test Access
    }

    /// CFDRFID Register bits
    namespace cfdrfid_bits {
        constexpr uint32_t RFID = (29 << 0);  ///< RX FIFO Buffer ID Field
        constexpr uint32_t RFRTR = (1U << 30);  ///< RX FIFO Buffer RTR bit
        constexpr uint32_t RFIDE = (1U << 31);  ///< RX FIFO Buffer IDE bit
    }

    /// CFDRFPTR Register bits
    namespace cfdrfptr_bits {
        constexpr uint32_t RFTS = (16 << 0);  ///< RX FIFO Timestamp Value
        constexpr uint32_t RFDLC = (4 << 28);  ///< RX FIFO Buffer DLC Field
    }

    /// CFDRFFDSTS Register bits
    namespace cfdrffdsts_bits {
        constexpr uint32_t RFESI = (1U << 0);  ///< Error State Indicator bit
        constexpr uint32_t RFBRS = (1U << 1);  ///< Bit Rate Switch bit
        constexpr uint32_t RFFDF = (1U << 2);  ///< CAN FD Format bit
        constexpr uint32_t RFIFL = (2 << 8);  ///< RX FIFO Buffer Information Label Field
        constexpr uint32_t CFDRFPTR = (16 << 16);  ///< RX FIFO Buffer Pointer Field
    }

    /// CFDRFDF_0 Register bits
    namespace cfdrfdf_0_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_1 Register bits
    namespace cfdrfdf_1_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_2 Register bits
    namespace cfdrfdf_2_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_3 Register bits
    namespace cfdrfdf_3_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_4 Register bits
    namespace cfdrfdf_4_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_5 Register bits
    namespace cfdrfdf_5_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_6 Register bits
    namespace cfdrfdf_6_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_7 Register bits
    namespace cfdrfdf_7_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_8 Register bits
    namespace cfdrfdf_8_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_9 Register bits
    namespace cfdrfdf_9_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_10 Register bits
    namespace cfdrfdf_10_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_11 Register bits
    namespace cfdrfdf_11_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_12 Register bits
    namespace cfdrfdf_12_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_13 Register bits
    namespace cfdrfdf_13_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_14 Register bits
    namespace cfdrfdf_14_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRFDF_15 Register bits
    namespace cfdrfdf_15_bits {
        constexpr uint32_t RFDB_LL = (8 << 0);  ///< RX FIFO Buffer Data Byte (p × 4)
        constexpr uint32_t RFDB_LH = (8 << 8);  ///< RX FIFO Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RFDB_HL = (8 << 16);  ///< RX FIFO Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RFDB_HH = (8 << 24);  ///< RX FIFO Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDCFID Register bits
    namespace cfdcfid_bits {
        constexpr uint32_t CFID = (29 << 0);  ///< Common FIFO Buffer ID Field
        constexpr uint32_t THLEN = (1U << 29);  ///< THL Entry enable
        constexpr uint32_t CFRTR = (1U << 30);  ///< Common FIFO Buffer RTR Bit
        constexpr uint32_t CFIDE = (1U << 31);  ///< Common FIFO Buffer IDE Bit
    }

    /// CFDCFPTR Register bits
    namespace cfdcfptr_bits {
        constexpr uint32_t CFTS = (16 << 0);  ///< Common FIFO Timestamp Value
        constexpr uint32_t CFDLC = (4 << 28);  ///< Common FIFO Buffer DLC Field
    }

    /// CFDCFFDCSTS Register bits
    namespace cfdcffdcsts_bits {
        constexpr uint32_t CFESI = (1U << 0);  ///< Error State Indicator bit
        constexpr uint32_t CFBRS = (1U << 1);  ///< Bit Rate Switch bit
        constexpr uint32_t CFFDF = (1U << 2);  ///< CAN FD Format bit
        constexpr uint32_t CFIFL = (2 << 8);  ///< COMMON FIFO Buffer Information Label Field
        constexpr uint32_t CFPTR = (16 << 16);  ///< Common FIFO Buffer Pointer Field
    }

    /// CFDCFDF Register bits
    namespace cfdcfdf_bits {
        constexpr uint32_t CFDB_LL = (8 << 0);  ///< Common FIFO Buffer Data Bytes (p × 4)
        constexpr uint32_t CFDB_LH = (8 << 8);  ///< Common FIFO Buffer Data Bytes ((p × 4) + 1)
        constexpr uint32_t CFDB_HL = (8 << 16);  ///< Common FIFO Buffer Data Bytes ((p × 4) + 2)
        constexpr uint32_t CFDB_HH = (8 << 24);  ///< Common FIFO Buffer Data Bytes ((p × 4) + 3)
    }

    /// CFDTMID Register bits
    namespace cfdtmid_bits {
        constexpr uint32_t TMID = (29 << 0);  ///< TX Message Buffer ID Field
        constexpr uint32_t THLEN = (1U << 29);  ///< Tx History List Entry
        constexpr uint32_t TMRTR = (1U << 30);  ///< TX Message Buffer RTR bit
        constexpr uint32_t TMIDE = (1U << 31);  ///< TX Message Buffer IDE bit
    }

    /// CFDTMPTR Register bits
    namespace cfdtmptr_bits {
        constexpr uint32_t TMDLC = (4 << 28);  ///< TX Message Buffer DLC Field
    }

    /// CFDTMFDCTR Register bits
    namespace cfdtmfdctr_bits {
        constexpr uint32_t TMESI = (1U << 0);  ///< Error State Indicator bit
        constexpr uint32_t TMBRS = (1U << 1);  ///< Bit Rate Switch bit
        constexpr uint32_t TMFDF = (1U << 2);  ///< CAN FD Format bit
        constexpr uint32_t TMIFL = (2 << 8);  ///< TX Message Buffer Information Label Field
        constexpr uint32_t TMPTR = (16 << 16);  ///< TX Message Buffer Pointer Field
    }

    /// CFDTMDF_0 Register bits
    namespace cfdtmdf_0_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_1 Register bits
    namespace cfdtmdf_1_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_2 Register bits
    namespace cfdtmdf_2_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_3 Register bits
    namespace cfdtmdf_3_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_4 Register bits
    namespace cfdtmdf_4_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_5 Register bits
    namespace cfdtmdf_5_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_6 Register bits
    namespace cfdtmdf_6_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_7 Register bits
    namespace cfdtmdf_7_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_8 Register bits
    namespace cfdtmdf_8_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_9 Register bits
    namespace cfdtmdf_9_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_10 Register bits
    namespace cfdtmdf_10_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_11 Register bits
    namespace cfdtmdf_11_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_12 Register bits
    namespace cfdtmdf_12_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_13 Register bits
    namespace cfdtmdf_13_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_14 Register bits
    namespace cfdtmdf_14_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTMDF_15 Register bits
    namespace cfdtmdf_15_bits {
        constexpr uint32_t TMDB_LL = (8 << 0);  ///< TX Message Buffer Data Byte ((p × 4)
        constexpr uint32_t TMDB_LH = (8 << 8);  ///< TX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t TMDB_HL = (8 << 16);  ///< TX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t TMDB_HH = (8 << 24);  ///< TX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDTHLACC0 Register bits
    namespace cfdthlacc0_bits {
        constexpr uint32_t BT = (3 << 0);  ///< Buffer Type
        constexpr uint32_t BN = (2 << 3);  ///< Buffer Number
        constexpr uint32_t TMTS = (16 << 16);  ///< Transmit Timestamp
    }

    /// CFDTHLACC1 Register bits
    namespace cfdthlacc1_bits {
        constexpr uint32_t TID = (16 << 0);  ///< Transmit ID
        constexpr uint32_t TIFL = (2 << 16);  ///< Transmit Information Label
    }

    /// CFDRMID Register bits
    namespace cfdrmid_bits {
        constexpr uint32_t RMID = (29 << 0);  ///< RX Message Buffer ID Field
        constexpr uint32_t RMRTR = (1U << 30);  ///< RX Message Buffer RTR Bit
        constexpr uint32_t RMIDE = (1U << 31);  ///< RX Message Buffer IDE Bit
    }

    /// CFDRMPTR Register bits
    namespace cfdrmptr_bits {
        constexpr uint32_t RMTS = (16 << 0);  ///< RX Message Buffer Timestamp Field
        constexpr uint32_t RMDLC = (4 << 28);  ///< RX Message Buffer DLC Field
    }

    /// CFDRMFDSTS Register bits
    namespace cfdrmfdsts_bits {
        constexpr uint32_t RMESI = (1U << 0);  ///< Error State Indicator bit
        constexpr uint32_t RMBRS = (1U << 1);  ///< Bit Rate Switch bit
        constexpr uint32_t RMFDF = (1U << 2);  ///< CAN FD Format bit
        constexpr uint32_t RMIFL = (2 << 8);  ///< RX Message Buffer Information Label Field
        constexpr uint32_t RMPTR = (16 << 16);  ///< RX Message Buffer Pointer Field
    }

    /// CFDRMDF_0 Register bits
    namespace cfdrmdf_0_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_1 Register bits
    namespace cfdrmdf_1_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_2 Register bits
    namespace cfdrmdf_2_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_3 Register bits
    namespace cfdrmdf_3_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_4 Register bits
    namespace cfdrmdf_4_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_5 Register bits
    namespace cfdrmdf_5_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_6 Register bits
    namespace cfdrmdf_6_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_7 Register bits
    namespace cfdrmdf_7_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_8 Register bits
    namespace cfdrmdf_8_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_9 Register bits
    namespace cfdrmdf_9_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_10 Register bits
    namespace cfdrmdf_10_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_11 Register bits
    namespace cfdrmdf_11_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_12 Register bits
    namespace cfdrmdf_12_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_13 Register bits
    namespace cfdrmdf_13_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_14 Register bits
    namespace cfdrmdf_14_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

    /// CFDRMDF_15 Register bits
    namespace cfdrmdf_15_bits {
        constexpr uint32_t RMDB_LL = (8 << 0);  ///< RX Message Buffer Data Byte (p × 4)
        constexpr uint32_t RMDB_LH = (8 << 8);  ///< RX Message Buffer Data Byte ((p × 4) + 1)
        constexpr uint32_t RMDB_HL = (8 << 16);  ///< RX Message Buffer Data Byte ((p × 4) + 2)
        constexpr uint32_t RMDB_HH = (8 << 24);  ///< RX Message Buffer Data Byte ((p × 4) + 3)
    }

}

// ============================================================================
// PSCU Peripheral
// ============================================================================

namespace pscu {
    /// Base addresses
    constexpr uint32_t PSCU_BASE = 0x400E0000;

    /// PSCU Register structure
    struct Registers {
        volatile uint32_t PSARB;  ///< Offset: 0x04 - Peripheral Security Attribution Register B
        volatile uint32_t PSARC;  ///< Offset: 0x08 - Peripheral Security Attribution Register C
        volatile uint32_t PSARD;  ///< Offset: 0x0C - Peripheral Security Attribution Register D
        volatile uint32_t PSARE;  ///< Offset: 0x10 - Peripheral Security Attribution Register E
        volatile uint32_t MSSAR;  ///< Offset: 0x14 - Module Stop Security Attribution Register
        volatile uint32_t CFSAMONA;  ///< Offset: 0x18 - Code Flash Security Attribution Monitor Register A
        volatile uint32_t CFSAMONB;  ///< Offset: 0x1C - Code Flash Security Attribution Monitor Register B
        volatile uint32_t DFSAMON;  ///< Offset: 0x20 - Data Flash Security Attribution Monitor Register
        volatile uint32_t SSAMONA;  ///< Offset: 0x24 - SRAM Security Attribution Monitor Register A
        volatile uint32_t SSAMONB;  ///< Offset: 0x28 - SRAM Security Attribution Monitor Register B
        volatile uint32_t DLMMON;  ///< Offset: 0x2C - Device Lifecycle Management State Monitor Register
    };

    /// Peripheral instances
    inline Registers* PSCU = reinterpret_cast<Registers*>(PSCU_BASE);

    // Bit definitions
    /// PSARB Register bits
    namespace psarb_bits {
        constexpr uint32_t PSARB8 = (1U << 8);  ///< IIC1 and the MSTPCRB.MSTPB8 bit security attribution
        constexpr uint32_t PSARB9 = (1U << 9);  ///< IIC0 and the MSTPCRB.MSTPB9 bit security attribution
        constexpr uint32_t PSARB18 = (1U << 18);  ///< SPI1 and the MSTPCRB.MSTPB18 bit security attribution
        constexpr uint32_t PSARB19 = (1U << 19);  ///< SPI0 and the MSTPCRB.MSTPB19 bit security attribution
        constexpr uint32_t PSARB22 = (1U << 22);  ///< SCI9 and the MSTPCRB.MSTPB22 bit security attribution
        constexpr uint32_t PSARB27 = (1U << 27);  ///< SCI4 and the MSTPCRB.MSTPB27 bit security attribution
        constexpr uint32_t PSARB28 = (1U << 28);  ///< SCI3 and the MSTPCRB.MSTPB28 bit security attribution
        constexpr uint32_t PSARB29 = (1U << 29);  ///< SCI2 and the MSTPCRB.MSTPB29 bit security attribution
        constexpr uint32_t PSARB30 = (1U << 30);  ///< SCI1 and the MSTPCRB.MSTPB30 bit security attribution
        constexpr uint32_t PSARB31 = (1U << 31);  ///< SCI0 and the MSTPCRB.MSTPB31 bit security attribution
    }

    /// PSARC Register bits
    namespace psarc_bits {
        constexpr uint32_t PSARC0 = (1U << 0);  ///< CAC and the MSTPCRC.MSTPC0 bit security attribution
        constexpr uint32_t PSARC1 = (1U << 1);  ///< CRC and the MSTPCRC.MSTPC1 bit security attribution
        constexpr uint32_t PSARC13 = (1U << 13);  ///< DOC and the MSTPCRC.MSTPC13 bit security attribution
        constexpr uint32_t PSARC20 = (1U << 20);  ///< TFU and the MSTPCRC.MSTPC20 bit security attribution
        constexpr uint32_t PSARC21 = (1U << 21);  ///< IIRFA and the MSTPCRC.MSTPC21 bit security attribution
        constexpr uint32_t PSARC27 = (1U << 27);  ///< CANFD and the MSTPCRC.MSTPC27 bit security attribution
        constexpr uint32_t PSARC31 = (1U << 31);  ///< SCE5 and the MSTPCRC.MSTPC31 bit security attribution
    }

    /// PSARD Register bits
    namespace psard_bits {
        constexpr uint32_t PSARD2 = (1U << 2);  ///< AGT1 and the MSTPCRD.MSTPD2 bit security attribution
        constexpr uint32_t PSARD3 = (1U << 3);  ///< AGT0 and the MSTPCRD.MSTPD3 bit security attribution
        constexpr uint32_t PSARD11 = (1U << 11);  ///< POEG Group D and the MSTPCRD.MSTPD11 bit security attribution
        constexpr uint32_t PSARD12 = (1U << 12);  ///< POEG Group C and the MSTPCRD.MSTPD12 bit security attribution
        constexpr uint32_t PSARD13 = (1U << 13);  ///< POEG Group B and the MSTPCRD.MSTPD13 bit security attribution
        constexpr uint32_t PSARD14 = (1U << 14);  ///< POEG Group A and the MSTPCRD.MSTPD14 bit security attribution
        constexpr uint32_t PSARD16 = (1U << 16);  ///< ADC and the MSTPCRD.MSTPD16 bit security attribution
        constexpr uint32_t PSARD19 = (1U << 19);  ///< DAC12 unit1 and the MSTPCRD.MSTPD19 bit security attribution
        constexpr uint32_t PSARD20 = (1U << 20);  ///< DAC12 unit0 and the MSTPCRD.MSTPD20 bit security attribution
        constexpr uint32_t PSARD22 = (1U << 22);  ///< TSN and the MSTPCRD.MSTPD22 bit security attribution
        constexpr uint32_t PSARD25 = (1U << 25);  ///< ACMPHS3 and the MSTPCRD.MSTPD25 bit security attribution
        constexpr uint32_t PSARD26 = (1U << 26);  ///< ACMPHS2 and the MSTPCRD.MSTPD26 bit security attribution
        constexpr uint32_t PSARD27 = (1U << 27);  ///< ACMPHS1 and the MSTPCRD.MSTPD27 bit security attribution
        constexpr uint32_t PSARD28 = (1U << 28);  ///< ACMPHS0 and the MSTPCRD.MSTPD28 bit security attribution
    }

    /// PSARE Register bits
    namespace psare_bits {
        constexpr uint32_t PSARE0 = (1U << 0);  ///< WDT security attribution
        constexpr uint32_t PSARE1 = (1U << 1);  ///< IWDT security attribution
        constexpr uint32_t PSARE4 = (1U << 4);  ///< KINT and the MSTPCRE.MSTPE4 bit security attribution
    }

    /// MSSAR Register bits
    namespace mssar_bits {
        constexpr uint32_t MSSAR0 = (1U << 0);  ///< The MSTPCRC.MSTPC14 bit security attribution
        constexpr uint32_t MSSAR1 = (1U << 1);  ///< The MSTPCRA.MSTPA22 bit security attribution
        constexpr uint32_t MSSAR2 = (1U << 2);  ///< The MSTPCRA.MSTPA7 bit security attribution
        constexpr uint32_t MSSAR3 = (1U << 3);  ///< The MSTPCRA.MSTPA0 bit security attribution
    }

    /// CFSAMONA Register bits
    namespace cfsamona_bits {
        constexpr uint32_t CFS2 = (9 << 15);  ///< Code Flash Secure area 2
    }

    /// CFSAMONB Register bits
    namespace cfsamonb_bits {
        constexpr uint32_t CFS1 = (14 << 10);  ///< Code Flash Secure area 1
    }

    /// DFSAMON Register bits
    namespace dfsamon_bits {
        constexpr uint32_t DFS = (6 << 10);  ///< Data flash Secure area
    }

    /// SSAMONA Register bits
    namespace ssamona_bits {
        constexpr uint32_t SS2 = (8 << 13);  ///< SRAM Secure area 2
    }

    /// SSAMONB Register bits
    namespace ssamonb_bits {
        constexpr uint32_t SS1 = (11 << 10);  ///< SRAM secure area 1
    }

    /// DLMMON Register bits
    namespace dlmmon_bits {
        constexpr uint32_t DLMMON = (4 << 0);  ///< Device Lifecycle Management State Monitor
    }

}

// ============================================================================
// AGTW Peripheral
// ============================================================================

namespace agtw {
    /// Base addresses
    constexpr uint32_t AGTW_B0_BASE = 0x400E8000;
    constexpr uint32_t AGTW_B1_BASE = 0x400E8100;

    /// AGTW Register structure
    struct Registers {
        volatile uint32_t AGT;  ///< Offset: 0x00 - AGT Counter Register
        volatile uint32_t AGTCMA;  ///< Offset: 0x04 - AGT CounterCompare Match A Register
        volatile uint32_t AGTCMB;  ///< Offset: 0x08 - AGT CounterCompare Match B Register
        volatile uint32_t AGTCR;  ///< Offset: 0x0C - AGT Control Register
        volatile uint32_t AGTMR1;  ///< Offset: 0x0D - AGT Mode Register 1
        volatile uint32_t AGTMR2;  ///< Offset: 0x0E - AGT Mode Register 2
        volatile uint32_t AGTIOC;  ///< Offset: 0x10 - AGT I/O Control Register
        volatile uint32_t AGTISR;  ///< Offset: 0x11 - AGT Event Pin Select Register
        volatile uint32_t AGTCMSR;  ///< Offset: 0x12 - AGT Compare Match Function Select Register
        volatile uint32_t AGTIOSEL;  ///< Offset: 0x13 - AGT Pin Select Register
    };

    /// Peripheral instances
    inline Registers* AGTW_B0 = reinterpret_cast<Registers*>(AGTW_B0_BASE);
    inline Registers* AGTW_B1 = reinterpret_cast<Registers*>(AGTW_B1_BASE);

    // Bit definitions
    /// AGTCR Register bits
    namespace agtcr_bits {
        constexpr uint32_t TSTART = (1U << 0);  ///< AGT Count Start
        constexpr uint32_t TCSTF = (1U << 1);  ///< AGT Count Status Flag
        constexpr uint32_t TSTOP = (1U << 2);  ///< AGT Count Forced Stop
        constexpr uint32_t TEDGF = (1U << 4);  ///< Active Edge Judgment Flag
        constexpr uint32_t TUNDF = (1U << 5);  ///< Underflow Flag
        constexpr uint32_t TCMAF = (1U << 6);  ///< Compare Match A Flag
        constexpr uint32_t TCMBF = (1U << 7);  ///< Compare Match B Flag
    }

    /// AGTMR1 Register bits
    namespace agtmr1_bits {
        constexpr uint32_t TMOD = (3 << 0);  ///< Operating Mode
        constexpr uint32_t TEDGPL = (1U << 3);  ///< Edge Polarity
        constexpr uint32_t TCK = (3 << 4);  ///< Count Source
    }

    /// AGTMR2 Register bits
    namespace agtmr2_bits {
        constexpr uint32_t CKS = (3 << 0);  ///< AGTLCLK Count Source Clock Frequency Division Ratio
        constexpr uint32_t LPM = (1U << 7);  ///< Low Power Mode
    }

    /// AGTIOC Register bits
    namespace agtioc_bits {
        constexpr uint32_t TEDGSEL = (1U << 0);  ///< I/O Polarity Switch
        constexpr uint32_t TOE = (1U << 2);  ///< AGTWOn pin Output Enable
        constexpr uint32_t TIPF = (2 << 4);  ///< Input Filter
        constexpr uint32_t TIOGT = (2 << 6);  ///< Count Control
    }

    /// AGTISR Register bits
    namespace agtisr_bits {
        constexpr uint32_t EEPS = (1U << 2);  ///< AGTWEEn Polarity Selection
    }

    /// AGTCMSR Register bits
    namespace agtcmsr_bits {
        constexpr uint32_t TCMEA = (1U << 0);  ///< AGT Compare Match A Register Enable
        constexpr uint32_t TOEA = (1U << 1);  ///< AGTWOAn Pin Output Enable
        constexpr uint32_t TOPOLA = (1U << 2);  ///< AGTWOAn Pin Polarity Select
        constexpr uint32_t TCMEB = (1U << 4);  ///< AGT Compare Match B Register Enable
        constexpr uint32_t TOEB = (1U << 5);  ///< AGTWOBn Pin Output Enable
        constexpr uint32_t TOPOLB = (1U << 6);  ///< AGTWOBn Pin Polarity Select
    }

    /// AGTIOSEL Register bits
    namespace agtiosel_bits {
        constexpr uint32_t TIES = (1U << 4);  ///< AGTWIOn Pin Input Enable
    }

}

// ============================================================================
// TSN Peripheral
// ============================================================================

namespace tsn {
    /// Base addresses
    constexpr uint32_t TSN_BASE = 0x400F3000;

    /// TSN Register structure
    struct Registers {
        volatile uint32_t TSCR;  ///< Offset: 0x00 - Temperature Sensor Control Register
    };

    /// Peripheral instances
    inline Registers* TSN = reinterpret_cast<Registers*>(TSN_BASE);

    // Bit definitions
    /// TSCR Register bits
    namespace tscr_bits {
        constexpr uint32_t TSOE = (1U << 4);  ///< Temperature Sensor Output Enable
        constexpr uint32_t TSEN = (1U << 7);  ///< Temperature Sensor Enable
    }

}

// ============================================================================
// ACMPHS0 Peripheral
// ============================================================================

namespace acmphs0 {
    /// Base addresses
    constexpr uint32_t ACMPHS0_BASE = 0x400F4000;

    /// ACMPHS0 Register structure
    struct Registers {
        volatile uint32_t CMPCTL;  ///< Offset: 0x00 - Comparator Control Register
        volatile uint32_t CMPSEL0;  ///< Offset: 0x04 - Comparator Input Select Register
        volatile uint32_t CMPSEL1;  ///< Offset: 0x08 - Comparator Reference Voltage Select Register
        volatile uint32_t CMPMON;  ///< Offset: 0x0C - Comparator Output Monitor Register
        volatile uint32_t CPIOC;  ///< Offset: 0x10 - Comparator Output Control Register
    };

    /// Peripheral instances
    inline Registers* ACMPHS0 = reinterpret_cast<Registers*>(ACMPHS0_BASE);

    // Bit definitions
    /// CMPCTL Register bits
    namespace cmpctl_bits {
        constexpr uint32_t CINV = (1U << 0);  ///< Comparator Output Polarity Selection
        constexpr uint32_t COE = (1U << 1);  ///< Comparator Output Enable
        constexpr uint32_t CEG = (2 << 3);  ///< Selection of Valid Edge (Edge Selector)
        constexpr uint32_t CDFS = (2 << 5);  ///< Noise Filter Selection
        constexpr uint32_t HCMPON = (1U << 7);  ///< Comparator Operation Control
    }

    /// CMPSEL0 Register bits
    namespace cmpsel0_bits {
        constexpr uint32_t CMPSEL = (4 << 0);  ///< Comparator Input Selection
    }

    /// CMPSEL1 Register bits
    namespace cmpsel1_bits {
        constexpr uint32_t CRVS = (4 << 0);  ///< Reference Voltage Selection
    }

    /// CMPMON Register bits
    namespace cmpmon_bits {
        constexpr uint32_t CMPMON = (1U << 0);  ///< Comparator Output Monitor
    }

    /// CPIOC Register bits
    namespace cpioc_bits {
        constexpr uint32_t CPOE = (1U << 0);  ///< Comparator Output Selection
    }

}

// ============================================================================
// ACMPHS1 Peripheral
// ============================================================================

namespace acmphs1 {
    /// Base addresses
    constexpr uint32_t ACMPHS1_BASE = 0x400F4100;

    /// ACMPHS1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* ACMPHS1 = reinterpret_cast<Registers*>(ACMPHS1_BASE);

}

// ============================================================================
// ACMPHS2 Peripheral
// ============================================================================

namespace acmphs2 {
    /// Base addresses
    constexpr uint32_t ACMPHS2_BASE = 0x400F4200;

    /// ACMPHS2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* ACMPHS2 = reinterpret_cast<Registers*>(ACMPHS2_BASE);

}

// ============================================================================
// ACMPHS3 Peripheral
// ============================================================================

namespace acmphs3 {
    /// Base addresses
    constexpr uint32_t ACMPHS3_BASE = 0x400F4300;

    /// ACMPHS3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* ACMPHS3 = reinterpret_cast<Registers*>(ACMPHS3_BASE);

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40108000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t CRCCR0;  ///< Offset: 0x00 - CRC Control Register 0
        volatile uint32_t CRCCR1;  ///< Offset: 0x01 - CRC Control Register 1
        volatile uint32_t CRCDIR;  ///< Offset: 0x04 - CRC Data Input Register
        volatile uint32_t CRCDIR_BY;  ///< Offset: 0x04 - CRC Data Input Register
        volatile uint32_t CRCDOR;  ///< Offset: 0x08 - CRC Data Output Register
        volatile uint32_t CRCDOR_HA;  ///< Offset: 0x08 - CRC Data Output Register
        volatile uint32_t CRCDOR_BY;  ///< Offset: 0x08 - CRC Data Output Register
        volatile uint32_t CRCSAR;  ///< Offset: 0x0C - Snoop Address Register
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// CRCCR0 Register bits
    namespace crccr0_bits {
        constexpr uint32_t GPS = (3 << 0);  ///< CRC Generating Polynomial Switching
        constexpr uint32_t LMS = (1U << 6);  ///< CRC Calculation Switching
        constexpr uint32_t DORCLR = (1U << 7);  ///< CRCDOR/CRCDOR_HA/CRCDOR_BY Register Clear
    }

    /// CRCCR1 Register bits
    namespace crccr1_bits {
        constexpr uint32_t CRCSWR = (1U << 6);  ///< Snoop-On-Write/Read Switch
        constexpr uint32_t CRCSEN = (1U << 7);  ///< Snoop Enable
    }

    /// CRCSAR Register bits
    namespace crcsar_bits {
        constexpr uint32_t CRCSA = (14 << 0);  ///< Register Snoop Address
    }

}

// ============================================================================
// DOC Peripheral
// ============================================================================

namespace doc {
    /// Base addresses
    constexpr uint32_t DOC_B_BASE = 0x40109000;

    /// DOC Register structure
    struct Registers {
        volatile uint32_t DOCR;  ///< Offset: 0x00 - DOC Control Register
        volatile uint32_t DOSR;  ///< Offset: 0x04 - DOC Flag Status Register
        volatile uint32_t DOSCR;  ///< Offset: 0x08 - DOC Flag Status Clear Register
        volatile uint32_t DODIR;  ///< Offset: 0x0C - DOC Data Input Register
        volatile uint32_t DODSR0;  ///< Offset: 0x10 - DOC Data Setting Register 0
        volatile uint32_t DODSR1;  ///< Offset: 0x14 - DOC Data Setting Register 1
    };

    /// Peripheral instances
    inline Registers* DOC_B = reinterpret_cast<Registers*>(DOC_B_BASE);

    // Bit definitions
    /// DOCR Register bits
    namespace docr_bits {
        constexpr uint32_t OMS = (2 << 0);  ///< Operating Mode Select
        constexpr uint32_t DOBW = (1U << 3);  ///< Data Operation Bit Width Select
        constexpr uint32_t DCSEL = (3 << 4);  ///< Detection Condition Select
        constexpr uint32_t DOPCIE = (1U << 7);  ///< Data Operation Circuit Interrupt Enable
    }

    /// DOSR Register bits
    namespace dosr_bits {
        constexpr uint32_t DOPCF = (1U << 0);  ///< Data Operation Circuit Flag
    }

    /// DOSCR Register bits
    namespace doscr_bits {
        constexpr uint32_t DOPCFCL = (1U << 0);  ///< DOPCF Clear
    }

}

// ============================================================================
// SCI Peripheral
// ============================================================================

namespace sci {
    /// Base addresses
    constexpr uint32_t SCI_B0_BASE = 0x40118000;
    constexpr uint32_t SCI_B1_BASE = 0x40118100;
    constexpr uint32_t SCI_B2_BASE = 0x40118200;
    constexpr uint32_t SCI_B3_BASE = 0x40118300;
    constexpr uint32_t SCI_B4_BASE = 0x40118400;
    constexpr uint32_t SCI_B9_BASE = 0x40118900;

    /// SCI Register structure
    struct Registers {
        volatile uint32_t RDR;  ///< Offset: 0x00 - Receive Data Register
        volatile uint32_t TDR;  ///< Offset: 0x04 - Transmit Data Register
        volatile uint32_t CCR0;  ///< Offset: 0x08 - Common Control Register 0
        volatile uint32_t CCR1;  ///< Offset: 0x0C - Common Control Register 1
        volatile uint32_t CCR2;  ///< Offset: 0x10 - Common Control Register 2
        volatile uint32_t CCR3;  ///< Offset: 0x14 - Common Control Register 3
        volatile uint32_t CCR4;  ///< Offset: 0x18 - Common Control Register 4
        volatile uint32_t CESR;  ///< Offset: 0x1C - Communication Enable Status Register
        volatile uint32_t ICR;  ///< Offset: 0x20 - Simple IIC Control Register
        volatile uint32_t FCR;  ///< Offset: 0x24 - FIFO Control Register
        volatile uint32_t MCR;  ///< Offset: 0x2C - Manchester Control Register
        volatile uint32_t DCR;  ///< Offset: 0x30 - Driver Control Register
        volatile uint32_t XCR0;  ///< Offset: 0x34 - Simple LIN Control Register 0
        volatile uint32_t XCR1;  ///< Offset: 0x38 - Simple LIN Control Register 1
        volatile uint32_t XCR2;  ///< Offset: 0x3C - Simple LIN Control Register 2
        volatile uint32_t CSR;  ///< Offset: 0x48 - Common Status Register
        volatile uint32_t ISR;  ///< Offset: 0x4C - Simple IIC Status Register
        volatile uint32_t FRSR;  ///< Offset: 0x50 - FIFO Receive Status Register
        volatile uint32_t FTSR;  ///< Offset: 0x54 - FIFO Transmit Status Register
        volatile uint32_t MSR;  ///< Offset: 0x58 - Manchester Status Register
        volatile uint32_t XSR0;  ///< Offset: 0x5C - Simple LIN Status Register 0
        volatile uint32_t XSR1;  ///< Offset: 0x60 - Simple LIN Status Register 1
        volatile uint32_t CFCLR;  ///< Offset: 0x68 - Common Flag Clear Register
        volatile uint32_t ICFCLR;  ///< Offset: 0x6C - Simple IIC Flag Clear Register
        volatile uint32_t FFCLR;  ///< Offset: 0x70 - FIFO Flag Clear Register
        volatile uint32_t MFCLR;  ///< Offset: 0x74 - Manchester Flag Clear Register
        volatile uint32_t XFCLR;  ///< Offset: 0x78 - Simple LIN Flag Clear Register
    };

    /// Peripheral instances
    inline Registers* SCI_B0 = reinterpret_cast<Registers*>(SCI_B0_BASE);
    inline Registers* SCI_B1 = reinterpret_cast<Registers*>(SCI_B1_BASE);
    inline Registers* SCI_B2 = reinterpret_cast<Registers*>(SCI_B2_BASE);
    inline Registers* SCI_B3 = reinterpret_cast<Registers*>(SCI_B3_BASE);
    inline Registers* SCI_B4 = reinterpret_cast<Registers*>(SCI_B4_BASE);
    inline Registers* SCI_B9 = reinterpret_cast<Registers*>(SCI_B9_BASE);

    // Bit definitions
    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t RDAT = (9 << 0);  ///< Serial receive data
        constexpr uint32_t MPB = (1U << 9);  ///< Multi-processor flag
        constexpr uint32_t DR = (1U << 10);  ///< Receive data ready flag
        constexpr uint32_t FPER = (1U << 11);  ///< FIFO parity error flag
        constexpr uint32_t FFER = (1U << 12);  ///< FIFO framing error flag
        constexpr uint32_t ORER = (1U << 24);  ///< Overrun Error flag
        constexpr uint32_t PER = (1U << 27);  ///< Parity error flag
        constexpr uint32_t FER = (1U << 28);  ///< Framing error flag
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t TDAT = (9 << 0);  ///< Serial transmit data
        constexpr uint32_t MPBT = (1U << 9);  ///< Multi-processor transfer bit flag
        constexpr uint32_t TSYNC = (1U << 12);  ///< Transmit SYNC data
    }

    /// CCR0 Register bits
    namespace ccr0_bits {
        constexpr uint32_t RE = (1U << 0);  ///< Receive Enable
        constexpr uint32_t TE = (1U << 4);  ///< Transmit Enable
        constexpr uint32_t MPIE = (1U << 8);  ///< Multi-Processor Interrupt Enable
        constexpr uint32_t DCME = (1U << 9);  ///< Data Compare Match Enable
        constexpr uint32_t IDSEL = (1U << 10);  ///< ID frame select
        constexpr uint32_t RIE = (1U << 16);  ///< Receive Interrupt Enable
        constexpr uint32_t TIE = (1U << 20);  ///< Transmit Interrupt Enable
        constexpr uint32_t TEIE = (1U << 21);  ///< Transmit End Interrupt Enable
        constexpr uint32_t SSE = (1U << 24);  ///< SSn Pin Function Enable
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t CTSE = (1U << 0);  ///< CTS Enable
        constexpr uint32_t CTSPEN = (1U << 1);  ///< CTS external pin Enable
        constexpr uint32_t SPB2DT = (1U << 4);  ///< Serial port break data select
        constexpr uint32_t SPB2IO = (1U << 5);  ///< Serial port break I/O
        constexpr uint32_t PE = (1U << 8);  ///< Parity Enable
        constexpr uint32_t PM = (1U << 9);  ///< Parity Mode
        constexpr uint32_t TINV = (1U << 12);  ///< TXD invert
        constexpr uint32_t RINV = (1U << 13);  ///< RXD invert
        constexpr uint32_t SPLP = (1U << 16);  ///< Loopback Control
        constexpr uint32_t SHARPS = (1U << 20);  ///< Half-duplex communication select
        constexpr uint32_t NFCS = (3 << 24);  ///< Noise Filter Clock Select
        constexpr uint32_t NFEN = (1U << 28);  ///< Digital Noise Filter Function Enable
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t BCP = (3 << 0);  ///< Base Clock Pulse
        constexpr uint32_t BGDM = (1U << 4);  ///< Baud Rate Generator Double-Speed Mode Select
        constexpr uint32_t ABCS = (1U << 5);  ///< Asynchronous Mode Base Clock Select
        constexpr uint32_t ABCSE = (1U << 6);  ///< Asynchronous Mode Extended Base Clock Select
        constexpr uint32_t BRR = (8 << 8);  ///< Bit rate setting
        constexpr uint32_t BRME = (1U << 16);  ///< Bit Modulation Enable
        constexpr uint32_t CKS = (2 << 20);  ///< Clock Select
        constexpr uint32_t MDDR = (8 << 24);  ///< Modulation Duty Setting
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t CPHA = (1U << 0);  ///< Clock Phase Select
        constexpr uint32_t CPOL = (1U << 1);  ///< Clock Polarity Select
        constexpr uint32_t BPEN = (1U << 7);  ///< Synchronizer bypass enable
        constexpr uint32_t CHR = (2 << 8);  ///< Character Length
        constexpr uint32_t LSBF = (1U << 12);  ///< LSB First select
        constexpr uint32_t SINV = (1U << 13);  ///< Transmitted/Received Data Invert
        constexpr uint32_t STP = (1U << 14);  ///< Stop Bit Length
        constexpr uint32_t RXDESEL = (1U << 15);  ///< Asynchronous Start Bit Edge Detection Select
        constexpr uint32_t MOD = (3 << 16);  ///< Communication mode select
        constexpr uint32_t MP = (1U << 19);  ///< Multi-Processor Mode
        constexpr uint32_t FM = (1U << 20);  ///< FIFO Mode select
        constexpr uint32_t DEN = (1U << 21);  ///< Driver enable
        constexpr uint32_t CKE = (2 << 24);  ///< Clock enable
        constexpr uint32_t GM = (1U << 28);  ///< GSM Mode
        constexpr uint32_t BLK = (1U << 29);  ///< Block Transfer Mode
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t CMPD = (9 << 0);  ///< Compare Match Data
        constexpr uint32_t ASEN = (1U << 16);  ///< Adjust receive sampling timing enable
        constexpr uint32_t ATEN = (1U << 17);  ///< Adjust transmit timing enable
        constexpr uint32_t AST = (3 << 24);  ///< Adjustment value for receive Sampling Timing
        constexpr uint32_t AJD = (1U << 27);  ///< Adjustment Direction for receive sampling timing
        constexpr uint32_t ATT = (3 << 28);  ///< Adjustment value for Transmit timing
        constexpr uint32_t AET = (1U << 31);  ///< Adjustment edge for transmit timing
    }

    /// CESR Register bits
    namespace cesr_bits {
        constexpr uint32_t RIST = (1U << 0);  ///< RE Internal status
        constexpr uint32_t TIST = (1U << 4);  ///< TE Internal status
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t IICDL = (5 << 0);  ///< SDA Delay Output Select
        constexpr uint32_t IICINTM = (1U << 8);  ///< IIC Interrupt Mode Select
        constexpr uint32_t IICCSC = (1U << 9);  ///< Clock Synchronization
        constexpr uint32_t IICACKT = (1U << 13);  ///< ACK Transmission Data
        constexpr uint32_t IICSTAREQ = (1U << 16);  ///< Start Condition Generation
        constexpr uint32_t IICRSTAREQ = (1U << 17);  ///< Restart Condition Generation
        constexpr uint32_t IICSTPREQ = (1U << 18);  ///< Stop Condition Generation
        constexpr uint32_t IICSDAS = (2 << 20);  ///< SDA Output Select
        constexpr uint32_t IICSCLS = (2 << 22);  ///< SCL Output Select
    }

    /// FCR Register bits
    namespace fcr_bits {
        constexpr uint32_t DRES = (1U << 0);  ///< Receive data ready error select bit
        constexpr uint32_t TTRG = (5 << 8);  ///< Transmit FIFO data trigger number
        constexpr uint32_t TFRST = (1U << 15);  ///< Transmit FIFO Data Register Reset
        constexpr uint32_t RTRG = (5 << 16);  ///< Receive FIFO data trigger number
        constexpr uint32_t RFRST = (1U << 23);  ///< Receive FIFO Data Register Reset
        constexpr uint32_t RSTRG = (5 << 24);  ///< RTS Output Active Trigger Number Select
    }

    /// MCR Register bits
    namespace mcr_bits {
        constexpr uint32_t RMPOL = (1U << 0);  ///< Polarity of Received Manchester Code
        constexpr uint32_t TMPOL = (1U << 1);  ///< Polarity of Transmit Manchester Code
        constexpr uint32_t ERTEN = (1U << 2);  ///< Manchester Edge Retiming Enable
        constexpr uint32_t SYNVAL = (1U << 4);  ///< SYNC value Setting
        constexpr uint32_t SYNSEL = (1U << 5);  ///< SYNC Select
        constexpr uint32_t SBSEL = (1U << 6);  ///< Start Bit Select
        constexpr uint32_t TPLEN = (4 << 8);  ///< Transmit preface length
        constexpr uint32_t TPPAT = (2 << 12);  ///< Transmit preface pattern
        constexpr uint32_t RPLEN = (4 << 16);  ///< Receive Preface Length
        constexpr uint32_t RPPAT = (2 << 20);  ///< Receive Preface Pattern
        constexpr uint32_t PFEREN = (1U << 24);  ///< Preface Error Enable
        constexpr uint32_t SYEREN = (1U << 25);  ///< Receive SYNC Error Enable
        constexpr uint32_t SBEREN = (1U << 26);  ///< Start Bit Error Enable
    }

    /// DCR Register bits
    namespace dcr_bits {
        constexpr uint32_t DEPOL = (1U << 0);  ///< Driver effective polarity select
        constexpr uint32_t DEAST = (5 << 8);  ///< Driver Assertion Time
        constexpr uint32_t DENGT = (5 << 16);  ///< Driver negate time
    }

    /// XCR0 Register bits
    namespace xcr0_bits {
        constexpr uint32_t TCSS = (2 << 0);  ///< Timer count clock source selection
        constexpr uint32_t BFE = (1U << 8);  ///< Break Field enable
        constexpr uint32_t CF0RE = (1U << 9);  ///< Control Field 0 enable
        constexpr uint32_t CF1DS = (2 << 10);  ///< Control Field1 compare data select
        constexpr uint32_t PIBE = (1U << 12);  ///< Priority interrupt bit enable
        constexpr uint32_t PIBS = (3 << 13);  ///< Priority interrupt bit select
        constexpr uint32_t BFOIE = (1U << 16);  ///< Break Field output completion interrupt enable
        constexpr uint32_t BCDIE = (1U << 17);  ///< Bus conflict detection interrupt enable
        constexpr uint32_t BFDIE = (1U << 20);  ///< Break Field detection interrupt enable
        constexpr uint32_t COFIE = (1U << 21);  ///< Counter overflow interrupt enable
        constexpr uint32_t AEDIE = (1U << 22);  ///< Active edge detection interrupt enable
        constexpr uint32_t BCCS = (2 << 24);  ///< Bus conflict detection clock selection
    }

    /// XCR1 Register bits
    namespace xcr1_bits {
        constexpr uint32_t TCST = (1U << 0);  ///< Break Field output timer count start trigger
        constexpr uint32_t SDST = (1U << 4);  ///< Start Frame detection enable
        constexpr uint32_t BMEN = (1U << 5);  ///< Bit rate measurement enable
        constexpr uint32_t PCF1D = (8 << 8);  ///< Priority compare data for Control Field 1
        constexpr uint32_t SCF1D = (8 << 16);  ///< Secondary compare data for Control Field 1
        constexpr uint32_t CF1CE = (8 << 24);  ///< Control Field 1 compare bit enable
    }

    /// XCR2 Register bits
    namespace xcr2_bits {
        constexpr uint32_t CF0D = (8 << 0);  ///< Control Field 0 compare data
        constexpr uint32_t CF0CE = (8 << 8);  ///< Control Field 0 compare bit enable
        constexpr uint32_t BFLW = (16 << 16);  ///< Break Field length setting
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t ERS = (1U << 4);  ///< Error Signal Status Flag
        constexpr uint32_t RXDMON = (1U << 15);  ///< Serial input data monitor bit
        constexpr uint32_t DCMF = (1U << 16);  ///< Data Compare Match Flag
        constexpr uint32_t DPER = (1U << 17);  ///< Data Compare Match Parity Error Flag
        constexpr uint32_t DFER = (1U << 18);  ///< Data Compare Match Framing Error Flag
        constexpr uint32_t ORER = (1U << 24);  ///< Overrun Error Flag
        constexpr uint32_t MFF = (1U << 26);  ///< Mode Fault Flag
        constexpr uint32_t PER = (1U << 27);  ///< Parity Error Flag
        constexpr uint32_t FER = (1U << 28);  ///< Framing Error Flag
        constexpr uint32_t TDRE = (1U << 29);  ///< Transmit Data Empty Flag
        constexpr uint32_t TEND = (1U << 30);  ///< Transmit End Flag
        constexpr uint32_t RDRF = (1U << 31);  ///< Receive Data Full Flag
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t IICACKR = (1U << 0);  ///< ACK Reception Data Flag
        constexpr uint32_t IICSTIF = (1U << 3);  ///< Issuing of Start, Restart, or Stop Condition Completed Flag
    }

    /// FRSR Register bits
    namespace frsr_bits {
        constexpr uint32_t DR = (1U << 0);  ///< Receive Data Ready flag
        constexpr uint32_t R = (6 << 8);  ///< Receive-FIFO Data Count
        constexpr uint32_t PNUM = (6 << 16);  ///< Parity Error Count
        constexpr uint32_t FNUM = (6 << 24);  ///< Framing Error Count
    }

    /// FTSR Register bits
    namespace ftsr_bits {
        constexpr uint32_t T = (6 << 0);  ///< Transmit-FIFO Data Count
    }

    /// MSR Register bits
    namespace msr_bits {
        constexpr uint32_t PFER = (1U << 0);  ///< Preface Error flag
        constexpr uint32_t SYER = (1U << 1);  ///< SYNC Error flag
        constexpr uint32_t SBER = (1U << 2);  ///< Start Bit Error flag
        constexpr uint32_t MER = (1U << 4);  ///< Manchester Error Flag
        constexpr uint32_t RSYNC = (1U << 6);  ///< Receive SYNC data bit
    }

    /// XSR0 Register bits
    namespace xsr0_bits {
        constexpr uint32_t SFSF = (1U << 0);  ///< Start Frame Status flag
        constexpr uint32_t RXDSF = (1U << 1);  ///< RXDn input status flag
        constexpr uint32_t BFOF = (1U << 8);  ///< Break Field Output completion flag
        constexpr uint32_t BCDF = (1U << 9);  ///< Bus Conflict detection flag
        constexpr uint32_t BFDF = (1U << 10);  ///< Break Field detection flag
        constexpr uint32_t CF0MF = (1U << 11);  ///< Control Field 0 compare match flag
        constexpr uint32_t CF1MF = (1U << 12);  ///< Control Field 1 compare match flag
        constexpr uint32_t PIBDF = (1U << 13);  ///< Priority interrupt bit detection flag
        constexpr uint32_t COF = (1U << 14);  ///< Counter Overflow flag
        constexpr uint32_t AEDF = (1U << 15);  ///< Active Edge detection flag
        constexpr uint32_t CF0RD = (8 << 16);  ///< Control Field 0 received data
        constexpr uint32_t CF1RD = (8 << 24);  ///< Control Field 1 received data
    }

    /// XSR1 Register bits
    namespace xsr1_bits {
        constexpr uint32_t TCNT = (16 << 0);  ///< Timer Count Capture value
    }

    /// CFCLR Register bits
    namespace cfclr_bits {
        constexpr uint32_t ERSC = (1U << 4);  ///< ERS clear bit
        constexpr uint32_t DCMFC = (1U << 16);  ///< DCMF clear bit
        constexpr uint32_t DPERC = (1U << 17);  ///< DPER clear bit
        constexpr uint32_t DFERC = (1U << 18);  ///< DFER clear bit
        constexpr uint32_t ORERC = (1U << 24);  ///< ORER clear bit
        constexpr uint32_t MFFC = (1U << 26);  ///< MFF clear bit
        constexpr uint32_t PERC = (1U << 27);  ///< PER clear bit
        constexpr uint32_t FERC = (1U << 28);  ///< FER clear bit
        constexpr uint32_t TDREC = (1U << 29);  ///< TDRE clear bit
        constexpr uint32_t RDRFC = (1U << 31);  ///< RDRF clear bit
    }

    /// ICFCLR Register bits
    namespace icfclr_bits {
        constexpr uint32_t IICSTIFC = (1U << 3);  ///< IICSTIF clear bit
    }

    /// FFCLR Register bits
    namespace ffclr_bits {
        constexpr uint32_t DRC = (1U << 0);  ///< DR clear bit
    }

    /// MFCLR Register bits
    namespace mfclr_bits {
        constexpr uint32_t PFERC = (1U << 0);  ///< PFER clear bit
        constexpr uint32_t SYERC = (1U << 1);  ///< SYER clear bit
        constexpr uint32_t SBERC = (1U << 2);  ///< SBER clear bit
        constexpr uint32_t MERC = (1U << 4);  ///< MER clear bit
    }

    /// XFCLR Register bits
    namespace xfclr_bits {
        constexpr uint32_t BFOC = (1U << 8);  ///< BFOF clear bit
        constexpr uint32_t BCDC = (1U << 9);  ///< BCDF clear bit
        constexpr uint32_t BFDC = (1U << 10);  ///< BFDF clear bit
        constexpr uint32_t CF0MC = (1U << 11);  ///< CF0MF clear bit
        constexpr uint32_t CF1MC = (1U << 12);  ///< CF1MF clear bit
        constexpr uint32_t PIBDC = (1U << 13);  ///< PIBDF clear bit
        constexpr uint32_t COFC = (1U << 14);  ///< COFF clear bit
        constexpr uint32_t AEDC = (1U << 15);  ///< AEDF clear bit
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI_B0_BASE = 0x4011A000;
    constexpr uint32_t SPI_B1_BASE = 0x4011A100;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t SPDR;  ///< Offset: 0x00 - SPI Data Register
        volatile uint32_t SPDECR;  ///< Offset: 0x04 - SPI Delay Control Register
        volatile uint32_t SPCR;  ///< Offset: 0x08 - SPI Control Register
        volatile uint32_t SPCR2;  ///< Offset: 0x0C - SPI Control Register 2
        volatile uint32_t SPCR3;  ///< Offset: 0x10 - SPI Control Register 3
        volatile uint32_t SPCMD;  ///< Offset: 0x14 - SPI Command Register (renamed from SPCMD)
        volatile uint32_t SPDCR;  ///< Offset: 0x40 - SPI Data Control Register
        volatile uint32_t SPDCR2;  ///< Offset: 0x44 - SPI Data Control Register 2
        volatile uint32_t SPSR;  ///< Offset: 0x50 - SPI Status Register
        volatile uint32_t SPTFSR;  ///< Offset: 0x58 - SPI Transfer FIFO Status Register
        volatile uint32_t SPRFSR;  ///< Offset: 0x5C - SPI Receive FIFO Status Register
        volatile uint32_t SPPSR;  ///< Offset: 0x60 - SPI Polling Register
        volatile uint32_t SPSRC;  ///< Offset: 0x68 - SPI Status Clear Register
        volatile uint32_t SPFCR;  ///< Offset: 0x6C - SPI FIFO Clear Register
    };

    /// Peripheral instances
    inline Registers* SPI_B0 = reinterpret_cast<Registers*>(SPI_B0_BASE);
    inline Registers* SPI_B1 = reinterpret_cast<Registers*>(SPI_B1_BASE);

    // Bit definitions
    /// SPDECR Register bits
    namespace spdecr_bits {
        constexpr uint32_t SCKDL = (3 << 0);  ///< RSPCK Delay
        constexpr uint32_t SLNDL = (3 << 8);  ///< SSL Negation Delay
        constexpr uint32_t SPNDL = (3 << 16);  ///< SPI Next-Access Delay
    }

    /// SPCR Register bits
    namespace spcr_bits {
        constexpr uint32_t SPE = (1U << 0);  ///< SPI Function Enable
        constexpr uint32_t SPPE = (1U << 8);  ///< Parity Enable
        constexpr uint32_t SPOE = (1U << 9);  ///< Parity Mode
        constexpr uint32_t PTE = (1U << 11);  ///< Parity Self-Diagnosis Enable
        constexpr uint32_t SCKASE = (1U << 12);  ///< RSPCK Auto-Stop Function Enable
        constexpr uint32_t BFDS = (1U << 13);  ///< Between Burst Transfer Frames Delay Select
        constexpr uint32_t MODFEN = (1U << 14);  ///< Mode Fault Error Detection Enable
        constexpr uint32_t SPEIE = (1U << 16);  ///< SPI Error Interrupt Enable
        constexpr uint32_t SPRIE = (1U << 17);  ///< SPI Receive Buffer Full Interrupt Enable
        constexpr uint32_t SPIIE = (1U << 18);  ///< SPI Idle Interrupt Enable
        constexpr uint32_t SPDRES = (1U << 19);  ///< SPI receive data ready error select
        constexpr uint32_t SPTIE = (1U << 20);  ///< SPI Transmit Buffer Empty Interrupt Enable
        constexpr uint32_t CENDIE = (1U << 21);  ///< SPI Communication End Interrupt Enable
        constexpr uint32_t SPMS = (1U << 24);  ///< SPI Mode Select
        constexpr uint32_t SPFRF = (1U << 25);  ///< SPI Frame Format Select
        constexpr uint32_t TXMD = (2 << 28);  ///< Communication Mode Select
        constexpr uint32_t MSTR = (1U << 30);  ///< SPI Master/Slave Mode Select
        constexpr uint32_t BPEN = (1U << 31);  ///< Synchronization Circuit Bypass Enable
    }

    /// SPCR2 Register bits
    namespace spcr2_bits {
        constexpr uint32_t RMFM = (5 << 0);  ///< Frame processing count setting in Master Receive only
        constexpr uint32_t RMEDTG = (1U << 6);  ///< End Trigger in Master Receive only
        constexpr uint32_t RMSTTG = (1U << 7);  ///< Start Trigger in Master Receive only
        constexpr uint32_t SPDRC = (8 << 8);  ///< SPI received data ready detect adjustment
        constexpr uint32_t SPLP = (1U << 16);  ///< SPI Loopback
        constexpr uint32_t SPLP2 = (1U << 17);  ///< SPI Loopback 2
        constexpr uint32_t MOIFV = (1U << 20);  ///< MOSI Idle Fixed Value
        constexpr uint32_t MOIFE = (1U << 21);  ///< MOSI Idle Fixed Value Enable
    }

    /// SPCR3 Register bits
    namespace spcr3_bits {
        constexpr uint32_t SSL0P = (1U << 0);  ///< SSL0 Signal Polarity
        constexpr uint32_t SSL1P = (1U << 1);  ///< SSL1 Signal Polarity
        constexpr uint32_t SSL2P = (1U << 2);  ///< SSL2 Signal Polarity
        constexpr uint32_t SSL3P = (1U << 3);  ///< SSL3 Signal Polarity
        constexpr uint32_t SPBR = (8 << 8);  ///< SPI Bit Rate
        constexpr uint32_t SPSLN = (3 << 24);  ///< SPI Sequence Length
    }

    /// SPCMD Register bits
    namespace spcmd_bits {
        constexpr uint32_t CPHA = (1U << 0);  ///< RSPCK Phase
        constexpr uint32_t CPOL = (1U << 1);  ///< RSPCK Polarity
        constexpr uint32_t BRDV = (2 << 2);  ///< Bit Rate Division
        constexpr uint32_t SSLKP = (1U << 7);  ///< SSL Signal Level Hold
        constexpr uint32_t LSBF = (1U << 12);  ///< SPI LSB First
        constexpr uint32_t SPNDEN = (1U << 13);  ///< SPI Next-Access Delay Enable
        constexpr uint32_t SLNDEN = (1U << 14);  ///< SSL Negation Delay Setting Enable
        constexpr uint32_t SCKDEN = (1U << 15);  ///< RSPCK Delay Setting Enable
        constexpr uint32_t SPB = (5 << 16);  ///< SPI Data Length
        constexpr uint32_t SSLA = (3 << 24);  ///< SSL Signal Assertion
    }

    /// SPDCR Register bits
    namespace spdcr_bits {
        constexpr uint32_t BYSW = (1U << 0);  ///< Byte Swap Operating Mode Select
        constexpr uint32_t SPRDTD = (1U << 3);  ///< SPI Receive Data or Transmit Data Select
        constexpr uint32_t SINV = (1U << 4);  ///< Serial data invert bit
        constexpr uint32_t SPFC = (2 << 8);  ///< Frame Count
    }

    /// SPDCR2 Register bits
    namespace spdcr2_bits {
        constexpr uint32_t RTRG = (2 << 0);  ///< Receive FIFO threshold setting
        constexpr uint32_t TTRG = (2 << 8);  ///< Transmission FIFO threshold setting
    }

    /// SPSR Register bits
    namespace spsr_bits {
        constexpr uint32_t SPCP = (3 << 8);  ///< SPI Command Pointer
        constexpr uint32_t SPECM = (3 << 12);  ///< SPI Error Command
        constexpr uint32_t SPDRF = (1U << 23);  ///< SPI Receive Data Ready Flag
        constexpr uint32_t OVRF = (1U << 24);  ///< Overrun Error Flag
        constexpr uint32_t IDLNF = (1U << 25);  ///< SPI Idle Flag
        constexpr uint32_t MODF = (1U << 26);  ///< Mode Fault Error Flag
        constexpr uint32_t PERF = (1U << 27);  ///< Parity Error Flag
        constexpr uint32_t UDRF = (1U << 28);  ///< Underrun Error Flag
        constexpr uint32_t SPTEF = (1U << 29);  ///< SPI Transmit Buffer Empty Flag
        constexpr uint32_t CENDF = (1U << 30);  ///< Communication End Flag
        constexpr uint32_t SPRF = (1U << 31);  ///< SPI Receive Buffer Full Flag
    }

    /// SPTFSR Register bits
    namespace sptfsr_bits {
        constexpr uint32_t TFDN = (3 << 0);  ///< Transmit FIFO data empty stage number
    }

    /// SPRFSR Register bits
    namespace sprfsr_bits {
        constexpr uint32_t RFDN = (3 << 0);  ///< Receive FIFO data store stage number
    }

    /// SPPSR Register bits
    namespace sppsr_bits {
        constexpr uint32_t SPEPS = (1U << 0);  ///< SPI Polling Status
    }

    /// SPSRC Register bits
    namespace spsrc_bits {
        constexpr uint32_t SPDRFC = (1U << 23);  ///< SPI Receive Data Ready Flag Clear
        constexpr uint32_t OVRFC = (1U << 24);  ///< Overrun Error Flag Clear
        constexpr uint32_t MODFC = (1U << 26);  ///< Mode Fault Error Flag Clear
        constexpr uint32_t PERFC = (1U << 27);  ///< Parity Error Flag Clear
        constexpr uint32_t UDRFC = (1U << 28);  ///< Underrun Error Flag Clear
        constexpr uint32_t SPTEFC = (1U << 29);  ///< SPI Transmit Buffer Empty Flag Clear
        constexpr uint32_t CENDFC = (1U << 30);  ///< Communication End Flag Clear
        constexpr uint32_t SPRFC = (1U << 31);  ///< SPI Receive Buffer Full Flag Clear
    }

    /// SPFCR Register bits
    namespace spfcr_bits {
        constexpr uint32_t SPFRST = (1U << 0);  ///< SPI FIFO clear
    }

}

// ============================================================================
// IIC Peripheral
// ============================================================================

namespace iic {
    /// Base addresses
    constexpr uint32_t IIC_B0_BASE = 0x4011F000;
    constexpr uint32_t IIC_B1_BASE = 0x4011F400;

    /// IIC Register structure
    struct Registers {
        volatile uint32_t BCTL;  ///< Offset: 0x14 - Bus Control Register
        volatile uint32_t RSTCTL;  ///< Offset: 0x20 - Reset Control Register
        volatile uint32_t PRSST;  ///< Offset: 0x24 - Present State Register
        volatile uint32_t BFCTL;  ///< Offset: 0x60 - Bus Function Control Register
        volatile uint32_t SVCTL;  ///< Offset: 0x64 - Slave Control Register
        volatile uint32_t REFCKCTL;  ///< Offset: 0x70 - Reference Clock Control Register
        volatile uint32_t STDBR;  ///< Offset: 0x74 - Standard Bit Rate Register
        volatile uint32_t EXTBR;  ///< Offset: 0x78 - Extended Bit Rate Register
        volatile uint32_t BFRECDT;  ///< Offset: 0x7C - Bus Free Condition Detection Time Register
        volatile uint32_t OUTCTL;  ///< Offset: 0x88 - Output Control Register
        volatile uint32_t INCTL;  ///< Offset: 0x8C - Input Control Register
        volatile uint32_t TMOCTL;  ///< Offset: 0x90 - Timeout Control Register
        volatile uint32_t ACKCTL;  ///< Offset: 0xA0 - Acknowledge Control Register
        volatile uint32_t SCSTRCTL;  ///< Offset: 0xA4 - SCL Stretch Control Register
        volatile uint32_t CNDCTL;  ///< Offset: 0x140 - Condition Control Register
        volatile uint32_t NTDTBP0;  ///< Offset: 0x158 - Normal Transfer Data Buffer Port Register 0
        volatile uint32_t NTDTBP0_BY;  ///< Offset: 0x158 - Normal Transfer Data Buffer Port Register 0
        volatile uint32_t BST;  ///< Offset: 0x1D0 - Bus Status Register
        volatile uint32_t BSTE;  ///< Offset: 0x1D4 - Bus Status Enable Register
        volatile uint32_t BIE;  ///< Offset: 0x1D8 - Bus Interrupt Enable Register
        volatile uint32_t BSTFC;  ///< Offset: 0x1DC - Bus Status Force Register
        volatile uint32_t NTST;  ///< Offset: 0x1E0 - Normal Transfer Status Register
        volatile uint32_t NTSTE;  ///< Offset: 0x1E4 - Normal Transfer Status Enable Register
        volatile uint32_t NTIE;  ///< Offset: 0x1E8 - Normal Transfer Interrupt Enable Register
        volatile uint32_t NTSTFC;  ///< Offset: 0x1EC - Normal Transfer Status Force Register
        volatile uint32_t BCST;  ///< Offset: 0x210 - Bus Condition Status Register
        volatile uint32_t SVST;  ///< Offset: 0x214 - Slave Status Register
        volatile uint32_t SDATBAS;  ///< Offset: 0x2B0 - Slave Device Address Table Basic Register %s (renamed from SDATBAS)
        volatile uint32_t SVDVAD;  ///< Offset: 0x330 - Slave Device Address Register %s (renamed from SVDVAD)
        volatile uint32_t BITCNT;  ///< Offset: 0x380 - Bit Count Register
        volatile uint32_t PRSTDBG;  ///< Offset: 0x3CC - Present State Debug Register
    };

    /// Peripheral instances
    inline Registers* IIC_B0 = reinterpret_cast<Registers*>(IIC_B0_BASE);
    inline Registers* IIC_B1 = reinterpret_cast<Registers*>(IIC_B1_BASE);

    // Bit definitions
    /// BCTL Register bits
    namespace bctl_bits {
        constexpr uint32_t BUSE = (1U << 31);  ///< Bus Enable
    }

    /// RSTCTL Register bits
    namespace rstctl_bits {
        constexpr uint32_t RI2CRST = (1U << 0);  ///< IIC Software Reset
        constexpr uint32_t INTLRST = (1U << 16);  ///< Internal Software Reset
    }

    /// PRSST Register bits
    namespace prsst_bits {
        constexpr uint32_t CRMS = (1U << 2);  ///< Current Master
        constexpr uint32_t TRMD = (1U << 4);  ///< Transmit/Receive Mode
        constexpr uint32_t PRSSTWP = (1U << 7);  ///< Present State Write Protect
    }

    /// BFCTL Register bits
    namespace bfctl_bits {
        constexpr uint32_t MALE = (1U << 0);  ///< Master Arbitration-Lost Detection Enable
        constexpr uint32_t NALE = (1U << 1);  ///< NACK Transmission Arbitration-Lost Detection Enable
        constexpr uint32_t SALE = (1U << 2);  ///< Slave Arbitration-Lost Detection Enable
        constexpr uint32_t SCSYNE = (1U << 8);  ///< SCL Synchronous Circuit Enable
        constexpr uint32_t SMBS = (1U << 12);  ///< SMBus/I2C Bus Selection
        constexpr uint32_t FMPE = (1U << 14);  ///< Fast-mode Plus Enable
        constexpr uint32_t HSME = (1U << 15);  ///< High Speed Mode Enable
    }

    /// SVCTL Register bits
    namespace svctl_bits {
        constexpr uint32_t GCAE = (1U << 0);  ///< General Call Address Enable
        constexpr uint32_t HSMCE = (1U << 5);  ///< Hs-mode Master Code Enable
        constexpr uint32_t DVIDE = (1U << 6);  ///< Device-ID Address Enable
        constexpr uint32_t HOAE = (1U << 15);  ///< Host Address Enable
        constexpr uint32_t SVAE0 = (1U << 16);  ///< Slave Address Enable 0
        constexpr uint32_t SVAE1 = (1U << 17);  ///< Slave Address Enable 1
        constexpr uint32_t SVAE2 = (1U << 18);  ///< Slave Address Enable 2
    }

    /// REFCKCTL Register bits
    namespace refckctl_bits {
        constexpr uint32_t IREFCKS = (3 << 0);  ///< Internal Reference Clock Selection
    }

    /// STDBR Register bits
    namespace stdbr_bits {
        constexpr uint32_t SBRLO = (8 << 0);  ///< Count value of the Low-level period of SCL clock
        constexpr uint32_t SBRHO = (8 << 8);  ///< Count value of the High-level period of SCL clock
        constexpr uint32_t DSBRPO = (1U << 31);  ///< Double the Standard Bit Rate Period for Open-Drain
    }

    /// EXTBR Register bits
    namespace extbr_bits {
        constexpr uint32_t EBRLO = (8 << 0);  ///< Extended Bit Rate Low-Level Period Open-Drain
        constexpr uint32_t EBRHO = (8 << 8);  ///< Extended Bit Rate High-Level Period Open-Drain
    }

    /// BFRECDT Register bits
    namespace bfrecdt_bits {
        constexpr uint32_t FRECYC = (9 << 0);  ///< Bus Free Condition Detection Cycle
    }

    /// OUTCTL Register bits
    namespace outctl_bits {
        constexpr uint32_t SDOC = (1U << 0);  ///< SDA Output Control
        constexpr uint32_t SCOC = (1U << 1);  ///< SCL Output Control
        constexpr uint32_t SOCWP = (1U << 2);  ///< SCL/SDA Output Control Write Protect
        constexpr uint32_t EXCYC = (1U << 4);  ///< Extra SCL Clock Cycle Output
        constexpr uint32_t SDOD = (3 << 8);  ///< SDA Output Delay
        constexpr uint32_t SDODCS = (1U << 15);  ///< SDA Output Delay Clock Source Selection
    }

    /// INCTL Register bits
    namespace inctl_bits {
        constexpr uint32_t DNFS = (4 << 0);  ///< Digital Noise Filter Stage Selection
        constexpr uint32_t DNFE = (1U << 4);  ///< Digital Noise Filter Circuit Enable
    }

    /// TMOCTL Register bits
    namespace tmoctl_bits {
        constexpr uint32_t TODTS = (2 << 0);  ///< Timeout Detection Time Selection
        constexpr uint32_t TOLCTL = (1U << 4);  ///< Timeout L Count Control
        constexpr uint32_t TOHCTL = (1U << 5);  ///< Timeout H Count Control
        constexpr uint32_t TOMDS = (2 << 6);  ///< Timeout Operation Mode Selection
    }

    /// ACKCTL Register bits
    namespace ackctl_bits {
        constexpr uint32_t ACKR = (1U << 0);  ///< Acknowledge Reception
        constexpr uint32_t ACKT = (1U << 1);  ///< Acknowledge Transmission
        constexpr uint32_t ACKTWP = (1U << 2);  ///< ACKT Write Protect
    }

    /// SCSTRCTL Register bits
    namespace scstrctl_bits {
        constexpr uint32_t ACKTWE = (1U << 0);  ///< Acknowledge Transmission Wait Enable
        constexpr uint32_t RWE = (1U << 1);  ///< Receive Wait Enable
    }

    /// CNDCTL Register bits
    namespace cndctl_bits {
        constexpr uint32_t STCND = (1U << 0);  ///< START (S) Condition Issuance
        constexpr uint32_t SRCND = (1U << 1);  ///< Repeated START (Sr) Condition Issuance
        constexpr uint32_t SPCND = (1U << 2);  ///< STOP (P) Condition Issuance
    }

    /// BST Register bits
    namespace bst_bits {
        constexpr uint32_t STCNDDF = (1U << 0);  ///< START Condition Detection Flag
        constexpr uint32_t SPCNDDF = (1U << 1);  ///< STOP Condition Detection Flag
        constexpr uint32_t NACKDF = (1U << 4);  ///< NACK Detection Flag
        constexpr uint32_t TENDF = (1U << 8);  ///< Transmit End Flag
        constexpr uint32_t ALF = (1U << 16);  ///< Arbitration Lost Flag
        constexpr uint32_t TODF = (1U << 20);  ///< Timeout Detection Flag
        constexpr uint32_t WUCNDDF = (1U << 24);  ///< Wake-Up Condition Detection Flag
    }

    /// BSTE Register bits
    namespace bste_bits {
        constexpr uint32_t STCNDDE = (1U << 0);  ///< START Condition Detection Enable
        constexpr uint32_t SPCNDDE = (1U << 1);  ///< STOP Condition Detection Enable
        constexpr uint32_t NACKDE = (1U << 4);  ///< NACK Detection Enable
        constexpr uint32_t TENDE = (1U << 8);  ///< Transmit End Enable
        constexpr uint32_t ALE = (1U << 16);  ///< Arbitration Lost Enable
        constexpr uint32_t TODE = (1U << 20);  ///< Timeout Detection Enable
        constexpr uint32_t WUCNDDE = (1U << 24);  ///< Wake-up Condition Detection Enable
    }

    /// BIE Register bits
    namespace bie_bits {
        constexpr uint32_t STCNDDIE = (1U << 0);  ///< START Condition Detection Interrupt Enable
        constexpr uint32_t SPCNDDIE = (1U << 1);  ///< STOP Condition Detection Interrupt Enable
        constexpr uint32_t NACKDIE = (1U << 4);  ///< NACK Detection Interrupt Enable
        constexpr uint32_t TENDIE = (1U << 8);  ///< Transmit End Interrupt Enable
        constexpr uint32_t ALIE = (1U << 16);  ///< Arbitration Lost Interrupt Enable
        constexpr uint32_t TODIE = (1U << 20);  ///< Timeout Detection Interrupt Enable
        constexpr uint32_t WUCNDDIE = (1U << 24);  ///< Wake-Up Condition Detection Interrupt Enable
    }

    /// BSTFC Register bits
    namespace bstfc_bits {
        constexpr uint32_t STCNDDFC = (1U << 0);  ///< START condition Detection Force
        constexpr uint32_t SPCNDDFC = (1U << 1);  ///< STOP condition Detection Force
        constexpr uint32_t NACKDFC = (1U << 4);  ///< NACK Detection Force
        constexpr uint32_t TENDFC = (1U << 8);  ///< Transmit End Force
        constexpr uint32_t ALFC = (1U << 16);  ///< Arbitration Lost Force
        constexpr uint32_t TODFC = (1U << 20);  ///< Timeout Detection Force
        constexpr uint32_t WUCNDDFC = (1U << 24);  ///< Wake-Up Condition Detection Force
    }

    /// NTST Register bits
    namespace ntst_bits {
        constexpr uint32_t TDBEF0 = (1U << 0);  ///< Normal Transmit Data Buffer Empty Flag 0
        constexpr uint32_t RDBFF0 = (1U << 1);  ///< Normal Receive Data Buffer Full Flag 0
    }

    /// NTSTE Register bits
    namespace ntste_bits {
        constexpr uint32_t TDBEE0 = (1U << 0);  ///< Normal Transmit Data Buffer Empty Enable 0
        constexpr uint32_t RDBFE0 = (1U << 1);  ///< Normal Receive Data Buffer Full Enable 0
    }

    /// NTIE Register bits
    namespace ntie_bits {
        constexpr uint32_t TDBEIE0 = (1U << 0);  ///< Normal Transmit Data Buffer Empty Interrupt Enable 0
        constexpr uint32_t RDBFIE0 = (1U << 1);  ///< Normal Receive Data Buffer Full Interrupt Enable 0
    }

    /// NTSTFC Register bits
    namespace ntstfc_bits {
        constexpr uint32_t TDBEFC0 = (1U << 0);  ///< Normal Transmit Data Buffer Empty Force 0
        constexpr uint32_t RDBFFC0 = (1U << 1);  ///< Normal Receive Data Buffer Full Force 0
    }

    /// BCST Register bits
    namespace bcst_bits {
        constexpr uint32_t BFREF = (1U << 0);  ///< Bus Free Detection Flag
    }

    /// SVST Register bits
    namespace svst_bits {
        constexpr uint32_t GCAF = (1U << 0);  ///< General Call Address Detection Flag
        constexpr uint32_t HSMCF = (1U << 5);  ///< Hs-mode Master Code Detection Flag
        constexpr uint32_t DVIDF = (1U << 6);  ///< Device-ID Address Detection Flag
        constexpr uint32_t HOAF = (1U << 15);  ///< Host Address Detection Flag
        constexpr uint32_t SVAF0 = (1U << 16);  ///< Slave Address Detection Flag 0
        constexpr uint32_t SVAF1 = (1U << 17);  ///< Slave Address Detection Flag 1
        constexpr uint32_t SVAF2 = (1U << 18);  ///< Slave Address Detection Flag 2
    }

    /// SDATBAS Register bits
    namespace sdatbas_bits {
        constexpr uint32_t SDSTAD = (10 << 0);  ///< Slave Device Static Address
        constexpr uint32_t SDADLS = (1U << 10);  ///< Slave Device Address Length Selection
    }

    /// SVDVAD Register bits
    namespace svdvad_bits {
        constexpr uint32_t SVAD = (10 << 16);  ///< Slave Address
        constexpr uint32_t SADLG = (1U << 27);  ///< Slave Address Length
        constexpr uint32_t SSTADV = (1U << 30);  ///< Slave Static Address Valid
    }

    /// BITCNT Register bits
    namespace bitcnt_bits {
        constexpr uint32_t BCNT = (5 << 0);  ///< Bit Counter
    }

    /// PRSTDBG Register bits
    namespace prstdbg_bits {
        constexpr uint32_t SCILV = (1U << 0);  ///< SCL Line Signal Level
        constexpr uint32_t SDILV = (1U << 1);  ///< SDA Line Signal Level
        constexpr uint32_t SCOLV = (1U << 2);  ///< SCL Output Level
        constexpr uint32_t SDOLV = (1U << 3);  ///< SDA Output Level
    }

}

// ============================================================================
// IIC0WU Peripheral
// ============================================================================

namespace iic0wu {
    /// Base addresses
    constexpr uint32_t IIC0WU_B_BASE = 0x4011F098;

    /// IIC0WU Register structure
    struct Registers {
        volatile uint32_t WUCTL;  ///< Offset: 0x00 - Wake Up Unit Control Register
        volatile uint32_t WUST;  ///< Offset: 0x180 - Wake Up Unit Operating Status Register
    };

    /// Peripheral instances
    inline Registers* IIC0WU_B = reinterpret_cast<Registers*>(IIC0WU_B_BASE);

    // Bit definitions
    /// WUCTL Register bits
    namespace wuctl_bits {
        constexpr uint32_t WUACKS = (1U << 0);  ///< Wake-Up Acknowledge Selection
        constexpr uint32_t WUANFS = (1U << 4);  ///< Wake-Up Analog Noise Filter Selection
        constexpr uint32_t WUFSYNE = (1U << 6);  ///< Wake-Up function PCLKA Synchronous Enable
        constexpr uint32_t WUFE = (1U << 7);  ///< Wake-Up function Enable
    }

    /// WUST Register bits
    namespace wust_bits {
        constexpr uint32_t WUASYNF = (1U << 0);  ///< Wake-up function asynchronous operation status flag
    }

}

// ============================================================================
// ECCMB Peripheral
// ============================================================================

namespace eccmb {
    /// Base addresses
    constexpr uint32_t ECCMB_BASE = 0x4012F200;

    /// ECCMB Register structure
    struct Registers {
        volatile uint32_t EC710CTL;  ///< Offset: 0x00 - ECC Control Register
        volatile uint32_t EC710TMC;  ///< Offset: 0x04 - ECC Test Mode Control Register
        volatile uint32_t EC710TED;  ///< Offset: 0x0C - ECC Test Substitute Data Register
        volatile uint32_t EC710EAD0;  ///< Offset: 0x10 - ECC Error Address Register
    };

    /// Peripheral instances
    inline Registers* ECCMB = reinterpret_cast<Registers*>(ECCMB_BASE);

    // Bit definitions
    /// EC710CTL Register bits
    namespace ec710ctl_bits {
        constexpr uint32_t ECEMF = (1U << 0);  ///< ECC Error Message Flag
        constexpr uint32_t ECER1F = (1U << 1);  ///< ECC Error Detection and Correction Flag
        constexpr uint32_t ECER2F = (1U << 2);  ///< 2-bit ECC Error Detection Flag
        constexpr uint32_t EC1EDIC = (1U << 3);  ///< ECC 1-bit Error Detection Interrupt Control
        constexpr uint32_t EC2EDIC = (1U << 4);  ///< ECC 2-bit Error Detection Interrupt Control
        constexpr uint32_t EC1ECP = (1U << 5);  ///< ECC 1-bit Error Correction Permission
        constexpr uint32_t ECERVF = (1U << 6);  ///< ECC Error Judgment Enable Flag
        constexpr uint32_t ECER1C = (1U << 9);  ///< Accumulating ECC Error Detection and Correction Flag Clear
        constexpr uint32_t ECER2C = (1U << 10);  ///< 2-bit ECC Error Detection Flag Clear
        constexpr uint32_t ECOVFF = (1U << 11);  ///< ECC Overflow Detection Flag
        constexpr uint32_t EMCA = (2 << 14);  ///< Access Control to ECC Mode Select bit
        constexpr uint32_t ECSEDF0 = (1U << 16);  ///< ECC Single bit Error Address Detection Flag
        constexpr uint32_t ECDEDF0 = (1U << 17);  ///< ECC Dual Bit Error Address Detection Flag
    }

    /// EC710TMC Register bits
    namespace ec710tmc_bits {
        constexpr uint32_t ECDCS = (1U << 1);  ///< ECC Decode Input Select
        constexpr uint32_t ECTMCE = (1U << 7);  ///< ECC Test Mode Control Enable
        constexpr uint32_t ETMA = (2 << 14);  ///< ECC Test Mode Bit Access Control
    }

    /// EC710TED Register bits
    namespace ec710ted_bits {
        constexpr uint32_t ECEDB = (32 << 0);  ///< ECC Test Substitute Data
    }

    /// EC710EAD0 Register bits
    namespace ec710ead0_bits {
        constexpr uint32_t ECEAD = (11 << 0);  ///< ECC Error Address
    }

}

// ============================================================================
// GPT320 Peripheral
// ============================================================================

namespace gpt320 {
    /// Base addresses
    constexpr uint32_t GPT320_BASE = 0x40169000;

    /// GPT320 Register structure
    struct Registers {
        volatile uint32_t GTWP;  ///< Offset: 0x00 - General PWM Timer Write-Protection Register
        volatile uint32_t GTSTR;  ///< Offset: 0x04 - General PWM Timer Software Start Register
        volatile uint32_t GTSTP;  ///< Offset: 0x08 - General PWM Timer Software Stop Register
        volatile uint32_t GTCLR;  ///< Offset: 0x0C - General PWM Timer Software Clear Register
        volatile uint32_t GTSSR;  ///< Offset: 0x10 - General PWM Timer Start Source Select Register
        volatile uint32_t GTPSR;  ///< Offset: 0x14 - General PWM Timer Stop Source Select Register
        volatile uint32_t GTCSR;  ///< Offset: 0x18 - General PWM Timer Clear Source Select Register
        volatile uint32_t GTUPSR;  ///< Offset: 0x1C - General PWM Timer Up Count Source Select Register
        volatile uint32_t GTDNSR;  ///< Offset: 0x20 - General PWM Timer Down Count Source Select Register
        volatile uint32_t GTICASR;  ///< Offset: 0x24 - General PWM Timer Input Capture Source Select Register A
        volatile uint32_t GTICBSR;  ///< Offset: 0x28 - General PWM Timer Input Capture Source Select Register B
        volatile uint32_t GTCR;  ///< Offset: 0x2C - General PWM Timer Control Register
        volatile uint32_t GTUDDTYC;  ///< Offset: 0x30 - General PWM Timer Count Direction and Duty Setting Register
        volatile uint32_t GTIOR;  ///< Offset: 0x34 - General PWM Timer I/O Control Register
        volatile uint32_t GTINTAD;  ///< Offset: 0x38 - General PWM Timer Interrupt Output Setting Register
        volatile uint32_t GTST;  ///< Offset: 0x3C - General PWM Timer Status Register
        volatile uint32_t GTBER;  ///< Offset: 0x40 - General PWM Timer Buffer Enable Register
        volatile uint32_t GTITC;  ///< Offset: 0x44 - General PWM Timer Interrupt and A/D Conversion Start...
        volatile uint32_t GTCNT;  ///< Offset: 0x48 - General PWM Timer Counter
        volatile uint32_t GTCCRA;  ///< Offset: 0x4C - General PWM Timer Compare Capture Register A
        volatile uint32_t GTCCRB;  ///< Offset: 0x50 - General PWM Timer Compare Capture Register B
        volatile uint32_t GTCCRC;  ///< Offset: 0x54 - General PWM Timer Compare Capture Register C
        volatile uint32_t GTCCRE;  ///< Offset: 0x58 - General PWM Timer Compare Capture Register E
        volatile uint32_t GTCCRD;  ///< Offset: 0x5C - General PWM Timer Compare Capture Register D
        volatile uint32_t GTCCRF;  ///< Offset: 0x60 - General PWM Timer Compare Capture Register F
        volatile uint32_t GTPR;  ///< Offset: 0x64 - General PWM Timer Cycle Setting Register
        volatile uint32_t GTPBR;  ///< Offset: 0x68 - General PWM Timer Cycle Setting Buffer Register
        volatile uint32_t GTPDBR;  ///< Offset: 0x6C - General PWM Timer Cycle Setting Double-Buffer Register
        volatile uint32_t GTADTRA;  ///< Offset: 0x70 - A/D Conversion Start Request Timing Register A
        volatile uint32_t GTADTBRA;  ///< Offset: 0x74 - A/D Conversion Start Request Timing Buffer Register A
        volatile uint32_t GTADTDBRA;  ///< Offset: 0x78 - A/D Conversion Start Request Timing Double-Buffer Register A
        volatile uint32_t GTADTRB;  ///< Offset: 0x7C - A/D Conversion Start Request Timing Register B
        volatile uint32_t GTADTBRB;  ///< Offset: 0x80 - A/D Conversion Start Request Timing Buffer Register B
        volatile uint32_t GTADTDBRB;  ///< Offset: 0x84 - A/D Conversion Start Request Timing Double-Buffer Register B
        volatile uint32_t GTDTCR;  ///< Offset: 0x88 - General PWM Timer Dead Time Control Register
        volatile uint32_t GTDVU;  ///< Offset: 0x8C - General PWM Timer Dead Time Value Register U
        volatile uint32_t GTDVD;  ///< Offset: 0x90 - General PWM Timer Dead Time Value Register D
        volatile uint32_t GTDBU;  ///< Offset: 0x94 - General PWM Timer Dead Time Buffer Register U
        volatile uint32_t GTDBD;  ///< Offset: 0x98 - General PWM Timer Dead Time Buffer Register D
        volatile uint32_t GTSOS;  ///< Offset: 0x9C - General PWM Timer Output Protection Function Status Register
        volatile uint32_t GTSOTR;  ///< Offset: 0xA0 - General PWM Timer Output Protection Function Temporary...
        volatile uint32_t GTADSMR;  ///< Offset: 0xA4 - General PWM Timer A/D Conversion Start Request Signal...
        volatile uint32_t GTEITC;  ///< Offset: 0xA8 - General PWM Timer Extended Interrupt Skipping Counter...
        volatile uint32_t GTEITLI1;  ///< Offset: 0xAC - General PWM Timer Extended Interrupt Skipping Setting Register 1
        volatile uint32_t GTEITLI2;  ///< Offset: 0xB0 - General PWM Timer Extended Interrupt Skipping Setting Register 2
        volatile uint32_t GTEITLB;  ///< Offset: 0xB4 - General PWM Timer Extended Buffer Transfer Skipping...
        volatile uint32_t GTICLF;  ///< Offset: 0xB8 - General PWM Timer Inter Channel Logical Operation...
        volatile uint32_t GTPC;  ///< Offset: 0xBC - General PWM Timer Period Count Register
        volatile uint32_t GTSECSR;  ///< Offset: 0xD0 - General PWM Timer Operation Enable Bit Simultaneous...
        volatile uint32_t GTSECR;  ///< Offset: 0xD4 - General PWM Timer Operation Enable Bit Simultaneous...
        volatile uint32_t GTBER2;  ///< Offset: 0xE0 - General PWM Timer Buffer Enable Register 2
        volatile uint32_t GTOLBR;  ///< Offset: 0xE4 - General PWM Timer Output Level Buffer Register
        volatile uint32_t GTICCR;  ///< Offset: 0xEC - General PWM Timer Inter Channel Cooperation Input...
    };

    /// Peripheral instances
    inline Registers* GPT320 = reinterpret_cast<Registers*>(GPT320_BASE);

    // Bit definitions
    /// GTWP Register bits
    namespace gtwp_bits {
        constexpr uint32_t WP = (1U << 0);  ///< Register Write Disable
        constexpr uint32_t STRWP = (1U << 1);  ///< GTSTR.CSTRT Bit Write Disable
        constexpr uint32_t STPWP = (1U << 2);  ///< GTSTP.CSTOP Bit Write Disable
        constexpr uint32_t CLRWP = (1U << 3);  ///< GTCLR.CCLR Bit Write Disable
        constexpr uint32_t CMNWP = (1U << 4);  ///< Common Register Write Disabled
        constexpr uint32_t PRKEY = (8 << 8);  ///< GTWP Key Code
    }

    /// GTSTR Register bits
    namespace gtstr_bits {
        constexpr uint32_t CSTRT0 = (1U << 0);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT1 = (1U << 1);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT2 = (1U << 2);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT3 = (1U << 3);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT4 = (1U << 4);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT5 = (1U << 5);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT6 = (1U << 6);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT7 = (1U << 7);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT8 = (1U << 8);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT9 = (1U << 9);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT10 = (1U << 10);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT11 = (1U << 11);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT12 = (1U << 12);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT13 = (1U << 13);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT14 = (1U << 14);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT15 = (1U << 15);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT16 = (1U << 16);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT17 = (1U << 17);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT18 = (1U << 18);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT19 = (1U << 19);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT20 = (1U << 20);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT21 = (1U << 21);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT22 = (1U << 22);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT23 = (1U << 23);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT24 = (1U << 24);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT25 = (1U << 25);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT26 = (1U << 26);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT27 = (1U << 27);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT28 = (1U << 28);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT29 = (1U << 29);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT30 = (1U << 30);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT31 = (1U << 31);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
    }

    /// GTSTP Register bits
    namespace gtstp_bits {
        constexpr uint32_t CSTOP0 = (1U << 0);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP1 = (1U << 1);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP2 = (1U << 2);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP3 = (1U << 3);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP4 = (1U << 4);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP5 = (1U << 5);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP6 = (1U << 6);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP7 = (1U << 7);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP8 = (1U << 8);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP9 = (1U << 9);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP10 = (1U << 10);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP11 = (1U << 11);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP12 = (1U << 12);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP13 = (1U << 13);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP14 = (1U << 14);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP15 = (1U << 15);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP16 = (1U << 16);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP17 = (1U << 17);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP18 = (1U << 18);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP19 = (1U << 19);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP20 = (1U << 20);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP21 = (1U << 21);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP22 = (1U << 22);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP23 = (1U << 23);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP24 = (1U << 24);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP25 = (1U << 25);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP26 = (1U << 26);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP27 = (1U << 27);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP28 = (1U << 28);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP29 = (1U << 29);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP30 = (1U << 30);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP31 = (1U << 31);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
    }

    /// GTCLR Register bits
    namespace gtclr_bits {
        constexpr uint32_t CCLR0 = (1U << 0);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR1 = (1U << 1);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR2 = (1U << 2);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR3 = (1U << 3);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR4 = (1U << 4);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR5 = (1U << 5);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR6 = (1U << 6);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR7 = (1U << 7);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR8 = (1U << 8);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR9 = (1U << 9);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR10 = (1U << 10);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR11 = (1U << 11);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR12 = (1U << 12);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR13 = (1U << 13);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR14 = (1U << 14);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR15 = (1U << 15);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR16 = (1U << 16);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR17 = (1U << 17);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR18 = (1U << 18);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR19 = (1U << 19);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR20 = (1U << 20);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR21 = (1U << 21);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR22 = (1U << 22);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR23 = (1U << 23);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR24 = (1U << 24);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR25 = (1U << 25);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR26 = (1U << 26);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR27 = (1U << 27);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR28 = (1U << 28);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR29 = (1U << 29);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR30 = (1U << 30);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR31 = (1U << 31);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
    }

    /// GTSSR Register bits
    namespace gtssr_bits {
        constexpr uint32_t SSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source Counter Start Enable
        constexpr uint32_t SSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source Counter Start Enable
        constexpr uint32_t SSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source Counter Start Enable
        constexpr uint32_t SSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source Counter Start Enable
        constexpr uint32_t SSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source Counter Start Enable
        constexpr uint32_t SSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source Counter Start Enable
        constexpr uint32_t SSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source Counter Start Enable
        constexpr uint32_t SSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source Counter Start Enable
        constexpr uint32_t SSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source Counter Start Enable
        constexpr uint32_t SSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source Counter Start Enable
        constexpr uint32_t SSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source Counter Start Enable
        constexpr uint32_t SSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source Counter Start Enable
        constexpr uint32_t SSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source Counter Start Enable
        constexpr uint32_t SSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source Counter Start Enable
        constexpr uint32_t SSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source Counter Start Enable
        constexpr uint32_t SSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source Counter Start Enable
        constexpr uint32_t SSELCA = (1U << 16);  ///< ELC_GPTA Event Source Counter Start Enable
        constexpr uint32_t SSELCB = (1U << 17);  ///< ELC_GPTB Event Source Counter Start Enable
        constexpr uint32_t SSELCC = (1U << 18);  ///< ELC_GPTC Event Source Counter Start Enable
        constexpr uint32_t SSELCD = (1U << 19);  ///< ELC_GPTD Event Source Counter Start Enable
        constexpr uint32_t SSELCE = (1U << 20);  ///< ELC_GPTE Event Source Counter Start Enable
        constexpr uint32_t SSELCF = (1U << 21);  ///< ELC_GPTF Event Source Counter Start Enable
        constexpr uint32_t SSELCG = (1U << 22);  ///< ELC_GPTG Event Source Counter Start Enable
        constexpr uint32_t SSELCH = (1U << 23);  ///< ELC_GPTH Event Source Counter Start Enable
        constexpr uint32_t CSTRT = (1U << 31);  ///< Software Source Counter Start Enable
    }

    /// GTPSR Register bits
    namespace gtpsr_bits {
        constexpr uint32_t PSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source Counter Stop Enable
        constexpr uint32_t PSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source Counter Stop Enable
        constexpr uint32_t PSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source Counter Stop Enable
        constexpr uint32_t PSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source Counter Stop Enable
        constexpr uint32_t PSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source Counter Stop Enable
        constexpr uint32_t PSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source Counter Stop Enable
        constexpr uint32_t PSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source Counter Stop Enable
        constexpr uint32_t PSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source Counter Stop Enable
        constexpr uint32_t PSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source Counter Stop Enable
        constexpr uint32_t PSELCA = (1U << 16);  ///< ELC_GPTA Event Source Counter Stop Enable
        constexpr uint32_t PSELCB = (1U << 17);  ///< ELC_GPTB Event Source Counter Stop Enable
        constexpr uint32_t PSELCC = (1U << 18);  ///< ELC_GPTC Event Source Counter Stop Enable
        constexpr uint32_t PSELCD = (1U << 19);  ///< ELC_GPTD Event Source Counter Stop Enable
        constexpr uint32_t PSELCE = (1U << 20);  ///< ELC_GPTE Event Source Counter Stop Enable
        constexpr uint32_t PSELCF = (1U << 21);  ///< ELC_GPTF Event Source Counter Stop Enable
        constexpr uint32_t PSELCG = (1U << 22);  ///< ELC_GPTG Event Source Counter Stop Enable
        constexpr uint32_t PSELCH = (1U << 23);  ///< ELC_GPTH Event Source Counter Stop Enable
        constexpr uint32_t CSTOP = (1U << 31);  ///< Software Source Counter Stop Enable
    }

    /// GTCSR Register bits
    namespace gtcsr_bits {
        constexpr uint32_t CSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source Counter Clear Enable
        constexpr uint32_t CSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source Counter Clear Enable
        constexpr uint32_t CSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source Counter Clear Enable
        constexpr uint32_t CSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source Counter Clear Enable
        constexpr uint32_t CSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source Counter Clear Enable
        constexpr uint32_t CSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source Counter Clear Enable
        constexpr uint32_t CSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source Counter Clear Enable
        constexpr uint32_t CSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source Counter Clear Enable
        constexpr uint32_t CSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source Counter Clear Enable
        constexpr uint32_t CSELCA = (1U << 16);  ///< ELC_GPTA Event Source Counter Clear Enable
        constexpr uint32_t CSELCB = (1U << 17);  ///< ELC_GPTB Event Source Counter Clear Enable
        constexpr uint32_t CSELCC = (1U << 18);  ///< ELC_GPTC Event Source Counter Clear Enable
        constexpr uint32_t CSELCD = (1U << 19);  ///< ELC_GPTD Event Source Counter Clear Enable
        constexpr uint32_t CSELCE = (1U << 20);  ///< ELC_GPTE Event Source Counter Clear Enable
        constexpr uint32_t CSELCF = (1U << 21);  ///< ELC_GPTF Event Source Counter Clear Enable
        constexpr uint32_t CSELCG = (1U << 22);  ///< ELC_GPTG Event Source Counter Clear Enable
        constexpr uint32_t CSELCH = (1U << 23);  ///< ELC_GPTH Event Source Counter Clear Enable
        constexpr uint32_t CSCMSC = (3 << 24);  ///< Compare Match/Input Capture/Synchronous counter clearing Source Counter Clear Enable
        constexpr uint32_t CP1CCE = (1U << 27);  ///< Complementary PWM mode1 Crest Source Counter Clear Enable
        constexpr uint32_t CCLR = (1U << 31);  ///< Software Source Counter Clear Enable
    }

    /// GTUPSR Register bits
    namespace gtupsr_bits {
        constexpr uint32_t USGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source Counter Count Up Enable
        constexpr uint32_t USGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source Counter Count Up Enable
        constexpr uint32_t USGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source Counter Count Up Enable
        constexpr uint32_t USGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source Counter Count Up Enable
        constexpr uint32_t USGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source Counter Count Up Enable
        constexpr uint32_t USGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source Counter Count Up Enable
        constexpr uint32_t USGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source Counter Count Up Enable
        constexpr uint32_t USGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source Counter Count Up Enable
        constexpr uint32_t USCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source Counter Count Up Enable
        constexpr uint32_t USCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source Counter Count Up Enable
        constexpr uint32_t USCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source Counter Count Up Enable
        constexpr uint32_t USCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source Counter Count Up Enable
        constexpr uint32_t USCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source Counter Count Up Enable
        constexpr uint32_t USCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source Counter Count Up Enable
        constexpr uint32_t USCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source Counter Count Up Enable
        constexpr uint32_t USCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source Counter Count Up Enable
        constexpr uint32_t USELCA = (1U << 16);  ///< ELC_GPTA Event Source Counter Count Up Enable
        constexpr uint32_t USELCB = (1U << 17);  ///< ELC_GPTB Event Source Counter Count Up Enable
        constexpr uint32_t USELCC = (1U << 18);  ///< ELC_GPTC Event Source Counter Count Up Enable
        constexpr uint32_t USELCD = (1U << 19);  ///< ELC_GPTD Event Source Counter Count Up Enable
        constexpr uint32_t USELCE = (1U << 20);  ///< ELC_GPTE Event Source Counter Count Up Enable
        constexpr uint32_t USELCF = (1U << 21);  ///< ELC_GPTF Event Source Counter Count Up Enable
        constexpr uint32_t USELCG = (1U << 22);  ///< ELC_GPTG Event Source Counter Count Up Enable
        constexpr uint32_t USELCH = (1U << 23);  ///< ELC_GPTH Event Source Counter Count Up Enable
        constexpr uint32_t USILVL = (4 << 24);  ///< External Input Level Source Count-Up Enable
    }

    /// GTDNSR Register bits
    namespace gtdnsr_bits {
        constexpr uint32_t DSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source Counter Count Down Enable
        constexpr uint32_t DSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source Counter Count Down Enable
        constexpr uint32_t DSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source Counter Count Down Enable
        constexpr uint32_t DSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source Counter Count Down Enable
        constexpr uint32_t DSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source Counter Count Down Enable
        constexpr uint32_t DSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source Counter Count Down Enable
        constexpr uint32_t DSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source Counter Count Down Enable
        constexpr uint32_t DSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source Counter Count Down Enable
        constexpr uint32_t DSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source Counter Count Down Enable
        constexpr uint32_t DSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source Counter Count Down Enable
        constexpr uint32_t DSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source Counter Count Down Enable
        constexpr uint32_t DSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source Counter Count Down Enable
        constexpr uint32_t DSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source Counter Count Down Enable
        constexpr uint32_t DSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source Counter Count Down Enable
        constexpr uint32_t DSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source Counter Count Down Enable
        constexpr uint32_t DSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source Counter Count Down Enable
        constexpr uint32_t DSELCA = (1U << 16);  ///< ELC_GPTA Event Source Counter Count Down Enable
        constexpr uint32_t DSELCB = (1U << 17);  ///< ELC_GPTB Event Source Counter Count Down Enable
        constexpr uint32_t DSELCC = (1U << 18);  ///< ELC_GPTC Event Source Counter Count Down Enable
        constexpr uint32_t DSELCD = (1U << 19);  ///< ELC_GPTD Event Source Counter Count Down Enable
        constexpr uint32_t DSELCE = (1U << 20);  ///< ELC_GPTE Event Source Counter Count Down Enable
        constexpr uint32_t DSELCF = (1U << 21);  ///< ELC_GPTF Event Source Counter Count Down Enable
        constexpr uint32_t DSELCG = (1U << 22);  ///< ELC_GPTG Event Source Counter Count Down Enable
        constexpr uint32_t DSELCH = (1U << 23);  ///< ELC_GPTF Event Source Counter Count Down Enable
        constexpr uint32_t DSILVL = (4 << 24);  ///< External Input Level Source Count-Down Enable
    }

    /// GTICASR Register bits
    namespace gticasr_bits {
        constexpr uint32_t ASGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCA = (1U << 16);  ///< ELC_GPTA Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCB = (1U << 17);  ///< ELC_GPTB Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCC = (1U << 18);  ///< ELC_GPTC Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCD = (1U << 19);  ///< ELC_GPTD Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCE = (1U << 20);  ///< ELC_GPTE Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCF = (1U << 21);  ///< ELC_GPTF Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCG = (1U << 22);  ///< ELC_GPTG Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCH = (1U << 23);  ///< ELC_GPTH Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASOC = (1U << 24);  ///< Other channel Source GTCCRA Input Capture Enable
    }

    /// GTICBSR Register bits
    namespace gticbsr_bits {
        constexpr uint32_t BSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCA = (1U << 16);  ///< ELC_GPTA Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCB = (1U << 17);  ///< ELC_GPTB Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCC = (1U << 18);  ///< ELC_GPTC Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCD = (1U << 19);  ///< ELC_GPTD Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCE = (1U << 20);  ///< ELC_GPTE Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCF = (1U << 21);  ///< ELC_GPTF Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCG = (1U << 22);  ///< ELC_GPTG Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCH = (1U << 23);  ///< ELC_GPTH Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSOC = (1U << 24);  ///< Other channel Source GTCCRB Input Capture Enable
    }

    /// GTCR Register bits
    namespace gtcr_bits {
        constexpr uint32_t CST = (1U << 0);  ///< Count Start
        constexpr uint32_t ICDS = (1U << 8);  ///< Input Capture Operation Select During Count Stop
        constexpr uint32_t SCGTIOC = (1U << 9);  ///< GTIOC input Source Synchronous Clear Enable
        constexpr uint32_t SSCGRP = (2 << 10);  ///< Synchronous Set/Clear Group Select
        constexpr uint32_t CPSCD = (1U << 12);  ///< Complementary PWM Mode Synchronous Clear Disable
        constexpr uint32_t SSCEN = (1U << 15);  ///< Synchronous Set/Clear Enable
        constexpr uint32_t MD = (4 << 16);  ///< Mode Select
        constexpr uint32_t TPCS = (4 << 23);  ///< Timer Prescaler Select
        constexpr uint32_t CKEG = (2 << 27);  ///< Clock Edge Select
    }

    /// GTUDDTYC Register bits
    namespace gtuddtyc_bits {
        constexpr uint32_t UD = (1U << 0);  ///< Count Direction Setting
        constexpr uint32_t UDF = (1U << 1);  ///< Forcible Count Direction Setting
        constexpr uint32_t OADTY = (2 << 16);  ///< GTIOCnA Output Duty Setting
        constexpr uint32_t OADTYF = (1U << 18);  ///< Forcible GTIOCnA Output Duty Setting
        constexpr uint32_t OADTYR = (1U << 19);  ///< GTIOCnA Output Value Selecting after Releasing 0%/100% Duty Setting
        constexpr uint32_t OBDTY = (2 << 24);  ///< GTIOCnB Output Duty Setting
        constexpr uint32_t OBDTYF = (1U << 26);  ///< Forcible GTIOCnB Output Duty Setting
        constexpr uint32_t OBDTYR = (1U << 27);  ///< GTIOCnB Output Value Selecting after Releasing 0%/100% Duty Setting
    }

    /// GTIOR Register bits
    namespace gtior_bits {
        constexpr uint32_t GTIOA = (5 << 0);  ///< GTIOCnA Pin Function Select
        constexpr uint32_t CPSCIR = (1U << 5);  ///< Complementary PWM Mode Initial Output at Synchronous Clear Disable
        constexpr uint32_t OADFLT = (1U << 6);  ///< GTIOCnA Pin Output Value Setting at the Count Stop
        constexpr uint32_t OAHLD = (1U << 7);  ///< GTIOCnA Pin Output Setting at the Start/Stop Count
        constexpr uint32_t OAE = (1U << 8);  ///< GTIOCnA Pin Output Enable
        constexpr uint32_t OADF = (2 << 9);  ///< GTIOCnA Pin Disable Value Setting
        constexpr uint32_t OAEOCD = (1U << 11);  ///< GTCCRA Compare Match Cycle End Output Invalidate
        constexpr uint32_t PSYE = (1U << 12);  ///< PWM Synchronous output Enable
        constexpr uint32_t NFAEN = (1U << 13);  ///< Noise Filter A Enable
        constexpr uint32_t NFCSA = (2 << 14);  ///< Noise Filter A Sampling Clock Select
        constexpr uint32_t GTIOB = (5 << 16);  ///< GTIOCnB Pin Function Select
        constexpr uint32_t OBDFLT = (1U << 22);  ///< GTIOCnB Pin Output Value Setting at the Count Stop
        constexpr uint32_t OBHLD = (1U << 23);  ///< GTIOCnB Pin Output Setting at the Start/Stop Count
        constexpr uint32_t OBE = (1U << 24);  ///< GTIOCnB Pin Output Enable
        constexpr uint32_t OBDF = (2 << 25);  ///< GTIOCnB Pin Disable Value Setting
        constexpr uint32_t OBEOCD = (1U << 27);  ///< GTCCRB Compare Match Cycle End Output Invalidate
        constexpr uint32_t NFBEN = (1U << 29);  ///< Noise Filter B Enable
        constexpr uint32_t NFCSB = (2 << 30);  ///< Noise Filter B Sampling Clock Select
    }

    /// GTINTAD Register bits
    namespace gtintad_bits {
        constexpr uint32_t SCFA = (1U << 8);  ///< GTCCRA Register Compare Match/Input Capture Source Synchronous Clear Enable
        constexpr uint32_t SCFB = (1U << 9);  ///< GTCCRB Register Compare Match/Input Capture Source Synchronous Clear Enable
        constexpr uint32_t SCFC = (1U << 10);  ///< GTCCRC Register Compare Match Source Synchronous Clear Enable
        constexpr uint32_t SCFD = (1U << 11);  ///< GTCCRD Register Compare Match Source Synchronous Clear Enable
        constexpr uint32_t SCFE = (1U << 12);  ///< GTCCRE Register Compare Match Source Synchronous Clear Enable
        constexpr uint32_t SCFF = (1U << 13);  ///< GTCCRF Register Compare Match Source Synchronous Clear Enable
        constexpr uint32_t SCFPO = (1U << 14);  ///< Overflow Source Synchronous Clear Enable
        constexpr uint32_t SCFPU = (1U << 15);  ///< Underflow Source Synchronous Clear Enable
        constexpr uint32_t ADTRAUEN = (1U << 16);  ///< GTADTRA Register Compare Match (Up-Counting) A/D Conversion Start Request Enable
        constexpr uint32_t ADTRADEN = (1U << 17);  ///< GTADTRA Register Compare Match (Down-Counting) A/D Conversion Start Request Enable
        constexpr uint32_t ADTRBUEN = (1U << 18);  ///< GTADTRB Register Compare Match (Up-Counting) A/D Conversion Start Request Enable
        constexpr uint32_t ADTRBDEN = (1U << 19);  ///< GTADTRB Register Compare Match (Down-Counting) A/D Conversion Start Request Enable
        constexpr uint32_t GRP = (2 << 24);  ///< Output Disable Source Select
        constexpr uint32_t GRPDTE = (1U << 28);  ///< Dead Time Error Output Disable Request Enable
        constexpr uint32_t GRPABH = (1U << 29);  ///< Same Time Output Level High Disable Request Enable
        constexpr uint32_t GRPABL = (1U << 30);  ///< Same Time Output Level Low Disable Request Enable
    }

    /// GTST Register bits
    namespace gtst_bits {
        constexpr uint32_t TCFA = (1U << 0);  ///< Input Capture/Compare Match Flag A
        constexpr uint32_t TCFB = (1U << 1);  ///< Input Capture/Compare Match Flag B
        constexpr uint32_t TCFC = (1U << 2);  ///< Input Compare Match Flag C
        constexpr uint32_t TCFD = (1U << 3);  ///< Input Compare Match Flag D
        constexpr uint32_t TCFE = (1U << 4);  ///< Input Compare Match Flag E
        constexpr uint32_t TCFF = (1U << 5);  ///< Input Compare Match Flag F
        constexpr uint32_t TCFPO = (1U << 6);  ///< Overflow Flag
        constexpr uint32_t TCFPU = (1U << 7);  ///< Underflow Flag
        constexpr uint32_t ITCNT = (3 << 8);  ///< GPTn_OVF/GPTn_UDF Interrupt Skipping Count Counter
        constexpr uint32_t TUCF = (1U << 15);  ///< Count Direction Flag
        constexpr uint32_t ADTRAUF = (1U << 16);  ///< GTADTRA Register Compare Match (Up-Counting) A/D Conversion Start Request Flag
        constexpr uint32_t ADTRADF = (1U << 17);  ///< GTADTRA Register Compare Match (Down-Counting) A/D Conversion Start Request Flag
        constexpr uint32_t ADTRBUF = (1U << 18);  ///< GTADTRB Register Compare Match (Up-Counting) A/D Conversion Start Request Flag
        constexpr uint32_t ADTRBDF = (1U << 19);  ///< GTADTRB Register Compare Match (Down-Counting) A/D Conversion Start Request Flag
        constexpr uint32_t ODF = (1U << 24);  ///< Output Disable Flag
        constexpr uint32_t DTEF = (1U << 28);  ///< Dead Time Error Flag
        constexpr uint32_t OABHF = (1U << 29);  ///< Same Time Output Level High Flag
        constexpr uint32_t OABLF = (1U << 30);  ///< Same Time Output Level Low Flag
        constexpr uint32_t PCF = (1U << 31);  ///< Period Count Function Finish Flag
    }

    /// GTBER Register bits
    namespace gtber_bits {
        constexpr uint32_t BD0 = (1U << 0);  ///< GTCCR Buffer Operation Disable
        constexpr uint32_t BD1 = (1U << 1);  ///< GTPR Buffer Operation Disable
        constexpr uint32_t BD2 = (1U << 2);  ///< GTADTRA/GTADTRB Registers Buffer Operation Disable
        constexpr uint32_t BD3 = (1U << 3);  ///< GTDVU/GTDVD Registers Buffer Operation Disable
        constexpr uint32_t DBRTECA = (1U << 8);  ///< GTCCRA Register Double Buffer Repeat Operation Enable
        constexpr uint32_t DBRTECB = (1U << 10);  ///< GTCCRB Register Double Buffer Repeat Operation Enable
        constexpr uint32_t CCRA = (2 << 16);  ///< GTCCRA Buffer Operation
        constexpr uint32_t CCRB = (2 << 18);  ///< GTCCRB Buffer Operation
        constexpr uint32_t PR = (2 << 20);  ///< GTPR Buffer Operation
        constexpr uint32_t CCRSWT = (1U << 22);  ///< GTCCRA and GTCCRB Forcible Buffer Operation
        constexpr uint32_t ADTTA = (2 << 24);  ///< GTADTRA Register Buffer Transfer Timing Select
        constexpr uint32_t ADTDA = (1U << 26);  ///< GTADTRA Register Double Buffer Operation
        constexpr uint32_t ADTTB = (2 << 28);  ///< GTADTRB Register Buffer Transfer Timing Select
        constexpr uint32_t ADTDB = (1U << 30);  ///< GTADTRB Register Double Buffer Operation
    }

    /// GTITC Register bits
    namespace gtitc_bits {
        constexpr uint32_t ITLA = (1U << 0);  ///< GTCCRA Register Compare Match/Input Capture Interrupt Link
        constexpr uint32_t ITLB = (1U << 1);  ///< GTCCRB Register Compare Match/Input Capture Interrupt Link
        constexpr uint32_t ITLC = (1U << 2);  ///< GTCCRC Register Compare Match Interrupt Link
        constexpr uint32_t ITLD = (1U << 3);  ///< GTCCRD Register Compare Match Interrupt Link
        constexpr uint32_t ITLE = (1U << 4);  ///< GTCCRE Register Compare Match Interrupt Link
        constexpr uint32_t ITLF = (1U << 5);  ///< GTCCRF Register Compare Match Interrupt Link
        constexpr uint32_t IVTC = (2 << 6);  ///< GPTn_OVF/GPTn_UDF Interrupt Skipping Function Select
        constexpr uint32_t IVTT = (3 << 8);  ///< GPTn_OVF/GPTn_UDF Interrupt Skipping Count Select
        constexpr uint32_t ADTAL = (1U << 12);  ///< GTADTRA Register A/D Conversion Start Request Link
        constexpr uint32_t ADTBL = (1U << 14);  ///< GTADTRB Register A/D Conversion Start Request Link
    }

    /// GTDTCR Register bits
    namespace gtdtcr_bits {
        constexpr uint32_t TDE = (1U << 0);  ///< Negative-Phase Waveform Setting
        constexpr uint32_t TDBUE = (1U << 4);  ///< GTDVU Register Buffer Operation Enable
        constexpr uint32_t TDBDE = (1U << 5);  ///< GTDVD Register Buffer Operation Enable
        constexpr uint32_t TDFER = (1U << 8);  ///< GTDVD Register Setting
    }

    /// GTSOS Register bits
    namespace gtsos_bits {
        constexpr uint32_t SOS = (2 << 0);  ///< Output Protection Function Status
    }

    /// GTSOTR Register bits
    namespace gtsotr_bits {
        constexpr uint32_t SOTR = (1U << 0);  ///< Output Protection Function Temporary Release
    }

    /// GTADSMR Register bits
    namespace gtadsmr_bits {
        constexpr uint32_t ADSMS0 = (2 << 0);  ///< A/D Conversion Start Request Signal Monitor 0 Selection
        constexpr uint32_t ADSMEN0 = (1U << 8);  ///< A/D Conversion Start Request Signal Monitor 0 Output Enabling
        constexpr uint32_t ADSMS1 = (2 << 16);  ///< A/D Conversion Start Request Signal Monitor 1 Selection
        constexpr uint32_t ADSMEN1 = (1U << 24);  ///< A/D Conversion Start Request Signal Monitor 1 Output Enabling
    }

    /// GTEITC Register bits
    namespace gteitc_bits {
        constexpr uint32_t EIVTC1 = (2 << 0);  ///< Extended Interrupt Skipping Counter 1 Count Source Select
        constexpr uint32_t EIVTT1 = (4 << 4);  ///< Extended Interrupt Skipping 1 Skipping Count Setting
        constexpr uint32_t EITCNT1 = (4 << 12);  ///< Extended Interrupt Skipping Counter 1
        constexpr uint32_t EIVTC2 = (2 << 16);  ///< Extended Interrupt Skipping Counter 2 Count Source select
        constexpr uint32_t EIVTT2 = (4 << 20);  ///< Extended Interrupt Skipping 2 Skipping Count Setting
        constexpr uint32_t EITCNT2IV = (4 << 24);  ///< Extended Interrupt Skipping Counter 2 Initial Value
        constexpr uint32_t EITCNT2 = (4 << 28);  ///< Extended Interrupt Skipping Counter 2
    }

    /// GTEITLI1 Register bits
    namespace gteitli1_bits {
        constexpr uint32_t EITLA = (3 << 0);  ///< GTCCRA Register Compare Match/Input Capture Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLB = (3 << 4);  ///< GTCCRB Register Compare Match/Input Capture Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLC = (3 << 8);  ///< GTCCRC Register Compare Match Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLD = (3 << 12);  ///< GTCCRD Register Compare Match Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLE = (3 << 16);  ///< GTCCRE Register Compare Match Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLF = (3 << 20);  ///< GTCCRF Register Compare Match Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLV = (3 << 24);  ///< Overflow Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLU = (3 << 28);  ///< Underflow Interrupt Extended Skipping Function Select
    }

    /// GTEITLI2 Register bits
    namespace gteitli2_bits {
        constexpr uint32_t EADTAL = (3 << 0);  ///< GTADTRA Register A/D Conversion Start Request Extended Skipping Function Select
        constexpr uint32_t EADTBL = (3 << 4);  ///< GTADTRB Register A/D Conversion Start Request Extended Skipping Function Select
    }

    /// GTEITLB Register bits
    namespace gteitlb_bits {
        constexpr uint32_t EBTLCA = (3 << 0);  ///< GTCCRA Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLCB = (3 << 4);  ///< GTCCRB Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLPR = (3 << 8);  ///< GTPR Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLADA = (3 << 16);  ///< GTADTRA Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLADB = (3 << 20);  ///< GTADTRB Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLDVU = (3 << 24);  ///< GTDVU Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLDVD = (3 << 28);  ///< GTDVD Register Buffer Transfer Extended Skipping Function Select
    }

    /// GTICLF Register bits
    namespace gticlf_bits {
        constexpr uint32_t ICLFA = (3 << 0);  ///< GTIOCnA Output Logical Operation Function Select
        constexpr uint32_t ICLFSELC = (6 << 4);  ///< Inter Channel Signal C Select
        constexpr uint32_t ICLFB = (3 << 16);  ///< GTIOCnB Output Logical Operation Function Select
        constexpr uint32_t ICLFSELD = (6 << 20);  ///< Inter Channel Signal D Select
    }

    /// GTPC Register bits
    namespace gtpc_bits {
        constexpr uint32_t PCEN = (1U << 0);  ///< Period Count Function Enable
        constexpr uint32_t ASTP = (1U << 8);  ///< Automatic Stop Function Enable
        constexpr uint32_t PCNT = (12 << 16);  ///< Period Counter
    }

    /// GTSECSR Register bits
    namespace gtsecsr_bits {
        constexpr uint32_t SECSEL0 = (1U << 0);  ///< Channel 0 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL1 = (1U << 1);  ///< Channel 1 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL2 = (1U << 2);  ///< Channel 2 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL3 = (1U << 3);  ///< Channel 3 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL4 = (1U << 4);  ///< Channel 4 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL5 = (1U << 5);  ///< Channel 5 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL6 = (1U << 6);  ///< Channel 6 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL7 = (1U << 7);  ///< Channel 7 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL8 = (1U << 8);  ///< Channel 8 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL9 = (1U << 9);  ///< Channel 9 Operation Enable Bit Simultaneous Control Channel Select
    }

    /// GTSECR Register bits
    namespace gtsecr_bits {
        constexpr uint32_t SBDCE = (1U << 0);  ///< GTCCR Register Buffer Operation Simultaneous Enable
        constexpr uint32_t SBDPE = (1U << 1);  ///< GTPR Register Buffer Operation Simultaneous Enable
        constexpr uint32_t SBDAE = (1U << 2);  ///< GTADTR Register Buffer Operation Simultaneous Enable
        constexpr uint32_t SBDDE = (1U << 3);  ///< GTDV Register Buffer Operation Simultaneous Enable
        constexpr uint32_t SBDCD = (1U << 8);  ///< GTCCR Register Buffer Operation Simultaneous Disable
        constexpr uint32_t SBDPD = (1U << 9);  ///< GTPR Register Buffer Operation Simultaneous Disable
        constexpr uint32_t SBDAD = (1U << 10);  ///< GTADTR Register Buffer Operation Simultaneous Disable
        constexpr uint32_t SBDDD = (1U << 11);  ///< GTDV Register Buffer Operation Simultaneous Disable
        constexpr uint32_t SPCE = (1U << 16);  ///< Period Count Function Simultaneous Enable
        constexpr uint32_t SSCE = (1U << 17);  ///< Synchronous Set/Clear Simultaneous Enable
        constexpr uint32_t SPCD = (1U << 24);  ///< Period Count Function Simultaneous Disable
        constexpr uint32_t SSCD = (1U << 25);  ///< Synchronous Set/Clear Simultaneous Disable
    }

    /// GTBER2 Register bits
    namespace gtber2_bits {
        constexpr uint32_t CCTCA = (1U << 0);  ///< Counter Clear Source GTCCRA Register Buffer Transfer Disable
        constexpr uint32_t CCTCB = (1U << 1);  ///< Counter Clear Source GTCCRB Register Buffer Transfer Disable
        constexpr uint32_t CCTPR = (1U << 2);  ///< Counter Clear Source GTPR Register Buffer Transfer Disable
        constexpr uint32_t CCTADA = (1U << 3);  ///< Counter Clear Source GTADTRA Register Buffer Transfer Disable
        constexpr uint32_t CCTADB = (1U << 4);  ///< Counter Clear Source GTADTRB Register Buffer Transfer Disable
        constexpr uint32_t CCTDV = (1U << 5);  ///< Counter Clear Source GTDVU/GTDVD Register Buffer Transfer Disable
        constexpr uint32_t CMTCA = (2 << 8);  ///< Compare Match Source GTCCRA Register Buffer Transfer Enable
        constexpr uint32_t CMTCB = (2 << 10);  ///< Compare Match Source GTCCRB Register Buffer Transfer Enable
        constexpr uint32_t CMTADA = (1U << 13);  ///< Compare Match Source GTADTRA Register Buffer Transfer Enable
        constexpr uint32_t CMTADB = (1U << 14);  ///< Compare Match Source GTADTRB Register Buffer Transfer Enable
        constexpr uint32_t CPTCA = (1U << 16);  ///< Overflow/Underflow Source GTCCRA Register Buffer Transfer Disable
        constexpr uint32_t CPTCB = (1U << 17);  ///< Overflow/Underflow Source GTCCRB Register Buffer Transfer Disable
        constexpr uint32_t CPTPR = (1U << 18);  ///< Overflow/Underflow Source GTPR Register Buffer Transfer Disable
        constexpr uint32_t CPTADA = (1U << 19);  ///< Overflow/Underflow Source GTADTRA Register Buffer Transfer Disable
        constexpr uint32_t CPTADB = (1U << 20);  ///< Overflow/Underflow Source GTADTRB Register Buffer Transfer Disable
        constexpr uint32_t CPTDV = (1U << 21);  ///< Overflow/Underflow Source GTDVU/GTDVD Register Buffer Transfer Disable
        constexpr uint32_t CP3DB = (1U << 24);  ///< Complementary PWM mode 3,4 Double Buffer select
        constexpr uint32_t CPBTD = (1U << 25);  ///< Complementary PWM mode Buffer Transfer Disable
        constexpr uint32_t OLTTA = (2 << 26);  ///< GTIOCnA Output Level Buffer Transfer Timing Select
        constexpr uint32_t OLTTB = (2 << 28);  ///< GTIOCnB Output Level Buffer Transfer Timing Select
    }

    /// GTOLBR Register bits
    namespace gtolbr_bits {
        constexpr uint32_t GTIOAB = (5 << 0);  ///< GTIOA buffer bits
        constexpr uint32_t GTIOBB = (5 << 16);  ///< GTIOB buffer bits
    }

    /// GTICCR Register bits
    namespace gticcr_bits {
        constexpr uint32_t ICAFA = (1U << 0);  ///< Forwarding GTCCRA register Compare Match/Input Capture to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFB = (1U << 1);  ///< Forwarding GTCCRB register Compare Match/Input Capture to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFC = (1U << 2);  ///< Forwarding GTCCRC register Compare Match to Other Channel GTCCRA Input Source Capture Enable
        constexpr uint32_t ICAFD = (1U << 3);  ///< Forwarding GTCCRD register Compare Match to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFE = (1U << 4);  ///< Forwarding GTCCRE register Compare Match to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFF = (1U << 5);  ///< Forwarding GTCCRF register Compare Match to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFPO = (1U << 6);  ///< Forwarding Overflow to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFPU = (1U << 7);  ///< Forwarding Underflow to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICACLK = (1U << 8);  ///< Forwarding Count Clock to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAGRP = (2 << 14);  ///< GTCCRA Input Capture Group Select
        constexpr uint32_t ICBFA = (1U << 16);  ///< Forwarding GTCCRA register Compare Match/Input Capture to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFB = (1U << 17);  ///< Forwarding GTCCRB register Compare Match/Input Capture to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFC = (1U << 18);  ///< Forwarding GTCCRC register Compare Match to Other Channel GTCCRB Input Source Capture Enable
        constexpr uint32_t ICBFD = (1U << 19);  ///< Forwarding GTCCRD register Compare Match to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFE = (1U << 20);  ///< Forwarding GTCCRE register Compare Match to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFF = (1U << 21);  ///< Forwarding GTCCRF register Compare Match to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFPO = (1U << 22);  ///< Forwarding Overflow to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFPU = (1U << 23);  ///< Forwarding Underflow to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBCLK = (1U << 24);  ///< Forwarding Count Clock to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBGRP = (2 << 30);  ///< GTCCRB Input Capture Group Select
    }

}

// ============================================================================
// GPT321 Peripheral
// ============================================================================

namespace gpt321 {
    /// Base addresses
    constexpr uint32_t GPT321_BASE = 0x40169100;

    /// GPT321 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPT321 = reinterpret_cast<Registers*>(GPT321_BASE);

}

// ============================================================================
// GPT322 Peripheral
// ============================================================================

namespace gpt322 {
    /// Base addresses
    constexpr uint32_t GPT322_BASE = 0x40169200;

    /// GPT322 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPT322 = reinterpret_cast<Registers*>(GPT322_BASE);

}

// ============================================================================
// GPT323 Peripheral
// ============================================================================

namespace gpt323 {
    /// Base addresses
    constexpr uint32_t GPT323_BASE = 0x40169300;

    /// GPT323 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPT323 = reinterpret_cast<Registers*>(GPT323_BASE);

}

// ============================================================================
// GPT324 Peripheral
// ============================================================================

namespace gpt324 {
    /// Base addresses
    constexpr uint32_t GPT324_BASE = 0x40169400;

    /// GPT324 Register structure
    struct Registers {
        volatile uint32_t GTWP;  ///< Offset: 0x00 - General PWM Timer Write-Protection Register
        volatile uint32_t GTSTR;  ///< Offset: 0x04 - General PWM Timer Software Start Register
        volatile uint32_t GTSTP;  ///< Offset: 0x08 - General PWM Timer Software Stop Register
        volatile uint32_t GTCLR;  ///< Offset: 0x0C - General PWM Timer Software Clear Register
        volatile uint32_t GTSSR;  ///< Offset: 0x10 - General PWM Timer Start Source Select Register
        volatile uint32_t GTPSR;  ///< Offset: 0x14 - General PWM Timer Stop Source Select Register
        volatile uint32_t GTCSR;  ///< Offset: 0x18 - General PWM Timer Clear Source Select Register
        volatile uint32_t GTICASR;  ///< Offset: 0x24 - General PWM Timer Input Capture Source Select Register A
        volatile uint32_t GTICBSR;  ///< Offset: 0x28 - General PWM Timer Input Capture Source Select Register B
        volatile uint32_t GTCR;  ///< Offset: 0x2C - General PWM Timer Control Register
        volatile uint32_t GTUDDTYC;  ///< Offset: 0x30 - General PWM Timer Count Direction and Duty Setting Register
        volatile uint32_t GTIOR;  ///< Offset: 0x34 - General PWM Timer I/O Control Register
        volatile uint32_t GTINTAD;  ///< Offset: 0x38 - General PWM Timer Interrupt Output Setting Register
        volatile uint32_t GTST;  ///< Offset: 0x3C - General PWM Timer Status Register
        volatile uint32_t GTBER;  ///< Offset: 0x40 - General PWM Timer Buffer Enable Register
        volatile uint32_t GTITC;  ///< Offset: 0x44 - General PWM Timer Interrupt and A/D Conversion Start...
        volatile uint32_t GTCNT;  ///< Offset: 0x48 - General PWM Timer Counter
        volatile uint32_t GTCCRA;  ///< Offset: 0x4C - General PWM Timer Compare Capture Register A
        volatile uint32_t GTCCRB;  ///< Offset: 0x50 - General PWM Timer Compare Capture Register B
        volatile uint32_t GTCCRC;  ///< Offset: 0x54 - General PWM Timer Compare Capture Register C
        volatile uint32_t GTCCRE;  ///< Offset: 0x58 - General PWM Timer Compare Capture Register E
        volatile uint32_t GTCCRD;  ///< Offset: 0x5C - General PWM Timer Compare Capture Register D
        volatile uint32_t GTCCRF;  ///< Offset: 0x60 - General PWM Timer Compare Capture Register F
        volatile uint32_t GTPR;  ///< Offset: 0x64 - General PWM Timer Cycle Setting Register
        volatile uint32_t GTPBR;  ///< Offset: 0x68 - General PWM Timer Cycle Setting Buffer Register
        volatile uint32_t GTPDBR;  ///< Offset: 0x6C - General PWM Timer Cycle Setting Double-Buffer Register
        volatile uint32_t GTADTRA;  ///< Offset: 0x70 - A/D Conversion Start Request Timing Register A
        volatile uint32_t GTADTBRA;  ///< Offset: 0x74 - A/D Conversion Start Request Timing Buffer Register A
        volatile uint32_t GTADTDBRA;  ///< Offset: 0x78 - A/D Conversion Start Request Timing Double-Buffer Register A
        volatile uint32_t GTADTRB;  ///< Offset: 0x7C - A/D Conversion Start Request Timing Register B
        volatile uint32_t GTADTBRB;  ///< Offset: 0x80 - A/D Conversion Start Request Timing Buffer Register B
        volatile uint32_t GTADTDBRB;  ///< Offset: 0x84 - A/D Conversion Start Request Timing Double-Buffer Register B
        volatile uint32_t GTDTCR;  ///< Offset: 0x88 - General PWM Timer Dead Time Control Register
        volatile uint32_t GTDVU;  ///< Offset: 0x8C - General PWM Timer Dead Time Value Register U
        volatile uint32_t GTDVD;  ///< Offset: 0x90 - General PWM Timer Dead Time Value Register D
        volatile uint32_t GTDBU;  ///< Offset: 0x94 - General PWM Timer Dead Time Buffer Register U
        volatile uint32_t GTDBD;  ///< Offset: 0x98 - General PWM Timer Dead Time Buffer Register D
        volatile uint32_t GTSOS;  ///< Offset: 0x9C - General PWM Timer Output Protection Function Status Register
        volatile uint32_t GTSOTR;  ///< Offset: 0xA0 - General PWM Timer Output Protection Function Temporary...
        volatile uint32_t GTADSMR;  ///< Offset: 0xA4 - General PWM Timer A/D Conversion Start Request Signal...
        volatile uint32_t GTEITC;  ///< Offset: 0xA8 - General PWM Timer Extended Interrupt Skipping Counter...
        volatile uint32_t GTEITLI1;  ///< Offset: 0xAC - General PWM Timer Extended Interrupt Skipping Setting Register 1
        volatile uint32_t GTEITLI2;  ///< Offset: 0xB0 - General PWM Timer Extended Interrupt Skipping Setting Register 2
        volatile uint32_t GTEITLB;  ///< Offset: 0xB4 - General PWM Timer Extended Buffer Transfer Skipping...
        volatile uint32_t GTICLF;  ///< Offset: 0xB8 - General PWM Timer Inter Channel Logical Operation...
        volatile uint32_t GTADCMSC;  ///< Offset: 0xC0 - General PWM Timer A/D Conversion Start Request Compare...
        volatile uint32_t GTADCMSS;  ///< Offset: 0xC4 - General PWM Timer A/D Conversion Start Request Compare...
        volatile uint32_t GTSECSR;  ///< Offset: 0xD0 - General PWM Timer Operation Enable Bit Simultaneous...
        volatile uint32_t GTSECR;  ///< Offset: 0xD4 - General PWM Timer Operation Enable Bit Simultaneous...
        volatile uint32_t GTBER2;  ///< Offset: 0xE0 - General PWM Timer Buffer Enable Register 2
        volatile uint32_t GTOLBR;  ///< Offset: 0xE4 - General PWM Timer Output Level Buffer Register
        volatile uint32_t GTICCR;  ///< Offset: 0xEC - General PWM Timer Inter Channel Cooperation Input...
    };

    /// Peripheral instances
    inline Registers* GPT324 = reinterpret_cast<Registers*>(GPT324_BASE);

    // Bit definitions
    /// GTWP Register bits
    namespace gtwp_bits {
        constexpr uint32_t WP = (1U << 0);  ///< Register Write Disable
        constexpr uint32_t STRWP = (1U << 1);  ///< GTSTR.CSTRT Bit Write Disable
        constexpr uint32_t STPWP = (1U << 2);  ///< GTSTP.CSTOP Bit Write Disable
        constexpr uint32_t CLRWP = (1U << 3);  ///< GTCLR.CCLR Bit Write Disable
        constexpr uint32_t CMNWP = (1U << 4);  ///< Common Register Write Disabled
        constexpr uint32_t PRKEY = (8 << 8);  ///< GTWP Key Code
    }

    /// GTSTR Register bits
    namespace gtstr_bits {
        constexpr uint32_t CSTRT0 = (1U << 0);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT1 = (1U << 1);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT2 = (1U << 2);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT3 = (1U << 3);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT4 = (1U << 4);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT5 = (1U << 5);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT6 = (1U << 6);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT7 = (1U << 7);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT8 = (1U << 8);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT9 = (1U << 9);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT10 = (1U << 10);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT11 = (1U << 11);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT12 = (1U << 12);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT13 = (1U << 13);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT14 = (1U << 14);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT15 = (1U << 15);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT16 = (1U << 16);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT17 = (1U << 17);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT18 = (1U << 18);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT19 = (1U << 19);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT20 = (1U << 20);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT21 = (1U << 21);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT22 = (1U << 22);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT23 = (1U << 23);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT24 = (1U << 24);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT25 = (1U << 25);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT26 = (1U << 26);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT27 = (1U << 27);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT28 = (1U << 28);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT29 = (1U << 29);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT30 = (1U << 30);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
        constexpr uint32_t CSTRT31 = (1U << 31);  ///< Channel n GTCNT Count Start (n is the same as the bit position value)
    }

    /// GTSTP Register bits
    namespace gtstp_bits {
        constexpr uint32_t CSTOP0 = (1U << 0);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP1 = (1U << 1);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP2 = (1U << 2);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP3 = (1U << 3);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP4 = (1U << 4);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP5 = (1U << 5);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP6 = (1U << 6);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP7 = (1U << 7);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP8 = (1U << 8);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP9 = (1U << 9);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP10 = (1U << 10);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP11 = (1U << 11);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP12 = (1U << 12);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP13 = (1U << 13);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP14 = (1U << 14);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP15 = (1U << 15);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP16 = (1U << 16);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP17 = (1U << 17);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP18 = (1U << 18);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP19 = (1U << 19);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP20 = (1U << 20);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP21 = (1U << 21);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP22 = (1U << 22);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP23 = (1U << 23);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP24 = (1U << 24);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP25 = (1U << 25);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP26 = (1U << 26);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP27 = (1U << 27);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP28 = (1U << 28);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP29 = (1U << 29);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP30 = (1U << 30);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
        constexpr uint32_t CSTOP31 = (1U << 31);  ///< Channel n GTCNT Count Stop (n is the same as the bit position value)
    }

    /// GTCLR Register bits
    namespace gtclr_bits {
        constexpr uint32_t CCLR0 = (1U << 0);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR1 = (1U << 1);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR2 = (1U << 2);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR3 = (1U << 3);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR4 = (1U << 4);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR5 = (1U << 5);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR6 = (1U << 6);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR7 = (1U << 7);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR8 = (1U << 8);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR9 = (1U << 9);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR10 = (1U << 10);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR11 = (1U << 11);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR12 = (1U << 12);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR13 = (1U << 13);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR14 = (1U << 14);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR15 = (1U << 15);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR16 = (1U << 16);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR17 = (1U << 17);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR18 = (1U << 18);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR19 = (1U << 19);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR20 = (1U << 20);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR21 = (1U << 21);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR22 = (1U << 22);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR23 = (1U << 23);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR24 = (1U << 24);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR25 = (1U << 25);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR26 = (1U << 26);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR27 = (1U << 27);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR28 = (1U << 28);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR29 = (1U << 29);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR30 = (1U << 30);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
        constexpr uint32_t CCLR31 = (1U << 31);  ///< Channel n GTCNT Count Clear (n : the same as bit position value)
    }

    /// GTSSR Register bits
    namespace gtssr_bits {
        constexpr uint32_t SSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source Counter Start Enable
        constexpr uint32_t SSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source Counter Start Enable
        constexpr uint32_t SSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source Counter Start Enable
        constexpr uint32_t SSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source Counter Start Enable
        constexpr uint32_t SSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source Counter Start Enable
        constexpr uint32_t SSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source Counter Start Enable
        constexpr uint32_t SSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source Counter Start Enable
        constexpr uint32_t SSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source Counter Start Enable
        constexpr uint32_t SSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source Counter Start Enable
        constexpr uint32_t SSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source Counter Start Enable
        constexpr uint32_t SSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source Counter Start Enable
        constexpr uint32_t SSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source Counter Start Enable
        constexpr uint32_t SSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source Counter Start Enable
        constexpr uint32_t SSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source Counter Start Enable
        constexpr uint32_t SSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source Counter Start Enable
        constexpr uint32_t SSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source Counter Start Enable
        constexpr uint32_t SSELCA = (1U << 16);  ///< ELC_GPTA Event Source Counter Start Enable
        constexpr uint32_t SSELCB = (1U << 17);  ///< ELC_GPTB Event Source Counter Start Enable
        constexpr uint32_t SSELCC = (1U << 18);  ///< ELC_GPTC Event Source Counter Start Enable
        constexpr uint32_t SSELCD = (1U << 19);  ///< ELC_GPTD Event Source Counter Start Enable
        constexpr uint32_t SSELCE = (1U << 20);  ///< ELC_GPTE Event Source Counter Start Enable
        constexpr uint32_t SSELCF = (1U << 21);  ///< ELC_GPTF Event Source Counter Start Enable
        constexpr uint32_t SSELCG = (1U << 22);  ///< ELC_GPTG Event Source Counter Start Enable
        constexpr uint32_t SSELCH = (1U << 23);  ///< ELC_GPTH Event Source Counter Start Enable
        constexpr uint32_t CSTRT = (1U << 31);  ///< Software Source Counter Start Enable
    }

    /// GTPSR Register bits
    namespace gtpsr_bits {
        constexpr uint32_t PSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source Counter Stop Enable
        constexpr uint32_t PSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source Counter Stop Enable
        constexpr uint32_t PSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source Counter Stop Enable
        constexpr uint32_t PSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source Counter Stop Enable
        constexpr uint32_t PSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source Counter Stop Enable
        constexpr uint32_t PSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source Counter Stop Enable
        constexpr uint32_t PSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source Counter Stop Enable
        constexpr uint32_t PSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source Counter Stop Enable
        constexpr uint32_t PSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source Counter Stop Enable
        constexpr uint32_t PSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source Counter Stop Enable
        constexpr uint32_t PSELCA = (1U << 16);  ///< ELC_GPTA Event Source Counter Stop Enable
        constexpr uint32_t PSELCB = (1U << 17);  ///< ELC_GPTB Event Source Counter Stop Enable
        constexpr uint32_t PSELCC = (1U << 18);  ///< ELC_GPTC Event Source Counter Stop Enable
        constexpr uint32_t PSELCD = (1U << 19);  ///< ELC_GPTD Event Source Counter Stop Enable
        constexpr uint32_t PSELCE = (1U << 20);  ///< ELC_GPTE Event Source Counter Stop Enable
        constexpr uint32_t PSELCF = (1U << 21);  ///< ELC_GPTF Event Source Counter Stop Enable
        constexpr uint32_t PSELCG = (1U << 22);  ///< ELC_GPTG Event Source Counter Stop Enable
        constexpr uint32_t PSELCH = (1U << 23);  ///< ELC_GPTH Event Source Counter Stop Enable
        constexpr uint32_t CSTOP = (1U << 31);  ///< Software Source Counter Stop Enable
    }

    /// GTCSR Register bits
    namespace gtcsr_bits {
        constexpr uint32_t CSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source Counter Clear Enable
        constexpr uint32_t CSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source Counter Clear Enable
        constexpr uint32_t CSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source Counter Clear Enable
        constexpr uint32_t CSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source Counter Clear Enable
        constexpr uint32_t CSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source Counter Clear Enable
        constexpr uint32_t CSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source Counter Clear Enable
        constexpr uint32_t CSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source Counter Clear Enable
        constexpr uint32_t CSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source Counter Clear Enable
        constexpr uint32_t CSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source Counter Clear Enable
        constexpr uint32_t CSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source Counter Clear Enable
        constexpr uint32_t CSELCA = (1U << 16);  ///< ELC_GPTA Event Source Counter Clear Enable
        constexpr uint32_t CSELCB = (1U << 17);  ///< ELC_GPTB Event Source Counter Clear Enable
        constexpr uint32_t CSELCC = (1U << 18);  ///< ELC_GPTC Event Source Counter Clear Enable
        constexpr uint32_t CSELCD = (1U << 19);  ///< ELC_GPTD Event Source Counter Clear Enable
        constexpr uint32_t CSELCE = (1U << 20);  ///< ELC_GPTE Event Source Counter Clear Enable
        constexpr uint32_t CSELCF = (1U << 21);  ///< ELC_GPTF Event Source Counter Clear Enable
        constexpr uint32_t CSELCG = (1U << 22);  ///< ELC_GPTG Event Source Counter Clear Enable
        constexpr uint32_t CSELCH = (1U << 23);  ///< ELC_GPTH Event Source Counter Clear Enable
        constexpr uint32_t CSCMSC = (3 << 24);  ///< Compare Match/Input Capture/Synchronous counter clearing Source Counter Clear Enable
        constexpr uint32_t CP1CCE = (1U << 27);  ///< Complementary PWM mode1 Crest Source Counter Clear Enable
        constexpr uint32_t CCLR = (1U << 31);  ///< Software Source Counter Clear Enable
    }

    /// GTICASR Register bits
    namespace gticasr_bits {
        constexpr uint32_t ASGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source GTCCRA Input Capture Enable
        constexpr uint32_t ASCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCA = (1U << 16);  ///< ELC_GPTA Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCB = (1U << 17);  ///< ELC_GPTB Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCC = (1U << 18);  ///< ELC_GPTC Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCD = (1U << 19);  ///< ELC_GPTD Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCE = (1U << 20);  ///< ELC_GPTE Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCF = (1U << 21);  ///< ELC_GPTF Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCG = (1U << 22);  ///< ELC_GPTG Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASELCH = (1U << 23);  ///< ELC_GPTH Event Source GTCCRA Input Capture Enable
        constexpr uint32_t ASOC = (1U << 24);  ///< Other channel Source GTCCRA Input Capture Enable
    }

    /// GTICBSR Register bits
    namespace gticbsr_bits {
        constexpr uint32_t BSGTRGAR = (1U << 0);  ///< GTETRGA Pin Rising Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGAF = (1U << 1);  ///< GTETRGA Pin Falling Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGBR = (1U << 2);  ///< GTETRGB Pin Rising Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGBF = (1U << 3);  ///< GTETRGB Pin Falling Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGCR = (1U << 4);  ///< GTETRGC Pin Rising Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGCF = (1U << 5);  ///< GTETRGC Pin Falling Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGDR = (1U << 6);  ///< GTETRGD Pin Rising Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSGTRGDF = (1U << 7);  ///< GTETRGD Pin Falling Input Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCARBL = (1U << 8);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value Low Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCARBH = (1U << 9);  ///< GTIOCnA Pin Rising Input during GTIOCnB Value High Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCAFBL = (1U << 10);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value Low Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCAFBH = (1U << 11);  ///< GTIOCnA Pin Falling Input during GTIOCnB Value High Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCBRAL = (1U << 12);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value Low Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCBRAH = (1U << 13);  ///< GTIOCnB Pin Rising Input during GTIOCnA Value High Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCBFAL = (1U << 14);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value Low Source GTCCRB Input Capture Enable
        constexpr uint32_t BSCBFAH = (1U << 15);  ///< GTIOCnB Pin Falling Input during GTIOCnA Value High Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCA = (1U << 16);  ///< ELC_GPTA Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCB = (1U << 17);  ///< ELC_GPTB Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCC = (1U << 18);  ///< ELC_GPTC Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCD = (1U << 19);  ///< ELC_GPTD Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCE = (1U << 20);  ///< ELC_GPTE Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCF = (1U << 21);  ///< ELC_GPTF Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCG = (1U << 22);  ///< ELC_GPTG Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSELCH = (1U << 23);  ///< ELC_GPTH Event Source GTCCRB Input Capture Enable
        constexpr uint32_t BSOC = (1U << 24);  ///< Other channel Source GTCCRB Input Capture Enable
    }

    /// GTCR Register bits
    namespace gtcr_bits {
        constexpr uint32_t CST = (1U << 0);  ///< Count Start
        constexpr uint32_t ICDS = (1U << 8);  ///< Input Capture Operation Select During Count Stop
        constexpr uint32_t SCGTIOC = (1U << 9);  ///< GTIOC input Source Synchronous Clear Enable
        constexpr uint32_t SSCGRP = (2 << 10);  ///< Synchronous Set/Clear Group Select
        constexpr uint32_t CPSCD = (1U << 12);  ///< Complementary PWM Mode Synchronous Clear Disable
        constexpr uint32_t SSCEN = (1U << 15);  ///< Synchronous Set/Clear Enable
        constexpr uint32_t MD = (4 << 16);  ///< Mode Select
        constexpr uint32_t TPCS = (4 << 23);  ///< Timer Prescaler Select
        constexpr uint32_t CKEG = (2 << 27);  ///< Clock Edge Select
    }

    /// GTUDDTYC Register bits
    namespace gtuddtyc_bits {
        constexpr uint32_t UD = (1U << 0);  ///< Count Direction Setting
        constexpr uint32_t UDF = (1U << 1);  ///< Forcible Count Direction Setting
        constexpr uint32_t OADTY = (2 << 16);  ///< GTIOCnA Output Duty Setting
        constexpr uint32_t OADTYF = (1U << 18);  ///< Forcible GTIOCnA Output Duty Setting
        constexpr uint32_t OADTYR = (1U << 19);  ///< GTIOCnA Output Value Selecting after Releasing 0%/100% Duty Setting
        constexpr uint32_t OBDTY = (2 << 24);  ///< GTIOCnB Output Duty Setting
        constexpr uint32_t OBDTYF = (1U << 26);  ///< Forcible GTIOCnB Output Duty Setting
        constexpr uint32_t OBDTYR = (1U << 27);  ///< GTIOCnB Output Value Selecting after Releasing 0%/100% Duty Setting
    }

    /// GTIOR Register bits
    namespace gtior_bits {
        constexpr uint32_t GTIOA = (5 << 0);  ///< GTIOCnA Pin Function Select
        constexpr uint32_t CPSCIR = (1U << 5);  ///< Complementary PWM Mode Initial Output at Synchronous Clear Disable
        constexpr uint32_t OADFLT = (1U << 6);  ///< GTIOCnA Pin Output Value Setting at the Count Stop
        constexpr uint32_t OAHLD = (1U << 7);  ///< GTIOCnA Pin Output Setting at the Start/Stop Count
        constexpr uint32_t OAE = (1U << 8);  ///< GTIOCnA Pin Output Enable
        constexpr uint32_t OADF = (2 << 9);  ///< GTIOCnA Pin Disable Value Setting
        constexpr uint32_t OAEOCD = (1U << 11);  ///< GTCCRA Compare Match Cycle End Output Invalidate
        constexpr uint32_t PSYE = (1U << 12);  ///< PWM Synchronous output Enable
        constexpr uint32_t NFAEN = (1U << 13);  ///< Noise Filter A Enable
        constexpr uint32_t NFCSA = (2 << 14);  ///< Noise Filter A Sampling Clock Select
        constexpr uint32_t GTIOB = (5 << 16);  ///< GTIOCnB Pin Function Select
        constexpr uint32_t OBDFLT = (1U << 22);  ///< GTIOCnB Pin Output Value Setting at the Count Stop
        constexpr uint32_t OBHLD = (1U << 23);  ///< GTIOCnB Pin Output Setting at the Start/Stop Count
        constexpr uint32_t OBE = (1U << 24);  ///< GTIOCnB Pin Output Enable
        constexpr uint32_t OBDF = (2 << 25);  ///< GTIOCnB Pin Disable Value Setting
        constexpr uint32_t OBEOCD = (1U << 27);  ///< GTCCRB Compare Match Cycle End Output Invalidate
        constexpr uint32_t NFBEN = (1U << 29);  ///< Noise Filter B Enable
        constexpr uint32_t NFCSB = (2 << 30);  ///< Noise Filter B Sampling Clock Select
    }

    /// GTINTAD Register bits
    namespace gtintad_bits {
        constexpr uint32_t SCFA = (1U << 8);  ///< GTCCRA Register Compare Match/Input Capture Source Synchronous Clear Enable
        constexpr uint32_t SCFB = (1U << 9);  ///< GTCCRB Register Compare Match/Input Capture Source Synchronous Clear Enable
        constexpr uint32_t SCFC = (1U << 10);  ///< GTCCRC Register Compare Match Source Synchronous Clear Enable
        constexpr uint32_t SCFD = (1U << 11);  ///< GTCCRD Register Compare Match Source Synchronous Clear Enable
        constexpr uint32_t SCFE = (1U << 12);  ///< GTCCRE Register Compare Match Source Synchronous Clear Enable
        constexpr uint32_t SCFF = (1U << 13);  ///< GTCCRF Register Compare Match Source Synchronous Clear Enable
        constexpr uint32_t SCFPO = (1U << 14);  ///< Overflow Source Synchronous Clear Enable
        constexpr uint32_t SCFPU = (1U << 15);  ///< Underflow Source Synchronous Clear Enable
        constexpr uint32_t ADTRAUEN = (1U << 16);  ///< GTADTRA Register Compare Match (Up-Counting) A/D Conversion Start Request Enable
        constexpr uint32_t ADTRADEN = (1U << 17);  ///< GTADTRA Register Compare Match (Down-Counting) A/D Conversion Start Request Enable
        constexpr uint32_t ADTRBUEN = (1U << 18);  ///< GTADTRB Register Compare Match (Up-Counting) A/D Conversion Start Request Enable
        constexpr uint32_t ADTRBDEN = (1U << 19);  ///< GTADTRB Register Compare Match (Down-Counting) A/D Conversion Start Request Enable
        constexpr uint32_t GRP = (2 << 24);  ///< Output Disable Source Select
        constexpr uint32_t GRPDTE = (1U << 28);  ///< Dead Time Error Output Disable Request Enable
        constexpr uint32_t GRPABH = (1U << 29);  ///< Same Time Output Level High Disable Request Enable
        constexpr uint32_t GRPABL = (1U << 30);  ///< Same Time Output Level Low Disable Request Enable
    }

    /// GTST Register bits
    namespace gtst_bits {
        constexpr uint32_t TCFA = (1U << 0);  ///< Input Capture/Compare Match Flag A
        constexpr uint32_t TCFB = (1U << 1);  ///< Input Capture/Compare Match Flag B
        constexpr uint32_t TCFC = (1U << 2);  ///< Input Compare Match Flag C
        constexpr uint32_t TCFD = (1U << 3);  ///< Input Compare Match Flag D
        constexpr uint32_t TCFE = (1U << 4);  ///< Input Compare Match Flag E
        constexpr uint32_t TCFF = (1U << 5);  ///< Input Compare Match Flag F
        constexpr uint32_t TCFPO = (1U << 6);  ///< Overflow Flag
        constexpr uint32_t TCFPU = (1U << 7);  ///< Underflow Flag
        constexpr uint32_t ITCNT = (3 << 8);  ///< GPTn_OVF/GPTn_UDF Interrupt Skipping Count Counter
        constexpr uint32_t TUCF = (1U << 15);  ///< Count Direction Flag
        constexpr uint32_t ADTRAUF = (1U << 16);  ///< GTADTRA Register Compare Match (Up-Counting) A/D Conversion Start Request Flag
        constexpr uint32_t ADTRADF = (1U << 17);  ///< GTADTRA Register Compare Match (Down-Counting) A/D Conversion Start Request Flag
        constexpr uint32_t ADTRBUF = (1U << 18);  ///< GTADTRB Register Compare Match (Up-Counting) A/D Conversion Start Request Flag
        constexpr uint32_t ADTRBDF = (1U << 19);  ///< GTADTRB Register Compare Match (Down-Counting) A/D Conversion Start Request Flag
        constexpr uint32_t ODF = (1U << 24);  ///< Output Disable Flag
        constexpr uint32_t DTEF = (1U << 28);  ///< Dead Time Error Flag
        constexpr uint32_t OABHF = (1U << 29);  ///< Same Time Output Level High Flag
        constexpr uint32_t OABLF = (1U << 30);  ///< Same Time Output Level Low Flag
        constexpr uint32_t PCF = (1U << 31);  ///< Period Count Function Finish Flag
    }

    /// GTBER Register bits
    namespace gtber_bits {
        constexpr uint32_t BD0 = (1U << 0);  ///< GTCCR Buffer Operation Disable
        constexpr uint32_t BD1 = (1U << 1);  ///< GTPR Buffer Operation Disable
        constexpr uint32_t BD2 = (1U << 2);  ///< GTADTRA/GTADTRB Registers Buffer Operation Disable
        constexpr uint32_t BD3 = (1U << 3);  ///< GTDVU/GTDVD Registers Buffer Operation Disable
        constexpr uint32_t DBRTECA = (1U << 8);  ///< GTCCRA Register Double Buffer Repeat Operation Enable
        constexpr uint32_t DBRTECB = (1U << 10);  ///< GTCCRB Register Double Buffer Repeat Operation Enable
        constexpr uint32_t CCRA = (2 << 16);  ///< GTCCRA Buffer Operation
        constexpr uint32_t CCRB = (2 << 18);  ///< GTCCRB Buffer Operation
        constexpr uint32_t PR = (2 << 20);  ///< GTPR Buffer Operation
        constexpr uint32_t CCRSWT = (1U << 22);  ///< GTCCRA and GTCCRB Forcible Buffer Operation
        constexpr uint32_t ADTTA = (2 << 24);  ///< GTADTRA Register Buffer Transfer Timing Select
        constexpr uint32_t ADTDA = (1U << 26);  ///< GTADTRA Register Double Buffer Operation
        constexpr uint32_t ADTTB = (2 << 28);  ///< GTADTRB Register Buffer Transfer Timing Select
        constexpr uint32_t ADTDB = (1U << 30);  ///< GTADTRB Register Double Buffer Operation
    }

    /// GTITC Register bits
    namespace gtitc_bits {
        constexpr uint32_t ITLA = (1U << 0);  ///< GTCCRA Register Compare Match/Input Capture Interrupt Link
        constexpr uint32_t ITLB = (1U << 1);  ///< GTCCRB Register Compare Match/Input Capture Interrupt Link
        constexpr uint32_t ITLC = (1U << 2);  ///< GTCCRC Register Compare Match Interrupt Link
        constexpr uint32_t ITLD = (1U << 3);  ///< GTCCRD Register Compare Match Interrupt Link
        constexpr uint32_t ITLE = (1U << 4);  ///< GTCCRE Register Compare Match Interrupt Link
        constexpr uint32_t ITLF = (1U << 5);  ///< GTCCRF Register Compare Match Interrupt Link
        constexpr uint32_t IVTC = (2 << 6);  ///< GPTn_OVF/GPTn_UDF Interrupt Skipping Function Select
        constexpr uint32_t IVTT = (3 << 8);  ///< GPTn_OVF/GPTn_UDF Interrupt Skipping Count Select
        constexpr uint32_t ADTAL = (1U << 12);  ///< GTADTRA Register A/D Conversion Start Request Link
        constexpr uint32_t ADTBL = (1U << 14);  ///< GTADTRB Register A/D Conversion Start Request Link
    }

    /// GTDTCR Register bits
    namespace gtdtcr_bits {
        constexpr uint32_t TDE = (1U << 0);  ///< Negative-Phase Waveform Setting
        constexpr uint32_t TDBUE = (1U << 4);  ///< GTDVU Register Buffer Operation Enable
        constexpr uint32_t TDBDE = (1U << 5);  ///< GTDVD Register Buffer Operation Enable
        constexpr uint32_t TDFER = (1U << 8);  ///< GTDVD Register Setting
    }

    /// GTSOS Register bits
    namespace gtsos_bits {
        constexpr uint32_t SOS = (2 << 0);  ///< Output Protection Function Status
    }

    /// GTSOTR Register bits
    namespace gtsotr_bits {
        constexpr uint32_t SOTR = (1U << 0);  ///< Output Protection Function Temporary Release
    }

    /// GTADSMR Register bits
    namespace gtadsmr_bits {
        constexpr uint32_t ADSMS0 = (2 << 0);  ///< A/D Conversion Start Request Signal Monitor 0 Selection
        constexpr uint32_t ADSMEN0 = (1U << 8);  ///< A/D Conversion Start Request Signal Monitor 0 Output Enabling
        constexpr uint32_t ADSMS1 = (2 << 16);  ///< A/D Conversion Start Request Signal Monitor 1 Selection
        constexpr uint32_t ADSMEN1 = (1U << 24);  ///< A/D Conversion Start Request Signal Monitor 1 Output Enabling
    }

    /// GTEITC Register bits
    namespace gteitc_bits {
        constexpr uint32_t EIVTC1 = (2 << 0);  ///< Extended Interrupt Skipping Counter 1 Count Source Select
        constexpr uint32_t EIVTT1 = (4 << 4);  ///< Extended Interrupt Skipping 1 Skipping Count Setting
        constexpr uint32_t EITCNT1 = (4 << 12);  ///< Extended Interrupt Skipping Counter 1
        constexpr uint32_t EIVTC2 = (2 << 16);  ///< Extended Interrupt Skipping Counter 2 Count Source select
        constexpr uint32_t EIVTT2 = (4 << 20);  ///< Extended Interrupt Skipping 2 Skipping Count Setting
        constexpr uint32_t EITCNT2IV = (4 << 24);  ///< Extended Interrupt Skipping Counter 2 Initial Value
        constexpr uint32_t EITCNT2 = (4 << 28);  ///< Extended Interrupt Skipping Counter 2
    }

    /// GTEITLI1 Register bits
    namespace gteitli1_bits {
        constexpr uint32_t EITLA = (3 << 0);  ///< GTCCRA Register Compare Match/Input Capture Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLB = (3 << 4);  ///< GTCCRB Register Compare Match/Input Capture Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLC = (3 << 8);  ///< GTCCRC Register Compare Match Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLD = (3 << 12);  ///< GTCCRD Register Compare Match Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLE = (3 << 16);  ///< GTCCRE Register Compare Match Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLF = (3 << 20);  ///< GTCCRF Register Compare Match Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLV = (3 << 24);  ///< Overflow Interrupt Extended Skipping Function Select
        constexpr uint32_t EITLU = (3 << 28);  ///< Underflow Interrupt Extended Skipping Function Select
    }

    /// GTEITLI2 Register bits
    namespace gteitli2_bits {
        constexpr uint32_t EADTAL = (3 << 0);  ///< GTADTRA Register A/D Conversion Start Request Extended Skipping Function Select
        constexpr uint32_t EADTBL = (3 << 4);  ///< GTADTRB Register A/D Conversion Start Request Extended Skipping Function Select
    }

    /// GTEITLB Register bits
    namespace gteitlb_bits {
        constexpr uint32_t EBTLCA = (3 << 0);  ///< GTCCRA Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLCB = (3 << 4);  ///< GTCCRB Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLPR = (3 << 8);  ///< GTPR Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLADA = (3 << 16);  ///< GTADTRA Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLADB = (3 << 20);  ///< GTADTRB Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLDVU = (3 << 24);  ///< GTDVU Register Buffer Transfer Extended Skipping Function Select
        constexpr uint32_t EBTLDVD = (3 << 28);  ///< GTDVD Register Buffer Transfer Extended Skipping Function Select
    }

    /// GTICLF Register bits
    namespace gticlf_bits {
        constexpr uint32_t ICLFA = (3 << 0);  ///< GTIOCnA Output Logical Operation Function Select
        constexpr uint32_t ICLFSELC = (6 << 4);  ///< Inter Channel Signal C Select
        constexpr uint32_t ICLFB = (3 << 16);  ///< GTIOCnB Output Logical Operation Function Select
        constexpr uint32_t ICLFSELD = (6 << 20);  ///< Inter Channel Signal D Select
    }

    /// GTADCMSC Register bits
    namespace gtadcmsc_bits {
        constexpr uint32_t ADCMSC1 = (2 << 0);  ///< A/D Conversion Start Request Compare Match Skipping Counter 1 Count Source Select
        constexpr uint32_t ADCMST1 = (4 << 4);  ///< A/D Conversion Start Request Compare Match Skipping 1 Skipping Count Setting
        constexpr uint32_t ADCMSCNT1IV = (4 << 8);  ///< A/D Conversion Start Request Compare Match Skipping Counter 1 Initial Value
        constexpr uint32_t ADCMSCNT1 = (4 << 12);  ///< A/D Conversion Start Request Compare Match Skipping Counter 1
        constexpr uint32_t ADCMSC2 = (2 << 16);  ///< A/D Conversion Start Request Compare Match Skipping Counter 2 Count Source Select
        constexpr uint32_t ADCMST2 = (4 << 20);  ///< A/D Conversion Start Request Compare Match Skipping 2 Skipping Count Setting
        constexpr uint32_t ADCMSCNT2IV = (4 << 24);  ///< A/D Conversion Start Request Compare Match Skipping Counter 2 Initial Value
        constexpr uint32_t ADCMSCNT2 = (4 << 28);  ///< A/D Conversion Start Request Compare Match Skipping Counter 2
    }

    /// GTADCMSS Register bits
    namespace gtadcmss_bits {
        constexpr uint32_t ADCMSAL = (3 << 0);  ///< GTADTRA Register A/D Conversion Start Request Compare Match Skipping Function Select
        constexpr uint32_t ADCMSBL = (3 << 4);  ///< GTADTRB Register A/D Conversion Start Request Compare Match Skipping Function Select
        constexpr uint32_t ADCMBSA = (3 << 16);  ///< GTADTRA Register Buffer Transfer by A/D Conversion Start Request Compare Match Skipping Function Select
        constexpr uint32_t ADCMBSB = (3 << 20);  ///< GTADTRB Register Buffer Transfer by A/D Conversion Start Request Compare Match Skipping Function Select
    }

    /// GTSECSR Register bits
    namespace gtsecsr_bits {
        constexpr uint32_t SECSEL0 = (1U << 0);  ///< Channel 0 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL1 = (1U << 1);  ///< Channel 1 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL2 = (1U << 2);  ///< Channel 2 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL3 = (1U << 3);  ///< Channel 3 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL4 = (1U << 4);  ///< Channel 4 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL5 = (1U << 5);  ///< Channel 5 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL6 = (1U << 6);  ///< Channel 6 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL7 = (1U << 7);  ///< Channel 7 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL8 = (1U << 8);  ///< Channel 8 Operation Enable Bit Simultaneous Control Channel Select
        constexpr uint32_t SECSEL9 = (1U << 9);  ///< Channel 9 Operation Enable Bit Simultaneous Control Channel Select
    }

    /// GTSECR Register bits
    namespace gtsecr_bits {
        constexpr uint32_t SBDCE = (1U << 0);  ///< GTCCR Register Buffer Operation Simultaneous Enable
        constexpr uint32_t SBDPE = (1U << 1);  ///< GTPR Register Buffer Operation Simultaneous Enable
        constexpr uint32_t SBDAE = (1U << 2);  ///< GTADTR Register Buffer Operation Simultaneous Enable
        constexpr uint32_t SBDDE = (1U << 3);  ///< GTDV Register Buffer Operation Simultaneous Enable
        constexpr uint32_t SBDCD = (1U << 8);  ///< GTCCR Register Buffer Operation Simultaneous Disable
        constexpr uint32_t SBDPD = (1U << 9);  ///< GTPR Register Buffer Operation Simultaneous Disable
        constexpr uint32_t SBDAD = (1U << 10);  ///< GTADTR Register Buffer Operation Simultaneous Disable
        constexpr uint32_t SBDDD = (1U << 11);  ///< GTDV Register Buffer Operation Simultaneous Disable
        constexpr uint32_t SPCE = (1U << 16);  ///< Period Count Function Simultaneous Enable
        constexpr uint32_t SSCE = (1U << 17);  ///< Synchronous Set/Clear Simultaneous Enable
        constexpr uint32_t SPCD = (1U << 24);  ///< Period Count Function Simultaneous Disable
        constexpr uint32_t SSCD = (1U << 25);  ///< Synchronous Set/Clear Simultaneous Disable
    }

    /// GTBER2 Register bits
    namespace gtber2_bits {
        constexpr uint32_t CCTCA = (1U << 0);  ///< Counter Clear Source GTCCRA Register Buffer Transfer Disable
        constexpr uint32_t CCTCB = (1U << 1);  ///< Counter Clear Source GTCCRB Register Buffer Transfer Disable
        constexpr uint32_t CCTPR = (1U << 2);  ///< Counter Clear Source GTPR Register Buffer Transfer Disable
        constexpr uint32_t CCTADA = (1U << 3);  ///< Counter Clear Source GTADTRA Register Buffer Transfer Disable
        constexpr uint32_t CCTADB = (1U << 4);  ///< Counter Clear Source GTADTRB Register Buffer Transfer Disable
        constexpr uint32_t CCTDV = (1U << 5);  ///< Counter Clear Source GTDVU/GTDVD Register Buffer Transfer Disable
        constexpr uint32_t CMTCA = (2 << 8);  ///< Compare Match Source GTCCRA Register Buffer Transfer Enable
        constexpr uint32_t CMTCB = (2 << 10);  ///< Compare Match Source GTCCRB Register Buffer Transfer Enable
        constexpr uint32_t CMTADA = (1U << 13);  ///< Compare Match Source GTADTRA Register Buffer Transfer Enable
        constexpr uint32_t CMTADB = (1U << 14);  ///< Compare Match Source GTADTRB Register Buffer Transfer Enable
        constexpr uint32_t CPTCA = (1U << 16);  ///< Overflow/Underflow Source GTCCRA Register Buffer Transfer Disable
        constexpr uint32_t CPTCB = (1U << 17);  ///< Overflow/Underflow Source GTCCRB Register Buffer Transfer Disable
        constexpr uint32_t CPTPR = (1U << 18);  ///< Overflow/Underflow Source GTPR Register Buffer Transfer Disable
        constexpr uint32_t CPTADA = (1U << 19);  ///< Overflow/Underflow Source GTADTRA Register Buffer Transfer Disable
        constexpr uint32_t CPTADB = (1U << 20);  ///< Overflow/Underflow Source GTADTRB Register Buffer Transfer Disable
        constexpr uint32_t CPTDV = (1U << 21);  ///< Overflow/Underflow Source GTDVU/GTDVD Register Buffer Transfer Disable
        constexpr uint32_t CP3DB = (1U << 24);  ///< Complementary PWM mode 3,4 Double Buffer select
        constexpr uint32_t CPBTD = (1U << 25);  ///< Complementary PWM mode Buffer Transfer Disable
        constexpr uint32_t OLTTA = (2 << 26);  ///< GTIOCnA Output Level Buffer Transfer Timing Select
        constexpr uint32_t OLTTB = (2 << 28);  ///< GTIOCnB Output Level Buffer Transfer Timing Select
    }

    /// GTOLBR Register bits
    namespace gtolbr_bits {
        constexpr uint32_t GTIOAB = (5 << 0);  ///< GTIOA buffer bits
        constexpr uint32_t GTIOBB = (5 << 16);  ///< GTIOB buffer bits
    }

    /// GTICCR Register bits
    namespace gticcr_bits {
        constexpr uint32_t ICAFA = (1U << 0);  ///< Forwarding GTCCRA register Compare Match/Input Capture to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFB = (1U << 1);  ///< Forwarding GTCCRB register Compare Match/Input Capture to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFC = (1U << 2);  ///< Forwarding GTCCRC register Compare Match to Other Channel GTCCRA Input Source Capture Enable
        constexpr uint32_t ICAFD = (1U << 3);  ///< Forwarding GTCCRD register Compare Match to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFE = (1U << 4);  ///< Forwarding GTCCRE register Compare Match to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFF = (1U << 5);  ///< Forwarding GTCCRF register Compare Match to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFPO = (1U << 6);  ///< Forwarding Overflow to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAFPU = (1U << 7);  ///< Forwarding Underflow to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICACLK = (1U << 8);  ///< Forwarding Count Clock to Other Channel GTCCRA Input Capture Source Enable
        constexpr uint32_t ICAGRP = (2 << 14);  ///< GTCCRA Input Capture Group Select
        constexpr uint32_t ICBFA = (1U << 16);  ///< Forwarding GTCCRA register Compare Match/Input Capture to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFB = (1U << 17);  ///< Forwarding GTCCRB register Compare Match/Input Capture to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFC = (1U << 18);  ///< Forwarding GTCCRC register Compare Match to Other Channel GTCCRB Input Source Capture Enable
        constexpr uint32_t ICBFD = (1U << 19);  ///< Forwarding GTCCRD register Compare Match to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFE = (1U << 20);  ///< Forwarding GTCCRE register Compare Match to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFF = (1U << 21);  ///< Forwarding GTCCRF register Compare Match to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFPO = (1U << 22);  ///< Forwarding Overflow to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBFPU = (1U << 23);  ///< Forwarding Underflow to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBCLK = (1U << 24);  ///< Forwarding Count Clock to Other Channel GTCCRB Input Capture Source Enable
        constexpr uint32_t ICBGRP = (2 << 30);  ///< GTCCRB Input Capture Group Select
    }

}

// ============================================================================
// GPT325 Peripheral
// ============================================================================

namespace gpt325 {
    /// Base addresses
    constexpr uint32_t GPT325_BASE = 0x40169500;

    /// GPT325 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPT325 = reinterpret_cast<Registers*>(GPT325_BASE);

}

// ============================================================================
// GPT326 Peripheral
// ============================================================================

namespace gpt326 {
    /// Base addresses
    constexpr uint32_t GPT326_BASE = 0x40169600;

    /// GPT326 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPT326 = reinterpret_cast<Registers*>(GPT326_BASE);

}

// ============================================================================
// GPT327 Peripheral
// ============================================================================

namespace gpt327 {
    /// Base addresses
    constexpr uint32_t GPT327_BASE = 0x40169700;

    /// GPT327 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPT327 = reinterpret_cast<Registers*>(GPT327_BASE);

}

// ============================================================================
// GPT328 Peripheral
// ============================================================================

namespace gpt328 {
    /// Base addresses
    constexpr uint32_t GPT328_BASE = 0x40169800;

    /// GPT328 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPT328 = reinterpret_cast<Registers*>(GPT328_BASE);

}

// ============================================================================
// GPT329 Peripheral
// ============================================================================

namespace gpt329 {
    /// Base addresses
    constexpr uint32_t GPT329_BASE = 0x40169900;

    /// GPT329 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPT329 = reinterpret_cast<Registers*>(GPT329_BASE);

}

// ============================================================================
// GPT Peripheral
// ============================================================================

namespace gpt {
    /// Base addresses
    constexpr uint32_t GPT_OPS_BASE = 0x40169A00;
    constexpr uint32_t GPT_GTCLK_BASE = 0x40169B00;

    /// GPT Register structure
    struct Registers {
        volatile uint32_t OPSCR;  ///< Offset: 0x00 - Output Phase Switching Control Register
    };

    /// Peripheral instances
    inline Registers* GPT_OPS = reinterpret_cast<Registers*>(GPT_OPS_BASE);
    inline Registers* GPT_GTCLK = reinterpret_cast<Registers*>(GPT_GTCLK_BASE);

    // Bit definitions
    /// OPSCR Register bits
    namespace opscr_bits {
        constexpr uint32_t UF = (1U << 0);  ///< UF
        constexpr uint32_t VF = (1U << 1);  ///< VF
        constexpr uint32_t WF = (1U << 2);  ///< WF
        constexpr uint32_t U = (1U << 4);  ///< Input U-Phase Monitor
        constexpr uint32_t V = (1U << 5);  ///< Input V-Phase Monitor
        constexpr uint32_t W = (1U << 6);  ///< Input W-Phase Monitor
        constexpr uint32_t EN = (1U << 8);  ///< Output Phase Enable
        constexpr uint32_t FB = (1U << 16);  ///< External Feedback Signal Enable
        constexpr uint32_t P = (1U << 17);  ///< Positive-Phase Output (P) Control
        constexpr uint32_t N = (1U << 18);  ///< Negative-Phase Output (N) Control
        constexpr uint32_t INV = (1U << 19);  ///< Output Phase Invert Control
        constexpr uint32_t RV = (1U << 20);  ///< Output Phase Rotation Direction Reversal Control
        constexpr uint32_t ALIGN = (1U << 21);  ///< Input Phase Alignment
        constexpr uint32_t GRP = (2 << 24);  ///< Output Disabled Source Selection
        constexpr uint32_t GODF = (1U << 26);  ///< Group Output Disable Function
        constexpr uint32_t NFEN = (1U << 29);  ///< External Input Noise Filter Enable
        constexpr uint32_t NFCS = (2 << 30);  ///< External Input Noise Filter Clock Selection
    }

}

// ============================================================================
// PDG Peripheral
// ============================================================================

namespace pdg {
    /// Base addresses
    constexpr uint32_t PDG_BASE = 0x4016A000;

    /// PDG Register structure
    struct Registers {
        volatile uint32_t GTDLYCR;  ///< Offset: 0x00 - PWM Output Delay Control Register
        volatile uint32_t GTDLYCR2;  ///< Offset: 0x02 - PWM Output Delay Control Register 2
        volatile uint32_t GTDLYRA;  ///< Offset: 0x18 - GTIOCnA Rising Output Delay Register (renamed from GTDLYRA)
        volatile uint32_t GTDLYRB;  ///< Offset: 0x1A - GTIOCnB Rising Output Delay Register (renamed from GTDLYRB)
        volatile uint32_t GTDLYFA;  ///< Offset: 0x28 - GTIOCnA Falling Output Delay Register (renamed from GTDLYFA)
        volatile uint32_t GTDLYFB;  ///< Offset: 0x2A - GTIOCnB Falling Output Delay Register (renamed from GTDLYFB)
    };

    /// Peripheral instances
    inline Registers* PDG = reinterpret_cast<Registers*>(PDG_BASE);

    // Bit definitions
    /// GTDLYCR Register bits
    namespace gtdlycr_bits {
        constexpr uint32_t DLLEN = (1U << 0);  ///< DLL Operation Enable
        constexpr uint32_t DLYRST = (1U << 1);  ///< PWM Delay Generation Circuit Reset
        constexpr uint32_t FRANGE = (1U << 8);  ///< GPT core clock Frequency Range
    }

    /// GTDLYCR2 Register bits
    namespace gtdlycr2_bits {
        constexpr uint32_t DLYBS0 = (1U << 0);  ///< PWM Delay Generation Circuit bypass for channel 0
        constexpr uint32_t DLYBS1 = (1U << 1);  ///< PWM Delay Generation Circuit bypass for channel 1
        constexpr uint32_t DLYBS2 = (1U << 2);  ///< PWM Delay Generation Circuit bypass for channel 2
        constexpr uint32_t DLYBS3 = (1U << 3);  ///< PWM Delay Generation Circuit bypass for channel 3
        constexpr uint32_t DLYEN0 = (1U << 8);  ///< PWM Delay Generation Circuit enable for channel 0
        constexpr uint32_t DLYEN1 = (1U << 9);  ///< PWM Delay Generation Circuit enable for channel 1
        constexpr uint32_t DLYEN2 = (1U << 10);  ///< PWM Delay Generation Circuit enable for channel 2
        constexpr uint32_t DLYEN3 = (1U << 11);  ///< PWM Delay Generation Circuit enable for channel 3
    }

    /// GTDLYRA Register bits
    namespace gtdlyra_bits {
        constexpr uint32_t DLY = (5 << 0);  ///< GTIOCnA Output Rising Edge Delay Setting
    }

    /// GTDLYRB Register bits
    namespace gtdlyrb_bits {
        constexpr uint32_t DLY = (5 << 0);  ///< GTIOCnB Output Rising Edge Delay Setting
    }

    /// GTDLYFA Register bits
    namespace gtdlyfa_bits {
        constexpr uint32_t DLY = (5 << 0);  ///< GTIOCnA Output Falling Edge Delay Setting
    }

    /// GTDLYFB Register bits
    namespace gtdlyfb_bits {
        constexpr uint32_t DLY = (5 << 0);  ///< GTIOCnB Output Falling Edge Delay Setting
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_B_BASE = 0x40170000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ADCLKENR;  ///< Offset: 0x00 - A/D Conversion Clock Enable Register
        volatile uint32_t ADCLKSR;  ///< Offset: 0x04 - A/D Conversion Clock Status Register
        volatile uint32_t ADCLKCR;  ///< Offset: 0x08 - A/D Conversion Clock Control Register
        volatile uint32_t ADSYCR;  ///< Offset: 0x0C - A/D Converter Synchronous Operation Control Register
        volatile uint32_t ADERINTCR;  ///< Offset: 0x20 - A/D Conversion Error Interrupt Enable Register
        volatile uint32_t ADOVFINTCR;  ///< Offset: 0x24 - A/D Conversion Overflow Interrupt Enable Register
        volatile uint32_t ADCALINTCR;  ///< Offset: 0x28 - Calibration interrupt Enable Register
        volatile uint32_t ADMDR;  ///< Offset: 0x40 - A/D Converter Mode Selection Register
        volatile uint32_t ADGSPCR;  ///< Offset: 0x44 - A/D Group scan Priority Control Register
        volatile uint32_t ADSGER;  ///< Offset: 0x48 - Scan Group Enable Register
        volatile uint32_t ADSGCR0;  ///< Offset: 0x4C - Scan Group Control Register 0
        volatile uint32_t ADSGCR1;  ///< Offset: 0x50 - Scan Group Control Register 1
        volatile uint32_t ADSGCR2;  ///< Offset: 0x54 - Scan Group Control Register 2
        volatile uint32_t ADINTCR;  ///< Offset: 0x5C - Scan End Interrupt Enable Register
        volatile uint32_t ADTRGEXT;  ///< Offset: 0xC0 - External Trigger Enable Register %s (renamed from ADTRGEXT)
        volatile uint32_t ADTRGELC;  ///< Offset: 0xC4 - ELC Trigger Enable Register %s (renamed from ADTRGELC)
        volatile uint32_t ADTRGGPT;  ///< Offset: 0xC8 - GPT Trigger Enable Register %s (renamed from ADTRGGPT)
        volatile uint32_t ADTRGDLR0;  ///< Offset: 0x1C0 - A/D Conversion Start Trigger Delay Register 0
        volatile uint32_t ADTRGDLR1;  ///< Offset: 0x1C4 - A/D Conversion Start Trigger Delay Register 1
        volatile uint32_t ADTRGDLR2;  ///< Offset: 0x1C8 - A/D Conversion Start Trigger Delay Register 2
        volatile uint32_t ADTRGDLR3;  ///< Offset: 0x1CC - A/D Conversion Start Trigger Delay Register 3
        volatile uint32_t ADTRGDLR4;  ///< Offset: 0x1D0 - A/D Conversion Start Trigger Delay Register 4
        volatile uint32_t ADSGDCR;  ///< Offset: 0x200 - Scan Group Diagnosis Function Control Register %s (renamed from ADSGDCR)
        volatile uint32_t ADSSTR0;  ///< Offset: 0x240 - Sampling State Table Register 0
        volatile uint32_t ADSSTR1;  ///< Offset: 0x244 - Sampling State Table Register 1
        volatile uint32_t ADSSTR2;  ///< Offset: 0x248 - Sampling State Table Register 2
        volatile uint32_t ADSSTR3;  ///< Offset: 0x24C - Sampling State Table Register 3
        volatile uint32_t ADSSTR4;  ///< Offset: 0x250 - Sampling State Table Register 4
        volatile uint32_t ADSSTR5;  ///< Offset: 0x254 - Sampling State Table Register 5
        volatile uint32_t ADSSTR6;  ///< Offset: 0x258 - Sampling State Table Register 6
        volatile uint32_t ADSSTR7;  ///< Offset: 0x25C - Sampling State Table Register 7
        volatile uint32_t ADCNVSTR;  ///< Offset: 0x260 - A/D Conversion State Register
        volatile uint32_t ADCALSTCR;  ///< Offset: 0x264 - A/D Converter Self-calibration State Register
        volatile uint32_t ADSHCR0;  ///< Offset: 0x280 - Channel-dedicated Sample-and-hold Circuit Control Register 0
        volatile uint32_t ADSHSTR0;  ///< Offset: 0x288 - Channel-dedicated Sample-and-hold Circuit State Register 0
        volatile uint32_t ADSHCR1;  ///< Offset: 0x28C - Channel-dedicated Sample-and-hold Circuit Control Register 1
        volatile uint32_t ADSHSTR1;  ///< Offset: 0x294 - Channel-dedicated Sample-and-hold Circuit State Register 1
        volatile uint32_t ADCALSHCR;  ///< Offset: 0x2B0 - Channel-dedicated Sample-and-hold Circuit...
        volatile uint32_t ADPGACR;  ///< Offset: 0x2C0 - Programmable Gain Amplifier Control Register %s (renamed from ADPGACR)
        volatile uint32_t ADPGAMONCR;  ///< Offset: 0x300 - Programable Gain Amp Monitor Output Control Register
        volatile uint32_t ADREFCR;  ///< Offset: 0x320 - Internal Reference Voltage Monitor Enable Register
        volatile uint32_t ADDFSR;  ///< Offset: 0x340 - A/D Converter Digital Filter Selection Register %s (renamed from ADDFSR)
        volatile uint32_t ADUOFTR;  ///< Offset: 0x360 - User Offset Table Register %s (renamed from ADUOFTR)
        volatile uint32_t ADUGTR;  ///< Offset: 0x380 - User Gain Table Register %s (renamed from ADUGTR)
        volatile uint32_t ADLIMINTCR;  ///< Offset: 0x3A0 - Limiter Clip Interrupt Enable Register
        volatile uint32_t ADLIMTR;  ///< Offset: 0x3A4 - Limiter Clip Table Register %s (renamed from ADLIMTR)
        volatile uint32_t ADCMPENR;  ///< Offset: 0x400 - Compare Match Enable Register
        volatile uint32_t ADCMPINTCR;  ///< Offset: 0x404 - Compare Match Interrupt Enable Register
        volatile uint32_t ADCCMPCR;  ///< Offset: 0x408 - Composite Compare Match Configuration Register %s (renamed from ADCCMPCR)
        volatile uint32_t ADCMPMDR0;  ///< Offset: 0x448 - Compare Match Mode Selection Register 0
        volatile uint32_t ADCMPMDR1;  ///< Offset: 0x44C - Compare Match Mode Selection Register 1
        volatile uint32_t ADCMPTBR;  ///< Offset: 0x458 - Compare Match Table Register %s (renamed from ADCMPTBR)
        volatile uint32_t ADFIFOCR;  ///< Offset: 0x4C0 - FIFO Control Register
        volatile uint32_t ADFIFOINTCR;  ///< Offset: 0x4C4 - FIFO Interrupt Control Register
        volatile uint32_t ADFIFOINTLR0;  ///< Offset: 0x4C8 - FIFO Interrupt Generation Level Register 0
        volatile uint32_t ADFIFOINTLR1;  ///< Offset: 0x4CC - FIFO Interrupt Generation Level Register 1
        volatile uint32_t ADFIFOINTLR2;  ///< Offset: 0x4D0 - FIFO Interrupt Generation Level Register 2
        volatile uint32_t ADFIFOINTLR3;  ///< Offset: 0x4D4 - FIFO Interrupt Generation Level Register 3
        volatile uint32_t ADFIFOINTLR4;  ///< Offset: 0x4D8 - FIFO Interrupt Generation Level Register 4
        volatile uint32_t ADCHCR;  ///< Offset: 0x600 - A/D Conversion Channel Configuration Register %s (renamed from ADCHCR)
        volatile uint32_t ADDOPCRA;  ///< Offset: 0x604 - A/D Conversion Data Operation Control A Register %s (renamed from ADDOPCRA)
        volatile uint32_t ADDOPCRB;  ///< Offset: 0x608 - A/D Conversion Data Operation Control B Register %s (renamed from ADDOPCRB)
        volatile uint32_t ADDOPCRC;  ///< Offset: 0x60C - A/D Conversion Data Operation Control C Register %s (renamed from ADDOPCRC)
        volatile uint32_t ADCALSTR;  ///< Offset: 0xC00 - A/D Converter Self-calibration Start Register
        volatile uint32_t ADTRGENR;  ///< Offset: 0xC08 - A/D Conversion Start Trigger Enable Register
        volatile uint32_t ADSYSTR;  ///< Offset: 0xC10 - A/D Conversion Synchronous Software Start Register
        volatile uint32_t ADSTR;  ///< Offset: 0xC20 - A/D Conversion Software Start Register %s (renamed from ADSTR)
        volatile uint32_t ADSTOPR;  ///< Offset: 0xC60 - A/D Conversion Stop Register
        volatile uint32_t ADSR;  ///< Offset: 0xC80 - A/D Conversion Status Register
        volatile uint32_t ADGRSR;  ///< Offset: 0xC84 - Scan Group Status Register
        volatile uint32_t ADERSR;  ///< Offset: 0xC88 - A/D Conversion Error Status Register
        volatile uint32_t ADERSCR;  ///< Offset: 0xC8C - A/D Conversion Error Status Clear Register
        volatile uint32_t ADCALENDSR;  ///< Offset: 0xC98 - A/D Converter Calibration End Status Register
        volatile uint32_t ADCALENDSCR;  ///< Offset: 0xC9C - A/D Converter Calibration End Status Clear Register
        volatile uint32_t ADOVFERSR;  ///< Offset: 0xCA0 - A/D Conversion Overflow Error Status Register
        volatile uint32_t ADOVFCHSR0;  ///< Offset: 0xCA4 - A/D Conversion Overflow Channel Status Register 0
        volatile uint32_t ADOVFEXSR;  ///< Offset: 0xCB0 - Extended Analog A/D Conversion Overflow Status Register
        volatile uint32_t ADOVFERSCR;  ///< Offset: 0xCB4 - A/D Conversion Overflow Error Status Clear Register
        volatile uint32_t ADOVFCHSCR0;  ///< Offset: 0xCB8 - A/D Conversion Overflow Channel Status Clear Register 0
        volatile uint32_t ADOVFEXSCR;  ///< Offset: 0xCC4 - Extended Analog A/D Conversion Overflow Status Clear Register
        volatile uint32_t ADFIFOSR0;  ///< Offset: 0xCD0 - FIFO Status Register 0
        volatile uint32_t ADFIFOSR1;  ///< Offset: 0xCD4 - FIFO Status Register 1
        volatile uint32_t ADFIFOSR2;  ///< Offset: 0xCD8 - FIFO Status Register 2
        volatile uint32_t ADFIFOSR3;  ///< Offset: 0xCDC - FIFO Status Register 3
        volatile uint32_t ADFIFOSR4;  ///< Offset: 0xCE0 - FIFO Status Register 4
        volatile uint32_t ADFIFODCR;  ///< Offset: 0xCF0 - FIFO Data Clear Register
        volatile uint32_t ADFIFOERSR;  ///< Offset: 0xCF4 - FIFO Error Status Register
        volatile uint32_t ADFIFOERSCR;  ///< Offset: 0xCF8 - FIFO Error Status Clear Register
        volatile uint32_t ADCMPTBSR;  ///< Offset: 0xD00 - Compare Match Table Status Register
        volatile uint32_t ADCMPTBSCR;  ///< Offset: 0xD04 - Compare Match Table Status Clear Register
        volatile uint32_t ADCMPCHSR0;  ///< Offset: 0xD08 - Compare Match Channel Status Register 0
        volatile uint32_t ADCMPEXSR;  ///< Offset: 0xD14 - Extended Analog Compare Match Status Register
        volatile uint32_t ADCMPCHSCR0;  ///< Offset: 0xD18 - Compare Match Channel Status Clear Register 0
        volatile uint32_t ADCMPEXSCR;  ///< Offset: 0xD24 - Extended Analog Compare Match Status Clear Register
        volatile uint32_t ADLIMGRSR;  ///< Offset: 0xD28 - Limiter Clip Scan Group Status Register
        volatile uint32_t ADLIMCHSR0;  ///< Offset: 0xD2C - Limiter Clip Channel Status Register 0
        volatile uint32_t ADLIMEXSR;  ///< Offset: 0xD38 - Extended Analog Limiter Clip Status Register
        volatile uint32_t ADLIMGRSCR;  ///< Offset: 0xD3C - Limiter Clip Scan Group Status Clear Register
        volatile uint32_t ADLIMCHSCR0;  ///< Offset: 0xD40 - Limiter Clip Channel Status Clear Register 0
        volatile uint32_t ADLIMEXSCR;  ///< Offset: 0xD4C - Extended Analog Limiter Clip Status Clear Register
        volatile uint32_t ADSCANENDSR;  ///< Offset: 0xD50 - Scan End Status Register
        volatile uint32_t ADSCANENDSCR;  ///< Offset: 0xD54 - Scan End Status Clear Register
        volatile uint32_t ADDR;  ///< Offset: 0x1000 - A/D Data Register %s (renamed from ADDR)
        volatile uint32_t ADEXDR;  ///< Offset: 0x1194 - A/D Extended Analog Data Register %s (renamed from ADEXDR)
        volatile uint32_t ADFIFODR;  ///< Offset: 0x1200 - FIFO Data Register %s (renamed from ADFIFODR)
    };

    /// Peripheral instances
    inline Registers* ADC_B = reinterpret_cast<Registers*>(ADC_B_BASE);

    // Bit definitions
    /// ADCLKENR Register bits
    namespace adclkenr_bits {
        constexpr uint32_t CLKEN = (1U << 0);  ///< ADCLK Operating Enable
    }

    /// ADCLKSR Register bits
    namespace adclksr_bits {
        constexpr uint32_t CLKSR = (1U << 0);  ///< ADCLK status
    }

    /// ADCLKCR Register bits
    namespace adclkcr_bits {
        constexpr uint32_t CLKSEL = (2 << 0);  ///< ADCLK Clock Source Select
        constexpr uint32_t DIVR = (3 << 16);  ///< Clock Division Ratio Select
    }

    /// ADSYCR Register bits
    namespace adsycr_bits {
        constexpr uint32_t ADSYCYC = (11 << 0);  ///< Synchronous Operation Period Cycle
        constexpr uint32_t ADSYDIS0 = (1U << 16);  ///< ADC0 Synchronous Operation Select
        constexpr uint32_t ADSYDIS1 = (1U << 17);  ///< ADC1 Synchronous Operation Select
    }

    /// ADERINTCR Register bits
    namespace aderintcr_bits {
        constexpr uint32_t ADEIE0 = (1U << 0);  ///< ADC0 A/D Conversion Error Interrupt Enable
        constexpr uint32_t ADEIE1 = (1U << 1);  ///< ADC1 A/D Conversion Error Interrupt Enable
    }

    /// ADOVFINTCR Register bits
    namespace adovfintcr_bits {
        constexpr uint32_t ADOVFIE0 = (1U << 0);  ///< ADC0 A/D Conversion Overflow Interrupt Enable
        constexpr uint32_t ADOVFIE1 = (1U << 1);  ///< ADC1 A/D Conversion Overflow Interrupt Enable
    }

    /// ADCALINTCR Register bits
    namespace adcalintcr_bits {
        constexpr uint32_t CALENDIE0 = (1U << 16);  ///< ADC0 Calibration End Interrupt Enable
        constexpr uint32_t CALENDIE1 = (1U << 17);  ///< ADC1 Calibration End Interrupt Enable
    }

    /// ADMDR Register bits
    namespace admdr_bits {
        constexpr uint32_t ADMD0 = (4 << 0);  ///< ADC0 Mode Selection
        constexpr uint32_t ADMD1 = (4 << 8);  ///< ADC1 Mode Selection
    }

    /// ADGSPCR Register bits
    namespace adgspcr_bits {
        constexpr uint32_t PGS0 = (1U << 0);  ///< ADC0 Group Priority Control Setting
        constexpr uint32_t RSCN0 = (1U << 1);  ///< ADC0 Group Priority Control Setting 2
        constexpr uint32_t LGRRS0 = (1U << 2);  ///< ADC0 Group Priority Control Setting 3
        constexpr uint32_t GRP0 = (1U << 3);  ///< ADC0 Group Priority Control Setting 4
        constexpr uint32_t PGS1 = (1U << 8);  ///< ADC1 Group Priority Control Setting
        constexpr uint32_t RSCN1 = (1U << 9);  ///< ADC1 Group Priority Control Setting 2
        constexpr uint32_t LGRRS1 = (1U << 10);  ///< ADC1 Group Priority Control Setting 3
        constexpr uint32_t GRP1 = (1U << 11);  ///< ADC1 Group Priority Control Setting 4
    }

    /// ADSGER Register bits
    namespace adsger_bits {
        constexpr uint32_t SGRE0 = (1U << 0);  ///< Scan Group n Enable
        constexpr uint32_t SGRE1 = (1U << 1);  ///< Scan Group n Enable
        constexpr uint32_t SGRE2 = (1U << 2);  ///< Scan Group n Enable
        constexpr uint32_t SGRE3 = (1U << 3);  ///< Scan Group n Enable
        constexpr uint32_t SGRE4 = (1U << 4);  ///< Scan Group n Enable
        constexpr uint32_t SGRE5 = (1U << 5);  ///< Scan Group n Enable
        constexpr uint32_t SGRE6 = (1U << 6);  ///< Scan Group n Enable
        constexpr uint32_t SGRE7 = (1U << 7);  ///< Scan Group n Enable
        constexpr uint32_t SGRE8 = (1U << 8);  ///< Scan Group n Enable
    }

    /// ADSGCR0 Register bits
    namespace adsgcr0_bits {
        constexpr uint32_t SGADS0 = (2 << 0);  ///< Scan Group 0 A/D Converter Selection
        constexpr uint32_t SGADS1 = (2 << 8);  ///< Scan Group 1 A/D Converter Selection
        constexpr uint32_t SGADS2 = (2 << 16);  ///< Scan Group 2 A/D Converter Selection
        constexpr uint32_t SGADS3 = (2 << 24);  ///< Scan Group 3 A/D Converter Selection
    }

    /// ADSGCR1 Register bits
    namespace adsgcr1_bits {
        constexpr uint32_t SGADS4 = (2 << 0);  ///< Scan Group 4 A/D Converter Selection
        constexpr uint32_t SGADS5 = (2 << 8);  ///< Scan Group 5 A/D Converter Selection
        constexpr uint32_t SGADS6 = (2 << 16);  ///< Scan Group 6 A/D Converter Selection
        constexpr uint32_t SGADS7 = (2 << 24);  ///< Scan Group 7 A/D Converter Selection
    }

    /// ADSGCR2 Register bits
    namespace adsgcr2_bits {
        constexpr uint32_t SGADS8 = (2 << 0);  ///< Scan Group 8 A/D Converter Selection
    }

    /// ADINTCR Register bits
    namespace adintcr_bits {
        constexpr uint32_t ADIE0 = (1U << 0);  ///< Scan Group n Scan End Interrupt Enable
        constexpr uint32_t ADIE1 = (1U << 1);  ///< Scan Group n Scan End Interrupt Enable
        constexpr uint32_t ADIE2 = (1U << 2);  ///< Scan Group n Scan End Interrupt Enable
        constexpr uint32_t ADIE3 = (1U << 3);  ///< Scan Group n Scan End Interrupt Enable
        constexpr uint32_t ADIE4 = (1U << 4);  ///< Scan Group n Scan End Interrupt Enable
        constexpr uint32_t ADIE5 = (1U << 5);  ///< Scan Group n Scan End Interrupt Enable
        constexpr uint32_t ADIE6 = (1U << 6);  ///< Scan Group n Scan End Interrupt Enable
        constexpr uint32_t ADIE7 = (1U << 7);  ///< Scan Group n Scan End Interrupt Enable
        constexpr uint32_t ADIE8 = (1U << 8);  ///< Scan Group n Scan End Interrupt Enable
    }

    /// ADTRGEXT Register bits
    namespace adtrgext_bits {
        constexpr uint32_t TRGEXT0 = (1U << 0);  ///< External Trigger Input 0 (ADTRG0) Enable
        constexpr uint32_t TRGEXT1 = (1U << 1);  ///< External Trigger Input 1 (ADTRG1) Enable
    }

    /// ADTRGELC Register bits
    namespace adtrgelc_bits {
        constexpr uint32_t TRGELC0 = (1U << 0);  ///< ELC Trigger m Enable
        constexpr uint32_t TRGELC1 = (1U << 1);  ///< ELC Trigger m Enable
        constexpr uint32_t TRGELC2 = (1U << 2);  ///< ELC Trigger m Enable
        constexpr uint32_t TRGELC3 = (1U << 3);  ///< ELC Trigger m Enable
        constexpr uint32_t TRGELC4 = (1U << 4);  ///< ELC Trigger m Enable
        constexpr uint32_t TRGELC5 = (1U << 5);  ///< ELC Trigger m Enable
    }

    /// ADTRGGPT Register bits
    namespace adtrggpt_bits {
        constexpr uint32_t TRGGPTA0 = (1U << 0);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA1 = (1U << 1);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA2 = (1U << 2);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA3 = (1U << 3);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA4 = (1U << 4);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA5 = (1U << 5);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA6 = (1U << 6);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA7 = (1U << 7);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA8 = (1U << 8);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTA9 = (1U << 9);  ///< GPT channel m A/D Conversion Starting Request A Enable
        constexpr uint32_t TRGGPTB0 = (1U << 16);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB1 = (1U << 17);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB2 = (1U << 18);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB3 = (1U << 19);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB4 = (1U << 20);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB5 = (1U << 21);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB6 = (1U << 22);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB7 = (1U << 23);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB8 = (1U << 24);  ///< GPT channel m A/D Conversion Starting Request B Enable
        constexpr uint32_t TRGGPTB9 = (1U << 25);  ///< GPT channel m A/D Conversion Starting Request B Enable
    }

    /// ADTRGDLR0 Register bits
    namespace adtrgdlr0_bits {
        constexpr uint32_t TRGDLY0 = (8 << 0);  ///< Scan Group 0 Trigger Input Delay Configuration
        constexpr uint32_t TRGDLY1 = (8 << 16);  ///< Scan Group 1 Trigger Input Delay Configuration
    }

    /// ADTRGDLR1 Register bits
    namespace adtrgdlr1_bits {
        constexpr uint32_t TRGDLY2 = (8 << 0);  ///< Scan Group 2 Trigger Input Delay Configuration
        constexpr uint32_t TRGDLY3 = (8 << 16);  ///< Scan Group 3 Trigger Input Delay Configuration
    }

    /// ADTRGDLR2 Register bits
    namespace adtrgdlr2_bits {
        constexpr uint32_t TRGDLY4 = (8 << 0);  ///< Scan Group 4 Trigger Input Delay Configuration
        constexpr uint32_t TRGDLY5 = (8 << 16);  ///< Scan Group 5 Trigger Input Delay Configuration
    }

    /// ADTRGDLR3 Register bits
    namespace adtrgdlr3_bits {
        constexpr uint32_t TRGDLY6 = (8 << 0);  ///< Scan Group 6 Trigger Input Delay Configuration
        constexpr uint32_t TRGDLY7 = (8 << 16);  ///< Scan Group 7 Trigger Input Delay Configuration
    }

    /// ADTRGDLR4 Register bits
    namespace adtrgdlr4_bits {
        constexpr uint32_t TRGDLY8 = (8 << 0);  ///< Scan Group 8 Trigger Input Delay Configuration
    }

    /// ADSGDCR Register bits
    namespace adsgdcr_bits {
        constexpr uint32_t DIAGVAL = (3 << 0);  ///< Self-diagnosis Mode Selection
        constexpr uint32_t ADDISEN = (1U << 16);  ///< Disconnection Detection Assist Enable
        constexpr uint32_t ADDISP = (1U << 20);  ///< Disconnection Detection Assist Mode Selection
        constexpr uint32_t ADDISN = (1U << 21);  ///< Disconnection Detection Assist Mode Selection
        constexpr uint32_t ADNDIS = (4 << 24);  ///< Disconnection Detection Assist Period
    }

    /// ADSSTR0 Register bits
    namespace adsstr0_bits {
        constexpr uint32_t SST0 = (10 << 0);  ///< Sampling State Table 0
        constexpr uint32_t SST1 = (10 << 16);  ///< Sampling State Table 1
    }

    /// ADSSTR1 Register bits
    namespace adsstr1_bits {
        constexpr uint32_t SST2 = (10 << 0);  ///< Sampling State Table 2
        constexpr uint32_t SST3 = (10 << 16);  ///< Sampling State Table 3
    }

    /// ADSSTR2 Register bits
    namespace adsstr2_bits {
        constexpr uint32_t SST4 = (10 << 0);  ///< Sampling State Table 4
        constexpr uint32_t SST5 = (10 << 16);  ///< Sampling State Table 5
    }

    /// ADSSTR3 Register bits
    namespace adsstr3_bits {
        constexpr uint32_t SST6 = (10 << 0);  ///< Sampling State Table 6
        constexpr uint32_t SST7 = (10 << 16);  ///< Sampling State Table 7
    }

    /// ADSSTR4 Register bits
    namespace adsstr4_bits {
        constexpr uint32_t SST8 = (10 << 0);  ///< Sampling State Table 8
        constexpr uint32_t SST9 = (10 << 16);  ///< Sampling State Table 9
    }

    /// ADSSTR5 Register bits
    namespace adsstr5_bits {
        constexpr uint32_t SST10 = (10 << 0);  ///< Sampling State Table 10
        constexpr uint32_t SST11 = (10 << 16);  ///< Sampling State Table 11
    }

    /// ADSSTR6 Register bits
    namespace adsstr6_bits {
        constexpr uint32_t SST12 = (10 << 0);  ///< Sampling State Table 12
        constexpr uint32_t SST13 = (10 << 16);  ///< Sampling State Table 13
    }

    /// ADSSTR7 Register bits
    namespace adsstr7_bits {
        constexpr uint32_t SST14 = (10 << 0);  ///< Sampling State Table 14
        constexpr uint32_t SST15 = (10 << 16);  ///< Sampling State Table 15
    }

    /// ADCNVSTR Register bits
    namespace adcnvstr_bits {
        constexpr uint32_t CST0 = (6 << 0);  ///< A/D Converter Unit 0 (ADC0)
        constexpr uint32_t CST1 = (6 << 8);  ///< A/D Converter Unit 1 (ADC1)
    }

    /// ADCALSTCR Register bits
    namespace adcalstcr_bits {
        constexpr uint32_t CALADSST = (10 << 0);  ///< A/D Converter Self-calibration Sampling Time Configuration
        constexpr uint32_t CALADCST = (6 << 16);  ///< A/D Converter Self-calibration Successive Approximation Time Configuration.
    }

    /// ADSHCR0 Register bits
    namespace adshcr0_bits {
        constexpr uint32_t SHEN0 = (1U << 0);  ///< Channel-dedicated Sample-and-hold Circuit Unit 0 Select
        constexpr uint32_t SHEN1 = (1U << 1);  ///< Channel-dedicated Sample-and-hold Circuit Unit 1 Select
        constexpr uint32_t SHEN2 = (1U << 2);  ///< Channel-dedicated Sample-and-hold Circuit Unit 2 Select
        constexpr uint32_t SHMD0 = (1U << 16);  ///< Channel-dedicated Sample-and-hold Circuit Unit 0 Input Mode Select
        constexpr uint32_t SHMD1 = (1U << 17);  ///< Channel-dedicated Sample-and-hold Circuit Unit 1 Input Mode Select
        constexpr uint32_t SHMD2 = (1U << 18);  ///< Channel-dedicated Sample-and-hold Circuit Unit 2 Input Mode Select
    }

    /// ADSHSTR0 Register bits
    namespace adshstr0_bits {
        constexpr uint32_t SHSST = (8 << 0);  ///< Channel-dedicated Sample-and-hold Circuit Unit 0 to 2
        constexpr uint32_t SHHST = (3 << 16);  ///< Channel-dedicated Sample-and-hold Circuit Unit 0 to 2
    }

    /// ADSHCR1 Register bits
    namespace adshcr1_bits {
        constexpr uint32_t SHEN4 = (1U << 0);  ///< Channel-dedicated Sample-and-hold Circuit Unit 4 Select
        constexpr uint32_t SHEN5 = (1U << 1);  ///< Channel-dedicated Sample-and-hold Circuit Unit 5 Select
        constexpr uint32_t SHEN6 = (1U << 2);  ///< Channel-dedicated Sample-and-hold Circuit Unit 6 Select
        constexpr uint32_t SHMD4 = (1U << 16);  ///< Channel-dedicated Sample-and-hold Circuit Unit 4 Input Mode Select
        constexpr uint32_t SHMD5 = (1U << 17);  ///< Channel-dedicated Sample-and-hold Circuit Unit 5 Input Mode Select
        constexpr uint32_t SHMD6 = (1U << 18);  ///< Channel-dedicated Sample-and-hold Circuit Unit 6 Input Mode Select
    }

    /// ADSHSTR1 Register bits
    namespace adshstr1_bits {
        constexpr uint32_t SHSST = (8 << 0);  ///< Channel-dedicated Sample-and-hold Circuit Unit 4 to 6
        constexpr uint32_t SHHST = (3 << 16);  ///< Channel-dedicated Sample-and-hold Circuit Unit 4 to 6
    }

    /// ADCALSHCR Register bits
    namespace adcalshcr_bits {
        constexpr uint32_t CALSHSST = (8 << 0);  ///< Channel-dedicated Sample-and-hold Circuit Self-calibration Sampling Time Configuration
        constexpr uint32_t CALSHHST = (3 << 16);  ///< Channel-dedicated Sample-and-hold Circuit Self-calibration Hold Mode Switching Time Configuration
    }

    /// ADPGACR Register bits
    namespace adpgacr_bits {
        constexpr uint32_t PGADEN = (1U << 1);  ///< PGA Unit n Input Mode Select
        constexpr uint32_t PGASEL1 = (1U << 2);  ///< PGA Unit n Amplifier Output Enable
        constexpr uint32_t PGAENAMP = (1U << 3);  ///< PGA Unit n Enable
        constexpr uint32_t PGAGEN = (1U << 16);  ///< PGA Unit n Gain Setting Enable
        constexpr uint32_t PGADG = (2 << 20);  ///< PGA Unit n Differential Input Gain Setting
        constexpr uint32_t PGAGAIN = (4 << 24);  ///< PGA Unit n Gain Setting
    }

    /// ADPGAMONCR Register bits
    namespace adpgamoncr_bits {
        constexpr uint32_t PGAMON = (3 << 0);  ///< PGA Monitor Signal Selection
        constexpr uint32_t MONSEL0 = (1U << 16);  ///< PGA Unit 0 Monitor Output Enable
        constexpr uint32_t MONSEL1 = (1U << 17);  ///< PGA Unit 1 Monitor Output Enable
        constexpr uint32_t MONSEL2 = (1U << 18);  ///< PGA Unit 2 Monitor Output Enable
        constexpr uint32_t MONSEL3 = (1U << 19);  ///< PGA Unit 3 Monitor Output Enable
    }

    /// ADREFCR Register bits
    namespace adrefcr_bits {
        constexpr uint32_t VDE = (1U << 0);  ///< Internal Reference Voltage A/D Conversion Select
    }

    /// ADDFSR Register bits
    namespace addfsr_bits {
        constexpr uint32_t DFSEL0 = (2 << 0);  ///< A/D Converter Unit n the 1st Digital Filter Characteristic Selection
        constexpr uint32_t DFSEL1 = (2 << 8);  ///< A/D Converter Unit n the 2nd Digital Filter Characteristic Selection
        constexpr uint32_t DFSEL2 = (2 << 16);  ///< A/D Converter Unit n the 3rd Digital Filter Characteristic Selection
        constexpr uint32_t DFSEL3 = (2 << 24);  ///< A/D Converter Unit n the 4th Digital Filter Characteristic Selection
    }

    /// ADUOFTR Register bits
    namespace aduoftr_bits {
        constexpr uint32_t UOFSET = (16 << 0);  ///< User Offset Table n
    }

    /// ADUGTR Register bits
    namespace adugtr_bits {
        constexpr uint32_t UGAIN = (24 << 0);  ///< User Gain Table n
    }

    /// ADLIMINTCR Register bits
    namespace adlimintcr_bits {
        constexpr uint32_t LIMIE0 = (1U << 0);  ///< Limiter Clip Interrupt n Enable bit
        constexpr uint32_t LIMIE1 = (1U << 1);  ///< Limiter Clip Interrupt n Enable bit
        constexpr uint32_t LIMIE2 = (1U << 2);  ///< Limiter Clip Interrupt n Enable bit
        constexpr uint32_t LIMIE3 = (1U << 3);  ///< Limiter Clip Interrupt n Enable bit
        constexpr uint32_t LIMIE4 = (1U << 4);  ///< Limiter Clip Interrupt n Enable bit
        constexpr uint32_t LIMIE5 = (1U << 5);  ///< Limiter Clip Interrupt n Enable bit
        constexpr uint32_t LIMIE6 = (1U << 6);  ///< Limiter Clip Interrupt n Enable bit
        constexpr uint32_t LIMIE7 = (1U << 7);  ///< Limiter Clip Interrupt n Enable bit
        constexpr uint32_t LIMIE8 = (1U << 8);  ///< Limiter Clip Interrupt n Enable bit
    }

    /// ADLIMTR Register bits
    namespace adlimtr_bits {
        constexpr uint32_t LIML = (16 << 0);  ///< Limiter clip table n : Lower-side limit value
        constexpr uint32_t LIMU = (16 << 16);  ///< Limiter clip table n : Upper-side limit value
    }

    /// ADCMPENR Register bits
    namespace adcmpenr_bits {
        constexpr uint32_t CMPEN0 = (1U << 0);  ///< Compare Match n Enable
        constexpr uint32_t CMPEN1 = (1U << 1);  ///< Compare Match n Enable
        constexpr uint32_t CMPEN2 = (1U << 2);  ///< Compare Match n Enable
        constexpr uint32_t CMPEN3 = (1U << 3);  ///< Compare Match n Enable
        constexpr uint32_t CMPEN4 = (1U << 4);  ///< Compare Match n Enable
        constexpr uint32_t CMPEN5 = (1U << 5);  ///< Compare Match n Enable
        constexpr uint32_t CMPEN6 = (1U << 6);  ///< Compare Match n Enable
        constexpr uint32_t CMPEN7 = (1U << 7);  ///< Compare Match n Enable
    }

    /// ADCMPINTCR Register bits
    namespace adcmpintcr_bits {
        constexpr uint32_t CMPIE0 = (1U << 0);  ///< Compare Match Interrupt n Enable
        constexpr uint32_t CMPIE1 = (1U << 1);  ///< Compare Match Interrupt n Enable
        constexpr uint32_t CMPIE2 = (1U << 2);  ///< Compare Match Interrupt n Enable
        constexpr uint32_t CMPIE3 = (1U << 3);  ///< Compare Match Interrupt n Enable
    }

    /// ADCCMPCR Register bits
    namespace adccmpcr_bits {
        constexpr uint32_t CCMPCND = (2 << 0);  ///< Composite Compare Match Condition Selection
        constexpr uint32_t CCMPTBL0 = (1U << 16);  ///< Composite Compare Match Condition Table Selection
        constexpr uint32_t CCMPTBL1 = (1U << 17);  ///< Composite Compare Match Condition Table Selection
        constexpr uint32_t CCMPTBL2 = (1U << 18);  ///< Composite Compare Match Condition Table Selection
        constexpr uint32_t CCMPTBL3 = (1U << 19);  ///< Composite Compare Match Condition Table Selection
        constexpr uint32_t CCMPTBL4 = (1U << 20);  ///< Composite Compare Match Condition Table Selection
        constexpr uint32_t CCMPTBL5 = (1U << 21);  ///< Composite Compare Match Condition Table Selection
        constexpr uint32_t CCMPTBL6 = (1U << 22);  ///< Composite Compare Match Condition Table Selection
        constexpr uint32_t CCMPTBL7 = (1U << 23);  ///< Composite Compare Match Condition Table Selection
    }

    /// ADCMPMDR0 Register bits
    namespace adcmpmdr0_bits {
        constexpr uint32_t CMPMD0 = (2 << 0);  ///< Compare Match 0 : Match Mode Selection
        constexpr uint32_t CMPMD1 = (2 << 8);  ///< Compare Match 1 : Match Mode Selection
        constexpr uint32_t CMPMD2 = (2 << 16);  ///< Compare Match 2 : Match Mode Selection
        constexpr uint32_t CMPMD3 = (2 << 24);  ///< Compare Match 3 : Match Mode Selection
    }

    /// ADCMPMDR1 Register bits
    namespace adcmpmdr1_bits {
        constexpr uint32_t CMPMD4 = (2 << 0);  ///< Compare Match 4 : Match Mode Selection
        constexpr uint32_t CMPMD5 = (2 << 8);  ///< Compare Match 5 : Match Mode Selection
        constexpr uint32_t CMPMD6 = (2 << 16);  ///< Compare Match 6 : Match Mode Selection
        constexpr uint32_t CMPMD7 = (2 << 24);  ///< Compare Match 7 : Match Mode Selection
    }

    /// ADCMPTBR Register bits
    namespace adcmptbr_bits {
        constexpr uint32_t CMPTBL = (16 << 0);  ///< Compare Match Table n : Low-side level
        constexpr uint32_t CMPTBH = (16 << 16);  ///< Compare Match Table n : High-side level
    }

    /// ADFIFOCR Register bits
    namespace adfifocr_bits {
        constexpr uint32_t FIFOEN0 = (1U << 0);  ///< Scan Group n FIFO Enable
        constexpr uint32_t FIFOEN1 = (1U << 1);  ///< Scan Group n FIFO Enable
        constexpr uint32_t FIFOEN2 = (1U << 2);  ///< Scan Group n FIFO Enable
        constexpr uint32_t FIFOEN3 = (1U << 3);  ///< Scan Group n FIFO Enable
        constexpr uint32_t FIFOEN4 = (1U << 4);  ///< Scan Group n FIFO Enable
        constexpr uint32_t FIFOEN5 = (1U << 5);  ///< Scan Group n FIFO Enable
        constexpr uint32_t FIFOEN6 = (1U << 6);  ///< Scan Group n FIFO Enable
        constexpr uint32_t FIFOEN7 = (1U << 7);  ///< Scan Group n FIFO Enable
        constexpr uint32_t FIFOEN8 = (1U << 8);  ///< Scan Group n FIFO Enable
    }

    /// ADFIFOINTCR Register bits
    namespace adfifointcr_bits {
        constexpr uint32_t FIFOIE0 = (1U << 0);  ///< Scan Group n FIFO Interrupt Enable
        constexpr uint32_t FIFOIE1 = (1U << 1);  ///< Scan Group n FIFO Interrupt Enable
        constexpr uint32_t FIFOIE2 = (1U << 2);  ///< Scan Group n FIFO Interrupt Enable
        constexpr uint32_t FIFOIE3 = (1U << 3);  ///< Scan Group n FIFO Interrupt Enable
        constexpr uint32_t FIFOIE4 = (1U << 4);  ///< Scan Group n FIFO Interrupt Enable
        constexpr uint32_t FIFOIE5 = (1U << 5);  ///< Scan Group n FIFO Interrupt Enable
        constexpr uint32_t FIFOIE6 = (1U << 6);  ///< Scan Group n FIFO Interrupt Enable
        constexpr uint32_t FIFOIE7 = (1U << 7);  ///< Scan Group n FIFO Interrupt Enable
        constexpr uint32_t FIFOIE8 = (1U << 8);  ///< Scan Group n FIFO Interrupt Enable
    }

    /// ADFIFOINTLR0 Register bits
    namespace adfifointlr0_bits {
        constexpr uint32_t FIFOILV0 = (4 << 0);  ///< Scan Group 0 FIFO Interrupt Output Timing Setting
        constexpr uint32_t FIFOILV1 = (4 << 16);  ///< Scan Group 1 FIFO Interrupt Output Timing Setting
    }

    /// ADFIFOINTLR1 Register bits
    namespace adfifointlr1_bits {
        constexpr uint32_t FIFOILV2 = (4 << 0);  ///< Scan Group 2 FIFO Interrupt Output Timing Setting
        constexpr uint32_t FIFOILV3 = (4 << 16);  ///< Scan Group 3 FIFO Interrupt Output Timing Setting
    }

    /// ADFIFOINTLR2 Register bits
    namespace adfifointlr2_bits {
        constexpr uint32_t FIFOILV4 = (4 << 0);  ///< Scan Group 4 FIFO Interrupt Output Timing Setting
        constexpr uint32_t FIFOILV5 = (4 << 16);  ///< Scan Group 5 FIFO Interrupt Output Timing Setting
    }

    /// ADFIFOINTLR3 Register bits
    namespace adfifointlr3_bits {
        constexpr uint32_t FIFOILV6 = (4 << 0);  ///< Scan Group 6 FIFO Interrupt Output Timing Setting
        constexpr uint32_t FIFOILV7 = (4 << 16);  ///< Scan Group 7 FIFO Interrupt Output Timing Setting
    }

    /// ADFIFOINTLR4 Register bits
    namespace adfifointlr4_bits {
        constexpr uint32_t FIFOILV8 = (4 << 0);  ///< Scan Group 8 FIFO Interrupt Output Timing Setting
    }

    /// ADCHCR Register bits
    namespace adchcr_bits {
        constexpr uint32_t SGSEL = (5 << 0);  ///< Scan Group Selection
        constexpr uint32_t CNVCS = (7 << 8);  ///< A/D Conversion Channel Selection
        constexpr uint32_t AINMD = (1U << 15);  ///< Analog Input mode selection
        constexpr uint32_t SSTSEL = (4 << 16);  ///< Sampling State Table Selection
    }

    /// ADDOPCRA Register bits
    namespace addopcra_bits {
        constexpr uint32_t DFSEL = (3 << 0);  ///< Digital Filter Selection
        constexpr uint32_t GAINSEL = (4 << 16);  ///< User Gain Table Selection
        constexpr uint32_t OFSETSEL = (4 << 24);  ///< User Offset Table Selection
    }

    /// ADDOPCRB Register bits
    namespace addopcrb_bits {
        constexpr uint32_t AVEMD = (2 << 0);  ///< Addition/Averaging Mode Selection
        constexpr uint32_t ADC = (4 << 8);  ///< Addition/Averaging Times Selection
        constexpr uint32_t CMPTBLE0 = (1U << 16);  ///< Compare Match Enable
        constexpr uint32_t CMPTBLE1 = (1U << 17);  ///< Compare Match Enable
        constexpr uint32_t CMPTBLE2 = (1U << 18);  ///< Compare Match Enable
        constexpr uint32_t CMPTBLE3 = (1U << 19);  ///< Compare Match Enable
        constexpr uint32_t CMPTBLE4 = (1U << 20);  ///< Compare Match Enable
        constexpr uint32_t CMPTBLE5 = (1U << 21);  ///< Compare Match Enable
        constexpr uint32_t CMPTBLE6 = (1U << 22);  ///< Compare Match Enable
        constexpr uint32_t CMPTBLE7 = (1U << 23);  ///< Compare Match Enable
    }

    /// ADDOPCRC Register bits
    namespace addopcrc_bits {
        constexpr uint32_t LIMTBLS = (4 << 0);  ///< Limiter Clip Table Selection
        constexpr uint32_t ADPRC = (2 << 16);  ///< A/D Conversion Data Format Selection
        constexpr uint32_t SIGNSEL = (1U << 20);  ///< A/D Conversion Data Signed/Un-signed Selection
    }

    /// ADCALSTR Register bits
    namespace adcalstr_bits {
        constexpr uint32_t ADCALST0 = (3 << 0);  ///< A/D Converter Unit 0 (ADC0) Self-calibration Start Control
        constexpr uint32_t ADCALST1 = (3 << 8);  ///< A/D Converter Unit 1 (ADC1) Self-calibration Start Control
    }

    /// ADTRGENR Register bits
    namespace adtrgenr_bits {
        constexpr uint32_t STTRGEN0 = (1U << 0);  ///< Scan Group n A/D Conversion Start Trigger Enable
        constexpr uint32_t STTRGEN1 = (1U << 1);  ///< Scan Group n A/D Conversion Start Trigger Enable
        constexpr uint32_t STTRGEN2 = (1U << 2);  ///< Scan Group n A/D Conversion Start Trigger Enable
        constexpr uint32_t STTRGEN3 = (1U << 3);  ///< Scan Group n A/D Conversion Start Trigger Enable
        constexpr uint32_t STTRGEN4 = (1U << 4);  ///< Scan Group n A/D Conversion Start Trigger Enable
        constexpr uint32_t STTRGEN5 = (1U << 5);  ///< Scan Group n A/D Conversion Start Trigger Enable
        constexpr uint32_t STTRGEN6 = (1U << 6);  ///< Scan Group n A/D Conversion Start Trigger Enable
        constexpr uint32_t STTRGEN7 = (1U << 7);  ///< Scan Group n A/D Conversion Start Trigger Enable
        constexpr uint32_t STTRGEN8 = (1U << 8);  ///< Scan Group n A/D Conversion Start Trigger Enable
    }

    /// ADSYSTR Register bits
    namespace adsystr_bits {
        constexpr uint32_t ADSYST0 = (1U << 0);  ///< Scan Group n: A/D Conversion start
        constexpr uint32_t ADSYST1 = (1U << 1);  ///< Scan Group n: A/D Conversion start
        constexpr uint32_t ADSYST2 = (1U << 2);  ///< Scan Group n: A/D Conversion start
        constexpr uint32_t ADSYST3 = (1U << 3);  ///< Scan Group n: A/D Conversion start
        constexpr uint32_t ADSYST4 = (1U << 4);  ///< Scan Group n: A/D Conversion start
        constexpr uint32_t ADSYST5 = (1U << 5);  ///< Scan Group n: A/D Conversion start
        constexpr uint32_t ADSYST6 = (1U << 6);  ///< Scan Group n: A/D Conversion start
        constexpr uint32_t ADSYST7 = (1U << 7);  ///< Scan Group n: A/D Conversion start
        constexpr uint32_t ADSYST8 = (1U << 8);  ///< Scan Group n: A/D Conversion start
    }

    /// ADSTR Register bits
    namespace adstr_bits {
        constexpr uint32_t ADST = (1U << 0);  ///< Scan Group n A/D Conversion Start
    }

    /// ADSTOPR Register bits
    namespace adstopr_bits {
        constexpr uint32_t ADSTOP0 = (1U << 0);  ///< A/D Converter Unit 0 Force Stop
        constexpr uint32_t ADSTOP1 = (1U << 8);  ///< A/D Converter Unit 1 Force Stop
    }

    /// ADSR Register bits
    namespace adsr_bits {
        constexpr uint32_t ADACT0 = (1U << 0);  ///< A/D Converter Unit 0 (ADC0) A/D Conversion Status
        constexpr uint32_t ADACT1 = (1U << 1);  ///< A/D Converter Unit 1 (ADC1) A/D Conversion Status
        constexpr uint32_t CALACT0 = (1U << 16);  ///< A/D Converter Unit 0 (ADC0) : Calibration Status
        constexpr uint32_t CALACT1 = (1U << 17);  ///< A/D Converter Unit 1 (ADC1) : Calibration Status
    }

    /// ADGRSR Register bits
    namespace adgrsr_bits {
        constexpr uint32_t ACTGR0 = (1U << 0);  ///< Scan Group n Status
        constexpr uint32_t ACTGR1 = (1U << 1);  ///< Scan Group n Status
        constexpr uint32_t ACTGR2 = (1U << 2);  ///< Scan Group n Status
        constexpr uint32_t ACTGR3 = (1U << 3);  ///< Scan Group n Status
        constexpr uint32_t ACTGR4 = (1U << 4);  ///< Scan Group n Status
        constexpr uint32_t ACTGR5 = (1U << 5);  ///< Scan Group n Status
        constexpr uint32_t ACTGR6 = (1U << 6);  ///< Scan Group n Status
        constexpr uint32_t ACTGR7 = (1U << 7);  ///< Scan Group n Status
        constexpr uint32_t ACTGR8 = (1U << 8);  ///< Scan Group n Status
    }

    /// ADERSR Register bits
    namespace adersr_bits {
        constexpr uint32_t ADERF0 = (1U << 0);  ///< A/D Converter Unit 0 (ADC0) Error Flag
        constexpr uint32_t ADERF1 = (1U << 1);  ///< A/D Converter Unit 1 (ADC1) Error Flag
    }

    /// ADERSCR Register bits
    namespace aderscr_bits {
        constexpr uint32_t ADERCLR0 = (1U << 0);  ///< A/D Converter Unit 0 Error Flag Clear
        constexpr uint32_t ADERCLR1 = (1U << 1);  ///< A/D Converter Unit 1 Error Flag Clear
    }

    /// ADCALENDSR Register bits
    namespace adcalendsr_bits {
        constexpr uint32_t CALENDF0 = (1U << 0);  ///< A/D Converter Unit 0 Calibration End flag
        constexpr uint32_t CALENDF1 = (1U << 1);  ///< A/D Converter Unit 1 Calibration End flag
    }

    /// ADCALENDSCR Register bits
    namespace adcalendscr_bits {
        constexpr uint32_t CALENDC0 = (1U << 0);  ///< A/D Converter Unit 0 Calibration End Flag Clear
        constexpr uint32_t CALENDC1 = (1U << 1);  ///< A/D Converter Unit 1 Calibration End Flag Clear
    }

    /// ADOVFERSR Register bits
    namespace adovfersr_bits {
        constexpr uint32_t ADOVFEF0 = (1U << 0);  ///< A/D Converter Unit 0 (ADC0) Overflow Error Flag
        constexpr uint32_t ADOVFEF1 = (1U << 1);  ///< A/D Converter Unit 1 (ADC1) Overflow Error Flag
    }

    /// ADOVFCHSR0 Register bits
    namespace adovfchsr0_bits {
        constexpr uint32_t OVFCHF0 = (1U << 0);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF1 = (1U << 1);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF2 = (1U << 2);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF3 = (1U << 3);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF4 = (1U << 4);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF5 = (1U << 5);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF6 = (1U << 6);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF7 = (1U << 7);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF8 = (1U << 8);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF9 = (1U << 9);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF10 = (1U << 10);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF11 = (1U << 11);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF12 = (1U << 12);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF13 = (1U << 13);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF14 = (1U << 14);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF15 = (1U << 15);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF16 = (1U << 16);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF17 = (1U << 17);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF18 = (1U << 18);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF19 = (1U << 19);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF20 = (1U << 20);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF21 = (1U << 21);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF22 = (1U << 22);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF23 = (1U << 23);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF24 = (1U << 24);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF25 = (1U << 25);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF26 = (1U << 26);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF27 = (1U << 27);  ///< Analog Channel n: Overflow Flag
        constexpr uint32_t OVFCHF28 = (1U << 28);  ///< Analog Channel n: Overflow Flag
    }

    /// ADOVFEXSR Register bits
    namespace adovfexsr_bits {
        constexpr uint32_t OVFEXF0 = (1U << 0);  ///< Self-diagnosis Channel: Overflow Flag
        constexpr uint32_t OVFEXF1 = (1U << 1);  ///< Temperature Sensor Channel: Overflow Flag
        constexpr uint32_t OVFEXF2 = (1U << 2);  ///< Internal Reference Voltage Channel: Overflow Flag
        constexpr uint32_t OVFEXF5 = (1U << 5);  ///< D/A Converter 0 Channel: Overflow Flag
        constexpr uint32_t OVFEXF6 = (1U << 6);  ///< D/A Converter 1 Channel: Overflow Flag
        constexpr uint32_t OVFEXF7 = (1U << 7);  ///< D/A Converter 2 Channel: Overflow Flag
        constexpr uint32_t OVFEXF8 = (1U << 8);  ///< D/A Converter 3 Channel: Overflow Flag
    }

    /// ADOVFERSCR Register bits
    namespace adovferscr_bits {
        constexpr uint32_t ADOVFEC0 = (1U << 0);  ///< A/D Converter Unit 0 (ADC0) Overflow Error Flag Clear
        constexpr uint32_t ADOVFEC1 = (1U << 1);  ///< A/D Converter Unit 1 (ADC1) Overflow Error Flag Clear
    }

    /// ADOVFCHSCR0 Register bits
    namespace adovfchscr0_bits {
        constexpr uint32_t OVFCHC0 = (1U << 0);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC1 = (1U << 1);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC2 = (1U << 2);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC3 = (1U << 3);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC4 = (1U << 4);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC5 = (1U << 5);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC6 = (1U << 6);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC7 = (1U << 7);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC8 = (1U << 8);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC9 = (1U << 9);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC10 = (1U << 10);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC11 = (1U << 11);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC12 = (1U << 12);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC13 = (1U << 13);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC14 = (1U << 14);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC15 = (1U << 15);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC16 = (1U << 16);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC17 = (1U << 17);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC18 = (1U << 18);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC19 = (1U << 19);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC20 = (1U << 20);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC21 = (1U << 21);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC22 = (1U << 22);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC23 = (1U << 23);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC24 = (1U << 24);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC25 = (1U << 25);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC26 = (1U << 26);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC27 = (1U << 27);  ///< Analog Channel n: Overflow Flag Clear
        constexpr uint32_t OVFCHC28 = (1U << 28);  ///< Analog Channel n: Overflow Flag Clear
    }

    /// ADOVFEXSCR Register bits
    namespace adovfexscr_bits {
        constexpr uint32_t OVFEXC0 = (1U << 0);  ///< Self-diagnosis Channel: Overflow Flag Clear
        constexpr uint32_t OVFEXC1 = (1U << 1);  ///< Temperature Sensor Channel: Overflow Flag Clear
        constexpr uint32_t OVFEXC2 = (1U << 2);  ///< Internal Reference Voltage Channel: Overflow Flag Clear
        constexpr uint32_t OVFEXC5 = (1U << 5);  ///< D/A Converter 0 Channel: Overflow Flag Clear
        constexpr uint32_t OVFEXC6 = (1U << 6);  ///< D/A Converter 1 Channel: Overflow Flag Clear
        constexpr uint32_t OVFEXC7 = (1U << 7);  ///< D/A Converter 2 Channel: Overflow Flag Clear
        constexpr uint32_t OVFEXC8 = (1U << 8);  ///< D/A Converter 3 Channel: Overflow Flag Clear
    }

    /// ADFIFOSR0 Register bits
    namespace adfifosr0_bits {
        constexpr uint32_t FIFOST0 = (4 << 0);  ///< Number of vacant stages in FIFO for Scan Group 0
        constexpr uint32_t FIFOST1 = (4 << 16);  ///< Number of vacant stages in FIFO for Scan Group 1
    }

    /// ADFIFOSR1 Register bits
    namespace adfifosr1_bits {
        constexpr uint32_t FIFOST2 = (4 << 0);  ///< Number of vacant stages in FIFO for Scan Group 2
        constexpr uint32_t FIFOST3 = (4 << 16);  ///< Number of vacant stages in FIFO for Scan Group 3
    }

    /// ADFIFOSR2 Register bits
    namespace adfifosr2_bits {
        constexpr uint32_t FIFOST4 = (4 << 0);  ///< Number of vacant stages in FIFO for Scan Group 4
        constexpr uint32_t FIFOST5 = (4 << 16);  ///< Number of vacant stages in FIFO for Scan Group 5
    }

    /// ADFIFOSR3 Register bits
    namespace adfifosr3_bits {
        constexpr uint32_t FIFOST6 = (4 << 0);  ///< Number of vacant stages in FIFO for Scan Group 6
        constexpr uint32_t FIFOST7 = (4 << 16);  ///< Number of vacant stages in FIFO for Scan Group 7
    }

    /// ADFIFOSR4 Register bits
    namespace adfifosr4_bits {
        constexpr uint32_t FIFOST8 = (4 << 0);  ///< Number of vacant stages in FIFO for Scan Group 8
    }

    /// ADFIFODCR Register bits
    namespace adfifodcr_bits {
        constexpr uint32_t FIFODC0 = (1U << 0);  ///< Scan Group n FIFO Data Clear
        constexpr uint32_t FIFODC1 = (1U << 1);  ///< Scan Group n FIFO Data Clear
        constexpr uint32_t FIFODC2 = (1U << 2);  ///< Scan Group n FIFO Data Clear
        constexpr uint32_t FIFODC3 = (1U << 3);  ///< Scan Group n FIFO Data Clear
        constexpr uint32_t FIFODC4 = (1U << 4);  ///< Scan Group n FIFO Data Clear
        constexpr uint32_t FIFODC5 = (1U << 5);  ///< Scan Group n FIFO Data Clear
        constexpr uint32_t FIFODC6 = (1U << 6);  ///< Scan Group n FIFO Data Clear
        constexpr uint32_t FIFODC7 = (1U << 7);  ///< Scan Group n FIFO Data Clear
        constexpr uint32_t FIFODC8 = (1U << 8);  ///< Scan Group n FIFO Data Clear
    }

    /// ADFIFOERSR Register bits
    namespace adfifoersr_bits {
        constexpr uint32_t FIFOOVF0 = (1U << 0);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOOVF1 = (1U << 1);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOOVF2 = (1U << 2);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOOVF3 = (1U << 3);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOOVF4 = (1U << 4);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOOVF5 = (1U << 5);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOOVF6 = (1U << 6);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOOVF7 = (1U << 7);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOOVF8 = (1U << 8);  ///< Scan Group n FIFO Overflow Flag
        constexpr uint32_t FIFOFLF0 = (1U << 16);  ///< Scan Group n FIFO Data Read Request Flag
        constexpr uint32_t FIFOFLF1 = (1U << 17);  ///< Scan Group n FIFO Data Read Request Flag
        constexpr uint32_t FIFOFLF2 = (1U << 18);  ///< Scan Group n FIFO Data Read Request Flag
        constexpr uint32_t FIFOFLF3 = (1U << 19);  ///< Scan Group n FIFO Data Read Request Flag
        constexpr uint32_t FIFOFLF4 = (1U << 20);  ///< Scan Group n FIFO Data Read Request Flag
        constexpr uint32_t FIFOFLF5 = (1U << 21);  ///< Scan Group n FIFO Data Read Request Flag
        constexpr uint32_t FIFOFLF6 = (1U << 22);  ///< Scan Group n FIFO Data Read Request Flag
        constexpr uint32_t FIFOFLF7 = (1U << 23);  ///< Scan Group n FIFO Data Read Request Flag
        constexpr uint32_t FIFOFLF8 = (1U << 24);  ///< Scan Group n FIFO Data Read Request Flag
    }

    /// ADFIFOERSCR Register bits
    namespace adfifoerscr_bits {
        constexpr uint32_t FIFOOVFC0 = (1U << 0);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOOVFC1 = (1U << 1);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOOVFC2 = (1U << 2);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOOVFC3 = (1U << 3);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOOVFC4 = (1U << 4);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOOVFC5 = (1U << 5);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOOVFC6 = (1U << 6);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOOVFC7 = (1U << 7);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOOVFC8 = (1U << 8);  ///< Scan Group n FIFO Overflow Flag Clear
        constexpr uint32_t FIFOFLC0 = (1U << 16);  ///< Scan Group n FIFO Data Read Request Flag Clear
        constexpr uint32_t FIFOFLC1 = (1U << 17);  ///< Scan Group n FIFO Data Read Request Flag Clear
        constexpr uint32_t FIFOFLC2 = (1U << 18);  ///< Scan Group n FIFO Data Read Request Flag Clear
        constexpr uint32_t FIFOFLC3 = (1U << 19);  ///< Scan Group n FIFO Data Read Request Flag Clear
        constexpr uint32_t FIFOFLC4 = (1U << 20);  ///< Scan Group n FIFO Data Read Request Flag Clear
        constexpr uint32_t FIFOFLC5 = (1U << 21);  ///< Scan Group n FIFO Data Read Request Flag Clear
        constexpr uint32_t FIFOFLC6 = (1U << 22);  ///< Scan Group n FIFO Data Read Request Flag Clear
        constexpr uint32_t FIFOFLC7 = (1U << 23);  ///< Scan Group n FIFO Data Read Request Flag Clear
        constexpr uint32_t FIFOFLC8 = (1U << 24);  ///< Scan Group n FIFO Data Read Request Flag Clear
    }

    /// ADCMPTBSR Register bits
    namespace adcmptbsr_bits {
        constexpr uint32_t CMPTBF0 = (1U << 0);  ///< Compare Match Table n Match Flag
        constexpr uint32_t CMPTBF1 = (1U << 1);  ///< Compare Match Table n Match Flag
        constexpr uint32_t CMPTBF2 = (1U << 2);  ///< Compare Match Table n Match Flag
        constexpr uint32_t CMPTBF3 = (1U << 3);  ///< Compare Match Table n Match Flag
        constexpr uint32_t CMPTBF4 = (1U << 4);  ///< Compare Match Table n Match Flag
        constexpr uint32_t CMPTBF5 = (1U << 5);  ///< Compare Match Table n Match Flag
        constexpr uint32_t CMPTBF6 = (1U << 6);  ///< Compare Match Table n Match Flag
        constexpr uint32_t CMPTBF7 = (1U << 7);  ///< Compare Match Table n Match Flag
    }

    /// ADCMPTBSCR Register bits
    namespace adcmptbscr_bits {
        constexpr uint32_t CMPTBC0 = (1U << 0);  ///< Compare Match Table n: Match Flag Clear
        constexpr uint32_t CMPTBC1 = (1U << 1);  ///< Compare Match Table n: Match Flag Clear
        constexpr uint32_t CMPTBC2 = (1U << 2);  ///< Compare Match Table n: Match Flag Clear
        constexpr uint32_t CMPTBC3 = (1U << 3);  ///< Compare Match Table n: Match Flag Clear
        constexpr uint32_t CMPTBC4 = (1U << 4);  ///< Compare Match Table n: Match Flag Clear
        constexpr uint32_t CMPTBC5 = (1U << 5);  ///< Compare Match Table n: Match Flag Clear
        constexpr uint32_t CMPTBC6 = (1U << 6);  ///< Compare Match Table n: Match Flag Clear
        constexpr uint32_t CMPTBC7 = (1U << 7);  ///< Compare Match Table n: Match Flag Clear
    }

    /// ADCMPCHSR0 Register bits
    namespace adcmpchsr0_bits {
        constexpr uint32_t CMPCHF0 = (1U << 0);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF1 = (1U << 1);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF2 = (1U << 2);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF3 = (1U << 3);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF4 = (1U << 4);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF5 = (1U << 5);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF6 = (1U << 6);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF7 = (1U << 7);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF8 = (1U << 8);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF9 = (1U << 9);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF10 = (1U << 10);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF11 = (1U << 11);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF12 = (1U << 12);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF13 = (1U << 13);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF14 = (1U << 14);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF15 = (1U << 15);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF16 = (1U << 16);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF17 = (1U << 17);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF18 = (1U << 18);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF19 = (1U << 19);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF20 = (1U << 20);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF21 = (1U << 21);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF22 = (1U << 22);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF23 = (1U << 23);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF24 = (1U << 24);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF25 = (1U << 25);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF26 = (1U << 26);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF27 = (1U << 27);  ///< Analog Channel n: Compare Match Flag
        constexpr uint32_t CMPCHF28 = (1U << 28);  ///< Analog Channel n: Compare Match Flag
    }

    /// ADCMPEXSR Register bits
    namespace adcmpexsr_bits {
        constexpr uint32_t CMPEXF0 = (1U << 0);  ///< Self-diagnosis Channel: Compare Match Flag
        constexpr uint32_t CMPEXF1 = (1U << 1);  ///< Temperature Sensor Channel: Compare Match Flag
        constexpr uint32_t CMPEXF2 = (1U << 2);  ///< Internal Reference Voltage Channel: Compare Match Flag
        constexpr uint32_t CMPEXF5 = (1U << 5);  ///< D/A Converter 0 Channel: Compare Match Flag
        constexpr uint32_t CMPEXF6 = (1U << 6);  ///< D/A Converter 1 Channel: Compare Match Flag
        constexpr uint32_t CMPEXF7 = (1U << 7);  ///< D/A Converter 2 Channel: Compare Match Flag
        constexpr uint32_t CMPEXF8 = (1U << 8);  ///< D/A Converter 3 Channel: Compare Match Flag
    }

    /// ADCMPCHSCR0 Register bits
    namespace adcmpchscr0_bits {
        constexpr uint32_t CMPCHC0 = (1U << 0);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC1 = (1U << 1);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC2 = (1U << 2);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC3 = (1U << 3);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC4 = (1U << 4);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC5 = (1U << 5);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC6 = (1U << 6);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC7 = (1U << 7);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC8 = (1U << 8);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC9 = (1U << 9);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC10 = (1U << 10);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC11 = (1U << 11);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC12 = (1U << 12);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC13 = (1U << 13);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC14 = (1U << 14);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC15 = (1U << 15);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC16 = (1U << 16);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC17 = (1U << 17);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC18 = (1U << 18);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC19 = (1U << 19);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC20 = (1U << 20);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC21 = (1U << 21);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC22 = (1U << 22);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC23 = (1U << 23);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC24 = (1U << 24);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC25 = (1U << 25);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC26 = (1U << 26);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC27 = (1U << 27);  ///< Analog Channel n: Compare Match Flag Clear bit
        constexpr uint32_t CMPCHC28 = (1U << 28);  ///< Analog Channel n: Compare Match Flag Clear bit
    }

    /// ADCMPEXSCR Register bits
    namespace adcmpexscr_bits {
        constexpr uint32_t CMPEXC0 = (1U << 0);  ///< Self-diagnosis Channel: Compare Match Flag Clear
        constexpr uint32_t CMPEXC1 = (1U << 1);  ///< Temperature Sensor Channel: Compare Match Flag Clear
        constexpr uint32_t CMPEXC2 = (1U << 2);  ///< Internal Reference Voltage Channel: Compare Match Flag Clear
        constexpr uint32_t CMPEXC5 = (1U << 5);  ///< D/A Converter 0 Channel: Compare Match Flag Clear
        constexpr uint32_t CMPEXC6 = (1U << 6);  ///< D/A Converter 1 Channel: Compare Match Flag Clear
        constexpr uint32_t CMPEXC7 = (1U << 7);  ///< D/A Converter 2 Channel: Compare Match Flag Clear
        constexpr uint32_t CMPEXC8 = (1U << 8);  ///< D/A Converter 3 Channel: Compare Match Flag Clear
    }

    /// ADLIMGRSR Register bits
    namespace adlimgrsr_bits {
        constexpr uint32_t LIMGRF0 = (1U << 0);  ///< Scan Group n Limiter Clip Flag
        constexpr uint32_t LIMGRF1 = (1U << 1);  ///< Scan Group n Limiter Clip Flag
        constexpr uint32_t LIMGRF2 = (1U << 2);  ///< Scan Group n Limiter Clip Flag
        constexpr uint32_t LIMGRF3 = (1U << 3);  ///< Scan Group n Limiter Clip Flag
        constexpr uint32_t LIMGRF4 = (1U << 4);  ///< Scan Group n Limiter Clip Flag
        constexpr uint32_t LIMGRF5 = (1U << 5);  ///< Scan Group n Limiter Clip Flag
        constexpr uint32_t LIMGRF6 = (1U << 6);  ///< Scan Group n Limiter Clip Flag
        constexpr uint32_t LIMGRF7 = (1U << 7);  ///< Scan Group n Limiter Clip Flag
        constexpr uint32_t LIMGRF8 = (1U << 8);  ///< Scan Group n Limiter Clip Flag
    }

    /// ADLIMCHSR0 Register bits
    namespace adlimchsr0_bits {
        constexpr uint32_t LIMCHF0 = (1U << 0);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF1 = (1U << 1);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF2 = (1U << 2);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF3 = (1U << 3);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF4 = (1U << 4);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF5 = (1U << 5);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF6 = (1U << 6);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF7 = (1U << 7);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF8 = (1U << 8);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF9 = (1U << 9);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF10 = (1U << 10);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF11 = (1U << 11);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF12 = (1U << 12);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF13 = (1U << 13);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF14 = (1U << 14);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF15 = (1U << 15);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF16 = (1U << 16);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF17 = (1U << 17);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF18 = (1U << 18);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF19 = (1U << 19);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF20 = (1U << 20);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF21 = (1U << 21);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF22 = (1U << 22);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF23 = (1U << 23);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF24 = (1U << 24);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF25 = (1U << 25);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF26 = (1U << 26);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF27 = (1U << 27);  ///< Analog Channel n: Limiter Clip Flag
        constexpr uint32_t LIMCHF28 = (1U << 28);  ///< Analog Channel n: Limiter Clip Flag
    }

    /// ADLIMEXSR Register bits
    namespace adlimexsr_bits {
        constexpr uint32_t LIMEXF0 = (1U << 0);  ///< Self-diagnosis Channel: Limiter Clip Flag
        constexpr uint32_t LIMEXF1 = (1U << 1);  ///< Temperature Sensor Channel: Limiter Clip Flag
        constexpr uint32_t LIMEXF2 = (1U << 2);  ///< Internal Reference Voltage Channel: Limiter Clip Flag
        constexpr uint32_t LIMEXF5 = (1U << 5);  ///< D/A Converter 0 Channel: Limiter Clip Flag
        constexpr uint32_t LIMEXF6 = (1U << 6);  ///< D/A Converter 1 Channel: Limiter Clip Flag
        constexpr uint32_t LIMEXF7 = (1U << 7);  ///< D/A Converter 2 Channel: Limiter Clip Flag
        constexpr uint32_t LIMEXF8 = (1U << 8);  ///< D/A Converter 3 Channel: Limiter Clip Flag
    }

    /// ADLIMGRSCR Register bits
    namespace adlimgrscr_bits {
        constexpr uint32_t LIMGRC0 = (1U << 0);  ///< Scan Group n Limiter Clip Flag Clear
        constexpr uint32_t LIMGRC1 = (1U << 1);  ///< Scan Group n Limiter Clip Flag Clear
        constexpr uint32_t LIMGRC2 = (1U << 2);  ///< Scan Group n Limiter Clip Flag Clear
        constexpr uint32_t LIMGRC3 = (1U << 3);  ///< Scan Group n Limiter Clip Flag Clear
        constexpr uint32_t LIMGRC4 = (1U << 4);  ///< Scan Group n Limiter Clip Flag Clear
        constexpr uint32_t LIMGRC5 = (1U << 5);  ///< Scan Group n Limiter Clip Flag Clear
        constexpr uint32_t LIMGRC6 = (1U << 6);  ///< Scan Group n Limiter Clip Flag Clear
        constexpr uint32_t LIMGRC7 = (1U << 7);  ///< Scan Group n Limiter Clip Flag Clear
        constexpr uint32_t LIMGRC8 = (1U << 8);  ///< Scan Group n Limiter Clip Flag Clear
    }

    /// ADLIMCHSCR0 Register bits
    namespace adlimchscr0_bits {
        constexpr uint32_t LIMCHC0 = (1U << 0);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC1 = (1U << 1);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC2 = (1U << 2);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC3 = (1U << 3);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC4 = (1U << 4);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC5 = (1U << 5);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC6 = (1U << 6);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC7 = (1U << 7);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC8 = (1U << 8);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC9 = (1U << 9);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC10 = (1U << 10);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC11 = (1U << 11);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC12 = (1U << 12);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC13 = (1U << 13);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC14 = (1U << 14);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC15 = (1U << 15);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC16 = (1U << 16);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC17 = (1U << 17);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC18 = (1U << 18);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC19 = (1U << 19);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC20 = (1U << 20);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC21 = (1U << 21);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC22 = (1U << 22);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC23 = (1U << 23);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC24 = (1U << 24);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC25 = (1U << 25);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC26 = (1U << 26);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC27 = (1U << 27);  ///< Analog Channel n Limiter Clip Flag Clear bit
        constexpr uint32_t LIMCHC28 = (1U << 28);  ///< Analog Channel n Limiter Clip Flag Clear bit
    }

    /// ADLIMEXSCR Register bits
    namespace adlimexscr_bits {
        constexpr uint32_t LIMEXF0 = (1U << 0);  ///< Self-diagnosis Channel: Limiter Clip Flag Clear
        constexpr uint32_t LIMEXF1 = (1U << 1);  ///< Temperature Sensor Channel: Limiter Clip Flag Clear
        constexpr uint32_t LIMEXF2 = (1U << 2);  ///< Internal Reference Voltage Channel: Limiter Clip Flag Clear
        constexpr uint32_t LIMEXF5 = (1U << 5);  ///< D/A Converter 0 Channel: Limiter Clip Flag Clear
        constexpr uint32_t LIMEXF6 = (1U << 6);  ///< D/A Converter 1 Channel: Limiter Clip Flag Clear
        constexpr uint32_t LIMEXF7 = (1U << 7);  ///< D/A Converter 2 Channel: Limiter Clip Flag Clear
        constexpr uint32_t LIMEXF8 = (1U << 8);  ///< D/A Converter 3 Channel: Limiter Clip Flag Clear
    }

    /// ADSCANENDSR Register bits
    namespace adscanendsr_bits {
        constexpr uint32_t SCENDF0 = (1U << 0);  ///< Scan Group n Scan End Flag
        constexpr uint32_t SCENDF1 = (1U << 1);  ///< Scan Group n Scan End Flag
        constexpr uint32_t SCENDF2 = (1U << 2);  ///< Scan Group n Scan End Flag
        constexpr uint32_t SCENDF3 = (1U << 3);  ///< Scan Group n Scan End Flag
        constexpr uint32_t SCENDF4 = (1U << 4);  ///< Scan Group n Scan End Flag
        constexpr uint32_t SCENDF5 = (1U << 5);  ///< Scan Group n Scan End Flag
        constexpr uint32_t SCENDF6 = (1U << 6);  ///< Scan Group n Scan End Flag
        constexpr uint32_t SCENDF7 = (1U << 7);  ///< Scan Group n Scan End Flag
        constexpr uint32_t SCENDF8 = (1U << 8);  ///< Scan Group n Scan End Flag
    }

    /// ADSCANENDSCR Register bits
    namespace adscanendscr_bits {
        constexpr uint32_t SCENDC0 = (1U << 0);  ///< Scan Group n Scan End Flag Clear
        constexpr uint32_t SCENDC1 = (1U << 1);  ///< Scan Group n Scan End Flag Clear
        constexpr uint32_t SCENDC2 = (1U << 2);  ///< Scan Group n Scan End Flag Clear
        constexpr uint32_t SCENDC3 = (1U << 3);  ///< Scan Group n Scan End Flag Clear
        constexpr uint32_t SCENDC4 = (1U << 4);  ///< Scan Group n Scan End Flag Clear
        constexpr uint32_t SCENDC5 = (1U << 5);  ///< Scan Group n Scan End Flag Clear
        constexpr uint32_t SCENDC6 = (1U << 6);  ///< Scan Group n Scan End Flag Clear
        constexpr uint32_t SCENDC7 = (1U << 7);  ///< Scan Group n Scan End Flag Clear
        constexpr uint32_t SCENDC8 = (1U << 8);  ///< Scan Group n Scan End Flag Clear
    }

    /// ADDR Register bits
    namespace addr_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< A/D conversion data
        constexpr uint32_t ERR = (1U << 31);  ///< A/D conversion data error status
    }

    /// ADEXDR Register bits
    namespace adexdr_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< A/D conversion data
        constexpr uint32_t DIAGSR = (3 << 24);  ///< Self-diagnosis Status
        constexpr uint32_t ERR = (1U << 31);  ///< A/D Conversion Error Status
    }

    /// ADFIFODR Register bits
    namespace adfifodr_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< A/D Conversion Data
        constexpr uint32_t CH = (7 << 24);  ///< A/D Conversion Channel Number
        constexpr uint32_t ERR = (1U << 31);  ///< A/D Conversion Data Error Status
    }

}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DAC120_BASE = 0x40172000;
    constexpr uint32_t DAC121_BASE = 0x40172100;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t DADR;  ///< Offset: 0x00 - D/A Data Register %s (renamed from DADR)
        volatile uint32_t DACR;  ///< Offset: 0x04 - D/A Control Register
        volatile uint32_t DADPR;  ///< Offset: 0x05 - DADRn Format Select Register
        volatile uint32_t DAAMPCR;  ///< Offset: 0x08 - D/A Output Amplifier Control Register
        volatile uint32_t DAASWCR;  ///< Offset: 0x1C - D/A Amplifier Stabilization Wait Control Register
    };

    /// Peripheral instances
    inline Registers* DAC120 = reinterpret_cast<Registers*>(DAC120_BASE);
    inline Registers* DAC121 = reinterpret_cast<Registers*>(DAC121_BASE);

    // Bit definitions
    /// DACR Register bits
    namespace dacr_bits {
        constexpr uint32_t DAE = (1U << 5);  ///< D/A Enable
        constexpr uint32_t DAOE0 = (1U << 6);  ///< D/A Output Enable 0
        constexpr uint32_t DAOE1 = (1U << 7);  ///< D/A Output Enable 1
    }

    /// DADPR Register bits
    namespace dadpr_bits {
        constexpr uint32_t DPSEL = (1U << 7);  ///< DADRn Format Select
    }

    /// DAAMPCR Register bits
    namespace daampcr_bits {
        constexpr uint32_t DAAMP0 = (1U << 6);  ///< Amplifier Control 0
        constexpr uint32_t DAAMP1 = (1U << 7);  ///< Amplifier Control 1
    }

    /// DAASWCR Register bits
    namespace daaswcr_bits {
        constexpr uint32_t DAASW0 = (1U << 6);  ///< D/A Amplifier Stabilization Wait 0 and D/A internal output control
        constexpr uint32_t DAASW1 = (1U << 7);  ///< D/A Amplifier Stabilization Wait 1 and D/A internal output control
    }

}

// ============================================================================
// TSD Peripheral
// ============================================================================

namespace tsd {
    /// Base addresses
    constexpr uint32_t TSD_BASE = 0x407FB000;

    /// TSD Register structure
    struct Registers {
        volatile uint32_t TSCDR;  ///< Offset: 0x17C - Temperature Sensor Calibration Data Register
    };

    /// Peripheral instances
    inline Registers* TSD = reinterpret_cast<Registers*>(TSD_BASE);

    // Bit definitions
    /// TSCDR Register bits
    namespace tscdr_bits {
        constexpr uint32_t TSCDR = (16 << 0);  ///< Temperature Sensor Calibration Data
    }

}

// ============================================================================
// FLAD Peripheral
// ============================================================================

namespace flad {
    /// Base addresses
    constexpr uint32_t FLAD_BASE = 0x407FC000;

    /// FLAD Register structure
    struct Registers {
        volatile uint32_t FCKMHZ;  ///< Offset: 0x40 - Data Flash Access Frequency Register
    };

    /// Peripheral instances
    inline Registers* FLAD = reinterpret_cast<Registers*>(FLAD_BASE);

    // Bit definitions
    /// FCKMHZ Register bits
    namespace fckmhz_bits {
        constexpr uint32_t FCKMHZ = (8 << 0);  ///< Data Flash Access Frequency Register
    }

}

// ============================================================================
// FACI Peripheral
// ============================================================================

namespace faci {
    /// Base addresses
    constexpr uint32_t FACI_BASE = 0x407FE000;

    /// FACI Register structure
    struct Registers {
        volatile uint32_t FASTAT;  ///< Offset: 0x10 - Flash Access Status Register
        volatile uint32_t FAEINT;  ///< Offset: 0x14 - Flash Access Error Interrupt Enable Register
        volatile uint32_t FRDYIE;  ///< Offset: 0x18 - Flash Ready Interrupt Enable Register
        volatile uint32_t FSADDR;  ///< Offset: 0x30 - FACI Command Start Address Register
        volatile uint32_t FEADDR;  ///< Offset: 0x34 - FACI Command End Address Register
        volatile uint32_t FMEPROT;  ///< Offset: 0x44 - Flash P/E Mode Entry Protection Register
        volatile uint32_t FBPROT0;  ///< Offset: 0x78 - Flash Block Protection Register
        volatile uint32_t FBPROT1;  ///< Offset: 0x7C - Flash Block Protection for Secure Register
        volatile uint32_t FSTATR;  ///< Offset: 0x80 - Flash Status Register
        volatile uint32_t FENTRYR;  ///< Offset: 0x84 - Flash P/E Mode Entry Register
        volatile uint32_t FSUINITR;  ///< Offset: 0x8C - Flash Sequencer Setup Initialization Register
        volatile uint32_t FCMDR;  ///< Offset: 0xA0 - FACI Command Register
        volatile uint32_t FBCCNT;  ///< Offset: 0xD0 - Blank Check Control Register
        volatile uint32_t FBCSTAT;  ///< Offset: 0xD4 - Blank Check Status Register
        volatile uint32_t FPSADDR;  ///< Offset: 0xD8 - Data Flash Programming Start Address Register
        volatile uint32_t FSUASMON;  ///< Offset: 0xDC - Flash Startup Area Select Monitor Register
        volatile uint32_t FCPSR;  ///< Offset: 0xE0 - Flash Sequencer Processing Switching Register
        volatile uint32_t FPCKAR;  ///< Offset: 0xE4 - Flash Sequencer Processing Clock Notification Register
        volatile uint32_t FSUACR;  ///< Offset: 0xE8 - Flash Startup Area Control Register
    };

    /// Peripheral instances
    inline Registers* FACI = reinterpret_cast<Registers*>(FACI_BASE);

    // Bit definitions
    /// FASTAT Register bits
    namespace fastat_bits {
        constexpr uint32_t DFAE = (1U << 3);  ///< Data Flash Memory Access Violation Flag
        constexpr uint32_t CMDLK = (1U << 4);  ///< Command Lock Flag
        constexpr uint32_t CFAE = (1U << 7);  ///< Code Flash Memory Access Violation Flag
    }

    /// FAEINT Register bits
    namespace faeint_bits {
        constexpr uint32_t DFAEIE = (1U << 3);  ///< Data Flash Memory Access Violation Interrupt Enable
        constexpr uint32_t CMDLKIE = (1U << 4);  ///< Command Lock Interrupt Enable
        constexpr uint32_t CFAEIE = (1U << 7);  ///< Code Flash Memory Access Violation Interrupt Enable
    }

    /// FRDYIE Register bits
    namespace frdyie_bits {
        constexpr uint32_t FRDYIE = (1U << 0);  ///< Flash Ready Interrupt Enable
    }

    /// FEADDR Register bits
    namespace feaddr_bits {
        constexpr uint32_t FEADDR = (32 << 0);  ///< End Address for FACI Command Processing
    }

    /// FMEPROT Register bits
    namespace fmeprot_bits {
        constexpr uint32_t CEPROT = (1U << 0);  ///< Code Flash P/E Mode Entry Protection
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

    /// FBPROT0 Register bits
    namespace fbprot0_bits {
        constexpr uint32_t BPCN0 = (1U << 0);  ///< Block Protection for Non-secure Cancel
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

    /// FBPROT1 Register bits
    namespace fbprot1_bits {
        constexpr uint32_t BPCN1 = (1U << 0);  ///< Block Protection for Secure Cancel
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

    /// FSTATR Register bits
    namespace fstatr_bits {
        constexpr uint32_t FLWEERR = (1U << 6);  ///< Flash Write/Erase Protect Error Flag
        constexpr uint32_t PRGSPD = (1U << 8);  ///< Programming Suspend Status Flag
        constexpr uint32_t ERSSPD = (1U << 9);  ///< Erasure Suspend Status Flag
        constexpr uint32_t DBFULL = (1U << 10);  ///< Data Buffer Full Flag
        constexpr uint32_t SUSRDY = (1U << 11);  ///< Suspend Ready Flag
        constexpr uint32_t PRGERR = (1U << 12);  ///< Programming Error Flag
        constexpr uint32_t ERSERR = (1U << 13);  ///< Erasure Error Flag
        constexpr uint32_t ILGLERR = (1U << 14);  ///< Illegal Command Error Flag
        constexpr uint32_t FRDY = (1U << 15);  ///< Flash Ready Flag
        constexpr uint32_t OTERR = (1U << 20);  ///< Other Error
        constexpr uint32_t SECERR = (1U << 21);  ///< Security Error
        constexpr uint32_t FESETERR = (1U << 22);  ///< FENTRY Setting Error
        constexpr uint32_t ILGCOMERR = (1U << 23);  ///< Illegal Command Error
    }

    /// FENTRYR Register bits
    namespace fentryr_bits {
        constexpr uint32_t FENTRYC = (1U << 0);  ///< Code Flash P/E Mode Entry
        constexpr uint32_t FENTRYD = (1U << 7);  ///< Data Flash P/E Mode Entry
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

    /// FSUINITR Register bits
    namespace fsuinitr_bits {
        constexpr uint32_t SUINIT = (1U << 0);  ///< Set-Up Initialization
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

    /// FCMDR Register bits
    namespace fcmdr_bits {
        constexpr uint32_t PCMDR = (8 << 0);  ///< Pre-command Flag
        constexpr uint32_t CMDR = (8 << 8);  ///< Command Flag
    }

    /// FBCCNT Register bits
    namespace fbccnt_bits {
        constexpr uint32_t BCDIR = (1U << 0);  ///< Blank Check Direction
    }

    /// FBCSTAT Register bits
    namespace fbcstat_bits {
        constexpr uint32_t BCST = (1U << 0);  ///< Blank Check Status Flag
    }

    /// FPSADDR Register bits
    namespace fpsaddr_bits {
        constexpr uint32_t PSADR = (17 << 0);  ///< Programmed Area Start Address
    }

    /// FSUASMON Register bits
    namespace fsuasmon_bits {
        constexpr uint32_t FSPR = (1U << 15);  ///< Protection Programming Flag to set Boot Flag and Startup Area Control
        constexpr uint32_t BTFLG = (1U << 31);  ///< Flag of Startup Area Select for Boot Swap
    }

    /// FCPSR Register bits
    namespace fcpsr_bits {
        constexpr uint32_t ESUSPMD = (1U << 0);  ///< Erasure Suspend Mode
    }

    /// FPCKAR Register bits
    namespace fpckar_bits {
        constexpr uint32_t PCKA = (8 << 0);  ///< Flash Sequencer Operating Clock Notification
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

    /// FSUACR Register bits
    namespace fsuacr_bits {
        constexpr uint32_t SAS = (2 << 0);  ///< Startup Area Select
        constexpr uint32_t KEY = (8 << 8);  ///< Key Code
    }

}


} // namespace alloy::generated::r7fa6t2bd

#endif // ALLOY_GENERATED_R7FA6T2BD_PERIPHERALS_HPP