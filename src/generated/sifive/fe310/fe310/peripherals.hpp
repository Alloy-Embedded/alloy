/// Auto-generated code for FE310
/// Generated by Alloy Code Generator
/// Source: sifive_community_e310x.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 17:44:57
#ifndef ALLOY_GENERATED_FE310_PERIPHERALS_HPP
#define ALLOY_GENERATED_FE310_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::fe310 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_clint = true;
    constexpr uint32_t num_clint_instances = 1;
    constexpr bool has_plic = true;
    constexpr uint32_t num_plic_instances = 1;
    constexpr bool has_wdog = true;
    constexpr uint32_t num_wdog_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;
    constexpr bool has_aonclk = true;
    constexpr uint32_t num_aonclk_instances = 1;
    constexpr bool has_backup = true;
    constexpr uint32_t num_backup_instances = 1;
    constexpr bool has_pmu = true;
    constexpr uint32_t num_pmu_instances = 1;
    constexpr bool has_prci = true;
    constexpr uint32_t num_prci_instances = 1;
    constexpr bool has_otp = true;
    constexpr uint32_t num_otp_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 1;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 2;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 3;
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 3;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct clint_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct plic_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdog_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct aonclk_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct backup_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pmu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct prci_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct otp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 1;
    constexpr uint32_t max_gpio_pins = 16;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_uart0 = true;
    constexpr bool has_uart1 = true;
}

// ============================================================================
// CLINT Peripheral
// ============================================================================

namespace clint {
    /// Base addresses
    constexpr uint32_t CLINT_BASE = 0x02000000;

    /// CLINT Register structure
    struct Registers {
        volatile uint32_t msip;  ///< Offset: 0x00 - Hart 0 software interrupt register
        volatile uint32_t mtimecmp;  ///< Offset: 0x4000 - Hart 0 time comparator register
        volatile uint32_t mtimecmph;  ///< Offset: 0x4004 - Hart 0 time comparator register
        volatile uint32_t mtime;  ///< Offset: 0xBFF8 - Timer register
        volatile uint32_t mtimeh;  ///< Offset: 0xBFFC - Timer register
    };

    /// Peripheral instances
    inline Registers* CLINT = reinterpret_cast<Registers*>(CLINT_BASE);

}

// ============================================================================
// PLIC Peripheral
// ============================================================================

namespace plic {
    /// Base addresses
    constexpr uint32_t PLIC_BASE = 0x0C000000;

    /// PLIC Register structure
    struct Registers {
        volatile uint32_t priority__;  ///< Offset: 0x00 - Interrupt Priority Register (renamed from priority__)
        volatile uint32_t pending__;  ///< Offset: 0x1000 - Interrupt Pending Register (renamed from pending__)
        volatile uint32_t enable__;  ///< Offset: 0x2000 - Interrupt Enable Register (renamed from enable__)
        volatile uint32_t threshold;  ///< Offset: 0x200000 - Priority Threshold Register
        volatile uint32_t claim;  ///< Offset: 0x200004 - Claim/Complete Register
    };

    /// Peripheral instances
    inline Registers* PLIC = reinterpret_cast<Registers*>(PLIC_BASE);

    // Bit definitions
    /// threshold Register bits
    namespace threshold_bits {
        constexpr uint32_t priority = (3 << 0);  ///< Never interrupt
    }

}

// ============================================================================
// WDOG Peripheral
// ============================================================================

namespace wdog {
    /// Base addresses
    constexpr uint32_t WDOG_BASE = 0x10000000;

    /// WDOG Register structure
    struct Registers {
        volatile uint32_t wdogcfg;  ///< Offset: 0x00 - Watchdog Configuration Register
        volatile uint32_t wdogcount;  ///< Offset: 0x08 - Watchdog Counter Register
        volatile uint32_t wdogs;  ///< Offset: 0x10 - Watchdog Scaled Counter Register
        volatile uint32_t wdogfeed;  ///< Offset: 0x18 - Watchdog Feed Register
        volatile uint32_t wdogkey;  ///< Offset: 0x1C - Watchdog Key Register
        volatile uint32_t wdogcmp;  ///< Offset: 0x20 - Watchdog Compare Register
    };

    /// Peripheral instances
    inline Registers* WDOG = reinterpret_cast<Registers*>(WDOG_BASE);

    // Bit definitions
    /// wdogcfg Register bits
    namespace wdogcfg_bits {
        constexpr uint32_t cmpip = (1U << 28);  ///< cmpip
        constexpr uint32_t encoreawake = (1U << 13);  ///< encoreawake
        constexpr uint32_t enalways = (1U << 12);  ///< enalways
        constexpr uint32_t zerocmp = (1U << 9);  ///< zerocmp
        constexpr uint32_t rsten = (1U << 8);  ///< rsten
        constexpr uint32_t scale = (4 << 0);  ///< scale
    }

    /// wdogcmp Register bits
    namespace wdogcmp_bits {
        constexpr uint32_t value = (16 << 0);  ///< value
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x10000000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t rtccfg;  ///< Offset: 0x40 - RTC Configuration Register
        volatile uint32_t rtclo;  ///< Offset: 0x48 - RTC Counter Low Register
        volatile uint32_t rtchi;  ///< Offset: 0x4C - RTC Counter High Register
        volatile uint32_t rtcs;  ///< Offset: 0x50 - RTC Scaled Counter Register
        volatile uint32_t rtccmp;  ///< Offset: 0x60 - RTC Compare Register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// rtccfg Register bits
    namespace rtccfg_bits {
        constexpr uint32_t cmpip = (1U << 28);  ///< cmpip
        constexpr uint32_t enalways = (1U << 12);  ///< enalways
        constexpr uint32_t scale = (4 << 0);  ///< scale
    }

    /// rtchi Register bits
    namespace rtchi_bits {
        constexpr uint32_t value = (16 << 0);  ///< value
    }

}

// ============================================================================
// AONCLK Peripheral
// ============================================================================

namespace aonclk {
    /// Base addresses
    constexpr uint32_t AONCLK_BASE = 0x10000000;

    /// AONCLK Register structure
    struct Registers {
        volatile uint32_t lfrosccfg;  ///< Offset: 0x70 - AON Clock Configuration Register
    };

    /// Peripheral instances
    inline Registers* AONCLK = reinterpret_cast<Registers*>(AONCLK_BASE);

    // Bit definitions
    /// lfrosccfg Register bits
    namespace lfrosccfg_bits {
        constexpr uint32_t ready = (1U << 31);  ///< ready
        constexpr uint32_t enable = (1U << 30);  ///< enable
        constexpr uint32_t div = (6 << 0);  ///< div
    }

}

// ============================================================================
// BACKUP Peripheral
// ============================================================================

namespace backup {
    /// Base addresses
    constexpr uint32_t BACKUP_BASE = 0x10000000;

    /// BACKUP Register structure
    struct Registers {
        volatile uint32_t backup__;  ///< Offset: 0x80 - Backup Register (renamed from backup__)
    };

    /// Peripheral instances
    inline Registers* BACKUP = reinterpret_cast<Registers*>(BACKUP_BASE);

}

// ============================================================================
// PMU Peripheral
// ============================================================================

namespace pmu {
    /// Base addresses
    constexpr uint32_t PMU_BASE = 0x10000000;

    /// PMU Register structure
    struct Registers {
        volatile uint32_t pmuwakepm__;  ///< Offset: 0x100 - PMU Wake Program Memory (renamed from pmuwakepm__)
        volatile uint32_t pmusleeppm__;  ///< Offset: 0x120 - PMU Sleep Program Memory (renamed from pmusleeppm__)
        volatile uint32_t pmuie;  ///< Offset: 0x140 - PMU Interrupt Enable Register
        volatile uint32_t pmucause;  ///< Offset: 0x144 - PMU Cause Register
        volatile uint32_t pmusleep;  ///< Offset: 0x148 - PMU Sleep Register
        volatile uint32_t pmukey;  ///< Offset: 0x14C - PMU Key Register
    };

    /// Peripheral instances
    inline Registers* PMU = reinterpret_cast<Registers*>(PMU_BASE);

    // Bit definitions
    /// pmuwakepm__ Register bits
    namespace pmuwakepm___bits {
        constexpr uint32_t isolate = (1U << 9);  ///< isolate
        constexpr uint32_t hfclkrst = (1U << 8);  ///< hfclkrst
        constexpr uint32_t corerst = (1U << 7);  ///< corerst
        constexpr uint32_t pmu_out_1_en = (1U << 5);  ///< pmu_out_1_en
        constexpr uint32_t pmu_out_0_en = (1U << 4);  ///< pmu_out_0_en
        constexpr uint32_t delay = (4 << 0);  ///< delay
    }

    /// pmusleeppm__ Register bits
    namespace pmusleeppm___bits {
        constexpr uint32_t isolate = (1U << 9);  ///< isolate
        constexpr uint32_t hfclkrst = (1U << 8);  ///< hfclkrst
        constexpr uint32_t corerst = (1U << 7);  ///< corerst
        constexpr uint32_t pmu_out_1_en = (1U << 5);  ///< pmu_out_1_en
        constexpr uint32_t pmu_out_0_en = (1U << 4);  ///< pmu_out_0_en
        constexpr uint32_t delay = (4 << 0);  ///< delay
    }

    /// pmuie Register bits
    namespace pmuie_bits {
        constexpr uint32_t awakeup = (1U << 3);  ///< awakeup
        constexpr uint32_t dwakeup = (1U << 2);  ///< dwakeup
        constexpr uint32_t rtc = (1U << 1);  ///< rtc
    }

    /// pmucause Register bits
    namespace pmucause_bits {
        constexpr uint32_t resetcause = (2 << 8);  ///< Power-on reset
        constexpr uint32_t wakeupcause = (2 << 0);  ///< Reset wakeup
    }

    /// pmusleep Register bits
    namespace pmusleep_bits {
        constexpr uint32_t sleep = (1U << 0);  ///< sleep
    }

}

// ============================================================================
// PRCI Peripheral
// ============================================================================

namespace prci {
    /// Base addresses
    constexpr uint32_t PRCI_BASE = 0x10008000;

    /// PRCI Register structure
    struct Registers {
        volatile uint32_t hfrosccfg;  ///< Offset: 0x00 - Clock Configuration Register
        volatile uint32_t hfxosccfg;  ///< Offset: 0x04 - Clock Configuration Register
        volatile uint32_t pllcfg;  ///< Offset: 0x08 - PLL Configuration Register
        volatile uint32_t plloutdiv;  ///< Offset: 0x0C - PLL Divider Register
        volatile uint32_t coreclkcfg;  ///< Offset: 0x10 - Clock Configuration Register
    };

    /// Peripheral instances
    inline Registers* PRCI = reinterpret_cast<Registers*>(PRCI_BASE);

    // Bit definitions
    /// hfrosccfg Register bits
    namespace hfrosccfg_bits {
        constexpr uint32_t ready = (1U << 31);  ///< ready
        constexpr uint32_t enable = (1U << 30);  ///< enable
        constexpr uint32_t trim = (5 << 16);  ///< trim
        constexpr uint32_t div = (6 << 0);  ///< div
    }

    /// hfxosccfg Register bits
    namespace hfxosccfg_bits {
        constexpr uint32_t ready = (1U << 31);  ///< ready
        constexpr uint32_t enable = (1U << 30);  ///< enable
    }

    /// pllcfg Register bits
    namespace pllcfg_bits {
        constexpr uint32_t lock = (1U << 31);  ///< lock
        constexpr uint32_t bypass = (1U << 18);  ///< bypass
        constexpr uint32_t refsel = (1U << 17);  ///< refsel
        constexpr uint32_t sel = (1U << 16);  ///< sel
        constexpr uint32_t pllq = (2 << 10);  ///< pllq
        constexpr uint32_t pllf = (6 << 4);  ///< pllf
        constexpr uint32_t pllr = (3 << 0);  ///< pllr
    }

    /// plloutdiv Register bits
    namespace plloutdiv_bits {
        constexpr uint32_t divby1 = (1U << 8);  ///< divby1
        constexpr uint32_t div = (6 << 0);  ///< div
    }

}

// ============================================================================
// OTP Peripheral
// ============================================================================

namespace otp {
    /// Base addresses
    constexpr uint32_t OTP_BASE = 0x10010000;

    /// OTP Register structure
    struct Registers {
        volatile uint32_t lock;  ///< Offset: 0x00 - Programmed-I/O lock register
        volatile uint32_t clock;  ///< Offset: 0x04 - OTP device clock signal
        volatile uint32_t output_en;  ///< Offset: 0x08 - OTP device output-enable signal
        volatile uint32_t select;  ///< Offset: 0x0C - OTP device chip-select signal
        volatile uint32_t write_en;  ///< Offset: 0x10 - OTP device write-enable signal
        volatile uint32_t mode;  ///< Offset: 0x14 - OTP device mode register
        volatile uint32_t mrr;  ///< Offset: 0x18 - OTP read-voltage regulator control
        volatile uint32_t mpp;  ///< Offset: 0x1C - OTP write-voltage charge pump control
        volatile uint32_t vrren;  ///< Offset: 0x20 - OTP read-voltage enable
        volatile uint32_t vppen;  ///< Offset: 0x24 - OTP write-voltage enable
        volatile uint32_t addr;  ///< Offset: 0x28 - OTP device address
        volatile uint32_t data_in;  ///< Offset: 0x2C - OTP device data input
        volatile uint32_t data_out;  ///< Offset: 0x30 - OTP device data output
        volatile uint32_t rsctrl;  ///< Offset: 0x34 - OTP read sequencer control
    };

    /// Peripheral instances
    inline Registers* OTP = reinterpret_cast<Registers*>(OTP_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO0_BASE = 0x10012000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t value;  ///< Offset: 0x00 - Pin value.
        volatile uint32_t input_en;  ///< Offset: 0x04 - Pin Input Enable Register
        volatile uint32_t output_en;  ///< Offset: 0x08 - Pin Output Enable Register
        volatile uint32_t port;  ///< Offset: 0x0C - Output Port Value Register
        volatile uint32_t pullup;  ///< Offset: 0x10 - Internal Pull-Up Enable Register
        volatile uint32_t drive;  ///< Offset: 0x14 - Drive Strength Register
        volatile uint32_t rise_ie;  ///< Offset: 0x18 - Rise Interrupt Enable Register
        volatile uint32_t rise_ip;  ///< Offset: 0x1C - Rise Interrupt Pending Register
        volatile uint32_t fall_ie;  ///< Offset: 0x20 - Fall Interrupt Enable Register
        volatile uint32_t fall_ip;  ///< Offset: 0x24 - Fall Interrupt Pending Register
        volatile uint32_t high_ie;  ///< Offset: 0x28 - High Interrupt Enable Register
        volatile uint32_t high_ip;  ///< Offset: 0x2C - High Interrupt Pending Register
        volatile uint32_t low_ie;  ///< Offset: 0x30 - Low Interrupt Enable Register
        volatile uint32_t low_ip;  ///< Offset: 0x34 - Low Interrupt Pending Register
        volatile uint32_t iof_en;  ///< Offset: 0x38 - HW I/O Function Enable Register
        volatile uint32_t iof_sel;  ///< Offset: 0x3C - HW I/O Function Select Register
        volatile uint32_t out_xor;  ///< Offset: 0x40 - Output XOR (invert) Register
    };

    /// Peripheral instances
    inline Registers* GPIO0 = reinterpret_cast<Registers*>(GPIO0_BASE);

    // Bit definitions
    /// value Register bits
    namespace value_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// input_en Register bits
    namespace input_en_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// output_en Register bits
    namespace output_en_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// port Register bits
    namespace port_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// pullup Register bits
    namespace pullup_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// drive Register bits
    namespace drive_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// rise_ie Register bits
    namespace rise_ie_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// rise_ip Register bits
    namespace rise_ip_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// fall_ie Register bits
    namespace fall_ie_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// fall_ip Register bits
    namespace fall_ip_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// high_ie Register bits
    namespace high_ie_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// high_ip Register bits
    namespace high_ip_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// low_ie Register bits
    namespace low_ie_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// low_ip Register bits
    namespace low_ip_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// iof_en Register bits
    namespace iof_en_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// iof_sel Register bits
    namespace iof_sel_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

    /// out_xor Register bits
    namespace out_xor_bits {
        constexpr uint32_t pin0 = (1U << 0);  ///< pin0
        constexpr uint32_t pin1 = (1U << 1);  ///< pin1
        constexpr uint32_t pin2 = (1U << 2);  ///< pin2
        constexpr uint32_t pin3 = (1U << 3);  ///< pin3
        constexpr uint32_t pin4 = (1U << 4);  ///< pin4
        constexpr uint32_t pin5 = (1U << 5);  ///< pin5
        constexpr uint32_t pin6 = (1U << 6);  ///< pin6
        constexpr uint32_t pin7 = (1U << 7);  ///< pin7
        constexpr uint32_t pin8 = (1U << 8);  ///< pin8
        constexpr uint32_t pin9 = (1U << 9);  ///< pin9
        constexpr uint32_t pin10 = (1U << 10);  ///< pin10
        constexpr uint32_t pin11 = (1U << 11);  ///< pin11
        constexpr uint32_t pin12 = (1U << 12);  ///< pin12
        constexpr uint32_t pin13 = (1U << 13);  ///< pin13
        constexpr uint32_t pin14 = (1U << 14);  ///< pin14
        constexpr uint32_t pin15 = (1U << 15);  ///< pin15
        constexpr uint32_t pin16 = (1U << 16);  ///< pin16
        constexpr uint32_t pin17 = (1U << 17);  ///< pin17
        constexpr uint32_t pin18 = (1U << 18);  ///< pin18
        constexpr uint32_t pin19 = (1U << 19);  ///< pin19
        constexpr uint32_t pin20 = (1U << 20);  ///< pin20
        constexpr uint32_t pin21 = (1U << 21);  ///< pin21
        constexpr uint32_t pin22 = (1U << 22);  ///< pin22
        constexpr uint32_t pin23 = (1U << 23);  ///< pin23
        constexpr uint32_t pin24 = (1U << 24);  ///< pin24
        constexpr uint32_t pin25 = (1U << 25);  ///< pin25
        constexpr uint32_t pin26 = (1U << 26);  ///< pin26
        constexpr uint32_t pin27 = (1U << 27);  ///< pin27
        constexpr uint32_t pin28 = (1U << 28);  ///< pin28
        constexpr uint32_t pin29 = (1U << 29);  ///< pin29
        constexpr uint32_t pin30 = (1U << 30);  ///< pin30
        constexpr uint32_t pin31 = (1U << 31);  ///< pin31
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART0_BASE = 0x10013000;
    constexpr uint32_t UART1_BASE = 0x10023000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t txdata;  ///< Offset: 0x00 - Transmit Data Register
        volatile uint32_t rxdata;  ///< Offset: 0x04 - Receive Data Register
        volatile uint32_t txctrl;  ///< Offset: 0x08 - Transmit Control Register
        volatile uint32_t rxctrl;  ///< Offset: 0x0C - Receive Control Register
        volatile uint32_t ie;  ///< Offset: 0x10 - Interrupt Enable Register
        volatile uint32_t ip;  ///< Offset: 0x14 - Interrupt Pending Register
        volatile uint32_t div;  ///< Offset: 0x18 - Baud Rate Divisor Register
    };

    /// Peripheral instances
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);
    inline Registers* UART1 = reinterpret_cast<Registers*>(UART1_BASE);

    // Bit definitions
    /// txdata Register bits
    namespace txdata_bits {
        constexpr uint32_t full = (1U << 31);  ///< full
        constexpr uint32_t data = (8 << 0);  ///< data
    }

    /// rxdata Register bits
    namespace rxdata_bits {
        constexpr uint32_t empty = (1U << 31);  ///< empty
        constexpr uint32_t data = (8 << 0);  ///< data
    }

    /// txctrl Register bits
    namespace txctrl_bits {
        constexpr uint32_t counter = (3 << 16);  ///< counter
        constexpr uint32_t nstop = (1U << 1);  ///< nstop
        constexpr uint32_t enable = (1U << 0);  ///< enable
    }

    /// rxctrl Register bits
    namespace rxctrl_bits {
        constexpr uint32_t counter = (3 << 16);  ///< counter
        constexpr uint32_t enable = (1U << 0);  ///< enable
    }

    /// ie Register bits
    namespace ie_bits {
        constexpr uint32_t rxwm = (1U << 1);  ///< rxwm
        constexpr uint32_t txwm = (1U << 0);  ///< txwm
    }

    /// ip Register bits
    namespace ip_bits {
        constexpr uint32_t rxwm = (1U << 1);  ///< rxwm
        constexpr uint32_t txwm = (1U << 0);  ///< txwm
    }

    /// div Register bits
    namespace div_bits {
        constexpr uint32_t value = (16 << 0);  ///< value
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t QSPI0_BASE = 0x10014000;
    constexpr uint32_t QSPI1_BASE = 0x10024000;
    constexpr uint32_t QSPI2_BASE = 0x10034000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t div;  ///< Offset: 0x00 - Serial Clock Divisor Register
        volatile uint32_t mode;  ///< Offset: 0x04 - Serial Clock Mode Register
        volatile uint32_t csid;  ///< Offset: 0x10 - Chip Select ID Register
        volatile uint32_t csdef;  ///< Offset: 0x14 - Chip Select Default Register
        volatile uint32_t csmode;  ///< Offset: 0x18 - Chip Select Mode Register
        volatile uint32_t delay0;  ///< Offset: 0x28 - Delay Control 0 Register
        volatile uint32_t delay1;  ///< Offset: 0x2C - Delay Control 1 Register
        volatile uint32_t fmt;  ///< Offset: 0x40 - Frame Format Register
        volatile uint32_t txdata;  ///< Offset: 0x48 - Transmit Data Register
        volatile uint32_t rxdata;  ///< Offset: 0x4C - Receive Data Register
        volatile uint32_t txmark;  ///< Offset: 0x50 - Transmit Watermark Register
        volatile uint32_t rxmark;  ///< Offset: 0x54 - Receive Watermark Register
        volatile uint32_t fctrl;  ///< Offset: 0x60 - SPI Flash Interface Control Register
        volatile uint32_t ffmt;  ///< Offset: 0x64 - SPI Flash Instruction Format Register
        volatile uint32_t ie;  ///< Offset: 0x70 - SPI Interrupt Enable Register
        volatile uint32_t ip;  ///< Offset: 0x74 - SPI Interrupt Pending Register
    };

    /// Peripheral instances
    inline Registers* QSPI0 = reinterpret_cast<Registers*>(QSPI0_BASE);
    inline Registers* QSPI1 = reinterpret_cast<Registers*>(QSPI1_BASE);
    inline Registers* QSPI2 = reinterpret_cast<Registers*>(QSPI2_BASE);

    // Bit definitions
    /// div Register bits
    namespace div_bits {
        constexpr uint32_t value = (12 << 0);  ///< value
    }

    /// mode Register bits
    namespace mode_bits {
        constexpr uint32_t polarity = (1U << 1);  ///< polarity
        constexpr uint32_t phase = (1U << 0);  ///< phase
    }

    /// delay0 Register bits
    namespace delay0_bits {
        constexpr uint32_t sckcs = (8 << 16);  ///< sckcs
        constexpr uint32_t cssck = (8 << 0);  ///< cssck
    }

    /// delay1 Register bits
    namespace delay1_bits {
        constexpr uint32_t interxfr = (8 << 16);  ///< interxfr
        constexpr uint32_t intercs = (8 << 0);  ///< intercs
    }

    /// fmt Register bits
    namespace fmt_bits {
        constexpr uint32_t length = (4 << 16);  ///< length
        constexpr uint32_t direction = (1U << 3);  ///< For dual and quad protocols, the DQ pins are tri-stated. For the single protocol, the DQ0 pin is driven with the transmit data as normal.
        constexpr uint32_t endian = (1U << 2);  ///< Transmit MSB first.
        constexpr uint32_t protocol = (2 << 0);  ///< DQ0 (MOSI), DQ1 (MISO)
    }

    /// txdata Register bits
    namespace txdata_bits {
        constexpr uint32_t full = (1U << 31);  ///< full
        constexpr uint32_t data = (8 << 0);  ///< data
    }

    /// rxdata Register bits
    namespace rxdata_bits {
        constexpr uint32_t empty = (1U << 31);  ///< empty
        constexpr uint32_t data = (8 << 0);  ///< data
    }

    /// txmark Register bits
    namespace txmark_bits {
        constexpr uint32_t value = (3 << 0);  ///< value
    }

    /// rxmark Register bits
    namespace rxmark_bits {
        constexpr uint32_t value = (3 << 0);  ///< value
    }

    /// fctrl Register bits
    namespace fctrl_bits {
        constexpr uint32_t enable = (1U << 0);  ///< enable
    }

    /// ffmt Register bits
    namespace ffmt_bits {
        constexpr uint32_t pad_code = (8 << 24);  ///< First 8 bits to transmit during dummy cycles
        constexpr uint32_t cmd_code = (8 << 16);  ///< Value of command byte
        constexpr uint32_t data_proto = (2 << 12);  ///< Protocol for receiving data bytes
        constexpr uint32_t addr_proto = (2 << 10);  ///< Protocol for transmitting address and padding
        constexpr uint32_t cmd_proto = (2 << 8);  ///< Protocol for transmitting command
        constexpr uint32_t pad_cnt = (1U << 0);  ///< Number of dummy cycles
        constexpr uint32_t addr_len = (3 << 1);  ///< Number of address bytes (0 to 4)
        constexpr uint32_t cmd_en = (1U << 0);  ///< Enable sending of command
    }

    /// ie Register bits
    namespace ie_bits {
        constexpr uint32_t rxwm = (1U << 1);  ///< rxwm
        constexpr uint32_t txwm = (1U << 0);  ///< txwm
    }

    /// ip Register bits
    namespace ip_bits {
        constexpr uint32_t rxwm = (1U << 1);  ///< rxwm
        constexpr uint32_t txwm = (1U << 0);  ///< txwm
    }

}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t PWM0_BASE = 0x10015000;
    constexpr uint32_t PWM1_BASE = 0x10025000;
    constexpr uint32_t PWM2_BASE = 0x10035000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t cfg;  ///< Offset: 0x00 - PWM Configuration Register
        volatile uint32_t count;  ///< Offset: 0x08 - Counter Register
        volatile uint32_t pwms;  ///< Offset: 0x10 - Scaled Halfword Counter Register
        volatile uint32_t cmp0;  ///< Offset: 0x20 - Compare Register
        volatile uint32_t cmp1;  ///< Offset: 0x24 - Compare Register
        volatile uint32_t cmp2;  ///< Offset: 0x28 - Compare Register
        volatile uint32_t cmp3;  ///< Offset: 0x2C - Compare Register
    };

    /// Peripheral instances
    inline Registers* PWM0 = reinterpret_cast<Registers*>(PWM0_BASE);
    inline Registers* PWM1 = reinterpret_cast<Registers*>(PWM1_BASE);
    inline Registers* PWM2 = reinterpret_cast<Registers*>(PWM2_BASE);

    // Bit definitions
    /// cfg Register bits
    namespace cfg_bits {
        constexpr uint32_t cmp3ip = (1U << 31);  ///< cmp3ip
        constexpr uint32_t cmp2ip = (1U << 30);  ///< cmp2ip
        constexpr uint32_t cmp1ip = (1U << 29);  ///< cmp1ip
        constexpr uint32_t cmp0ip = (1U << 28);  ///< cmp0ip
        constexpr uint32_t cmp3gang = (1U << 27);  ///< cmp3gang
        constexpr uint32_t cmp2gang = (11 << 26);  ///< cmp2gang
        constexpr uint32_t cmp1gang = (1U << 25);  ///< cmp1gang
        constexpr uint32_t cmp0gang = (1U << 24);  ///< cmp0gang
        constexpr uint32_t cmp3center = (1U << 19);  ///< cmp3center
        constexpr uint32_t cmp2center = (1U << 18);  ///< cmp2center
        constexpr uint32_t cmp1center = (1U << 17);  ///< cmp1center
        constexpr uint32_t cmp0center = (1U << 16);  ///< cmp0center
        constexpr uint32_t enoneshot = (1U << 13);  ///< enoneshot
        constexpr uint32_t enalways = (1U << 12);  ///< enalways
        constexpr uint32_t deglitch = (1U << 10);  ///< deglitch
        constexpr uint32_t zerocmp = (1U << 9);  ///< zerocmp
        constexpr uint32_t sticky = (1U << 8);  ///< sticky
        constexpr uint32_t scale = (4 << 0);  ///< scale
    }

    /// cmp0 Register bits
    namespace cmp0_bits {
        constexpr uint32_t value = (16 << 0);  ///< value
    }

    /// cmp1 Register bits
    namespace cmp1_bits {
        constexpr uint32_t value = (16 << 0);  ///< value
    }

    /// cmp2 Register bits
    namespace cmp2_bits {
        constexpr uint32_t value = (16 << 0);  ///< value
    }

    /// cmp3 Register bits
    namespace cmp3_bits {
        constexpr uint32_t value = (16 << 0);  ///< value
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C0_BASE = 0x10016000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t prer_lo;  ///< Offset: 0x00 - Clock Prescale register lo-byte
        volatile uint32_t prer_hi;  ///< Offset: 0x04 - Clock Prescale register hi-byte
        volatile uint32_t ctr;  ///< Offset: 0x08 - Control register
        volatile uint32_t txr_rxr;  ///< Offset: 0x0C - Transmit register / Receive register
        volatile uint32_t cr_sr;  ///< Offset: 0x10 - Command register / Status register
        volatile uint32_t cr;  ///< Offset: 0x10 - Command register
        volatile uint32_t sr;  ///< Offset: 0x10 - Status register
    };

    /// Peripheral instances
    inline Registers* I2C0 = reinterpret_cast<Registers*>(I2C0_BASE);

}


} // namespace alloy::generated::fe310

#endif // ALLOY_GENERATED_FE310_PERIPHERALS_HPP