/// Auto-generated code for FU540
/// Generated by Alloy Code Generator
/// Source: sifive-community_fu540.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:00:44
#ifndef ALLOY_GENERATED_FU540_PERIPHERALS_HPP
#define ALLOY_GENERATED_FU540_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::fu540 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_msel = true;
    constexpr uint32_t num_msel_instances = 1;
    constexpr bool has_prci = true;
    constexpr uint32_t num_prci_instances = 1;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 2;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct msel_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct prci_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 2;
    };

    // GPIO-specific traits

    // USART-specific traits
    constexpr bool has_uart0 = true;
    constexpr bool has_uart1 = true;
}

// ============================================================================
// MSEL Peripheral
// ============================================================================

namespace msel {
    /// Base addresses
    constexpr uint32_t MSEL_BASE = 0x00001000;

    /// MSEL Register structure
    struct Registers {
        volatile uint32_t MSEL;  ///< Offset: 0x00 - The MSEL pin state
    };

    /// Peripheral instances
    inline Registers* MSEL = reinterpret_cast<Registers*>(MSEL_BASE);

}

// ============================================================================
// PRCI Peripheral
// ============================================================================

namespace prci {
    /// Base addresses
    constexpr uint32_t PRCI_BASE = 0x10000000;

    /// PRCI Register structure
    struct Registers {
        volatile uint32_t hfxosccfg;  ///< Offset: 0x00 - Crystal Input Control Register
        volatile uint32_t corepllcfg0;  ///< Offset: 0x04 - Core PLL Configuration Register
        volatile uint32_t ddrpllcfg0;  ///< Offset: 0x0C - DDR PLL Configuration Register
        volatile uint32_t ddrpllcfg1;  ///< Offset: 0x10 - DDR PLL Configuration Register
        volatile uint32_t gemgxlpllcfg0;  ///< Offset: 0x1C - Gigabit Ethernet PLL Configuration Register
        volatile uint32_t gemgxlpllcfg1;  ///< Offset: 0x20 - Gigabit Ethernet PLL Configuration Register
        volatile uint32_t coreclksel;  ///< Offset: 0x24 - CORECLK Source Selection Register
        volatile uint32_t devicesresetreg;  ///< Offset: 0x28 - Peripheral Devices Reset Control Register
        volatile uint32_t clkmuxstatus;  ///< Offset: 0x2C - CLKMUX Status Register
        volatile uint32_t procmoncfg;  ///< Offset: 0xF0 - PROCMON Configuration Register
    };

    /// Peripheral instances
    inline Registers* PRCI = reinterpret_cast<Registers*>(PRCI_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART0_BASE = 0x10010000;
    constexpr uint32_t UART1_BASE = 0x10011000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t txdata;  ///< Offset: 0x00 - Transmit Data Register
        volatile uint32_t rxdata;  ///< Offset: 0x04 - Receive Data Register
        volatile uint32_t txctrl;  ///< Offset: 0x08 - Transmit Control Register
        volatile uint32_t rxctrl;  ///< Offset: 0x0C - Receive Control Register
        volatile uint32_t ie;  ///< Offset: 0x10 - Interrupt Enable Register
        volatile uint32_t ip;  ///< Offset: 0x14 - Interrupt Pending Register
        volatile uint32_t div;  ///< Offset: 0x18 - Baud Rate Divisor Register
    };

    /// Peripheral instances
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);
    inline Registers* UART1 = reinterpret_cast<Registers*>(UART1_BASE);

}


} // namespace alloy::generated::fu540

#endif // ALLOY_GENERATED_FU540_PERIPHERALS_HPP