/// Auto-generated code for STM32F103C8
/// Generated by Alloy Code Generator
/// Source: stm32f1xx.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:21:53
#ifndef ALLOY_GENERATED_STM32F103C8_PERIPHERALS_HPP
#define ALLOY_GENERATED_STM32F103C8_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::stm32f103c8 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// FSMC Peripheral
// ============================================================================

namespace fsmc {
    /// Base addresses
    constexpr uint32_t FSMC_BASE = 0xA0000000;

    /// FSMC Register structure
    struct Registers {
        volatile uint32_t BCR1;  ///< Offset: 0x00 - SRAM/NOR-Flash chip-select control register 1
        volatile uint32_t BTR1;  ///< Offset: 0x04 - SRAM/NOR-Flash chip-select timing register 1
        volatile uint32_t BCR2;  ///< Offset: 0x08 - SRAM/NOR-Flash chip-select control register 2
        volatile uint32_t BTR2;  ///< Offset: 0x0C - SRAM/NOR-Flash chip-select timing register 2
        volatile uint32_t BCR3;  ///< Offset: 0x10 - SRAM/NOR-Flash chip-select control register 3
        volatile uint32_t BTR3;  ///< Offset: 0x14 - SRAM/NOR-Flash chip-select timing register 3
        volatile uint32_t BCR4;  ///< Offset: 0x18 - SRAM/NOR-Flash chip-select control register 4
        volatile uint32_t BTR4;  ///< Offset: 0x1C - SRAM/NOR-Flash chip-select timing register 4
        volatile uint32_t PCR2;  ///< Offset: 0x60 - PC Card/NAND Flash control register 2
        volatile uint32_t SR2;  ///< Offset: 0x64 - FIFO status and interrupt register 2
        volatile uint32_t PMEM2;  ///< Offset: 0x68 - Common memory space timing register 2
        volatile uint32_t PATT2;  ///< Offset: 0x6C - Attribute memory space timing register 2
        volatile uint32_t ECCR2;  ///< Offset: 0x74 - ECC result register 2
        volatile uint32_t PCR3;  ///< Offset: 0x80 - PC Card/NAND Flash control register 3
        volatile uint32_t SR3;  ///< Offset: 0x84 - FIFO status and interrupt register 3
        volatile uint32_t PMEM3;  ///< Offset: 0x88 - Common memory space timing register 3
        volatile uint32_t PATT3;  ///< Offset: 0x8C - Attribute memory space timing register 3
        volatile uint32_t ECCR3;  ///< Offset: 0x94 - ECC result register 3
        volatile uint32_t PCR4;  ///< Offset: 0xA0 - PC Card/NAND Flash control register 4
        volatile uint32_t SR4;  ///< Offset: 0xA4 - FIFO status and interrupt register 4
        volatile uint32_t PMEM4;  ///< Offset: 0xA8 - Common memory space timing register 4
        volatile uint32_t PATT4;  ///< Offset: 0xAC - Attribute memory space timing register 4
        volatile uint32_t PIO4;  ///< Offset: 0xB0 - I/O space timing register 4
        volatile uint32_t BWTR1;  ///< Offset: 0x104 - SRAM/NOR-Flash write timing registers 1
        volatile uint32_t BWTR2;  ///< Offset: 0x10C - SRAM/NOR-Flash write timing registers 2
        volatile uint32_t BWTR3;  ///< Offset: 0x114 - SRAM/NOR-Flash write timing registers 3
        volatile uint32_t BWTR4;  ///< Offset: 0x11C - SRAM/NOR-Flash write timing registers 4
    };

    /// Peripheral instances
    inline Registers* FSMC = reinterpret_cast<Registers*>(FSMC_BASE);

    // Bit definitions
    /// BCR1 Register bits
    namespace bcr1_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR1 Register bits
    namespace btr1_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR2 Register bits
    namespace bcr2_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR2 Register bits
    namespace btr2_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR3 Register bits
    namespace bcr3_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR3 Register bits
    namespace btr3_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR4 Register bits
    namespace bcr4_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR4 Register bits
    namespace btr4_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// PCR2 Register bits
    namespace pcr2_bits {
        constexpr uint32_t ECCPS = (3 << 17);  ///< ECCPS
        constexpr uint32_t TAR = (4 << 13);  ///< TAR
        constexpr uint32_t TCLR = (4 << 9);  ///< TCLR
        constexpr uint32_t ECCEN = (1U << 6);  ///< ECCEN
        constexpr uint32_t PWID = (2 << 4);  ///< PWID
        constexpr uint32_t PTYP = (1U << 3);  ///< PTYP
        constexpr uint32_t PBKEN = (1U << 2);  ///< PBKEN
        constexpr uint32_t PWAITEN = (1U << 1);  ///< PWAITEN
    }

    /// SR2 Register bits
    namespace sr2_bits {
        constexpr uint32_t FEMPT = (1U << 6);  ///< FEMPT
        constexpr uint32_t IFEN = (1U << 5);  ///< IFEN
        constexpr uint32_t ILEN = (1U << 4);  ///< ILEN
        constexpr uint32_t IREN = (1U << 3);  ///< IREN
        constexpr uint32_t IFS = (1U << 2);  ///< IFS
        constexpr uint32_t ILS = (1U << 1);  ///< ILS
        constexpr uint32_t IRS = (1U << 0);  ///< IRS
    }

    /// PMEM2 Register bits
    namespace pmem2_bits {
        constexpr uint32_t MEMHIZx = (8 << 24);  ///< MEMHIZx
        constexpr uint32_t MEMHOLDx = (8 << 16);  ///< MEMHOLDx
        constexpr uint32_t MEMWAITx = (8 << 8);  ///< MEMWAITx
        constexpr uint32_t MEMSETx = (8 << 0);  ///< MEMSETx
    }

    /// PATT2 Register bits
    namespace patt2_bits {
        constexpr uint32_t ATTHIZx = (8 << 24);  ///< Attribute memory x databus HiZ time
        constexpr uint32_t ATTHOLDx = (8 << 16);  ///< Attribute memory x hold time
        constexpr uint32_t ATTWAITx = (8 << 8);  ///< Attribute memory x wait time
        constexpr uint32_t ATTSETx = (8 << 0);  ///< Attribute memory x setup time
    }

    /// ECCR2 Register bits
    namespace eccr2_bits {
        constexpr uint32_t ECCx = (32 << 0);  ///< ECC result
    }

    /// PCR3 Register bits
    namespace pcr3_bits {
        constexpr uint32_t ECCPS = (3 << 17);  ///< ECCPS
        constexpr uint32_t TAR = (4 << 13);  ///< TAR
        constexpr uint32_t TCLR = (4 << 9);  ///< TCLR
        constexpr uint32_t ECCEN = (1U << 6);  ///< ECCEN
        constexpr uint32_t PWID = (2 << 4);  ///< PWID
        constexpr uint32_t PTYP = (1U << 3);  ///< PTYP
        constexpr uint32_t PBKEN = (1U << 2);  ///< PBKEN
        constexpr uint32_t PWAITEN = (1U << 1);  ///< PWAITEN
    }

    /// SR3 Register bits
    namespace sr3_bits {
        constexpr uint32_t FEMPT = (1U << 6);  ///< FEMPT
        constexpr uint32_t IFEN = (1U << 5);  ///< IFEN
        constexpr uint32_t ILEN = (1U << 4);  ///< ILEN
        constexpr uint32_t IREN = (1U << 3);  ///< IREN
        constexpr uint32_t IFS = (1U << 2);  ///< IFS
        constexpr uint32_t ILS = (1U << 1);  ///< ILS
        constexpr uint32_t IRS = (1U << 0);  ///< IRS
    }

    /// PMEM3 Register bits
    namespace pmem3_bits {
        constexpr uint32_t MEMHIZx = (8 << 24);  ///< MEMHIZx
        constexpr uint32_t MEMHOLDx = (8 << 16);  ///< MEMHOLDx
        constexpr uint32_t MEMWAITx = (8 << 8);  ///< MEMWAITx
        constexpr uint32_t MEMSETx = (8 << 0);  ///< MEMSETx
    }

    /// PATT3 Register bits
    namespace patt3_bits {
        constexpr uint32_t ATTHIZx = (8 << 24);  ///< ATTHIZx
        constexpr uint32_t ATTHOLDx = (8 << 16);  ///< ATTHOLDx
        constexpr uint32_t ATTWAITx = (8 << 8);  ///< ATTWAITx
        constexpr uint32_t ATTSETx = (8 << 0);  ///< ATTSETx
    }

    /// ECCR3 Register bits
    namespace eccr3_bits {
        constexpr uint32_t ECCx = (32 << 0);  ///< ECCx
    }

    /// PCR4 Register bits
    namespace pcr4_bits {
        constexpr uint32_t ECCPS = (3 << 17);  ///< ECCPS
        constexpr uint32_t TAR = (4 << 13);  ///< TAR
        constexpr uint32_t TCLR = (4 << 9);  ///< TCLR
        constexpr uint32_t ECCEN = (1U << 6);  ///< ECCEN
        constexpr uint32_t PWID = (2 << 4);  ///< PWID
        constexpr uint32_t PTYP = (1U << 3);  ///< PTYP
        constexpr uint32_t PBKEN = (1U << 2);  ///< PBKEN
        constexpr uint32_t PWAITEN = (1U << 1);  ///< PWAITEN
    }

    /// SR4 Register bits
    namespace sr4_bits {
        constexpr uint32_t FEMPT = (1U << 6);  ///< FEMPT
        constexpr uint32_t IFEN = (1U << 5);  ///< IFEN
        constexpr uint32_t ILEN = (1U << 4);  ///< ILEN
        constexpr uint32_t IREN = (1U << 3);  ///< IREN
        constexpr uint32_t IFS = (1U << 2);  ///< IFS
        constexpr uint32_t ILS = (1U << 1);  ///< ILS
        constexpr uint32_t IRS = (1U << 0);  ///< IRS
    }

    /// PMEM4 Register bits
    namespace pmem4_bits {
        constexpr uint32_t MEMHIZx = (8 << 24);  ///< MEMHIZx
        constexpr uint32_t MEMHOLDx = (8 << 16);  ///< MEMHOLDx
        constexpr uint32_t MEMWAITx = (8 << 8);  ///< MEMWAITx
        constexpr uint32_t MEMSETx = (8 << 0);  ///< MEMSETx
    }

    /// PATT4 Register bits
    namespace patt4_bits {
        constexpr uint32_t ATTHIZx = (8 << 24);  ///< ATTHIZx
        constexpr uint32_t ATTHOLDx = (8 << 16);  ///< ATTHOLDx
        constexpr uint32_t ATTWAITx = (8 << 8);  ///< ATTWAITx
        constexpr uint32_t ATTSETx = (8 << 0);  ///< ATTSETx
    }

    /// PIO4 Register bits
    namespace pio4_bits {
        constexpr uint32_t IOHIZx = (8 << 24);  ///< IOHIZx
        constexpr uint32_t IOHOLDx = (8 << 16);  ///< IOHOLDx
        constexpr uint32_t IOWAITx = (8 << 8);  ///< IOWAITx
        constexpr uint32_t IOSETx = (8 << 0);  ///< IOSETx
    }

    /// BWTR1 Register bits
    namespace bwtr1_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR2 Register bits
    namespace bwtr2_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR3 Register bits
    namespace bwtr3_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR4 Register bits
    namespace bwtr4_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

}

// ============================================================================
// PWR Peripheral
// ============================================================================

namespace pwr {
    /// Base addresses
    constexpr uint32_t PWR_BASE = 0x40007000;

    /// PWR Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Power control register (PWR_CR)
        volatile uint32_t CSR;  ///< Offset: 0x04 - Power control register (PWR_CR)
    };

    /// Peripheral instances
    inline Registers* PWR = reinterpret_cast<Registers*>(PWR_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t LPDS = (1U << 0);  ///< Low Power Deep Sleep
        constexpr uint32_t PDDS = (1U << 1);  ///< Power Down Deep Sleep
        constexpr uint32_t CWUF = (1U << 2);  ///< Clear Wake-up Flag
        constexpr uint32_t CSBF = (1U << 3);  ///< Clear STANDBY Flag
        constexpr uint32_t PVDE = (1U << 4);  ///< Power Voltage Detector Enable
        constexpr uint32_t PLS = (3 << 5);  ///< PVD Level Selection
        constexpr uint32_t DBP = (1U << 8);  ///< Disable Backup Domain write protection
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t WUF = (1U << 0);  ///< Wake-Up Flag
        constexpr uint32_t SBF = (1U << 1);  ///< STANDBY Flag
        constexpr uint32_t PVDO = (1U << 2);  ///< PVD Output
        constexpr uint32_t EWUP = (1U << 8);  ///< Enable WKUP pin
    }

}

// ============================================================================
// RCC Peripheral
// ============================================================================

namespace rcc {
    /// Base addresses
    constexpr uint32_t RCC_BASE = 0x40021000;

    /// RCC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Clock control register
        volatile uint32_t CFGR;  ///< Offset: 0x04 - Clock configuration register (RCC_CFGR)
        volatile uint32_t CIR;  ///< Offset: 0x08 - Clock interrupt register (RCC_CIR)
        volatile uint32_t APB2RSTR;  ///< Offset: 0x0C - APB2 peripheral reset register (RCC_APB2RSTR)
        volatile uint32_t APB1RSTR;  ///< Offset: 0x10 - APB1 peripheral reset register (RCC_APB1RSTR)
        volatile uint32_t AHBENR;  ///< Offset: 0x14 - AHB Peripheral Clock enable register (RCC_AHBENR)
        volatile uint32_t APB2ENR;  ///< Offset: 0x18 - APB2 peripheral clock enable register (RCC_APB2ENR)
        volatile uint32_t APB1ENR;  ///< Offset: 0x1C - APB1 peripheral clock enable register (RCC_APB1ENR)
        volatile uint32_t BDCR;  ///< Offset: 0x20 - Backup domain control register (RCC_BDCR)
        volatile uint32_t CSR;  ///< Offset: 0x24 - Control/status register (RCC_CSR)
    };

    /// Peripheral instances
    inline Registers* RCC = reinterpret_cast<Registers*>(RCC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t HSION = (1U << 0);  ///< Internal High Speed clock enable
        constexpr uint32_t HSIRDY = (1U << 1);  ///< Internal High Speed clock ready flag
        constexpr uint32_t HSITRIM = (5 << 3);  ///< Internal High Speed clock trimming
        constexpr uint32_t HSICAL = (8 << 8);  ///< Internal High Speed clock Calibration
        constexpr uint32_t HSEON = (1U << 16);  ///< External High Speed clock enable
        constexpr uint32_t HSERDY = (1U << 17);  ///< External High Speed clock ready flag
        constexpr uint32_t HSEBYP = (1U << 18);  ///< External High Speed clock Bypass
        constexpr uint32_t CSSON = (1U << 19);  ///< Clock Security System enable
        constexpr uint32_t PLLON = (1U << 24);  ///< PLL enable
        constexpr uint32_t PLLRDY = (1U << 25);  ///< PLL clock ready flag
    }

    /// CFGR Register bits
    namespace cfgr_bits {
        constexpr uint32_t SW = (2 << 0);  ///< System clock Switch
        constexpr uint32_t SWS = (2 << 2);  ///< System Clock Switch Status
        constexpr uint32_t HPRE = (4 << 4);  ///< AHB prescaler
        constexpr uint32_t PPRE1 = (3 << 8);  ///< APB Low speed prescaler (APB1)
        constexpr uint32_t PPRE2 = (3 << 11);  ///< APB High speed prescaler (APB2)
        constexpr uint32_t ADCPRE = (2 << 14);  ///< ADC prescaler
        constexpr uint32_t PLLSRC = (1U << 16);  ///< PLL entry clock source
        constexpr uint32_t PLLXTPRE = (1U << 17);  ///< HSE divider for PLL entry
        constexpr uint32_t PLLMUL = (4 << 18);  ///< PLL Multiplication Factor
        constexpr uint32_t OTGFSPRE = (1U << 22);  ///< USB OTG FS prescaler
        constexpr uint32_t MCO = (3 << 24);  ///< Microcontroller clock output
    }

    /// CIR Register bits
    namespace cir_bits {
        constexpr uint32_t LSIRDYF = (1U << 0);  ///< LSI Ready Interrupt flag
        constexpr uint32_t LSERDYF = (1U << 1);  ///< LSE Ready Interrupt flag
        constexpr uint32_t HSIRDYF = (1U << 2);  ///< HSI Ready Interrupt flag
        constexpr uint32_t HSERDYF = (1U << 3);  ///< HSE Ready Interrupt flag
        constexpr uint32_t PLLRDYF = (1U << 4);  ///< PLL Ready Interrupt flag
        constexpr uint32_t CSSF = (1U << 7);  ///< Clock Security System Interrupt flag
        constexpr uint32_t LSIRDYIE = (1U << 8);  ///< LSI Ready Interrupt Enable
        constexpr uint32_t LSERDYIE = (1U << 9);  ///< LSE Ready Interrupt Enable
        constexpr uint32_t HSIRDYIE = (1U << 10);  ///< HSI Ready Interrupt Enable
        constexpr uint32_t HSERDYIE = (1U << 11);  ///< HSE Ready Interrupt Enable
        constexpr uint32_t PLLRDYIE = (1U << 12);  ///< PLL Ready Interrupt Enable
        constexpr uint32_t LSIRDYC = (1U << 16);  ///< LSI Ready Interrupt Clear
        constexpr uint32_t LSERDYC = (1U << 17);  ///< LSE Ready Interrupt Clear
        constexpr uint32_t HSIRDYC = (1U << 18);  ///< HSI Ready Interrupt Clear
        constexpr uint32_t HSERDYC = (1U << 19);  ///< HSE Ready Interrupt Clear
        constexpr uint32_t PLLRDYC = (1U << 20);  ///< PLL Ready Interrupt Clear
        constexpr uint32_t CSSC = (1U << 23);  ///< Clock security system interrupt clear
    }

    /// APB2RSTR Register bits
    namespace apb2rstr_bits {
        constexpr uint32_t AFIORST = (1U << 0);  ///< Alternate function I/O reset
        constexpr uint32_t IOPARST = (1U << 2);  ///< IO port A reset
        constexpr uint32_t IOPBRST = (1U << 3);  ///< IO port B reset
        constexpr uint32_t IOPCRST = (1U << 4);  ///< IO port C reset
        constexpr uint32_t IOPDRST = (1U << 5);  ///< IO port D reset
        constexpr uint32_t IOPERST = (1U << 6);  ///< IO port E reset
        constexpr uint32_t IOPFRST = (1U << 7);  ///< IO port F reset
        constexpr uint32_t IOPGRST = (1U << 8);  ///< IO port G reset
        constexpr uint32_t ADC1RST = (1U << 9);  ///< ADC 1 interface reset
        constexpr uint32_t ADC2RST = (1U << 10);  ///< ADC 2 interface reset
        constexpr uint32_t TIM1RST = (1U << 11);  ///< TIM1 timer reset
        constexpr uint32_t SPI1RST = (1U << 12);  ///< SPI 1 reset
        constexpr uint32_t TIM8RST = (1U << 13);  ///< TIM8 timer reset
        constexpr uint32_t USART1RST = (1U << 14);  ///< USART1 reset
        constexpr uint32_t ADC3RST = (1U << 15);  ///< ADC 3 interface reset
        constexpr uint32_t TIM9RST = (1U << 19);  ///< TIM9 timer reset
        constexpr uint32_t TIM10RST = (1U << 20);  ///< TIM10 timer reset
        constexpr uint32_t TIM11RST = (1U << 21);  ///< TIM11 timer reset
    }

    /// APB1RSTR Register bits
    namespace apb1rstr_bits {
        constexpr uint32_t TIM2RST = (1U << 0);  ///< Timer 2 reset
        constexpr uint32_t TIM3RST = (1U << 1);  ///< Timer 3 reset
        constexpr uint32_t TIM4RST = (1U << 2);  ///< Timer 4 reset
        constexpr uint32_t TIM5RST = (1U << 3);  ///< Timer 5 reset
        constexpr uint32_t TIM6RST = (1U << 4);  ///< Timer 6 reset
        constexpr uint32_t TIM7RST = (1U << 5);  ///< Timer 7 reset
        constexpr uint32_t TIM12RST = (1U << 6);  ///< Timer 12 reset
        constexpr uint32_t TIM13RST = (1U << 7);  ///< Timer 13 reset
        constexpr uint32_t TIM14RST = (1U << 8);  ///< Timer 14 reset
        constexpr uint32_t WWDGRST = (1U << 11);  ///< Window watchdog reset
        constexpr uint32_t SPI2RST = (1U << 14);  ///< SPI2 reset
        constexpr uint32_t SPI3RST = (1U << 15);  ///< SPI3 reset
        constexpr uint32_t USART2RST = (1U << 17);  ///< USART 2 reset
        constexpr uint32_t USART3RST = (1U << 18);  ///< USART 3 reset
        constexpr uint32_t UART4RST = (1U << 19);  ///< UART 4 reset
        constexpr uint32_t UART5RST = (1U << 20);  ///< UART 5 reset
        constexpr uint32_t I2C1RST = (1U << 21);  ///< I2C1 reset
        constexpr uint32_t I2C2RST = (1U << 22);  ///< I2C2 reset
        constexpr uint32_t USBRST = (1U << 23);  ///< USB reset
        constexpr uint32_t CANRST = (1U << 25);  ///< CAN reset
        constexpr uint32_t BKPRST = (1U << 27);  ///< Backup interface reset
        constexpr uint32_t PWRRST = (1U << 28);  ///< Power interface reset
        constexpr uint32_t DACRST = (1U << 29);  ///< DAC interface reset
    }

    /// AHBENR Register bits
    namespace ahbenr_bits {
        constexpr uint32_t DMA1EN = (1U << 0);  ///< DMA1 clock enable
        constexpr uint32_t DMA2EN = (1U << 1);  ///< DMA2 clock enable
        constexpr uint32_t SRAMEN = (1U << 2);  ///< SRAM interface clock enable
        constexpr uint32_t FLITFEN = (1U << 4);  ///< FLITF clock enable
        constexpr uint32_t CRCEN = (1U << 6);  ///< CRC clock enable
        constexpr uint32_t FSMCEN = (1U << 8);  ///< FSMC clock enable
        constexpr uint32_t SDIOEN = (1U << 10);  ///< SDIO clock enable
    }

    /// APB2ENR Register bits
    namespace apb2enr_bits {
        constexpr uint32_t AFIOEN = (1U << 0);  ///< Alternate function I/O clock enable
        constexpr uint32_t IOPAEN = (1U << 2);  ///< I/O port A clock enable
        constexpr uint32_t IOPBEN = (1U << 3);  ///< I/O port B clock enable
        constexpr uint32_t IOPCEN = (1U << 4);  ///< I/O port C clock enable
        constexpr uint32_t IOPDEN = (1U << 5);  ///< I/O port D clock enable
        constexpr uint32_t IOPEEN = (1U << 6);  ///< I/O port E clock enable
        constexpr uint32_t IOPFEN = (1U << 7);  ///< I/O port F clock enable
        constexpr uint32_t IOPGEN = (1U << 8);  ///< I/O port G clock enable
        constexpr uint32_t ADC1EN = (1U << 9);  ///< ADC 1 interface clock enable
        constexpr uint32_t ADC2EN = (1U << 10);  ///< ADC 2 interface clock enable
        constexpr uint32_t TIM1EN = (1U << 11);  ///< TIM1 Timer clock enable
        constexpr uint32_t SPI1EN = (1U << 12);  ///< SPI 1 clock enable
        constexpr uint32_t TIM8EN = (1U << 13);  ///< TIM8 Timer clock enable
        constexpr uint32_t USART1EN = (1U << 14);  ///< USART1 clock enable
        constexpr uint32_t ADC3EN = (1U << 15);  ///< ADC3 interface clock enable
        constexpr uint32_t TIM9EN = (1U << 19);  ///< TIM9 Timer clock enable
        constexpr uint32_t TIM10EN = (1U << 20);  ///< TIM10 Timer clock enable
        constexpr uint32_t TIM11EN = (1U << 21);  ///< TIM11 Timer clock enable
    }

    /// APB1ENR Register bits
    namespace apb1enr_bits {
        constexpr uint32_t TIM2EN = (1U << 0);  ///< Timer 2 clock enable
        constexpr uint32_t TIM3EN = (1U << 1);  ///< Timer 3 clock enable
        constexpr uint32_t TIM4EN = (1U << 2);  ///< Timer 4 clock enable
        constexpr uint32_t TIM5EN = (1U << 3);  ///< Timer 5 clock enable
        constexpr uint32_t TIM6EN = (1U << 4);  ///< Timer 6 clock enable
        constexpr uint32_t TIM7EN = (1U << 5);  ///< Timer 7 clock enable
        constexpr uint32_t TIM12EN = (1U << 6);  ///< Timer 12 clock enable
        constexpr uint32_t TIM13EN = (1U << 7);  ///< Timer 13 clock enable
        constexpr uint32_t TIM14EN = (1U << 8);  ///< Timer 14 clock enable
        constexpr uint32_t WWDGEN = (1U << 11);  ///< Window watchdog clock enable
        constexpr uint32_t SPI2EN = (1U << 14);  ///< SPI 2 clock enable
        constexpr uint32_t SPI3EN = (1U << 15);  ///< SPI 3 clock enable
        constexpr uint32_t USART2EN = (1U << 17);  ///< USART 2 clock enable
        constexpr uint32_t USART3EN = (1U << 18);  ///< USART 3 clock enable
        constexpr uint32_t UART4EN = (1U << 19);  ///< UART 4 clock enable
        constexpr uint32_t UART5EN = (1U << 20);  ///< UART 5 clock enable
        constexpr uint32_t I2C1EN = (1U << 21);  ///< I2C 1 clock enable
        constexpr uint32_t I2C2EN = (1U << 22);  ///< I2C 2 clock enable
        constexpr uint32_t USBEN = (1U << 23);  ///< USB clock enable
        constexpr uint32_t CANEN = (1U << 25);  ///< CAN clock enable
        constexpr uint32_t BKPEN = (1U << 27);  ///< Backup interface clock enable
        constexpr uint32_t PWREN = (1U << 28);  ///< Power interface clock enable
        constexpr uint32_t DACEN = (1U << 29);  ///< DAC interface clock enable
    }

    /// BDCR Register bits
    namespace bdcr_bits {
        constexpr uint32_t LSEON = (1U << 0);  ///< External Low Speed oscillator enable
        constexpr uint32_t LSERDY = (1U << 1);  ///< External Low Speed oscillator ready
        constexpr uint32_t LSEBYP = (1U << 2);  ///< External Low Speed oscillator bypass
        constexpr uint32_t RTCSEL = (2 << 8);  ///< RTC clock source selection
        constexpr uint32_t RTCEN = (1U << 15);  ///< RTC clock enable
        constexpr uint32_t BDRST = (1U << 16);  ///< Backup domain software reset
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t LSION = (1U << 0);  ///< Internal low speed oscillator enable
        constexpr uint32_t LSIRDY = (1U << 1);  ///< Internal low speed oscillator ready
        constexpr uint32_t RMVF = (1U << 24);  ///< Remove reset flag
        constexpr uint32_t PINRSTF = (1U << 26);  ///< PIN reset flag
        constexpr uint32_t PORRSTF = (1U << 27);  ///< POR/PDR reset flag
        constexpr uint32_t SFTRSTF = (1U << 28);  ///< Software reset flag
        constexpr uint32_t IWDGRSTF = (1U << 29);  ///< Independent watchdog reset flag
        constexpr uint32_t WWDGRSTF = (1U << 30);  ///< Window watchdog reset flag
        constexpr uint32_t LPWRRSTF = (1U << 31);  ///< Low-power reset flag
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIOA_BASE = 0x40010800;
    constexpr uint32_t GPIOB_BASE = 0x40010C00;
    constexpr uint32_t GPIOC_BASE = 0x40011000;
    constexpr uint32_t GPIOD_BASE = 0x40011400;
    constexpr uint32_t GPIOE_BASE = 0x40011800;
    constexpr uint32_t GPIOF_BASE = 0x40011C00;
    constexpr uint32_t GPIOG_BASE = 0x40012000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t CRL;  ///< Offset: 0x00 - Port configuration register low (GPIOn_CRL)
        volatile uint32_t CRH;  ///< Offset: 0x04 - Port configuration register high (GPIOn_CRL)
        volatile uint32_t IDR;  ///< Offset: 0x08 - Port input data register (GPIOn_IDR)
        volatile uint32_t ODR;  ///< Offset: 0x0C - Port output data register (GPIOn_ODR)
        volatile uint32_t BSRR;  ///< Offset: 0x10 - Port bit set/reset register (GPIOn_BSRR)
        volatile uint32_t BRR;  ///< Offset: 0x14 - Port bit reset register (GPIOn_BRR)
        volatile uint32_t LCKR;  ///< Offset: 0x18 - Port configuration lock register
    };

    /// Peripheral instances
    inline Registers* GPIOA = reinterpret_cast<Registers*>(GPIOA_BASE);
    inline Registers* GPIOB = reinterpret_cast<Registers*>(GPIOB_BASE);
    inline Registers* GPIOC = reinterpret_cast<Registers*>(GPIOC_BASE);
    inline Registers* GPIOD = reinterpret_cast<Registers*>(GPIOD_BASE);
    inline Registers* GPIOE = reinterpret_cast<Registers*>(GPIOE_BASE);
    inline Registers* GPIOF = reinterpret_cast<Registers*>(GPIOF_BASE);
    inline Registers* GPIOG = reinterpret_cast<Registers*>(GPIOG_BASE);

    // Bit definitions
    /// CRL Register bits
    namespace crl_bits {
        constexpr uint32_t MODE0 = (2 << 0);  ///< Port n.0 mode bits
        constexpr uint32_t CNF0 = (2 << 2);  ///< Port n.0 configuration bits
        constexpr uint32_t MODE1 = (2 << 4);  ///< Port n.1 mode bits
        constexpr uint32_t CNF1 = (2 << 6);  ///< Port n.1 configuration bits
        constexpr uint32_t MODE2 = (2 << 8);  ///< Port n.2 mode bits
        constexpr uint32_t CNF2 = (2 << 10);  ///< Port n.2 configuration bits
        constexpr uint32_t MODE3 = (2 << 12);  ///< Port n.3 mode bits
        constexpr uint32_t CNF3 = (2 << 14);  ///< Port n.3 configuration bits
        constexpr uint32_t MODE4 = (2 << 16);  ///< Port n.4 mode bits
        constexpr uint32_t CNF4 = (2 << 18);  ///< Port n.4 configuration bits
        constexpr uint32_t MODE5 = (2 << 20);  ///< Port n.5 mode bits
        constexpr uint32_t CNF5 = (2 << 22);  ///< Port n.5 configuration bits
        constexpr uint32_t MODE6 = (2 << 24);  ///< Port n.6 mode bits
        constexpr uint32_t CNF6 = (2 << 26);  ///< Port n.6 configuration bits
        constexpr uint32_t MODE7 = (2 << 28);  ///< Port n.7 mode bits
        constexpr uint32_t CNF7 = (2 << 30);  ///< Port n.7 configuration bits
    }

    /// CRH Register bits
    namespace crh_bits {
        constexpr uint32_t MODE8 = (2 << 0);  ///< Port n.8 mode bits
        constexpr uint32_t CNF8 = (2 << 2);  ///< Port n.8 configuration bits
        constexpr uint32_t MODE9 = (2 << 4);  ///< Port n.9 mode bits
        constexpr uint32_t CNF9 = (2 << 6);  ///< Port n.9 configuration bits
        constexpr uint32_t MODE10 = (2 << 8);  ///< Port n.10 mode bits
        constexpr uint32_t CNF10 = (2 << 10);  ///< Port n.10 configuration bits
        constexpr uint32_t MODE11 = (2 << 12);  ///< Port n.11 mode bits
        constexpr uint32_t CNF11 = (2 << 14);  ///< Port n.11 configuration bits
        constexpr uint32_t MODE12 = (2 << 16);  ///< Port n.12 mode bits
        constexpr uint32_t CNF12 = (2 << 18);  ///< Port n.12 configuration bits
        constexpr uint32_t MODE13 = (2 << 20);  ///< Port n.13 mode bits
        constexpr uint32_t CNF13 = (2 << 22);  ///< Port n.13 configuration bits
        constexpr uint32_t MODE14 = (2 << 24);  ///< Port n.14 mode bits
        constexpr uint32_t CNF14 = (2 << 26);  ///< Port n.14 configuration bits
        constexpr uint32_t MODE15 = (2 << 28);  ///< Port n.15 mode bits
        constexpr uint32_t CNF15 = (2 << 30);  ///< Port n.15 configuration bits
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t IDR0 = (1U << 0);  ///< Port input data
        constexpr uint32_t IDR1 = (1U << 1);  ///< Port input data
        constexpr uint32_t IDR2 = (1U << 2);  ///< Port input data
        constexpr uint32_t IDR3 = (1U << 3);  ///< Port input data
        constexpr uint32_t IDR4 = (1U << 4);  ///< Port input data
        constexpr uint32_t IDR5 = (1U << 5);  ///< Port input data
        constexpr uint32_t IDR6 = (1U << 6);  ///< Port input data
        constexpr uint32_t IDR7 = (1U << 7);  ///< Port input data
        constexpr uint32_t IDR8 = (1U << 8);  ///< Port input data
        constexpr uint32_t IDR9 = (1U << 9);  ///< Port input data
        constexpr uint32_t IDR10 = (1U << 10);  ///< Port input data
        constexpr uint32_t IDR11 = (1U << 11);  ///< Port input data
        constexpr uint32_t IDR12 = (1U << 12);  ///< Port input data
        constexpr uint32_t IDR13 = (1U << 13);  ///< Port input data
        constexpr uint32_t IDR14 = (1U << 14);  ///< Port input data
        constexpr uint32_t IDR15 = (1U << 15);  ///< Port input data
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t ODR0 = (1U << 0);  ///< Port output data
        constexpr uint32_t ODR1 = (1U << 1);  ///< Port output data
        constexpr uint32_t ODR2 = (1U << 2);  ///< Port output data
        constexpr uint32_t ODR3 = (1U << 3);  ///< Port output data
        constexpr uint32_t ODR4 = (1U << 4);  ///< Port output data
        constexpr uint32_t ODR5 = (1U << 5);  ///< Port output data
        constexpr uint32_t ODR6 = (1U << 6);  ///< Port output data
        constexpr uint32_t ODR7 = (1U << 7);  ///< Port output data
        constexpr uint32_t ODR8 = (1U << 8);  ///< Port output data
        constexpr uint32_t ODR9 = (1U << 9);  ///< Port output data
        constexpr uint32_t ODR10 = (1U << 10);  ///< Port output data
        constexpr uint32_t ODR11 = (1U << 11);  ///< Port output data
        constexpr uint32_t ODR12 = (1U << 12);  ///< Port output data
        constexpr uint32_t ODR13 = (1U << 13);  ///< Port output data
        constexpr uint32_t ODR14 = (1U << 14);  ///< Port output data
        constexpr uint32_t ODR15 = (1U << 15);  ///< Port output data
    }

    /// BSRR Register bits
    namespace bsrr_bits {
        constexpr uint32_t BS0 = (1U << 0);  ///< Set bit 0
        constexpr uint32_t BS1 = (1U << 1);  ///< Set bit 1
        constexpr uint32_t BS2 = (1U << 2);  ///< Set bit 1
        constexpr uint32_t BS3 = (1U << 3);  ///< Set bit 3
        constexpr uint32_t BS4 = (1U << 4);  ///< Set bit 4
        constexpr uint32_t BS5 = (1U << 5);  ///< Set bit 5
        constexpr uint32_t BS6 = (1U << 6);  ///< Set bit 6
        constexpr uint32_t BS7 = (1U << 7);  ///< Set bit 7
        constexpr uint32_t BS8 = (1U << 8);  ///< Set bit 8
        constexpr uint32_t BS9 = (1U << 9);  ///< Set bit 9
        constexpr uint32_t BS10 = (1U << 10);  ///< Set bit 10
        constexpr uint32_t BS11 = (1U << 11);  ///< Set bit 11
        constexpr uint32_t BS12 = (1U << 12);  ///< Set bit 12
        constexpr uint32_t BS13 = (1U << 13);  ///< Set bit 13
        constexpr uint32_t BS14 = (1U << 14);  ///< Set bit 14
        constexpr uint32_t BS15 = (1U << 15);  ///< Set bit 15
        constexpr uint32_t BR0 = (1U << 16);  ///< Reset bit 0
        constexpr uint32_t BR1 = (1U << 17);  ///< Reset bit 1
        constexpr uint32_t BR2 = (1U << 18);  ///< Reset bit 2
        constexpr uint32_t BR3 = (1U << 19);  ///< Reset bit 3
        constexpr uint32_t BR4 = (1U << 20);  ///< Reset bit 4
        constexpr uint32_t BR5 = (1U << 21);  ///< Reset bit 5
        constexpr uint32_t BR6 = (1U << 22);  ///< Reset bit 6
        constexpr uint32_t BR7 = (1U << 23);  ///< Reset bit 7
        constexpr uint32_t BR8 = (1U << 24);  ///< Reset bit 8
        constexpr uint32_t BR9 = (1U << 25);  ///< Reset bit 9
        constexpr uint32_t BR10 = (1U << 26);  ///< Reset bit 10
        constexpr uint32_t BR11 = (1U << 27);  ///< Reset bit 11
        constexpr uint32_t BR12 = (1U << 28);  ///< Reset bit 12
        constexpr uint32_t BR13 = (1U << 29);  ///< Reset bit 13
        constexpr uint32_t BR14 = (1U << 30);  ///< Reset bit 14
        constexpr uint32_t BR15 = (1U << 31);  ///< Reset bit 15
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t BR0 = (1U << 0);  ///< Reset bit 0
        constexpr uint32_t BR1 = (1U << 1);  ///< Reset bit 1
        constexpr uint32_t BR2 = (1U << 2);  ///< Reset bit 1
        constexpr uint32_t BR3 = (1U << 3);  ///< Reset bit 3
        constexpr uint32_t BR4 = (1U << 4);  ///< Reset bit 4
        constexpr uint32_t BR5 = (1U << 5);  ///< Reset bit 5
        constexpr uint32_t BR6 = (1U << 6);  ///< Reset bit 6
        constexpr uint32_t BR7 = (1U << 7);  ///< Reset bit 7
        constexpr uint32_t BR8 = (1U << 8);  ///< Reset bit 8
        constexpr uint32_t BR9 = (1U << 9);  ///< Reset bit 9
        constexpr uint32_t BR10 = (1U << 10);  ///< Reset bit 10
        constexpr uint32_t BR11 = (1U << 11);  ///< Reset bit 11
        constexpr uint32_t BR12 = (1U << 12);  ///< Reset bit 12
        constexpr uint32_t BR13 = (1U << 13);  ///< Reset bit 13
        constexpr uint32_t BR14 = (1U << 14);  ///< Reset bit 14
        constexpr uint32_t BR15 = (1U << 15);  ///< Reset bit 15
    }

    /// LCKR Register bits
    namespace lckr_bits {
        constexpr uint32_t LCK0 = (1U << 0);  ///< Port A Lock bit 0
        constexpr uint32_t LCK1 = (1U << 1);  ///< Port A Lock bit 1
        constexpr uint32_t LCK2 = (1U << 2);  ///< Port A Lock bit 2
        constexpr uint32_t LCK3 = (1U << 3);  ///< Port A Lock bit 3
        constexpr uint32_t LCK4 = (1U << 4);  ///< Port A Lock bit 4
        constexpr uint32_t LCK5 = (1U << 5);  ///< Port A Lock bit 5
        constexpr uint32_t LCK6 = (1U << 6);  ///< Port A Lock bit 6
        constexpr uint32_t LCK7 = (1U << 7);  ///< Port A Lock bit 7
        constexpr uint32_t LCK8 = (1U << 8);  ///< Port A Lock bit 8
        constexpr uint32_t LCK9 = (1U << 9);  ///< Port A Lock bit 9
        constexpr uint32_t LCK10 = (1U << 10);  ///< Port A Lock bit 10
        constexpr uint32_t LCK11 = (1U << 11);  ///< Port A Lock bit 11
        constexpr uint32_t LCK12 = (1U << 12);  ///< Port A Lock bit 12
        constexpr uint32_t LCK13 = (1U << 13);  ///< Port A Lock bit 13
        constexpr uint32_t LCK14 = (1U << 14);  ///< Port A Lock bit 14
        constexpr uint32_t LCK15 = (1U << 15);  ///< Port A Lock bit 15
        constexpr uint32_t LCKK = (1U << 16);  ///< Lock key
    }

}

// ============================================================================
// AFIO Peripheral
// ============================================================================

namespace afio {
    /// Base addresses
    constexpr uint32_t AFIO_BASE = 0x40010000;

    /// AFIO Register structure
    struct Registers {
        volatile uint32_t EVCR;  ///< Offset: 0x00 - Event Control Register (AFIO_EVCR)
        volatile uint32_t MAPR;  ///< Offset: 0x04 - AF remap and debug I/O configuration register (AFIO_MAPR)
        volatile uint32_t EXTICR1;  ///< Offset: 0x08 - External interrupt configuration register 1 (AFIO_EXTICR1)
        volatile uint32_t EXTICR2;  ///< Offset: 0x0C - External interrupt configuration register 2 (AFIO_EXTICR2)
        volatile uint32_t EXTICR3;  ///< Offset: 0x10 - External interrupt configuration register 3 (AFIO_EXTICR3)
        volatile uint32_t EXTICR4;  ///< Offset: 0x14 - External interrupt configuration register 4 (AFIO_EXTICR4)
        volatile uint32_t MAPR2;  ///< Offset: 0x1C - AF remap and debug I/O configuration register
    };

    /// Peripheral instances
    inline Registers* AFIO = reinterpret_cast<Registers*>(AFIO_BASE);

    // Bit definitions
    /// EVCR Register bits
    namespace evcr_bits {
        constexpr uint32_t PIN = (4 << 0);  ///< Pin selection
        constexpr uint32_t PORT = (3 << 4);  ///< Port selection
        constexpr uint32_t EVOE = (1U << 7);  ///< Event Output Enable
    }

    /// MAPR Register bits
    namespace mapr_bits {
        constexpr uint32_t SPI1_REMAP = (1U << 0);  ///< SPI1 remapping
        constexpr uint32_t I2C1_REMAP = (1U << 1);  ///< I2C1 remapping
        constexpr uint32_t USART1_REMAP = (1U << 2);  ///< USART1 remapping
        constexpr uint32_t USART2_REMAP = (1U << 3);  ///< USART2 remapping
        constexpr uint32_t USART3_REMAP = (2 << 4);  ///< USART3 remapping
        constexpr uint32_t TIM1_REMAP = (2 << 6);  ///< TIM1 remapping
        constexpr uint32_t TIM2_REMAP = (2 << 8);  ///< TIM2 remapping
        constexpr uint32_t TIM3_REMAP = (2 << 10);  ///< TIM3 remapping
        constexpr uint32_t TIM4_REMAP = (1U << 12);  ///< TIM4 remapping
        constexpr uint32_t CAN_REMAP = (2 << 13);  ///< CAN1 remapping
        constexpr uint32_t PD01_REMAP = (1U << 15);  ///< Port D0/Port D1 mapping on OSCIN/OSCOUT
        constexpr uint32_t TIM5CH4_IREMAP = (1U << 16);  ///< Set and cleared by software
        constexpr uint32_t ADC1_ETRGINJ_REMAP = (1U << 17);  ///< ADC 1 External trigger injected conversion remapping
        constexpr uint32_t ADC1_ETRGREG_REMAP = (1U << 18);  ///< ADC 1 external trigger regular conversion remapping
        constexpr uint32_t ADC2_ETRGINJ_REMAP = (1U << 19);  ///< ADC 2 external trigger injected conversion remapping
        constexpr uint32_t ADC2_ETRGREG_REMAP = (1U << 20);  ///< ADC 2 external trigger regular conversion remapping
        constexpr uint32_t SWJ_CFG = (3 << 24);  ///< Serial wire JTAG configuration
    }

    /// EXTICR1 Register bits
    namespace exticr1_bits {
        constexpr uint32_t EXTI0 = (4 << 0);  ///< EXTI0 configuration
        constexpr uint32_t EXTI1 = (4 << 4);  ///< EXTI1 configuration
        constexpr uint32_t EXTI2 = (4 << 8);  ///< EXTI2 configuration
        constexpr uint32_t EXTI3 = (4 << 12);  ///< EXTI3 configuration
    }

    /// EXTICR2 Register bits
    namespace exticr2_bits {
        constexpr uint32_t EXTI4 = (4 << 0);  ///< EXTI4 configuration
        constexpr uint32_t EXTI5 = (4 << 4);  ///< EXTI5 configuration
        constexpr uint32_t EXTI6 = (4 << 8);  ///< EXTI6 configuration
        constexpr uint32_t EXTI7 = (4 << 12);  ///< EXTI7 configuration
    }

    /// EXTICR3 Register bits
    namespace exticr3_bits {
        constexpr uint32_t EXTI8 = (4 << 0);  ///< EXTI8 configuration
        constexpr uint32_t EXTI9 = (4 << 4);  ///< EXTI9 configuration
        constexpr uint32_t EXTI10 = (4 << 8);  ///< EXTI10 configuration
        constexpr uint32_t EXTI11 = (4 << 12);  ///< EXTI11 configuration
    }

    /// EXTICR4 Register bits
    namespace exticr4_bits {
        constexpr uint32_t EXTI12 = (4 << 0);  ///< EXTI12 configuration
        constexpr uint32_t EXTI13 = (4 << 4);  ///< EXTI13 configuration
        constexpr uint32_t EXTI14 = (4 << 8);  ///< EXTI14 configuration
        constexpr uint32_t EXTI15 = (4 << 12);  ///< EXTI15 configuration
    }

    /// MAPR2 Register bits
    namespace mapr2_bits {
        constexpr uint32_t TIM9_REMAP = (1U << 5);  ///< TIM9 remapping
        constexpr uint32_t TIM10_REMAP = (1U << 6);  ///< TIM10 remapping
        constexpr uint32_t TIM11_REMAP = (1U << 7);  ///< TIM11 remapping
        constexpr uint32_t TIM13_REMAP = (1U << 8);  ///< TIM13 remapping
        constexpr uint32_t TIM14_REMAP = (1U << 9);  ///< TIM14 remapping
        constexpr uint32_t FSMC_NADV = (1U << 10);  ///< NADV connect/disconnect
    }

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40010400;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t IMR;  ///< Offset: 0x00 - Interrupt mask register (EXTI_IMR)
        volatile uint32_t EMR;  ///< Offset: 0x04 - Event mask register (EXTI_EMR)
        volatile uint32_t RTSR;  ///< Offset: 0x08 - Rising Trigger selection register (EXTI_RTSR)
        volatile uint32_t FTSR;  ///< Offset: 0x0C - Falling Trigger selection register (EXTI_FTSR)
        volatile uint32_t SWIER;  ///< Offset: 0x10 - Software interrupt event register (EXTI_SWIER)
        volatile uint32_t PR;  ///< Offset: 0x14 - Pending register (EXTI_PR)
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t MR0 = (1U << 0);  ///< Interrupt Mask on line 0
        constexpr uint32_t MR1 = (1U << 1);  ///< Interrupt Mask on line 1
        constexpr uint32_t MR2 = (1U << 2);  ///< Interrupt Mask on line 2
        constexpr uint32_t MR3 = (1U << 3);  ///< Interrupt Mask on line 3
        constexpr uint32_t MR4 = (1U << 4);  ///< Interrupt Mask on line 4
        constexpr uint32_t MR5 = (1U << 5);  ///< Interrupt Mask on line 5
        constexpr uint32_t MR6 = (1U << 6);  ///< Interrupt Mask on line 6
        constexpr uint32_t MR7 = (1U << 7);  ///< Interrupt Mask on line 7
        constexpr uint32_t MR8 = (1U << 8);  ///< Interrupt Mask on line 8
        constexpr uint32_t MR9 = (1U << 9);  ///< Interrupt Mask on line 9
        constexpr uint32_t MR10 = (1U << 10);  ///< Interrupt Mask on line 10
        constexpr uint32_t MR11 = (1U << 11);  ///< Interrupt Mask on line 11
        constexpr uint32_t MR12 = (1U << 12);  ///< Interrupt Mask on line 12
        constexpr uint32_t MR13 = (1U << 13);  ///< Interrupt Mask on line 13
        constexpr uint32_t MR14 = (1U << 14);  ///< Interrupt Mask on line 14
        constexpr uint32_t MR15 = (1U << 15);  ///< Interrupt Mask on line 15
        constexpr uint32_t MR16 = (1U << 16);  ///< Interrupt Mask on line 16
        constexpr uint32_t MR17 = (1U << 17);  ///< Interrupt Mask on line 17
        constexpr uint32_t MR18 = (1U << 18);  ///< Interrupt Mask on line 18
    }

    /// EMR Register bits
    namespace emr_bits {
        constexpr uint32_t MR0 = (1U << 0);  ///< Event Mask on line 0
        constexpr uint32_t MR1 = (1U << 1);  ///< Event Mask on line 1
        constexpr uint32_t MR2 = (1U << 2);  ///< Event Mask on line 2
        constexpr uint32_t MR3 = (1U << 3);  ///< Event Mask on line 3
        constexpr uint32_t MR4 = (1U << 4);  ///< Event Mask on line 4
        constexpr uint32_t MR5 = (1U << 5);  ///< Event Mask on line 5
        constexpr uint32_t MR6 = (1U << 6);  ///< Event Mask on line 6
        constexpr uint32_t MR7 = (1U << 7);  ///< Event Mask on line 7
        constexpr uint32_t MR8 = (1U << 8);  ///< Event Mask on line 8
        constexpr uint32_t MR9 = (1U << 9);  ///< Event Mask on line 9
        constexpr uint32_t MR10 = (1U << 10);  ///< Event Mask on line 10
        constexpr uint32_t MR11 = (1U << 11);  ///< Event Mask on line 11
        constexpr uint32_t MR12 = (1U << 12);  ///< Event Mask on line 12
        constexpr uint32_t MR13 = (1U << 13);  ///< Event Mask on line 13
        constexpr uint32_t MR14 = (1U << 14);  ///< Event Mask on line 14
        constexpr uint32_t MR15 = (1U << 15);  ///< Event Mask on line 15
        constexpr uint32_t MR16 = (1U << 16);  ///< Event Mask on line 16
        constexpr uint32_t MR17 = (1U << 17);  ///< Event Mask on line 17
        constexpr uint32_t MR18 = (1U << 18);  ///< Event Mask on line 18
    }

    /// RTSR Register bits
    namespace rtsr_bits {
        constexpr uint32_t TR0 = (1U << 0);  ///< Rising trigger event configuration of line 0
        constexpr uint32_t TR1 = (1U << 1);  ///< Rising trigger event configuration of line 1
        constexpr uint32_t TR2 = (1U << 2);  ///< Rising trigger event configuration of line 2
        constexpr uint32_t TR3 = (1U << 3);  ///< Rising trigger event configuration of line 3
        constexpr uint32_t TR4 = (1U << 4);  ///< Rising trigger event configuration of line 4
        constexpr uint32_t TR5 = (1U << 5);  ///< Rising trigger event configuration of line 5
        constexpr uint32_t TR6 = (1U << 6);  ///< Rising trigger event configuration of line 6
        constexpr uint32_t TR7 = (1U << 7);  ///< Rising trigger event configuration of line 7
        constexpr uint32_t TR8 = (1U << 8);  ///< Rising trigger event configuration of line 8
        constexpr uint32_t TR9 = (1U << 9);  ///< Rising trigger event configuration of line 9
        constexpr uint32_t TR10 = (1U << 10);  ///< Rising trigger event configuration of line 10
        constexpr uint32_t TR11 = (1U << 11);  ///< Rising trigger event configuration of line 11
        constexpr uint32_t TR12 = (1U << 12);  ///< Rising trigger event configuration of line 12
        constexpr uint32_t TR13 = (1U << 13);  ///< Rising trigger event configuration of line 13
        constexpr uint32_t TR14 = (1U << 14);  ///< Rising trigger event configuration of line 14
        constexpr uint32_t TR15 = (1U << 15);  ///< Rising trigger event configuration of line 15
        constexpr uint32_t TR16 = (1U << 16);  ///< Rising trigger event configuration of line 16
        constexpr uint32_t TR17 = (1U << 17);  ///< Rising trigger event configuration of line 17
        constexpr uint32_t TR18 = (1U << 18);  ///< Rising trigger event configuration of line 18
    }

    /// FTSR Register bits
    namespace ftsr_bits {
        constexpr uint32_t TR0 = (1U << 0);  ///< Falling trigger event configuration of line 0
        constexpr uint32_t TR1 = (1U << 1);  ///< Falling trigger event configuration of line 1
        constexpr uint32_t TR2 = (1U << 2);  ///< Falling trigger event configuration of line 2
        constexpr uint32_t TR3 = (1U << 3);  ///< Falling trigger event configuration of line 3
        constexpr uint32_t TR4 = (1U << 4);  ///< Falling trigger event configuration of line 4
        constexpr uint32_t TR5 = (1U << 5);  ///< Falling trigger event configuration of line 5
        constexpr uint32_t TR6 = (1U << 6);  ///< Falling trigger event configuration of line 6
        constexpr uint32_t TR7 = (1U << 7);  ///< Falling trigger event configuration of line 7
        constexpr uint32_t TR8 = (1U << 8);  ///< Falling trigger event configuration of line 8
        constexpr uint32_t TR9 = (1U << 9);  ///< Falling trigger event configuration of line 9
        constexpr uint32_t TR10 = (1U << 10);  ///< Falling trigger event configuration of line 10
        constexpr uint32_t TR11 = (1U << 11);  ///< Falling trigger event configuration of line 11
        constexpr uint32_t TR12 = (1U << 12);  ///< Falling trigger event configuration of line 12
        constexpr uint32_t TR13 = (1U << 13);  ///< Falling trigger event configuration of line 13
        constexpr uint32_t TR14 = (1U << 14);  ///< Falling trigger event configuration of line 14
        constexpr uint32_t TR15 = (1U << 15);  ///< Falling trigger event configuration of line 15
        constexpr uint32_t TR16 = (1U << 16);  ///< Falling trigger event configuration of line 16
        constexpr uint32_t TR17 = (1U << 17);  ///< Falling trigger event configuration of line 17
        constexpr uint32_t TR18 = (1U << 18);  ///< Falling trigger event configuration of line 18
    }

    /// SWIER Register bits
    namespace swier_bits {
        constexpr uint32_t SWIER0 = (1U << 0);  ///< Software Interrupt on line 0
        constexpr uint32_t SWIER1 = (1U << 1);  ///< Software Interrupt on line 1
        constexpr uint32_t SWIER2 = (1U << 2);  ///< Software Interrupt on line 2
        constexpr uint32_t SWIER3 = (1U << 3);  ///< Software Interrupt on line 3
        constexpr uint32_t SWIER4 = (1U << 4);  ///< Software Interrupt on line 4
        constexpr uint32_t SWIER5 = (1U << 5);  ///< Software Interrupt on line 5
        constexpr uint32_t SWIER6 = (1U << 6);  ///< Software Interrupt on line 6
        constexpr uint32_t SWIER7 = (1U << 7);  ///< Software Interrupt on line 7
        constexpr uint32_t SWIER8 = (1U << 8);  ///< Software Interrupt on line 8
        constexpr uint32_t SWIER9 = (1U << 9);  ///< Software Interrupt on line 9
        constexpr uint32_t SWIER10 = (1U << 10);  ///< Software Interrupt on line 10
        constexpr uint32_t SWIER11 = (1U << 11);  ///< Software Interrupt on line 11
        constexpr uint32_t SWIER12 = (1U << 12);  ///< Software Interrupt on line 12
        constexpr uint32_t SWIER13 = (1U << 13);  ///< Software Interrupt on line 13
        constexpr uint32_t SWIER14 = (1U << 14);  ///< Software Interrupt on line 14
        constexpr uint32_t SWIER15 = (1U << 15);  ///< Software Interrupt on line 15
        constexpr uint32_t SWIER16 = (1U << 16);  ///< Software Interrupt on line 16
        constexpr uint32_t SWIER17 = (1U << 17);  ///< Software Interrupt on line 17
        constexpr uint32_t SWIER18 = (1U << 18);  ///< Software Interrupt on line 18
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR0 = (1U << 0);  ///< Pending bit 0
        constexpr uint32_t PR1 = (1U << 1);  ///< Pending bit 1
        constexpr uint32_t PR2 = (1U << 2);  ///< Pending bit 2
        constexpr uint32_t PR3 = (1U << 3);  ///< Pending bit 3
        constexpr uint32_t PR4 = (1U << 4);  ///< Pending bit 4
        constexpr uint32_t PR5 = (1U << 5);  ///< Pending bit 5
        constexpr uint32_t PR6 = (1U << 6);  ///< Pending bit 6
        constexpr uint32_t PR7 = (1U << 7);  ///< Pending bit 7
        constexpr uint32_t PR8 = (1U << 8);  ///< Pending bit 8
        constexpr uint32_t PR9 = (1U << 9);  ///< Pending bit 9
        constexpr uint32_t PR10 = (1U << 10);  ///< Pending bit 10
        constexpr uint32_t PR11 = (1U << 11);  ///< Pending bit 11
        constexpr uint32_t PR12 = (1U << 12);  ///< Pending bit 12
        constexpr uint32_t PR13 = (1U << 13);  ///< Pending bit 13
        constexpr uint32_t PR14 = (1U << 14);  ///< Pending bit 14
        constexpr uint32_t PR15 = (1U << 15);  ///< Pending bit 15
        constexpr uint32_t PR16 = (1U << 16);  ///< Pending bit 16
        constexpr uint32_t PR17 = (1U << 17);  ///< Pending bit 17
        constexpr uint32_t PR18 = (1U << 18);  ///< Pending bit 18
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMA1_BASE = 0x40020000;
    constexpr uint32_t DMA2_BASE = 0x40020400;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t ISR;  ///< Offset: 0x00 - DMA interrupt status register (DMA_ISR)
        volatile uint32_t IFCR;  ///< Offset: 0x04 - DMA interrupt flag clear register (DMA_IFCR)
        volatile uint32_t CCR1;  ///< Offset: 0x08 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR1;  ///< Offset: 0x0C - DMA channel 1 number of data register
        volatile uint32_t CPAR1;  ///< Offset: 0x10 - DMA channel 1 peripheral address register
        volatile uint32_t CMAR1;  ///< Offset: 0x14 - DMA channel 1 memory address register
        volatile uint32_t CCR2;  ///< Offset: 0x1C - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR2;  ///< Offset: 0x20 - DMA channel 2 number of data register
        volatile uint32_t CPAR2;  ///< Offset: 0x24 - DMA channel 2 peripheral address register
        volatile uint32_t CMAR2;  ///< Offset: 0x28 - DMA channel 2 memory address register
        volatile uint32_t CCR3;  ///< Offset: 0x30 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR3;  ///< Offset: 0x34 - DMA channel 3 number of data register
        volatile uint32_t CPAR3;  ///< Offset: 0x38 - DMA channel 3 peripheral address register
        volatile uint32_t CMAR3;  ///< Offset: 0x3C - DMA channel 3 memory address register
        volatile uint32_t CCR4;  ///< Offset: 0x44 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR4;  ///< Offset: 0x48 - DMA channel 4 number of data register
        volatile uint32_t CPAR4;  ///< Offset: 0x4C - DMA channel 4 peripheral address register
        volatile uint32_t CMAR4;  ///< Offset: 0x50 - DMA channel 4 memory address register
        volatile uint32_t CCR5;  ///< Offset: 0x58 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR5;  ///< Offset: 0x5C - DMA channel 5 number of data register
        volatile uint32_t CPAR5;  ///< Offset: 0x60 - DMA channel 5 peripheral address register
        volatile uint32_t CMAR5;  ///< Offset: 0x64 - DMA channel 5 memory address register
        volatile uint32_t CCR6;  ///< Offset: 0x6C - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR6;  ///< Offset: 0x70 - DMA channel 6 number of data register
        volatile uint32_t CPAR6;  ///< Offset: 0x74 - DMA channel 6 peripheral address register
        volatile uint32_t CMAR6;  ///< Offset: 0x78 - DMA channel 6 memory address register
        volatile uint32_t CCR7;  ///< Offset: 0x80 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR7;  ///< Offset: 0x84 - DMA channel 7 number of data register
        volatile uint32_t CPAR7;  ///< Offset: 0x88 - DMA channel 7 peripheral address register
        volatile uint32_t CMAR7;  ///< Offset: 0x8C - DMA channel 7 memory address register
    };

    /// Peripheral instances
    inline Registers* DMA1 = reinterpret_cast<Registers*>(DMA1_BASE);
    inline Registers* DMA2 = reinterpret_cast<Registers*>(DMA2_BASE);

    // Bit definitions
    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t GIF1 = (1U << 0);  ///< Channel 1 Global interrupt flag
        constexpr uint32_t TCIF1 = (1U << 1);  ///< Channel 1 Transfer Complete flag
        constexpr uint32_t HTIF1 = (1U << 2);  ///< Channel 1 Half Transfer Complete flag
        constexpr uint32_t TEIF1 = (1U << 3);  ///< Channel 1 Transfer Error flag
        constexpr uint32_t GIF2 = (1U << 4);  ///< Channel 2 Global interrupt flag
        constexpr uint32_t TCIF2 = (1U << 5);  ///< Channel 2 Transfer Complete flag
        constexpr uint32_t HTIF2 = (1U << 6);  ///< Channel 2 Half Transfer Complete flag
        constexpr uint32_t TEIF2 = (1U << 7);  ///< Channel 2 Transfer Error flag
        constexpr uint32_t GIF3 = (1U << 8);  ///< Channel 3 Global interrupt flag
        constexpr uint32_t TCIF3 = (1U << 9);  ///< Channel 3 Transfer Complete flag
        constexpr uint32_t HTIF3 = (1U << 10);  ///< Channel 3 Half Transfer Complete flag
        constexpr uint32_t TEIF3 = (1U << 11);  ///< Channel 3 Transfer Error flag
        constexpr uint32_t GIF4 = (1U << 12);  ///< Channel 4 Global interrupt flag
        constexpr uint32_t TCIF4 = (1U << 13);  ///< Channel 4 Transfer Complete flag
        constexpr uint32_t HTIF4 = (1U << 14);  ///< Channel 4 Half Transfer Complete flag
        constexpr uint32_t TEIF4 = (1U << 15);  ///< Channel 4 Transfer Error flag
        constexpr uint32_t GIF5 = (1U << 16);  ///< Channel 5 Global interrupt flag
        constexpr uint32_t TCIF5 = (1U << 17);  ///< Channel 5 Transfer Complete flag
        constexpr uint32_t HTIF5 = (1U << 18);  ///< Channel 5 Half Transfer Complete flag
        constexpr uint32_t TEIF5 = (1U << 19);  ///< Channel 5 Transfer Error flag
        constexpr uint32_t GIF6 = (1U << 20);  ///< Channel 6 Global interrupt flag
        constexpr uint32_t TCIF6 = (1U << 21);  ///< Channel 6 Transfer Complete flag
        constexpr uint32_t HTIF6 = (1U << 22);  ///< Channel 6 Half Transfer Complete flag
        constexpr uint32_t TEIF6 = (1U << 23);  ///< Channel 6 Transfer Error flag
        constexpr uint32_t GIF7 = (1U << 24);  ///< Channel 7 Global interrupt flag
        constexpr uint32_t TCIF7 = (1U << 25);  ///< Channel 7 Transfer Complete flag
        constexpr uint32_t HTIF7 = (1U << 26);  ///< Channel 7 Half Transfer Complete flag
        constexpr uint32_t TEIF7 = (1U << 27);  ///< Channel 7 Transfer Error flag
    }

    /// IFCR Register bits
    namespace ifcr_bits {
        constexpr uint32_t CGIF1 = (1U << 0);  ///< Channel 1 Global interrupt clear
        constexpr uint32_t CGIF2 = (1U << 4);  ///< Channel 2 Global interrupt clear
        constexpr uint32_t CGIF3 = (1U << 8);  ///< Channel 3 Global interrupt clear
        constexpr uint32_t CGIF4 = (1U << 12);  ///< Channel 4 Global interrupt clear
        constexpr uint32_t CGIF5 = (1U << 16);  ///< Channel 5 Global interrupt clear
        constexpr uint32_t CGIF6 = (1U << 20);  ///< Channel 6 Global interrupt clear
        constexpr uint32_t CGIF7 = (1U << 24);  ///< Channel 7 Global interrupt clear
        constexpr uint32_t CTCIF1 = (1U << 1);  ///< Channel 1 Transfer Complete clear
        constexpr uint32_t CTCIF2 = (1U << 5);  ///< Channel 2 Transfer Complete clear
        constexpr uint32_t CTCIF3 = (1U << 9);  ///< Channel 3 Transfer Complete clear
        constexpr uint32_t CTCIF4 = (1U << 13);  ///< Channel 4 Transfer Complete clear
        constexpr uint32_t CTCIF5 = (1U << 17);  ///< Channel 5 Transfer Complete clear
        constexpr uint32_t CTCIF6 = (1U << 21);  ///< Channel 6 Transfer Complete clear
        constexpr uint32_t CTCIF7 = (1U << 25);  ///< Channel 7 Transfer Complete clear
        constexpr uint32_t CHTIF1 = (1U << 2);  ///< Channel 1 Half Transfer clear
        constexpr uint32_t CHTIF2 = (1U << 6);  ///< Channel 2 Half Transfer clear
        constexpr uint32_t CHTIF3 = (1U << 10);  ///< Channel 3 Half Transfer clear
        constexpr uint32_t CHTIF4 = (1U << 14);  ///< Channel 4 Half Transfer clear
        constexpr uint32_t CHTIF5 = (1U << 18);  ///< Channel 5 Half Transfer clear
        constexpr uint32_t CHTIF6 = (1U << 22);  ///< Channel 6 Half Transfer clear
        constexpr uint32_t CHTIF7 = (1U << 26);  ///< Channel 7 Half Transfer clear
        constexpr uint32_t CTEIF1 = (1U << 3);  ///< Channel 1 Transfer Error clear
        constexpr uint32_t CTEIF2 = (1U << 7);  ///< Channel 2 Transfer Error clear
        constexpr uint32_t CTEIF3 = (1U << 11);  ///< Channel 3 Transfer Error clear
        constexpr uint32_t CTEIF4 = (1U << 15);  ///< Channel 4 Transfer Error clear
        constexpr uint32_t CTEIF5 = (1U << 19);  ///< Channel 5 Transfer Error clear
        constexpr uint32_t CTEIF6 = (1U << 23);  ///< Channel 6 Transfer Error clear
        constexpr uint32_t CTEIF7 = (1U << 27);  ///< Channel 7 Transfer Error clear
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR1 Register bits
    namespace cndtr1_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR1 Register bits
    namespace cpar1_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR1 Register bits
    namespace cmar1_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR2 Register bits
    namespace cndtr2_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR2 Register bits
    namespace cpar2_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR2 Register bits
    namespace cmar2_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR3 Register bits
    namespace cndtr3_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR3 Register bits
    namespace cpar3_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR3 Register bits
    namespace cmar3_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR4 Register bits
    namespace cndtr4_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR4 Register bits
    namespace cpar4_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR4 Register bits
    namespace cmar4_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR5 Register bits
    namespace ccr5_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR5 Register bits
    namespace cndtr5_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR5 Register bits
    namespace cpar5_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR5 Register bits
    namespace cmar5_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR6 Register bits
    namespace ccr6_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR6 Register bits
    namespace cndtr6_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR6 Register bits
    namespace cpar6_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR6 Register bits
    namespace cmar6_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR7 Register bits
    namespace ccr7_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR7 Register bits
    namespace cndtr7_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR7 Register bits
    namespace cpar7_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR7 Register bits
    namespace cmar7_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

}

// ============================================================================
// SDIO Peripheral
// ============================================================================

namespace sdio {
    /// Base addresses
    constexpr uint32_t SDIO_BASE = 0x40018000;

    /// SDIO Register structure
    struct Registers {
        volatile uint32_t POWER;  ///< Offset: 0x00 - Bits 1:0 = PWRCTRL: Power supply control bits
        volatile uint32_t CLKCR;  ///< Offset: 0x04 - SDI clock control register (SDIO_CLKCR)
        volatile uint32_t ARG;  ///< Offset: 0x08 - Bits 31:0 = : Command argument
        volatile uint32_t CMD;  ///< Offset: 0x0C - SDIO command register (SDIO_CMD)
        volatile uint32_t RESPCMD;  ///< Offset: 0x10 - SDIO command register
        volatile uint32_t RESPI1;  ///< Offset: 0x14 - Bits 31:0 = CARDSTATUS1
        volatile uint32_t RESP2;  ///< Offset: 0x18 - Bits 31:0 = CARDSTATUS2
        volatile uint32_t RESP3;  ///< Offset: 0x1C - Bits 31:0 = CARDSTATUS3
        volatile uint32_t RESP4;  ///< Offset: 0x20 - Bits 31:0 = CARDSTATUS4
        volatile uint32_t DTIMER;  ///< Offset: 0x24 - Bits 31:0 = DATATIME: Data timeout period
        volatile uint32_t DLEN;  ///< Offset: 0x28 - Bits 24:0 = DATALENGTH: Data length value
        volatile uint32_t DCTRL;  ///< Offset: 0x2C - SDIO data control register (SDIO_DCTRL)
        volatile uint32_t DCOUNT;  ///< Offset: 0x30 - Bits 24:0 = DATACOUNT: Data count value
        volatile uint32_t STA;  ///< Offset: 0x34 - SDIO status register (SDIO_STA)
        volatile uint32_t ICR;  ///< Offset: 0x38 - SDIO interrupt clear register (SDIO_ICR)
        volatile uint32_t MASK;  ///< Offset: 0x3C - SDIO mask register (SDIO_MASK)
        volatile uint32_t FIFOCNT;  ///< Offset: 0x48 - Bits 23:0 = FIFOCOUNT: Remaining number of words to be...
        volatile uint32_t FIFO;  ///< Offset: 0x80 - bits 31:0 = FIFOData: Receive and transmit FIFO data
    };

    /// Peripheral instances
    inline Registers* SDIO = reinterpret_cast<Registers*>(SDIO_BASE);

    // Bit definitions
    /// POWER Register bits
    namespace power_bits {
        constexpr uint32_t PWRCTRL = (2 << 0);  ///< PWRCTRL
    }

    /// CLKCR Register bits
    namespace clkcr_bits {
        constexpr uint32_t CLKDIV = (8 << 0);  ///< Clock divide factor
        constexpr uint32_t CLKEN = (1U << 8);  ///< Clock enable bit
        constexpr uint32_t PWRSAV = (1U << 9);  ///< Power saving configuration bit
        constexpr uint32_t BYPASS = (1U << 10);  ///< Clock divider bypass enable bit
        constexpr uint32_t WIDBUS = (2 << 11);  ///< Wide bus mode enable bit
        constexpr uint32_t NEGEDGE = (1U << 13);  ///< SDIO_CK dephasing selection bit
        constexpr uint32_t HWFC_EN = (1U << 14);  ///< HW Flow Control enable
    }

    /// ARG Register bits
    namespace arg_bits {
        constexpr uint32_t CMDARG = (32 << 0);  ///< Command argument
    }

    /// CMD Register bits
    namespace cmd_bits {
        constexpr uint32_t CMDINDEX = (6 << 0);  ///< CMDINDEX
        constexpr uint32_t WAITRESP = (2 << 6);  ///< WAITRESP
        constexpr uint32_t WAITINT = (1U << 8);  ///< WAITINT
        constexpr uint32_t WAITPEND = (1U << 9);  ///< WAITPEND
        constexpr uint32_t CPSMEN = (1U << 10);  ///< CPSMEN
        constexpr uint32_t SDIOSuspend = (1U << 11);  ///< SDIOSuspend
        constexpr uint32_t ENCMDcompl = (1U << 12);  ///< ENCMDcompl
        constexpr uint32_t nIEN = (1U << 13);  ///< nIEN
        constexpr uint32_t CE_ATACMD = (1U << 14);  ///< CE_ATACMD
    }

    /// RESPCMD Register bits
    namespace respcmd_bits {
        constexpr uint32_t RESPCMD = (6 << 0);  ///< RESPCMD
    }

    /// RESPI1 Register bits
    namespace respi1_bits {
        constexpr uint32_t CARDSTATUS1 = (32 << 0);  ///< CARDSTATUS1
    }

    /// RESP2 Register bits
    namespace resp2_bits {
        constexpr uint32_t CARDSTATUS2 = (32 << 0);  ///< CARDSTATUS2
    }

    /// RESP3 Register bits
    namespace resp3_bits {
        constexpr uint32_t CARDSTATUS3 = (32 << 0);  ///< CARDSTATUS3
    }

    /// RESP4 Register bits
    namespace resp4_bits {
        constexpr uint32_t CARDSTATUS4 = (32 << 0);  ///< CARDSTATUS4
    }

    /// DTIMER Register bits
    namespace dtimer_bits {
        constexpr uint32_t DATATIME = (32 << 0);  ///< Data timeout period
    }

    /// DLEN Register bits
    namespace dlen_bits {
        constexpr uint32_t DATALENGTH = (25 << 0);  ///< Data length value
    }

    /// DCTRL Register bits
    namespace dctrl_bits {
        constexpr uint32_t DTEN = (1U << 0);  ///< DTEN
        constexpr uint32_t DTDIR = (1U << 1);  ///< DTDIR
        constexpr uint32_t DTMODE = (1U << 2);  ///< DTMODE
        constexpr uint32_t DMAEN = (1U << 3);  ///< DMAEN
        constexpr uint32_t DBLOCKSIZE = (4 << 4);  ///< DBLOCKSIZE
        constexpr uint32_t PWSTART = (1U << 8);  ///< PWSTART
        constexpr uint32_t PWSTOP = (1U << 9);  ///< PWSTOP
        constexpr uint32_t RWMOD = (1U << 10);  ///< RWMOD
        constexpr uint32_t SDIOEN = (1U << 11);  ///< SDIOEN
    }

    /// DCOUNT Register bits
    namespace dcount_bits {
        constexpr uint32_t DATACOUNT = (25 << 0);  ///< Data count value
    }

    /// STA Register bits
    namespace sta_bits {
        constexpr uint32_t CCRCFAIL = (1U << 0);  ///< CCRCFAIL
        constexpr uint32_t DCRCFAIL = (1U << 1);  ///< DCRCFAIL
        constexpr uint32_t CTIMEOUT = (1U << 2);  ///< CTIMEOUT
        constexpr uint32_t DTIMEOUT = (1U << 3);  ///< DTIMEOUT
        constexpr uint32_t TXUNDERR = (1U << 4);  ///< TXUNDERR
        constexpr uint32_t RXOVERR = (1U << 5);  ///< RXOVERR
        constexpr uint32_t CMDREND = (1U << 6);  ///< CMDREND
        constexpr uint32_t CMDSENT = (1U << 7);  ///< CMDSENT
        constexpr uint32_t DATAEND = (1U << 8);  ///< DATAEND
        constexpr uint32_t STBITERR = (1U << 9);  ///< STBITERR
        constexpr uint32_t DBCKEND = (1U << 10);  ///< DBCKEND
        constexpr uint32_t CMDACT = (1U << 11);  ///< CMDACT
        constexpr uint32_t TXACT = (1U << 12);  ///< TXACT
        constexpr uint32_t RXACT = (1U << 13);  ///< RXACT
        constexpr uint32_t TXFIFOHE = (1U << 14);  ///< TXFIFOHE
        constexpr uint32_t RXFIFOHF = (1U << 15);  ///< RXFIFOHF
        constexpr uint32_t TXFIFOF = (1U << 16);  ///< TXFIFOF
        constexpr uint32_t RXFIFOF = (1U << 17);  ///< RXFIFOF
        constexpr uint32_t TXFIFOE = (1U << 18);  ///< TXFIFOE
        constexpr uint32_t RXFIFOE = (1U << 19);  ///< RXFIFOE
        constexpr uint32_t TXDAVL = (1U << 20);  ///< TXDAVL
        constexpr uint32_t RXDAVL = (1U << 21);  ///< RXDAVL
        constexpr uint32_t SDIOIT = (1U << 22);  ///< SDIOIT
        constexpr uint32_t CEATAEND = (1U << 23);  ///< CEATAEND
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t CCRCFAILC = (1U << 0);  ///< CCRCFAILC
        constexpr uint32_t DCRCFAILC = (1U << 1);  ///< DCRCFAILC
        constexpr uint32_t CTIMEOUTC = (1U << 2);  ///< CTIMEOUTC
        constexpr uint32_t DTIMEOUTC = (1U << 3);  ///< DTIMEOUTC
        constexpr uint32_t TXUNDERRC = (1U << 4);  ///< TXUNDERRC
        constexpr uint32_t RXOVERRC = (1U << 5);  ///< RXOVERRC
        constexpr uint32_t CMDRENDC = (1U << 6);  ///< CMDRENDC
        constexpr uint32_t CMDSENTC = (1U << 7);  ///< CMDSENTC
        constexpr uint32_t DATAENDC = (1U << 8);  ///< DATAENDC
        constexpr uint32_t STBITERRC = (1U << 9);  ///< STBITERRC
        constexpr uint32_t DBCKENDC = (1U << 10);  ///< DBCKENDC
        constexpr uint32_t SDIOITC = (1U << 22);  ///< SDIOITC
        constexpr uint32_t CEATAENDC = (1U << 23);  ///< CEATAENDC
    }

    /// MASK Register bits
    namespace mask_bits {
        constexpr uint32_t CCRCFAILIE = (1U << 0);  ///< CCRCFAILIE
        constexpr uint32_t DCRCFAILIE = (1U << 1);  ///< DCRCFAILIE
        constexpr uint32_t CTIMEOUTIE = (1U << 2);  ///< CTIMEOUTIE
        constexpr uint32_t DTIMEOUTIE = (1U << 3);  ///< DTIMEOUTIE
        constexpr uint32_t TXUNDERRIE = (1U << 4);  ///< TXUNDERRIE
        constexpr uint32_t RXOVERRIE = (1U << 5);  ///< RXOVERRIE
        constexpr uint32_t CMDRENDIE = (1U << 6);  ///< CMDRENDIE
        constexpr uint32_t CMDSENTIE = (1U << 7);  ///< CMDSENTIE
        constexpr uint32_t DATAENDIE = (1U << 8);  ///< DATAENDIE
        constexpr uint32_t STBITERRIE = (1U << 9);  ///< STBITERRIE
        constexpr uint32_t DBACKENDIE = (1U << 10);  ///< DBACKENDIE
        constexpr uint32_t CMDACTIE = (1U << 11);  ///< CMDACTIE
        constexpr uint32_t TXACTIE = (1U << 12);  ///< TXACTIE
        constexpr uint32_t RXACTIE = (1U << 13);  ///< RXACTIE
        constexpr uint32_t TXFIFOHEIE = (1U << 14);  ///< TXFIFOHEIE
        constexpr uint32_t RXFIFOHFIE = (1U << 15);  ///< RXFIFOHFIE
        constexpr uint32_t TXFIFOFIE = (1U << 16);  ///< TXFIFOFIE
        constexpr uint32_t RXFIFOFIE = (1U << 17);  ///< RXFIFOFIE
        constexpr uint32_t TXFIFOEIE = (1U << 18);  ///< TXFIFOEIE
        constexpr uint32_t RXFIFOEIE = (1U << 19);  ///< RXFIFOEIE
        constexpr uint32_t TXDAVLIE = (1U << 20);  ///< TXDAVLIE
        constexpr uint32_t RXDAVLIE = (1U << 21);  ///< RXDAVLIE
        constexpr uint32_t SDIOITIE = (1U << 22);  ///< SDIOITIE
        constexpr uint32_t CEATENDIE = (1U << 23);  ///< CEATENDIE
    }

    /// FIFOCNT Register bits
    namespace fifocnt_bits {
        constexpr uint32_t FIF0COUNT = (24 << 0);  ///< FIF0COUNT
    }

    /// FIFO Register bits
    namespace fifo_bits {
        constexpr uint32_t FIFOData = (32 << 0);  ///< FIFOData
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x40002800;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t CRH;  ///< Offset: 0x00 - RTC Control Register High
        volatile uint32_t CRL;  ///< Offset: 0x04 - RTC Control Register Low
        volatile uint32_t PRLH;  ///< Offset: 0x08 - RTC Prescaler Load Register High
        volatile uint32_t PRLL;  ///< Offset: 0x0C - RTC Prescaler Load Register Low
        volatile uint32_t DIVH;  ///< Offset: 0x10 - RTC Prescaler Divider Register High
        volatile uint32_t DIVL;  ///< Offset: 0x14 - RTC Prescaler Divider Register Low
        volatile uint32_t CNTH;  ///< Offset: 0x18 - RTC Counter Register High
        volatile uint32_t CNTL;  ///< Offset: 0x1C - RTC Counter Register Low
        volatile uint32_t ALRH;  ///< Offset: 0x20 - RTC Alarm Register High
        volatile uint32_t ALRL;  ///< Offset: 0x24 - RTC Alarm Register Low
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// CRH Register bits
    namespace crh_bits {
        constexpr uint32_t SECIE = (1U << 0);  ///< Second interrupt Enable
        constexpr uint32_t ALRIE = (1U << 1);  ///< Alarm interrupt Enable
        constexpr uint32_t OWIE = (1U << 2);  ///< Overflow interrupt Enable
    }

    /// CRL Register bits
    namespace crl_bits {
        constexpr uint32_t SECF = (1U << 0);  ///< Second Flag
        constexpr uint32_t ALRF = (1U << 1);  ///< Alarm Flag
        constexpr uint32_t OWF = (1U << 2);  ///< Overflow Flag
        constexpr uint32_t RSF = (1U << 3);  ///< Registers Synchronized Flag
        constexpr uint32_t CNF = (1U << 4);  ///< Configuration Flag
        constexpr uint32_t RTOFF = (1U << 5);  ///< RTC operation OFF
    }

    /// PRLH Register bits
    namespace prlh_bits {
        constexpr uint32_t PRLH = (4 << 0);  ///< RTC Prescaler Load Register High
    }

    /// PRLL Register bits
    namespace prll_bits {
        constexpr uint32_t PRLL = (16 << 0);  ///< RTC Prescaler Divider Register Low
    }

    /// DIVH Register bits
    namespace divh_bits {
        constexpr uint32_t DIVH = (4 << 0);  ///< RTC prescaler divider register high
    }

    /// DIVL Register bits
    namespace divl_bits {
        constexpr uint32_t DIVL = (16 << 0);  ///< RTC prescaler divider register Low
    }

    /// CNTH Register bits
    namespace cnth_bits {
        constexpr uint32_t CNTH = (16 << 0);  ///< RTC counter register high
    }

    /// CNTL Register bits
    namespace cntl_bits {
        constexpr uint32_t CNTL = (16 << 0);  ///< RTC counter register Low
    }

    /// ALRH Register bits
    namespace alrh_bits {
        constexpr uint32_t ALRH = (16 << 0);  ///< RTC alarm register high
    }

    /// ALRL Register bits
    namespace alrl_bits {
        constexpr uint32_t ALRL = (16 << 0);  ///< RTC alarm register low
    }

}

// ============================================================================
// BKP Peripheral
// ============================================================================

namespace bkp {
    /// Base addresses
    constexpr uint32_t BKP_BASE = 0x40006C04;

    /// BKP Register structure
    struct Registers {
        volatile uint32_t DR1;  ///< Offset: 0x00 - Backup data register (BKP_DR)
        volatile uint32_t DR2;  ///< Offset: 0x04 - Backup data register (BKP_DR)
        volatile uint32_t DR3;  ///< Offset: 0x08 - Backup data register (BKP_DR)
        volatile uint32_t DR4;  ///< Offset: 0x0C - Backup data register (BKP_DR)
        volatile uint32_t DR5;  ///< Offset: 0x10 - Backup data register (BKP_DR)
        volatile uint32_t DR6;  ///< Offset: 0x14 - Backup data register (BKP_DR)
        volatile uint32_t DR7;  ///< Offset: 0x18 - Backup data register (BKP_DR)
        volatile uint32_t DR8;  ///< Offset: 0x1C - Backup data register (BKP_DR)
        volatile uint32_t DR9;  ///< Offset: 0x20 - Backup data register (BKP_DR)
        volatile uint32_t DR10;  ///< Offset: 0x24 - Backup data register (BKP_DR)
        volatile uint32_t DR11;  ///< Offset: 0x3C - Backup data register (BKP_DR)
        volatile uint32_t DR12;  ///< Offset: 0x40 - Backup data register (BKP_DR)
        volatile uint32_t DR13;  ///< Offset: 0x44 - Backup data register (BKP_DR)
        volatile uint32_t DR14;  ///< Offset: 0x48 - Backup data register (BKP_DR)
        volatile uint32_t DR15;  ///< Offset: 0x4C - Backup data register (BKP_DR)
        volatile uint32_t DR16;  ///< Offset: 0x50 - Backup data register (BKP_DR)
        volatile uint32_t DR17;  ///< Offset: 0x54 - Backup data register (BKP_DR)
        volatile uint32_t DR18;  ///< Offset: 0x58 - Backup data register (BKP_DR)
        volatile uint32_t DR19;  ///< Offset: 0x5C - Backup data register (BKP_DR)
        volatile uint32_t DR20;  ///< Offset: 0x60 - Backup data register (BKP_DR)
        volatile uint32_t DR21;  ///< Offset: 0x64 - Backup data register (BKP_DR)
        volatile uint32_t DR22;  ///< Offset: 0x68 - Backup data register (BKP_DR)
        volatile uint32_t DR23;  ///< Offset: 0x6C - Backup data register (BKP_DR)
        volatile uint32_t DR24;  ///< Offset: 0x70 - Backup data register (BKP_DR)
        volatile uint32_t DR25;  ///< Offset: 0x74 - Backup data register (BKP_DR)
        volatile uint32_t DR26;  ///< Offset: 0x78 - Backup data register (BKP_DR)
        volatile uint32_t DR27;  ///< Offset: 0x7C - Backup data register (BKP_DR)
        volatile uint32_t DR28;  ///< Offset: 0x80 - Backup data register (BKP_DR)
        volatile uint32_t DR29;  ///< Offset: 0x84 - Backup data register (BKP_DR)
        volatile uint32_t DR30;  ///< Offset: 0x88 - Backup data register (BKP_DR)
        volatile uint32_t DR31;  ///< Offset: 0x8C - Backup data register (BKP_DR)
        volatile uint32_t DR32;  ///< Offset: 0x90 - Backup data register (BKP_DR)
        volatile uint32_t DR33;  ///< Offset: 0x94 - Backup data register (BKP_DR)
        volatile uint32_t DR34;  ///< Offset: 0x98 - Backup data register (BKP_DR)
        volatile uint32_t DR35;  ///< Offset: 0x9C - Backup data register (BKP_DR)
        volatile uint32_t DR36;  ///< Offset: 0xA0 - Backup data register (BKP_DR)
        volatile uint32_t DR37;  ///< Offset: 0xA4 - Backup data register (BKP_DR)
        volatile uint32_t DR38;  ///< Offset: 0xA8 - Backup data register (BKP_DR)
        volatile uint32_t DR39;  ///< Offset: 0xAC - Backup data register (BKP_DR)
        volatile uint32_t DR40;  ///< Offset: 0xB0 - Backup data register (BKP_DR)
        volatile uint32_t DR41;  ///< Offset: 0xB4 - Backup data register (BKP_DR)
        volatile uint32_t DR42;  ///< Offset: 0xB8 - Backup data register (BKP_DR)
        volatile uint32_t RTCCR;  ///< Offset: 0x28 - RTC clock calibration register (BKP_RTCCR)
        volatile uint32_t CR;  ///< Offset: 0x2C - Backup control register (BKP_CR)
        volatile uint32_t CSR;  ///< Offset: 0x30 - BKP_CSR control/status register (BKP_CSR)
    };

    /// Peripheral instances
    inline Registers* BKP = reinterpret_cast<Registers*>(BKP_BASE);

    // Bit definitions
    /// DR1 Register bits
    namespace dr1_bits {
        constexpr uint32_t D1 = (16 << 0);  ///< Backup data
    }

    /// DR2 Register bits
    namespace dr2_bits {
        constexpr uint32_t D2 = (16 << 0);  ///< Backup data
    }

    /// DR3 Register bits
    namespace dr3_bits {
        constexpr uint32_t D3 = (16 << 0);  ///< Backup data
    }

    /// DR4 Register bits
    namespace dr4_bits {
        constexpr uint32_t D4 = (16 << 0);  ///< Backup data
    }

    /// DR5 Register bits
    namespace dr5_bits {
        constexpr uint32_t D5 = (16 << 0);  ///< Backup data
    }

    /// DR6 Register bits
    namespace dr6_bits {
        constexpr uint32_t D6 = (16 << 0);  ///< Backup data
    }

    /// DR7 Register bits
    namespace dr7_bits {
        constexpr uint32_t D7 = (16 << 0);  ///< Backup data
    }

    /// DR8 Register bits
    namespace dr8_bits {
        constexpr uint32_t D8 = (16 << 0);  ///< Backup data
    }

    /// DR9 Register bits
    namespace dr9_bits {
        constexpr uint32_t D9 = (16 << 0);  ///< Backup data
    }

    /// DR10 Register bits
    namespace dr10_bits {
        constexpr uint32_t D10 = (16 << 0);  ///< Backup data
    }

    /// DR11 Register bits
    namespace dr11_bits {
        constexpr uint32_t DR11 = (16 << 0);  ///< Backup data
    }

    /// DR12 Register bits
    namespace dr12_bits {
        constexpr uint32_t DR12 = (16 << 0);  ///< Backup data
    }

    /// DR13 Register bits
    namespace dr13_bits {
        constexpr uint32_t DR13 = (16 << 0);  ///< Backup data
    }

    /// DR14 Register bits
    namespace dr14_bits {
        constexpr uint32_t D14 = (16 << 0);  ///< Backup data
    }

    /// DR15 Register bits
    namespace dr15_bits {
        constexpr uint32_t D15 = (16 << 0);  ///< Backup data
    }

    /// DR16 Register bits
    namespace dr16_bits {
        constexpr uint32_t D16 = (16 << 0);  ///< Backup data
    }

    /// DR17 Register bits
    namespace dr17_bits {
        constexpr uint32_t D17 = (16 << 0);  ///< Backup data
    }

    /// DR18 Register bits
    namespace dr18_bits {
        constexpr uint32_t D18 = (16 << 0);  ///< Backup data
    }

    /// DR19 Register bits
    namespace dr19_bits {
        constexpr uint32_t D19 = (16 << 0);  ///< Backup data
    }

    /// DR20 Register bits
    namespace dr20_bits {
        constexpr uint32_t D20 = (16 << 0);  ///< Backup data
    }

    /// DR21 Register bits
    namespace dr21_bits {
        constexpr uint32_t D21 = (16 << 0);  ///< Backup data
    }

    /// DR22 Register bits
    namespace dr22_bits {
        constexpr uint32_t D22 = (16 << 0);  ///< Backup data
    }

    /// DR23 Register bits
    namespace dr23_bits {
        constexpr uint32_t D23 = (16 << 0);  ///< Backup data
    }

    /// DR24 Register bits
    namespace dr24_bits {
        constexpr uint32_t D24 = (16 << 0);  ///< Backup data
    }

    /// DR25 Register bits
    namespace dr25_bits {
        constexpr uint32_t D25 = (16 << 0);  ///< Backup data
    }

    /// DR26 Register bits
    namespace dr26_bits {
        constexpr uint32_t D26 = (16 << 0);  ///< Backup data
    }

    /// DR27 Register bits
    namespace dr27_bits {
        constexpr uint32_t D27 = (16 << 0);  ///< Backup data
    }

    /// DR28 Register bits
    namespace dr28_bits {
        constexpr uint32_t D28 = (16 << 0);  ///< Backup data
    }

    /// DR29 Register bits
    namespace dr29_bits {
        constexpr uint32_t D29 = (16 << 0);  ///< Backup data
    }

    /// DR30 Register bits
    namespace dr30_bits {
        constexpr uint32_t D30 = (16 << 0);  ///< Backup data
    }

    /// DR31 Register bits
    namespace dr31_bits {
        constexpr uint32_t D31 = (16 << 0);  ///< Backup data
    }

    /// DR32 Register bits
    namespace dr32_bits {
        constexpr uint32_t D32 = (16 << 0);  ///< Backup data
    }

    /// DR33 Register bits
    namespace dr33_bits {
        constexpr uint32_t D33 = (16 << 0);  ///< Backup data
    }

    /// DR34 Register bits
    namespace dr34_bits {
        constexpr uint32_t D34 = (16 << 0);  ///< Backup data
    }

    /// DR35 Register bits
    namespace dr35_bits {
        constexpr uint32_t D35 = (16 << 0);  ///< Backup data
    }

    /// DR36 Register bits
    namespace dr36_bits {
        constexpr uint32_t D36 = (16 << 0);  ///< Backup data
    }

    /// DR37 Register bits
    namespace dr37_bits {
        constexpr uint32_t D37 = (16 << 0);  ///< Backup data
    }

    /// DR38 Register bits
    namespace dr38_bits {
        constexpr uint32_t D38 = (16 << 0);  ///< Backup data
    }

    /// DR39 Register bits
    namespace dr39_bits {
        constexpr uint32_t D39 = (16 << 0);  ///< Backup data
    }

    /// DR40 Register bits
    namespace dr40_bits {
        constexpr uint32_t D40 = (16 << 0);  ///< Backup data
    }

    /// DR41 Register bits
    namespace dr41_bits {
        constexpr uint32_t D41 = (16 << 0);  ///< Backup data
    }

    /// DR42 Register bits
    namespace dr42_bits {
        constexpr uint32_t D42 = (16 << 0);  ///< Backup data
    }

    /// RTCCR Register bits
    namespace rtccr_bits {
        constexpr uint32_t CAL = (7 << 0);  ///< Calibration value
        constexpr uint32_t CCO = (1U << 7);  ///< Calibration Clock Output
        constexpr uint32_t ASOE = (1U << 8);  ///< Alarm or second output enable
        constexpr uint32_t ASOS = (1U << 9);  ///< Alarm or second output selection
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t TPE = (1U << 0);  ///< Tamper pin enable
        constexpr uint32_t TPAL = (1U << 1);  ///< Tamper pin active level
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t CTE = (1U << 0);  ///< Clear Tamper event
        constexpr uint32_t CTI = (1U << 1);  ///< Clear Tamper Interrupt
        constexpr uint32_t TPIE = (1U << 2);  ///< Tamper Pin interrupt enable
        constexpr uint32_t TEF = (1U << 8);  ///< Tamper Event Flag
        constexpr uint32_t TIF = (1U << 9);  ///< Tamper Interrupt Flag
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t IWDG_BASE = 0x40003000;
    constexpr uint32_t WWDG_BASE = 0x40002C00;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t KR;  ///< Offset: 0x00 - Key register (IWDG_KR)
        volatile uint32_t PR;  ///< Offset: 0x04 - Prescaler register (IWDG_PR)
        volatile uint32_t RLR;  ///< Offset: 0x08 - Reload register (IWDG_RLR)
        volatile uint32_t SR;  ///< Offset: 0x0C - Status register (IWDG_SR)
    };

    /// Peripheral instances
    inline Registers* IWDG = reinterpret_cast<Registers*>(IWDG_BASE);
    inline Registers* WWDG = reinterpret_cast<Registers*>(WWDG_BASE);

    // Bit definitions
    /// KR Register bits
    namespace kr_bits {
        constexpr uint32_t KEY = (16 << 0);  ///< Key value
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (3 << 0);  ///< Prescaler divider
    }

    /// RLR Register bits
    namespace rlr_bits {
        constexpr uint32_t RL = (12 << 0);  ///< Watchdog counter reload value
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t PVU = (1U << 0);  ///< Watchdog prescaler value update
        constexpr uint32_t RVU = (1U << 1);  ///< Watchdog counter reload value update
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TIM1_BASE = 0x40012C00;
    constexpr uint32_t TIM8_BASE = 0x40013400;
    constexpr uint32_t TIM2_BASE = 0x40000000;
    constexpr uint32_t TIM3_BASE = 0x40000400;
    constexpr uint32_t TIM4_BASE = 0x40000800;
    constexpr uint32_t TIM5_BASE = 0x40000C00;
    constexpr uint32_t TIM9_BASE = 0x40014C00;
    constexpr uint32_t TIM12_BASE = 0x40001800;
    constexpr uint32_t TIM10_BASE = 0x40015000;
    constexpr uint32_t TIM11_BASE = 0x40015400;
    constexpr uint32_t TIM13_BASE = 0x40001C00;
    constexpr uint32_t TIM14_BASE = 0x40002000;
    constexpr uint32_t TIM6_BASE = 0x40001000;
    constexpr uint32_t TIM7_BASE = 0x40001400;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - control register 2
        volatile uint32_t SMCR;  ///< Offset: 0x08 - slave mode control register
        volatile uint32_t DIER;  ///< Offset: 0x0C - DMA/Interrupt enable register
        volatile uint32_t SR;  ///< Offset: 0x10 - status register
        volatile uint32_t EGR;  ///< Offset: 0x14 - event generation register
        volatile uint32_t CCMR1_Output;  ///< Offset: 0x18 - capture/compare mode register (output mode)
        volatile uint32_t CCMR1_Input;  ///< Offset: 0x18 - capture/compare mode register 1 (input mode)
        volatile uint32_t CCMR2_Output;  ///< Offset: 0x1C - capture/compare mode register (output mode)
        volatile uint32_t CCMR2_Input;  ///< Offset: 0x1C - capture/compare mode register 2 (input mode)
        volatile uint32_t CCER;  ///< Offset: 0x20 - capture/compare enable register
        volatile uint32_t CNT;  ///< Offset: 0x24 - counter
        volatile uint32_t PSC;  ///< Offset: 0x28 - prescaler
        volatile uint32_t ARR;  ///< Offset: 0x2C - auto-reload register
        volatile uint32_t CCR1;  ///< Offset: 0x34 - capture/compare register 1
        volatile uint32_t CCR2;  ///< Offset: 0x38 - capture/compare register 2
        volatile uint32_t CCR3;  ///< Offset: 0x3C - capture/compare register 3
        volatile uint32_t CCR4;  ///< Offset: 0x40 - capture/compare register 4
        volatile uint32_t DCR;  ///< Offset: 0x48 - DMA control register
        volatile uint32_t DMAR;  ///< Offset: 0x4C - DMA address for full transfer
        volatile uint32_t RCR;  ///< Offset: 0x30 - repetition counter register
        volatile uint32_t BDTR;  ///< Offset: 0x44 - break and dead-time register
    };

    /// Peripheral instances
    inline Registers* TIM1 = reinterpret_cast<Registers*>(TIM1_BASE);
    inline Registers* TIM8 = reinterpret_cast<Registers*>(TIM8_BASE);
    inline Registers* TIM2 = reinterpret_cast<Registers*>(TIM2_BASE);
    inline Registers* TIM3 = reinterpret_cast<Registers*>(TIM3_BASE);
    inline Registers* TIM4 = reinterpret_cast<Registers*>(TIM4_BASE);
    inline Registers* TIM5 = reinterpret_cast<Registers*>(TIM5_BASE);
    inline Registers* TIM9 = reinterpret_cast<Registers*>(TIM9_BASE);
    inline Registers* TIM12 = reinterpret_cast<Registers*>(TIM12_BASE);
    inline Registers* TIM10 = reinterpret_cast<Registers*>(TIM10_BASE);
    inline Registers* TIM11 = reinterpret_cast<Registers*>(TIM11_BASE);
    inline Registers* TIM13 = reinterpret_cast<Registers*>(TIM13_BASE);
    inline Registers* TIM14 = reinterpret_cast<Registers*>(TIM14_BASE);
    inline Registers* TIM6 = reinterpret_cast<Registers*>(TIM6_BASE);
    inline Registers* TIM7 = reinterpret_cast<Registers*>(TIM7_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t CKD = (2 << 8);  ///< Clock division
        constexpr uint32_t ARPE = (1U << 7);  ///< Auto-reload preload enable
        constexpr uint32_t CMS = (2 << 5);  ///< Center-aligned mode selection
        constexpr uint32_t DIR = (1U << 4);  ///< Direction
        constexpr uint32_t OPM = (1U << 3);  ///< One-pulse mode
        constexpr uint32_t URS = (1U << 2);  ///< Update request source
        constexpr uint32_t UDIS = (1U << 1);  ///< Update disable
        constexpr uint32_t CEN = (1U << 0);  ///< Counter enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t OIS4 = (1U << 14);  ///< Output Idle state 4
        constexpr uint32_t OIS3N = (1U << 13);  ///< Output Idle state 3
        constexpr uint32_t OIS3 = (1U << 12);  ///< Output Idle state 3
        constexpr uint32_t OIS2N = (1U << 11);  ///< Output Idle state 2
        constexpr uint32_t OIS2 = (1U << 10);  ///< Output Idle state 2
        constexpr uint32_t OIS1N = (1U << 9);  ///< Output Idle state 1
        constexpr uint32_t OIS1 = (1U << 8);  ///< Output Idle state 1
        constexpr uint32_t TI1S = (1U << 7);  ///< TI1 selection
        constexpr uint32_t MMS = (3 << 4);  ///< Master mode selection
        constexpr uint32_t CCDS = (1U << 3);  ///< Capture/compare DMA selection
        constexpr uint32_t CCUS = (1U << 2);  ///< Capture/compare control update selection
        constexpr uint32_t CCPC = (1U << 0);  ///< Capture/compare preloaded control
    }

    /// SMCR Register bits
    namespace smcr_bits {
        constexpr uint32_t ETP = (1U << 15);  ///< External trigger polarity
        constexpr uint32_t ECE = (1U << 14);  ///< External clock enable
        constexpr uint32_t ETPS = (2 << 12);  ///< External trigger prescaler
        constexpr uint32_t ETF = (4 << 8);  ///< External trigger filter
        constexpr uint32_t MSM = (1U << 7);  ///< Master/Slave mode
        constexpr uint32_t TS = (3 << 4);  ///< Trigger selection
        constexpr uint32_t SMS = (3 << 0);  ///< Slave mode selection
    }

    /// DIER Register bits
    namespace dier_bits {
        constexpr uint32_t TDE = (1U << 14);  ///< Trigger DMA request enable
        constexpr uint32_t COMDE = (1U << 13);  ///< COM DMA request enable
        constexpr uint32_t CC4DE = (1U << 12);  ///< Capture/Compare 4 DMA request enable
        constexpr uint32_t CC3DE = (1U << 11);  ///< Capture/Compare 3 DMA request enable
        constexpr uint32_t CC2DE = (1U << 10);  ///< Capture/Compare 2 DMA request enable
        constexpr uint32_t CC1DE = (1U << 9);  ///< Capture/Compare 1 DMA request enable
        constexpr uint32_t UDE = (1U << 8);  ///< Update DMA request enable
        constexpr uint32_t TIE = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t CC4IE = (1U << 4);  ///< Capture/Compare 4 interrupt enable
        constexpr uint32_t CC3IE = (1U << 3);  ///< Capture/Compare 3 interrupt enable
        constexpr uint32_t CC2IE = (1U << 2);  ///< Capture/Compare 2 interrupt enable
        constexpr uint32_t CC1IE = (1U << 1);  ///< Capture/Compare 1 interrupt enable
        constexpr uint32_t UIE = (1U << 0);  ///< Update interrupt enable
        constexpr uint32_t BIE = (1U << 7);  ///< Break interrupt enable
        constexpr uint32_t COMIE = (1U << 5);  ///< COM interrupt enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CC4OF = (1U << 12);  ///< Capture/Compare 4 overcapture flag
        constexpr uint32_t CC3OF = (1U << 11);  ///< Capture/Compare 3 overcapture flag
        constexpr uint32_t CC2OF = (1U << 10);  ///< Capture/compare 2 overcapture flag
        constexpr uint32_t CC1OF = (1U << 9);  ///< Capture/Compare 1 overcapture flag
        constexpr uint32_t BIF = (1U << 7);  ///< Break interrupt flag
        constexpr uint32_t TIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t COMIF = (1U << 5);  ///< COM interrupt flag
        constexpr uint32_t CC4IF = (1U << 4);  ///< Capture/Compare 4 interrupt flag
        constexpr uint32_t CC3IF = (1U << 3);  ///< Capture/Compare 3 interrupt flag
        constexpr uint32_t CC2IF = (1U << 2);  ///< Capture/Compare 2 interrupt flag
        constexpr uint32_t CC1IF = (1U << 1);  ///< Capture/compare 1 interrupt flag
        constexpr uint32_t UIF = (1U << 0);  ///< Update interrupt flag
    }

    /// EGR Register bits
    namespace egr_bits {
        constexpr uint32_t BG = (1U << 7);  ///< Break generation
        constexpr uint32_t TG = (1U << 6);  ///< Trigger generation
        constexpr uint32_t COMG = (1U << 5);  ///< Capture/Compare control update generation
        constexpr uint32_t CC4G = (1U << 4);  ///< Capture/compare 4 generation
        constexpr uint32_t CC3G = (1U << 3);  ///< Capture/compare 3 generation
        constexpr uint32_t CC2G = (1U << 2);  ///< Capture/compare 2 generation
        constexpr uint32_t CC1G = (1U << 1);  ///< Capture/compare 1 generation
        constexpr uint32_t UG = (1U << 0);  ///< Update generation
    }

    /// CCMR1_Output Register bits
    namespace ccmr1_output_bits {
        constexpr uint32_t OC2CE = (1U << 15);  ///< Output Compare 2 clear enable
        constexpr uint32_t OC2M = (3 << 12);  ///< Output Compare 2 mode
        constexpr uint32_t OC2PE = (1U << 11);  ///< Output Compare 2 preload enable
        constexpr uint32_t OC2FE = (1U << 10);  ///< Output Compare 2 fast enable
        constexpr uint32_t CC2S = (2 << 8);  ///< Capture/Compare 2 selection
        constexpr uint32_t OC1CE = (1U << 7);  ///< Output Compare 1 clear enable
        constexpr uint32_t OC1M = (3 << 4);  ///< Output Compare 1 mode
        constexpr uint32_t OC1PE = (1U << 3);  ///< Output Compare 1 preload enable
        constexpr uint32_t OC1FE = (1U << 2);  ///< Output Compare 1 fast enable
        constexpr uint32_t CC1S = (2 << 0);  ///< Capture/Compare 1 selection
    }

    /// CCMR1_Input Register bits
    namespace ccmr1_input_bits {
        constexpr uint32_t IC2F = (4 << 12);  ///< Input capture 2 filter
        constexpr uint32_t IC2PCS = (2 << 10);  ///< Input capture 2 prescaler
        constexpr uint32_t CC2S = (2 << 8);  ///< Capture/Compare 2 selection
        constexpr uint32_t IC1F = (4 << 4);  ///< Input capture 1 filter
        constexpr uint32_t ICPCS = (2 << 2);  ///< Input capture 1 prescaler
        constexpr uint32_t CC1S = (2 << 0);  ///< Capture/Compare 1 selection
    }

    /// CCMR2_Output Register bits
    namespace ccmr2_output_bits {
        constexpr uint32_t OC4CE = (1U << 15);  ///< Output compare 4 clear enable
        constexpr uint32_t OC4M = (3 << 12);  ///< Output compare 4 mode
        constexpr uint32_t OC4PE = (1U << 11);  ///< Output compare 4 preload enable
        constexpr uint32_t OC4FE = (1U << 10);  ///< Output compare 4 fast enable
        constexpr uint32_t CC4S = (2 << 8);  ///< Capture/Compare 4 selection
        constexpr uint32_t OC3CE = (1U << 7);  ///< Output compare 3 clear enable
        constexpr uint32_t OC3M = (3 << 4);  ///< Output compare 3 mode
        constexpr uint32_t OC3PE = (1U << 3);  ///< Output compare 3 preload enable
        constexpr uint32_t OC3FE = (1U << 2);  ///< Output compare 3 fast enable
        constexpr uint32_t CC3S = (2 << 0);  ///< Capture/Compare 3 selection
    }

    /// CCMR2_Input Register bits
    namespace ccmr2_input_bits {
        constexpr uint32_t IC4F = (4 << 12);  ///< Input capture 4 filter
        constexpr uint32_t IC4PSC = (2 << 10);  ///< Input capture 4 prescaler
        constexpr uint32_t CC4S = (2 << 8);  ///< Capture/Compare 4 selection
        constexpr uint32_t IC3F = (4 << 4);  ///< Input capture 3 filter
        constexpr uint32_t IC3PSC = (2 << 2);  ///< Input capture 3 prescaler
        constexpr uint32_t CC3S = (2 << 0);  ///< Capture/compare 3 selection
    }

    /// CCER Register bits
    namespace ccer_bits {
        constexpr uint32_t CC4P = (1U << 13);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC4E = (1U << 12);  ///< Capture/Compare 4 output enable
        constexpr uint32_t CC3NP = (1U << 11);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC3NE = (1U << 10);  ///< Capture/Compare 3 complementary output enable
        constexpr uint32_t CC3P = (1U << 9);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC3E = (1U << 8);  ///< Capture/Compare 3 output enable
        constexpr uint32_t CC2NP = (1U << 7);  ///< Capture/Compare 2 output Polarity
        constexpr uint32_t CC2NE = (1U << 6);  ///< Capture/Compare 2 complementary output enable
        constexpr uint32_t CC2P = (1U << 5);  ///< Capture/Compare 2 output Polarity
        constexpr uint32_t CC2E = (1U << 4);  ///< Capture/Compare 2 output enable
        constexpr uint32_t CC1NP = (1U << 3);  ///< Capture/Compare 1 output Polarity
        constexpr uint32_t CC1NE = (1U << 2);  ///< Capture/Compare 1 complementary output enable
        constexpr uint32_t CC1P = (1U << 1);  ///< Capture/Compare 1 output Polarity
        constexpr uint32_t CC1E = (1U << 0);  ///< Capture/Compare 1 output enable
    }

    /// CNT Register bits
    namespace cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< counter value
    }

    /// PSC Register bits
    namespace psc_bits {
        constexpr uint32_t PSC = (16 << 0);  ///< Prescaler value
    }

    /// ARR Register bits
    namespace arr_bits {
        constexpr uint32_t ARR = (16 << 0);  ///< Auto-reload value
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t CCR1 = (16 << 0);  ///< Capture/Compare 1 value
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t CCR2 = (16 << 0);  ///< Capture/Compare 2 value
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t CCR3 = (16 << 0);  ///< Capture/Compare value
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t CCR4 = (16 << 0);  ///< Capture/Compare value
    }

    /// DCR Register bits
    namespace dcr_bits {
        constexpr uint32_t DBL = (5 << 8);  ///< DMA burst length
        constexpr uint32_t DBA = (5 << 0);  ///< DMA base address
    }

    /// DMAR Register bits
    namespace dmar_bits {
        constexpr uint32_t DMAB = (16 << 0);  ///< DMA register for burst accesses
    }

    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t REP = (8 << 0);  ///< Repetition counter value
    }

    /// BDTR Register bits
    namespace bdtr_bits {
        constexpr uint32_t MOE = (1U << 15);  ///< Main output enable
        constexpr uint32_t AOE = (1U << 14);  ///< Automatic output enable
        constexpr uint32_t BKP = (1U << 13);  ///< Break polarity
        constexpr uint32_t BKE = (1U << 12);  ///< Break enable
        constexpr uint32_t OSSR = (1U << 11);  ///< Off-state selection for Run mode
        constexpr uint32_t OSSI = (1U << 10);  ///< Off-state selection for Idle mode
        constexpr uint32_t LOCK = (2 << 8);  ///< Lock configuration
        constexpr uint32_t DTG = (8 << 0);  ///< Dead-time generator setup
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C1_BASE = 0x40005400;
    constexpr uint32_t I2C2_BASE = 0x40005800;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t OAR1;  ///< Offset: 0x08 - Own address register 1
        volatile uint32_t OAR2;  ///< Offset: 0x0C - Own address register 2
        volatile uint32_t DR;  ///< Offset: 0x10 - Data register
        volatile uint32_t SR1;  ///< Offset: 0x14 - Status register 1
        volatile uint32_t SR2;  ///< Offset: 0x18 - Status register 2
        volatile uint32_t CCR;  ///< Offset: 0x1C - Clock control register
        volatile uint32_t TRISE;  ///< Offset: 0x20 - TRISE register
    };

    /// Peripheral instances
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);
    inline Registers* I2C2 = reinterpret_cast<Registers*>(I2C2_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t SWRST = (1U << 15);  ///< Software reset
        constexpr uint32_t ALERT = (1U << 13);  ///< SMBus alert
        constexpr uint32_t PEC = (1U << 12);  ///< Packet error checking
        constexpr uint32_t POS = (1U << 11);  ///< Acknowledge/PEC Position (for data reception)
        constexpr uint32_t ACK = (1U << 10);  ///< Acknowledge enable
        constexpr uint32_t STOP = (1U << 9);  ///< Stop generation
        constexpr uint32_t START = (1U << 8);  ///< Start generation
        constexpr uint32_t NOSTRETCH = (1U << 7);  ///< Clock stretching disable (Slave mode)
        constexpr uint32_t ENGC = (1U << 6);  ///< General call enable
        constexpr uint32_t ENPEC = (1U << 5);  ///< PEC enable
        constexpr uint32_t ENARP = (1U << 4);  ///< ARP enable
        constexpr uint32_t SMBTYPE = (1U << 3);  ///< SMBus type
        constexpr uint32_t SMBUS = (1U << 1);  ///< SMBus mode
        constexpr uint32_t PE = (1U << 0);  ///< Peripheral enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t LAST = (1U << 12);  ///< DMA last transfer
        constexpr uint32_t DMAEN = (1U << 11);  ///< DMA requests enable
        constexpr uint32_t ITBUFEN = (1U << 10);  ///< Buffer interrupt enable
        constexpr uint32_t ITEVTEN = (1U << 9);  ///< Event interrupt enable
        constexpr uint32_t ITERREN = (1U << 8);  ///< Error interrupt enable
        constexpr uint32_t FREQ = (6 << 0);  ///< Peripheral clock frequency
    }

    /// OAR1 Register bits
    namespace oar1_bits {
        constexpr uint32_t ADDMODE = (1U << 15);  ///< Addressing mode (slave mode)
        constexpr uint32_t ADD10 = (2 << 8);  ///< Interface address
        constexpr uint32_t ADD7 = (7 << 1);  ///< Interface address
        constexpr uint32_t ADD0 = (1U << 0);  ///< Interface address
    }

    /// OAR2 Register bits
    namespace oar2_bits {
        constexpr uint32_t ADD2 = (7 << 1);  ///< Interface address
        constexpr uint32_t ENDUAL = (1U << 0);  ///< Dual addressing mode enable
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (8 << 0);  ///< 8-bit data register
    }

    /// SR1 Register bits
    namespace sr1_bits {
        constexpr uint32_t SMBALERT = (1U << 15);  ///< SMBus alert
        constexpr uint32_t TIMEOUT = (1U << 14);  ///< Timeout or Tlow error
        constexpr uint32_t PECERR = (1U << 12);  ///< PEC Error in reception
        constexpr uint32_t OVR = (1U << 11);  ///< Overrun/Underrun
        constexpr uint32_t AF = (1U << 10);  ///< Acknowledge failure
        constexpr uint32_t ARLO = (1U << 9);  ///< Arbitration lost (master mode)
        constexpr uint32_t BERR = (1U << 8);  ///< Bus error
        constexpr uint32_t TxE = (1U << 7);  ///< Data register empty (transmitters)
        constexpr uint32_t RxNE = (1U << 6);  ///< Data register not empty (receivers)
        constexpr uint32_t STOPF = (1U << 4);  ///< Stop detection (slave mode)
        constexpr uint32_t ADD10 = (1U << 3);  ///< 10-bit header sent (Master mode)
        constexpr uint32_t BTF = (1U << 2);  ///< Byte transfer finished
        constexpr uint32_t ADDR = (1U << 1);  ///< Address sent (master mode)/matched (slave mode)
        constexpr uint32_t SB = (1U << 0);  ///< Start bit (Master mode)
    }

    /// SR2 Register bits
    namespace sr2_bits {
        constexpr uint32_t PEC = (8 << 8);  ///< acket error checking register
        constexpr uint32_t DUALF = (1U << 7);  ///< Dual flag (Slave mode)
        constexpr uint32_t SMBHOST = (1U << 6);  ///< SMBus host header (Slave mode)
        constexpr uint32_t SMBDEFAULT = (1U << 5);  ///< SMBus device default address (Slave mode)
        constexpr uint32_t GENCALL = (1U << 4);  ///< General call address (Slave mode)
        constexpr uint32_t TRA = (1U << 2);  ///< Transmitter/receiver
        constexpr uint32_t BUSY = (1U << 1);  ///< Bus busy
        constexpr uint32_t MSL = (1U << 0);  ///< Master/slave
    }

    /// CCR Register bits
    namespace ccr_bits {
        constexpr uint32_t F_S = (1U << 15);  ///< I2C master mode selection
        constexpr uint32_t DUTY = (1U << 14);  ///< Fast mode duty cycle
        constexpr uint32_t CCR = (12 << 0);  ///< Clock control register in Fast/Standard mode (Master mode)
    }

    /// TRISE Register bits
    namespace trise_bits {
        constexpr uint32_t TRISE = (6 << 0);  ///< Maximum rise time in Fast/Standard mode (Master mode)
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI1_BASE = 0x40013000;
    constexpr uint32_t SPI2_BASE = 0x40003800;
    constexpr uint32_t SPI3_BASE = 0x40003C00;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - control register 2
        volatile uint32_t SR;  ///< Offset: 0x08 - status register
        volatile uint32_t DR;  ///< Offset: 0x0C - data register
        volatile uint32_t CRCPR;  ///< Offset: 0x10 - CRC polynomial register
        volatile uint32_t RXCRCR;  ///< Offset: 0x14 - RX CRC register
        volatile uint32_t TXCRCR;  ///< Offset: 0x18 - TX CRC register
        volatile uint32_t I2SCFGR;  ///< Offset: 0x1C - I2S configuration register
        volatile uint32_t I2SPR;  ///< Offset: 0x20 - I2S prescaler register
    };

    /// Peripheral instances
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);
    inline Registers* SPI2 = reinterpret_cast<Registers*>(SPI2_BASE);
    inline Registers* SPI3 = reinterpret_cast<Registers*>(SPI3_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t BIDIMODE = (1U << 15);  ///< Bidirectional data mode enable
        constexpr uint32_t BIDIOE = (1U << 14);  ///< Output enable in bidirectional mode
        constexpr uint32_t CRCEN = (1U << 13);  ///< Hardware CRC calculation enable
        constexpr uint32_t CRCNEXT = (1U << 12);  ///< CRC transfer next
        constexpr uint32_t DFF = (1U << 11);  ///< Data frame format
        constexpr uint32_t RXONLY = (1U << 10);  ///< Receive only
        constexpr uint32_t SSM = (1U << 9);  ///< Software slave management
        constexpr uint32_t SSI = (1U << 8);  ///< Internal slave select
        constexpr uint32_t LSBFIRST = (1U << 7);  ///< Frame format
        constexpr uint32_t SPE = (1U << 6);  ///< SPI enable
        constexpr uint32_t BR = (3 << 3);  ///< Baud rate control
        constexpr uint32_t MSTR = (1U << 2);  ///< Master selection
        constexpr uint32_t CPOL = (1U << 1);  ///< Clock polarity
        constexpr uint32_t CPHA = (1U << 0);  ///< Clock phase
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t TXEIE = (1U << 7);  ///< Tx buffer empty interrupt enable
        constexpr uint32_t RXNEIE = (1U << 6);  ///< RX buffer not empty interrupt enable
        constexpr uint32_t ERRIE = (1U << 5);  ///< Error interrupt enable
        constexpr uint32_t SSOE = (1U << 2);  ///< SS output enable
        constexpr uint32_t TXDMAEN = (1U << 1);  ///< Tx buffer DMA enable
        constexpr uint32_t RXDMAEN = (1U << 0);  ///< Rx buffer DMA enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t BSY = (1U << 7);  ///< Busy flag
        constexpr uint32_t OVR = (1U << 6);  ///< Overrun flag
        constexpr uint32_t MODF = (1U << 5);  ///< Mode fault
        constexpr uint32_t CRCERR = (1U << 4);  ///< CRC error flag
        constexpr uint32_t UDR = (1U << 3);  ///< Underrun flag
        constexpr uint32_t CHSIDE = (1U << 2);  ///< Channel side
        constexpr uint32_t TXE = (1U << 1);  ///< Transmit buffer empty
        constexpr uint32_t RXNE = (1U << 0);  ///< Receive buffer not empty
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (16 << 0);  ///< Data register
    }

    /// CRCPR Register bits
    namespace crcpr_bits {
        constexpr uint32_t CRCPOLY = (16 << 0);  ///< CRC polynomial register
    }

    /// RXCRCR Register bits
    namespace rxcrcr_bits {
        constexpr uint32_t RxCRC = (16 << 0);  ///< Rx CRC register
    }

    /// TXCRCR Register bits
    namespace txcrcr_bits {
        constexpr uint32_t TxCRC = (16 << 0);  ///< Tx CRC register
    }

    /// I2SCFGR Register bits
    namespace i2scfgr_bits {
        constexpr uint32_t I2SMOD = (1U << 11);  ///< I2S mode selection
        constexpr uint32_t I2SE = (1U << 10);  ///< I2S Enable
        constexpr uint32_t I2SCFG = (2 << 8);  ///< I2S configuration mode
        constexpr uint32_t PCMSYNC = (1U << 7);  ///< PCM frame synchronization
        constexpr uint32_t I2SSTD = (2 << 4);  ///< I2S standard selection
        constexpr uint32_t CKPOL = (1U << 3);  ///< Steady state clock polarity
        constexpr uint32_t DATLEN = (2 << 1);  ///< Data length to be transferred
        constexpr uint32_t CHLEN = (1U << 0);  ///< Channel length (number of bits per audio channel)
    }

    /// I2SPR Register bits
    namespace i2spr_bits {
        constexpr uint32_t MCKOE = (1U << 9);  ///< Master clock output enable
        constexpr uint32_t ODD = (1U << 8);  ///< Odd factor for the prescaler
        constexpr uint32_t I2SDIV = (8 << 0);  ///< I2S Linear prescaler
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART1_BASE = 0x40013800;
    constexpr uint32_t USART2_BASE = 0x40004400;
    constexpr uint32_t USART3_BASE = 0x40004800;
    constexpr uint32_t UART4_BASE = 0x40004C00;
    constexpr uint32_t UART5_BASE = 0x40005000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t SR;  ///< Offset: 0x00 - Status register
        volatile uint32_t DR;  ///< Offset: 0x04 - Data register
        volatile uint32_t BRR;  ///< Offset: 0x08 - Baud rate register
        volatile uint32_t CR1;  ///< Offset: 0x0C - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x10 - Control register 2
        volatile uint32_t CR3;  ///< Offset: 0x14 - Control register 3
        volatile uint32_t GTPR;  ///< Offset: 0x18 - Guard time and prescaler register
    };

    /// Peripheral instances
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);
    inline Registers* USART3 = reinterpret_cast<Registers*>(USART3_BASE);
    inline Registers* UART4 = reinterpret_cast<Registers*>(UART4_BASE);
    inline Registers* UART5 = reinterpret_cast<Registers*>(UART5_BASE);

    // Bit definitions
    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CTS = (1U << 9);  ///< CTS flag
        constexpr uint32_t LBD = (1U << 8);  ///< LIN break detection flag
        constexpr uint32_t TXE = (1U << 7);  ///< Transmit data register empty
        constexpr uint32_t TC = (1U << 6);  ///< Transmission complete
        constexpr uint32_t RXNE = (1U << 5);  ///< Read data register not empty
        constexpr uint32_t IDLE = (1U << 4);  ///< IDLE line detected
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error
        constexpr uint32_t NE = (1U << 2);  ///< Noise error flag
        constexpr uint32_t FE = (1U << 1);  ///< Framing error
        constexpr uint32_t PE = (1U << 0);  ///< Parity error
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (9 << 0);  ///< Data value
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t DIV_Mantissa = (12 << 4);  ///< mantissa of USARTDIV
        constexpr uint32_t DIV_Fraction = (4 << 0);  ///< fraction of USARTDIV
    }

    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t UE = (1U << 13);  ///< USART enable
        constexpr uint32_t M = (1U << 12);  ///< Word length
        constexpr uint32_t WAKE = (1U << 11);  ///< Wakeup method
        constexpr uint32_t PCE = (1U << 10);  ///< Parity control enable
        constexpr uint32_t PS = (1U << 9);  ///< Parity selection
        constexpr uint32_t PEIE = (1U << 8);  ///< PE interrupt enable
        constexpr uint32_t TXEIE = (1U << 7);  ///< TXE interrupt enable
        constexpr uint32_t TCIE = (1U << 6);  ///< Transmission complete interrupt enable
        constexpr uint32_t RXNEIE = (1U << 5);  ///< RXNE interrupt enable
        constexpr uint32_t IDLEIE = (1U << 4);  ///< IDLE interrupt enable
        constexpr uint32_t TE = (1U << 3);  ///< Transmitter enable
        constexpr uint32_t RE = (1U << 2);  ///< Receiver enable
        constexpr uint32_t RWU = (1U << 1);  ///< Receiver wakeup
        constexpr uint32_t SBK = (1U << 0);  ///< Send break
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t LINEN = (1U << 14);  ///< LIN mode enable
        constexpr uint32_t STOP = (2 << 12);  ///< STOP bits
        constexpr uint32_t CLKEN = (1U << 11);  ///< Clock enable
        constexpr uint32_t CPOL = (1U << 10);  ///< Clock polarity
        constexpr uint32_t CPHA = (1U << 9);  ///< Clock phase
        constexpr uint32_t LBCL = (1U << 8);  ///< Last bit clock pulse
        constexpr uint32_t LBDIE = (1U << 6);  ///< LIN break detection interrupt enable
        constexpr uint32_t LBDL = (1U << 5);  ///< lin break detection length
        constexpr uint32_t ADD = (4 << 0);  ///< Address of the USART node
    }

    /// CR3 Register bits
    namespace cr3_bits {
        constexpr uint32_t CTSIE = (1U << 10);  ///< CTS interrupt enable
        constexpr uint32_t CTSE = (1U << 9);  ///< CTS enable
        constexpr uint32_t RTSE = (1U << 8);  ///< RTS enable
        constexpr uint32_t DMAT = (1U << 7);  ///< DMA enable transmitter
        constexpr uint32_t DMAR = (1U << 6);  ///< DMA enable receiver
        constexpr uint32_t SCEN = (1U << 5);  ///< Smartcard mode enable
        constexpr uint32_t NACK = (1U << 4);  ///< Smartcard NACK enable
        constexpr uint32_t HDSEL = (1U << 3);  ///< Half-duplex selection
        constexpr uint32_t IRLP = (1U << 2);  ///< IrDA low-power
        constexpr uint32_t IREN = (1U << 1);  ///< IrDA mode enable
        constexpr uint32_t EIE = (1U << 0);  ///< Error interrupt enable
    }

    /// GTPR Register bits
    namespace gtpr_bits {
        constexpr uint32_t GT = (8 << 8);  ///< Guard time value
        constexpr uint32_t PSC = (8 << 0);  ///< Prescaler value
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC1_BASE = 0x40012400;
    constexpr uint32_t ADC2_BASE = 0x40012800;
    constexpr uint32_t ADC3_BASE = 0x40013C00;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t SR;  ///< Offset: 0x00 - status register
        volatile uint32_t CR1;  ///< Offset: 0x04 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x08 - control register 2
        volatile uint32_t SMPR1;  ///< Offset: 0x0C - sample time register 1
        volatile uint32_t SMPR2;  ///< Offset: 0x10 - sample time register 2
        volatile uint32_t JOFR1;  ///< Offset: 0x14 - injected channel data offset register x
        volatile uint32_t JOFR2;  ///< Offset: 0x18 - injected channel data offset register x
        volatile uint32_t JOFR3;  ///< Offset: 0x1C - injected channel data offset register x
        volatile uint32_t JOFR4;  ///< Offset: 0x20 - injected channel data offset register x
        volatile uint32_t HTR;  ///< Offset: 0x24 - watchdog higher threshold register
        volatile uint32_t LTR;  ///< Offset: 0x28 - watchdog lower threshold register
        volatile uint32_t SQR1;  ///< Offset: 0x2C - regular sequence register 1
        volatile uint32_t SQR2;  ///< Offset: 0x30 - regular sequence register 2
        volatile uint32_t SQR3;  ///< Offset: 0x34 - regular sequence register 3
        volatile uint32_t JSQR;  ///< Offset: 0x38 - injected sequence register
        volatile uint32_t JDR1;  ///< Offset: 0x3C - injected data register x
        volatile uint32_t JDR2;  ///< Offset: 0x40 - injected data register x
        volatile uint32_t JDR3;  ///< Offset: 0x44 - injected data register x
        volatile uint32_t JDR4;  ///< Offset: 0x48 - injected data register x
        volatile uint32_t DR;  ///< Offset: 0x4C - regular data register
    };

    /// Peripheral instances
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);
    inline Registers* ADC2 = reinterpret_cast<Registers*>(ADC2_BASE);
    inline Registers* ADC3 = reinterpret_cast<Registers*>(ADC3_BASE);

    // Bit definitions
    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t STRT = (1U << 4);  ///< Regular channel start flag
        constexpr uint32_t JSTRT = (1U << 3);  ///< Injected channel start flag
        constexpr uint32_t JEOC = (1U << 2);  ///< Injected channel end of conversion
        constexpr uint32_t EOC = (1U << 1);  ///< Regular channel end of conversion
        constexpr uint32_t AWD = (1U << 0);  ///< Analog watchdog flag
    }

    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t AWDEN = (1U << 23);  ///< Analog watchdog enable on regular channels
        constexpr uint32_t JAWDEN = (1U << 22);  ///< Analog watchdog enable on injected channels
        constexpr uint32_t DUALMOD = (4 << 16);  ///< Dual mode selection
        constexpr uint32_t DISCNUM = (3 << 13);  ///< Discontinuous mode channel count
        constexpr uint32_t JDISCEN = (1U << 12);  ///< Discontinuous mode on injected channels
        constexpr uint32_t DISCEN = (1U << 11);  ///< Discontinuous mode on regular channels
        constexpr uint32_t JAUTO = (1U << 10);  ///< Automatic injected group conversion
        constexpr uint32_t AWDSGL = (1U << 9);  ///< Enable the watchdog on a single channel in scan mode
        constexpr uint32_t SCAN = (1U << 8);  ///< Scan mode
        constexpr uint32_t JEOCIE = (1U << 7);  ///< Interrupt enable for injected channels
        constexpr uint32_t AWDIE = (1U << 6);  ///< Analog watchdog interrupt enable
        constexpr uint32_t EOCIE = (1U << 5);  ///< Interrupt enable for EOC
        constexpr uint32_t AWDCH = (5 << 0);  ///< Analog watchdog channel select bits
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t TSVREFE = (1U << 23);  ///< Temperature sensor and VREFINT enable
        constexpr uint32_t SWSTART = (1U << 22);  ///< Start conversion of regular channels
        constexpr uint32_t JSWSTART = (1U << 21);  ///< Start conversion of injected channels
        constexpr uint32_t EXTTRIG = (1U << 20);  ///< External trigger conversion mode for regular channels
        constexpr uint32_t EXTSEL = (3 << 17);  ///< External event select for regular group
        constexpr uint32_t JEXTTRIG = (1U << 15);  ///< External trigger conversion mode for injected channels
        constexpr uint32_t JEXTSEL = (3 << 12);  ///< External event select for injected group
        constexpr uint32_t ALIGN = (1U << 11);  ///< Data alignment
        constexpr uint32_t DMA = (1U << 8);  ///< Direct memory access mode
        constexpr uint32_t RSTCAL = (1U << 3);  ///< Reset calibration
        constexpr uint32_t CAL = (1U << 2);  ///< A/D calibration
        constexpr uint32_t CONT = (1U << 1);  ///< Continuous conversion
        constexpr uint32_t ADON = (1U << 0);  ///< A/D converter ON / OFF
    }

    /// SMPR1 Register bits
    namespace smpr1_bits {
        constexpr uint32_t SMP10 = (3 << 0);  ///< Channel 10 sample time selection
        constexpr uint32_t SMP11 = (3 << 3);  ///< Channel 11 sample time selection
        constexpr uint32_t SMP12 = (3 << 6);  ///< Channel 12 sample time selection
        constexpr uint32_t SMP13 = (3 << 9);  ///< Channel 13 sample time selection
        constexpr uint32_t SMP14 = (3 << 12);  ///< Channel 14 sample time selection
        constexpr uint32_t SMP15 = (3 << 15);  ///< Channel 15 sample time selection
        constexpr uint32_t SMP16 = (3 << 18);  ///< Channel 16 sample time selection
        constexpr uint32_t SMP17 = (3 << 21);  ///< Channel 17 sample time selection
    }

    /// SMPR2 Register bits
    namespace smpr2_bits {
        constexpr uint32_t SMP0 = (3 << 0);  ///< Channel 0 sample time selection
        constexpr uint32_t SMP1 = (3 << 3);  ///< Channel 1 sample time selection
        constexpr uint32_t SMP2 = (3 << 6);  ///< Channel 2 sample time selection
        constexpr uint32_t SMP3 = (3 << 9);  ///< Channel 3 sample time selection
        constexpr uint32_t SMP4 = (3 << 12);  ///< Channel 4 sample time selection
        constexpr uint32_t SMP5 = (3 << 15);  ///< Channel 5 sample time selection
        constexpr uint32_t SMP6 = (3 << 18);  ///< Channel 6 sample time selection
        constexpr uint32_t SMP7 = (3 << 21);  ///< Channel 7 sample time selection
        constexpr uint32_t SMP8 = (3 << 24);  ///< Channel 8 sample time selection
        constexpr uint32_t SMP9 = (3 << 27);  ///< Channel 9 sample time selection
    }

    /// JOFR1 Register bits
    namespace jofr1_bits {
        constexpr uint32_t JOFFSET1 = (12 << 0);  ///< Data offset for injected channel x
    }

    /// JOFR2 Register bits
    namespace jofr2_bits {
        constexpr uint32_t JOFFSET2 = (12 << 0);  ///< Data offset for injected channel x
    }

    /// JOFR3 Register bits
    namespace jofr3_bits {
        constexpr uint32_t JOFFSET3 = (12 << 0);  ///< Data offset for injected channel x
    }

    /// JOFR4 Register bits
    namespace jofr4_bits {
        constexpr uint32_t JOFFSET4 = (12 << 0);  ///< Data offset for injected channel x
    }

    /// HTR Register bits
    namespace htr_bits {
        constexpr uint32_t HT = (12 << 0);  ///< Analog watchdog higher threshold
    }

    /// LTR Register bits
    namespace ltr_bits {
        constexpr uint32_t LT = (12 << 0);  ///< Analog watchdog lower threshold
    }

    /// SQR1 Register bits
    namespace sqr1_bits {
        constexpr uint32_t L = (4 << 20);  ///< Regular channel sequence length
        constexpr uint32_t SQ16 = (5 << 15);  ///< 16th conversion in regular sequence
        constexpr uint32_t SQ15 = (5 << 10);  ///< 15th conversion in regular sequence
        constexpr uint32_t SQ14 = (5 << 5);  ///< 14th conversion in regular sequence
        constexpr uint32_t SQ13 = (5 << 0);  ///< 13th conversion in regular sequence
    }

    /// SQR2 Register bits
    namespace sqr2_bits {
        constexpr uint32_t SQ12 = (5 << 25);  ///< 12th conversion in regular sequence
        constexpr uint32_t SQ11 = (5 << 20);  ///< 11th conversion in regular sequence
        constexpr uint32_t SQ10 = (5 << 15);  ///< 10th conversion in regular sequence
        constexpr uint32_t SQ9 = (5 << 10);  ///< 9th conversion in regular sequence
        constexpr uint32_t SQ8 = (5 << 5);  ///< 8th conversion in regular sequence
        constexpr uint32_t SQ7 = (5 << 0);  ///< 7th conversion in regular sequence
    }

    /// SQR3 Register bits
    namespace sqr3_bits {
        constexpr uint32_t SQ6 = (5 << 25);  ///< 6th conversion in regular sequence
        constexpr uint32_t SQ5 = (5 << 20);  ///< 5th conversion in regular sequence
        constexpr uint32_t SQ4 = (5 << 15);  ///< 4th conversion in regular sequence
        constexpr uint32_t SQ3 = (5 << 10);  ///< 3rd conversion in regular sequence
        constexpr uint32_t SQ2 = (5 << 5);  ///< 2nd conversion in regular sequence
        constexpr uint32_t SQ1 = (5 << 0);  ///< 1st conversion in regular sequence
    }

    /// JSQR Register bits
    namespace jsqr_bits {
        constexpr uint32_t JL = (2 << 20);  ///< Injected sequence length
        constexpr uint32_t JSQ4 = (5 << 15);  ///< 4th conversion in injected sequence
        constexpr uint32_t JSQ3 = (5 << 10);  ///< 3rd conversion in injected sequence
        constexpr uint32_t JSQ2 = (5 << 5);  ///< 2nd conversion in injected sequence
        constexpr uint32_t JSQ1 = (5 << 0);  ///< 1st conversion in injected sequence
    }

    /// JDR1 Register bits
    namespace jdr1_bits {
        constexpr uint32_t JDATA = (16 << 0);  ///< Injected data
    }

    /// JDR2 Register bits
    namespace jdr2_bits {
        constexpr uint32_t JDATA = (16 << 0);  ///< Injected data
    }

    /// JDR3 Register bits
    namespace jdr3_bits {
        constexpr uint32_t JDATA = (16 << 0);  ///< Injected data
    }

    /// JDR4 Register bits
    namespace jdr4_bits {
        constexpr uint32_t JDATA = (16 << 0);  ///< Injected data
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Regular data
        constexpr uint32_t ADC2DATA = (16 << 16);  ///< ADC2 data
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN_BASE = 0x40006400;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t CAN_MCR;  ///< Offset: 0x00 - CAN_MCR
        volatile uint32_t CAN_MSR;  ///< Offset: 0x04 - CAN_MSR
        volatile uint32_t CAN_TSR;  ///< Offset: 0x08 - CAN_TSR
        volatile uint32_t CAN_RF0R;  ///< Offset: 0x0C - CAN_RF0R
        volatile uint32_t CAN_RF1R;  ///< Offset: 0x10 - CAN_RF1R
        volatile uint32_t CAN_IER;  ///< Offset: 0x14 - CAN_IER
        volatile uint32_t CAN_ESR;  ///< Offset: 0x18 - CAN_ESR
        volatile uint32_t CAN_BTR;  ///< Offset: 0x1C - CAN_BTR
        volatile uint32_t CAN_TI0R;  ///< Offset: 0x180 - CAN_TI0R
        volatile uint32_t CAN_TDT0R;  ///< Offset: 0x184 - CAN_TDT0R
        volatile uint32_t CAN_TDL0R;  ///< Offset: 0x188 - CAN_TDL0R
        volatile uint32_t CAN_TDH0R;  ///< Offset: 0x18C - CAN_TDH0R
        volatile uint32_t CAN_TI1R;  ///< Offset: 0x190 - CAN_TI1R
        volatile uint32_t CAN_TDT1R;  ///< Offset: 0x194 - CAN_TDT1R
        volatile uint32_t CAN_TDL1R;  ///< Offset: 0x198 - CAN_TDL1R
        volatile uint32_t CAN_TDH1R;  ///< Offset: 0x19C - CAN_TDH1R
        volatile uint32_t CAN_TI2R;  ///< Offset: 0x1A0 - CAN_TI2R
        volatile uint32_t CAN_TDT2R;  ///< Offset: 0x1A4 - CAN_TDT2R
        volatile uint32_t CAN_TDL2R;  ///< Offset: 0x1A8 - CAN_TDL2R
        volatile uint32_t CAN_TDH2R;  ///< Offset: 0x1AC - CAN_TDH2R
        volatile uint32_t CAN_RI0R;  ///< Offset: 0x1B0 - CAN_RI0R
        volatile uint32_t CAN_RDT0R;  ///< Offset: 0x1B4 - CAN_RDT0R
        volatile uint32_t CAN_RDL0R;  ///< Offset: 0x1B8 - CAN_RDL0R
        volatile uint32_t CAN_RDH0R;  ///< Offset: 0x1BC - CAN_RDH0R
        volatile uint32_t CAN_RI1R;  ///< Offset: 0x1C0 - CAN_RI1R
        volatile uint32_t CAN_RDT1R;  ///< Offset: 0x1C4 - CAN_RDT1R
        volatile uint32_t CAN_RDL1R;  ///< Offset: 0x1C8 - CAN_RDL1R
        volatile uint32_t CAN_RDH1R;  ///< Offset: 0x1CC - CAN_RDH1R
        volatile uint32_t CAN_FMR;  ///< Offset: 0x200 - CAN_FMR
        volatile uint32_t CAN_FM1R;  ///< Offset: 0x204 - CAN_FM1R
        volatile uint32_t CAN_FS1R;  ///< Offset: 0x20C - CAN_FS1R
        volatile uint32_t CAN_FFA1R;  ///< Offset: 0x214 - CAN_FFA1R
        volatile uint32_t CAN_FA1R;  ///< Offset: 0x21C - CAN_FA1R
        volatile uint32_t F0R1;  ///< Offset: 0x240 - Filter bank 0 register 1
        volatile uint32_t F0R2;  ///< Offset: 0x244 - Filter bank 0 register 2
        volatile uint32_t F1R1;  ///< Offset: 0x248 - Filter bank 1 register 1
        volatile uint32_t F1R2;  ///< Offset: 0x24C - Filter bank 1 register 2
        volatile uint32_t F2R1;  ///< Offset: 0x250 - Filter bank 2 register 1
        volatile uint32_t F2R2;  ///< Offset: 0x254 - Filter bank 2 register 2
        volatile uint32_t F3R1;  ///< Offset: 0x258 - Filter bank 3 register 1
        volatile uint32_t F3R2;  ///< Offset: 0x25C - Filter bank 3 register 2
        volatile uint32_t F4R1;  ///< Offset: 0x260 - Filter bank 4 register 1
        volatile uint32_t F4R2;  ///< Offset: 0x264 - Filter bank 4 register 2
        volatile uint32_t F5R1;  ///< Offset: 0x268 - Filter bank 5 register 1
        volatile uint32_t F5R2;  ///< Offset: 0x26C - Filter bank 5 register 2
        volatile uint32_t F6R1;  ///< Offset: 0x270 - Filter bank 6 register 1
        volatile uint32_t F6R2;  ///< Offset: 0x274 - Filter bank 6 register 2
        volatile uint32_t F7R1;  ///< Offset: 0x278 - Filter bank 7 register 1
        volatile uint32_t F7R2;  ///< Offset: 0x27C - Filter bank 7 register 2
        volatile uint32_t F8R1;  ///< Offset: 0x280 - Filter bank 8 register 1
        volatile uint32_t F8R2;  ///< Offset: 0x284 - Filter bank 8 register 2
        volatile uint32_t F9R1;  ///< Offset: 0x288 - Filter bank 9 register 1
        volatile uint32_t F9R2;  ///< Offset: 0x28C - Filter bank 9 register 2
        volatile uint32_t F10R1;  ///< Offset: 0x290 - Filter bank 10 register 1
        volatile uint32_t F10R2;  ///< Offset: 0x294 - Filter bank 10 register 2
        volatile uint32_t F11R1;  ///< Offset: 0x298 - Filter bank 11 register 1
        volatile uint32_t F11R2;  ///< Offset: 0x29C - Filter bank 11 register 2
        volatile uint32_t F12R1;  ///< Offset: 0x2A0 - Filter bank 4 register 1
        volatile uint32_t F12R2;  ///< Offset: 0x2A4 - Filter bank 12 register 2
        volatile uint32_t F13R1;  ///< Offset: 0x2A8 - Filter bank 13 register 1
        volatile uint32_t F13R2;  ///< Offset: 0x2AC - Filter bank 13 register 2
    };

    /// Peripheral instances
    inline Registers* CAN = reinterpret_cast<Registers*>(CAN_BASE);

    // Bit definitions
    /// CAN_MCR Register bits
    namespace can_mcr_bits {
        constexpr uint32_t DBF = (1U << 16);  ///< DBF
        constexpr uint32_t RESET = (1U << 15);  ///< RESET
        constexpr uint32_t TTCM = (1U << 7);  ///< TTCM
        constexpr uint32_t ABOM = (1U << 6);  ///< ABOM
        constexpr uint32_t AWUM = (1U << 5);  ///< AWUM
        constexpr uint32_t NART = (1U << 4);  ///< NART
        constexpr uint32_t RFLM = (1U << 3);  ///< RFLM
        constexpr uint32_t TXFP = (1U << 2);  ///< TXFP
        constexpr uint32_t SLEEP = (1U << 1);  ///< SLEEP
        constexpr uint32_t INRQ = (1U << 0);  ///< INRQ
    }

    /// CAN_MSR Register bits
    namespace can_msr_bits {
        constexpr uint32_t RX = (1U << 11);  ///< RX
        constexpr uint32_t SAMP = (1U << 10);  ///< SAMP
        constexpr uint32_t RXM = (1U << 9);  ///< RXM
        constexpr uint32_t TXM = (1U << 8);  ///< TXM
        constexpr uint32_t SLAKI = (1U << 4);  ///< SLAKI
        constexpr uint32_t WKUI = (1U << 3);  ///< WKUI
        constexpr uint32_t ERRI = (1U << 2);  ///< ERRI
        constexpr uint32_t SLAK = (1U << 1);  ///< SLAK
        constexpr uint32_t INAK = (1U << 0);  ///< INAK
    }

    /// CAN_TSR Register bits
    namespace can_tsr_bits {
        constexpr uint32_t LOW2 = (1U << 31);  ///< Lowest priority flag for mailbox 2
        constexpr uint32_t LOW1 = (1U << 30);  ///< Lowest priority flag for mailbox 1
        constexpr uint32_t LOW0 = (1U << 29);  ///< Lowest priority flag for mailbox 0
        constexpr uint32_t TME2 = (1U << 28);  ///< Lowest priority flag for mailbox 2
        constexpr uint32_t TME1 = (1U << 27);  ///< Lowest priority flag for mailbox 1
        constexpr uint32_t TME0 = (1U << 26);  ///< Lowest priority flag for mailbox 0
        constexpr uint32_t CODE = (2 << 24);  ///< CODE
        constexpr uint32_t ABRQ2 = (1U << 23);  ///< ABRQ2
        constexpr uint32_t TERR2 = (1U << 19);  ///< TERR2
        constexpr uint32_t ALST2 = (1U << 18);  ///< ALST2
        constexpr uint32_t TXOK2 = (1U << 17);  ///< TXOK2
        constexpr uint32_t RQCP2 = (1U << 16);  ///< RQCP2
        constexpr uint32_t ABRQ1 = (1U << 15);  ///< ABRQ1
        constexpr uint32_t TERR1 = (1U << 11);  ///< TERR1
        constexpr uint32_t ALST1 = (1U << 10);  ///< ALST1
        constexpr uint32_t TXOK1 = (1U << 9);  ///< TXOK1
        constexpr uint32_t RQCP1 = (1U << 8);  ///< RQCP1
        constexpr uint32_t ABRQ0 = (1U << 7);  ///< ABRQ0
        constexpr uint32_t TERR0 = (1U << 3);  ///< TERR0
        constexpr uint32_t ALST0 = (1U << 2);  ///< ALST0
        constexpr uint32_t TXOK0 = (1U << 1);  ///< TXOK0
        constexpr uint32_t RQCP0 = (1U << 0);  ///< RQCP0
    }

    /// CAN_RF0R Register bits
    namespace can_rf0r_bits {
        constexpr uint32_t RFOM0 = (1U << 5);  ///< RFOM0
        constexpr uint32_t FOVR0 = (1U << 4);  ///< FOVR0
        constexpr uint32_t FULL0 = (1U << 3);  ///< FULL0
        constexpr uint32_t FMP0 = (2 << 0);  ///< FMP0
    }

    /// CAN_RF1R Register bits
    namespace can_rf1r_bits {
        constexpr uint32_t RFOM1 = (1U << 5);  ///< RFOM1
        constexpr uint32_t FOVR1 = (1U << 4);  ///< FOVR1
        constexpr uint32_t FULL1 = (1U << 3);  ///< FULL1
        constexpr uint32_t FMP1 = (2 << 0);  ///< FMP1
    }

    /// CAN_IER Register bits
    namespace can_ier_bits {
        constexpr uint32_t SLKIE = (1U << 17);  ///< SLKIE
        constexpr uint32_t WKUIE = (1U << 16);  ///< WKUIE
        constexpr uint32_t ERRIE = (1U << 15);  ///< ERRIE
        constexpr uint32_t LECIE = (1U << 11);  ///< LECIE
        constexpr uint32_t BOFIE = (1U << 10);  ///< BOFIE
        constexpr uint32_t EPVIE = (1U << 9);  ///< EPVIE
        constexpr uint32_t EWGIE = (1U << 8);  ///< EWGIE
        constexpr uint32_t FOVIE1 = (1U << 6);  ///< FOVIE1
        constexpr uint32_t FFIE1 = (1U << 5);  ///< FFIE1
        constexpr uint32_t FMPIE1 = (1U << 4);  ///< FMPIE1
        constexpr uint32_t FOVIE0 = (1U << 3);  ///< FOVIE0
        constexpr uint32_t FFIE0 = (1U << 2);  ///< FFIE0
        constexpr uint32_t FMPIE0 = (1U << 1);  ///< FMPIE0
        constexpr uint32_t TMEIE = (1U << 0);  ///< TMEIE
    }

    /// CAN_ESR Register bits
    namespace can_esr_bits {
        constexpr uint32_t REC = (8 << 24);  ///< REC
        constexpr uint32_t TEC = (8 << 16);  ///< TEC
        constexpr uint32_t LEC = (3 << 4);  ///< LEC
        constexpr uint32_t BOFF = (1U << 2);  ///< BOFF
        constexpr uint32_t EPVF = (1U << 1);  ///< EPVF
        constexpr uint32_t EWGF = (1U << 0);  ///< EWGF
    }

    /// CAN_BTR Register bits
    namespace can_btr_bits {
        constexpr uint32_t SILM = (1U << 31);  ///< SILM
        constexpr uint32_t LBKM = (1U << 30);  ///< LBKM
        constexpr uint32_t SJW = (2 << 24);  ///< SJW
        constexpr uint32_t TS2 = (3 << 20);  ///< TS2
        constexpr uint32_t TS1 = (4 << 16);  ///< TS1
        constexpr uint32_t BRP = (10 << 0);  ///< BRP
    }

    /// CAN_TI0R Register bits
    namespace can_ti0r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// CAN_TDT0R Register bits
    namespace can_tdt0r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// CAN_TDL0R Register bits
    namespace can_tdl0r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// CAN_TDH0R Register bits
    namespace can_tdh0r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// CAN_TI1R Register bits
    namespace can_ti1r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// CAN_TDT1R Register bits
    namespace can_tdt1r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// CAN_TDL1R Register bits
    namespace can_tdl1r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// CAN_TDH1R Register bits
    namespace can_tdh1r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// CAN_TI2R Register bits
    namespace can_ti2r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// CAN_TDT2R Register bits
    namespace can_tdt2r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// CAN_TDL2R Register bits
    namespace can_tdl2r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// CAN_TDH2R Register bits
    namespace can_tdh2r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// CAN_RI0R Register bits
    namespace can_ri0r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
    }

    /// CAN_RDT0R Register bits
    namespace can_rdt0r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t FMI = (8 << 8);  ///< FMI
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// CAN_RDL0R Register bits
    namespace can_rdl0r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// CAN_RDH0R Register bits
    namespace can_rdh0r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// CAN_RI1R Register bits
    namespace can_ri1r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
    }

    /// CAN_RDT1R Register bits
    namespace can_rdt1r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t FMI = (8 << 8);  ///< FMI
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// CAN_RDL1R Register bits
    namespace can_rdl1r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// CAN_RDH1R Register bits
    namespace can_rdh1r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// CAN_FMR Register bits
    namespace can_fmr_bits {
        constexpr uint32_t FINIT = (1U << 0);  ///< FINIT
    }

    /// CAN_FM1R Register bits
    namespace can_fm1r_bits {
        constexpr uint32_t FBM0 = (1U << 0);  ///< Filter mode
        constexpr uint32_t FBM1 = (1U << 1);  ///< Filter mode
        constexpr uint32_t FBM2 = (1U << 2);  ///< Filter mode
        constexpr uint32_t FBM3 = (1U << 3);  ///< Filter mode
        constexpr uint32_t FBM4 = (1U << 4);  ///< Filter mode
        constexpr uint32_t FBM5 = (1U << 5);  ///< Filter mode
        constexpr uint32_t FBM6 = (1U << 6);  ///< Filter mode
        constexpr uint32_t FBM7 = (1U << 7);  ///< Filter mode
        constexpr uint32_t FBM8 = (1U << 8);  ///< Filter mode
        constexpr uint32_t FBM9 = (1U << 9);  ///< Filter mode
        constexpr uint32_t FBM10 = (1U << 10);  ///< Filter mode
        constexpr uint32_t FBM11 = (1U << 11);  ///< Filter mode
        constexpr uint32_t FBM12 = (1U << 12);  ///< Filter mode
        constexpr uint32_t FBM13 = (1U << 13);  ///< Filter mode
    }

    /// CAN_FS1R Register bits
    namespace can_fs1r_bits {
        constexpr uint32_t FSC0 = (1U << 0);  ///< Filter scale configuration
        constexpr uint32_t FSC1 = (1U << 1);  ///< Filter scale configuration
        constexpr uint32_t FSC2 = (1U << 2);  ///< Filter scale configuration
        constexpr uint32_t FSC3 = (1U << 3);  ///< Filter scale configuration
        constexpr uint32_t FSC4 = (1U << 4);  ///< Filter scale configuration
        constexpr uint32_t FSC5 = (1U << 5);  ///< Filter scale configuration
        constexpr uint32_t FSC6 = (1U << 6);  ///< Filter scale configuration
        constexpr uint32_t FSC7 = (1U << 7);  ///< Filter scale configuration
        constexpr uint32_t FSC8 = (1U << 8);  ///< Filter scale configuration
        constexpr uint32_t FSC9 = (1U << 9);  ///< Filter scale configuration
        constexpr uint32_t FSC10 = (1U << 10);  ///< Filter scale configuration
        constexpr uint32_t FSC11 = (1U << 11);  ///< Filter scale configuration
        constexpr uint32_t FSC12 = (1U << 12);  ///< Filter scale configuration
        constexpr uint32_t FSC13 = (1U << 13);  ///< Filter scale configuration
    }

    /// CAN_FFA1R Register bits
    namespace can_ffa1r_bits {
        constexpr uint32_t FFA0 = (1U << 0);  ///< Filter FIFO assignment for filter 0
        constexpr uint32_t FFA1 = (1U << 1);  ///< Filter FIFO assignment for filter 1
        constexpr uint32_t FFA2 = (1U << 2);  ///< Filter FIFO assignment for filter 2
        constexpr uint32_t FFA3 = (1U << 3);  ///< Filter FIFO assignment for filter 3
        constexpr uint32_t FFA4 = (1U << 4);  ///< Filter FIFO assignment for filter 4
        constexpr uint32_t FFA5 = (1U << 5);  ///< Filter FIFO assignment for filter 5
        constexpr uint32_t FFA6 = (1U << 6);  ///< Filter FIFO assignment for filter 6
        constexpr uint32_t FFA7 = (1U << 7);  ///< Filter FIFO assignment for filter 7
        constexpr uint32_t FFA8 = (1U << 8);  ///< Filter FIFO assignment for filter 8
        constexpr uint32_t FFA9 = (1U << 9);  ///< Filter FIFO assignment for filter 9
        constexpr uint32_t FFA10 = (1U << 10);  ///< Filter FIFO assignment for filter 10
        constexpr uint32_t FFA11 = (1U << 11);  ///< Filter FIFO assignment for filter 11
        constexpr uint32_t FFA12 = (1U << 12);  ///< Filter FIFO assignment for filter 12
        constexpr uint32_t FFA13 = (1U << 13);  ///< Filter FIFO assignment for filter 13
    }

    /// CAN_FA1R Register bits
    namespace can_fa1r_bits {
        constexpr uint32_t FACT0 = (1U << 0);  ///< Filter active
        constexpr uint32_t FACT1 = (1U << 1);  ///< Filter active
        constexpr uint32_t FACT2 = (1U << 2);  ///< Filter active
        constexpr uint32_t FACT3 = (1U << 3);  ///< Filter active
        constexpr uint32_t FACT4 = (1U << 4);  ///< Filter active
        constexpr uint32_t FACT5 = (1U << 5);  ///< Filter active
        constexpr uint32_t FACT6 = (1U << 6);  ///< Filter active
        constexpr uint32_t FACT7 = (1U << 7);  ///< Filter active
        constexpr uint32_t FACT8 = (1U << 8);  ///< Filter active
        constexpr uint32_t FACT9 = (1U << 9);  ///< Filter active
        constexpr uint32_t FACT10 = (1U << 10);  ///< Filter active
        constexpr uint32_t FACT11 = (1U << 11);  ///< Filter active
        constexpr uint32_t FACT12 = (1U << 12);  ///< Filter active
        constexpr uint32_t FACT13 = (1U << 13);  ///< Filter active
    }

    /// F0R1 Register bits
    namespace f0r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F0R2 Register bits
    namespace f0r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F1R1 Register bits
    namespace f1r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F1R2 Register bits
    namespace f1r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F2R1 Register bits
    namespace f2r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F2R2 Register bits
    namespace f2r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F3R1 Register bits
    namespace f3r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F3R2 Register bits
    namespace f3r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F4R1 Register bits
    namespace f4r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F4R2 Register bits
    namespace f4r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F5R1 Register bits
    namespace f5r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F5R2 Register bits
    namespace f5r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F6R1 Register bits
    namespace f6r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F6R2 Register bits
    namespace f6r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F7R1 Register bits
    namespace f7r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F7R2 Register bits
    namespace f7r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F8R1 Register bits
    namespace f8r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F8R2 Register bits
    namespace f8r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F9R1 Register bits
    namespace f9r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F9R2 Register bits
    namespace f9r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F10R1 Register bits
    namespace f10r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F10R2 Register bits
    namespace f10r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F11R1 Register bits
    namespace f11r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F11R2 Register bits
    namespace f11r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F12R1 Register bits
    namespace f12r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F12R2 Register bits
    namespace f12r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F13R1 Register bits
    namespace f13r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F13R2 Register bits
    namespace f13r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DAC_BASE = 0x40007400;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Control register (DAC_CR)
        volatile uint32_t SWTRIGR;  ///< Offset: 0x04 - DAC software trigger register (DAC_SWTRIGR)
        volatile uint32_t DHR12R1;  ///< Offset: 0x08 - DAC channel1 12-bit right-aligned data holding...
        volatile uint32_t DHR12L1;  ///< Offset: 0x0C - DAC channel1 12-bit left aligned data holding register...
        volatile uint32_t DHR8R1;  ///< Offset: 0x10 - DAC channel1 8-bit right aligned data holding register...
        volatile uint32_t DHR12R2;  ///< Offset: 0x14 - DAC channel2 12-bit right aligned data holding register...
        volatile uint32_t DHR12L2;  ///< Offset: 0x18 - DAC channel2 12-bit left aligned data holding register...
        volatile uint32_t DHR8R2;  ///< Offset: 0x1C - DAC channel2 8-bit right-aligned data holding register...
        volatile uint32_t DHR12RD;  ///< Offset: 0x20 - Dual DAC 12-bit right-aligned data holding register...
        volatile uint32_t DHR12LD;  ///< Offset: 0x24 - DUAL DAC 12-bit left aligned data holding register...
        volatile uint32_t DHR8RD;  ///< Offset: 0x28 - DUAL DAC 8-bit right aligned data holding register...
        volatile uint32_t DOR1;  ///< Offset: 0x2C - DAC channel1 data output register (DAC_DOR1)
        volatile uint32_t DOR2;  ///< Offset: 0x30 - DAC channel2 data output register (DAC_DOR2)
    };

    /// Peripheral instances
    inline Registers* DAC = reinterpret_cast<Registers*>(DAC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t EN1 = (1U << 0);  ///< DAC channel1 enable
        constexpr uint32_t BOFF1 = (1U << 1);  ///< DAC channel1 output buffer disable
        constexpr uint32_t TEN1 = (1U << 2);  ///< DAC channel1 trigger enable
        constexpr uint32_t TSEL1 = (3 << 3);  ///< DAC channel1 trigger selection
        constexpr uint32_t WAVE1 = (2 << 6);  ///< DAC channel1 noise/triangle wave generation enable
        constexpr uint32_t MAMP1 = (4 << 8);  ///< DAC channel1 mask/amplitude selector
        constexpr uint32_t DMAEN1 = (1U << 12);  ///< DAC channel1 DMA enable
        constexpr uint32_t EN2 = (1U << 16);  ///< DAC channel2 enable
        constexpr uint32_t BOFF2 = (1U << 17);  ///< DAC channel2 output buffer disable
        constexpr uint32_t TEN2 = (1U << 18);  ///< DAC channel2 trigger enable
        constexpr uint32_t TSEL2 = (3 << 19);  ///< DAC channel2 trigger selection
        constexpr uint32_t WAVE2 = (2 << 22);  ///< DAC channel2 noise/triangle wave generation enable
        constexpr uint32_t MAMP2 = (4 << 24);  ///< DAC channel2 mask/amplitude selector
        constexpr uint32_t DMAEN2 = (1U << 28);  ///< DAC channel2 DMA enable
    }

    /// SWTRIGR Register bits
    namespace swtrigr_bits {
        constexpr uint32_t SWTRIG1 = (1U << 0);  ///< DAC channel1 software trigger
        constexpr uint32_t SWTRIG2 = (1U << 1);  ///< DAC channel2 software trigger
    }

    /// DHR12R1 Register bits
    namespace dhr12r1_bits {
        constexpr uint32_t DACC1DHR = (12 << 0);  ///< DAC channel1 12-bit right-aligned data
    }

    /// DHR12L1 Register bits
    namespace dhr12l1_bits {
        constexpr uint32_t DACC1DHR = (12 << 4);  ///< DAC channel1 12-bit left-aligned data
    }

    /// DHR8R1 Register bits
    namespace dhr8r1_bits {
        constexpr uint32_t DACC1DHR = (8 << 0);  ///< DAC channel1 8-bit right-aligned data
    }

    /// DHR12R2 Register bits
    namespace dhr12r2_bits {
        constexpr uint32_t DACC2DHR = (12 << 0);  ///< DAC channel2 12-bit right-aligned data
    }

    /// DHR12L2 Register bits
    namespace dhr12l2_bits {
        constexpr uint32_t DACC2DHR = (12 << 4);  ///< DAC channel2 12-bit left-aligned data
    }

    /// DHR8R2 Register bits
    namespace dhr8r2_bits {
        constexpr uint32_t DACC2DHR = (8 << 0);  ///< DAC channel2 8-bit right-aligned data
    }

    /// DHR12RD Register bits
    namespace dhr12rd_bits {
        constexpr uint32_t DACC1DHR = (12 << 0);  ///< DAC channel1 12-bit right-aligned data
        constexpr uint32_t DACC2DHR = (12 << 16);  ///< DAC channel2 12-bit right-aligned data
    }

    /// DHR12LD Register bits
    namespace dhr12ld_bits {
        constexpr uint32_t DACC1DHR = (12 << 4);  ///< DAC channel1 12-bit left-aligned data
        constexpr uint32_t DACC2DHR = (12 << 20);  ///< DAC channel2 12-bit right-aligned data
    }

    /// DHR8RD Register bits
    namespace dhr8rd_bits {
        constexpr uint32_t DACC1DHR = (8 << 0);  ///< DAC channel1 8-bit right-aligned data
        constexpr uint32_t DACC2DHR = (8 << 8);  ///< DAC channel2 8-bit right-aligned data
    }

    /// DOR1 Register bits
    namespace dor1_bits {
        constexpr uint32_t DACC1DOR = (12 << 0);  ///< DAC channel1 data output
    }

    /// DOR2 Register bits
    namespace dor2_bits {
        constexpr uint32_t DACC2DOR = (12 << 0);  ///< DAC channel2 data output
    }

}

// ============================================================================
// DBG Peripheral
// ============================================================================

namespace dbg {
    /// Base addresses
    constexpr uint32_t DBG_BASE = 0xE0042000;

    /// DBG Register structure
    struct Registers {
        volatile uint32_t IDCODE;  ///< Offset: 0x00 - DBGMCU_IDCODE
        volatile uint32_t CR;  ///< Offset: 0x04 - DBGMCU_CR
    };

    /// Peripheral instances
    inline Registers* DBG = reinterpret_cast<Registers*>(DBG_BASE);

    // Bit definitions
    /// IDCODE Register bits
    namespace idcode_bits {
        constexpr uint32_t DEV_ID = (12 << 0);  ///< DEV_ID
        constexpr uint32_t REV_ID = (16 << 16);  ///< REV_ID
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t DBG_SLEEP = (1U << 0);  ///< DBG_SLEEP
        constexpr uint32_t DBG_STOP = (1U << 1);  ///< DBG_STOP
        constexpr uint32_t DBG_STANDBY = (1U << 2);  ///< DBG_STANDBY
        constexpr uint32_t TRACE_IOEN = (1U << 5);  ///< TRACE_IOEN
        constexpr uint32_t TRACE_MODE = (2 << 6);  ///< TRACE_MODE
        constexpr uint32_t DBG_IWDG_STOP = (1U << 8);  ///< DBG_IWDG_STOP
        constexpr uint32_t DBG_WWDG_STOP = (1U << 9);  ///< DBG_WWDG_STOP
        constexpr uint32_t DBG_TIM1_STOP = (1U << 10);  ///< DBG_TIM1_STOP
        constexpr uint32_t DBG_TIM2_STOP = (1U << 11);  ///< DBG_TIM2_STOP
        constexpr uint32_t DBG_TIM3_STOP = (1U << 12);  ///< DBG_TIM3_STOP
        constexpr uint32_t DBG_TIM4_STOP = (1U << 13);  ///< DBG_TIM4_STOP
        constexpr uint32_t DBG_CAN1_STOP = (1U << 14);  ///< DBG_CAN1_STOP
        constexpr uint32_t DBG_I2C1_SMBUS_TIMEOUT = (1U << 15);  ///< DBG_I2C1_SMBUS_TIMEOUT
        constexpr uint32_t DBG_I2C2_SMBUS_TIMEOUT = (1U << 16);  ///< DBG_I2C2_SMBUS_TIMEOUT
        constexpr uint32_t DBG_TIM8_STOP = (1U << 17);  ///< DBG_TIM8_STOP
        constexpr uint32_t DBG_TIM5_STOP = (1U << 18);  ///< DBG_TIM5_STOP
        constexpr uint32_t DBG_TIM6_STOP = (1U << 19);  ///< DBG_TIM6_STOP
        constexpr uint32_t DBG_TIM7_STOP = (1U << 20);  ///< DBG_TIM7_STOP
        constexpr uint32_t DBG_CAN2_STOP = (1U << 21);  ///< DBG_CAN2_STOP
    }

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40023000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t DR;  ///< Offset: 0x00 - Data register
        volatile uint32_t IDR;  ///< Offset: 0x04 - Independent Data register
        volatile uint32_t CR;  ///< Offset: 0x08 - Control register
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (32 << 0);  ///< Data Register
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t IDR = (8 << 0);  ///< Independent Data register
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RESET = (1U << 0);  ///< Reset bit
    }

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_BASE = 0x40022000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t ACR;  ///< Offset: 0x00 - Flash access control register
        volatile uint32_t KEYR;  ///< Offset: 0x04 - Flash key register
        volatile uint32_t OPTKEYR;  ///< Offset: 0x08 - Flash option key register
        volatile uint32_t SR;  ///< Offset: 0x0C - Status register
        volatile uint32_t CR;  ///< Offset: 0x10 - Control register
        volatile uint32_t AR;  ///< Offset: 0x14 - Flash address register
        volatile uint32_t OBR;  ///< Offset: 0x1C - Option byte register
        volatile uint32_t WRPR;  ///< Offset: 0x20 - Write protection register
    };

    /// Peripheral instances
    inline Registers* FLASH = reinterpret_cast<Registers*>(FLASH_BASE);

    // Bit definitions
    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t LATENCY = (3 << 0);  ///< Latency
        constexpr uint32_t HLFCYA = (1U << 3);  ///< Flash half cycle access enable
        constexpr uint32_t PRFTBE = (1U << 4);  ///< Prefetch buffer enable
        constexpr uint32_t PRFTBS = (1U << 5);  ///< Prefetch buffer status
    }

    /// KEYR Register bits
    namespace keyr_bits {
        constexpr uint32_t KEY = (32 << 0);  ///< FPEC key
    }

    /// OPTKEYR Register bits
    namespace optkeyr_bits {
        constexpr uint32_t OPTKEY = (32 << 0);  ///< Option byte key
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t EOP = (1U << 5);  ///< End of operation
        constexpr uint32_t WRPRTERR = (1U << 4);  ///< Write protection error
        constexpr uint32_t PGERR = (1U << 2);  ///< Programming error
        constexpr uint32_t BSY = (1U << 0);  ///< Busy
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PG = (1U << 0);  ///< Programming
        constexpr uint32_t PER = (1U << 1);  ///< Page Erase
        constexpr uint32_t MER = (1U << 2);  ///< Mass Erase
        constexpr uint32_t OPTPG = (1U << 4);  ///< Option byte programming
        constexpr uint32_t OPTER = (1U << 5);  ///< Option byte erase
        constexpr uint32_t STRT = (1U << 6);  ///< Start
        constexpr uint32_t LOCK = (1U << 7);  ///< Lock
        constexpr uint32_t OPTWRE = (1U << 9);  ///< Option bytes write enable
        constexpr uint32_t ERRIE = (1U << 10);  ///< Error interrupt enable
        constexpr uint32_t EOPIE = (1U << 12);  ///< End of operation interrupt enable
    }

    /// AR Register bits
    namespace ar_bits {
        constexpr uint32_t FAR = (32 << 0);  ///< Flash Address
    }

    /// OBR Register bits
    namespace obr_bits {
        constexpr uint32_t OPTERR = (1U << 0);  ///< Option byte error
        constexpr uint32_t RDPRT = (1U << 1);  ///< Read protection
        constexpr uint32_t WDG_SW = (1U << 2);  ///< WDG_SW
        constexpr uint32_t nRST_STOP = (1U << 3);  ///< nRST_STOP
        constexpr uint32_t nRST_STDBY = (1U << 4);  ///< nRST_STDBY
        constexpr uint32_t Data0 = (8 << 10);  ///< Data0
        constexpr uint32_t Data1 = (8 << 18);  ///< Data1
    }

    /// WRPR Register bits
    namespace wrpr_bits {
        constexpr uint32_t WRP = (32 << 0);  ///< Write protect
    }

}

// ============================================================================
// NVIC Peripheral
// ============================================================================

namespace nvic {
    /// Base addresses
    constexpr uint32_t NVIC_BASE = 0xE000E000;

    /// NVIC Register structure
    struct Registers {
        volatile uint32_t ICTR;  ///< Offset: 0x04 - Interrupt Controller Type Register
        volatile uint32_t STIR;  ///< Offset: 0xF00 - Software Triggered Interrupt Register
        volatile uint32_t ISER0;  ///< Offset: 0x100 - Interrupt Set-Enable Register
        volatile uint32_t ISER1;  ///< Offset: 0x104 - Interrupt Set-Enable Register
        volatile uint32_t ICER0;  ///< Offset: 0x180 - Interrupt Clear-Enable Register
        volatile uint32_t ICER1;  ///< Offset: 0x184 - Interrupt Clear-Enable Register
        volatile uint32_t ISPR0;  ///< Offset: 0x200 - Interrupt Set-Pending Register
        volatile uint32_t ISPR1;  ///< Offset: 0x204 - Interrupt Set-Pending Register
        volatile uint32_t ICPR0;  ///< Offset: 0x280 - Interrupt Clear-Pending Register
        volatile uint32_t ICPR1;  ///< Offset: 0x284 - Interrupt Clear-Pending Register
        volatile uint32_t IABR0;  ///< Offset: 0x300 - Interrupt Active Bit Register
        volatile uint32_t IABR1;  ///< Offset: 0x304 - Interrupt Active Bit Register
        volatile uint32_t IPR0;  ///< Offset: 0x400 - Interrupt Priority Register
        volatile uint32_t IPR1;  ///< Offset: 0x404 - Interrupt Priority Register
        volatile uint32_t IPR2;  ///< Offset: 0x408 - Interrupt Priority Register
        volatile uint32_t IPR3;  ///< Offset: 0x40C - Interrupt Priority Register
        volatile uint32_t IPR4;  ///< Offset: 0x410 - Interrupt Priority Register
        volatile uint32_t IPR5;  ///< Offset: 0x414 - Interrupt Priority Register
        volatile uint32_t IPR6;  ///< Offset: 0x418 - Interrupt Priority Register
        volatile uint32_t IPR7;  ///< Offset: 0x41C - Interrupt Priority Register
        volatile uint32_t IPR8;  ///< Offset: 0x420 - Interrupt Priority Register
        volatile uint32_t IPR9;  ///< Offset: 0x424 - Interrupt Priority Register
        volatile uint32_t IPR10;  ///< Offset: 0x428 - Interrupt Priority Register
        volatile uint32_t IPR11;  ///< Offset: 0x42C - Interrupt Priority Register
        volatile uint32_t IPR12;  ///< Offset: 0x430 - Interrupt Priority Register
        volatile uint32_t IPR13;  ///< Offset: 0x434 - Interrupt Priority Register
        volatile uint32_t IPR14;  ///< Offset: 0x438 - Interrupt Priority Register
    };

    /// Peripheral instances
    inline Registers* NVIC = reinterpret_cast<Registers*>(NVIC_BASE);

    // Bit definitions
    /// ICTR Register bits
    namespace ictr_bits {
        constexpr uint32_t INTLINESNUM = (4 << 0);  ///< Total number of interrupt lines in groups
    }

    /// STIR Register bits
    namespace stir_bits {
        constexpr uint32_t INTID = (9 << 0);  ///< interrupt to be triggered
    }

    /// ISER0 Register bits
    namespace iser0_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ISER1 Register bits
    namespace iser1_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ICER0 Register bits
    namespace icer0_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ICER1 Register bits
    namespace icer1_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ISPR0 Register bits
    namespace ispr0_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ISPR1 Register bits
    namespace ispr1_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ICPR0 Register bits
    namespace icpr0_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// ICPR1 Register bits
    namespace icpr1_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// IABR0 Register bits
    namespace iabr0_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IABR1 Register bits
    namespace iabr1_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IPR0 Register bits
    namespace ipr0_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR1 Register bits
    namespace ipr1_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR2 Register bits
    namespace ipr2_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR3 Register bits
    namespace ipr3_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR4 Register bits
    namespace ipr4_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR5 Register bits
    namespace ipr5_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR6 Register bits
    namespace ipr6_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR7 Register bits
    namespace ipr7_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR8 Register bits
    namespace ipr8_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR9 Register bits
    namespace ipr9_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR10 Register bits
    namespace ipr10_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR11 Register bits
    namespace ipr11_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR12 Register bits
    namespace ipr12_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR13 Register bits
    namespace ipr13_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR14 Register bits
    namespace ipr14_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USB_BASE = 0x40005C00;

    /// USB Register structure
    struct Registers {
        volatile uint32_t EP0R;  ///< Offset: 0x00 - endpoint 0 register
        volatile uint32_t EP1R;  ///< Offset: 0x04 - endpoint 1 register
        volatile uint32_t EP2R;  ///< Offset: 0x08 - endpoint 2 register
        volatile uint32_t EP3R;  ///< Offset: 0x0C - endpoint 3 register
        volatile uint32_t EP4R;  ///< Offset: 0x10 - endpoint 4 register
        volatile uint32_t EP5R;  ///< Offset: 0x14 - endpoint 5 register
        volatile uint32_t EP6R;  ///< Offset: 0x18 - endpoint 6 register
        volatile uint32_t EP7R;  ///< Offset: 0x1C - endpoint 7 register
        volatile uint32_t CNTR;  ///< Offset: 0x40 - control register
        volatile uint32_t ISTR;  ///< Offset: 0x44 - interrupt status register
        volatile uint32_t FNR;  ///< Offset: 0x48 - frame number register
        volatile uint32_t DADDR;  ///< Offset: 0x4C - device address
        volatile uint32_t BTABLE;  ///< Offset: 0x50 - Buffer table address
    };

    /// Peripheral instances
    inline Registers* USB = reinterpret_cast<Registers*>(USB_BASE);

    // Bit definitions
    /// EP0R Register bits
    namespace ep0r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// EP1R Register bits
    namespace ep1r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// EP2R Register bits
    namespace ep2r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// EP3R Register bits
    namespace ep3r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// EP4R Register bits
    namespace ep4r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// EP5R Register bits
    namespace ep5r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// EP6R Register bits
    namespace ep6r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// EP7R Register bits
    namespace ep7r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// CNTR Register bits
    namespace cntr_bits {
        constexpr uint32_t FRES = (1U << 0);  ///< Force USB Reset
        constexpr uint32_t PDWN = (1U << 1);  ///< Power down
        constexpr uint32_t LPMODE = (1U << 2);  ///< Low-power mode
        constexpr uint32_t FSUSP = (1U << 3);  ///< Force suspend
        constexpr uint32_t RESUME = (1U << 4);  ///< Resume request
        constexpr uint32_t ESOFM = (1U << 8);  ///< Expected start of frame interrupt mask
        constexpr uint32_t SOFM = (1U << 9);  ///< Start of frame interrupt mask
        constexpr uint32_t RESETM = (1U << 10);  ///< USB reset interrupt mask
        constexpr uint32_t SUSPM = (1U << 11);  ///< Suspend mode interrupt mask
        constexpr uint32_t WKUPM = (1U << 12);  ///< Wakeup interrupt mask
        constexpr uint32_t ERRM = (1U << 13);  ///< Error interrupt mask
        constexpr uint32_t PMAOVRM = (1U << 14);  ///< Packet memory area over / underrun interrupt mask
        constexpr uint32_t CTRM = (1U << 15);  ///< Correct transfer interrupt mask
    }

    /// ISTR Register bits
    namespace istr_bits {
        constexpr uint32_t EP_ID = (4 << 0);  ///< Endpoint Identifier
        constexpr uint32_t DIR = (1U << 4);  ///< Direction of transaction
        constexpr uint32_t ESOF = (1U << 8);  ///< Expected start frame
        constexpr uint32_t SOF = (1U << 9);  ///< start of frame
        constexpr uint32_t RESET = (1U << 10);  ///< reset request
        constexpr uint32_t SUSP = (1U << 11);  ///< Suspend mode request
        constexpr uint32_t WKUP = (1U << 12);  ///< Wakeup
        constexpr uint32_t ERR = (1U << 13);  ///< Error
        constexpr uint32_t PMAOVR = (1U << 14);  ///< Packet memory area over / underrun
        constexpr uint32_t CTR = (1U << 15);  ///< Correct transfer
    }

    /// FNR Register bits
    namespace fnr_bits {
        constexpr uint32_t FN = (11 << 0);  ///< Frame number
        constexpr uint32_t LSOF = (2 << 11);  ///< Lost SOF
        constexpr uint32_t LCK = (1U << 13);  ///< Locked
        constexpr uint32_t RXDM = (1U << 14);  ///< Receive data - line status
        constexpr uint32_t RXDP = (1U << 15);  ///< Receive data + line status
    }

    /// DADDR Register bits
    namespace daddr_bits {
        constexpr uint32_t ADD = (7 << 0);  ///< Device address
        constexpr uint32_t EF = (1U << 7);  ///< Enable function
    }

    /// BTABLE Register bits
    namespace btable_bits {
        constexpr uint32_t BTABLE = (13 << 3);  ///< Buffer table
    }

}


} // namespace alloy::generated::stm32f103c8

#endif // ALLOY_GENERATED_STM32F103C8_PERIPHERALS_HPP