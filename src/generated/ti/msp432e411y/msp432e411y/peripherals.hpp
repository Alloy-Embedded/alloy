/// Auto-generated code for MSP432E411Y
/// Generated by Alloy Code Generator
/// Source: texasinstruments_msp432e411.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:01:04
#ifndef ALLOY_GENERATED_MSP432E411Y_PERIPHERALS_HPP
#define ALLOY_GENERATED_MSP432E411Y_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::msp432e411y {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_watchdog0 = true;
    constexpr uint32_t num_watchdog0_instances = 1;
    constexpr bool has_watchdog1 = true;
    constexpr uint32_t num_watchdog1_instances = 1;
    constexpr bool has_ssi0 = true;
    constexpr uint32_t num_ssi0_instances = 1;
    constexpr bool has_ssi1 = true;
    constexpr uint32_t num_ssi1_instances = 1;
    constexpr bool has_ssi2 = true;
    constexpr uint32_t num_ssi2_instances = 1;
    constexpr bool has_ssi3 = true;
    constexpr uint32_t num_ssi3_instances = 1;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 8;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 10;
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 1;
    constexpr bool has_qei0 = true;
    constexpr uint32_t num_qei0_instances = 1;
    constexpr bool has_tim = true;
    constexpr uint32_t num_tim_instances = 8;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 2;
    constexpr bool has_comp = true;
    constexpr uint32_t num_comp_instances = 1;
    constexpr bool has_can = true;
    constexpr uint32_t num_can_instances = 2;
    constexpr bool has_usb = true;
    constexpr uint32_t num_usb_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 18;
    constexpr bool has_eeprom = true;
    constexpr uint32_t num_eeprom_instances = 1;
    constexpr bool has_onewire0 = true;
    constexpr uint32_t num_onewire0_instances = 1;
    constexpr bool has_epi0 = true;
    constexpr uint32_t num_epi0_instances = 1;
    constexpr bool has_eth = true;
    constexpr uint32_t num_eth_instances = 1;
    constexpr bool has_sysexc = true;
    constexpr uint32_t num_sysexc_instances = 1;
    constexpr bool has_hib = true;
    constexpr uint32_t num_hib_instances = 1;
    constexpr bool has_flash = true;
    constexpr uint32_t num_flash_instances = 1;
    constexpr bool has_sysctl = true;
    constexpr uint32_t num_sysctl_instances = 1;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 4;
    constexpr bool has_ccm0 = true;
    constexpr uint32_t num_ccm0_instances = 1;
    constexpr bool has_crc = true;
    constexpr uint32_t num_crc_instances = 1;
    constexpr bool has_crypto = true;
    constexpr uint32_t num_crypto_instances = 2;
    constexpr bool has_des = true;
    constexpr uint32_t num_des_instances = 1;
    constexpr bool has_lcd0 = true;
    constexpr uint32_t num_lcd0_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct watchdog0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct watchdog1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssi0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssi1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssi2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssi3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 8;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 10;
    };
    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct qei0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tim_tag> {
        static constexpr uint32_t value = 8;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct comp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct can_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct usb_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 18;
    };
    template<>
    struct peripheral_count<struct eeprom_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct onewire0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct epi0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct eth_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sysexc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct hib_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct flash_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sysctl_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct peripheral_count<struct ccm0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crypto_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct des_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct lcd0_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 18;
    constexpr uint32_t max_gpio_pins = 288;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_uart0 = true;
    constexpr bool has_uart1 = true;
    constexpr bool has_uart2 = true;
    constexpr bool has_uart3 = true;
    constexpr bool has_uart4 = true;
    constexpr bool has_uart5 = true;
    constexpr bool has_uart6 = true;
    constexpr bool has_uart7 = true;
}

// ============================================================================
// WATCHDOG0 Peripheral
// ============================================================================

namespace watchdog0 {
    /// Base addresses
    constexpr uint32_t WATCHDOG0_BASE = 0x40000000;

    /// WATCHDOG0 Register structure
    struct Registers {
        volatile uint32_t LOAD;  ///< Offset: 0x00 - Watchdog Load
        volatile uint32_t VALUE;  ///< Offset: 0x04 - Watchdog Value
        volatile uint32_t CTL;  ///< Offset: 0x08 - Watchdog Control
        volatile uint32_t ICR;  ///< Offset: 0x0C - Watchdog Interrupt Clear
        volatile uint32_t RIS;  ///< Offset: 0x10 - Watchdog Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x14 - Watchdog Masked Interrupt Status
        volatile uint32_t TEST;  ///< Offset: 0x418 - Watchdog Test
        volatile uint32_t LOCK;  ///< Offset: 0xC00 - Watchdog Lock
    };

    /// Peripheral instances
    inline Registers* WATCHDOG0 = reinterpret_cast<Registers*>(WATCHDOG0_BASE);

}

// ============================================================================
// WATCHDOG1 Peripheral
// ============================================================================

namespace watchdog1 {
    /// Base addresses
    constexpr uint32_t WATCHDOG1_BASE = 0x40001000;

    /// WATCHDOG1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* WATCHDOG1 = reinterpret_cast<Registers*>(WATCHDOG1_BASE);

}

// ============================================================================
// SSI0 Peripheral
// ============================================================================

namespace ssi0 {
    /// Base addresses
    constexpr uint32_t SSI0_BASE = 0x40008000;

    /// SSI0 Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - SSI Control 0
        volatile uint32_t CR1;  ///< Offset: 0x04 - SSI Control 1
        volatile uint32_t DR;  ///< Offset: 0x08 - SSI Data
        volatile uint32_t SR;  ///< Offset: 0x0C - SSI Status
        volatile uint32_t CPSR;  ///< Offset: 0x10 - SSI Clock Prescale
        volatile uint32_t IM;  ///< Offset: 0x14 - SSI Interrupt Mask
        volatile uint32_t RIS;  ///< Offset: 0x18 - SSI Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x1C - SSI Masked Interrupt Status
        volatile uint32_t ICR;  ///< Offset: 0x20 - SSI Interrupt Clear
        volatile uint32_t DMACTL;  ///< Offset: 0x24 - SSI DMA Control
        volatile uint32_t PP;  ///< Offset: 0xFC0 - SSI Peripheral Properties
        volatile uint32_t CC;  ///< Offset: 0xFC8 - SSI Clock Configuration
    };

    /// Peripheral instances
    inline Registers* SSI0 = reinterpret_cast<Registers*>(SSI0_BASE);

}

// ============================================================================
// SSI1 Peripheral
// ============================================================================

namespace ssi1 {
    /// Base addresses
    constexpr uint32_t SSI1_BASE = 0x40009000;

    /// SSI1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SSI1 = reinterpret_cast<Registers*>(SSI1_BASE);

}

// ============================================================================
// SSI2 Peripheral
// ============================================================================

namespace ssi2 {
    /// Base addresses
    constexpr uint32_t SSI2_BASE = 0x4000A000;

    /// SSI2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SSI2 = reinterpret_cast<Registers*>(SSI2_BASE);

}

// ============================================================================
// SSI3 Peripheral
// ============================================================================

namespace ssi3 {
    /// Base addresses
    constexpr uint32_t SSI3_BASE = 0x4000B000;

    /// SSI3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SSI3 = reinterpret_cast<Registers*>(SSI3_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART0_BASE = 0x4000C000;
    constexpr uint32_t UART1_BASE = 0x4000D000;
    constexpr uint32_t UART2_BASE = 0x4000E000;
    constexpr uint32_t UART3_BASE = 0x4000F000;
    constexpr uint32_t UART4_BASE = 0x40010000;
    constexpr uint32_t UART5_BASE = 0x40011000;
    constexpr uint32_t UART6_BASE = 0x40012000;
    constexpr uint32_t UART7_BASE = 0x40013000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t DR;  ///< Offset: 0x00 - UART Data
        volatile uint32_t RSR;  ///< Offset: 0x04 - UART Receive Status/Error Clear
        volatile uint32_t ECR;  ///< Offset: 0x04 - UART Receive Status/Error Clear
        volatile uint32_t FR;  ///< Offset: 0x18 - UART Flag
        volatile uint32_t ILPR;  ///< Offset: 0x20 - UART IrDA Low-Power Register
        volatile uint32_t IBRD;  ///< Offset: 0x24 - UART Integer Baud-Rate Divisor
        volatile uint32_t FBRD;  ///< Offset: 0x28 - UART Fractional Baud-Rate Divisor
        volatile uint32_t LCRH;  ///< Offset: 0x2C - UART Line Control
        volatile uint32_t CTL;  ///< Offset: 0x30 - UART Control
        volatile uint32_t IFLS;  ///< Offset: 0x34 - UART Interrupt FIFO Level Select
        volatile uint32_t IM;  ///< Offset: 0x38 - UART Interrupt Mask
        volatile uint32_t RIS;  ///< Offset: 0x3C - UART Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x40 - UART Masked Interrupt Status
        volatile uint32_t ICR;  ///< Offset: 0x44 - UART Interrupt Clear
        volatile uint32_t DMACTL;  ///< Offset: 0x48 - UART DMA Control
        volatile uint32_t _9BITADDR;  ///< Offset: 0xA4 - UART 9-Bit Self Address
        volatile uint32_t _9BITAMASK;  ///< Offset: 0xA8 - UART 9-Bit Self Address Mask
        volatile uint32_t PP;  ///< Offset: 0xFC0 - UART Peripheral Properties
        volatile uint32_t CC;  ///< Offset: 0xFC8 - UART Clock Configuration
    };

    /// Peripheral instances
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);
    inline Registers* UART1 = reinterpret_cast<Registers*>(UART1_BASE);
    inline Registers* UART2 = reinterpret_cast<Registers*>(UART2_BASE);
    inline Registers* UART3 = reinterpret_cast<Registers*>(UART3_BASE);
    inline Registers* UART4 = reinterpret_cast<Registers*>(UART4_BASE);
    inline Registers* UART5 = reinterpret_cast<Registers*>(UART5_BASE);
    inline Registers* UART6 = reinterpret_cast<Registers*>(UART6_BASE);
    inline Registers* UART7 = reinterpret_cast<Registers*>(UART7_BASE);

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C0_BASE = 0x40020000;
    constexpr uint32_t I2C1_BASE = 0x40021000;
    constexpr uint32_t I2C2_BASE = 0x40022000;
    constexpr uint32_t I2C3_BASE = 0x40023000;
    constexpr uint32_t I2C8_BASE = 0x400B8000;
    constexpr uint32_t I2C9_BASE = 0x400B9000;
    constexpr uint32_t I2C4_BASE = 0x400C0000;
    constexpr uint32_t I2C5_BASE = 0x400C1000;
    constexpr uint32_t I2C6_BASE = 0x400C2000;
    constexpr uint32_t I2C7_BASE = 0x400C3000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t MSA;  ///< Offset: 0x00 - I2C Master Slave Address
        volatile uint32_t MCS;  ///< Offset: 0x04 - I2C Master Control/Status
        volatile uint32_t MDR;  ///< Offset: 0x08 - I2C Master Data
        volatile uint32_t MTPR;  ///< Offset: 0x0C - I2C Master Timer Period
        volatile uint32_t MIMR;  ///< Offset: 0x10 - I2C Master Interrupt Mask
        volatile uint32_t MRIS;  ///< Offset: 0x14 - I2C Master Raw Interrupt Status
        volatile uint32_t MMIS;  ///< Offset: 0x18 - I2C Master Masked Interrupt Status
        volatile uint32_t MICR;  ///< Offset: 0x1C - I2C Master Interrupt Clear
        volatile uint32_t MCR;  ///< Offset: 0x20 - I2C Master Configuration
        volatile uint32_t MCLKOCNT;  ///< Offset: 0x24 - I2C Master Clock Low Timeout Count
        volatile uint32_t MBMON;  ///< Offset: 0x2C - I2C Master Bus Monitor
        volatile uint32_t MBLEN;  ///< Offset: 0x30 - I2C Master Burst Length
        volatile uint32_t MBCNT;  ///< Offset: 0x34 - I2C Master Burst Count
        volatile uint32_t SOAR;  ///< Offset: 0x800 - I2C Slave Own Address
        volatile uint32_t SCSR;  ///< Offset: 0x804 - I2C Slave Control/Status
        volatile uint32_t SDR;  ///< Offset: 0x808 - I2C Slave Data
        volatile uint32_t SIMR;  ///< Offset: 0x80C - I2C Slave Interrupt Mask
        volatile uint32_t SRIS;  ///< Offset: 0x810 - I2C Slave Raw Interrupt Status
        volatile uint32_t SMIS;  ///< Offset: 0x814 - I2C Slave Masked Interrupt Status
        volatile uint32_t SICR;  ///< Offset: 0x818 - I2C Slave Interrupt Clear
        volatile uint32_t SOAR2;  ///< Offset: 0x81C - I2C Slave Own Address 2
        volatile uint32_t SACKCTL;  ///< Offset: 0x820 - I2C Slave ACK Control
        volatile uint32_t FIFODATA;  ///< Offset: 0xF00 - I2C FIFO Data
        volatile uint32_t FIFOCTL;  ///< Offset: 0xF04 - I2C FIFO Control
        volatile uint32_t FIFOSTATUS;  ///< Offset: 0xF08 - I2C FIFO Status
        volatile uint32_t PP;  ///< Offset: 0xFC0 - I2C Peripheral Properties
        volatile uint32_t PC;  ///< Offset: 0xFC4 - I2C Peripheral Configuration
    };

    /// Peripheral instances
    inline Registers* I2C0 = reinterpret_cast<Registers*>(I2C0_BASE);
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);
    inline Registers* I2C2 = reinterpret_cast<Registers*>(I2C2_BASE);
    inline Registers* I2C3 = reinterpret_cast<Registers*>(I2C3_BASE);
    inline Registers* I2C8 = reinterpret_cast<Registers*>(I2C8_BASE);
    inline Registers* I2C9 = reinterpret_cast<Registers*>(I2C9_BASE);
    inline Registers* I2C4 = reinterpret_cast<Registers*>(I2C4_BASE);
    inline Registers* I2C5 = reinterpret_cast<Registers*>(I2C5_BASE);
    inline Registers* I2C6 = reinterpret_cast<Registers*>(I2C6_BASE);
    inline Registers* I2C7 = reinterpret_cast<Registers*>(I2C7_BASE);

}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t PWM0_BASE = 0x40028000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - PWM Master Control
        volatile uint32_t SYNC;  ///< Offset: 0x04 - PWM Time Base Sync
        volatile uint32_t ENABLE;  ///< Offset: 0x08 - PWM Output Enable
        volatile uint32_t INVERT;  ///< Offset: 0x0C - PWM Output Inversion
        volatile uint32_t FAULT;  ///< Offset: 0x10 - PWM Output Fault
        volatile uint32_t INTEN;  ///< Offset: 0x14 - PWM Interrupt Enable
        volatile uint32_t RIS;  ///< Offset: 0x18 - PWM Raw Interrupt Status
        volatile uint32_t ISC;  ///< Offset: 0x1C - PWM Interrupt Status and Clear
        volatile uint32_t STATUS;  ///< Offset: 0x20 - PWM Status
        volatile uint32_t FAULTVAL;  ///< Offset: 0x24 - PWM Fault Condition Value
        volatile uint32_t ENUPD;  ///< Offset: 0x28 - PWM Enable Update
        volatile uint32_t _0_CTL;  ///< Offset: 0x40 - PWM0 Control
        volatile uint32_t _0_INTEN;  ///< Offset: 0x44 - PWM0 Interrupt and Trigger Enable
        volatile uint32_t _0_RIS;  ///< Offset: 0x48 - PWM0 Raw Interrupt Status
        volatile uint32_t _0_ISC;  ///< Offset: 0x4C - PWM0 Interrupt Status and Clear
        volatile uint32_t _0_LOAD;  ///< Offset: 0x50 - PWM0 Load
        volatile uint32_t _0_COUNT;  ///< Offset: 0x54 - PWM0 Counter
        volatile uint32_t _0_CMPA;  ///< Offset: 0x58 - PWM0 Compare A
        volatile uint32_t _0_CMPB;  ///< Offset: 0x5C - PWM0 Compare B
        volatile uint32_t _0_GENA;  ///< Offset: 0x60 - PWM0 Generator A Control
        volatile uint32_t _0_GENB;  ///< Offset: 0x64 - PWM0 Generator B Control
        volatile uint32_t _0_DBCTL;  ///< Offset: 0x68 - PWM0 Dead-Band Control
        volatile uint32_t _0_DBRISE;  ///< Offset: 0x6C - PWM0 Dead-Band Rising-Edge Delay
        volatile uint32_t _0_DBFALL;  ///< Offset: 0x70 - PWM0 Dead-Band Falling-Edge-Delay
        volatile uint32_t _0_FLTSRC0;  ///< Offset: 0x74 - PWM0 Fault Source 0
        volatile uint32_t _0_FLTSRC1;  ///< Offset: 0x78 - PWM0 Fault Source 1
        volatile uint32_t _0_MINFLTPER;  ///< Offset: 0x7C - PWM0 Minimum Fault Period
        volatile uint32_t _1_CTL;  ///< Offset: 0x80 - PWM1 Control
        volatile uint32_t _1_INTEN;  ///< Offset: 0x84 - PWM1 Interrupt and Trigger Enable
        volatile uint32_t _1_RIS;  ///< Offset: 0x88 - PWM1 Raw Interrupt Status
        volatile uint32_t _1_ISC;  ///< Offset: 0x8C - PWM1 Interrupt Status and Clear
        volatile uint32_t _1_LOAD;  ///< Offset: 0x90 - PWM1 Load
        volatile uint32_t _1_COUNT;  ///< Offset: 0x94 - PWM1 Counter
        volatile uint32_t _1_CMPA;  ///< Offset: 0x98 - PWM1 Compare A
        volatile uint32_t _1_CMPB;  ///< Offset: 0x9C - PWM1 Compare B
        volatile uint32_t _1_GENA;  ///< Offset: 0xA0 - PWM1 Generator A Control
        volatile uint32_t _1_GENB;  ///< Offset: 0xA4 - PWM1 Generator B Control
        volatile uint32_t _1_DBCTL;  ///< Offset: 0xA8 - PWM1 Dead-Band Control
        volatile uint32_t _1_DBRISE;  ///< Offset: 0xAC - PWM1 Dead-Band Rising-Edge Delay
        volatile uint32_t _1_DBFALL;  ///< Offset: 0xB0 - PWM1 Dead-Band Falling-Edge-Delay
        volatile uint32_t _1_FLTSRC0;  ///< Offset: 0xB4 - PWM1 Fault Source 0
        volatile uint32_t _1_FLTSRC1;  ///< Offset: 0xB8 - PWM1 Fault Source 1
        volatile uint32_t _1_MINFLTPER;  ///< Offset: 0xBC - PWM1 Minimum Fault Period
        volatile uint32_t _2_CTL;  ///< Offset: 0xC0 - PWM2 Control
        volatile uint32_t _2_INTEN;  ///< Offset: 0xC4 - PWM2 Interrupt and Trigger Enable
        volatile uint32_t _2_RIS;  ///< Offset: 0xC8 - PWM2 Raw Interrupt Status
        volatile uint32_t _2_ISC;  ///< Offset: 0xCC - PWM2 Interrupt Status and Clear
        volatile uint32_t _2_LOAD;  ///< Offset: 0xD0 - PWM2 Load
        volatile uint32_t _2_COUNT;  ///< Offset: 0xD4 - PWM2 Counter
        volatile uint32_t _2_CMPA;  ///< Offset: 0xD8 - PWM2 Compare A
        volatile uint32_t _2_CMPB;  ///< Offset: 0xDC - PWM2 Compare B
        volatile uint32_t _2_GENA;  ///< Offset: 0xE0 - PWM2 Generator A Control
        volatile uint32_t _2_GENB;  ///< Offset: 0xE4 - PWM2 Generator B Control
        volatile uint32_t _2_DBCTL;  ///< Offset: 0xE8 - PWM2 Dead-Band Control
        volatile uint32_t _2_DBRISE;  ///< Offset: 0xEC - PWM2 Dead-Band Rising-Edge Delay
        volatile uint32_t _2_DBFALL;  ///< Offset: 0xF0 - PWM2 Dead-Band Falling-Edge-Delay
        volatile uint32_t _2_FLTSRC0;  ///< Offset: 0xF4 - PWM2 Fault Source 0
        volatile uint32_t _2_FLTSRC1;  ///< Offset: 0xF8 - PWM2 Fault Source 1
        volatile uint32_t _2_MINFLTPER;  ///< Offset: 0xFC - PWM2 Minimum Fault Period
        volatile uint32_t _3_CTL;  ///< Offset: 0x100 - PWM3 Control
        volatile uint32_t _3_INTEN;  ///< Offset: 0x104 - PWM3 Interrupt and Trigger Enable
        volatile uint32_t _3_RIS;  ///< Offset: 0x108 - PWM3 Raw Interrupt Status
        volatile uint32_t _3_ISC;  ///< Offset: 0x10C - PWM3 Interrupt Status and Clear
        volatile uint32_t _3_LOAD;  ///< Offset: 0x110 - PWM3 Load
        volatile uint32_t _3_COUNT;  ///< Offset: 0x114 - PWM3 Counter
        volatile uint32_t _3_CMPA;  ///< Offset: 0x118 - PWM3 Compare A
        volatile uint32_t _3_CMPB;  ///< Offset: 0x11C - PWM3 Compare B
        volatile uint32_t _3_GENA;  ///< Offset: 0x120 - PWM3 Generator A Control
        volatile uint32_t _3_GENB;  ///< Offset: 0x124 - PWM3 Generator B Control
        volatile uint32_t _3_DBCTL;  ///< Offset: 0x128 - PWM3 Dead-Band Control
        volatile uint32_t _3_DBRISE;  ///< Offset: 0x12C - PWM3 Dead-Band Rising-Edge Delay
        volatile uint32_t _3_DBFALL;  ///< Offset: 0x130 - PWM3 Dead-Band Falling-Edge-Delay
        volatile uint32_t _3_FLTSRC0;  ///< Offset: 0x134 - PWM3 Fault Source 0
        volatile uint32_t _3_FLTSRC1;  ///< Offset: 0x138 - PWM3 Fault Source 1
        volatile uint32_t _3_MINFLTPER;  ///< Offset: 0x13C - PWM3 Minimum Fault Period
        volatile uint32_t _0_FLTSEN;  ///< Offset: 0x800 - PWM0 Fault Pin Logic Sense
        volatile uint32_t _0_FLTSTAT0;  ///< Offset: 0x804 - PWM0 Fault Status 0
        volatile uint32_t _0_FLTSTAT1;  ///< Offset: 0x808 - PWM0 Fault Status 1
        volatile uint32_t _1_FLTSEN;  ///< Offset: 0x880 - PWM1 Fault Pin Logic Sense
        volatile uint32_t _1_FLTSTAT0;  ///< Offset: 0x884 - PWM1 Fault Status 0
        volatile uint32_t _1_FLTSTAT1;  ///< Offset: 0x888 - PWM1 Fault Status 1
        volatile uint32_t _2_FLTSEN;  ///< Offset: 0x900 - PWM2 Fault Pin Logic Sense
        volatile uint32_t _2_FLTSTAT0;  ///< Offset: 0x904 - PWM2 Fault Status 0
        volatile uint32_t _2_FLTSTAT1;  ///< Offset: 0x908 - PWM2 Fault Status 1
        volatile uint32_t _3_FLTSEN;  ///< Offset: 0x980 - PWM3 Fault Pin Logic Sense
        volatile uint32_t _3_FLTSTAT0;  ///< Offset: 0x984 - PWM3 Fault Status 0
        volatile uint32_t _3_FLTSTAT1;  ///< Offset: 0x988 - PWM3 Fault Status 1
        volatile uint32_t PP;  ///< Offset: 0xFC0 - PWM Peripheral Properties
        volatile uint32_t CC;  ///< Offset: 0xFC8 - PWM Clock Configuration
    };

    /// Peripheral instances
    inline Registers* PWM0 = reinterpret_cast<Registers*>(PWM0_BASE);

}

// ============================================================================
// QEI0 Peripheral
// ============================================================================

namespace qei0 {
    /// Base addresses
    constexpr uint32_t QEI0_BASE = 0x4002C000;

    /// QEI0 Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - QEI Control
        volatile uint32_t STAT;  ///< Offset: 0x04 - QEI Status
        volatile uint32_t POS;  ///< Offset: 0x08 - QEI Position
        volatile uint32_t MAXPOS;  ///< Offset: 0x0C - QEI Maximum Position
        volatile uint32_t LOAD;  ///< Offset: 0x10 - QEI Timer Load
        volatile uint32_t TIME;  ///< Offset: 0x14 - QEI Timer
        volatile uint32_t COUNT;  ///< Offset: 0x18 - QEI Velocity Counter
        volatile uint32_t SPEED;  ///< Offset: 0x1C - QEI Velocity
        volatile uint32_t INTEN;  ///< Offset: 0x20 - QEI Interrupt Enable
        volatile uint32_t RIS;  ///< Offset: 0x24 - QEI Raw Interrupt Status
        volatile uint32_t ISC;  ///< Offset: 0x28 - QEI Interrupt Status and Clear
    };

    /// Peripheral instances
    inline Registers* QEI0 = reinterpret_cast<Registers*>(QEI0_BASE);

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TIMER0_BASE = 0x40030000;
    constexpr uint32_t TIMER1_BASE = 0x40031000;
    constexpr uint32_t TIMER2_BASE = 0x40032000;
    constexpr uint32_t TIMER3_BASE = 0x40033000;
    constexpr uint32_t TIMER4_BASE = 0x40034000;
    constexpr uint32_t TIMER5_BASE = 0x40035000;
    constexpr uint32_t TIMER6_BASE = 0x400E0000;
    constexpr uint32_t TIMER7_BASE = 0x400E1000;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CFG;  ///< Offset: 0x00 - GPTM Configuration
        volatile uint32_t TAMR;  ///< Offset: 0x04 - GPTM Timer A Mode
        volatile uint32_t TBMR;  ///< Offset: 0x08 - GPTM Timer B Mode
        volatile uint32_t CTL;  ///< Offset: 0x0C - GPTM Control
        volatile uint32_t SYNC;  ///< Offset: 0x10 - GPTM Synchronize
        volatile uint32_t IMR;  ///< Offset: 0x18 - GPTM Interrupt Mask
        volatile uint32_t RIS;  ///< Offset: 0x1C - GPTM Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x20 - GPTM Masked Interrupt Status
        volatile uint32_t ICR;  ///< Offset: 0x24 - GPTM Interrupt Clear
        volatile uint32_t TAILR;  ///< Offset: 0x28 - GPTM Timer A Interval Load
        volatile uint32_t TBILR;  ///< Offset: 0x2C - GPTM Timer B Interval Load
        volatile uint32_t TAMATCHR;  ///< Offset: 0x30 - GPTM Timer A Match
        volatile uint32_t TBMATCHR;  ///< Offset: 0x34 - GPTM Timer B Match
        volatile uint32_t TAPR;  ///< Offset: 0x38 - GPTM Timer A Prescale
        volatile uint32_t TBPR;  ///< Offset: 0x3C - GPTM Timer B Prescale
        volatile uint32_t TAPMR;  ///< Offset: 0x40 - GPTM TimerA Prescale Match
        volatile uint32_t TBPMR;  ///< Offset: 0x44 - GPTM TimerB Prescale Match
        volatile uint32_t TAR;  ///< Offset: 0x48 - GPTM Timer A
        volatile uint32_t TBR;  ///< Offset: 0x4C - GPTM Timer B
        volatile uint32_t TAV;  ///< Offset: 0x50 - GPTM Timer A Value
        volatile uint32_t TBV;  ///< Offset: 0x54 - GPTM Timer B Value
        volatile uint32_t RTCPD;  ///< Offset: 0x58 - GPTM RTC Predivide
        volatile uint32_t TAPS;  ///< Offset: 0x5C - GPTM Timer A Prescale Snapshot
        volatile uint32_t TBPS;  ///< Offset: 0x60 - GPTM Timer B Prescale Snapshot
        volatile uint32_t TAPV;  ///< Offset: 0x64 - GPTM Timer A Prescale Value
        volatile uint32_t TBPV;  ///< Offset: 0x68 - GPTM Timer B Prescale Value
        volatile uint32_t DMAEV;  ///< Offset: 0x6C - GPTM DMA Event
        volatile uint32_t ADCEV;  ///< Offset: 0x70 - GPTM ADC Event
        volatile uint32_t PP;  ///< Offset: 0xFC0 - GPTM Peripheral Properties
    };

    /// Peripheral instances
    inline Registers* TIMER0 = reinterpret_cast<Registers*>(TIMER0_BASE);
    inline Registers* TIMER1 = reinterpret_cast<Registers*>(TIMER1_BASE);
    inline Registers* TIMER2 = reinterpret_cast<Registers*>(TIMER2_BASE);
    inline Registers* TIMER3 = reinterpret_cast<Registers*>(TIMER3_BASE);
    inline Registers* TIMER4 = reinterpret_cast<Registers*>(TIMER4_BASE);
    inline Registers* TIMER5 = reinterpret_cast<Registers*>(TIMER5_BASE);
    inline Registers* TIMER6 = reinterpret_cast<Registers*>(TIMER6_BASE);
    inline Registers* TIMER7 = reinterpret_cast<Registers*>(TIMER7_BASE);

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC0_BASE = 0x40038000;
    constexpr uint32_t ADC1_BASE = 0x40039000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ACTSS;  ///< Offset: 0x00 - ADC Active Sample Sequencer
        volatile uint32_t RIS;  ///< Offset: 0x04 - ADC Raw Interrupt Status
        volatile uint32_t IM;  ///< Offset: 0x08 - ADC Interrupt Mask
        volatile uint32_t ISC;  ///< Offset: 0x0C - ADC Interrupt Status and Clear
        volatile uint32_t OSTAT;  ///< Offset: 0x10 - ADC Overflow Status
        volatile uint32_t EMUX;  ///< Offset: 0x14 - ADC Event Multiplexer Select
        volatile uint32_t USTAT;  ///< Offset: 0x18 - ADC Underflow Status
        volatile uint32_t TSSEL;  ///< Offset: 0x1C - ADC Trigger Source Select
        volatile uint32_t SSPRI;  ///< Offset: 0x20 - ADC Sample Sequencer Priority
        volatile uint32_t SPC;  ///< Offset: 0x24 - ADC Sample Phase Control
        volatile uint32_t PSSI;  ///< Offset: 0x28 - ADC Processor Sample Sequence Initiate
        volatile uint32_t SAC;  ///< Offset: 0x30 - ADC Sample Averaging Control
        volatile uint32_t DCISC;  ///< Offset: 0x34 - ADC Digital Comparator Interrupt Status and Clear
        volatile uint32_t CTL;  ///< Offset: 0x38 - ADC Control
        volatile uint32_t SSMUX0;  ///< Offset: 0x40 - ADC Sample Sequence Input Multiplexer Select 0
        volatile uint32_t SSCTL0;  ///< Offset: 0x44 - ADC Sample Sequence Control 0
        volatile uint32_t SSFIFO0;  ///< Offset: 0x48 - ADC Sample Sequence Result FIFO 0
        volatile uint32_t SSFSTAT0;  ///< Offset: 0x4C - ADC Sample Sequence FIFO 0 Status
        volatile uint32_t SSOP0;  ///< Offset: 0x50 - ADC Sample Sequence 0 Operation
        volatile uint32_t SSDC0;  ///< Offset: 0x54 - ADC Sample Sequence 0 Digital Comparator Select
        volatile uint32_t SSEMUX0;  ///< Offset: 0x58 - ADC Sample Sequence Extended Input Multiplexer Select 0
        volatile uint32_t SSTSH0;  ///< Offset: 0x5C - ADC Sample Sequence 0 Sample and Hold Time
        volatile uint32_t SSMUX1;  ///< Offset: 0x60 - ADC Sample Sequence Input Multiplexer Select 1
        volatile uint32_t SSCTL1;  ///< Offset: 0x64 - ADC Sample Sequence Control 1
        volatile uint32_t SSFIFO1;  ///< Offset: 0x68 - ADC Sample Sequence Result FIFO 1
        volatile uint32_t SSFSTAT1;  ///< Offset: 0x6C - ADC Sample Sequence FIFO 1 Status
        volatile uint32_t SSOP1;  ///< Offset: 0x70 - ADC Sample Sequence 1 Operation
        volatile uint32_t SSDC1;  ///< Offset: 0x74 - ADC Sample Sequence 1 Digital Comparator Select
        volatile uint32_t SSEMUX1;  ///< Offset: 0x78 - ADC Sample Sequence Extended Input Multiplexer Select 1
        volatile uint32_t SSTSH1;  ///< Offset: 0x7C - ADC Sample Sequence 1 Sample and Hold Time
        volatile uint32_t SSMUX2;  ///< Offset: 0x80 - ADC Sample Sequence Input Multiplexer Select 2
        volatile uint32_t SSCTL2;  ///< Offset: 0x84 - ADC Sample Sequence Control 2
        volatile uint32_t SSFIFO2;  ///< Offset: 0x88 - ADC Sample Sequence Result FIFO 2
        volatile uint32_t SSFSTAT2;  ///< Offset: 0x8C - ADC Sample Sequence FIFO 2 Status
        volatile uint32_t SSOP2;  ///< Offset: 0x90 - ADC Sample Sequence 2 Operation
        volatile uint32_t SSDC2;  ///< Offset: 0x94 - ADC Sample Sequence 2 Digital Comparator Select
        volatile uint32_t SSEMUX2;  ///< Offset: 0x98 - ADC Sample Sequence Extended Input Multiplexer Select 2
        volatile uint32_t SSTSH2;  ///< Offset: 0x9C - ADC Sample Sequence 2 Sample and Hold Time
        volatile uint32_t SSMUX3;  ///< Offset: 0xA0 - ADC Sample Sequence Input Multiplexer Select 3
        volatile uint32_t SSCTL3;  ///< Offset: 0xA4 - ADC Sample Sequence Control 3
        volatile uint32_t SSFIFO3;  ///< Offset: 0xA8 - ADC Sample Sequence Result FIFO 3
        volatile uint32_t SSFSTAT3;  ///< Offset: 0xAC - ADC Sample Sequence FIFO 3 Status
        volatile uint32_t SSOP3;  ///< Offset: 0xB0 - ADC Sample Sequence 3 Operation
        volatile uint32_t SSDC3;  ///< Offset: 0xB4 - ADC Sample Sequence 3 Digital Comparator Select
        volatile uint32_t SSEMUX3;  ///< Offset: 0xB8 - ADC Sample Sequence Extended Input Multiplexer Select 3
        volatile uint32_t SSTSH3;  ///< Offset: 0xBC - ADC Sample Sequence 3 Sample and Hold Time
        volatile uint32_t DCRIC;  ///< Offset: 0xD00 - ADC Digital Comparator Reset Initial Conditions
        volatile uint32_t DCCTL0;  ///< Offset: 0xE00 - ADC Digital Comparator Control 0
        volatile uint32_t DCCTL1;  ///< Offset: 0xE04 - ADC Digital Comparator Control 1
        volatile uint32_t DCCTL2;  ///< Offset: 0xE08 - ADC Digital Comparator Control 2
        volatile uint32_t DCCTL3;  ///< Offset: 0xE0C - ADC Digital Comparator Control 3
        volatile uint32_t DCCTL4;  ///< Offset: 0xE10 - ADC Digital Comparator Control 4
        volatile uint32_t DCCTL5;  ///< Offset: 0xE14 - ADC Digital Comparator Control 5
        volatile uint32_t DCCTL6;  ///< Offset: 0xE18 - ADC Digital Comparator Control 6
        volatile uint32_t DCCTL7;  ///< Offset: 0xE1C - ADC Digital Comparator Control 7
        volatile uint32_t DCCMP0;  ///< Offset: 0xE40 - ADC Digital Comparator Range 0
        volatile uint32_t DCCMP1;  ///< Offset: 0xE44 - ADC Digital Comparator Range 1
        volatile uint32_t DCCMP2;  ///< Offset: 0xE48 - ADC Digital Comparator Range 2
        volatile uint32_t DCCMP3;  ///< Offset: 0xE4C - ADC Digital Comparator Range 3
        volatile uint32_t DCCMP4;  ///< Offset: 0xE50 - ADC Digital Comparator Range 4
        volatile uint32_t DCCMP5;  ///< Offset: 0xE54 - ADC Digital Comparator Range 5
        volatile uint32_t DCCMP6;  ///< Offset: 0xE58 - ADC Digital Comparator Range 6
        volatile uint32_t DCCMP7;  ///< Offset: 0xE5C - ADC Digital Comparator Range 7
        volatile uint32_t PP;  ///< Offset: 0xFC0 - ADC Peripheral Properties
        volatile uint32_t PC;  ///< Offset: 0xFC4 - ADC Peripheral Configuration
        volatile uint32_t CC;  ///< Offset: 0xFC8 - ADC Clock Configuration
    };

    /// Peripheral instances
    inline Registers* ADC0 = reinterpret_cast<Registers*>(ADC0_BASE);
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);

}

// ============================================================================
// COMP Peripheral
// ============================================================================

namespace comp {
    /// Base addresses
    constexpr uint32_t COMP_BASE = 0x4003C000;

    /// COMP Register structure
    struct Registers {
        volatile uint32_t ACMIS;  ///< Offset: 0x00 - Analog Comparator Masked Interrupt Status
        volatile uint32_t ACRIS;  ///< Offset: 0x04 - Analog Comparator Raw Interrupt Status
        volatile uint32_t ACINTEN;  ///< Offset: 0x08 - Analog Comparator Interrupt Enable
        volatile uint32_t ACREFCTL;  ///< Offset: 0x10 - Analog Comparator Reference Voltage Control
        volatile uint32_t ACSTAT0;  ///< Offset: 0x20 - Analog Comparator Status 0
        volatile uint32_t ACCTL0;  ///< Offset: 0x24 - Analog Comparator Control 0
        volatile uint32_t ACSTAT1;  ///< Offset: 0x40 - Analog Comparator Status 1
        volatile uint32_t ACCTL1;  ///< Offset: 0x44 - Analog Comparator Control 1
        volatile uint32_t ACSTAT2;  ///< Offset: 0x60 - Analog Comparator Status 2
        volatile uint32_t ACCTL2;  ///< Offset: 0x64 - Analog Comparator Control 2
        volatile uint32_t PP;  ///< Offset: 0xFC0 - Analog Comparator Peripheral Properties
    };

    /// Peripheral instances
    inline Registers* COMP = reinterpret_cast<Registers*>(COMP_BASE);

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN0_BASE = 0x40040000;
    constexpr uint32_t CAN1_BASE = 0x40041000;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - CAN Control
        volatile uint32_t STS;  ///< Offset: 0x04 - CAN Status
        volatile uint32_t ERR;  ///< Offset: 0x08 - CAN Error Counter
        volatile uint32_t BIT;  ///< Offset: 0x0C - CAN Bit Timing
        volatile uint32_t INT;  ///< Offset: 0x10 - CAN Interrupt
        volatile uint32_t TST;  ///< Offset: 0x14 - CAN Test
        volatile uint32_t BRPE;  ///< Offset: 0x18 - CAN Baud Rate Prescaler Extension
        volatile uint32_t IF1CRQ;  ///< Offset: 0x20 - CAN IF1 Command Request
        volatile uint32_t IF1CMSK;  ///< Offset: 0x24 - CAN IF1 Command Mask
        volatile uint32_t IF1MSK1;  ///< Offset: 0x28 - CAN IF1 Mask 1
        volatile uint32_t IF1MSK2;  ///< Offset: 0x2C - CAN IF1 Mask 2
        volatile uint32_t IF1ARB1;  ///< Offset: 0x30 - CAN IF1 Arbitration 1
        volatile uint32_t IF1ARB2;  ///< Offset: 0x34 - CAN IF1 Arbitration 2
        volatile uint32_t IF1MCTL;  ///< Offset: 0x38 - CAN IF1 Message Control
        volatile uint32_t IF1DA1;  ///< Offset: 0x3C - CAN IF1 Data A1
        volatile uint32_t IF1DA2;  ///< Offset: 0x40 - CAN IF1 Data A2
        volatile uint32_t IF1DB1;  ///< Offset: 0x44 - CAN IF1 Data B1
        volatile uint32_t IF1DB2;  ///< Offset: 0x48 - CAN IF1 Data B2
        volatile uint32_t IF2CRQ;  ///< Offset: 0x80 - CAN IF2 Command Request
        volatile uint32_t IF2CMSK;  ///< Offset: 0x84 - CAN IF2 Command Mask
        volatile uint32_t IF2MSK1;  ///< Offset: 0x88 - CAN IF2 Mask 1
        volatile uint32_t IF2MSK2;  ///< Offset: 0x8C - CAN IF2 Mask 2
        volatile uint32_t IF2ARB1;  ///< Offset: 0x90 - CAN IF2 Arbitration 1
        volatile uint32_t IF2ARB2;  ///< Offset: 0x94 - CAN IF2 Arbitration 2
        volatile uint32_t IF2MCTL;  ///< Offset: 0x98 - CAN IF2 Message Control
        volatile uint32_t IF2DA1;  ///< Offset: 0x9C - CAN IF2 Data A1
        volatile uint32_t IF2DA2;  ///< Offset: 0xA0 - CAN IF2 Data A2
        volatile uint32_t IF2DB1;  ///< Offset: 0xA4 - CAN IF2 Data B1
        volatile uint32_t IF2DB2;  ///< Offset: 0xA8 - CAN IF2 Data B2
        volatile uint32_t TXRQ1;  ///< Offset: 0x100 - CAN Transmission Request 1
        volatile uint32_t TXRQ2;  ///< Offset: 0x104 - CAN Transmission Request 2
        volatile uint32_t NWDA1;  ///< Offset: 0x120 - CAN New Data 1
        volatile uint32_t NWDA2;  ///< Offset: 0x124 - CAN New Data 2
        volatile uint32_t MSG1INT;  ///< Offset: 0x140 - CAN Message 1 Interrupt Pending
        volatile uint32_t MSG2INT;  ///< Offset: 0x144 - CAN Message 2 Interrupt Pending
        volatile uint32_t MSG1VAL;  ///< Offset: 0x160 - CAN Message 1 Valid
        volatile uint32_t MSG2VAL;  ///< Offset: 0x164 - CAN Message 2 Valid
    };

    /// Peripheral instances
    inline Registers* CAN0 = reinterpret_cast<Registers*>(CAN0_BASE);
    inline Registers* CAN1 = reinterpret_cast<Registers*>(CAN1_BASE);

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USB0_BASE = 0x40050000;

    /// USB Register structure
    struct Registers {
        volatile uint32_t FADDR;  ///< Offset: 0x00 - USB Device Functional Address
        volatile uint32_t POWER;  ///< Offset: 0x01 - USB Power
        volatile uint32_t TXIS;  ///< Offset: 0x02 - USB Transmit Interrupt Status
        volatile uint32_t RXIS;  ///< Offset: 0x04 - USB Receive Interrupt Status
        volatile uint32_t TXIE;  ///< Offset: 0x06 - USB Transmit Interrupt Enable
        volatile uint32_t RXIE;  ///< Offset: 0x08 - USB Receive Interrupt Enable
        volatile uint32_t IS;  ///< Offset: 0x0A - USB General Interrupt Status
        volatile uint32_t IE;  ///< Offset: 0x0B - USB Interrupt Enable
        volatile uint32_t FRAME;  ///< Offset: 0x0C - USB Frame Value
        volatile uint32_t EPIDX;  ///< Offset: 0x0E - USB Endpoint Index
        volatile uint32_t TEST;  ///< Offset: 0x0F - USB Test Mode
        volatile uint32_t FIFO0;  ///< Offset: 0x20 - USB FIFO Endpoint 0
        volatile uint32_t FIFO1;  ///< Offset: 0x24 - USB FIFO Endpoint 1
        volatile uint32_t FIFO2;  ///< Offset: 0x28 - USB FIFO Endpoint 2
        volatile uint32_t FIFO3;  ///< Offset: 0x2C - USB FIFO Endpoint 3
        volatile uint32_t FIFO4;  ///< Offset: 0x30 - USB FIFO Endpoint 4
        volatile uint32_t FIFO5;  ///< Offset: 0x34 - USB FIFO Endpoint 5
        volatile uint32_t FIFO6;  ///< Offset: 0x38 - USB FIFO Endpoint 6
        volatile uint32_t FIFO7;  ///< Offset: 0x3C - USB FIFO Endpoint 7
        volatile uint32_t DEVCTL;  ///< Offset: 0x60 - USB Device Control
        volatile uint32_t CCONF;  ///< Offset: 0x61 - USB Common Configuration
        volatile uint32_t TXFIFOSZ;  ///< Offset: 0x62 - USB Transmit Dynamic FIFO Sizing
        volatile uint32_t RXFIFOSZ;  ///< Offset: 0x63 - USB Receive Dynamic FIFO Sizing
        volatile uint32_t TXFIFOADD;  ///< Offset: 0x64 - USB Transmit FIFO Start Address
        volatile uint32_t RXFIFOADD;  ///< Offset: 0x66 - USB Receive FIFO Start Address
        volatile uint32_t ULPIVBUSCTL;  ///< Offset: 0x70 - USB ULPI VBUS Control
        volatile uint32_t ULPIREGDATA;  ///< Offset: 0x74 - USB ULPI Register Data
        volatile uint32_t ULPIREGADDR;  ///< Offset: 0x75 - USB ULPI Register Address
        volatile uint32_t ULPIREGCTL;  ///< Offset: 0x76 - USB ULPI Register Control
        volatile uint32_t EPINFO;  ///< Offset: 0x78 - USB Endpoint Information
        volatile uint32_t RAMINFO;  ///< Offset: 0x79 - USB RAM Information
        volatile uint32_t CONTIM;  ///< Offset: 0x7A - USB Connect Timing
        volatile uint32_t VPLEN;  ///< Offset: 0x7B - USB OTG VBUS Pulse Timing
        volatile uint32_t HSEOF;  ///< Offset: 0x7C - USB High-Speed Last Transaction to End of Frame Timing
        volatile uint32_t FSEOF;  ///< Offset: 0x7D - USB Full-Speed Last Transaction to End of Frame Timing
        volatile uint32_t LSEOF;  ///< Offset: 0x7E - USB Low-Speed Last Transaction to End of Frame Timing
        volatile uint32_t TXFUNCADDR0;  ///< Offset: 0x80 - USB Transmit Functional Address Endpoint 0
        volatile uint32_t TXHUBADDR0;  ///< Offset: 0x82 - USB Transmit Hub Address Endpoint 0
        volatile uint32_t TXHUBPORT0;  ///< Offset: 0x83 - USB Transmit Hub Port Endpoint 0
        volatile uint32_t TXFUNCADDR1;  ///< Offset: 0x88 - USB Transmit Functional Address Endpoint 1
        volatile uint32_t TXHUBADDR1;  ///< Offset: 0x8A - USB Transmit Hub Address Endpoint 1
        volatile uint32_t TXHUBPORT1;  ///< Offset: 0x8B - USB Transmit Hub Port Endpoint 1
        volatile uint32_t RXFUNCADDR1;  ///< Offset: 0x8C - USB Receive Functional Address Endpoint 1
        volatile uint32_t RXHUBADDR1;  ///< Offset: 0x8E - USB Receive Hub Address Endpoint 1
        volatile uint32_t RXHUBPORT1;  ///< Offset: 0x8F - USB Receive Hub Port Endpoint 1
        volatile uint32_t TXFUNCADDR2;  ///< Offset: 0x90 - USB Transmit Functional Address Endpoint 2
        volatile uint32_t TXHUBADDR2;  ///< Offset: 0x92 - USB Transmit Hub Address Endpoint 2
        volatile uint32_t TXHUBPORT2;  ///< Offset: 0x93 - USB Transmit Hub Port Endpoint 2
        volatile uint32_t RXFUNCADDR2;  ///< Offset: 0x94 - USB Receive Functional Address Endpoint 2
        volatile uint32_t RXHUBADDR2;  ///< Offset: 0x96 - USB Receive Hub Address Endpoint 2
        volatile uint32_t RXHUBPORT2;  ///< Offset: 0x97 - USB Receive Hub Port Endpoint 2
        volatile uint32_t TXFUNCADDR3;  ///< Offset: 0x98 - USB Transmit Functional Address Endpoint 3
        volatile uint32_t TXHUBADDR3;  ///< Offset: 0x9A - USB Transmit Hub Address Endpoint 3
        volatile uint32_t TXHUBPORT3;  ///< Offset: 0x9B - USB Transmit Hub Port Endpoint 3
        volatile uint32_t RXFUNCADDR3;  ///< Offset: 0x9C - USB Receive Functional Address Endpoint 3
        volatile uint32_t RXHUBADDR3;  ///< Offset: 0x9E - USB Receive Hub Address Endpoint 3
        volatile uint32_t RXHUBPORT3;  ///< Offset: 0x9F - USB Receive Hub Port Endpoint 3
        volatile uint32_t TXFUNCADDR4;  ///< Offset: 0xA0 - USB Transmit Functional Address Endpoint 4
        volatile uint32_t TXHUBADDR4;  ///< Offset: 0xA2 - USB Transmit Hub Address Endpoint 4
        volatile uint32_t TXHUBPORT4;  ///< Offset: 0xA3 - USB Transmit Hub Port Endpoint 4
        volatile uint32_t RXFUNCADDR4;  ///< Offset: 0xA4 - USB Receive Functional Address Endpoint 4
        volatile uint32_t RXHUBADDR4;  ///< Offset: 0xA6 - USB Receive Hub Address Endpoint 4
        volatile uint32_t RXHUBPORT4;  ///< Offset: 0xA7 - USB Receive Hub Port Endpoint 4
        volatile uint32_t TXFUNCADDR5;  ///< Offset: 0xA8 - USB Transmit Functional Address Endpoint 5
        volatile uint32_t TXHUBADDR5;  ///< Offset: 0xAA - USB Transmit Hub Address Endpoint 5
        volatile uint32_t TXHUBPORT5;  ///< Offset: 0xAB - USB Transmit Hub Port Endpoint 5
        volatile uint32_t RXFUNCADDR5;  ///< Offset: 0xAC - USB Receive Functional Address Endpoint 5
        volatile uint32_t RXHUBADDR5;  ///< Offset: 0xAE - USB Receive Hub Address Endpoint 5
        volatile uint32_t RXHUBPORT5;  ///< Offset: 0xAF - USB Receive Hub Port Endpoint 5
        volatile uint32_t TXFUNCADDR6;  ///< Offset: 0xB0 - USB Transmit Functional Address Endpoint 6
        volatile uint32_t TXHUBADDR6;  ///< Offset: 0xB2 - USB Transmit Hub Address Endpoint 6
        volatile uint32_t TXHUBPORT6;  ///< Offset: 0xB3 - USB Transmit Hub Port Endpoint 6
        volatile uint32_t RXFUNCADDR6;  ///< Offset: 0xB4 - USB Receive Functional Address Endpoint 6
        volatile uint32_t RXHUBADDR6;  ///< Offset: 0xB6 - USB Receive Hub Address Endpoint 6
        volatile uint32_t RXHUBPORT6;  ///< Offset: 0xB7 - USB Receive Hub Port Endpoint 6
        volatile uint32_t TXFUNCADDR7;  ///< Offset: 0xB8 - USB Transmit Functional Address Endpoint 7
        volatile uint32_t TXHUBADDR7;  ///< Offset: 0xBA - USB Transmit Hub Address Endpoint 7
        volatile uint32_t TXHUBPORT7;  ///< Offset: 0xBB - USB Transmit Hub Port Endpoint 7
        volatile uint32_t RXFUNCADDR7;  ///< Offset: 0xBC - USB Receive Functional Address Endpoint 7
        volatile uint32_t RXHUBADDR7;  ///< Offset: 0xBE - USB Receive Hub Address Endpoint 7
        volatile uint32_t RXHUBPORT7;  ///< Offset: 0xBF - USB Receive Hub Port Endpoint 7
        volatile uint32_t CSRL0;  ///< Offset: 0x102 - USB Control and Status Endpoint 0 Low
        volatile uint32_t CSRH0;  ///< Offset: 0x103 - USB Control and Status Endpoint 0 High
        volatile uint32_t COUNT0;  ///< Offset: 0x108 - USB Receive Byte Count Endpoint 0
        volatile uint32_t TYPE0;  ///< Offset: 0x10A - USB Type Endpoint 0
        volatile uint32_t NAKLMT;  ///< Offset: 0x10B - USB NAK Limit
        volatile uint32_t TXMAXP1;  ///< Offset: 0x110 - USB Maximum Transmit Data Endpoint 1
        volatile uint32_t TXCSRL1;  ///< Offset: 0x112 - USB Transmit Control and Status Endpoint 1 Low
        volatile uint32_t TXCSRH1;  ///< Offset: 0x113 - USB Transmit Control and Status Endpoint 1 High
        volatile uint32_t RXMAXP1;  ///< Offset: 0x114 - USB Maximum Receive Data Endpoint 1
        volatile uint32_t RXCSRL1;  ///< Offset: 0x116 - USB Receive Control and Status Endpoint 1 Low
        volatile uint32_t RXCSRH1;  ///< Offset: 0x117 - USB Receive Control and Status Endpoint 1 High
        volatile uint32_t RXCOUNT1;  ///< Offset: 0x118 - USB Receive Byte Count Endpoint 1
        volatile uint32_t TXTYPE1;  ///< Offset: 0x11A - USB Host Transmit Configure Type Endpoint 1
        volatile uint32_t TXINTERVAL1;  ///< Offset: 0x11B - USB Host Transmit Interval Endpoint 1
        volatile uint32_t RXTYPE1;  ///< Offset: 0x11C - USB Host Configure Receive Type Endpoint 1
        volatile uint32_t RXINTERVAL1;  ///< Offset: 0x11D - USB Host Receive Polling Interval Endpoint 1
        volatile uint32_t TXMAXP2;  ///< Offset: 0x120 - USB Maximum Transmit Data Endpoint 2
        volatile uint32_t TXCSRL2;  ///< Offset: 0x122 - USB Transmit Control and Status Endpoint 2 Low
        volatile uint32_t TXCSRH2;  ///< Offset: 0x123 - USB Transmit Control and Status Endpoint 2 High
        volatile uint32_t RXMAXP2;  ///< Offset: 0x124 - USB Maximum Receive Data Endpoint 2
        volatile uint32_t RXCSRL2;  ///< Offset: 0x126 - USB Receive Control and Status Endpoint 2 Low
        volatile uint32_t RXCSRH2;  ///< Offset: 0x127 - USB Receive Control and Status Endpoint 2 High
        volatile uint32_t RXCOUNT2;  ///< Offset: 0x128 - USB Receive Byte Count Endpoint 2
        volatile uint32_t TXTYPE2;  ///< Offset: 0x12A - USB Host Transmit Configure Type Endpoint 2
        volatile uint32_t TXINTERVAL2;  ///< Offset: 0x12B - USB Host Transmit Interval Endpoint 2
        volatile uint32_t RXTYPE2;  ///< Offset: 0x12C - USB Host Configure Receive Type Endpoint 2
        volatile uint32_t RXINTERVAL2;  ///< Offset: 0x12D - USB Host Receive Polling Interval Endpoint 2
        volatile uint32_t TXMAXP3;  ///< Offset: 0x130 - USB Maximum Transmit Data Endpoint 3
        volatile uint32_t TXCSRL3;  ///< Offset: 0x132 - USB Transmit Control and Status Endpoint 3 Low
        volatile uint32_t TXCSRH3;  ///< Offset: 0x133 - USB Transmit Control and Status Endpoint 3 High
        volatile uint32_t RXMAXP3;  ///< Offset: 0x134 - USB Maximum Receive Data Endpoint 3
        volatile uint32_t RXCSRL3;  ///< Offset: 0x136 - USB Receive Control and Status Endpoint 3 Low
        volatile uint32_t RXCSRH3;  ///< Offset: 0x137 - USB Receive Control and Status Endpoint 3 High
        volatile uint32_t RXCOUNT3;  ///< Offset: 0x138 - USB Receive Byte Count Endpoint 3
        volatile uint32_t TXTYPE3;  ///< Offset: 0x13A - USB Host Transmit Configure Type Endpoint 3
        volatile uint32_t TXINTERVAL3;  ///< Offset: 0x13B - USB Host Transmit Interval Endpoint 3
        volatile uint32_t RXTYPE3;  ///< Offset: 0x13C - USB Host Configure Receive Type Endpoint 3
        volatile uint32_t RXINTERVAL3;  ///< Offset: 0x13D - USB Host Receive Polling Interval Endpoint 3
        volatile uint32_t TXMAXP4;  ///< Offset: 0x140 - USB Maximum Transmit Data Endpoint 4
        volatile uint32_t TXCSRL4;  ///< Offset: 0x142 - USB Transmit Control and Status Endpoint 4 Low
        volatile uint32_t TXCSRH4;  ///< Offset: 0x143 - USB Transmit Control and Status Endpoint 4 High
        volatile uint32_t RXMAXP4;  ///< Offset: 0x144 - USB Maximum Receive Data Endpoint 4
        volatile uint32_t RXCSRL4;  ///< Offset: 0x146 - USB Receive Control and Status Endpoint 4 Low
        volatile uint32_t RXCSRH4;  ///< Offset: 0x147 - USB Receive Control and Status Endpoint 4 High
        volatile uint32_t RXCOUNT4;  ///< Offset: 0x148 - USB Receive Byte Count Endpoint 4
        volatile uint32_t TXTYPE4;  ///< Offset: 0x14A - USB Host Transmit Configure Type Endpoint 4
        volatile uint32_t TXINTERVAL4;  ///< Offset: 0x14B - USB Host Transmit Interval Endpoint 4
        volatile uint32_t RXTYPE4;  ///< Offset: 0x14C - USB Host Configure Receive Type Endpoint 4
        volatile uint32_t RXINTERVAL4;  ///< Offset: 0x14D - USB Host Receive Polling Interval Endpoint 4
        volatile uint32_t TXMAXP5;  ///< Offset: 0x150 - USB Maximum Transmit Data Endpoint 5
        volatile uint32_t TXCSRL5;  ///< Offset: 0x152 - USB Transmit Control and Status Endpoint 5 Low
        volatile uint32_t TXCSRH5;  ///< Offset: 0x153 - USB Transmit Control and Status Endpoint 5 High
        volatile uint32_t RXMAXP5;  ///< Offset: 0x154 - USB Maximum Receive Data Endpoint 5
        volatile uint32_t RXCSRL5;  ///< Offset: 0x156 - USB Receive Control and Status Endpoint 5 Low
        volatile uint32_t RXCSRH5;  ///< Offset: 0x157 - USB Receive Control and Status Endpoint 5 High
        volatile uint32_t RXCOUNT5;  ///< Offset: 0x158 - USB Receive Byte Count Endpoint 5
        volatile uint32_t TXTYPE5;  ///< Offset: 0x15A - USB Host Transmit Configure Type Endpoint 5
        volatile uint32_t TXINTERVAL5;  ///< Offset: 0x15B - USB Host Transmit Interval Endpoint 5
        volatile uint32_t RXTYPE5;  ///< Offset: 0x15C - USB Host Configure Receive Type Endpoint 5
        volatile uint32_t RXINTERVAL5;  ///< Offset: 0x15D - USB Host Receive Polling Interval Endpoint 5
        volatile uint32_t TXMAXP6;  ///< Offset: 0x160 - USB Maximum Transmit Data Endpoint 6
        volatile uint32_t TXCSRL6;  ///< Offset: 0x162 - USB Transmit Control and Status Endpoint 6 Low
        volatile uint32_t TXCSRH6;  ///< Offset: 0x163 - USB Transmit Control and Status Endpoint 6 High
        volatile uint32_t RXMAXP6;  ///< Offset: 0x164 - USB Maximum Receive Data Endpoint 6
        volatile uint32_t RXCSRL6;  ///< Offset: 0x166 - USB Receive Control and Status Endpoint 6 Low
        volatile uint32_t RXCSRH6;  ///< Offset: 0x167 - USB Receive Control and Status Endpoint 6 High
        volatile uint32_t RXCOUNT6;  ///< Offset: 0x168 - USB Receive Byte Count Endpoint 6
        volatile uint32_t TXTYPE6;  ///< Offset: 0x16A - USB Host Transmit Configure Type Endpoint 6
        volatile uint32_t TXINTERVAL6;  ///< Offset: 0x16B - USB Host Transmit Interval Endpoint 6
        volatile uint32_t RXTYPE6;  ///< Offset: 0x16C - USB Host Configure Receive Type Endpoint 6
        volatile uint32_t RXINTERVAL6;  ///< Offset: 0x16D - USB Host Receive Polling Interval Endpoint 6
        volatile uint32_t TXMAXP7;  ///< Offset: 0x170 - USB Maximum Transmit Data Endpoint 7
        volatile uint32_t TXCSRL7;  ///< Offset: 0x172 - USB Transmit Control and Status Endpoint 7 Low
        volatile uint32_t TXCSRH7;  ///< Offset: 0x173 - USB Transmit Control and Status Endpoint 7 High
        volatile uint32_t RXMAXP7;  ///< Offset: 0x174 - USB Maximum Receive Data Endpoint 7
        volatile uint32_t RXCSRL7;  ///< Offset: 0x176 - USB Receive Control and Status Endpoint 7 Low
        volatile uint32_t RXCSRH7;  ///< Offset: 0x177 - USB Receive Control and Status Endpoint 7 High
        volatile uint32_t RXCOUNT7;  ///< Offset: 0x178 - USB Receive Byte Count Endpoint 7
        volatile uint32_t TXTYPE7;  ///< Offset: 0x17A - USB Host Transmit Configure Type Endpoint 7
        volatile uint32_t TXINTERVAL7;  ///< Offset: 0x17B - USB Host Transmit Interval Endpoint 7
        volatile uint32_t RXTYPE7;  ///< Offset: 0x17C - USB Host Configure Receive Type Endpoint 7
        volatile uint32_t RXINTERVAL7;  ///< Offset: 0x17D - USB Host Receive Polling Interval Endpoint 7
        volatile uint32_t DMAINTR;  ///< Offset: 0x200 - USB DMA Interrupt
        volatile uint32_t DMACTL0;  ///< Offset: 0x204 - USB DMA Control 0
        volatile uint32_t DMAADDR0;  ///< Offset: 0x208 - USB DMA Address 0
        volatile uint32_t DMACOUNT0;  ///< Offset: 0x20C - USB DMA Count 0
        volatile uint32_t DMACTL1;  ///< Offset: 0x214 - USB DMA Control 1
        volatile uint32_t DMAADDR1;  ///< Offset: 0x218 - USB DMA Address 1
        volatile uint32_t DMACOUNT1;  ///< Offset: 0x21C - USB DMA Count 1
        volatile uint32_t DMACTL2;  ///< Offset: 0x224 - USB DMA Control 2
        volatile uint32_t DMAADDR2;  ///< Offset: 0x228 - USB DMA Address 2
        volatile uint32_t DMACOUNT2;  ///< Offset: 0x22C - USB DMA Count 2
        volatile uint32_t DMACTL3;  ///< Offset: 0x234 - USB DMA Control 3
        volatile uint32_t DMAADDR3;  ///< Offset: 0x238 - USB DMA Address 3
        volatile uint32_t DMACOUNT3;  ///< Offset: 0x23C - USB DMA Count 3
        volatile uint32_t DMACTL4;  ///< Offset: 0x244 - USB DMA Control 4
        volatile uint32_t DMAADDR4;  ///< Offset: 0x248 - USB DMA Address 4
        volatile uint32_t DMACOUNT4;  ///< Offset: 0x24C - USB DMA Count 4
        volatile uint32_t DMACTL5;  ///< Offset: 0x254 - USB DMA Control 5
        volatile uint32_t DMAADDR5;  ///< Offset: 0x258 - USB DMA Address 5
        volatile uint32_t DMACOUNT5;  ///< Offset: 0x25C - USB DMA Count 5
        volatile uint32_t DMACTL6;  ///< Offset: 0x264 - USB DMA Control 6
        volatile uint32_t DMAADDR6;  ///< Offset: 0x268 - USB DMA Address 6
        volatile uint32_t DMACOUNT6;  ///< Offset: 0x26C - USB DMA Count 6
        volatile uint32_t DMACTL7;  ///< Offset: 0x274 - USB DMA Control 7
        volatile uint32_t DMAADDR7;  ///< Offset: 0x278 - USB DMA Address 7
        volatile uint32_t DMACOUNT7;  ///< Offset: 0x27C - USB DMA Count 7
        volatile uint32_t RQPKTCOUNT1;  ///< Offset: 0x304 - USB Request Packet Count in Block Transfer Endpoint 1
        volatile uint32_t RQPKTCOUNT2;  ///< Offset: 0x308 - USB Request Packet Count in Block Transfer Endpoint 2
        volatile uint32_t RQPKTCOUNT3;  ///< Offset: 0x30C - USB Request Packet Count in Block Transfer Endpoint 3
        volatile uint32_t RQPKTCOUNT4;  ///< Offset: 0x310 - USB Request Packet Count in Block Transfer Endpoint 4
        volatile uint32_t RQPKTCOUNT5;  ///< Offset: 0x314 - USB Request Packet Count in Block Transfer Endpoint 5
        volatile uint32_t RQPKTCOUNT6;  ///< Offset: 0x318 - USB Request Packet Count in Block Transfer Endpoint 6
        volatile uint32_t RQPKTCOUNT7;  ///< Offset: 0x31C - USB Request Packet Count in Block Transfer Endpoint 7
        volatile uint32_t RXDPKTBUFDIS;  ///< Offset: 0x340 - USB Receive Double Packet Buffer Disable
        volatile uint32_t TXDPKTBUFDIS;  ///< Offset: 0x342 - USB Transmit Double Packet Buffer Disable
        volatile uint32_t CTO;  ///< Offset: 0x344 - USB Chirp Timeout
        volatile uint32_t HHSRTN;  ///< Offset: 0x346 - USB High Speed to UTM Operating Delay
        volatile uint32_t HSBT;  ///< Offset: 0x348 - USB High Speed Time-out Adder
        volatile uint32_t LPMATTR;  ///< Offset: 0x360 - USB LPM Attributes
        volatile uint32_t LPMCNTRL;  ///< Offset: 0x362 - USB LPM Control
        volatile uint32_t LPMIM;  ///< Offset: 0x363 - USB LPM Interrupt Mask
        volatile uint32_t LPMRIS;  ///< Offset: 0x364 - USB LPM Raw Interrupt Status
        volatile uint32_t LPMFADDR;  ///< Offset: 0x365 - USB LPM Function Address
        volatile uint32_t EPC;  ///< Offset: 0x400 - USB External Power Control
        volatile uint32_t EPCRIS;  ///< Offset: 0x404 - USB External Power Control Raw Interrupt Status
        volatile uint32_t EPCIM;  ///< Offset: 0x408 - USB External Power Control Interrupt Mask
        volatile uint32_t EPCISC;  ///< Offset: 0x40C - USB External Power Control Interrupt Status and Clear
        volatile uint32_t DRRIS;  ///< Offset: 0x410 - USB Device RESUME Raw Interrupt Status
        volatile uint32_t DRIM;  ///< Offset: 0x414 - USB Device RESUME Interrupt Mask
        volatile uint32_t DRISC;  ///< Offset: 0x418 - USB Device RESUME Interrupt Status and Clear
        volatile uint32_t GPCS;  ///< Offset: 0x41C - USB General-Purpose Control and Status
        volatile uint32_t VDC;  ///< Offset: 0x430 - USB VBUS Droop Control
        volatile uint32_t VDCRIS;  ///< Offset: 0x434 - USB VBUS Droop Control Raw Interrupt Status
        volatile uint32_t VDCIM;  ///< Offset: 0x438 - USB VBUS Droop Control Interrupt Mask
        volatile uint32_t VDCISC;  ///< Offset: 0x43C - USB VBUS Droop Control Interrupt Status and Clear
        volatile uint32_t PP;  ///< Offset: 0xFC0 - USB Peripheral Properties
        volatile uint32_t PC;  ///< Offset: 0xFC4 - USB Peripheral Configuration
        volatile uint32_t CC;  ///< Offset: 0xFC8 - USB Clock Configuration
    };

    /// Peripheral instances
    inline Registers* USB0 = reinterpret_cast<Registers*>(USB0_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIOA_BASE = 0x40058000;
    constexpr uint32_t GPIOB_BASE = 0x40059000;
    constexpr uint32_t GPIOC_BASE = 0x4005A000;
    constexpr uint32_t GPIOD_BASE = 0x4005B000;
    constexpr uint32_t GPIOE_BASE = 0x4005C000;
    constexpr uint32_t GPIOF_BASE = 0x4005D000;
    constexpr uint32_t GPIOG_BASE = 0x4005E000;
    constexpr uint32_t GPIOH_BASE = 0x4005F000;
    constexpr uint32_t GPIOJ_BASE = 0x40060000;
    constexpr uint32_t GPIOK_BASE = 0x40061000;
    constexpr uint32_t GPIOL_BASE = 0x40062000;
    constexpr uint32_t GPIOM_BASE = 0x40063000;
    constexpr uint32_t GPION_BASE = 0x40064000;
    constexpr uint32_t GPIOP_BASE = 0x40065000;
    constexpr uint32_t GPIOQ_BASE = 0x40066000;
    constexpr uint32_t GPIOR_BASE = 0x40067000;
    constexpr uint32_t GPIOS_BASE = 0x40068000;
    constexpr uint32_t GPIOT_BASE = 0x40069000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x3FC - GPIO Data
        volatile uint32_t DIR;  ///< Offset: 0x400 - GPIO Direction
        volatile uint32_t IS;  ///< Offset: 0x404 - GPIO Interrupt Sense
        volatile uint32_t IBE;  ///< Offset: 0x408 - GPIO Interrupt Both Edges
        volatile uint32_t IEV;  ///< Offset: 0x40C - GPIO Interrupt Event
        volatile uint32_t IM;  ///< Offset: 0x410 - GPIO Interrupt Mask
        volatile uint32_t RIS;  ///< Offset: 0x414 - GPIO Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x418 - GPIO Masked Interrupt Status
        volatile uint32_t ICR;  ///< Offset: 0x41C - GPIO Interrupt Clear
        volatile uint32_t AFSEL;  ///< Offset: 0x420 - GPIO Alternate Function Select
        volatile uint32_t DR2R;  ///< Offset: 0x500 - GPIO 2-mA Drive Select
        volatile uint32_t DR4R;  ///< Offset: 0x504 - GPIO 4-mA Drive Select
        volatile uint32_t DR8R;  ///< Offset: 0x508 - GPIO 8-mA Drive Select
        volatile uint32_t ODR;  ///< Offset: 0x50C - GPIO Open Drain Select
        volatile uint32_t PUR;  ///< Offset: 0x510 - GPIO Pull-Up Select
        volatile uint32_t PDR;  ///< Offset: 0x514 - GPIO Pull-Down Select
        volatile uint32_t SLR;  ///< Offset: 0x518 - GPIO Slew Rate Control Select
        volatile uint32_t DEN;  ///< Offset: 0x51C - GPIO Digital Enable
        volatile uint32_t LOCK;  ///< Offset: 0x520 - GPIO Lock
        volatile uint32_t CR;  ///< Offset: 0x524 - GPIO Commit
        volatile uint32_t AMSEL;  ///< Offset: 0x528 - GPIO Analog Mode Select
        volatile uint32_t PCTL;  ///< Offset: 0x52C - GPIO Port Control
        volatile uint32_t ADCCTL;  ///< Offset: 0x530 - GPIO ADC Control
        volatile uint32_t DMACTL;  ///< Offset: 0x534 - GPIO DMA Control
        volatile uint32_t SI;  ///< Offset: 0x538 - GPIO Select Interrupt
        volatile uint32_t DR12R;  ///< Offset: 0x53C - GPIO 12-mA Drive Select
        volatile uint32_t WAKEPEN;  ///< Offset: 0x540 - GPIO Wake Pin Enable
        volatile uint32_t WAKELVL;  ///< Offset: 0x544 - GPIO Wake Level
        volatile uint32_t WAKESTAT;  ///< Offset: 0x548 - GPIO Wake Status
        volatile uint32_t PP;  ///< Offset: 0xFC0 - GPIO Peripheral Property
        volatile uint32_t PC;  ///< Offset: 0xFC4 - GPIO Peripheral Configuration
    };

    /// Peripheral instances
    inline Registers* GPIOA = reinterpret_cast<Registers*>(GPIOA_BASE);
    inline Registers* GPIOB = reinterpret_cast<Registers*>(GPIOB_BASE);
    inline Registers* GPIOC = reinterpret_cast<Registers*>(GPIOC_BASE);
    inline Registers* GPIOD = reinterpret_cast<Registers*>(GPIOD_BASE);
    inline Registers* GPIOE = reinterpret_cast<Registers*>(GPIOE_BASE);
    inline Registers* GPIOF = reinterpret_cast<Registers*>(GPIOF_BASE);
    inline Registers* GPIOG = reinterpret_cast<Registers*>(GPIOG_BASE);
    inline Registers* GPIOH = reinterpret_cast<Registers*>(GPIOH_BASE);
    inline Registers* GPIOJ = reinterpret_cast<Registers*>(GPIOJ_BASE);
    inline Registers* GPIOK = reinterpret_cast<Registers*>(GPIOK_BASE);
    inline Registers* GPIOL = reinterpret_cast<Registers*>(GPIOL_BASE);
    inline Registers* GPIOM = reinterpret_cast<Registers*>(GPIOM_BASE);
    inline Registers* GPION = reinterpret_cast<Registers*>(GPION_BASE);
    inline Registers* GPIOP = reinterpret_cast<Registers*>(GPIOP_BASE);
    inline Registers* GPIOQ = reinterpret_cast<Registers*>(GPIOQ_BASE);
    inline Registers* GPIOR = reinterpret_cast<Registers*>(GPIOR_BASE);
    inline Registers* GPIOS = reinterpret_cast<Registers*>(GPIOS_BASE);
    inline Registers* GPIOT = reinterpret_cast<Registers*>(GPIOT_BASE);

}

// ============================================================================
// EEPROM Peripheral
// ============================================================================

namespace eeprom {
    /// Base addresses
    constexpr uint32_t EEPROM_BASE = 0x400AF000;

    /// EEPROM Register structure
    struct Registers {
        volatile uint32_t EESIZE;  ///< Offset: 0x00 - EEPROM Size Information
        volatile uint32_t EEBLOCK;  ///< Offset: 0x04 - EEPROM Current Block
        volatile uint32_t EEOFFSET;  ///< Offset: 0x08 - EEPROM Current Offset
        volatile uint32_t EERDWR;  ///< Offset: 0x10 - EEPROM Read-Write
        volatile uint32_t EERDWRINC;  ///< Offset: 0x14 - EEPROM Read-Write with Increment
        volatile uint32_t EEDONE;  ///< Offset: 0x18 - EEPROM Done Status
        volatile uint32_t EESUPP;  ///< Offset: 0x1C - EEPROM Support Control and Status
        volatile uint32_t EEUNLOCK;  ///< Offset: 0x20 - EEPROM Unlock
        volatile uint32_t EEPROT;  ///< Offset: 0x30 - EEPROM Protection
        volatile uint32_t EEPASS0;  ///< Offset: 0x34 - EEPROM Password
        volatile uint32_t EEPASS1;  ///< Offset: 0x38 - EEPROM Password
        volatile uint32_t EEPASS2;  ///< Offset: 0x3C - EEPROM Password
        volatile uint32_t EEINT;  ///< Offset: 0x40 - EEPROM Interrupt
        volatile uint32_t EEHIDE0;  ///< Offset: 0x50 - EEPROM Block Hide 0
        volatile uint32_t EEHIDE1;  ///< Offset: 0x54 - EEPROM Block Hide 1
        volatile uint32_t EEHIDE2;  ///< Offset: 0x58 - EEPROM Block Hide 2
        volatile uint32_t EEDBGME;  ///< Offset: 0x80 - EEPROM Debug Mass Erase
        volatile uint32_t PP;  ///< Offset: 0xFC0 - EEPROM Peripheral Properties
    };

    /// Peripheral instances
    inline Registers* EEPROM = reinterpret_cast<Registers*>(EEPROM_BASE);

}

// ============================================================================
// ONEWIRE0 Peripheral
// ============================================================================

namespace onewire0 {
    /// Base addresses
    constexpr uint32_t ONEWIRE0_BASE = 0x400B6000;

    /// ONEWIRE0 Register structure
    struct Registers {
        volatile uint32_t CS;  ///< Offset: 0x00 - 1-Wire Control and Status
        volatile uint32_t TIM;  ///< Offset: 0x04 - 1-Wire Timing Override
        volatile uint32_t DATW;  ///< Offset: 0x08 - 1-Wire Data Write
        volatile uint32_t DATR;  ///< Offset: 0x0C - 1-Wire Data Read
        volatile uint32_t IM;  ///< Offset: 0x100 - 1-Wire Interrupt Mask
        volatile uint32_t RIS;  ///< Offset: 0x104 - 1-Wire Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x108 - 1-Wire Masked Interrupt Status
        volatile uint32_t ICR;  ///< Offset: 0x10C - 1-Wire Interrupt Clear
        volatile uint32_t DMA;  ///< Offset: 0x120 - 1-Wire uDMA Control
        volatile uint32_t PP;  ///< Offset: 0xFC0 - 1-Wire Peripheral Properties
    };

    /// Peripheral instances
    inline Registers* ONEWIRE0 = reinterpret_cast<Registers*>(ONEWIRE0_BASE);

}

// ============================================================================
// EPI0 Peripheral
// ============================================================================

namespace epi0 {
    /// Base addresses
    constexpr uint32_t EPI0_BASE = 0x400D0000;

    /// EPI0 Register structure
    struct Registers {
        volatile uint32_t CFG;  ///< Offset: 0x00 - EPI Configuration
        volatile uint32_t BAUD;  ///< Offset: 0x04 - EPI Main Baud Rate
        volatile uint32_t BAUD2;  ///< Offset: 0x08 - EPI Main Baud Rate
        volatile uint32_t HB16CFG;  ///< Offset: 0x10 - EPI Host-Bus 16 Configuration
        volatile uint32_t GPCFG;  ///< Offset: 0x10 - EPI General-Purpose Configuration
        volatile uint32_t SDRAMCFG;  ///< Offset: 0x10 - EPI SDRAM Configuration
        volatile uint32_t HB8CFG;  ///< Offset: 0x10 - EPI Host-Bus 8 Configuration
        volatile uint32_t HB8CFG2;  ///< Offset: 0x14 - EPI Host-Bus 8 Configuration 2
        volatile uint32_t HB16CFG2;  ///< Offset: 0x14 - EPI Host-Bus 16 Configuration 2
        volatile uint32_t ADDRMAP;  ///< Offset: 0x1C - EPI Address Map
        volatile uint32_t RSIZE0;  ///< Offset: 0x20 - EPI Read Size 0
        volatile uint32_t RADDR0;  ///< Offset: 0x24 - EPI Read Address 0
        volatile uint32_t RPSTD0;  ///< Offset: 0x28 - EPI Non-Blocking Read Data 0
        volatile uint32_t RSIZE1;  ///< Offset: 0x30 - EPI Read Size 1
        volatile uint32_t RADDR1;  ///< Offset: 0x34 - EPI Read Address 1
        volatile uint32_t RPSTD1;  ///< Offset: 0x38 - EPI Non-Blocking Read Data 1
        volatile uint32_t STAT;  ///< Offset: 0x60 - EPI Status
        volatile uint32_t RFIFOCNT;  ///< Offset: 0x6C - EPI Read FIFO Count
        volatile uint32_t READFIFO0;  ///< Offset: 0x70 - EPI Read FIFO
        volatile uint32_t READFIFO1;  ///< Offset: 0x74 - EPI Read FIFO Alias 1
        volatile uint32_t READFIFO2;  ///< Offset: 0x78 - EPI Read FIFO Alias 2
        volatile uint32_t READFIFO3;  ///< Offset: 0x7C - EPI Read FIFO Alias 3
        volatile uint32_t READFIFO4;  ///< Offset: 0x80 - EPI Read FIFO Alias 4
        volatile uint32_t READFIFO5;  ///< Offset: 0x84 - EPI Read FIFO Alias 5
        volatile uint32_t READFIFO6;  ///< Offset: 0x88 - EPI Read FIFO Alias 6
        volatile uint32_t READFIFO7;  ///< Offset: 0x8C - EPI Read FIFO Alias 7
        volatile uint32_t FIFOLVL;  ///< Offset: 0x200 - EPI FIFO Level Selects
        volatile uint32_t WFIFOCNT;  ///< Offset: 0x204 - EPI Write FIFO Count
        volatile uint32_t DMATXCNT;  ///< Offset: 0x208 - EPI DMA Transmit Count
        volatile uint32_t IM;  ///< Offset: 0x210 - EPI Interrupt Mask
        volatile uint32_t RIS;  ///< Offset: 0x214 - EPI Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x218 - EPI Masked Interrupt Status
        volatile uint32_t EISC;  ///< Offset: 0x21C - EPI Error and Interrupt Status and Clear
        volatile uint32_t HB8CFG3;  ///< Offset: 0x308 - EPI Host-Bus 8 Configuration 3
        volatile uint32_t HB16CFG3;  ///< Offset: 0x308 - EPI Host-Bus 16 Configuration 3
        volatile uint32_t HB16CFG4;  ///< Offset: 0x30C - EPI Host-Bus 16 Configuration 4
        volatile uint32_t HB8CFG4;  ///< Offset: 0x30C - EPI Host-Bus 8 Configuration 4
        volatile uint32_t HB8TIME;  ///< Offset: 0x310 - EPI Host-Bus 8 Timing Extension
        volatile uint32_t HB16TIME;  ///< Offset: 0x310 - EPI Host-Bus 16 Timing Extension
        volatile uint32_t HB8TIME2;  ///< Offset: 0x314 - EPI Host-Bus 8 Timing Extension
        volatile uint32_t HB16TIME2;  ///< Offset: 0x314 - EPI Host-Bus 16 Timing Extension
        volatile uint32_t HB16TIME3;  ///< Offset: 0x318 - EPI Host-Bus 16 Timing Extension
        volatile uint32_t HB8TIME3;  ///< Offset: 0x318 - EPI Host-Bus 8 Timing Extension
        volatile uint32_t HB8TIME4;  ///< Offset: 0x31C - EPI Host-Bus 8 Timing Extension
        volatile uint32_t HB16TIME4;  ///< Offset: 0x31C - EPI Host-Bus 16 Timing Extension
        volatile uint32_t HBPSRAM;  ///< Offset: 0x360 - EPI Host-Bus PSRAM
    };

    /// Peripheral instances
    inline Registers* EPI0 = reinterpret_cast<Registers*>(EPI0_BASE);

}

// ============================================================================
// ETH Peripheral
// ============================================================================

namespace eth {
    /// Base addresses
    constexpr uint32_t EMAC0_BASE = 0x400EC000;

    /// ETH Register structure
    struct Registers {
        volatile uint32_t CFG;  ///< Offset: 0x00 - Ethernet MAC Configuration
        volatile uint32_t FRAMEFLTR;  ///< Offset: 0x04 - Ethernet MAC Frame Filter
        volatile uint32_t HASHTBLH;  ///< Offset: 0x08 - Ethernet MAC Hash Table High
        volatile uint32_t HASHTBLL;  ///< Offset: 0x0C - Ethernet MAC Hash Table Low
        volatile uint32_t MIIADDR;  ///< Offset: 0x10 - Ethernet MAC MII Address
        volatile uint32_t MIIDATA;  ///< Offset: 0x14 - Ethernet MAC MII Data Register
        volatile uint32_t FLOWCTL;  ///< Offset: 0x18 - Ethernet MAC Flow Control
        volatile uint32_t VLANTG;  ///< Offset: 0x1C - Ethernet MAC VLAN Tag
        volatile uint32_t STATUS;  ///< Offset: 0x24 - Ethernet MAC Status
        volatile uint32_t RWUFF;  ///< Offset: 0x28 - Ethernet MAC Remote Wake-Up Frame Filter
        volatile uint32_t PMTCTLSTAT;  ///< Offset: 0x2C - Ethernet MAC PMT Control and Status Register
        volatile uint32_t LPICTLSTAT;  ///< Offset: 0x30 - Ethernet MAC Low Power Idle Control and Status Register
        volatile uint32_t LPITIMERCTL;  ///< Offset: 0x34 - Ethernet MAC Low Power Idle Timer Control Register
        volatile uint32_t RIS;  ///< Offset: 0x38 - Ethernet MAC Raw Interrupt Status
        volatile uint32_t IM;  ///< Offset: 0x3C - Ethernet MAC Interrupt Mask
        volatile uint32_t ADDR0H;  ///< Offset: 0x40 - Ethernet MAC Address 0 High
        volatile uint32_t ADDR0L;  ///< Offset: 0x44 - Ethernet MAC Address 0 Low Register
        volatile uint32_t ADDR1H;  ///< Offset: 0x48 - Ethernet MAC Address 1 High
        volatile uint32_t ADDR1L;  ///< Offset: 0x4C - Ethernet MAC Address 1 Low
        volatile uint32_t ADDR2H;  ///< Offset: 0x50 - Ethernet MAC Address 2 High
        volatile uint32_t ADDR2L;  ///< Offset: 0x54 - Ethernet MAC Address 2 Low
        volatile uint32_t ADDR3H;  ///< Offset: 0x58 - Ethernet MAC Address 3 High
        volatile uint32_t ADDR3L;  ///< Offset: 0x5C - Ethernet MAC Address 3 Low
        volatile uint32_t WDOGTO;  ///< Offset: 0xDC - Ethernet MAC Watchdog Timeout
        volatile uint32_t MMCCTRL;  ///< Offset: 0x100 - Ethernet MAC MMC Control
        volatile uint32_t MMCRXRIS;  ///< Offset: 0x104 - Ethernet MAC MMC Receive Raw Interrupt Status
        volatile uint32_t MMCTXRIS;  ///< Offset: 0x108 - Ethernet MAC MMC Transmit Raw Interrupt Status
        volatile uint32_t MMCRXIM;  ///< Offset: 0x10C - Ethernet MAC MMC Receive Interrupt Mask
        volatile uint32_t MMCTXIM;  ///< Offset: 0x110 - Ethernet MAC MMC Transmit Interrupt Mask
        volatile uint32_t TXCNTGB;  ///< Offset: 0x118 - Ethernet MAC Transmit Frame Count for Good and Bad Frames
        volatile uint32_t TXCNTSCOL;  ///< Offset: 0x14C - Ethernet MAC Transmit Frame Count for Frames Transmitted...
        volatile uint32_t TXCNTMCOL;  ///< Offset: 0x150 - Ethernet MAC Transmit Frame Count for Frames Transmitted...
        volatile uint32_t TXOCTCNTG;  ///< Offset: 0x164 - Ethernet MAC Transmit Octet Count Good
        volatile uint32_t RXCNTGB;  ///< Offset: 0x180 - Ethernet MAC Receive Frame Count for Good and Bad Frames
        volatile uint32_t RXCNTCRCERR;  ///< Offset: 0x194 - Ethernet MAC Receive Frame Count for CRC Error Frames
        volatile uint32_t RXCNTALGNERR;  ///< Offset: 0x198 - Ethernet MAC Receive Frame Count for Alignment Error Frames
        volatile uint32_t RXCNTGUNI;  ///< Offset: 0x1C4 - Ethernet MAC Receive Frame Count for Good Unicast Frames
        volatile uint32_t VLNINCREP;  ///< Offset: 0x584 - Ethernet MAC VLAN Tag Inclusion or Replacement
        volatile uint32_t VLANHASH;  ///< Offset: 0x588 - Ethernet MAC VLAN Hash Table
        volatile uint32_t TIMSTCTRL;  ///< Offset: 0x700 - Ethernet MAC Timestamp Control
        volatile uint32_t SUBSECINC;  ///< Offset: 0x704 - Ethernet MAC Sub-Second Increment
        volatile uint32_t TIMSEC;  ///< Offset: 0x708 - Ethernet MAC System Time - Seconds
        volatile uint32_t TIMNANO;  ///< Offset: 0x70C - Ethernet MAC System Time - Nanoseconds
        volatile uint32_t TIMSECU;  ///< Offset: 0x710 - Ethernet MAC System Time - Seconds Update
        volatile uint32_t TIMNANOU;  ///< Offset: 0x714 - Ethernet MAC System Time - Nanoseconds Update
        volatile uint32_t TIMADD;  ///< Offset: 0x718 - Ethernet MAC Timestamp Addend
        volatile uint32_t TARGSEC;  ///< Offset: 0x71C - Ethernet MAC Target Time Seconds
        volatile uint32_t TARGNANO;  ///< Offset: 0x720 - Ethernet MAC Target Time Nanoseconds
        volatile uint32_t HWORDSEC;  ///< Offset: 0x724 - Ethernet MAC System Time-Higher Word Seconds
        volatile uint32_t TIMSTAT;  ///< Offset: 0x728 - Ethernet MAC Timestamp Status
        volatile uint32_t PPSCTRL;  ///< Offset: 0x72C - Ethernet MAC PPS Control
        volatile uint32_t PPS0INTVL;  ///< Offset: 0x760 - Ethernet MAC PPS0 Interval
        volatile uint32_t PPS0WIDTH;  ///< Offset: 0x764 - Ethernet MAC PPS0 Width
        volatile uint32_t DMABUSMOD;  ///< Offset: 0xC00 - Ethernet MAC DMA Bus Mode
        volatile uint32_t TXPOLLD;  ///< Offset: 0xC04 - Ethernet MAC Transmit Poll Demand
        volatile uint32_t RXPOLLD;  ///< Offset: 0xC08 - Ethernet MAC Receive Poll Demand
        volatile uint32_t RXDLADDR;  ///< Offset: 0xC0C - Ethernet MAC Receive Descriptor List Address
        volatile uint32_t TXDLADDR;  ///< Offset: 0xC10 - Ethernet MAC Transmit Descriptor List Address
        volatile uint32_t DMARIS;  ///< Offset: 0xC14 - Ethernet MAC DMA Interrupt Status
        volatile uint32_t DMAOPMODE;  ///< Offset: 0xC18 - Ethernet MAC DMA Operation Mode
        volatile uint32_t DMAIM;  ///< Offset: 0xC1C - Ethernet MAC DMA Interrupt Mask Register
        volatile uint32_t MFBOC;  ///< Offset: 0xC20 - Ethernet MAC Missed Frame and Buffer Overflow Counter
        volatile uint32_t RXINTWDT;  ///< Offset: 0xC24 - Ethernet MAC Receive Interrupt Watchdog Timer
        volatile uint32_t HOSTXDESC;  ///< Offset: 0xC48 - Ethernet MAC Current Host Transmit Descriptor
        volatile uint32_t HOSRXDESC;  ///< Offset: 0xC4C - Ethernet MAC Current Host Receive Descriptor
        volatile uint32_t HOSTXBA;  ///< Offset: 0xC50 - Ethernet MAC Current Host Transmit Buffer Address
        volatile uint32_t HOSRXBA;  ///< Offset: 0xC54 - Ethernet MAC Current Host Receive Buffer Address
        volatile uint32_t PP;  ///< Offset: 0xFC0 - Ethernet MAC Peripheral Property Register
        volatile uint32_t PC;  ///< Offset: 0xFC4 - Ethernet MAC Peripheral Configuration Register
        volatile uint32_t CC;  ///< Offset: 0xFC8 - Ethernet MAC Clock Configuration Register
        volatile uint32_t EPHYRIS;  ///< Offset: 0xFCC - Ethernet PHY Raw Interrupt Status
        volatile uint32_t EPHYIM;  ///< Offset: 0xFD0 - Ethernet PHY Interrupt Mask
        volatile uint32_t EPHYMISC;  ///< Offset: 0xFD4 - Ethernet PHY Masked Interrupt Status and Clear
    };

    /// Peripheral instances
    inline Registers* EMAC0 = reinterpret_cast<Registers*>(EMAC0_BASE);

}

// ============================================================================
// SYSEXC Peripheral
// ============================================================================

namespace sysexc {
    /// Base addresses
    constexpr uint32_t SYSEXC_BASE = 0x400F9000;

    /// SYSEXC Register structure
    struct Registers {
        volatile uint32_t RIS;  ///< Offset: 0x00 - System Exception Raw Interrupt Status
        volatile uint32_t IM;  ///< Offset: 0x04 - System Exception Interrupt Mask
        volatile uint32_t MIS;  ///< Offset: 0x08 - System Exception Masked Interrupt Status
        volatile uint32_t IC;  ///< Offset: 0x0C - System Exception Interrupt Clear
    };

    /// Peripheral instances
    inline Registers* SYSEXC = reinterpret_cast<Registers*>(SYSEXC_BASE);

}

// ============================================================================
// HIB Peripheral
// ============================================================================

namespace hib {
    /// Base addresses
    constexpr uint32_t HIB_BASE = 0x400FC000;

    /// HIB Register structure
    struct Registers {
        volatile uint32_t RTCC;  ///< Offset: 0x00 - Hibernation RTC Counter
        volatile uint32_t RTCM0;  ///< Offset: 0x04 - Hibernation RTC Match 0
        volatile uint32_t RTCLD;  ///< Offset: 0x0C - Hibernation RTC Load
        volatile uint32_t CTL;  ///< Offset: 0x10 - Hibernation Control
        volatile uint32_t IM;  ///< Offset: 0x14 - Hibernation Interrupt Mask
        volatile uint32_t RIS;  ///< Offset: 0x18 - Hibernation Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x1C - Hibernation Masked Interrupt Status
        volatile uint32_t IC;  ///< Offset: 0x20 - Hibernation Interrupt Clear
        volatile uint32_t RTCT;  ///< Offset: 0x24 - Hibernation RTC Trim
        volatile uint32_t RTCSS;  ///< Offset: 0x28 - Hibernation RTC Sub Seconds
        volatile uint32_t IO;  ///< Offset: 0x2C - Hibernation IO Configuration
        volatile uint32_t DATA;  ///< Offset: 0x30 - Hibernation Data
        volatile uint32_t CALCTL;  ///< Offset: 0x300 - Hibernation Calendar Control
        volatile uint32_t CAL0;  ///< Offset: 0x310 - Hibernation Calendar 0
        volatile uint32_t CAL1;  ///< Offset: 0x314 - Hibernation Calendar 1
        volatile uint32_t CALLD0;  ///< Offset: 0x320 - Hibernation Calendar Load 0
        volatile uint32_t CALLD1;  ///< Offset: 0x324 - Hibernation Calendar Load
        volatile uint32_t CALM0;  ///< Offset: 0x330 - Hibernation Calendar Match 0
        volatile uint32_t CALM1;  ///< Offset: 0x334 - Hibernation Calendar Match 1
        volatile uint32_t LOCK;  ///< Offset: 0x360 - Hibernation Lock
        volatile uint32_t TPCTL;  ///< Offset: 0x400 - HIB Tamper Control
        volatile uint32_t TPSTAT;  ///< Offset: 0x404 - HIB Tamper Status
        volatile uint32_t TPIO;  ///< Offset: 0x410 - HIB Tamper I/O Control
        volatile uint32_t TPLOG0;  ///< Offset: 0x4E0 - HIB Tamper Log 0
        volatile uint32_t TPLOG1;  ///< Offset: 0x4E4 - HIB Tamper Log 1
        volatile uint32_t TPLOG2;  ///< Offset: 0x4E8 - HIB Tamper Log 2
        volatile uint32_t TPLOG3;  ///< Offset: 0x4EC - HIB Tamper Log 3
        volatile uint32_t TPLOG4;  ///< Offset: 0x4F0 - HIB Tamper Log 4
        volatile uint32_t TPLOG5;  ///< Offset: 0x4F4 - HIB Tamper Log 5
        volatile uint32_t TPLOG6;  ///< Offset: 0x4F8 - HIB Tamper Log 6
        volatile uint32_t TPLOG7;  ///< Offset: 0x4FC - HIB Tamper Log 7
        volatile uint32_t PP;  ///< Offset: 0xFC0 - Hibernation Peripheral Properties
        volatile uint32_t CC;  ///< Offset: 0xFC8 - Hibernation Clock Control
    };

    /// Peripheral instances
    inline Registers* HIB = reinterpret_cast<Registers*>(HIB_BASE);

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_CTRL_BASE = 0x400FD000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t FMA;  ///< Offset: 0x00 - Flash Memory Address
        volatile uint32_t FMD;  ///< Offset: 0x04 - Flash Memory Data
        volatile uint32_t FMC;  ///< Offset: 0x08 - Flash Memory Control
        volatile uint32_t FCRIS;  ///< Offset: 0x0C - Flash Controller Raw Interrupt Status
        volatile uint32_t FCIM;  ///< Offset: 0x10 - Flash Controller Interrupt Mask
        volatile uint32_t FCMISC;  ///< Offset: 0x14 - Flash Controller Masked Interrupt Status and Clear
        volatile uint32_t FMC2;  ///< Offset: 0x20 - Flash Memory Control 2
        volatile uint32_t FWBVAL;  ///< Offset: 0x30 - Flash Write Buffer Valid
        volatile uint32_t FLPEKEY;  ///< Offset: 0x3C - Flash Program/Erase Key
        volatile uint32_t FWBN[%s];  ///< Offset: 0x100 - Flash Write Buffer n
        volatile uint32_t PP;  ///< Offset: 0xFC0 - Flash Peripheral Properties
        volatile uint32_t SSIZE;  ///< Offset: 0xFC4 - SRAM Size
        volatile uint32_t CONF;  ///< Offset: 0xFC8 - Flash Configuration Register
        volatile uint32_t ROMSWMAP;  ///< Offset: 0xFCC - ROM Software Map
        volatile uint32_t DMASZ;  ///< Offset: 0xFD0 - Flash DMA Address Size
        volatile uint32_t DMAST;  ///< Offset: 0xFD4 - Flash DMA Starting Address
        volatile uint32_t RVP;  ///< Offset: 0x10D4 - Reset Vector Pointer
        volatile uint32_t BOOTCFG;  ///< Offset: 0x11D0 - Boot Configuration
        volatile uint32_t USERREG0;  ///< Offset: 0x11E0 - User Register 0
        volatile uint32_t USERREG1;  ///< Offset: 0x11E4 - User Register 1
        volatile uint32_t USERREG2;  ///< Offset: 0x11E8 - User Register 2
        volatile uint32_t USERREG3;  ///< Offset: 0x11EC - User Register 3
        volatile uint32_t FMPRE0;  ///< Offset: 0x1200 - Flash Memory Protection Read Enable 0
        volatile uint32_t FMPRE1;  ///< Offset: 0x1204 - Flash Memory Protection Read Enable 1
        volatile uint32_t FMPRE2;  ///< Offset: 0x1208 - Flash Memory Protection Read Enable 2
        volatile uint32_t FMPRE3;  ///< Offset: 0x120C - Flash Memory Protection Read Enable 3
        volatile uint32_t FMPRE4;  ///< Offset: 0x1210 - Flash Memory Protection Read Enable 4
        volatile uint32_t FMPRE5;  ///< Offset: 0x1214 - Flash Memory Protection Read Enable 5
        volatile uint32_t FMPRE6;  ///< Offset: 0x1218 - Flash Memory Protection Read Enable 6
        volatile uint32_t FMPRE7;  ///< Offset: 0x121C - Flash Memory Protection Read Enable 7
        volatile uint32_t FMPRE8;  ///< Offset: 0x1220 - Flash Memory Protection Read Enable 8
        volatile uint32_t FMPRE9;  ///< Offset: 0x1224 - Flash Memory Protection Read Enable 9
        volatile uint32_t FMPRE10;  ///< Offset: 0x1228 - Flash Memory Protection Read Enable 10
        volatile uint32_t FMPRE11;  ///< Offset: 0x122C - Flash Memory Protection Read Enable 11
        volatile uint32_t FMPRE12;  ///< Offset: 0x1230 - Flash Memory Protection Read Enable 12
        volatile uint32_t FMPRE13;  ///< Offset: 0x1234 - Flash Memory Protection Read Enable 13
        volatile uint32_t FMPRE14;  ///< Offset: 0x1238 - Flash Memory Protection Read Enable 14
        volatile uint32_t FMPRE15;  ///< Offset: 0x123C - Flash Memory Protection Read Enable 15
        volatile uint32_t FMPPE0;  ///< Offset: 0x1400 - Flash Memory Protection Program Enable 0
        volatile uint32_t FMPPE1;  ///< Offset: 0x1404 - Flash Memory Protection Program Enable 1
        volatile uint32_t FMPPE2;  ///< Offset: 0x1408 - Flash Memory Protection Program Enable 2
        volatile uint32_t FMPPE3;  ///< Offset: 0x140C - Flash Memory Protection Program Enable 3
        volatile uint32_t FMPPE4;  ///< Offset: 0x1410 - Flash Memory Protection Program Enable 4
        volatile uint32_t FMPPE5;  ///< Offset: 0x1414 - Flash Memory Protection Program Enable 5
        volatile uint32_t FMPPE6;  ///< Offset: 0x1418 - Flash Memory Protection Program Enable 6
        volatile uint32_t FMPPE7;  ///< Offset: 0x141C - Flash Memory Protection Program Enable 7
        volatile uint32_t FMPPE8;  ///< Offset: 0x1420 - Flash Memory Protection Program Enable 8
        volatile uint32_t FMPPE9;  ///< Offset: 0x1424 - Flash Memory Protection Program Enable 9
        volatile uint32_t FMPPE10;  ///< Offset: 0x1428 - Flash Memory Protection Program Enable 10
        volatile uint32_t FMPPE11;  ///< Offset: 0x142C - Flash Memory Protection Program Enable 11
        volatile uint32_t FMPPE12;  ///< Offset: 0x1430 - Flash Memory Protection Program Enable 12
        volatile uint32_t FMPPE13;  ///< Offset: 0x1434 - Flash Memory Protection Program Enable 13
        volatile uint32_t FMPPE14;  ///< Offset: 0x1438 - Flash Memory Protection Program Enable 14
        volatile uint32_t FMPPE15;  ///< Offset: 0x143C - Flash Memory Protection Program Enable 15
    };

    /// Peripheral instances
    inline Registers* FLASH_CTRL = reinterpret_cast<Registers*>(FLASH_CTRL_BASE);

}

// ============================================================================
// SYSCTL Peripheral
// ============================================================================

namespace sysctl {
    /// Base addresses
    constexpr uint32_t SYSCTL_BASE = 0x400FE000;

    /// SYSCTL Register structure
    struct Registers {
        volatile uint32_t DID0;  ///< Offset: 0x00 - Device Identification 0
        volatile uint32_t DID1;  ///< Offset: 0x04 - Device Identification 1
        volatile uint32_t PTBOCTL;  ///< Offset: 0x38 - Power-Temp Brown Out Control
        volatile uint32_t RIS;  ///< Offset: 0x50 - Raw Interrupt Status
        volatile uint32_t IMC;  ///< Offset: 0x54 - Interrupt Mask Control
        volatile uint32_t MISC;  ///< Offset: 0x58 - Masked Interrupt Status and Clear
        volatile uint32_t RESC;  ///< Offset: 0x5C - Reset Cause
        volatile uint32_t PWRTC;  ///< Offset: 0x60 - Power-Temperature Cause
        volatile uint32_t NMIC;  ///< Offset: 0x64 - NMI Cause Register
        volatile uint32_t MOSCCTL;  ///< Offset: 0x7C - Main Oscillator Control
        volatile uint32_t RSCLKCFG;  ///< Offset: 0xB0 - Run and Sleep Mode Configuration Register
        volatile uint32_t MEMTIM0;  ///< Offset: 0xC0 - Memory Timing Parameter Register 0 for Main Flash and EEPROM
        volatile uint32_t ALTCLKCFG;  ///< Offset: 0x138 - Alternate Clock Configuration
        volatile uint32_t DSCLKCFG;  ///< Offset: 0x144 - Deep Sleep Clock Configuration Register
        volatile uint32_t DIVSCLK;  ///< Offset: 0x148 - Divisor and Source Clock Configuration
        volatile uint32_t SYSPROP;  ///< Offset: 0x14C - System Properties
        volatile uint32_t PIOSCCAL;  ///< Offset: 0x150 - Precision Internal Oscillator Calibration
        volatile uint32_t PIOSCSTAT;  ///< Offset: 0x154 - Precision Internal Oscillator Statistics
        volatile uint32_t PLLFREQ0;  ///< Offset: 0x160 - PLL Frequency 0
        volatile uint32_t PLLFREQ1;  ///< Offset: 0x164 - PLL Frequency 1
        volatile uint32_t PLLSTAT;  ///< Offset: 0x168 - PLL Status
        volatile uint32_t SLPPWRCFG;  ///< Offset: 0x188 - Sleep Power Configuration
        volatile uint32_t DSLPPWRCFG;  ///< Offset: 0x18C - Deep-Sleep Power Configuration
        volatile uint32_t NVMSTAT;  ///< Offset: 0x1A0 - Non-Volatile Memory Information
        volatile uint32_t LDOSPCTL;  ///< Offset: 0x1B4 - LDO Sleep Power Control
        volatile uint32_t LDODPCTL;  ///< Offset: 0x1BC - LDO Deep-Sleep Power Control
        volatile uint32_t RESBEHAVCTL;  ///< Offset: 0x1D8 - Reset Behavior Control Register
        volatile uint32_t HSSR;  ///< Offset: 0x1F4 - Hardware System Service Request
        volatile uint32_t USBPDS;  ///< Offset: 0x280 - USB Power Domain Status
        volatile uint32_t USBMPC;  ///< Offset: 0x284 - USB Memory Power Control
        volatile uint32_t EMACPDS;  ///< Offset: 0x288 - Ethernet MAC Power Domain Status
        volatile uint32_t EMACMPC;  ///< Offset: 0x28C - Ethernet MAC Memory Power Control
        volatile uint32_t LCDMPC;  ///< Offset: 0x294 - LCD Memory Power Control
        volatile uint32_t PPWD;  ///< Offset: 0x300 - Watchdog Timer Peripheral Present
        volatile uint32_t PPTIMER;  ///< Offset: 0x304 - 16/32-Bit General-Purpose Timer Peripheral Present
        volatile uint32_t PPGPIO;  ///< Offset: 0x308 - General-Purpose Input/Output Peripheral Present
        volatile uint32_t PPDMA;  ///< Offset: 0x30C - Micro Direct Memory Access Peripheral Present
        volatile uint32_t PPEPI;  ///< Offset: 0x310 - EPI Peripheral Present
        volatile uint32_t PPHIB;  ///< Offset: 0x314 - Hibernation Peripheral Present
        volatile uint32_t PPUART;  ///< Offset: 0x318 - Universal Asynchronous Receiver/Transmitter Peripheral Present
        volatile uint32_t PPSSI;  ///< Offset: 0x31C - Synchronous Serial Interface Peripheral Present
        volatile uint32_t PPI2C;  ///< Offset: 0x320 - Inter-Integrated Circuit Peripheral Present
        volatile uint32_t PPUSB;  ///< Offset: 0x328 - Universal Serial Bus Peripheral Present
        volatile uint32_t PPEPHY;  ///< Offset: 0x330 - Ethernet PHY Peripheral Present
        volatile uint32_t PPCAN;  ///< Offset: 0x334 - Controller Area Network Peripheral Present
        volatile uint32_t PPADC;  ///< Offset: 0x338 - Analog-to-Digital Converter Peripheral Present
        volatile uint32_t PPACMP;  ///< Offset: 0x33C - Analog Comparator Peripheral Present
        volatile uint32_t PPPWM;  ///< Offset: 0x340 - Pulse Width Modulator Peripheral Present
        volatile uint32_t PPQEI;  ///< Offset: 0x344 - Quadrature Encoder Interface Peripheral Present
        volatile uint32_t PPEEPROM;  ///< Offset: 0x358 - EEPROM Peripheral Present
        volatile uint32_t PPCCM;  ///< Offset: 0x374 - CRC and Cryptographic Modules Peripheral Present
        volatile uint32_t PPLCD;  ///< Offset: 0x390 - LCD Peripheral Present
        volatile uint32_t PPOWIRE;  ///< Offset: 0x398 - 1-Wire Peripheral Present
        volatile uint32_t PPEMAC;  ///< Offset: 0x39C - Ethernet MAC Peripheral Present
        volatile uint32_t SRWD;  ///< Offset: 0x500 - Watchdog Timer Software Reset
        volatile uint32_t SRTIMER;  ///< Offset: 0x504 - 16/32-Bit General-Purpose Timer Software Reset
        volatile uint32_t SRGPIO;  ///< Offset: 0x508 - General-Purpose Input/Output Software Reset
        volatile uint32_t SRDMA;  ///< Offset: 0x50C - Micro Direct Memory Access Software Reset
        volatile uint32_t SREPI;  ///< Offset: 0x510 - EPI Software Reset
        volatile uint32_t SRHIB;  ///< Offset: 0x514 - Hibernation Software Reset
        volatile uint32_t SRUART;  ///< Offset: 0x518 - Universal Asynchronous Receiver/Transmitter Software Reset
        volatile uint32_t SRSSI;  ///< Offset: 0x51C - Synchronous Serial Interface Software Reset
        volatile uint32_t SRI2C;  ///< Offset: 0x520 - Inter-Integrated Circuit Software Reset
        volatile uint32_t SRUSB;  ///< Offset: 0x528 - Universal Serial Bus Software Reset
        volatile uint32_t SREPHY;  ///< Offset: 0x530 - Ethernet PHY Software Reset
        volatile uint32_t SRCAN;  ///< Offset: 0x534 - Controller Area Network Software Reset
        volatile uint32_t SRADC;  ///< Offset: 0x538 - Analog-to-Digital Converter Software Reset
        volatile uint32_t SRACMP;  ///< Offset: 0x53C - Analog Comparator Software Reset
        volatile uint32_t SRPWM;  ///< Offset: 0x540 - Pulse Width Modulator Software Reset
        volatile uint32_t SRQEI;  ///< Offset: 0x544 - Quadrature Encoder Interface Software Reset
        volatile uint32_t SREEPROM;  ///< Offset: 0x558 - EEPROM Software Reset
        volatile uint32_t SRCCM;  ///< Offset: 0x574 - CRC and Cryptographic Modules Software Reset
        volatile uint32_t SRLCD;  ///< Offset: 0x590 - LCD Controller Software Reset
        volatile uint32_t SROWIRE;  ///< Offset: 0x598 - 1-Wire Software Reset
        volatile uint32_t SREMAC;  ///< Offset: 0x59C - Ethernet MAC Software Reset
        volatile uint32_t RCGCWD;  ///< Offset: 0x600 - Watchdog Timer Run Mode Clock Gating Control
        volatile uint32_t RCGCTIMER;  ///< Offset: 0x604 - 16/32-Bit General-Purpose Timer Run Mode Clock Gating Control
        volatile uint32_t RCGCGPIO;  ///< Offset: 0x608 - General-Purpose Input/Output Run Mode Clock Gating Control
        volatile uint32_t RCGCDMA;  ///< Offset: 0x60C - Micro Direct Memory Access Run Mode Clock Gating Control
        volatile uint32_t RCGCEPI;  ///< Offset: 0x610 - EPI Run Mode Clock Gating Control
        volatile uint32_t RCGCHIB;  ///< Offset: 0x614 - Hibernation Run Mode Clock Gating Control
        volatile uint32_t RCGCUART;  ///< Offset: 0x618 - Universal Asynchronous Receiver/Transmitter Run Mode...
        volatile uint32_t RCGCSSI;  ///< Offset: 0x61C - Synchronous Serial Interface Run Mode Clock Gating Control
        volatile uint32_t RCGCI2C;  ///< Offset: 0x620 - Inter-Integrated Circuit Run Mode Clock Gating Control
        volatile uint32_t RCGCUSB;  ///< Offset: 0x628 - Universal Serial Bus Run Mode Clock Gating Control
        volatile uint32_t RCGCEPHY;  ///< Offset: 0x630 - Ethernet PHY Run Mode Clock Gating Control
        volatile uint32_t RCGCCAN;  ///< Offset: 0x634 - Controller Area Network Run Mode Clock Gating Control
        volatile uint32_t RCGCADC;  ///< Offset: 0x638 - Analog-to-Digital Converter Run Mode Clock Gating Control
        volatile uint32_t RCGCACMP;  ///< Offset: 0x63C - Analog Comparator Run Mode Clock Gating Control
        volatile uint32_t RCGCPWM;  ///< Offset: 0x640 - Pulse Width Modulator Run Mode Clock Gating Control
        volatile uint32_t RCGCQEI;  ///< Offset: 0x644 - Quadrature Encoder Interface Run Mode Clock Gating Control
        volatile uint32_t RCGCEEPROM;  ///< Offset: 0x658 - EEPROM Run Mode Clock Gating Control
        volatile uint32_t RCGCCCM;  ///< Offset: 0x674 - CRC and Cryptographic Modules Run Mode Clock Gating Control
        volatile uint32_t RCGCLCD;  ///< Offset: 0x690 - LCD Controller Run Mode Clock Gating Control
        volatile uint32_t RCGCOWIRE;  ///< Offset: 0x698 - 1-Wire Run Mode Clock Gating Control
        volatile uint32_t RCGCEMAC;  ///< Offset: 0x69C - Ethernet MAC Run Mode Clock Gating Control
        volatile uint32_t SCGCWD;  ///< Offset: 0x700 - Watchdog Timer Sleep Mode Clock Gating Control
        volatile uint32_t SCGCTIMER;  ///< Offset: 0x704 - 16/32-Bit General-Purpose Timer Sleep Mode Clock Gating Control
        volatile uint32_t SCGCGPIO;  ///< Offset: 0x708 - General-Purpose Input/Output Sleep Mode Clock Gating Control
        volatile uint32_t SCGCDMA;  ///< Offset: 0x70C - Micro Direct Memory Access Sleep Mode Clock Gating Control
        volatile uint32_t SCGCEPI;  ///< Offset: 0x710 - EPI Sleep Mode Clock Gating Control
        volatile uint32_t SCGCHIB;  ///< Offset: 0x714 - Hibernation Sleep Mode Clock Gating Control
        volatile uint32_t SCGCUART;  ///< Offset: 0x718 - Universal Asynchronous Receiver/Transmitter Sleep Mode...
        volatile uint32_t SCGCSSI;  ///< Offset: 0x71C - Synchronous Serial Interface Sleep Mode Clock Gating Control
        volatile uint32_t SCGCI2C;  ///< Offset: 0x720 - Inter-Integrated Circuit Sleep Mode Clock Gating Control
        volatile uint32_t SCGCUSB;  ///< Offset: 0x728 - Universal Serial Bus Sleep Mode Clock Gating Control
        volatile uint32_t SCGCEPHY;  ///< Offset: 0x730 - Ethernet PHY Sleep Mode Clock Gating Control
        volatile uint32_t SCGCCAN;  ///< Offset: 0x734 - Controller Area Network Sleep Mode Clock Gating Control
        volatile uint32_t SCGCADC;  ///< Offset: 0x738 - Analog-to-Digital Converter Sleep Mode Clock Gating Control
        volatile uint32_t SCGCACMP;  ///< Offset: 0x73C - Analog Comparator Sleep Mode Clock Gating Control
        volatile uint32_t SCGCPWM;  ///< Offset: 0x740 - Pulse Width Modulator Sleep Mode Clock Gating Control
        volatile uint32_t SCGCQEI;  ///< Offset: 0x744 - Quadrature Encoder Interface Sleep Mode Clock Gating Control
        volatile uint32_t SCGCEEPROM;  ///< Offset: 0x758 - EEPROM Sleep Mode Clock Gating Control
        volatile uint32_t SCGCCCM;  ///< Offset: 0x774 - CRC and Cryptographic Modules Sleep Mode Clock Gating Control
        volatile uint32_t SCGCLCD;  ///< Offset: 0x790 - LCD Controller Sleep Mode Clock Gating Control
        volatile uint32_t SCGCOWIRE;  ///< Offset: 0x798 - 1-Wire Sleep Mode Clock Gating Control
        volatile uint32_t SCGCEMAC;  ///< Offset: 0x79C - Ethernet MAC Sleep Mode Clock Gating Control
        volatile uint32_t DCGCWD;  ///< Offset: 0x800 - Watchdog Timer Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCTIMER;  ///< Offset: 0x804 - 16/32-Bit General-Purpose Timer Deep-Sleep Mode Clock...
        volatile uint32_t DCGCGPIO;  ///< Offset: 0x808 - General-Purpose Input/Output Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCDMA;  ///< Offset: 0x80C - Micro Direct Memory Access Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCEPI;  ///< Offset: 0x810 - EPI Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCHIB;  ///< Offset: 0x814 - Hibernation Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCUART;  ///< Offset: 0x818 - Universal Asynchronous Receiver/Transmitter Deep-Sleep...
        volatile uint32_t DCGCSSI;  ///< Offset: 0x81C - Synchronous Serial Interface Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCI2C;  ///< Offset: 0x820 - Inter-Integrated Circuit Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCUSB;  ///< Offset: 0x828 - Universal Serial Bus Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCEPHY;  ///< Offset: 0x830 - Ethernet PHY Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCCAN;  ///< Offset: 0x834 - Controller Area Network Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCADC;  ///< Offset: 0x838 - Analog-to-Digital Converter Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCACMP;  ///< Offset: 0x83C - Analog Comparator Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCPWM;  ///< Offset: 0x840 - Pulse Width Modulator Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCQEI;  ///< Offset: 0x844 - Quadrature Encoder Interface Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCEEPROM;  ///< Offset: 0x858 - EEPROM Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCCCM;  ///< Offset: 0x874 - CRC and Cryptographic Modules Deep-Sleep Mode Clock...
        volatile uint32_t DCGCLCD;  ///< Offset: 0x890 - LCD Controller Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCOWIRE;  ///< Offset: 0x898 - 1-Wire Deep-Sleep Mode Clock Gating Control
        volatile uint32_t DCGCEMAC;  ///< Offset: 0x89C - Ethernet MAC Deep-Sleep Mode Clock Gating Control
        volatile uint32_t PCWD;  ///< Offset: 0x900 - Watchdog Timer Power Control
        volatile uint32_t PCTIMER;  ///< Offset: 0x904 - 16/32-Bit General-Purpose Timer Power Control
        volatile uint32_t PCGPIO;  ///< Offset: 0x908 - General-Purpose Input/Output Power Control
        volatile uint32_t PCDMA;  ///< Offset: 0x90C - Micro Direct Memory Access Power Control
        volatile uint32_t PCEPI;  ///< Offset: 0x910 - External Peripheral Interface Power Control
        volatile uint32_t PCHIB;  ///< Offset: 0x914 - Hibernation Power Control
        volatile uint32_t PCUART;  ///< Offset: 0x918 - Universal Asynchronous Receiver/Transmitter Power Control
        volatile uint32_t PCSSI;  ///< Offset: 0x91C - Synchronous Serial Interface Power Control
        volatile uint32_t PCI2C;  ///< Offset: 0x920 - Inter-Integrated Circuit Power Control
        volatile uint32_t PCUSB;  ///< Offset: 0x928 - Universal Serial Bus Power Control
        volatile uint32_t PCEPHY;  ///< Offset: 0x930 - Ethernet PHY Power Control
        volatile uint32_t PCCAN;  ///< Offset: 0x934 - Controller Area Network Power Control
        volatile uint32_t PCADC;  ///< Offset: 0x938 - Analog-to-Digital Converter Power Control
        volatile uint32_t PCACMP;  ///< Offset: 0x93C - Analog Comparator Power Control
        volatile uint32_t PCPWM;  ///< Offset: 0x940 - Pulse Width Modulator Power Control
        volatile uint32_t PCQEI;  ///< Offset: 0x944 - Quadrature Encoder Interface Power Control
        volatile uint32_t PCEEPROM;  ///< Offset: 0x958 - EEPROM Power Control
        volatile uint32_t PCCCM;  ///< Offset: 0x974 - CRC and Cryptographic Modules Power Control
        volatile uint32_t PCLCD;  ///< Offset: 0x990 - LCD Controller Power Control
        volatile uint32_t PCOWIRE;  ///< Offset: 0x998 - 1-Wire Power Control
        volatile uint32_t PCEMAC;  ///< Offset: 0x99C - Ethernet MAC Power Control
        volatile uint32_t PRWD;  ///< Offset: 0xA00 - Watchdog Timer Peripheral Ready
        volatile uint32_t PRTIMER;  ///< Offset: 0xA04 - 16/32-Bit General-Purpose Timer Peripheral Ready
        volatile uint32_t PRGPIO;  ///< Offset: 0xA08 - General-Purpose Input/Output Peripheral Ready
        volatile uint32_t PRDMA;  ///< Offset: 0xA0C - Micro Direct Memory Access Peripheral Ready
        volatile uint32_t PREPI;  ///< Offset: 0xA10 - EPI Peripheral Ready
        volatile uint32_t PRHIB;  ///< Offset: 0xA14 - Hibernation Peripheral Ready
        volatile uint32_t PRUART;  ///< Offset: 0xA18 - Universal Asynchronous Receiver/Transmitter Peripheral Ready
        volatile uint32_t PRSSI;  ///< Offset: 0xA1C - Synchronous Serial Interface Peripheral Ready
        volatile uint32_t PRI2C;  ///< Offset: 0xA20 - Inter-Integrated Circuit Peripheral Ready
        volatile uint32_t PRUSB;  ///< Offset: 0xA28 - Universal Serial Bus Peripheral Ready
        volatile uint32_t PREPHY;  ///< Offset: 0xA30 - Ethernet PHY Peripheral Ready
        volatile uint32_t PRCAN;  ///< Offset: 0xA34 - Controller Area Network Peripheral Ready
        volatile uint32_t PRADC;  ///< Offset: 0xA38 - Analog-to-Digital Converter Peripheral Ready
        volatile uint32_t PRACMP;  ///< Offset: 0xA3C - Analog Comparator Peripheral Ready
        volatile uint32_t PRPWM;  ///< Offset: 0xA40 - Pulse Width Modulator Peripheral Ready
        volatile uint32_t PRQEI;  ///< Offset: 0xA44 - Quadrature Encoder Interface Peripheral Ready
        volatile uint32_t PREEPROM;  ///< Offset: 0xA58 - EEPROM Peripheral Ready
        volatile uint32_t PRCCM;  ///< Offset: 0xA74 - CRC and Cryptographic Modules Peripheral Ready
        volatile uint32_t PRLCD;  ///< Offset: 0xA90 - LCD Controller Peripheral Ready
        volatile uint32_t PROWIRE;  ///< Offset: 0xA98 - 1-Wire Peripheral Ready
        volatile uint32_t PREMAC;  ///< Offset: 0xA9C - Ethernet MAC Peripheral Ready
        volatile uint32_t UNIQUEID0;  ///< Offset: 0xF20 - Unique ID 0
        volatile uint32_t UNIQUEID1;  ///< Offset: 0xF24 - Unique ID 1
        volatile uint32_t UNIQUEID2;  ///< Offset: 0xF28 - Unique ID 2
        volatile uint32_t UNIQUEID3;  ///< Offset: 0xF2C - Unique ID 3
    };

    /// Peripheral instances
    inline Registers* SYSCTL = reinterpret_cast<Registers*>(SYSCTL_BASE);

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t UDMA_BASE = 0x400FF000;
    constexpr uint32_t SHAMD5_DMA_BASE = 0x44030010;
    constexpr uint32_t AES_DMA_BASE = 0x44030020;
    constexpr uint32_t DES_DMA_BASE = 0x44030030;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t STAT;  ///< Offset: 0x00 - DMA Status
        volatile uint32_t CFG;  ///< Offset: 0x04 - DMA Configuration
        volatile uint32_t CTLBASE;  ///< Offset: 0x08 - DMA Channel Control Base Pointer
        volatile uint32_t ALTBASE;  ///< Offset: 0x0C - DMA Alternate Channel Control Base Pointer
        volatile uint32_t WAITSTAT;  ///< Offset: 0x10 - DMA Channel Wait-on-Request Status
        volatile uint32_t SWREQ;  ///< Offset: 0x14 - DMA Channel Software Request
        volatile uint32_t USEBURSTSET;  ///< Offset: 0x18 - DMA Channel Useburst Set
        volatile uint32_t USEBURSTCLR;  ///< Offset: 0x1C - DMA Channel Useburst Clear
        volatile uint32_t REQMASKSET;  ///< Offset: 0x20 - DMA Channel Request Mask Set
        volatile uint32_t REQMASKCLR;  ///< Offset: 0x24 - DMA Channel Request Mask Clear
        volatile uint32_t ENASET;  ///< Offset: 0x28 - DMA Channel Enable Set
        volatile uint32_t ENACLR;  ///< Offset: 0x2C - DMA Channel Enable Clear
        volatile uint32_t ALTSET;  ///< Offset: 0x30 - DMA Channel Primary Alternate Set
        volatile uint32_t ALTCLR;  ///< Offset: 0x34 - DMA Channel Primary Alternate Clear
        volatile uint32_t PRIOSET;  ///< Offset: 0x38 - DMA Channel Priority Set
        volatile uint32_t PRIOCLR;  ///< Offset: 0x3C - DMA Channel Priority Clear
        volatile uint32_t ERRCLR;  ///< Offset: 0x4C - DMA Bus Error Clear
        volatile uint32_t CHMAP0;  ///< Offset: 0x510 - DMA Channel Map Select 0
        volatile uint32_t CHMAP1;  ///< Offset: 0x514 - DMA Channel Map Select 1
        volatile uint32_t CHMAP2;  ///< Offset: 0x518 - DMA Channel Map Select 2
        volatile uint32_t CHMAP3;  ///< Offset: 0x51C - DMA Channel Map Select 3
    };

    /// Peripheral instances
    inline Registers* UDMA = reinterpret_cast<Registers*>(UDMA_BASE);
    inline Registers* SHAMD5_DMA = reinterpret_cast<Registers*>(SHAMD5_DMA_BASE);
    inline Registers* AES_DMA = reinterpret_cast<Registers*>(AES_DMA_BASE);
    inline Registers* DES_DMA = reinterpret_cast<Registers*>(DES_DMA_BASE);

}

// ============================================================================
// CCM0 Peripheral
// ============================================================================

namespace ccm0 {
    /// Base addresses
    constexpr uint32_t CCM0_BASE = 0x44030204;

    /// CCM0 Register structure
    struct Registers {
        volatile uint32_t CCMCGREQ;  ///< Offset: 0x00 - Cryptographic Modules Clock Gating Request
    };

    /// Peripheral instances
    inline Registers* CCM0 = reinterpret_cast<Registers*>(CCM0_BASE);

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x44030400;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t CTRL;  ///< Offset: 0x00 - CRC Control
        volatile uint32_t CRCSEED;  ///< Offset: 0x10 - CRC SEED/Context
        volatile uint32_t CRCDIN;  ///< Offset: 0x14 - CRC Data Input
        volatile uint32_t CRCRSLTPP;  ///< Offset: 0x18 - CRC Post Processing Result
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

}

// ============================================================================
// CRYPTO Peripheral
// ============================================================================

namespace crypto {
    /// Base addresses
    constexpr uint32_t SHAMD5_BASE = 0x44034000;
    constexpr uint32_t AES_BASE = 0x44036000;

    /// CRYPTO Register structure
    struct Registers {
        volatile uint32_t ODIGEST_A;  ///< Offset: 0x00 - SHA Outer Digest A
        volatile uint32_t ODIGEST_B;  ///< Offset: 0x04 - SHA Outer Digest B
        volatile uint32_t ODIGEST_C;  ///< Offset: 0x08 - SHA Outer Digest C
        volatile uint32_t ODIGEST_D;  ///< Offset: 0x0C - SHA Outer Digest D
        volatile uint32_t ODIGEST_E;  ///< Offset: 0x10 - SHA Outer Digest E
        volatile uint32_t ODIGEST_F;  ///< Offset: 0x14 - SHA Outer Digest F
        volatile uint32_t ODIGEST_G;  ///< Offset: 0x18 - SHA Outer Digest G
        volatile uint32_t ODIGEST_H;  ///< Offset: 0x1C - SHA Outer Digest H
        volatile uint32_t IDIGEST_A;  ///< Offset: 0x20 - SHA Inner Digest A
        volatile uint32_t IDIGEST_B;  ///< Offset: 0x24 - SHA Inner Digest B
        volatile uint32_t IDIGEST_C;  ///< Offset: 0x28 - SHA Inner Digest C
        volatile uint32_t IDIGEST_D;  ///< Offset: 0x2C - SHA Inner Digest D
        volatile uint32_t IDIGEST_E;  ///< Offset: 0x30 - SHA Inner Digest E
        volatile uint32_t IDIGEST_F;  ///< Offset: 0x34 - SHA Inner Digest F
        volatile uint32_t IDIGEST_G;  ///< Offset: 0x38 - SHA Inner Digest G
        volatile uint32_t IDIGEST_H;  ///< Offset: 0x3C - SHA Inner Digest H
        volatile uint32_t DIGEST_COUNT;  ///< Offset: 0x40 - SHA Digest Count
        volatile uint32_t MODE;  ///< Offset: 0x44 - SHA Mode
        volatile uint32_t LENGTH;  ///< Offset: 0x48 - SHA Length
        volatile uint32_t DATA_0_IN;  ///< Offset: 0x80 - SHA Data 0 Input
        volatile uint32_t DATA_1_IN;  ///< Offset: 0x84 - SHA Data 1 Input
        volatile uint32_t DATA_2_IN;  ///< Offset: 0x88 - SHA Data 2 Input
        volatile uint32_t DATA_3_IN;  ///< Offset: 0x8C - SHA Data 3 Input
        volatile uint32_t DATA_4_IN;  ///< Offset: 0x90 - SHA Data 4 Input
        volatile uint32_t DATA_5_IN;  ///< Offset: 0x94 - SHA Data 5 Input
        volatile uint32_t DATA_6_IN;  ///< Offset: 0x98 - SHA Data 6 Input
        volatile uint32_t DATA_7_IN;  ///< Offset: 0x9C - SHA Data 7 Input
        volatile uint32_t DATA_8_IN;  ///< Offset: 0xA0 - SHA Data 8 Input
        volatile uint32_t DATA_9_IN;  ///< Offset: 0xA4 - SHA Data 9 Input
        volatile uint32_t DATA_10_IN;  ///< Offset: 0xA8 - SHA Data 10 Input
        volatile uint32_t DATA_11_IN;  ///< Offset: 0xAC - SHA Data 11 Input
        volatile uint32_t DATA_12_IN;  ///< Offset: 0xB0 - SHA Data 12 Input
        volatile uint32_t DATA_13_IN;  ///< Offset: 0xB4 - SHA Data 13 Input
        volatile uint32_t DATA_14_IN;  ///< Offset: 0xB8 - SHA Data 14 Input
        volatile uint32_t DATA_15_IN;  ///< Offset: 0xBC - SHA Data 15 Input
        volatile uint32_t REVISION;  ///< Offset: 0x100 - SHA Revision
        volatile uint32_t SYSCONFIG;  ///< Offset: 0x110 - SHA System Configuration
        volatile uint32_t SYSSTATUS;  ///< Offset: 0x114 - SHA System Status
        volatile uint32_t IRQSTATUS;  ///< Offset: 0x118 - SHA Interrupt Status
        volatile uint32_t IRQENABLE;  ///< Offset: 0x11C - SHA Interrupt Enable
    };

    /// Peripheral instances
    inline Registers* SHAMD5 = reinterpret_cast<Registers*>(SHAMD5_BASE);
    inline Registers* AES = reinterpret_cast<Registers*>(AES_BASE);

}

// ============================================================================
// DES Peripheral
// ============================================================================

namespace des {
    /// Base addresses
    constexpr uint32_t DES_BASE = 0x44038000;

    /// DES Register structure
    struct Registers {
        volatile uint32_t KEY3_L;  ///< Offset: 0x00 - DES Key 3 LSW for 192-Bit Key
        volatile uint32_t KEY3_H;  ///< Offset: 0x04 - DES Key 3 MSW for 192-Bit Key
        volatile uint32_t KEY2_L;  ///< Offset: 0x08 - DES Key 2 LSW for 128-Bit Key
        volatile uint32_t KEY2_H;  ///< Offset: 0x0C - DES Key 2 MSW for 128-Bit Key
        volatile uint32_t KEY1_L;  ///< Offset: 0x10 - DES Key 1 LSW for 64-Bit Key
        volatile uint32_t KEY1_H;  ///< Offset: 0x14 - DES Key 1 MSW for 64-Bit Key
        volatile uint32_t IV_L;  ///< Offset: 0x18 - DES Initialization Vector
        volatile uint32_t IV_H;  ///< Offset: 0x1C - DES Initialization Vector
        volatile uint32_t CTRL;  ///< Offset: 0x20 - DES Control
        volatile uint32_t LENGTH;  ///< Offset: 0x24 - DES Cryptographic Data Length
        volatile uint32_t DATA_L;  ///< Offset: 0x28 - DES LSW Data RW
        volatile uint32_t DATA_H;  ///< Offset: 0x2C - DES MSW Data RW
        volatile uint32_t REVISION;  ///< Offset: 0x30 - DES Revision Number
        volatile uint32_t SYSCONFIG;  ///< Offset: 0x34 - DES System Configuration
        volatile uint32_t SYSSTATUS;  ///< Offset: 0x38 - DES System Status
        volatile uint32_t IRQSTATUS;  ///< Offset: 0x3C - DES Interrupt Status
        volatile uint32_t IRQENABLE;  ///< Offset: 0x40 - DES Interrupt Enable
        volatile uint32_t DIRTYBITS;  ///< Offset: 0x44 - DES Dirty Bits
    };

    /// Peripheral instances
    inline Registers* DES = reinterpret_cast<Registers*>(DES_BASE);

}

// ============================================================================
// LCD0 Peripheral
// ============================================================================

namespace lcd0 {
    /// Base addresses
    constexpr uint32_t LCD0_BASE = 0x44050000;

    /// LCD0 Register structure
    struct Registers {
        volatile uint32_t PID;  ///< Offset: 0x00 - LCD PID Register Format
        volatile uint32_t CTL;  ///< Offset: 0x04 - LCD Control
        volatile uint32_t LIDDCTL;  ///< Offset: 0x0C - LCD LIDD Control
        volatile uint32_t LIDDCS0CFG;  ///< Offset: 0x10 - LCD LIDD CS0 Configuration
        volatile uint32_t LIDDCS0ADDR;  ///< Offset: 0x14 - LIDD CS0 Read/Write Address
        volatile uint32_t LIDDCS0DATA;  ///< Offset: 0x18 - LIDD CS0 Data Read/Write Initiation
        volatile uint32_t LIDDCS1CFG;  ///< Offset: 0x1C - LIDD CS1 Configuration
        volatile uint32_t LIDDCS1ADDR;  ///< Offset: 0x20 - LIDD CS1 Address Read/Write Initiation
        volatile uint32_t LIDDCS1DATA;  ///< Offset: 0x24 - LIDD CS1 Data Read/Write Initiation
        volatile uint32_t RASTRCTL;  ///< Offset: 0x28 - LCD Raster Control
        volatile uint32_t RASTRTIM0;  ///< Offset: 0x2C - LCD Raster Timing 0
        volatile uint32_t RASTRTIM1;  ///< Offset: 0x30 - LCD Raster Timing 1
        volatile uint32_t RASTRTIM2;  ///< Offset: 0x34 - LCD Raster Timing 2
        volatile uint32_t RASTRSUBP1;  ///< Offset: 0x38 - LCD Raster Subpanel Display 1
        volatile uint32_t RASTRSUBP2;  ///< Offset: 0x3C - LCD Raster Subpanel Display 2
        volatile uint32_t DMACTL;  ///< Offset: 0x40 - LCD DMA Control
        volatile uint32_t DMABAFB0;  ///< Offset: 0x44 - LCD DMA Frame Buffer 0 Base Address
        volatile uint32_t DMACAFB0;  ///< Offset: 0x48 - LCD DMA Frame Buffer 0 Ceiling Address
        volatile uint32_t DMABAFB1;  ///< Offset: 0x4C - LCD DMA Frame Buffer 1 Base Address
        volatile uint32_t DMACAFB1;  ///< Offset: 0x50 - LCD DMA Frame Buffer 1 Ceiling Address
        volatile uint32_t SYSCFG;  ///< Offset: 0x54 - LCD System Configuration Register
        volatile uint32_t RISSET;  ///< Offset: 0x58 - LCD Interrupt Raw Status and Set Register
        volatile uint32_t MISCLR;  ///< Offset: 0x5C - LCD Interrupt Status and Clear
        volatile uint32_t IM;  ///< Offset: 0x60 - LCD Interrupt Mask
        volatile uint32_t IENC;  ///< Offset: 0x64 - LCD Interrupt Enable Clear
        volatile uint32_t CLKEN;  ///< Offset: 0x6C - LCD Clock Enable
        volatile uint32_t CLKRESET;  ///< Offset: 0x70 - LCD Clock Resets
    };

    /// Peripheral instances
    inline Registers* LCD0 = reinterpret_cast<Registers*>(LCD0_BASE);

}


} // namespace alloy::generated::msp432e411y

#endif // ALLOY_GENERATED_MSP432E411Y_PERIPHERALS_HPP