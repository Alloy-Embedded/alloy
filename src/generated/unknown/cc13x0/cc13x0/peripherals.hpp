/// Auto-generated code for CC13x0
/// Generated by Alloy Code Generator
/// Source: texasinstruments_cc13x0.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:22:09
#ifndef ALLOY_GENERATED_CC13X0_PERIPHERALS_HPP
#define ALLOY_GENERATED_CC13X0_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::cc13x0 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// AON Peripheral
// ============================================================================

namespace aon {
    /// Base addresses
    constexpr uint32_t AON_BATMON_BASE = 0x40095000;
    constexpr uint32_t AON_EVENT_BASE = 0x40093000;
    constexpr uint32_t AON_IOC_BASE = 0x40094000;
    constexpr uint32_t AON_SYSCTL_BASE = 0x40090000;
    constexpr uint32_t AON_WUC_BASE = 0x40091000;

    /// AON Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - Internal. Only to be used through TI provided API.
        volatile uint32_t MEASCFG;  ///< Offset: 0x04 - Internal. Only to be used through TI provided API.
        volatile uint32_t TEMPP0;  ///< Offset: 0x0C - Internal. Only to be used through TI provided API.
        volatile uint32_t TEMPP1;  ///< Offset: 0x10 - Internal. Only to be used through TI provided API.
        volatile uint32_t TEMPP2;  ///< Offset: 0x14 - Internal. Only to be used through TI provided API.
        volatile uint32_t BATMONP0;  ///< Offset: 0x18 - Internal. Only to be used through TI provided API.
        volatile uint32_t BATMONP1;  ///< Offset: 0x1C - Internal. Only to be used through TI provided API.
        volatile uint32_t IOSTRP0;  ///< Offset: 0x20 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASHPUMPP0;  ///< Offset: 0x24 - Internal. Only to be used through TI provided API.
        volatile uint32_t BAT;  ///< Offset: 0x28 - Last Measured Battery Voltage This register may be read...
        volatile uint32_t BATUPD;  ///< Offset: 0x2C - Battery Update Indicates BAT Updates
        volatile uint32_t TEMP;  ///< Offset: 0x30 - Temperature Last Measured Temperature in Degrees Celsius...
        volatile uint32_t TEMPUPD;  ///< Offset: 0x34 - Temperature Update Indicates TEMP Updates
    };

    /// Peripheral instances
    inline Registers* AON_BATMON = reinterpret_cast<Registers*>(AON_BATMON_BASE);
    inline Registers* AON_EVENT = reinterpret_cast<Registers*>(AON_EVENT_BASE);
    inline Registers* AON_IOC = reinterpret_cast<Registers*>(AON_IOC_BASE);
    inline Registers* AON_SYSCTL = reinterpret_cast<Registers*>(AON_SYSCTL_BASE);
    inline Registers* AON_WUC = reinterpret_cast<Registers*>(AON_WUC_BASE);

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t AON_RTC_BASE = 0x40092000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - Control This register contains various bitfields for...
        volatile uint32_t EVFLAGS;  ///< Offset: 0x04 - Event Flags, RTC Status This register contains event...
        volatile uint32_t SEC;  ///< Offset: 0x08 - Second Counter Value, Integer Part
        volatile uint32_t SUBSEC;  ///< Offset: 0x0C - Second Counter Value, Fractional Part
        volatile uint32_t SUBSECINC;  ///< Offset: 0x10 - Subseconds Increment Value added to SUBSEC.VALUE on...
        volatile uint32_t CHCTL;  ///< Offset: 0x14 - Channel Configuration
        volatile uint32_t CH0CMP;  ///< Offset: 0x18 - Channel 0 Compare Value
        volatile uint32_t CH1CMP;  ///< Offset: 0x1C - Channel 1 Compare Value
        volatile uint32_t CH2CMP;  ///< Offset: 0x20 - Channel 2 Compare Value
        volatile uint32_t CH2CMPINC;  ///< Offset: 0x24 - Channel 2 Compare Value Auto-increment This register is...
        volatile uint32_t CH1CAPT;  ///< Offset: 0x28 - Channel 1 Capture Value If CHCTL.CH1_EN = 1and...
        volatile uint32_t SYNC;  ///< Offset: 0x2C - AON Synchronization This register is used for...
    };

    /// Peripheral instances
    inline Registers* AON_RTC = reinterpret_cast<Registers*>(AON_RTC_BASE);

}

// ============================================================================
// AUX Peripheral
// ============================================================================

namespace aux {
    /// Base addresses
    constexpr uint32_t AUX_ADI4_BASE = 0x400CB000;
    constexpr uint32_t AUX_AIODIO0_BASE = 0x400C1000;
    constexpr uint32_t AUX_AIODIO1_BASE = 0x400C2000;
    constexpr uint32_t AUX_ANAIF_BASE = 0x400C9000;
    constexpr uint32_t AUX_DDI0_OSC_BASE = 0x400CA000;
    constexpr uint32_t AUX_EVCTL_BASE = 0x400C5000;
    constexpr uint32_t AUX_SCE_BASE = 0x400E1000;
    constexpr uint32_t AUX_SMPH_BASE = 0x400C8000;
    constexpr uint32_t AUX_TDCIF_BASE = 0x400C4000;
    constexpr uint32_t AUX_WUC_BASE = 0x400C6000;

    /// AUX Register structure
    struct Registers {
        volatile uint32_t MUX0;  ///< Offset: 0x00 - Internal. Only to be used through TI provided API.
        volatile uint32_t MUX1;  ///< Offset: 0x01 - Internal. Only to be used through TI provided API.
        volatile uint32_t MUX2;  ///< Offset: 0x02 - Internal. Only to be used through TI provided API.
        volatile uint32_t MUX3;  ///< Offset: 0x03 - Internal. Only to be used through TI provided API.
        volatile uint32_t ISRC;  ///< Offset: 0x04 - Current Source Strength and trim control for current source
        volatile uint32_t COMP;  ///< Offset: 0x05 - Comparator Control COMPA and COMPB comparators
        volatile uint32_t MUX4;  ///< Offset: 0x07 - Internal. Only to be used through TI provided API.
        volatile uint32_t ADC0;  ///< Offset: 0x08 - ADC Control 0
        volatile uint32_t ADC1;  ///< Offset: 0x09 - ADC Control 1
        volatile uint32_t ADCREF0;  ///< Offset: 0x0A - ADC Reference 0 Control reference used by the ADC
        volatile uint32_t ADCREF1;  ///< Offset: 0x0B - ADC Reference 1 Control reference used by the ADC
    };

    /// Peripheral instances
    inline Registers* AUX_ADI4 = reinterpret_cast<Registers*>(AUX_ADI4_BASE);
    inline Registers* AUX_AIODIO0 = reinterpret_cast<Registers*>(AUX_AIODIO0_BASE);
    inline Registers* AUX_AIODIO1 = reinterpret_cast<Registers*>(AUX_AIODIO1_BASE);
    inline Registers* AUX_ANAIF = reinterpret_cast<Registers*>(AUX_ANAIF_BASE);
    inline Registers* AUX_DDI0_OSC = reinterpret_cast<Registers*>(AUX_DDI0_OSC_BASE);
    inline Registers* AUX_EVCTL = reinterpret_cast<Registers*>(AUX_EVCTL_BASE);
    inline Registers* AUX_SCE = reinterpret_cast<Registers*>(AUX_SCE_BASE);
    inline Registers* AUX_SMPH = reinterpret_cast<Registers*>(AUX_SMPH_BASE);
    inline Registers* AUX_TDCIF = reinterpret_cast<Registers*>(AUX_TDCIF_BASE);
    inline Registers* AUX_WUC = reinterpret_cast<Registers*>(AUX_WUC_BASE);

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t AUX_TIMER_BASE = 0x400C7000;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t T0CFG;  ///< Offset: 0x00 - Timer 0 Configuration
        volatile uint32_t T1CFG;  ///< Offset: 0x04 - Timer 1 Configuration
        volatile uint32_t T0CTL;  ///< Offset: 0x08 - Timer 0 Control Run control/status for timer 0
        volatile uint32_t T0TARGET;  ///< Offset: 0x0C - Timer 0 Target Target counter value for timer 0
        volatile uint32_t T1TARGET;  ///< Offset: 0x10 - Timer 1 Target Target Counter Value Timer 1
        volatile uint32_t T1CTL;  ///< Offset: 0x14 - Timer 1 Control Run Control/Status For Timer 1
    };

    /// Peripheral instances
    inline Registers* AUX_TIMER = reinterpret_cast<Registers*>(AUX_TIMER_BASE);

}

// ============================================================================
// CCFG Peripheral
// ============================================================================

namespace ccfg {
    /// Base addresses
    constexpr uint32_t CCFG_BASE = 0x50003000;

    /// CCFG Register structure
    struct Registers {
        volatile uint32_t EXT_LF_CLK;  ///< Offset: 0xFA8 - Extern LF clock configuration
        volatile uint32_t MODE_CONF_1;  ///< Offset: 0xFAC - Mode Configuration 1
        volatile uint32_t SIZE_AND_DIS_FLAGS;  ///< Offset: 0xFB0 - CCFG Size and Disable Flags
        volatile uint32_t MODE_CONF;  ///< Offset: 0xFB4 - Mode Configuration 0
        volatile uint32_t VOLT_LOAD_0;  ///< Offset: 0xFB8 - Voltage Load 0 Enabled by MODE_CONF.VDDR_EXT_LOAD.
        volatile uint32_t VOLT_LOAD_1;  ///< Offset: 0xFBC - Voltage Load 1 Enabled by MODE_CONF.VDDR_EXT_LOAD.
        volatile uint32_t RTC_OFFSET;  ///< Offset: 0xFC0 - Real Time Clock Offset Enabled by MODE_CONF.RTC_COMP.
        volatile uint32_t FREQ_OFFSET;  ///< Offset: 0xFC4 - Frequency Offset
        volatile uint32_t IEEE_MAC_0;  ///< Offset: 0xFC8 - IEEE MAC Address 0
        volatile uint32_t IEEE_MAC_1;  ///< Offset: 0xFCC - IEEE MAC Address 1
        volatile uint32_t IEEE_BLE_0;  ///< Offset: 0xFD0 - IEEE BLE Address 0
        volatile uint32_t IEEE_BLE_1;  ///< Offset: 0xFD4 - IEEE BLE Address 1
        volatile uint32_t BL_CONFIG;  ///< Offset: 0xFD8 - Bootloader Configuration Configures the functionality of...
        volatile uint32_t ERASE_CONF;  ///< Offset: 0xFDC - Erase Configuration
        volatile uint32_t CCFG_TI_OPTIONS;  ///< Offset: 0xFE0 - TI Options
        volatile uint32_t CCFG_TAP_DAP_0;  ///< Offset: 0xFE4 - Test Access Points Enable 0
        volatile uint32_t CCFG_TAP_DAP_1;  ///< Offset: 0xFE8 - Test Access Points Enable 1
        volatile uint32_t IMAGE_VALID_CONF;  ///< Offset: 0xFEC - Image Valid
        volatile uint32_t CCFG_PROT_31_0;  ///< Offset: 0xFF0 - Protect Sectors 0-31 Each bit write protects one 4KB...
        volatile uint32_t CCFG_PROT_63_32;  ///< Offset: 0xFF4 - Protect Sectors 32-63 Each bit write protects one 4KB...
        volatile uint32_t CCFG_PROT_95_64;  ///< Offset: 0xFF8 - Protect Sectors 64-95 Each bit write protects one flash...
        volatile uint32_t CCFG_PROT_127_96;  ///< Offset: 0xFFC - Protect Sectors 96-127 Each bit write protects one flash...
    };

    /// Peripheral instances
    inline Registers* CCFG = reinterpret_cast<Registers*>(CCFG_BASE);

}

// ============================================================================
// CPU Peripheral
// ============================================================================

namespace cpu {
    /// Base addresses
    constexpr uint32_t CPU_TIPROP_BASE = 0xE00FE000;

    /// CPU Register structure
    struct Registers {
        volatile uint32_t TRACECLKMUX;  ///< Offset: 0xFF8 - Internal. Only to be used through TI provided API.
        volatile uint32_t DYN_CG;  ///< Offset: 0xFFC - Internal. Only to be used through TI provided API.
    };

    /// Peripheral instances
    inline Registers* CPU_TIPROP = reinterpret_cast<Registers*>(CPU_TIPROP_BASE);

}

// ============================================================================
// CRYPTO Peripheral
// ============================================================================

namespace crypto {
    /// Base addresses
    constexpr uint32_t CRYPTO_BASE = 0x40024000;

    /// CRYPTO Register structure
    struct Registers {
        volatile uint32_t DMACH0CTL;  ///< Offset: 0x00 - DMA Channel 0 Control
        volatile uint32_t DMACH0EXTADDR;  ///< Offset: 0x04 - DMA Channel 0 External Address
        volatile uint32_t DMACH0LEN;  ///< Offset: 0x0C - DMA Channel 0 Length
        volatile uint32_t DMASTAT;  ///< Offset: 0x18 - DMA Controller Status
        volatile uint32_t DMASWRESET;  ///< Offset: 0x1C - DMA Controller Software Reset
        volatile uint32_t DMACH1CTL;  ///< Offset: 0x20 - DMA Channel 1 Control
        volatile uint32_t DMACH1EXTADDR;  ///< Offset: 0x24 - DMA Channel 1 External Address
        volatile uint32_t DMACH1LEN;  ///< Offset: 0x2C - DMA Channel 1 Length
        volatile uint32_t DMABUSCFG;  ///< Offset: 0x78 - DMA Controller Master Configuration
        volatile uint32_t DMAPORTERR;  ///< Offset: 0x7C - DMA Controller Port Error
        volatile uint32_t DMAHWVER;  ///< Offset: 0xFC - DMA Controller Version
        volatile uint32_t KEYWRITEAREA;  ///< Offset: 0x400 - Key Write Area
        volatile uint32_t KEYWRITTENAREA;  ///< Offset: 0x404 - Key Written Area Status This register shows which areas...
        volatile uint32_t KEYSIZE;  ///< Offset: 0x408 - Key Size This register defines the size of the keys that...
        volatile uint32_t KEYREADAREA;  ///< Offset: 0x40C - Key Read Area
        volatile uint32_t AESKEY2%s;  ///< Offset: 0x500 - Clear AES_KEY2/GHASH Key
        volatile uint32_t AESKEY3%s;  ///< Offset: 0x510 - Clear AES_KEY3
        volatile uint32_t AESIV%s;  ///< Offset: 0x540 - AES Initialization Vector
        volatile uint32_t AESCTL;  ///< Offset: 0x550 - AES Input/Output Buffer Control
        volatile uint32_t AESDATALEN0;  ///< Offset: 0x554 - Crypto Data Length LSW
        volatile uint32_t AESDATALEN1;  ///< Offset: 0x558 - Crypto Data Length MSW
        volatile uint32_t AESAUTHLEN;  ///< Offset: 0x55C - AES Authentication Length
        volatile uint32_t AESDATAOUT0;  ///< Offset: 0x560 - Data Input/Output
        volatile uint32_t AESDATAIN0;  ///< Offset: 0x560 - AES Data Input/Output 0
        volatile uint32_t AESDATAOUT1;  ///< Offset: 0x564 - AES Data Input/Output 3
        volatile uint32_t AESDATAIN1;  ///< Offset: 0x564 - AES Data Input/Output 1
        volatile uint32_t AESDATAOUT2;  ///< Offset: 0x568 - AES Data Input/Output 2
        volatile uint32_t AESDATAIN2;  ///< Offset: 0x568 - AES Data Input/Output 2
        volatile uint32_t AESDATAOUT3;  ///< Offset: 0x56C - AES Data Input/Output 3
        volatile uint32_t AESDATAIN3;  ///< Offset: 0x56C - Data Input/Output
        volatile uint32_t AESTAGOUT%s;  ///< Offset: 0x570 - AES Tag Output
        volatile uint32_t ALGSEL;  ///< Offset: 0x700 - Master Algorithm Select This register configures the...
        volatile uint32_t DMAPROTCTL;  ///< Offset: 0x704 - Master Protection Control
        volatile uint32_t SWRESET;  ///< Offset: 0x740 - Software Reset
        volatile uint32_t IRQTYPE;  ///< Offset: 0x780 - Interrupt Configuration
        volatile uint32_t IRQEN;  ///< Offset: 0x784 - Interrupt Enable
        volatile uint32_t IRQCLR;  ///< Offset: 0x788 - Interrupt Clear
        volatile uint32_t IRQSET;  ///< Offset: 0x78C - Interrupt Set
        volatile uint32_t IRQSTAT;  ///< Offset: 0x790 - Interrupt Status
        volatile uint32_t HWVER;  ///< Offset: 0x7FC - CTRL Module Version
    };

    /// Peripheral instances
    inline Registers* CRYPTO = reinterpret_cast<Registers*>(CRYPTO_BASE);

}

// ============================================================================
// EVENT Peripheral
// ============================================================================

namespace event {
    /// Base addresses
    constexpr uint32_t EVENT_BASE = 0x40083000;

    /// EVENT Register structure
    struct Registers {
        volatile uint32_t CPUIRQSEL0;  ///< Offset: 0x00 - Output Selection for CPU Interrupt 0
        volatile uint32_t CPUIRQSEL1;  ///< Offset: 0x04 - Output Selection for CPU Interrupt 1
        volatile uint32_t CPUIRQSEL2;  ///< Offset: 0x08 - Output Selection for CPU Interrupt 2
        volatile uint32_t CPUIRQSEL3;  ///< Offset: 0x0C - Output Selection for CPU Interrupt 3
        volatile uint32_t CPUIRQSEL4;  ///< Offset: 0x10 - Output Selection for CPU Interrupt 4
        volatile uint32_t CPUIRQSEL5;  ///< Offset: 0x14 - Output Selection for CPU Interrupt 5
        volatile uint32_t CPUIRQSEL6;  ///< Offset: 0x18 - Output Selection for CPU Interrupt 6
        volatile uint32_t CPUIRQSEL7;  ///< Offset: 0x1C - Output Selection for CPU Interrupt 7
        volatile uint32_t CPUIRQSEL8;  ///< Offset: 0x20 - Output Selection for CPU Interrupt 8
        volatile uint32_t CPUIRQSEL9;  ///< Offset: 0x24 - Output Selection for CPU Interrupt 9
        volatile uint32_t CPUIRQSEL10;  ///< Offset: 0x28 - Output Selection for CPU Interrupt 10
        volatile uint32_t CPUIRQSEL11;  ///< Offset: 0x2C - Output Selection for CPU Interrupt 11
        volatile uint32_t CPUIRQSEL12;  ///< Offset: 0x30 - Output Selection for CPU Interrupt 12
        volatile uint32_t CPUIRQSEL13;  ///< Offset: 0x34 - Output Selection for CPU Interrupt 13
        volatile uint32_t CPUIRQSEL14;  ///< Offset: 0x38 - Output Selection for CPU Interrupt 14
        volatile uint32_t CPUIRQSEL15;  ///< Offset: 0x3C - Output Selection for CPU Interrupt 15
        volatile uint32_t CPUIRQSEL16;  ///< Offset: 0x40 - Output Selection for CPU Interrupt 16
        volatile uint32_t CPUIRQSEL17;  ///< Offset: 0x44 - Output Selection for CPU Interrupt 17
        volatile uint32_t CPUIRQSEL18;  ///< Offset: 0x48 - Output Selection for CPU Interrupt 18
        volatile uint32_t CPUIRQSEL19;  ///< Offset: 0x4C - Output Selection for CPU Interrupt 19
        volatile uint32_t CPUIRQSEL20;  ///< Offset: 0x50 - Output Selection for CPU Interrupt 20
        volatile uint32_t CPUIRQSEL21;  ///< Offset: 0x54 - Output Selection for CPU Interrupt 21
        volatile uint32_t CPUIRQSEL22;  ///< Offset: 0x58 - Output Selection for CPU Interrupt 22
        volatile uint32_t CPUIRQSEL23;  ///< Offset: 0x5C - Output Selection for CPU Interrupt 23
        volatile uint32_t CPUIRQSEL24;  ///< Offset: 0x60 - Output Selection for CPU Interrupt 24
        volatile uint32_t CPUIRQSEL25;  ///< Offset: 0x64 - Output Selection for CPU Interrupt 25
        volatile uint32_t CPUIRQSEL26;  ///< Offset: 0x68 - Output Selection for CPU Interrupt 26
        volatile uint32_t CPUIRQSEL27;  ///< Offset: 0x6C - Output Selection for CPU Interrupt 27
        volatile uint32_t CPUIRQSEL28;  ///< Offset: 0x70 - Output Selection for CPU Interrupt 28
        volatile uint32_t CPUIRQSEL29;  ///< Offset: 0x74 - Output Selection for CPU Interrupt 29
        volatile uint32_t CPUIRQSEL30;  ///< Offset: 0x78 - Output Selection for CPU Interrupt 30
        volatile uint32_t CPUIRQSEL31;  ///< Offset: 0x7C - Output Selection for CPU Interrupt 31
        volatile uint32_t CPUIRQSEL32;  ///< Offset: 0x80 - Output Selection for CPU Interrupt 32
        volatile uint32_t CPUIRQSEL33;  ///< Offset: 0x84 - Output Selection for CPU Interrupt 33
        volatile uint32_t RFCSEL0;  ///< Offset: 0x100 - Output Selection for RFC Event 0
        volatile uint32_t RFCSEL1;  ///< Offset: 0x104 - Output Selection for RFC Event 1
        volatile uint32_t RFCSEL2;  ///< Offset: 0x108 - Output Selection for RFC Event 2
        volatile uint32_t RFCSEL3;  ///< Offset: 0x10C - Output Selection for RFC Event 3
        volatile uint32_t RFCSEL4;  ///< Offset: 0x110 - Output Selection for RFC Event 4
        volatile uint32_t RFCSEL5;  ///< Offset: 0x114 - Output Selection for RFC Event 5
        volatile uint32_t RFCSEL6;  ///< Offset: 0x118 - Output Selection for RFC Event 6
        volatile uint32_t RFCSEL7;  ///< Offset: 0x11C - Output Selection for RFC Event 7
        volatile uint32_t RFCSEL8;  ///< Offset: 0x120 - Output Selection for RFC Event 8
        volatile uint32_t RFCSEL9;  ///< Offset: 0x124 - Output Selection for RFC Event 9
        volatile uint32_t GPT0ACAPTSEL;  ///< Offset: 0x200 - Output Selection for GPT0 0
        volatile uint32_t GPT0BCAPTSEL;  ///< Offset: 0x204 - Output Selection for GPT0 1
        volatile uint32_t GPT1ACAPTSEL;  ///< Offset: 0x300 - Output Selection for GPT1 0
        volatile uint32_t GPT1BCAPTSEL;  ///< Offset: 0x304 - Output Selection for GPT1 1
        volatile uint32_t GPT2ACAPTSEL;  ///< Offset: 0x400 - Output Selection for GPT2 0
        volatile uint32_t GPT2BCAPTSEL;  ///< Offset: 0x404 - Output Selection for GPT2 1
        volatile uint32_t UDMACH1SSEL;  ///< Offset: 0x508 - Output Selection for DMA Channel 1 SREQ
        volatile uint32_t UDMACH1BSEL;  ///< Offset: 0x50C - Output Selection for DMA Channel 1 REQ
        volatile uint32_t UDMACH2SSEL;  ///< Offset: 0x510 - Output Selection for DMA Channel 2 SREQ
        volatile uint32_t UDMACH2BSEL;  ///< Offset: 0x514 - Output Selection for DMA Channel 2 REQ
        volatile uint32_t UDMACH3SSEL;  ///< Offset: 0x518 - Output Selection for DMA Channel 3 SREQ
        volatile uint32_t UDMACH3BSEL;  ///< Offset: 0x51C - Output Selection for DMA Channel 3 REQ
        volatile uint32_t UDMACH4SSEL;  ///< Offset: 0x520 - Output Selection for DMA Channel 4 SREQ
        volatile uint32_t UDMACH4BSEL;  ///< Offset: 0x524 - Output Selection for DMA Channel 4 REQ
        volatile uint32_t UDMACH5SSEL;  ///< Offset: 0x528 - Output Selection for DMA Channel 5 SREQ
        volatile uint32_t UDMACH5BSEL;  ///< Offset: 0x52C - Output Selection for DMA Channel 5 REQ
        volatile uint32_t UDMACH6SSEL;  ///< Offset: 0x530 - Output Selection for DMA Channel 6 SREQ
        volatile uint32_t UDMACH6BSEL;  ///< Offset: 0x534 - Output Selection for DMA Channel 6 REQ
        volatile uint32_t UDMACH7SSEL;  ///< Offset: 0x538 - Output Selection for DMA Channel 7 SREQ
        volatile uint32_t UDMACH7BSEL;  ///< Offset: 0x53C - Output Selection for DMA Channel 7 REQ
        volatile uint32_t UDMACH8SSEL;  ///< Offset: 0x540 - Output Selection for DMA Channel 8 SREQ Single request...
        volatile uint32_t UDMACH8BSEL;  ///< Offset: 0x544 - Output Selection for DMA Channel 8 REQ
        volatile uint32_t UDMACH9SSEL;  ///< Offset: 0x548 - Output Selection for DMA Channel 9 SREQ DMA_DONE for the...
        volatile uint32_t UDMACH9BSEL;  ///< Offset: 0x54C - Output Selection for DMA Channel 9 REQ DMA_DONE for the...
        volatile uint32_t UDMACH10SSEL;  ///< Offset: 0x550 - Output Selection for DMA Channel 10 SREQ DMA_DONE for...
        volatile uint32_t UDMACH10BSEL;  ///< Offset: 0x554 - Output Selection for DMA Channel 10 REQ DMA_DONE for the...
        volatile uint32_t UDMACH11SSEL;  ///< Offset: 0x558 - Output Selection for DMA Channel 11 SREQ DMA_DONE for...
        volatile uint32_t UDMACH11BSEL;  ///< Offset: 0x55C - Output Selection for DMA Channel 11 REQ DMA_DONE for the...
        volatile uint32_t UDMACH12SSEL;  ///< Offset: 0x560 - Output Selection for DMA Channel 12 SREQ DMA_DONE for...
        volatile uint32_t UDMACH12BSEL;  ///< Offset: 0x564 - Output Selection for DMA Channel 12 REQ DMA_DONE for the...
        volatile uint32_t UDMACH13BSEL;  ///< Offset: 0x56C - Output Selection for DMA Channel 13 REQ
        volatile uint32_t UDMACH14BSEL;  ///< Offset: 0x574 - Output Selection for DMA Channel 14 REQ
        volatile uint32_t UDMACH15BSEL;  ///< Offset: 0x57C - Output Selection for DMA Channel 15 REQ
        volatile uint32_t UDMACH16SSEL;  ///< Offset: 0x580 - Output Selection for DMA Channel 16 SREQ
        volatile uint32_t UDMACH16BSEL;  ///< Offset: 0x584 - Output Selection for DMA Channel 16 REQ
        volatile uint32_t UDMACH17SSEL;  ///< Offset: 0x588 - Output Selection for DMA Channel 17 SREQ
        volatile uint32_t UDMACH17BSEL;  ///< Offset: 0x58C - Output Selection for DMA Channel 17 REQ
        volatile uint32_t UDMACH21SSEL;  ///< Offset: 0x5A8 - Output Selection for DMA Channel 21 SREQ
        volatile uint32_t UDMACH21BSEL;  ///< Offset: 0x5AC - Output Selection for DMA Channel 21 REQ
        volatile uint32_t UDMACH22SSEL;  ///< Offset: 0x5B0 - Output Selection for DMA Channel 22 SREQ
        volatile uint32_t UDMACH22BSEL;  ///< Offset: 0x5B4 - Output Selection for DMA Channel 22 REQ
        volatile uint32_t UDMACH23SSEL;  ///< Offset: 0x5B8 - Output Selection for DMA Channel 23 SREQ
        volatile uint32_t UDMACH23BSEL;  ///< Offset: 0x5BC - Output Selection for DMA Channel 23 REQ
        volatile uint32_t UDMACH24SSEL;  ///< Offset: 0x5C0 - Output Selection for DMA Channel 24 SREQ
        volatile uint32_t UDMACH24BSEL;  ///< Offset: 0x5C4 - Output Selection for DMA Channel 24 REQ
        volatile uint32_t GPT3ACAPTSEL;  ///< Offset: 0x600 - Output Selection for GPT3 0
        volatile uint32_t GPT3BCAPTSEL;  ///< Offset: 0x604 - Output Selection for GPT3 1
        volatile uint32_t AUXSEL0;  ///< Offset: 0x700 - Output Selection for AUX Subscriber 0
        volatile uint32_t CM3NMISEL0;  ///< Offset: 0x800 - Output Selection for NMI Subscriber 0
        volatile uint32_t I2SSTMPSEL0;  ///< Offset: 0x900 - Output Selection for I2S Subscriber 0
        volatile uint32_t FRZSEL0;  ///< Offset: 0xA00 - Output Selection for FRZ Subscriber 0
        volatile uint32_t SWEV;  ///< Offset: 0xF00 - Set or Clear Software Events
    };

    /// Peripheral instances
    inline Registers* EVENT = reinterpret_cast<Registers*>(EVENT_BASE);

}

// ============================================================================
// FCFG1 Peripheral
// ============================================================================

namespace fcfg1 {
    /// Base addresses
    constexpr uint32_t FCFG1_BASE = 0x50001000;

    /// FCFG1 Register structure
    struct Registers {
        volatile uint32_t MISC_CONF_1;  ///< Offset: 0xA0 - Misc configurations
        volatile uint32_t BAW_MEAS_5;  ///< Offset: 0xB0 - Internal. Only to be used through TI provided API.
        volatile uint32_t BAW_MEAS_4;  ///< Offset: 0xB4 - Internal. Only to be used through TI provided API.
        volatile uint32_t BAW_MEAS_3;  ///< Offset: 0xB8 - Internal. Only to be used through TI provided API.
        volatile uint32_t BAW_MEAS_2;  ///< Offset: 0xBC - Internal. Only to be used through TI provided API.
        volatile uint32_t BAW_MEAS_1;  ///< Offset: 0xC0 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_RF_FRONTEND_DIV5;  ///< Offset: 0xC4 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_RF_FRONTEND_DIV6;  ///< Offset: 0xC8 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_RF_FRONTEND_DIV10;  ///< Offset: 0xCC - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_RF_FRONTEND_DIV12;  ///< Offset: 0xD0 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_RF_FRONTEND_DIV15;  ///< Offset: 0xD4 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_RF_FRONTEND_DIV30;  ///< Offset: 0xD8 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_SYNTH_DIV5;  ///< Offset: 0xDC - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_SYNTH_DIV6;  ///< Offset: 0xE0 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_SYNTH_DIV10;  ///< Offset: 0xE4 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_SYNTH_DIV12;  ///< Offset: 0xE8 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_SYNTH_DIV15;  ///< Offset: 0xEC - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_SYNTH_DIV30;  ///< Offset: 0xF0 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_MISC_ADC_DIV5;  ///< Offset: 0xF4 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_MISC_ADC_DIV6;  ///< Offset: 0xF8 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_MISC_ADC_DIV10;  ///< Offset: 0xFC - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_MISC_ADC_DIV12;  ///< Offset: 0x100 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_MISC_ADC_DIV15;  ///< Offset: 0x104 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_MISC_ADC_DIV30;  ///< Offset: 0x108 - Internal. Only to be used through TI provided API.
        volatile uint32_t SHDW_DIE_ID_0;  ///< Offset: 0x118 - Shadow of the DIE_ID_0 register in eFuse
        volatile uint32_t SHDW_DIE_ID_1;  ///< Offset: 0x11C - Shadow of the DIE_ID_1 register in eFuse
        volatile uint32_t SHDW_DIE_ID_2;  ///< Offset: 0x120 - Shadow of the DIE_ID_2 register in eFuse
        volatile uint32_t SHDW_DIE_ID_3;  ///< Offset: 0x124 - Shadow of the DIE_ID_3 register in eFuse
        volatile uint32_t SHDW_OSC_BIAS_LDO_TRIM;  ///< Offset: 0x138 - Internal. Only to be used through TI provided API.
        volatile uint32_t SHDW_ANA_TRIM;  ///< Offset: 0x13C - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_NUMBER;  ///< Offset: 0x164 - 
        volatile uint32_t FLASH_COORDINATE;  ///< Offset: 0x16C - 
        volatile uint32_t FLASH_E_P;  ///< Offset: 0x170 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_C_E_P_R;  ///< Offset: 0x174 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_P_R_PV;  ///< Offset: 0x178 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_EH_SEQ;  ///< Offset: 0x17C - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_VHV_E;  ///< Offset: 0x180 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_PP;  ///< Offset: 0x184 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_PROG_EP;  ///< Offset: 0x188 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_ERA_PW;  ///< Offset: 0x18C - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_VHV;  ///< Offset: 0x190 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_VHV_PV;  ///< Offset: 0x194 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_V;  ///< Offset: 0x198 - Internal. Only to be used through TI provided API.
        volatile uint32_t USER_ID;  ///< Offset: 0x294 - User Identification. Reading this register or the...
        volatile uint32_t FLASH_OTP_DATA3;  ///< Offset: 0x2B0 - Internal. Only to be used through TI provided API.
        volatile uint32_t ANA2_TRIM;  ///< Offset: 0x2B4 - Internal. Only to be used through TI provided API.
        volatile uint32_t LDO_TRIM;  ///< Offset: 0x2B8 - Internal. Only to be used through TI provided API.
        volatile uint32_t MAC_BLE_0;  ///< Offset: 0x2E8 - MAC BLE Address 0
        volatile uint32_t MAC_BLE_1;  ///< Offset: 0x2EC - MAC BLE Address 1
        volatile uint32_t MAC_15_4_0;  ///< Offset: 0x2F0 - MAC IEEE 802.15.4 Address 0
        volatile uint32_t MAC_15_4_1;  ///< Offset: 0x2F4 - MAC IEEE 802.15.4 Address 1
        volatile uint32_t FLASH_OTP_DATA4;  ///< Offset: 0x308 - Internal. Only to be used through TI provided API.
        volatile uint32_t MISC_TRIM;  ///< Offset: 0x30C - Miscellaneous Trim Parameters
        volatile uint32_t RCOSC_HF_TEMPCOMP;  ///< Offset: 0x310 - Internal. Only to be used through TI provided API.
        volatile uint32_t ICEPICK_DEVICE_ID;  ///< Offset: 0x318 - IcePick Device Identification Reading this register or...
        volatile uint32_t FCFG1_REVISION;  ///< Offset: 0x31C - Factory Configuration (FCFG1) Revision
        volatile uint32_t MISC_OTP_DATA;  ///< Offset: 0x320 - Misc OTP Data
        volatile uint32_t IOCONF;  ///< Offset: 0x344 - IO Configuration
        volatile uint32_t CONFIG_IF_ADC;  ///< Offset: 0x34C - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_OSC_TOP;  ///< Offset: 0x350 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_RF_FRONTEND;  ///< Offset: 0x354 - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_SYNTH;  ///< Offset: 0x358 - Internal. Only to be used through TI provided API.
        volatile uint32_t SOC_ADC_ABS_GAIN;  ///< Offset: 0x35C - AUX_ADC Gain in Absolute Reference Mode
        volatile uint32_t SOC_ADC_REL_GAIN;  ///< Offset: 0x360 - AUX_ADC Gain in Relative Reference Mode
        volatile uint32_t SOC_ADC_OFFSET_INT;  ///< Offset: 0x368 - AUX_ADC Temperature Offsets in Absolute Reference Mode
        volatile uint32_t SOC_ADC_REF_TRIM_AND_OFFSET_EXT;  ///< Offset: 0x36C - Internal. Only to be used through TI provided API.
        volatile uint32_t AMPCOMP_TH1;  ///< Offset: 0x370 - Internal. Only to be used through TI provided API.
        volatile uint32_t AMPCOMP_TH2;  ///< Offset: 0x374 - Internal. Only to be used through TI provided API.
        volatile uint32_t AMPCOMP_CTRL1;  ///< Offset: 0x378 - Internal. Only to be used through TI provided API.
        volatile uint32_t ANABYPASS_VALUE2;  ///< Offset: 0x37C - Internal. Only to be used through TI provided API.
        volatile uint32_t CONFIG_MISC_ADC;  ///< Offset: 0x380 - Internal. Only to be used through TI provided API.
        volatile uint32_t VOLT_TRIM;  ///< Offset: 0x388 - Internal. Only to be used through TI provided API.
        volatile uint32_t OSC_CONF;  ///< Offset: 0x38C - OSC Configuration
        volatile uint32_t CAP_TRIM;  ///< Offset: 0x394 - Internal. Only to be used through TI provided API.
        volatile uint32_t MISC_OTP_DATA_1;  ///< Offset: 0x398 - Internal. Only to be used through TI provided API.
        volatile uint32_t PWD_CURR_20C;  ///< Offset: 0x39C - Power Down Current Control 20C
        volatile uint32_t PWD_CURR_35C;  ///< Offset: 0x3A0 - Power Down Current Control 35C
        volatile uint32_t PWD_CURR_50C;  ///< Offset: 0x3A4 - Power Down Current Control 50C
        volatile uint32_t PWD_CURR_65C;  ///< Offset: 0x3A8 - Power Down Current Control 65C
        volatile uint32_t PWD_CURR_80C;  ///< Offset: 0x3AC - Power Down Current Control 80C
        volatile uint32_t PWD_CURR_95C;  ///< Offset: 0x3B0 - Power Down Current Control 95C
        volatile uint32_t PWD_CURR_110C;  ///< Offset: 0x3B4 - Power Down Current Control 110C
        volatile uint32_t PWD_CURR_125C;  ///< Offset: 0x3B8 - Power Down Current Control 125C
    };

    /// Peripheral instances
    inline Registers* FCFG1 = reinterpret_cast<Registers*>(FCFG1_BASE);

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_BASE = 0x40030000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t STAT;  ///< Offset: 0x1C - FMC and Efuse Status
        volatile uint32_t CFG;  ///< Offset: 0x24 - Internal. Only to be used through TI provided API.
        volatile uint32_t SYSCODE_START;  ///< Offset: 0x28 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLASH_SIZE;  ///< Offset: 0x2C - Internal. Only to be used through TI provided API.
        volatile uint32_t FWLOCK;  ///< Offset: 0x3C - Internal. Only to be used through TI provided API.
        volatile uint32_t FWFLAG;  ///< Offset: 0x40 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSE;  ///< Offset: 0x1000 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSEADDR;  ///< Offset: 0x1004 - Internal. Only to be used through TI provided API.
        volatile uint32_t DATAUPPER;  ///< Offset: 0x1008 - Internal. Only to be used through TI provided API.
        volatile uint32_t DATALOWER;  ///< Offset: 0x100C - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSECFG;  ///< Offset: 0x1010 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSESTAT;  ///< Offset: 0x1014 - Internal. Only to be used through TI provided API.
        volatile uint32_t ACC;  ///< Offset: 0x1018 - Internal. Only to be used through TI provided API.
        volatile uint32_t BOUNDARY;  ///< Offset: 0x101C - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSEFLAG;  ///< Offset: 0x1020 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSEKEY;  ///< Offset: 0x1024 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSERELEASE;  ///< Offset: 0x1028 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSEPINS;  ///< Offset: 0x102C - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSECRA;  ///< Offset: 0x1030 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSEREAD;  ///< Offset: 0x1034 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSEPROGRAM;  ///< Offset: 0x1038 - Internal. Only to be used through TI provided API.
        volatile uint32_t EFUSEERROR;  ///< Offset: 0x103C - Internal. Only to be used through TI provided API.
        volatile uint32_t SINGLEBIT;  ///< Offset: 0x1040 - Internal. Only to be used through TI provided API.
        volatile uint32_t TWOBIT;  ///< Offset: 0x1044 - Internal. Only to be used through TI provided API.
        volatile uint32_t SELFTESTCYC;  ///< Offset: 0x1048 - Internal. Only to be used through TI provided API.
        volatile uint32_t SELFTESTSIGN;  ///< Offset: 0x104C - Internal. Only to be used through TI provided API.
        volatile uint32_t FRDCTL;  ///< Offset: 0x2000 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSPRD;  ///< Offset: 0x2004 - Internal. Only to be used through TI provided API.
        volatile uint32_t FEDACCTL1;  ///< Offset: 0x2008 - Internal. Only to be used through TI provided API.
        volatile uint32_t FEDACSTAT;  ///< Offset: 0x201C - Internal. Only to be used through TI provided API.
        volatile uint32_t FBPROT;  ///< Offset: 0x2030 - Internal. Only to be used through TI provided API.
        volatile uint32_t FBSE;  ///< Offset: 0x2034 - Internal. Only to be used through TI provided API.
        volatile uint32_t FBBUSY;  ///< Offset: 0x2038 - Internal. Only to be used through TI provided API.
        volatile uint32_t FBAC;  ///< Offset: 0x203C - Internal. Only to be used through TI provided API.
        volatile uint32_t FBFALLBACK;  ///< Offset: 0x2040 - Internal. Only to be used through TI provided API.
        volatile uint32_t FBPRDY;  ///< Offset: 0x2044 - Internal. Only to be used through TI provided API.
        volatile uint32_t FPAC1;  ///< Offset: 0x2048 - Internal. Only to be used through TI provided API.
        volatile uint32_t FPAC2;  ///< Offset: 0x204C - Internal. Only to be used through TI provided API.
        volatile uint32_t FMAC;  ///< Offset: 0x2050 - Internal. Only to be used through TI provided API.
        volatile uint32_t FMSTAT;  ///< Offset: 0x2054 - Internal. Only to be used through TI provided API.
        volatile uint32_t FLOCK;  ///< Offset: 0x2064 - Internal. Only to be used through TI provided API.
        volatile uint32_t FVREADCT;  ///< Offset: 0x2080 - Internal. Only to be used through TI provided API.
        volatile uint32_t FVHVCT1;  ///< Offset: 0x2084 - Internal. Only to be used through TI provided API.
        volatile uint32_t FVHVCT2;  ///< Offset: 0x2088 - Internal. Only to be used through TI provided API.
        volatile uint32_t FVHVCT3;  ///< Offset: 0x208C - Internal. Only to be used through TI provided API.
        volatile uint32_t FVNVCT;  ///< Offset: 0x2090 - Internal. Only to be used through TI provided API.
        volatile uint32_t FVSLP;  ///< Offset: 0x2094 - Internal. Only to be used through TI provided API.
        volatile uint32_t FVWLCT;  ///< Offset: 0x2098 - Internal. Only to be used through TI provided API.
        volatile uint32_t FEFUSECTL;  ///< Offset: 0x209C - Internal. Only to be used through TI provided API.
        volatile uint32_t FEFUSESTAT;  ///< Offset: 0x20A0 - Internal. Only to be used through TI provided API.
        volatile uint32_t FEFUSEDATA;  ///< Offset: 0x20A4 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSEQPMP;  ///< Offset: 0x20A8 - Internal. Only to be used through TI provided API.
        volatile uint32_t FBSTROBES;  ///< Offset: 0x2100 - Internal. Only to be used through TI provided API.
        volatile uint32_t FPSTROBES;  ///< Offset: 0x2104 - Internal. Only to be used through TI provided API.
        volatile uint32_t FBMODE;  ///< Offset: 0x2108 - Internal. Only to be used through TI provided API.
        volatile uint32_t FTCR;  ///< Offset: 0x210C - Internal. Only to be used through TI provided API.
        volatile uint32_t FADDR;  ///< Offset: 0x2110 - Internal. Only to be used through TI provided API.
        volatile uint32_t FTCTL;  ///< Offset: 0x211C - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE0;  ///< Offset: 0x2120 - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE1;  ///< Offset: 0x2124 - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE2;  ///< Offset: 0x2128 - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE3;  ///< Offset: 0x212C - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE4;  ///< Offset: 0x2130 - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE5;  ///< Offset: 0x2134 - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE6;  ///< Offset: 0x2138 - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE7;  ///< Offset: 0x213C - Internal. Only to be used through TI provided API.
        volatile uint32_t FWPWRITE_ECC;  ///< Offset: 0x2140 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSWSTAT;  ///< Offset: 0x2144 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_GLBCTL;  ///< Offset: 0x2200 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_STATE;  ///< Offset: 0x2204 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_STAT;  ///< Offset: 0x2208 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_CMD;  ///< Offset: 0x220C - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_PE_OSU;  ///< Offset: 0x2210 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_VSTAT;  ///< Offset: 0x2214 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_PE_VSU;  ///< Offset: 0x2218 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_CMP_VSU;  ///< Offset: 0x221C - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_EX_VAL;  ///< Offset: 0x2220 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_RD_H;  ///< Offset: 0x2224 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_P_OH;  ///< Offset: 0x2228 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ERA_OH;  ///< Offset: 0x222C - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_SAV_PPUL;  ///< Offset: 0x2230 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_PE_VH;  ///< Offset: 0x2234 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_PRG_PW;  ///< Offset: 0x2240 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ERA_PW;  ///< Offset: 0x2244 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_SAV_ERA_PUL;  ///< Offset: 0x2254 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_TIMER;  ///< Offset: 0x2258 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_MODE;  ///< Offset: 0x225C - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_PGM;  ///< Offset: 0x2260 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ERA;  ///< Offset: 0x2264 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_PRG_PUL;  ///< Offset: 0x2268 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ERA_PUL;  ///< Offset: 0x226C - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_STEP_SIZE;  ///< Offset: 0x2270 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_PUL_CNTR;  ///< Offset: 0x2274 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_EC_STEP_HEIGHT;  ///< Offset: 0x2278 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ST_MACHINE;  ///< Offset: 0x227C - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_FLES;  ///< Offset: 0x2280 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_WR_ENA;  ///< Offset: 0x2288 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ACC_PP;  ///< Offset: 0x228C - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ACC_EP;  ///< Offset: 0x2290 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ADDR;  ///< Offset: 0x22A0 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_SECTOR;  ///< Offset: 0x22A4 - Internal. Only to be used through TI provided API.
        volatile uint32_t FMC_REV_ID;  ///< Offset: 0x22A8 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_ERR_ADDR;  ///< Offset: 0x22AC - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_PGM_MAXPUL;  ///< Offset: 0x22B0 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_EXECUTE;  ///< Offset: 0x22B4 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_SECTOR1;  ///< Offset: 0x22C0 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_SECTOR2;  ///< Offset: 0x22C4 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_BSLE0;  ///< Offset: 0x22E0 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_BSLE1;  ///< Offset: 0x22E4 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_BSLP0;  ///< Offset: 0x22F0 - Internal. Only to be used through TI provided API.
        volatile uint32_t FSM_BSLP1;  ///< Offset: 0x22F4 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_BANK;  ///< Offset: 0x2400 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_WRAPPER;  ///< Offset: 0x2404 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_BNK_TYPE;  ///< Offset: 0x2408 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B0_START;  ///< Offset: 0x2410 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B1_START;  ///< Offset: 0x2414 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B2_START;  ///< Offset: 0x2418 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B3_START;  ///< Offset: 0x241C - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B4_START;  ///< Offset: 0x2420 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B5_START;  ///< Offset: 0x2424 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B6_START;  ///< Offset: 0x2428 - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B7_START;  ///< Offset: 0x242C - Internal. Only to be used through TI provided API.
        volatile uint32_t FCFG_B0_SSIZE0;  ///< Offset: 0x2430 - Internal. Only to be used through TI provided API.
    };

    /// Peripheral instances
    inline Registers* FLASH = reinterpret_cast<Registers*>(FLASH_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_BASE = 0x40022000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t DOUT3_0;  ///< Offset: 0x00 - Data Out 0 to 3 Alias register for byte access to each...
        volatile uint32_t DOUT7_4;  ///< Offset: 0x04 - Data Out 4 to 7 Alias register for byte access to each...
        volatile uint32_t DOUT11_8;  ///< Offset: 0x08 - Data Out 8 to 11 Alias register for byte access to each...
        volatile uint32_t DOUT15_12;  ///< Offset: 0x0C - Data Out 12 to 15 Alias register for byte access to each...
        volatile uint32_t DOUT19_16;  ///< Offset: 0x10 - Data Out 16 to 19 Alias register for byte access to each...
        volatile uint32_t DOUT23_20;  ///< Offset: 0x14 - Data Out 20 to 23 Alias register for byte access to each...
        volatile uint32_t DOUT27_24;  ///< Offset: 0x18 - Data Out 24 to 27 Alias register for byte access to each...
        volatile uint32_t DOUT31_28;  ///< Offset: 0x1C - Data Out 28 to 31 Alias register for byte access to each...
        volatile uint32_t DOUT31_0;  ///< Offset: 0x80 - Data Output for DIO 0 to 31
        volatile uint32_t DOUTSET31_0;  ///< Offset: 0x90 - Data Out Set Writing 1 to a bit position sets the...
        volatile uint32_t DOUTCLR31_0;  ///< Offset: 0xA0 - Data Out Clear Writing 1 to a bit position clears the...
        volatile uint32_t DOUTTGL31_0;  ///< Offset: 0xB0 - Data Out Toggle Writing 1 to a bit position will invert...
        volatile uint32_t DIN31_0;  ///< Offset: 0xC0 - Data Input from DIO 0 to 31
        volatile uint32_t DOE31_0;  ///< Offset: 0xD0 - Data Output Enable for DIO 0 to 31
        volatile uint32_t EVFLAGS31_0;  ///< Offset: 0xE0 - Event Register for DIO 0 to 31 Reading this registers...
    };

    /// Peripheral instances
    inline Registers* GPIO = reinterpret_cast<Registers*>(GPIO_BASE);

}

// ============================================================================
// GPT0 Peripheral
// ============================================================================

namespace gpt0 {
    /// Base addresses
    constexpr uint32_t GPT0_BASE = 0x40010000;

    /// GPT0 Register structure
    struct Registers {
        volatile uint32_t CFG;  ///< Offset: 0x00 - Configuration
        volatile uint32_t TAMR;  ///< Offset: 0x04 - Timer A Mode
        volatile uint32_t TBMR;  ///< Offset: 0x08 - Timer B Mode
        volatile uint32_t CTL;  ///< Offset: 0x0C - Control
        volatile uint32_t SYNC;  ///< Offset: 0x10 - Synch Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - Interrupt Mask This register is used to enable the...
        volatile uint32_t RIS;  ///< Offset: 0x1C - Raw Interrupt Status Associated registers: IMR, MIS, ICLR
        volatile uint32_t MIS;  ///< Offset: 0x20 - Masked Interrupt Status Values are result of bitwise AND...
        volatile uint32_t ICLR;  ///< Offset: 0x24 - Interrupt Clear This register is used to clear status...
        volatile uint32_t TAILR;  ///< Offset: 0x28 - Timer A Interval Load Register
        volatile uint32_t TBILR;  ///< Offset: 0x2C - Timer B Interval Load Register
        volatile uint32_t TAMATCHR;  ///< Offset: 0x30 - Timer A Match Register Interrupts can be generated when...
        volatile uint32_t TBMATCHR;  ///< Offset: 0x34 - Timer B Match Register When a GPT is configured to one...
        volatile uint32_t TAPR;  ///< Offset: 0x38 - Timer A Pre-scale This register allows software to...
        volatile uint32_t TBPR;  ///< Offset: 0x3C - Timer B Pre-scale This register allows software to...
        volatile uint32_t TAPMR;  ///< Offset: 0x40 - Timer A Pre-scale Match This register allows software to...
        volatile uint32_t TBPMR;  ///< Offset: 0x44 - Timer B Pre-scale Match This register allows software to...
        volatile uint32_t TAR;  ///< Offset: 0x48 - Timer A Register
        volatile uint32_t TBR;  ///< Offset: 0x4C - Timer B Register
        volatile uint32_t TAV;  ///< Offset: 0x50 - Timer A Value This register shows the current value of...
        volatile uint32_t TBV;  ///< Offset: 0x54 - Timer B Value This register shows the current value of...
        volatile uint32_t RTCPD;  ///< Offset: 0x58 - RTC Pre-divide Value This register shows the current...
        volatile uint32_t TAPS;  ///< Offset: 0x5C - Timer A Pre-scale Snap-shot Based on the value in the...
        volatile uint32_t TBPS;  ///< Offset: 0x60 - Timer B Pre-scale Snap-shot Based on the value in the...
        volatile uint32_t TAPV;  ///< Offset: 0x64 - Timer A Pre-scale Value This register shows the current...
        volatile uint32_t TBPV;  ///< Offset: 0x68 - Timer B Pre-scale Value This register shows the current...
        volatile uint32_t DMAEV;  ///< Offset: 0x6C - DMA Event This register allows software to...
        volatile uint32_t VERSION;  ///< Offset: 0xFB0 - Peripheral Version This register provides information...
        volatile uint32_t ANDCCP;  ///< Offset: 0xFB4 - Combined CCP Output This register is used to logically...
    };

    /// Peripheral instances
    inline Registers* GPT0 = reinterpret_cast<Registers*>(GPT0_BASE);

}

// ============================================================================
// GPT1 Peripheral
// ============================================================================

namespace gpt1 {
    /// Base addresses
    constexpr uint32_t GPT1_BASE = 0x40011000;

    /// GPT1 Register structure
    struct Registers {
        volatile uint32_t CFG;  ///< Offset: 0x00 - Configuration
        volatile uint32_t TAMR;  ///< Offset: 0x04 - Timer A Mode
        volatile uint32_t TBMR;  ///< Offset: 0x08 - Timer B Mode
        volatile uint32_t CTL;  ///< Offset: 0x0C - Control
        volatile uint32_t SYNC;  ///< Offset: 0x10 - Synch Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - Interrupt Mask This register is used to enable the...
        volatile uint32_t RIS;  ///< Offset: 0x1C - Raw Interrupt Status Associated registers: IMR, MIS, ICLR
        volatile uint32_t MIS;  ///< Offset: 0x20 - Masked Interrupt Status Values are result of bitwise AND...
        volatile uint32_t ICLR;  ///< Offset: 0x24 - Interrupt Clear This register is used to clear status...
        volatile uint32_t TAILR;  ///< Offset: 0x28 - Timer A Interval Load Register
        volatile uint32_t TBILR;  ///< Offset: 0x2C - Timer B Interval Load Register
        volatile uint32_t TAMATCHR;  ///< Offset: 0x30 - Timer A Match Register Interrupts can be generated when...
        volatile uint32_t TBMATCHR;  ///< Offset: 0x34 - Timer B Match Register When a GPT is configured to one...
        volatile uint32_t TAPR;  ///< Offset: 0x38 - Timer A Pre-scale This register allows software to...
        volatile uint32_t TBPR;  ///< Offset: 0x3C - Timer B Pre-scale This register allows software to...
        volatile uint32_t TAPMR;  ///< Offset: 0x40 - Timer A Pre-scale Match This register allows software to...
        volatile uint32_t TBPMR;  ///< Offset: 0x44 - Timer B Pre-scale Match This register allows software to...
        volatile uint32_t TAR;  ///< Offset: 0x48 - Timer A Register
        volatile uint32_t TBR;  ///< Offset: 0x4C - Timer B Register
        volatile uint32_t TAV;  ///< Offset: 0x50 - Timer A Value This register shows the current value of...
        volatile uint32_t TBV;  ///< Offset: 0x54 - Timer B Value This register shows the current value of...
        volatile uint32_t RTCPD;  ///< Offset: 0x58 - RTC Pre-divide Value This register shows the current...
        volatile uint32_t TAPS;  ///< Offset: 0x5C - Timer A Pre-scale Snap-shot Based on the value in the...
        volatile uint32_t TBPS;  ///< Offset: 0x60 - Timer B Pre-scale Snap-shot Based on the value in the...
        volatile uint32_t TAPV;  ///< Offset: 0x64 - Timer A Pre-scale Value This register shows the current...
        volatile uint32_t TBPV;  ///< Offset: 0x68 - Timer B Pre-scale Value This register shows the current...
        volatile uint32_t DMAEV;  ///< Offset: 0x6C - DMA Event This register allows software to...
        volatile uint32_t VERSION;  ///< Offset: 0xFB0 - Peripheral Version This register provides information...
        volatile uint32_t ANDCCP;  ///< Offset: 0xFB4 - Combined CCP Output This register is used to logically...
    };

    /// Peripheral instances
    inline Registers* GPT1 = reinterpret_cast<Registers*>(GPT1_BASE);

}

// ============================================================================
// GPT2 Peripheral
// ============================================================================

namespace gpt2 {
    /// Base addresses
    constexpr uint32_t GPT2_BASE = 0x40012000;

    /// GPT2 Register structure
    struct Registers {
        volatile uint32_t CFG;  ///< Offset: 0x00 - Configuration
        volatile uint32_t TAMR;  ///< Offset: 0x04 - Timer A Mode
        volatile uint32_t TBMR;  ///< Offset: 0x08 - Timer B Mode
        volatile uint32_t CTL;  ///< Offset: 0x0C - Control
        volatile uint32_t SYNC;  ///< Offset: 0x10 - Synch Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - Interrupt Mask This register is used to enable the...
        volatile uint32_t RIS;  ///< Offset: 0x1C - Raw Interrupt Status Associated registers: IMR, MIS, ICLR
        volatile uint32_t MIS;  ///< Offset: 0x20 - Masked Interrupt Status Values are result of bitwise AND...
        volatile uint32_t ICLR;  ///< Offset: 0x24 - Interrupt Clear This register is used to clear status...
        volatile uint32_t TAILR;  ///< Offset: 0x28 - Timer A Interval Load Register
        volatile uint32_t TBILR;  ///< Offset: 0x2C - Timer B Interval Load Register
        volatile uint32_t TAMATCHR;  ///< Offset: 0x30 - Timer A Match Register Interrupts can be generated when...
        volatile uint32_t TBMATCHR;  ///< Offset: 0x34 - Timer B Match Register When a GPT is configured to one...
        volatile uint32_t TAPR;  ///< Offset: 0x38 - Timer A Pre-scale This register allows software to...
        volatile uint32_t TBPR;  ///< Offset: 0x3C - Timer B Pre-scale This register allows software to...
        volatile uint32_t TAPMR;  ///< Offset: 0x40 - Timer A Pre-scale Match This register allows software to...
        volatile uint32_t TBPMR;  ///< Offset: 0x44 - Timer B Pre-scale Match This register allows software to...
        volatile uint32_t TAR;  ///< Offset: 0x48 - Timer A Register
        volatile uint32_t TBR;  ///< Offset: 0x4C - Timer B Register
        volatile uint32_t TAV;  ///< Offset: 0x50 - Timer A Value This register shows the current value of...
        volatile uint32_t TBV;  ///< Offset: 0x54 - Timer B Value This register shows the current value of...
        volatile uint32_t RTCPD;  ///< Offset: 0x58 - RTC Pre-divide Value This register shows the current...
        volatile uint32_t TAPS;  ///< Offset: 0x5C - Timer A Pre-scale Snap-shot Based on the value in the...
        volatile uint32_t TBPS;  ///< Offset: 0x60 - Timer B Pre-scale Snap-shot Based on the value in the...
        volatile uint32_t TAPV;  ///< Offset: 0x64 - Timer A Pre-scale Value This register shows the current...
        volatile uint32_t TBPV;  ///< Offset: 0x68 - Timer B Pre-scale Value This register shows the current...
        volatile uint32_t DMAEV;  ///< Offset: 0x6C - DMA Event This register allows software to...
        volatile uint32_t VERSION;  ///< Offset: 0xFB0 - Peripheral Version This register provides information...
        volatile uint32_t ANDCCP;  ///< Offset: 0xFB4 - Combined CCP Output This register is used to logically...
    };

    /// Peripheral instances
    inline Registers* GPT2 = reinterpret_cast<Registers*>(GPT2_BASE);

}

// ============================================================================
// GPT3 Peripheral
// ============================================================================

namespace gpt3 {
    /// Base addresses
    constexpr uint32_t GPT3_BASE = 0x40013000;

    /// GPT3 Register structure
    struct Registers {
        volatile uint32_t CFG;  ///< Offset: 0x00 - Configuration
        volatile uint32_t TAMR;  ///< Offset: 0x04 - Timer A Mode
        volatile uint32_t TBMR;  ///< Offset: 0x08 - Timer B Mode
        volatile uint32_t CTL;  ///< Offset: 0x0C - Control
        volatile uint32_t SYNC;  ///< Offset: 0x10 - Synch Register
        volatile uint32_t IMR;  ///< Offset: 0x18 - Interrupt Mask This register is used to enable the...
        volatile uint32_t RIS;  ///< Offset: 0x1C - Raw Interrupt Status Associated registers: IMR, MIS, ICLR
        volatile uint32_t MIS;  ///< Offset: 0x20 - Masked Interrupt Status Values are result of bitwise AND...
        volatile uint32_t ICLR;  ///< Offset: 0x24 - Interrupt Clear This register is used to clear status...
        volatile uint32_t TAILR;  ///< Offset: 0x28 - Timer A Interval Load Register
        volatile uint32_t TBILR;  ///< Offset: 0x2C - Timer B Interval Load Register
        volatile uint32_t TAMATCHR;  ///< Offset: 0x30 - Timer A Match Register Interrupts can be generated when...
        volatile uint32_t TBMATCHR;  ///< Offset: 0x34 - Timer B Match Register When a GPT is configured to one...
        volatile uint32_t TAPR;  ///< Offset: 0x38 - Timer A Pre-scale This register allows software to...
        volatile uint32_t TBPR;  ///< Offset: 0x3C - Timer B Pre-scale This register allows software to...
        volatile uint32_t TAPMR;  ///< Offset: 0x40 - Timer A Pre-scale Match This register allows software to...
        volatile uint32_t TBPMR;  ///< Offset: 0x44 - Timer B Pre-scale Match This register allows software to...
        volatile uint32_t TAR;  ///< Offset: 0x48 - Timer A Register
        volatile uint32_t TBR;  ///< Offset: 0x4C - Timer B Register
        volatile uint32_t TAV;  ///< Offset: 0x50 - Timer A Value This register shows the current value of...
        volatile uint32_t TBV;  ///< Offset: 0x54 - Timer B Value This register shows the current value of...
        volatile uint32_t RTCPD;  ///< Offset: 0x58 - RTC Pre-divide Value This register shows the current...
        volatile uint32_t TAPS;  ///< Offset: 0x5C - Timer A Pre-scale Snap-shot Based on the value in the...
        volatile uint32_t TBPS;  ///< Offset: 0x60 - Timer B Pre-scale Snap-shot Based on the value in the...
        volatile uint32_t TAPV;  ///< Offset: 0x64 - Timer A Pre-scale Value This register shows the current...
        volatile uint32_t TBPV;  ///< Offset: 0x68 - Timer B Pre-scale Value This register shows the current...
        volatile uint32_t DMAEV;  ///< Offset: 0x6C - DMA Event This register allows software to...
        volatile uint32_t VERSION;  ///< Offset: 0xFB0 - Peripheral Version This register provides information...
        volatile uint32_t ANDCCP;  ///< Offset: 0xFB4 - Combined CCP Output This register is used to logically...
    };

    /// Peripheral instances
    inline Registers* GPT3 = reinterpret_cast<Registers*>(GPT3_BASE);

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C0_BASE = 0x40002000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t SOAR;  ///< Offset: 0x00 - Slave Own Address This register consists of seven...
        volatile uint32_t SSTAT;  ///< Offset: 0x04 - Slave Status Note: This register shares address with...
        volatile uint32_t SCTL;  ///< Offset: 0x04 - Slave Control Note: This register shares address with...
        volatile uint32_t SDR;  ///< Offset: 0x08 - Slave Data This register contains the data to be...
        volatile uint32_t SIMR;  ///< Offset: 0x0C - Slave Interrupt Mask This register controls whether a...
        volatile uint32_t SRIS;  ///< Offset: 0x10 - Slave Raw Interrupt Status This register shows the...
        volatile uint32_t SMIS;  ///< Offset: 0x14 - Slave Masked Interrupt Status This register show which...
        volatile uint32_t SICR;  ///< Offset: 0x18 - Slave Interrupt Clear This register clears the raw...
        volatile uint32_t MSA;  ///< Offset: 0x800 - Master Salve Address This register contains seven...
        volatile uint32_t MSTAT;  ///< Offset: 0x804 - Master Status
        volatile uint32_t MCTRL;  ///< Offset: 0x804 - Master Control This register accesses status bits when...
        volatile uint32_t MDR;  ///< Offset: 0x808 - Master Data This register contains the data to be...
        volatile uint32_t MTPR;  ///< Offset: 0x80C - I2C Master Timer Period This register specifies the...
        volatile uint32_t MIMR;  ///< Offset: 0x810 - Master Interrupt Mask This register controls whether a...
        volatile uint32_t MRIS;  ///< Offset: 0x814 - Master Raw Interrupt Status This register show the...
        volatile uint32_t MMIS;  ///< Offset: 0x818 - Master Masked Interrupt Status This register show which...
        volatile uint32_t MICR;  ///< Offset: 0x81C - Master Interrupt Clear This register clears the raw and...
        volatile uint32_t MCR;  ///< Offset: 0x820 - Master Configuration This register configures the mode...
    };

    /// Peripheral instances
    inline Registers* I2C0 = reinterpret_cast<Registers*>(I2C0_BASE);

}

// ============================================================================
// I2S Peripheral
// ============================================================================

namespace i2s {
    /// Base addresses
    constexpr uint32_t I2S0_BASE = 0x40021000;

    /// I2S Register structure
    struct Registers {
        volatile uint32_t AIFWCLKSRC;  ///< Offset: 0x00 - WCLK Source Selection
        volatile uint32_t AIFDMACFG;  ///< Offset: 0x04 - DMA Buffer Size Configuration
        volatile uint32_t AIFDIRCFG;  ///< Offset: 0x08 - Pin Direction
        volatile uint32_t AIFFMTCFG;  ///< Offset: 0x0C - Serial Interface Format Configuration
        volatile uint32_t AIFWMASK0;  ///< Offset: 0x10 - Word Selection Bit Mask for Pin 0
        volatile uint32_t AIFWMASK1;  ///< Offset: 0x14 - Word Selection Bit Mask for Pin 1
        volatile uint32_t AIFWMASK2;  ///< Offset: 0x18 - Word Selection Bit Mask for Pin 2
        volatile uint32_t AIFPWMVALUE;  ///< Offset: 0x1C - Audio Interface PWM Debug Value
        volatile uint32_t AIFINPTRNEXT;  ///< Offset: 0x20 - DMA Input Buffer Next Pointer
        volatile uint32_t AIFINPTR;  ///< Offset: 0x24 - DMA Input Buffer Current Pointer
        volatile uint32_t AIFOUTPTRNEXT;  ///< Offset: 0x28 - DMA Output Buffer Next Pointer
        volatile uint32_t AIFOUTPTR;  ///< Offset: 0x2C - DMA Output Buffer Current Pointer
        volatile uint32_t STMPCTL;  ///< Offset: 0x34 - SampleStaMP Generator Control Register
        volatile uint32_t STMPXCNTCAPT0;  ///< Offset: 0x38 - Captured XOSC Counter Value, Capture Channel 0
        volatile uint32_t STMPXPER;  ///< Offset: 0x3C - XOSC Period Value
        volatile uint32_t STMPWCNTCAPT0;  ///< Offset: 0x40 - Captured WCLK Counter Value, Capture Channel 0
        volatile uint32_t STMPWPER;  ///< Offset: 0x44 - WCLK Counter Period Value
        volatile uint32_t STMPINTRIG;  ///< Offset: 0x48 - WCLK Counter Trigger Value for Input Pins
        volatile uint32_t STMPOUTTRIG;  ///< Offset: 0x4C - WCLK Counter Trigger Value for Output Pins
        volatile uint32_t STMPWSET;  ///< Offset: 0x50 - WCLK Counter Set Operation
        volatile uint32_t STMPWADD;  ///< Offset: 0x54 - WCLK Counter Add Operation
        volatile uint32_t STMPXPERMIN;  ///< Offset: 0x58 - XOSC Minimum Period Value Minimum Value of STMPXPER
        volatile uint32_t STMPWCNT;  ///< Offset: 0x5C - Current Value of WCNT
        volatile uint32_t STMPXCNT;  ///< Offset: 0x60 - Current Value of XCNT
        volatile uint32_t STMPXCNTCAPT1;  ///< Offset: 0x64 - Captured XOSC Counter Value, Capture Channel 1
        volatile uint32_t STMPWCNTCAPT1;  ///< Offset: 0x68 - Captured WCLK Counter Value, Capture Channel 1
        volatile uint32_t IRQMASK;  ///< Offset: 0x70 - Masked Interrupt Status Register
        volatile uint32_t IRQFLAGS;  ///< Offset: 0x74 - Raw Interrupt Status Register
        volatile uint32_t IRQSET;  ///< Offset: 0x78 - Interrupt Set Register
        volatile uint32_t IRQCLR;  ///< Offset: 0x7C - Interrupt Clear Register
    };

    /// Peripheral instances
    inline Registers* I2S0 = reinterpret_cast<Registers*>(I2S0_BASE);

}

// ============================================================================
// IOC Peripheral
// ============================================================================

namespace ioc {
    /// Base addresses
    constexpr uint32_t IOC_BASE = 0x40081000;

    /// IOC Register structure
    struct Registers {
        volatile uint32_t IOCFG0;  ///< Offset: 0x00 - Configuration of DIO0
        volatile uint32_t IOCFG1;  ///< Offset: 0x04 - Configuration of DIO1
        volatile uint32_t IOCFG2;  ///< Offset: 0x08 - Configuration of DIO2
        volatile uint32_t IOCFG3;  ///< Offset: 0x0C - Configuration of DIO3
        volatile uint32_t IOCFG4;  ///< Offset: 0x10 - Configuration of DIO4
        volatile uint32_t IOCFG5;  ///< Offset: 0x14 - Configuration of DIO5
        volatile uint32_t IOCFG6;  ///< Offset: 0x18 - Configuration of DIO6
        volatile uint32_t IOCFG7;  ///< Offset: 0x1C - Configuration of DIO7
        volatile uint32_t IOCFG8;  ///< Offset: 0x20 - Configuration of DIO8
        volatile uint32_t IOCFG9;  ///< Offset: 0x24 - Configuration of DIO9
        volatile uint32_t IOCFG10;  ///< Offset: 0x28 - Configuration of DIO10
        volatile uint32_t IOCFG11;  ///< Offset: 0x2C - Configuration of DIO11
        volatile uint32_t IOCFG12;  ///< Offset: 0x30 - Configuration of DIO12
        volatile uint32_t IOCFG13;  ///< Offset: 0x34 - Configuration of DIO13
        volatile uint32_t IOCFG14;  ///< Offset: 0x38 - Configuration of DIO14
        volatile uint32_t IOCFG15;  ///< Offset: 0x3C - Configuration of DIO15
        volatile uint32_t IOCFG16;  ///< Offset: 0x40 - Configuration of DIO16
        volatile uint32_t IOCFG17;  ///< Offset: 0x44 - Configuration of DIO17
        volatile uint32_t IOCFG18;  ///< Offset: 0x48 - Configuration of DIO18
        volatile uint32_t IOCFG19;  ///< Offset: 0x4C - Configuration of DIO19
        volatile uint32_t IOCFG20;  ///< Offset: 0x50 - Configuration of DIO20
        volatile uint32_t IOCFG21;  ///< Offset: 0x54 - Configuration of DIO21
        volatile uint32_t IOCFG22;  ///< Offset: 0x58 - Configuration of DIO22
        volatile uint32_t IOCFG23;  ///< Offset: 0x5C - Configuration of DIO23
        volatile uint32_t IOCFG24;  ///< Offset: 0x60 - Configuration of DIO24
        volatile uint32_t IOCFG25;  ///< Offset: 0x64 - Configuration of DIO25
        volatile uint32_t IOCFG26;  ///< Offset: 0x68 - Configuration of DIO26
        volatile uint32_t IOCFG27;  ///< Offset: 0x6C - Configuration of DIO27
        volatile uint32_t IOCFG28;  ///< Offset: 0x70 - Configuration of DIO28
        volatile uint32_t IOCFG29;  ///< Offset: 0x74 - Configuration of DIO29
        volatile uint32_t IOCFG30;  ///< Offset: 0x78 - Configuration of DIO30
        volatile uint32_t IOCFG31;  ///< Offset: 0x7C - Configuration of DIO31
    };

    /// Peripheral instances
    inline Registers* IOC = reinterpret_cast<Registers*>(IOC_BASE);

}

// ============================================================================
// PRCM Peripheral
// ============================================================================

namespace prcm {
    /// Base addresses
    constexpr uint32_t PRCM_BASE = 0x40082000;

    /// PRCM Register structure
    struct Registers {
        volatile uint32_t INFRCLKDIVR;  ///< Offset: 0x00 - Infrastructure Clock Division Factor For Run Mode
        volatile uint32_t INFRCLKDIVS;  ///< Offset: 0x04 - Infrastructure Clock Division Factor For Sleep Mode
        volatile uint32_t INFRCLKDIVDS;  ///< Offset: 0x08 - Infrastructure Clock Division Factor For DeepSleep Mode
        volatile uint32_t VDCTL;  ///< Offset: 0x0C - MCU Voltage Domain Control
        volatile uint32_t CLKLOADCTL;  ///< Offset: 0x28 - Clock Load Control
        volatile uint32_t RFCCLKG;  ///< Offset: 0x2C - RFC Clock Gate
        volatile uint32_t VIMSCLKG;  ///< Offset: 0x30 - VIMS Clock Gate
        volatile uint32_t SECDMACLKGR;  ///< Offset: 0x3C - TRNG, CRYPTO And UDMA Clock Gate For Run Mode
        volatile uint32_t SECDMACLKGS;  ///< Offset: 0x40 - TRNG, CRYPTO And UDMA Clock Gate For Sleep Mode
        volatile uint32_t SECDMACLKGDS;  ///< Offset: 0x44 - TRNG, CRYPTO And UDMA Clock Gate For Deep Sleep Mode
        volatile uint32_t GPIOCLKGR;  ///< Offset: 0x48 - GPIO Clock Gate For Run Mode
        volatile uint32_t GPIOCLKGS;  ///< Offset: 0x4C - GPIO Clock Gate For Sleep Mode
        volatile uint32_t GPIOCLKGDS;  ///< Offset: 0x50 - GPIO Clock Gate For Deep Sleep Mode
        volatile uint32_t GPTCLKGR;  ///< Offset: 0x54 - GPT Clock Gate For Run Mode
        volatile uint32_t GPTCLKGS;  ///< Offset: 0x58 - GPT Clock Gate For Sleep Mode
        volatile uint32_t GPTCLKGDS;  ///< Offset: 0x5C - GPT Clock Gate For Deep Sleep Mode
        volatile uint32_t I2CCLKGR;  ///< Offset: 0x60 - I2C Clock Gate For Run Mode
        volatile uint32_t I2CCLKGS;  ///< Offset: 0x64 - I2C Clock Gate For Sleep Mode
        volatile uint32_t I2CCLKGDS;  ///< Offset: 0x68 - I2C Clock Gate For Deep Sleep Mode
        volatile uint32_t UARTCLKGR;  ///< Offset: 0x6C - UART Clock Gate For Run Mode
        volatile uint32_t UARTCLKGS;  ///< Offset: 0x70 - UART Clock Gate For Sleep Mode
        volatile uint32_t UARTCLKGDS;  ///< Offset: 0x74 - UART Clock Gate For Deep Sleep Mode
        volatile uint32_t SSICLKGR;  ///< Offset: 0x78 - SSI Clock Gate For Run Mode
        volatile uint32_t SSICLKGS;  ///< Offset: 0x7C - SSI Clock Gate For Sleep Mode
        volatile uint32_t SSICLKGDS;  ///< Offset: 0x80 - SSI Clock Gate For Deep Sleep Mode
        volatile uint32_t I2SCLKGR;  ///< Offset: 0x84 - I2S Clock Gate For Run Mode
        volatile uint32_t I2SCLKGS;  ///< Offset: 0x88 - I2S Clock Gate For Sleep Mode
        volatile uint32_t I2SCLKGDS;  ///< Offset: 0x8C - I2S Clock Gate For Deep Sleep Mode
        volatile uint32_t CPUCLKDIV;  ///< Offset: 0xB8 - Internal. Only to be used through TI provided API.
        volatile uint32_t I2SBCLKSEL;  ///< Offset: 0xC8 - I2S Clock Control
        volatile uint32_t GPTCLKDIV;  ///< Offset: 0xCC - GPT Scalar
        volatile uint32_t I2SCLKCTL;  ///< Offset: 0xD0 - I2S Clock Control
        volatile uint32_t I2SMCLKDIV;  ///< Offset: 0xD4 - MCLK Division Ratio
        volatile uint32_t I2SBCLKDIV;  ///< Offset: 0xD8 - BCLK Division Ratio
        volatile uint32_t I2SWCLKDIV;  ///< Offset: 0xDC - WCLK Division Ratio
        volatile uint32_t SWRESET;  ///< Offset: 0x10C - SW Initiated Resets
        volatile uint32_t WARMRESET;  ///< Offset: 0x110 - WARM Reset Control And Status
        volatile uint32_t PDCTL0;  ///< Offset: 0x12C - Power Domain Control
        volatile uint32_t PDCTL0RFC;  ///< Offset: 0x130 - RFC Power Domain Control
        volatile uint32_t PDCTL0SERIAL;  ///< Offset: 0x134 - SERIAL Power Domain Control
        volatile uint32_t PDCTL0PERIPH;  ///< Offset: 0x138 - PERIPH Power Domain Control
        volatile uint32_t PDSTAT0;  ///< Offset: 0x140 - Power Domain Status
        volatile uint32_t PDSTAT0RFC;  ///< Offset: 0x144 - RFC Power Domain Status
        volatile uint32_t PDSTAT0SERIAL;  ///< Offset: 0x148 - SERIAL Power Domain Status
        volatile uint32_t PDSTAT0PERIPH;  ///< Offset: 0x14C - PERIPH Power Domain Status
        volatile uint32_t PDCTL1;  ///< Offset: 0x17C - Power Domain Control
        volatile uint32_t PDCTL1CPU;  ///< Offset: 0x184 - CPU Power Domain Control
        volatile uint32_t PDCTL1RFC;  ///< Offset: 0x188 - RFC Power Domain Control
        volatile uint32_t PDCTL1VIMS;  ///< Offset: 0x18C - VIMS Power Domain Control
        volatile uint32_t PDSTAT1;  ///< Offset: 0x194 - Power Domain Status
        volatile uint32_t PDSTAT1BUS;  ///< Offset: 0x198 - BUS Power Domain Status
        volatile uint32_t PDSTAT1RFC;  ///< Offset: 0x19C - RFC Power Domain Status
        volatile uint32_t PDSTAT1CPU;  ///< Offset: 0x1A0 - CPU Power Domain Status
        volatile uint32_t PDSTAT1VIMS;  ///< Offset: 0x1A4 - VIMS Power Domain Status
        volatile uint32_t RFCMODESEL;  ///< Offset: 0x1D0 - Selected RFC Mode
        volatile uint32_t RAMRETEN;  ///< Offset: 0x224 - Memory Retention Control
    };

    /// Peripheral instances
    inline Registers* PRCM = reinterpret_cast<Registers*>(PRCM_BASE);

}

// ============================================================================
// RFC Peripheral
// ============================================================================

namespace rfc {
    /// Base addresses
    constexpr uint32_t RFC_DBELL_BASE = 0x40041000;
    constexpr uint32_t RFC_RAT_BASE = 0x40043000;

    /// RFC Register structure
    struct Registers {
        volatile uint32_t CMDR;  ///< Offset: 0x00 - Doorbell Command Register
        volatile uint32_t CMDSTA;  ///< Offset: 0x04 - Doorbell Command Status Register
        volatile uint32_t RFHWIFG;  ///< Offset: 0x08 - Interrupt Flags From RF Hardware Modules
        volatile uint32_t RFHWIEN;  ///< Offset: 0x0C - Interrupt Enable For RF Hardware Modules
        volatile uint32_t RFCPEIFG;  ///< Offset: 0x10 - Interrupt Flags For Command and Packet Engine Generated...
        volatile uint32_t RFCPEIEN;  ///< Offset: 0x14 - Interrupt Enable For Command and Packet Engine Generated...
        volatile uint32_t RFCPEISL;  ///< Offset: 0x18 - Interrupt Vector Selection For Command and Packet Engine...
        volatile uint32_t RFACKIFG;  ///< Offset: 0x1C - Doorbell Command Acknowledgement Interrupt Flag
        volatile uint32_t SYSGPOCTL;  ///< Offset: 0x20 - RF Core General Purpose Output Control
    };

    /// Peripheral instances
    inline Registers* RFC_DBELL = reinterpret_cast<Registers*>(RFC_DBELL_BASE);
    inline Registers* RFC_RAT = reinterpret_cast<Registers*>(RFC_RAT_BASE);

}

// ============================================================================
// PWR Peripheral
// ============================================================================

namespace pwr {
    /// Base addresses
    constexpr uint32_t RFC_PWR_BASE = 0x40040000;

    /// PWR Register structure
    struct Registers {
        volatile uint32_t PWMCLKEN;  ///< Offset: 0x00 - RF Core Power Management and Clock Enable
    };

    /// Peripheral instances
    inline Registers* RFC_PWR = reinterpret_cast<Registers*>(RFC_PWR_BASE);

}

// ============================================================================
// SMPH Peripheral
// ============================================================================

namespace smph {
    /// Base addresses
    constexpr uint32_t SMPH_BASE = 0x40084000;

    /// SMPH Register structure
    struct Registers {
        volatile uint32_t SMPH0;  ///< Offset: 0x00 - MCU SEMAPHORE 0
        volatile uint32_t SMPH1;  ///< Offset: 0x04 - MCU SEMAPHORE 1
        volatile uint32_t SMPH2;  ///< Offset: 0x08 - MCU SEMAPHORE 2
        volatile uint32_t SMPH3;  ///< Offset: 0x0C - MCU SEMAPHORE 3
        volatile uint32_t SMPH4;  ///< Offset: 0x10 - MCU SEMAPHORE 4
        volatile uint32_t SMPH5;  ///< Offset: 0x14 - MCU SEMAPHORE 5
        volatile uint32_t SMPH6;  ///< Offset: 0x18 - MCU SEMAPHORE 6
        volatile uint32_t SMPH7;  ///< Offset: 0x1C - MCU SEMAPHORE 7
        volatile uint32_t SMPH8;  ///< Offset: 0x20 - MCU SEMAPHORE 8
        volatile uint32_t SMPH9;  ///< Offset: 0x24 - MCU SEMAPHORE 9
        volatile uint32_t SMPH10;  ///< Offset: 0x28 - MCU SEMAPHORE 10
        volatile uint32_t SMPH11;  ///< Offset: 0x2C - MCU SEMAPHORE 11
        volatile uint32_t SMPH12;  ///< Offset: 0x30 - MCU SEMAPHORE 12
        volatile uint32_t SMPH13;  ///< Offset: 0x34 - MCU SEMAPHORE 13
        volatile uint32_t SMPH14;  ///< Offset: 0x38 - MCU SEMAPHORE 14
        volatile uint32_t SMPH15;  ///< Offset: 0x3C - MCU SEMAPHORE 15
        volatile uint32_t SMPH16;  ///< Offset: 0x40 - MCU SEMAPHORE 16
        volatile uint32_t SMPH17;  ///< Offset: 0x44 - MCU SEMAPHORE 17
        volatile uint32_t SMPH18;  ///< Offset: 0x48 - MCU SEMAPHORE 18
        volatile uint32_t SMPH19;  ///< Offset: 0x4C - MCU SEMAPHORE 19
        volatile uint32_t SMPH20;  ///< Offset: 0x50 - MCU SEMAPHORE 20
        volatile uint32_t SMPH21;  ///< Offset: 0x54 - MCU SEMAPHORE 21
        volatile uint32_t SMPH22;  ///< Offset: 0x58 - MCU SEMAPHORE 22
        volatile uint32_t SMPH23;  ///< Offset: 0x5C - MCU SEMAPHORE 23
        volatile uint32_t SMPH24;  ///< Offset: 0x60 - MCU SEMAPHORE 24
        volatile uint32_t SMPH25;  ///< Offset: 0x64 - MCU SEMAPHORE 25
        volatile uint32_t SMPH26;  ///< Offset: 0x68 - MCU SEMAPHORE 26
        volatile uint32_t SMPH27;  ///< Offset: 0x6C - MCU SEMAPHORE 27
        volatile uint32_t SMPH28;  ///< Offset: 0x70 - MCU SEMAPHORE 28
        volatile uint32_t SMPH29;  ///< Offset: 0x74 - MCU SEMAPHORE 29
        volatile uint32_t SMPH30;  ///< Offset: 0x78 - MCU SEMAPHORE 30
        volatile uint32_t SMPH31;  ///< Offset: 0x7C - MCU SEMAPHORE 31
        volatile uint32_t PEEK0;  ///< Offset: 0x800 - MCU SEMAPHORE 0 ALIAS
        volatile uint32_t PEEK1;  ///< Offset: 0x804 - MCU SEMAPHORE 1 ALIAS
        volatile uint32_t PEEK2;  ///< Offset: 0x808 - MCU SEMAPHORE 2 ALIAS
        volatile uint32_t PEEK3;  ///< Offset: 0x80C - MCU SEMAPHORE 3 ALIAS
        volatile uint32_t PEEK4;  ///< Offset: 0x810 - MCU SEMAPHORE 4 ALIAS
        volatile uint32_t PEEK5;  ///< Offset: 0x814 - MCU SEMAPHORE 5 ALIAS
        volatile uint32_t PEEK6;  ///< Offset: 0x818 - MCU SEMAPHORE 6 ALIAS
        volatile uint32_t PEEK7;  ///< Offset: 0x81C - MCU SEMAPHORE 7 ALIAS
        volatile uint32_t PEEK8;  ///< Offset: 0x820 - MCU SEMAPHORE 8 ALIAS
        volatile uint32_t PEEK9;  ///< Offset: 0x824 - MCU SEMAPHORE 9 ALIAS
        volatile uint32_t PEEK10;  ///< Offset: 0x828 - MCU SEMAPHORE 10 ALIAS
        volatile uint32_t PEEK11;  ///< Offset: 0x82C - MCU SEMAPHORE 11 ALIAS
        volatile uint32_t PEEK12;  ///< Offset: 0x830 - MCU SEMAPHORE 12 ALIAS
        volatile uint32_t PEEK13;  ///< Offset: 0x834 - MCU SEMAPHORE 13 ALIAS
        volatile uint32_t PEEK14;  ///< Offset: 0x838 - MCU SEMAPHORE 14 ALIAS
        volatile uint32_t PEEK15;  ///< Offset: 0x83C - MCU SEMAPHORE 15 ALIAS
        volatile uint32_t PEEK16;  ///< Offset: 0x840 - MCU SEMAPHORE 16 ALIAS
        volatile uint32_t PEEK17;  ///< Offset: 0x844 - MCU SEMAPHORE 17 ALIAS
        volatile uint32_t PEEK18;  ///< Offset: 0x848 - MCU SEMAPHORE 18 ALIAS
        volatile uint32_t PEEK19;  ///< Offset: 0x84C - MCU SEMAPHORE 19 ALIAS
        volatile uint32_t PEEK20;  ///< Offset: 0x850 - MCU SEMAPHORE 20 ALIAS
        volatile uint32_t PEEK21;  ///< Offset: 0x854 - MCU SEMAPHORE 21 ALIAS
        volatile uint32_t PEEK22;  ///< Offset: 0x858 - MCU SEMAPHORE 22 ALIAS
        volatile uint32_t PEEK23;  ///< Offset: 0x85C - MCU SEMAPHORE 23 ALIAS
        volatile uint32_t PEEK24;  ///< Offset: 0x860 - MCU SEMAPHORE 24 ALIAS
        volatile uint32_t PEEK25;  ///< Offset: 0x864 - MCU SEMAPHORE 25 ALIAS
        volatile uint32_t PEEK26;  ///< Offset: 0x868 - MCU SEMAPHORE 26 ALIAS
        volatile uint32_t PEEK27;  ///< Offset: 0x86C - MCU SEMAPHORE 27 ALIAS
        volatile uint32_t PEEK28;  ///< Offset: 0x870 - MCU SEMAPHORE 28 ALIAS
        volatile uint32_t PEEK29;  ///< Offset: 0x874 - MCU SEMAPHORE 29 ALIAS
        volatile uint32_t PEEK30;  ///< Offset: 0x878 - MCU SEMAPHORE 30 ALIAS
        volatile uint32_t PEEK31;  ///< Offset: 0x87C - MCU SEMAPHORE 31 ALIAS
    };

    /// Peripheral instances
    inline Registers* SMPH = reinterpret_cast<Registers*>(SMPH_BASE);

}

// ============================================================================
// SSI0 Peripheral
// ============================================================================

namespace ssi0 {
    /// Base addresses
    constexpr uint32_t SSI0_BASE = 0x40000000;

    /// SSI0 Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - Control 0
        volatile uint32_t CR1;  ///< Offset: 0x04 - Control 1
        volatile uint32_t DR;  ///< Offset: 0x08 - Data 16-bits wide data register: When read, the entry in...
        volatile uint32_t SR;  ///< Offset: 0x0C - Status
        volatile uint32_t CPSR;  ///< Offset: 0x10 - Clock Prescale
        volatile uint32_t IMSC;  ///< Offset: 0x14 - Interrupt Mask Set and Clear
        volatile uint32_t RIS;  ///< Offset: 0x18 - Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x1C - Masked Interrupt Status
        volatile uint32_t ICR;  ///< Offset: 0x20 - Interrupt Clear On a write of 1, the corresponding...
        volatile uint32_t DMACR;  ///< Offset: 0x24 - DMA Control
    };

    /// Peripheral instances
    inline Registers* SSI0 = reinterpret_cast<Registers*>(SSI0_BASE);

}

// ============================================================================
// SSI1 Peripheral
// ============================================================================

namespace ssi1 {
    /// Base addresses
    constexpr uint32_t SSI1_BASE = 0x40008000;

    /// SSI1 Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - Control 0
        volatile uint32_t CR1;  ///< Offset: 0x04 - Control 1
        volatile uint32_t DR;  ///< Offset: 0x08 - Data 16-bits wide data register: When read, the entry in...
        volatile uint32_t SR;  ///< Offset: 0x0C - Status
        volatile uint32_t CPSR;  ///< Offset: 0x10 - Clock Prescale
        volatile uint32_t IMSC;  ///< Offset: 0x14 - Interrupt Mask Set and Clear
        volatile uint32_t RIS;  ///< Offset: 0x18 - Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x1C - Masked Interrupt Status
        volatile uint32_t ICR;  ///< Offset: 0x20 - Interrupt Clear On a write of 1, the corresponding...
        volatile uint32_t DMACR;  ///< Offset: 0x24 - DMA Control
    };

    /// Peripheral instances
    inline Registers* SSI1 = reinterpret_cast<Registers*>(SSI1_BASE);

}

// ============================================================================
// RNG Peripheral
// ============================================================================

namespace rng {
    /// Base addresses
    constexpr uint32_t TRNG_BASE = 0x40028000;

    /// RNG Register structure
    struct Registers {
        volatile uint32_t OUT0;  ///< Offset: 0x00 - Random Number Lower Word Readout Value
        volatile uint32_t OUT1;  ///< Offset: 0x04 - Random Number Upper Word Readout Value
        volatile uint32_t IRQFLAGSTAT;  ///< Offset: 0x08 - Interrupt Status
        volatile uint32_t IRQFLAGMASK;  ///< Offset: 0x0C - Interrupt Mask
        volatile uint32_t IRQFLAGCLR;  ///< Offset: 0x10 - Interrupt Flag Clear
        volatile uint32_t CTL;  ///< Offset: 0x14 - Control
        volatile uint32_t CFG0;  ///< Offset: 0x18 - Configuration 0
        volatile uint32_t ALARMCNT;  ///< Offset: 0x1C - Alarm Control
        volatile uint32_t FROEN;  ///< Offset: 0x20 - FRO Enable
        volatile uint32_t FRODETUNE;  ///< Offset: 0x24 - FRO De-tune Bit
        volatile uint32_t ALARMMASK;  ///< Offset: 0x28 - Alarm Event
        volatile uint32_t ALARMSTOP;  ///< Offset: 0x2C - Alarm Shutdown
        volatile uint32_t LFSR0;  ///< Offset: 0x30 - LFSR Readout Value
        volatile uint32_t LFSR1;  ///< Offset: 0x34 - LFSR Readout Value
        volatile uint32_t LFSR2;  ///< Offset: 0x38 - LFSR Readout Value
        volatile uint32_t HWOPT;  ///< Offset: 0x78 - TRNG Engine Options Information
        volatile uint32_t HWVER0;  ///< Offset: 0x7C - HW Version 0 EIP Number And Core Revision
        volatile uint32_t IRQSTATMASK;  ///< Offset: 0x1FD8 - Interrupt Status After Masking
        volatile uint32_t HWVER1;  ///< Offset: 0x1FE0 - HW Version 1 TRNG Revision Number
        volatile uint32_t IRQSET;  ///< Offset: 0x1FEC - Interrupt Set
        volatile uint32_t SWRESET;  ///< Offset: 0x1FF0 - SW Reset Control
        volatile uint32_t IRQSTAT;  ///< Offset: 0x1FF8 - Interrupt Status
    };

    /// Peripheral instances
    inline Registers* TRNG = reinterpret_cast<Registers*>(TRNG_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART0_BASE = 0x40001000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t DR;  ///< Offset: 0x00 - Data For words to be transmitted: - if the FIFOs are...
        volatile uint32_t RSR;  ///< Offset: 0x04 - Status This register is mapped to the same address as...
        volatile uint32_t ECR;  ///< Offset: 0x04 - Error Clear This register is mapped to the same address...
        volatile uint32_t FR;  ///< Offset: 0x18 - Flag Reads from this register return the UART flags.
        volatile uint32_t IBRD;  ///< Offset: 0x24 - Integer Baud-Rate Divisor If this register is modified...
        volatile uint32_t FBRD;  ///< Offset: 0x28 - Fractional Baud-Rate Divisor If this register is...
        volatile uint32_t LCRH;  ///< Offset: 0x2C - Line Control
        volatile uint32_t CTL;  ///< Offset: 0x30 - Control
        volatile uint32_t IFLS;  ///< Offset: 0x34 - Interrupt FIFO Level Select
        volatile uint32_t IMSC;  ///< Offset: 0x38 - Interrupt Mask Set/Clear
        volatile uint32_t RIS;  ///< Offset: 0x3C - Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x40 - Masked Interrupt Status
        volatile uint32_t ICR;  ///< Offset: 0x44 - Interrupt Clear On a write of 1, the corresponding...
        volatile uint32_t DMACTL;  ///< Offset: 0x48 - DMA Control
    };

    /// Peripheral instances
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t UDMA0_BASE = 0x40020000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t STATUS;  ///< Offset: 0x00 - Status
        volatile uint32_t CFG;  ///< Offset: 0x04 - Configuration
        volatile uint32_t CTRL;  ///< Offset: 0x08 - Channel Control Data Base Pointer
        volatile uint32_t ALTCTRL;  ///< Offset: 0x0C - Channel Alternate Control Data Base Pointer
        volatile uint32_t WAITONREQ;  ///< Offset: 0x10 - Channel Wait On Request Status
        volatile uint32_t SOFTREQ;  ///< Offset: 0x14 - Channel Software Request
        volatile uint32_t SETBURST;  ///< Offset: 0x18 - Channel Set UseBurst
        volatile uint32_t CLEARBURST;  ///< Offset: 0x1C - Channel Clear UseBurst
        volatile uint32_t SETREQMASK;  ///< Offset: 0x20 - Channel Set Request Mask
        volatile uint32_t CLEARREQMASK;  ///< Offset: 0x24 - Clear Channel Request Mask
        volatile uint32_t SETCHANNELEN;  ///< Offset: 0x28 - Set Channel Enable
        volatile uint32_t CLEARCHANNELEN;  ///< Offset: 0x2C - Clear Channel Enable
        volatile uint32_t SETCHNLPRIALT;  ///< Offset: 0x30 - Channel Set Primary-Alternate
        volatile uint32_t CLEARCHNLPRIALT;  ///< Offset: 0x34 - Channel Clear Primary-Alternate
        volatile uint32_t SETCHNLPRIORITY;  ///< Offset: 0x38 - Set Channel Priority
        volatile uint32_t CLEARCHNLPRIORITY;  ///< Offset: 0x3C - Clear Channel Priority
        volatile uint32_t ERROR;  ///< Offset: 0x4C - Error Status and Clear
        volatile uint32_t REQDONE;  ///< Offset: 0x504 - Channel Request Done
        volatile uint32_t DONEMASK;  ///< Offset: 0x520 - Channel Request Done Mask
    };

    /// Peripheral instances
    inline Registers* UDMA0 = reinterpret_cast<Registers*>(UDMA0_BASE);

}

// ============================================================================
// VIMS Peripheral
// ============================================================================

namespace vims {
    /// Base addresses
    constexpr uint32_t VIMS_BASE = 0x40034000;

    /// VIMS Register structure
    struct Registers {
        volatile uint32_t STAT;  ///< Offset: 0x00 - Status Displays current VIMS mode and line buffer status
        volatile uint32_t CTL;  ///< Offset: 0x04 - Control Configure VIMS mode and line buffer settings
    };

    /// Peripheral instances
    inline Registers* VIMS = reinterpret_cast<Registers*>(VIMS_BASE);

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WDT_BASE = 0x40080000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t LOAD;  ///< Offset: 0x00 - Configuration
        volatile uint32_t VALUE;  ///< Offset: 0x04 - Current Count Value
        volatile uint32_t CTL;  ///< Offset: 0x08 - Control
        volatile uint32_t ICR;  ///< Offset: 0x0C - Interrupt Clear
        volatile uint32_t RIS;  ///< Offset: 0x10 - Raw Interrupt Status
        volatile uint32_t MIS;  ///< Offset: 0x14 - Masked Interrupt Status
        volatile uint32_t TEST;  ///< Offset: 0x418 - Test Mode
        volatile uint32_t INT_CAUS;  ///< Offset: 0x41C - Interrupt Cause Test Mode
        volatile uint32_t LOCK;  ///< Offset: 0xC00 - Lock
    };

    /// Peripheral instances
    inline Registers* WDT = reinterpret_cast<Registers*>(WDT_BASE);

}


} // namespace alloy::generated::cc13x0

#endif // ALLOY_GENERATED_CC13X0_PERIPHERALS_HPP