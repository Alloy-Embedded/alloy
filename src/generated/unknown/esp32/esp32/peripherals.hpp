/// Auto-generated code for esp32
/// Generated by Alloy Code Generator
/// Source: espressif_community_esp32.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:00:40
#ifndef ALLOY_GENERATED_ESP32_PERIPHERALS_HPP
#define ALLOY_GENERATED_ESP32_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::esp32 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_crypto = true;
    constexpr uint32_t num_crypto_instances = 3;
    constexpr bool has_hinf = true;
    constexpr uint32_t num_hinf_instances = 1;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 3;
    constexpr bool has_efuse = true;
    constexpr uint32_t num_efuse_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 5;
    constexpr bool has_pcnt = true;
    constexpr uint32_t num_pcnt_instances = 1;
    constexpr bool has_rmt = true;
    constexpr uint32_t num_rmt_instances = 1;
    constexpr bool has_eth = true;
    constexpr uint32_t num_eth_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 3;
    constexpr bool has_tim = true;
    constexpr uint32_t num_tim_instances = 3;
    constexpr bool has_slchost = true;
    constexpr uint32_t num_slchost_instances = 1;
    constexpr bool has_slc = true;
    constexpr uint32_t num_slc_instances = 1;
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 5;
    constexpr bool has_uhci0 = true;
    constexpr uint32_t num_uhci0_instances = 1;
    constexpr bool has_sens = true;
    constexpr uint32_t num_sens_instances = 1;
    constexpr bool has_nrx = true;
    constexpr uint32_t num_nrx_instances = 1;
    constexpr bool has_fe = true;
    constexpr uint32_t num_fe_instances = 1;
    constexpr bool has_bb = true;
    constexpr uint32_t num_bb_instances = 1;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 5;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 4;
    constexpr bool has_sdio = true;
    constexpr uint32_t num_sdio_instances = 1;
    constexpr bool has_uhci1 = true;
    constexpr uint32_t num_uhci1_instances = 1;
    constexpr bool has_io = true;
    constexpr uint32_t num_io_instances = 1;
    constexpr bool has_can = true;
    constexpr uint32_t num_can_instances = 1;
    constexpr bool has_i2s = true;
    constexpr uint32_t num_i2s_instances = 2;
    constexpr bool has_apb = true;
    constexpr uint32_t num_apb_instances = 1;
    constexpr bool has_syscon = true;
    constexpr uint32_t num_syscon_instances = 1;
    constexpr bool has_fe2 = true;
    constexpr uint32_t num_fe2_instances = 1;
    constexpr bool has_bt = true;
    constexpr uint32_t num_bt_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct crypto_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct hinf_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct efuse_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct peripheral_count<struct pcnt_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rmt_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct eth_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct tim_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct slchost_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct slc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct peripheral_count<struct uhci0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sens_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct nrx_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fe_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bb_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 5;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct peripheral_count<struct sdio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct uhci1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct io_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct can_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct i2s_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct apb_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct syscon_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fe2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 3;
    constexpr uint32_t max_gpio_pins = 48;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_uart2 = true;
    constexpr bool has_uart = true;
    constexpr bool has_uart1 = true;
    constexpr bool has_uart0 = true;
}

// ============================================================================
// CRYPTO Peripheral
// ============================================================================

namespace crypto {
    /// Base addresses
    constexpr uint32_t AES_BASE = 0x3FF01000;
    constexpr uint32_t RSA_BASE = 0x3FF02000;
    constexpr uint32_t SHA_BASE = 0x3FF03000;

    /// CRYPTO Register structure
    struct Registers {
        volatile uint32_t START;  ///< Offset: 0x00 - Write 1 to start AES operation
        volatile uint32_t IDLE;  ///< Offset: 0x04 - 0 when AES is busy, 1 otherwise
        volatile uint32_t MODE;  ///< Offset: 0x08 - Selects AES accelerator mode
        volatile uint32_t KEY_0;  ///< Offset: 0x10 - AES Key material 0
        volatile uint32_t KEY_1;  ///< Offset: 0x14 - AES Key material 1
        volatile uint32_t KEY_2;  ///< Offset: 0x18 - AES Key material 2
        volatile uint32_t KEY_3;  ///< Offset: 0x1C - AES Key material 3
        volatile uint32_t KEY_4;  ///< Offset: 0x20 - AES Key material 4
        volatile uint32_t KEY_5;  ///< Offset: 0x24 - AES Key material 5
        volatile uint32_t KEY_6;  ///< Offset: 0x28 - AES Key material 6
        volatile uint32_t KEY_7;  ///< Offset: 0x2C - AES Key material 7
        volatile uint32_t TEXT_0;  ///< Offset: 0x30 - Plaintext and ciphertext register 0
        volatile uint32_t TEXT_1;  ///< Offset: 0x34 - Plaintext and ciphertext register 1
        volatile uint32_t TEXT_2;  ///< Offset: 0x38 - Plaintext and ciphertext register 2
        volatile uint32_t TEXT_3;  ///< Offset: 0x3C - Plaintext and ciphertext register 3
        volatile uint32_t ENDIAN;  ///< Offset: 0x40 - Select AES endian mode
    };

    /// Peripheral instances
    inline Registers* AES = reinterpret_cast<Registers*>(AES_BASE);
    inline Registers* RSA = reinterpret_cast<Registers*>(RSA_BASE);
    inline Registers* SHA = reinterpret_cast<Registers*>(SHA_BASE);

    // Bit definitions
    /// START Register bits
    namespace start_bits {
        constexpr uint32_t START = (1U << 0);  ///< Write 1 to start AES operation
    }

    /// IDLE Register bits
    namespace idle_bits {
        constexpr uint32_t IDLE = (1U << 0);  ///< 0 when AES is busy, 1 otherwise
    }

    /// MODE Register bits
    namespace mode_bits {
        constexpr uint32_t MODE = (3 << 0);  ///< Selects AES accelerator mode
    }

    /// ENDIAN Register bits
    namespace endian_bits {
        constexpr uint32_t MODE = (6 << 0);  ///< Select AES endian mode
    }

}

// ============================================================================
// HINF Peripheral
// ============================================================================

namespace hinf {
    /// Base addresses
    constexpr uint32_t HINF_BASE = 0x3FF4B000;

    /// HINF Register structure
    struct Registers {
        volatile uint32_t CFG_DATA0;  ///< Offset: 0x00 - HINF_CFG_DATA0
        volatile uint32_t CFG_DATA1;  ///< Offset: 0x04 - HINF_CFG_DATA1
        volatile uint32_t CFG_DATA7;  ///< Offset: 0x1C - HINF_CFG_DATA7
        volatile uint32_t CIS_CONF0;  ///< Offset: 0x20 - HINF_CIS_CONF0
        volatile uint32_t CIS_CONF1;  ///< Offset: 0x24 - HINF_CIS_CONF1
        volatile uint32_t CIS_CONF2;  ///< Offset: 0x28 - HINF_CIS_CONF2
        volatile uint32_t CIS_CONF3;  ///< Offset: 0x2C - HINF_CIS_CONF3
        volatile uint32_t CIS_CONF4;  ///< Offset: 0x30 - HINF_CIS_CONF4
        volatile uint32_t CIS_CONF5;  ///< Offset: 0x34 - HINF_CIS_CONF5
        volatile uint32_t CIS_CONF6;  ///< Offset: 0x38 - HINF_CIS_CONF6
        volatile uint32_t CIS_CONF7;  ///< Offset: 0x3C - HINF_CIS_CONF7
        volatile uint32_t CFG_DATA16;  ///< Offset: 0x40 - HINF_CFG_DATA16
        volatile uint32_t DATE;  ///< Offset: 0xFC - HINF_DATE
    };

    /// Peripheral instances
    inline Registers* HINF = reinterpret_cast<Registers*>(HINF_BASE);

    // Bit definitions
    /// CFG_DATA0 Register bits
    namespace cfg_data0_bits {
        constexpr uint32_t DEVICE_ID_FN1 = (16 << 16);  ///< DEVICE_ID_FN1
        constexpr uint32_t USER_ID_FN1 = (16 << 0);  ///< USER_ID_FN1
    }

    /// CFG_DATA1 Register bits
    namespace cfg_data1_bits {
        constexpr uint32_t SDIO20_CONF1 = (3 << 29);  ///< SDIO20_CONF1
        constexpr uint32_t FUNC2_EPS = (1U << 28);  ///< FUNC2_EPS
        constexpr uint32_t SDIO_VER = (12 << 16);  ///< SDIO_VER
        constexpr uint32_t SDIO20_CONF0 = (4 << 12);  ///< SDIO20_CONF0
        constexpr uint32_t IOENABLE1 = (1U << 11);  ///< IOENABLE1
        constexpr uint32_t EMP = (1U << 10);  ///< EMP
        constexpr uint32_t FUNC1_EPS = (1U << 9);  ///< FUNC1_EPS
        constexpr uint32_t CD_DISABLE = (1U << 8);  ///< CD_DISABLE
        constexpr uint32_t IOENABLE2 = (1U << 7);  ///< IOENABLE2
        constexpr uint32_t SDIO_INT_MASK = (1U << 6);  ///< SDIO_INT_MASK
        constexpr uint32_t SDIO_IOREADY2 = (1U << 5);  ///< SDIO_IOREADY2
        constexpr uint32_t SDIO_CD_ENABLE = (1U << 4);  ///< SDIO_CD_ENABLE
        constexpr uint32_t HIGHSPEED_MODE = (1U << 3);  ///< HIGHSPEED_MODE
        constexpr uint32_t HIGHSPEED_ENABLE = (1U << 2);  ///< HIGHSPEED_ENABLE
        constexpr uint32_t SDIO_IOREADY1 = (1U << 1);  ///< SDIO_IOREADY1
        constexpr uint32_t SDIO_ENABLE = (1U << 0);  ///< SDIO_ENABLE
    }

    /// CFG_DATA7 Register bits
    namespace cfg_data7_bits {
        constexpr uint32_t SDIO_IOREADY0 = (1U << 17);  ///< SDIO_IOREADY0
        constexpr uint32_t SDIO_RST = (1U << 16);  ///< SDIO_RST
        constexpr uint32_t CHIP_STATE = (8 << 8);  ///< CHIP_STATE
        constexpr uint32_t PIN_STATE = (8 << 0);  ///< PIN_STATE
    }

    /// CIS_CONF0 Register bits
    namespace cis_conf0_bits {
        constexpr uint32_t CIS_CONF_W0 = (32 << 0);  ///< CIS_CONF_W0
    }

    /// CIS_CONF1 Register bits
    namespace cis_conf1_bits {
        constexpr uint32_t CIS_CONF_W1 = (32 << 0);  ///< CIS_CONF_W1
    }

    /// CIS_CONF2 Register bits
    namespace cis_conf2_bits {
        constexpr uint32_t CIS_CONF_W2 = (32 << 0);  ///< CIS_CONF_W2
    }

    /// CIS_CONF3 Register bits
    namespace cis_conf3_bits {
        constexpr uint32_t CIS_CONF_W3 = (32 << 0);  ///< CIS_CONF_W3
    }

    /// CIS_CONF4 Register bits
    namespace cis_conf4_bits {
        constexpr uint32_t CIS_CONF_W4 = (32 << 0);  ///< CIS_CONF_W4
    }

    /// CIS_CONF5 Register bits
    namespace cis_conf5_bits {
        constexpr uint32_t CIS_CONF_W5 = (32 << 0);  ///< CIS_CONF_W5
    }

    /// CIS_CONF6 Register bits
    namespace cis_conf6_bits {
        constexpr uint32_t CIS_CONF_W6 = (32 << 0);  ///< CIS_CONF_W6
    }

    /// CIS_CONF7 Register bits
    namespace cis_conf7_bits {
        constexpr uint32_t CIS_CONF_W7 = (32 << 0);  ///< CIS_CONF_W7
    }

    /// CFG_DATA16 Register bits
    namespace cfg_data16_bits {
        constexpr uint32_t DEVICE_ID_FN2 = (16 << 16);  ///< DEVICE_ID_FN2
        constexpr uint32_t USER_ID_FN2 = (16 << 0);  ///< USER_ID_FN2
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t SDIO_DATE = (32 << 0);  ///< SDIO_DATE
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C1_BASE = 0x3FF67000;
    constexpr uint32_t I2C0_BASE = 0x3FF53000;
    constexpr uint32_t RTC_I2C_BASE = 0x3FF48C00;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t SCL_LOW_PERIOD;  ///< Offset: 0x00 - RTC_I2C_SCL_LOW_PERIOD
        volatile uint32_t CTRL;  ///< Offset: 0x04 - RTC_I2C_CTRL
        volatile uint32_t DEBUG_STATUS;  ///< Offset: 0x08 - RTC_I2C_DEBUG_STATUS
        volatile uint32_t TIMEOUT;  ///< Offset: 0x0C - RTC_I2C_TIMEOUT
        volatile uint32_t SLAVE_ADDR;  ///< Offset: 0x10 - RTC_I2C_SLAVE_ADDR
        volatile uint32_t INT_RAW;  ///< Offset: 0x20 - RTC_I2C_INT_RAW
        volatile uint32_t INT_CLR;  ///< Offset: 0x24 - RTC_I2C_INT_CLR
        volatile uint32_t SDA_DUTY;  ///< Offset: 0x30 - RTC_I2C_SDA_DUTY
        volatile uint32_t SCL_HIGH_PERIOD;  ///< Offset: 0x38 - RTC_I2C_SCL_HIGH_PERIOD
        volatile uint32_t SCL_START_PERIOD;  ///< Offset: 0x40 - RTC_I2C_SCL_START_PERIOD
        volatile uint32_t SCL_STOP_PERIOD;  ///< Offset: 0x44 - RTC_I2C_SCL_STOP_PERIOD
    };

    /// Peripheral instances
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);
    inline Registers* I2C0 = reinterpret_cast<Registers*>(I2C0_BASE);
    inline Registers* RTC_I2C = reinterpret_cast<Registers*>(RTC_I2C_BASE);

    // Bit definitions
    /// SCL_LOW_PERIOD Register bits
    namespace scl_low_period_bits {
        constexpr uint32_t SCL_LOW_PERIOD = (19 << 0);  ///< SCL_LOW_PERIOD
    }

    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t RX_LSB_FIRST = (1U << 7);  ///< RX_LSB_FIRST
        constexpr uint32_t TX_LSB_FIRST = (1U << 6);  ///< TX_LSB_FIRST
        constexpr uint32_t TRANS_START = (1U << 5);  ///< TRANS_START
        constexpr uint32_t MS_MODE = (1U << 4);  ///< MS_MODE
        constexpr uint32_t SCL_FORCE_OUT = (1U << 1);  ///< SCL_FORCE_OUT
        constexpr uint32_t SDA_FORCE_OUT = (1U << 0);  ///< SDA_FORCE_OUT
    }

    /// DEBUG_STATUS Register bits
    namespace debug_status_bits {
        constexpr uint32_t SCL_STATE = (3 << 28);  ///< SCL_STATE
        constexpr uint32_t MAIN_STATE = (3 << 25);  ///< MAIN_STATE
        constexpr uint32_t BYTE_TRANS = (1U << 6);  ///< BYTE_TRANS
        constexpr uint32_t SLAVE_ADDR_MATCH = (1U << 5);  ///< SLAVE_ADDR_MATCH
        constexpr uint32_t BUS_BUSY = (1U << 4);  ///< BUS_BUSY
        constexpr uint32_t ARB_LOST = (1U << 3);  ///< ARB_LOST
        constexpr uint32_t TIMED_OUT = (1U << 2);  ///< TIMED_OUT
        constexpr uint32_t SLAVE_RW = (1U << 1);  ///< SLAVE_RW
        constexpr uint32_t ACK_VAL = (1U << 0);  ///< ACK_VAL
    }

    /// TIMEOUT Register bits
    namespace timeout_bits {
        constexpr uint32_t TIMEOUT = (20 << 0);  ///< TIMEOUT
    }

    /// SLAVE_ADDR Register bits
    namespace slave_addr_bits {
        constexpr uint32_t SLAVE_ADDR_10BIT = (1U << 31);  ///< SLAVE_ADDR_10BIT
        constexpr uint32_t SLAVE_ADDR = (15 << 0);  ///< SLAVE_ADDR
    }

    /// INT_RAW Register bits
    namespace int_raw_bits {
        constexpr uint32_t TIME_OUT_INT_RAW = (1U << 7);  ///< TIME_OUT_INT_RAW
        constexpr uint32_t TRANS_COMPLETE_INT_RAW = (1U << 6);  ///< TRANS_COMPLETE_INT_RAW
        constexpr uint32_t MASTER_TRANS_COMPLETE_INT_RAW = (1U << 5);  ///< MASTER_TRANS_COMPLETE_INT_RAW
        constexpr uint32_t ARBITRATION_LOST_INT_RAW = (1U << 4);  ///< ARBITRATION_LOST_INT_RAW
        constexpr uint32_t SLAVE_TRANS_COMPLETE_INT_RAW = (1U << 3);  ///< SLAVE_TRANS_COMPLETE_INT_RAW
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t TIME_OUT_INT_CLR = (1U << 8);  ///< TIME_OUT_INT_CLR
        constexpr uint32_t TRANS_COMPLETE_INT_CLR = (1U << 7);  ///< TRANS_COMPLETE_INT_CLR
        constexpr uint32_t MASTER_TRANS_COMPLETE_INT_CLR = (1U << 6);  ///< MASTER_TRANS_COMPLETE_INT_CLR
        constexpr uint32_t ARBITRATION_LOST_INT_CLR = (1U << 5);  ///< ARBITRATION_LOST_INT_CLR
        constexpr uint32_t SLAVE_TRANS_COMPLETE_INT_CLR = (1U << 4);  ///< SLAVE_TRANS_COMPLETE_INT_CLR
    }

    /// SDA_DUTY Register bits
    namespace sda_duty_bits {
        constexpr uint32_t SDA_DUTY = (20 << 0);  ///< SDA_DUTY
    }

    /// SCL_HIGH_PERIOD Register bits
    namespace scl_high_period_bits {
        constexpr uint32_t SCL_HIGH_PERIOD = (20 << 0);  ///< SCL_HIGH_PERIOD
    }

    /// SCL_START_PERIOD Register bits
    namespace scl_start_period_bits {
        constexpr uint32_t SCL_START_PERIOD = (20 << 0);  ///< SCL_START_PERIOD
    }

    /// SCL_STOP_PERIOD Register bits
    namespace scl_stop_period_bits {
        constexpr uint32_t SCL_STOP_PERIOD = (20 << 0);  ///< SCL_STOP_PERIOD
    }

}

// ============================================================================
// EFUSE Peripheral
// ============================================================================

namespace efuse {
    /// Base addresses
    constexpr uint32_t EFUSE_BASE = 0x3FF5A000;

    /// EFUSE Register structure
    struct Registers {
        volatile uint32_t BLK0_RDATA0;  ///< Offset: 0x00 - EFUSE_BLK0_RDATA0
        volatile uint32_t BLK0_RDATA1;  ///< Offset: 0x04 - EFUSE_BLK0_RDATA1
        volatile uint32_t BLK0_RDATA2;  ///< Offset: 0x08 - EFUSE_BLK0_RDATA2
        volatile uint32_t BLK0_RDATA3;  ///< Offset: 0x0C - EFUSE_BLK0_RDATA3
        volatile uint32_t BLK0_RDATA4;  ///< Offset: 0x10 - EFUSE_BLK0_RDATA4
        volatile uint32_t BLK0_RDATA5;  ///< Offset: 0x14 - EFUSE_BLK0_RDATA5
        volatile uint32_t BLK0_RDATA6;  ///< Offset: 0x18 - EFUSE_BLK0_RDATA6
        volatile uint32_t BLK0_WDATA0;  ///< Offset: 0x1C - EFUSE_BLK0_WDATA0
        volatile uint32_t BLK0_WDATA1;  ///< Offset: 0x20 - EFUSE_BLK0_WDATA1
        volatile uint32_t BLK0_WDATA2;  ///< Offset: 0x24 - EFUSE_BLK0_WDATA2
        volatile uint32_t BLK0_WDATA3;  ///< Offset: 0x28 - EFUSE_BLK0_WDATA3
        volatile uint32_t BLK0_WDATA4;  ///< Offset: 0x2C - EFUSE_BLK0_WDATA4
        volatile uint32_t BLK0_WDATA5;  ///< Offset: 0x30 - EFUSE_BLK0_WDATA5
        volatile uint32_t BLK0_WDATA6;  ///< Offset: 0x34 - EFUSE_BLK0_WDATA6
        volatile uint32_t BLK1_RDATA0;  ///< Offset: 0x38 - EFUSE_BLK1_RDATA0
        volatile uint32_t BLK1_RDATA1;  ///< Offset: 0x3C - EFUSE_BLK1_RDATA1
        volatile uint32_t BLK1_RDATA2;  ///< Offset: 0x40 - EFUSE_BLK1_RDATA2
        volatile uint32_t BLK1_RDATA3;  ///< Offset: 0x44 - EFUSE_BLK1_RDATA3
        volatile uint32_t BLK1_RDATA4;  ///< Offset: 0x48 - EFUSE_BLK1_RDATA4
        volatile uint32_t BLK1_RDATA5;  ///< Offset: 0x4C - EFUSE_BLK1_RDATA5
        volatile uint32_t BLK1_RDATA6;  ///< Offset: 0x50 - EFUSE_BLK1_RDATA6
        volatile uint32_t BLK1_RDATA7;  ///< Offset: 0x54 - EFUSE_BLK1_RDATA7
        volatile uint32_t BLK2_RDATA0;  ///< Offset: 0x58 - EFUSE_BLK2_RDATA0
        volatile uint32_t BLK2_RDATA1;  ///< Offset: 0x5C - EFUSE_BLK2_RDATA1
        volatile uint32_t BLK2_RDATA2;  ///< Offset: 0x60 - EFUSE_BLK2_RDATA2
        volatile uint32_t BLK2_RDATA3;  ///< Offset: 0x64 - EFUSE_BLK2_RDATA3
        volatile uint32_t BLK2_RDATA4;  ///< Offset: 0x68 - EFUSE_BLK2_RDATA4
        volatile uint32_t BLK2_RDATA5;  ///< Offset: 0x6C - EFUSE_BLK2_RDATA5
        volatile uint32_t BLK2_RDATA6;  ///< Offset: 0x70 - EFUSE_BLK2_RDATA6
        volatile uint32_t BLK2_RDATA7;  ///< Offset: 0x74 - EFUSE_BLK2_RDATA7
        volatile uint32_t BLK3_RDATA0;  ///< Offset: 0x78 - EFUSE_BLK3_RDATA0
        volatile uint32_t BLK3_RDATA1;  ///< Offset: 0x7C - EFUSE_BLK3_RDATA1
        volatile uint32_t BLK3_RDATA2;  ///< Offset: 0x80 - EFUSE_BLK3_RDATA2
        volatile uint32_t BLK3_RDATA3;  ///< Offset: 0x84 - EFUSE_BLK3_RDATA3
        volatile uint32_t BLK3_RDATA4;  ///< Offset: 0x88 - EFUSE_BLK3_RDATA4
        volatile uint32_t BLK3_RDATA5;  ///< Offset: 0x8C - EFUSE_BLK3_RDATA5
        volatile uint32_t BLK3_RDATA6;  ///< Offset: 0x90 - EFUSE_BLK3_RDATA6
        volatile uint32_t BLK3_RDATA7;  ///< Offset: 0x94 - EFUSE_BLK3_RDATA7
        volatile uint32_t BLK1_WDATA0;  ///< Offset: 0x98 - EFUSE_BLK1_WDATA0
        volatile uint32_t BLK1_WDATA1;  ///< Offset: 0x9C - EFUSE_BLK1_WDATA1
        volatile uint32_t BLK1_WDATA2;  ///< Offset: 0xA0 - EFUSE_BLK1_WDATA2
        volatile uint32_t BLK1_WDATA3;  ///< Offset: 0xA4 - EFUSE_BLK1_WDATA3
        volatile uint32_t BLK1_WDATA4;  ///< Offset: 0xA8 - EFUSE_BLK1_WDATA4
        volatile uint32_t BLK1_WDATA5;  ///< Offset: 0xAC - EFUSE_BLK1_WDATA5
        volatile uint32_t BLK1_WDATA6;  ///< Offset: 0xB0 - EFUSE_BLK1_WDATA6
        volatile uint32_t BLK1_WDATA7;  ///< Offset: 0xB4 - EFUSE_BLK1_WDATA7
        volatile uint32_t BLK2_WDATA0;  ///< Offset: 0xB8 - EFUSE_BLK2_WDATA0
        volatile uint32_t BLK2_WDATA1;  ///< Offset: 0xBC - EFUSE_BLK2_WDATA1
        volatile uint32_t BLK2_WDATA2;  ///< Offset: 0xC0 - EFUSE_BLK2_WDATA2
        volatile uint32_t BLK2_WDATA3;  ///< Offset: 0xC4 - EFUSE_BLK2_WDATA3
        volatile uint32_t BLK2_WDATA4;  ///< Offset: 0xC8 - EFUSE_BLK2_WDATA4
        volatile uint32_t BLK2_WDATA5;  ///< Offset: 0xCC - EFUSE_BLK2_WDATA5
        volatile uint32_t BLK2_WDATA6;  ///< Offset: 0xD0 - EFUSE_BLK2_WDATA6
        volatile uint32_t BLK2_WDATA7;  ///< Offset: 0xD4 - EFUSE_BLK2_WDATA7
        volatile uint32_t BLK3_WDATA0;  ///< Offset: 0xD8 - EFUSE_BLK3_WDATA0
        volatile uint32_t BLK3_WDATA1;  ///< Offset: 0xDC - EFUSE_BLK3_WDATA1
        volatile uint32_t BLK3_WDATA2;  ///< Offset: 0xE0 - EFUSE_BLK3_WDATA2
        volatile uint32_t BLK3_WDATA3;  ///< Offset: 0xE4 - EFUSE_BLK3_WDATA3
        volatile uint32_t BLK3_WDATA4;  ///< Offset: 0xE8 - EFUSE_BLK3_WDATA4
        volatile uint32_t BLK3_WDATA5;  ///< Offset: 0xEC - EFUSE_BLK3_WDATA5
        volatile uint32_t BLK3_WDATA6;  ///< Offset: 0xF0 - EFUSE_BLK3_WDATA6
        volatile uint32_t BLK3_WDATA7;  ///< Offset: 0xF4 - EFUSE_BLK3_WDATA7
        volatile uint32_t CLK;  ///< Offset: 0xF8 - EFUSE_CLK
        volatile uint32_t CONF;  ///< Offset: 0xFC - EFUSE_CONF
        volatile uint32_t STATUS;  ///< Offset: 0x100 - EFUSE_STATUS
        volatile uint32_t CMD;  ///< Offset: 0x104 - EFUSE_CMD
        volatile uint32_t INT_RAW;  ///< Offset: 0x108 - EFUSE_INT_RAW
        volatile uint32_t INT_ST;  ///< Offset: 0x10C - EFUSE_INT_ST
        volatile uint32_t INT_ENA;  ///< Offset: 0x110 - EFUSE_INT_ENA
        volatile uint32_t INT_CLR;  ///< Offset: 0x114 - EFUSE_INT_CLR
        volatile uint32_t DAC_CONF;  ///< Offset: 0x118 - EFUSE_DAC_CONF
        volatile uint32_t DEC_STATUS;  ///< Offset: 0x11C - EFUSE_DEC_STATUS
        volatile uint32_t DATE;  ///< Offset: 0x1FC - EFUSE_DATE
    };

    /// Peripheral instances
    inline Registers* EFUSE = reinterpret_cast<Registers*>(EFUSE_BASE);

    // Bit definitions
    /// BLK0_RDATA0 Register bits
    namespace blk0_rdata0_bits {
        constexpr uint32_t RD_FLASH_CRYPT_CNT = (7 << 20);  ///< RD_FLASH_CRYPT_CNT
        constexpr uint32_t RD_EFUSE_RD_DIS = (4 << 16);  ///< RD_EFUSE_RD_DIS
    }

    /// BLK0_RDATA1 Register bits
    namespace blk0_rdata1_bits {
        constexpr uint32_t RD_WIFI_MAC_CRC_LOW = (32 << 0);  ///< RD_WIFI_MAC_CRC_LOW
    }

    /// BLK0_RDATA2 Register bits
    namespace blk0_rdata2_bits {
        constexpr uint32_t RD_WIFI_MAC_CRC_HIGH = (24 << 0);  ///< RD_WIFI_MAC_CRC_HIGH
    }

    /// BLK0_RDATA3 Register bits
    namespace blk0_rdata3_bits {
        constexpr uint32_t RD_CHIP_VER_REV1 = (1U << 15);  ///< RD_CHIP_VER_REV1
        constexpr uint32_t RD_CHIP_CPU_FREQ_RATED = (1U << 13);  ///< RD_CHIP_CPU_FREQ_RATED
        constexpr uint32_t RD_CHIP_CPU_FREQ_LOW = (1U << 12);  ///< RD_CHIP_CPU_FREQ_LOW
        constexpr uint32_t RD_CHIP_VER_PKG = (3 << 9);  ///< RD_CHIP_VER_PKG
        constexpr uint32_t RD_SPI_PAD_CONFIG_HD = (5 << 4);  ///< RD_SPI_PAD_CONFIG_HD
        constexpr uint32_t RD_CHIP_VER_DIS_CACHE = (1U << 3);  ///< RD_CHIP_VER_DIS_CACHE
        constexpr uint32_t RD_CHIP_VER_32PAD = (1U << 2);  ///< RD_CHIP_VER_32PAD
        constexpr uint32_t RD_CHIP_VER_DIS_BT = (1U << 1);  ///< RD_CHIP_VER_DIS_BT
        constexpr uint32_t RD_CHIP_VER_DIS_APP_CPU = (1U << 0);  ///< RD_CHIP_VER_DIS_APP_CPU
    }

    /// BLK0_RDATA4 Register bits
    namespace blk0_rdata4_bits {
        constexpr uint32_t RD_SDIO_FORCE = (1U << 16);  ///< RD_SDIO_FORCE
        constexpr uint32_t RD_SDIO_TIEH = (1U << 15);  ///< RD_SDIO_TIEH
        constexpr uint32_t RD_XPD_SDIO_REG = (1U << 14);  ///< RD_XPD_SDIO_REG
        constexpr uint32_t RD_ADC_VREF = (5 << 8);  ///< RD_ADC_VREF
        constexpr uint32_t RD_SDIO_DREFL = (2 << 12);  ///< RD_SDIO_DREFL
        constexpr uint32_t RD_SDIO_DREFM = (2 << 10);  ///< RD_SDIO_DREFM
        constexpr uint32_t RD_SDIO_DREFH = (2 << 8);  ///< RD_SDIO_DREFH
        constexpr uint32_t RD_CK8M_FREQ = (8 << 0);  ///< RD_CK8M_FREQ
    }

    /// BLK0_RDATA5 Register bits
    namespace blk0_rdata5_bits {
        constexpr uint32_t RD_FLASH_CRYPT_CONFIG = (4 << 28);  ///< RD_FLASH_CRYPT_CONFIG
        constexpr uint32_t RD_INST_CONFIG = (8 << 20);  ///< RD_INST_CONFIG
        constexpr uint32_t RD_SPI_PAD_CONFIG_D = (5 << 10);  ///< RD_SPI_PAD_CONFIG_D
        constexpr uint32_t RD_SPI_PAD_CONFIG_Q = (5 << 5);  ///< RD_SPI_PAD_CONFIG_Q
        constexpr uint32_t RD_SPI_PAD_CONFIG_CLK = (5 << 0);  ///< RD_SPI_PAD_CONFIG_CLK
    }

    /// BLK0_RDATA6 Register bits
    namespace blk0_rdata6_bits {
        constexpr uint32_t RD_KEY_STATUS = (1U << 10);  ///< RD_KEY_STATUS
        constexpr uint32_t RD_DISABLE_DL_CACHE = (1U << 9);  ///< RD_DISABLE_DL_CACHE
        constexpr uint32_t RD_DISABLE_DL_DECRYPT = (1U << 8);  ///< RD_DISABLE_DL_DECRYPT
        constexpr uint32_t RD_DISABLE_DL_ENCRYPT = (1U << 7);  ///< RD_DISABLE_DL_ENCRYPT
        constexpr uint32_t RD_DISABLE_JTAG = (1U << 6);  ///< RD_DISABLE_JTAG
        constexpr uint32_t RD_ABS_DONE_1 = (1U << 5);  ///< RD_ABS_DONE_1
        constexpr uint32_t RD_ABS_DONE_0 = (1U << 4);  ///< RD_ABS_DONE_0
        constexpr uint32_t RD_DISABLE_SDIO_HOST = (1U << 3);  ///< RD_DISABLE_SDIO_HOST
        constexpr uint32_t RD_CONSOLE_DEBUG_DISABLE = (1U << 2);  ///< RD_CONSOLE_DEBUG_DISABLE
        constexpr uint32_t RD_CODING_SCHEME = (2 << 0);  ///< RD_CODING_SCHEME
    }

    /// BLK0_WDATA0 Register bits
    namespace blk0_wdata0_bits {
        constexpr uint32_t FLASH_CRYPT_CNT = (7 << 20);  ///< FLASH_CRYPT_CNT
        constexpr uint32_t RD_DIS = (4 << 16);  ///< RD_DIS
        constexpr uint32_t WR_DIS = (16 << 0);  ///< WR_DIS
    }

    /// BLK0_WDATA1 Register bits
    namespace blk0_wdata1_bits {
        constexpr uint32_t WIFI_MAC_CRC_LOW = (32 << 0);  ///< WIFI_MAC_CRC_LOW
    }

    /// BLK0_WDATA2 Register bits
    namespace blk0_wdata2_bits {
        constexpr uint32_t WIFI_MAC_CRC_HIGH = (24 << 0);  ///< WIFI_MAC_CRC_HIGH
    }

    /// BLK0_WDATA3 Register bits
    namespace blk0_wdata3_bits {
        constexpr uint32_t CHIP_VER_REV1 = (1U << 15);  ///< CHIP_VER_REV1
        constexpr uint32_t CHIP_CPU_FREQ_RATED = (1U << 13);  ///< CHIP_CPU_FREQ_RATED
        constexpr uint32_t CHIP_CPU_FREQ_LOW = (1U << 12);  ///< CHIP_CPU_FREQ_LOW
        constexpr uint32_t CHIP_VER_PKG = (3 << 9);  ///< CHIP_VER_PKG
        constexpr uint32_t SPI_PAD_CONFIG_HD = (5 << 4);  ///< SPI_PAD_CONFIG_HD
        constexpr uint32_t CHIP_VER_DIS_CACHE = (1U << 3);  ///< CHIP_VER_DIS_CACHE
        constexpr uint32_t CHIP_VER_32PAD = (1U << 2);  ///< CHIP_VER_32PAD
        constexpr uint32_t CHIP_VER_DIS_BT = (1U << 1);  ///< CHIP_VER_DIS_BT
        constexpr uint32_t CHIP_VER_DIS_APP_CPU = (1U << 0);  ///< CHIP_VER_DIS_APP_CPU
    }

    /// BLK0_WDATA4 Register bits
    namespace blk0_wdata4_bits {
        constexpr uint32_t SDIO_FORCE = (1U << 16);  ///< SDIO_FORCE
        constexpr uint32_t SDIO_TIEH = (1U << 15);  ///< SDIO_TIEH
        constexpr uint32_t XPD_SDIO_REG = (1U << 14);  ///< XPD_SDIO_REG
        constexpr uint32_t ADC_VREF = (5 << 8);  ///< ADC_VREF
        constexpr uint32_t SDIO_DREFL = (2 << 12);  ///< SDIO_DREFL
        constexpr uint32_t SDIO_DREFM = (2 << 10);  ///< SDIO_DREFM
        constexpr uint32_t SDIO_DREFH = (2 << 8);  ///< SDIO_DREFH
        constexpr uint32_t CK8M_FREQ = (8 << 0);  ///< CK8M_FREQ
    }

    /// BLK0_WDATA5 Register bits
    namespace blk0_wdata5_bits {
        constexpr uint32_t FLASH_CRYPT_CONFIG = (4 << 28);  ///< FLASH_CRYPT_CONFIG
        constexpr uint32_t INST_CONFIG = (8 << 20);  ///< INST_CONFIG
        constexpr uint32_t SPI_PAD_CONFIG_D = (5 << 10);  ///< SPI_PAD_CONFIG_D
        constexpr uint32_t SPI_PAD_CONFIG_Q = (5 << 5);  ///< SPI_PAD_CONFIG_Q
        constexpr uint32_t SPI_PAD_CONFIG_CLK = (5 << 0);  ///< SPI_PAD_CONFIG_CLK
    }

    /// BLK0_WDATA6 Register bits
    namespace blk0_wdata6_bits {
        constexpr uint32_t KEY_STATUS = (1U << 10);  ///< KEY_STATUS
        constexpr uint32_t DISABLE_DL_CACHE = (1U << 9);  ///< DISABLE_DL_CACHE
        constexpr uint32_t DISABLE_DL_DECRYPT = (1U << 8);  ///< DISABLE_DL_DECRYPT
        constexpr uint32_t DISABLE_DL_ENCRYPT = (1U << 7);  ///< DISABLE_DL_ENCRYPT
        constexpr uint32_t DISABLE_JTAG = (1U << 6);  ///< DISABLE_JTAG
        constexpr uint32_t ABS_DONE_1 = (1U << 5);  ///< ABS_DONE_1
        constexpr uint32_t ABS_DONE_0 = (1U << 4);  ///< ABS_DONE_0
        constexpr uint32_t DISABLE_SDIO_HOST = (1U << 3);  ///< DISABLE_SDIO_HOST
        constexpr uint32_t CONSOLE_DEBUG_DISABLE = (1U << 2);  ///< CONSOLE_DEBUG_DISABLE
        constexpr uint32_t CODING_SCHEME = (2 << 0);  ///< CODING_SCHEME
    }

    /// BLK1_RDATA0 Register bits
    namespace blk1_rdata0_bits {
        constexpr uint32_t BLK1_DOUT0 = (32 << 0);  ///< BLK1_DOUT0
    }

    /// BLK1_RDATA1 Register bits
    namespace blk1_rdata1_bits {
        constexpr uint32_t BLK1_DOUT1 = (32 << 0);  ///< BLK1_DOUT1
    }

    /// BLK1_RDATA2 Register bits
    namespace blk1_rdata2_bits {
        constexpr uint32_t BLK1_DOUT2 = (32 << 0);  ///< BLK1_DOUT2
    }

    /// BLK1_RDATA3 Register bits
    namespace blk1_rdata3_bits {
        constexpr uint32_t BLK1_DOUT3 = (32 << 0);  ///< BLK1_DOUT3
    }

    /// BLK1_RDATA4 Register bits
    namespace blk1_rdata4_bits {
        constexpr uint32_t BLK1_DOUT4 = (32 << 0);  ///< BLK1_DOUT4
    }

    /// BLK1_RDATA5 Register bits
    namespace blk1_rdata5_bits {
        constexpr uint32_t BLK1_DOUT5 = (32 << 0);  ///< BLK1_DOUT5
    }

    /// BLK1_RDATA6 Register bits
    namespace blk1_rdata6_bits {
        constexpr uint32_t BLK1_DOUT6 = (32 << 0);  ///< BLK1_DOUT6
    }

    /// BLK1_RDATA7 Register bits
    namespace blk1_rdata7_bits {
        constexpr uint32_t BLK1_DOUT7 = (32 << 0);  ///< BLK1_DOUT7
    }

    /// BLK2_RDATA0 Register bits
    namespace blk2_rdata0_bits {
        constexpr uint32_t BLK2_DOUT0 = (32 << 0);  ///< BLK2_DOUT0
    }

    /// BLK2_RDATA1 Register bits
    namespace blk2_rdata1_bits {
        constexpr uint32_t BLK2_DOUT1 = (32 << 0);  ///< BLK2_DOUT1
    }

    /// BLK2_RDATA2 Register bits
    namespace blk2_rdata2_bits {
        constexpr uint32_t BLK2_DOUT2 = (32 << 0);  ///< BLK2_DOUT2
    }

    /// BLK2_RDATA3 Register bits
    namespace blk2_rdata3_bits {
        constexpr uint32_t BLK2_DOUT3 = (32 << 0);  ///< BLK2_DOUT3
    }

    /// BLK2_RDATA4 Register bits
    namespace blk2_rdata4_bits {
        constexpr uint32_t BLK2_DOUT4 = (32 << 0);  ///< BLK2_DOUT4
    }

    /// BLK2_RDATA5 Register bits
    namespace blk2_rdata5_bits {
        constexpr uint32_t BLK2_DOUT5 = (32 << 0);  ///< BLK2_DOUT5
    }

    /// BLK2_RDATA6 Register bits
    namespace blk2_rdata6_bits {
        constexpr uint32_t BLK2_DOUT6 = (32 << 0);  ///< BLK2_DOUT6
    }

    /// BLK2_RDATA7 Register bits
    namespace blk2_rdata7_bits {
        constexpr uint32_t BLK2_DOUT7 = (32 << 0);  ///< BLK2_DOUT7
    }

    /// BLK3_RDATA0 Register bits
    namespace blk3_rdata0_bits {
        constexpr uint32_t BLK3_DOUT0 = (32 << 0);  ///< BLK3_DOUT0
    }

    /// BLK3_RDATA1 Register bits
    namespace blk3_rdata1_bits {
        constexpr uint32_t BLK3_DOUT1 = (32 << 0);  ///< BLK3_DOUT1
    }

    /// BLK3_RDATA2 Register bits
    namespace blk3_rdata2_bits {
        constexpr uint32_t BLK3_DOUT2 = (32 << 0);  ///< BLK3_DOUT2
    }

    /// BLK3_RDATA3 Register bits
    namespace blk3_rdata3_bits {
        constexpr uint32_t BLK3_DOUT3 = (32 << 0);  ///< BLK3_DOUT3
        constexpr uint32_t RD_ADC2_TP_HIGH = (9 << 23);  ///< RD_ADC2_TP_HIGH
        constexpr uint32_t RD_ADC2_TP_LOW = (7 << 16);  ///< RD_ADC2_TP_LOW
        constexpr uint32_t RD_ADC1_TP_HIGH = (9 << 7);  ///< RD_ADC1_TP_HIGH
        constexpr uint32_t RD_ADC1_TP_LOW = (7 << 0);  ///< RD_ADC1_TP_LOW
    }

    /// BLK3_RDATA4 Register bits
    namespace blk3_rdata4_bits {
        constexpr uint32_t BLK3_DOUT4 = (32 << 0);  ///< BLK3_DOUT4
    }

    /// BLK3_RDATA5 Register bits
    namespace blk3_rdata5_bits {
        constexpr uint32_t BLK3_DOUT5 = (32 << 0);  ///< BLK3_DOUT5
    }

    /// BLK3_RDATA6 Register bits
    namespace blk3_rdata6_bits {
        constexpr uint32_t BLK3_DOUT6 = (32 << 0);  ///< BLK3_DOUT6
    }

    /// BLK3_RDATA7 Register bits
    namespace blk3_rdata7_bits {
        constexpr uint32_t BLK3_DOUT7 = (32 << 0);  ///< BLK3_DOUT7
    }

    /// BLK1_WDATA0 Register bits
    namespace blk1_wdata0_bits {
        constexpr uint32_t BLK1_DIN0 = (32 << 0);  ///< BLK1_DIN0
    }

    /// BLK1_WDATA1 Register bits
    namespace blk1_wdata1_bits {
        constexpr uint32_t BLK1_DIN1 = (32 << 0);  ///< BLK1_DIN1
    }

    /// BLK1_WDATA2 Register bits
    namespace blk1_wdata2_bits {
        constexpr uint32_t BLK1_DIN2 = (32 << 0);  ///< BLK1_DIN2
    }

    /// BLK1_WDATA3 Register bits
    namespace blk1_wdata3_bits {
        constexpr uint32_t BLK1_DIN3 = (32 << 0);  ///< BLK1_DIN3
    }

    /// BLK1_WDATA4 Register bits
    namespace blk1_wdata4_bits {
        constexpr uint32_t BLK1_DIN4 = (32 << 0);  ///< BLK1_DIN4
    }

    /// BLK1_WDATA5 Register bits
    namespace blk1_wdata5_bits {
        constexpr uint32_t BLK1_DIN5 = (32 << 0);  ///< BLK1_DIN5
    }

    /// BLK1_WDATA6 Register bits
    namespace blk1_wdata6_bits {
        constexpr uint32_t BLK1_DIN6 = (32 << 0);  ///< BLK1_DIN6
    }

    /// BLK1_WDATA7 Register bits
    namespace blk1_wdata7_bits {
        constexpr uint32_t BLK1_DIN7 = (32 << 0);  ///< BLK1_DIN7
    }

    /// BLK2_WDATA0 Register bits
    namespace blk2_wdata0_bits {
        constexpr uint32_t BLK2_DIN0 = (32 << 0);  ///< BLK2_DIN0
    }

    /// BLK2_WDATA1 Register bits
    namespace blk2_wdata1_bits {
        constexpr uint32_t BLK2_DIN1 = (32 << 0);  ///< BLK2_DIN1
    }

    /// BLK2_WDATA2 Register bits
    namespace blk2_wdata2_bits {
        constexpr uint32_t BLK2_DIN2 = (32 << 0);  ///< BLK2_DIN2
    }

    /// BLK2_WDATA3 Register bits
    namespace blk2_wdata3_bits {
        constexpr uint32_t BLK2_DIN3 = (32 << 0);  ///< BLK2_DIN3
    }

    /// BLK2_WDATA4 Register bits
    namespace blk2_wdata4_bits {
        constexpr uint32_t BLK2_DIN4 = (32 << 0);  ///< BLK2_DIN4
    }

    /// BLK2_WDATA5 Register bits
    namespace blk2_wdata5_bits {
        constexpr uint32_t BLK2_DIN5 = (32 << 0);  ///< BLK2_DIN5
    }

    /// BLK2_WDATA6 Register bits
    namespace blk2_wdata6_bits {
        constexpr uint32_t BLK2_DIN6 = (32 << 0);  ///< BLK2_DIN6
    }

    /// BLK2_WDATA7 Register bits
    namespace blk2_wdata7_bits {
        constexpr uint32_t BLK2_DIN7 = (32 << 0);  ///< BLK2_DIN7
    }

    /// BLK3_WDATA0 Register bits
    namespace blk3_wdata0_bits {
        constexpr uint32_t BLK3_DIN0 = (32 << 0);  ///< BLK3_DIN0
    }

    /// BLK3_WDATA1 Register bits
    namespace blk3_wdata1_bits {
        constexpr uint32_t BLK3_DIN1 = (32 << 0);  ///< BLK3_DIN1
    }

    /// BLK3_WDATA2 Register bits
    namespace blk3_wdata2_bits {
        constexpr uint32_t BLK3_DIN2 = (32 << 0);  ///< BLK3_DIN2
    }

    /// BLK3_WDATA3 Register bits
    namespace blk3_wdata3_bits {
        constexpr uint32_t BLK3_DIN3 = (32 << 0);  ///< BLK3_DIN3
        constexpr uint32_t ADC2_TP_HIGH = (9 << 23);  ///< ADC2_TP_HIGH
        constexpr uint32_t ADC2_TP_LOW = (7 << 16);  ///< ADC2_TP_LOW
        constexpr uint32_t ADC1_TP_HIGH = (9 << 7);  ///< ADC1_TP_HIGH
        constexpr uint32_t ADC1_TP_LOW = (7 << 0);  ///< ADC1_TP_LOW
    }

    /// BLK3_WDATA4 Register bits
    namespace blk3_wdata4_bits {
        constexpr uint32_t BLK3_DIN4 = (32 << 0);  ///< BLK3_DIN4
    }

    /// BLK3_WDATA5 Register bits
    namespace blk3_wdata5_bits {
        constexpr uint32_t BLK3_DIN5 = (32 << 0);  ///< BLK3_DIN5
    }

    /// BLK3_WDATA6 Register bits
    namespace blk3_wdata6_bits {
        constexpr uint32_t BLK3_DIN6 = (32 << 0);  ///< BLK3_DIN6
    }

    /// BLK3_WDATA7 Register bits
    namespace blk3_wdata7_bits {
        constexpr uint32_t BLK3_DIN7 = (32 << 0);  ///< BLK3_DIN7
    }

    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t CLK_EN = (1U << 16);  ///< CLK_EN
        constexpr uint32_t CLK_SEL1 = (8 << 8);  ///< CLK_SEL1
        constexpr uint32_t CLK_SEL0 = (8 << 0);  ///< CLK_SEL0
    }

    /// CONF Register bits
    namespace conf_bits {
        constexpr uint32_t FORCE_NO_WR_RD_DIS = (1U << 16);  ///< FORCE_NO_WR_RD_DIS
        constexpr uint32_t OP_CODE = (16 << 0);  ///< OP_CODE
    }

    /// STATUS Register bits
    namespace status_bits {
        constexpr uint32_t DEBUG = (32 << 0);  ///< DEBUG
    }

    /// CMD Register bits
    namespace cmd_bits {
        constexpr uint32_t PGM_CMD = (1U << 1);  ///< PGM_CMD
        constexpr uint32_t READ_CMD = (1U << 0);  ///< READ_CMD
    }

    /// INT_RAW Register bits
    namespace int_raw_bits {
        constexpr uint32_t PGM_DONE_INT_RAW = (1U << 1);  ///< PGM_DONE_INT_RAW
        constexpr uint32_t READ_DONE_INT_RAW = (1U << 0);  ///< READ_DONE_INT_RAW
    }

    /// INT_ST Register bits
    namespace int_st_bits {
        constexpr uint32_t PGM_DONE_INT_ST = (1U << 1);  ///< PGM_DONE_INT_ST
        constexpr uint32_t READ_DONE_INT_ST = (1U << 0);  ///< READ_DONE_INT_ST
    }

    /// INT_ENA Register bits
    namespace int_ena_bits {
        constexpr uint32_t PGM_DONE_INT_ENA = (1U << 1);  ///< PGM_DONE_INT_ENA
        constexpr uint32_t READ_DONE_INT_ENA = (1U << 0);  ///< READ_DONE_INT_ENA
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t PGM_DONE_INT_CLR = (1U << 1);  ///< PGM_DONE_INT_CLR
        constexpr uint32_t READ_DONE_INT_CLR = (1U << 0);  ///< READ_DONE_INT_CLR
    }

    /// DAC_CONF Register bits
    namespace dac_conf_bits {
        constexpr uint32_t DAC_CLK_PAD_SEL = (1U << 8);  ///< DAC_CLK_PAD_SEL
        constexpr uint32_t DAC_CLK_DIV = (8 << 0);  ///< DAC_CLK_DIV
    }

    /// DEC_STATUS Register bits
    namespace dec_status_bits {
        constexpr uint32_t DEC_WARNINGS = (12 << 0);  ///< DEC_WARNINGS
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t DATE = (32 << 0);  ///< DATE
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTCMEM1_BASE = 0x3FF62000;
    constexpr uint32_t RTCMEM2_BASE = 0x3FF63000;
    constexpr uint32_t RTCMEM0_BASE = 0x3FF61000;
    constexpr uint32_t RTCCNTL_BASE = 0x3FF48000;
    constexpr uint32_t RTCIO_BASE = 0x3FF48400;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t OPTIONS0;  ///< Offset: 0x00 - RTC_CNTL_OPTIONS0
        volatile uint32_t SLP_TIMER0;  ///< Offset: 0x04 - RTC_CNTL_SLP_TIMER0
        volatile uint32_t SLP_TIMER1;  ///< Offset: 0x08 - RTC_CNTL_SLP_TIMER1
        volatile uint32_t TIME_UPDATE;  ///< Offset: 0x0C - RTC_CNTL_TIME_UPDATE
        volatile uint32_t TIME0;  ///< Offset: 0x10 - RTC_CNTL_TIME0
        volatile uint32_t TIME1;  ///< Offset: 0x14 - RTC_CNTL_TIME1
        volatile uint32_t STATE0;  ///< Offset: 0x18 - RTC_CNTL_STATE0
        volatile uint32_t TIMER1;  ///< Offset: 0x1C - RTC_CNTL_TIMER1
        volatile uint32_t TIMER2;  ///< Offset: 0x20 - RTC_CNTL_TIMER2
        volatile uint32_t TIMER3;  ///< Offset: 0x24 - RTC_CNTL_TIMER3
        volatile uint32_t TIMER4;  ///< Offset: 0x28 - RTC_CNTL_TIMER4
        volatile uint32_t TIMER5;  ///< Offset: 0x2C - RTC_CNTL_TIMER5
        volatile uint32_t ANA_CONF;  ///< Offset: 0x30 - RTC_CNTL_ANA_CONF
        volatile uint32_t RESET_STATE;  ///< Offset: 0x34 - RTC_CNTL_RESET_STATE
        volatile uint32_t WAKEUP_STATE;  ///< Offset: 0x38 - RTC_CNTL_WAKEUP_STATE
        volatile uint32_t INT_ENA;  ///< Offset: 0x3C - RTC_CNTL_INT_ENA
        volatile uint32_t INT_RAW;  ///< Offset: 0x40 - RTC_CNTL_INT_RAW
        volatile uint32_t INT_ST;  ///< Offset: 0x44 - RTC_CNTL_INT_ST
        volatile uint32_t INT_CLR;  ///< Offset: 0x48 - RTC_CNTL_INT_CLR
        volatile uint32_t STORE0;  ///< Offset: 0x4C - RTC_CNTL_STORE0
        volatile uint32_t STORE1;  ///< Offset: 0x50 - RTC_CNTL_STORE1
        volatile uint32_t STORE2;  ///< Offset: 0x54 - RTC_CNTL_STORE2
        volatile uint32_t STORE3;  ///< Offset: 0x58 - RTC_CNTL_STORE3
        volatile uint32_t EXT_XTL_CONF;  ///< Offset: 0x5C - RTC_CNTL_EXT_XTL_CONF
        volatile uint32_t EXT_WAKEUP_CONF;  ///< Offset: 0x60 - RTC_CNTL_EXT_WAKEUP_CONF
        volatile uint32_t SLP_REJECT_CONF;  ///< Offset: 0x64 - RTC_CNTL_SLP_REJECT_CONF
        volatile uint32_t CPU_PERIOD_CONF;  ///< Offset: 0x68 - RTC_CNTL_CPU_PERIOD_CONF
        volatile uint32_t SDIO_ACT_CONF;  ///< Offset: 0x6C - RTC_CNTL_SDIO_ACT_CONF
        volatile uint32_t CLK_CONF;  ///< Offset: 0x70 - RTC_CNTL_CLK_CONF
        volatile uint32_t SDIO_CONF;  ///< Offset: 0x74 - RTC_CNTL_SDIO_CONF
        volatile uint32_t BIAS_CONF;  ///< Offset: 0x78 - RTC_CNTL_BIAS_CONF
        volatile uint32_t PWC;  ///< Offset: 0x80 - RTC_CNTL_PWC
        volatile uint32_t DIG_PWC;  ///< Offset: 0x84 - RTC_CNTL_DIG_PWC
        volatile uint32_t DIG_ISO;  ///< Offset: 0x88 - RTC_CNTL_DIG_ISO
        volatile uint32_t WDTCONFIG0;  ///< Offset: 0x8C - RTC_CNTL_WDTCONFIG0
        volatile uint32_t WDTCONFIG1;  ///< Offset: 0x90 - RTC_CNTL_WDTCONFIG1
        volatile uint32_t WDTCONFIG2;  ///< Offset: 0x94 - RTC_CNTL_WDTCONFIG2
        volatile uint32_t WDTCONFIG3;  ///< Offset: 0x98 - RTC_CNTL_WDTCONFIG3
        volatile uint32_t WDTCONFIG4;  ///< Offset: 0x9C - RTC_CNTL_WDTCONFIG4
        volatile uint32_t WDTFEED;  ///< Offset: 0xA0 - RTC_CNTL_WDTFEED
        volatile uint32_t WDTWPROTECT;  ///< Offset: 0xA4 - RTC_CNTL_WDTWPROTECT
        volatile uint32_t TEST_MUX;  ///< Offset: 0xA8 - RTC_CNTL_TEST_MUX
        volatile uint32_t SW_CPU_STALL;  ///< Offset: 0xAC - RTC_CNTL_SW_CPU_STALL
        volatile uint32_t STORE4;  ///< Offset: 0xB0 - RTC_CNTL_STORE4
        volatile uint32_t STORE5;  ///< Offset: 0xB4 - RTC_CNTL_STORE5
        volatile uint32_t STORE6;  ///< Offset: 0xB8 - RTC_CNTL_STORE6
        volatile uint32_t STORE7;  ///< Offset: 0xBC - RTC_CNTL_STORE7
        volatile uint32_t DIAG1;  ///< Offset: 0xC4 - RTC_CNTL_DIAG1
        volatile uint32_t HOLD_FORCE;  ///< Offset: 0xC8 - RTC_CNTL_HOLD_FORCE
        volatile uint32_t EXT_WAKEUP1;  ///< Offset: 0xCC - RTC_CNTL_EXT_WAKEUP1
        volatile uint32_t EXT_WAKEUP1_STATUS;  ///< Offset: 0xD0 - RTC_CNTL_EXT_WAKEUP1_STATUS
        volatile uint32_t BROWN_OUT;  ///< Offset: 0xD4 - RTC_CNTL_BROWN_OUT
        volatile uint32_t DATE;  ///< Offset: 0x13C - RTC_CNTL_DATE
        volatile uint32_t CNTL;  ///< Offset: 0x7C - Force RTC power up
        volatile uint32_t APLL;  ///< Offset: 0x200C600C - Block
        volatile uint32_t PLL;  ///< Offset: 0x200C6010 - Block
    };

    /// Peripheral instances
    inline Registers* RTCMEM1 = reinterpret_cast<Registers*>(RTCMEM1_BASE);
    inline Registers* RTCMEM2 = reinterpret_cast<Registers*>(RTCMEM2_BASE);
    inline Registers* RTCMEM0 = reinterpret_cast<Registers*>(RTCMEM0_BASE);
    inline Registers* RTCCNTL = reinterpret_cast<Registers*>(RTCCNTL_BASE);
    inline Registers* RTCIO = reinterpret_cast<Registers*>(RTCIO_BASE);

    // Bit definitions
    /// OPTIONS0 Register bits
    namespace options0_bits {
        constexpr uint32_t SW_SYS_RST = (1U << 31);  ///< SW_SYS_RST
        constexpr uint32_t DG_WRAP_FORCE_NORST = (1U << 30);  ///< DG_WRAP_FORCE_NORST
        constexpr uint32_t DG_WRAP_FORCE_RST = (1U << 29);  ///< DG_WRAP_FORCE_RST
        constexpr uint32_t ANALOG_FORCE_NOISO = (1U << 28);  ///< ANALOG_FORCE_NOISO
        constexpr uint32_t PLL_FORCE_NOISO = (1U << 27);  ///< PLL_FORCE_NOISO
        constexpr uint32_t XTL_FORCE_NOISO = (1U << 26);  ///< XTL_FORCE_NOISO
        constexpr uint32_t ANALOG_FORCE_ISO = (1U << 25);  ///< ANALOG_FORCE_ISO
        constexpr uint32_t PLL_FORCE_ISO = (1U << 24);  ///< PLL_FORCE_ISO
        constexpr uint32_t XTL_FORCE_ISO = (1U << 23);  ///< XTL_FORCE_ISO
        constexpr uint32_t BIAS_CORE_FORCE_PU = (1U << 22);  ///< BIAS_CORE_FORCE_PU
        constexpr uint32_t BIAS_CORE_FORCE_PD = (1U << 21);  ///< BIAS_CORE_FORCE_PD
        constexpr uint32_t BIAS_CORE_FOLW_8M = (1U << 20);  ///< BIAS_CORE_FOLW_8M
        constexpr uint32_t BIAS_I2C_FORCE_PU = (1U << 19);  ///< BIAS_I2C_FORCE_PU
        constexpr uint32_t BIAS_I2C_FORCE_PD = (1U << 18);  ///< BIAS_I2C_FORCE_PD
        constexpr uint32_t BIAS_I2C_FOLW_8M = (1U << 17);  ///< BIAS_I2C_FOLW_8M
        constexpr uint32_t BIAS_FORCE_NOSLEEP = (1U << 16);  ///< BIAS_FORCE_NOSLEEP
        constexpr uint32_t BIAS_FORCE_SLEEP = (1U << 15);  ///< BIAS_FORCE_SLEEP
        constexpr uint32_t BIAS_SLEEP_FOLW_8M = (1U << 14);  ///< BIAS_SLEEP_FOLW_8M
        constexpr uint32_t XTL_FORCE_PU = (1U << 13);  ///< XTL_FORCE_PU
        constexpr uint32_t XTL_FORCE_PD = (1U << 12);  ///< XTL_FORCE_PD
        constexpr uint32_t BBPLL_FORCE_PU = (1U << 11);  ///< BBPLL_FORCE_PU
        constexpr uint32_t BBPLL_FORCE_PD = (1U << 10);  ///< BBPLL_FORCE_PD
        constexpr uint32_t BBPLL_I2C_FORCE_PU = (1U << 9);  ///< BBPLL_I2C_FORCE_PU
        constexpr uint32_t BBPLL_I2C_FORCE_PD = (1U << 8);  ///< BBPLL_I2C_FORCE_PD
        constexpr uint32_t BB_I2C_FORCE_PU = (1U << 7);  ///< BB_I2C_FORCE_PU
        constexpr uint32_t BB_I2C_FORCE_PD = (1U << 6);  ///< BB_I2C_FORCE_PD
        constexpr uint32_t SW_PROCPU_RST = (1U << 5);  ///< SW_PROCPU_RST
        constexpr uint32_t SW_APPCPU_RST = (1U << 4);  ///< SW_APPCPU_RST
        constexpr uint32_t SW_STALL_PROCPU_C0 = (2 << 2);  ///< SW_STALL_PROCPU_C0
        constexpr uint32_t SW_STALL_APPCPU_C0 = (2 << 0);  ///< SW_STALL_APPCPU_C0
    }

    /// SLP_TIMER0 Register bits
    namespace slp_timer0_bits {
        constexpr uint32_t SLP_VAL_LO = (32 << 0);  ///< SLP_VAL_LO
    }

    /// SLP_TIMER1 Register bits
    namespace slp_timer1_bits {
        constexpr uint32_t MAIN_TIMER_ALARM_EN = (1U << 16);  ///< MAIN_TIMER_ALARM_EN
        constexpr uint32_t SLP_VAL_HI = (16 << 0);  ///< SLP_VAL_HI
    }

    /// TIME_UPDATE Register bits
    namespace time_update_bits {
        constexpr uint32_t TIME_UPDATE = (1U << 31);  ///< TIME_UPDATE
        constexpr uint32_t TIME_VALID = (1U << 30);  ///< TIME_VALID
    }

    /// TIME0 Register bits
    namespace time0_bits {
        constexpr uint32_t TIME_LO = (32 << 0);  ///< TIME_LO
    }

    /// TIME1 Register bits
    namespace time1_bits {
        constexpr uint32_t TIME_HI = (16 << 0);  ///< TIME_HI
    }

    /// STATE0 Register bits
    namespace state0_bits {
        constexpr uint32_t SLEEP_EN = (1U << 31);  ///< SLEEP_EN
        constexpr uint32_t SLP_REJECT = (1U << 30);  ///< SLP_REJECT
        constexpr uint32_t SLP_WAKEUP = (1U << 29);  ///< SLP_WAKEUP
        constexpr uint32_t SDIO_ACTIVE_IND = (1U << 28);  ///< SDIO_ACTIVE_IND
        constexpr uint32_t ULP_CP_SLP_TIMER_EN = (1U << 24);  ///< ULP_CP_SLP_TIMER_EN
        constexpr uint32_t TOUCH_SLP_TIMER_EN = (1U << 23);  ///< TOUCH_SLP_TIMER_EN
        constexpr uint32_t APB2RTC_BRIDGE_SEL = (1U << 22);  ///< APB2RTC_BRIDGE_SEL
        constexpr uint32_t ULP_CP_WAKEUP_FORCE_EN = (1U << 21);  ///< ULP_CP_WAKEUP_FORCE_EN
        constexpr uint32_t TOUCH_WAKEUP_FORCE_EN = (1U << 20);  ///< TOUCH_WAKEUP_FORCE_EN
    }

    /// TIMER1 Register bits
    namespace timer1_bits {
        constexpr uint32_t PLL_BUF_WAIT = (8 << 24);  ///< PLL_BUF_WAIT
        constexpr uint32_t XTL_BUF_WAIT = (10 << 14);  ///< XTL_BUF_WAIT
        constexpr uint32_t CK8M_WAIT = (8 << 6);  ///< CK8M_WAIT
        constexpr uint32_t CPU_STALL_WAIT = (5 << 1);  ///< CPU_STALL_WAIT
        constexpr uint32_t CPU_STALL_EN = (1U << 0);  ///< CPU_STALL_EN
    }

    /// TIMER2 Register bits
    namespace timer2_bits {
        constexpr uint32_t MIN_TIME_CK8M_OFF = (8 << 24);  ///< MIN_TIME_CK8M_OFF
        constexpr uint32_t ULPCP_TOUCH_START_WAIT = (9 << 15);  ///< ULPCP_TOUCH_START_WAIT
    }

    /// TIMER3 Register bits
    namespace timer3_bits {
        constexpr uint32_t ROM_RAM_POWERUP_TIMER = (7 << 25);  ///< ROM_RAM_POWERUP_TIMER
        constexpr uint32_t ROM_RAM_WAIT_TIMER = (9 << 16);  ///< ROM_RAM_WAIT_TIMER
        constexpr uint32_t WIFI_POWERUP_TIMER = (7 << 9);  ///< WIFI_POWERUP_TIMER
        constexpr uint32_t WIFI_WAIT_TIMER = (9 << 0);  ///< WIFI_WAIT_TIMER
    }

    /// TIMER4 Register bits
    namespace timer4_bits {
        constexpr uint32_t DG_WRAP_POWERUP_TIMER = (7 << 25);  ///< DG_WRAP_POWERUP_TIMER
        constexpr uint32_t DG_WRAP_WAIT_TIMER = (9 << 16);  ///< DG_WRAP_WAIT_TIMER
        constexpr uint32_t POWERUP_TIMER = (7 << 9);  ///< POWERUP_TIMER
        constexpr uint32_t WAIT_TIMER = (9 << 0);  ///< WAIT_TIMER
    }

    /// TIMER5 Register bits
    namespace timer5_bits {
        constexpr uint32_t RTCMEM_POWERUP_TIMER = (7 << 25);  ///< RTCMEM_POWERUP_TIMER
        constexpr uint32_t RTCMEM_WAIT_TIMER = (9 << 16);  ///< RTCMEM_WAIT_TIMER
        constexpr uint32_t MIN_SLP_VAL = (8 << 8);  ///< MIN_SLP_VAL
        constexpr uint32_t ULP_CP_SUBTIMER_PREDIV = (8 << 0);  ///< ULP_CP_SUBTIMER_PREDIV
    }

    /// ANA_CONF Register bits
    namespace ana_conf_bits {
        constexpr uint32_t PLL_I2C_PU = (1U << 31);  ///< PLL_I2C_PU
        constexpr uint32_t CKGEN_I2C_PU = (1U << 30);  ///< CKGEN_I2C_PU
        constexpr uint32_t RFRX_PBUS_PU = (1U << 28);  ///< RFRX_PBUS_PU
        constexpr uint32_t TXRF_I2C_PU = (1U << 27);  ///< TXRF_I2C_PU
        constexpr uint32_t PVTMON_PU = (1U << 26);  ///< PVTMON_PU
        constexpr uint32_t BBPLL_CAL_SLP_START = (1U << 25);  ///< BBPLL_CAL_SLP_START
        constexpr uint32_t PLLA_FORCE_PU = (1U << 24);  ///< PLLA_FORCE_PU
        constexpr uint32_t PLLA_FORCE_PD = (1U << 23);  ///< PLLA_FORCE_PD
    }

    /// RESET_STATE Register bits
    namespace reset_state_bits {
        constexpr uint32_t PROCPU_STAT_VECTOR_SEL = (1U << 13);  ///< PROCPU_STAT_VECTOR_SEL
        constexpr uint32_t APPCPU_STAT_VECTOR_SEL = (1U << 12);  ///< APPCPU_STAT_VECTOR_SEL
        constexpr uint32_t RESET_CAUSE_APPCPU = (6 << 6);  ///< RESET_CAUSE_APPCPU
        constexpr uint32_t RESET_CAUSE_PROCPU = (6 << 0);  ///< RESET_CAUSE_PROCPU
    }

    /// WAKEUP_STATE Register bits
    namespace wakeup_state_bits {
        constexpr uint32_t GPIO_WAKEUP_FILTER = (1U << 22);  ///< GPIO_WAKEUP_FILTER
        constexpr uint32_t WAKEUP_ENA = (11 << 11);  ///< WAKEUP_ENA
        constexpr uint32_t WAKEUP_CAUSE = (11 << 0);  ///< WAKEUP_CAUSE
    }

    /// INT_ENA Register bits
    namespace int_ena_bits {
        constexpr uint32_t MAIN_TIMER_INT_ENA = (1U << 8);  ///< MAIN_TIMER_INT_ENA
        constexpr uint32_t BROWN_OUT_INT_ENA = (1U << 7);  ///< BROWN_OUT_INT_ENA
        constexpr uint32_t TOUCH_INT_ENA = (1U << 6);  ///< TOUCH_INT_ENA
        constexpr uint32_t ULP_CP_INT_ENA = (1U << 5);  ///< ULP_CP_INT_ENA
        constexpr uint32_t TIME_VALID_INT_ENA = (1U << 4);  ///< TIME_VALID_INT_ENA
        constexpr uint32_t WDT_INT_ENA = (1U << 3);  ///< WDT_INT_ENA
        constexpr uint32_t SDIO_IDLE_INT_ENA = (1U << 2);  ///< SDIO_IDLE_INT_ENA
        constexpr uint32_t SLP_REJECT_INT_ENA = (1U << 1);  ///< SLP_REJECT_INT_ENA
        constexpr uint32_t SLP_WAKEUP_INT_ENA = (1U << 0);  ///< SLP_WAKEUP_INT_ENA
    }

    /// INT_RAW Register bits
    namespace int_raw_bits {
        constexpr uint32_t MAIN_TIMER_INT_RAW = (1U << 8);  ///< MAIN_TIMER_INT_RAW
        constexpr uint32_t BROWN_OUT_INT_RAW = (1U << 7);  ///< BROWN_OUT_INT_RAW
        constexpr uint32_t TOUCH_INT_RAW = (1U << 6);  ///< TOUCH_INT_RAW
        constexpr uint32_t ULP_CP_INT_RAW = (1U << 5);  ///< ULP_CP_INT_RAW
        constexpr uint32_t TIME_VALID_INT_RAW = (1U << 4);  ///< TIME_VALID_INT_RAW
        constexpr uint32_t WDT_INT_RAW = (1U << 3);  ///< WDT_INT_RAW
        constexpr uint32_t SDIO_IDLE_INT_RAW = (1U << 2);  ///< SDIO_IDLE_INT_RAW
        constexpr uint32_t SLP_REJECT_INT_RAW = (1U << 1);  ///< SLP_REJECT_INT_RAW
        constexpr uint32_t SLP_WAKEUP_INT_RAW = (1U << 0);  ///< SLP_WAKEUP_INT_RAW
    }

    /// INT_ST Register bits
    namespace int_st_bits {
        constexpr uint32_t MAIN_TIMER_INT_ST = (1U << 8);  ///< MAIN_TIMER_INT_ST
        constexpr uint32_t BROWN_OUT_INT_ST = (1U << 7);  ///< BROWN_OUT_INT_ST
        constexpr uint32_t TOUCH_INT_ST = (1U << 6);  ///< TOUCH_INT_ST
        constexpr uint32_t SAR_INT_ST = (1U << 5);  ///< SAR_INT_ST
        constexpr uint32_t TIME_VALID_INT_ST = (1U << 4);  ///< TIME_VALID_INT_ST
        constexpr uint32_t WDT_INT_ST = (1U << 3);  ///< WDT_INT_ST
        constexpr uint32_t SDIO_IDLE_INT_ST = (1U << 2);  ///< SDIO_IDLE_INT_ST
        constexpr uint32_t SLP_REJECT_INT_ST = (1U << 1);  ///< SLP_REJECT_INT_ST
        constexpr uint32_t SLP_WAKEUP_INT_ST = (1U << 0);  ///< SLP_WAKEUP_INT_ST
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t MAIN_TIMER_INT_CLR = (1U << 8);  ///< MAIN_TIMER_INT_CLR
        constexpr uint32_t BROWN_OUT_INT_CLR = (1U << 7);  ///< BROWN_OUT_INT_CLR
        constexpr uint32_t TOUCH_INT_CLR = (1U << 6);  ///< TOUCH_INT_CLR
        constexpr uint32_t SAR_INT_CLR = (1U << 5);  ///< SAR_INT_CLR
        constexpr uint32_t TIME_VALID_INT_CLR = (1U << 4);  ///< TIME_VALID_INT_CLR
        constexpr uint32_t WDT_INT_CLR = (1U << 3);  ///< WDT_INT_CLR
        constexpr uint32_t SDIO_IDLE_INT_CLR = (1U << 2);  ///< SDIO_IDLE_INT_CLR
        constexpr uint32_t SLP_REJECT_INT_CLR = (1U << 1);  ///< SLP_REJECT_INT_CLR
        constexpr uint32_t SLP_WAKEUP_INT_CLR = (1U << 0);  ///< SLP_WAKEUP_INT_CLR
    }

    /// STORE0 Register bits
    namespace store0_bits {
        constexpr uint32_t SCRATCH0 = (32 << 0);  ///< SCRATCH0
    }

    /// STORE1 Register bits
    namespace store1_bits {
        constexpr uint32_t SCRATCH1 = (32 << 0);  ///< SCRATCH1
    }

    /// STORE2 Register bits
    namespace store2_bits {
        constexpr uint32_t SCRATCH2 = (32 << 0);  ///< SCRATCH2
    }

    /// STORE3 Register bits
    namespace store3_bits {
        constexpr uint32_t SCRATCH3 = (32 << 0);  ///< SCRATCH3
    }

    /// EXT_XTL_CONF Register bits
    namespace ext_xtl_conf_bits {
        constexpr uint32_t XTL_EXT_CTR_EN = (1U << 31);  ///< XTL_EXT_CTR_EN
        constexpr uint32_t XTL_EXT_CTR_LV = (1U << 30);  ///< XTL_EXT_CTR_LV
    }

    /// EXT_WAKEUP_CONF Register bits
    namespace ext_wakeup_conf_bits {
        constexpr uint32_t EXT_WAKEUP1_LV = (1U << 31);  ///< EXT_WAKEUP1_LV
        constexpr uint32_t EXT_WAKEUP0_LV = (1U << 30);  ///< EXT_WAKEUP0_LV
    }

    /// SLP_REJECT_CONF Register bits
    namespace slp_reject_conf_bits {
        constexpr uint32_t REJECT_CAUSE = (4 << 28);  ///< REJECT_CAUSE
        constexpr uint32_t DEEP_SLP_REJECT_EN = (1U << 27);  ///< DEEP_SLP_REJECT_EN
        constexpr uint32_t LIGHT_SLP_REJECT_EN = (1U << 26);  ///< LIGHT_SLP_REJECT_EN
        constexpr uint32_t SDIO_REJECT_EN = (1U << 25);  ///< SDIO_REJECT_EN
        constexpr uint32_t GPIO_REJECT_EN = (1U << 24);  ///< GPIO_REJECT_EN
    }

    /// CPU_PERIOD_CONF Register bits
    namespace cpu_period_conf_bits {
        constexpr uint32_t CPUPERIOD_SEL = (2 << 30);  ///< CPUPERIOD_SEL
        constexpr uint32_t CPUSEL_CONF = (1U << 29);  ///< CPUSEL_CONF
    }

    /// SDIO_ACT_CONF Register bits
    namespace sdio_act_conf_bits {
        constexpr uint32_t SDIO_ACT_DNUM = (10 << 22);  ///< SDIO_ACT_DNUM
    }

    /// CLK_CONF Register bits
    namespace clk_conf_bits {
        constexpr uint32_t ANA_CLK_RTC_SEL = (2 << 30);  ///< Select slow clock
        constexpr uint32_t FAST_CLK_RTC_SEL = (1U << 29);  ///< Select XTAL
        constexpr uint32_t SOC_CLK_SEL = (2 << 27);  ///< Select XTAL clock
        constexpr uint32_t CK8M_FORCE_PU = (1U << 26);  ///< Don't force power up
        constexpr uint32_t CK8M_FORCE_PD = (1U << 25);  ///< Don't force power down
        constexpr uint32_t CK8M_DFREQ = (8 << 17);  ///< CK8M_DFREQ
        constexpr uint32_t CK8M_FORCE_NOGATING = (1U << 16);  ///< CK8M_FORCE_NOGATING
        constexpr uint32_t XTAL_FORCE_NOGATING = (1U << 15);  ///< XTAL_FORCE_NOGATING
        constexpr uint32_t CK8M_DIV_SEL = (3 << 12);  ///< CK8M_DIV_SEL
        constexpr uint32_t CK8M_DFREQ_FORCE = (1U << 11);  ///< CK8M_DFREQ_FORCE
        constexpr uint32_t DIG_CLK8M_EN = (1U << 10);  ///< Disable CK8M
        constexpr uint32_t DIG_CLK8M_D256_EN = (1U << 9);  ///< Disable CK8M_D256_OUT
        constexpr uint32_t DIG_XTAL32K_EN = (1U << 8);  ///< Disable CK_XTAL_32K
        constexpr uint32_t ENB_CK8M_DIV = (1U << 7);  ///< ENB_CK8M_DIV
        constexpr uint32_t ENB_CK8M = (1U << 6);  ///< ENB_CK8M
        constexpr uint32_t CK8M_DIV = (2 << 4);  ///< div128
    }

    /// SDIO_CONF Register bits
    namespace sdio_conf_bits {
        constexpr uint32_t XPD_SDIO_REG = (1U << 31);  ///< XPD_SDIO_REG
        constexpr uint32_t DREFH_SDIO = (2 << 29);  ///< DREFH_SDIO
        constexpr uint32_t DREFM_SDIO = (2 << 27);  ///< DREFM_SDIO
        constexpr uint32_t DREFL_SDIO = (2 << 25);  ///< DREFL_SDIO
        constexpr uint32_t REG1P8_READY = (1U << 24);  ///< REG1P8_READY
        constexpr uint32_t SDIO_TIEH = (1U << 23);  ///< SDIO_TIEH
        constexpr uint32_t SDIO_FORCE = (1U << 22);  ///< SDIO_FORCE
        constexpr uint32_t SDIO_PD_EN = (1U << 21);  ///< SDIO_PD_EN
    }

    /// BIAS_CONF Register bits
    namespace bias_conf_bits {
        constexpr uint32_t RST_BIAS_I2C = (1U << 31);  ///< RST_BIAS_I2C
        constexpr uint32_t DEC_HEARTBEAT_WIDTH = (1U << 30);  ///< DEC_HEARTBEAT_WIDTH
        constexpr uint32_t INC_HEARTBEAT_PERIOD = (1U << 29);  ///< INC_HEARTBEAT_PERIOD
        constexpr uint32_t DEC_HEARTBEAT_PERIOD = (1U << 28);  ///< DEC_HEARTBEAT_PERIOD
        constexpr uint32_t INC_HEARTBEAT_REFRESH = (1U << 27);  ///< INC_HEARTBEAT_REFRESH
        constexpr uint32_t ENB_SCK_XTAL = (1U << 26);  ///< ENB_SCK_XTAL
        constexpr uint32_t DBG_ATTEN = (2 << 24);  ///< DBG_ATTEN
        constexpr uint32_t FORCE_PU = (1U << 31);  ///< FORCE_PU
        constexpr uint32_t FORCE_PD = (1U << 30);  ///< FORCE_PD
        constexpr uint32_t DBOOST_FORCE_PU = (1U << 29);  ///< DBOOST_FORCE_PU
        constexpr uint32_t DBOOST_FORCE_PD = (1U << 28);  ///< DBOOST_FORCE_PD
        constexpr uint32_t DBIAS_WAK = (3 << 25);  ///< DBIAS_WAK
        constexpr uint32_t DBIAS_SLP = (3 << 22);  ///< DBIAS_SLP
        constexpr uint32_t SCK_DCAP = (8 << 14);  ///< SCK_DCAP
        constexpr uint32_t DIG_DBIAS_WAK = (3 << 11);  ///< DIG_DBIAS_WAK
        constexpr uint32_t DIG_DBIAS_SLP = (3 << 8);  ///< DIG_DBIAS_SLP
        constexpr uint32_t SCK_DCAP_FORCE = (1U << 7);  ///< SCK_DCAP_FORCE
    }

    /// PWC Register bits
    namespace pwc_bits {
        constexpr uint32_t PD_EN = (1U << 20);  ///< PD_EN
        constexpr uint32_t FORCE_PU = (1U << 19);  ///< FORCE_PU
        constexpr uint32_t FORCE_PD = (1U << 18);  ///< FORCE_PD
        constexpr uint32_t SLOWMEM_PD_EN = (1U << 17);  ///< SLOWMEM_PD_EN
        constexpr uint32_t SLOWMEM_FORCE_PU = (1U << 16);  ///< SLOWMEM_FORCE_PU
        constexpr uint32_t SLOWMEM_FORCE_PD = (1U << 15);  ///< SLOWMEM_FORCE_PD
        constexpr uint32_t FASTMEM_PD_EN = (1U << 14);  ///< FASTMEM_PD_EN
        constexpr uint32_t FASTMEM_FORCE_PU = (1U << 13);  ///< FASTMEM_FORCE_PU
        constexpr uint32_t FASTMEM_FORCE_PD = (1U << 12);  ///< FASTMEM_FORCE_PD
        constexpr uint32_t SLOWMEM_FORCE_LPU = (1U << 11);  ///< SLOWMEM_FORCE_LPU
        constexpr uint32_t SLOWMEM_FORCE_LPD = (1U << 10);  ///< SLOWMEM_FORCE_LPD
        constexpr uint32_t SLOWMEM_FOLW_CPU = (1U << 9);  ///< SLOWMEM_FOLW_CPU
        constexpr uint32_t FASTMEM_FORCE_LPU = (1U << 8);  ///< FASTMEM_FORCE_LPU
        constexpr uint32_t FASTMEM_FORCE_LPD = (1U << 7);  ///< FASTMEM_FORCE_LPD
        constexpr uint32_t FASTMEM_FOLW_CPU = (1U << 6);  ///< FASTMEM_FOLW_CPU
        constexpr uint32_t FORCE_NOISO = (1U << 5);  ///< FORCE_NOISO
        constexpr uint32_t FORCE_ISO = (1U << 4);  ///< FORCE_ISO
        constexpr uint32_t SLOWMEM_FORCE_ISO = (1U << 3);  ///< SLOWMEM_FORCE_ISO
        constexpr uint32_t SLOWMEM_FORCE_NOISO = (1U << 2);  ///< SLOWMEM_FORCE_NOISO
        constexpr uint32_t FASTMEM_FORCE_ISO = (1U << 1);  ///< FASTMEM_FORCE_ISO
        constexpr uint32_t FASTMEM_FORCE_NOISO = (1U << 0);  ///< FASTMEM_FORCE_NOISO
    }

    /// DIG_PWC Register bits
    namespace dig_pwc_bits {
        constexpr uint32_t DG_WRAP_PD_EN = (1U << 31);  ///< DG_WRAP_PD_EN
        constexpr uint32_t WIFI_PD_EN = (1U << 30);  ///< WIFI_PD_EN
        constexpr uint32_t INTER_RAM4_PD_EN = (1U << 29);  ///< INTER_RAM4_PD_EN
        constexpr uint32_t INTER_RAM3_PD_EN = (1U << 28);  ///< INTER_RAM3_PD_EN
        constexpr uint32_t INTER_RAM2_PD_EN = (1U << 27);  ///< INTER_RAM2_PD_EN
        constexpr uint32_t INTER_RAM1_PD_EN = (1U << 26);  ///< INTER_RAM1_PD_EN
        constexpr uint32_t INTER_RAM0_PD_EN = (1U << 25);  ///< INTER_RAM0_PD_EN
        constexpr uint32_t ROM0_PD_EN = (1U << 24);  ///< ROM0_PD_EN
        constexpr uint32_t DG_WRAP_FORCE_PU = (1U << 20);  ///< DG_WRAP_FORCE_PU
        constexpr uint32_t DG_WRAP_FORCE_PD = (1U << 19);  ///< DG_WRAP_FORCE_PD
        constexpr uint32_t WIFI_FORCE_PU = (1U << 18);  ///< WIFI_FORCE_PU
        constexpr uint32_t WIFI_FORCE_PD = (1U << 17);  ///< WIFI_FORCE_PD
        constexpr uint32_t INTER_RAM4_FORCE_PU = (1U << 16);  ///< INTER_RAM4_FORCE_PU
        constexpr uint32_t INTER_RAM4_FORCE_PD = (1U << 15);  ///< INTER_RAM4_FORCE_PD
        constexpr uint32_t INTER_RAM3_FORCE_PU = (1U << 14);  ///< INTER_RAM3_FORCE_PU
        constexpr uint32_t INTER_RAM3_FORCE_PD = (1U << 13);  ///< INTER_RAM3_FORCE_PD
        constexpr uint32_t INTER_RAM2_FORCE_PU = (1U << 12);  ///< INTER_RAM2_FORCE_PU
        constexpr uint32_t INTER_RAM2_FORCE_PD = (1U << 11);  ///< INTER_RAM2_FORCE_PD
        constexpr uint32_t INTER_RAM1_FORCE_PU = (1U << 10);  ///< INTER_RAM1_FORCE_PU
        constexpr uint32_t INTER_RAM1_FORCE_PD = (1U << 9);  ///< INTER_RAM1_FORCE_PD
        constexpr uint32_t INTER_RAM0_FORCE_PU = (1U << 8);  ///< INTER_RAM0_FORCE_PU
        constexpr uint32_t INTER_RAM0_FORCE_PD = (1U << 7);  ///< INTER_RAM0_FORCE_PD
        constexpr uint32_t ROM0_FORCE_PU = (1U << 6);  ///< ROM0_FORCE_PU
        constexpr uint32_t ROM0_FORCE_PD = (1U << 5);  ///< ROM0_FORCE_PD
        constexpr uint32_t LSLP_MEM_FORCE_PU = (1U << 4);  ///< LSLP_MEM_FORCE_PU
        constexpr uint32_t LSLP_MEM_FORCE_PD = (1U << 3);  ///< LSLP_MEM_FORCE_PD
    }

    /// DIG_ISO Register bits
    namespace dig_iso_bits {
        constexpr uint32_t DG_WRAP_FORCE_NOISO = (1U << 31);  ///< DG_WRAP_FORCE_NOISO
        constexpr uint32_t DG_WRAP_FORCE_ISO = (1U << 30);  ///< DG_WRAP_FORCE_ISO
        constexpr uint32_t WIFI_FORCE_NOISO = (1U << 29);  ///< WIFI_FORCE_NOISO
        constexpr uint32_t WIFI_FORCE_ISO = (1U << 28);  ///< WIFI_FORCE_ISO
        constexpr uint32_t INTER_RAM4_FORCE_NOISO = (1U << 27);  ///< INTER_RAM4_FORCE_NOISO
        constexpr uint32_t INTER_RAM4_FORCE_ISO = (1U << 26);  ///< INTER_RAM4_FORCE_ISO
        constexpr uint32_t INTER_RAM3_FORCE_NOISO = (1U << 25);  ///< INTER_RAM3_FORCE_NOISO
        constexpr uint32_t INTER_RAM3_FORCE_ISO = (1U << 24);  ///< INTER_RAM3_FORCE_ISO
        constexpr uint32_t INTER_RAM2_FORCE_NOISO = (1U << 23);  ///< INTER_RAM2_FORCE_NOISO
        constexpr uint32_t INTER_RAM2_FORCE_ISO = (1U << 22);  ///< INTER_RAM2_FORCE_ISO
        constexpr uint32_t INTER_RAM1_FORCE_NOISO = (1U << 21);  ///< INTER_RAM1_FORCE_NOISO
        constexpr uint32_t INTER_RAM1_FORCE_ISO = (1U << 20);  ///< INTER_RAM1_FORCE_ISO
        constexpr uint32_t INTER_RAM0_FORCE_NOISO = (1U << 19);  ///< INTER_RAM0_FORCE_NOISO
        constexpr uint32_t INTER_RAM0_FORCE_ISO = (1U << 18);  ///< INTER_RAM0_FORCE_ISO
        constexpr uint32_t ROM0_FORCE_NOISO = (1U << 17);  ///< ROM0_FORCE_NOISO
        constexpr uint32_t ROM0_FORCE_ISO = (1U << 16);  ///< ROM0_FORCE_ISO
        constexpr uint32_t DG_PAD_FORCE_HOLD = (1U << 15);  ///< DG_PAD_FORCE_HOLD
        constexpr uint32_t DG_PAD_FORCE_UNHOLD = (1U << 14);  ///< DG_PAD_FORCE_UNHOLD
        constexpr uint32_t DG_PAD_FORCE_ISO = (1U << 13);  ///< DG_PAD_FORCE_ISO
        constexpr uint32_t DG_PAD_FORCE_NOISO = (1U << 12);  ///< DG_PAD_FORCE_NOISO
        constexpr uint32_t DG_PAD_AUTOHOLD_EN = (1U << 11);  ///< DG_PAD_AUTOHOLD_EN
        constexpr uint32_t CLR_DG_PAD_AUTOHOLD = (1U << 10);  ///< CLR_DG_PAD_AUTOHOLD
        constexpr uint32_t DG_PAD_AUTOHOLD = (1U << 9);  ///< DG_PAD_AUTOHOLD
        constexpr uint32_t DIG_ISO_FORCE_ON = (1U << 8);  ///< DIG_ISO_FORCE_ON
        constexpr uint32_t DIG_ISO_FORCE_OFF = (1U << 7);  ///< DIG_ISO_FORCE_OFF
    }

    /// WDTCONFIG0 Register bits
    namespace wdtconfig0_bits {
        constexpr uint32_t WDT_EN = (1U << 31);  ///< WDT_EN
        constexpr uint32_t WDT_STG0 = (3 << 28);  ///< Disabled
        constexpr uint32_t WDT_STG1 = (3 << 25);  ///< WDT_STG1
        constexpr uint32_t WDT_STG2 = (3 << 22);  ///< WDT_STG2
        constexpr uint32_t WDT_STG3 = (3 << 19);  ///< WDT_STG3
        constexpr uint32_t WDT_EDGE_INT_EN = (1U << 18);  ///< WDT_EDGE_INT_EN
        constexpr uint32_t WDT_LEVEL_INT_EN = (1U << 17);  ///< WDT_LEVEL_INT_EN
        constexpr uint32_t WDT_CPU_RESET_LENGTH = (3 << 14);  ///< 100ns
        constexpr uint32_t WDT_SYS_RESET_LENGTH = (3 << 11);  ///< WDT_SYS_RESET_LENGTH
        constexpr uint32_t WDT_FLASHBOOT_MOD_EN = (1U << 10);  ///< WDT_FLASHBOOT_MOD_EN
        constexpr uint32_t WDT_PROCPU_RESET_EN = (1U << 9);  ///< WDT_PROCPU_RESET_EN
        constexpr uint32_t WDT_APPCPU_RESET_EN = (1U << 8);  ///< WDT_APPCPU_RESET_EN
        constexpr uint32_t WDT_PAUSE_IN_SLP = (1U << 7);  ///< WDT_PAUSE_IN_SLP
    }

    /// WDTCONFIG1 Register bits
    namespace wdtconfig1_bits {
        constexpr uint32_t WDT_STG0_HOLD = (32 << 0);  ///< WDT_STG0_HOLD
    }

    /// WDTCONFIG2 Register bits
    namespace wdtconfig2_bits {
        constexpr uint32_t WDT_STG1_HOLD = (32 << 0);  ///< WDT_STG1_HOLD
    }

    /// WDTCONFIG3 Register bits
    namespace wdtconfig3_bits {
        constexpr uint32_t WDT_STG2_HOLD = (32 << 0);  ///< WDT_STG2_HOLD
    }

    /// WDTCONFIG4 Register bits
    namespace wdtconfig4_bits {
        constexpr uint32_t WDT_STG3_HOLD = (32 << 0);  ///< WDT_STG3_HOLD
    }

    /// WDTFEED Register bits
    namespace wdtfeed_bits {
        constexpr uint32_t WDT_FEED = (1U << 31);  ///< WDT_FEED
    }

    /// WDTWPROTECT Register bits
    namespace wdtwprotect_bits {
        constexpr uint32_t WDT_WKEY = (32 << 0);  ///< WDT_WKEY
    }

    /// TEST_MUX Register bits
    namespace test_mux_bits {
        constexpr uint32_t DTEST_RTC = (2 << 30);  ///< DTEST_RTC
        constexpr uint32_t ENT_RTC = (1U << 29);  ///< ENT_RTC
    }

    /// SW_CPU_STALL Register bits
    namespace sw_cpu_stall_bits {
        constexpr uint32_t SW_STALL_PROCPU_C1 = (6 << 26);  ///< SW_STALL_PROCPU_C1
        constexpr uint32_t SW_STALL_APPCPU_C1 = (6 << 20);  ///< SW_STALL_APPCPU_C1
    }

    /// STORE4 Register bits
    namespace store4_bits {
        constexpr uint32_t SCRATCH4 = (32 << 0);  ///< SCRATCH4
    }

    /// STORE5 Register bits
    namespace store5_bits {
        constexpr uint32_t SCRATCH5 = (32 << 0);  ///< SCRATCH5
    }

    /// STORE6 Register bits
    namespace store6_bits {
        constexpr uint32_t SCRATCH6 = (32 << 0);  ///< SCRATCH6
    }

    /// STORE7 Register bits
    namespace store7_bits {
        constexpr uint32_t SCRATCH7 = (32 << 0);  ///< SCRATCH7
    }

    /// DIAG1 Register bits
    namespace diag1_bits {
        constexpr uint32_t LOW_POWER_DIAG1 = (32 << 0);  ///< LOW_POWER_DIAG1
    }

    /// HOLD_FORCE Register bits
    namespace hold_force_bits {
        constexpr uint32_t X32N_HOLD_FORCE = (1U << 17);  ///< X32N_HOLD_FORCE
        constexpr uint32_t X32P_HOLD_FORCE = (1U << 16);  ///< X32P_HOLD_FORCE
        constexpr uint32_t TOUCH_PAD7_HOLD_FORCE = (1U << 15);  ///< TOUCH_PAD7_HOLD_FORCE
        constexpr uint32_t TOUCH_PAD6_HOLD_FORCE = (1U << 14);  ///< TOUCH_PAD6_HOLD_FORCE
        constexpr uint32_t TOUCH_PAD5_HOLD_FORCE = (1U << 13);  ///< TOUCH_PAD5_HOLD_FORCE
        constexpr uint32_t TOUCH_PAD4_HOLD_FORCE = (1U << 12);  ///< TOUCH_PAD4_HOLD_FORCE
        constexpr uint32_t TOUCH_PAD3_HOLD_FORCE = (1U << 11);  ///< TOUCH_PAD3_HOLD_FORCE
        constexpr uint32_t TOUCH_PAD2_HOLD_FORCE = (1U << 10);  ///< TOUCH_PAD2_HOLD_FORCE
        constexpr uint32_t TOUCH_PAD1_HOLD_FORCE = (1U << 9);  ///< TOUCH_PAD1_HOLD_FORCE
        constexpr uint32_t TOUCH_PAD0_HOLD_FORCE = (1U << 8);  ///< TOUCH_PAD0_HOLD_FORCE
        constexpr uint32_t SENSE4_HOLD_FORCE = (1U << 7);  ///< SENSE4_HOLD_FORCE
        constexpr uint32_t SENSE3_HOLD_FORCE = (1U << 6);  ///< SENSE3_HOLD_FORCE
        constexpr uint32_t SENSE2_HOLD_FORCE = (1U << 5);  ///< SENSE2_HOLD_FORCE
        constexpr uint32_t SENSE1_HOLD_FORCE = (1U << 4);  ///< SENSE1_HOLD_FORCE
        constexpr uint32_t PDAC2_HOLD_FORCE = (1U << 3);  ///< PDAC2_HOLD_FORCE
        constexpr uint32_t PDAC1_HOLD_FORCE = (1U << 2);  ///< PDAC1_HOLD_FORCE
        constexpr uint32_t ADC2_HOLD_FORCE = (1U << 1);  ///< ADC2_HOLD_FORCE
        constexpr uint32_t ADC1_HOLD_FORCE = (1U << 0);  ///< ADC1_HOLD_FORCE
    }

    /// EXT_WAKEUP1 Register bits
    namespace ext_wakeup1_bits {
        constexpr uint32_t EXT_WAKEUP1_STATUS_CLR = (1U << 18);  ///< EXT_WAKEUP1_STATUS_CLR
        constexpr uint32_t EXT_WAKEUP1_SEL = (18 << 0);  ///< EXT_WAKEUP1_SEL
    }

    /// EXT_WAKEUP1_STATUS Register bits
    namespace ext_wakeup1_status_bits {
        constexpr uint32_t EXT_WAKEUP1_STATUS = (18 << 0);  ///< EXT_WAKEUP1_STATUS
    }

    /// BROWN_OUT Register bits
    namespace brown_out_bits {
        constexpr uint32_t BROWN_OUT_DET = (1U << 31);  ///< BROWN_OUT_DET
        constexpr uint32_t BROWN_OUT_ENA = (1U << 30);  ///< BROWN_OUT_ENA
        constexpr uint32_t DBROWN_OUT_THRES = (3 << 27);  ///< DBROWN_OUT_THRES
        constexpr uint32_t BROWN_OUT_RST_ENA = (1U << 26);  ///< BROWN_OUT_RST_ENA
        constexpr uint32_t BROWN_OUT_RST_WAIT = (10 << 16);  ///< BROWN_OUT_RST_WAIT
        constexpr uint32_t BROWN_OUT_PD_RF_ENA = (1U << 15);  ///< BROWN_OUT_PD_RF_ENA
        constexpr uint32_t BROWN_OUT_CLOSE_FLASH_ENA = (1U << 14);  ///< BROWN_OUT_CLOSE_FLASH_ENA
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t CNTL_DATE = (28 << 0);  ///< CNTL_DATE
    }

    /// CNTL Register bits
    namespace cntl_bits {
        constexpr uint32_t FORCE_PU = (1U << 31);  ///< Force RTC power up
        constexpr uint32_t FORCE_PD = (1U << 30);  ///< Force RTC power down (decrease voltage to 0.8V or lower)
        constexpr uint32_t FORCE_DBOOST_PU = (1U << 29);  ///< Force DBOOST power up
        constexpr uint32_t FORCE_DBOOST_PD = (1U << 28);  ///< Force DBOOST power down
        constexpr uint32_t DBIAS_WAK = (3 << 25);  ///< RTC DBIAS during wakeup
        constexpr uint32_t DBIAS_SLP = (3 << 22);  ///< RTC DBIAS during sleep
        constexpr uint32_t SCK_DCAP = (8 << 14);  ///< 150kHz oscillator tuning
        constexpr uint32_t DIG_DBIAS_WAK = (3 << 11);  ///< DBIAS during wakeup
        constexpr uint32_t DIG_DBIAS_SLP = (3 << 8);  ///< DBIAS during wakeup
        constexpr uint32_t SCK_DCAP_FORCE = (1U << 7);  ///< 150kHz tuning force
    }

    /// APLL Register bits
    namespace apll_bits {
        constexpr uint32_t BLOCK = (8 << 0);  ///< Block
        constexpr uint32_t ADDR = (8 << 8);  ///< Address
        constexpr uint32_t DATA = (8 << 16);  ///< Data
        constexpr uint32_t WRITE = (1U << 24);  ///< Write
        constexpr uint32_t BUSY = (1U << 25);  ///< Ready
    }

    /// PLL Register bits
    namespace pll_bits {
        constexpr uint32_t BLOCK = (8 << 0);  ///< Block
        constexpr uint32_t ADDR = (8 << 8);  ///< Address
        constexpr uint32_t DATA = (8 << 16);  ///< Data
        constexpr uint32_t WRITE = (1U << 24);  ///< Write
        constexpr uint32_t BUSY = (1U << 25);  ///< Ready
    }

}

// ============================================================================
// PCNT Peripheral
// ============================================================================

namespace pcnt {
    /// Base addresses
    constexpr uint32_t PCNT_BASE = 0x3FF57000;

    /// PCNT Register structure
    struct Registers {
        volatile uint32_t U0_CONF0;  ///< Offset: 0x00 - PCNT_U0_CONF0
        volatile uint32_t U0_CONF1;  ///< Offset: 0x04 - PCNT_U0_CONF1
        volatile uint32_t U0_CONF2;  ///< Offset: 0x08 - PCNT_U0_CONF2
        volatile uint32_t U1_CONF0;  ///< Offset: 0x0C - PCNT_U1_CONF0
        volatile uint32_t U1_CONF1;  ///< Offset: 0x10 - PCNT_U1_CONF1
        volatile uint32_t U1_CONF2;  ///< Offset: 0x14 - PCNT_U1_CONF2
        volatile uint32_t U2_CONF0;  ///< Offset: 0x18 - PCNT_U2_CONF0
        volatile uint32_t U2_CONF1;  ///< Offset: 0x1C - PCNT_U2_CONF1
        volatile uint32_t U2_CONF2;  ///< Offset: 0x20 - PCNT_U2_CONF2
        volatile uint32_t U3_CONF0;  ///< Offset: 0x24 - PCNT_U3_CONF0
        volatile uint32_t U3_CONF1;  ///< Offset: 0x28 - PCNT_U3_CONF1
        volatile uint32_t U3_CONF2;  ///< Offset: 0x2C - PCNT_U3_CONF2
        volatile uint32_t U4_CONF0;  ///< Offset: 0x30 - PCNT_U4_CONF0
        volatile uint32_t U4_CONF1;  ///< Offset: 0x34 - PCNT_U4_CONF1
        volatile uint32_t U4_CONF2;  ///< Offset: 0x38 - PCNT_U4_CONF2
        volatile uint32_t U5_CONF0;  ///< Offset: 0x3C - PCNT_U5_CONF0
        volatile uint32_t U5_CONF1;  ///< Offset: 0x40 - PCNT_U5_CONF1
        volatile uint32_t U5_CONF2;  ///< Offset: 0x44 - PCNT_U5_CONF2
        volatile uint32_t U6_CONF0;  ///< Offset: 0x48 - PCNT_U6_CONF0
        volatile uint32_t U6_CONF1;  ///< Offset: 0x4C - PCNT_U6_CONF1
        volatile uint32_t U6_CONF2;  ///< Offset: 0x50 - PCNT_U6_CONF2
        volatile uint32_t U7_CONF0;  ///< Offset: 0x54 - PCNT_U7_CONF0
        volatile uint32_t U7_CONF1;  ///< Offset: 0x58 - PCNT_U7_CONF1
        volatile uint32_t U7_CONF2;  ///< Offset: 0x5C - PCNT_U7_CONF2
        volatile uint32_t U0_CNT;  ///< Offset: 0x60 - PCNT_U0_CNT
        volatile uint32_t U1_CNT;  ///< Offset: 0x64 - PCNT_U1_CNT
        volatile uint32_t U2_CNT;  ///< Offset: 0x68 - PCNT_U2_CNT
        volatile uint32_t U3_CNT;  ///< Offset: 0x6C - PCNT_U3_CNT
        volatile uint32_t U4_CNT;  ///< Offset: 0x70 - PCNT_U4_CNT
        volatile uint32_t U5_CNT;  ///< Offset: 0x74 - PCNT_U5_CNT
        volatile uint32_t U6_CNT;  ///< Offset: 0x78 - PCNT_U6_CNT
        volatile uint32_t U7_CNT;  ///< Offset: 0x7C - PCNT_U7_CNT
        volatile uint32_t INT_RAW;  ///< Offset: 0x80 - PCNT_INT_RAW
        volatile uint32_t INT_ST;  ///< Offset: 0x84 - PCNT_INT_ST
        volatile uint32_t INT_ENA;  ///< Offset: 0x88 - PCNT_INT_ENA
        volatile uint32_t INT_CLR;  ///< Offset: 0x8C - PCNT_INT_CLR
        volatile uint32_t U0_STATUS;  ///< Offset: 0x90 - PCNT_U0_STATUS
        volatile uint32_t U1_STATUS;  ///< Offset: 0x94 - PCNT_U1_STATUS
        volatile uint32_t U2_STATUS;  ///< Offset: 0x98 - PCNT_U2_STATUS
        volatile uint32_t U3_STATUS;  ///< Offset: 0x9C - PCNT_U3_STATUS
        volatile uint32_t U4_STATUS;  ///< Offset: 0xA0 - PCNT_U4_STATUS
        volatile uint32_t U5_STATUS;  ///< Offset: 0xA4 - PCNT_U5_STATUS
        volatile uint32_t U6_STATUS;  ///< Offset: 0xA8 - PCNT_U6_STATUS
        volatile uint32_t U7_STATUS;  ///< Offset: 0xAC - PCNT_U7_STATUS
        volatile uint32_t CTRL;  ///< Offset: 0xB0 - PCNT_CTRL
        volatile uint32_t DATE;  ///< Offset: 0xFC - PCNT_DATE
    };

    /// Peripheral instances
    inline Registers* PCNT = reinterpret_cast<Registers*>(PCNT_BASE);

    // Bit definitions
    /// U0_CONF0 Register bits
    namespace u0_conf0_bits {
        constexpr uint32_t CH1_LCTRL_MODE_U0 = (2 << 30);  ///< CH1_LCTRL_MODE_U0
        constexpr uint32_t CH1_HCTRL_MODE_U0 = (2 << 28);  ///< CH1_HCTRL_MODE_U0
        constexpr uint32_t CH1_POS_MODE_U0 = (2 << 26);  ///< CH1_POS_MODE_U0
        constexpr uint32_t CH1_NEG_MODE_U0 = (2 << 24);  ///< CH1_NEG_MODE_U0
        constexpr uint32_t CH0_LCTRL_MODE_U0 = (2 << 22);  ///< CH0_LCTRL_MODE_U0
        constexpr uint32_t CH0_HCTRL_MODE_U0 = (2 << 20);  ///< CH0_HCTRL_MODE_U0
        constexpr uint32_t CH0_POS_MODE_U0 = (2 << 18);  ///< CH0_POS_MODE_U0
        constexpr uint32_t CH0_NEG_MODE_U0 = (2 << 16);  ///< CH0_NEG_MODE_U0
        constexpr uint32_t THR_THRES1_EN_U0 = (1U << 15);  ///< THR_THRES1_EN_U0
        constexpr uint32_t THR_THRES0_EN_U0 = (1U << 14);  ///< THR_THRES0_EN_U0
        constexpr uint32_t THR_L_LIM_EN_U0 = (1U << 13);  ///< THR_L_LIM_EN_U0
        constexpr uint32_t THR_H_LIM_EN_U0 = (1U << 12);  ///< THR_H_LIM_EN_U0
        constexpr uint32_t THR_ZERO_EN_U0 = (1U << 11);  ///< THR_ZERO_EN_U0
        constexpr uint32_t FILTER_EN_U0 = (1U << 10);  ///< FILTER_EN_U0
        constexpr uint32_t FILTER_THRES_U0 = (10 << 0);  ///< FILTER_THRES_U0
    }

    /// U0_CONF1 Register bits
    namespace u0_conf1_bits {
        constexpr uint32_t CNT_THRES1_U0 = (16 << 16);  ///< CNT_THRES1_U0
        constexpr uint32_t CNT_THRES0_U0 = (16 << 0);  ///< CNT_THRES0_U0
    }

    /// U0_CONF2 Register bits
    namespace u0_conf2_bits {
        constexpr uint32_t CNT_L_LIM_U0 = (16 << 16);  ///< CNT_L_LIM_U0
        constexpr uint32_t CNT_H_LIM_U0 = (16 << 0);  ///< CNT_H_LIM_U0
    }

    /// U1_CONF0 Register bits
    namespace u1_conf0_bits {
        constexpr uint32_t CH1_LCTRL_MODE_U1 = (2 << 30);  ///< CH1_LCTRL_MODE_U1
        constexpr uint32_t CH1_HCTRL_MODE_U1 = (2 << 28);  ///< CH1_HCTRL_MODE_U1
        constexpr uint32_t CH1_POS_MODE_U1 = (2 << 26);  ///< CH1_POS_MODE_U1
        constexpr uint32_t CH1_NEG_MODE_U1 = (2 << 24);  ///< CH1_NEG_MODE_U1
        constexpr uint32_t CH0_LCTRL_MODE_U1 = (2 << 22);  ///< CH0_LCTRL_MODE_U1
        constexpr uint32_t CH0_HCTRL_MODE_U1 = (2 << 20);  ///< CH0_HCTRL_MODE_U1
        constexpr uint32_t CH0_POS_MODE_U1 = (2 << 18);  ///< CH0_POS_MODE_U1
        constexpr uint32_t CH0_NEG_MODE_U1 = (2 << 16);  ///< CH0_NEG_MODE_U1
        constexpr uint32_t THR_THRES1_EN_U1 = (1U << 15);  ///< THR_THRES1_EN_U1
        constexpr uint32_t THR_THRES0_EN_U1 = (1U << 14);  ///< THR_THRES0_EN_U1
        constexpr uint32_t THR_L_LIM_EN_U1 = (1U << 13);  ///< THR_L_LIM_EN_U1
        constexpr uint32_t THR_H_LIM_EN_U1 = (1U << 12);  ///< THR_H_LIM_EN_U1
        constexpr uint32_t THR_ZERO_EN_U1 = (1U << 11);  ///< THR_ZERO_EN_U1
        constexpr uint32_t FILTER_EN_U1 = (1U << 10);  ///< FILTER_EN_U1
        constexpr uint32_t FILTER_THRES_U1 = (10 << 0);  ///< FILTER_THRES_U1
    }

    /// U1_CONF1 Register bits
    namespace u1_conf1_bits {
        constexpr uint32_t CNT_THRES1_U1 = (16 << 16);  ///< CNT_THRES1_U1
        constexpr uint32_t CNT_THRES0_U1 = (16 << 0);  ///< CNT_THRES0_U1
    }

    /// U1_CONF2 Register bits
    namespace u1_conf2_bits {
        constexpr uint32_t CNT_L_LIM_U1 = (16 << 16);  ///< CNT_L_LIM_U1
        constexpr uint32_t CNT_H_LIM_U1 = (16 << 0);  ///< CNT_H_LIM_U1
    }

    /// U2_CONF0 Register bits
    namespace u2_conf0_bits {
        constexpr uint32_t CH1_LCTRL_MODE_U2 = (2 << 30);  ///< CH1_LCTRL_MODE_U2
        constexpr uint32_t CH1_HCTRL_MODE_U2 = (2 << 28);  ///< CH1_HCTRL_MODE_U2
        constexpr uint32_t CH1_POS_MODE_U2 = (2 << 26);  ///< CH1_POS_MODE_U2
        constexpr uint32_t CH1_NEG_MODE_U2 = (2 << 24);  ///< CH1_NEG_MODE_U2
        constexpr uint32_t CH0_LCTRL_MODE_U2 = (2 << 22);  ///< CH0_LCTRL_MODE_U2
        constexpr uint32_t CH0_HCTRL_MODE_U2 = (2 << 20);  ///< CH0_HCTRL_MODE_U2
        constexpr uint32_t CH0_POS_MODE_U2 = (2 << 18);  ///< CH0_POS_MODE_U2
        constexpr uint32_t CH0_NEG_MODE_U2 = (2 << 16);  ///< CH0_NEG_MODE_U2
        constexpr uint32_t THR_THRES1_EN_U2 = (1U << 15);  ///< THR_THRES1_EN_U2
        constexpr uint32_t THR_THRES0_EN_U2 = (1U << 14);  ///< THR_THRES0_EN_U2
        constexpr uint32_t THR_L_LIM_EN_U2 = (1U << 13);  ///< THR_L_LIM_EN_U2
        constexpr uint32_t THR_H_LIM_EN_U2 = (1U << 12);  ///< THR_H_LIM_EN_U2
        constexpr uint32_t THR_ZERO_EN_U2 = (1U << 11);  ///< THR_ZERO_EN_U2
        constexpr uint32_t FILTER_EN_U2 = (1U << 10);  ///< FILTER_EN_U2
        constexpr uint32_t FILTER_THRES_U2 = (10 << 0);  ///< FILTER_THRES_U2
    }

    /// U2_CONF1 Register bits
    namespace u2_conf1_bits {
        constexpr uint32_t CNT_THRES1_U2 = (16 << 16);  ///< CNT_THRES1_U2
        constexpr uint32_t CNT_THRES0_U2 = (16 << 0);  ///< CNT_THRES0_U2
    }

    /// U2_CONF2 Register bits
    namespace u2_conf2_bits {
        constexpr uint32_t CNT_L_LIM_U2 = (16 << 16);  ///< CNT_L_LIM_U2
        constexpr uint32_t CNT_H_LIM_U2 = (16 << 0);  ///< CNT_H_LIM_U2
    }

    /// U3_CONF0 Register bits
    namespace u3_conf0_bits {
        constexpr uint32_t CH1_LCTRL_MODE_U3 = (2 << 30);  ///< CH1_LCTRL_MODE_U3
        constexpr uint32_t CH1_HCTRL_MODE_U3 = (2 << 28);  ///< CH1_HCTRL_MODE_U3
        constexpr uint32_t CH1_POS_MODE_U3 = (2 << 26);  ///< CH1_POS_MODE_U3
        constexpr uint32_t CH1_NEG_MODE_U3 = (2 << 24);  ///< CH1_NEG_MODE_U3
        constexpr uint32_t CH0_LCTRL_MODE_U3 = (2 << 22);  ///< CH0_LCTRL_MODE_U3
        constexpr uint32_t CH0_HCTRL_MODE_U3 = (2 << 20);  ///< CH0_HCTRL_MODE_U3
        constexpr uint32_t CH0_POS_MODE_U3 = (2 << 18);  ///< CH0_POS_MODE_U3
        constexpr uint32_t CH0_NEG_MODE_U3 = (2 << 16);  ///< CH0_NEG_MODE_U3
        constexpr uint32_t THR_THRES1_EN_U3 = (1U << 15);  ///< THR_THRES1_EN_U3
        constexpr uint32_t THR_THRES0_EN_U3 = (1U << 14);  ///< THR_THRES0_EN_U3
        constexpr uint32_t THR_L_LIM_EN_U3 = (1U << 13);  ///< THR_L_LIM_EN_U3
        constexpr uint32_t THR_H_LIM_EN_U3 = (1U << 12);  ///< THR_H_LIM_EN_U3
        constexpr uint32_t THR_ZERO_EN_U3 = (1U << 11);  ///< THR_ZERO_EN_U3
        constexpr uint32_t FILTER_EN_U3 = (1U << 10);  ///< FILTER_EN_U3
        constexpr uint32_t FILTER_THRES_U3 = (10 << 0);  ///< FILTER_THRES_U3
    }

    /// U3_CONF1 Register bits
    namespace u3_conf1_bits {
        constexpr uint32_t CNT_THRES1_U3 = (16 << 16);  ///< CNT_THRES1_U3
        constexpr uint32_t CNT_THRES0_U3 = (16 << 0);  ///< CNT_THRES0_U3
    }

    /// U3_CONF2 Register bits
    namespace u3_conf2_bits {
        constexpr uint32_t CNT_L_LIM_U3 = (16 << 16);  ///< CNT_L_LIM_U3
        constexpr uint32_t CNT_H_LIM_U3 = (16 << 0);  ///< CNT_H_LIM_U3
    }

    /// U4_CONF0 Register bits
    namespace u4_conf0_bits {
        constexpr uint32_t CH1_LCTRL_MODE_U4 = (2 << 30);  ///< CH1_LCTRL_MODE_U4
        constexpr uint32_t CH1_HCTRL_MODE_U4 = (2 << 28);  ///< CH1_HCTRL_MODE_U4
        constexpr uint32_t CH1_POS_MODE_U4 = (2 << 26);  ///< CH1_POS_MODE_U4
        constexpr uint32_t CH1_NEG_MODE_U4 = (2 << 24);  ///< CH1_NEG_MODE_U4
        constexpr uint32_t CH0_LCTRL_MODE_U4 = (2 << 22);  ///< CH0_LCTRL_MODE_U4
        constexpr uint32_t CH0_HCTRL_MODE_U4 = (2 << 20);  ///< CH0_HCTRL_MODE_U4
        constexpr uint32_t CH0_POS_MODE_U4 = (2 << 18);  ///< CH0_POS_MODE_U4
        constexpr uint32_t CH0_NEG_MODE_U4 = (2 << 16);  ///< CH0_NEG_MODE_U4
        constexpr uint32_t THR_THRES1_EN_U4 = (1U << 15);  ///< THR_THRES1_EN_U4
        constexpr uint32_t THR_THRES0_EN_U4 = (1U << 14);  ///< THR_THRES0_EN_U4
        constexpr uint32_t THR_L_LIM_EN_U4 = (1U << 13);  ///< THR_L_LIM_EN_U4
        constexpr uint32_t THR_H_LIM_EN_U4 = (1U << 12);  ///< THR_H_LIM_EN_U4
        constexpr uint32_t THR_ZERO_EN_U4 = (1U << 11);  ///< THR_ZERO_EN_U4
        constexpr uint32_t FILTER_EN_U4 = (1U << 10);  ///< FILTER_EN_U4
        constexpr uint32_t FILTER_THRES_U4 = (10 << 0);  ///< FILTER_THRES_U4
    }

    /// U4_CONF1 Register bits
    namespace u4_conf1_bits {
        constexpr uint32_t CNT_THRES1_U4 = (16 << 16);  ///< CNT_THRES1_U4
        constexpr uint32_t CNT_THRES0_U4 = (16 << 0);  ///< CNT_THRES0_U4
    }

    /// U4_CONF2 Register bits
    namespace u4_conf2_bits {
        constexpr uint32_t CNT_L_LIM_U4 = (16 << 16);  ///< CNT_L_LIM_U4
        constexpr uint32_t CNT_H_LIM_U4 = (16 << 0);  ///< CNT_H_LIM_U4
    }

    /// U5_CONF0 Register bits
    namespace u5_conf0_bits {
        constexpr uint32_t CH1_LCTRL_MODE_U5 = (2 << 30);  ///< CH1_LCTRL_MODE_U5
        constexpr uint32_t CH1_HCTRL_MODE_U5 = (2 << 28);  ///< CH1_HCTRL_MODE_U5
        constexpr uint32_t CH1_POS_MODE_U5 = (2 << 26);  ///< CH1_POS_MODE_U5
        constexpr uint32_t CH1_NEG_MODE_U5 = (2 << 24);  ///< CH1_NEG_MODE_U5
        constexpr uint32_t CH0_LCTRL_MODE_U5 = (2 << 22);  ///< CH0_LCTRL_MODE_U5
        constexpr uint32_t CH0_HCTRL_MODE_U5 = (2 << 20);  ///< CH0_HCTRL_MODE_U5
        constexpr uint32_t CH0_POS_MODE_U5 = (2 << 18);  ///< CH0_POS_MODE_U5
        constexpr uint32_t CH0_NEG_MODE_U5 = (2 << 16);  ///< CH0_NEG_MODE_U5
        constexpr uint32_t THR_THRES1_EN_U5 = (1U << 15);  ///< THR_THRES1_EN_U5
        constexpr uint32_t THR_THRES0_EN_U5 = (1U << 14);  ///< THR_THRES0_EN_U5
        constexpr uint32_t THR_L_LIM_EN_U5 = (1U << 13);  ///< THR_L_LIM_EN_U5
        constexpr uint32_t THR_H_LIM_EN_U5 = (1U << 12);  ///< THR_H_LIM_EN_U5
        constexpr uint32_t THR_ZERO_EN_U5 = (1U << 11);  ///< THR_ZERO_EN_U5
        constexpr uint32_t FILTER_EN_U5 = (1U << 10);  ///< FILTER_EN_U5
        constexpr uint32_t FILTER_THRES_U5 = (10 << 0);  ///< FILTER_THRES_U5
    }

    /// U5_CONF1 Register bits
    namespace u5_conf1_bits {
        constexpr uint32_t CNT_THRES1_U5 = (16 << 16);  ///< CNT_THRES1_U5
        constexpr uint32_t CNT_THRES0_U5 = (16 << 0);  ///< CNT_THRES0_U5
    }

    /// U5_CONF2 Register bits
    namespace u5_conf2_bits {
        constexpr uint32_t CNT_L_LIM_U5 = (16 << 16);  ///< CNT_L_LIM_U5
        constexpr uint32_t CNT_H_LIM_U5 = (16 << 0);  ///< CNT_H_LIM_U5
    }

    /// U6_CONF0 Register bits
    namespace u6_conf0_bits {
        constexpr uint32_t CH1_LCTRL_MODE_U6 = (2 << 30);  ///< CH1_LCTRL_MODE_U6
        constexpr uint32_t CH1_HCTRL_MODE_U6 = (2 << 28);  ///< CH1_HCTRL_MODE_U6
        constexpr uint32_t CH1_POS_MODE_U6 = (2 << 26);  ///< CH1_POS_MODE_U6
        constexpr uint32_t CH1_NEG_MODE_U6 = (2 << 24);  ///< CH1_NEG_MODE_U6
        constexpr uint32_t CH0_LCTRL_MODE_U6 = (2 << 22);  ///< CH0_LCTRL_MODE_U6
        constexpr uint32_t CH0_HCTRL_MODE_U6 = (2 << 20);  ///< CH0_HCTRL_MODE_U6
        constexpr uint32_t CH0_POS_MODE_U6 = (2 << 18);  ///< CH0_POS_MODE_U6
        constexpr uint32_t CH0_NEG_MODE_U6 = (2 << 16);  ///< CH0_NEG_MODE_U6
        constexpr uint32_t THR_THRES1_EN_U6 = (1U << 15);  ///< THR_THRES1_EN_U6
        constexpr uint32_t THR_THRES0_EN_U6 = (1U << 14);  ///< THR_THRES0_EN_U6
        constexpr uint32_t THR_L_LIM_EN_U6 = (1U << 13);  ///< THR_L_LIM_EN_U6
        constexpr uint32_t THR_H_LIM_EN_U6 = (1U << 12);  ///< THR_H_LIM_EN_U6
        constexpr uint32_t THR_ZERO_EN_U6 = (1U << 11);  ///< THR_ZERO_EN_U6
        constexpr uint32_t FILTER_EN_U6 = (1U << 10);  ///< FILTER_EN_U6
        constexpr uint32_t FILTER_THRES_U6 = (10 << 0);  ///< FILTER_THRES_U6
    }

    /// U6_CONF1 Register bits
    namespace u6_conf1_bits {
        constexpr uint32_t CNT_THRES1_U6 = (16 << 16);  ///< CNT_THRES1_U6
        constexpr uint32_t CNT_THRES0_U6 = (16 << 0);  ///< CNT_THRES0_U6
    }

    /// U6_CONF2 Register bits
    namespace u6_conf2_bits {
        constexpr uint32_t CNT_L_LIM_U6 = (16 << 16);  ///< CNT_L_LIM_U6
        constexpr uint32_t CNT_H_LIM_U6 = (16 << 0);  ///< CNT_H_LIM_U6
    }

    /// U7_CONF0 Register bits
    namespace u7_conf0_bits {
        constexpr uint32_t CH1_LCTRL_MODE_U7 = (2 << 30);  ///< CH1_LCTRL_MODE_U7
        constexpr uint32_t CH1_HCTRL_MODE_U7 = (2 << 28);  ///< CH1_HCTRL_MODE_U7
        constexpr uint32_t CH1_POS_MODE_U7 = (2 << 26);  ///< CH1_POS_MODE_U7
        constexpr uint32_t CH1_NEG_MODE_U7 = (2 << 24);  ///< CH1_NEG_MODE_U7
        constexpr uint32_t CH0_LCTRL_MODE_U7 = (2 << 22);  ///< CH0_LCTRL_MODE_U7
        constexpr uint32_t CH0_HCTRL_MODE_U7 = (2 << 20);  ///< CH0_HCTRL_MODE_U7
        constexpr uint32_t CH0_POS_MODE_U7 = (2 << 18);  ///< CH0_POS_MODE_U7
        constexpr uint32_t CH0_NEG_MODE_U7 = (2 << 16);  ///< CH0_NEG_MODE_U7
        constexpr uint32_t THR_THRES1_EN_U7 = (1U << 15);  ///< THR_THRES1_EN_U7
        constexpr uint32_t THR_THRES0_EN_U7 = (1U << 14);  ///< THR_THRES0_EN_U7
        constexpr uint32_t THR_L_LIM_EN_U7 = (1U << 13);  ///< THR_L_LIM_EN_U7
        constexpr uint32_t THR_H_LIM_EN_U7 = (1U << 12);  ///< THR_H_LIM_EN_U7
        constexpr uint32_t THR_ZERO_EN_U7 = (1U << 11);  ///< THR_ZERO_EN_U7
        constexpr uint32_t FILTER_EN_U7 = (1U << 10);  ///< FILTER_EN_U7
        constexpr uint32_t FILTER_THRES_U7 = (10 << 0);  ///< FILTER_THRES_U7
    }

    /// U7_CONF1 Register bits
    namespace u7_conf1_bits {
        constexpr uint32_t CNT_THRES1_U7 = (16 << 16);  ///< CNT_THRES1_U7
        constexpr uint32_t CNT_THRES0_U7 = (16 << 0);  ///< CNT_THRES0_U7
    }

    /// U7_CONF2 Register bits
    namespace u7_conf2_bits {
        constexpr uint32_t CNT_L_LIM_U7 = (16 << 16);  ///< CNT_L_LIM_U7
        constexpr uint32_t CNT_H_LIM_U7 = (16 << 0);  ///< CNT_H_LIM_U7
    }

    /// U0_CNT Register bits
    namespace u0_cnt_bits {
        constexpr uint32_t PLUS_CNT_U0 = (16 << 0);  ///< PLUS_CNT_U0
    }

    /// U1_CNT Register bits
    namespace u1_cnt_bits {
        constexpr uint32_t PLUS_CNT_U1 = (16 << 0);  ///< PLUS_CNT_U1
    }

    /// U2_CNT Register bits
    namespace u2_cnt_bits {
        constexpr uint32_t PLUS_CNT_U2 = (16 << 0);  ///< PLUS_CNT_U2
    }

    /// U3_CNT Register bits
    namespace u3_cnt_bits {
        constexpr uint32_t PLUS_CNT_U3 = (16 << 0);  ///< PLUS_CNT_U3
    }

    /// U4_CNT Register bits
    namespace u4_cnt_bits {
        constexpr uint32_t PLUS_CNT_U4 = (16 << 0);  ///< PLUS_CNT_U4
    }

    /// U5_CNT Register bits
    namespace u5_cnt_bits {
        constexpr uint32_t PLUS_CNT_U5 = (16 << 0);  ///< PLUS_CNT_U5
    }

    /// U6_CNT Register bits
    namespace u6_cnt_bits {
        constexpr uint32_t PLUS_CNT_U6 = (16 << 0);  ///< PLUS_CNT_U6
    }

    /// U7_CNT Register bits
    namespace u7_cnt_bits {
        constexpr uint32_t PLUS_CNT_U7 = (16 << 0);  ///< PLUS_CNT_U7
    }

    /// INT_RAW Register bits
    namespace int_raw_bits {
        constexpr uint32_t CNT_THR_EVENT_U7_INT_RAW = (1U << 7);  ///< CNT_THR_EVENT_U7_INT_RAW
        constexpr uint32_t CNT_THR_EVENT_U6_INT_RAW = (1U << 6);  ///< CNT_THR_EVENT_U6_INT_RAW
        constexpr uint32_t CNT_THR_EVENT_U5_INT_RAW = (1U << 5);  ///< CNT_THR_EVENT_U5_INT_RAW
        constexpr uint32_t CNT_THR_EVENT_U4_INT_RAW = (1U << 4);  ///< CNT_THR_EVENT_U4_INT_RAW
        constexpr uint32_t CNT_THR_EVENT_U3_INT_RAW = (1U << 3);  ///< CNT_THR_EVENT_U3_INT_RAW
        constexpr uint32_t CNT_THR_EVENT_U2_INT_RAW = (1U << 2);  ///< CNT_THR_EVENT_U2_INT_RAW
        constexpr uint32_t CNT_THR_EVENT_U1_INT_RAW = (1U << 1);  ///< CNT_THR_EVENT_U1_INT_RAW
        constexpr uint32_t CNT_THR_EVENT_U0_INT_RAW = (1U << 0);  ///< CNT_THR_EVENT_U0_INT_RAW
    }

    /// INT_ST Register bits
    namespace int_st_bits {
        constexpr uint32_t CNT_THR_EVENT_U7_INT_ST = (1U << 7);  ///< CNT_THR_EVENT_U7_INT_ST
        constexpr uint32_t CNT_THR_EVENT_U6_INT_ST = (1U << 6);  ///< CNT_THR_EVENT_U6_INT_ST
        constexpr uint32_t CNT_THR_EVENT_U5_INT_ST = (1U << 5);  ///< CNT_THR_EVENT_U5_INT_ST
        constexpr uint32_t CNT_THR_EVENT_U4_INT_ST = (1U << 4);  ///< CNT_THR_EVENT_U4_INT_ST
        constexpr uint32_t CNT_THR_EVENT_U3_INT_ST = (1U << 3);  ///< CNT_THR_EVENT_U3_INT_ST
        constexpr uint32_t CNT_THR_EVENT_U2_INT_ST = (1U << 2);  ///< CNT_THR_EVENT_U2_INT_ST
        constexpr uint32_t CNT_THR_EVENT_U1_INT_ST = (1U << 1);  ///< CNT_THR_EVENT_U1_INT_ST
        constexpr uint32_t CNT_THR_EVENT_U0_INT_ST = (1U << 0);  ///< CNT_THR_EVENT_U0_INT_ST
    }

    /// INT_ENA Register bits
    namespace int_ena_bits {
        constexpr uint32_t CNT_THR_EVENT_U7_INT_ENA = (1U << 7);  ///< CNT_THR_EVENT_U7_INT_ENA
        constexpr uint32_t CNT_THR_EVENT_U6_INT_ENA = (1U << 6);  ///< CNT_THR_EVENT_U6_INT_ENA
        constexpr uint32_t CNT_THR_EVENT_U5_INT_ENA = (1U << 5);  ///< CNT_THR_EVENT_U5_INT_ENA
        constexpr uint32_t CNT_THR_EVENT_U4_INT_ENA = (1U << 4);  ///< CNT_THR_EVENT_U4_INT_ENA
        constexpr uint32_t CNT_THR_EVENT_U3_INT_ENA = (1U << 3);  ///< CNT_THR_EVENT_U3_INT_ENA
        constexpr uint32_t CNT_THR_EVENT_U2_INT_ENA = (1U << 2);  ///< CNT_THR_EVENT_U2_INT_ENA
        constexpr uint32_t CNT_THR_EVENT_U1_INT_ENA = (1U << 1);  ///< CNT_THR_EVENT_U1_INT_ENA
        constexpr uint32_t CNT_THR_EVENT_U0_INT_ENA = (1U << 0);  ///< CNT_THR_EVENT_U0_INT_ENA
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t CNT_THR_EVENT_U7_INT_CLR = (1U << 7);  ///< CNT_THR_EVENT_U7_INT_CLR
        constexpr uint32_t CNT_THR_EVENT_U6_INT_CLR = (1U << 6);  ///< CNT_THR_EVENT_U6_INT_CLR
        constexpr uint32_t CNT_THR_EVENT_U5_INT_CLR = (1U << 5);  ///< CNT_THR_EVENT_U5_INT_CLR
        constexpr uint32_t CNT_THR_EVENT_U4_INT_CLR = (1U << 4);  ///< CNT_THR_EVENT_U4_INT_CLR
        constexpr uint32_t CNT_THR_EVENT_U3_INT_CLR = (1U << 3);  ///< CNT_THR_EVENT_U3_INT_CLR
        constexpr uint32_t CNT_THR_EVENT_U2_INT_CLR = (1U << 2);  ///< CNT_THR_EVENT_U2_INT_CLR
        constexpr uint32_t CNT_THR_EVENT_U1_INT_CLR = (1U << 1);  ///< CNT_THR_EVENT_U1_INT_CLR
        constexpr uint32_t CNT_THR_EVENT_U0_INT_CLR = (1U << 0);  ///< CNT_THR_EVENT_U0_INT_CLR
    }

    /// U0_STATUS Register bits
    namespace u0_status_bits {
        constexpr uint32_t CORE_STATUS_U0 = (32 << 0);  ///< CORE_STATUS_U0
    }

    /// U1_STATUS Register bits
    namespace u1_status_bits {
        constexpr uint32_t CORE_STATUS_U1 = (32 << 0);  ///< CORE_STATUS_U1
    }

    /// U2_STATUS Register bits
    namespace u2_status_bits {
        constexpr uint32_t CORE_STATUS_U2 = (32 << 0);  ///< CORE_STATUS_U2
    }

    /// U3_STATUS Register bits
    namespace u3_status_bits {
        constexpr uint32_t CORE_STATUS_U3 = (32 << 0);  ///< CORE_STATUS_U3
    }

    /// U4_STATUS Register bits
    namespace u4_status_bits {
        constexpr uint32_t CORE_STATUS_U4 = (32 << 0);  ///< CORE_STATUS_U4
    }

    /// U5_STATUS Register bits
    namespace u5_status_bits {
        constexpr uint32_t CORE_STATUS_U5 = (32 << 0);  ///< CORE_STATUS_U5
    }

    /// U6_STATUS Register bits
    namespace u6_status_bits {
        constexpr uint32_t CORE_STATUS_U6 = (32 << 0);  ///< CORE_STATUS_U6
    }

    /// U7_STATUS Register bits
    namespace u7_status_bits {
        constexpr uint32_t CORE_STATUS_U7 = (32 << 0);  ///< CORE_STATUS_U7
    }

    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t CLK_EN = (1U << 16);  ///< CLK_EN
        constexpr uint32_t CNT_PAUSE_U7 = (1U << 15);  ///< CNT_PAUSE_U7
        constexpr uint32_t PLUS_CNT_RST_U7 = (1U << 14);  ///< PLUS_CNT_RST_U7
        constexpr uint32_t CNT_PAUSE_U6 = (1U << 13);  ///< CNT_PAUSE_U6
        constexpr uint32_t PLUS_CNT_RST_U6 = (1U << 12);  ///< PLUS_CNT_RST_U6
        constexpr uint32_t CNT_PAUSE_U5 = (1U << 11);  ///< CNT_PAUSE_U5
        constexpr uint32_t PLUS_CNT_RST_U5 = (1U << 10);  ///< PLUS_CNT_RST_U5
        constexpr uint32_t CNT_PAUSE_U4 = (1U << 9);  ///< CNT_PAUSE_U4
        constexpr uint32_t PLUS_CNT_RST_U4 = (1U << 8);  ///< PLUS_CNT_RST_U4
        constexpr uint32_t CNT_PAUSE_U3 = (1U << 7);  ///< CNT_PAUSE_U3
        constexpr uint32_t PLUS_CNT_RST_U3 = (1U << 6);  ///< PLUS_CNT_RST_U3
        constexpr uint32_t CNT_PAUSE_U2 = (1U << 5);  ///< CNT_PAUSE_U2
        constexpr uint32_t PLUS_CNT_RST_U2 = (1U << 4);  ///< PLUS_CNT_RST_U2
        constexpr uint32_t CNT_PAUSE_U1 = (1U << 3);  ///< CNT_PAUSE_U1
        constexpr uint32_t PLUS_CNT_RST_U1 = (1U << 2);  ///< PLUS_CNT_RST_U1
        constexpr uint32_t CNT_PAUSE_U0 = (1U << 1);  ///< CNT_PAUSE_U0
        constexpr uint32_t PLUS_CNT_RST_U0 = (1U << 0);  ///< PLUS_CNT_RST_U0
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t DATE = (32 << 0);  ///< DATE
    }

}

// ============================================================================
// RMT Peripheral
// ============================================================================

namespace rmt {
    /// Base addresses
    constexpr uint32_t RMT_BASE = 0x3FF56000;

    /// RMT Register structure
    struct Registers {
        volatile uint32_t CH0CONF0;  ///< Offset: 0x20 - RMT_CH0CONF0
        volatile uint32_t CH0CONF1;  ///< Offset: 0x24 - RMT_CH0CONF1
        volatile uint32_t CH1CONF0;  ///< Offset: 0x28 - RMT_CH1CONF0
        volatile uint32_t CH1CONF1;  ///< Offset: 0x2C - RMT_CH1CONF1
        volatile uint32_t CH2CONF0;  ///< Offset: 0x30 - RMT_CH2CONF0
        volatile uint32_t CH2CONF1;  ///< Offset: 0x34 - RMT_CH2CONF1
        volatile uint32_t CH3CONF0;  ///< Offset: 0x38 - RMT_CH3CONF0
        volatile uint32_t CH3CONF1;  ///< Offset: 0x3C - RMT_CH3CONF1
        volatile uint32_t CH4CONF0;  ///< Offset: 0x40 - RMT_CH4CONF0
        volatile uint32_t CH4CONF1;  ///< Offset: 0x44 - RMT_CH4CONF1
        volatile uint32_t CH5CONF0;  ///< Offset: 0x48 - RMT_CH5CONF0
        volatile uint32_t CH5CONF1;  ///< Offset: 0x4C - RMT_CH5CONF1
        volatile uint32_t CH6CONF0;  ///< Offset: 0x50 - RMT_CH6CONF0
        volatile uint32_t CH6CONF1;  ///< Offset: 0x54 - RMT_CH6CONF1
        volatile uint32_t CH7CONF0;  ///< Offset: 0x58 - RMT_CH7CONF0
        volatile uint32_t CH7CONF1;  ///< Offset: 0x5C - RMT_CH7CONF1
        volatile uint32_t CH0STATUS;  ///< Offset: 0x60 - RMT_CH0STATUS
        volatile uint32_t CH1STATUS;  ///< Offset: 0x64 - RMT_CH1STATUS
        volatile uint32_t CH2STATUS;  ///< Offset: 0x68 - RMT_CH2STATUS
        volatile uint32_t CH3STATUS;  ///< Offset: 0x6C - RMT_CH3STATUS
        volatile uint32_t CH4STATUS;  ///< Offset: 0x70 - RMT_CH4STATUS
        volatile uint32_t CH5STATUS;  ///< Offset: 0x74 - RMT_CH5STATUS
        volatile uint32_t CH6STATUS;  ///< Offset: 0x78 - RMT_CH6STATUS
        volatile uint32_t CH7STATUS;  ///< Offset: 0x7C - RMT_CH7STATUS
        volatile uint32_t CH0ADDR;  ///< Offset: 0x80 - RMT_CH0ADDR
        volatile uint32_t CH1ADDR;  ///< Offset: 0x84 - RMT_CH1ADDR
        volatile uint32_t CH2ADDR;  ///< Offset: 0x88 - RMT_CH2ADDR
        volatile uint32_t CH3ADDR;  ///< Offset: 0x8C - RMT_CH3ADDR
        volatile uint32_t CH4ADDR;  ///< Offset: 0x90 - RMT_CH4ADDR
        volatile uint32_t CH5ADDR;  ///< Offset: 0x94 - RMT_CH5ADDR
        volatile uint32_t CH6ADDR;  ///< Offset: 0x98 - RMT_CH6ADDR
        volatile uint32_t CH7ADDR;  ///< Offset: 0x9C - RMT_CH7ADDR
        volatile uint32_t INT_RAW;  ///< Offset: 0xA0 - RMT_INT_RAW
        volatile uint32_t INT_ST;  ///< Offset: 0xA4 - RMT_INT_ST
        volatile uint32_t INT_ENA;  ///< Offset: 0xA8 - RMT_INT_ENA
        volatile uint32_t INT_CLR;  ///< Offset: 0xAC - RMT_INT_CLR
        volatile uint32_t CH0CARRIER_DUTY;  ///< Offset: 0xB0 - RMT_CH0CARRIER_DUTY
        volatile uint32_t CH1CARRIER_DUTY;  ///< Offset: 0xB4 - RMT_CH1CARRIER_DUTY
        volatile uint32_t CH2CARRIER_DUTY;  ///< Offset: 0xB8 - RMT_CH2CARRIER_DUTY
        volatile uint32_t CH3CARRIER_DUTY;  ///< Offset: 0xBC - RMT_CH3CARRIER_DUTY
        volatile uint32_t CH4CARRIER_DUTY;  ///< Offset: 0xC0 - RMT_CH4CARRIER_DUTY
        volatile uint32_t CH5CARRIER_DUTY;  ///< Offset: 0xC4 - RMT_CH5CARRIER_DUTY
        volatile uint32_t CH6CARRIER_DUTY;  ///< Offset: 0xC8 - RMT_CH6CARRIER_DUTY
        volatile uint32_t CH7CARRIER_DUTY;  ///< Offset: 0xCC - RMT_CH7CARRIER_DUTY
        volatile uint32_t CH0_TX_LIM;  ///< Offset: 0xD0 - RMT_CH0_TX_LIM
        volatile uint32_t CH1_TX_LIM;  ///< Offset: 0xD4 - RMT_CH1_TX_LIM
        volatile uint32_t CH2_TX_LIM;  ///< Offset: 0xD8 - RMT_CH2_TX_LIM
        volatile uint32_t CH3_TX_LIM;  ///< Offset: 0xDC - RMT_CH3_TX_LIM
        volatile uint32_t CH4_TX_LIM;  ///< Offset: 0xE0 - RMT_CH4_TX_LIM
        volatile uint32_t CH5_TX_LIM;  ///< Offset: 0xE4 - RMT_CH5_TX_LIM
        volatile uint32_t CH6_TX_LIM;  ///< Offset: 0xE8 - RMT_CH6_TX_LIM
        volatile uint32_t CH7_TX_LIM;  ///< Offset: 0xEC - RMT_CH7_TX_LIM
        volatile uint32_t APB_CONF;  ///< Offset: 0xF0 - RMT_APB_CONF
        volatile uint32_t DATE;  ///< Offset: 0xFC - RMT_DATE
    };

    /// Peripheral instances
    inline Registers* RMT = reinterpret_cast<Registers*>(RMT_BASE);

    // Bit definitions
    /// CH0CONF0 Register bits
    namespace ch0conf0_bits {
        constexpr uint32_t CLK_EN = (1U << 31);  ///< CLK_EN
        constexpr uint32_t MEM_PD = (1U << 30);  ///< MEM_PD
        constexpr uint32_t CARRIER_OUT_LV_CH0 = (1U << 29);  ///< CARRIER_OUT_LV_CH0
        constexpr uint32_t CARRIER_EN_CH0 = (1U << 28);  ///< CARRIER_EN_CH0
        constexpr uint32_t MEM_SIZE_CH0 = (4 << 24);  ///< MEM_SIZE_CH0
        constexpr uint32_t IDLE_THRES_CH0 = (16 << 8);  ///< IDLE_THRES_CH0
        constexpr uint32_t DIV_CNT_CH0 = (8 << 0);  ///< DIV_CNT_CH0
    }

    /// CH0CONF1 Register bits
    namespace ch0conf1_bits {
        constexpr uint32_t IDLE_OUT_EN_CH0 = (1U << 19);  ///< IDLE_OUT_EN_CH0
        constexpr uint32_t IDLE_OUT_LV_CH0 = (1U << 18);  ///< IDLE_OUT_LV_CH0
        constexpr uint32_t REF_ALWAYS_ON_CH0 = (1U << 17);  ///< REF_ALWAYS_ON_CH0
        constexpr uint32_t REF_CNT_RST_CH0 = (1U << 16);  ///< REF_CNT_RST_CH0
        constexpr uint32_t RX_FILTER_THRES_CH0 = (8 << 8);  ///< RX_FILTER_THRES_CH0
        constexpr uint32_t RX_FILTER_EN_CH0 = (1U << 7);  ///< RX_FILTER_EN_CH0
        constexpr uint32_t TX_CONTI_MODE_CH0 = (1U << 6);  ///< TX_CONTI_MODE_CH0
        constexpr uint32_t MEM_OWNER_CH0 = (1U << 5);  ///< MEM_OWNER_CH0
        constexpr uint32_t APB_MEM_RST_CH0 = (1U << 4);  ///< APB_MEM_RST_CH0
        constexpr uint32_t MEM_RD_RST_CH0 = (1U << 3);  ///< MEM_RD_RST_CH0
        constexpr uint32_t MEM_WR_RST_CH0 = (1U << 2);  ///< MEM_WR_RST_CH0
        constexpr uint32_t RX_EN_CH0 = (1U << 1);  ///< RX_EN_CH0
        constexpr uint32_t TX_START_CH0 = (1U << 0);  ///< TX_START_CH0
    }

    /// CH1CONF0 Register bits
    namespace ch1conf0_bits {
        constexpr uint32_t CARRIER_OUT_LV_CH1 = (1U << 29);  ///< CARRIER_OUT_LV_CH1
        constexpr uint32_t CARRIER_EN_CH1 = (1U << 28);  ///< CARRIER_EN_CH1
        constexpr uint32_t MEM_SIZE_CH1 = (4 << 24);  ///< MEM_SIZE_CH1
        constexpr uint32_t IDLE_THRES_CH1 = (16 << 8);  ///< IDLE_THRES_CH1
        constexpr uint32_t DIV_CNT_CH1 = (8 << 0);  ///< DIV_CNT_CH1
    }

    /// CH1CONF1 Register bits
    namespace ch1conf1_bits {
        constexpr uint32_t IDLE_OUT_EN_CH1 = (1U << 19);  ///< IDLE_OUT_EN_CH1
        constexpr uint32_t IDLE_OUT_LV_CH1 = (1U << 18);  ///< IDLE_OUT_LV_CH1
        constexpr uint32_t REF_ALWAYS_ON_CH1 = (1U << 17);  ///< REF_ALWAYS_ON_CH1
        constexpr uint32_t REF_CNT_RST_CH1 = (1U << 16);  ///< REF_CNT_RST_CH1
        constexpr uint32_t RX_FILTER_THRES_CH1 = (8 << 8);  ///< RX_FILTER_THRES_CH1
        constexpr uint32_t RX_FILTER_EN_CH1 = (1U << 7);  ///< RX_FILTER_EN_CH1
        constexpr uint32_t TX_CONTI_MODE_CH1 = (1U << 6);  ///< TX_CONTI_MODE_CH1
        constexpr uint32_t MEM_OWNER_CH1 = (1U << 5);  ///< MEM_OWNER_CH1
        constexpr uint32_t APB_MEM_RST_CH1 = (1U << 4);  ///< APB_MEM_RST_CH1
        constexpr uint32_t MEM_RD_RST_CH1 = (1U << 3);  ///< MEM_RD_RST_CH1
        constexpr uint32_t MEM_WR_RST_CH1 = (1U << 2);  ///< MEM_WR_RST_CH1
        constexpr uint32_t RX_EN_CH1 = (1U << 1);  ///< RX_EN_CH1
        constexpr uint32_t TX_START_CH1 = (1U << 0);  ///< TX_START_CH1
    }

    /// CH2CONF0 Register bits
    namespace ch2conf0_bits {
        constexpr uint32_t CARRIER_OUT_LV_CH2 = (1U << 29);  ///< CARRIER_OUT_LV_CH2
        constexpr uint32_t CARRIER_EN_CH2 = (1U << 28);  ///< CARRIER_EN_CH2
        constexpr uint32_t MEM_SIZE_CH2 = (4 << 24);  ///< MEM_SIZE_CH2
        constexpr uint32_t IDLE_THRES_CH2 = (16 << 8);  ///< IDLE_THRES_CH2
        constexpr uint32_t DIV_CNT_CH2 = (8 << 0);  ///< DIV_CNT_CH2
    }

    /// CH2CONF1 Register bits
    namespace ch2conf1_bits {
        constexpr uint32_t IDLE_OUT_EN_CH2 = (1U << 19);  ///< IDLE_OUT_EN_CH2
        constexpr uint32_t IDLE_OUT_LV_CH2 = (1U << 18);  ///< IDLE_OUT_LV_CH2
        constexpr uint32_t REF_ALWAYS_ON_CH2 = (1U << 17);  ///< REF_ALWAYS_ON_CH2
        constexpr uint32_t REF_CNT_RST_CH2 = (1U << 16);  ///< REF_CNT_RST_CH2
        constexpr uint32_t RX_FILTER_THRES_CH2 = (8 << 8);  ///< RX_FILTER_THRES_CH2
        constexpr uint32_t RX_FILTER_EN_CH2 = (1U << 7);  ///< RX_FILTER_EN_CH2
        constexpr uint32_t TX_CONTI_MODE_CH2 = (1U << 6);  ///< TX_CONTI_MODE_CH2
        constexpr uint32_t MEM_OWNER_CH2 = (1U << 5);  ///< MEM_OWNER_CH2
        constexpr uint32_t APB_MEM_RST_CH2 = (1U << 4);  ///< APB_MEM_RST_CH2
        constexpr uint32_t MEM_RD_RST_CH2 = (1U << 3);  ///< MEM_RD_RST_CH2
        constexpr uint32_t MEM_WR_RST_CH2 = (1U << 2);  ///< MEM_WR_RST_CH2
        constexpr uint32_t RX_EN_CH2 = (1U << 1);  ///< RX_EN_CH2
        constexpr uint32_t TX_START_CH2 = (1U << 0);  ///< TX_START_CH2
    }

    /// CH3CONF0 Register bits
    namespace ch3conf0_bits {
        constexpr uint32_t CARRIER_OUT_LV_CH3 = (1U << 29);  ///< CARRIER_OUT_LV_CH3
        constexpr uint32_t CARRIER_EN_CH3 = (1U << 28);  ///< CARRIER_EN_CH3
        constexpr uint32_t MEM_SIZE_CH3 = (4 << 24);  ///< MEM_SIZE_CH3
        constexpr uint32_t IDLE_THRES_CH3 = (16 << 8);  ///< IDLE_THRES_CH3
        constexpr uint32_t DIV_CNT_CH3 = (8 << 0);  ///< DIV_CNT_CH3
    }

    /// CH3CONF1 Register bits
    namespace ch3conf1_bits {
        constexpr uint32_t IDLE_OUT_EN_CH3 = (1U << 19);  ///< IDLE_OUT_EN_CH3
        constexpr uint32_t IDLE_OUT_LV_CH3 = (1U << 18);  ///< IDLE_OUT_LV_CH3
        constexpr uint32_t REF_ALWAYS_ON_CH3 = (1U << 17);  ///< REF_ALWAYS_ON_CH3
        constexpr uint32_t REF_CNT_RST_CH3 = (1U << 16);  ///< REF_CNT_RST_CH3
        constexpr uint32_t RX_FILTER_THRES_CH3 = (8 << 8);  ///< RX_FILTER_THRES_CH3
        constexpr uint32_t RX_FILTER_EN_CH3 = (1U << 7);  ///< RX_FILTER_EN_CH3
        constexpr uint32_t TX_CONTI_MODE_CH3 = (1U << 6);  ///< TX_CONTI_MODE_CH3
        constexpr uint32_t MEM_OWNER_CH3 = (1U << 5);  ///< MEM_OWNER_CH3
        constexpr uint32_t APB_MEM_RST_CH3 = (1U << 4);  ///< APB_MEM_RST_CH3
        constexpr uint32_t MEM_RD_RST_CH3 = (1U << 3);  ///< MEM_RD_RST_CH3
        constexpr uint32_t MEM_WR_RST_CH3 = (1U << 2);  ///< MEM_WR_RST_CH3
        constexpr uint32_t RX_EN_CH3 = (1U << 1);  ///< RX_EN_CH3
        constexpr uint32_t TX_START_CH3 = (1U << 0);  ///< TX_START_CH3
    }

    /// CH4CONF0 Register bits
    namespace ch4conf0_bits {
        constexpr uint32_t CARRIER_OUT_LV_CH4 = (1U << 29);  ///< CARRIER_OUT_LV_CH4
        constexpr uint32_t CARRIER_EN_CH4 = (1U << 28);  ///< CARRIER_EN_CH4
        constexpr uint32_t MEM_SIZE_CH4 = (4 << 24);  ///< MEM_SIZE_CH4
        constexpr uint32_t IDLE_THRES_CH4 = (16 << 8);  ///< IDLE_THRES_CH4
        constexpr uint32_t DIV_CNT_CH4 = (8 << 0);  ///< DIV_CNT_CH4
    }

    /// CH4CONF1 Register bits
    namespace ch4conf1_bits {
        constexpr uint32_t IDLE_OUT_EN_CH4 = (1U << 19);  ///< IDLE_OUT_EN_CH4
        constexpr uint32_t IDLE_OUT_LV_CH4 = (1U << 18);  ///< IDLE_OUT_LV_CH4
        constexpr uint32_t REF_ALWAYS_ON_CH4 = (1U << 17);  ///< REF_ALWAYS_ON_CH4
        constexpr uint32_t REF_CNT_RST_CH4 = (1U << 16);  ///< REF_CNT_RST_CH4
        constexpr uint32_t RX_FILTER_THRES_CH4 = (8 << 8);  ///< RX_FILTER_THRES_CH4
        constexpr uint32_t RX_FILTER_EN_CH4 = (1U << 7);  ///< RX_FILTER_EN_CH4
        constexpr uint32_t TX_CONTI_MODE_CH4 = (1U << 6);  ///< TX_CONTI_MODE_CH4
        constexpr uint32_t MEM_OWNER_CH4 = (1U << 5);  ///< MEM_OWNER_CH4
        constexpr uint32_t APB_MEM_RST_CH4 = (1U << 4);  ///< APB_MEM_RST_CH4
        constexpr uint32_t MEM_RD_RST_CH4 = (1U << 3);  ///< MEM_RD_RST_CH4
        constexpr uint32_t MEM_WR_RST_CH4 = (1U << 2);  ///< MEM_WR_RST_CH4
        constexpr uint32_t RX_EN_CH4 = (1U << 1);  ///< RX_EN_CH4
        constexpr uint32_t TX_START_CH4 = (1U << 0);  ///< TX_START_CH4
    }

    /// CH5CONF0 Register bits
    namespace ch5conf0_bits {
        constexpr uint32_t CARRIER_OUT_LV_CH5 = (1U << 29);  ///< CARRIER_OUT_LV_CH5
        constexpr uint32_t CARRIER_EN_CH5 = (1U << 28);  ///< CARRIER_EN_CH5
        constexpr uint32_t MEM_SIZE_CH5 = (4 << 24);  ///< MEM_SIZE_CH5
        constexpr uint32_t IDLE_THRES_CH5 = (16 << 8);  ///< IDLE_THRES_CH5
        constexpr uint32_t DIV_CNT_CH5 = (8 << 0);  ///< DIV_CNT_CH5
    }

    /// CH5CONF1 Register bits
    namespace ch5conf1_bits {
        constexpr uint32_t IDLE_OUT_EN_CH5 = (1U << 19);  ///< IDLE_OUT_EN_CH5
        constexpr uint32_t IDLE_OUT_LV_CH5 = (1U << 18);  ///< IDLE_OUT_LV_CH5
        constexpr uint32_t REF_ALWAYS_ON_CH5 = (1U << 17);  ///< REF_ALWAYS_ON_CH5
        constexpr uint32_t REF_CNT_RST_CH5 = (1U << 16);  ///< REF_CNT_RST_CH5
        constexpr uint32_t RX_FILTER_THRES_CH5 = (8 << 8);  ///< RX_FILTER_THRES_CH5
        constexpr uint32_t RX_FILTER_EN_CH5 = (1U << 7);  ///< RX_FILTER_EN_CH5
        constexpr uint32_t TX_CONTI_MODE_CH5 = (1U << 6);  ///< TX_CONTI_MODE_CH5
        constexpr uint32_t MEM_OWNER_CH5 = (1U << 5);  ///< MEM_OWNER_CH5
        constexpr uint32_t APB_MEM_RST_CH5 = (1U << 4);  ///< APB_MEM_RST_CH5
        constexpr uint32_t MEM_RD_RST_CH5 = (1U << 3);  ///< MEM_RD_RST_CH5
        constexpr uint32_t MEM_WR_RST_CH5 = (1U << 2);  ///< MEM_WR_RST_CH5
        constexpr uint32_t RX_EN_CH5 = (1U << 1);  ///< RX_EN_CH5
        constexpr uint32_t TX_START_CH5 = (1U << 0);  ///< TX_START_CH5
    }

    /// CH6CONF0 Register bits
    namespace ch6conf0_bits {
        constexpr uint32_t CARRIER_OUT_LV_CH6 = (1U << 29);  ///< CARRIER_OUT_LV_CH6
        constexpr uint32_t CARRIER_EN_CH6 = (1U << 28);  ///< CARRIER_EN_CH6
        constexpr uint32_t MEM_SIZE_CH6 = (4 << 24);  ///< MEM_SIZE_CH6
        constexpr uint32_t IDLE_THRES_CH6 = (16 << 8);  ///< IDLE_THRES_CH6
        constexpr uint32_t DIV_CNT_CH6 = (8 << 0);  ///< DIV_CNT_CH6
    }

    /// CH6CONF1 Register bits
    namespace ch6conf1_bits {
        constexpr uint32_t IDLE_OUT_EN_CH6 = (1U << 19);  ///< IDLE_OUT_EN_CH6
        constexpr uint32_t IDLE_OUT_LV_CH6 = (1U << 18);  ///< IDLE_OUT_LV_CH6
        constexpr uint32_t REF_ALWAYS_ON_CH6 = (1U << 17);  ///< REF_ALWAYS_ON_CH6
        constexpr uint32_t REF_CNT_RST_CH6 = (1U << 16);  ///< REF_CNT_RST_CH6
        constexpr uint32_t RX_FILTER_THRES_CH6 = (8 << 8);  ///< RX_FILTER_THRES_CH6
        constexpr uint32_t RX_FILTER_EN_CH6 = (1U << 7);  ///< RX_FILTER_EN_CH6
        constexpr uint32_t TX_CONTI_MODE_CH6 = (1U << 6);  ///< TX_CONTI_MODE_CH6
        constexpr uint32_t MEM_OWNER_CH6 = (1U << 5);  ///< MEM_OWNER_CH6
        constexpr uint32_t APB_MEM_RST_CH6 = (1U << 4);  ///< APB_MEM_RST_CH6
        constexpr uint32_t MEM_RD_RST_CH6 = (1U << 3);  ///< MEM_RD_RST_CH6
        constexpr uint32_t MEM_WR_RST_CH6 = (1U << 2);  ///< MEM_WR_RST_CH6
        constexpr uint32_t RX_EN_CH6 = (1U << 1);  ///< RX_EN_CH6
        constexpr uint32_t TX_START_CH6 = (1U << 0);  ///< TX_START_CH6
    }

    /// CH7CONF0 Register bits
    namespace ch7conf0_bits {
        constexpr uint32_t CARRIER_OUT_LV_CH7 = (1U << 29);  ///< CARRIER_OUT_LV_CH7
        constexpr uint32_t CARRIER_EN_CH7 = (1U << 28);  ///< CARRIER_EN_CH7
        constexpr uint32_t MEM_SIZE_CH7 = (4 << 24);  ///< MEM_SIZE_CH7
        constexpr uint32_t IDLE_THRES_CH7 = (16 << 8);  ///< IDLE_THRES_CH7
        constexpr uint32_t DIV_CNT_CH7 = (8 << 0);  ///< DIV_CNT_CH7
    }

    /// CH7CONF1 Register bits
    namespace ch7conf1_bits {
        constexpr uint32_t IDLE_OUT_EN_CH7 = (1U << 19);  ///< IDLE_OUT_EN_CH7
        constexpr uint32_t IDLE_OUT_LV_CH7 = (1U << 18);  ///< IDLE_OUT_LV_CH7
        constexpr uint32_t REF_ALWAYS_ON_CH7 = (1U << 17);  ///< REF_ALWAYS_ON_CH7
        constexpr uint32_t REF_CNT_RST_CH7 = (1U << 16);  ///< REF_CNT_RST_CH7
        constexpr uint32_t RX_FILTER_THRES_CH7 = (8 << 8);  ///< RX_FILTER_THRES_CH7
        constexpr uint32_t RX_FILTER_EN_CH7 = (1U << 7);  ///< RX_FILTER_EN_CH7
        constexpr uint32_t TX_CONTI_MODE_CH7 = (1U << 6);  ///< TX_CONTI_MODE_CH7
        constexpr uint32_t MEM_OWNER_CH7 = (1U << 5);  ///< MEM_OWNER_CH7
        constexpr uint32_t APB_MEM_RST_CH7 = (1U << 4);  ///< APB_MEM_RST_CH7
        constexpr uint32_t MEM_RD_RST_CH7 = (1U << 3);  ///< MEM_RD_RST_CH7
        constexpr uint32_t MEM_WR_RST_CH7 = (1U << 2);  ///< MEM_WR_RST_CH7
        constexpr uint32_t RX_EN_CH7 = (1U << 1);  ///< RX_EN_CH7
        constexpr uint32_t TX_START_CH7 = (1U << 0);  ///< TX_START_CH7
    }

    /// CH0STATUS Register bits
    namespace ch0status_bits {
        constexpr uint32_t STATUS_CH0 = (32 << 0);  ///< STATUS_CH0
        constexpr uint32_t APB_MEM_RD_ERR_CH0 = (1U << 31);  ///< APB_MEM_RD_ERR_CH0
        constexpr uint32_t APB_MEM_WR_ERR_CH0 = (1U << 30);  ///< APB_MEM_WR_ERR_CH0
        constexpr uint32_t MEM_EMPTY_CH0 = (1U << 29);  ///< MEM_EMPTY_CH0
        constexpr uint32_t MEM_FULL_CH0 = (1U << 28);  ///< MEM_FULL_CH0
        constexpr uint32_t MEM_OWNER_ERR_CH0 = (1U << 27);  ///< MEM_OWNER_ERR_CH0
        constexpr uint32_t STATE_CH0 = (3 << 24);  ///< STATE_CH0
        constexpr uint32_t MEM_RADDR_EX_CH0 = (10 << 12);  ///< MEM_RADDR_EX_CH0
        constexpr uint32_t MEM_WADDR_EX_CH0 = (10 << 0);  ///< MEM_WADDR_EX_CH0
    }

    /// CH1STATUS Register bits
    namespace ch1status_bits {
        constexpr uint32_t STATUS_CH1 = (32 << 0);  ///< STATUS_CH1
        constexpr uint32_t APB_MEM_RD_ERR_CH1 = (1U << 31);  ///< APB_MEM_RD_ERR_CH1
        constexpr uint32_t APB_MEM_WR_ERR_CH1 = (1U << 30);  ///< APB_MEM_WR_ERR_CH1
        constexpr uint32_t MEM_EMPTY_CH1 = (1U << 29);  ///< MEM_EMPTY_CH1
        constexpr uint32_t MEM_FULL_CH1 = (1U << 28);  ///< MEM_FULL_CH1
        constexpr uint32_t MEM_OWNER_ERR_CH1 = (1U << 27);  ///< MEM_OWNER_ERR_CH1
        constexpr uint32_t STATE_CH1 = (3 << 24);  ///< STATE_CH1
        constexpr uint32_t MEM_RADDR_EX_CH1 = (10 << 12);  ///< MEM_RADDR_EX_CH1
        constexpr uint32_t MEM_WADDR_EX_CH1 = (10 << 0);  ///< MEM_WADDR_EX_CH1
    }

    /// CH2STATUS Register bits
    namespace ch2status_bits {
        constexpr uint32_t STATUS_CH2 = (32 << 0);  ///< STATUS_CH2
        constexpr uint32_t APB_MEM_RD_ERR_CH2 = (1U << 31);  ///< APB_MEM_RD_ERR_CH2
        constexpr uint32_t APB_MEM_WR_ERR_CH2 = (1U << 30);  ///< APB_MEM_WR_ERR_CH2
        constexpr uint32_t MEM_EMPTY_CH2 = (1U << 29);  ///< MEM_EMPTY_CH2
        constexpr uint32_t MEM_FULL_CH2 = (1U << 28);  ///< MEM_FULL_CH2
        constexpr uint32_t MEM_OWNER_ERR_CH2 = (1U << 27);  ///< MEM_OWNER_ERR_CH2
        constexpr uint32_t STATE_CH2 = (3 << 24);  ///< STATE_CH2
        constexpr uint32_t MEM_RADDR_EX_CH2 = (10 << 12);  ///< MEM_RADDR_EX_CH2
        constexpr uint32_t MEM_WADDR_EX_CH2 = (10 << 0);  ///< MEM_WADDR_EX_CH2
    }

    /// CH3STATUS Register bits
    namespace ch3status_bits {
        constexpr uint32_t STATUS_CH3 = (32 << 0);  ///< STATUS_CH3
        constexpr uint32_t APB_MEM_RD_ERR_CH3 = (1U << 31);  ///< APB_MEM_RD_ERR_CH3
        constexpr uint32_t APB_MEM_WR_ERR_CH3 = (1U << 30);  ///< APB_MEM_WR_ERR_CH3
        constexpr uint32_t MEM_EMPTY_CH3 = (1U << 29);  ///< MEM_EMPTY_CH3
        constexpr uint32_t MEM_FULL_CH3 = (1U << 28);  ///< MEM_FULL_CH3
        constexpr uint32_t MEM_OWNER_ERR_CH3 = (1U << 27);  ///< MEM_OWNER_ERR_CH3
        constexpr uint32_t STATE_CH3 = (3 << 24);  ///< STATE_CH3
        constexpr uint32_t MEM_RADDR_EX_CH3 = (10 << 12);  ///< MEM_RADDR_EX_CH3
        constexpr uint32_t MEM_WADDR_EX_CH3 = (10 << 0);  ///< MEM_WADDR_EX_CH3
    }

    /// CH4STATUS Register bits
    namespace ch4status_bits {
        constexpr uint32_t STATUS_CH4 = (32 << 0);  ///< STATUS_CH4
        constexpr uint32_t APB_MEM_RD_ERR_CH4 = (1U << 31);  ///< APB_MEM_RD_ERR_CH4
        constexpr uint32_t APB_MEM_WR_ERR_CH4 = (1U << 30);  ///< APB_MEM_WR_ERR_CH4
        constexpr uint32_t MEM_EMPTY_CH4 = (1U << 29);  ///< MEM_EMPTY_CH4
        constexpr uint32_t MEM_FULL_CH4 = (1U << 28);  ///< MEM_FULL_CH4
        constexpr uint32_t MEM_OWNER_ERR_CH4 = (1U << 27);  ///< MEM_OWNER_ERR_CH4
        constexpr uint32_t STATE_CH4 = (3 << 24);  ///< STATE_CH4
        constexpr uint32_t MEM_RADDR_EX_CH4 = (10 << 12);  ///< MEM_RADDR_EX_CH4
        constexpr uint32_t MEM_WADDR_EX_CH4 = (10 << 0);  ///< MEM_WADDR_EX_CH4
    }

    /// CH5STATUS Register bits
    namespace ch5status_bits {
        constexpr uint32_t STATUS_CH5 = (32 << 0);  ///< STATUS_CH5
        constexpr uint32_t APB_MEM_RD_ERR_CH5 = (1U << 31);  ///< APB_MEM_RD_ERR_CH5
        constexpr uint32_t APB_MEM_WR_ERR_CH5 = (1U << 30);  ///< APB_MEM_WR_ERR_CH5
        constexpr uint32_t MEM_EMPTY_CH5 = (1U << 29);  ///< MEM_EMPTY_CH5
        constexpr uint32_t MEM_FULL_CH5 = (1U << 28);  ///< MEM_FULL_CH5
        constexpr uint32_t MEM_OWNER_ERR_CH5 = (1U << 27);  ///< MEM_OWNER_ERR_CH5
        constexpr uint32_t STATE_CH5 = (3 << 24);  ///< STATE_CH5
        constexpr uint32_t MEM_RADDR_EX_CH5 = (10 << 12);  ///< MEM_RADDR_EX_CH5
        constexpr uint32_t MEM_WADDR_EX_CH5 = (10 << 0);  ///< MEM_WADDR_EX_CH5
    }

    /// CH6STATUS Register bits
    namespace ch6status_bits {
        constexpr uint32_t STATUS_CH6 = (32 << 0);  ///< STATUS_CH6
        constexpr uint32_t APB_MEM_RD_ERR_CH6 = (1U << 31);  ///< APB_MEM_RD_ERR_CH6
        constexpr uint32_t APB_MEM_WR_ERR_CH6 = (1U << 30);  ///< APB_MEM_WR_ERR_CH6
        constexpr uint32_t MEM_EMPTY_CH6 = (1U << 29);  ///< MEM_EMPTY_CH6
        constexpr uint32_t MEM_FULL_CH6 = (1U << 28);  ///< MEM_FULL_CH6
        constexpr uint32_t MEM_OWNER_ERR_CH6 = (1U << 27);  ///< MEM_OWNER_ERR_CH6
        constexpr uint32_t STATE_CH6 = (3 << 24);  ///< STATE_CH6
        constexpr uint32_t MEM_RADDR_EX_CH6 = (10 << 12);  ///< MEM_RADDR_EX_CH6
        constexpr uint32_t MEM_WADDR_EX_CH6 = (10 << 0);  ///< MEM_WADDR_EX_CH6
    }

    /// CH7STATUS Register bits
    namespace ch7status_bits {
        constexpr uint32_t STATUS_CH7 = (32 << 0);  ///< STATUS_CH7
        constexpr uint32_t APB_MEM_RD_ERR_CH7 = (1U << 31);  ///< APB_MEM_RD_ERR_CH7
        constexpr uint32_t APB_MEM_WR_ERR_CH7 = (1U << 30);  ///< APB_MEM_WR_ERR_CH7
        constexpr uint32_t MEM_EMPTY_CH7 = (1U << 29);  ///< MEM_EMPTY_CH7
        constexpr uint32_t MEM_FULL_CH7 = (1U << 28);  ///< MEM_FULL_CH7
        constexpr uint32_t MEM_OWNER_ERR_CH7 = (1U << 27);  ///< MEM_OWNER_ERR_CH7
        constexpr uint32_t STATE_CH7 = (3 << 24);  ///< STATE_CH7
        constexpr uint32_t MEM_RADDR_EX_CH7 = (10 << 12);  ///< MEM_RADDR_EX_CH7
        constexpr uint32_t MEM_WADDR_EX_CH7 = (10 << 0);  ///< MEM_WADDR_EX_CH7
    }

    /// CH0ADDR Register bits
    namespace ch0addr_bits {
        constexpr uint32_t APB_MEM_ADDR_CH0 = (32 << 0);  ///< APB_MEM_ADDR_CH0
    }

    /// CH1ADDR Register bits
    namespace ch1addr_bits {
        constexpr uint32_t APB_MEM_ADDR_CH1 = (32 << 0);  ///< APB_MEM_ADDR_CH1
    }

    /// CH2ADDR Register bits
    namespace ch2addr_bits {
        constexpr uint32_t APB_MEM_ADDR_CH2 = (32 << 0);  ///< APB_MEM_ADDR_CH2
    }

    /// CH3ADDR Register bits
    namespace ch3addr_bits {
        constexpr uint32_t APB_MEM_ADDR_CH3 = (32 << 0);  ///< APB_MEM_ADDR_CH3
    }

    /// CH4ADDR Register bits
    namespace ch4addr_bits {
        constexpr uint32_t APB_MEM_ADDR_CH4 = (32 << 0);  ///< APB_MEM_ADDR_CH4
    }

    /// CH5ADDR Register bits
    namespace ch5addr_bits {
        constexpr uint32_t APB_MEM_ADDR_CH5 = (32 << 0);  ///< APB_MEM_ADDR_CH5
    }

    /// CH6ADDR Register bits
    namespace ch6addr_bits {
        constexpr uint32_t APB_MEM_ADDR_CH6 = (32 << 0);  ///< APB_MEM_ADDR_CH6
    }

    /// CH7ADDR Register bits
    namespace ch7addr_bits {
        constexpr uint32_t APB_MEM_ADDR_CH7 = (32 << 0);  ///< APB_MEM_ADDR_CH7
    }

    /// INT_RAW Register bits
    namespace int_raw_bits {
        constexpr uint32_t CH7_TX_THR_EVENT_INT_RAW = (1U << 31);  ///< CH7_TX_THR_EVENT_INT_RAW
        constexpr uint32_t CH6_TX_THR_EVENT_INT_RAW = (1U << 30);  ///< CH6_TX_THR_EVENT_INT_RAW
        constexpr uint32_t CH5_TX_THR_EVENT_INT_RAW = (1U << 29);  ///< CH5_TX_THR_EVENT_INT_RAW
        constexpr uint32_t CH4_TX_THR_EVENT_INT_RAW = (1U << 28);  ///< CH4_TX_THR_EVENT_INT_RAW
        constexpr uint32_t CH3_TX_THR_EVENT_INT_RAW = (1U << 27);  ///< CH3_TX_THR_EVENT_INT_RAW
        constexpr uint32_t CH2_TX_THR_EVENT_INT_RAW = (1U << 26);  ///< CH2_TX_THR_EVENT_INT_RAW
        constexpr uint32_t CH1_TX_THR_EVENT_INT_RAW = (1U << 25);  ///< CH1_TX_THR_EVENT_INT_RAW
        constexpr uint32_t CH0_TX_THR_EVENT_INT_RAW = (1U << 24);  ///< CH0_TX_THR_EVENT_INT_RAW
        constexpr uint32_t CH7_ERR_INT_RAW = (1U << 23);  ///< CH7_ERR_INT_RAW
        constexpr uint32_t CH7_RX_END_INT_RAW = (1U << 22);  ///< CH7_RX_END_INT_RAW
        constexpr uint32_t CH7_TX_END_INT_RAW = (1U << 21);  ///< CH7_TX_END_INT_RAW
        constexpr uint32_t CH6_ERR_INT_RAW = (1U << 20);  ///< CH6_ERR_INT_RAW
        constexpr uint32_t CH6_RX_END_INT_RAW = (1U << 19);  ///< CH6_RX_END_INT_RAW
        constexpr uint32_t CH6_TX_END_INT_RAW = (1U << 18);  ///< CH6_TX_END_INT_RAW
        constexpr uint32_t CH5_ERR_INT_RAW = (1U << 17);  ///< CH5_ERR_INT_RAW
        constexpr uint32_t CH5_RX_END_INT_RAW = (1U << 16);  ///< CH5_RX_END_INT_RAW
        constexpr uint32_t CH5_TX_END_INT_RAW = (1U << 15);  ///< CH5_TX_END_INT_RAW
        constexpr uint32_t CH4_ERR_INT_RAW = (1U << 14);  ///< CH4_ERR_INT_RAW
        constexpr uint32_t CH4_RX_END_INT_RAW = (1U << 13);  ///< CH4_RX_END_INT_RAW
        constexpr uint32_t CH4_TX_END_INT_RAW = (1U << 12);  ///< CH4_TX_END_INT_RAW
        constexpr uint32_t CH3_ERR_INT_RAW = (1U << 11);  ///< CH3_ERR_INT_RAW
        constexpr uint32_t CH3_RX_END_INT_RAW = (1U << 10);  ///< CH3_RX_END_INT_RAW
        constexpr uint32_t CH3_TX_END_INT_RAW = (1U << 9);  ///< CH3_TX_END_INT_RAW
        constexpr uint32_t CH2_ERR_INT_RAW = (1U << 8);  ///< CH2_ERR_INT_RAW
        constexpr uint32_t CH2_RX_END_INT_RAW = (1U << 7);  ///< CH2_RX_END_INT_RAW
        constexpr uint32_t CH2_TX_END_INT_RAW = (1U << 6);  ///< CH2_TX_END_INT_RAW
        constexpr uint32_t CH1_ERR_INT_RAW = (1U << 5);  ///< CH1_ERR_INT_RAW
        constexpr uint32_t CH1_RX_END_INT_RAW = (1U << 4);  ///< CH1_RX_END_INT_RAW
        constexpr uint32_t CH1_TX_END_INT_RAW = (1U << 3);  ///< CH1_TX_END_INT_RAW
        constexpr uint32_t CH0_ERR_INT_RAW = (1U << 2);  ///< CH0_ERR_INT_RAW
        constexpr uint32_t CH0_RX_END_INT_RAW = (1U << 1);  ///< CH0_RX_END_INT_RAW
        constexpr uint32_t CH0_TX_END_INT_RAW = (1U << 0);  ///< CH0_TX_END_INT_RAW
    }

    /// INT_ST Register bits
    namespace int_st_bits {
        constexpr uint32_t CH7_TX_THR_EVENT_INT_ST = (1U << 31);  ///< CH7_TX_THR_EVENT_INT_ST
        constexpr uint32_t CH6_TX_THR_EVENT_INT_ST = (1U << 30);  ///< CH6_TX_THR_EVENT_INT_ST
        constexpr uint32_t CH5_TX_THR_EVENT_INT_ST = (1U << 29);  ///< CH5_TX_THR_EVENT_INT_ST
        constexpr uint32_t CH4_TX_THR_EVENT_INT_ST = (1U << 28);  ///< CH4_TX_THR_EVENT_INT_ST
        constexpr uint32_t CH3_TX_THR_EVENT_INT_ST = (1U << 27);  ///< CH3_TX_THR_EVENT_INT_ST
        constexpr uint32_t CH2_TX_THR_EVENT_INT_ST = (1U << 26);  ///< CH2_TX_THR_EVENT_INT_ST
        constexpr uint32_t CH1_TX_THR_EVENT_INT_ST = (1U << 25);  ///< CH1_TX_THR_EVENT_INT_ST
        constexpr uint32_t CH0_TX_THR_EVENT_INT_ST = (1U << 24);  ///< CH0_TX_THR_EVENT_INT_ST
        constexpr uint32_t CH7_ERR_INT_ST = (1U << 23);  ///< CH7_ERR_INT_ST
        constexpr uint32_t CH7_RX_END_INT_ST = (1U << 22);  ///< CH7_RX_END_INT_ST
        constexpr uint32_t CH7_TX_END_INT_ST = (1U << 21);  ///< CH7_TX_END_INT_ST
        constexpr uint32_t CH6_ERR_INT_ST = (1U << 20);  ///< CH6_ERR_INT_ST
        constexpr uint32_t CH6_RX_END_INT_ST = (1U << 19);  ///< CH6_RX_END_INT_ST
        constexpr uint32_t CH6_TX_END_INT_ST = (1U << 18);  ///< CH6_TX_END_INT_ST
        constexpr uint32_t CH5_ERR_INT_ST = (1U << 17);  ///< CH5_ERR_INT_ST
        constexpr uint32_t CH5_RX_END_INT_ST = (1U << 16);  ///< CH5_RX_END_INT_ST
        constexpr uint32_t CH5_TX_END_INT_ST = (1U << 15);  ///< CH5_TX_END_INT_ST
        constexpr uint32_t CH4_ERR_INT_ST = (1U << 14);  ///< CH4_ERR_INT_ST
        constexpr uint32_t CH4_RX_END_INT_ST = (1U << 13);  ///< CH4_RX_END_INT_ST
        constexpr uint32_t CH4_TX_END_INT_ST = (1U << 12);  ///< CH4_TX_END_INT_ST
        constexpr uint32_t CH3_ERR_INT_ST = (1U << 11);  ///< CH3_ERR_INT_ST
        constexpr uint32_t CH3_RX_END_INT_ST = (1U << 10);  ///< CH3_RX_END_INT_ST
        constexpr uint32_t CH3_TX_END_INT_ST = (1U << 9);  ///< CH3_TX_END_INT_ST
        constexpr uint32_t CH2_ERR_INT_ST = (1U << 8);  ///< CH2_ERR_INT_ST
        constexpr uint32_t CH2_RX_END_INT_ST = (1U << 7);  ///< CH2_RX_END_INT_ST
        constexpr uint32_t CH2_TX_END_INT_ST = (1U << 6);  ///< CH2_TX_END_INT_ST
        constexpr uint32_t CH1_ERR_INT_ST = (1U << 5);  ///< CH1_ERR_INT_ST
        constexpr uint32_t CH1_RX_END_INT_ST = (1U << 4);  ///< CH1_RX_END_INT_ST
        constexpr uint32_t CH1_TX_END_INT_ST = (1U << 3);  ///< CH1_TX_END_INT_ST
        constexpr uint32_t CH0_ERR_INT_ST = (1U << 2);  ///< CH0_ERR_INT_ST
        constexpr uint32_t CH0_RX_END_INT_ST = (1U << 1);  ///< CH0_RX_END_INT_ST
        constexpr uint32_t CH0_TX_END_INT_ST = (1U << 0);  ///< CH0_TX_END_INT_ST
    }

    /// INT_ENA Register bits
    namespace int_ena_bits {
        constexpr uint32_t CH7_TX_THR_EVENT_INT_ENA = (1U << 31);  ///< CH7_TX_THR_EVENT_INT_ENA
        constexpr uint32_t CH6_TX_THR_EVENT_INT_ENA = (1U << 30);  ///< CH6_TX_THR_EVENT_INT_ENA
        constexpr uint32_t CH5_TX_THR_EVENT_INT_ENA = (1U << 29);  ///< CH5_TX_THR_EVENT_INT_ENA
        constexpr uint32_t CH4_TX_THR_EVENT_INT_ENA = (1U << 28);  ///< CH4_TX_THR_EVENT_INT_ENA
        constexpr uint32_t CH3_TX_THR_EVENT_INT_ENA = (1U << 27);  ///< CH3_TX_THR_EVENT_INT_ENA
        constexpr uint32_t CH2_TX_THR_EVENT_INT_ENA = (1U << 26);  ///< CH2_TX_THR_EVENT_INT_ENA
        constexpr uint32_t CH1_TX_THR_EVENT_INT_ENA = (1U << 25);  ///< CH1_TX_THR_EVENT_INT_ENA
        constexpr uint32_t CH0_TX_THR_EVENT_INT_ENA = (1U << 24);  ///< CH0_TX_THR_EVENT_INT_ENA
        constexpr uint32_t CH7_ERR_INT_ENA = (1U << 23);  ///< CH7_ERR_INT_ENA
        constexpr uint32_t CH7_RX_END_INT_ENA = (1U << 22);  ///< CH7_RX_END_INT_ENA
        constexpr uint32_t CH7_TX_END_INT_ENA = (1U << 21);  ///< CH7_TX_END_INT_ENA
        constexpr uint32_t CH6_ERR_INT_ENA = (1U << 20);  ///< CH6_ERR_INT_ENA
        constexpr uint32_t CH6_RX_END_INT_ENA = (1U << 19);  ///< CH6_RX_END_INT_ENA
        constexpr uint32_t CH6_TX_END_INT_ENA = (1U << 18);  ///< CH6_TX_END_INT_ENA
        constexpr uint32_t CH5_ERR_INT_ENA = (1U << 17);  ///< CH5_ERR_INT_ENA
        constexpr uint32_t CH5_RX_END_INT_ENA = (1U << 16);  ///< CH5_RX_END_INT_ENA
        constexpr uint32_t CH5_TX_END_INT_ENA = (1U << 15);  ///< CH5_TX_END_INT_ENA
        constexpr uint32_t CH4_ERR_INT_ENA = (1U << 14);  ///< CH4_ERR_INT_ENA
        constexpr uint32_t CH4_RX_END_INT_ENA = (1U << 13);  ///< CH4_RX_END_INT_ENA
        constexpr uint32_t CH4_TX_END_INT_ENA = (1U << 12);  ///< CH4_TX_END_INT_ENA
        constexpr uint32_t CH3_ERR_INT_ENA = (1U << 11);  ///< CH3_ERR_INT_ENA
        constexpr uint32_t CH3_RX_END_INT_ENA = (1U << 10);  ///< CH3_RX_END_INT_ENA
        constexpr uint32_t CH3_TX_END_INT_ENA = (1U << 9);  ///< CH3_TX_END_INT_ENA
        constexpr uint32_t CH2_ERR_INT_ENA = (1U << 8);  ///< CH2_ERR_INT_ENA
        constexpr uint32_t CH2_RX_END_INT_ENA = (1U << 7);  ///< CH2_RX_END_INT_ENA
        constexpr uint32_t CH2_TX_END_INT_ENA = (1U << 6);  ///< CH2_TX_END_INT_ENA
        constexpr uint32_t CH1_ERR_INT_ENA = (1U << 5);  ///< CH1_ERR_INT_ENA
        constexpr uint32_t CH1_RX_END_INT_ENA = (1U << 4);  ///< CH1_RX_END_INT_ENA
        constexpr uint32_t CH1_TX_END_INT_ENA = (1U << 3);  ///< CH1_TX_END_INT_ENA
        constexpr uint32_t CH0_ERR_INT_ENA = (1U << 2);  ///< CH0_ERR_INT_ENA
        constexpr uint32_t CH0_RX_END_INT_ENA = (1U << 1);  ///< CH0_RX_END_INT_ENA
        constexpr uint32_t CH0_TX_END_INT_ENA = (1U << 0);  ///< CH0_TX_END_INT_ENA
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t CH7_TX_THR_EVENT_INT_CLR = (1U << 31);  ///< CH7_TX_THR_EVENT_INT_CLR
        constexpr uint32_t CH6_TX_THR_EVENT_INT_CLR = (1U << 30);  ///< CH6_TX_THR_EVENT_INT_CLR
        constexpr uint32_t CH5_TX_THR_EVENT_INT_CLR = (1U << 29);  ///< CH5_TX_THR_EVENT_INT_CLR
        constexpr uint32_t CH4_TX_THR_EVENT_INT_CLR = (1U << 28);  ///< CH4_TX_THR_EVENT_INT_CLR
        constexpr uint32_t CH3_TX_THR_EVENT_INT_CLR = (1U << 27);  ///< CH3_TX_THR_EVENT_INT_CLR
        constexpr uint32_t CH2_TX_THR_EVENT_INT_CLR = (1U << 26);  ///< CH2_TX_THR_EVENT_INT_CLR
        constexpr uint32_t CH1_TX_THR_EVENT_INT_CLR = (1U << 25);  ///< CH1_TX_THR_EVENT_INT_CLR
        constexpr uint32_t CH0_TX_THR_EVENT_INT_CLR = (1U << 24);  ///< CH0_TX_THR_EVENT_INT_CLR
        constexpr uint32_t CH7_ERR_INT_CLR = (1U << 23);  ///< CH7_ERR_INT_CLR
        constexpr uint32_t CH7_RX_END_INT_CLR = (1U << 22);  ///< CH7_RX_END_INT_CLR
        constexpr uint32_t CH7_TX_END_INT_CLR = (1U << 21);  ///< CH7_TX_END_INT_CLR
        constexpr uint32_t CH6_ERR_INT_CLR = (1U << 20);  ///< CH6_ERR_INT_CLR
        constexpr uint32_t CH6_RX_END_INT_CLR = (1U << 19);  ///< CH6_RX_END_INT_CLR
        constexpr uint32_t CH6_TX_END_INT_CLR = (1U << 18);  ///< CH6_TX_END_INT_CLR
        constexpr uint32_t CH5_ERR_INT_CLR = (1U << 17);  ///< CH5_ERR_INT_CLR
        constexpr uint32_t CH5_RX_END_INT_CLR = (1U << 16);  ///< CH5_RX_END_INT_CLR
        constexpr uint32_t CH5_TX_END_INT_CLR = (1U << 15);  ///< CH5_TX_END_INT_CLR
        constexpr uint32_t CH4_ERR_INT_CLR = (1U << 14);  ///< CH4_ERR_INT_CLR
        constexpr uint32_t CH4_RX_END_INT_CLR = (1U << 13);  ///< CH4_RX_END_INT_CLR
        constexpr uint32_t CH4_TX_END_INT_CLR = (1U << 12);  ///< CH4_TX_END_INT_CLR
        constexpr uint32_t CH3_ERR_INT_CLR = (1U << 11);  ///< CH3_ERR_INT_CLR
        constexpr uint32_t CH3_RX_END_INT_CLR = (1U << 10);  ///< CH3_RX_END_INT_CLR
        constexpr uint32_t CH3_TX_END_INT_CLR = (1U << 9);  ///< CH3_TX_END_INT_CLR
        constexpr uint32_t CH2_ERR_INT_CLR = (1U << 8);  ///< CH2_ERR_INT_CLR
        constexpr uint32_t CH2_RX_END_INT_CLR = (1U << 7);  ///< CH2_RX_END_INT_CLR
        constexpr uint32_t CH2_TX_END_INT_CLR = (1U << 6);  ///< CH2_TX_END_INT_CLR
        constexpr uint32_t CH1_ERR_INT_CLR = (1U << 5);  ///< CH1_ERR_INT_CLR
        constexpr uint32_t CH1_RX_END_INT_CLR = (1U << 4);  ///< CH1_RX_END_INT_CLR
        constexpr uint32_t CH1_TX_END_INT_CLR = (1U << 3);  ///< CH1_TX_END_INT_CLR
        constexpr uint32_t CH0_ERR_INT_CLR = (1U << 2);  ///< CH0_ERR_INT_CLR
        constexpr uint32_t CH0_RX_END_INT_CLR = (1U << 1);  ///< CH0_RX_END_INT_CLR
        constexpr uint32_t CH0_TX_END_INT_CLR = (1U << 0);  ///< CH0_TX_END_INT_CLR
    }

    /// CH0CARRIER_DUTY Register bits
    namespace ch0carrier_duty_bits {
        constexpr uint32_t CARRIER_HIGH_CH0 = (16 << 16);  ///< CARRIER_HIGH_CH0
        constexpr uint32_t CARRIER_LOW_CH0 = (16 << 0);  ///< CARRIER_LOW_CH0
    }

    /// CH1CARRIER_DUTY Register bits
    namespace ch1carrier_duty_bits {
        constexpr uint32_t CARRIER_HIGH_CH1 = (16 << 16);  ///< CARRIER_HIGH_CH1
        constexpr uint32_t CARRIER_LOW_CH1 = (16 << 0);  ///< CARRIER_LOW_CH1
    }

    /// CH2CARRIER_DUTY Register bits
    namespace ch2carrier_duty_bits {
        constexpr uint32_t CARRIER_HIGH_CH2 = (16 << 16);  ///< CARRIER_HIGH_CH2
        constexpr uint32_t CARRIER_LOW_CH2 = (16 << 0);  ///< CARRIER_LOW_CH2
    }

    /// CH3CARRIER_DUTY Register bits
    namespace ch3carrier_duty_bits {
        constexpr uint32_t CARRIER_HIGH_CH3 = (16 << 16);  ///< CARRIER_HIGH_CH3
        constexpr uint32_t CARRIER_LOW_CH3 = (16 << 0);  ///< CARRIER_LOW_CH3
    }

    /// CH4CARRIER_DUTY Register bits
    namespace ch4carrier_duty_bits {
        constexpr uint32_t CARRIER_HIGH_CH4 = (16 << 16);  ///< CARRIER_HIGH_CH4
        constexpr uint32_t CARRIER_LOW_CH4 = (16 << 0);  ///< CARRIER_LOW_CH4
    }

    /// CH5CARRIER_DUTY Register bits
    namespace ch5carrier_duty_bits {
        constexpr uint32_t CARRIER_HIGH_CH5 = (16 << 16);  ///< CARRIER_HIGH_CH5
        constexpr uint32_t CARRIER_LOW_CH5 = (16 << 0);  ///< CARRIER_LOW_CH5
    }

    /// CH6CARRIER_DUTY Register bits
    namespace ch6carrier_duty_bits {
        constexpr uint32_t CARRIER_HIGH_CH6 = (16 << 16);  ///< CARRIER_HIGH_CH6
        constexpr uint32_t CARRIER_LOW_CH6 = (16 << 0);  ///< CARRIER_LOW_CH6
    }

    /// CH7CARRIER_DUTY Register bits
    namespace ch7carrier_duty_bits {
        constexpr uint32_t CARRIER_HIGH_CH7 = (16 << 16);  ///< CARRIER_HIGH_CH7
        constexpr uint32_t CARRIER_LOW_CH7 = (16 << 0);  ///< CARRIER_LOW_CH7
    }

    /// CH0_TX_LIM Register bits
    namespace ch0_tx_lim_bits {
        constexpr uint32_t TX_LIM_CH0 = (9 << 0);  ///< TX_LIM_CH0
    }

    /// CH1_TX_LIM Register bits
    namespace ch1_tx_lim_bits {
        constexpr uint32_t TX_LIM_CH1 = (9 << 0);  ///< TX_LIM_CH1
    }

    /// CH2_TX_LIM Register bits
    namespace ch2_tx_lim_bits {
        constexpr uint32_t TX_LIM_CH2 = (9 << 0);  ///< TX_LIM_CH2
    }

    /// CH3_TX_LIM Register bits
    namespace ch3_tx_lim_bits {
        constexpr uint32_t TX_LIM_CH3 = (9 << 0);  ///< TX_LIM_CH3
    }

    /// CH4_TX_LIM Register bits
    namespace ch4_tx_lim_bits {
        constexpr uint32_t TX_LIM_CH4 = (9 << 0);  ///< TX_LIM_CH4
    }

    /// CH5_TX_LIM Register bits
    namespace ch5_tx_lim_bits {
        constexpr uint32_t TX_LIM_CH5 = (9 << 0);  ///< TX_LIM_CH5
    }

    /// CH6_TX_LIM Register bits
    namespace ch6_tx_lim_bits {
        constexpr uint32_t TX_LIM_CH6 = (9 << 0);  ///< TX_LIM_CH6
    }

    /// CH7_TX_LIM Register bits
    namespace ch7_tx_lim_bits {
        constexpr uint32_t TX_LIM_CH7 = (9 << 0);  ///< TX_LIM_CH7
    }

    /// APB_CONF Register bits
    namespace apb_conf_bits {
        constexpr uint32_t MEM_TX_WRAP_EN = (1U << 1);  ///< MEM_TX_WRAP_EN
        constexpr uint32_t APB_FIFO_MASK = (1U << 0);  ///< APB_FIFO_MASK
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t DATE = (32 << 0);  ///< DATE
    }

}

// ============================================================================
// ETH Peripheral
// ============================================================================

namespace eth {
    /// Base addresses
    constexpr uint32_t EMAC_BASE = 0x3FF69000;

    /// ETH Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* EMAC = reinterpret_cast<Registers*>(EMAC_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_BASE = 0x3FF44000;
    constexpr uint32_t DPORT_BASE = 0x3FF00000;
    constexpr uint32_t GPIO_SD_BASE = 0x3FF44F00;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t BT_SELECT;  ///< Offset: 0x00 - GPIO_BT_SELECT
        volatile uint32_t OUT;  ///< Offset: 0x04 - GPIO_OUT
        volatile uint32_t OUT_W1TS;  ///< Offset: 0x08 - GPIO_OUT_W1TS
        volatile uint32_t OUT_W1TC;  ///< Offset: 0x0C - GPIO_OUT_W1TC
        volatile uint32_t OUT1;  ///< Offset: 0x10 - GPIO_OUT1
        volatile uint32_t OUT1_W1TS;  ///< Offset: 0x14 - GPIO_OUT1_W1TS
        volatile uint32_t OUT1_W1TC;  ///< Offset: 0x18 - GPIO_OUT1_W1TC
        volatile uint32_t SDIO_SELECT;  ///< Offset: 0x1C - GPIO_SDIO_SELECT
        volatile uint32_t ENABLE;  ///< Offset: 0x20 - GPIO_ENABLE
        volatile uint32_t ENABLE_W1TS;  ///< Offset: 0x24 - GPIO_ENABLE_W1TS
        volatile uint32_t ENABLE_W1TC;  ///< Offset: 0x28 - GPIO_ENABLE_W1TC
        volatile uint32_t ENABLE1;  ///< Offset: 0x2C - GPIO_ENABLE1
        volatile uint32_t ENABLE1_W1TS;  ///< Offset: 0x30 - GPIO_ENABLE1_W1TS
        volatile uint32_t ENABLE1_W1TC;  ///< Offset: 0x34 - GPIO_ENABLE1_W1TC
        volatile uint32_t STRAP;  ///< Offset: 0x38 - GPIO_STRAP
        volatile uint32_t IN;  ///< Offset: 0x3C - GPIO_IN
        volatile uint32_t IN1;  ///< Offset: 0x40 - GPIO_IN1
        volatile uint32_t STATUS;  ///< Offset: 0x44 - GPIO_STATUS
        volatile uint32_t STATUS_W1TS;  ///< Offset: 0x48 - GPIO_STATUS_W1TS
        volatile uint32_t STATUS_W1TC;  ///< Offset: 0x4C - GPIO_STATUS_W1TC
        volatile uint32_t STATUS1;  ///< Offset: 0x50 - GPIO_STATUS1
        volatile uint32_t STATUS1_W1TS;  ///< Offset: 0x54 - GPIO_STATUS1_W1TS
        volatile uint32_t STATUS1_W1TC;  ///< Offset: 0x58 - GPIO_STATUS1_W1TC
        volatile uint32_t ACPU_INT;  ///< Offset: 0x60 - GPIO_ACPU_INT
        volatile uint32_t ACPU_NMI_INT;  ///< Offset: 0x64 - GPIO_ACPU_NMI_INT
        volatile uint32_t PCPU_INT;  ///< Offset: 0x68 - GPIO_PCPU_INT
        volatile uint32_t PCPU_NMI_INT;  ///< Offset: 0x6C - GPIO_PCPU_NMI_INT
        volatile uint32_t CPUSDIO_INT;  ///< Offset: 0x70 - GPIO_CPUSDIO_INT
        volatile uint32_t ACPU_INT1;  ///< Offset: 0x74 - GPIO_ACPU_INT1
        volatile uint32_t ACPU_NMI_INT1;  ///< Offset: 0x78 - GPIO_ACPU_NMI_INT1
        volatile uint32_t PCPU_INT1;  ///< Offset: 0x7C - GPIO_PCPU_INT1
        volatile uint32_t PCPU_NMI_INT1;  ///< Offset: 0x80 - GPIO_PCPU_NMI_INT1
        volatile uint32_t CPUSDIO_INT1;  ///< Offset: 0x84 - GPIO_CPUSDIO_INT1
        volatile uint32_t PIN%s;  ///< Offset: 0x88 - GPIO_PIN0
        volatile uint32_t cali_conf;  ///< Offset: 0x128 - GPIO_cali_conf
        volatile uint32_t cali_data;  ///< Offset: 0x12C - GPIO_cali_data
        volatile uint32_t FUNC%s_IN_SEL_CFG;  ///< Offset: 0x130 - GPIO_FUNC0_IN_SEL_CFG
        volatile uint32_t FUNC%s_OUT_SEL_CFG;  ///< Offset: 0x530 - GPIO_FUNC0_OUT_SEL_CFG
    };

    /// Peripheral instances
    inline Registers* GPIO = reinterpret_cast<Registers*>(GPIO_BASE);
    inline Registers* DPORT = reinterpret_cast<Registers*>(DPORT_BASE);
    inline Registers* GPIO_SD = reinterpret_cast<Registers*>(GPIO_SD_BASE);

    // Bit definitions
    /// BT_SELECT Register bits
    namespace bt_select_bits {
        constexpr uint32_t BT_SEL = (32 << 0);  ///< BT_SEL
    }

    /// OUT Register bits
    namespace out_bits {
        constexpr uint32_t OUT_DATA = (32 << 0);  ///< OUT_DATA
    }

    /// OUT_W1TS Register bits
    namespace out_w1ts_bits {
        constexpr uint32_t OUT_DATA_W1TS = (32 << 0);  ///< OUT_DATA_W1TS
    }

    /// OUT_W1TC Register bits
    namespace out_w1tc_bits {
        constexpr uint32_t OUT_DATA_W1TC = (32 << 0);  ///< OUT_DATA_W1TC
    }

    /// OUT1 Register bits
    namespace out1_bits {
        constexpr uint32_t OUT1_DATA = (8 << 0);  ///< OUT1_DATA
    }

    /// OUT1_W1TS Register bits
    namespace out1_w1ts_bits {
        constexpr uint32_t OUT1_DATA_W1TS = (8 << 0);  ///< OUT1_DATA_W1TS
    }

    /// OUT1_W1TC Register bits
    namespace out1_w1tc_bits {
        constexpr uint32_t OUT1_DATA_W1TC = (8 << 0);  ///< OUT1_DATA_W1TC
    }

    /// SDIO_SELECT Register bits
    namespace sdio_select_bits {
        constexpr uint32_t SDIO_SEL = (8 << 0);  ///< SDIO_SEL
    }

    /// ENABLE Register bits
    namespace enable_bits {
        constexpr uint32_t ENABLE_DATA = (32 << 0);  ///< ENABLE_DATA
    }

    /// ENABLE_W1TS Register bits
    namespace enable_w1ts_bits {
        constexpr uint32_t ENABLE_DATA_W1TS = (32 << 0);  ///< ENABLE_DATA_W1TS
    }

    /// ENABLE_W1TC Register bits
    namespace enable_w1tc_bits {
        constexpr uint32_t ENABLE_DATA_W1TC = (32 << 0);  ///< ENABLE_DATA_W1TC
    }

    /// ENABLE1 Register bits
    namespace enable1_bits {
        constexpr uint32_t ENABLE1_DATA = (8 << 0);  ///< ENABLE1_DATA
    }

    /// ENABLE1_W1TS Register bits
    namespace enable1_w1ts_bits {
        constexpr uint32_t ENABLE1_DATA_W1TS = (8 << 0);  ///< ENABLE1_DATA_W1TS
    }

    /// ENABLE1_W1TC Register bits
    namespace enable1_w1tc_bits {
        constexpr uint32_t ENABLE1_DATA_W1TC = (8 << 0);  ///< ENABLE1_DATA_W1TC
    }

    /// STRAP Register bits
    namespace strap_bits {
        constexpr uint32_t STRAPPING = (16 << 0);  ///< STRAPPING
    }

    /// IN Register bits
    namespace in_bits {
        constexpr uint32_t IN_DATA = (32 << 0);  ///< IN_DATA
    }

    /// IN1 Register bits
    namespace in1_bits {
        constexpr uint32_t IN1_DATA = (8 << 0);  ///< IN1_DATA
    }

    /// STATUS Register bits
    namespace status_bits {
        constexpr uint32_t STATUS_INT = (32 << 0);  ///< STATUS_INT
    }

    /// STATUS_W1TS Register bits
    namespace status_w1ts_bits {
        constexpr uint32_t STATUS_INT_W1TS = (32 << 0);  ///< STATUS_INT_W1TS
    }

    /// STATUS_W1TC Register bits
    namespace status_w1tc_bits {
        constexpr uint32_t STATUS_INT_W1TC = (32 << 0);  ///< STATUS_INT_W1TC
    }

    /// STATUS1 Register bits
    namespace status1_bits {
        constexpr uint32_t STATUS1_INT = (8 << 0);  ///< STATUS1_INT
    }

    /// STATUS1_W1TS Register bits
    namespace status1_w1ts_bits {
        constexpr uint32_t STATUS1_INT_W1TS = (8 << 0);  ///< STATUS1_INT_W1TS
    }

    /// STATUS1_W1TC Register bits
    namespace status1_w1tc_bits {
        constexpr uint32_t STATUS1_INT_W1TC = (8 << 0);  ///< STATUS1_INT_W1TC
    }

    /// ACPU_INT Register bits
    namespace acpu_int_bits {
        constexpr uint32_t APPCPU_INT = (32 << 0);  ///< APPCPU_INT
    }

    /// ACPU_NMI_INT Register bits
    namespace acpu_nmi_int_bits {
        constexpr uint32_t APPCPU_NMI_INT = (32 << 0);  ///< APPCPU_NMI_INT
    }

    /// PCPU_INT Register bits
    namespace pcpu_int_bits {
        constexpr uint32_t PROCPU_INT = (32 << 0);  ///< PROCPU_INT
    }

    /// PCPU_NMI_INT Register bits
    namespace pcpu_nmi_int_bits {
        constexpr uint32_t PROCPU_NMI_INT = (32 << 0);  ///< PROCPU_NMI_INT
    }

    /// CPUSDIO_INT Register bits
    namespace cpusdio_int_bits {
        constexpr uint32_t SDIO_INT = (32 << 0);  ///< SDIO_INT
    }

    /// ACPU_INT1 Register bits
    namespace acpu_int1_bits {
        constexpr uint32_t APPCPU_INT_H = (8 << 0);  ///< APPCPU_INT_H
    }

    /// ACPU_NMI_INT1 Register bits
    namespace acpu_nmi_int1_bits {
        constexpr uint32_t APPCPU_NMI_INT_H = (8 << 0);  ///< APPCPU_NMI_INT_H
    }

    /// PCPU_INT1 Register bits
    namespace pcpu_int1_bits {
        constexpr uint32_t PROCPU_INT_H = (8 << 0);  ///< PROCPU_INT_H
    }

    /// PCPU_NMI_INT1 Register bits
    namespace pcpu_nmi_int1_bits {
        constexpr uint32_t PROCPU_NMI_INT_H = (8 << 0);  ///< PROCPU_NMI_INT_H
    }

    /// CPUSDIO_INT1 Register bits
    namespace cpusdio_int1_bits {
        constexpr uint32_t SDIO_INT_H = (8 << 0);  ///< SDIO_INT_H
    }

    /// PIN%s Register bits
    namespace pin%s_bits {
        constexpr uint32_t INT_ENA = (5 << 13);  ///< INT_ENA
        constexpr uint32_t CONFIG = (2 << 11);  ///< CONFIG
        constexpr uint32_t WAKEUP_ENABLE = (1U << 10);  ///< WAKEUP_ENABLE
        constexpr uint32_t INT_TYPE = (3 << 7);  ///< INT_TYPE
        constexpr uint32_t PAD_DRIVER = (1U << 2);  ///< PAD_DRIVER
    }

    /// cali_conf Register bits
    namespace cali_conf_bits {
        constexpr uint32_t CALI_START = (1U << 31);  ///< CALI_START
        constexpr uint32_t CALI_RTC_MAX = (10 << 0);  ///< CALI_RTC_MAX
    }

    /// cali_data Register bits
    namespace cali_data_bits {
        constexpr uint32_t CALI_RDY_SYNC2 = (1U << 31);  ///< CALI_RDY_SYNC2
        constexpr uint32_t CALI_RDY_REAL = (1U << 30);  ///< CALI_RDY_REAL
        constexpr uint32_t CALI_VALUE_SYNC2 = (20 << 0);  ///< CALI_VALUE_SYNC2
    }

    /// FUNC%s_IN_SEL_CFG Register bits
    namespace func%s_in_sel_cfg_bits {
        constexpr uint32_t SEL = (1U << 7);  ///< SEL
        constexpr uint32_t IN_INV_SEL = (1U << 6);  ///< IN_INV_SEL
        constexpr uint32_t IN_SEL = (6 << 0);  ///< IN_SEL
    }

    /// FUNC%s_OUT_SEL_CFG Register bits
    namespace func%s_out_sel_cfg_bits {
        constexpr uint32_t OEN_INV_SEL = (1U << 11);  ///< OEN_INV_SEL
        constexpr uint32_t OEN_SEL = (1U << 10);  ///< OEN_SEL
        constexpr uint32_t OUT_INV_SEL = (1U << 9);  ///< OUT_INV_SEL
        constexpr uint32_t OUT_SEL = (9 << 0);  ///< OUT_SEL
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t FRC_TIMER_BASE = 0x3FF47000;
    constexpr uint32_t TIMG1_BASE = 0x3FF60000;
    constexpr uint32_t TIMG0_BASE = 0x3FF5F000;

    /// TIM Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* FRC_TIMER = reinterpret_cast<Registers*>(FRC_TIMER_BASE);
    inline Registers* TIMG1 = reinterpret_cast<Registers*>(TIMG1_BASE);
    inline Registers* TIMG0 = reinterpret_cast<Registers*>(TIMG0_BASE);

}

// ============================================================================
// SLCHOST Peripheral
// ============================================================================

namespace slchost {
    /// Base addresses
    constexpr uint32_t SLCHOST_BASE = 0x3FF55000;

    /// SLCHOST Register structure
    struct Registers {
        volatile uint32_t HOST_SLCHOST_FUNC2_0;  ///< Offset: 0x10 - HOST_SLCHOST_FUNC2_0
        volatile uint32_t HOST_SLCHOST_FUNC2_1;  ///< Offset: 0x14 - HOST_SLCHOST_FUNC2_1
        volatile uint32_t HOST_SLCHOST_FUNC2_2;  ///< Offset: 0x20 - HOST_SLCHOST_FUNC2_2
        volatile uint32_t HOST_SLCHOST_GPIO_STATUS0;  ///< Offset: 0x34 - HOST_SLCHOST_GPIO_STATUS0
        volatile uint32_t HOST_SLCHOST_GPIO_STATUS1;  ///< Offset: 0x38 - HOST_SLCHOST_GPIO_STATUS1
        volatile uint32_t HOST_SLCHOST_GPIO_IN0;  ///< Offset: 0x3C - HOST_SLCHOST_GPIO_IN0
        volatile uint32_t HOST_SLCHOST_GPIO_IN1;  ///< Offset: 0x40 - HOST_SLCHOST_GPIO_IN1
        volatile uint32_t HOST_SLC0HOST_TOKEN_RDATA;  ///< Offset: 0x44 - HOST_SLC0HOST_TOKEN_RDATA
        volatile uint32_t HOST_SLC0_HOST_PF;  ///< Offset: 0x48 - HOST_SLC0_HOST_PF
        volatile uint32_t HOST_SLC1_HOST_PF;  ///< Offset: 0x4C - HOST_SLC1_HOST_PF
        volatile uint32_t HOST_SLC0HOST_INT_RAW;  ///< Offset: 0x50 - HOST_SLC0HOST_INT_RAW
        volatile uint32_t HOST_SLC1HOST_INT_RAW;  ///< Offset: 0x54 - HOST_SLC1HOST_INT_RAW
        volatile uint32_t HOST_SLC0HOST_INT_ST;  ///< Offset: 0x58 - HOST_SLC0HOST_INT_ST
        volatile uint32_t HOST_SLC1HOST_INT_ST;  ///< Offset: 0x5C - HOST_SLC1HOST_INT_ST
        volatile uint32_t HOST_SLCHOST_PKT_LEN;  ///< Offset: 0x60 - HOST_SLCHOST_PKT_LEN
        volatile uint32_t HOST_SLCHOST_STATE_W0;  ///< Offset: 0x64 - HOST_SLCHOST_STATE_W0
        volatile uint32_t HOST_SLCHOST_STATE_W1;  ///< Offset: 0x68 - HOST_SLCHOST_STATE_W1
        volatile uint32_t HOST_SLCHOST_CONF_W0;  ///< Offset: 0x6C - HOST_SLCHOST_CONF_W0
        volatile uint32_t HOST_SLCHOST_CONF_W1;  ///< Offset: 0x70 - HOST_SLCHOST_CONF_W1
        volatile uint32_t HOST_SLCHOST_CONF_W2;  ///< Offset: 0x74 - HOST_SLCHOST_CONF_W2
        volatile uint32_t HOST_SLCHOST_CONF_W3;  ///< Offset: 0x78 - HOST_SLCHOST_CONF_W3
        volatile uint32_t HOST_SLCHOST_CONF_W4;  ///< Offset: 0x7C - HOST_SLCHOST_CONF_W4
        volatile uint32_t HOST_SLCHOST_CONF_W5;  ///< Offset: 0x80 - HOST_SLCHOST_CONF_W5
        volatile uint32_t HOST_SLCHOST_CONF_W6;  ///< Offset: 0x88 - HOST_SLCHOST_CONF_W6
        volatile uint32_t HOST_SLCHOST_CONF_W7;  ///< Offset: 0x8C - HOST_SLCHOST_CONF_W7
        volatile uint32_t HOST_SLCHOST_PKT_LEN0;  ///< Offset: 0x90 - HOST_SLCHOST_PKT_LEN0
        volatile uint32_t HOST_SLCHOST_PKT_LEN1;  ///< Offset: 0x94 - HOST_SLCHOST_PKT_LEN1
        volatile uint32_t HOST_SLCHOST_PKT_LEN2;  ///< Offset: 0x98 - HOST_SLCHOST_PKT_LEN2
        volatile uint32_t HOST_SLCHOST_CONF_W8;  ///< Offset: 0x9C - HOST_SLCHOST_CONF_W8
        volatile uint32_t HOST_SLCHOST_CONF_W9;  ///< Offset: 0xA0 - HOST_SLCHOST_CONF_W9
        volatile uint32_t HOST_SLCHOST_CONF_W10;  ///< Offset: 0xA4 - HOST_SLCHOST_CONF_W10
        volatile uint32_t HOST_SLCHOST_CONF_W11;  ///< Offset: 0xA8 - HOST_SLCHOST_CONF_W11
        volatile uint32_t HOST_SLCHOST_CONF_W12;  ///< Offset: 0xAC - HOST_SLCHOST_CONF_W12
        volatile uint32_t HOST_SLCHOST_CONF_W13;  ///< Offset: 0xB0 - HOST_SLCHOST_CONF_W13
        volatile uint32_t HOST_SLCHOST_CONF_W14;  ///< Offset: 0xB4 - HOST_SLCHOST_CONF_W14
        volatile uint32_t HOST_SLCHOST_CONF_W15;  ///< Offset: 0xB8 - HOST_SLCHOST_CONF_W15
        volatile uint32_t HOST_SLCHOST_CHECK_SUM0;  ///< Offset: 0xBC - HOST_SLCHOST_CHECK_SUM0
        volatile uint32_t HOST_SLCHOST_CHECK_SUM1;  ///< Offset: 0xC0 - HOST_SLCHOST_CHECK_SUM1
        volatile uint32_t HOST_SLC1HOST_TOKEN_RDATA;  ///< Offset: 0xC4 - HOST_SLC1HOST_TOKEN_RDATA
        volatile uint32_t HOST_SLC0HOST_TOKEN_WDATA;  ///< Offset: 0xC8 - HOST_SLC0HOST_TOKEN_WDATA
        volatile uint32_t HOST_SLC1HOST_TOKEN_WDATA;  ///< Offset: 0xCC - HOST_SLC1HOST_TOKEN_WDATA
        volatile uint32_t HOST_SLCHOST_TOKEN_CON;  ///< Offset: 0xD0 - HOST_SLCHOST_TOKEN_CON
        volatile uint32_t HOST_SLC0HOST_INT_CLR;  ///< Offset: 0xD4 - HOST_SLC0HOST_INT_CLR
        volatile uint32_t HOST_SLC1HOST_INT_CLR;  ///< Offset: 0xD8 - HOST_SLC1HOST_INT_CLR
        volatile uint32_t HOST_SLC0HOST_FUNC1_INT_ENA;  ///< Offset: 0xDC - HOST_SLC0HOST_FUNC1_INT_ENA
        volatile uint32_t HOST_SLC1HOST_FUNC1_INT_ENA;  ///< Offset: 0xE0 - HOST_SLC1HOST_FUNC1_INT_ENA
        volatile uint32_t HOST_SLC0HOST_FUNC2_INT_ENA;  ///< Offset: 0xE4 - HOST_SLC0HOST_FUNC2_INT_ENA
        volatile uint32_t HOST_SLC1HOST_FUNC2_INT_ENA;  ///< Offset: 0xE8 - HOST_SLC1HOST_FUNC2_INT_ENA
        volatile uint32_t HOST_SLC0HOST_INT_ENA;  ///< Offset: 0xEC - HOST_SLC0HOST_INT_ENA
        volatile uint32_t HOST_SLC1HOST_INT_ENA;  ///< Offset: 0xF0 - HOST_SLC1HOST_INT_ENA
        volatile uint32_t HOST_SLC0HOST_RX_INFOR;  ///< Offset: 0xF4 - HOST_SLC0HOST_RX_INFOR
        volatile uint32_t HOST_SLC1HOST_RX_INFOR;  ///< Offset: 0xF8 - HOST_SLC1HOST_RX_INFOR
        volatile uint32_t HOST_SLC0HOST_LEN_WD;  ///< Offset: 0xFC - HOST_SLC0HOST_LEN_WD
        volatile uint32_t HOST_SLC_APBWIN_WDATA;  ///< Offset: 0x100 - HOST_SLC_APBWIN_WDATA
        volatile uint32_t HOST_SLC_APBWIN_CONF;  ///< Offset: 0x104 - HOST_SLC_APBWIN_CONF
        volatile uint32_t HOST_SLC_APBWIN_RDATA;  ///< Offset: 0x108 - HOST_SLC_APBWIN_RDATA
        volatile uint32_t HOST_SLCHOST_RDCLR0;  ///< Offset: 0x10C - HOST_SLCHOST_RDCLR0
        volatile uint32_t HOST_SLCHOST_RDCLR1;  ///< Offset: 0x110 - HOST_SLCHOST_RDCLR1
        volatile uint32_t HOST_SLC0HOST_INT_ENA1;  ///< Offset: 0x114 - HOST_SLC0HOST_INT_ENA1
        volatile uint32_t HOST_SLC1HOST_INT_ENA1;  ///< Offset: 0x118 - HOST_SLC1HOST_INT_ENA1
        volatile uint32_t HOST_SLCHOSTDATE;  ///< Offset: 0x178 - HOST_SLCHOSTDATE
        volatile uint32_t HOST_SLCHOSTID;  ///< Offset: 0x17C - HOST_SLCHOSTID
        volatile uint32_t HOST_SLCHOST_CONF;  ///< Offset: 0x1F0 - HOST_SLCHOST_CONF
        volatile uint32_t HOST_SLCHOST_INF_ST;  ///< Offset: 0x1F4 - HOST_SLCHOST_INF_ST
    };

    /// Peripheral instances
    inline Registers* SLCHOST = reinterpret_cast<Registers*>(SLCHOST_BASE);

    // Bit definitions
    /// HOST_SLCHOST_FUNC2_0 Register bits
    namespace host_slchost_func2_0_bits {
        constexpr uint32_t HOST_SLC_FUNC2_INT = (1U << 24);  ///< HOST_SLC_FUNC2_INT
    }

    /// HOST_SLCHOST_FUNC2_1 Register bits
    namespace host_slchost_func2_1_bits {
        constexpr uint32_t HOST_SLC_FUNC2_INT_EN = (1U << 0);  ///< HOST_SLC_FUNC2_INT_EN
    }

    /// HOST_SLCHOST_FUNC2_2 Register bits
    namespace host_slchost_func2_2_bits {
        constexpr uint32_t HOST_SLC_FUNC1_MDSTAT = (1U << 0);  ///< HOST_SLC_FUNC1_MDSTAT
    }

    /// HOST_SLCHOST_GPIO_STATUS0 Register bits
    namespace host_slchost_gpio_status0_bits {
        constexpr uint32_t HOST_GPIO_SDIO_INT0 = (32 << 0);  ///< HOST_GPIO_SDIO_INT0
    }

    /// HOST_SLCHOST_GPIO_STATUS1 Register bits
    namespace host_slchost_gpio_status1_bits {
        constexpr uint32_t HOST_GPIO_SDIO_INT1 = (8 << 0);  ///< HOST_GPIO_SDIO_INT1
    }

    /// HOST_SLCHOST_GPIO_IN0 Register bits
    namespace host_slchost_gpio_in0_bits {
        constexpr uint32_t HOST_GPIO_SDIO_IN0 = (32 << 0);  ///< HOST_GPIO_SDIO_IN0
    }

    /// HOST_SLCHOST_GPIO_IN1 Register bits
    namespace host_slchost_gpio_in1_bits {
        constexpr uint32_t HOST_GPIO_SDIO_IN1 = (8 << 0);  ///< HOST_GPIO_SDIO_IN1
    }

    /// HOST_SLC0HOST_TOKEN_RDATA Register bits
    namespace host_slc0host_token_rdata_bits {
        constexpr uint32_t HOST_SLC0_RX_PF_EOF = (4 << 28);  ///< HOST_SLC0_RX_PF_EOF
        constexpr uint32_t HOST_HOSTSLC0_TOKEN1 = (12 << 16);  ///< HOST_HOSTSLC0_TOKEN1
        constexpr uint32_t HOST_SLC0_RX_PF_VALID = (1U << 12);  ///< HOST_SLC0_RX_PF_VALID
        constexpr uint32_t HOST_SLC0_TOKEN0 = (12 << 0);  ///< HOST_SLC0_TOKEN0
    }

    /// HOST_SLC0_HOST_PF Register bits
    namespace host_slc0_host_pf_bits {
        constexpr uint32_t HOST_SLC0_PF_DATA = (32 << 0);  ///< HOST_SLC0_PF_DATA
    }

    /// HOST_SLC1_HOST_PF Register bits
    namespace host_slc1_host_pf_bits {
        constexpr uint32_t HOST_SLC1_PF_DATA = (32 << 0);  ///< HOST_SLC1_PF_DATA
    }

    /// HOST_SLC0HOST_INT_RAW Register bits
    namespace host_slc0host_int_raw_bits {
        constexpr uint32_t HOST_GPIO_SDIO_INT_RAW = (1U << 25);  ///< HOST_GPIO_SDIO_INT_RAW
        constexpr uint32_t HOST_SLC0_HOST_RD_RETRY_INT_RAW = (1U << 24);  ///< HOST_SLC0_HOST_RD_RETRY_INT_RAW
        constexpr uint32_t HOST_SLC0_RX_NEW_PACKET_INT_RAW = (1U << 23);  ///< HOST_SLC0_RX_NEW_PACKET_INT_RAW
        constexpr uint32_t HOST_SLC0_EXT_BIT3_INT_RAW = (1U << 22);  ///< HOST_SLC0_EXT_BIT3_INT_RAW
        constexpr uint32_t HOST_SLC0_EXT_BIT2_INT_RAW = (1U << 21);  ///< HOST_SLC0_EXT_BIT2_INT_RAW
        constexpr uint32_t HOST_SLC0_EXT_BIT1_INT_RAW = (1U << 20);  ///< HOST_SLC0_EXT_BIT1_INT_RAW
        constexpr uint32_t HOST_SLC0_EXT_BIT0_INT_RAW = (1U << 19);  ///< HOST_SLC0_EXT_BIT0_INT_RAW
        constexpr uint32_t HOST_SLC0_RX_PF_VALID_INT_RAW = (1U << 18);  ///< HOST_SLC0_RX_PF_VALID_INT_RAW
        constexpr uint32_t HOST_SLC0_TX_OVF_INT_RAW = (1U << 17);  ///< HOST_SLC0_TX_OVF_INT_RAW
        constexpr uint32_t HOST_SLC0_RX_UDF_INT_RAW = (1U << 16);  ///< HOST_SLC0_RX_UDF_INT_RAW
        constexpr uint32_t HOST_SLC0HOST_TX_START_INT_RAW = (1U << 15);  ///< HOST_SLC0HOST_TX_START_INT_RAW
        constexpr uint32_t HOST_SLC0HOST_RX_START_INT_RAW = (1U << 14);  ///< HOST_SLC0HOST_RX_START_INT_RAW
        constexpr uint32_t HOST_SLC0HOST_RX_EOF_INT_RAW = (1U << 13);  ///< HOST_SLC0HOST_RX_EOF_INT_RAW
        constexpr uint32_t HOST_SLC0HOST_RX_SOF_INT_RAW = (1U << 12);  ///< HOST_SLC0HOST_RX_SOF_INT_RAW
        constexpr uint32_t HOST_SLC0_TOKEN1_0TO1_INT_RAW = (1U << 11);  ///< HOST_SLC0_TOKEN1_0TO1_INT_RAW
        constexpr uint32_t HOST_SLC0_TOKEN0_0TO1_INT_RAW = (1U << 10);  ///< HOST_SLC0_TOKEN0_0TO1_INT_RAW
        constexpr uint32_t HOST_SLC0_TOKEN1_1TO0_INT_RAW = (1U << 9);  ///< HOST_SLC0_TOKEN1_1TO0_INT_RAW
        constexpr uint32_t HOST_SLC0_TOKEN0_1TO0_INT_RAW = (1U << 8);  ///< HOST_SLC0_TOKEN0_1TO0_INT_RAW
        constexpr uint32_t HOST_SLC0_TOHOST_BIT7_INT_RAW = (1U << 7);  ///< HOST_SLC0_TOHOST_BIT7_INT_RAW
        constexpr uint32_t HOST_SLC0_TOHOST_BIT6_INT_RAW = (1U << 6);  ///< HOST_SLC0_TOHOST_BIT6_INT_RAW
        constexpr uint32_t HOST_SLC0_TOHOST_BIT5_INT_RAW = (1U << 5);  ///< HOST_SLC0_TOHOST_BIT5_INT_RAW
        constexpr uint32_t HOST_SLC0_TOHOST_BIT4_INT_RAW = (1U << 4);  ///< HOST_SLC0_TOHOST_BIT4_INT_RAW
        constexpr uint32_t HOST_SLC0_TOHOST_BIT3_INT_RAW = (1U << 3);  ///< HOST_SLC0_TOHOST_BIT3_INT_RAW
        constexpr uint32_t HOST_SLC0_TOHOST_BIT2_INT_RAW = (1U << 2);  ///< HOST_SLC0_TOHOST_BIT2_INT_RAW
        constexpr uint32_t HOST_SLC0_TOHOST_BIT1_INT_RAW = (1U << 1);  ///< HOST_SLC0_TOHOST_BIT1_INT_RAW
        constexpr uint32_t HOST_SLC0_TOHOST_BIT0_INT_RAW = (1U << 0);  ///< HOST_SLC0_TOHOST_BIT0_INT_RAW
    }

    /// HOST_SLC1HOST_INT_RAW Register bits
    namespace host_slc1host_int_raw_bits {
        constexpr uint32_t HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW = (1U << 25);  ///< HOST_SLC1_BT_RX_NEW_PACKET_INT_RAW
        constexpr uint32_t HOST_SLC1_HOST_RD_RETRY_INT_RAW = (1U << 24);  ///< HOST_SLC1_HOST_RD_RETRY_INT_RAW
        constexpr uint32_t HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW = (1U << 23);  ///< HOST_SLC1_WIFI_RX_NEW_PACKET_INT_RAW
        constexpr uint32_t HOST_SLC1_EXT_BIT3_INT_RAW = (1U << 22);  ///< HOST_SLC1_EXT_BIT3_INT_RAW
        constexpr uint32_t HOST_SLC1_EXT_BIT2_INT_RAW = (1U << 21);  ///< HOST_SLC1_EXT_BIT2_INT_RAW
        constexpr uint32_t HOST_SLC1_EXT_BIT1_INT_RAW = (1U << 20);  ///< HOST_SLC1_EXT_BIT1_INT_RAW
        constexpr uint32_t HOST_SLC1_EXT_BIT0_INT_RAW = (1U << 19);  ///< HOST_SLC1_EXT_BIT0_INT_RAW
        constexpr uint32_t HOST_SLC1_RX_PF_VALID_INT_RAW = (1U << 18);  ///< HOST_SLC1_RX_PF_VALID_INT_RAW
        constexpr uint32_t HOST_SLC1_TX_OVF_INT_RAW = (1U << 17);  ///< HOST_SLC1_TX_OVF_INT_RAW
        constexpr uint32_t HOST_SLC1_RX_UDF_INT_RAW = (1U << 16);  ///< HOST_SLC1_RX_UDF_INT_RAW
        constexpr uint32_t HOST_SLC1HOST_TX_START_INT_RAW = (1U << 15);  ///< HOST_SLC1HOST_TX_START_INT_RAW
        constexpr uint32_t HOST_SLC1HOST_RX_START_INT_RAW = (1U << 14);  ///< HOST_SLC1HOST_RX_START_INT_RAW
        constexpr uint32_t HOST_SLC1HOST_RX_EOF_INT_RAW = (1U << 13);  ///< HOST_SLC1HOST_RX_EOF_INT_RAW
        constexpr uint32_t HOST_SLC1HOST_RX_SOF_INT_RAW = (1U << 12);  ///< HOST_SLC1HOST_RX_SOF_INT_RAW
        constexpr uint32_t HOST_SLC1_TOKEN1_0TO1_INT_RAW = (1U << 11);  ///< HOST_SLC1_TOKEN1_0TO1_INT_RAW
        constexpr uint32_t HOST_SLC1_TOKEN0_0TO1_INT_RAW = (1U << 10);  ///< HOST_SLC1_TOKEN0_0TO1_INT_RAW
        constexpr uint32_t HOST_SLC1_TOKEN1_1TO0_INT_RAW = (1U << 9);  ///< HOST_SLC1_TOKEN1_1TO0_INT_RAW
        constexpr uint32_t HOST_SLC1_TOKEN0_1TO0_INT_RAW = (1U << 8);  ///< HOST_SLC1_TOKEN0_1TO0_INT_RAW
        constexpr uint32_t HOST_SLC1_TOHOST_BIT7_INT_RAW = (1U << 7);  ///< HOST_SLC1_TOHOST_BIT7_INT_RAW
        constexpr uint32_t HOST_SLC1_TOHOST_BIT6_INT_RAW = (1U << 6);  ///< HOST_SLC1_TOHOST_BIT6_INT_RAW
        constexpr uint32_t HOST_SLC1_TOHOST_BIT5_INT_RAW = (1U << 5);  ///< HOST_SLC1_TOHOST_BIT5_INT_RAW
        constexpr uint32_t HOST_SLC1_TOHOST_BIT4_INT_RAW = (1U << 4);  ///< HOST_SLC1_TOHOST_BIT4_INT_RAW
        constexpr uint32_t HOST_SLC1_TOHOST_BIT3_INT_RAW = (1U << 3);  ///< HOST_SLC1_TOHOST_BIT3_INT_RAW
        constexpr uint32_t HOST_SLC1_TOHOST_BIT2_INT_RAW = (1U << 2);  ///< HOST_SLC1_TOHOST_BIT2_INT_RAW
        constexpr uint32_t HOST_SLC1_TOHOST_BIT1_INT_RAW = (1U << 1);  ///< HOST_SLC1_TOHOST_BIT1_INT_RAW
        constexpr uint32_t HOST_SLC1_TOHOST_BIT0_INT_RAW = (1U << 0);  ///< HOST_SLC1_TOHOST_BIT0_INT_RAW
    }

    /// HOST_SLC0HOST_INT_ST Register bits
    namespace host_slc0host_int_st_bits {
        constexpr uint32_t HOST_GPIO_SDIO_INT_ST = (1U << 25);  ///< HOST_GPIO_SDIO_INT_ST
        constexpr uint32_t HOST_SLC0_HOST_RD_RETRY_INT_ST = (1U << 24);  ///< HOST_SLC0_HOST_RD_RETRY_INT_ST
        constexpr uint32_t HOST_SLC0_RX_NEW_PACKET_INT_ST = (1U << 23);  ///< HOST_SLC0_RX_NEW_PACKET_INT_ST
        constexpr uint32_t HOST_SLC0_EXT_BIT3_INT_ST = (1U << 22);  ///< HOST_SLC0_EXT_BIT3_INT_ST
        constexpr uint32_t HOST_SLC0_EXT_BIT2_INT_ST = (1U << 21);  ///< HOST_SLC0_EXT_BIT2_INT_ST
        constexpr uint32_t HOST_SLC0_EXT_BIT1_INT_ST = (1U << 20);  ///< HOST_SLC0_EXT_BIT1_INT_ST
        constexpr uint32_t HOST_SLC0_EXT_BIT0_INT_ST = (1U << 19);  ///< HOST_SLC0_EXT_BIT0_INT_ST
        constexpr uint32_t HOST_SLC0_RX_PF_VALID_INT_ST = (1U << 18);  ///< HOST_SLC0_RX_PF_VALID_INT_ST
        constexpr uint32_t HOST_SLC0_TX_OVF_INT_ST = (1U << 17);  ///< HOST_SLC0_TX_OVF_INT_ST
        constexpr uint32_t HOST_SLC0_RX_UDF_INT_ST = (1U << 16);  ///< HOST_SLC0_RX_UDF_INT_ST
        constexpr uint32_t HOST_SLC0HOST_TX_START_INT_ST = (1U << 15);  ///< HOST_SLC0HOST_TX_START_INT_ST
        constexpr uint32_t HOST_SLC0HOST_RX_START_INT_ST = (1U << 14);  ///< HOST_SLC0HOST_RX_START_INT_ST
        constexpr uint32_t HOST_SLC0HOST_RX_EOF_INT_ST = (1U << 13);  ///< HOST_SLC0HOST_RX_EOF_INT_ST
        constexpr uint32_t HOST_SLC0HOST_RX_SOF_INT_ST = (1U << 12);  ///< HOST_SLC0HOST_RX_SOF_INT_ST
        constexpr uint32_t HOST_SLC0_TOKEN1_0TO1_INT_ST = (1U << 11);  ///< HOST_SLC0_TOKEN1_0TO1_INT_ST
        constexpr uint32_t HOST_SLC0_TOKEN0_0TO1_INT_ST = (1U << 10);  ///< HOST_SLC0_TOKEN0_0TO1_INT_ST
        constexpr uint32_t HOST_SLC0_TOKEN1_1TO0_INT_ST = (1U << 9);  ///< HOST_SLC0_TOKEN1_1TO0_INT_ST
        constexpr uint32_t HOST_SLC0_TOKEN0_1TO0_INT_ST = (1U << 8);  ///< HOST_SLC0_TOKEN0_1TO0_INT_ST
        constexpr uint32_t HOST_SLC0_TOHOST_BIT7_INT_ST = (1U << 7);  ///< HOST_SLC0_TOHOST_BIT7_INT_ST
        constexpr uint32_t HOST_SLC0_TOHOST_BIT6_INT_ST = (1U << 6);  ///< HOST_SLC0_TOHOST_BIT6_INT_ST
        constexpr uint32_t HOST_SLC0_TOHOST_BIT5_INT_ST = (1U << 5);  ///< HOST_SLC0_TOHOST_BIT5_INT_ST
        constexpr uint32_t HOST_SLC0_TOHOST_BIT4_INT_ST = (1U << 4);  ///< HOST_SLC0_TOHOST_BIT4_INT_ST
        constexpr uint32_t HOST_SLC0_TOHOST_BIT3_INT_ST = (1U << 3);  ///< HOST_SLC0_TOHOST_BIT3_INT_ST
        constexpr uint32_t HOST_SLC0_TOHOST_BIT2_INT_ST = (1U << 2);  ///< HOST_SLC0_TOHOST_BIT2_INT_ST
        constexpr uint32_t HOST_SLC0_TOHOST_BIT1_INT_ST = (1U << 1);  ///< HOST_SLC0_TOHOST_BIT1_INT_ST
        constexpr uint32_t HOST_SLC0_TOHOST_BIT0_INT_ST = (1U << 0);  ///< HOST_SLC0_TOHOST_BIT0_INT_ST
    }

    /// HOST_SLC1HOST_INT_ST Register bits
    namespace host_slc1host_int_st_bits {
        constexpr uint32_t HOST_SLC1_BT_RX_NEW_PACKET_INT_ST = (1U << 25);  ///< HOST_SLC1_BT_RX_NEW_PACKET_INT_ST
        constexpr uint32_t HOST_SLC1_HOST_RD_RETRY_INT_ST = (1U << 24);  ///< HOST_SLC1_HOST_RD_RETRY_INT_ST
        constexpr uint32_t HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST = (1U << 23);  ///< HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ST
        constexpr uint32_t HOST_SLC1_EXT_BIT3_INT_ST = (1U << 22);  ///< HOST_SLC1_EXT_BIT3_INT_ST
        constexpr uint32_t HOST_SLC1_EXT_BIT2_INT_ST = (1U << 21);  ///< HOST_SLC1_EXT_BIT2_INT_ST
        constexpr uint32_t HOST_SLC1_EXT_BIT1_INT_ST = (1U << 20);  ///< HOST_SLC1_EXT_BIT1_INT_ST
        constexpr uint32_t HOST_SLC1_EXT_BIT0_INT_ST = (1U << 19);  ///< HOST_SLC1_EXT_BIT0_INT_ST
        constexpr uint32_t HOST_SLC1_RX_PF_VALID_INT_ST = (1U << 18);  ///< HOST_SLC1_RX_PF_VALID_INT_ST
        constexpr uint32_t HOST_SLC1_TX_OVF_INT_ST = (1U << 17);  ///< HOST_SLC1_TX_OVF_INT_ST
        constexpr uint32_t HOST_SLC1_RX_UDF_INT_ST = (1U << 16);  ///< HOST_SLC1_RX_UDF_INT_ST
        constexpr uint32_t HOST_SLC1HOST_TX_START_INT_ST = (1U << 15);  ///< HOST_SLC1HOST_TX_START_INT_ST
        constexpr uint32_t HOST_SLC1HOST_RX_START_INT_ST = (1U << 14);  ///< HOST_SLC1HOST_RX_START_INT_ST
        constexpr uint32_t HOST_SLC1HOST_RX_EOF_INT_ST = (1U << 13);  ///< HOST_SLC1HOST_RX_EOF_INT_ST
        constexpr uint32_t HOST_SLC1HOST_RX_SOF_INT_ST = (1U << 12);  ///< HOST_SLC1HOST_RX_SOF_INT_ST
        constexpr uint32_t HOST_SLC1_TOKEN1_0TO1_INT_ST = (1U << 11);  ///< HOST_SLC1_TOKEN1_0TO1_INT_ST
        constexpr uint32_t HOST_SLC1_TOKEN0_0TO1_INT_ST = (1U << 10);  ///< HOST_SLC1_TOKEN0_0TO1_INT_ST
        constexpr uint32_t HOST_SLC1_TOKEN1_1TO0_INT_ST = (1U << 9);  ///< HOST_SLC1_TOKEN1_1TO0_INT_ST
        constexpr uint32_t HOST_SLC1_TOKEN0_1TO0_INT_ST = (1U << 8);  ///< HOST_SLC1_TOKEN0_1TO0_INT_ST
        constexpr uint32_t HOST_SLC1_TOHOST_BIT7_INT_ST = (1U << 7);  ///< HOST_SLC1_TOHOST_BIT7_INT_ST
        constexpr uint32_t HOST_SLC1_TOHOST_BIT6_INT_ST = (1U << 6);  ///< HOST_SLC1_TOHOST_BIT6_INT_ST
        constexpr uint32_t HOST_SLC1_TOHOST_BIT5_INT_ST = (1U << 5);  ///< HOST_SLC1_TOHOST_BIT5_INT_ST
        constexpr uint32_t HOST_SLC1_TOHOST_BIT4_INT_ST = (1U << 4);  ///< HOST_SLC1_TOHOST_BIT4_INT_ST
        constexpr uint32_t HOST_SLC1_TOHOST_BIT3_INT_ST = (1U << 3);  ///< HOST_SLC1_TOHOST_BIT3_INT_ST
        constexpr uint32_t HOST_SLC1_TOHOST_BIT2_INT_ST = (1U << 2);  ///< HOST_SLC1_TOHOST_BIT2_INT_ST
        constexpr uint32_t HOST_SLC1_TOHOST_BIT1_INT_ST = (1U << 1);  ///< HOST_SLC1_TOHOST_BIT1_INT_ST
        constexpr uint32_t HOST_SLC1_TOHOST_BIT0_INT_ST = (1U << 0);  ///< HOST_SLC1_TOHOST_BIT0_INT_ST
    }

    /// HOST_SLCHOST_PKT_LEN Register bits
    namespace host_slchost_pkt_len_bits {
        constexpr uint32_t HOST_HOSTSLC0_LEN_CHECK = (12 << 20);  ///< HOST_HOSTSLC0_LEN_CHECK
        constexpr uint32_t HOST_HOSTSLC0_LEN = (20 << 0);  ///< HOST_HOSTSLC0_LEN
    }

    /// HOST_SLCHOST_STATE_W0 Register bits
    namespace host_slchost_state_w0_bits {
        constexpr uint32_t HOST_SLCHOST_STATE3 = (8 << 24);  ///< HOST_SLCHOST_STATE3
        constexpr uint32_t HOST_SLCHOST_STATE2 = (8 << 16);  ///< HOST_SLCHOST_STATE2
        constexpr uint32_t HOST_SLCHOST_STATE1 = (8 << 8);  ///< HOST_SLCHOST_STATE1
        constexpr uint32_t HOST_SLCHOST_STATE0 = (8 << 0);  ///< HOST_SLCHOST_STATE0
    }

    /// HOST_SLCHOST_STATE_W1 Register bits
    namespace host_slchost_state_w1_bits {
        constexpr uint32_t HOST_SLCHOST_STATE7 = (8 << 24);  ///< HOST_SLCHOST_STATE7
        constexpr uint32_t HOST_SLCHOST_STATE6 = (8 << 16);  ///< HOST_SLCHOST_STATE6
        constexpr uint32_t HOST_SLCHOST_STATE5 = (8 << 8);  ///< HOST_SLCHOST_STATE5
        constexpr uint32_t HOST_SLCHOST_STATE4 = (8 << 0);  ///< HOST_SLCHOST_STATE4
    }

    /// HOST_SLCHOST_CONF_W0 Register bits
    namespace host_slchost_conf_w0_bits {
        constexpr uint32_t HOST_SLCHOST_CONF3 = (8 << 24);  ///< HOST_SLCHOST_CONF3
        constexpr uint32_t HOST_SLCHOST_CONF2 = (8 << 16);  ///< HOST_SLCHOST_CONF2
        constexpr uint32_t HOST_SLCHOST_CONF1 = (8 << 8);  ///< HOST_SLCHOST_CONF1
        constexpr uint32_t HOST_SLCHOST_CONF0 = (8 << 0);  ///< HOST_SLCHOST_CONF0
    }

    /// HOST_SLCHOST_CONF_W1 Register bits
    namespace host_slchost_conf_w1_bits {
        constexpr uint32_t HOST_SLCHOST_CONF7 = (8 << 24);  ///< HOST_SLCHOST_CONF7
        constexpr uint32_t HOST_SLCHOST_CONF6 = (8 << 16);  ///< HOST_SLCHOST_CONF6
        constexpr uint32_t HOST_SLCHOST_CONF5 = (8 << 8);  ///< HOST_SLCHOST_CONF5
        constexpr uint32_t HOST_SLCHOST_CONF4 = (8 << 0);  ///< HOST_SLCHOST_CONF4
    }

    /// HOST_SLCHOST_CONF_W2 Register bits
    namespace host_slchost_conf_w2_bits {
        constexpr uint32_t HOST_SLCHOST_CONF11 = (8 << 24);  ///< HOST_SLCHOST_CONF11
        constexpr uint32_t HOST_SLCHOST_CONF10 = (8 << 16);  ///< HOST_SLCHOST_CONF10
        constexpr uint32_t HOST_SLCHOST_CONF9 = (8 << 8);  ///< HOST_SLCHOST_CONF9
        constexpr uint32_t HOST_SLCHOST_CONF8 = (8 << 0);  ///< HOST_SLCHOST_CONF8
    }

    /// HOST_SLCHOST_CONF_W3 Register bits
    namespace host_slchost_conf_w3_bits {
        constexpr uint32_t HOST_SLCHOST_CONF15 = (8 << 24);  ///< HOST_SLCHOST_CONF15
        constexpr uint32_t HOST_SLCHOST_CONF14 = (8 << 16);  ///< HOST_SLCHOST_CONF14
        constexpr uint32_t HOST_SLCHOST_CONF13 = (8 << 8);  ///< HOST_SLCHOST_CONF13
        constexpr uint32_t HOST_SLCHOST_CONF12 = (8 << 0);  ///< HOST_SLCHOST_CONF12
    }

    /// HOST_SLCHOST_CONF_W4 Register bits
    namespace host_slchost_conf_w4_bits {
        constexpr uint32_t HOST_SLCHOST_CONF19 = (8 << 24);  ///< HOST_SLCHOST_CONF19
        constexpr uint32_t HOST_SLCHOST_CONF18 = (8 << 16);  ///< HOST_SLCHOST_CONF18
        constexpr uint32_t HOST_SLCHOST_CONF17 = (8 << 8);  ///< HOST_SLCHOST_CONF17
        constexpr uint32_t HOST_SLCHOST_CONF16 = (8 << 0);  ///< HOST_SLCHOST_CONF16
    }

    /// HOST_SLCHOST_CONF_W5 Register bits
    namespace host_slchost_conf_w5_bits {
        constexpr uint32_t HOST_SLCHOST_CONF23 = (8 << 24);  ///< HOST_SLCHOST_CONF23
        constexpr uint32_t HOST_SLCHOST_CONF22 = (8 << 16);  ///< HOST_SLCHOST_CONF22
        constexpr uint32_t HOST_SLCHOST_CONF21 = (8 << 8);  ///< HOST_SLCHOST_CONF21
        constexpr uint32_t HOST_SLCHOST_CONF20 = (8 << 0);  ///< HOST_SLCHOST_CONF20
    }

    /// HOST_SLCHOST_CONF_W6 Register bits
    namespace host_slchost_conf_w6_bits {
        constexpr uint32_t HOST_SLCHOST_CONF27 = (8 << 24);  ///< HOST_SLCHOST_CONF27
        constexpr uint32_t HOST_SLCHOST_CONF26 = (8 << 16);  ///< HOST_SLCHOST_CONF26
        constexpr uint32_t HOST_SLCHOST_CONF25 = (8 << 8);  ///< HOST_SLCHOST_CONF25
        constexpr uint32_t HOST_SLCHOST_CONF24 = (8 << 0);  ///< HOST_SLCHOST_CONF24
    }

    /// HOST_SLCHOST_CONF_W7 Register bits
    namespace host_slchost_conf_w7_bits {
        constexpr uint32_t HOST_SLCHOST_CONF31 = (8 << 24);  ///< HOST_SLCHOST_CONF31
        constexpr uint32_t HOST_SLCHOST_CONF30 = (8 << 16);  ///< HOST_SLCHOST_CONF30
        constexpr uint32_t HOST_SLCHOST_CONF29 = (8 << 8);  ///< HOST_SLCHOST_CONF29
        constexpr uint32_t HOST_SLCHOST_CONF28 = (8 << 0);  ///< HOST_SLCHOST_CONF28
    }

    /// HOST_SLCHOST_PKT_LEN0 Register bits
    namespace host_slchost_pkt_len0_bits {
        constexpr uint32_t HOST_HOSTSLC0_LEN0 = (20 << 0);  ///< HOST_HOSTSLC0_LEN0
    }

    /// HOST_SLCHOST_PKT_LEN1 Register bits
    namespace host_slchost_pkt_len1_bits {
        constexpr uint32_t HOST_HOSTSLC0_LEN1 = (20 << 0);  ///< HOST_HOSTSLC0_LEN1
    }

    /// HOST_SLCHOST_PKT_LEN2 Register bits
    namespace host_slchost_pkt_len2_bits {
        constexpr uint32_t HOST_HOSTSLC0_LEN2 = (20 << 0);  ///< HOST_HOSTSLC0_LEN2
    }

    /// HOST_SLCHOST_CONF_W8 Register bits
    namespace host_slchost_conf_w8_bits {
        constexpr uint32_t HOST_SLCHOST_CONF35 = (8 << 24);  ///< HOST_SLCHOST_CONF35
        constexpr uint32_t HOST_SLCHOST_CONF34 = (8 << 16);  ///< HOST_SLCHOST_CONF34
        constexpr uint32_t HOST_SLCHOST_CONF33 = (8 << 8);  ///< HOST_SLCHOST_CONF33
        constexpr uint32_t HOST_SLCHOST_CONF32 = (8 << 0);  ///< HOST_SLCHOST_CONF32
    }

    /// HOST_SLCHOST_CONF_W9 Register bits
    namespace host_slchost_conf_w9_bits {
        constexpr uint32_t HOST_SLCHOST_CONF39 = (8 << 24);  ///< HOST_SLCHOST_CONF39
        constexpr uint32_t HOST_SLCHOST_CONF38 = (8 << 16);  ///< HOST_SLCHOST_CONF38
        constexpr uint32_t HOST_SLCHOST_CONF37 = (8 << 8);  ///< HOST_SLCHOST_CONF37
        constexpr uint32_t HOST_SLCHOST_CONF36 = (8 << 0);  ///< HOST_SLCHOST_CONF36
    }

    /// HOST_SLCHOST_CONF_W10 Register bits
    namespace host_slchost_conf_w10_bits {
        constexpr uint32_t HOST_SLCHOST_CONF43 = (8 << 24);  ///< HOST_SLCHOST_CONF43
        constexpr uint32_t HOST_SLCHOST_CONF42 = (8 << 16);  ///< HOST_SLCHOST_CONF42
        constexpr uint32_t HOST_SLCHOST_CONF41 = (8 << 8);  ///< HOST_SLCHOST_CONF41
        constexpr uint32_t HOST_SLCHOST_CONF40 = (8 << 0);  ///< HOST_SLCHOST_CONF40
    }

    /// HOST_SLCHOST_CONF_W11 Register bits
    namespace host_slchost_conf_w11_bits {
        constexpr uint32_t HOST_SLCHOST_CONF47 = (8 << 24);  ///< HOST_SLCHOST_CONF47
        constexpr uint32_t HOST_SLCHOST_CONF46 = (8 << 16);  ///< HOST_SLCHOST_CONF46
        constexpr uint32_t HOST_SLCHOST_CONF45 = (8 << 8);  ///< HOST_SLCHOST_CONF45
        constexpr uint32_t HOST_SLCHOST_CONF44 = (8 << 0);  ///< HOST_SLCHOST_CONF44
    }

    /// HOST_SLCHOST_CONF_W12 Register bits
    namespace host_slchost_conf_w12_bits {
        constexpr uint32_t HOST_SLCHOST_CONF51 = (8 << 24);  ///< HOST_SLCHOST_CONF51
        constexpr uint32_t HOST_SLCHOST_CONF50 = (8 << 16);  ///< HOST_SLCHOST_CONF50
        constexpr uint32_t HOST_SLCHOST_CONF49 = (8 << 8);  ///< HOST_SLCHOST_CONF49
        constexpr uint32_t HOST_SLCHOST_CONF48 = (8 << 0);  ///< HOST_SLCHOST_CONF48
    }

    /// HOST_SLCHOST_CONF_W13 Register bits
    namespace host_slchost_conf_w13_bits {
        constexpr uint32_t HOST_SLCHOST_CONF55 = (8 << 24);  ///< HOST_SLCHOST_CONF55
        constexpr uint32_t HOST_SLCHOST_CONF54 = (8 << 16);  ///< HOST_SLCHOST_CONF54
        constexpr uint32_t HOST_SLCHOST_CONF53 = (8 << 8);  ///< HOST_SLCHOST_CONF53
        constexpr uint32_t HOST_SLCHOST_CONF52 = (8 << 0);  ///< HOST_SLCHOST_CONF52
    }

    /// HOST_SLCHOST_CONF_W14 Register bits
    namespace host_slchost_conf_w14_bits {
        constexpr uint32_t HOST_SLCHOST_CONF59 = (8 << 24);  ///< HOST_SLCHOST_CONF59
        constexpr uint32_t HOST_SLCHOST_CONF58 = (8 << 16);  ///< HOST_SLCHOST_CONF58
        constexpr uint32_t HOST_SLCHOST_CONF57 = (8 << 8);  ///< HOST_SLCHOST_CONF57
        constexpr uint32_t HOST_SLCHOST_CONF56 = (8 << 0);  ///< HOST_SLCHOST_CONF56
    }

    /// HOST_SLCHOST_CONF_W15 Register bits
    namespace host_slchost_conf_w15_bits {
        constexpr uint32_t HOST_SLCHOST_CONF63 = (8 << 24);  ///< HOST_SLCHOST_CONF63
        constexpr uint32_t HOST_SLCHOST_CONF62 = (8 << 16);  ///< HOST_SLCHOST_CONF62
        constexpr uint32_t HOST_SLCHOST_CONF61 = (8 << 8);  ///< HOST_SLCHOST_CONF61
        constexpr uint32_t HOST_SLCHOST_CONF60 = (8 << 0);  ///< HOST_SLCHOST_CONF60
    }

    /// HOST_SLCHOST_CHECK_SUM0 Register bits
    namespace host_slchost_check_sum0_bits {
        constexpr uint32_t HOST_SLCHOST_CHECK_SUM0 = (32 << 0);  ///< HOST_SLCHOST_CHECK_SUM0
    }

    /// HOST_SLCHOST_CHECK_SUM1 Register bits
    namespace host_slchost_check_sum1_bits {
        constexpr uint32_t HOST_SLCHOST_CHECK_SUM1 = (32 << 0);  ///< HOST_SLCHOST_CHECK_SUM1
    }

    /// HOST_SLC1HOST_TOKEN_RDATA Register bits
    namespace host_slc1host_token_rdata_bits {
        constexpr uint32_t HOST_SLC1_RX_PF_EOF = (4 << 28);  ///< HOST_SLC1_RX_PF_EOF
        constexpr uint32_t HOST_HOSTSLC1_TOKEN1 = (12 << 16);  ///< HOST_HOSTSLC1_TOKEN1
        constexpr uint32_t HOST_SLC1_RX_PF_VALID = (1U << 12);  ///< HOST_SLC1_RX_PF_VALID
        constexpr uint32_t HOST_SLC1_TOKEN0 = (12 << 0);  ///< HOST_SLC1_TOKEN0
    }

    /// HOST_SLC0HOST_TOKEN_WDATA Register bits
    namespace host_slc0host_token_wdata_bits {
        constexpr uint32_t HOST_SLC0HOST_TOKEN1_WD = (12 << 16);  ///< HOST_SLC0HOST_TOKEN1_WD
        constexpr uint32_t HOST_SLC0HOST_TOKEN0_WD = (12 << 0);  ///< HOST_SLC0HOST_TOKEN0_WD
    }

    /// HOST_SLC1HOST_TOKEN_WDATA Register bits
    namespace host_slc1host_token_wdata_bits {
        constexpr uint32_t HOST_SLC1HOST_TOKEN1_WD = (12 << 16);  ///< HOST_SLC1HOST_TOKEN1_WD
        constexpr uint32_t HOST_SLC1HOST_TOKEN0_WD = (12 << 0);  ///< HOST_SLC1HOST_TOKEN0_WD
    }

    /// HOST_SLCHOST_TOKEN_CON Register bits
    namespace host_slchost_token_con_bits {
        constexpr uint32_t HOST_SLC0HOST_LEN_WR = (1U << 8);  ///< HOST_SLC0HOST_LEN_WR
        constexpr uint32_t HOST_SLC1HOST_TOKEN1_WR = (1U << 7);  ///< HOST_SLC1HOST_TOKEN1_WR
        constexpr uint32_t HOST_SLC1HOST_TOKEN0_WR = (1U << 6);  ///< HOST_SLC1HOST_TOKEN0_WR
        constexpr uint32_t HOST_SLC1HOST_TOKEN1_DEC = (1U << 5);  ///< HOST_SLC1HOST_TOKEN1_DEC
        constexpr uint32_t HOST_SLC1HOST_TOKEN0_DEC = (1U << 4);  ///< HOST_SLC1HOST_TOKEN0_DEC
        constexpr uint32_t HOST_SLC0HOST_TOKEN1_WR = (1U << 3);  ///< HOST_SLC0HOST_TOKEN1_WR
        constexpr uint32_t HOST_SLC0HOST_TOKEN0_WR = (1U << 2);  ///< HOST_SLC0HOST_TOKEN0_WR
        constexpr uint32_t HOST_SLC0HOST_TOKEN1_DEC = (1U << 1);  ///< HOST_SLC0HOST_TOKEN1_DEC
        constexpr uint32_t HOST_SLC0HOST_TOKEN0_DEC = (1U << 0);  ///< HOST_SLC0HOST_TOKEN0_DEC
    }

    /// HOST_SLC0HOST_INT_CLR Register bits
    namespace host_slc0host_int_clr_bits {
        constexpr uint32_t HOST_GPIO_SDIO_INT_CLR = (1U << 25);  ///< HOST_GPIO_SDIO_INT_CLR
        constexpr uint32_t HOST_SLC0_HOST_RD_RETRY_INT_CLR = (1U << 24);  ///< HOST_SLC0_HOST_RD_RETRY_INT_CLR
        constexpr uint32_t HOST_SLC0_RX_NEW_PACKET_INT_CLR = (1U << 23);  ///< HOST_SLC0_RX_NEW_PACKET_INT_CLR
        constexpr uint32_t HOST_SLC0_EXT_BIT3_INT_CLR = (1U << 22);  ///< HOST_SLC0_EXT_BIT3_INT_CLR
        constexpr uint32_t HOST_SLC0_EXT_BIT2_INT_CLR = (1U << 21);  ///< HOST_SLC0_EXT_BIT2_INT_CLR
        constexpr uint32_t HOST_SLC0_EXT_BIT1_INT_CLR = (1U << 20);  ///< HOST_SLC0_EXT_BIT1_INT_CLR
        constexpr uint32_t HOST_SLC0_EXT_BIT0_INT_CLR = (1U << 19);  ///< HOST_SLC0_EXT_BIT0_INT_CLR
        constexpr uint32_t HOST_SLC0_RX_PF_VALID_INT_CLR = (1U << 18);  ///< HOST_SLC0_RX_PF_VALID_INT_CLR
        constexpr uint32_t HOST_SLC0_TX_OVF_INT_CLR = (1U << 17);  ///< HOST_SLC0_TX_OVF_INT_CLR
        constexpr uint32_t HOST_SLC0_RX_UDF_INT_CLR = (1U << 16);  ///< HOST_SLC0_RX_UDF_INT_CLR
        constexpr uint32_t HOST_SLC0HOST_TX_START_INT_CLR = (1U << 15);  ///< HOST_SLC0HOST_TX_START_INT_CLR
        constexpr uint32_t HOST_SLC0HOST_RX_START_INT_CLR = (1U << 14);  ///< HOST_SLC0HOST_RX_START_INT_CLR
        constexpr uint32_t HOST_SLC0HOST_RX_EOF_INT_CLR = (1U << 13);  ///< HOST_SLC0HOST_RX_EOF_INT_CLR
        constexpr uint32_t HOST_SLC0HOST_RX_SOF_INT_CLR = (1U << 12);  ///< HOST_SLC0HOST_RX_SOF_INT_CLR
        constexpr uint32_t HOST_SLC0_TOKEN1_0TO1_INT_CLR = (1U << 11);  ///< HOST_SLC0_TOKEN1_0TO1_INT_CLR
        constexpr uint32_t HOST_SLC0_TOKEN0_0TO1_INT_CLR = (1U << 10);  ///< HOST_SLC0_TOKEN0_0TO1_INT_CLR
        constexpr uint32_t HOST_SLC0_TOKEN1_1TO0_INT_CLR = (1U << 9);  ///< HOST_SLC0_TOKEN1_1TO0_INT_CLR
        constexpr uint32_t HOST_SLC0_TOKEN0_1TO0_INT_CLR = (1U << 8);  ///< HOST_SLC0_TOKEN0_1TO0_INT_CLR
        constexpr uint32_t HOST_SLC0_TOHOST_BIT7_INT_CLR = (1U << 7);  ///< HOST_SLC0_TOHOST_BIT7_INT_CLR
        constexpr uint32_t HOST_SLC0_TOHOST_BIT6_INT_CLR = (1U << 6);  ///< HOST_SLC0_TOHOST_BIT6_INT_CLR
        constexpr uint32_t HOST_SLC0_TOHOST_BIT5_INT_CLR = (1U << 5);  ///< HOST_SLC0_TOHOST_BIT5_INT_CLR
        constexpr uint32_t HOST_SLC0_TOHOST_BIT4_INT_CLR = (1U << 4);  ///< HOST_SLC0_TOHOST_BIT4_INT_CLR
        constexpr uint32_t HOST_SLC0_TOHOST_BIT3_INT_CLR = (1U << 3);  ///< HOST_SLC0_TOHOST_BIT3_INT_CLR
        constexpr uint32_t HOST_SLC0_TOHOST_BIT2_INT_CLR = (1U << 2);  ///< HOST_SLC0_TOHOST_BIT2_INT_CLR
        constexpr uint32_t HOST_SLC0_TOHOST_BIT1_INT_CLR = (1U << 1);  ///< HOST_SLC0_TOHOST_BIT1_INT_CLR
        constexpr uint32_t HOST_SLC0_TOHOST_BIT0_INT_CLR = (1U << 0);  ///< HOST_SLC0_TOHOST_BIT0_INT_CLR
    }

    /// HOST_SLC1HOST_INT_CLR Register bits
    namespace host_slc1host_int_clr_bits {
        constexpr uint32_t HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR = (1U << 25);  ///< HOST_SLC1_BT_RX_NEW_PACKET_INT_CLR
        constexpr uint32_t HOST_SLC1_HOST_RD_RETRY_INT_CLR = (1U << 24);  ///< HOST_SLC1_HOST_RD_RETRY_INT_CLR
        constexpr uint32_t HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR = (1U << 23);  ///< HOST_SLC1_WIFI_RX_NEW_PACKET_INT_CLR
        constexpr uint32_t HOST_SLC1_EXT_BIT3_INT_CLR = (1U << 22);  ///< HOST_SLC1_EXT_BIT3_INT_CLR
        constexpr uint32_t HOST_SLC1_EXT_BIT2_INT_CLR = (1U << 21);  ///< HOST_SLC1_EXT_BIT2_INT_CLR
        constexpr uint32_t HOST_SLC1_EXT_BIT1_INT_CLR = (1U << 20);  ///< HOST_SLC1_EXT_BIT1_INT_CLR
        constexpr uint32_t HOST_SLC1_EXT_BIT0_INT_CLR = (1U << 19);  ///< HOST_SLC1_EXT_BIT0_INT_CLR
        constexpr uint32_t HOST_SLC1_RX_PF_VALID_INT_CLR = (1U << 18);  ///< HOST_SLC1_RX_PF_VALID_INT_CLR
        constexpr uint32_t HOST_SLC1_TX_OVF_INT_CLR = (1U << 17);  ///< HOST_SLC1_TX_OVF_INT_CLR
        constexpr uint32_t HOST_SLC1_RX_UDF_INT_CLR = (1U << 16);  ///< HOST_SLC1_RX_UDF_INT_CLR
        constexpr uint32_t HOST_SLC1HOST_TX_START_INT_CLR = (1U << 15);  ///< HOST_SLC1HOST_TX_START_INT_CLR
        constexpr uint32_t HOST_SLC1HOST_RX_START_INT_CLR = (1U << 14);  ///< HOST_SLC1HOST_RX_START_INT_CLR
        constexpr uint32_t HOST_SLC1HOST_RX_EOF_INT_CLR = (1U << 13);  ///< HOST_SLC1HOST_RX_EOF_INT_CLR
        constexpr uint32_t HOST_SLC1HOST_RX_SOF_INT_CLR = (1U << 12);  ///< HOST_SLC1HOST_RX_SOF_INT_CLR
        constexpr uint32_t HOST_SLC1_TOKEN1_0TO1_INT_CLR = (1U << 11);  ///< HOST_SLC1_TOKEN1_0TO1_INT_CLR
        constexpr uint32_t HOST_SLC1_TOKEN0_0TO1_INT_CLR = (1U << 10);  ///< HOST_SLC1_TOKEN0_0TO1_INT_CLR
        constexpr uint32_t HOST_SLC1_TOKEN1_1TO0_INT_CLR = (1U << 9);  ///< HOST_SLC1_TOKEN1_1TO0_INT_CLR
        constexpr uint32_t HOST_SLC1_TOKEN0_1TO0_INT_CLR = (1U << 8);  ///< HOST_SLC1_TOKEN0_1TO0_INT_CLR
        constexpr uint32_t HOST_SLC1_TOHOST_BIT7_INT_CLR = (1U << 7);  ///< HOST_SLC1_TOHOST_BIT7_INT_CLR
        constexpr uint32_t HOST_SLC1_TOHOST_BIT6_INT_CLR = (1U << 6);  ///< HOST_SLC1_TOHOST_BIT6_INT_CLR
        constexpr uint32_t HOST_SLC1_TOHOST_BIT5_INT_CLR = (1U << 5);  ///< HOST_SLC1_TOHOST_BIT5_INT_CLR
        constexpr uint32_t HOST_SLC1_TOHOST_BIT4_INT_CLR = (1U << 4);  ///< HOST_SLC1_TOHOST_BIT4_INT_CLR
        constexpr uint32_t HOST_SLC1_TOHOST_BIT3_INT_CLR = (1U << 3);  ///< HOST_SLC1_TOHOST_BIT3_INT_CLR
        constexpr uint32_t HOST_SLC1_TOHOST_BIT2_INT_CLR = (1U << 2);  ///< HOST_SLC1_TOHOST_BIT2_INT_CLR
        constexpr uint32_t HOST_SLC1_TOHOST_BIT1_INT_CLR = (1U << 1);  ///< HOST_SLC1_TOHOST_BIT1_INT_CLR
        constexpr uint32_t HOST_SLC1_TOHOST_BIT0_INT_CLR = (1U << 0);  ///< HOST_SLC1_TOHOST_BIT0_INT_CLR
    }

    /// HOST_SLC0HOST_FUNC1_INT_ENA Register bits
    namespace host_slc0host_func1_int_ena_bits {
        constexpr uint32_t HOST_FN1_GPIO_SDIO_INT_ENA = (1U << 25);  ///< HOST_FN1_GPIO_SDIO_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA = (1U << 24);  ///< HOST_FN1_SLC0_HOST_RD_RETRY_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA = (1U << 23);  ///< HOST_FN1_SLC0_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_EXT_BIT3_INT_ENA = (1U << 22);  ///< HOST_FN1_SLC0_EXT_BIT3_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_EXT_BIT2_INT_ENA = (1U << 21);  ///< HOST_FN1_SLC0_EXT_BIT2_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_EXT_BIT1_INT_ENA = (1U << 20);  ///< HOST_FN1_SLC0_EXT_BIT1_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_EXT_BIT0_INT_ENA = (1U << 19);  ///< HOST_FN1_SLC0_EXT_BIT0_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_RX_PF_VALID_INT_ENA = (1U << 18);  ///< HOST_FN1_SLC0_RX_PF_VALID_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TX_OVF_INT_ENA = (1U << 17);  ///< HOST_FN1_SLC0_TX_OVF_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_RX_UDF_INT_ENA = (1U << 16);  ///< HOST_FN1_SLC0_RX_UDF_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0HOST_TX_START_INT_ENA = (1U << 15);  ///< HOST_FN1_SLC0HOST_TX_START_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0HOST_RX_START_INT_ENA = (1U << 14);  ///< HOST_FN1_SLC0HOST_RX_START_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0HOST_RX_EOF_INT_ENA = (1U << 13);  ///< HOST_FN1_SLC0HOST_RX_EOF_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0HOST_RX_SOF_INT_ENA = (1U << 12);  ///< HOST_FN1_SLC0HOST_RX_SOF_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA = (1U << 11);  ///< HOST_FN1_SLC0_TOKEN1_0TO1_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA = (1U << 10);  ///< HOST_FN1_SLC0_TOKEN0_0TO1_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA = (1U << 9);  ///< HOST_FN1_SLC0_TOKEN1_1TO0_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA = (1U << 8);  ///< HOST_FN1_SLC0_TOKEN0_1TO0_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA = (1U << 7);  ///< HOST_FN1_SLC0_TOHOST_BIT7_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA = (1U << 6);  ///< HOST_FN1_SLC0_TOHOST_BIT6_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA = (1U << 5);  ///< HOST_FN1_SLC0_TOHOST_BIT5_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA = (1U << 4);  ///< HOST_FN1_SLC0_TOHOST_BIT4_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA = (1U << 3);  ///< HOST_FN1_SLC0_TOHOST_BIT3_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA = (1U << 2);  ///< HOST_FN1_SLC0_TOHOST_BIT2_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA = (1U << 1);  ///< HOST_FN1_SLC0_TOHOST_BIT1_INT_ENA
        constexpr uint32_t HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA = (1U << 0);  ///< HOST_FN1_SLC0_TOHOST_BIT0_INT_ENA
    }

    /// HOST_SLC1HOST_FUNC1_INT_ENA Register bits
    namespace host_slc1host_func1_int_ena_bits {
        constexpr uint32_t HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA = (1U << 25);  ///< HOST_FN1_SLC1_BT_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA = (1U << 24);  ///< HOST_FN1_SLC1_HOST_RD_RETRY_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = (1U << 23);  ///< HOST_FN1_SLC1_WIFI_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_EXT_BIT3_INT_ENA = (1U << 22);  ///< HOST_FN1_SLC1_EXT_BIT3_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_EXT_BIT2_INT_ENA = (1U << 21);  ///< HOST_FN1_SLC1_EXT_BIT2_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_EXT_BIT1_INT_ENA = (1U << 20);  ///< HOST_FN1_SLC1_EXT_BIT1_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_EXT_BIT0_INT_ENA = (1U << 19);  ///< HOST_FN1_SLC1_EXT_BIT0_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_RX_PF_VALID_INT_ENA = (1U << 18);  ///< HOST_FN1_SLC1_RX_PF_VALID_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TX_OVF_INT_ENA = (1U << 17);  ///< HOST_FN1_SLC1_TX_OVF_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_RX_UDF_INT_ENA = (1U << 16);  ///< HOST_FN1_SLC1_RX_UDF_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1HOST_TX_START_INT_ENA = (1U << 15);  ///< HOST_FN1_SLC1HOST_TX_START_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1HOST_RX_START_INT_ENA = (1U << 14);  ///< HOST_FN1_SLC1HOST_RX_START_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1HOST_RX_EOF_INT_ENA = (1U << 13);  ///< HOST_FN1_SLC1HOST_RX_EOF_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1HOST_RX_SOF_INT_ENA = (1U << 12);  ///< HOST_FN1_SLC1HOST_RX_SOF_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA = (1U << 11);  ///< HOST_FN1_SLC1_TOKEN1_0TO1_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA = (1U << 10);  ///< HOST_FN1_SLC1_TOKEN0_0TO1_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA = (1U << 9);  ///< HOST_FN1_SLC1_TOKEN1_1TO0_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA = (1U << 8);  ///< HOST_FN1_SLC1_TOKEN0_1TO0_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA = (1U << 7);  ///< HOST_FN1_SLC1_TOHOST_BIT7_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA = (1U << 6);  ///< HOST_FN1_SLC1_TOHOST_BIT6_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA = (1U << 5);  ///< HOST_FN1_SLC1_TOHOST_BIT5_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA = (1U << 4);  ///< HOST_FN1_SLC1_TOHOST_BIT4_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA = (1U << 3);  ///< HOST_FN1_SLC1_TOHOST_BIT3_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA = (1U << 2);  ///< HOST_FN1_SLC1_TOHOST_BIT2_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA = (1U << 1);  ///< HOST_FN1_SLC1_TOHOST_BIT1_INT_ENA
        constexpr uint32_t HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA = (1U << 0);  ///< HOST_FN1_SLC1_TOHOST_BIT0_INT_ENA
    }

    /// HOST_SLC0HOST_FUNC2_INT_ENA Register bits
    namespace host_slc0host_func2_int_ena_bits {
        constexpr uint32_t HOST_FN2_GPIO_SDIO_INT_ENA = (1U << 25);  ///< HOST_FN2_GPIO_SDIO_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA = (1U << 24);  ///< HOST_FN2_SLC0_HOST_RD_RETRY_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA = (1U << 23);  ///< HOST_FN2_SLC0_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_EXT_BIT3_INT_ENA = (1U << 22);  ///< HOST_FN2_SLC0_EXT_BIT3_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_EXT_BIT2_INT_ENA = (1U << 21);  ///< HOST_FN2_SLC0_EXT_BIT2_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_EXT_BIT1_INT_ENA = (1U << 20);  ///< HOST_FN2_SLC0_EXT_BIT1_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_EXT_BIT0_INT_ENA = (1U << 19);  ///< HOST_FN2_SLC0_EXT_BIT0_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_RX_PF_VALID_INT_ENA = (1U << 18);  ///< HOST_FN2_SLC0_RX_PF_VALID_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TX_OVF_INT_ENA = (1U << 17);  ///< HOST_FN2_SLC0_TX_OVF_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_RX_UDF_INT_ENA = (1U << 16);  ///< HOST_FN2_SLC0_RX_UDF_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0HOST_TX_START_INT_ENA = (1U << 15);  ///< HOST_FN2_SLC0HOST_TX_START_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0HOST_RX_START_INT_ENA = (1U << 14);  ///< HOST_FN2_SLC0HOST_RX_START_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0HOST_RX_EOF_INT_ENA = (1U << 13);  ///< HOST_FN2_SLC0HOST_RX_EOF_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0HOST_RX_SOF_INT_ENA = (1U << 12);  ///< HOST_FN2_SLC0HOST_RX_SOF_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA = (1U << 11);  ///< HOST_FN2_SLC0_TOKEN1_0TO1_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA = (1U << 10);  ///< HOST_FN2_SLC0_TOKEN0_0TO1_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA = (1U << 9);  ///< HOST_FN2_SLC0_TOKEN1_1TO0_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA = (1U << 8);  ///< HOST_FN2_SLC0_TOKEN0_1TO0_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA = (1U << 7);  ///< HOST_FN2_SLC0_TOHOST_BIT7_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA = (1U << 6);  ///< HOST_FN2_SLC0_TOHOST_BIT6_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA = (1U << 5);  ///< HOST_FN2_SLC0_TOHOST_BIT5_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA = (1U << 4);  ///< HOST_FN2_SLC0_TOHOST_BIT4_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA = (1U << 3);  ///< HOST_FN2_SLC0_TOHOST_BIT3_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA = (1U << 2);  ///< HOST_FN2_SLC0_TOHOST_BIT2_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA = (1U << 1);  ///< HOST_FN2_SLC0_TOHOST_BIT1_INT_ENA
        constexpr uint32_t HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA = (1U << 0);  ///< HOST_FN2_SLC0_TOHOST_BIT0_INT_ENA
    }

    /// HOST_SLC1HOST_FUNC2_INT_ENA Register bits
    namespace host_slc1host_func2_int_ena_bits {
        constexpr uint32_t HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA = (1U << 25);  ///< HOST_FN2_SLC1_BT_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA = (1U << 24);  ///< HOST_FN2_SLC1_HOST_RD_RETRY_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = (1U << 23);  ///< HOST_FN2_SLC1_WIFI_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_EXT_BIT3_INT_ENA = (1U << 22);  ///< HOST_FN2_SLC1_EXT_BIT3_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_EXT_BIT2_INT_ENA = (1U << 21);  ///< HOST_FN2_SLC1_EXT_BIT2_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_EXT_BIT1_INT_ENA = (1U << 20);  ///< HOST_FN2_SLC1_EXT_BIT1_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_EXT_BIT0_INT_ENA = (1U << 19);  ///< HOST_FN2_SLC1_EXT_BIT0_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_RX_PF_VALID_INT_ENA = (1U << 18);  ///< HOST_FN2_SLC1_RX_PF_VALID_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TX_OVF_INT_ENA = (1U << 17);  ///< HOST_FN2_SLC1_TX_OVF_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_RX_UDF_INT_ENA = (1U << 16);  ///< HOST_FN2_SLC1_RX_UDF_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1HOST_TX_START_INT_ENA = (1U << 15);  ///< HOST_FN2_SLC1HOST_TX_START_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1HOST_RX_START_INT_ENA = (1U << 14);  ///< HOST_FN2_SLC1HOST_RX_START_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1HOST_RX_EOF_INT_ENA = (1U << 13);  ///< HOST_FN2_SLC1HOST_RX_EOF_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1HOST_RX_SOF_INT_ENA = (1U << 12);  ///< HOST_FN2_SLC1HOST_RX_SOF_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA = (1U << 11);  ///< HOST_FN2_SLC1_TOKEN1_0TO1_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA = (1U << 10);  ///< HOST_FN2_SLC1_TOKEN0_0TO1_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA = (1U << 9);  ///< HOST_FN2_SLC1_TOKEN1_1TO0_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA = (1U << 8);  ///< HOST_FN2_SLC1_TOKEN0_1TO0_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA = (1U << 7);  ///< HOST_FN2_SLC1_TOHOST_BIT7_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA = (1U << 6);  ///< HOST_FN2_SLC1_TOHOST_BIT6_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA = (1U << 5);  ///< HOST_FN2_SLC1_TOHOST_BIT5_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA = (1U << 4);  ///< HOST_FN2_SLC1_TOHOST_BIT4_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA = (1U << 3);  ///< HOST_FN2_SLC1_TOHOST_BIT3_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA = (1U << 2);  ///< HOST_FN2_SLC1_TOHOST_BIT2_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA = (1U << 1);  ///< HOST_FN2_SLC1_TOHOST_BIT1_INT_ENA
        constexpr uint32_t HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA = (1U << 0);  ///< HOST_FN2_SLC1_TOHOST_BIT0_INT_ENA
    }

    /// HOST_SLC0HOST_INT_ENA Register bits
    namespace host_slc0host_int_ena_bits {
        constexpr uint32_t HOST_GPIO_SDIO_INT_ENA = (1U << 25);  ///< HOST_GPIO_SDIO_INT_ENA
        constexpr uint32_t HOST_SLC0_HOST_RD_RETRY_INT_ENA = (1U << 24);  ///< HOST_SLC0_HOST_RD_RETRY_INT_ENA
        constexpr uint32_t HOST_SLC0_RX_NEW_PACKET_INT_ENA = (1U << 23);  ///< HOST_SLC0_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_SLC0_EXT_BIT3_INT_ENA = (1U << 22);  ///< HOST_SLC0_EXT_BIT3_INT_ENA
        constexpr uint32_t HOST_SLC0_EXT_BIT2_INT_ENA = (1U << 21);  ///< HOST_SLC0_EXT_BIT2_INT_ENA
        constexpr uint32_t HOST_SLC0_EXT_BIT1_INT_ENA = (1U << 20);  ///< HOST_SLC0_EXT_BIT1_INT_ENA
        constexpr uint32_t HOST_SLC0_EXT_BIT0_INT_ENA = (1U << 19);  ///< HOST_SLC0_EXT_BIT0_INT_ENA
        constexpr uint32_t HOST_SLC0_RX_PF_VALID_INT_ENA = (1U << 18);  ///< HOST_SLC0_RX_PF_VALID_INT_ENA
        constexpr uint32_t HOST_SLC0_TX_OVF_INT_ENA = (1U << 17);  ///< HOST_SLC0_TX_OVF_INT_ENA
        constexpr uint32_t HOST_SLC0_RX_UDF_INT_ENA = (1U << 16);  ///< HOST_SLC0_RX_UDF_INT_ENA
        constexpr uint32_t HOST_SLC0HOST_TX_START_INT_ENA = (1U << 15);  ///< HOST_SLC0HOST_TX_START_INT_ENA
        constexpr uint32_t HOST_SLC0HOST_RX_START_INT_ENA = (1U << 14);  ///< HOST_SLC0HOST_RX_START_INT_ENA
        constexpr uint32_t HOST_SLC0HOST_RX_EOF_INT_ENA = (1U << 13);  ///< HOST_SLC0HOST_RX_EOF_INT_ENA
        constexpr uint32_t HOST_SLC0HOST_RX_SOF_INT_ENA = (1U << 12);  ///< HOST_SLC0HOST_RX_SOF_INT_ENA
        constexpr uint32_t HOST_SLC0_TOKEN1_0TO1_INT_ENA = (1U << 11);  ///< HOST_SLC0_TOKEN1_0TO1_INT_ENA
        constexpr uint32_t HOST_SLC0_TOKEN0_0TO1_INT_ENA = (1U << 10);  ///< HOST_SLC0_TOKEN0_0TO1_INT_ENA
        constexpr uint32_t HOST_SLC0_TOKEN1_1TO0_INT_ENA = (1U << 9);  ///< HOST_SLC0_TOKEN1_1TO0_INT_ENA
        constexpr uint32_t HOST_SLC0_TOKEN0_1TO0_INT_ENA = (1U << 8);  ///< HOST_SLC0_TOKEN0_1TO0_INT_ENA
        constexpr uint32_t HOST_SLC0_TOHOST_BIT7_INT_ENA = (1U << 7);  ///< HOST_SLC0_TOHOST_BIT7_INT_ENA
        constexpr uint32_t HOST_SLC0_TOHOST_BIT6_INT_ENA = (1U << 6);  ///< HOST_SLC0_TOHOST_BIT6_INT_ENA
        constexpr uint32_t HOST_SLC0_TOHOST_BIT5_INT_ENA = (1U << 5);  ///< HOST_SLC0_TOHOST_BIT5_INT_ENA
        constexpr uint32_t HOST_SLC0_TOHOST_BIT4_INT_ENA = (1U << 4);  ///< HOST_SLC0_TOHOST_BIT4_INT_ENA
        constexpr uint32_t HOST_SLC0_TOHOST_BIT3_INT_ENA = (1U << 3);  ///< HOST_SLC0_TOHOST_BIT3_INT_ENA
        constexpr uint32_t HOST_SLC0_TOHOST_BIT2_INT_ENA = (1U << 2);  ///< HOST_SLC0_TOHOST_BIT2_INT_ENA
        constexpr uint32_t HOST_SLC0_TOHOST_BIT1_INT_ENA = (1U << 1);  ///< HOST_SLC0_TOHOST_BIT1_INT_ENA
        constexpr uint32_t HOST_SLC0_TOHOST_BIT0_INT_ENA = (1U << 0);  ///< HOST_SLC0_TOHOST_BIT0_INT_ENA
    }

    /// HOST_SLC1HOST_INT_ENA Register bits
    namespace host_slc1host_int_ena_bits {
        constexpr uint32_t HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA = (1U << 25);  ///< HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_SLC1_HOST_RD_RETRY_INT_ENA = (1U << 24);  ///< HOST_SLC1_HOST_RD_RETRY_INT_ENA
        constexpr uint32_t HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA = (1U << 23);  ///< HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA
        constexpr uint32_t HOST_SLC1_EXT_BIT3_INT_ENA = (1U << 22);  ///< HOST_SLC1_EXT_BIT3_INT_ENA
        constexpr uint32_t HOST_SLC1_EXT_BIT2_INT_ENA = (1U << 21);  ///< HOST_SLC1_EXT_BIT2_INT_ENA
        constexpr uint32_t HOST_SLC1_EXT_BIT1_INT_ENA = (1U << 20);  ///< HOST_SLC1_EXT_BIT1_INT_ENA
        constexpr uint32_t HOST_SLC1_EXT_BIT0_INT_ENA = (1U << 19);  ///< HOST_SLC1_EXT_BIT0_INT_ENA
        constexpr uint32_t HOST_SLC1_RX_PF_VALID_INT_ENA = (1U << 18);  ///< HOST_SLC1_RX_PF_VALID_INT_ENA
        constexpr uint32_t HOST_SLC1_TX_OVF_INT_ENA = (1U << 17);  ///< HOST_SLC1_TX_OVF_INT_ENA
        constexpr uint32_t HOST_SLC1_RX_UDF_INT_ENA = (1U << 16);  ///< HOST_SLC1_RX_UDF_INT_ENA
        constexpr uint32_t HOST_SLC1HOST_TX_START_INT_ENA = (1U << 15);  ///< HOST_SLC1HOST_TX_START_INT_ENA
        constexpr uint32_t HOST_SLC1HOST_RX_START_INT_ENA = (1U << 14);  ///< HOST_SLC1HOST_RX_START_INT_ENA
        constexpr uint32_t HOST_SLC1HOST_RX_EOF_INT_ENA = (1U << 13);  ///< HOST_SLC1HOST_RX_EOF_INT_ENA
        constexpr uint32_t HOST_SLC1HOST_RX_SOF_INT_ENA = (1U << 12);  ///< HOST_SLC1HOST_RX_SOF_INT_ENA
        constexpr uint32_t HOST_SLC1_TOKEN1_0TO1_INT_ENA = (1U << 11);  ///< HOST_SLC1_TOKEN1_0TO1_INT_ENA
        constexpr uint32_t HOST_SLC1_TOKEN0_0TO1_INT_ENA = (1U << 10);  ///< HOST_SLC1_TOKEN0_0TO1_INT_ENA
        constexpr uint32_t HOST_SLC1_TOKEN1_1TO0_INT_ENA = (1U << 9);  ///< HOST_SLC1_TOKEN1_1TO0_INT_ENA
        constexpr uint32_t HOST_SLC1_TOKEN0_1TO0_INT_ENA = (1U << 8);  ///< HOST_SLC1_TOKEN0_1TO0_INT_ENA
        constexpr uint32_t HOST_SLC1_TOHOST_BIT7_INT_ENA = (1U << 7);  ///< HOST_SLC1_TOHOST_BIT7_INT_ENA
        constexpr uint32_t HOST_SLC1_TOHOST_BIT6_INT_ENA = (1U << 6);  ///< HOST_SLC1_TOHOST_BIT6_INT_ENA
        constexpr uint32_t HOST_SLC1_TOHOST_BIT5_INT_ENA = (1U << 5);  ///< HOST_SLC1_TOHOST_BIT5_INT_ENA
        constexpr uint32_t HOST_SLC1_TOHOST_BIT4_INT_ENA = (1U << 4);  ///< HOST_SLC1_TOHOST_BIT4_INT_ENA
        constexpr uint32_t HOST_SLC1_TOHOST_BIT3_INT_ENA = (1U << 3);  ///< HOST_SLC1_TOHOST_BIT3_INT_ENA
        constexpr uint32_t HOST_SLC1_TOHOST_BIT2_INT_ENA = (1U << 2);  ///< HOST_SLC1_TOHOST_BIT2_INT_ENA
        constexpr uint32_t HOST_SLC1_TOHOST_BIT1_INT_ENA = (1U << 1);  ///< HOST_SLC1_TOHOST_BIT1_INT_ENA
        constexpr uint32_t HOST_SLC1_TOHOST_BIT0_INT_ENA = (1U << 0);  ///< HOST_SLC1_TOHOST_BIT0_INT_ENA
    }

    /// HOST_SLC0HOST_RX_INFOR Register bits
    namespace host_slc0host_rx_infor_bits {
        constexpr uint32_t HOST_SLC0HOST_RX_INFOR = (20 << 0);  ///< HOST_SLC0HOST_RX_INFOR
    }

    /// HOST_SLC1HOST_RX_INFOR Register bits
    namespace host_slc1host_rx_infor_bits {
        constexpr uint32_t HOST_SLC1HOST_RX_INFOR = (20 << 0);  ///< HOST_SLC1HOST_RX_INFOR
    }

    /// HOST_SLC0HOST_LEN_WD Register bits
    namespace host_slc0host_len_wd_bits {
        constexpr uint32_t HOST_SLC0HOST_LEN_WD = (32 << 0);  ///< HOST_SLC0HOST_LEN_WD
    }

    /// HOST_SLC_APBWIN_WDATA Register bits
    namespace host_slc_apbwin_wdata_bits {
        constexpr uint32_t HOST_SLC_APBWIN_WDATA = (32 << 0);  ///< HOST_SLC_APBWIN_WDATA
    }

    /// HOST_SLC_APBWIN_CONF Register bits
    namespace host_slc_apbwin_conf_bits {
        constexpr uint32_t HOST_SLC_APBWIN_START = (1U << 29);  ///< HOST_SLC_APBWIN_START
        constexpr uint32_t HOST_SLC_APBWIN_WR = (1U << 28);  ///< HOST_SLC_APBWIN_WR
        constexpr uint32_t HOST_SLC_APBWIN_ADDR = (28 << 0);  ///< HOST_SLC_APBWIN_ADDR
    }

    /// HOST_SLC_APBWIN_RDATA Register bits
    namespace host_slc_apbwin_rdata_bits {
        constexpr uint32_t HOST_SLC_APBWIN_RDATA = (32 << 0);  ///< HOST_SLC_APBWIN_RDATA
    }

    /// HOST_SLCHOST_RDCLR0 Register bits
    namespace host_slchost_rdclr0_bits {
        constexpr uint32_t HOST_SLCHOST_SLC0_BIT6_CLRADDR = (9 << 9);  ///< HOST_SLCHOST_SLC0_BIT6_CLRADDR
        constexpr uint32_t HOST_SLCHOST_SLC0_BIT7_CLRADDR = (9 << 0);  ///< HOST_SLCHOST_SLC0_BIT7_CLRADDR
    }

    /// HOST_SLCHOST_RDCLR1 Register bits
    namespace host_slchost_rdclr1_bits {
        constexpr uint32_t HOST_SLCHOST_SLC1_BIT6_CLRADDR = (9 << 9);  ///< HOST_SLCHOST_SLC1_BIT6_CLRADDR
        constexpr uint32_t HOST_SLCHOST_SLC1_BIT7_CLRADDR = (9 << 0);  ///< HOST_SLCHOST_SLC1_BIT7_CLRADDR
    }

    /// HOST_SLC0HOST_INT_ENA1 Register bits
    namespace host_slc0host_int_ena1_bits {
        constexpr uint32_t HOST_GPIO_SDIO_INT_ENA1 = (1U << 25);  ///< HOST_GPIO_SDIO_INT_ENA1
        constexpr uint32_t HOST_SLC0_HOST_RD_RETRY_INT_ENA1 = (1U << 24);  ///< HOST_SLC0_HOST_RD_RETRY_INT_ENA1
        constexpr uint32_t HOST_SLC0_RX_NEW_PACKET_INT_ENA1 = (1U << 23);  ///< HOST_SLC0_RX_NEW_PACKET_INT_ENA1
        constexpr uint32_t HOST_SLC0_EXT_BIT3_INT_ENA1 = (1U << 22);  ///< HOST_SLC0_EXT_BIT3_INT_ENA1
        constexpr uint32_t HOST_SLC0_EXT_BIT2_INT_ENA1 = (1U << 21);  ///< HOST_SLC0_EXT_BIT2_INT_ENA1
        constexpr uint32_t HOST_SLC0_EXT_BIT1_INT_ENA1 = (1U << 20);  ///< HOST_SLC0_EXT_BIT1_INT_ENA1
        constexpr uint32_t HOST_SLC0_EXT_BIT0_INT_ENA1 = (1U << 19);  ///< HOST_SLC0_EXT_BIT0_INT_ENA1
        constexpr uint32_t HOST_SLC0_RX_PF_VALID_INT_ENA1 = (1U << 18);  ///< HOST_SLC0_RX_PF_VALID_INT_ENA1
        constexpr uint32_t HOST_SLC0_TX_OVF_INT_ENA1 = (1U << 17);  ///< HOST_SLC0_TX_OVF_INT_ENA1
        constexpr uint32_t HOST_SLC0_RX_UDF_INT_ENA1 = (1U << 16);  ///< HOST_SLC0_RX_UDF_INT_ENA1
        constexpr uint32_t HOST_SLC0HOST_TX_START_INT_ENA1 = (1U << 15);  ///< HOST_SLC0HOST_TX_START_INT_ENA1
        constexpr uint32_t HOST_SLC0HOST_RX_START_INT_ENA1 = (1U << 14);  ///< HOST_SLC0HOST_RX_START_INT_ENA1
        constexpr uint32_t HOST_SLC0HOST_RX_EOF_INT_ENA1 = (1U << 13);  ///< HOST_SLC0HOST_RX_EOF_INT_ENA1
        constexpr uint32_t HOST_SLC0HOST_RX_SOF_INT_ENA1 = (1U << 12);  ///< HOST_SLC0HOST_RX_SOF_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOKEN1_0TO1_INT_ENA1 = (1U << 11);  ///< HOST_SLC0_TOKEN1_0TO1_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOKEN0_0TO1_INT_ENA1 = (1U << 10);  ///< HOST_SLC0_TOKEN0_0TO1_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOKEN1_1TO0_INT_ENA1 = (1U << 9);  ///< HOST_SLC0_TOKEN1_1TO0_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOKEN0_1TO0_INT_ENA1 = (1U << 8);  ///< HOST_SLC0_TOKEN0_1TO0_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOHOST_BIT7_INT_ENA1 = (1U << 7);  ///< HOST_SLC0_TOHOST_BIT7_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOHOST_BIT6_INT_ENA1 = (1U << 6);  ///< HOST_SLC0_TOHOST_BIT6_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOHOST_BIT5_INT_ENA1 = (1U << 5);  ///< HOST_SLC0_TOHOST_BIT5_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOHOST_BIT4_INT_ENA1 = (1U << 4);  ///< HOST_SLC0_TOHOST_BIT4_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOHOST_BIT3_INT_ENA1 = (1U << 3);  ///< HOST_SLC0_TOHOST_BIT3_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOHOST_BIT2_INT_ENA1 = (1U << 2);  ///< HOST_SLC0_TOHOST_BIT2_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOHOST_BIT1_INT_ENA1 = (1U << 1);  ///< HOST_SLC0_TOHOST_BIT1_INT_ENA1
        constexpr uint32_t HOST_SLC0_TOHOST_BIT0_INT_ENA1 = (1U << 0);  ///< HOST_SLC0_TOHOST_BIT0_INT_ENA1
    }

    /// HOST_SLC1HOST_INT_ENA1 Register bits
    namespace host_slc1host_int_ena1_bits {
        constexpr uint32_t HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1 = (1U << 25);  ///< HOST_SLC1_BT_RX_NEW_PACKET_INT_ENA1
        constexpr uint32_t HOST_SLC1_HOST_RD_RETRY_INT_ENA1 = (1U << 24);  ///< HOST_SLC1_HOST_RD_RETRY_INT_ENA1
        constexpr uint32_t HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1 = (1U << 23);  ///< HOST_SLC1_WIFI_RX_NEW_PACKET_INT_ENA1
        constexpr uint32_t HOST_SLC1_EXT_BIT3_INT_ENA1 = (1U << 22);  ///< HOST_SLC1_EXT_BIT3_INT_ENA1
        constexpr uint32_t HOST_SLC1_EXT_BIT2_INT_ENA1 = (1U << 21);  ///< HOST_SLC1_EXT_BIT2_INT_ENA1
        constexpr uint32_t HOST_SLC1_EXT_BIT1_INT_ENA1 = (1U << 20);  ///< HOST_SLC1_EXT_BIT1_INT_ENA1
        constexpr uint32_t HOST_SLC1_EXT_BIT0_INT_ENA1 = (1U << 19);  ///< HOST_SLC1_EXT_BIT0_INT_ENA1
        constexpr uint32_t HOST_SLC1_RX_PF_VALID_INT_ENA1 = (1U << 18);  ///< HOST_SLC1_RX_PF_VALID_INT_ENA1
        constexpr uint32_t HOST_SLC1_TX_OVF_INT_ENA1 = (1U << 17);  ///< HOST_SLC1_TX_OVF_INT_ENA1
        constexpr uint32_t HOST_SLC1_RX_UDF_INT_ENA1 = (1U << 16);  ///< HOST_SLC1_RX_UDF_INT_ENA1
        constexpr uint32_t HOST_SLC1HOST_TX_START_INT_ENA1 = (1U << 15);  ///< HOST_SLC1HOST_TX_START_INT_ENA1
        constexpr uint32_t HOST_SLC1HOST_RX_START_INT_ENA1 = (1U << 14);  ///< HOST_SLC1HOST_RX_START_INT_ENA1
        constexpr uint32_t HOST_SLC1HOST_RX_EOF_INT_ENA1 = (1U << 13);  ///< HOST_SLC1HOST_RX_EOF_INT_ENA1
        constexpr uint32_t HOST_SLC1HOST_RX_SOF_INT_ENA1 = (1U << 12);  ///< HOST_SLC1HOST_RX_SOF_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOKEN1_0TO1_INT_ENA1 = (1U << 11);  ///< HOST_SLC1_TOKEN1_0TO1_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOKEN0_0TO1_INT_ENA1 = (1U << 10);  ///< HOST_SLC1_TOKEN0_0TO1_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOKEN1_1TO0_INT_ENA1 = (1U << 9);  ///< HOST_SLC1_TOKEN1_1TO0_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOKEN0_1TO0_INT_ENA1 = (1U << 8);  ///< HOST_SLC1_TOKEN0_1TO0_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOHOST_BIT7_INT_ENA1 = (1U << 7);  ///< HOST_SLC1_TOHOST_BIT7_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOHOST_BIT6_INT_ENA1 = (1U << 6);  ///< HOST_SLC1_TOHOST_BIT6_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOHOST_BIT5_INT_ENA1 = (1U << 5);  ///< HOST_SLC1_TOHOST_BIT5_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOHOST_BIT4_INT_ENA1 = (1U << 4);  ///< HOST_SLC1_TOHOST_BIT4_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOHOST_BIT3_INT_ENA1 = (1U << 3);  ///< HOST_SLC1_TOHOST_BIT3_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOHOST_BIT2_INT_ENA1 = (1U << 2);  ///< HOST_SLC1_TOHOST_BIT2_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOHOST_BIT1_INT_ENA1 = (1U << 1);  ///< HOST_SLC1_TOHOST_BIT1_INT_ENA1
        constexpr uint32_t HOST_SLC1_TOHOST_BIT0_INT_ENA1 = (1U << 0);  ///< HOST_SLC1_TOHOST_BIT0_INT_ENA1
    }

    /// HOST_SLCHOSTDATE Register bits
    namespace host_slchostdate_bits {
        constexpr uint32_t HOST_SLCHOST_DATE = (32 << 0);  ///< HOST_SLCHOST_DATE
    }

    /// HOST_SLCHOSTID Register bits
    namespace host_slchostid_bits {
        constexpr uint32_t HOST_SLCHOST_ID = (32 << 0);  ///< HOST_SLCHOST_ID
    }

    /// HOST_SLCHOST_CONF Register bits
    namespace host_slchost_conf_bits {
        constexpr uint32_t HOST_HSPEED_CON_EN = (1U << 27);  ///< HOST_HSPEED_CON_EN
        constexpr uint32_t HOST_SDIO_PAD_PULLUP = (1U << 26);  ///< HOST_SDIO_PAD_PULLUP
        constexpr uint32_t HOST_SDIO20_INT_DELAY = (1U << 25);  ///< HOST_SDIO20_INT_DELAY
        constexpr uint32_t HOST_FRC_QUICK_IN = (5 << 20);  ///< HOST_FRC_QUICK_IN
        constexpr uint32_t HOST_FRC_POS_SAMP = (5 << 15);  ///< HOST_FRC_POS_SAMP
        constexpr uint32_t HOST_FRC_NEG_SAMP = (5 << 10);  ///< HOST_FRC_NEG_SAMP
        constexpr uint32_t HOST_FRC_SDIO20 = (5 << 5);  ///< HOST_FRC_SDIO20
        constexpr uint32_t HOST_FRC_SDIO11 = (5 << 0);  ///< HOST_FRC_SDIO11
    }

    /// HOST_SLCHOST_INF_ST Register bits
    namespace host_slchost_inf_st_bits {
        constexpr uint32_t HOST_SDIO_QUICK_IN = (5 << 10);  ///< HOST_SDIO_QUICK_IN
        constexpr uint32_t HOST_SDIO_NEG_SAMP = (5 << 5);  ///< HOST_SDIO_NEG_SAMP
        constexpr uint32_t HOST_SDIO20_MODE = (5 << 0);  ///< HOST_SDIO20_MODE
    }

}

// ============================================================================
// SLC Peripheral
// ============================================================================

namespace slc {
    /// Base addresses
    constexpr uint32_t SLC_BASE = 0x3FF58000;

    /// SLC Register structure
    struct Registers {
        volatile uint32_t CONF0;  ///< Offset: 0x00 - SLC_CONF0
        volatile uint32_t 0INT_RAW;  ///< Offset: 0x04 - SLC_0INT_RAW
        volatile uint32_t 0INT_ST;  ///< Offset: 0x08 - SLC_0INT_ST
        volatile uint32_t 0INT_ENA;  ///< Offset: 0x0C - SLC_0INT_ENA
        volatile uint32_t 0INT_CLR;  ///< Offset: 0x10 - SLC_0INT_CLR
        volatile uint32_t 1INT_RAW;  ///< Offset: 0x14 - SLC_1INT_RAW
        volatile uint32_t 1INT_ST;  ///< Offset: 0x18 - SLC_1INT_ST
        volatile uint32_t 1INT_ENA;  ///< Offset: 0x1C - SLC_1INT_ENA
        volatile uint32_t 1INT_CLR;  ///< Offset: 0x20 - SLC_1INT_CLR
        volatile uint32_t RX_STATUS;  ///< Offset: 0x24 - SLC_RX_STATUS
        volatile uint32_t 0RXFIFO_PUSH;  ///< Offset: 0x28 - SLC_0RXFIFO_PUSH
        volatile uint32_t 1RXFIFO_PUSH;  ///< Offset: 0x2C - SLC_1RXFIFO_PUSH
        volatile uint32_t TX_STATUS;  ///< Offset: 0x30 - SLC_TX_STATUS
        volatile uint32_t 0TXFIFO_POP;  ///< Offset: 0x34 - SLC_0TXFIFO_POP
        volatile uint32_t 1TXFIFO_POP;  ///< Offset: 0x38 - SLC_1TXFIFO_POP
        volatile uint32_t 0RX_LINK;  ///< Offset: 0x3C - SLC_0RX_LINK
        volatile uint32_t 0TX_LINK;  ///< Offset: 0x40 - SLC_0TX_LINK
        volatile uint32_t 1RX_LINK;  ///< Offset: 0x44 - SLC_1RX_LINK
        volatile uint32_t 1TX_LINK;  ///< Offset: 0x48 - SLC_1TX_LINK
        volatile uint32_t INTVEC_TOHOST;  ///< Offset: 0x4C - SLC_INTVEC_TOHOST
        volatile uint32_t 0TOKEN0;  ///< Offset: 0x50 - SLC_0TOKEN0
        volatile uint32_t 0TOKEN1;  ///< Offset: 0x54 - SLC_0TOKEN1
        volatile uint32_t 1TOKEN0;  ///< Offset: 0x58 - SLC_1TOKEN0
        volatile uint32_t 1TOKEN1;  ///< Offset: 0x5C - SLC_1TOKEN1
        volatile uint32_t CONF1;  ///< Offset: 0x60 - SLC_CONF1
        volatile uint32_t 0_STATE0;  ///< Offset: 0x64 - SLC_0_STATE0
        volatile uint32_t 0_STATE1;  ///< Offset: 0x68 - SLC_0_STATE1
        volatile uint32_t 1_STATE0;  ///< Offset: 0x6C - SLC_1_STATE0
        volatile uint32_t 1_STATE1;  ///< Offset: 0x70 - SLC_1_STATE1
        volatile uint32_t BRIDGE_CONF;  ///< Offset: 0x74 - SLC_BRIDGE_CONF
        volatile uint32_t 0_TO_EOF_DES_ADDR;  ///< Offset: 0x78 - SLC_0_TO_EOF_DES_ADDR
        volatile uint32_t 0_TX_EOF_DES_ADDR;  ///< Offset: 0x7C - SLC_0_TX_EOF_DES_ADDR
        volatile uint32_t 0_TO_EOF_BFR_DES_ADDR;  ///< Offset: 0x80 - SLC_0_TO_EOF_BFR_DES_ADDR
        volatile uint32_t 1_TO_EOF_DES_ADDR;  ///< Offset: 0x84 - SLC_1_TO_EOF_DES_ADDR
        volatile uint32_t 1_TX_EOF_DES_ADDR;  ///< Offset: 0x88 - SLC_1_TX_EOF_DES_ADDR
        volatile uint32_t 1_TO_EOF_BFR_DES_ADDR;  ///< Offset: 0x8C - SLC_1_TO_EOF_BFR_DES_ADDR
        volatile uint32_t AHB_TEST;  ///< Offset: 0x90 - SLC_AHB_TEST
        volatile uint32_t SDIO_ST;  ///< Offset: 0x94 - SLC_SDIO_ST
        volatile uint32_t RX_DSCR_CONF;  ///< Offset: 0x98 - SLC_RX_DSCR_CONF
        volatile uint32_t 0_TXLINK_DSCR;  ///< Offset: 0x9C - SLC_0_TXLINK_DSCR
        volatile uint32_t 0_TXLINK_DSCR_BF0;  ///< Offset: 0xA0 - SLC_0_TXLINK_DSCR_BF0
        volatile uint32_t 0_TXLINK_DSCR_BF1;  ///< Offset: 0xA4 - SLC_0_TXLINK_DSCR_BF1
        volatile uint32_t 0_RXLINK_DSCR;  ///< Offset: 0xA8 - SLC_0_RXLINK_DSCR
        volatile uint32_t 0_RXLINK_DSCR_BF0;  ///< Offset: 0xAC - SLC_0_RXLINK_DSCR_BF0
        volatile uint32_t 0_RXLINK_DSCR_BF1;  ///< Offset: 0xB0 - SLC_0_RXLINK_DSCR_BF1
        volatile uint32_t 1_TXLINK_DSCR;  ///< Offset: 0xB4 - SLC_1_TXLINK_DSCR
        volatile uint32_t 1_TXLINK_DSCR_BF0;  ///< Offset: 0xB8 - SLC_1_TXLINK_DSCR_BF0
        volatile uint32_t 1_TXLINK_DSCR_BF1;  ///< Offset: 0xBC - SLC_1_TXLINK_DSCR_BF1
        volatile uint32_t 1_RXLINK_DSCR;  ///< Offset: 0xC0 - SLC_1_RXLINK_DSCR
        volatile uint32_t 1_RXLINK_DSCR_BF0;  ///< Offset: 0xC4 - SLC_1_RXLINK_DSCR_BF0
        volatile uint32_t 1_RXLINK_DSCR_BF1;  ///< Offset: 0xC8 - SLC_1_RXLINK_DSCR_BF1
        volatile uint32_t 0_TX_ERREOF_DES_ADDR;  ///< Offset: 0xCC - SLC_0_TX_ERREOF_DES_ADDR
        volatile uint32_t 1_TX_ERREOF_DES_ADDR;  ///< Offset: 0xD0 - SLC_1_TX_ERREOF_DES_ADDR
        volatile uint32_t TOKEN_LAT;  ///< Offset: 0xD4 - SLC_TOKEN_LAT
        volatile uint32_t TX_DSCR_CONF;  ///< Offset: 0xD8 - SLC_TX_DSCR_CONF
        volatile uint32_t CMD_INFOR0;  ///< Offset: 0xDC - SLC_CMD_INFOR0
        volatile uint32_t CMD_INFOR1;  ///< Offset: 0xE0 - SLC_CMD_INFOR1
        volatile uint32_t 0_LEN_CONF;  ///< Offset: 0xE4 - SLC_0_LEN_CONF
        volatile uint32_t 0_LENGTH;  ///< Offset: 0xE8 - SLC_0_LENGTH
        volatile uint32_t 0_TXPKT_H_DSCR;  ///< Offset: 0xEC - SLC_0_TXPKT_H_DSCR
        volatile uint32_t 0_TXPKT_E_DSCR;  ///< Offset: 0xF0 - SLC_0_TXPKT_E_DSCR
        volatile uint32_t 0_RXPKT_H_DSCR;  ///< Offset: 0xF4 - SLC_0_RXPKT_H_DSCR
        volatile uint32_t 0_RXPKT_E_DSCR;  ///< Offset: 0xF8 - SLC_0_RXPKT_E_DSCR
        volatile uint32_t 0_TXPKTU_H_DSCR;  ///< Offset: 0xFC - SLC_0_TXPKTU_H_DSCR
        volatile uint32_t 0_TXPKTU_E_DSCR;  ///< Offset: 0x100 - SLC_0_TXPKTU_E_DSCR
        volatile uint32_t 0_RXPKTU_H_DSCR;  ///< Offset: 0x104 - SLC_0_RXPKTU_H_DSCR
        volatile uint32_t 0_RXPKTU_E_DSCR;  ///< Offset: 0x108 - SLC_0_RXPKTU_E_DSCR
        volatile uint32_t SEQ_POSITION;  ///< Offset: 0x114 - SLC_SEQ_POSITION
        volatile uint32_t 0_DSCR_REC_CONF;  ///< Offset: 0x118 - SLC_0_DSCR_REC_CONF
        volatile uint32_t SDIO_CRC_ST0;  ///< Offset: 0x11C - SLC_SDIO_CRC_ST0
        volatile uint32_t SDIO_CRC_ST1;  ///< Offset: 0x120 - SLC_SDIO_CRC_ST1
        volatile uint32_t 0_EOF_START_DES;  ///< Offset: 0x124 - SLC_0_EOF_START_DES
        volatile uint32_t 0_PUSH_DSCR_ADDR;  ///< Offset: 0x128 - SLC_0_PUSH_DSCR_ADDR
        volatile uint32_t 0_DONE_DSCR_ADDR;  ///< Offset: 0x12C - SLC_0_DONE_DSCR_ADDR
        volatile uint32_t 0_SUB_START_DES;  ///< Offset: 0x130 - SLC_0_SUB_START_DES
        volatile uint32_t 0_DSCR_CNT;  ///< Offset: 0x134 - SLC_0_DSCR_CNT
        volatile uint32_t 0_LEN_LIM_CONF;  ///< Offset: 0x138 - SLC_0_LEN_LIM_CONF
        volatile uint32_t 0INT_ST1;  ///< Offset: 0x13C - SLC_0INT_ST1
        volatile uint32_t 0INT_ENA1;  ///< Offset: 0x140 - SLC_0INT_ENA1
        volatile uint32_t 1INT_ST1;  ///< Offset: 0x144 - SLC_1INT_ST1
        volatile uint32_t 1INT_ENA1;  ///< Offset: 0x148 - SLC_1INT_ENA1
        volatile uint32_t DATE;  ///< Offset: 0x1F8 - SLC_DATE
        volatile uint32_t ID;  ///< Offset: 0x1FC - SLC_ID
    };

    /// Peripheral instances
    inline Registers* SLC = reinterpret_cast<Registers*>(SLC_BASE);

    // Bit definitions
    /// CONF0 Register bits
    namespace conf0_bits {
        constexpr uint32_t SLC1_TOKEN_SEL = (1U << 31);  ///< SLC1_TOKEN_SEL
        constexpr uint32_t SLC1_TOKEN_AUTO_CLR = (1U << 30);  ///< SLC1_TOKEN_AUTO_CLR
        constexpr uint32_t SLC1_TXDATA_BURST_EN = (1U << 29);  ///< SLC1_TXDATA_BURST_EN
        constexpr uint32_t SLC1_TXDSCR_BURST_EN = (1U << 28);  ///< SLC1_TXDSCR_BURST_EN
        constexpr uint32_t SLC1_TXLINK_AUTO_RET = (1U << 27);  ///< SLC1_TXLINK_AUTO_RET
        constexpr uint32_t SLC1_RXLINK_AUTO_RET = (1U << 26);  ///< SLC1_RXLINK_AUTO_RET
        constexpr uint32_t SLC1_RXDATA_BURST_EN = (1U << 25);  ///< SLC1_RXDATA_BURST_EN
        constexpr uint32_t SLC1_RXDSCR_BURST_EN = (1U << 24);  ///< SLC1_RXDSCR_BURST_EN
        constexpr uint32_t SLC1_RX_NO_RESTART_CLR = (1U << 23);  ///< SLC1_RX_NO_RESTART_CLR
        constexpr uint32_t SLC1_RX_AUTO_WRBACK = (1U << 22);  ///< SLC1_RX_AUTO_WRBACK
        constexpr uint32_t SLC1_RX_LOOP_TEST = (1U << 21);  ///< SLC1_RX_LOOP_TEST
        constexpr uint32_t SLC1_TX_LOOP_TEST = (1U << 20);  ///< SLC1_TX_LOOP_TEST
        constexpr uint32_t SLC1_WR_RETRY_MASK_EN = (1U << 19);  ///< SLC1_WR_RETRY_MASK_EN
        constexpr uint32_t SLC0_WR_RETRY_MASK_EN = (1U << 18);  ///< SLC0_WR_RETRY_MASK_EN
        constexpr uint32_t SLC1_RX_RST = (1U << 17);  ///< SLC1_RX_RST
        constexpr uint32_t SLC1_TX_RST = (1U << 16);  ///< SLC1_TX_RST
        constexpr uint32_t SLC0_TOKEN_SEL = (1U << 15);  ///< SLC0_TOKEN_SEL
        constexpr uint32_t SLC0_TOKEN_AUTO_CLR = (1U << 14);  ///< SLC0_TOKEN_AUTO_CLR
        constexpr uint32_t SLC0_TXDATA_BURST_EN = (1U << 13);  ///< SLC0_TXDATA_BURST_EN
        constexpr uint32_t SLC0_TXDSCR_BURST_EN = (1U << 12);  ///< SLC0_TXDSCR_BURST_EN
        constexpr uint32_t SLC0_TXLINK_AUTO_RET = (1U << 11);  ///< SLC0_TXLINK_AUTO_RET
        constexpr uint32_t SLC0_RXLINK_AUTO_RET = (1U << 10);  ///< SLC0_RXLINK_AUTO_RET
        constexpr uint32_t SLC0_RXDATA_BURST_EN = (1U << 9);  ///< SLC0_RXDATA_BURST_EN
        constexpr uint32_t SLC0_RXDSCR_BURST_EN = (1U << 8);  ///< SLC0_RXDSCR_BURST_EN
        constexpr uint32_t SLC0_RX_NO_RESTART_CLR = (1U << 7);  ///< SLC0_RX_NO_RESTART_CLR
        constexpr uint32_t SLC0_RX_AUTO_WRBACK = (1U << 6);  ///< SLC0_RX_AUTO_WRBACK
        constexpr uint32_t SLC0_RX_LOOP_TEST = (1U << 5);  ///< SLC0_RX_LOOP_TEST
        constexpr uint32_t SLC0_TX_LOOP_TEST = (1U << 4);  ///< SLC0_TX_LOOP_TEST
        constexpr uint32_t AHBM_RST = (1U << 3);  ///< AHBM_RST
        constexpr uint32_t AHBM_FIFO_RST = (1U << 2);  ///< AHBM_FIFO_RST
        constexpr uint32_t SLC0_RX_RST = (1U << 1);  ///< SLC0_RX_RST
        constexpr uint32_t SLC0_TX_RST = (1U << 0);  ///< SLC0_TX_RST
    }

    /// 0INT_RAW Register bits
    namespace 0int_raw_bits {
        constexpr uint32_t SLC0_RX_QUICK_EOF_INT_RAW = (1U << 26);  ///< SLC0_RX_QUICK_EOF_INT_RAW
        constexpr uint32_t CMD_DTC_INT_RAW = (1U << 25);  ///< CMD_DTC_INT_RAW
        constexpr uint32_t SLC0_TX_ERR_EOF_INT_RAW = (1U << 24);  ///< SLC0_TX_ERR_EOF_INT_RAW
        constexpr uint32_t SLC0_WR_RETRY_DONE_INT_RAW = (1U << 23);  ///< SLC0_WR_RETRY_DONE_INT_RAW
        constexpr uint32_t SLC0_HOST_RD_ACK_INT_RAW = (1U << 22);  ///< SLC0_HOST_RD_ACK_INT_RAW
        constexpr uint32_t SLC0_TX_DSCR_EMPTY_INT_RAW = (1U << 21);  ///< SLC0_TX_DSCR_EMPTY_INT_RAW
        constexpr uint32_t SLC0_RX_DSCR_ERR_INT_RAW = (1U << 20);  ///< SLC0_RX_DSCR_ERR_INT_RAW
        constexpr uint32_t SLC0_TX_DSCR_ERR_INT_RAW = (1U << 19);  ///< SLC0_TX_DSCR_ERR_INT_RAW
        constexpr uint32_t SLC0_TOHOST_INT_RAW = (1U << 18);  ///< SLC0_TOHOST_INT_RAW
        constexpr uint32_t SLC0_RX_EOF_INT_RAW = (1U << 17);  ///< SLC0_RX_EOF_INT_RAW
        constexpr uint32_t SLC0_RX_DONE_INT_RAW = (1U << 16);  ///< SLC0_RX_DONE_INT_RAW
        constexpr uint32_t SLC0_TX_SUC_EOF_INT_RAW = (1U << 15);  ///< SLC0_TX_SUC_EOF_INT_RAW
        constexpr uint32_t SLC0_TX_DONE_INT_RAW = (1U << 14);  ///< SLC0_TX_DONE_INT_RAW
        constexpr uint32_t SLC0_TOKEN1_1TO0_INT_RAW = (1U << 13);  ///< SLC0_TOKEN1_1TO0_INT_RAW
        constexpr uint32_t SLC0_TOKEN0_1TO0_INT_RAW = (1U << 12);  ///< SLC0_TOKEN0_1TO0_INT_RAW
        constexpr uint32_t SLC0_TX_OVF_INT_RAW = (1U << 11);  ///< SLC0_TX_OVF_INT_RAW
        constexpr uint32_t SLC0_RX_UDF_INT_RAW = (1U << 10);  ///< SLC0_RX_UDF_INT_RAW
        constexpr uint32_t SLC0_TX_START_INT_RAW = (1U << 9);  ///< SLC0_TX_START_INT_RAW
        constexpr uint32_t SLC0_RX_START_INT_RAW = (1U << 8);  ///< SLC0_RX_START_INT_RAW
        constexpr uint32_t FRHOST_BIT7_INT_RAW = (1U << 7);  ///< FRHOST_BIT7_INT_RAW
        constexpr uint32_t FRHOST_BIT6_INT_RAW = (1U << 6);  ///< FRHOST_BIT6_INT_RAW
        constexpr uint32_t FRHOST_BIT5_INT_RAW = (1U << 5);  ///< FRHOST_BIT5_INT_RAW
        constexpr uint32_t FRHOST_BIT4_INT_RAW = (1U << 4);  ///< FRHOST_BIT4_INT_RAW
        constexpr uint32_t FRHOST_BIT3_INT_RAW = (1U << 3);  ///< FRHOST_BIT3_INT_RAW
        constexpr uint32_t FRHOST_BIT2_INT_RAW = (1U << 2);  ///< FRHOST_BIT2_INT_RAW
        constexpr uint32_t FRHOST_BIT1_INT_RAW = (1U << 1);  ///< FRHOST_BIT1_INT_RAW
        constexpr uint32_t FRHOST_BIT0_INT_RAW = (1U << 0);  ///< FRHOST_BIT0_INT_RAW
    }

    /// 0INT_ST Register bits
    namespace 0int_st_bits {
        constexpr uint32_t SLC0_RX_QUICK_EOF_INT_ST = (1U << 26);  ///< SLC0_RX_QUICK_EOF_INT_ST
        constexpr uint32_t CMD_DTC_INT_ST = (1U << 25);  ///< CMD_DTC_INT_ST
        constexpr uint32_t SLC0_TX_ERR_EOF_INT_ST = (1U << 24);  ///< SLC0_TX_ERR_EOF_INT_ST
        constexpr uint32_t SLC0_WR_RETRY_DONE_INT_ST = (1U << 23);  ///< SLC0_WR_RETRY_DONE_INT_ST
        constexpr uint32_t SLC0_HOST_RD_ACK_INT_ST = (1U << 22);  ///< SLC0_HOST_RD_ACK_INT_ST
        constexpr uint32_t SLC0_TX_DSCR_EMPTY_INT_ST = (1U << 21);  ///< SLC0_TX_DSCR_EMPTY_INT_ST
        constexpr uint32_t SLC0_RX_DSCR_ERR_INT_ST = (1U << 20);  ///< SLC0_RX_DSCR_ERR_INT_ST
        constexpr uint32_t SLC0_TX_DSCR_ERR_INT_ST = (1U << 19);  ///< SLC0_TX_DSCR_ERR_INT_ST
        constexpr uint32_t SLC0_TOHOST_INT_ST = (1U << 18);  ///< SLC0_TOHOST_INT_ST
        constexpr uint32_t SLC0_RX_EOF_INT_ST = (1U << 17);  ///< SLC0_RX_EOF_INT_ST
        constexpr uint32_t SLC0_RX_DONE_INT_ST = (1U << 16);  ///< SLC0_RX_DONE_INT_ST
        constexpr uint32_t SLC0_TX_SUC_EOF_INT_ST = (1U << 15);  ///< SLC0_TX_SUC_EOF_INT_ST
        constexpr uint32_t SLC0_TX_DONE_INT_ST = (1U << 14);  ///< SLC0_TX_DONE_INT_ST
        constexpr uint32_t SLC0_TOKEN1_1TO0_INT_ST = (1U << 13);  ///< SLC0_TOKEN1_1TO0_INT_ST
        constexpr uint32_t SLC0_TOKEN0_1TO0_INT_ST = (1U << 12);  ///< SLC0_TOKEN0_1TO0_INT_ST
        constexpr uint32_t SLC0_TX_OVF_INT_ST = (1U << 11);  ///< SLC0_TX_OVF_INT_ST
        constexpr uint32_t SLC0_RX_UDF_INT_ST = (1U << 10);  ///< SLC0_RX_UDF_INT_ST
        constexpr uint32_t SLC0_TX_START_INT_ST = (1U << 9);  ///< SLC0_TX_START_INT_ST
        constexpr uint32_t SLC0_RX_START_INT_ST = (1U << 8);  ///< SLC0_RX_START_INT_ST
        constexpr uint32_t FRHOST_BIT7_INT_ST = (1U << 7);  ///< FRHOST_BIT7_INT_ST
        constexpr uint32_t FRHOST_BIT6_INT_ST = (1U << 6);  ///< FRHOST_BIT6_INT_ST
        constexpr uint32_t FRHOST_BIT5_INT_ST = (1U << 5);  ///< FRHOST_BIT5_INT_ST
        constexpr uint32_t FRHOST_BIT4_INT_ST = (1U << 4);  ///< FRHOST_BIT4_INT_ST
        constexpr uint32_t FRHOST_BIT3_INT_ST = (1U << 3);  ///< FRHOST_BIT3_INT_ST
        constexpr uint32_t FRHOST_BIT2_INT_ST = (1U << 2);  ///< FRHOST_BIT2_INT_ST
        constexpr uint32_t FRHOST_BIT1_INT_ST = (1U << 1);  ///< FRHOST_BIT1_INT_ST
        constexpr uint32_t FRHOST_BIT0_INT_ST = (1U << 0);  ///< FRHOST_BIT0_INT_ST
    }

    /// 0INT_ENA Register bits
    namespace 0int_ena_bits {
        constexpr uint32_t SLC0_RX_QUICK_EOF_INT_ENA = (1U << 26);  ///< SLC0_RX_QUICK_EOF_INT_ENA
        constexpr uint32_t CMD_DTC_INT_ENA = (1U << 25);  ///< CMD_DTC_INT_ENA
        constexpr uint32_t SLC0_TX_ERR_EOF_INT_ENA = (1U << 24);  ///< SLC0_TX_ERR_EOF_INT_ENA
        constexpr uint32_t SLC0_WR_RETRY_DONE_INT_ENA = (1U << 23);  ///< SLC0_WR_RETRY_DONE_INT_ENA
        constexpr uint32_t SLC0_HOST_RD_ACK_INT_ENA = (1U << 22);  ///< SLC0_HOST_RD_ACK_INT_ENA
        constexpr uint32_t SLC0_TX_DSCR_EMPTY_INT_ENA = (1U << 21);  ///< SLC0_TX_DSCR_EMPTY_INT_ENA
        constexpr uint32_t SLC0_RX_DSCR_ERR_INT_ENA = (1U << 20);  ///< SLC0_RX_DSCR_ERR_INT_ENA
        constexpr uint32_t SLC0_TX_DSCR_ERR_INT_ENA = (1U << 19);  ///< SLC0_TX_DSCR_ERR_INT_ENA
        constexpr uint32_t SLC0_TOHOST_INT_ENA = (1U << 18);  ///< SLC0_TOHOST_INT_ENA
        constexpr uint32_t SLC0_RX_EOF_INT_ENA = (1U << 17);  ///< SLC0_RX_EOF_INT_ENA
        constexpr uint32_t SLC0_RX_DONE_INT_ENA = (1U << 16);  ///< SLC0_RX_DONE_INT_ENA
        constexpr uint32_t SLC0_TX_SUC_EOF_INT_ENA = (1U << 15);  ///< SLC0_TX_SUC_EOF_INT_ENA
        constexpr uint32_t SLC0_TX_DONE_INT_ENA = (1U << 14);  ///< SLC0_TX_DONE_INT_ENA
        constexpr uint32_t SLC0_TOKEN1_1TO0_INT_ENA = (1U << 13);  ///< SLC0_TOKEN1_1TO0_INT_ENA
        constexpr uint32_t SLC0_TOKEN0_1TO0_INT_ENA = (1U << 12);  ///< SLC0_TOKEN0_1TO0_INT_ENA
        constexpr uint32_t SLC0_TX_OVF_INT_ENA = (1U << 11);  ///< SLC0_TX_OVF_INT_ENA
        constexpr uint32_t SLC0_RX_UDF_INT_ENA = (1U << 10);  ///< SLC0_RX_UDF_INT_ENA
        constexpr uint32_t SLC0_TX_START_INT_ENA = (1U << 9);  ///< SLC0_TX_START_INT_ENA
        constexpr uint32_t SLC0_RX_START_INT_ENA = (1U << 8);  ///< SLC0_RX_START_INT_ENA
        constexpr uint32_t FRHOST_BIT7_INT_ENA = (1U << 7);  ///< FRHOST_BIT7_INT_ENA
        constexpr uint32_t FRHOST_BIT6_INT_ENA = (1U << 6);  ///< FRHOST_BIT6_INT_ENA
        constexpr uint32_t FRHOST_BIT5_INT_ENA = (1U << 5);  ///< FRHOST_BIT5_INT_ENA
        constexpr uint32_t FRHOST_BIT4_INT_ENA = (1U << 4);  ///< FRHOST_BIT4_INT_ENA
        constexpr uint32_t FRHOST_BIT3_INT_ENA = (1U << 3);  ///< FRHOST_BIT3_INT_ENA
        constexpr uint32_t FRHOST_BIT2_INT_ENA = (1U << 2);  ///< FRHOST_BIT2_INT_ENA
        constexpr uint32_t FRHOST_BIT1_INT_ENA = (1U << 1);  ///< FRHOST_BIT1_INT_ENA
        constexpr uint32_t FRHOST_BIT0_INT_ENA = (1U << 0);  ///< FRHOST_BIT0_INT_ENA
    }

    /// 0INT_CLR Register bits
    namespace 0int_clr_bits {
        constexpr uint32_t SLC0_RX_QUICK_EOF_INT_CLR = (1U << 26);  ///< SLC0_RX_QUICK_EOF_INT_CLR
        constexpr uint32_t CMD_DTC_INT_CLR = (1U << 25);  ///< CMD_DTC_INT_CLR
        constexpr uint32_t SLC0_TX_ERR_EOF_INT_CLR = (1U << 24);  ///< SLC0_TX_ERR_EOF_INT_CLR
        constexpr uint32_t SLC0_WR_RETRY_DONE_INT_CLR = (1U << 23);  ///< SLC0_WR_RETRY_DONE_INT_CLR
        constexpr uint32_t SLC0_HOST_RD_ACK_INT_CLR = (1U << 22);  ///< SLC0_HOST_RD_ACK_INT_CLR
        constexpr uint32_t SLC0_TX_DSCR_EMPTY_INT_CLR = (1U << 21);  ///< SLC0_TX_DSCR_EMPTY_INT_CLR
        constexpr uint32_t SLC0_RX_DSCR_ERR_INT_CLR = (1U << 20);  ///< SLC0_RX_DSCR_ERR_INT_CLR
        constexpr uint32_t SLC0_TX_DSCR_ERR_INT_CLR = (1U << 19);  ///< SLC0_TX_DSCR_ERR_INT_CLR
        constexpr uint32_t SLC0_TOHOST_INT_CLR = (1U << 18);  ///< SLC0_TOHOST_INT_CLR
        constexpr uint32_t SLC0_RX_EOF_INT_CLR = (1U << 17);  ///< SLC0_RX_EOF_INT_CLR
        constexpr uint32_t SLC0_RX_DONE_INT_CLR = (1U << 16);  ///< SLC0_RX_DONE_INT_CLR
        constexpr uint32_t SLC0_TX_SUC_EOF_INT_CLR = (1U << 15);  ///< SLC0_TX_SUC_EOF_INT_CLR
        constexpr uint32_t SLC0_TX_DONE_INT_CLR = (1U << 14);  ///< SLC0_TX_DONE_INT_CLR
        constexpr uint32_t SLC0_TOKEN1_1TO0_INT_CLR = (1U << 13);  ///< SLC0_TOKEN1_1TO0_INT_CLR
        constexpr uint32_t SLC0_TOKEN0_1TO0_INT_CLR = (1U << 12);  ///< SLC0_TOKEN0_1TO0_INT_CLR
        constexpr uint32_t SLC0_TX_OVF_INT_CLR = (1U << 11);  ///< SLC0_TX_OVF_INT_CLR
        constexpr uint32_t SLC0_RX_UDF_INT_CLR = (1U << 10);  ///< SLC0_RX_UDF_INT_CLR
        constexpr uint32_t SLC0_TX_START_INT_CLR = (1U << 9);  ///< SLC0_TX_START_INT_CLR
        constexpr uint32_t SLC0_RX_START_INT_CLR = (1U << 8);  ///< SLC0_RX_START_INT_CLR
        constexpr uint32_t FRHOST_BIT7_INT_CLR = (1U << 7);  ///< FRHOST_BIT7_INT_CLR
        constexpr uint32_t FRHOST_BIT6_INT_CLR = (1U << 6);  ///< FRHOST_BIT6_INT_CLR
        constexpr uint32_t FRHOST_BIT5_INT_CLR = (1U << 5);  ///< FRHOST_BIT5_INT_CLR
        constexpr uint32_t FRHOST_BIT4_INT_CLR = (1U << 4);  ///< FRHOST_BIT4_INT_CLR
        constexpr uint32_t FRHOST_BIT3_INT_CLR = (1U << 3);  ///< FRHOST_BIT3_INT_CLR
        constexpr uint32_t FRHOST_BIT2_INT_CLR = (1U << 2);  ///< FRHOST_BIT2_INT_CLR
        constexpr uint32_t FRHOST_BIT1_INT_CLR = (1U << 1);  ///< FRHOST_BIT1_INT_CLR
        constexpr uint32_t FRHOST_BIT0_INT_CLR = (1U << 0);  ///< FRHOST_BIT0_INT_CLR
    }

    /// 1INT_RAW Register bits
    namespace 1int_raw_bits {
        constexpr uint32_t SLC1_TX_ERR_EOF_INT_RAW = (1U << 24);  ///< SLC1_TX_ERR_EOF_INT_RAW
        constexpr uint32_t SLC1_WR_RETRY_DONE_INT_RAW = (1U << 23);  ///< SLC1_WR_RETRY_DONE_INT_RAW
        constexpr uint32_t SLC1_HOST_RD_ACK_INT_RAW = (1U << 22);  ///< SLC1_HOST_RD_ACK_INT_RAW
        constexpr uint32_t SLC1_TX_DSCR_EMPTY_INT_RAW = (1U << 21);  ///< SLC1_TX_DSCR_EMPTY_INT_RAW
        constexpr uint32_t SLC1_RX_DSCR_ERR_INT_RAW = (1U << 20);  ///< SLC1_RX_DSCR_ERR_INT_RAW
        constexpr uint32_t SLC1_TX_DSCR_ERR_INT_RAW = (1U << 19);  ///< SLC1_TX_DSCR_ERR_INT_RAW
        constexpr uint32_t SLC1_TOHOST_INT_RAW = (1U << 18);  ///< SLC1_TOHOST_INT_RAW
        constexpr uint32_t SLC1_RX_EOF_INT_RAW = (1U << 17);  ///< SLC1_RX_EOF_INT_RAW
        constexpr uint32_t SLC1_RX_DONE_INT_RAW = (1U << 16);  ///< SLC1_RX_DONE_INT_RAW
        constexpr uint32_t SLC1_TX_SUC_EOF_INT_RAW = (1U << 15);  ///< SLC1_TX_SUC_EOF_INT_RAW
        constexpr uint32_t SLC1_TX_DONE_INT_RAW = (1U << 14);  ///< SLC1_TX_DONE_INT_RAW
        constexpr uint32_t SLC1_TOKEN1_1TO0_INT_RAW = (1U << 13);  ///< SLC1_TOKEN1_1TO0_INT_RAW
        constexpr uint32_t SLC1_TOKEN0_1TO0_INT_RAW = (1U << 12);  ///< SLC1_TOKEN0_1TO0_INT_RAW
        constexpr uint32_t SLC1_TX_OVF_INT_RAW = (1U << 11);  ///< SLC1_TX_OVF_INT_RAW
        constexpr uint32_t SLC1_RX_UDF_INT_RAW = (1U << 10);  ///< SLC1_RX_UDF_INT_RAW
        constexpr uint32_t SLC1_TX_START_INT_RAW = (1U << 9);  ///< SLC1_TX_START_INT_RAW
        constexpr uint32_t SLC1_RX_START_INT_RAW = (1U << 8);  ///< SLC1_RX_START_INT_RAW
        constexpr uint32_t FRHOST_BIT15_INT_RAW = (1U << 7);  ///< FRHOST_BIT15_INT_RAW
        constexpr uint32_t FRHOST_BIT14_INT_RAW = (1U << 6);  ///< FRHOST_BIT14_INT_RAW
        constexpr uint32_t FRHOST_BIT13_INT_RAW = (1U << 5);  ///< FRHOST_BIT13_INT_RAW
        constexpr uint32_t FRHOST_BIT12_INT_RAW = (1U << 4);  ///< FRHOST_BIT12_INT_RAW
        constexpr uint32_t FRHOST_BIT11_INT_RAW = (1U << 3);  ///< FRHOST_BIT11_INT_RAW
        constexpr uint32_t FRHOST_BIT10_INT_RAW = (1U << 2);  ///< FRHOST_BIT10_INT_RAW
        constexpr uint32_t FRHOST_BIT9_INT_RAW = (1U << 1);  ///< FRHOST_BIT9_INT_RAW
        constexpr uint32_t FRHOST_BIT8_INT_RAW = (1U << 0);  ///< FRHOST_BIT8_INT_RAW
    }

    /// 1INT_ST Register bits
    namespace 1int_st_bits {
        constexpr uint32_t SLC1_TX_ERR_EOF_INT_ST = (1U << 24);  ///< SLC1_TX_ERR_EOF_INT_ST
        constexpr uint32_t SLC1_WR_RETRY_DONE_INT_ST = (1U << 23);  ///< SLC1_WR_RETRY_DONE_INT_ST
        constexpr uint32_t SLC1_HOST_RD_ACK_INT_ST = (1U << 22);  ///< SLC1_HOST_RD_ACK_INT_ST
        constexpr uint32_t SLC1_TX_DSCR_EMPTY_INT_ST = (1U << 21);  ///< SLC1_TX_DSCR_EMPTY_INT_ST
        constexpr uint32_t SLC1_RX_DSCR_ERR_INT_ST = (1U << 20);  ///< SLC1_RX_DSCR_ERR_INT_ST
        constexpr uint32_t SLC1_TX_DSCR_ERR_INT_ST = (1U << 19);  ///< SLC1_TX_DSCR_ERR_INT_ST
        constexpr uint32_t SLC1_TOHOST_INT_ST = (1U << 18);  ///< SLC1_TOHOST_INT_ST
        constexpr uint32_t SLC1_RX_EOF_INT_ST = (1U << 17);  ///< SLC1_RX_EOF_INT_ST
        constexpr uint32_t SLC1_RX_DONE_INT_ST = (1U << 16);  ///< SLC1_RX_DONE_INT_ST
        constexpr uint32_t SLC1_TX_SUC_EOF_INT_ST = (1U << 15);  ///< SLC1_TX_SUC_EOF_INT_ST
        constexpr uint32_t SLC1_TX_DONE_INT_ST = (1U << 14);  ///< SLC1_TX_DONE_INT_ST
        constexpr uint32_t SLC1_TOKEN1_1TO0_INT_ST = (1U << 13);  ///< SLC1_TOKEN1_1TO0_INT_ST
        constexpr uint32_t SLC1_TOKEN0_1TO0_INT_ST = (1U << 12);  ///< SLC1_TOKEN0_1TO0_INT_ST
        constexpr uint32_t SLC1_TX_OVF_INT_ST = (1U << 11);  ///< SLC1_TX_OVF_INT_ST
        constexpr uint32_t SLC1_RX_UDF_INT_ST = (1U << 10);  ///< SLC1_RX_UDF_INT_ST
        constexpr uint32_t SLC1_TX_START_INT_ST = (1U << 9);  ///< SLC1_TX_START_INT_ST
        constexpr uint32_t SLC1_RX_START_INT_ST = (1U << 8);  ///< SLC1_RX_START_INT_ST
        constexpr uint32_t FRHOST_BIT15_INT_ST = (1U << 7);  ///< FRHOST_BIT15_INT_ST
        constexpr uint32_t FRHOST_BIT14_INT_ST = (1U << 6);  ///< FRHOST_BIT14_INT_ST
        constexpr uint32_t FRHOST_BIT13_INT_ST = (1U << 5);  ///< FRHOST_BIT13_INT_ST
        constexpr uint32_t FRHOST_BIT12_INT_ST = (1U << 4);  ///< FRHOST_BIT12_INT_ST
        constexpr uint32_t FRHOST_BIT11_INT_ST = (1U << 3);  ///< FRHOST_BIT11_INT_ST
        constexpr uint32_t FRHOST_BIT10_INT_ST = (1U << 2);  ///< FRHOST_BIT10_INT_ST
        constexpr uint32_t FRHOST_BIT9_INT_ST = (1U << 1);  ///< FRHOST_BIT9_INT_ST
        constexpr uint32_t FRHOST_BIT8_INT_ST = (1U << 0);  ///< FRHOST_BIT8_INT_ST
    }

    /// 1INT_ENA Register bits
    namespace 1int_ena_bits {
        constexpr uint32_t SLC1_TX_ERR_EOF_INT_ENA = (1U << 24);  ///< SLC1_TX_ERR_EOF_INT_ENA
        constexpr uint32_t SLC1_WR_RETRY_DONE_INT_ENA = (1U << 23);  ///< SLC1_WR_RETRY_DONE_INT_ENA
        constexpr uint32_t SLC1_HOST_RD_ACK_INT_ENA = (1U << 22);  ///< SLC1_HOST_RD_ACK_INT_ENA
        constexpr uint32_t SLC1_TX_DSCR_EMPTY_INT_ENA = (1U << 21);  ///< SLC1_TX_DSCR_EMPTY_INT_ENA
        constexpr uint32_t SLC1_RX_DSCR_ERR_INT_ENA = (1U << 20);  ///< SLC1_RX_DSCR_ERR_INT_ENA
        constexpr uint32_t SLC1_TX_DSCR_ERR_INT_ENA = (1U << 19);  ///< SLC1_TX_DSCR_ERR_INT_ENA
        constexpr uint32_t SLC1_TOHOST_INT_ENA = (1U << 18);  ///< SLC1_TOHOST_INT_ENA
        constexpr uint32_t SLC1_RX_EOF_INT_ENA = (1U << 17);  ///< SLC1_RX_EOF_INT_ENA
        constexpr uint32_t SLC1_RX_DONE_INT_ENA = (1U << 16);  ///< SLC1_RX_DONE_INT_ENA
        constexpr uint32_t SLC1_TX_SUC_EOF_INT_ENA = (1U << 15);  ///< SLC1_TX_SUC_EOF_INT_ENA
        constexpr uint32_t SLC1_TX_DONE_INT_ENA = (1U << 14);  ///< SLC1_TX_DONE_INT_ENA
        constexpr uint32_t SLC1_TOKEN1_1TO0_INT_ENA = (1U << 13);  ///< SLC1_TOKEN1_1TO0_INT_ENA
        constexpr uint32_t SLC1_TOKEN0_1TO0_INT_ENA = (1U << 12);  ///< SLC1_TOKEN0_1TO0_INT_ENA
        constexpr uint32_t SLC1_TX_OVF_INT_ENA = (1U << 11);  ///< SLC1_TX_OVF_INT_ENA
        constexpr uint32_t SLC1_RX_UDF_INT_ENA = (1U << 10);  ///< SLC1_RX_UDF_INT_ENA
        constexpr uint32_t SLC1_TX_START_INT_ENA = (1U << 9);  ///< SLC1_TX_START_INT_ENA
        constexpr uint32_t SLC1_RX_START_INT_ENA = (1U << 8);  ///< SLC1_RX_START_INT_ENA
        constexpr uint32_t FRHOST_BIT15_INT_ENA = (1U << 7);  ///< FRHOST_BIT15_INT_ENA
        constexpr uint32_t FRHOST_BIT14_INT_ENA = (1U << 6);  ///< FRHOST_BIT14_INT_ENA
        constexpr uint32_t FRHOST_BIT13_INT_ENA = (1U << 5);  ///< FRHOST_BIT13_INT_ENA
        constexpr uint32_t FRHOST_BIT12_INT_ENA = (1U << 4);  ///< FRHOST_BIT12_INT_ENA
        constexpr uint32_t FRHOST_BIT11_INT_ENA = (1U << 3);  ///< FRHOST_BIT11_INT_ENA
        constexpr uint32_t FRHOST_BIT10_INT_ENA = (1U << 2);  ///< FRHOST_BIT10_INT_ENA
        constexpr uint32_t FRHOST_BIT9_INT_ENA = (1U << 1);  ///< FRHOST_BIT9_INT_ENA
        constexpr uint32_t FRHOST_BIT8_INT_ENA = (1U << 0);  ///< FRHOST_BIT8_INT_ENA
    }

    /// 1INT_CLR Register bits
    namespace 1int_clr_bits {
        constexpr uint32_t SLC1_TX_ERR_EOF_INT_CLR = (1U << 24);  ///< SLC1_TX_ERR_EOF_INT_CLR
        constexpr uint32_t SLC1_WR_RETRY_DONE_INT_CLR = (1U << 23);  ///< SLC1_WR_RETRY_DONE_INT_CLR
        constexpr uint32_t SLC1_HOST_RD_ACK_INT_CLR = (1U << 22);  ///< SLC1_HOST_RD_ACK_INT_CLR
        constexpr uint32_t SLC1_TX_DSCR_EMPTY_INT_CLR = (1U << 21);  ///< SLC1_TX_DSCR_EMPTY_INT_CLR
        constexpr uint32_t SLC1_RX_DSCR_ERR_INT_CLR = (1U << 20);  ///< SLC1_RX_DSCR_ERR_INT_CLR
        constexpr uint32_t SLC1_TX_DSCR_ERR_INT_CLR = (1U << 19);  ///< SLC1_TX_DSCR_ERR_INT_CLR
        constexpr uint32_t SLC1_TOHOST_INT_CLR = (1U << 18);  ///< SLC1_TOHOST_INT_CLR
        constexpr uint32_t SLC1_RX_EOF_INT_CLR = (1U << 17);  ///< SLC1_RX_EOF_INT_CLR
        constexpr uint32_t SLC1_RX_DONE_INT_CLR = (1U << 16);  ///< SLC1_RX_DONE_INT_CLR
        constexpr uint32_t SLC1_TX_SUC_EOF_INT_CLR = (1U << 15);  ///< SLC1_TX_SUC_EOF_INT_CLR
        constexpr uint32_t SLC1_TX_DONE_INT_CLR = (1U << 14);  ///< SLC1_TX_DONE_INT_CLR
        constexpr uint32_t SLC1_TOKEN1_1TO0_INT_CLR = (1U << 13);  ///< SLC1_TOKEN1_1TO0_INT_CLR
        constexpr uint32_t SLC1_TOKEN0_1TO0_INT_CLR = (1U << 12);  ///< SLC1_TOKEN0_1TO0_INT_CLR
        constexpr uint32_t SLC1_TX_OVF_INT_CLR = (1U << 11);  ///< SLC1_TX_OVF_INT_CLR
        constexpr uint32_t SLC1_RX_UDF_INT_CLR = (1U << 10);  ///< SLC1_RX_UDF_INT_CLR
        constexpr uint32_t SLC1_TX_START_INT_CLR = (1U << 9);  ///< SLC1_TX_START_INT_CLR
        constexpr uint32_t SLC1_RX_START_INT_CLR = (1U << 8);  ///< SLC1_RX_START_INT_CLR
        constexpr uint32_t FRHOST_BIT15_INT_CLR = (1U << 7);  ///< FRHOST_BIT15_INT_CLR
        constexpr uint32_t FRHOST_BIT14_INT_CLR = (1U << 6);  ///< FRHOST_BIT14_INT_CLR
        constexpr uint32_t FRHOST_BIT13_INT_CLR = (1U << 5);  ///< FRHOST_BIT13_INT_CLR
        constexpr uint32_t FRHOST_BIT12_INT_CLR = (1U << 4);  ///< FRHOST_BIT12_INT_CLR
        constexpr uint32_t FRHOST_BIT11_INT_CLR = (1U << 3);  ///< FRHOST_BIT11_INT_CLR
        constexpr uint32_t FRHOST_BIT10_INT_CLR = (1U << 2);  ///< FRHOST_BIT10_INT_CLR
        constexpr uint32_t FRHOST_BIT9_INT_CLR = (1U << 1);  ///< FRHOST_BIT9_INT_CLR
        constexpr uint32_t FRHOST_BIT8_INT_CLR = (1U << 0);  ///< FRHOST_BIT8_INT_CLR
    }

    /// RX_STATUS Register bits
    namespace rx_status_bits {
        constexpr uint32_t SLC1_RX_EMPTY = (1U << 17);  ///< SLC1_RX_EMPTY
        constexpr uint32_t SLC1_RX_FULL = (1U << 16);  ///< SLC1_RX_FULL
        constexpr uint32_t SLC0_RX_EMPTY = (1U << 1);  ///< SLC0_RX_EMPTY
        constexpr uint32_t SLC0_RX_FULL = (1U << 0);  ///< SLC0_RX_FULL
    }

    /// 0RXFIFO_PUSH Register bits
    namespace 0rxfifo_push_bits {
        constexpr uint32_t SLC0_RXFIFO_PUSH = (1U << 16);  ///< SLC0_RXFIFO_PUSH
        constexpr uint32_t SLC0_RXFIFO_WDATA = (9 << 0);  ///< SLC0_RXFIFO_WDATA
    }

    /// 1RXFIFO_PUSH Register bits
    namespace 1rxfifo_push_bits {
        constexpr uint32_t SLC1_RXFIFO_PUSH = (1U << 16);  ///< SLC1_RXFIFO_PUSH
        constexpr uint32_t SLC1_RXFIFO_WDATA = (9 << 0);  ///< SLC1_RXFIFO_WDATA
    }

    /// TX_STATUS Register bits
    namespace tx_status_bits {
        constexpr uint32_t SLC1_TX_EMPTY = (1U << 17);  ///< SLC1_TX_EMPTY
        constexpr uint32_t SLC1_TX_FULL = (1U << 16);  ///< SLC1_TX_FULL
        constexpr uint32_t SLC0_TX_EMPTY = (1U << 1);  ///< SLC0_TX_EMPTY
        constexpr uint32_t SLC0_TX_FULL = (1U << 0);  ///< SLC0_TX_FULL
    }

    /// 0TXFIFO_POP Register bits
    namespace 0txfifo_pop_bits {
        constexpr uint32_t SLC0_TXFIFO_POP = (1U << 16);  ///< SLC0_TXFIFO_POP
        constexpr uint32_t SLC0_TXFIFO_RDATA = (11 << 0);  ///< SLC0_TXFIFO_RDATA
    }

    /// 1TXFIFO_POP Register bits
    namespace 1txfifo_pop_bits {
        constexpr uint32_t SLC1_TXFIFO_POP = (1U << 16);  ///< SLC1_TXFIFO_POP
        constexpr uint32_t SLC1_TXFIFO_RDATA = (11 << 0);  ///< SLC1_TXFIFO_RDATA
    }

    /// 0RX_LINK Register bits
    namespace 0rx_link_bits {
        constexpr uint32_t SLC0_RXLINK_PARK = (1U << 31);  ///< SLC0_RXLINK_PARK
        constexpr uint32_t SLC0_RXLINK_RESTART = (1U << 30);  ///< SLC0_RXLINK_RESTART
        constexpr uint32_t SLC0_RXLINK_START = (1U << 29);  ///< SLC0_RXLINK_START
        constexpr uint32_t SLC0_RXLINK_STOP = (1U << 28);  ///< SLC0_RXLINK_STOP
        constexpr uint32_t SLC0_RXLINK_ADDR = (20 << 0);  ///< SLC0_RXLINK_ADDR
    }

    /// 0TX_LINK Register bits
    namespace 0tx_link_bits {
        constexpr uint32_t SLC0_TXLINK_PARK = (1U << 31);  ///< SLC0_TXLINK_PARK
        constexpr uint32_t SLC0_TXLINK_RESTART = (1U << 30);  ///< SLC0_TXLINK_RESTART
        constexpr uint32_t SLC0_TXLINK_START = (1U << 29);  ///< SLC0_TXLINK_START
        constexpr uint32_t SLC0_TXLINK_STOP = (1U << 28);  ///< SLC0_TXLINK_STOP
        constexpr uint32_t SLC0_TXLINK_ADDR = (20 << 0);  ///< SLC0_TXLINK_ADDR
    }

    /// 1RX_LINK Register bits
    namespace 1rx_link_bits {
        constexpr uint32_t SLC1_RXLINK_PARK = (1U << 31);  ///< SLC1_RXLINK_PARK
        constexpr uint32_t SLC1_RXLINK_RESTART = (1U << 30);  ///< SLC1_RXLINK_RESTART
        constexpr uint32_t SLC1_RXLINK_START = (1U << 29);  ///< SLC1_RXLINK_START
        constexpr uint32_t SLC1_RXLINK_STOP = (1U << 28);  ///< SLC1_RXLINK_STOP
        constexpr uint32_t SLC1_BT_PACKET = (1U << 20);  ///< SLC1_BT_PACKET
        constexpr uint32_t SLC1_RXLINK_ADDR = (20 << 0);  ///< SLC1_RXLINK_ADDR
    }

    /// 1TX_LINK Register bits
    namespace 1tx_link_bits {
        constexpr uint32_t SLC1_TXLINK_PARK = (1U << 31);  ///< SLC1_TXLINK_PARK
        constexpr uint32_t SLC1_TXLINK_RESTART = (1U << 30);  ///< SLC1_TXLINK_RESTART
        constexpr uint32_t SLC1_TXLINK_START = (1U << 29);  ///< SLC1_TXLINK_START
        constexpr uint32_t SLC1_TXLINK_STOP = (1U << 28);  ///< SLC1_TXLINK_STOP
        constexpr uint32_t SLC1_TXLINK_ADDR = (20 << 0);  ///< SLC1_TXLINK_ADDR
    }

    /// INTVEC_TOHOST Register bits
    namespace intvec_tohost_bits {
        constexpr uint32_t SLC1_TOHOST_INTVEC = (8 << 16);  ///< SLC1_TOHOST_INTVEC
        constexpr uint32_t SLC0_TOHOST_INTVEC = (8 << 0);  ///< SLC0_TOHOST_INTVEC
    }

    /// 0TOKEN0 Register bits
    namespace 0token0_bits {
        constexpr uint32_t SLC0_TOKEN0 = (12 << 16);  ///< SLC0_TOKEN0
        constexpr uint32_t SLC0_TOKEN0_INC_MORE = (1U << 14);  ///< SLC0_TOKEN0_INC_MORE
        constexpr uint32_t SLC0_TOKEN0_INC = (1U << 13);  ///< SLC0_TOKEN0_INC
        constexpr uint32_t SLC0_TOKEN0_WR = (1U << 12);  ///< SLC0_TOKEN0_WR
        constexpr uint32_t SLC0_TOKEN0_WDATA = (12 << 0);  ///< SLC0_TOKEN0_WDATA
    }

    /// 0TOKEN1 Register bits
    namespace 0token1_bits {
        constexpr uint32_t SLC0_TOKEN1 = (12 << 16);  ///< SLC0_TOKEN1
        constexpr uint32_t SLC0_TOKEN1_INC_MORE = (1U << 14);  ///< SLC0_TOKEN1_INC_MORE
        constexpr uint32_t SLC0_TOKEN1_INC = (1U << 13);  ///< SLC0_TOKEN1_INC
        constexpr uint32_t SLC0_TOKEN1_WR = (1U << 12);  ///< SLC0_TOKEN1_WR
        constexpr uint32_t SLC0_TOKEN1_WDATA = (12 << 0);  ///< SLC0_TOKEN1_WDATA
    }

    /// 1TOKEN0 Register bits
    namespace 1token0_bits {
        constexpr uint32_t SLC1_TOKEN0 = (12 << 16);  ///< SLC1_TOKEN0
        constexpr uint32_t SLC1_TOKEN0_INC_MORE = (1U << 14);  ///< SLC1_TOKEN0_INC_MORE
        constexpr uint32_t SLC1_TOKEN0_INC = (1U << 13);  ///< SLC1_TOKEN0_INC
        constexpr uint32_t SLC1_TOKEN0_WR = (1U << 12);  ///< SLC1_TOKEN0_WR
        constexpr uint32_t SLC1_TOKEN0_WDATA = (12 << 0);  ///< SLC1_TOKEN0_WDATA
    }

    /// 1TOKEN1 Register bits
    namespace 1token1_bits {
        constexpr uint32_t SLC1_TOKEN1 = (12 << 16);  ///< SLC1_TOKEN1
        constexpr uint32_t SLC1_TOKEN1_INC_MORE = (1U << 14);  ///< SLC1_TOKEN1_INC_MORE
        constexpr uint32_t SLC1_TOKEN1_INC = (1U << 13);  ///< SLC1_TOKEN1_INC
        constexpr uint32_t SLC1_TOKEN1_WR = (1U << 12);  ///< SLC1_TOKEN1_WR
        constexpr uint32_t SLC1_TOKEN1_WDATA = (12 << 0);  ///< SLC1_TOKEN1_WDATA
    }

    /// CONF1 Register bits
    namespace conf1_bits {
        constexpr uint32_t CLK_EN = (1U << 22);  ///< CLK_EN
        constexpr uint32_t SLC1_RX_STITCH_EN = (1U << 21);  ///< SLC1_RX_STITCH_EN
        constexpr uint32_t SLC1_TX_STITCH_EN = (1U << 20);  ///< SLC1_TX_STITCH_EN
        constexpr uint32_t HOST_INT_LEVEL_SEL = (1U << 19);  ///< HOST_INT_LEVEL_SEL
        constexpr uint32_t SLC1_RX_CHECK_SUM_EN = (1U << 18);  ///< SLC1_RX_CHECK_SUM_EN
        constexpr uint32_t SLC1_TX_CHECK_SUM_EN = (1U << 17);  ///< SLC1_TX_CHECK_SUM_EN
        constexpr uint32_t SLC1_CHECK_OWNER = (1U << 16);  ///< SLC1_CHECK_OWNER
        constexpr uint32_t SLC0_RX_STITCH_EN = (1U << 6);  ///< SLC0_RX_STITCH_EN
        constexpr uint32_t SLC0_TX_STITCH_EN = (1U << 5);  ///< SLC0_TX_STITCH_EN
        constexpr uint32_t SLC0_LEN_AUTO_CLR = (1U << 4);  ///< SLC0_LEN_AUTO_CLR
        constexpr uint32_t CMD_HOLD_EN = (1U << 3);  ///< CMD_HOLD_EN
        constexpr uint32_t SLC0_RX_CHECK_SUM_EN = (1U << 2);  ///< SLC0_RX_CHECK_SUM_EN
        constexpr uint32_t SLC0_TX_CHECK_SUM_EN = (1U << 1);  ///< SLC0_TX_CHECK_SUM_EN
        constexpr uint32_t SLC0_CHECK_OWNER = (1U << 0);  ///< SLC0_CHECK_OWNER
    }

    /// 0_STATE0 Register bits
    namespace 0_state0_bits {
        constexpr uint32_t SLC0_STATE0 = (32 << 0);  ///< SLC0_STATE0
    }

    /// 0_STATE1 Register bits
    namespace 0_state1_bits {
        constexpr uint32_t SLC0_STATE1 = (32 << 0);  ///< SLC0_STATE1
    }

    /// 1_STATE0 Register bits
    namespace 1_state0_bits {
        constexpr uint32_t SLC1_STATE0 = (32 << 0);  ///< SLC1_STATE0
    }

    /// 1_STATE1 Register bits
    namespace 1_state1_bits {
        constexpr uint32_t SLC1_STATE1 = (32 << 0);  ///< SLC1_STATE1
    }

    /// BRIDGE_CONF Register bits
    namespace bridge_conf_bits {
        constexpr uint32_t TX_PUSH_IDLE_NUM = (16 << 16);  ///< TX_PUSH_IDLE_NUM
        constexpr uint32_t SLC1_TX_DUMMY_MODE = (1U << 14);  ///< SLC1_TX_DUMMY_MODE
        constexpr uint32_t HDA_MAP_128K = (1U << 13);  ///< HDA_MAP_128K
        constexpr uint32_t SLC0_TX_DUMMY_MODE = (1U << 12);  ///< SLC0_TX_DUMMY_MODE
        constexpr uint32_t FIFO_MAP_ENA = (4 << 8);  ///< FIFO_MAP_ENA
        constexpr uint32_t TXEOF_ENA = (6 << 0);  ///< TXEOF_ENA
    }

    /// 0_TO_EOF_DES_ADDR Register bits
    namespace 0_to_eof_des_addr_bits {
        constexpr uint32_t SLC0_TO_EOF_DES_ADDR = (32 << 0);  ///< SLC0_TO_EOF_DES_ADDR
    }

    /// 0_TX_EOF_DES_ADDR Register bits
    namespace 0_tx_eof_des_addr_bits {
        constexpr uint32_t SLC0_TX_SUC_EOF_DES_ADDR = (32 << 0);  ///< SLC0_TX_SUC_EOF_DES_ADDR
    }

    /// 0_TO_EOF_BFR_DES_ADDR Register bits
    namespace 0_to_eof_bfr_des_addr_bits {
        constexpr uint32_t SLC0_TO_EOF_BFR_DES_ADDR = (32 << 0);  ///< SLC0_TO_EOF_BFR_DES_ADDR
    }

    /// 1_TO_EOF_DES_ADDR Register bits
    namespace 1_to_eof_des_addr_bits {
        constexpr uint32_t SLC1_TO_EOF_DES_ADDR = (32 << 0);  ///< SLC1_TO_EOF_DES_ADDR
    }

    /// 1_TX_EOF_DES_ADDR Register bits
    namespace 1_tx_eof_des_addr_bits {
        constexpr uint32_t SLC1_TX_SUC_EOF_DES_ADDR = (32 << 0);  ///< SLC1_TX_SUC_EOF_DES_ADDR
    }

    /// 1_TO_EOF_BFR_DES_ADDR Register bits
    namespace 1_to_eof_bfr_des_addr_bits {
        constexpr uint32_t SLC1_TO_EOF_BFR_DES_ADDR = (32 << 0);  ///< SLC1_TO_EOF_BFR_DES_ADDR
    }

    /// AHB_TEST Register bits
    namespace ahb_test_bits {
        constexpr uint32_t AHB_TESTADDR = (2 << 4);  ///< AHB_TESTADDR
        constexpr uint32_t AHB_TESTMODE = (3 << 0);  ///< AHB_TESTMODE
    }

    /// SDIO_ST Register bits
    namespace sdio_st_bits {
        constexpr uint32_t FUNC2_ACC_STATE = (5 << 24);  ///< FUNC2_ACC_STATE
        constexpr uint32_t FUNC1_ACC_STATE = (5 << 16);  ///< FUNC1_ACC_STATE
        constexpr uint32_t BUS_ST = (3 << 12);  ///< BUS_ST
        constexpr uint32_t SDIO_WAKEUP = (1U << 8);  ///< SDIO_WAKEUP
        constexpr uint32_t FUNC_ST = (4 << 4);  ///< FUNC_ST
        constexpr uint32_t CMD_ST = (3 << 0);  ///< CMD_ST
    }

    /// RX_DSCR_CONF Register bits
    namespace rx_dscr_conf_bits {
        constexpr uint32_t SLC1_RD_RETRY_THRESHOLD = (11 << 21);  ///< SLC1_RD_RETRY_THRESHOLD
        constexpr uint32_t SLC1_RX_FILL_EN = (1U << 20);  ///< SLC1_RX_FILL_EN
        constexpr uint32_t SLC1_RX_EOF_MODE = (1U << 19);  ///< SLC1_RX_EOF_MODE
        constexpr uint32_t SLC1_RX_FILL_MODE = (1U << 18);  ///< SLC1_RX_FILL_MODE
        constexpr uint32_t SLC1_INFOR_NO_REPLACE = (1U << 17);  ///< SLC1_INFOR_NO_REPLACE
        constexpr uint32_t SLC1_TOKEN_NO_REPLACE = (1U << 16);  ///< SLC1_TOKEN_NO_REPLACE
        constexpr uint32_t SLC0_RD_RETRY_THRESHOLD = (11 << 5);  ///< SLC0_RD_RETRY_THRESHOLD
        constexpr uint32_t SLC0_RX_FILL_EN = (1U << 4);  ///< SLC0_RX_FILL_EN
        constexpr uint32_t SLC0_RX_EOF_MODE = (1U << 3);  ///< SLC0_RX_EOF_MODE
        constexpr uint32_t SLC0_RX_FILL_MODE = (1U << 2);  ///< SLC0_RX_FILL_MODE
        constexpr uint32_t SLC0_INFOR_NO_REPLACE = (1U << 1);  ///< SLC0_INFOR_NO_REPLACE
        constexpr uint32_t SLC0_TOKEN_NO_REPLACE = (1U << 0);  ///< SLC0_TOKEN_NO_REPLACE
    }

    /// 0_TXLINK_DSCR Register bits
    namespace 0_txlink_dscr_bits {
        constexpr uint32_t SLC0_TXLINK_DSCR = (32 << 0);  ///< SLC0_TXLINK_DSCR
    }

    /// 0_TXLINK_DSCR_BF0 Register bits
    namespace 0_txlink_dscr_bf0_bits {
        constexpr uint32_t SLC0_TXLINK_DSCR_BF0 = (32 << 0);  ///< SLC0_TXLINK_DSCR_BF0
    }

    /// 0_TXLINK_DSCR_BF1 Register bits
    namespace 0_txlink_dscr_bf1_bits {
        constexpr uint32_t SLC0_TXLINK_DSCR_BF1 = (32 << 0);  ///< SLC0_TXLINK_DSCR_BF1
    }

    /// 0_RXLINK_DSCR Register bits
    namespace 0_rxlink_dscr_bits {
        constexpr uint32_t SLC0_RXLINK_DSCR = (32 << 0);  ///< SLC0_RXLINK_DSCR
    }

    /// 0_RXLINK_DSCR_BF0 Register bits
    namespace 0_rxlink_dscr_bf0_bits {
        constexpr uint32_t SLC0_RXLINK_DSCR_BF0 = (32 << 0);  ///< SLC0_RXLINK_DSCR_BF0
    }

    /// 0_RXLINK_DSCR_BF1 Register bits
    namespace 0_rxlink_dscr_bf1_bits {
        constexpr uint32_t SLC0_RXLINK_DSCR_BF1 = (32 << 0);  ///< SLC0_RXLINK_DSCR_BF1
    }

    /// 1_TXLINK_DSCR Register bits
    namespace 1_txlink_dscr_bits {
        constexpr uint32_t SLC1_TXLINK_DSCR = (32 << 0);  ///< SLC1_TXLINK_DSCR
    }

    /// 1_TXLINK_DSCR_BF0 Register bits
    namespace 1_txlink_dscr_bf0_bits {
        constexpr uint32_t SLC1_TXLINK_DSCR_BF0 = (32 << 0);  ///< SLC1_TXLINK_DSCR_BF0
    }

    /// 1_TXLINK_DSCR_BF1 Register bits
    namespace 1_txlink_dscr_bf1_bits {
        constexpr uint32_t SLC1_TXLINK_DSCR_BF1 = (32 << 0);  ///< SLC1_TXLINK_DSCR_BF1
    }

    /// 1_RXLINK_DSCR Register bits
    namespace 1_rxlink_dscr_bits {
        constexpr uint32_t SLC1_RXLINK_DSCR = (32 << 0);  ///< SLC1_RXLINK_DSCR
    }

    /// 1_RXLINK_DSCR_BF0 Register bits
    namespace 1_rxlink_dscr_bf0_bits {
        constexpr uint32_t SLC1_RXLINK_DSCR_BF0 = (32 << 0);  ///< SLC1_RXLINK_DSCR_BF0
    }

    /// 1_RXLINK_DSCR_BF1 Register bits
    namespace 1_rxlink_dscr_bf1_bits {
        constexpr uint32_t SLC1_RXLINK_DSCR_BF1 = (32 << 0);  ///< SLC1_RXLINK_DSCR_BF1
    }

    /// 0_TX_ERREOF_DES_ADDR Register bits
    namespace 0_tx_erreof_des_addr_bits {
        constexpr uint32_t SLC0_TX_ERR_EOF_DES_ADDR = (32 << 0);  ///< SLC0_TX_ERR_EOF_DES_ADDR
    }

    /// 1_TX_ERREOF_DES_ADDR Register bits
    namespace 1_tx_erreof_des_addr_bits {
        constexpr uint32_t SLC1_TX_ERR_EOF_DES_ADDR = (32 << 0);  ///< SLC1_TX_ERR_EOF_DES_ADDR
    }

    /// TOKEN_LAT Register bits
    namespace token_lat_bits {
        constexpr uint32_t SLC1_TOKEN = (12 << 16);  ///< SLC1_TOKEN
        constexpr uint32_t SLC0_TOKEN = (12 << 0);  ///< SLC0_TOKEN
    }

    /// TX_DSCR_CONF Register bits
    namespace tx_dscr_conf_bits {
        constexpr uint32_t WR_RETRY_THRESHOLD = (11 << 0);  ///< WR_RETRY_THRESHOLD
    }

    /// CMD_INFOR0 Register bits
    namespace cmd_infor0_bits {
        constexpr uint32_t CMD_CONTENT0 = (32 << 0);  ///< CMD_CONTENT0
    }

    /// CMD_INFOR1 Register bits
    namespace cmd_infor1_bits {
        constexpr uint32_t CMD_CONTENT1 = (32 << 0);  ///< CMD_CONTENT1
    }

    /// 0_LEN_CONF Register bits
    namespace 0_len_conf_bits {
        constexpr uint32_t SLC0_TX_NEW_PKT_IND = (1U << 28);  ///< SLC0_TX_NEW_PKT_IND
        constexpr uint32_t SLC0_RX_NEW_PKT_IND = (1U << 27);  ///< SLC0_RX_NEW_PKT_IND
        constexpr uint32_t SLC0_TX_GET_USED_DSCR = (1U << 26);  ///< SLC0_TX_GET_USED_DSCR
        constexpr uint32_t SLC0_RX_GET_USED_DSCR = (1U << 25);  ///< SLC0_RX_GET_USED_DSCR
        constexpr uint32_t SLC0_TX_PACKET_LOAD_EN = (1U << 24);  ///< SLC0_TX_PACKET_LOAD_EN
        constexpr uint32_t SLC0_RX_PACKET_LOAD_EN = (1U << 23);  ///< SLC0_RX_PACKET_LOAD_EN
        constexpr uint32_t SLC0_LEN_INC_MORE = (1U << 22);  ///< SLC0_LEN_INC_MORE
        constexpr uint32_t SLC0_LEN_INC = (1U << 21);  ///< SLC0_LEN_INC
        constexpr uint32_t SLC0_LEN_WR = (1U << 20);  ///< SLC0_LEN_WR
        constexpr uint32_t SLC0_LEN_WDATA = (20 << 0);  ///< SLC0_LEN_WDATA
    }

    /// 0_LENGTH Register bits
    namespace 0_length_bits {
        constexpr uint32_t SLC0_LEN = (20 << 0);  ///< SLC0_LEN
    }

    /// 0_TXPKT_H_DSCR Register bits
    namespace 0_txpkt_h_dscr_bits {
        constexpr uint32_t SLC0_TX_PKT_H_DSCR_ADDR = (32 << 0);  ///< SLC0_TX_PKT_H_DSCR_ADDR
    }

    /// 0_TXPKT_E_DSCR Register bits
    namespace 0_txpkt_e_dscr_bits {
        constexpr uint32_t SLC0_TX_PKT_E_DSCR_ADDR = (32 << 0);  ///< SLC0_TX_PKT_E_DSCR_ADDR
    }

    /// 0_RXPKT_H_DSCR Register bits
    namespace 0_rxpkt_h_dscr_bits {
        constexpr uint32_t SLC0_RX_PKT_H_DSCR_ADDR = (32 << 0);  ///< SLC0_RX_PKT_H_DSCR_ADDR
    }

    /// 0_RXPKT_E_DSCR Register bits
    namespace 0_rxpkt_e_dscr_bits {
        constexpr uint32_t SLC0_RX_PKT_E_DSCR_ADDR = (32 << 0);  ///< SLC0_RX_PKT_E_DSCR_ADDR
    }

    /// 0_TXPKTU_H_DSCR Register bits
    namespace 0_txpktu_h_dscr_bits {
        constexpr uint32_t SLC0_TX_PKT_START_DSCR_ADDR = (32 << 0);  ///< SLC0_TX_PKT_START_DSCR_ADDR
    }

    /// 0_TXPKTU_E_DSCR Register bits
    namespace 0_txpktu_e_dscr_bits {
        constexpr uint32_t SLC0_TX_PKT_END_DSCR_ADDR = (32 << 0);  ///< SLC0_TX_PKT_END_DSCR_ADDR
    }

    /// 0_RXPKTU_H_DSCR Register bits
    namespace 0_rxpktu_h_dscr_bits {
        constexpr uint32_t SLC0_RX_PKT_START_DSCR_ADDR = (32 << 0);  ///< SLC0_RX_PKT_START_DSCR_ADDR
    }

    /// 0_RXPKTU_E_DSCR Register bits
    namespace 0_rxpktu_e_dscr_bits {
        constexpr uint32_t SLC0_RX_PKT_END_DSCR_ADDR = (32 << 0);  ///< SLC0_RX_PKT_END_DSCR_ADDR
    }

    /// SEQ_POSITION Register bits
    namespace seq_position_bits {
        constexpr uint32_t SLC1_SEQ_POSITION = (8 << 8);  ///< SLC1_SEQ_POSITION
        constexpr uint32_t SLC0_SEQ_POSITION = (8 << 0);  ///< SLC0_SEQ_POSITION
    }

    /// 0_DSCR_REC_CONF Register bits
    namespace 0_dscr_rec_conf_bits {
        constexpr uint32_t SLC0_RX_DSCR_REC_LIM = (10 << 0);  ///< SLC0_RX_DSCR_REC_LIM
    }

    /// SDIO_CRC_ST0 Register bits
    namespace sdio_crc_st0_bits {
        constexpr uint32_t DAT3_CRC_ERR_CNT = (8 << 24);  ///< DAT3_CRC_ERR_CNT
        constexpr uint32_t DAT2_CRC_ERR_CNT = (8 << 16);  ///< DAT2_CRC_ERR_CNT
        constexpr uint32_t DAT1_CRC_ERR_CNT = (8 << 8);  ///< DAT1_CRC_ERR_CNT
        constexpr uint32_t DAT0_CRC_ERR_CNT = (8 << 0);  ///< DAT0_CRC_ERR_CNT
    }

    /// SDIO_CRC_ST1 Register bits
    namespace sdio_crc_st1_bits {
        constexpr uint32_t ERR_CNT_CLR = (1U << 31);  ///< ERR_CNT_CLR
        constexpr uint32_t CMD_CRC_ERR_CNT = (8 << 0);  ///< CMD_CRC_ERR_CNT
    }

    /// 0_EOF_START_DES Register bits
    namespace 0_eof_start_des_bits {
        constexpr uint32_t SLC0_EOF_START_DES_ADDR = (32 << 0);  ///< SLC0_EOF_START_DES_ADDR
    }

    /// 0_PUSH_DSCR_ADDR Register bits
    namespace 0_push_dscr_addr_bits {
        constexpr uint32_t SLC0_RX_PUSH_DSCR_ADDR = (32 << 0);  ///< SLC0_RX_PUSH_DSCR_ADDR
    }

    /// 0_DONE_DSCR_ADDR Register bits
    namespace 0_done_dscr_addr_bits {
        constexpr uint32_t SLC0_RX_DONE_DSCR_ADDR = (32 << 0);  ///< SLC0_RX_DONE_DSCR_ADDR
    }

    /// 0_SUB_START_DES Register bits
    namespace 0_sub_start_des_bits {
        constexpr uint32_t SLC0_SUB_PAC_START_DSCR_ADDR = (32 << 0);  ///< SLC0_SUB_PAC_START_DSCR_ADDR
    }

    /// 0_DSCR_CNT Register bits
    namespace 0_dscr_cnt_bits {
        constexpr uint32_t SLC0_RX_GET_EOF_OCC = (1U << 16);  ///< SLC0_RX_GET_EOF_OCC
        constexpr uint32_t SLC0_RX_DSCR_CNT_LAT = (10 << 0);  ///< SLC0_RX_DSCR_CNT_LAT
    }

    /// 0_LEN_LIM_CONF Register bits
    namespace 0_len_lim_conf_bits {
        constexpr uint32_t SLC0_LEN_LIM = (20 << 0);  ///< SLC0_LEN_LIM
    }

    /// 0INT_ST1 Register bits
    namespace 0int_st1_bits {
        constexpr uint32_t SLC0_RX_QUICK_EOF_INT_ST1 = (1U << 26);  ///< SLC0_RX_QUICK_EOF_INT_ST1
        constexpr uint32_t CMD_DTC_INT_ST1 = (1U << 25);  ///< CMD_DTC_INT_ST1
        constexpr uint32_t SLC0_TX_ERR_EOF_INT_ST1 = (1U << 24);  ///< SLC0_TX_ERR_EOF_INT_ST1
        constexpr uint32_t SLC0_WR_RETRY_DONE_INT_ST1 = (1U << 23);  ///< SLC0_WR_RETRY_DONE_INT_ST1
        constexpr uint32_t SLC0_HOST_RD_ACK_INT_ST1 = (1U << 22);  ///< SLC0_HOST_RD_ACK_INT_ST1
        constexpr uint32_t SLC0_TX_DSCR_EMPTY_INT_ST1 = (1U << 21);  ///< SLC0_TX_DSCR_EMPTY_INT_ST1
        constexpr uint32_t SLC0_RX_DSCR_ERR_INT_ST1 = (1U << 20);  ///< SLC0_RX_DSCR_ERR_INT_ST1
        constexpr uint32_t SLC0_TX_DSCR_ERR_INT_ST1 = (1U << 19);  ///< SLC0_TX_DSCR_ERR_INT_ST1
        constexpr uint32_t SLC0_TOHOST_INT_ST1 = (1U << 18);  ///< SLC0_TOHOST_INT_ST1
        constexpr uint32_t SLC0_RX_EOF_INT_ST1 = (1U << 17);  ///< SLC0_RX_EOF_INT_ST1
        constexpr uint32_t SLC0_RX_DONE_INT_ST1 = (1U << 16);  ///< SLC0_RX_DONE_INT_ST1
        constexpr uint32_t SLC0_TX_SUC_EOF_INT_ST1 = (1U << 15);  ///< SLC0_TX_SUC_EOF_INT_ST1
        constexpr uint32_t SLC0_TX_DONE_INT_ST1 = (1U << 14);  ///< SLC0_TX_DONE_INT_ST1
        constexpr uint32_t SLC0_TOKEN1_1TO0_INT_ST1 = (1U << 13);  ///< SLC0_TOKEN1_1TO0_INT_ST1
        constexpr uint32_t SLC0_TOKEN0_1TO0_INT_ST1 = (1U << 12);  ///< SLC0_TOKEN0_1TO0_INT_ST1
        constexpr uint32_t SLC0_TX_OVF_INT_ST1 = (1U << 11);  ///< SLC0_TX_OVF_INT_ST1
        constexpr uint32_t SLC0_RX_UDF_INT_ST1 = (1U << 10);  ///< SLC0_RX_UDF_INT_ST1
        constexpr uint32_t SLC0_TX_START_INT_ST1 = (1U << 9);  ///< SLC0_TX_START_INT_ST1
        constexpr uint32_t SLC0_RX_START_INT_ST1 = (1U << 8);  ///< SLC0_RX_START_INT_ST1
        constexpr uint32_t FRHOST_BIT7_INT_ST1 = (1U << 7);  ///< FRHOST_BIT7_INT_ST1
        constexpr uint32_t FRHOST_BIT6_INT_ST1 = (1U << 6);  ///< FRHOST_BIT6_INT_ST1
        constexpr uint32_t FRHOST_BIT5_INT_ST1 = (1U << 5);  ///< FRHOST_BIT5_INT_ST1
        constexpr uint32_t FRHOST_BIT4_INT_ST1 = (1U << 4);  ///< FRHOST_BIT4_INT_ST1
        constexpr uint32_t FRHOST_BIT3_INT_ST1 = (1U << 3);  ///< FRHOST_BIT3_INT_ST1
        constexpr uint32_t FRHOST_BIT2_INT_ST1 = (1U << 2);  ///< FRHOST_BIT2_INT_ST1
        constexpr uint32_t FRHOST_BIT1_INT_ST1 = (1U << 1);  ///< FRHOST_BIT1_INT_ST1
        constexpr uint32_t FRHOST_BIT0_INT_ST1 = (1U << 0);  ///< FRHOST_BIT0_INT_ST1
    }

    /// 0INT_ENA1 Register bits
    namespace 0int_ena1_bits {
        constexpr uint32_t SLC0_RX_QUICK_EOF_INT_ENA1 = (1U << 26);  ///< SLC0_RX_QUICK_EOF_INT_ENA1
        constexpr uint32_t CMD_DTC_INT_ENA1 = (1U << 25);  ///< CMD_DTC_INT_ENA1
        constexpr uint32_t SLC0_TX_ERR_EOF_INT_ENA1 = (1U << 24);  ///< SLC0_TX_ERR_EOF_INT_ENA1
        constexpr uint32_t SLC0_WR_RETRY_DONE_INT_ENA1 = (1U << 23);  ///< SLC0_WR_RETRY_DONE_INT_ENA1
        constexpr uint32_t SLC0_HOST_RD_ACK_INT_ENA1 = (1U << 22);  ///< SLC0_HOST_RD_ACK_INT_ENA1
        constexpr uint32_t SLC0_TX_DSCR_EMPTY_INT_ENA1 = (1U << 21);  ///< SLC0_TX_DSCR_EMPTY_INT_ENA1
        constexpr uint32_t SLC0_RX_DSCR_ERR_INT_ENA1 = (1U << 20);  ///< SLC0_RX_DSCR_ERR_INT_ENA1
        constexpr uint32_t SLC0_TX_DSCR_ERR_INT_ENA1 = (1U << 19);  ///< SLC0_TX_DSCR_ERR_INT_ENA1
        constexpr uint32_t SLC0_TOHOST_INT_ENA1 = (1U << 18);  ///< SLC0_TOHOST_INT_ENA1
        constexpr uint32_t SLC0_RX_EOF_INT_ENA1 = (1U << 17);  ///< SLC0_RX_EOF_INT_ENA1
        constexpr uint32_t SLC0_RX_DONE_INT_ENA1 = (1U << 16);  ///< SLC0_RX_DONE_INT_ENA1
        constexpr uint32_t SLC0_TX_SUC_EOF_INT_ENA1 = (1U << 15);  ///< SLC0_TX_SUC_EOF_INT_ENA1
        constexpr uint32_t SLC0_TX_DONE_INT_ENA1 = (1U << 14);  ///< SLC0_TX_DONE_INT_ENA1
        constexpr uint32_t SLC0_TOKEN1_1TO0_INT_ENA1 = (1U << 13);  ///< SLC0_TOKEN1_1TO0_INT_ENA1
        constexpr uint32_t SLC0_TOKEN0_1TO0_INT_ENA1 = (1U << 12);  ///< SLC0_TOKEN0_1TO0_INT_ENA1
        constexpr uint32_t SLC0_TX_OVF_INT_ENA1 = (1U << 11);  ///< SLC0_TX_OVF_INT_ENA1
        constexpr uint32_t SLC0_RX_UDF_INT_ENA1 = (1U << 10);  ///< SLC0_RX_UDF_INT_ENA1
        constexpr uint32_t SLC0_TX_START_INT_ENA1 = (1U << 9);  ///< SLC0_TX_START_INT_ENA1
        constexpr uint32_t SLC0_RX_START_INT_ENA1 = (1U << 8);  ///< SLC0_RX_START_INT_ENA1
        constexpr uint32_t FRHOST_BIT7_INT_ENA1 = (1U << 7);  ///< FRHOST_BIT7_INT_ENA1
        constexpr uint32_t FRHOST_BIT6_INT_ENA1 = (1U << 6);  ///< FRHOST_BIT6_INT_ENA1
        constexpr uint32_t FRHOST_BIT5_INT_ENA1 = (1U << 5);  ///< FRHOST_BIT5_INT_ENA1
        constexpr uint32_t FRHOST_BIT4_INT_ENA1 = (1U << 4);  ///< FRHOST_BIT4_INT_ENA1
        constexpr uint32_t FRHOST_BIT3_INT_ENA1 = (1U << 3);  ///< FRHOST_BIT3_INT_ENA1
        constexpr uint32_t FRHOST_BIT2_INT_ENA1 = (1U << 2);  ///< FRHOST_BIT2_INT_ENA1
        constexpr uint32_t FRHOST_BIT1_INT_ENA1 = (1U << 1);  ///< FRHOST_BIT1_INT_ENA1
        constexpr uint32_t FRHOST_BIT0_INT_ENA1 = (1U << 0);  ///< FRHOST_BIT0_INT_ENA1
    }

    /// 1INT_ST1 Register bits
    namespace 1int_st1_bits {
        constexpr uint32_t SLC1_TX_ERR_EOF_INT_ST1 = (1U << 24);  ///< SLC1_TX_ERR_EOF_INT_ST1
        constexpr uint32_t SLC1_WR_RETRY_DONE_INT_ST1 = (1U << 23);  ///< SLC1_WR_RETRY_DONE_INT_ST1
        constexpr uint32_t SLC1_HOST_RD_ACK_INT_ST1 = (1U << 22);  ///< SLC1_HOST_RD_ACK_INT_ST1
        constexpr uint32_t SLC1_TX_DSCR_EMPTY_INT_ST1 = (1U << 21);  ///< SLC1_TX_DSCR_EMPTY_INT_ST1
        constexpr uint32_t SLC1_RX_DSCR_ERR_INT_ST1 = (1U << 20);  ///< SLC1_RX_DSCR_ERR_INT_ST1
        constexpr uint32_t SLC1_TX_DSCR_ERR_INT_ST1 = (1U << 19);  ///< SLC1_TX_DSCR_ERR_INT_ST1
        constexpr uint32_t SLC1_TOHOST_INT_ST1 = (1U << 18);  ///< SLC1_TOHOST_INT_ST1
        constexpr uint32_t SLC1_RX_EOF_INT_ST1 = (1U << 17);  ///< SLC1_RX_EOF_INT_ST1
        constexpr uint32_t SLC1_RX_DONE_INT_ST1 = (1U << 16);  ///< SLC1_RX_DONE_INT_ST1
        constexpr uint32_t SLC1_TX_SUC_EOF_INT_ST1 = (1U << 15);  ///< SLC1_TX_SUC_EOF_INT_ST1
        constexpr uint32_t SLC1_TX_DONE_INT_ST1 = (1U << 14);  ///< SLC1_TX_DONE_INT_ST1
        constexpr uint32_t SLC1_TOKEN1_1TO0_INT_ST1 = (1U << 13);  ///< SLC1_TOKEN1_1TO0_INT_ST1
        constexpr uint32_t SLC1_TOKEN0_1TO0_INT_ST1 = (1U << 12);  ///< SLC1_TOKEN0_1TO0_INT_ST1
        constexpr uint32_t SLC1_TX_OVF_INT_ST1 = (1U << 11);  ///< SLC1_TX_OVF_INT_ST1
        constexpr uint32_t SLC1_RX_UDF_INT_ST1 = (1U << 10);  ///< SLC1_RX_UDF_INT_ST1
        constexpr uint32_t SLC1_TX_START_INT_ST1 = (1U << 9);  ///< SLC1_TX_START_INT_ST1
        constexpr uint32_t SLC1_RX_START_INT_ST1 = (1U << 8);  ///< SLC1_RX_START_INT_ST1
        constexpr uint32_t FRHOST_BIT15_INT_ST1 = (1U << 7);  ///< FRHOST_BIT15_INT_ST1
        constexpr uint32_t FRHOST_BIT14_INT_ST1 = (1U << 6);  ///< FRHOST_BIT14_INT_ST1
        constexpr uint32_t FRHOST_BIT13_INT_ST1 = (1U << 5);  ///< FRHOST_BIT13_INT_ST1
        constexpr uint32_t FRHOST_BIT12_INT_ST1 = (1U << 4);  ///< FRHOST_BIT12_INT_ST1
        constexpr uint32_t FRHOST_BIT11_INT_ST1 = (1U << 3);  ///< FRHOST_BIT11_INT_ST1
        constexpr uint32_t FRHOST_BIT10_INT_ST1 = (1U << 2);  ///< FRHOST_BIT10_INT_ST1
        constexpr uint32_t FRHOST_BIT9_INT_ST1 = (1U << 1);  ///< FRHOST_BIT9_INT_ST1
        constexpr uint32_t FRHOST_BIT8_INT_ST1 = (1U << 0);  ///< FRHOST_BIT8_INT_ST1
    }

    /// 1INT_ENA1 Register bits
    namespace 1int_ena1_bits {
        constexpr uint32_t SLC1_TX_ERR_EOF_INT_ENA1 = (1U << 24);  ///< SLC1_TX_ERR_EOF_INT_ENA1
        constexpr uint32_t SLC1_WR_RETRY_DONE_INT_ENA1 = (1U << 23);  ///< SLC1_WR_RETRY_DONE_INT_ENA1
        constexpr uint32_t SLC1_HOST_RD_ACK_INT_ENA1 = (1U << 22);  ///< SLC1_HOST_RD_ACK_INT_ENA1
        constexpr uint32_t SLC1_TX_DSCR_EMPTY_INT_ENA1 = (1U << 21);  ///< SLC1_TX_DSCR_EMPTY_INT_ENA1
        constexpr uint32_t SLC1_RX_DSCR_ERR_INT_ENA1 = (1U << 20);  ///< SLC1_RX_DSCR_ERR_INT_ENA1
        constexpr uint32_t SLC1_TX_DSCR_ERR_INT_ENA1 = (1U << 19);  ///< SLC1_TX_DSCR_ERR_INT_ENA1
        constexpr uint32_t SLC1_TOHOST_INT_ENA1 = (1U << 18);  ///< SLC1_TOHOST_INT_ENA1
        constexpr uint32_t SLC1_RX_EOF_INT_ENA1 = (1U << 17);  ///< SLC1_RX_EOF_INT_ENA1
        constexpr uint32_t SLC1_RX_DONE_INT_ENA1 = (1U << 16);  ///< SLC1_RX_DONE_INT_ENA1
        constexpr uint32_t SLC1_TX_SUC_EOF_INT_ENA1 = (1U << 15);  ///< SLC1_TX_SUC_EOF_INT_ENA1
        constexpr uint32_t SLC1_TX_DONE_INT_ENA1 = (1U << 14);  ///< SLC1_TX_DONE_INT_ENA1
        constexpr uint32_t SLC1_TOKEN1_1TO0_INT_ENA1 = (1U << 13);  ///< SLC1_TOKEN1_1TO0_INT_ENA1
        constexpr uint32_t SLC1_TOKEN0_1TO0_INT_ENA1 = (1U << 12);  ///< SLC1_TOKEN0_1TO0_INT_ENA1
        constexpr uint32_t SLC1_TX_OVF_INT_ENA1 = (1U << 11);  ///< SLC1_TX_OVF_INT_ENA1
        constexpr uint32_t SLC1_RX_UDF_INT_ENA1 = (1U << 10);  ///< SLC1_RX_UDF_INT_ENA1
        constexpr uint32_t SLC1_TX_START_INT_ENA1 = (1U << 9);  ///< SLC1_TX_START_INT_ENA1
        constexpr uint32_t SLC1_RX_START_INT_ENA1 = (1U << 8);  ///< SLC1_RX_START_INT_ENA1
        constexpr uint32_t FRHOST_BIT15_INT_ENA1 = (1U << 7);  ///< FRHOST_BIT15_INT_ENA1
        constexpr uint32_t FRHOST_BIT14_INT_ENA1 = (1U << 6);  ///< FRHOST_BIT14_INT_ENA1
        constexpr uint32_t FRHOST_BIT13_INT_ENA1 = (1U << 5);  ///< FRHOST_BIT13_INT_ENA1
        constexpr uint32_t FRHOST_BIT12_INT_ENA1 = (1U << 4);  ///< FRHOST_BIT12_INT_ENA1
        constexpr uint32_t FRHOST_BIT11_INT_ENA1 = (1U << 3);  ///< FRHOST_BIT11_INT_ENA1
        constexpr uint32_t FRHOST_BIT10_INT_ENA1 = (1U << 2);  ///< FRHOST_BIT10_INT_ENA1
        constexpr uint32_t FRHOST_BIT9_INT_ENA1 = (1U << 1);  ///< FRHOST_BIT9_INT_ENA1
        constexpr uint32_t FRHOST_BIT8_INT_ENA1 = (1U << 0);  ///< FRHOST_BIT8_INT_ENA1
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t DATE = (32 << 0);  ///< DATE
    }

    /// ID Register bits
    namespace id_bits {
        constexpr uint32_t ID = (32 << 0);  ///< ID
    }

}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t PWM1_BASE = 0x3FF6C000;
    constexpr uint32_t PWM2_BASE = 0x3FF6F000;
    constexpr uint32_t PWM3_BASE = 0x3FF70000;
    constexpr uint32_t PWM0_BASE = 0x3FF5E000;
    constexpr uint32_t LEDC_BASE = 0x3FF59000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t HSCH0_CONF0;  ///< Offset: 0x00 - LEDC_HSCH0_CONF0
        volatile uint32_t HSCH0_HPOINT;  ///< Offset: 0x04 - LEDC_HSCH0_HPOINT
        volatile uint32_t HSCH0_DUTY;  ///< Offset: 0x08 - LEDC_HSCH0_DUTY
        volatile uint32_t HSCH0_CONF1;  ///< Offset: 0x0C - LEDC_HSCH0_CONF1
        volatile uint32_t HSCH0_DUTY_R;  ///< Offset: 0x10 - LEDC_HSCH0_DUTY_R
        volatile uint32_t HSCH1_CONF0;  ///< Offset: 0x14 - LEDC_HSCH1_CONF0
        volatile uint32_t HSCH1_HPOINT;  ///< Offset: 0x18 - LEDC_HSCH1_HPOINT
        volatile uint32_t HSCH1_DUTY;  ///< Offset: 0x1C - LEDC_HSCH1_DUTY
        volatile uint32_t HSCH1_CONF1;  ///< Offset: 0x20 - LEDC_HSCH1_CONF1
        volatile uint32_t HSCH1_DUTY_R;  ///< Offset: 0x24 - LEDC_HSCH1_DUTY_R
        volatile uint32_t HSCH2_CONF0;  ///< Offset: 0x28 - LEDC_HSCH2_CONF0
        volatile uint32_t HSCH2_HPOINT;  ///< Offset: 0x2C - LEDC_HSCH2_HPOINT
        volatile uint32_t HSCH2_DUTY;  ///< Offset: 0x30 - LEDC_HSCH2_DUTY
        volatile uint32_t HSCH2_CONF1;  ///< Offset: 0x34 - LEDC_HSCH2_CONF1
        volatile uint32_t HSCH2_DUTY_R;  ///< Offset: 0x38 - LEDC_HSCH2_DUTY_R
        volatile uint32_t HSCH3_CONF0;  ///< Offset: 0x3C - LEDC_HSCH3_CONF0
        volatile uint32_t HSCH3_HPOINT;  ///< Offset: 0x40 - LEDC_HSCH3_HPOINT
        volatile uint32_t HSCH3_DUTY;  ///< Offset: 0x44 - LEDC_HSCH3_DUTY
        volatile uint32_t HSCH3_CONF1;  ///< Offset: 0x48 - LEDC_HSCH3_CONF1
        volatile uint32_t HSCH3_DUTY_R;  ///< Offset: 0x4C - LEDC_HSCH3_DUTY_R
        volatile uint32_t HSCH4_CONF0;  ///< Offset: 0x50 - LEDC_HSCH4_CONF0
        volatile uint32_t HSCH4_HPOINT;  ///< Offset: 0x54 - LEDC_HSCH4_HPOINT
        volatile uint32_t HSCH4_DUTY;  ///< Offset: 0x58 - LEDC_HSCH4_DUTY
        volatile uint32_t HSCH4_CONF1;  ///< Offset: 0x5C - LEDC_HSCH4_CONF1
        volatile uint32_t HSCH4_DUTY_R;  ///< Offset: 0x60 - LEDC_HSCH4_DUTY_R
        volatile uint32_t HSCH5_CONF0;  ///< Offset: 0x64 - LEDC_HSCH5_CONF0
        volatile uint32_t HSCH5_HPOINT;  ///< Offset: 0x68 - LEDC_HSCH5_HPOINT
        volatile uint32_t HSCH5_DUTY;  ///< Offset: 0x6C - LEDC_HSCH5_DUTY
        volatile uint32_t HSCH5_CONF1;  ///< Offset: 0x70 - LEDC_HSCH5_CONF1
        volatile uint32_t HSCH5_DUTY_R;  ///< Offset: 0x74 - LEDC_HSCH5_DUTY_R
        volatile uint32_t HSCH6_CONF0;  ///< Offset: 0x78 - LEDC_HSCH6_CONF0
        volatile uint32_t HSCH6_HPOINT;  ///< Offset: 0x7C - LEDC_HSCH6_HPOINT
        volatile uint32_t HSCH6_DUTY;  ///< Offset: 0x80 - LEDC_HSCH6_DUTY
        volatile uint32_t HSCH6_CONF1;  ///< Offset: 0x84 - LEDC_HSCH6_CONF1
        volatile uint32_t HSCH6_DUTY_R;  ///< Offset: 0x88 - LEDC_HSCH6_DUTY_R
        volatile uint32_t HSCH7_CONF0;  ///< Offset: 0x8C - LEDC_HSCH7_CONF0
        volatile uint32_t HSCH7_HPOINT;  ///< Offset: 0x90 - LEDC_HSCH7_HPOINT
        volatile uint32_t HSCH7_DUTY;  ///< Offset: 0x94 - LEDC_HSCH7_DUTY
        volatile uint32_t HSCH7_CONF1;  ///< Offset: 0x98 - LEDC_HSCH7_CONF1
        volatile uint32_t HSCH7_DUTY_R;  ///< Offset: 0x9C - LEDC_HSCH7_DUTY_R
        volatile uint32_t LSCH0_CONF0;  ///< Offset: 0xA0 - LEDC_LSCH0_CONF0
        volatile uint32_t LSCH0_HPOINT;  ///< Offset: 0xA4 - LEDC_LSCH0_HPOINT
        volatile uint32_t LSCH0_DUTY;  ///< Offset: 0xA8 - LEDC_LSCH0_DUTY
        volatile uint32_t LSCH0_CONF1;  ///< Offset: 0xAC - LEDC_LSCH0_CONF1
        volatile uint32_t LSCH0_DUTY_R;  ///< Offset: 0xB0 - LEDC_LSCH0_DUTY_R
        volatile uint32_t LSCH1_CONF0;  ///< Offset: 0xB4 - LEDC_LSCH1_CONF0
        volatile uint32_t LSCH1_HPOINT;  ///< Offset: 0xB8 - LEDC_LSCH1_HPOINT
        volatile uint32_t LSCH1_DUTY;  ///< Offset: 0xBC - LEDC_LSCH1_DUTY
        volatile uint32_t LSCH1_CONF1;  ///< Offset: 0xC0 - LEDC_LSCH1_CONF1
        volatile uint32_t LSCH1_DUTY_R;  ///< Offset: 0xC4 - LEDC_LSCH1_DUTY_R
        volatile uint32_t LSCH2_CONF0;  ///< Offset: 0xC8 - LEDC_LSCH2_CONF0
        volatile uint32_t LSCH2_HPOINT;  ///< Offset: 0xCC - LEDC_LSCH2_HPOINT
        volatile uint32_t LSCH2_DUTY;  ///< Offset: 0xD0 - LEDC_LSCH2_DUTY
        volatile uint32_t LSCH2_CONF1;  ///< Offset: 0xD4 - LEDC_LSCH2_CONF1
        volatile uint32_t LSCH2_DUTY_R;  ///< Offset: 0xD8 - LEDC_LSCH2_DUTY_R
        volatile uint32_t LSCH3_CONF0;  ///< Offset: 0xDC - LEDC_LSCH3_CONF0
        volatile uint32_t LSCH3_HPOINT;  ///< Offset: 0xE0 - LEDC_LSCH3_HPOINT
        volatile uint32_t LSCH3_DUTY;  ///< Offset: 0xE4 - LEDC_LSCH3_DUTY
        volatile uint32_t LSCH3_CONF1;  ///< Offset: 0xE8 - LEDC_LSCH3_CONF1
        volatile uint32_t LSCH3_DUTY_R;  ///< Offset: 0xEC - LEDC_LSCH3_DUTY_R
        volatile uint32_t LSCH4_CONF0;  ///< Offset: 0xF0 - LEDC_LSCH4_CONF0
        volatile uint32_t LSCH4_HPOINT;  ///< Offset: 0xF4 - LEDC_LSCH4_HPOINT
        volatile uint32_t LSCH4_DUTY;  ///< Offset: 0xF8 - LEDC_LSCH4_DUTY
        volatile uint32_t LSCH4_CONF1;  ///< Offset: 0xFC - LEDC_LSCH4_CONF1
        volatile uint32_t LSCH4_DUTY_R;  ///< Offset: 0x100 - LEDC_LSCH4_DUTY_R
        volatile uint32_t LSCH5_CONF0;  ///< Offset: 0x104 - LEDC_LSCH5_CONF0
        volatile uint32_t LSCH5_HPOINT;  ///< Offset: 0x108 - LEDC_LSCH5_HPOINT
        volatile uint32_t LSCH5_DUTY;  ///< Offset: 0x10C - LEDC_LSCH5_DUTY
        volatile uint32_t LSCH5_CONF1;  ///< Offset: 0x110 - LEDC_LSCH5_CONF1
        volatile uint32_t LSCH5_DUTY_R;  ///< Offset: 0x114 - LEDC_LSCH5_DUTY_R
        volatile uint32_t LSCH6_CONF0;  ///< Offset: 0x118 - LEDC_LSCH6_CONF0
        volatile uint32_t LSCH6_HPOINT;  ///< Offset: 0x11C - LEDC_LSCH6_HPOINT
        volatile uint32_t LSCH6_DUTY;  ///< Offset: 0x120 - LEDC_LSCH6_DUTY
        volatile uint32_t LSCH6_CONF1;  ///< Offset: 0x124 - LEDC_LSCH6_CONF1
        volatile uint32_t LSCH6_DUTY_R;  ///< Offset: 0x128 - LEDC_LSCH6_DUTY_R
        volatile uint32_t LSCH7_CONF0;  ///< Offset: 0x12C - LEDC_LSCH7_CONF0
        volatile uint32_t LSCH7_HPOINT;  ///< Offset: 0x130 - LEDC_LSCH7_HPOINT
        volatile uint32_t LSCH7_DUTY;  ///< Offset: 0x134 - LEDC_LSCH7_DUTY
        volatile uint32_t LSCH7_CONF1;  ///< Offset: 0x138 - LEDC_LSCH7_CONF1
        volatile uint32_t LSCH7_DUTY_R;  ///< Offset: 0x13C - LEDC_LSCH7_DUTY_R
        volatile uint32_t HSTIMER0_CONF;  ///< Offset: 0x140 - LEDC_HSTIMER0_CONF
        volatile uint32_t HSTIMER0_VALUE;  ///< Offset: 0x144 - LEDC_HSTIMER0_VALUE
        volatile uint32_t HSTIMER1_CONF;  ///< Offset: 0x148 - LEDC_HSTIMER1_CONF
        volatile uint32_t HSTIMER1_VALUE;  ///< Offset: 0x14C - LEDC_HSTIMER1_VALUE
        volatile uint32_t HSTIMER2_CONF;  ///< Offset: 0x150 - LEDC_HSTIMER2_CONF
        volatile uint32_t HSTIMER2_VALUE;  ///< Offset: 0x154 - LEDC_HSTIMER2_VALUE
        volatile uint32_t HSTIMER3_CONF;  ///< Offset: 0x158 - LEDC_HSTIMER3_CONF
        volatile uint32_t HSTIMER3_VALUE;  ///< Offset: 0x15C - LEDC_HSTIMER3_VALUE
        volatile uint32_t LSTIMER0_CONF;  ///< Offset: 0x160 - LEDC_LSTIMER0_CONF
        volatile uint32_t LSTIMER0_VALUE;  ///< Offset: 0x164 - LEDC_LSTIMER0_VALUE
        volatile uint32_t LSTIMER1_CONF;  ///< Offset: 0x168 - LEDC_LSTIMER1_CONF
        volatile uint32_t LSTIMER1_VALUE;  ///< Offset: 0x16C - LEDC_LSTIMER1_VALUE
        volatile uint32_t LSTIMER2_CONF;  ///< Offset: 0x170 - LEDC_LSTIMER2_CONF
        volatile uint32_t LSTIMER2_VALUE;  ///< Offset: 0x174 - LEDC_LSTIMER2_VALUE
        volatile uint32_t LSTIMER3_CONF;  ///< Offset: 0x178 - LEDC_LSTIMER3_CONF
        volatile uint32_t LSTIMER3_VALUE;  ///< Offset: 0x17C - LEDC_LSTIMER3_VALUE
        volatile uint32_t INT_RAW;  ///< Offset: 0x180 - LEDC_INT_RAW
        volatile uint32_t INT_ST;  ///< Offset: 0x184 - LEDC_INT_ST
        volatile uint32_t INT_ENA;  ///< Offset: 0x188 - LEDC_INT_ENA
        volatile uint32_t INT_CLR;  ///< Offset: 0x18C - LEDC_INT_CLR
        volatile uint32_t CONF;  ///< Offset: 0x190 - LEDC_CONF
        volatile uint32_t DATE;  ///< Offset: 0x1FC - LEDC_DATE
    };

    /// Peripheral instances
    inline Registers* PWM1 = reinterpret_cast<Registers*>(PWM1_BASE);
    inline Registers* PWM2 = reinterpret_cast<Registers*>(PWM2_BASE);
    inline Registers* PWM3 = reinterpret_cast<Registers*>(PWM3_BASE);
    inline Registers* PWM0 = reinterpret_cast<Registers*>(PWM0_BASE);
    inline Registers* LEDC = reinterpret_cast<Registers*>(LEDC_BASE);

    // Bit definitions
    /// HSCH0_CONF0 Register bits
    namespace hsch0_conf0_bits {
        constexpr uint32_t CLK_EN = (1U << 31);  ///< CLK_EN
        constexpr uint32_t IDLE_LV_HSCH0 = (1U << 3);  ///< IDLE_LV_HSCH0
        constexpr uint32_t SIG_OUT_EN_HSCH0 = (1U << 2);  ///< SIG_OUT_EN_HSCH0
        constexpr uint32_t TIMER_SEL_HSCH0 = (2 << 0);  ///< TIMER_SEL_HSCH0
    }

    /// HSCH0_HPOINT Register bits
    namespace hsch0_hpoint_bits {
        constexpr uint32_t HPOINT_HSCH0 = (20 << 0);  ///< HPOINT_HSCH0
    }

    /// HSCH0_DUTY Register bits
    namespace hsch0_duty_bits {
        constexpr uint32_t DUTY_HSCH0 = (25 << 0);  ///< DUTY_HSCH0
    }

    /// HSCH0_CONF1 Register bits
    namespace hsch0_conf1_bits {
        constexpr uint32_t DUTY_START_HSCH0 = (1U << 31);  ///< DUTY_START_HSCH0
        constexpr uint32_t DUTY_INC_HSCH0 = (1U << 30);  ///< DUTY_INC_HSCH0
        constexpr uint32_t DUTY_NUM_HSCH0 = (10 << 20);  ///< DUTY_NUM_HSCH0
        constexpr uint32_t DUTY_CYCLE_HSCH0 = (10 << 10);  ///< DUTY_CYCLE_HSCH0
        constexpr uint32_t DUTY_SCALE_HSCH0 = (10 << 0);  ///< DUTY_SCALE_HSCH0
    }

    /// HSCH0_DUTY_R Register bits
    namespace hsch0_duty_r_bits {
        constexpr uint32_t DUTY_HSCH0 = (25 << 0);  ///< DUTY_HSCH0
    }

    /// HSCH1_CONF0 Register bits
    namespace hsch1_conf0_bits {
        constexpr uint32_t IDLE_LV_HSCH1 = (1U << 3);  ///< IDLE_LV_HSCH1
        constexpr uint32_t SIG_OUT_EN_HSCH1 = (1U << 2);  ///< SIG_OUT_EN_HSCH1
        constexpr uint32_t TIMER_SEL_HSCH1 = (2 << 0);  ///< TIMER_SEL_HSCH1
    }

    /// HSCH1_HPOINT Register bits
    namespace hsch1_hpoint_bits {
        constexpr uint32_t HPOINT_HSCH1 = (20 << 0);  ///< HPOINT_HSCH1
    }

    /// HSCH1_DUTY Register bits
    namespace hsch1_duty_bits {
        constexpr uint32_t DUTY_HSCH1 = (25 << 0);  ///< DUTY_HSCH1
    }

    /// HSCH1_CONF1 Register bits
    namespace hsch1_conf1_bits {
        constexpr uint32_t DUTY_START_HSCH1 = (1U << 31);  ///< DUTY_START_HSCH1
        constexpr uint32_t DUTY_INC_HSCH1 = (1U << 30);  ///< DUTY_INC_HSCH1
        constexpr uint32_t DUTY_NUM_HSCH1 = (10 << 20);  ///< DUTY_NUM_HSCH1
        constexpr uint32_t DUTY_CYCLE_HSCH1 = (10 << 10);  ///< DUTY_CYCLE_HSCH1
        constexpr uint32_t DUTY_SCALE_HSCH1 = (10 << 0);  ///< DUTY_SCALE_HSCH1
    }

    /// HSCH1_DUTY_R Register bits
    namespace hsch1_duty_r_bits {
        constexpr uint32_t DUTY_HSCH1 = (25 << 0);  ///< DUTY_HSCH1
    }

    /// HSCH2_CONF0 Register bits
    namespace hsch2_conf0_bits {
        constexpr uint32_t IDLE_LV_HSCH2 = (1U << 3);  ///< IDLE_LV_HSCH2
        constexpr uint32_t SIG_OUT_EN_HSCH2 = (1U << 2);  ///< SIG_OUT_EN_HSCH2
        constexpr uint32_t TIMER_SEL_HSCH2 = (2 << 0);  ///< TIMER_SEL_HSCH2
    }

    /// HSCH2_HPOINT Register bits
    namespace hsch2_hpoint_bits {
        constexpr uint32_t HPOINT_HSCH2 = (20 << 0);  ///< HPOINT_HSCH2
    }

    /// HSCH2_DUTY Register bits
    namespace hsch2_duty_bits {
        constexpr uint32_t DUTY_HSCH2 = (25 << 0);  ///< DUTY_HSCH2
    }

    /// HSCH2_CONF1 Register bits
    namespace hsch2_conf1_bits {
        constexpr uint32_t DUTY_START_HSCH2 = (1U << 31);  ///< DUTY_START_HSCH2
        constexpr uint32_t DUTY_INC_HSCH2 = (1U << 30);  ///< DUTY_INC_HSCH2
        constexpr uint32_t DUTY_NUM_HSCH2 = (10 << 20);  ///< DUTY_NUM_HSCH2
        constexpr uint32_t DUTY_CYCLE_HSCH2 = (10 << 10);  ///< DUTY_CYCLE_HSCH2
        constexpr uint32_t DUTY_SCALE_HSCH2 = (10 << 0);  ///< DUTY_SCALE_HSCH2
    }

    /// HSCH2_DUTY_R Register bits
    namespace hsch2_duty_r_bits {
        constexpr uint32_t DUTY_HSCH2 = (25 << 0);  ///< DUTY_HSCH2
    }

    /// HSCH3_CONF0 Register bits
    namespace hsch3_conf0_bits {
        constexpr uint32_t IDLE_LV_HSCH3 = (1U << 3);  ///< IDLE_LV_HSCH3
        constexpr uint32_t SIG_OUT_EN_HSCH3 = (1U << 2);  ///< SIG_OUT_EN_HSCH3
        constexpr uint32_t TIMER_SEL_HSCH3 = (2 << 0);  ///< TIMER_SEL_HSCH3
    }

    /// HSCH3_HPOINT Register bits
    namespace hsch3_hpoint_bits {
        constexpr uint32_t HPOINT_HSCH3 = (20 << 0);  ///< HPOINT_HSCH3
    }

    /// HSCH3_DUTY Register bits
    namespace hsch3_duty_bits {
        constexpr uint32_t DUTY_HSCH3 = (25 << 0);  ///< DUTY_HSCH3
    }

    /// HSCH3_CONF1 Register bits
    namespace hsch3_conf1_bits {
        constexpr uint32_t DUTY_START_HSCH3 = (1U << 31);  ///< DUTY_START_HSCH3
        constexpr uint32_t DUTY_INC_HSCH3 = (1U << 30);  ///< DUTY_INC_HSCH3
        constexpr uint32_t DUTY_NUM_HSCH3 = (10 << 20);  ///< DUTY_NUM_HSCH3
        constexpr uint32_t DUTY_CYCLE_HSCH3 = (10 << 10);  ///< DUTY_CYCLE_HSCH3
        constexpr uint32_t DUTY_SCALE_HSCH3 = (10 << 0);  ///< DUTY_SCALE_HSCH3
    }

    /// HSCH3_DUTY_R Register bits
    namespace hsch3_duty_r_bits {
        constexpr uint32_t DUTY_HSCH3 = (25 << 0);  ///< DUTY_HSCH3
    }

    /// HSCH4_CONF0 Register bits
    namespace hsch4_conf0_bits {
        constexpr uint32_t IDLE_LV_HSCH4 = (1U << 3);  ///< IDLE_LV_HSCH4
        constexpr uint32_t SIG_OUT_EN_HSCH4 = (1U << 2);  ///< SIG_OUT_EN_HSCH4
        constexpr uint32_t TIMER_SEL_HSCH4 = (2 << 0);  ///< TIMER_SEL_HSCH4
    }

    /// HSCH4_HPOINT Register bits
    namespace hsch4_hpoint_bits {
        constexpr uint32_t HPOINT_HSCH4 = (20 << 0);  ///< HPOINT_HSCH4
    }

    /// HSCH4_DUTY Register bits
    namespace hsch4_duty_bits {
        constexpr uint32_t DUTY_HSCH4 = (25 << 0);  ///< DUTY_HSCH4
    }

    /// HSCH4_CONF1 Register bits
    namespace hsch4_conf1_bits {
        constexpr uint32_t DUTY_START_HSCH4 = (1U << 31);  ///< DUTY_START_HSCH4
        constexpr uint32_t DUTY_INC_HSCH4 = (1U << 30);  ///< DUTY_INC_HSCH4
        constexpr uint32_t DUTY_NUM_HSCH4 = (10 << 20);  ///< DUTY_NUM_HSCH4
        constexpr uint32_t DUTY_CYCLE_HSCH4 = (10 << 10);  ///< DUTY_CYCLE_HSCH4
        constexpr uint32_t DUTY_SCALE_HSCH4 = (10 << 0);  ///< DUTY_SCALE_HSCH4
    }

    /// HSCH4_DUTY_R Register bits
    namespace hsch4_duty_r_bits {
        constexpr uint32_t DUTY_HSCH4 = (25 << 0);  ///< DUTY_HSCH4
    }

    /// HSCH5_CONF0 Register bits
    namespace hsch5_conf0_bits {
        constexpr uint32_t IDLE_LV_HSCH5 = (1U << 3);  ///< IDLE_LV_HSCH5
        constexpr uint32_t SIG_OUT_EN_HSCH5 = (1U << 2);  ///< SIG_OUT_EN_HSCH5
        constexpr uint32_t TIMER_SEL_HSCH5 = (2 << 0);  ///< TIMER_SEL_HSCH5
    }

    /// HSCH5_HPOINT Register bits
    namespace hsch5_hpoint_bits {
        constexpr uint32_t HPOINT_HSCH5 = (20 << 0);  ///< HPOINT_HSCH5
    }

    /// HSCH5_DUTY Register bits
    namespace hsch5_duty_bits {
        constexpr uint32_t DUTY_HSCH5 = (25 << 0);  ///< DUTY_HSCH5
    }

    /// HSCH5_CONF1 Register bits
    namespace hsch5_conf1_bits {
        constexpr uint32_t DUTY_START_HSCH5 = (1U << 31);  ///< DUTY_START_HSCH5
        constexpr uint32_t DUTY_INC_HSCH5 = (1U << 30);  ///< DUTY_INC_HSCH5
        constexpr uint32_t DUTY_NUM_HSCH5 = (10 << 20);  ///< DUTY_NUM_HSCH5
        constexpr uint32_t DUTY_CYCLE_HSCH5 = (10 << 10);  ///< DUTY_CYCLE_HSCH5
        constexpr uint32_t DUTY_SCALE_HSCH5 = (10 << 0);  ///< DUTY_SCALE_HSCH5
    }

    /// HSCH5_DUTY_R Register bits
    namespace hsch5_duty_r_bits {
        constexpr uint32_t DUTY_HSCH5 = (25 << 0);  ///< DUTY_HSCH5
    }

    /// HSCH6_CONF0 Register bits
    namespace hsch6_conf0_bits {
        constexpr uint32_t IDLE_LV_HSCH6 = (1U << 3);  ///< IDLE_LV_HSCH6
        constexpr uint32_t SIG_OUT_EN_HSCH6 = (1U << 2);  ///< SIG_OUT_EN_HSCH6
        constexpr uint32_t TIMER_SEL_HSCH6 = (2 << 0);  ///< TIMER_SEL_HSCH6
    }

    /// HSCH6_HPOINT Register bits
    namespace hsch6_hpoint_bits {
        constexpr uint32_t HPOINT_HSCH6 = (20 << 0);  ///< HPOINT_HSCH6
    }

    /// HSCH6_DUTY Register bits
    namespace hsch6_duty_bits {
        constexpr uint32_t DUTY_HSCH6 = (25 << 0);  ///< DUTY_HSCH6
    }

    /// HSCH6_CONF1 Register bits
    namespace hsch6_conf1_bits {
        constexpr uint32_t DUTY_START_HSCH6 = (1U << 31);  ///< DUTY_START_HSCH6
        constexpr uint32_t DUTY_INC_HSCH6 = (1U << 30);  ///< DUTY_INC_HSCH6
        constexpr uint32_t DUTY_NUM_HSCH6 = (10 << 20);  ///< DUTY_NUM_HSCH6
        constexpr uint32_t DUTY_CYCLE_HSCH6 = (10 << 10);  ///< DUTY_CYCLE_HSCH6
        constexpr uint32_t DUTY_SCALE_HSCH6 = (10 << 0);  ///< DUTY_SCALE_HSCH6
    }

    /// HSCH6_DUTY_R Register bits
    namespace hsch6_duty_r_bits {
        constexpr uint32_t DUTY_HSCH6 = (25 << 0);  ///< DUTY_HSCH6
    }

    /// HSCH7_CONF0 Register bits
    namespace hsch7_conf0_bits {
        constexpr uint32_t IDLE_LV_HSCH7 = (1U << 3);  ///< IDLE_LV_HSCH7
        constexpr uint32_t SIG_OUT_EN_HSCH7 = (1U << 2);  ///< SIG_OUT_EN_HSCH7
        constexpr uint32_t TIMER_SEL_HSCH7 = (2 << 0);  ///< TIMER_SEL_HSCH7
    }

    /// HSCH7_HPOINT Register bits
    namespace hsch7_hpoint_bits {
        constexpr uint32_t HPOINT_HSCH7 = (20 << 0);  ///< HPOINT_HSCH7
    }

    /// HSCH7_DUTY Register bits
    namespace hsch7_duty_bits {
        constexpr uint32_t DUTY_HSCH7 = (25 << 0);  ///< DUTY_HSCH7
    }

    /// HSCH7_CONF1 Register bits
    namespace hsch7_conf1_bits {
        constexpr uint32_t DUTY_START_HSCH7 = (1U << 31);  ///< DUTY_START_HSCH7
        constexpr uint32_t DUTY_INC_HSCH7 = (1U << 30);  ///< DUTY_INC_HSCH7
        constexpr uint32_t DUTY_NUM_HSCH7 = (10 << 20);  ///< DUTY_NUM_HSCH7
        constexpr uint32_t DUTY_CYCLE_HSCH7 = (10 << 10);  ///< DUTY_CYCLE_HSCH7
        constexpr uint32_t DUTY_SCALE_HSCH7 = (10 << 0);  ///< DUTY_SCALE_HSCH7
    }

    /// HSCH7_DUTY_R Register bits
    namespace hsch7_duty_r_bits {
        constexpr uint32_t DUTY_HSCH7 = (25 << 0);  ///< DUTY_HSCH7
    }

    /// LSCH0_CONF0 Register bits
    namespace lsch0_conf0_bits {
        constexpr uint32_t PARA_UP_LSCH0 = (1U << 4);  ///< PARA_UP_LSCH0
        constexpr uint32_t IDLE_LV_LSCH0 = (1U << 3);  ///< IDLE_LV_LSCH0
        constexpr uint32_t SIG_OUT_EN_LSCH0 = (1U << 2);  ///< SIG_OUT_EN_LSCH0
        constexpr uint32_t TIMER_SEL_LSCH0 = (2 << 0);  ///< TIMER_SEL_LSCH0
    }

    /// LSCH0_HPOINT Register bits
    namespace lsch0_hpoint_bits {
        constexpr uint32_t HPOINT_LSCH0 = (20 << 0);  ///< HPOINT_LSCH0
    }

    /// LSCH0_DUTY Register bits
    namespace lsch0_duty_bits {
        constexpr uint32_t DUTY_LSCH0 = (25 << 0);  ///< DUTY_LSCH0
    }

    /// LSCH0_CONF1 Register bits
    namespace lsch0_conf1_bits {
        constexpr uint32_t DUTY_START_LSCH0 = (1U << 31);  ///< DUTY_START_LSCH0
        constexpr uint32_t DUTY_INC_LSCH0 = (1U << 30);  ///< DUTY_INC_LSCH0
        constexpr uint32_t DUTY_NUM_LSCH0 = (10 << 20);  ///< DUTY_NUM_LSCH0
        constexpr uint32_t DUTY_CYCLE_LSCH0 = (10 << 10);  ///< DUTY_CYCLE_LSCH0
        constexpr uint32_t DUTY_SCALE_LSCH0 = (10 << 0);  ///< DUTY_SCALE_LSCH0
    }

    /// LSCH0_DUTY_R Register bits
    namespace lsch0_duty_r_bits {
        constexpr uint32_t DUTY_LSCH0 = (25 << 0);  ///< DUTY_LSCH0
    }

    /// LSCH1_CONF0 Register bits
    namespace lsch1_conf0_bits {
        constexpr uint32_t PARA_UP_LSCH1 = (1U << 4);  ///< PARA_UP_LSCH1
        constexpr uint32_t IDLE_LV_LSCH1 = (1U << 3);  ///< IDLE_LV_LSCH1
        constexpr uint32_t SIG_OUT_EN_LSCH1 = (1U << 2);  ///< SIG_OUT_EN_LSCH1
        constexpr uint32_t TIMER_SEL_LSCH1 = (2 << 0);  ///< TIMER_SEL_LSCH1
    }

    /// LSCH1_HPOINT Register bits
    namespace lsch1_hpoint_bits {
        constexpr uint32_t HPOINT_LSCH1 = (20 << 0);  ///< HPOINT_LSCH1
    }

    /// LSCH1_DUTY Register bits
    namespace lsch1_duty_bits {
        constexpr uint32_t DUTY_LSCH1 = (25 << 0);  ///< DUTY_LSCH1
    }

    /// LSCH1_CONF1 Register bits
    namespace lsch1_conf1_bits {
        constexpr uint32_t DUTY_START_LSCH1 = (1U << 31);  ///< DUTY_START_LSCH1
        constexpr uint32_t DUTY_INC_LSCH1 = (1U << 30);  ///< DUTY_INC_LSCH1
        constexpr uint32_t DUTY_NUM_LSCH1 = (10 << 20);  ///< DUTY_NUM_LSCH1
        constexpr uint32_t DUTY_CYCLE_LSCH1 = (10 << 10);  ///< DUTY_CYCLE_LSCH1
        constexpr uint32_t DUTY_SCALE_LSCH1 = (10 << 0);  ///< DUTY_SCALE_LSCH1
    }

    /// LSCH1_DUTY_R Register bits
    namespace lsch1_duty_r_bits {
        constexpr uint32_t DUTY_LSCH1 = (25 << 0);  ///< DUTY_LSCH1
    }

    /// LSCH2_CONF0 Register bits
    namespace lsch2_conf0_bits {
        constexpr uint32_t PARA_UP_LSCH2 = (1U << 4);  ///< PARA_UP_LSCH2
        constexpr uint32_t IDLE_LV_LSCH2 = (1U << 3);  ///< IDLE_LV_LSCH2
        constexpr uint32_t SIG_OUT_EN_LSCH2 = (1U << 2);  ///< SIG_OUT_EN_LSCH2
        constexpr uint32_t TIMER_SEL_LSCH2 = (2 << 0);  ///< TIMER_SEL_LSCH2
    }

    /// LSCH2_HPOINT Register bits
    namespace lsch2_hpoint_bits {
        constexpr uint32_t HPOINT_LSCH2 = (20 << 0);  ///< HPOINT_LSCH2
    }

    /// LSCH2_DUTY Register bits
    namespace lsch2_duty_bits {
        constexpr uint32_t DUTY_LSCH2 = (25 << 0);  ///< DUTY_LSCH2
    }

    /// LSCH2_CONF1 Register bits
    namespace lsch2_conf1_bits {
        constexpr uint32_t DUTY_START_LSCH2 = (1U << 31);  ///< DUTY_START_LSCH2
        constexpr uint32_t DUTY_INC_LSCH2 = (1U << 30);  ///< DUTY_INC_LSCH2
        constexpr uint32_t DUTY_NUM_LSCH2 = (10 << 20);  ///< DUTY_NUM_LSCH2
        constexpr uint32_t DUTY_CYCLE_LSCH2 = (10 << 10);  ///< DUTY_CYCLE_LSCH2
        constexpr uint32_t DUTY_SCALE_LSCH2 = (10 << 0);  ///< DUTY_SCALE_LSCH2
    }

    /// LSCH2_DUTY_R Register bits
    namespace lsch2_duty_r_bits {
        constexpr uint32_t DUTY_LSCH2 = (25 << 0);  ///< DUTY_LSCH2
    }

    /// LSCH3_CONF0 Register bits
    namespace lsch3_conf0_bits {
        constexpr uint32_t PARA_UP_LSCH3 = (1U << 4);  ///< PARA_UP_LSCH3
        constexpr uint32_t IDLE_LV_LSCH3 = (1U << 3);  ///< IDLE_LV_LSCH3
        constexpr uint32_t SIG_OUT_EN_LSCH3 = (1U << 2);  ///< SIG_OUT_EN_LSCH3
        constexpr uint32_t TIMER_SEL_LSCH3 = (2 << 0);  ///< TIMER_SEL_LSCH3
    }

    /// LSCH3_HPOINT Register bits
    namespace lsch3_hpoint_bits {
        constexpr uint32_t HPOINT_LSCH3 = (20 << 0);  ///< HPOINT_LSCH3
    }

    /// LSCH3_DUTY Register bits
    namespace lsch3_duty_bits {
        constexpr uint32_t DUTY_LSCH3 = (25 << 0);  ///< DUTY_LSCH3
    }

    /// LSCH3_CONF1 Register bits
    namespace lsch3_conf1_bits {
        constexpr uint32_t DUTY_START_LSCH3 = (1U << 31);  ///< DUTY_START_LSCH3
        constexpr uint32_t DUTY_INC_LSCH3 = (1U << 30);  ///< DUTY_INC_LSCH3
        constexpr uint32_t DUTY_NUM_LSCH3 = (10 << 20);  ///< DUTY_NUM_LSCH3
        constexpr uint32_t DUTY_CYCLE_LSCH3 = (10 << 10);  ///< DUTY_CYCLE_LSCH3
        constexpr uint32_t DUTY_SCALE_LSCH3 = (10 << 0);  ///< DUTY_SCALE_LSCH3
    }

    /// LSCH3_DUTY_R Register bits
    namespace lsch3_duty_r_bits {
        constexpr uint32_t DUTY_LSCH3 = (25 << 0);  ///< DUTY_LSCH3
    }

    /// LSCH4_CONF0 Register bits
    namespace lsch4_conf0_bits {
        constexpr uint32_t PARA_UP_LSCH4 = (1U << 4);  ///< PARA_UP_LSCH4
        constexpr uint32_t IDLE_LV_LSCH4 = (1U << 3);  ///< IDLE_LV_LSCH4
        constexpr uint32_t SIG_OUT_EN_LSCH4 = (1U << 2);  ///< SIG_OUT_EN_LSCH4
        constexpr uint32_t TIMER_SEL_LSCH4 = (2 << 0);  ///< TIMER_SEL_LSCH4
    }

    /// LSCH4_HPOINT Register bits
    namespace lsch4_hpoint_bits {
        constexpr uint32_t HPOINT_LSCH4 = (20 << 0);  ///< HPOINT_LSCH4
    }

    /// LSCH4_DUTY Register bits
    namespace lsch4_duty_bits {
        constexpr uint32_t DUTY_LSCH4 = (25 << 0);  ///< DUTY_LSCH4
    }

    /// LSCH4_CONF1 Register bits
    namespace lsch4_conf1_bits {
        constexpr uint32_t DUTY_START_LSCH4 = (1U << 31);  ///< DUTY_START_LSCH4
        constexpr uint32_t DUTY_INC_LSCH4 = (1U << 30);  ///< DUTY_INC_LSCH4
        constexpr uint32_t DUTY_NUM_LSCH4 = (10 << 20);  ///< DUTY_NUM_LSCH4
        constexpr uint32_t DUTY_CYCLE_LSCH4 = (10 << 10);  ///< DUTY_CYCLE_LSCH4
        constexpr uint32_t DUTY_SCALE_LSCH4 = (10 << 0);  ///< DUTY_SCALE_LSCH4
    }

    /// LSCH4_DUTY_R Register bits
    namespace lsch4_duty_r_bits {
        constexpr uint32_t DUTY_LSCH4 = (25 << 0);  ///< DUTY_LSCH4
    }

    /// LSCH5_CONF0 Register bits
    namespace lsch5_conf0_bits {
        constexpr uint32_t PARA_UP_LSCH5 = (1U << 4);  ///< PARA_UP_LSCH5
        constexpr uint32_t IDLE_LV_LSCH5 = (1U << 3);  ///< IDLE_LV_LSCH5
        constexpr uint32_t SIG_OUT_EN_LSCH5 = (1U << 2);  ///< SIG_OUT_EN_LSCH5
        constexpr uint32_t TIMER_SEL_LSCH5 = (2 << 0);  ///< TIMER_SEL_LSCH5
    }

    /// LSCH5_HPOINT Register bits
    namespace lsch5_hpoint_bits {
        constexpr uint32_t HPOINT_LSCH5 = (20 << 0);  ///< HPOINT_LSCH5
    }

    /// LSCH5_DUTY Register bits
    namespace lsch5_duty_bits {
        constexpr uint32_t DUTY_LSCH5 = (25 << 0);  ///< DUTY_LSCH5
    }

    /// LSCH5_CONF1 Register bits
    namespace lsch5_conf1_bits {
        constexpr uint32_t DUTY_START_LSCH5 = (1U << 31);  ///< DUTY_START_LSCH5
        constexpr uint32_t DUTY_INC_LSCH5 = (1U << 30);  ///< DUTY_INC_LSCH5
        constexpr uint32_t DUTY_NUM_LSCH5 = (10 << 20);  ///< DUTY_NUM_LSCH5
        constexpr uint32_t DUTY_CYCLE_LSCH5 = (10 << 10);  ///< DUTY_CYCLE_LSCH5
        constexpr uint32_t DUTY_SCALE_LSCH5 = (10 << 0);  ///< DUTY_SCALE_LSCH5
    }

    /// LSCH5_DUTY_R Register bits
    namespace lsch5_duty_r_bits {
        constexpr uint32_t DUTY_LSCH5 = (25 << 0);  ///< DUTY_LSCH5
    }

    /// LSCH6_CONF0 Register bits
    namespace lsch6_conf0_bits {
        constexpr uint32_t PARA_UP_LSCH6 = (1U << 4);  ///< PARA_UP_LSCH6
        constexpr uint32_t IDLE_LV_LSCH6 = (1U << 3);  ///< IDLE_LV_LSCH6
        constexpr uint32_t SIG_OUT_EN_LSCH6 = (1U << 2);  ///< SIG_OUT_EN_LSCH6
        constexpr uint32_t TIMER_SEL_LSCH6 = (2 << 0);  ///< TIMER_SEL_LSCH6
    }

    /// LSCH6_HPOINT Register bits
    namespace lsch6_hpoint_bits {
        constexpr uint32_t HPOINT_LSCH6 = (20 << 0);  ///< HPOINT_LSCH6
    }

    /// LSCH6_DUTY Register bits
    namespace lsch6_duty_bits {
        constexpr uint32_t DUTY_LSCH6 = (25 << 0);  ///< DUTY_LSCH6
    }

    /// LSCH6_CONF1 Register bits
    namespace lsch6_conf1_bits {
        constexpr uint32_t DUTY_START_LSCH6 = (1U << 31);  ///< DUTY_START_LSCH6
        constexpr uint32_t DUTY_INC_LSCH6 = (1U << 30);  ///< DUTY_INC_LSCH6
        constexpr uint32_t DUTY_NUM_LSCH6 = (10 << 20);  ///< DUTY_NUM_LSCH6
        constexpr uint32_t DUTY_CYCLE_LSCH6 = (10 << 10);  ///< DUTY_CYCLE_LSCH6
        constexpr uint32_t DUTY_SCALE_LSCH6 = (10 << 0);  ///< DUTY_SCALE_LSCH6
    }

    /// LSCH6_DUTY_R Register bits
    namespace lsch6_duty_r_bits {
        constexpr uint32_t DUTY_LSCH6 = (25 << 0);  ///< DUTY_LSCH6
    }

    /// LSCH7_CONF0 Register bits
    namespace lsch7_conf0_bits {
        constexpr uint32_t PARA_UP_LSCH7 = (1U << 4);  ///< PARA_UP_LSCH7
        constexpr uint32_t IDLE_LV_LSCH7 = (1U << 3);  ///< IDLE_LV_LSCH7
        constexpr uint32_t SIG_OUT_EN_LSCH7 = (1U << 2);  ///< SIG_OUT_EN_LSCH7
        constexpr uint32_t TIMER_SEL_LSCH7 = (2 << 0);  ///< TIMER_SEL_LSCH7
    }

    /// LSCH7_HPOINT Register bits
    namespace lsch7_hpoint_bits {
        constexpr uint32_t HPOINT_LSCH7 = (20 << 0);  ///< HPOINT_LSCH7
    }

    /// LSCH7_DUTY Register bits
    namespace lsch7_duty_bits {
        constexpr uint32_t DUTY_LSCH7 = (25 << 0);  ///< DUTY_LSCH7
    }

    /// LSCH7_CONF1 Register bits
    namespace lsch7_conf1_bits {
        constexpr uint32_t DUTY_START_LSCH7 = (1U << 31);  ///< DUTY_START_LSCH7
        constexpr uint32_t DUTY_INC_LSCH7 = (1U << 30);  ///< DUTY_INC_LSCH7
        constexpr uint32_t DUTY_NUM_LSCH7 = (10 << 20);  ///< DUTY_NUM_LSCH7
        constexpr uint32_t DUTY_CYCLE_LSCH7 = (10 << 10);  ///< DUTY_CYCLE_LSCH7
        constexpr uint32_t DUTY_SCALE_LSCH7 = (10 << 0);  ///< DUTY_SCALE_LSCH7
    }

    /// LSCH7_DUTY_R Register bits
    namespace lsch7_duty_r_bits {
        constexpr uint32_t DUTY_LSCH7 = (25 << 0);  ///< DUTY_LSCH7
    }

    /// HSTIMER0_CONF Register bits
    namespace hstimer0_conf_bits {
        constexpr uint32_t TICK_SEL_HSTIMER0 = (1U << 25);  ///< TICK_SEL_HSTIMER0
        constexpr uint32_t HSTIMER0_RST = (1U << 24);  ///< HSTIMER0_RST
        constexpr uint32_t HSTIMER0_PAUSE = (1U << 23);  ///< HSTIMER0_PAUSE
        constexpr uint32_t DIV_NUM_HSTIMER0 = (18 << 5);  ///< DIV_NUM_HSTIMER0
        constexpr uint32_t HSTIMER0_LIM = (5 << 0);  ///< HSTIMER0_LIM
    }

    /// HSTIMER0_VALUE Register bits
    namespace hstimer0_value_bits {
        constexpr uint32_t HSTIMER0_CNT = (20 << 0);  ///< HSTIMER0_CNT
    }

    /// HSTIMER1_CONF Register bits
    namespace hstimer1_conf_bits {
        constexpr uint32_t TICK_SEL_HSTIMER1 = (1U << 25);  ///< TICK_SEL_HSTIMER1
        constexpr uint32_t HSTIMER1_RST = (1U << 24);  ///< HSTIMER1_RST
        constexpr uint32_t HSTIMER1_PAUSE = (1U << 23);  ///< HSTIMER1_PAUSE
        constexpr uint32_t DIV_NUM_HSTIMER1 = (18 << 5);  ///< DIV_NUM_HSTIMER1
        constexpr uint32_t HSTIMER1_LIM = (5 << 0);  ///< HSTIMER1_LIM
    }

    /// HSTIMER1_VALUE Register bits
    namespace hstimer1_value_bits {
        constexpr uint32_t HSTIMER1_CNT = (20 << 0);  ///< HSTIMER1_CNT
    }

    /// HSTIMER2_CONF Register bits
    namespace hstimer2_conf_bits {
        constexpr uint32_t TICK_SEL_HSTIMER2 = (1U << 25);  ///< TICK_SEL_HSTIMER2
        constexpr uint32_t HSTIMER2_RST = (1U << 24);  ///< HSTIMER2_RST
        constexpr uint32_t HSTIMER2_PAUSE = (1U << 23);  ///< HSTIMER2_PAUSE
        constexpr uint32_t DIV_NUM_HSTIMER2 = (18 << 5);  ///< DIV_NUM_HSTIMER2
        constexpr uint32_t HSTIMER2_LIM = (5 << 0);  ///< HSTIMER2_LIM
    }

    /// HSTIMER2_VALUE Register bits
    namespace hstimer2_value_bits {
        constexpr uint32_t HSTIMER2_CNT = (20 << 0);  ///< HSTIMER2_CNT
    }

    /// HSTIMER3_CONF Register bits
    namespace hstimer3_conf_bits {
        constexpr uint32_t TICK_SEL_HSTIMER3 = (1U << 25);  ///< TICK_SEL_HSTIMER3
        constexpr uint32_t HSTIMER3_RST = (1U << 24);  ///< HSTIMER3_RST
        constexpr uint32_t HSTIMER3_PAUSE = (1U << 23);  ///< HSTIMER3_PAUSE
        constexpr uint32_t DIV_NUM_HSTIMER3 = (18 << 5);  ///< DIV_NUM_HSTIMER3
        constexpr uint32_t HSTIMER3_LIM = (5 << 0);  ///< HSTIMER3_LIM
    }

    /// HSTIMER3_VALUE Register bits
    namespace hstimer3_value_bits {
        constexpr uint32_t HSTIMER3_CNT = (20 << 0);  ///< HSTIMER3_CNT
    }

    /// LSTIMER0_CONF Register bits
    namespace lstimer0_conf_bits {
        constexpr uint32_t LSTIMER0_PARA_UP = (1U << 26);  ///< LSTIMER0_PARA_UP
        constexpr uint32_t TICK_SEL_LSTIMER0 = (1U << 25);  ///< TICK_SEL_LSTIMER0
        constexpr uint32_t LSTIMER0_RST = (1U << 24);  ///< LSTIMER0_RST
        constexpr uint32_t LSTIMER0_PAUSE = (1U << 23);  ///< LSTIMER0_PAUSE
        constexpr uint32_t DIV_NUM_LSTIMER0 = (18 << 5);  ///< DIV_NUM_LSTIMER0
        constexpr uint32_t LSTIMER0_LIM = (5 << 0);  ///< LSTIMER0_LIM
    }

    /// LSTIMER0_VALUE Register bits
    namespace lstimer0_value_bits {
        constexpr uint32_t LSTIMER0_CNT = (20 << 0);  ///< LSTIMER0_CNT
    }

    /// LSTIMER1_CONF Register bits
    namespace lstimer1_conf_bits {
        constexpr uint32_t LSTIMER1_PARA_UP = (1U << 26);  ///< LSTIMER1_PARA_UP
        constexpr uint32_t TICK_SEL_LSTIMER1 = (1U << 25);  ///< TICK_SEL_LSTIMER1
        constexpr uint32_t LSTIMER1_RST = (1U << 24);  ///< LSTIMER1_RST
        constexpr uint32_t LSTIMER1_PAUSE = (1U << 23);  ///< LSTIMER1_PAUSE
        constexpr uint32_t DIV_NUM_LSTIMER1 = (18 << 5);  ///< DIV_NUM_LSTIMER1
        constexpr uint32_t LSTIMER1_LIM = (5 << 0);  ///< LSTIMER1_LIM
    }

    /// LSTIMER1_VALUE Register bits
    namespace lstimer1_value_bits {
        constexpr uint32_t LSTIMER1_CNT = (20 << 0);  ///< LSTIMER1_CNT
    }

    /// LSTIMER2_CONF Register bits
    namespace lstimer2_conf_bits {
        constexpr uint32_t LSTIMER2_PARA_UP = (1U << 26);  ///< LSTIMER2_PARA_UP
        constexpr uint32_t TICK_SEL_LSTIMER2 = (1U << 25);  ///< TICK_SEL_LSTIMER2
        constexpr uint32_t LSTIMER2_RST = (1U << 24);  ///< LSTIMER2_RST
        constexpr uint32_t LSTIMER2_PAUSE = (1U << 23);  ///< LSTIMER2_PAUSE
        constexpr uint32_t DIV_NUM_LSTIMER2 = (18 << 5);  ///< DIV_NUM_LSTIMER2
        constexpr uint32_t LSTIMER2_LIM = (5 << 0);  ///< LSTIMER2_LIM
    }

    /// LSTIMER2_VALUE Register bits
    namespace lstimer2_value_bits {
        constexpr uint32_t LSTIMER2_CNT = (20 << 0);  ///< LSTIMER2_CNT
    }

    /// LSTIMER3_CONF Register bits
    namespace lstimer3_conf_bits {
        constexpr uint32_t LSTIMER3_PARA_UP = (1U << 26);  ///< LSTIMER3_PARA_UP
        constexpr uint32_t TICK_SEL_LSTIMER3 = (1U << 25);  ///< TICK_SEL_LSTIMER3
        constexpr uint32_t LSTIMER3_RST = (1U << 24);  ///< LSTIMER3_RST
        constexpr uint32_t LSTIMER3_PAUSE = (1U << 23);  ///< LSTIMER3_PAUSE
        constexpr uint32_t DIV_NUM_LSTIMER3 = (18 << 5);  ///< DIV_NUM_LSTIMER3
        constexpr uint32_t LSTIMER3_LIM = (5 << 0);  ///< LSTIMER3_LIM
    }

    /// LSTIMER3_VALUE Register bits
    namespace lstimer3_value_bits {
        constexpr uint32_t LSTIMER3_CNT = (20 << 0);  ///< LSTIMER3_CNT
    }

    /// INT_RAW Register bits
    namespace int_raw_bits {
        constexpr uint32_t DUTY_CHNG_END_LSCH7_INT_RAW = (1U << 23);  ///< DUTY_CHNG_END_LSCH7_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_LSCH6_INT_RAW = (1U << 22);  ///< DUTY_CHNG_END_LSCH6_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_LSCH5_INT_RAW = (1U << 21);  ///< DUTY_CHNG_END_LSCH5_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_LSCH4_INT_RAW = (1U << 20);  ///< DUTY_CHNG_END_LSCH4_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_LSCH3_INT_RAW = (1U << 19);  ///< DUTY_CHNG_END_LSCH3_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_LSCH2_INT_RAW = (1U << 18);  ///< DUTY_CHNG_END_LSCH2_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_LSCH1_INT_RAW = (1U << 17);  ///< DUTY_CHNG_END_LSCH1_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_LSCH0_INT_RAW = (1U << 16);  ///< DUTY_CHNG_END_LSCH0_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_HSCH7_INT_RAW = (1U << 15);  ///< DUTY_CHNG_END_HSCH7_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_HSCH6_INT_RAW = (1U << 14);  ///< DUTY_CHNG_END_HSCH6_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_HSCH5_INT_RAW = (1U << 13);  ///< DUTY_CHNG_END_HSCH5_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_HSCH4_INT_RAW = (1U << 12);  ///< DUTY_CHNG_END_HSCH4_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_HSCH3_INT_RAW = (1U << 11);  ///< DUTY_CHNG_END_HSCH3_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_HSCH2_INT_RAW = (1U << 10);  ///< DUTY_CHNG_END_HSCH2_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_HSCH1_INT_RAW = (1U << 9);  ///< DUTY_CHNG_END_HSCH1_INT_RAW
        constexpr uint32_t DUTY_CHNG_END_HSCH0_INT_RAW = (1U << 8);  ///< DUTY_CHNG_END_HSCH0_INT_RAW
        constexpr uint32_t LSTIMER3_OVF_INT_RAW = (1U << 7);  ///< LSTIMER3_OVF_INT_RAW
        constexpr uint32_t LSTIMER2_OVF_INT_RAW = (1U << 6);  ///< LSTIMER2_OVF_INT_RAW
        constexpr uint32_t LSTIMER1_OVF_INT_RAW = (1U << 5);  ///< LSTIMER1_OVF_INT_RAW
        constexpr uint32_t LSTIMER0_OVF_INT_RAW = (1U << 4);  ///< LSTIMER0_OVF_INT_RAW
        constexpr uint32_t HSTIMER3_OVF_INT_RAW = (1U << 3);  ///< HSTIMER3_OVF_INT_RAW
        constexpr uint32_t HSTIMER2_OVF_INT_RAW = (1U << 2);  ///< HSTIMER2_OVF_INT_RAW
        constexpr uint32_t HSTIMER1_OVF_INT_RAW = (1U << 1);  ///< HSTIMER1_OVF_INT_RAW
        constexpr uint32_t HSTIMER0_OVF_INT_RAW = (1U << 0);  ///< HSTIMER0_OVF_INT_RAW
    }

    /// INT_ST Register bits
    namespace int_st_bits {
        constexpr uint32_t DUTY_CHNG_END_LSCH7_INT_ST = (1U << 23);  ///< DUTY_CHNG_END_LSCH7_INT_ST
        constexpr uint32_t DUTY_CHNG_END_LSCH6_INT_ST = (1U << 22);  ///< DUTY_CHNG_END_LSCH6_INT_ST
        constexpr uint32_t DUTY_CHNG_END_LSCH5_INT_ST = (1U << 21);  ///< DUTY_CHNG_END_LSCH5_INT_ST
        constexpr uint32_t DUTY_CHNG_END_LSCH4_INT_ST = (1U << 20);  ///< DUTY_CHNG_END_LSCH4_INT_ST
        constexpr uint32_t DUTY_CHNG_END_LSCH3_INT_ST = (1U << 19);  ///< DUTY_CHNG_END_LSCH3_INT_ST
        constexpr uint32_t DUTY_CHNG_END_LSCH2_INT_ST = (1U << 18);  ///< DUTY_CHNG_END_LSCH2_INT_ST
        constexpr uint32_t DUTY_CHNG_END_LSCH1_INT_ST = (1U << 17);  ///< DUTY_CHNG_END_LSCH1_INT_ST
        constexpr uint32_t DUTY_CHNG_END_LSCH0_INT_ST = (1U << 16);  ///< DUTY_CHNG_END_LSCH0_INT_ST
        constexpr uint32_t DUTY_CHNG_END_HSCH7_INT_ST = (1U << 15);  ///< DUTY_CHNG_END_HSCH7_INT_ST
        constexpr uint32_t DUTY_CHNG_END_HSCH6_INT_ST = (1U << 14);  ///< DUTY_CHNG_END_HSCH6_INT_ST
        constexpr uint32_t DUTY_CHNG_END_HSCH5_INT_ST = (1U << 13);  ///< DUTY_CHNG_END_HSCH5_INT_ST
        constexpr uint32_t DUTY_CHNG_END_HSCH4_INT_ST = (1U << 12);  ///< DUTY_CHNG_END_HSCH4_INT_ST
        constexpr uint32_t DUTY_CHNG_END_HSCH3_INT_ST = (1U << 11);  ///< DUTY_CHNG_END_HSCH3_INT_ST
        constexpr uint32_t DUTY_CHNG_END_HSCH2_INT_ST = (1U << 10);  ///< DUTY_CHNG_END_HSCH2_INT_ST
        constexpr uint32_t DUTY_CHNG_END_HSCH1_INT_ST = (1U << 9);  ///< DUTY_CHNG_END_HSCH1_INT_ST
        constexpr uint32_t DUTY_CHNG_END_HSCH0_INT_ST = (1U << 8);  ///< DUTY_CHNG_END_HSCH0_INT_ST
        constexpr uint32_t LSTIMER3_OVF_INT_ST = (1U << 7);  ///< LSTIMER3_OVF_INT_ST
        constexpr uint32_t LSTIMER2_OVF_INT_ST = (1U << 6);  ///< LSTIMER2_OVF_INT_ST
        constexpr uint32_t LSTIMER1_OVF_INT_ST = (1U << 5);  ///< LSTIMER1_OVF_INT_ST
        constexpr uint32_t LSTIMER0_OVF_INT_ST = (1U << 4);  ///< LSTIMER0_OVF_INT_ST
        constexpr uint32_t HSTIMER3_OVF_INT_ST = (1U << 3);  ///< HSTIMER3_OVF_INT_ST
        constexpr uint32_t HSTIMER2_OVF_INT_ST = (1U << 2);  ///< HSTIMER2_OVF_INT_ST
        constexpr uint32_t HSTIMER1_OVF_INT_ST = (1U << 1);  ///< HSTIMER1_OVF_INT_ST
        constexpr uint32_t HSTIMER0_OVF_INT_ST = (1U << 0);  ///< HSTIMER0_OVF_INT_ST
    }

    /// INT_ENA Register bits
    namespace int_ena_bits {
        constexpr uint32_t DUTY_CHNG_END_LSCH7_INT_ENA = (1U << 23);  ///< DUTY_CHNG_END_LSCH7_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_LSCH6_INT_ENA = (1U << 22);  ///< DUTY_CHNG_END_LSCH6_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_LSCH5_INT_ENA = (1U << 21);  ///< DUTY_CHNG_END_LSCH5_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_LSCH4_INT_ENA = (1U << 20);  ///< DUTY_CHNG_END_LSCH4_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_LSCH3_INT_ENA = (1U << 19);  ///< DUTY_CHNG_END_LSCH3_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_LSCH2_INT_ENA = (1U << 18);  ///< DUTY_CHNG_END_LSCH2_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_LSCH1_INT_ENA = (1U << 17);  ///< DUTY_CHNG_END_LSCH1_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_LSCH0_INT_ENA = (1U << 16);  ///< DUTY_CHNG_END_LSCH0_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_HSCH7_INT_ENA = (1U << 15);  ///< DUTY_CHNG_END_HSCH7_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_HSCH6_INT_ENA = (1U << 14);  ///< DUTY_CHNG_END_HSCH6_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_HSCH5_INT_ENA = (1U << 13);  ///< DUTY_CHNG_END_HSCH5_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_HSCH4_INT_ENA = (1U << 12);  ///< DUTY_CHNG_END_HSCH4_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_HSCH3_INT_ENA = (1U << 11);  ///< DUTY_CHNG_END_HSCH3_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_HSCH2_INT_ENA = (1U << 10);  ///< DUTY_CHNG_END_HSCH2_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_HSCH1_INT_ENA = (1U << 9);  ///< DUTY_CHNG_END_HSCH1_INT_ENA
        constexpr uint32_t DUTY_CHNG_END_HSCH0_INT_ENA = (1U << 8);  ///< DUTY_CHNG_END_HSCH0_INT_ENA
        constexpr uint32_t LSTIMER3_OVF_INT_ENA = (1U << 7);  ///< LSTIMER3_OVF_INT_ENA
        constexpr uint32_t LSTIMER2_OVF_INT_ENA = (1U << 6);  ///< LSTIMER2_OVF_INT_ENA
        constexpr uint32_t LSTIMER1_OVF_INT_ENA = (1U << 5);  ///< LSTIMER1_OVF_INT_ENA
        constexpr uint32_t LSTIMER0_OVF_INT_ENA = (1U << 4);  ///< LSTIMER0_OVF_INT_ENA
        constexpr uint32_t HSTIMER3_OVF_INT_ENA = (1U << 3);  ///< HSTIMER3_OVF_INT_ENA
        constexpr uint32_t HSTIMER2_OVF_INT_ENA = (1U << 2);  ///< HSTIMER2_OVF_INT_ENA
        constexpr uint32_t HSTIMER1_OVF_INT_ENA = (1U << 1);  ///< HSTIMER1_OVF_INT_ENA
        constexpr uint32_t HSTIMER0_OVF_INT_ENA = (1U << 0);  ///< HSTIMER0_OVF_INT_ENA
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t DUTY_CHNG_END_LSCH7_INT_CLR = (1U << 23);  ///< DUTY_CHNG_END_LSCH7_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_LSCH6_INT_CLR = (1U << 22);  ///< DUTY_CHNG_END_LSCH6_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_LSCH5_INT_CLR = (1U << 21);  ///< DUTY_CHNG_END_LSCH5_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_LSCH4_INT_CLR = (1U << 20);  ///< DUTY_CHNG_END_LSCH4_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_LSCH3_INT_CLR = (1U << 19);  ///< DUTY_CHNG_END_LSCH3_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_LSCH2_INT_CLR = (1U << 18);  ///< DUTY_CHNG_END_LSCH2_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_LSCH1_INT_CLR = (1U << 17);  ///< DUTY_CHNG_END_LSCH1_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_LSCH0_INT_CLR = (1U << 16);  ///< DUTY_CHNG_END_LSCH0_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_HSCH7_INT_CLR = (1U << 15);  ///< DUTY_CHNG_END_HSCH7_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_HSCH6_INT_CLR = (1U << 14);  ///< DUTY_CHNG_END_HSCH6_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_HSCH5_INT_CLR = (1U << 13);  ///< DUTY_CHNG_END_HSCH5_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_HSCH4_INT_CLR = (1U << 12);  ///< DUTY_CHNG_END_HSCH4_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_HSCH3_INT_CLR = (1U << 11);  ///< DUTY_CHNG_END_HSCH3_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_HSCH2_INT_CLR = (1U << 10);  ///< DUTY_CHNG_END_HSCH2_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_HSCH1_INT_CLR = (1U << 9);  ///< DUTY_CHNG_END_HSCH1_INT_CLR
        constexpr uint32_t DUTY_CHNG_END_HSCH0_INT_CLR = (1U << 8);  ///< DUTY_CHNG_END_HSCH0_INT_CLR
        constexpr uint32_t LSTIMER3_OVF_INT_CLR = (1U << 7);  ///< LSTIMER3_OVF_INT_CLR
        constexpr uint32_t LSTIMER2_OVF_INT_CLR = (1U << 6);  ///< LSTIMER2_OVF_INT_CLR
        constexpr uint32_t LSTIMER1_OVF_INT_CLR = (1U << 5);  ///< LSTIMER1_OVF_INT_CLR
        constexpr uint32_t LSTIMER0_OVF_INT_CLR = (1U << 4);  ///< LSTIMER0_OVF_INT_CLR
        constexpr uint32_t HSTIMER3_OVF_INT_CLR = (1U << 3);  ///< HSTIMER3_OVF_INT_CLR
        constexpr uint32_t HSTIMER2_OVF_INT_CLR = (1U << 2);  ///< HSTIMER2_OVF_INT_CLR
        constexpr uint32_t HSTIMER1_OVF_INT_CLR = (1U << 1);  ///< HSTIMER1_OVF_INT_CLR
        constexpr uint32_t HSTIMER0_OVF_INT_CLR = (1U << 0);  ///< HSTIMER0_OVF_INT_CLR
    }

    /// CONF Register bits
    namespace conf_bits {
        constexpr uint32_t APB_CLK_SEL = (1U << 0);  ///< APB_CLK_SEL
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t DATE = (32 << 0);  ///< DATE
    }

}

// ============================================================================
// UHCI0 Peripheral
// ============================================================================

namespace uhci0 {
    /// Base addresses
    constexpr uint32_t UHCI0_BASE = 0x3FF54000;

    /// UHCI0 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* UHCI0 = reinterpret_cast<Registers*>(UHCI0_BASE);

}

// ============================================================================
// SENS Peripheral
// ============================================================================

namespace sens {
    /// Base addresses
    constexpr uint32_t SENS_BASE = 0x3FF48800;

    /// SENS Register structure
    struct Registers {
        volatile uint32_t SAR_READ_CTRL;  ///< Offset: 0x00 - SENS_SAR_READ_CTRL
        volatile uint32_t SAR_READ_STATUS1;  ///< Offset: 0x04 - SENS_SAR_READ_STATUS1
        volatile uint32_t SAR_MEAS_WAIT1;  ///< Offset: 0x08 - SENS_SAR_MEAS_WAIT1
        volatile uint32_t SAR_MEAS_WAIT2;  ///< Offset: 0x0C - SENS_SAR_MEAS_WAIT2
        volatile uint32_t SAR_MEAS_CTRL;  ///< Offset: 0x10 - SENS_SAR_MEAS_CTRL
        volatile uint32_t SAR_READ_STATUS2;  ///< Offset: 0x14 - SENS_SAR_READ_STATUS2
        volatile uint32_t ULP_CP_SLEEP_CYC0;  ///< Offset: 0x18 - SENS_ULP_CP_SLEEP_CYC0
        volatile uint32_t ULP_CP_SLEEP_CYC1;  ///< Offset: 0x1C - SENS_ULP_CP_SLEEP_CYC1
        volatile uint32_t ULP_CP_SLEEP_CYC2;  ///< Offset: 0x20 - SENS_ULP_CP_SLEEP_CYC2
        volatile uint32_t ULP_CP_SLEEP_CYC3;  ///< Offset: 0x24 - SENS_ULP_CP_SLEEP_CYC3
        volatile uint32_t ULP_CP_SLEEP_CYC4;  ///< Offset: 0x28 - SENS_ULP_CP_SLEEP_CYC4
        volatile uint32_t SAR_START_FORCE;  ///< Offset: 0x2C - SENS_SAR_START_FORCE
        volatile uint32_t SAR_MEM_WR_CTRL;  ///< Offset: 0x30 - SENS_SAR_MEM_WR_CTRL
        volatile uint32_t SAR_ATTEN1;  ///< Offset: 0x34 - SENS_SAR_ATTEN1
        volatile uint32_t SAR_ATTEN2;  ///< Offset: 0x38 - SENS_SAR_ATTEN2
        volatile uint32_t SAR_SLAVE_ADDR1;  ///< Offset: 0x3C - SENS_SAR_SLAVE_ADDR1
        volatile uint32_t SAR_SLAVE_ADDR2;  ///< Offset: 0x40 - SENS_SAR_SLAVE_ADDR2
        volatile uint32_t SAR_SLAVE_ADDR3;  ///< Offset: 0x44 - SENS_SAR_SLAVE_ADDR3
        volatile uint32_t SAR_SLAVE_ADDR4;  ///< Offset: 0x48 - SENS_SAR_SLAVE_ADDR4
        volatile uint32_t SAR_TSENS_CTRL;  ///< Offset: 0x4C - SENS_SAR_TSENS_CTRL
        volatile uint32_t SAR_I2C_CTRL;  ///< Offset: 0x50 - SENS_SAR_I2C_CTRL
        volatile uint32_t SAR_MEAS_START1;  ///< Offset: 0x54 - SENS_SAR_MEAS_START1
        volatile uint32_t SAR_TOUCH_CTRL1;  ///< Offset: 0x58 - SENS_SAR_TOUCH_CTRL1
        volatile uint32_t SAR_TOUCH_THRES1;  ///< Offset: 0x5C - SENS_SAR_TOUCH_THRES1
        volatile uint32_t SAR_TOUCH_THRES2;  ///< Offset: 0x60 - SENS_SAR_TOUCH_THRES2
        volatile uint32_t SAR_TOUCH_THRES3;  ///< Offset: 0x64 - SENS_SAR_TOUCH_THRES3
        volatile uint32_t SAR_TOUCH_THRES4;  ///< Offset: 0x68 - SENS_SAR_TOUCH_THRES4
        volatile uint32_t SAR_TOUCH_THRES5;  ///< Offset: 0x6C - SENS_SAR_TOUCH_THRES5
        volatile uint32_t SAR_TOUCH_OUT1;  ///< Offset: 0x70 - SENS_SAR_TOUCH_OUT1
        volatile uint32_t SAR_TOUCH_OUT2;  ///< Offset: 0x74 - SENS_SAR_TOUCH_OUT2
        volatile uint32_t SAR_TOUCH_OUT3;  ///< Offset: 0x78 - SENS_SAR_TOUCH_OUT3
        volatile uint32_t SAR_TOUCH_OUT4;  ///< Offset: 0x7C - SENS_SAR_TOUCH_OUT4
        volatile uint32_t SAR_TOUCH_OUT5;  ///< Offset: 0x80 - SENS_SAR_TOUCH_OUT5
        volatile uint32_t SAR_TOUCH_CTRL2;  ///< Offset: 0x84 - SENS_SAR_TOUCH_CTRL2
        volatile uint32_t SAR_TOUCH_ENABLE;  ///< Offset: 0x8C - SENS_SAR_TOUCH_ENABLE
        volatile uint32_t SAR_READ_CTRL2;  ///< Offset: 0x90 - SENS_SAR_READ_CTRL2
        volatile uint32_t SAR_MEAS_START2;  ///< Offset: 0x94 - SENS_SAR_MEAS_START2
        volatile uint32_t SAR_DAC_CTRL1;  ///< Offset: 0x98 - SENS_SAR_DAC_CTRL1
        volatile uint32_t SAR_DAC_CTRL2;  ///< Offset: 0x9C - SENS_SAR_DAC_CTRL2
        volatile uint32_t SAR_MEAS_CTRL2;  ///< Offset: 0xA0 - SENS_SAR_MEAS_CTRL2
        volatile uint32_t SAR_NOUSE;  ///< Offset: 0xF8 - SENS_SAR_NOUSE
        volatile uint32_t SARDATE;  ///< Offset: 0xFC - SENS_SARDATE
    };

    /// Peripheral instances
    inline Registers* SENS = reinterpret_cast<Registers*>(SENS_BASE);

    // Bit definitions
    /// SAR_READ_CTRL Register bits
    namespace sar_read_ctrl_bits {
        constexpr uint32_t SAR1_DATA_INV = (1U << 28);  ///< SAR1_DATA_INV
        constexpr uint32_t SAR1_DIG_FORCE = (1U << 27);  ///< SAR1_DIG_FORCE
        constexpr uint32_t SAR1_SAMPLE_NUM = (8 << 19);  ///< SAR1_SAMPLE_NUM
        constexpr uint32_t SAR1_CLK_GATED = (1U << 18);  ///< SAR1_CLK_GATED
        constexpr uint32_t SAR1_SAMPLE_BIT = (2 << 16);  ///< SAR1_SAMPLE_BIT
        constexpr uint32_t SAR1_SAMPLE_CYCLE = (8 << 8);  ///< SAR1_SAMPLE_CYCLE
        constexpr uint32_t SAR1_CLK_DIV = (8 << 0);  ///< SAR1_CLK_DIV
    }

    /// SAR_READ_STATUS1 Register bits
    namespace sar_read_status1_bits {
        constexpr uint32_t SAR1_READER_STATUS = (32 << 0);  ///< SAR1_READER_STATUS
    }

    /// SAR_MEAS_WAIT1 Register bits
    namespace sar_meas_wait1_bits {
        constexpr uint32_t SAR_AMP_WAIT2 = (16 << 16);  ///< SAR_AMP_WAIT2
        constexpr uint32_t SAR_AMP_WAIT1 = (16 << 0);  ///< SAR_AMP_WAIT1
    }

    /// SAR_MEAS_WAIT2 Register bits
    namespace sar_meas_wait2_bits {
        constexpr uint32_t SAR2_RSTB_WAIT = (8 << 20);  ///< SAR2_RSTB_WAIT
        constexpr uint32_t FORCE_XPD_SAR = (2 << 18);  ///< FORCE_XPD_SAR
        constexpr uint32_t FORCE_XPD_AMP = (2 << 16);  ///< FORCE_XPD_AMP
        constexpr uint32_t SAR_AMP_WAIT3 = (16 << 0);  ///< SAR_AMP_WAIT3
    }

    /// SAR_MEAS_CTRL Register bits
    namespace sar_meas_ctrl_bits {
        constexpr uint32_t SAR2_XPD_WAIT = (8 << 24);  ///< SAR2_XPD_WAIT
        constexpr uint32_t SAR_RSTB_FSM = (4 << 20);  ///< SAR_RSTB_FSM
        constexpr uint32_t XPD_SAR_FSM = (4 << 16);  ///< XPD_SAR_FSM
        constexpr uint32_t AMP_SHORT_REF_GND_FSM = (4 << 12);  ///< AMP_SHORT_REF_GND_FSM
        constexpr uint32_t AMP_SHORT_REF_FSM = (4 << 8);  ///< AMP_SHORT_REF_FSM
        constexpr uint32_t AMP_RST_FB_FSM = (4 << 4);  ///< AMP_RST_FB_FSM
        constexpr uint32_t XPD_SAR_AMP_FSM = (4 << 0);  ///< XPD_SAR_AMP_FSM
    }

    /// SAR_READ_STATUS2 Register bits
    namespace sar_read_status2_bits {
        constexpr uint32_t SAR2_READER_STATUS = (32 << 0);  ///< SAR2_READER_STATUS
    }

    /// ULP_CP_SLEEP_CYC0 Register bits
    namespace ulp_cp_sleep_cyc0_bits {
        constexpr uint32_t SLEEP_CYCLES_S0 = (32 << 0);  ///< SLEEP_CYCLES_S0
    }

    /// ULP_CP_SLEEP_CYC1 Register bits
    namespace ulp_cp_sleep_cyc1_bits {
        constexpr uint32_t SLEEP_CYCLES_S1 = (32 << 0);  ///< SLEEP_CYCLES_S1
    }

    /// ULP_CP_SLEEP_CYC2 Register bits
    namespace ulp_cp_sleep_cyc2_bits {
        constexpr uint32_t SLEEP_CYCLES_S2 = (32 << 0);  ///< SLEEP_CYCLES_S2
    }

    /// ULP_CP_SLEEP_CYC3 Register bits
    namespace ulp_cp_sleep_cyc3_bits {
        constexpr uint32_t SLEEP_CYCLES_S3 = (32 << 0);  ///< SLEEP_CYCLES_S3
    }

    /// ULP_CP_SLEEP_CYC4 Register bits
    namespace ulp_cp_sleep_cyc4_bits {
        constexpr uint32_t SLEEP_CYCLES_S4 = (32 << 0);  ///< SLEEP_CYCLES_S4
    }

    /// SAR_START_FORCE Register bits
    namespace sar_start_force_bits {
        constexpr uint32_t SAR2_PWDET_EN = (1U << 24);  ///< SAR2_PWDET_EN
        constexpr uint32_t SAR1_STOP = (1U << 23);  ///< SAR1_STOP
        constexpr uint32_t SAR2_STOP = (1U << 22);  ///< SAR2_STOP
        constexpr uint32_t PC_INIT = (11 << 11);  ///< PC_INIT
        constexpr uint32_t SARCLK_EN = (1U << 10);  ///< SARCLK_EN
        constexpr uint32_t ULP_CP_START_TOP = (1U << 9);  ///< ULP_CP_START_TOP
        constexpr uint32_t ULP_CP_FORCE_START_TOP = (1U << 8);  ///< ULP_CP_FORCE_START_TOP
        constexpr uint32_t SAR2_PWDET_CCT = (3 << 5);  ///< SAR2_PWDET_CCT
        constexpr uint32_t SAR2_EN_TEST = (1U << 4);  ///< SAR2_EN_TEST
        constexpr uint32_t SAR2_BIT_WIDTH = (2 << 2);  ///< SAR2_BIT_WIDTH
        constexpr uint32_t SAR1_BIT_WIDTH = (2 << 0);  ///< SAR1_BIT_WIDTH
    }

    /// SAR_MEM_WR_CTRL Register bits
    namespace sar_mem_wr_ctrl_bits {
        constexpr uint32_t RTC_MEM_WR_OFFST_CLR = (1U << 22);  ///< RTC_MEM_WR_OFFST_CLR
        constexpr uint32_t MEM_WR_ADDR_SIZE = (11 << 11);  ///< MEM_WR_ADDR_SIZE
        constexpr uint32_t MEM_WR_ADDR_INIT = (11 << 0);  ///< MEM_WR_ADDR_INIT
    }

    /// SAR_ATTEN1 Register bits
    namespace sar_atten1_bits {
        constexpr uint32_t SAR1_ATTEN = (32 << 0);  ///< SAR1_ATTEN
    }

    /// SAR_ATTEN2 Register bits
    namespace sar_atten2_bits {
        constexpr uint32_t SAR2_ATTEN = (32 << 0);  ///< SAR2_ATTEN
    }

    /// SAR_SLAVE_ADDR1 Register bits
    namespace sar_slave_addr1_bits {
        constexpr uint32_t MEAS_STATUS = (8 << 22);  ///< MEAS_STATUS
        constexpr uint32_t I2C_SLAVE_ADDR0 = (11 << 11);  ///< I2C_SLAVE_ADDR0
        constexpr uint32_t I2C_SLAVE_ADDR1 = (11 << 0);  ///< I2C_SLAVE_ADDR1
    }

    /// SAR_SLAVE_ADDR2 Register bits
    namespace sar_slave_addr2_bits {
        constexpr uint32_t I2C_SLAVE_ADDR2 = (11 << 11);  ///< I2C_SLAVE_ADDR2
        constexpr uint32_t I2C_SLAVE_ADDR3 = (11 << 0);  ///< I2C_SLAVE_ADDR3
    }

    /// SAR_SLAVE_ADDR3 Register bits
    namespace sar_slave_addr3_bits {
        constexpr uint32_t TSENS_RDY_OUT = (1U << 30);  ///< TSENS_RDY_OUT
        constexpr uint32_t TSENS_OUT = (8 << 22);  ///< TSENS_OUT
        constexpr uint32_t I2C_SLAVE_ADDR4 = (11 << 11);  ///< I2C_SLAVE_ADDR4
        constexpr uint32_t I2C_SLAVE_ADDR5 = (11 << 0);  ///< I2C_SLAVE_ADDR5
    }

    /// SAR_SLAVE_ADDR4 Register bits
    namespace sar_slave_addr4_bits {
        constexpr uint32_t I2C_DONE = (1U << 30);  ///< I2C_DONE
        constexpr uint32_t I2C_RDATA = (8 << 22);  ///< I2C_RDATA
        constexpr uint32_t I2C_SLAVE_ADDR6 = (11 << 11);  ///< I2C_SLAVE_ADDR6
        constexpr uint32_t I2C_SLAVE_ADDR7 = (11 << 0);  ///< I2C_SLAVE_ADDR7
    }

    /// SAR_TSENS_CTRL Register bits
    namespace sar_tsens_ctrl_bits {
        constexpr uint32_t TSENS_DUMP_OUT = (1U << 26);  ///< TSENS_DUMP_OUT
        constexpr uint32_t TSENS_POWER_UP_FORCE = (1U << 25);  ///< TSENS_POWER_UP_FORCE
        constexpr uint32_t TSENS_POWER_UP = (1U << 24);  ///< TSENS_POWER_UP
        constexpr uint32_t TSENS_CLK_DIV = (8 << 16);  ///< TSENS_CLK_DIV
        constexpr uint32_t TSENS_IN_INV = (1U << 15);  ///< TSENS_IN_INV
        constexpr uint32_t TSENS_CLK_GATED = (1U << 14);  ///< TSENS_CLK_GATED
        constexpr uint32_t TSENS_CLK_INV = (1U << 13);  ///< TSENS_CLK_INV
        constexpr uint32_t TSENS_XPD_FORCE = (1U << 12);  ///< TSENS_XPD_FORCE
        constexpr uint32_t TSENS_XPD_WAIT = (12 << 0);  ///< TSENS_XPD_WAIT
    }

    /// SAR_I2C_CTRL Register bits
    namespace sar_i2c_ctrl_bits {
        constexpr uint32_t SAR_I2C_START_FORCE = (1U << 29);  ///< SAR_I2C_START_FORCE
        constexpr uint32_t SAR_I2C_START = (1U << 28);  ///< SAR_I2C_START
        constexpr uint32_t SAR_I2C_CTRL = (28 << 0);  ///< SAR_I2C_CTRL
    }

    /// SAR_MEAS_START1 Register bits
    namespace sar_meas_start1_bits {
        constexpr uint32_t SAR1_EN_PAD_FORCE = (1U << 31);  ///< SAR1_EN_PAD_FORCE
        constexpr uint32_t SAR1_EN_PAD = (12 << 19);  ///< SAR1_EN_PAD
        constexpr uint32_t MEAS1_START_FORCE = (1U << 18);  ///< MEAS1_START_FORCE
        constexpr uint32_t MEAS1_START_SAR = (1U << 17);  ///< MEAS1_START_SAR
        constexpr uint32_t MEAS1_DONE_SAR = (1U << 16);  ///< MEAS1_DONE_SAR
        constexpr uint32_t MEAS1_DATA_SAR = (16 << 0);  ///< MEAS1_DATA_SAR
    }

    /// SAR_TOUCH_CTRL1 Register bits
    namespace sar_touch_ctrl1_bits {
        constexpr uint32_t HALL_PHASE_FORCE = (1U << 27);  ///< HALL_PHASE_FORCE
        constexpr uint32_t XPD_HALL_FORCE = (1U << 26);  ///< XPD_HALL_FORCE
        constexpr uint32_t TOUCH_OUT_1EN = (1U << 25);  ///< TOUCH_OUT_1EN
        constexpr uint32_t TOUCH_OUT_SEL = (1U << 24);  ///< TOUCH_OUT_SEL
        constexpr uint32_t TOUCH_XPD_WAIT = (8 << 16);  ///< TOUCH_XPD_WAIT
        constexpr uint32_t TOUCH_MEAS_DELAY = (16 << 0);  ///< TOUCH_MEAS_DELAY
    }

    /// SAR_TOUCH_THRES1 Register bits
    namespace sar_touch_thres1_bits {
        constexpr uint32_t TOUCH_OUT_TH0 = (16 << 16);  ///< TOUCH_OUT_TH0
        constexpr uint32_t TOUCH_OUT_TH1 = (16 << 0);  ///< TOUCH_OUT_TH1
    }

    /// SAR_TOUCH_THRES2 Register bits
    namespace sar_touch_thres2_bits {
        constexpr uint32_t TOUCH_OUT_TH2 = (16 << 16);  ///< TOUCH_OUT_TH2
        constexpr uint32_t TOUCH_OUT_TH3 = (16 << 0);  ///< TOUCH_OUT_TH3
    }

    /// SAR_TOUCH_THRES3 Register bits
    namespace sar_touch_thres3_bits {
        constexpr uint32_t TOUCH_OUT_TH4 = (16 << 16);  ///< TOUCH_OUT_TH4
        constexpr uint32_t TOUCH_OUT_TH5 = (16 << 0);  ///< TOUCH_OUT_TH5
    }

    /// SAR_TOUCH_THRES4 Register bits
    namespace sar_touch_thres4_bits {
        constexpr uint32_t TOUCH_OUT_TH6 = (16 << 16);  ///< TOUCH_OUT_TH6
        constexpr uint32_t TOUCH_OUT_TH7 = (16 << 0);  ///< TOUCH_OUT_TH7
    }

    /// SAR_TOUCH_THRES5 Register bits
    namespace sar_touch_thres5_bits {
        constexpr uint32_t TOUCH_OUT_TH8 = (16 << 16);  ///< TOUCH_OUT_TH8
        constexpr uint32_t TOUCH_OUT_TH9 = (16 << 0);  ///< TOUCH_OUT_TH9
    }

    /// SAR_TOUCH_OUT1 Register bits
    namespace sar_touch_out1_bits {
        constexpr uint32_t TOUCH_MEAS_OUT0 = (16 << 16);  ///< TOUCH_MEAS_OUT0
        constexpr uint32_t TOUCH_MEAS_OUT1 = (16 << 0);  ///< TOUCH_MEAS_OUT1
    }

    /// SAR_TOUCH_OUT2 Register bits
    namespace sar_touch_out2_bits {
        constexpr uint32_t TOUCH_MEAS_OUT2 = (16 << 16);  ///< TOUCH_MEAS_OUT2
        constexpr uint32_t TOUCH_MEAS_OUT3 = (16 << 0);  ///< TOUCH_MEAS_OUT3
    }

    /// SAR_TOUCH_OUT3 Register bits
    namespace sar_touch_out3_bits {
        constexpr uint32_t TOUCH_MEAS_OUT4 = (16 << 16);  ///< TOUCH_MEAS_OUT4
        constexpr uint32_t TOUCH_MEAS_OUT5 = (16 << 0);  ///< TOUCH_MEAS_OUT5
    }

    /// SAR_TOUCH_OUT4 Register bits
    namespace sar_touch_out4_bits {
        constexpr uint32_t TOUCH_MEAS_OUT6 = (16 << 16);  ///< TOUCH_MEAS_OUT6
        constexpr uint32_t TOUCH_MEAS_OUT7 = (16 << 0);  ///< TOUCH_MEAS_OUT7
    }

    /// SAR_TOUCH_OUT5 Register bits
    namespace sar_touch_out5_bits {
        constexpr uint32_t TOUCH_MEAS_OUT8 = (16 << 16);  ///< TOUCH_MEAS_OUT8
        constexpr uint32_t TOUCH_MEAS_OUT9 = (16 << 0);  ///< TOUCH_MEAS_OUT9
    }

    /// SAR_TOUCH_CTRL2 Register bits
    namespace sar_touch_ctrl2_bits {
        constexpr uint32_t TOUCH_MEAS_EN_CLR = (1U << 30);  ///< TOUCH_MEAS_EN_CLR
        constexpr uint32_t TOUCH_SLEEP_CYCLES = (16 << 14);  ///< TOUCH_SLEEP_CYCLES
        constexpr uint32_t TOUCH_START_FORCE = (1U << 13);  ///< TOUCH_START_FORCE
        constexpr uint32_t TOUCH_START_EN = (1U << 12);  ///< TOUCH_START_EN
        constexpr uint32_t TOUCH_START_FSM_EN = (1U << 11);  ///< TOUCH_START_FSM_EN
        constexpr uint32_t TOUCH_MEAS_DONE = (1U << 10);  ///< TOUCH_MEAS_DONE
        constexpr uint32_t TOUCH_MEAS_EN = (10 << 0);  ///< TOUCH_MEAS_EN
    }

    /// SAR_TOUCH_ENABLE Register bits
    namespace sar_touch_enable_bits {
        constexpr uint32_t TOUCH_PAD_OUTEN1 = (10 << 20);  ///< TOUCH_PAD_OUTEN1
        constexpr uint32_t TOUCH_PAD_OUTEN2 = (10 << 10);  ///< TOUCH_PAD_OUTEN2
        constexpr uint32_t TOUCH_PAD_WORKEN = (10 << 0);  ///< TOUCH_PAD_WORKEN
    }

    /// SAR_READ_CTRL2 Register bits
    namespace sar_read_ctrl2_bits {
        constexpr uint32_t SAR2_DATA_INV = (1U << 29);  ///< SAR2_DATA_INV
        constexpr uint32_t SAR2_DIG_FORCE = (1U << 28);  ///< SAR2_DIG_FORCE
        constexpr uint32_t SAR2_PWDET_FORCE = (1U << 27);  ///< SAR2_PWDET_FORCE
        constexpr uint32_t SAR2_SAMPLE_NUM = (8 << 19);  ///< SAR2_SAMPLE_NUM
        constexpr uint32_t SAR2_CLK_GATED = (1U << 18);  ///< SAR2_CLK_GATED
        constexpr uint32_t SAR2_SAMPLE_BIT = (2 << 16);  ///< SAR2_SAMPLE_BIT
        constexpr uint32_t SAR2_SAMPLE_CYCLE = (8 << 8);  ///< SAR2_SAMPLE_CYCLE
        constexpr uint32_t SAR2_CLK_DIV = (8 << 0);  ///< SAR2_CLK_DIV
    }

    /// SAR_MEAS_START2 Register bits
    namespace sar_meas_start2_bits {
        constexpr uint32_t SAR2_EN_PAD_FORCE = (1U << 31);  ///< SAR2_EN_PAD_FORCE
        constexpr uint32_t SAR2_EN_PAD = (12 << 19);  ///< SAR2_EN_PAD
        constexpr uint32_t MEAS2_START_FORCE = (1U << 18);  ///< MEAS2_START_FORCE
        constexpr uint32_t MEAS2_START_SAR = (1U << 17);  ///< MEAS2_START_SAR
        constexpr uint32_t MEAS2_DONE_SAR = (1U << 16);  ///< MEAS2_DONE_SAR
        constexpr uint32_t MEAS2_DATA_SAR = (16 << 0);  ///< MEAS2_DATA_SAR
    }

    /// SAR_DAC_CTRL1 Register bits
    namespace sar_dac_ctrl1_bits {
        constexpr uint32_t DAC_CLK_INV = (1U << 25);  ///< DAC_CLK_INV
        constexpr uint32_t DAC_CLK_FORCE_HIGH = (1U << 24);  ///< DAC_CLK_FORCE_HIGH
        constexpr uint32_t DAC_CLK_FORCE_LOW = (1U << 23);  ///< DAC_CLK_FORCE_LOW
        constexpr uint32_t DAC_DIG_FORCE = (1U << 22);  ///< DAC_DIG_FORCE
        constexpr uint32_t DEBUG_BIT_SEL = (5 << 17);  ///< DEBUG_BIT_SEL
        constexpr uint32_t SW_TONE_EN = (1U << 16);  ///< SW_TONE_EN
        constexpr uint32_t SW_FSTEP = (16 << 0);  ///< SW_FSTEP
    }

    /// SAR_DAC_CTRL2 Register bits
    namespace sar_dac_ctrl2_bits {
        constexpr uint32_t DAC_CW_EN2 = (1U << 25);  ///< DAC_CW_EN2
        constexpr uint32_t DAC_CW_EN1 = (1U << 24);  ///< DAC_CW_EN1
        constexpr uint32_t DAC_INV2 = (2 << 22);  ///< DAC_INV2
        constexpr uint32_t DAC_INV1 = (2 << 20);  ///< DAC_INV1
        constexpr uint32_t DAC_SCALE2 = (2 << 18);  ///< DAC_SCALE2
        constexpr uint32_t DAC_SCALE1 = (2 << 16);  ///< DAC_SCALE1
        constexpr uint32_t DAC_DC2 = (8 << 8);  ///< DAC_DC2
        constexpr uint32_t DAC_DC1 = (8 << 0);  ///< DAC_DC1
    }

    /// SAR_MEAS_CTRL2 Register bits
    namespace sar_meas_ctrl2_bits {
        constexpr uint32_t AMP_SHORT_REF_GND_FORCE = (2 << 17);  ///< AMP_SHORT_REF_GND_FORCE
        constexpr uint32_t AMP_SHORT_REF_FORCE = (2 << 15);  ///< AMP_SHORT_REF_FORCE
        constexpr uint32_t AMP_RST_FB_FORCE = (2 << 13);  ///< AMP_RST_FB_FORCE
        constexpr uint32_t SAR2_RSTB_FORCE = (2 << 11);  ///< SAR2_RSTB_FORCE
        constexpr uint32_t SAR_RSTB_FSM_IDLE = (1U << 10);  ///< SAR_RSTB_FSM_IDLE
        constexpr uint32_t XPD_SAR_FSM_IDLE = (1U << 9);  ///< XPD_SAR_FSM_IDLE
        constexpr uint32_t AMP_SHORT_REF_GND_FSM_IDLE = (1U << 8);  ///< AMP_SHORT_REF_GND_FSM_IDLE
        constexpr uint32_t AMP_SHORT_REF_FSM_IDLE = (1U << 7);  ///< AMP_SHORT_REF_FSM_IDLE
        constexpr uint32_t AMP_RST_FB_FSM_IDLE = (1U << 6);  ///< AMP_RST_FB_FSM_IDLE
        constexpr uint32_t XPD_SAR_AMP_FSM_IDLE = (1U << 5);  ///< XPD_SAR_AMP_FSM_IDLE
        constexpr uint32_t SAR1_DAC_XPD_FSM_IDLE = (1U << 4);  ///< SAR1_DAC_XPD_FSM_IDLE
        constexpr uint32_t SAR1_DAC_XPD_FSM = (4 << 0);  ///< SAR1_DAC_XPD_FSM
    }

    /// SAR_NOUSE Register bits
    namespace sar_nouse_bits {
        constexpr uint32_t SAR_NOUSE = (32 << 0);  ///< SAR_NOUSE
    }

    /// SARDATE Register bits
    namespace sardate_bits {
        constexpr uint32_t SAR_DATE = (28 << 0);  ///< SAR_DATE
    }

}

// ============================================================================
// NRX Peripheral
// ============================================================================

namespace nrx {
    /// Base addresses
    constexpr uint32_t NRX_BASE = 0x3FF5CC00;

    /// NRX Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* NRX = reinterpret_cast<Registers*>(NRX_BASE);

}

// ============================================================================
// FE Peripheral
// ============================================================================

namespace fe {
    /// Base addresses
    constexpr uint32_t FE_BASE = 0x3FF46000;

    /// FE Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* FE = reinterpret_cast<Registers*>(FE_BASE);

}

// ============================================================================
// BB Peripheral
// ============================================================================

namespace bb {
    /// Base addresses
    constexpr uint32_t BB_BASE = 0x3FF5D000;

    /// BB Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BB = reinterpret_cast<Registers*>(BB_BASE);

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI3_BASE = 0x3FF65000;
    constexpr uint32_t SPI_ENCRYPT_BASE = 0x3FF5B000;
    constexpr uint32_t SPI0_BASE = 0x3FF43000;
    constexpr uint32_t SPI2_BASE = 0x3FF64000;
    constexpr uint32_t SPI1_BASE = 0x3FF42000;

    /// SPI Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SPI3 = reinterpret_cast<Registers*>(SPI3_BASE);
    inline Registers* SPI_ENCRYPT = reinterpret_cast<Registers*>(SPI_ENCRYPT_BASE);
    inline Registers* SPI0 = reinterpret_cast<Registers*>(SPI0_BASE);
    inline Registers* SPI2 = reinterpret_cast<Registers*>(SPI2_BASE);
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART2_BASE = 0x3FF6E000;
    constexpr uint32_t UART_BASE = 0x3FF40000;
    constexpr uint32_t UART1_BASE = 0x3FF50000;
    constexpr uint32_t UART0_BASE = 0x3FF40000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t INT_RAW;  ///< Offset: 0x04 - UART_INT_RAW
        volatile uint32_t INT_ST;  ///< Offset: 0x08 - UART_INT_ST
        volatile uint32_t INT_ENA;  ///< Offset: 0x0C - UART_INT_ENA
        volatile uint32_t INT_CLR;  ///< Offset: 0x10 - UART_INT_CLR
        volatile uint32_t CLKDIV;  ///< Offset: 0x14 - UART_CLKDIV
        volatile uint32_t AUTOBAUD;  ///< Offset: 0x18 - UART_AUTOBAUD
        volatile uint32_t STATUS;  ///< Offset: 0x1C - UART_STATUS
        volatile uint32_t CONF0;  ///< Offset: 0x20 - UART_CONF0
        volatile uint32_t CONF1;  ///< Offset: 0x24 - UART_CONF1
        volatile uint32_t LOWPULSE;  ///< Offset: 0x28 - UART_LOWPULSE
        volatile uint32_t HIGHPULSE;  ///< Offset: 0x2C - UART_HIGHPULSE
        volatile uint32_t RXD_CNT;  ///< Offset: 0x30 - UART_RXD_CNT
        volatile uint32_t FLOW_CONF;  ///< Offset: 0x34 - UART_FLOW_CONF
        volatile uint32_t SLEEP_CONF;  ///< Offset: 0x38 - UART_SLEEP_CONF
        volatile uint32_t SWFC_CONF;  ///< Offset: 0x3C - UART_SWFC_CONF
        volatile uint32_t IDLE_CONF;  ///< Offset: 0x40 - UART_IDLE_CONF
        volatile uint32_t RS485_CONF;  ///< Offset: 0x44 - UART_RS485_CONF
        volatile uint32_t AT_CMD_PRECNT;  ///< Offset: 0x48 - UART_AT_CMD_PRECNT
        volatile uint32_t AT_CMD_POSTCNT;  ///< Offset: 0x4C - UART_AT_CMD_POSTCNT
        volatile uint32_t AT_CMD_GAPTOUT;  ///< Offset: 0x50 - UART_AT_CMD_GAPTOUT
        volatile uint32_t AT_CMD_CHAR;  ///< Offset: 0x54 - UART_AT_CMD_CHAR
        volatile uint32_t MEM_CONF;  ///< Offset: 0x58 - UART_MEM_CONF
        volatile uint32_t MEM_TX_STATUS;  ///< Offset: 0x5C - UART_MEM_TX_STATUS
        volatile uint32_t MEM_RX_STATUS;  ///< Offset: 0x60 - UART_MEM_RX_STATUS
        volatile uint32_t MEM_CNT_STATUS;  ///< Offset: 0x64 - UART_MEM_CNT_STATUS
        volatile uint32_t POSPULSE;  ///< Offset: 0x68 - UART_POSPULSE
        volatile uint32_t NEGPULSE;  ///< Offset: 0x6C - UART_NEGPULSE
        volatile uint32_t DATE;  ///< Offset: 0x78 - UART_DATE
        volatile uint32_t ID;  ///< Offset: 0x7C - UART_ID
        volatile uint32_t TX_FIFO;  ///< Offset: 0x200C0000 - TX FIFO Data
        volatile uint32_t RX_FIFO;  ///< Offset: 0x00 - TX FIFO Data
    };

    /// Peripheral instances
    inline Registers* UART2 = reinterpret_cast<Registers*>(UART2_BASE);
    inline Registers* UART = reinterpret_cast<Registers*>(UART_BASE);
    inline Registers* UART1 = reinterpret_cast<Registers*>(UART1_BASE);
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);

    // Bit definitions
    /// INT_RAW Register bits
    namespace int_raw_bits {
        constexpr uint32_t AT_CMD_CHAR_DET_INT_RAW = (1U << 18);  ///< AT_CMD_CHAR_DET_INT_RAW
        constexpr uint32_t RS485_CLASH_INT_RAW = (1U << 17);  ///< RS485_CLASH_INT_RAW
        constexpr uint32_t RS485_FRM_ERR_INT_RAW = (1U << 16);  ///< RS485_FRM_ERR_INT_RAW
        constexpr uint32_t RS485_PARITY_ERR_INT_RAW = (1U << 15);  ///< RS485_PARITY_ERR_INT_RAW
        constexpr uint32_t TX_DONE_INT_RAW = (1U << 14);  ///< TX_DONE_INT_RAW
        constexpr uint32_t TX_BRK_IDLE_DONE_INT_RAW = (1U << 13);  ///< TX_BRK_IDLE_DONE_INT_RAW
        constexpr uint32_t TX_BRK_DONE_INT_RAW = (1U << 12);  ///< TX_BRK_DONE_INT_RAW
        constexpr uint32_t GLITCH_DET_INT_RAW = (1U << 11);  ///< GLITCH_DET_INT_RAW
        constexpr uint32_t SW_XOFF_INT_RAW = (1U << 10);  ///< SW_XOFF_INT_RAW
        constexpr uint32_t SW_XON_INT_RAW = (1U << 9);  ///< SW_XON_INT_RAW
        constexpr uint32_t RXFIFO_TOUT_INT_RAW = (1U << 8);  ///< RXFIFO_TOUT_INT_RAW
        constexpr uint32_t BRK_DET_INT_RAW = (1U << 7);  ///< BRK_DET_INT_RAW
        constexpr uint32_t CTS_CHG_INT_RAW = (1U << 6);  ///< CTS_CHG_INT_RAW
        constexpr uint32_t DSR_CHG_INT_RAW = (1U << 5);  ///< DSR_CHG_INT_RAW
        constexpr uint32_t RXFIFO_OVF_INT_RAW = (1U << 4);  ///< RXFIFO_OVF_INT_RAW
        constexpr uint32_t FRM_ERR_INT_RAW = (1U << 3);  ///< FRM_ERR_INT_RAW
        constexpr uint32_t PARITY_ERR_INT_RAW = (1U << 2);  ///< PARITY_ERR_INT_RAW
        constexpr uint32_t TXFIFO_EMPTY_INT_RAW = (1U << 1);  ///< TXFIFO_EMPTY_INT_RAW
        constexpr uint32_t RXFIFO_FULL_INT_RAW = (1U << 0);  ///< RXFIFO_FULL_INT_RAW
    }

    /// INT_ST Register bits
    namespace int_st_bits {
        constexpr uint32_t AT_CMD_CHAR_DET_INT_ST = (1U << 18);  ///< AT_CMD_CHAR_DET_INT_ST
        constexpr uint32_t RS485_CLASH_INT_ST = (1U << 17);  ///< RS485_CLASH_INT_ST
        constexpr uint32_t RS485_FRM_ERR_INT_ST = (1U << 16);  ///< RS485_FRM_ERR_INT_ST
        constexpr uint32_t RS485_PARITY_ERR_INT_ST = (1U << 15);  ///< RS485_PARITY_ERR_INT_ST
        constexpr uint32_t TX_DONE_INT_ST = (1U << 14);  ///< TX_DONE_INT_ST
        constexpr uint32_t TX_BRK_IDLE_DONE_INT_ST = (1U << 13);  ///< TX_BRK_IDLE_DONE_INT_ST
        constexpr uint32_t TX_BRK_DONE_INT_ST = (1U << 12);  ///< TX_BRK_DONE_INT_ST
        constexpr uint32_t GLITCH_DET_INT_ST = (1U << 11);  ///< GLITCH_DET_INT_ST
        constexpr uint32_t SW_XOFF_INT_ST = (1U << 10);  ///< SW_XOFF_INT_ST
        constexpr uint32_t SW_XON_INT_ST = (1U << 9);  ///< SW_XON_INT_ST
        constexpr uint32_t RXFIFO_TOUT_INT_ST = (1U << 8);  ///< RXFIFO_TOUT_INT_ST
        constexpr uint32_t BRK_DET_INT_ST = (1U << 7);  ///< BRK_DET_INT_ST
        constexpr uint32_t CTS_CHG_INT_ST = (1U << 6);  ///< CTS_CHG_INT_ST
        constexpr uint32_t DSR_CHG_INT_ST = (1U << 5);  ///< DSR_CHG_INT_ST
        constexpr uint32_t RXFIFO_OVF_INT_ST = (1U << 4);  ///< RXFIFO_OVF_INT_ST
        constexpr uint32_t FRM_ERR_INT_ST = (1U << 3);  ///< FRM_ERR_INT_ST
        constexpr uint32_t PARITY_ERR_INT_ST = (1U << 2);  ///< PARITY_ERR_INT_ST
        constexpr uint32_t TXFIFO_EMPTY_INT_ST = (1U << 1);  ///< TXFIFO_EMPTY_INT_ST
        constexpr uint32_t RXFIFO_FULL_INT_ST = (1U << 0);  ///< RXFIFO_FULL_INT_ST
    }

    /// INT_ENA Register bits
    namespace int_ena_bits {
        constexpr uint32_t AT_CMD_CHAR_DET_INT_ENA = (1U << 18);  ///< AT_CMD_CHAR_DET_INT_ENA
        constexpr uint32_t RS485_CLASH_INT_ENA = (1U << 17);  ///< RS485_CLASH_INT_ENA
        constexpr uint32_t RS485_FRM_ERR_INT_ENA = (1U << 16);  ///< RS485_FRM_ERR_INT_ENA
        constexpr uint32_t RS485_PARITY_ERR_INT_ENA = (1U << 15);  ///< RS485_PARITY_ERR_INT_ENA
        constexpr uint32_t TX_DONE_INT_ENA = (1U << 14);  ///< TX_DONE_INT_ENA
        constexpr uint32_t TX_BRK_IDLE_DONE_INT_ENA = (1U << 13);  ///< TX_BRK_IDLE_DONE_INT_ENA
        constexpr uint32_t TX_BRK_DONE_INT_ENA = (1U << 12);  ///< TX_BRK_DONE_INT_ENA
        constexpr uint32_t GLITCH_DET_INT_ENA = (1U << 11);  ///< GLITCH_DET_INT_ENA
        constexpr uint32_t SW_XOFF_INT_ENA = (1U << 10);  ///< SW_XOFF_INT_ENA
        constexpr uint32_t SW_XON_INT_ENA = (1U << 9);  ///< SW_XON_INT_ENA
        constexpr uint32_t RXFIFO_TOUT_INT_ENA = (1U << 8);  ///< RXFIFO_TOUT_INT_ENA
        constexpr uint32_t BRK_DET_INT_ENA = (1U << 7);  ///< BRK_DET_INT_ENA
        constexpr uint32_t CTS_CHG_INT_ENA = (1U << 6);  ///< CTS_CHG_INT_ENA
        constexpr uint32_t DSR_CHG_INT_ENA = (1U << 5);  ///< DSR_CHG_INT_ENA
        constexpr uint32_t RXFIFO_OVF_INT_ENA = (1U << 4);  ///< RXFIFO_OVF_INT_ENA
        constexpr uint32_t FRM_ERR_INT_ENA = (1U << 3);  ///< FRM_ERR_INT_ENA
        constexpr uint32_t PARITY_ERR_INT_ENA = (1U << 2);  ///< PARITY_ERR_INT_ENA
        constexpr uint32_t TXFIFO_EMPTY_INT_ENA = (1U << 1);  ///< TXFIFO_EMPTY_INT_ENA
        constexpr uint32_t RXFIFO_FULL_INT_ENA = (1U << 0);  ///< RXFIFO_FULL_INT_ENA
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t AT_CMD_CHAR_DET_INT_CLR = (1U << 18);  ///< AT_CMD_CHAR_DET_INT_CLR
        constexpr uint32_t RS485_CLASH_INT_CLR = (1U << 17);  ///< RS485_CLASH_INT_CLR
        constexpr uint32_t RS485_FRM_ERR_INT_CLR = (1U << 16);  ///< RS485_FRM_ERR_INT_CLR
        constexpr uint32_t RS485_PARITY_ERR_INT_CLR = (1U << 15);  ///< RS485_PARITY_ERR_INT_CLR
        constexpr uint32_t TX_DONE_INT_CLR = (1U << 14);  ///< TX_DONE_INT_CLR
        constexpr uint32_t TX_BRK_IDLE_DONE_INT_CLR = (1U << 13);  ///< TX_BRK_IDLE_DONE_INT_CLR
        constexpr uint32_t TX_BRK_DONE_INT_CLR = (1U << 12);  ///< TX_BRK_DONE_INT_CLR
        constexpr uint32_t GLITCH_DET_INT_CLR = (1U << 11);  ///< GLITCH_DET_INT_CLR
        constexpr uint32_t SW_XOFF_INT_CLR = (1U << 10);  ///< SW_XOFF_INT_CLR
        constexpr uint32_t SW_XON_INT_CLR = (1U << 9);  ///< SW_XON_INT_CLR
        constexpr uint32_t RXFIFO_TOUT_INT_CLR = (1U << 8);  ///< RXFIFO_TOUT_INT_CLR
        constexpr uint32_t BRK_DET_INT_CLR = (1U << 7);  ///< BRK_DET_INT_CLR
        constexpr uint32_t CTS_CHG_INT_CLR = (1U << 6);  ///< CTS_CHG_INT_CLR
        constexpr uint32_t DSR_CHG_INT_CLR = (1U << 5);  ///< DSR_CHG_INT_CLR
        constexpr uint32_t RXFIFO_OVF_INT_CLR = (1U << 4);  ///< RXFIFO_OVF_INT_CLR
        constexpr uint32_t FRM_ERR_INT_CLR = (1U << 3);  ///< FRM_ERR_INT_CLR
        constexpr uint32_t PARITY_ERR_INT_CLR = (1U << 2);  ///< PARITY_ERR_INT_CLR
        constexpr uint32_t TXFIFO_EMPTY_INT_CLR = (1U << 1);  ///< TXFIFO_EMPTY_INT_CLR
        constexpr uint32_t RXFIFO_FULL_INT_CLR = (1U << 0);  ///< RXFIFO_FULL_INT_CLR
    }

    /// CLKDIV Register bits
    namespace clkdiv_bits {
        constexpr uint32_t CLKDIV_FRAG = (4 << 20);  ///< CLKDIV_FRAG
        constexpr uint32_t CLKDIV = (20 << 0);  ///< CLKDIV
    }

    /// AUTOBAUD Register bits
    namespace autobaud_bits {
        constexpr uint32_t GLITCH_FILT = (8 << 8);  ///< GLITCH_FILT
        constexpr uint32_t AUTOBAUD_EN = (1U << 0);  ///< AUTOBAUD_EN
    }

    /// STATUS Register bits
    namespace status_bits {
        constexpr uint32_t TXD = (1U << 31);  ///< TXD
        constexpr uint32_t RTSN = (1U << 30);  ///< RTSN
        constexpr uint32_t DTRN = (1U << 29);  ///< DTRN
        constexpr uint32_t ST_UTX_OUT = (4 << 24);  ///< TX_IDLE
        constexpr uint32_t TXFIFO_CNT = (8 << 16);  ///< TXFIFO_CNT
        constexpr uint32_t RXD = (1U << 15);  ///< RXD
        constexpr uint32_t CTSN = (1U << 14);  ///< CTSN
        constexpr uint32_t DSRN = (1U << 13);  ///< DSRN
        constexpr uint32_t ST_URX_OUT = (4 << 8);  ///< RX_IDLE
        constexpr uint32_t RXFIFO_CNT = (8 << 0);  ///< RXFIFO_CNT
    }

    /// CONF0 Register bits
    namespace conf0_bits {
        constexpr uint32_t TICK_REF_ALWAYS_ON = (1U << 27);  ///< TICK_REF_ALWAYS_ON
        constexpr uint32_t ERR_WR_MASK = (1U << 26);  ///< ERR_WR_MASK
        constexpr uint32_t CLK_EN = (1U << 25);  ///< CLK_EN
        constexpr uint32_t DTR_INV = (1U << 24);  ///< DTR_INV
        constexpr uint32_t RTS_INV = (1U << 23);  ///< RTS_INV
        constexpr uint32_t TXD_INV = (1U << 22);  ///< TXD_INV
        constexpr uint32_t DSR_INV = (1U << 21);  ///< DSR_INV
        constexpr uint32_t CTS_INV = (1U << 20);  ///< CTS_INV
        constexpr uint32_t RXD_INV = (1U << 19);  ///< RXD_INV
        constexpr uint32_t TXFIFO_RST = (1U << 18);  ///< TXFIFO_RST
        constexpr uint32_t RXFIFO_RST = (1U << 17);  ///< RXFIFO_RST
        constexpr uint32_t IRDA_EN = (1U << 16);  ///< IRDA_EN
        constexpr uint32_t TX_FLOW_EN = (1U << 15);  ///< TX_FLOW_EN
        constexpr uint32_t LOOPBACK = (1U << 14);  ///< LOOPBACK
        constexpr uint32_t IRDA_RX_INV = (1U << 13);  ///< IRDA_RX_INV
        constexpr uint32_t IRDA_TX_INV = (1U << 12);  ///< IRDA_TX_INV
        constexpr uint32_t IRDA_WCTL = (1U << 11);  ///< IRDA_WCTL
        constexpr uint32_t IRDA_TX_EN = (1U << 10);  ///< IRDA_TX_EN
        constexpr uint32_t IRDA_DPLX = (1U << 9);  ///< IRDA_DPLX
        constexpr uint32_t TXD_BRK = (1U << 8);  ///< TXD_BRK
        constexpr uint32_t SW_DTR = (1U << 7);  ///< SW_DTR
        constexpr uint32_t SW_RTS = (1U << 6);  ///< SW_RTS
        constexpr uint32_t STOP_BIT_NUM = (2 << 4);  ///< 1 stop bits
        constexpr uint32_t BIT_NUM = (2 << 2);  ///< 5 data bits
        constexpr uint32_t PARITY_EN = (1U << 1);  ///< PARITY_EN
        constexpr uint32_t PARITY = (1U << 0);  ///< PARITY
    }

    /// CONF1 Register bits
    namespace conf1_bits {
        constexpr uint32_t RX_TOUT_EN = (1U << 31);  ///< RX_TOUT_EN
        constexpr uint32_t RX_TOUT_THRHD = (7 << 24);  ///< RX_TOUT_THRHD
        constexpr uint32_t RX_FLOW_EN = (1U << 23);  ///< RX_FLOW_EN
        constexpr uint32_t RX_FLOW_THRHD = (7 << 16);  ///< RX_FLOW_THRHD
        constexpr uint32_t TXFIFO_EMPTY_THRHD = (7 << 8);  ///< TXFIFO_EMPTY_THRHD
        constexpr uint32_t RXFIFO_FULL_THRHD = (7 << 0);  ///< RXFIFO_FULL_THRHD
    }

    /// LOWPULSE Register bits
    namespace lowpulse_bits {
        constexpr uint32_t LOWPULSE_MIN_CNT = (20 << 0);  ///< LOWPULSE_MIN_CNT
    }

    /// HIGHPULSE Register bits
    namespace highpulse_bits {
        constexpr uint32_t HIGHPULSE_MIN_CNT = (20 << 0);  ///< HIGHPULSE_MIN_CNT
    }

    /// RXD_CNT Register bits
    namespace rxd_cnt_bits {
        constexpr uint32_t RXD_EDGE_CNT = (10 << 0);  ///< RXD_EDGE_CNT
    }

    /// FLOW_CONF Register bits
    namespace flow_conf_bits {
        constexpr uint32_t SEND_XOFF = (1U << 5);  ///< SEND_XOFF
        constexpr uint32_t SEND_XON = (1U << 4);  ///< SEND_XON
        constexpr uint32_t FORCE_XOFF = (1U << 3);  ///< FORCE_XOFF
        constexpr uint32_t FORCE_XON = (1U << 2);  ///< FORCE_XON
        constexpr uint32_t XONOFF_DEL = (1U << 1);  ///< XONOFF_DEL
        constexpr uint32_t SW_FLOW_CON_EN = (1U << 0);  ///< SW_FLOW_CON_EN
    }

    /// SLEEP_CONF Register bits
    namespace sleep_conf_bits {
        constexpr uint32_t ACTIVE_THRESHOLD = (10 << 0);  ///< ACTIVE_THRESHOLD
    }

    /// SWFC_CONF Register bits
    namespace swfc_conf_bits {
        constexpr uint32_t XOFF_CHAR = (8 << 24);  ///< XOFF_CHAR
        constexpr uint32_t XON_CHAR = (8 << 16);  ///< XON_CHAR
        constexpr uint32_t XOFF_THRESHOLD = (8 << 8);  ///< XOFF_THRESHOLD
        constexpr uint32_t XON_THRESHOLD = (8 << 0);  ///< XON_THRESHOLD
    }

    /// IDLE_CONF Register bits
    namespace idle_conf_bits {
        constexpr uint32_t TX_BRK_NUM = (8 << 20);  ///< TX_BRK_NUM
        constexpr uint32_t TX_IDLE_NUM = (10 << 10);  ///< TX_IDLE_NUM
        constexpr uint32_t RX_IDLE_THRHD = (10 << 0);  ///< RX_IDLE_THRHD
    }

    /// RS485_CONF Register bits
    namespace rs485_conf_bits {
        constexpr uint32_t RS485_TX_DLY_NUM = (4 << 6);  ///< RS485_TX_DLY_NUM
        constexpr uint32_t RS485_RX_DLY_NUM = (1U << 5);  ///< RS485_RX_DLY_NUM
        constexpr uint32_t RS485RXBY_TX_EN = (1U << 4);  ///< RS485RXBY_TX_EN
        constexpr uint32_t RS485TX_RX_EN = (1U << 3);  ///< RS485TX_RX_EN
        constexpr uint32_t DL1_EN = (1U << 2);  ///< DL1_EN
        constexpr uint32_t DL0_EN = (1U << 1);  ///< DL0_EN
        constexpr uint32_t RS485_EN = (1U << 0);  ///< RS485_EN
    }

    /// AT_CMD_PRECNT Register bits
    namespace at_cmd_precnt_bits {
        constexpr uint32_t PRE_IDLE_NUM = (24 << 0);  ///< PRE_IDLE_NUM
    }

    /// AT_CMD_POSTCNT Register bits
    namespace at_cmd_postcnt_bits {
        constexpr uint32_t POST_IDLE_NUM = (24 << 0);  ///< POST_IDLE_NUM
    }

    /// AT_CMD_GAPTOUT Register bits
    namespace at_cmd_gaptout_bits {
        constexpr uint32_t RX_GAP_TOUT = (24 << 0);  ///< RX_GAP_TOUT
    }

    /// AT_CMD_CHAR Register bits
    namespace at_cmd_char_bits {
        constexpr uint32_t CHAR_NUM = (8 << 8);  ///< CHAR_NUM
        constexpr uint32_t AT_CMD_CHAR = (8 << 0);  ///< AT_CMD_CHAR
    }

    /// MEM_CONF Register bits
    namespace mem_conf_bits {
        constexpr uint32_t TX_MEM_EMPTY_THRHD = (3 << 28);  ///< TX_MEM_EMPTY_THRHD
        constexpr uint32_t RX_MEM_FULL_THRHD = (3 << 25);  ///< RX_MEM_FULL_THRHD
        constexpr uint32_t XOFF_THRESHOLD_H2 = (2 << 23);  ///< XOFF_THRESHOLD_H2
        constexpr uint32_t XON_THRESHOLD_H2 = (2 << 21);  ///< XON_THRESHOLD_H2
        constexpr uint32_t RX_TOUT_THRHD_H3 = (3 << 18);  ///< RX_TOUT_THRHD_H3
        constexpr uint32_t RX_FLOW_THRHD_H3 = (3 << 15);  ///< RX_FLOW_THRHD_H3
        constexpr uint32_t TX_SIZE = (4 << 7);  ///< TX_SIZE
        constexpr uint32_t RX_SIZE = (4 << 3);  ///< RX_SIZE
        constexpr uint32_t MEM_PD = (1U << 0);  ///< MEM_PD
    }

    /// MEM_TX_STATUS Register bits
    namespace mem_tx_status_bits {
        constexpr uint32_t MEM_TX_STATUS = (24 << 0);  ///< MEM_TX_STATUS
    }

    /// MEM_RX_STATUS Register bits
    namespace mem_rx_status_bits {
        constexpr uint32_t MEM_RX_STATUS = (24 << 0);  ///< MEM_RX_STATUS
        constexpr uint32_t MEM_RX_RD_ADDR = (11 << 2);  ///< MEM_RX_RD_ADDR
        constexpr uint32_t MEM_RX_WR_ADDR = (11 << 13);  ///< MEM_RX_WR_ADDR
    }

    /// MEM_CNT_STATUS Register bits
    namespace mem_cnt_status_bits {
        constexpr uint32_t TX_MEM_CNT = (3 << 3);  ///< TX_MEM_CNT
        constexpr uint32_t RX_MEM_CNT = (3 << 0);  ///< RX_MEM_CNT
    }

    /// POSPULSE Register bits
    namespace pospulse_bits {
        constexpr uint32_t POSEDGE_MIN_CNT = (20 << 0);  ///< POSEDGE_MIN_CNT
    }

    /// NEGPULSE Register bits
    namespace negpulse_bits {
        constexpr uint32_t NEGEDGE_MIN_CNT = (20 << 0);  ///< NEGEDGE_MIN_CNT
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t DATE = (32 << 0);  ///< DATE
    }

    /// ID Register bits
    namespace id_bits {
        constexpr uint32_t ID = (32 << 0);  ///< ID
    }

    /// TX_FIFO Register bits
    namespace tx_fifo_bits {
        constexpr uint32_t DATA = (8 << 0);  ///< TX FIFO Data
    }

    /// RX_FIFO Register bits
    namespace rx_fifo_bits {
        constexpr uint32_t DATA = (8 << 0);  ///< TX FIFO Data
    }

}

// ============================================================================
// SDIO Peripheral
// ============================================================================

namespace sdio {
    /// Base addresses
    constexpr uint32_t SDMMC_BASE = 0x3FF68000;

    /// SDIO Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SDMMC = reinterpret_cast<Registers*>(SDMMC_BASE);

}

// ============================================================================
// UHCI1 Peripheral
// ============================================================================

namespace uhci1 {
    /// Base addresses
    constexpr uint32_t UHCI1_BASE = 0x3FF4C000;

    /// UHCI1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* UHCI1 = reinterpret_cast<Registers*>(UHCI1_BASE);

}

// ============================================================================
// IO Peripheral
// ============================================================================

namespace io {
    /// Base addresses
    constexpr uint32_t IO_MUX_BASE = 0x3FF49000;

    /// IO Register structure
    struct Registers {
        volatile uint32_t PIN_CTRL;  ///< Offset: 0x00 - configures clock source and clock output pins
        volatile uint32_t GPIO36;  ///< Offset: 0x04 - configures IO_MUX function
        volatile uint32_t GPIO37;  ///< Offset: 0x08 - configures IO_MUX function
        volatile uint32_t GPIO38;  ///< Offset: 0x0C - configures IO_MUX function
        volatile uint32_t GPIO39;  ///< Offset: 0x10 - configures IO_MUX function
        volatile uint32_t GPIO34;  ///< Offset: 0x14 - configures IO_MUX function
        volatile uint32_t GPIO35;  ///< Offset: 0x18 - configures IO_MUX function
        volatile uint32_t GPIO32;  ///< Offset: 0x1C - configures IO_MUX function
        volatile uint32_t GPIO33;  ///< Offset: 0x20 - configures IO_MUX function
        volatile uint32_t GPIO25;  ///< Offset: 0x24 - configures IO_MUX function
        volatile uint32_t GPIO26;  ///< Offset: 0x28 - configures IO_MUX function
        volatile uint32_t GPIO27;  ///< Offset: 0x2C - configures IO_MUX function
        volatile uint32_t MTMS;  ///< Offset: 0x30 - configures IO_MUX function
        volatile uint32_t MTDI;  ///< Offset: 0x34 - configures IO_MUX function
        volatile uint32_t MTCK;  ///< Offset: 0x38 - configures IO_MUX function
        volatile uint32_t MTDO;  ///< Offset: 0x3C - configures IO_MUX function
        volatile uint32_t GPIO2;  ///< Offset: 0x40 - configures IO_MUX function
        volatile uint32_t GPIO0;  ///< Offset: 0x44 - configures IO_MUX function
        volatile uint32_t GPIO4;  ///< Offset: 0x48 - configures IO_MUX function
        volatile uint32_t GPIO16;  ///< Offset: 0x4C - configures IO_MUX function
        volatile uint32_t GPIO17;  ///< Offset: 0x50 - configures IO_MUX function
        volatile uint32_t SD_DATA2;  ///< Offset: 0x54 - configures IO_MUX function
        volatile uint32_t SD_DATA3;  ///< Offset: 0x58 - configures IO_MUX function
        volatile uint32_t SD_CMD;  ///< Offset: 0x5C - configures IO_MUX function
        volatile uint32_t SD_CLK;  ///< Offset: 0x60 - configures IO_MUX function
        volatile uint32_t SD_DATA0;  ///< Offset: 0x64 - configures IO_MUX function
        volatile uint32_t SD_DATA1;  ///< Offset: 0x68 - configures IO_MUX function
        volatile uint32_t GPIO5;  ///< Offset: 0x6C - configures IO_MUX function
        volatile uint32_t GPIO18;  ///< Offset: 0x70 - configures IO_MUX function
        volatile uint32_t GPIO19;  ///< Offset: 0x74 - configures IO_MUX function
        volatile uint32_t GPIO20;  ///< Offset: 0x78 - configures IO_MUX function
        volatile uint32_t GPIO21;  ///< Offset: 0x7C - configures IO_MUX function
        volatile uint32_t GPIO22;  ///< Offset: 0x80 - configures IO_MUX function
        volatile uint32_t U0RXD;  ///< Offset: 0x84 - configures IO_MUX function
        volatile uint32_t U0TXD;  ///< Offset: 0x88 - configures IO_MUX function
        volatile uint32_t GPIO23;  ///< Offset: 0x8C - configures IO_MUX function
        volatile uint32_t GPIO24;  ///< Offset: 0x90 - configures IO_MUX function
    };

    /// Peripheral instances
    inline Registers* IO_MUX = reinterpret_cast<Registers*>(IO_MUX_BASE);

    // Bit definitions
    /// PIN_CTRL Register bits
    namespace pin_ctrl_bits {
        constexpr uint32_t PIN_CTRL_CLK3 = (3 << 8);  ///< PIN_CTRL_CLK3
        constexpr uint32_t PIN_CTRL_CLK2 = (3 << 4);  ///< PIN_CTRL_CLK2
        constexpr uint32_t PIN_CTRL_CLK1 = (3 << 0);  ///< PIN_CTRL_CLK1
    }

    /// GPIO36 Register bits
    namespace gpio36_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO37 Register bits
    namespace gpio37_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO38 Register bits
    namespace gpio38_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO39 Register bits
    namespace gpio39_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO34 Register bits
    namespace gpio34_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO35 Register bits
    namespace gpio35_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO32 Register bits
    namespace gpio32_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO33 Register bits
    namespace gpio33_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO25 Register bits
    namespace gpio25_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO26 Register bits
    namespace gpio26_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO27 Register bits
    namespace gpio27_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// MTMS Register bits
    namespace mtms_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// MTDI Register bits
    namespace mtdi_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// MTCK Register bits
    namespace mtck_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// MTDO Register bits
    namespace mtdo_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO2 Register bits
    namespace gpio2_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO0 Register bits
    namespace gpio0_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO4 Register bits
    namespace gpio4_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO16 Register bits
    namespace gpio16_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO17 Register bits
    namespace gpio17_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// SD_DATA2 Register bits
    namespace sd_data2_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// SD_DATA3 Register bits
    namespace sd_data3_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// SD_CMD Register bits
    namespace sd_cmd_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// SD_CLK Register bits
    namespace sd_clk_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// SD_DATA0 Register bits
    namespace sd_data0_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// SD_DATA1 Register bits
    namespace sd_data1_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO5 Register bits
    namespace gpio5_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO18 Register bits
    namespace gpio18_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO19 Register bits
    namespace gpio19_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO20 Register bits
    namespace gpio20_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO21 Register bits
    namespace gpio21_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO22 Register bits
    namespace gpio22_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// U0RXD Register bits
    namespace u0rxd_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// U0TXD Register bits
    namespace u0txd_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO23 Register bits
    namespace gpio23_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

    /// GPIO24 Register bits
    namespace gpio24_bits {
        constexpr uint32_t MCU_SEL = (2 << 12);  ///< configures IO_MUX function
        constexpr uint32_t FUN_DRV = (2 << 10);  ///< configures drive strength
        constexpr uint32_t FUN_IE = (1U << 9);  ///< configures input enable
        constexpr uint32_t FUN_WPU = (1U << 8);  ///< configures pull up
        constexpr uint32_t FUN_WPD = (1U << 7);  ///< configures pull down
        constexpr uint32_t MCU_DRV = (2 << 5);  ///< configures drive strength during sleep mode
        constexpr uint32_t MCU_IE = (1U << 4);  ///< configures input enable during sleep mode
        constexpr uint32_t MCU_WPU = (1U << 3);  ///< configures pull up during sleep mode
        constexpr uint32_t MCU_WPD = (1U << 2);  ///< configures pull down during sleep mode
        constexpr uint32_t SLP_SEL = (1U << 1);  ///< configures sleep mode selection
        constexpr uint32_t MCU_OE = (1U << 0);  ///< configures output enable during sleep mode
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN_BASE = 0x3FF6B000;

    /// CAN Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* CAN = reinterpret_cast<Registers*>(CAN_BASE);

}

// ============================================================================
// I2S Peripheral
// ============================================================================

namespace i2s {
    /// Base addresses
    constexpr uint32_t I2S_BASE = 0x3FF4F000;
    constexpr uint32_t I2S1_BASE = 0x3FF6D000;

    /// I2S Register structure
    struct Registers {
        volatile uint32_t CONF;  ///< Offset: 0x08 - I2S_CONF
        volatile uint32_t INT_RAW;  ///< Offset: 0x0C - I2S_INT_RAW
        volatile uint32_t INT_ST;  ///< Offset: 0x10 - I2S_INT_ST
        volatile uint32_t INT_ENA;  ///< Offset: 0x14 - I2S_INT_ENA
        volatile uint32_t INT_CLR;  ///< Offset: 0x18 - I2S_INT_CLR
        volatile uint32_t TIMING;  ///< Offset: 0x1C - I2S_TIMING
        volatile uint32_t FIFO_CONF;  ///< Offset: 0x20 - I2S_FIFO_CONF
        volatile uint32_t RXEOF_NUM;  ///< Offset: 0x24 - I2S_RXEOF_NUM
        volatile uint32_t CONF_SIGLE_DATA;  ///< Offset: 0x28 - I2S_CONF_SIGLE_DATA
        volatile uint32_t CONF_CHAN;  ///< Offset: 0x2C - I2S_CONF_CHAN
        volatile uint32_t OUT_LINK;  ///< Offset: 0x30 - I2S_OUT_LINK
        volatile uint32_t IN_LINK;  ///< Offset: 0x34 - I2S_IN_LINK
        volatile uint32_t OUT_EOF_DES_ADDR;  ///< Offset: 0x38 - I2S_OUT_EOF_DES_ADDR
        volatile uint32_t IN_EOF_DES_ADDR;  ///< Offset: 0x3C - I2S_IN_EOF_DES_ADDR
        volatile uint32_t OUT_EOF_BFR_DES_ADDR;  ///< Offset: 0x40 - I2S_OUT_EOF_BFR_DES_ADDR
        volatile uint32_t AHB_TEST;  ///< Offset: 0x44 - I2S_AHB_TEST
        volatile uint32_t INLINK_DSCR;  ///< Offset: 0x48 - I2S_INLINK_DSCR
        volatile uint32_t INLINK_DSCR_BF0;  ///< Offset: 0x4C - I2S_INLINK_DSCR_BF0
        volatile uint32_t INLINK_DSCR_BF1;  ///< Offset: 0x50 - I2S_INLINK_DSCR_BF1
        volatile uint32_t OUTLINK_DSCR;  ///< Offset: 0x54 - I2S_OUTLINK_DSCR
        volatile uint32_t OUTLINK_DSCR_BF0;  ///< Offset: 0x58 - I2S_OUTLINK_DSCR_BF0
        volatile uint32_t OUTLINK_DSCR_BF1;  ///< Offset: 0x5C - I2S_OUTLINK_DSCR_BF1
        volatile uint32_t LC_CONF;  ///< Offset: 0x60 - I2S_LC_CONF
        volatile uint32_t OUTFIFO_PUSH;  ///< Offset: 0x64 - I2S_OUTFIFO_PUSH
        volatile uint32_t INFIFO_POP;  ///< Offset: 0x68 - I2S_INFIFO_POP
        volatile uint32_t LC_STATE0;  ///< Offset: 0x6C - I2S_LC_STATE0
        volatile uint32_t LC_STATE1;  ///< Offset: 0x70 - I2S_LC_STATE1
        volatile uint32_t LC_HUNG_CONF;  ///< Offset: 0x74 - I2S_LC_HUNG_CONF
        volatile uint32_t CVSD_CONF0;  ///< Offset: 0x80 - I2S_CVSD_CONF0
        volatile uint32_t CVSD_CONF1;  ///< Offset: 0x84 - I2S_CVSD_CONF1
        volatile uint32_t CVSD_CONF2;  ///< Offset: 0x88 - I2S_CVSD_CONF2
        volatile uint32_t PLC_CONF0;  ///< Offset: 0x8C - I2S_PLC_CONF0
        volatile uint32_t PLC_CONF1;  ///< Offset: 0x90 - I2S_PLC_CONF1
        volatile uint32_t PLC_CONF2;  ///< Offset: 0x94 - I2S_PLC_CONF2
        volatile uint32_t ESCO_CONF0;  ///< Offset: 0x98 - I2S_ESCO_CONF0
        volatile uint32_t SCO_CONF0;  ///< Offset: 0x9C - I2S_SCO_CONF0
        volatile uint32_t CONF1;  ///< Offset: 0xA0 - I2S_CONF1
        volatile uint32_t PD_CONF;  ///< Offset: 0xA4 - I2S_PD_CONF
        volatile uint32_t CONF2;  ///< Offset: 0xA8 - I2S_CONF2
        volatile uint32_t CLKM_CONF;  ///< Offset: 0xAC - I2S_CLKM_CONF
        volatile uint32_t SAMPLE_RATE_CONF;  ///< Offset: 0xB0 - I2S_SAMPLE_RATE_CONF
        volatile uint32_t PDM_CONF;  ///< Offset: 0xB4 - I2S_PDM_CONF
        volatile uint32_t PDM_FREQ_CONF;  ///< Offset: 0xB8 - I2S_PDM_FREQ_CONF
        volatile uint32_t STATE;  ///< Offset: 0xBC - I2S_STATE
        volatile uint32_t DATE;  ///< Offset: 0xFC - I2S_DATE
    };

    /// Peripheral instances
    inline Registers* I2S = reinterpret_cast<Registers*>(I2S_BASE);
    inline Registers* I2S1 = reinterpret_cast<Registers*>(I2S1_BASE);

    // Bit definitions
    /// CONF Register bits
    namespace conf_bits {
        constexpr uint32_t SIG_LOOPBACK = (1U << 18);  ///< SIG_LOOPBACK
        constexpr uint32_t RX_MSB_RIGHT = (1U << 17);  ///< RX_MSB_RIGHT
        constexpr uint32_t TX_MSB_RIGHT = (1U << 16);  ///< TX_MSB_RIGHT
        constexpr uint32_t RX_MONO = (1U << 15);  ///< RX_MONO
        constexpr uint32_t TX_MONO = (1U << 14);  ///< TX_MONO
        constexpr uint32_t RX_SHORT_SYNC = (1U << 13);  ///< RX_SHORT_SYNC
        constexpr uint32_t TX_SHORT_SYNC = (1U << 12);  ///< TX_SHORT_SYNC
        constexpr uint32_t RX_MSB_SHIFT = (1U << 11);  ///< RX_MSB_SHIFT
        constexpr uint32_t TX_MSB_SHIFT = (1U << 10);  ///< TX_MSB_SHIFT
        constexpr uint32_t RX_RIGHT_FIRST = (1U << 9);  ///< RX_RIGHT_FIRST
        constexpr uint32_t TX_RIGHT_FIRST = (1U << 8);  ///< TX_RIGHT_FIRST
        constexpr uint32_t RX_SLAVE_MOD = (1U << 7);  ///< RX_SLAVE_MOD
        constexpr uint32_t TX_SLAVE_MOD = (1U << 6);  ///< TX_SLAVE_MOD
        constexpr uint32_t RX_START = (1U << 5);  ///< RX_START
        constexpr uint32_t TX_START = (1U << 4);  ///< TX_START
        constexpr uint32_t RX_FIFO_RESET = (1U << 3);  ///< RX_FIFO_RESET
        constexpr uint32_t TX_FIFO_RESET = (1U << 2);  ///< TX_FIFO_RESET
        constexpr uint32_t RX_RESET = (1U << 1);  ///< RX_RESET
        constexpr uint32_t TX_RESET = (1U << 0);  ///< TX_RESET
    }

    /// INT_RAW Register bits
    namespace int_raw_bits {
        constexpr uint32_t OUT_TOTAL_EOF_INT_RAW = (1U << 16);  ///< OUT_TOTAL_EOF_INT_RAW
        constexpr uint32_t IN_DSCR_EMPTY_INT_RAW = (1U << 15);  ///< IN_DSCR_EMPTY_INT_RAW
        constexpr uint32_t OUT_DSCR_ERR_INT_RAW = (1U << 14);  ///< OUT_DSCR_ERR_INT_RAW
        constexpr uint32_t IN_DSCR_ERR_INT_RAW = (1U << 13);  ///< IN_DSCR_ERR_INT_RAW
        constexpr uint32_t OUT_EOF_INT_RAW = (1U << 12);  ///< OUT_EOF_INT_RAW
        constexpr uint32_t OUT_DONE_INT_RAW = (1U << 11);  ///< OUT_DONE_INT_RAW
        constexpr uint32_t IN_ERR_EOF_INT_RAW = (1U << 10);  ///< IN_ERR_EOF_INT_RAW
        constexpr uint32_t IN_SUC_EOF_INT_RAW = (1U << 9);  ///< IN_SUC_EOF_INT_RAW
        constexpr uint32_t IN_DONE_INT_RAW = (1U << 8);  ///< IN_DONE_INT_RAW
        constexpr uint32_t TX_HUNG_INT_RAW = (1U << 7);  ///< TX_HUNG_INT_RAW
        constexpr uint32_t RX_HUNG_INT_RAW = (1U << 6);  ///< RX_HUNG_INT_RAW
        constexpr uint32_t TX_REMPTY_INT_RAW = (1U << 5);  ///< TX_REMPTY_INT_RAW
        constexpr uint32_t TX_WFULL_INT_RAW = (1U << 4);  ///< TX_WFULL_INT_RAW
        constexpr uint32_t RX_REMPTY_INT_RAW = (1U << 3);  ///< RX_REMPTY_INT_RAW
        constexpr uint32_t RX_WFULL_INT_RAW = (1U << 2);  ///< RX_WFULL_INT_RAW
        constexpr uint32_t TX_PUT_DATA_INT_RAW = (1U << 1);  ///< TX_PUT_DATA_INT_RAW
        constexpr uint32_t RX_TAKE_DATA_INT_RAW = (1U << 0);  ///< RX_TAKE_DATA_INT_RAW
    }

    /// INT_ST Register bits
    namespace int_st_bits {
        constexpr uint32_t OUT_TOTAL_EOF_INT_ST = (1U << 16);  ///< OUT_TOTAL_EOF_INT_ST
        constexpr uint32_t IN_DSCR_EMPTY_INT_ST = (1U << 15);  ///< IN_DSCR_EMPTY_INT_ST
        constexpr uint32_t OUT_DSCR_ERR_INT_ST = (1U << 14);  ///< OUT_DSCR_ERR_INT_ST
        constexpr uint32_t IN_DSCR_ERR_INT_ST = (1U << 13);  ///< IN_DSCR_ERR_INT_ST
        constexpr uint32_t OUT_EOF_INT_ST = (1U << 12);  ///< OUT_EOF_INT_ST
        constexpr uint32_t OUT_DONE_INT_ST = (1U << 11);  ///< OUT_DONE_INT_ST
        constexpr uint32_t IN_ERR_EOF_INT_ST = (1U << 10);  ///< IN_ERR_EOF_INT_ST
        constexpr uint32_t IN_SUC_EOF_INT_ST = (1U << 9);  ///< IN_SUC_EOF_INT_ST
        constexpr uint32_t IN_DONE_INT_ST = (1U << 8);  ///< IN_DONE_INT_ST
        constexpr uint32_t TX_HUNG_INT_ST = (1U << 7);  ///< TX_HUNG_INT_ST
        constexpr uint32_t RX_HUNG_INT_ST = (1U << 6);  ///< RX_HUNG_INT_ST
        constexpr uint32_t TX_REMPTY_INT_ST = (1U << 5);  ///< TX_REMPTY_INT_ST
        constexpr uint32_t TX_WFULL_INT_ST = (1U << 4);  ///< TX_WFULL_INT_ST
        constexpr uint32_t RX_REMPTY_INT_ST = (1U << 3);  ///< RX_REMPTY_INT_ST
        constexpr uint32_t RX_WFULL_INT_ST = (1U << 2);  ///< RX_WFULL_INT_ST
        constexpr uint32_t TX_PUT_DATA_INT_ST = (1U << 1);  ///< TX_PUT_DATA_INT_ST
        constexpr uint32_t RX_TAKE_DATA_INT_ST = (1U << 0);  ///< RX_TAKE_DATA_INT_ST
    }

    /// INT_ENA Register bits
    namespace int_ena_bits {
        constexpr uint32_t OUT_TOTAL_EOF_INT_ENA = (1U << 16);  ///< OUT_TOTAL_EOF_INT_ENA
        constexpr uint32_t IN_DSCR_EMPTY_INT_ENA = (1U << 15);  ///< IN_DSCR_EMPTY_INT_ENA
        constexpr uint32_t OUT_DSCR_ERR_INT_ENA = (1U << 14);  ///< OUT_DSCR_ERR_INT_ENA
        constexpr uint32_t IN_DSCR_ERR_INT_ENA = (1U << 13);  ///< IN_DSCR_ERR_INT_ENA
        constexpr uint32_t OUT_EOF_INT_ENA = (1U << 12);  ///< OUT_EOF_INT_ENA
        constexpr uint32_t OUT_DONE_INT_ENA = (1U << 11);  ///< OUT_DONE_INT_ENA
        constexpr uint32_t IN_ERR_EOF_INT_ENA = (1U << 10);  ///< IN_ERR_EOF_INT_ENA
        constexpr uint32_t IN_SUC_EOF_INT_ENA = (1U << 9);  ///< IN_SUC_EOF_INT_ENA
        constexpr uint32_t IN_DONE_INT_ENA = (1U << 8);  ///< IN_DONE_INT_ENA
        constexpr uint32_t TX_HUNG_INT_ENA = (1U << 7);  ///< TX_HUNG_INT_ENA
        constexpr uint32_t RX_HUNG_INT_ENA = (1U << 6);  ///< RX_HUNG_INT_ENA
        constexpr uint32_t TX_REMPTY_INT_ENA = (1U << 5);  ///< TX_REMPTY_INT_ENA
        constexpr uint32_t TX_WFULL_INT_ENA = (1U << 4);  ///< TX_WFULL_INT_ENA
        constexpr uint32_t RX_REMPTY_INT_ENA = (1U << 3);  ///< RX_REMPTY_INT_ENA
        constexpr uint32_t RX_WFULL_INT_ENA = (1U << 2);  ///< RX_WFULL_INT_ENA
        constexpr uint32_t TX_PUT_DATA_INT_ENA = (1U << 1);  ///< TX_PUT_DATA_INT_ENA
        constexpr uint32_t RX_TAKE_DATA_INT_ENA = (1U << 0);  ///< RX_TAKE_DATA_INT_ENA
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t OUT_TOTAL_EOF_INT_CLR = (1U << 16);  ///< OUT_TOTAL_EOF_INT_CLR
        constexpr uint32_t IN_DSCR_EMPTY_INT_CLR = (1U << 15);  ///< IN_DSCR_EMPTY_INT_CLR
        constexpr uint32_t OUT_DSCR_ERR_INT_CLR = (1U << 14);  ///< OUT_DSCR_ERR_INT_CLR
        constexpr uint32_t IN_DSCR_ERR_INT_CLR = (1U << 13);  ///< IN_DSCR_ERR_INT_CLR
        constexpr uint32_t OUT_EOF_INT_CLR = (1U << 12);  ///< OUT_EOF_INT_CLR
        constexpr uint32_t OUT_DONE_INT_CLR = (1U << 11);  ///< OUT_DONE_INT_CLR
        constexpr uint32_t IN_ERR_EOF_INT_CLR = (1U << 10);  ///< IN_ERR_EOF_INT_CLR
        constexpr uint32_t IN_SUC_EOF_INT_CLR = (1U << 9);  ///< IN_SUC_EOF_INT_CLR
        constexpr uint32_t IN_DONE_INT_CLR = (1U << 8);  ///< IN_DONE_INT_CLR
        constexpr uint32_t TX_HUNG_INT_CLR = (1U << 7);  ///< TX_HUNG_INT_CLR
        constexpr uint32_t RX_HUNG_INT_CLR = (1U << 6);  ///< RX_HUNG_INT_CLR
        constexpr uint32_t TX_REMPTY_INT_CLR = (1U << 5);  ///< TX_REMPTY_INT_CLR
        constexpr uint32_t TX_WFULL_INT_CLR = (1U << 4);  ///< TX_WFULL_INT_CLR
        constexpr uint32_t RX_REMPTY_INT_CLR = (1U << 3);  ///< RX_REMPTY_INT_CLR
        constexpr uint32_t RX_WFULL_INT_CLR = (1U << 2);  ///< RX_WFULL_INT_CLR
        constexpr uint32_t PUT_DATA_INT_CLR = (1U << 1);  ///< PUT_DATA_INT_CLR
        constexpr uint32_t TAKE_DATA_INT_CLR = (1U << 0);  ///< TAKE_DATA_INT_CLR
    }

    /// TIMING Register bits
    namespace timing_bits {
        constexpr uint32_t TX_BCK_IN_INV = (1U << 24);  ///< TX_BCK_IN_INV
        constexpr uint32_t DATA_ENABLE_DELAY = (2 << 22);  ///< DATA_ENABLE_DELAY
        constexpr uint32_t RX_DSYNC_SW = (1U << 21);  ///< RX_DSYNC_SW
        constexpr uint32_t TX_DSYNC_SW = (1U << 20);  ///< TX_DSYNC_SW
        constexpr uint32_t RX_BCK_OUT_DELAY = (2 << 18);  ///< RX_BCK_OUT_DELAY
        constexpr uint32_t RX_WS_OUT_DELAY = (2 << 16);  ///< RX_WS_OUT_DELAY
        constexpr uint32_t TX_SD_OUT_DELAY = (2 << 14);  ///< TX_SD_OUT_DELAY
        constexpr uint32_t TX_WS_OUT_DELAY = (2 << 12);  ///< TX_WS_OUT_DELAY
        constexpr uint32_t TX_BCK_OUT_DELAY = (2 << 10);  ///< TX_BCK_OUT_DELAY
        constexpr uint32_t RX_SD_IN_DELAY = (2 << 8);  ///< RX_SD_IN_DELAY
        constexpr uint32_t RX_WS_IN_DELAY = (2 << 6);  ///< RX_WS_IN_DELAY
        constexpr uint32_t RX_BCK_IN_DELAY = (2 << 4);  ///< RX_BCK_IN_DELAY
        constexpr uint32_t TX_WS_IN_DELAY = (2 << 2);  ///< TX_WS_IN_DELAY
        constexpr uint32_t TX_BCK_IN_DELAY = (2 << 0);  ///< TX_BCK_IN_DELAY
    }

    /// FIFO_CONF Register bits
    namespace fifo_conf_bits {
        constexpr uint32_t RX_FIFO_MOD_FORCE_EN = (1U << 20);  ///< RX_FIFO_MOD_FORCE_EN
        constexpr uint32_t TX_FIFO_MOD_FORCE_EN = (1U << 19);  ///< TX_FIFO_MOD_FORCE_EN
        constexpr uint32_t RX_FIFO_MOD = (3 << 16);  ///< RX_FIFO_MOD
        constexpr uint32_t TX_FIFO_MOD = (3 << 13);  ///< TX_FIFO_MOD
        constexpr uint32_t DSCR_EN = (1U << 12);  ///< DSCR_EN
        constexpr uint32_t TX_DATA_NUM = (6 << 6);  ///< TX_DATA_NUM
        constexpr uint32_t RX_DATA_NUM = (6 << 0);  ///< RX_DATA_NUM
    }

    /// RXEOF_NUM Register bits
    namespace rxeof_num_bits {
        constexpr uint32_t RX_EOF_NUM = (32 << 0);  ///< RX_EOF_NUM
    }

    /// CONF_SIGLE_DATA Register bits
    namespace conf_sigle_data_bits {
        constexpr uint32_t SIGLE_DATA = (32 << 0);  ///< SIGLE_DATA
    }

    /// CONF_CHAN Register bits
    namespace conf_chan_bits {
        constexpr uint32_t RX_CHAN_MOD = (2 << 3);  ///< RX_CHAN_MOD
        constexpr uint32_t TX_CHAN_MOD = (3 << 0);  ///< TX_CHAN_MOD
    }

    /// OUT_LINK Register bits
    namespace out_link_bits {
        constexpr uint32_t OUTLINK_PARK = (1U << 31);  ///< OUTLINK_PARK
        constexpr uint32_t OUTLINK_RESTART = (1U << 30);  ///< OUTLINK_RESTART
        constexpr uint32_t OUTLINK_START = (1U << 29);  ///< OUTLINK_START
        constexpr uint32_t OUTLINK_STOP = (1U << 28);  ///< OUTLINK_STOP
        constexpr uint32_t OUTLINK_ADDR = (20 << 0);  ///< OUTLINK_ADDR
    }

    /// IN_LINK Register bits
    namespace in_link_bits {
        constexpr uint32_t INLINK_PARK = (1U << 31);  ///< INLINK_PARK
        constexpr uint32_t INLINK_RESTART = (1U << 30);  ///< INLINK_RESTART
        constexpr uint32_t INLINK_START = (1U << 29);  ///< INLINK_START
        constexpr uint32_t INLINK_STOP = (1U << 28);  ///< INLINK_STOP
        constexpr uint32_t INLINK_ADDR = (20 << 0);  ///< INLINK_ADDR
    }

    /// OUT_EOF_DES_ADDR Register bits
    namespace out_eof_des_addr_bits {
        constexpr uint32_t OUT_EOF_DES_ADDR = (32 << 0);  ///< OUT_EOF_DES_ADDR
    }

    /// IN_EOF_DES_ADDR Register bits
    namespace in_eof_des_addr_bits {
        constexpr uint32_t IN_SUC_EOF_DES_ADDR = (32 << 0);  ///< IN_SUC_EOF_DES_ADDR
    }

    /// OUT_EOF_BFR_DES_ADDR Register bits
    namespace out_eof_bfr_des_addr_bits {
        constexpr uint32_t OUT_EOF_BFR_DES_ADDR = (32 << 0);  ///< OUT_EOF_BFR_DES_ADDR
    }

    /// AHB_TEST Register bits
    namespace ahb_test_bits {
        constexpr uint32_t AHB_TESTADDR = (2 << 4);  ///< AHB_TESTADDR
        constexpr uint32_t AHB_TESTMODE = (3 << 0);  ///< AHB_TESTMODE
    }

    /// INLINK_DSCR Register bits
    namespace inlink_dscr_bits {
        constexpr uint32_t INLINK_DSCR = (32 << 0);  ///< INLINK_DSCR
    }

    /// INLINK_DSCR_BF0 Register bits
    namespace inlink_dscr_bf0_bits {
        constexpr uint32_t INLINK_DSCR_BF0 = (32 << 0);  ///< INLINK_DSCR_BF0
    }

    /// INLINK_DSCR_BF1 Register bits
    namespace inlink_dscr_bf1_bits {
        constexpr uint32_t INLINK_DSCR_BF1 = (32 << 0);  ///< INLINK_DSCR_BF1
    }

    /// OUTLINK_DSCR Register bits
    namespace outlink_dscr_bits {
        constexpr uint32_t OUTLINK_DSCR = (32 << 0);  ///< OUTLINK_DSCR
    }

    /// OUTLINK_DSCR_BF0 Register bits
    namespace outlink_dscr_bf0_bits {
        constexpr uint32_t OUTLINK_DSCR_BF0 = (32 << 0);  ///< OUTLINK_DSCR_BF0
    }

    /// OUTLINK_DSCR_BF1 Register bits
    namespace outlink_dscr_bf1_bits {
        constexpr uint32_t OUTLINK_DSCR_BF1 = (32 << 0);  ///< OUTLINK_DSCR_BF1
    }

    /// LC_CONF Register bits
    namespace lc_conf_bits {
        constexpr uint32_t MEM_TRANS_EN = (1U << 13);  ///< MEM_TRANS_EN
        constexpr uint32_t CHECK_OWNER = (1U << 12);  ///< CHECK_OWNER
        constexpr uint32_t OUT_DATA_BURST_EN = (1U << 11);  ///< OUT_DATA_BURST_EN
        constexpr uint32_t INDSCR_BURST_EN = (1U << 10);  ///< INDSCR_BURST_EN
        constexpr uint32_t OUTDSCR_BURST_EN = (1U << 9);  ///< OUTDSCR_BURST_EN
        constexpr uint32_t OUT_EOF_MODE = (1U << 8);  ///< OUT_EOF_MODE
        constexpr uint32_t OUT_NO_RESTART_CLR = (1U << 7);  ///< OUT_NO_RESTART_CLR
        constexpr uint32_t OUT_AUTO_WRBACK = (1U << 6);  ///< OUT_AUTO_WRBACK
        constexpr uint32_t IN_LOOP_TEST = (1U << 5);  ///< IN_LOOP_TEST
        constexpr uint32_t OUT_LOOP_TEST = (1U << 4);  ///< OUT_LOOP_TEST
        constexpr uint32_t AHBM_RST = (1U << 3);  ///< AHBM_RST
        constexpr uint32_t AHBM_FIFO_RST = (1U << 2);  ///< AHBM_FIFO_RST
        constexpr uint32_t OUT_RST = (1U << 1);  ///< OUT_RST
        constexpr uint32_t IN_RST = (1U << 0);  ///< IN_RST
    }

    /// OUTFIFO_PUSH Register bits
    namespace outfifo_push_bits {
        constexpr uint32_t OUTFIFO_PUSH = (1U << 16);  ///< OUTFIFO_PUSH
        constexpr uint32_t OUTFIFO_WDATA = (9 << 0);  ///< OUTFIFO_WDATA
    }

    /// INFIFO_POP Register bits
    namespace infifo_pop_bits {
        constexpr uint32_t INFIFO_POP = (1U << 16);  ///< INFIFO_POP
        constexpr uint32_t INFIFO_RDATA = (12 << 0);  ///< INFIFO_RDATA
    }

    /// LC_STATE0 Register bits
    namespace lc_state0_bits {
        constexpr uint32_t LC_STATE0 = (32 << 0);  ///< LC_STATE0
    }

    /// LC_STATE1 Register bits
    namespace lc_state1_bits {
        constexpr uint32_t LC_STATE1 = (32 << 0);  ///< LC_STATE1
    }

    /// LC_HUNG_CONF Register bits
    namespace lc_hung_conf_bits {
        constexpr uint32_t LC_FIFO_TIMEOUT_ENA = (1U << 11);  ///< LC_FIFO_TIMEOUT_ENA
        constexpr uint32_t LC_FIFO_TIMEOUT_SHIFT = (3 << 8);  ///< LC_FIFO_TIMEOUT_SHIFT
        constexpr uint32_t LC_FIFO_TIMEOUT = (8 << 0);  ///< LC_FIFO_TIMEOUT
    }

    /// CVSD_CONF0 Register bits
    namespace cvsd_conf0_bits {
        constexpr uint32_t CVSD_Y_MIN = (16 << 16);  ///< CVSD_Y_MIN
        constexpr uint32_t CVSD_Y_MAX = (16 << 0);  ///< CVSD_Y_MAX
    }

    /// CVSD_CONF1 Register bits
    namespace cvsd_conf1_bits {
        constexpr uint32_t CVSD_SIGMA_MIN = (16 << 16);  ///< CVSD_SIGMA_MIN
        constexpr uint32_t CVSD_SIGMA_MAX = (16 << 0);  ///< CVSD_SIGMA_MAX
    }

    /// CVSD_CONF2 Register bits
    namespace cvsd_conf2_bits {
        constexpr uint32_t CVSD_H = (3 << 16);  ///< CVSD_H
        constexpr uint32_t CVSD_BETA = (10 << 6);  ///< CVSD_BETA
        constexpr uint32_t CVSD_J = (3 << 3);  ///< CVSD_J
        constexpr uint32_t CVSD_K = (3 << 0);  ///< CVSD_K
    }

    /// PLC_CONF0 Register bits
    namespace plc_conf0_bits {
        constexpr uint32_t N_MIN_ERR = (3 << 25);  ///< N_MIN_ERR
        constexpr uint32_t PACK_LEN_8K = (5 << 20);  ///< PACK_LEN_8K
        constexpr uint32_t MAX_SLIDE_SAMPLE = (8 << 12);  ///< MAX_SLIDE_SAMPLE
        constexpr uint32_t SHIFT_RATE = (3 << 9);  ///< SHIFT_RATE
        constexpr uint32_t N_ERR_SEG = (3 << 6);  ///< N_ERR_SEG
        constexpr uint32_t GOOD_PACK_MAX = (6 << 0);  ///< GOOD_PACK_MAX
    }

    /// PLC_CONF1 Register bits
    namespace plc_conf1_bits {
        constexpr uint32_t SLIDE_WIN_LEN = (8 << 24);  ///< SLIDE_WIN_LEN
        constexpr uint32_t BAD_OLA_WIN2_PARA = (8 << 16);  ///< BAD_OLA_WIN2_PARA
        constexpr uint32_t BAD_OLA_WIN2_PARA_SHIFT = (4 << 12);  ///< BAD_OLA_WIN2_PARA_SHIFT
        constexpr uint32_t BAD_CEF_ATTEN_PARA_SHIFT = (4 << 8);  ///< BAD_CEF_ATTEN_PARA_SHIFT
        constexpr uint32_t BAD_CEF_ATTEN_PARA = (8 << 0);  ///< BAD_CEF_ATTEN_PARA
    }

    /// PLC_CONF2 Register bits
    namespace plc_conf2_bits {
        constexpr uint32_t MIN_PERIOD = (5 << 2);  ///< MIN_PERIOD
        constexpr uint32_t CVSD_SEG_MOD = (2 << 0);  ///< CVSD_SEG_MOD
    }

    /// ESCO_CONF0 Register bits
    namespace esco_conf0_bits {
        constexpr uint32_t PLC2DMA_EN = (1U << 12);  ///< PLC2DMA_EN
        constexpr uint32_t PLC_EN = (1U << 11);  ///< PLC_EN
        constexpr uint32_t CVSD_DEC_RESET = (1U << 10);  ///< CVSD_DEC_RESET
        constexpr uint32_t CVSD_DEC_START = (1U << 9);  ///< CVSD_DEC_START
        constexpr uint32_t ESCO_CVSD_INF_EN = (1U << 8);  ///< ESCO_CVSD_INF_EN
        constexpr uint32_t ESCO_CVSD_PACK_LEN_8K = (5 << 3);  ///< ESCO_CVSD_PACK_LEN_8K
        constexpr uint32_t ESCO_CVSD_DEC_PACK_ERR = (1U << 2);  ///< ESCO_CVSD_DEC_PACK_ERR
        constexpr uint32_t ESCO_CHAN_MOD = (1U << 1);  ///< ESCO_CHAN_MOD
        constexpr uint32_t ESCO_EN = (1U << 0);  ///< ESCO_EN
    }

    /// SCO_CONF0 Register bits
    namespace sco_conf0_bits {
        constexpr uint32_t CVSD_ENC_RESET = (1U << 3);  ///< CVSD_ENC_RESET
        constexpr uint32_t CVSD_ENC_START = (1U << 2);  ///< CVSD_ENC_START
        constexpr uint32_t SCO_NO_I2S_EN = (1U << 1);  ///< SCO_NO_I2S_EN
        constexpr uint32_t SCO_WITH_I2S_EN = (1U << 0);  ///< SCO_WITH_I2S_EN
    }

    /// CONF1 Register bits
    namespace conf1_bits {
        constexpr uint32_t TX_ZEROS_RM_EN = (1U << 9);  ///< TX_ZEROS_RM_EN
        constexpr uint32_t TX_STOP_EN = (1U << 8);  ///< TX_STOP_EN
        constexpr uint32_t RX_PCM_BYPASS = (1U << 7);  ///< RX_PCM_BYPASS
        constexpr uint32_t RX_PCM_CONF = (3 << 4);  ///< RX_PCM_CONF
        constexpr uint32_t TX_PCM_BYPASS = (1U << 3);  ///< TX_PCM_BYPASS
        constexpr uint32_t TX_PCM_CONF = (3 << 0);  ///< TX_PCM_CONF
    }

    /// PD_CONF Register bits
    namespace pd_conf_bits {
        constexpr uint32_t PLC_MEM_FORCE_PU = (1U << 3);  ///< PLC_MEM_FORCE_PU
        constexpr uint32_t PLC_MEM_FORCE_PD = (1U << 2);  ///< PLC_MEM_FORCE_PD
        constexpr uint32_t FIFO_FORCE_PU = (1U << 1);  ///< FIFO_FORCE_PU
        constexpr uint32_t FIFO_FORCE_PD = (1U << 0);  ///< FIFO_FORCE_PD
    }

    /// CONF2 Register bits
    namespace conf2_bits {
        constexpr uint32_t INTER_VALID_EN = (1U << 7);  ///< INTER_VALID_EN
        constexpr uint32_t EXT_ADC_START_EN = (1U << 6);  ///< EXT_ADC_START_EN
        constexpr uint32_t LCD_EN = (1U << 5);  ///< LCD_EN
        constexpr uint32_t DATA_ENABLE = (1U << 4);  ///< DATA_ENABLE
        constexpr uint32_t DATA_ENABLE_TEST_EN = (1U << 3);  ///< DATA_ENABLE_TEST_EN
        constexpr uint32_t LCD_TX_SDX2_EN = (1U << 2);  ///< LCD_TX_SDX2_EN
        constexpr uint32_t LCD_TX_WRX2_EN = (1U << 1);  ///< LCD_TX_WRX2_EN
        constexpr uint32_t CAMERA_EN = (1U << 0);  ///< CAMERA_EN
    }

    /// CLKM_CONF Register bits
    namespace clkm_conf_bits {
        constexpr uint32_t CLKA_ENA = (1U << 21);  ///< CLKA_ENA
        constexpr uint32_t CLK_EN = (1U << 20);  ///< CLK_EN
        constexpr uint32_t CLKM_DIV_A = (6 << 14);  ///< CLKM_DIV_A
        constexpr uint32_t CLKM_DIV_B = (6 << 8);  ///< CLKM_DIV_B
        constexpr uint32_t CLKM_DIV_NUM = (8 << 0);  ///< CLKM_DIV_NUM
    }

    /// SAMPLE_RATE_CONF Register bits
    namespace sample_rate_conf_bits {
        constexpr uint32_t RX_BITS_MOD = (6 << 18);  ///< RX_BITS_MOD
        constexpr uint32_t TX_BITS_MOD = (6 << 12);  ///< TX_BITS_MOD
        constexpr uint32_t RX_BCK_DIV_NUM = (6 << 6);  ///< RX_BCK_DIV_NUM
        constexpr uint32_t TX_BCK_DIV_NUM = (6 << 0);  ///< TX_BCK_DIV_NUM
    }

    /// PDM_CONF Register bits
    namespace pdm_conf_bits {
        constexpr uint32_t TX_PDM_HP_BYPASS = (1U << 25);  ///< TX_PDM_HP_BYPASS
        constexpr uint32_t RX_PDM_SINC_DSR_16_EN = (1U << 24);  ///< RX_PDM_SINC_DSR_16_EN
        constexpr uint32_t TX_PDM_SIGMADELTA_IN_SHIFT = (2 << 22);  ///< TX_PDM_SIGMADELTA_IN_SHIFT
        constexpr uint32_t TX_PDM_SINC_IN_SHIFT = (2 << 20);  ///< TX_PDM_SINC_IN_SHIFT
        constexpr uint32_t TX_PDM_LP_IN_SHIFT = (2 << 18);  ///< TX_PDM_LP_IN_SHIFT
        constexpr uint32_t TX_PDM_HP_IN_SHIFT = (2 << 16);  ///< TX_PDM_HP_IN_SHIFT
        constexpr uint32_t TX_PDM_PRESCALE = (8 << 8);  ///< TX_PDM_PRESCALE
        constexpr uint32_t TX_PDM_SINC_OSR2 = (4 << 4);  ///< TX_PDM_SINC_OSR2
        constexpr uint32_t PDM2PCM_CONV_EN = (1U << 3);  ///< PDM2PCM_CONV_EN
        constexpr uint32_t PCM2PDM_CONV_EN = (1U << 2);  ///< PCM2PDM_CONV_EN
        constexpr uint32_t RX_PDM_EN = (1U << 1);  ///< RX_PDM_EN
        constexpr uint32_t TX_PDM_EN = (1U << 0);  ///< TX_PDM_EN
    }

    /// PDM_FREQ_CONF Register bits
    namespace pdm_freq_conf_bits {
        constexpr uint32_t TX_PDM_FP = (10 << 10);  ///< TX_PDM_FP
        constexpr uint32_t TX_PDM_FS = (10 << 0);  ///< TX_PDM_FS
    }

    /// STATE Register bits
    namespace state_bits {
        constexpr uint32_t RX_FIFO_RESET_BACK = (1U << 2);  ///< RX_FIFO_RESET_BACK
        constexpr uint32_t TX_FIFO_RESET_BACK = (1U << 1);  ///< TX_FIFO_RESET_BACK
        constexpr uint32_t TX_IDLE = (1U << 0);  ///< TX_IDLE
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t I2SDATE = (32 << 0);  ///< I2SDATE
    }

}

// ============================================================================
// APB Peripheral
// ============================================================================

namespace apb {
    /// Base addresses
    constexpr uint32_t APB_CTRL_BASE = 0x3FF66000;

    /// APB Register structure
    struct Registers {
        volatile uint32_t SYSCLK_CONF;  ///< Offset: 0x00 - APB_CTRL_SYSCLK_CONF
        volatile uint32_t XTAL_TICK_CONF;  ///< Offset: 0x04 - APB_CTRL_XTAL_TICK_CONF
        volatile uint32_t PLL_TICK_CONF;  ///< Offset: 0x08 - APB_CTRL_PLL_TICK_CONF
        volatile uint32_t CK8M_TICK_CONF;  ///< Offset: 0x0C - APB_CTRL_CK8M_TICK_CONF
        volatile uint32_t APB_SARADC_CTRL;  ///< Offset: 0x10 - APB_CTRL_APB_SARADC_CTRL
        volatile uint32_t APB_SARADC_CTRL2;  ///< Offset: 0x14 - APB_CTRL_APB_SARADC_CTRL2
        volatile uint32_t APB_SARADC_FSM;  ///< Offset: 0x18 - APB_CTRL_APB_SARADC_FSM
        volatile uint32_t APB_SARADC_SAR1_PATT_TAB1;  ///< Offset: 0x1C - APB_CTRL_APB_SARADC_SAR1_PATT_TAB1
        volatile uint32_t APB_SARADC_SAR1_PATT_TAB2;  ///< Offset: 0x20 - APB_CTRL_APB_SARADC_SAR1_PATT_TAB2
        volatile uint32_t APB_SARADC_SAR1_PATT_TAB3;  ///< Offset: 0x24 - APB_CTRL_APB_SARADC_SAR1_PATT_TAB3
        volatile uint32_t APB_SARADC_SAR1_PATT_TAB4;  ///< Offset: 0x28 - APB_CTRL_APB_SARADC_SAR1_PATT_TAB4
        volatile uint32_t APB_SARADC_SAR2_PATT_TAB1;  ///< Offset: 0x2C - APB_CTRL_APB_SARADC_SAR2_PATT_TAB1
        volatile uint32_t APB_SARADC_SAR2_PATT_TAB2;  ///< Offset: 0x30 - APB_CTRL_APB_SARADC_SAR2_PATT_TAB2
        volatile uint32_t APB_SARADC_SAR2_PATT_TAB3;  ///< Offset: 0x34 - APB_CTRL_APB_SARADC_SAR2_PATT_TAB3
        volatile uint32_t APB_SARADC_SAR2_PATT_TAB4;  ///< Offset: 0x38 - APB_CTRL_APB_SARADC_SAR2_PATT_TAB4
        volatile uint32_t APLL_TICK_CONF;  ///< Offset: 0x3C - APB_CTRL_APLL_TICK_CONF
        volatile uint32_t DATE;  ///< Offset: 0x7C - APB_CTRL_DATE
    };

    /// Peripheral instances
    inline Registers* APB_CTRL = reinterpret_cast<Registers*>(APB_CTRL_BASE);

    // Bit definitions
    /// SYSCLK_CONF Register bits
    namespace sysclk_conf_bits {
        constexpr uint32_t QUICK_CLK_CHNG = (1U << 13);  ///< QUICK_CLK_CHNG
        constexpr uint32_t RST_TICK_CNT = (1U << 12);  ///< RST_TICK_CNT
        constexpr uint32_t CLK_EN = (1U << 11);  ///< CLK_EN
        constexpr uint32_t CLK_320M_EN = (1U << 10);  ///< CLK_320M_EN
        constexpr uint32_t PRE_DIV_CNT = (10 << 0);  ///< PRE_DIV_CNT
    }

    /// XTAL_TICK_CONF Register bits
    namespace xtal_tick_conf_bits {
        constexpr uint32_t XTAL_TICK_NUM = (8 << 0);  ///< XTAL_TICK_NUM
    }

    /// PLL_TICK_CONF Register bits
    namespace pll_tick_conf_bits {
        constexpr uint32_t PLL_TICK_NUM = (8 << 0);  ///< PLL_TICK_NUM
    }

    /// CK8M_TICK_CONF Register bits
    namespace ck8m_tick_conf_bits {
        constexpr uint32_t CK8M_TICK_NUM = (8 << 0);  ///< CK8M_TICK_NUM
    }

    /// APB_SARADC_CTRL Register bits
    namespace apb_saradc_ctrl_bits {
        constexpr uint32_t SARADC_DATA_TO_I2S = (1U << 26);  ///< SARADC_DATA_TO_I2S
        constexpr uint32_t SARADC_DATA_SAR_SEL = (1U << 25);  ///< SARADC_DATA_SAR_SEL
        constexpr uint32_t SARADC_SAR2_PATT_P_CLEAR = (1U << 24);  ///< SARADC_SAR2_PATT_P_CLEAR
        constexpr uint32_t SARADC_SAR1_PATT_P_CLEAR = (1U << 23);  ///< SARADC_SAR1_PATT_P_CLEAR
        constexpr uint32_t SARADC_SAR2_PATT_LEN = (4 << 19);  ///< SARADC_SAR2_PATT_LEN
        constexpr uint32_t SARADC_SAR1_PATT_LEN = (4 << 15);  ///< SARADC_SAR1_PATT_LEN
        constexpr uint32_t SARADC_SAR_CLK_DIV = (8 << 7);  ///< SARADC_SAR_CLK_DIV
        constexpr uint32_t SARADC_SAR_CLK_GATED = (1U << 6);  ///< SARADC_SAR_CLK_GATED
        constexpr uint32_t SARADC_SAR_SEL = (1U << 5);  ///< SARADC_SAR_SEL
        constexpr uint32_t SARADC_WORK_MODE = (2 << 3);  ///< SARADC_WORK_MODE
        constexpr uint32_t SARADC_SAR2_MUX = (1U << 2);  ///< SARADC_SAR2_MUX
        constexpr uint32_t SARADC_START = (1U << 1);  ///< SARADC_START
        constexpr uint32_t SARADC_START_FORCE = (1U << 0);  ///< SARADC_START_FORCE
    }

    /// APB_SARADC_CTRL2 Register bits
    namespace apb_saradc_ctrl2_bits {
        constexpr uint32_t SARADC_SAR2_INV = (1U << 10);  ///< SARADC_SAR2_INV
        constexpr uint32_t SARADC_SAR1_INV = (1U << 9);  ///< SARADC_SAR1_INV
        constexpr uint32_t SARADC_MAX_MEAS_NUM = (8 << 1);  ///< SARADC_MAX_MEAS_NUM
        constexpr uint32_t SARADC_MEAS_NUM_LIMIT = (1U << 0);  ///< SARADC_MEAS_NUM_LIMIT
    }

    /// APB_SARADC_FSM Register bits
    namespace apb_saradc_fsm_bits {
        constexpr uint32_t SARADC_SAMPLE_CYCLE = (8 << 24);  ///< SARADC_SAMPLE_CYCLE
        constexpr uint32_t SARADC_START_WAIT = (8 << 16);  ///< SARADC_START_WAIT
        constexpr uint32_t SARADC_STANDBY_WAIT = (8 << 8);  ///< SARADC_STANDBY_WAIT
        constexpr uint32_t SARADC_RSTB_WAIT = (8 << 0);  ///< SARADC_RSTB_WAIT
    }

    /// APB_SARADC_SAR1_PATT_TAB1 Register bits
    namespace apb_saradc_sar1_patt_tab1_bits {
        constexpr uint32_t SARADC_SAR1_PATT_TAB1 = (32 << 0);  ///< SARADC_SAR1_PATT_TAB1
    }

    /// APB_SARADC_SAR1_PATT_TAB2 Register bits
    namespace apb_saradc_sar1_patt_tab2_bits {
        constexpr uint32_t SARADC_SAR1_PATT_TAB2 = (32 << 0);  ///< SARADC_SAR1_PATT_TAB2
    }

    /// APB_SARADC_SAR1_PATT_TAB3 Register bits
    namespace apb_saradc_sar1_patt_tab3_bits {
        constexpr uint32_t SARADC_SAR1_PATT_TAB3 = (32 << 0);  ///< SARADC_SAR1_PATT_TAB3
    }

    /// APB_SARADC_SAR1_PATT_TAB4 Register bits
    namespace apb_saradc_sar1_patt_tab4_bits {
        constexpr uint32_t SARADC_SAR1_PATT_TAB4 = (32 << 0);  ///< SARADC_SAR1_PATT_TAB4
    }

    /// APB_SARADC_SAR2_PATT_TAB1 Register bits
    namespace apb_saradc_sar2_patt_tab1_bits {
        constexpr uint32_t SARADC_SAR2_PATT_TAB1 = (32 << 0);  ///< SARADC_SAR2_PATT_TAB1
    }

    /// APB_SARADC_SAR2_PATT_TAB2 Register bits
    namespace apb_saradc_sar2_patt_tab2_bits {
        constexpr uint32_t SARADC_SAR2_PATT_TAB2 = (32 << 0);  ///< SARADC_SAR2_PATT_TAB2
    }

    /// APB_SARADC_SAR2_PATT_TAB3 Register bits
    namespace apb_saradc_sar2_patt_tab3_bits {
        constexpr uint32_t SARADC_SAR2_PATT_TAB3 = (32 << 0);  ///< SARADC_SAR2_PATT_TAB3
    }

    /// APB_SARADC_SAR2_PATT_TAB4 Register bits
    namespace apb_saradc_sar2_patt_tab4_bits {
        constexpr uint32_t SARADC_SAR2_PATT_TAB4 = (32 << 0);  ///< SARADC_SAR2_PATT_TAB4
    }

    /// APLL_TICK_CONF Register bits
    namespace apll_tick_conf_bits {
        constexpr uint32_t APLL_TICK_NUM = (8 << 0);  ///< APLL_TICK_NUM
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t DATE = (32 << 0);  ///< DATE
    }

}

// ============================================================================
// SYSCON Peripheral
// ============================================================================

namespace syscon {
    /// Base addresses
    constexpr uint32_t SYSCON_BASE = 0x3FF66000;

    /// SYSCON Register structure
    struct Registers {
        volatile uint32_t SYSCLK_CONF;  ///< Offset: 0x00 - SYSCON_SYSCLK_CONF
        volatile uint32_t XTAL_TICK_CONF;  ///< Offset: 0x04 - SYSCON_XTAL_TICK_CONF
        volatile uint32_t PLL_TICK_CONF;  ///< Offset: 0x08 - SYSCON_PLL_TICK_CONF
        volatile uint32_t CK8M_TICK_CONF;  ///< Offset: 0x0C - SYSCON_CK8M_TICK_CONF
        volatile uint32_t SARADC_CTRL;  ///< Offset: 0x10 - SYSCON_SARADC_CTRL
        volatile uint32_t SARADC_CTRL2;  ///< Offset: 0x14 - SYSCON_SARADC_CTRL2
        volatile uint32_t SARADC_FSM;  ///< Offset: 0x18 - SYSCON_SARADC_FSM
        volatile uint32_t SARADC_SAR1_PATT_TAB1;  ///< Offset: 0x1C - SYSCON_SARADC_SAR1_PATT_TAB1
        volatile uint32_t SARADC_SAR1_PATT_TAB2;  ///< Offset: 0x20 - SYSCON_SARADC_SAR1_PATT_TAB2
        volatile uint32_t SARADC_SAR1_PATT_TAB3;  ///< Offset: 0x24 - SYSCON_SARADC_SAR1_PATT_TAB3
        volatile uint32_t SARADC_SAR1_PATT_TAB4;  ///< Offset: 0x28 - SYSCON_SARADC_SAR1_PATT_TAB4
        volatile uint32_t SARADC_SAR2_PATT_TAB1;  ///< Offset: 0x2C - SYSCON_SARADC_SAR2_PATT_TAB1
        volatile uint32_t SARADC_SAR2_PATT_TAB2;  ///< Offset: 0x30 - SYSCON_SARADC_SAR2_PATT_TAB2
        volatile uint32_t SARADC_SAR2_PATT_TAB3;  ///< Offset: 0x34 - SYSCON_SARADC_SAR2_PATT_TAB3
        volatile uint32_t SARADC_SAR2_PATT_TAB4;  ///< Offset: 0x38 - SYSCON_SARADC_SAR2_PATT_TAB4
        volatile uint32_t APLL_TICK_CONF;  ///< Offset: 0x3C - SYSCON_APLL_TICK_CONF
        volatile uint32_t DATE;  ///< Offset: 0x7C - SYSCON_DATE
    };

    /// Peripheral instances
    inline Registers* SYSCON = reinterpret_cast<Registers*>(SYSCON_BASE);

    // Bit definitions
    /// SYSCLK_CONF Register bits
    namespace sysclk_conf_bits {
        constexpr uint32_t QUICK_CLK_CHNG = (1U << 13);  ///< QUICK_CLK_CHNG
        constexpr uint32_t RST_TICK_CNT = (1U << 12);  ///< RST_TICK_CNT
        constexpr uint32_t CLK_EN = (1U << 11);  ///< CLK_EN
        constexpr uint32_t CLK_320M_EN = (1U << 10);  ///< CLK_320M_EN
        constexpr uint32_t PRE_DIV_CNT = (10 << 0);  ///< PRE_DIV_CNT
    }

    /// XTAL_TICK_CONF Register bits
    namespace xtal_tick_conf_bits {
        constexpr uint32_t XTAL_TICK_NUM = (8 << 0);  ///< XTAL_TICK_NUM
    }

    /// PLL_TICK_CONF Register bits
    namespace pll_tick_conf_bits {
        constexpr uint32_t PLL_TICK_NUM = (8 << 0);  ///< PLL_TICK_NUM
    }

    /// CK8M_TICK_CONF Register bits
    namespace ck8m_tick_conf_bits {
        constexpr uint32_t CK8M_TICK_NUM = (8 << 0);  ///< CK8M_TICK_NUM
    }

    /// SARADC_CTRL Register bits
    namespace saradc_ctrl_bits {
        constexpr uint32_t SARADC_DATA_TO_I2S = (1U << 26);  ///< SARADC_DATA_TO_I2S
        constexpr uint32_t SARADC_DATA_SAR_SEL = (1U << 25);  ///< SARADC_DATA_SAR_SEL
        constexpr uint32_t SARADC_SAR2_PATT_P_CLEAR = (1U << 24);  ///< SARADC_SAR2_PATT_P_CLEAR
        constexpr uint32_t SARADC_SAR1_PATT_P_CLEAR = (1U << 23);  ///< SARADC_SAR1_PATT_P_CLEAR
        constexpr uint32_t SARADC_SAR2_PATT_LEN = (4 << 19);  ///< SARADC_SAR2_PATT_LEN
        constexpr uint32_t SARADC_SAR1_PATT_LEN = (4 << 15);  ///< SARADC_SAR1_PATT_LEN
        constexpr uint32_t SARADC_SAR_CLK_DIV = (8 << 7);  ///< SARADC_SAR_CLK_DIV
        constexpr uint32_t SARADC_SAR_CLK_GATED = (1U << 6);  ///< SARADC_SAR_CLK_GATED
        constexpr uint32_t SARADC_SAR_SEL = (1U << 5);  ///< SARADC_SAR_SEL
        constexpr uint32_t SARADC_WORK_MODE = (2 << 3);  ///< SARADC_WORK_MODE
        constexpr uint32_t SARADC_SAR2_MUX = (1U << 2);  ///< SARADC_SAR2_MUX
        constexpr uint32_t SARADC_START = (1U << 1);  ///< SARADC_START
        constexpr uint32_t SARADC_START_FORCE = (1U << 0);  ///< SARADC_START_FORCE
    }

    /// SARADC_CTRL2 Register bits
    namespace saradc_ctrl2_bits {
        constexpr uint32_t SARADC_SAR2_INV = (1U << 10);  ///< SARADC_SAR2_INV
        constexpr uint32_t SARADC_SAR1_INV = (1U << 9);  ///< SARADC_SAR1_INV
        constexpr uint32_t SARADC_MAX_MEAS_NUM = (8 << 1);  ///< SARADC_MAX_MEAS_NUM
        constexpr uint32_t SARADC_MEAS_NUM_LIMIT = (1U << 0);  ///< SARADC_MEAS_NUM_LIMIT
    }

    /// SARADC_FSM Register bits
    namespace saradc_fsm_bits {
        constexpr uint32_t SARADC_SAMPLE_CYCLE = (8 << 24);  ///< SARADC_SAMPLE_CYCLE
        constexpr uint32_t SARADC_START_WAIT = (8 << 16);  ///< SARADC_START_WAIT
        constexpr uint32_t SARADC_STANDBY_WAIT = (8 << 8);  ///< SARADC_STANDBY_WAIT
        constexpr uint32_t SARADC_RSTB_WAIT = (8 << 0);  ///< SARADC_RSTB_WAIT
    }

    /// SARADC_SAR1_PATT_TAB1 Register bits
    namespace saradc_sar1_patt_tab1_bits {
        constexpr uint32_t SARADC_SAR1_PATT_TAB1 = (32 << 0);  ///< SARADC_SAR1_PATT_TAB1
    }

    /// SARADC_SAR1_PATT_TAB2 Register bits
    namespace saradc_sar1_patt_tab2_bits {
        constexpr uint32_t SARADC_SAR1_PATT_TAB2 = (32 << 0);  ///< SARADC_SAR1_PATT_TAB2
    }

    /// SARADC_SAR1_PATT_TAB3 Register bits
    namespace saradc_sar1_patt_tab3_bits {
        constexpr uint32_t SARADC_SAR1_PATT_TAB3 = (32 << 0);  ///< SARADC_SAR1_PATT_TAB3
    }

    /// SARADC_SAR1_PATT_TAB4 Register bits
    namespace saradc_sar1_patt_tab4_bits {
        constexpr uint32_t SARADC_SAR1_PATT_TAB4 = (32 << 0);  ///< SARADC_SAR1_PATT_TAB4
    }

    /// SARADC_SAR2_PATT_TAB1 Register bits
    namespace saradc_sar2_patt_tab1_bits {
        constexpr uint32_t SARADC_SAR2_PATT_TAB1 = (32 << 0);  ///< SARADC_SAR2_PATT_TAB1
    }

    /// SARADC_SAR2_PATT_TAB2 Register bits
    namespace saradc_sar2_patt_tab2_bits {
        constexpr uint32_t SARADC_SAR2_PATT_TAB2 = (32 << 0);  ///< SARADC_SAR2_PATT_TAB2
    }

    /// SARADC_SAR2_PATT_TAB3 Register bits
    namespace saradc_sar2_patt_tab3_bits {
        constexpr uint32_t SARADC_SAR2_PATT_TAB3 = (32 << 0);  ///< SARADC_SAR2_PATT_TAB3
    }

    /// SARADC_SAR2_PATT_TAB4 Register bits
    namespace saradc_sar2_patt_tab4_bits {
        constexpr uint32_t SARADC_SAR2_PATT_TAB4 = (32 << 0);  ///< SARADC_SAR2_PATT_TAB4
    }

    /// APLL_TICK_CONF Register bits
    namespace apll_tick_conf_bits {
        constexpr uint32_t APLL_TICK_NUM = (8 << 0);  ///< APLL_TICK_NUM
    }

    /// DATE Register bits
    namespace date_bits {
        constexpr uint32_t DATE = (32 << 0);  ///< DATE
    }

}

// ============================================================================
// FE2 Peripheral
// ============================================================================

namespace fe2 {
    /// Base addresses
    constexpr uint32_t FE2_BASE = 0x3FF45000;

    /// FE2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* FE2 = reinterpret_cast<Registers*>(FE2_BASE);

}

// ============================================================================
// BT Peripheral
// ============================================================================

namespace bt {
    /// Base addresses
    constexpr uint32_t BT_BASE = 0x3FF51000;

    /// BT Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT = reinterpret_cast<Registers*>(BT_BASE);

}


} // namespace alloy::generated::esp32

#endif // ALLOY_GENERATED_ESP32_PERIPHERALS_HPP