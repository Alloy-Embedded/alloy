/// Auto-generated code for GD32VF103
/// Generated by Alloy Code Generator
/// Source: gigadevice_gd32vf103.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:21:42
#ifndef ALLOY_GENERATED_GD32VF103_PERIPHERALS_HPP
#define ALLOY_GENERATED_GD32VF103_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::gd32vf103 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC0_BASE = 0x40012400;
    constexpr uint32_t ADC1_BASE = 0x40012800;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t STAT;  ///< Offset: 0x00 - status register
        volatile uint32_t CTL0;  ///< Offset: 0x04 - control register 0
        volatile uint32_t CTL1;  ///< Offset: 0x08 - control register 1
        volatile uint32_t SAMPT0;  ///< Offset: 0x0C - Sample time register 0
        volatile uint32_t SAMPT1;  ///< Offset: 0x10 - Sample time register 1
        volatile uint32_t IOFF0;  ///< Offset: 0x14 - Inserted channel data offset register 0
        volatile uint32_t IOFF1;  ///< Offset: 0x18 - Inserted channel data offset register 1
        volatile uint32_t IOFF2;  ///< Offset: 0x1C - Inserted channel data offset register 2
        volatile uint32_t IOFF3;  ///< Offset: 0x20 - Inserted channel data offset register 3
        volatile uint32_t WDHT;  ///< Offset: 0x24 - watchdog higher threshold register
        volatile uint32_t WDLT;  ///< Offset: 0x28 - watchdog lower threshold register
        volatile uint32_t RSQ0;  ///< Offset: 0x2C - regular sequence register 0
        volatile uint32_t RSQ1;  ///< Offset: 0x30 - regular sequence register 1
        volatile uint32_t RSQ2;  ///< Offset: 0x34 - regular sequence register 2
        volatile uint32_t ISQ;  ///< Offset: 0x38 - Inserted sequence register
        volatile uint32_t IDATA0;  ///< Offset: 0x3C - Inserted data register 0
        volatile uint32_t IDATA1;  ///< Offset: 0x40 - Inserted data register 1
        volatile uint32_t IDATA2;  ///< Offset: 0x44 - Inserted data register 2
        volatile uint32_t IDATA3;  ///< Offset: 0x48 - Inserted data register 3
        volatile uint32_t RDATA;  ///< Offset: 0x4C - regular data register
        volatile uint32_t OVSAMPCTL;  ///< Offset: 0x80 - Oversample control register
    };

    /// Peripheral instances
    inline Registers* ADC0 = reinterpret_cast<Registers*>(ADC0_BASE);
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);

    // Bit definitions
    /// STAT Register bits
    namespace stat_bits {
        constexpr uint32_t STRC = (1U << 4);  ///< Start flag of regular channel group
        constexpr uint32_t STIC = (1U << 3);  ///< Start flag of inserted channel group
        constexpr uint32_t EOIC = (1U << 2);  ///< End of inserted group conversion flag
        constexpr uint32_t EOC = (1U << 1);  ///< End of group conversion flag
        constexpr uint32_t WDE = (1U << 0);  ///< Analog watchdog event flag
    }

    /// CTL0 Register bits
    namespace ctl0_bits {
        constexpr uint32_t RWDEN = (1U << 23);  ///< Regular channel analog watchdog enable
        constexpr uint32_t IWDEN = (1U << 22);  ///< Inserted channel analog watchdog 	 enable
        constexpr uint32_t SYNCM = (4 << 16);  ///< sync mode selection
        constexpr uint32_t DISNUM = (3 << 13);  ///< Number of conversions in 	 discontinuous mode
        constexpr uint32_t DISIC = (1U << 12);  ///< Discontinuous mode on 	 inserted channels
        constexpr uint32_t DISRC = (1U << 11);  ///< Discontinuous mode on regular channels
        constexpr uint32_t ICA = (1U << 10);  ///< Inserted channel group convert 	 automatically
        constexpr uint32_t WDSC = (1U << 9);  ///< When in scan mode, analog watchdog 	 is effective on a single channel
        constexpr uint32_t SM = (1U << 8);  ///< Scan mode
        constexpr uint32_t EOICIE = (1U << 7);  ///< Interrupt enable for EOIC
        constexpr uint32_t WDEIE = (1U << 6);  ///< Interrupt enable for WDE
        constexpr uint32_t EOCIE = (1U << 5);  ///< Interrupt enable for EOC
        constexpr uint32_t WDCHSEL = (5 << 0);  ///< Analog watchdog channel select
    }

    /// CTL1 Register bits
    namespace ctl1_bits {
        constexpr uint32_t TSVREN = (1U << 23);  ///< Channel 16 and 17 enable of ADC0
        constexpr uint32_t SWRCST = (1U << 22);  ///< Start on regular channel
        constexpr uint32_t SWICST = (1U << 21);  ///< Start on inserted channel
        constexpr uint32_t ETERC = (1U << 20);  ///< External trigger enable for regular channel
        constexpr uint32_t ETSRC = (3 << 17);  ///< External trigger select for regular channel
        constexpr uint32_t ETEIC = (1U << 15);  ///< External trigger select for inserted channel
        constexpr uint32_t ETSIC = (3 << 12);  ///< External trigger select for inserted channel
        constexpr uint32_t DAL = (1U << 11);  ///< Data alignment
        constexpr uint32_t DMA = (1U << 8);  ///< DMA request enable
        constexpr uint32_t RSTCLB = (1U << 3);  ///< Reset calibration
        constexpr uint32_t CLB = (1U << 2);  ///< ADC calibration
        constexpr uint32_t CTN = (1U << 1);  ///< Continuous mode
        constexpr uint32_t ADCON = (1U << 0);  ///< ADC on
    }

    /// SAMPT0 Register bits
    namespace sampt0_bits {
        constexpr uint32_t SPT10 = (3 << 0);  ///< Channel 10 sample time selection
        constexpr uint32_t SPT11 = (3 << 3);  ///< Channel 11 sample time selection
        constexpr uint32_t SPT12 = (3 << 6);  ///< Channel 12 sample time selection
        constexpr uint32_t SPT13 = (3 << 9);  ///< Channel 13 sample time selection
        constexpr uint32_t SPT14 = (3 << 12);  ///< Channel 14 sample time selection
        constexpr uint32_t SPT15 = (3 << 15);  ///< Channel 15 sample time selection
        constexpr uint32_t SPT16 = (3 << 18);  ///< Channel 16 sample time selection
        constexpr uint32_t SPT17 = (3 << 21);  ///< Channel 17 sample time selection
    }

    /// SAMPT1 Register bits
    namespace sampt1_bits {
        constexpr uint32_t SPT0 = (3 << 0);  ///< Channel 0 sample time selection
        constexpr uint32_t SPT1 = (3 << 3);  ///< Channel 1 sample time selection
        constexpr uint32_t SPT2 = (3 << 6);  ///< Channel 2 sample time selection
        constexpr uint32_t SPT3 = (3 << 9);  ///< Channel 3 sample time selection
        constexpr uint32_t SPT4 = (3 << 12);  ///< Channel 4 sample time selection
        constexpr uint32_t SPT5 = (3 << 15);  ///< Channel 5 sample time selection
        constexpr uint32_t SPT6 = (3 << 18);  ///< Channel 6 sample time selection
        constexpr uint32_t SPT7 = (3 << 21);  ///< Channel 7 sample time selection
        constexpr uint32_t SPT8 = (3 << 24);  ///< Channel 8 sample time selection
        constexpr uint32_t SPT9 = (3 << 27);  ///< Channel 9 sample time selection
    }

    /// IOFF0 Register bits
    namespace ioff0_bits {
        constexpr uint32_t IOFF = (12 << 0);  ///< Data offset for inserted channel 0
    }

    /// IOFF1 Register bits
    namespace ioff1_bits {
        constexpr uint32_t IOFF = (12 << 0);  ///< Data offset for inserted channel 1
    }

    /// IOFF2 Register bits
    namespace ioff2_bits {
        constexpr uint32_t IOFF = (12 << 0);  ///< Data offset for inserted channel 2
    }

    /// IOFF3 Register bits
    namespace ioff3_bits {
        constexpr uint32_t IOFF = (12 << 0);  ///< Data offset for inserted channel 3
    }

    /// WDHT Register bits
    namespace wdht_bits {
        constexpr uint32_t WDHT = (12 << 0);  ///< Analog watchdog higher threshold
    }

    /// WDLT Register bits
    namespace wdlt_bits {
        constexpr uint32_t WDLT = (12 << 0);  ///< Analog watchdog lower threshold
    }

    /// RSQ0 Register bits
    namespace rsq0_bits {
        constexpr uint32_t RL = (4 << 20);  ///< Regular channel group length
        constexpr uint32_t RSQ15 = (5 << 15);  ///< 16th conversion in regular sequence
        constexpr uint32_t RSQ14 = (5 << 10);  ///< 15th conversion in regular sequence
        constexpr uint32_t RSQ13 = (5 << 5);  ///< 14th conversion in regular sequence
        constexpr uint32_t RSQ12 = (5 << 0);  ///< 13th conversion in regular sequence
    }

    /// RSQ1 Register bits
    namespace rsq1_bits {
        constexpr uint32_t RSQ11 = (5 << 25);  ///< 12th conversion in regular sequence
        constexpr uint32_t RSQ10 = (5 << 20);  ///< 11th conversion in regular sequence
        constexpr uint32_t RSQ9 = (5 << 15);  ///< 10th conversion in regular sequence
        constexpr uint32_t RSQ8 = (5 << 10);  ///< 9th conversion in regular sequence
        constexpr uint32_t RSQ7 = (5 << 5);  ///< 8th conversion in regular sequence
        constexpr uint32_t RSQ6 = (5 << 0);  ///< 7th conversion in regular sequence
    }

    /// RSQ2 Register bits
    namespace rsq2_bits {
        constexpr uint32_t RSQ5 = (5 << 25);  ///< 6th conversion in regular sequence
        constexpr uint32_t RSQ4 = (5 << 20);  ///< 5th conversion in regular sequence
        constexpr uint32_t RSQ3 = (5 << 15);  ///< 4th conversion in regular sequence
        constexpr uint32_t RSQ2 = (5 << 10);  ///< 3rd conversion in regular sequence
        constexpr uint32_t RSQ1 = (5 << 5);  ///< 2nd conversion in regular sequence
        constexpr uint32_t RSQ0 = (5 << 0);  ///< 1st conversion in regular sequence
    }

    /// ISQ Register bits
    namespace isq_bits {
        constexpr uint32_t IL = (2 << 20);  ///< Inserted channel group length
        constexpr uint32_t ISQ3 = (5 << 15);  ///< 4th conversion in inserted sequence
        constexpr uint32_t ISQ2 = (5 << 10);  ///< 3rd conversion in inserted sequence
        constexpr uint32_t ISQ1 = (5 << 5);  ///< 2nd conversion in inserted sequence
        constexpr uint32_t ISQ0 = (5 << 0);  ///< 1st conversion in inserted sequence
    }

    /// IDATA0 Register bits
    namespace idata0_bits {
        constexpr uint32_t IDATAn = (16 << 0);  ///< Inserted number n conversion data
    }

    /// IDATA1 Register bits
    namespace idata1_bits {
        constexpr uint32_t IDATAn = (16 << 0);  ///< Inserted number n conversion data
    }

    /// IDATA2 Register bits
    namespace idata2_bits {
        constexpr uint32_t IDATAn = (16 << 0);  ///< Inserted number n conversion data
    }

    /// IDATA3 Register bits
    namespace idata3_bits {
        constexpr uint32_t IDATAn = (16 << 0);  ///< Inserted number n conversion data
    }

    /// RDATA Register bits
    namespace rdata_bits {
        constexpr uint32_t ADC1RDTR = (16 << 16);  ///< ADC regular channel data
        constexpr uint32_t RDATA = (16 << 0);  ///< Regular channel data
    }

    /// OVSAMPCTL Register bits
    namespace ovsampctl_bits {
        constexpr uint32_t DRES = (2 << 12);  ///< ADC resolution
        constexpr uint32_t TOVS = (1U << 9);  ///< Triggered Oversampling
        constexpr uint32_t OVSS = (4 << 5);  ///< Oversampling shift
        constexpr uint32_t OVSR = (3 << 2);  ///< Oversampling ratio
        constexpr uint32_t OVSEN = (1U << 0);  ///< Oversampler Enable
    }

}

// ============================================================================
// AFIO Peripheral
// ============================================================================

namespace afio {
    /// Base addresses
    constexpr uint32_t AFIO_BASE = 0x40010000;

    /// AFIO Register structure
    struct Registers {
        volatile uint32_t EC;  ///< Offset: 0x00 - Event control register
        volatile uint32_t PCF0;  ///< Offset: 0x04 - AFIO port configuration register 0
        volatile uint32_t EXTISS0;  ///< Offset: 0x08 - EXTI sources selection register 0
        volatile uint32_t EXTISS1;  ///< Offset: 0x0C - EXTI sources selection register 1
        volatile uint32_t EXTISS2;  ///< Offset: 0x10 - EXTI sources selection register 2
        volatile uint32_t EXTISS3;  ///< Offset: 0x14 - EXTI sources selection register 3
        volatile uint32_t PCF1;  ///< Offset: 0x1C - AFIO port configuration register 1
    };

    /// Peripheral instances
    inline Registers* AFIO = reinterpret_cast<Registers*>(AFIO_BASE);

    // Bit definitions
    /// EC Register bits
    namespace ec_bits {
        constexpr uint32_t EOE = (1U << 7);  ///< Event output enable
        constexpr uint32_t PORT = (3 << 4);  ///< Event output port selection
        constexpr uint32_t PIN = (4 << 0);  ///< Event output pin selection
    }

    /// PCF0 Register bits
    namespace pcf0_bits {
        constexpr uint32_t TIMER1ITI1_REMAP = (1U << 29);  ///< TIMER1 internal trigger 1 remapping
        constexpr uint32_t SPI2_REMAP = (1U << 28);  ///< SPI2/I2S2 remapping
        constexpr uint32_t SWJ_CFG = (3 << 24);  ///< Serial wire JTAG configuration
        constexpr uint32_t CAN1_REMAP = (1U << 22);  ///< CAN1 I/O remapping
        constexpr uint32_t TIMER4CH3_IREMAP = (1U << 16);  ///< TIMER4 channel3 internal remapping
        constexpr uint32_t PD01_REMAP = (1U << 15);  ///< Port D0/Port D1 mapping on OSC_IN/OSC_OUT
        constexpr uint32_t CAN0_REMAP = (2 << 13);  ///< CAN0 alternate interface remapping
        constexpr uint32_t TIMER3_REMAP = (1U << 12);  ///< TIMER3 remapping
        constexpr uint32_t TIMER2_REMAP = (2 << 10);  ///< TIMER2 remapping
        constexpr uint32_t TIMER1_REMAP = (2 << 8);  ///< TIMER1 remapping
        constexpr uint32_t TIMER0_REMAP = (2 << 6);  ///< TIMER0 remapping
        constexpr uint32_t USART2_REMAP = (2 << 4);  ///< USART2 remapping
        constexpr uint32_t USART1_REMAP = (1U << 3);  ///< USART1 remapping
        constexpr uint32_t USART0_REMAP = (1U << 2);  ///< USART0 remapping
        constexpr uint32_t I2C0_REMAP = (1U << 1);  ///< I2C0 remapping
        constexpr uint32_t SPI0_REMAP = (1U << 0);  ///< SPI0 remapping
    }

    /// EXTISS0 Register bits
    namespace extiss0_bits {
        constexpr uint32_t EXTI3_SS = (4 << 12);  ///< EXTI 3 sources selection
        constexpr uint32_t EXTI2_SS = (4 << 8);  ///< EXTI 2 sources selection
        constexpr uint32_t EXTI1_SS = (4 << 4);  ///< EXTI 1 sources selection
        constexpr uint32_t EXTI0_SS = (4 << 0);  ///< EXTI 0 sources selection
    }

    /// EXTISS1 Register bits
    namespace extiss1_bits {
        constexpr uint32_t EXTI7_SS = (4 << 12);  ///< EXTI 7 sources selection
        constexpr uint32_t EXTI6_SS = (4 << 8);  ///< EXTI 6 sources selection
        constexpr uint32_t EXTI5_SS = (4 << 4);  ///< EXTI 5 sources selection
        constexpr uint32_t EXTI4_SS = (4 << 0);  ///< EXTI 4 sources selection
    }

    /// EXTISS2 Register bits
    namespace extiss2_bits {
        constexpr uint32_t EXTI11_SS = (4 << 12);  ///< EXTI 11 sources selection
        constexpr uint32_t EXTI10_SS = (4 << 8);  ///< EXTI 10 sources selection
        constexpr uint32_t EXTI9_SS = (4 << 4);  ///< EXTI 9 sources selection
        constexpr uint32_t EXTI8_SS = (4 << 0);  ///< EXTI 8 sources selection
    }

    /// EXTISS3 Register bits
    namespace extiss3_bits {
        constexpr uint32_t EXTI15_SS = (4 << 12);  ///< EXTI 15 sources selection
        constexpr uint32_t EXTI14_SS = (4 << 8);  ///< EXTI 14 sources selection
        constexpr uint32_t EXTI13_SS = (4 << 4);  ///< EXTI 13 sources selection
        constexpr uint32_t EXTI12_SS = (4 << 0);  ///< EXTI 12 sources selection
    }

    /// PCF1 Register bits
    namespace pcf1_bits {
        constexpr uint32_t EXMC_NADV = (1U << 10);  ///< EXMC_NADV connect/disconnect
    }

}

// ============================================================================
// BKP Peripheral
// ============================================================================

namespace bkp {
    /// Base addresses
    constexpr uint32_t BKP_BASE = 0x40006C00;

    /// BKP Register structure
    struct Registers {
        volatile uint32_t DATA0;  ///< Offset: 0x04 - Backup data register 0
        volatile uint32_t DATA1;  ///< Offset: 0x08 - Backup data register 1
        volatile uint32_t DATA2;  ///< Offset: 0x0C - Backup data register 2
        volatile uint32_t DATA3;  ///< Offset: 0x10 - Backup data register 3
        volatile uint32_t DATA4;  ///< Offset: 0x14 - Backup data register 4
        volatile uint32_t DATA5;  ///< Offset: 0x18 - Backup data register 5
        volatile uint32_t DATA6;  ///< Offset: 0x1C - Backup data register 6
        volatile uint32_t DATA7;  ///< Offset: 0x20 - Backup data register 7
        volatile uint32_t DATA8;  ///< Offset: 0x24 - Backup data register 8
        volatile uint32_t DATA9;  ///< Offset: 0x28 - Backup data register 9
        volatile uint32_t DATA10;  ///< Offset: 0x40 - Backup data register 10
        volatile uint32_t DATA11;  ///< Offset: 0x44 - Backup data register 11
        volatile uint32_t DATA12;  ///< Offset: 0x48 - Backup data register 12
        volatile uint32_t DATA13;  ///< Offset: 0x4C - Backup data register 13
        volatile uint32_t DATA14;  ///< Offset: 0x50 - Backup data register 14
        volatile uint32_t DATA15;  ///< Offset: 0x54 - Backup data register 15
        volatile uint32_t DATA16;  ///< Offset: 0x58 - Backup data register 16
        volatile uint32_t DATA17;  ///< Offset: 0x5C - Backup data register 17
        volatile uint32_t DATA18;  ///< Offset: 0x60 - Backup data register 18
        volatile uint32_t DATA19;  ///< Offset: 0x64 - Backup data register 19
        volatile uint32_t DATA20;  ///< Offset: 0x68 - Backup data register 20
        volatile uint32_t DATA21;  ///< Offset: 0x6C - Backup data register 21
        volatile uint32_t DATA22;  ///< Offset: 0x70 - Backup data register 22
        volatile uint32_t DATA23;  ///< Offset: 0x74 - Backup data register 23
        volatile uint32_t DATA24;  ///< Offset: 0x78 - Backup data register 24
        volatile uint32_t DATA25;  ///< Offset: 0x7C - Backup data register 25
        volatile uint32_t DATA26;  ///< Offset: 0x80 - Backup data register 26
        volatile uint32_t DATA27;  ///< Offset: 0x84 - Backup data register 27
        volatile uint32_t DATA28;  ///< Offset: 0x88 - Backup data register 28
        volatile uint32_t DATA29;  ///< Offset: 0x8C - Backup data register 29
        volatile uint32_t DATA30;  ///< Offset: 0x90 - Backup data register 30
        volatile uint32_t DATA31;  ///< Offset: 0x94 - Backup data register 31
        volatile uint32_t DATA32;  ///< Offset: 0x98 - Backup data register 32
        volatile uint32_t DATA33;  ///< Offset: 0x9C - Backup data register 33
        volatile uint32_t DATA34;  ///< Offset: 0xA0 - Backup data register 34
        volatile uint32_t DATA35;  ///< Offset: 0xA4 - Backup data register 35
        volatile uint32_t DATA36;  ///< Offset: 0xA8 - Backup data register 36
        volatile uint32_t DATA37;  ///< Offset: 0xAC - Backup data register 37
        volatile uint32_t DATA38;  ///< Offset: 0xB0 - Backup data register 38
        volatile uint32_t DATA39;  ///< Offset: 0xB4 - Backup data register 39
        volatile uint32_t DATA40;  ///< Offset: 0xB8 - Backup data register 40
        volatile uint32_t DATA41;  ///< Offset: 0xBC - Backup data register 41
        volatile uint32_t OCTL;  ///< Offset: 0x2C - RTC signal output control register
        volatile uint32_t TPCTL;  ///< Offset: 0x30 - Tamper pin control register
        volatile uint32_t TPCS;  ///< Offset: 0x34 - Tamper control and status register
    };

    /// Peripheral instances
    inline Registers* BKP = reinterpret_cast<Registers*>(BKP_BASE);

    // Bit definitions
    /// DATA0 Register bits
    namespace data0_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA1 Register bits
    namespace data1_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA2 Register bits
    namespace data2_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA3 Register bits
    namespace data3_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA4 Register bits
    namespace data4_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA5 Register bits
    namespace data5_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA6 Register bits
    namespace data6_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA7 Register bits
    namespace data7_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA8 Register bits
    namespace data8_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA9 Register bits
    namespace data9_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA10 Register bits
    namespace data10_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA11 Register bits
    namespace data11_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA12 Register bits
    namespace data12_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA13 Register bits
    namespace data13_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA14 Register bits
    namespace data14_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA15 Register bits
    namespace data15_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA16 Register bits
    namespace data16_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA17 Register bits
    namespace data17_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA18 Register bits
    namespace data18_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA19 Register bits
    namespace data19_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA20 Register bits
    namespace data20_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA21 Register bits
    namespace data21_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA22 Register bits
    namespace data22_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA23 Register bits
    namespace data23_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA24 Register bits
    namespace data24_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA25 Register bits
    namespace data25_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA26 Register bits
    namespace data26_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA27 Register bits
    namespace data27_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA28 Register bits
    namespace data28_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA29 Register bits
    namespace data29_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA30 Register bits
    namespace data30_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA31 Register bits
    namespace data31_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA32 Register bits
    namespace data32_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA33 Register bits
    namespace data33_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA34 Register bits
    namespace data34_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA35 Register bits
    namespace data35_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA36 Register bits
    namespace data36_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA37 Register bits
    namespace data37_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA38 Register bits
    namespace data38_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA39 Register bits
    namespace data39_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA40 Register bits
    namespace data40_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// DATA41 Register bits
    namespace data41_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Backup data
    }

    /// OCTL Register bits
    namespace octl_bits {
        constexpr uint32_t ROSEL = (1U << 9);  ///< RTC output selection
        constexpr uint32_t ASOEN = (1U << 8);  ///< RTC alarm or second signal output enable
        constexpr uint32_t COEN = (1U << 7);  ///< RTC clock calibration output enable
        constexpr uint32_t RCCV = (7 << 0);  ///< RTC clock calibration value
    }

    /// TPCTL Register bits
    namespace tpctl_bits {
        constexpr uint32_t TPAL = (1U << 1);  ///< TAMPER pin active level
        constexpr uint32_t TPEN = (1U << 0);  ///< TAMPER detection enable
    }

    /// TPCS Register bits
    namespace tpcs_bits {
        constexpr uint32_t TIF = (1U << 9);  ///< Tamper interrupt flag
        constexpr uint32_t TEF = (1U << 8);  ///< Tamper event flag
        constexpr uint32_t TPIE = (1U << 2);  ///< Tamper interrupt enable
        constexpr uint32_t TIR = (1U << 1);  ///< Tamper interrupt reset
        constexpr uint32_t TER = (1U << 0);  ///< Tamper event reset
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN0_BASE = 0x40006400;
    constexpr uint32_t CAN1_BASE = 0x40006800;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - Control register
        volatile uint32_t STAT;  ///< Offset: 0x04 - Status register
        volatile uint32_t TSTAT;  ///< Offset: 0x08 - Transmit status register
        volatile uint32_t RFIFO0;  ///< Offset: 0x0C - Receive message FIFO0 register
        volatile uint32_t RFIFO1;  ///< Offset: 0x10 - Receive message FIFO1 register
        volatile uint32_t INTEN;  ///< Offset: 0x14 - Interrupt enable register
        volatile uint32_t ERR;  ///< Offset: 0x18 - Error register
        volatile uint32_t BT;  ///< Offset: 0x1C - Bit timing register
        volatile uint32_t TMI0;  ///< Offset: 0x180 - Transmit mailbox identifier register 0
        volatile uint32_t TMP0;  ///< Offset: 0x184 - Transmit mailbox property register 0
        volatile uint32_t TMDATA00;  ///< Offset: 0x188 - Transmit mailbox data0 register
        volatile uint32_t TMDATA10;  ///< Offset: 0x18C - Transmit mailbox data1 register
        volatile uint32_t TMI1;  ///< Offset: 0x190 - Transmit mailbox identifier register 1
        volatile uint32_t TMP1;  ///< Offset: 0x194 - Transmit mailbox property register 1
        volatile uint32_t TMDATA01;  ///< Offset: 0x198 - Transmit mailbox data0 register
        volatile uint32_t TMDATA11;  ///< Offset: 0x19C - Transmit mailbox data1 register
        volatile uint32_t TMI2;  ///< Offset: 0x1A0 - Transmit mailbox identifier register 2
        volatile uint32_t TMP2;  ///< Offset: 0x1A4 - Transmit mailbox property register 2
        volatile uint32_t TMDATA02;  ///< Offset: 0x1A8 - Transmit mailbox data0 register
        volatile uint32_t TMDATA12;  ///< Offset: 0x1AC - Transmit mailbox data1 register
        volatile uint32_t RFIFOMI0;  ///< Offset: 0x1B0 - Receive FIFO mailbox identifier register
        volatile uint32_t RFIFOMP0;  ///< Offset: 0x1B4 - Receive FIFO0 mailbox property register
        volatile uint32_t RFIFOMDATA00;  ///< Offset: 0x1B8 - Receive FIFO0 mailbox data0 register
        volatile uint32_t RFIFOMDATA10;  ///< Offset: 0x1BC - Receive FIFO0 mailbox data1 register
        volatile uint32_t RFIFOMI1;  ///< Offset: 0x1C0 - Receive FIFO1 mailbox identifier register
        volatile uint32_t RFIFOMP1;  ///< Offset: 0x1C4 - Receive FIFO1 mailbox property register
        volatile uint32_t RFIFOMDATA01;  ///< Offset: 0x1C8 - Receive FIFO1 mailbox data0 register
        volatile uint32_t RFIFOMDATA11;  ///< Offset: 0x1CC - Receive FIFO1 mailbox data1 register
        volatile uint32_t FCTL;  ///< Offset: 0x200 - Filter control register
        volatile uint32_t FMCFG;  ///< Offset: 0x204 - Filter mode configuration register
        volatile uint32_t FSCFG;  ///< Offset: 0x20C - Filter scale configuration register
        volatile uint32_t FAFIFO;  ///< Offset: 0x214 - Filter associated FIFO register
        volatile uint32_t FW;  ///< Offset: 0x21C - Filter working register
        volatile uint32_t F0DATA0;  ///< Offset: 0x240 - Filter 0 data 0 register
        volatile uint32_t F0DATA1;  ///< Offset: 0x244 - Filter 0 data 1 register
        volatile uint32_t F1DATA0;  ///< Offset: 0x248 - Filter 1 data 0 register
        volatile uint32_t F1DATA1;  ///< Offset: 0x24C - Filter 1 data 1 register
        volatile uint32_t F2DATA0;  ///< Offset: 0x250 - Filter 2 data 0 register
        volatile uint32_t F2DATA1;  ///< Offset: 0x254 - Filter 2 data 1 register
        volatile uint32_t F3DATA0;  ///< Offset: 0x258 - Filter 3 data 0 register
        volatile uint32_t F3DATA1;  ///< Offset: 0x25C - Filter 3 data 1 register
        volatile uint32_t F4DATA0;  ///< Offset: 0x260 - Filter 4 data 0 register
        volatile uint32_t F4DATA1;  ///< Offset: 0x264 - Filter 4 data 1 register
        volatile uint32_t F5DATA0;  ///< Offset: 0x268 - Filter 5 data 0 register
        volatile uint32_t F5DATA1;  ///< Offset: 0x26C - Filter 5 data 1 register
        volatile uint32_t F6DATA0;  ///< Offset: 0x270 - Filter 6 data 0 register
        volatile uint32_t F6DATA1;  ///< Offset: 0x274 - Filter 6 data 1 register
        volatile uint32_t F7DATA0;  ///< Offset: 0x278 - Filter 7 data 0 register
        volatile uint32_t F7DATA1;  ///< Offset: 0x27C - Filter 7 data 1 register
        volatile uint32_t F8DATA0;  ///< Offset: 0x280 - Filter 8 data 0 register
        volatile uint32_t F8DATA1;  ///< Offset: 0x284 - Filter 8 data 1 register
        volatile uint32_t F9DATA0;  ///< Offset: 0x288 - Filter 9 data 0 register
        volatile uint32_t F9DATA1;  ///< Offset: 0x28C - Filter 9 data 1 register
        volatile uint32_t F10DATA0;  ///< Offset: 0x290 - Filter 10 data 0 register
        volatile uint32_t F10DATA1;  ///< Offset: 0x294 - Filter 10 data 1 register
        volatile uint32_t F11DATA0;  ///< Offset: 0x298 - Filter 11 data 0 register
        volatile uint32_t F11DATA1;  ///< Offset: 0x29C - Filter 11 data 1 register
        volatile uint32_t F12DATA0;  ///< Offset: 0x2A0 - Filter 12 data 0 register
        volatile uint32_t F12DATA1;  ///< Offset: 0x2A4 - Filter 12 data 1 register
        volatile uint32_t F13DATA0;  ///< Offset: 0x2A8 - Filter 13 data 0 register
        volatile uint32_t F13DATA1;  ///< Offset: 0x2AC - Filter 13 data 1 register
        volatile uint32_t F14DATA0;  ///< Offset: 0x2B0 - Filter 14 data 0 register
        volatile uint32_t F14DATA1;  ///< Offset: 0x2B4 - Filter 14 data 1 register
        volatile uint32_t F15DATA0;  ///< Offset: 0x2B8 - Filter 15 data 0 register
        volatile uint32_t F15DATA1;  ///< Offset: 0x2BC - Filter 15 data 1 register
        volatile uint32_t F16DATA0;  ///< Offset: 0x2C0 - Filter 16 data 0 register
        volatile uint32_t F16DATA1;  ///< Offset: 0x2C4 - Filter 16 data 1 register
        volatile uint32_t F17DATA0;  ///< Offset: 0x2C8 - Filter 17 data 0 register
        volatile uint32_t F17DATA1;  ///< Offset: 0x2CC - Filter 17 data 1 register
        volatile uint32_t F18DATA0;  ///< Offset: 0x2D0 - Filter 18 data 0 register
        volatile uint32_t F18DATA1;  ///< Offset: 0x2D4 - Filter 18 data 1 register
        volatile uint32_t F19DATA0;  ///< Offset: 0x2D8 - Filter 19 data 0 register
        volatile uint32_t F19DATA1;  ///< Offset: 0x2DC - Filter 19 data 1 register
        volatile uint32_t F20DATA0;  ///< Offset: 0x2E0 - Filter 20 data 0 register
        volatile uint32_t F20DATA1;  ///< Offset: 0x2E4 - Filter 20 data 1 register
        volatile uint32_t F21DATA0;  ///< Offset: 0x2E8 - Filter 21 data 0 register
        volatile uint32_t F21DATA1;  ///< Offset: 0x2EC - Filter 21 data 1 register
        volatile uint32_t F22DATA0;  ///< Offset: 0x2F0 - Filter 22 data 0 register
        volatile uint32_t F22DATA1;  ///< Offset: 0x2F4 - Filter 22 data 1 register
        volatile uint32_t F23DATA0;  ///< Offset: 0x2F8 - Filter 23 data 0 register
        volatile uint32_t F23DATA1;  ///< Offset: 0x2FC - Filter 23 data 1 register
        volatile uint32_t F24DATA0;  ///< Offset: 0x300 - Filter 24 data 0 register
        volatile uint32_t F24DATA1;  ///< Offset: 0x304 - Filter 24 data 1 register
        volatile uint32_t F25DATA0;  ///< Offset: 0x308 - Filter 25 data 0 register
        volatile uint32_t F25DATA1;  ///< Offset: 0x30C - Filter 25 data 1 register
        volatile uint32_t F26DATA0;  ///< Offset: 0x310 - Filter 26 data 0 register
        volatile uint32_t F26DATA1;  ///< Offset: 0x314 - Filter 26 data 1 register
        volatile uint32_t F27DATA0;  ///< Offset: 0x318 - Filter 27 data 0 register
        volatile uint32_t F27DATA1;  ///< Offset: 0x31C - Filter 27 data 1 register
    };

    /// Peripheral instances
    inline Registers* CAN0 = reinterpret_cast<Registers*>(CAN0_BASE);
    inline Registers* CAN1 = reinterpret_cast<Registers*>(CAN1_BASE);

    // Bit definitions
    /// CTL Register bits
    namespace ctl_bits {
        constexpr uint32_t DFZ = (1U << 16);  ///< Debug freeze
        constexpr uint32_t SWRST = (1U << 15);  ///< Software reset
        constexpr uint32_t TTC = (1U << 7);  ///< Time-triggered communication
        constexpr uint32_t ABOR = (1U << 6);  ///< Automatic bus-off recovery
        constexpr uint32_t AWU = (1U << 5);  ///< Automatic wakeup
        constexpr uint32_t ARD = (1U << 4);  ///< Automatic retransmission disable
        constexpr uint32_t RFOD = (1U << 3);  ///< Receive FIFO overwrite disable
        constexpr uint32_t TFO = (1U << 2);  ///< Transmit FIFO order
        constexpr uint32_t SLPWMOD = (1U << 1);  ///< Sleep working mode
        constexpr uint32_t IWMOD = (1U << 0);  ///< Initial working mode
    }

    /// STAT Register bits
    namespace stat_bits {
        constexpr uint32_t RXL = (1U << 11);  ///< RX level
        constexpr uint32_t LASTRX = (1U << 10);  ///< Last sample value of RX pin
        constexpr uint32_t RS = (1U << 9);  ///< Receiving state
        constexpr uint32_t TS = (1U << 8);  ///< Transmitting state
        constexpr uint32_t SLPIF = (1U << 4);  ///< Status change interrupt flag of sleep 	 working mode entering
        constexpr uint32_t WUIF = (1U << 3);  ///< Status change interrupt flag of wakeup 	 from sleep working mode
        constexpr uint32_t ERRIF = (1U << 2);  ///< Error interrupt flag
        constexpr uint32_t SLPWS = (1U << 1);  ///< Sleep working state
        constexpr uint32_t IWS = (1U << 0);  ///< Initial working state
    }

    /// TSTAT Register bits
    namespace tstat_bits {
        constexpr uint32_t TMLS2 = (1U << 31);  ///< Transmit mailbox 2 last sending 	 in transmit FIFO
        constexpr uint32_t TMLS1 = (1U << 30);  ///< Transmit mailbox 1 last sending 	 in transmit FIFO
        constexpr uint32_t TMLS0 = (1U << 29);  ///< Transmit mailbox 0 last sending 	 in transmit FIFO
        constexpr uint32_t TME2 = (1U << 28);  ///< Transmit mailbox 2 empty
        constexpr uint32_t TME1 = (1U << 27);  ///< Transmit mailbox 1 empty
        constexpr uint32_t TME0 = (1U << 26);  ///< Transmit mailbox 0 empty
        constexpr uint32_t NUM = (2 << 24);  ///< number of the transmit FIFO mailbox in 	 which the frame will be transmitted if at least one mailbox is empty
        constexpr uint32_t MST2 = (1U << 23);  ///< Mailbox 2 stop transmitting
        constexpr uint32_t MTE2 = (1U << 19);  ///< Mailbox 2 transmit error
        constexpr uint32_t MAL2 = (1U << 18);  ///< Mailbox 2 arbitration lost
        constexpr uint32_t MTFNERR2 = (1U << 17);  ///< Mailbox 2 transmit finished and no error
        constexpr uint32_t MTF2 = (1U << 16);  ///< Mailbox 2 transmit finished
        constexpr uint32_t MST1 = (1U << 15);  ///< Mailbox 1 stop transmitting
        constexpr uint32_t MTE1 = (1U << 11);  ///< Mailbox 1 transmit error
        constexpr uint32_t MAL1 = (1U << 10);  ///< Mailbox 1 arbitration lost
        constexpr uint32_t MTFNERR1 = (1U << 9);  ///< Mailbox 1 transmit finished and no error
        constexpr uint32_t MTF1 = (1U << 8);  ///< Mailbox 1 transmit finished
        constexpr uint32_t MST0 = (1U << 7);  ///< Mailbox 0 stop transmitting
        constexpr uint32_t MTE0 = (1U << 3);  ///< Mailbox 0 transmit error
        constexpr uint32_t MAL0 = (1U << 2);  ///< Mailbox 0 arbitration lost
        constexpr uint32_t MTFNERR0 = (1U << 1);  ///< Mailbox 0 transmit finished and no error
        constexpr uint32_t MTF0 = (1U << 0);  ///< Mailbox 0 transmit finished
    }

    /// RFIFO0 Register bits
    namespace rfifo0_bits {
        constexpr uint32_t RFD0 = (1U << 5);  ///< Receive FIFO0 dequeue
        constexpr uint32_t RFO0 = (1U << 4);  ///< Receive FIFO0 overfull
        constexpr uint32_t RFF0 = (1U << 3);  ///< Receive FIFO0 full
        constexpr uint32_t RFL0 = (2 << 0);  ///< Receive FIFO0 length
    }

    /// RFIFO1 Register bits
    namespace rfifo1_bits {
        constexpr uint32_t RFD1 = (1U << 5);  ///< Receive FIFO1 dequeue
        constexpr uint32_t RFO1 = (1U << 4);  ///< Receive FIFO1 overfull
        constexpr uint32_t RFF1 = (1U << 3);  ///< Receive FIFO1 full
        constexpr uint32_t RFL1 = (2 << 0);  ///< Receive FIFO1 length
    }

    /// INTEN Register bits
    namespace inten_bits {
        constexpr uint32_t SLPWIE = (1U << 17);  ///< Sleep working interrupt enable
        constexpr uint32_t WIE = (1U << 16);  ///< Wakeup interrupt enable
        constexpr uint32_t ERRIE = (1U << 15);  ///< Error interrupt enable
        constexpr uint32_t ERRNIE = (1U << 11);  ///< Error number interrupt enable
        constexpr uint32_t BOIE = (1U << 10);  ///< Bus-off interrupt enable
        constexpr uint32_t PERRIE = (1U << 9);  ///< Passive error interrupt enable
        constexpr uint32_t WERRIE = (1U << 8);  ///< Warning error interrupt enable
        constexpr uint32_t RFOIE1 = (1U << 6);  ///< Receive FIFO1 overfull interrupt enable
        constexpr uint32_t RFFIE1 = (1U << 5);  ///< Receive FIFO1 full interrupt enable
        constexpr uint32_t RFNEIE1 = (1U << 4);  ///< Receive FIFO1 not empty interrupt enable
        constexpr uint32_t RFOIE0 = (1U << 3);  ///< Receive FIFO0 overfull interrupt enable
        constexpr uint32_t RFFIE0 = (1U << 2);  ///< Receive FIFO0 full interrupt enable
        constexpr uint32_t RFNEIE0 = (1U << 1);  ///< Receive FIFO0 not empty interrupt enable
        constexpr uint32_t TMEIE = (1U << 0);  ///< Transmit mailbox empty interrupt enable
    }

    /// ERR Register bits
    namespace err_bits {
        constexpr uint32_t RECNT = (8 << 24);  ///< Receive Error Count defined 	 by the CAN standard
        constexpr uint32_t TECNT = (8 << 16);  ///< Transmit Error Count defined 	 by the CAN standard
        constexpr uint32_t ERRN = (3 << 4);  ///< Error number
        constexpr uint32_t BOERR = (1U << 2);  ///< Bus-off error
        constexpr uint32_t PERR = (1U << 1);  ///< Passive error
        constexpr uint32_t WERR = (1U << 0);  ///< Warning error
    }

    /// BT Register bits
    namespace bt_bits {
        constexpr uint32_t SCMOD = (1U << 31);  ///< Silent communication mode
        constexpr uint32_t LCMOD = (1U << 30);  ///< Loopback communication mode
        constexpr uint32_t SJW = (2 << 24);  ///< Resynchronization jump width
        constexpr uint32_t BS2 = (3 << 20);  ///< Bit segment 2
        constexpr uint32_t BS1 = (4 << 16);  ///< Bit segment 1
        constexpr uint32_t BAUDPSC = (10 << 0);  ///< Baud rate prescaler
    }

    /// TMI0 Register bits
    namespace tmi0_bits {
        constexpr uint32_t SFID_EFID = (11 << 21);  ///< The frame identifier
        constexpr uint32_t EFID = (18 << 3);  ///< The frame identifier
        constexpr uint32_t FF = (1U << 2);  ///< Frame format
        constexpr uint32_t FT = (1U << 1);  ///< Frame type
        constexpr uint32_t TEN = (1U << 0);  ///< Transmit enable
    }

    /// TMP0 Register bits
    namespace tmp0_bits {
        constexpr uint32_t TS = (16 << 16);  ///< Time stamp
        constexpr uint32_t TSEN = (1U << 8);  ///< Time stamp enable
        constexpr uint32_t DLENC = (4 << 0);  ///< Data length code
    }

    /// TMDATA00 Register bits
    namespace tmdata00_bits {
        constexpr uint32_t DB3 = (8 << 24);  ///< Data byte 3
        constexpr uint32_t DB2 = (8 << 16);  ///< Data byte 2
        constexpr uint32_t DB1 = (8 << 8);  ///< Data byte 1
        constexpr uint32_t DB0 = (8 << 0);  ///< Data byte 0
    }

    /// TMDATA10 Register bits
    namespace tmdata10_bits {
        constexpr uint32_t DB7 = (8 << 24);  ///< Data byte 7
        constexpr uint32_t DB6 = (8 << 16);  ///< Data byte 6
        constexpr uint32_t DB5 = (8 << 8);  ///< Data byte 5
        constexpr uint32_t DB4 = (8 << 0);  ///< Data byte 4
    }

    /// TMI1 Register bits
    namespace tmi1_bits {
        constexpr uint32_t SFID_EFID = (11 << 21);  ///< The frame identifier
        constexpr uint32_t EFID = (18 << 3);  ///< The frame identifier
        constexpr uint32_t FF = (1U << 2);  ///< Frame format
        constexpr uint32_t FT = (1U << 1);  ///< Frame type
        constexpr uint32_t TEN = (1U << 0);  ///< Transmit enable
    }

    /// TMP1 Register bits
    namespace tmp1_bits {
        constexpr uint32_t TS = (16 << 16);  ///< Time stamp
        constexpr uint32_t TSEN = (1U << 8);  ///< Time stamp enable
        constexpr uint32_t DLENC = (4 << 0);  ///< Data length code
    }

    /// TMDATA01 Register bits
    namespace tmdata01_bits {
        constexpr uint32_t DB3 = (8 << 24);  ///< Data byte 3
        constexpr uint32_t DB2 = (8 << 16);  ///< Data byte 2
        constexpr uint32_t DB1 = (8 << 8);  ///< Data byte 1
        constexpr uint32_t DB0 = (8 << 0);  ///< Data byte 0
    }

    /// TMDATA11 Register bits
    namespace tmdata11_bits {
        constexpr uint32_t DB7 = (8 << 24);  ///< Data byte 7
        constexpr uint32_t DB6 = (8 << 16);  ///< Data byte 6
        constexpr uint32_t DB5 = (8 << 8);  ///< Data byte 5
        constexpr uint32_t DB4 = (8 << 0);  ///< Data byte 4
    }

    /// TMI2 Register bits
    namespace tmi2_bits {
        constexpr uint32_t SFID_EFID = (11 << 21);  ///< The frame identifier
        constexpr uint32_t EFID = (18 << 3);  ///< The frame identifier
        constexpr uint32_t FF = (1U << 2);  ///< Frame format
        constexpr uint32_t FT = (1U << 1);  ///< Frame type
        constexpr uint32_t TEN = (1U << 0);  ///< Transmit enable
    }

    /// TMP2 Register bits
    namespace tmp2_bits {
        constexpr uint32_t TS = (16 << 16);  ///< Time stamp
        constexpr uint32_t TSEN = (1U << 8);  ///< Time stamp enable
        constexpr uint32_t DLENC = (4 << 0);  ///< Data length code
    }

    /// TMDATA02 Register bits
    namespace tmdata02_bits {
        constexpr uint32_t DB3 = (8 << 24);  ///< Data byte 3
        constexpr uint32_t DB2 = (8 << 16);  ///< Data byte 2
        constexpr uint32_t DB1 = (8 << 8);  ///< Data byte 1
        constexpr uint32_t DB0 = (8 << 0);  ///< Data byte 0
    }

    /// TMDATA12 Register bits
    namespace tmdata12_bits {
        constexpr uint32_t DB7 = (8 << 24);  ///< Data byte 7
        constexpr uint32_t DB6 = (8 << 16);  ///< Data byte 6
        constexpr uint32_t DB5 = (8 << 8);  ///< Data byte 5
        constexpr uint32_t DB4 = (8 << 0);  ///< Data byte 4
    }

    /// RFIFOMI0 Register bits
    namespace rfifomi0_bits {
        constexpr uint32_t SFID_EFID = (11 << 21);  ///< The frame identifier
        constexpr uint32_t EFID = (18 << 3);  ///< The frame identifier
        constexpr uint32_t FF = (1U << 2);  ///< Frame format
        constexpr uint32_t FT = (1U << 1);  ///< Frame type
    }

    /// RFIFOMP0 Register bits
    namespace rfifomp0_bits {
        constexpr uint32_t TS = (16 << 16);  ///< Time stamp
        constexpr uint32_t FI = (8 << 8);  ///< Filtering index
        constexpr uint32_t DLENC = (4 << 0);  ///< Data length code
    }

    /// RFIFOMDATA00 Register bits
    namespace rfifomdata00_bits {
        constexpr uint32_t DB3 = (8 << 24);  ///< Data byte 3
        constexpr uint32_t DB2 = (8 << 16);  ///< Data byte 2
        constexpr uint32_t DB1 = (8 << 8);  ///< Data byte 1
        constexpr uint32_t DB0 = (8 << 0);  ///< Data byte 0
    }

    /// RFIFOMDATA10 Register bits
    namespace rfifomdata10_bits {
        constexpr uint32_t DB7 = (8 << 24);  ///< Data byte 7
        constexpr uint32_t DB6 = (8 << 16);  ///< Data byte 6
        constexpr uint32_t DB5 = (8 << 8);  ///< Data byte 5
        constexpr uint32_t DB4 = (8 << 0);  ///< Data byte 4
    }

    /// RFIFOMI1 Register bits
    namespace rfifomi1_bits {
        constexpr uint32_t SFID_EFID = (11 << 21);  ///< The frame identifier
        constexpr uint32_t EFID = (18 << 3);  ///< The frame identifier
        constexpr uint32_t FF = (1U << 2);  ///< Frame format
        constexpr uint32_t FT = (1U << 1);  ///< Frame type
    }

    /// RFIFOMP1 Register bits
    namespace rfifomp1_bits {
        constexpr uint32_t TS = (16 << 16);  ///< Time stamp
        constexpr uint32_t FI = (8 << 8);  ///< Filtering index
        constexpr uint32_t DLENC = (4 << 0);  ///< Data length code
    }

    /// RFIFOMDATA01 Register bits
    namespace rfifomdata01_bits {
        constexpr uint32_t DB3 = (8 << 24);  ///< Data byte 3
        constexpr uint32_t DB2 = (8 << 16);  ///< Data byte 2
        constexpr uint32_t DB1 = (8 << 8);  ///< Data byte 1
        constexpr uint32_t DB0 = (8 << 0);  ///< Data byte 0
    }

    /// RFIFOMDATA11 Register bits
    namespace rfifomdata11_bits {
        constexpr uint32_t DB7 = (8 << 24);  ///< Data byte 7
        constexpr uint32_t DB6 = (8 << 16);  ///< Data byte 6
        constexpr uint32_t DB5 = (8 << 8);  ///< Data byte 5
        constexpr uint32_t DB4 = (8 << 0);  ///< Data byte 4
    }

    /// FCTL Register bits
    namespace fctl_bits {
        constexpr uint32_t HBC1F = (6 << 8);  ///< Header bank of CAN1 filter
        constexpr uint32_t FLD = (1U << 0);  ///< Filter lock disable
    }

    /// FMCFG Register bits
    namespace fmcfg_bits {
        constexpr uint32_t FMOD27 = (1U << 27);  ///< Filter mode
        constexpr uint32_t FMOD26 = (1U << 26);  ///< Filter mode
        constexpr uint32_t FMOD25 = (1U << 25);  ///< Filter mode
        constexpr uint32_t FMOD24 = (1U << 24);  ///< Filter mode
        constexpr uint32_t FMOD23 = (1U << 23);  ///< Filter mode
        constexpr uint32_t FMOD22 = (1U << 22);  ///< Filter mode
        constexpr uint32_t FMOD21 = (1U << 21);  ///< Filter mode
        constexpr uint32_t FMOD20 = (1U << 20);  ///< Filter mode
        constexpr uint32_t FMOD19 = (1U << 19);  ///< Filter mode
        constexpr uint32_t FMOD18 = (1U << 18);  ///< Filter mode
        constexpr uint32_t FMOD17 = (1U << 17);  ///< Filter mode
        constexpr uint32_t FMOD16 = (1U << 16);  ///< Filter mode
        constexpr uint32_t FMOD15 = (1U << 15);  ///< Filter mode
        constexpr uint32_t FMOD14 = (1U << 14);  ///< Filter mode
        constexpr uint32_t FMOD13 = (1U << 13);  ///< Filter mode
        constexpr uint32_t FMOD12 = (1U << 12);  ///< Filter mode
        constexpr uint32_t FMOD11 = (1U << 11);  ///< Filter mode
        constexpr uint32_t FMOD10 = (1U << 10);  ///< Filter mode
        constexpr uint32_t FMOD9 = (1U << 9);  ///< Filter mode
        constexpr uint32_t FMOD8 = (1U << 8);  ///< Filter mode
        constexpr uint32_t FMOD7 = (1U << 7);  ///< Filter mode
        constexpr uint32_t FMOD6 = (1U << 6);  ///< Filter mode
        constexpr uint32_t FMOD5 = (1U << 5);  ///< Filter mode
        constexpr uint32_t FMOD4 = (1U << 4);  ///< Filter mode
        constexpr uint32_t FMOD3 = (1U << 3);  ///< Filter mode
        constexpr uint32_t FMOD2 = (1U << 2);  ///< Filter mode
        constexpr uint32_t FMOD1 = (1U << 1);  ///< Filter mode
        constexpr uint32_t FMOD0 = (1U << 0);  ///< Filter mode
    }

    /// FSCFG Register bits
    namespace fscfg_bits {
        constexpr uint32_t FS0 = (1U << 0);  ///< Filter scale configuration
        constexpr uint32_t FS1 = (1U << 1);  ///< Filter scale configuration
        constexpr uint32_t FS2 = (1U << 2);  ///< Filter scale configuration
        constexpr uint32_t FS3 = (1U << 3);  ///< Filter scale configuration
        constexpr uint32_t FS4 = (1U << 4);  ///< Filter scale configuration
        constexpr uint32_t FS5 = (1U << 5);  ///< Filter scale configuration
        constexpr uint32_t FS6 = (1U << 6);  ///< Filter scale configuration
        constexpr uint32_t FS7 = (1U << 7);  ///< Filter scale configuration
        constexpr uint32_t FS8 = (1U << 8);  ///< Filter scale configuration
        constexpr uint32_t FS9 = (1U << 9);  ///< Filter scale configuration
        constexpr uint32_t FS10 = (1U << 10);  ///< Filter scale configuration
        constexpr uint32_t FS11 = (1U << 11);  ///< Filter scale configuration
        constexpr uint32_t FS12 = (1U << 12);  ///< Filter scale configuration
        constexpr uint32_t FS13 = (1U << 13);  ///< Filter scale configuration
        constexpr uint32_t FS14 = (1U << 14);  ///< Filter scale configuration
        constexpr uint32_t FS15 = (1U << 15);  ///< Filter scale configuration
        constexpr uint32_t FS16 = (1U << 16);  ///< Filter scale configuration
        constexpr uint32_t FS17 = (1U << 17);  ///< Filter scale configuration
        constexpr uint32_t FS18 = (1U << 18);  ///< Filter scale configuration
        constexpr uint32_t FS19 = (1U << 19);  ///< Filter scale configuration
        constexpr uint32_t FS20 = (1U << 20);  ///< Filter scale configuration
        constexpr uint32_t FS21 = (1U << 21);  ///< Filter scale configuration
        constexpr uint32_t FS22 = (1U << 22);  ///< Filter scale configuration
        constexpr uint32_t FS23 = (1U << 23);  ///< Filter scale configuration
        constexpr uint32_t FS24 = (1U << 24);  ///< Filter scale configuration
        constexpr uint32_t FS25 = (1U << 25);  ///< Filter scale configuration
        constexpr uint32_t FS26 = (1U << 26);  ///< Filter scale configuration
        constexpr uint32_t FS27 = (1U << 27);  ///< Filter scale configuration
    }

    /// FAFIFO Register bits
    namespace fafifo_bits {
        constexpr uint32_t FAF0 = (1U << 0);  ///< Filter 0 associated with FIFO
        constexpr uint32_t FAF1 = (1U << 1);  ///< Filter 1 associated with FIFO
        constexpr uint32_t FAF2 = (1U << 2);  ///< Filter 2 associated with FIFO
        constexpr uint32_t FAF3 = (1U << 3);  ///< Filter 3 associated with FIFO
        constexpr uint32_t FAF4 = (1U << 4);  ///< Filter 4 associated with FIFO
        constexpr uint32_t FAF5 = (1U << 5);  ///< Filter 5 associated with FIFO
        constexpr uint32_t FAF6 = (1U << 6);  ///< Filter 6 associated with FIFO
        constexpr uint32_t FAF7 = (1U << 7);  ///< Filter 7 associated with FIFO
        constexpr uint32_t FAF8 = (1U << 8);  ///< Filter 8 associated with FIFO
        constexpr uint32_t FAF9 = (1U << 9);  ///< Filter 9 associated with FIFO
        constexpr uint32_t FAF10 = (1U << 10);  ///< Filter 10 associated with FIFO
        constexpr uint32_t FAF11 = (1U << 11);  ///< Filter 11 associated with FIFO
        constexpr uint32_t FAF12 = (1U << 12);  ///< Filter 12 associated with FIFO
        constexpr uint32_t FAF13 = (1U << 13);  ///< Filter 13 associated with FIFO
        constexpr uint32_t FAF14 = (1U << 14);  ///< Filter 14 associated with FIFO
        constexpr uint32_t FAF15 = (1U << 15);  ///< Filter 15 associated with FIFO
        constexpr uint32_t FAF16 = (1U << 16);  ///< Filter 16 associated with FIFO
        constexpr uint32_t FAF17 = (1U << 17);  ///< Filter 17 associated with FIFO
        constexpr uint32_t FAF18 = (1U << 18);  ///< Filter 18 associated with FIFO
        constexpr uint32_t FAF19 = (1U << 19);  ///< Filter 19 associated with FIFO
        constexpr uint32_t FAF20 = (1U << 20);  ///< Filter 20 associated with FIFO
        constexpr uint32_t FAF21 = (1U << 21);  ///< Filter 21 associated with FIFO
        constexpr uint32_t FAF22 = (1U << 22);  ///< Filter 22 associated with FIFO
        constexpr uint32_t FAF23 = (1U << 23);  ///< Filter 23 associated with FIFO
        constexpr uint32_t FAF24 = (1U << 24);  ///< Filter 24 associated with FIFO
        constexpr uint32_t FAF25 = (1U << 25);  ///< Filter 25 associated with FIFO
        constexpr uint32_t FAF26 = (1U << 26);  ///< Filter 26 associated with FIFO
        constexpr uint32_t FAF27 = (1U << 27);  ///< Filter 27 associated with FIFO
    }

    /// FW Register bits
    namespace fw_bits {
        constexpr uint32_t FW0 = (1U << 0);  ///< Filter working
        constexpr uint32_t FW1 = (1U << 1);  ///< Filter working
        constexpr uint32_t FW2 = (1U << 2);  ///< Filter working
        constexpr uint32_t FW3 = (1U << 3);  ///< Filter working
        constexpr uint32_t FW4 = (1U << 4);  ///< Filter working
        constexpr uint32_t FW5 = (1U << 5);  ///< Filter working
        constexpr uint32_t FW6 = (1U << 6);  ///< Filter working
        constexpr uint32_t FW7 = (1U << 7);  ///< Filter working
        constexpr uint32_t FW8 = (1U << 8);  ///< Filter working
        constexpr uint32_t FW9 = (1U << 9);  ///< Filter working
        constexpr uint32_t FW10 = (1U << 10);  ///< Filter working
        constexpr uint32_t FW11 = (1U << 11);  ///< Filter working
        constexpr uint32_t FW12 = (1U << 12);  ///< Filter working
        constexpr uint32_t FW13 = (1U << 13);  ///< Filter working
        constexpr uint32_t FW14 = (1U << 14);  ///< Filter working
        constexpr uint32_t FW15 = (1U << 15);  ///< Filter working
        constexpr uint32_t FW16 = (1U << 16);  ///< Filter working
        constexpr uint32_t FW17 = (1U << 17);  ///< Filter working
        constexpr uint32_t FW18 = (1U << 18);  ///< Filter working
        constexpr uint32_t FW19 = (1U << 19);  ///< Filter working
        constexpr uint32_t FW20 = (1U << 20);  ///< Filter working
        constexpr uint32_t FW21 = (1U << 21);  ///< Filter working
        constexpr uint32_t FW22 = (1U << 22);  ///< Filter working
        constexpr uint32_t FW23 = (1U << 23);  ///< Filter working
        constexpr uint32_t FW24 = (1U << 24);  ///< Filter working
        constexpr uint32_t FW25 = (1U << 25);  ///< Filter working
        constexpr uint32_t FW26 = (1U << 26);  ///< Filter working
        constexpr uint32_t FW27 = (1U << 27);  ///< Filter working
    }

    /// F0DATA0 Register bits
    namespace f0data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F0DATA1 Register bits
    namespace f0data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F1DATA0 Register bits
    namespace f1data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F1DATA1 Register bits
    namespace f1data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F2DATA0 Register bits
    namespace f2data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F2DATA1 Register bits
    namespace f2data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F3DATA0 Register bits
    namespace f3data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F3DATA1 Register bits
    namespace f3data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F4DATA0 Register bits
    namespace f4data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F4DATA1 Register bits
    namespace f4data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F5DATA0 Register bits
    namespace f5data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F5DATA1 Register bits
    namespace f5data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F6DATA0 Register bits
    namespace f6data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F6DATA1 Register bits
    namespace f6data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F7DATA0 Register bits
    namespace f7data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F7DATA1 Register bits
    namespace f7data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F8DATA0 Register bits
    namespace f8data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F8DATA1 Register bits
    namespace f8data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F9DATA0 Register bits
    namespace f9data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F9DATA1 Register bits
    namespace f9data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F10DATA0 Register bits
    namespace f10data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F10DATA1 Register bits
    namespace f10data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F11DATA0 Register bits
    namespace f11data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F11DATA1 Register bits
    namespace f11data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F12DATA0 Register bits
    namespace f12data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F12DATA1 Register bits
    namespace f12data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F13DATA0 Register bits
    namespace f13data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F13DATA1 Register bits
    namespace f13data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F14DATA0 Register bits
    namespace f14data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F14DATA1 Register bits
    namespace f14data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F15DATA0 Register bits
    namespace f15data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F15DATA1 Register bits
    namespace f15data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F16DATA0 Register bits
    namespace f16data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F16DATA1 Register bits
    namespace f16data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F17DATA0 Register bits
    namespace f17data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F17DATA1 Register bits
    namespace f17data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F18DATA0 Register bits
    namespace f18data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F18DATA1 Register bits
    namespace f18data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F19DATA0 Register bits
    namespace f19data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F19DATA1 Register bits
    namespace f19data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F20DATA0 Register bits
    namespace f20data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F20DATA1 Register bits
    namespace f20data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F21DATA0 Register bits
    namespace f21data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F21DATA1 Register bits
    namespace f21data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F22DATA0 Register bits
    namespace f22data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F22DATA1 Register bits
    namespace f22data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F23DATA0 Register bits
    namespace f23data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F23DATA1 Register bits
    namespace f23data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F24DATA0 Register bits
    namespace f24data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F24DATA1 Register bits
    namespace f24data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F25DATA0 Register bits
    namespace f25data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F25DATA1 Register bits
    namespace f25data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F26DATA0 Register bits
    namespace f26data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F26DATA1 Register bits
    namespace f26data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F27DATA0 Register bits
    namespace f27data0_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

    /// F27DATA1 Register bits
    namespace f27data1_bits {
        constexpr uint32_t FD0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FD1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FD2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FD3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FD4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FD5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FD6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FD7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FD8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FD9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FD10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FD11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FD12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FD13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FD14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FD15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FD16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FD17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FD18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FD19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FD20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FD21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FD22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FD23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FD24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FD25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FD26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FD27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FD28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FD29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FD30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FD31 = (1U << 31);  ///< Filter bits
    }

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40023000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - Data register
        volatile uint32_t FDATA;  ///< Offset: 0x04 - Free data register
        volatile uint32_t CTL;  ///< Offset: 0x08 - Control register
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< CRC calculation result bits
    }

    /// FDATA Register bits
    namespace fdata_bits {
        constexpr uint32_t FDATA = (8 << 0);  ///< Free Data Register bits
    }

    /// CTL Register bits
    namespace ctl_bits {
        constexpr uint32_t RST = (1U << 0);  ///< reset bit
    }

}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DAC_BASE = 0x40007400;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - control register
        volatile uint32_t SWT;  ///< Offset: 0x04 - software trigger register
        volatile uint32_t DAC0_R12DH;  ///< Offset: 0x08 - DAC0 12-bit right-aligned data holding register
        volatile uint32_t DAC0_L12DH;  ///< Offset: 0x0C - DAC0 12-bit left-aligned data holding register
        volatile uint32_t DAC0_R8DH;  ///< Offset: 0x10 - DAC0 8-bit right aligned data holding register
        volatile uint32_t DAC1_R12DH;  ///< Offset: 0x14 - DAC1 12-bit right-aligned data holding register
        volatile uint32_t DAC1_L12DH;  ///< Offset: 0x18 - DAC1 12-bit left aligned data holding register
        volatile uint32_t DAC1_R8DH;  ///< Offset: 0x1C - DAC1 8-bit right aligned data holding register
        volatile uint32_t DACC_R12DH;  ///< Offset: 0x20 - DAC concurrent mode 12-bit right-aligned data holding register
        volatile uint32_t DACC_L12DH;  ///< Offset: 0x24 - DAC concurrent mode 12-bit left aligned data holding register
        volatile uint32_t DACC_R8DH;  ///< Offset: 0x28 - DAC concurrent mode 8-bit right aligned data holding register
        volatile uint32_t DAC0_DO;  ///< Offset: 0x2C - DAC0 data output register
        volatile uint32_t DAC1_DO;  ///< Offset: 0x30 - DAC1 data output register
    };

    /// Peripheral instances
    inline Registers* DAC = reinterpret_cast<Registers*>(DAC_BASE);

    // Bit definitions
    /// CTL Register bits
    namespace ctl_bits {
        constexpr uint32_t DEN0 = (1U << 0);  ///< DAC0 enable
        constexpr uint32_t DBOFF0 = (1U << 1);  ///< DAC0 output buffer turn off
        constexpr uint32_t DTEN0 = (1U << 2);  ///< DAC0 trigger enable
        constexpr uint32_t DTSEL0 = (3 << 3);  ///< DAC0 trigger selection
        constexpr uint32_t DWM0 = (2 << 6);  ///< DAC0 noise wave mode
        constexpr uint32_t DWBW0 = (4 << 8);  ///< DAC0 noise wave bit width
        constexpr uint32_t DDMAEN0 = (1U << 12);  ///< DAC0 DMA enable
        constexpr uint32_t DEN1 = (1U << 16);  ///< DAC1 enable
        constexpr uint32_t DBOFF1 = (1U << 17);  ///< DAC1 output buffer turn off
        constexpr uint32_t DTEN1 = (1U << 18);  ///< DAC1 trigger enable
        constexpr uint32_t DTSEL1 = (3 << 19);  ///< DAC1 trigger selection
        constexpr uint32_t DWM1 = (2 << 22);  ///< DAC1 noise wave mode
        constexpr uint32_t DWBW1 = (4 << 24);  ///< DAC1 noise wave bit width
        constexpr uint32_t DDMAEN1 = (1U << 28);  ///< DAC1 DMA enable
    }

    /// SWT Register bits
    namespace swt_bits {
        constexpr uint32_t SWTR0 = (1U << 0);  ///< DAC0 software trigger
        constexpr uint32_t SWTR1 = (1U << 1);  ///< DAC1 software trigger
    }

    /// DAC0_R12DH Register bits
    namespace dac0_r12dh_bits {
        constexpr uint32_t DAC0_DH = (12 << 0);  ///< DAC0 12-bit right-aligned data
    }

    /// DAC0_L12DH Register bits
    namespace dac0_l12dh_bits {
        constexpr uint32_t DAC0_DH = (12 << 4);  ///< DAC0 12-bit left-aligned data
    }

    /// DAC0_R8DH Register bits
    namespace dac0_r8dh_bits {
        constexpr uint32_t DAC0_DH = (8 << 0);  ///< DAC0 8-bit right-aligned data
    }

    /// DAC1_R12DH Register bits
    namespace dac1_r12dh_bits {
        constexpr uint32_t DAC1_DH = (12 << 0);  ///< DAC1 12-bit right-aligned data
    }

    /// DAC1_L12DH Register bits
    namespace dac1_l12dh_bits {
        constexpr uint32_t DAC1_DH = (12 << 4);  ///< DAC1 12-bit left-aligned data
    }

    /// DAC1_R8DH Register bits
    namespace dac1_r8dh_bits {
        constexpr uint32_t DAC1_DH = (8 << 0);  ///< DAC1 8-bit right-aligned data
    }

    /// DACC_R12DH Register bits
    namespace dacc_r12dh_bits {
        constexpr uint32_t DAC0_DH = (12 << 0);  ///< DAC0 12-bit right-aligned data
        constexpr uint32_t DAC1_DH = (12 << 16);  ///< DAC1 12-bit right-aligned data
    }

    /// DACC_L12DH Register bits
    namespace dacc_l12dh_bits {
        constexpr uint32_t DAC0_DH = (12 << 4);  ///< DAC0 12-bit left-aligned data
        constexpr uint32_t DAC1_DH = (12 << 20);  ///< DAC1 12-bit left-aligned data
    }

    /// DACC_R8DH Register bits
    namespace dacc_r8dh_bits {
        constexpr uint32_t DAC0_DH = (8 << 0);  ///< DAC0 8-bit right-aligned data
        constexpr uint32_t DAC1_DH = (8 << 8);  ///< DAC1 8-bit right-aligned data
    }

    /// DAC0_DO Register bits
    namespace dac0_do_bits {
        constexpr uint32_t DAC0_DO = (12 << 0);  ///< DAC0 data output
    }

    /// DAC1_DO Register bits
    namespace dac1_do_bits {
        constexpr uint32_t DAC1_DO = (12 << 0);  ///< DAC1 data output
    }

}

// ============================================================================
// DBG Peripheral
// ============================================================================

namespace dbg {
    /// Base addresses
    constexpr uint32_t DBG_BASE = 0xE0042000;

    /// DBG Register structure
    struct Registers {
        volatile uint32_t ID;  ///< Offset: 0x00 - ID code register
        volatile uint32_t CTL;  ///< Offset: 0x04 - Control register 0
    };

    /// Peripheral instances
    inline Registers* DBG = reinterpret_cast<Registers*>(DBG_BASE);

    // Bit definitions
    /// ID Register bits
    namespace id_bits {
        constexpr uint32_t ID_CODE = (32 << 0);  ///< DBG ID code register
    }

    /// CTL Register bits
    namespace ctl_bits {
        constexpr uint32_t SLP_HOLD = (1U << 0);  ///< Sleep mode hold register
        constexpr uint32_t DSLP_HOLD = (1U << 1);  ///< Deep-sleep mode hold register
        constexpr uint32_t STB_HOLD = (1U << 2);  ///< Standby mode hold register
        constexpr uint32_t FWDGT_HOLD = (1U << 8);  ///< FWDGT hold bit
        constexpr uint32_t WWDGT_HOLD = (1U << 9);  ///< WWDGT hold bit
        constexpr uint32_t TIMER0_HOLD = (1U << 10);  ///< TIMER 0 hold bit
        constexpr uint32_t TIMER1_HOLD = (1U << 11);  ///< TIMER 1 hold bit
        constexpr uint32_t TIMER2_HOLD = (1U << 12);  ///< TIMER 2 hold bit
        constexpr uint32_t TIMER3_HOLD = (1U << 13);  ///< TIMER 23 hold bit
        constexpr uint32_t CAN0_HOLD = (1U << 14);  ///< CAN0 hold bit
        constexpr uint32_t I2C0_HOLD = (1U << 15);  ///< I2C0 hold bit
        constexpr uint32_t I2C1_HOLD = (1U << 16);  ///< I2C1 hold bit
        constexpr uint32_t TIMER4_HOLD = (1U << 18);  ///< TIMER4_HOLD
        constexpr uint32_t TIMER5_HOLD = (1U << 19);  ///< TIMER 5 hold bit
        constexpr uint32_t TIMER6_HOLD = (1U << 20);  ///< TIMER 6 hold bit
        constexpr uint32_t CAN1_HOLD = (1U << 21);  ///< CAN1 hold bit
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMA0_BASE = 0x40020000;
    constexpr uint32_t DMA1_BASE = 0x40020000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t INTF;  ///< Offset: 0x00 - Interrupt flag register
        volatile uint32_t INTC;  ///< Offset: 0x04 - Interrupt flag clear register
        volatile uint32_t CH0CTL;  ///< Offset: 0x08 - Channel 0 control register
        volatile uint32_t CH0CNT;  ///< Offset: 0x0C - Channel 0 counter register
        volatile uint32_t CH0PADDR;  ///< Offset: 0x10 - Channel 0 peripheral base address register
        volatile uint32_t CH0MADDR;  ///< Offset: 0x14 - Channel 0 memory base address register
        volatile uint32_t CH1CTL;  ///< Offset: 0x1C - Channel 1 control register
        volatile uint32_t CH1CNT;  ///< Offset: 0x20 - Channel 1 counter register
        volatile uint32_t CH1PADDR;  ///< Offset: 0x24 - Channel 1 peripheral base address register
        volatile uint32_t CH1MADDR;  ///< Offset: 0x28 - Channel 1 memory base address register
        volatile uint32_t CH2CTL;  ///< Offset: 0x30 - Channel 2 control register
        volatile uint32_t CH2CNT;  ///< Offset: 0x34 - Channel 2 counter register
        volatile uint32_t CH2PADDR;  ///< Offset: 0x38 - Channel 2 peripheral base address register
        volatile uint32_t CH2MADDR;  ///< Offset: 0x3C - Channel 2 memory base address register
        volatile uint32_t CH3CTL;  ///< Offset: 0x44 - Channel 3 control register
        volatile uint32_t CH3CNT;  ///< Offset: 0x48 - Channel 3 counter register
        volatile uint32_t CH3PADDR;  ///< Offset: 0x4C - Channel 3 peripheral base address register
        volatile uint32_t CH3MADDR;  ///< Offset: 0x50 - Channel 3 memory base address register
        volatile uint32_t CH4CTL;  ///< Offset: 0x58 - Channel 4 control register
        volatile uint32_t CH4CNT;  ///< Offset: 0x5C - Channel 4 counter register
        volatile uint32_t CH4PADDR;  ///< Offset: 0x60 - Channel 4 peripheral base address register
        volatile uint32_t CH4MADDR;  ///< Offset: 0x64 - Channel 4 memory base address register
        volatile uint32_t CH5CTL;  ///< Offset: 0x6C - Channel 5 control register
        volatile uint32_t CH5CNT;  ///< Offset: 0x70 - Channel 5 counter register
        volatile uint32_t CH5PADDR;  ///< Offset: 0x74 - Channel 5 peripheral base address register
        volatile uint32_t CH5MADDR;  ///< Offset: 0x78 - Channel 5 memory base address register
        volatile uint32_t CH6CTL;  ///< Offset: 0x80 - Channel 6 control register
        volatile uint32_t CH6CNT;  ///< Offset: 0x84 - Channel 6 counter register
        volatile uint32_t CH6PADDR;  ///< Offset: 0x88 - Channel 6 peripheral base address register
        volatile uint32_t CH6MADDR;  ///< Offset: 0x8C - Channel 6 memory base address register
    };

    /// Peripheral instances
    inline Registers* DMA0 = reinterpret_cast<Registers*>(DMA0_BASE);
    inline Registers* DMA1 = reinterpret_cast<Registers*>(DMA1_BASE);

    // Bit definitions
    /// INTF Register bits
    namespace intf_bits {
        constexpr uint32_t GIF0 = (1U << 0);  ///< Global interrupt flag of channel 0
        constexpr uint32_t FTFIF0 = (1U << 1);  ///< Full Transfer finish flag of channe 0
        constexpr uint32_t HTFIF0 = (1U << 2);  ///< Half transfer finish flag of channel 0
        constexpr uint32_t ERRIF0 = (1U << 3);  ///< Error flag of channel 0
        constexpr uint32_t GIF1 = (1U << 4);  ///< Global interrupt flag of channel 1
        constexpr uint32_t FTFIF1 = (1U << 5);  ///< Full Transfer finish flag of channe 1
        constexpr uint32_t HTFIF1 = (1U << 6);  ///< Half transfer finish flag of channel 1
        constexpr uint32_t ERRIF1 = (1U << 7);  ///< Error flag of channel 1
        constexpr uint32_t GIF2 = (1U << 8);  ///< Global interrupt flag of channel 2
        constexpr uint32_t FTFIF2 = (1U << 9);  ///< Full Transfer finish flag of channe 2
        constexpr uint32_t HTFIF2 = (1U << 10);  ///< Half transfer finish flag of channel 2
        constexpr uint32_t ERRIF2 = (1U << 11);  ///< Error flag of channel 2
        constexpr uint32_t GIF3 = (1U << 12);  ///< Global interrupt flag of channel 3
        constexpr uint32_t FTFIF3 = (1U << 13);  ///< Full Transfer finish flag of channe 3
        constexpr uint32_t HTFIF3 = (1U << 14);  ///< Half transfer finish flag of channel 3
        constexpr uint32_t ERRIF3 = (1U << 15);  ///< Error flag of channel 3
        constexpr uint32_t GIF4 = (1U << 16);  ///< Global interrupt flag of channel 4
        constexpr uint32_t FTFIF4 = (1U << 17);  ///< Full Transfer finish flag of channe 4
        constexpr uint32_t HTFIF4 = (1U << 18);  ///< Half transfer finish flag of channel 4
        constexpr uint32_t ERRIF4 = (1U << 19);  ///< Error flag of channel 4
        constexpr uint32_t GIF5 = (1U << 20);  ///< Global interrupt flag of channel 5
        constexpr uint32_t FTFIF5 = (1U << 21);  ///< Full Transfer finish flag of channe 5
        constexpr uint32_t HTFIF5 = (1U << 22);  ///< Half transfer finish flag of channel 5
        constexpr uint32_t ERRIF5 = (1U << 23);  ///< Error flag of channel 5
        constexpr uint32_t GIF6 = (1U << 24);  ///< Global interrupt flag of channel 6
        constexpr uint32_t FTFIF6 = (1U << 25);  ///< Full Transfer finish flag of channe 6
        constexpr uint32_t HTFIF6 = (1U << 26);  ///< Half transfer finish flag of channel 6
        constexpr uint32_t ERRIF6 = (1U << 27);  ///< Error flag of channel 6
    }

    /// INTC Register bits
    namespace intc_bits {
        constexpr uint32_t GIFC0 = (1U << 0);  ///< Clear global interrupt flag of channel 0
        constexpr uint32_t FTFIFC0 = (1U << 1);  ///< Clear bit for full transfer finish flag of channel 0
        constexpr uint32_t HTFIFC0 = (1U << 2);  ///< Clear bit for half transfer finish flag of channel 0
        constexpr uint32_t ERRIFC0 = (1U << 3);  ///< Clear bit for error flag of channel 0
        constexpr uint32_t GIFC1 = (1U << 4);  ///< Clear global interrupt flag of channel 1
        constexpr uint32_t FTFIFC1 = (1U << 5);  ///< Clear bit for full transfer finish flag of channel 1
        constexpr uint32_t HTFIFC1 = (1U << 6);  ///< Clear bit for half transfer finish flag of channel 1
        constexpr uint32_t ERRIFC1 = (1U << 7);  ///< Clear bit for error flag of channel 1
        constexpr uint32_t GIFC2 = (1U << 8);  ///< Clear global interrupt flag of channel 2
        constexpr uint32_t FTFIFC2 = (1U << 9);  ///< Clear bit for full transfer finish flag of channel 2
        constexpr uint32_t HTFIFC2 = (1U << 10);  ///< Clear bit for half transfer finish flag of channel 2
        constexpr uint32_t ERRIFC2 = (1U << 11);  ///< Clear bit for error flag of channel 2
        constexpr uint32_t GIFC3 = (1U << 12);  ///< Clear global interrupt flag of channel 3
        constexpr uint32_t FTFIFC3 = (1U << 13);  ///< Clear bit for full transfer finish flag of channel 3
        constexpr uint32_t HTFIFC3 = (1U << 14);  ///< Clear bit for half transfer finish flag of channel 3
        constexpr uint32_t ERRIFC3 = (1U << 15);  ///< Clear bit for error flag of channel 3
        constexpr uint32_t GIFC4 = (1U << 16);  ///< Clear global interrupt flag of channel 4
        constexpr uint32_t FTFIFC4 = (1U << 17);  ///< Clear bit for full transfer finish flag of channel 4
        constexpr uint32_t HTFIFC4 = (1U << 18);  ///< Clear bit for half transfer finish flag of channel 4
        constexpr uint32_t ERRIFC4 = (1U << 19);  ///< Clear bit for error flag of channel 4
        constexpr uint32_t GIFC5 = (1U << 20);  ///< Clear global interrupt flag of channel 5
        constexpr uint32_t FTFIFC5 = (1U << 21);  ///< Clear bit for full transfer finish flag of channel 5
        constexpr uint32_t HTFIFC5 = (1U << 22);  ///< Clear bit for half transfer finish flag of channel 5
        constexpr uint32_t ERRIFC5 = (1U << 23);  ///< Clear bit for error flag of channel 5
        constexpr uint32_t GIFC6 = (1U << 24);  ///< Clear global interrupt flag of channel 6
        constexpr uint32_t FTFIFC6 = (1U << 25);  ///< Clear bit for full transfer finish flag of channel 6
        constexpr uint32_t HTFIFC6 = (1U << 26);  ///< Clear bit for half transfer finish flag of channel 6
        constexpr uint32_t ERRIFC6 = (1U << 27);  ///< Clear bit for error flag of channel 6
    }

    /// CH0CTL Register bits
    namespace ch0ctl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FTFIE = (1U << 1);  ///< Enable bit for channel full transfer finish interrupt
        constexpr uint32_t HTFIE = (1U << 2);  ///< Enable bit for channel half transfer finish interrupt
        constexpr uint32_t ERRIE = (1U << 3);  ///< Enable bit for channel error interrupt
        constexpr uint32_t DIR = (1U << 4);  ///< Transfer direction
        constexpr uint32_t CMEN = (1U << 5);  ///< Circular mode enable
        constexpr uint32_t PNAGA = (1U << 6);  ///< Next address generation algorithm of peripheral
        constexpr uint32_t MNAGA = (1U << 7);  ///< Next address generation algorithm of memory
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Transfer data size of peripheral
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Transfer data size of memory
        constexpr uint32_t PRIO = (2 << 12);  ///< Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to Memory Mode
    }

    /// CH0CNT Register bits
    namespace ch0cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Transfer counter
    }

    /// CH0PADDR Register bits
    namespace ch0paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral base address
    }

    /// CH0MADDR Register bits
    namespace ch0maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory base address
    }

    /// CH1CTL Register bits
    namespace ch1ctl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FTFIE = (1U << 1);  ///< Enable bit for channel full transfer finish interrupt
        constexpr uint32_t HTFIE = (1U << 2);  ///< Enable bit for channel half transfer finish interrupt
        constexpr uint32_t ERRIE = (1U << 3);  ///< Enable bit for channel error interrupt
        constexpr uint32_t DIR = (1U << 4);  ///< Transfer direction
        constexpr uint32_t CMEN = (1U << 5);  ///< Circular mode enable
        constexpr uint32_t PNAGA = (1U << 6);  ///< Next address generation algorithm of peripheral
        constexpr uint32_t MNAGA = (1U << 7);  ///< Next address generation algorithm of memory
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Transfer data size of peripheral
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Transfer data size of memory
        constexpr uint32_t PRIO = (2 << 12);  ///< Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to Memory Mode
    }

    /// CH1CNT Register bits
    namespace ch1cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Transfer counter
    }

    /// CH1PADDR Register bits
    namespace ch1paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral base address
    }

    /// CH1MADDR Register bits
    namespace ch1maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory base address
    }

    /// CH2CTL Register bits
    namespace ch2ctl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FTFIE = (1U << 1);  ///< Enable bit for channel full transfer finish interrupt
        constexpr uint32_t HTFIE = (1U << 2);  ///< Enable bit for channel half transfer finish interrupt
        constexpr uint32_t ERRIE = (1U << 3);  ///< Enable bit for channel error interrupt
        constexpr uint32_t DIR = (1U << 4);  ///< Transfer direction
        constexpr uint32_t CMEN = (1U << 5);  ///< Circular mode enable
        constexpr uint32_t PNAGA = (1U << 6);  ///< Next address generation algorithm of peripheral
        constexpr uint32_t MNAGA = (1U << 7);  ///< Next address generation algorithm of memory
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Transfer data size of peripheral
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Transfer data size of memory
        constexpr uint32_t PRIO = (2 << 12);  ///< Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to Memory Mode
    }

    /// CH2CNT Register bits
    namespace ch2cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Transfer counter
    }

    /// CH2PADDR Register bits
    namespace ch2paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral base address
    }

    /// CH2MADDR Register bits
    namespace ch2maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory base address
    }

    /// CH3CTL Register bits
    namespace ch3ctl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FTFIE = (1U << 1);  ///< Enable bit for channel full transfer finish interrupt
        constexpr uint32_t HTFIE = (1U << 2);  ///< Enable bit for channel half transfer finish interrupt
        constexpr uint32_t ERRIE = (1U << 3);  ///< Enable bit for channel error interrupt
        constexpr uint32_t DIR = (1U << 4);  ///< Transfer direction
        constexpr uint32_t CMEN = (1U << 5);  ///< Circular mode enable
        constexpr uint32_t PNAGA = (1U << 6);  ///< Next address generation algorithm of peripheral
        constexpr uint32_t MNAGA = (1U << 7);  ///< Next address generation algorithm of memory
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Transfer data size of peripheral
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Transfer data size of memory
        constexpr uint32_t PRIO = (2 << 12);  ///< Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to Memory Mode
    }

    /// CH3CNT Register bits
    namespace ch3cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Transfer counter
    }

    /// CH3PADDR Register bits
    namespace ch3paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral base address
    }

    /// CH3MADDR Register bits
    namespace ch3maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory base address
    }

    /// CH4CTL Register bits
    namespace ch4ctl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FTFIE = (1U << 1);  ///< Enable bit for channel full transfer finish interrupt
        constexpr uint32_t HTFIE = (1U << 2);  ///< Enable bit for channel half transfer finish interrupt
        constexpr uint32_t ERRIE = (1U << 3);  ///< Enable bit for channel error interrupt
        constexpr uint32_t DIR = (1U << 4);  ///< Transfer direction
        constexpr uint32_t CMEN = (1U << 5);  ///< Circular mode enable
        constexpr uint32_t PNAGA = (1U << 6);  ///< Next address generation algorithm of peripheral
        constexpr uint32_t MNAGA = (1U << 7);  ///< Next address generation algorithm of memory
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Transfer data size of peripheral
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Transfer data size of memory
        constexpr uint32_t PRIO = (2 << 12);  ///< Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to Memory Mode
    }

    /// CH4CNT Register bits
    namespace ch4cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Transfer counter
    }

    /// CH4PADDR Register bits
    namespace ch4paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral base address
    }

    /// CH4MADDR Register bits
    namespace ch4maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory base address
    }

    /// CH5CTL Register bits
    namespace ch5ctl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FTFIE = (1U << 1);  ///< Enable bit for channel full transfer finish interrupt
        constexpr uint32_t HTFIE = (1U << 2);  ///< Enable bit for channel half transfer finish interrupt
        constexpr uint32_t ERRIE = (1U << 3);  ///< Enable bit for channel error interrupt
        constexpr uint32_t DIR = (1U << 4);  ///< Transfer direction
        constexpr uint32_t CMEN = (1U << 5);  ///< Circular mode enable
        constexpr uint32_t PNAGA = (1U << 6);  ///< Next address generation algorithm of peripheral
        constexpr uint32_t MNAGA = (1U << 7);  ///< Next address generation algorithm of memory
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Transfer data size of peripheral
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Transfer data size of memory
        constexpr uint32_t PRIO = (2 << 12);  ///< Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to Memory Mode
    }

    /// CH5CNT Register bits
    namespace ch5cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Transfer counter
    }

    /// CH5PADDR Register bits
    namespace ch5paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral base address
    }

    /// CH5MADDR Register bits
    namespace ch5maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory base address
    }

    /// CH6CTL Register bits
    namespace ch6ctl_bits {
        constexpr uint32_t CHEN = (1U << 0);  ///< Channel enable
        constexpr uint32_t FTFIE = (1U << 1);  ///< Enable bit for channel full transfer finish interrupt
        constexpr uint32_t HTFIE = (1U << 2);  ///< Enable bit for channel half transfer finish interrupt
        constexpr uint32_t ERRIE = (1U << 3);  ///< Enable bit for channel error interrupt
        constexpr uint32_t DIR = (1U << 4);  ///< Transfer direction
        constexpr uint32_t CMEN = (1U << 5);  ///< Circular mode enable
        constexpr uint32_t PNAGA = (1U << 6);  ///< Next address generation algorithm of peripheral
        constexpr uint32_t MNAGA = (1U << 7);  ///< Next address generation algorithm of memory
        constexpr uint32_t PWIDTH = (2 << 8);  ///< Transfer data size of peripheral
        constexpr uint32_t MWIDTH = (2 << 10);  ///< Transfer data size of memory
        constexpr uint32_t PRIO = (2 << 12);  ///< Priority level
        constexpr uint32_t M2M = (1U << 14);  ///< Memory to Memory Mode
    }

    /// CH6CNT Register bits
    namespace ch6cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< Transfer counter
    }

    /// CH6PADDR Register bits
    namespace ch6paddr_bits {
        constexpr uint32_t PADDR = (32 << 0);  ///< Peripheral base address
    }

    /// CH6MADDR Register bits
    namespace ch6maddr_bits {
        constexpr uint32_t MADDR = (32 << 0);  ///< Memory base address
    }

}

// ============================================================================
// EXMC Peripheral
// ============================================================================

namespace exmc {
    /// Base addresses
    constexpr uint32_t EXMC_BASE = 0xA0000000;

    /// EXMC Register structure
    struct Registers {
        volatile uint32_t SNCTL0;  ///< Offset: 0x00 - SRAM/NOR flash control register 0
        volatile uint32_t SNTCFG0;  ///< Offset: 0x04 - SRAM/NOR flash timing configuration register 0
        volatile uint32_t SNCTL1;  ///< Offset: 0x08 - SRAM/NOR flash control register 1
    };

    /// Peripheral instances
    inline Registers* EXMC = reinterpret_cast<Registers*>(EXMC_BASE);

    // Bit definitions
    /// SNCTL0 Register bits
    namespace snctl0_bits {
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< Asynchronous wait
        constexpr uint32_t NRWTEN = (1U << 13);  ///< NWAIT signal enable
        constexpr uint32_t WREN = (1U << 12);  ///< Write enable
        constexpr uint32_t NRWTPOL = (1U << 9);  ///< NWAIT signal polarity
        constexpr uint32_t NREN = (1U << 6);  ///< NOR Flash access enable
        constexpr uint32_t NRW = (2 << 4);  ///< NOR bank memory data bus width
        constexpr uint32_t NRTP = (2 << 2);  ///< NOR bank memory type
        constexpr uint32_t NRMUX = (1U << 1);  ///< NOR bank memory address/data multiplexing
        constexpr uint32_t NRBKEN = (1U << 0);  ///< NOR bank enable
    }

    /// SNTCFG0 Register bits
    namespace sntcfg0_bits {
        constexpr uint32_t BUSLAT = (4 << 16);  ///< Bus latency
        constexpr uint32_t DSET = (8 << 8);  ///< Data setup time
        constexpr uint32_t AHLD = (4 << 4);  ///< Address hold time
        constexpr uint32_t ASET = (4 << 0);  ///< Address setup time
    }

    /// SNCTL1 Register bits
    namespace snctl1_bits {
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< Asynchronous wait
        constexpr uint32_t NRWTEN = (1U << 13);  ///< NWAIT signal enable
        constexpr uint32_t WREN = (1U << 12);  ///< Write enable
        constexpr uint32_t NRWTPOL = (1U << 9);  ///< NWAIT signal polarity
        constexpr uint32_t NREN = (1U << 6);  ///< NOR Flash access enable
        constexpr uint32_t NRW = (2 << 4);  ///< NOR bank memory data bus width
        constexpr uint32_t NRTP = (2 << 2);  ///< NOR bank memory type
        constexpr uint32_t NRMUX = (1U << 1);  ///< NOR bank memory address/data multiplexing
        constexpr uint32_t NRBKEN = (1U << 0);  ///< NOR bank enable
    }

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40010400;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t INTEN;  ///< Offset: 0x00 - Interrupt enable register (EXTI_INTEN)
        volatile uint32_t EVEN;  ///< Offset: 0x04 - Event enable register (EXTI_EVEN)
        volatile uint32_t RTEN;  ///< Offset: 0x08 - Rising Edge Trigger Enable register (EXTI_RTEN)
        volatile uint32_t FTEN;  ///< Offset: 0x0C - Falling Egde Trigger Enable register (EXTI_FTEN)
        volatile uint32_t SWIEV;  ///< Offset: 0x10 - Software interrupt event register (EXTI_SWIEV)
        volatile uint32_t PD;  ///< Offset: 0x14 - Pending register (EXTI_PD)
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// INTEN Register bits
    namespace inten_bits {
        constexpr uint32_t INTEN0 = (1U << 0);  ///< Enable Interrupt on line 0
        constexpr uint32_t INTEN1 = (1U << 1);  ///< Enable Interrupt on line 1
        constexpr uint32_t INTEN2 = (1U << 2);  ///< Enable Interrupt on line 2
        constexpr uint32_t INTEN3 = (1U << 3);  ///< Enable Interrupt on line 3
        constexpr uint32_t INTEN4 = (1U << 4);  ///< Enable Interrupt on line 4
        constexpr uint32_t INTEN5 = (1U << 5);  ///< Enable Interrupt on line 5
        constexpr uint32_t INTEN6 = (1U << 6);  ///< Enable Interrupt on line 6
        constexpr uint32_t INTEN7 = (1U << 7);  ///< Enable Interrupt on line 7
        constexpr uint32_t INTEN8 = (1U << 8);  ///< Enable Interrupt on line 8
        constexpr uint32_t INTEN9 = (1U << 9);  ///< Enable Interrupt on line 9
        constexpr uint32_t INTEN10 = (1U << 10);  ///< Enable Interrupt on line 10
        constexpr uint32_t INTEN11 = (1U << 11);  ///< Enable Interrupt on line 11
        constexpr uint32_t INTEN12 = (1U << 12);  ///< Enable Interrupt on line 12
        constexpr uint32_t INTEN13 = (1U << 13);  ///< Enable Interrupt on line 13
        constexpr uint32_t INTEN14 = (1U << 14);  ///< Enable Interrupt on line 14
        constexpr uint32_t INTEN15 = (1U << 15);  ///< Enable Interrupt on line 15
        constexpr uint32_t INTEN16 = (1U << 16);  ///< Enable Interrupt on line 16
        constexpr uint32_t INTEN17 = (1U << 17);  ///< Enable Interrupt on line 17
        constexpr uint32_t INTEN18 = (1U << 18);  ///< Enable Interrupt on line 18
    }

    /// EVEN Register bits
    namespace even_bits {
        constexpr uint32_t EVEN0 = (1U << 0);  ///< Enable Event on line 0
        constexpr uint32_t EVEN1 = (1U << 1);  ///< Enable Event on line 1
        constexpr uint32_t EVEN2 = (1U << 2);  ///< Enable Event on line 2
        constexpr uint32_t EVEN3 = (1U << 3);  ///< Enable Event on line 3
        constexpr uint32_t EVEN4 = (1U << 4);  ///< Enable Event on line 4
        constexpr uint32_t EVEN5 = (1U << 5);  ///< Enable Event on line 5
        constexpr uint32_t EVEN6 = (1U << 6);  ///< Enable Event on line 6
        constexpr uint32_t EVEN7 = (1U << 7);  ///< Enable Event on line 7
        constexpr uint32_t EVEN8 = (1U << 8);  ///< Enable Event on line 8
        constexpr uint32_t EVEN9 = (1U << 9);  ///< Enable Event on line 9
        constexpr uint32_t EVEN10 = (1U << 10);  ///< Enable Event on line 10
        constexpr uint32_t EVEN11 = (1U << 11);  ///< Enable Event on line 11
        constexpr uint32_t EVEN12 = (1U << 12);  ///< Enable Event on line 12
        constexpr uint32_t EVEN13 = (1U << 13);  ///< Enable Event on line 13
        constexpr uint32_t EVEN14 = (1U << 14);  ///< Enable Event on line 14
        constexpr uint32_t EVEN15 = (1U << 15);  ///< Enable Event on line 15
        constexpr uint32_t EVEN16 = (1U << 16);  ///< Enable Event on line 16
        constexpr uint32_t EVEN17 = (1U << 17);  ///< Enable Event on line 17
        constexpr uint32_t EVEN18 = (1U << 18);  ///< Enable Event on line 18
    }

    /// RTEN Register bits
    namespace rten_bits {
        constexpr uint32_t RTEN0 = (1U << 0);  ///< Rising edge trigger enable of line 0
        constexpr uint32_t RTEN1 = (1U << 1);  ///< Rising edge trigger enable of line 1
        constexpr uint32_t RTEN2 = (1U << 2);  ///< Rising edge trigger enable of line 2
        constexpr uint32_t RTEN3 = (1U << 3);  ///< Rising edge trigger enable of line 3
        constexpr uint32_t RTEN4 = (1U << 4);  ///< Rising edge trigger enable of line 4
        constexpr uint32_t RTEN5 = (1U << 5);  ///< Rising edge trigger enable of line 5
        constexpr uint32_t RTEN6 = (1U << 6);  ///< Rising edge trigger enable of line 6
        constexpr uint32_t RTEN7 = (1U << 7);  ///< Rising edge trigger enable of line 7
        constexpr uint32_t RTEN8 = (1U << 8);  ///< Rising edge trigger enable of line 8
        constexpr uint32_t RTEN9 = (1U << 9);  ///< Rising edge trigger enable of line 9
        constexpr uint32_t RTEN10 = (1U << 10);  ///< Rising edge trigger enable of line 10
        constexpr uint32_t RTEN11 = (1U << 11);  ///< Rising edge trigger enable of line 11
        constexpr uint32_t RTEN12 = (1U << 12);  ///< Rising edge trigger enable of line 12
        constexpr uint32_t RTEN13 = (1U << 13);  ///< Rising edge trigger enable of line 13
        constexpr uint32_t RTEN14 = (1U << 14);  ///< Rising edge trigger enable of line 14
        constexpr uint32_t RTEN15 = (1U << 15);  ///< Rising edge trigger enable of line 15
        constexpr uint32_t RTEN16 = (1U << 16);  ///< Rising edge trigger enable of line 16
        constexpr uint32_t RTEN17 = (1U << 17);  ///< Rising edge trigger enable of line 17
        constexpr uint32_t RTEN18 = (1U << 18);  ///< Rising edge trigger enable of line 18
    }

    /// FTEN Register bits
    namespace ften_bits {
        constexpr uint32_t FTEN0 = (1U << 0);  ///< Falling edge trigger enable of line 0
        constexpr uint32_t FTEN1 = (1U << 1);  ///< Falling edge trigger enable of line 1
        constexpr uint32_t FTEN2 = (1U << 2);  ///< Falling edge trigger enable of line 2
        constexpr uint32_t FTEN3 = (1U << 3);  ///< Falling edge trigger enable of line 3
        constexpr uint32_t FTEN4 = (1U << 4);  ///< Falling edge trigger enable of line 4
        constexpr uint32_t FTEN5 = (1U << 5);  ///< Falling edge trigger enable of line 5
        constexpr uint32_t FTEN6 = (1U << 6);  ///< Falling edge trigger enable of line 6
        constexpr uint32_t FTEN7 = (1U << 7);  ///< Falling edge trigger enable of line 7
        constexpr uint32_t FTEN8 = (1U << 8);  ///< Falling edge trigger enable of line 8
        constexpr uint32_t FTEN9 = (1U << 9);  ///< Falling edge trigger enable of line 9
        constexpr uint32_t FTEN10 = (1U << 10);  ///< Falling edge trigger enable of line 10
        constexpr uint32_t FTEN11 = (1U << 11);  ///< Falling edge trigger enable of line 11
        constexpr uint32_t FTEN12 = (1U << 12);  ///< Falling edge trigger enable of line 12
        constexpr uint32_t FTEN13 = (1U << 13);  ///< Falling edge trigger enable of line 13
        constexpr uint32_t FTEN14 = (1U << 14);  ///< Falling edge trigger enable of line 14
        constexpr uint32_t FTEN15 = (1U << 15);  ///< Falling edge trigger enable of line 15
        constexpr uint32_t FTEN16 = (1U << 16);  ///< Falling edge trigger enable of line 16
        constexpr uint32_t FTEN17 = (1U << 17);  ///< Falling edge trigger enable of line 17
        constexpr uint32_t FTEN18 = (1U << 18);  ///< Falling edge trigger enable of line 18
    }

    /// SWIEV Register bits
    namespace swiev_bits {
        constexpr uint32_t SWIEV0 = (1U << 0);  ///< Interrupt/Event software trigger on line 0
        constexpr uint32_t SWIEV1 = (1U << 1);  ///< Interrupt/Event software trigger on line 1
        constexpr uint32_t SWIEV2 = (1U << 2);  ///< Interrupt/Event software trigger on line 2
        constexpr uint32_t SWIEV3 = (1U << 3);  ///< Interrupt/Event software trigger on line 3
        constexpr uint32_t SWIEV4 = (1U << 4);  ///< Interrupt/Event software trigger on line 4
        constexpr uint32_t SWIEV5 = (1U << 5);  ///< Interrupt/Event software trigger on line 5
        constexpr uint32_t SWIEV6 = (1U << 6);  ///< Interrupt/Event software trigger on line 6
        constexpr uint32_t SWIEV7 = (1U << 7);  ///< Interrupt/Event software trigger on line 7
        constexpr uint32_t SWIEV8 = (1U << 8);  ///< Interrupt/Event software trigger on line 8
        constexpr uint32_t SWIEV9 = (1U << 9);  ///< Interrupt/Event software trigger on line 9
        constexpr uint32_t SWIEV10 = (1U << 10);  ///< Interrupt/Event software trigger on line 10
        constexpr uint32_t SWIEV11 = (1U << 11);  ///< Interrupt/Event software trigger on line 11
        constexpr uint32_t SWIEV12 = (1U << 12);  ///< Interrupt/Event software trigger on line 12
        constexpr uint32_t SWIEV13 = (1U << 13);  ///< Interrupt/Event software trigger on line 13
        constexpr uint32_t SWIEV14 = (1U << 14);  ///< Interrupt/Event software trigger on line 14
        constexpr uint32_t SWIEV15 = (1U << 15);  ///< Interrupt/Event software trigger on line 15
        constexpr uint32_t SWIEV16 = (1U << 16);  ///< Interrupt/Event software trigger on line 16
        constexpr uint32_t SWIEV17 = (1U << 17);  ///< Interrupt/Event software trigger on line 17
        constexpr uint32_t SWIEV18 = (1U << 18);  ///< Interrupt/Event software trigger on line 18
    }

    /// PD Register bits
    namespace pd_bits {
        constexpr uint32_t PD0 = (1U << 0);  ///< Interrupt pending status of line 0
        constexpr uint32_t PD1 = (1U << 1);  ///< Interrupt pending status of line 1
        constexpr uint32_t PD2 = (1U << 2);  ///< Interrupt pending status of line 2
        constexpr uint32_t PD3 = (1U << 3);  ///< Interrupt pending status of line 3
        constexpr uint32_t PD4 = (1U << 4);  ///< Interrupt pending status of line 4
        constexpr uint32_t PD5 = (1U << 5);  ///< Interrupt pending status of line 5
        constexpr uint32_t PD6 = (1U << 6);  ///< Interrupt pending status of line 6
        constexpr uint32_t PD7 = (1U << 7);  ///< Interrupt pending status of line 7
        constexpr uint32_t PD8 = (1U << 8);  ///< Interrupt pending status of line 8
        constexpr uint32_t PD9 = (1U << 9);  ///< Interrupt pending status of line 9
        constexpr uint32_t PD10 = (1U << 10);  ///< Interrupt pending status of line 10
        constexpr uint32_t PD11 = (1U << 11);  ///< Interrupt pending status of line 11
        constexpr uint32_t PD12 = (1U << 12);  ///< Interrupt pending status of line 12
        constexpr uint32_t PD13 = (1U << 13);  ///< Interrupt pending status of line 13
        constexpr uint32_t PD14 = (1U << 14);  ///< Interrupt pending status of line 14
        constexpr uint32_t PD15 = (1U << 15);  ///< Interrupt pending status of line 15
        constexpr uint32_t PD16 = (1U << 16);  ///< Interrupt pending status of line 16
        constexpr uint32_t PD17 = (1U << 17);  ///< Interrupt pending status of line 17
        constexpr uint32_t PD18 = (1U << 18);  ///< Interrupt pending status of line 18
    }

}

// ============================================================================
// FMC Peripheral
// ============================================================================

namespace fmc {
    /// Base addresses
    constexpr uint32_t FMC_BASE = 0x40022000;

    /// FMC Register structure
    struct Registers {
        volatile uint32_t WS;  ///< Offset: 0x00 - wait state counter register
        volatile uint32_t KEY0;  ///< Offset: 0x04 - Unlock key register 0
        volatile uint32_t OBKEY;  ///< Offset: 0x08 - Option byte unlock key register
        volatile uint32_t STAT0;  ///< Offset: 0x0C - Status register 0
        volatile uint32_t CTL0;  ///< Offset: 0x10 - Control register 0
        volatile uint32_t ADDR0;  ///< Offset: 0x14 - Address register 0
        volatile uint32_t OBSTAT;  ///< Offset: 0x1C - Option byte status register
        volatile uint32_t WP;  ///< Offset: 0x20 - Erase/Program Protection register
        volatile uint32_t PID;  ///< Offset: 0x100 - Product ID register
    };

    /// Peripheral instances
    inline Registers* FMC = reinterpret_cast<Registers*>(FMC_BASE);

    // Bit definitions
    /// WS Register bits
    namespace ws_bits {
        constexpr uint32_t WSCNT = (3 << 0);  ///< wait state counter register
    }

    /// KEY0 Register bits
    namespace key0_bits {
        constexpr uint32_t KEY = (32 << 0);  ///< FMC_CTL0 unlock key
    }

    /// OBKEY Register bits
    namespace obkey_bits {
        constexpr uint32_t OBKEY = (32 << 0);  ///< FMC_ CTL0 option byte operation unlock register
    }

    /// STAT0 Register bits
    namespace stat0_bits {
        constexpr uint32_t ENDF = (1U << 5);  ///< End of operation flag bit
        constexpr uint32_t WPERR = (1U << 4);  ///< Erase/Program protection error flag bit
        constexpr uint32_t PGERR = (1U << 2);  ///< Program error flag bit
        constexpr uint32_t BUSY = (1U << 0);  ///< The flash is busy bit
    }

    /// CTL0 Register bits
    namespace ctl0_bits {
        constexpr uint32_t ENDIE = (1U << 12);  ///< End of operation interrupt enable bit
        constexpr uint32_t ERRIE = (1U << 10);  ///< Error interrupt enable bit
        constexpr uint32_t OBWEN = (1U << 9);  ///< Option byte erase/program enable bit
        constexpr uint32_t LK = (1U << 7);  ///< FMC_CTL0 lock bit
        constexpr uint32_t START = (1U << 6);  ///< Send erase command to FMC bit
        constexpr uint32_t OBER = (1U << 5);  ///< Option bytes erase command bit
        constexpr uint32_t OBPG = (1U << 4);  ///< Option bytes program command bit
        constexpr uint32_t MER = (1U << 2);  ///< Main flash mass erase for bank0 command bit
        constexpr uint32_t PER = (1U << 1);  ///< Main flash page erase for bank0 command bit
        constexpr uint32_t PG = (1U << 0);  ///< Main flash program for bank0 command bit
    }

    /// ADDR0 Register bits
    namespace addr0_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< Flash erase/program command address bits
    }

    /// OBSTAT Register bits
    namespace obstat_bits {
        constexpr uint32_t OBERR = (1U << 0);  ///< Option bytes read error bit
        constexpr uint32_t SPC = (1U << 1);  ///< Option bytes security protection code
        constexpr uint32_t USER = (8 << 2);  ///< Store USER of option bytes block after system reset
        constexpr uint32_t DATA = (16 << 10);  ///< Store DATA[15:0] of option bytes block after system reset
    }

    /// WP Register bits
    namespace wp_bits {
        constexpr uint32_t WP = (32 << 0);  ///< Store WP[31:0] of option bytes block after system reset
    }

    /// PID Register bits
    namespace pid_bits {
        constexpr uint32_t PID = (32 << 0);  ///< Product reserved ID code register
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t FWDGT_BASE = 0x40003000;
    constexpr uint32_t WWDGT_BASE = 0x40002C00;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - Control register
        volatile uint32_t PSC;  ///< Offset: 0x04 - Prescaler register
        volatile uint32_t RLD;  ///< Offset: 0x08 - Reload register
        volatile uint32_t STAT;  ///< Offset: 0x0C - Status register
    };

    /// Peripheral instances
    inline Registers* FWDGT = reinterpret_cast<Registers*>(FWDGT_BASE);
    inline Registers* WWDGT = reinterpret_cast<Registers*>(WWDGT_BASE);

    // Bit definitions
    /// CTL Register bits
    namespace ctl_bits {
        constexpr uint32_t CMD = (16 << 0);  ///< Key value
    }

    /// PSC Register bits
    namespace psc_bits {
        constexpr uint32_t PSC = (3 << 0);  ///< Free watchdog timer prescaler selection
    }

    /// RLD Register bits
    namespace rld_bits {
        constexpr uint32_t RLD = (12 << 0);  ///< Free watchdog timer counter reload value
    }

    /// STAT Register bits
    namespace stat_bits {
        constexpr uint32_t PUD = (1U << 0);  ///< Free watchdog timer prescaler value update
        constexpr uint32_t RUD = (1U << 1);  ///< Free watchdog timer counter reload value update
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIOA_BASE = 0x40010800;
    constexpr uint32_t GPIOB_BASE = 0x40010C00;
    constexpr uint32_t GPIOC_BASE = 0x40011000;
    constexpr uint32_t GPIOD_BASE = 0x40011400;
    constexpr uint32_t GPIOE_BASE = 0x40011800;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t CTL0;  ///< Offset: 0x00 - port control register 0
        volatile uint32_t CTL1;  ///< Offset: 0x04 - port control register 1
        volatile uint32_t ISTAT;  ///< Offset: 0x08 - Port input status register
        volatile uint32_t OCTL;  ///< Offset: 0x0C - Port output control register
        volatile uint32_t BOP;  ///< Offset: 0x10 - Port bit operate register
        volatile uint32_t BC;  ///< Offset: 0x14 - Port bit clear register
        volatile uint32_t LOCK;  ///< Offset: 0x18 - GPIO port configuration lock register
    };

    /// Peripheral instances
    inline Registers* GPIOA = reinterpret_cast<Registers*>(GPIOA_BASE);
    inline Registers* GPIOB = reinterpret_cast<Registers*>(GPIOB_BASE);
    inline Registers* GPIOC = reinterpret_cast<Registers*>(GPIOC_BASE);
    inline Registers* GPIOD = reinterpret_cast<Registers*>(GPIOD_BASE);
    inline Registers* GPIOE = reinterpret_cast<Registers*>(GPIOE_BASE);

    // Bit definitions
    /// CTL0 Register bits
    namespace ctl0_bits {
        constexpr uint32_t CTL7 = (2 << 30);  ///< Port x configuration bits (x = 7)
        constexpr uint32_t MD7 = (2 << 28);  ///< Port x mode bits (x = 7)
        constexpr uint32_t CTL6 = (2 << 26);  ///< Port x configuration bits (x = 6)
        constexpr uint32_t MD6 = (2 << 24);  ///< Port x mode bits (x = 6)
        constexpr uint32_t CTL5 = (2 << 22);  ///< Port x configuration bits (x = 5)
        constexpr uint32_t MD5 = (2 << 20);  ///< Port x mode bits (x = 5)
        constexpr uint32_t CTL4 = (2 << 18);  ///< Port x configuration bits (x = 4)
        constexpr uint32_t MD4 = (2 << 16);  ///< Port x mode bits (x = 4)
        constexpr uint32_t CTL3 = (2 << 14);  ///< Port x configuration bits (x = 3)
        constexpr uint32_t MD3 = (2 << 12);  ///< Port x mode bits (x = 3 )
        constexpr uint32_t CTL2 = (2 << 10);  ///< Port x configuration bits (x = 2)
        constexpr uint32_t MD2 = (2 << 8);  ///< Port x mode bits (x = 2 )
        constexpr uint32_t CTL1 = (2 << 6);  ///< Port x configuration bits (x = 1)
        constexpr uint32_t MD1 = (2 << 4);  ///< Port x mode bits (x = 1)
        constexpr uint32_t CTL0 = (2 << 2);  ///< Port x configuration bits (x = 0)
        constexpr uint32_t MD0 = (2 << 0);  ///< Port x mode bits (x = 0)
    }

    /// CTL1 Register bits
    namespace ctl1_bits {
        constexpr uint32_t CTL15 = (2 << 30);  ///< Port x configuration bits (x = 15)
        constexpr uint32_t MD15 = (2 << 28);  ///< Port x mode bits (x = 15)
        constexpr uint32_t CTL14 = (2 << 26);  ///< Port x configuration bits (x = 14)
        constexpr uint32_t MD14 = (2 << 24);  ///< Port x mode bits (x = 14)
        constexpr uint32_t CTL13 = (2 << 22);  ///< Port x configuration bits (x = 13)
        constexpr uint32_t MD13 = (2 << 20);  ///< Port x mode bits (x = 13)
        constexpr uint32_t CTL12 = (2 << 18);  ///< Port x configuration bits (x = 12)
        constexpr uint32_t MD12 = (2 << 16);  ///< Port x mode bits (x = 12)
        constexpr uint32_t CTL11 = (2 << 14);  ///< Port x configuration bits (x = 11)
        constexpr uint32_t MD11 = (2 << 12);  ///< Port x mode bits (x = 11 )
        constexpr uint32_t CTL10 = (2 << 10);  ///< Port x configuration bits (x = 10)
        constexpr uint32_t MD10 = (2 << 8);  ///< Port x mode bits (x = 10 )
        constexpr uint32_t CTL9 = (2 << 6);  ///< Port x configuration bits (x = 9)
        constexpr uint32_t MD9 = (2 << 4);  ///< Port x mode bits (x = 9)
        constexpr uint32_t CTL8 = (2 << 2);  ///< Port x configuration bits (x = 8)
        constexpr uint32_t MD8 = (2 << 0);  ///< Port x mode bits (x = 8)
    }

    /// ISTAT Register bits
    namespace istat_bits {
        constexpr uint32_t ISTAT15 = (1U << 15);  ///< Port input status
        constexpr uint32_t ISTAT14 = (1U << 14);  ///< Port input status
        constexpr uint32_t ISTAT13 = (1U << 13);  ///< Port input status
        constexpr uint32_t ISTAT12 = (1U << 12);  ///< Port input status
        constexpr uint32_t ISTAT11 = (1U << 11);  ///< Port input status
        constexpr uint32_t ISTAT10 = (1U << 10);  ///< Port input status
        constexpr uint32_t ISTAT9 = (1U << 9);  ///< Port input status
        constexpr uint32_t ISTAT8 = (1U << 8);  ///< Port input status
        constexpr uint32_t ISTAT7 = (1U << 7);  ///< Port input status
        constexpr uint32_t ISTAT6 = (1U << 6);  ///< Port input status
        constexpr uint32_t ISTAT5 = (1U << 5);  ///< Port input status
        constexpr uint32_t ISTAT4 = (1U << 4);  ///< Port input status
        constexpr uint32_t ISTAT3 = (1U << 3);  ///< Port input status
        constexpr uint32_t ISTAT2 = (1U << 2);  ///< Port input status
        constexpr uint32_t ISTAT1 = (1U << 1);  ///< Port input status
        constexpr uint32_t ISTAT0 = (1U << 0);  ///< Port input status
    }

    /// OCTL Register bits
    namespace octl_bits {
        constexpr uint32_t OCTL15 = (1U << 15);  ///< Port output control
        constexpr uint32_t OCTL14 = (1U << 14);  ///< Port output control
        constexpr uint32_t OCTL13 = (1U << 13);  ///< Port output control
        constexpr uint32_t OCTL12 = (1U << 12);  ///< Port output control
        constexpr uint32_t OCTL11 = (1U << 11);  ///< Port output control
        constexpr uint32_t OCTL10 = (1U << 10);  ///< Port output control
        constexpr uint32_t OCTL9 = (1U << 9);  ///< Port output control
        constexpr uint32_t OCTL8 = (1U << 8);  ///< Port output control
        constexpr uint32_t OCTL7 = (1U << 7);  ///< Port output control
        constexpr uint32_t OCTL6 = (1U << 6);  ///< Port output control
        constexpr uint32_t OCTL5 = (1U << 5);  ///< Port output control
        constexpr uint32_t OCTL4 = (1U << 4);  ///< Port output control
        constexpr uint32_t OCTL3 = (1U << 3);  ///< Port output control
        constexpr uint32_t OCTL2 = (1U << 2);  ///< Port output control
        constexpr uint32_t OCTL1 = (1U << 1);  ///< Port output control
        constexpr uint32_t OCTL0 = (1U << 0);  ///< Port output control
    }

    /// BOP Register bits
    namespace bop_bits {
        constexpr uint32_t CR15 = (1U << 31);  ///< Port 15 Clear bit
        constexpr uint32_t CR14 = (1U << 30);  ///< Port 14 Clear bit
        constexpr uint32_t CR13 = (1U << 29);  ///< Port 13 Clear bit
        constexpr uint32_t CR12 = (1U << 28);  ///< Port 12 Clear bit
        constexpr uint32_t CR11 = (1U << 27);  ///< Port 11 Clear bit
        constexpr uint32_t CR10 = (1U << 26);  ///< Port 10 Clear bit
        constexpr uint32_t CR9 = (1U << 25);  ///< Port 9 Clear bit
        constexpr uint32_t CR8 = (1U << 24);  ///< Port 8 Clear bit
        constexpr uint32_t CR7 = (1U << 23);  ///< Port 7 Clear bit
        constexpr uint32_t CR6 = (1U << 22);  ///< Port 6 Clear bit
        constexpr uint32_t CR5 = (1U << 21);  ///< Port 5 Clear bit
        constexpr uint32_t CR4 = (1U << 20);  ///< Port 4 Clear bit
        constexpr uint32_t CR3 = (1U << 19);  ///< Port 3 Clear bit
        constexpr uint32_t CR2 = (1U << 18);  ///< Port 2 Clear bit
        constexpr uint32_t CR1 = (1U << 17);  ///< Port 1 Clear bit
        constexpr uint32_t CR0 = (1U << 16);  ///< Port 0 Clear bit
        constexpr uint32_t BOP15 = (1U << 15);  ///< Port 15 Set bit
        constexpr uint32_t BOP14 = (1U << 14);  ///< Port 14 Set bit
        constexpr uint32_t BOP13 = (1U << 13);  ///< Port 13 Set bit
        constexpr uint32_t BOP12 = (1U << 12);  ///< Port 12 Set bit
        constexpr uint32_t BOP11 = (1U << 11);  ///< Port 11 Set bit
        constexpr uint32_t BOP10 = (1U << 10);  ///< Port 10 Set bit
        constexpr uint32_t BOP9 = (1U << 9);  ///< Port 9 Set bit
        constexpr uint32_t BOP8 = (1U << 8);  ///< Port 8 Set bit
        constexpr uint32_t BOP7 = (1U << 7);  ///< Port 7 Set bit
        constexpr uint32_t BOP6 = (1U << 6);  ///< Port 6 Set bit
        constexpr uint32_t BOP5 = (1U << 5);  ///< Port 5 Set bit
        constexpr uint32_t BOP4 = (1U << 4);  ///< Port 4 Set bit
        constexpr uint32_t BOP3 = (1U << 3);  ///< Port 3 Set bit
        constexpr uint32_t BOP2 = (1U << 2);  ///< Port 2 Set bit
        constexpr uint32_t BOP1 = (1U << 1);  ///< Port 1 Set bit
        constexpr uint32_t BOP0 = (1U << 0);  ///< Port 0 Set bit
    }

    /// BC Register bits
    namespace bc_bits {
        constexpr uint32_t CR15 = (1U << 15);  ///< Port 15 Clear bit
        constexpr uint32_t CR14 = (1U << 14);  ///< Port 14 Clear bit
        constexpr uint32_t CR13 = (1U << 13);  ///< Port 13 Clear bit
        constexpr uint32_t CR12 = (1U << 12);  ///< Port 12 Clear bit
        constexpr uint32_t CR11 = (1U << 11);  ///< Port 11 Clear bit
        constexpr uint32_t CR10 = (1U << 10);  ///< Port 10 Clear bit
        constexpr uint32_t CR9 = (1U << 9);  ///< Port 9 Clear bit
        constexpr uint32_t CR8 = (1U << 8);  ///< Port 8 Clear bit
        constexpr uint32_t CR7 = (1U << 7);  ///< Port 7 Clear bit
        constexpr uint32_t CR6 = (1U << 6);  ///< Port 6 Clear bit
        constexpr uint32_t CR5 = (1U << 5);  ///< Port 5 Clear bit
        constexpr uint32_t CR4 = (1U << 4);  ///< Port 4 Clear bit
        constexpr uint32_t CR3 = (1U << 3);  ///< Port 3 Clear bit
        constexpr uint32_t CR2 = (1U << 2);  ///< Port 2 Clear bit
        constexpr uint32_t CR1 = (1U << 1);  ///< Port 1 Clear bit
        constexpr uint32_t CR0 = (1U << 0);  ///< Port 0 Clear bit
    }

    /// LOCK Register bits
    namespace lock_bits {
        constexpr uint32_t LKK = (1U << 16);  ///< Lock sequence key
        constexpr uint32_t LK15 = (1U << 15);  ///< Port Lock bit 15
        constexpr uint32_t LK14 = (1U << 14);  ///< Port Lock bit 14
        constexpr uint32_t LK13 = (1U << 13);  ///< Port Lock bit 13
        constexpr uint32_t LK12 = (1U << 12);  ///< Port Lock bit 12
        constexpr uint32_t LK11 = (1U << 11);  ///< Port Lock bit 11
        constexpr uint32_t LK10 = (1U << 10);  ///< Port Lock bit 10
        constexpr uint32_t LK9 = (1U << 9);  ///< Port Lock bit 9
        constexpr uint32_t LK8 = (1U << 8);  ///< Port Lock bit 8
        constexpr uint32_t LK7 = (1U << 7);  ///< Port Lock bit 7
        constexpr uint32_t LK6 = (1U << 6);  ///< Port Lock bit 6
        constexpr uint32_t LK5 = (1U << 5);  ///< Port Lock bit 5
        constexpr uint32_t LK4 = (1U << 4);  ///< Port Lock bit 4
        constexpr uint32_t LK3 = (1U << 3);  ///< Port Lock bit 3
        constexpr uint32_t LK2 = (1U << 2);  ///< Port Lock bit 2
        constexpr uint32_t LK1 = (1U << 1);  ///< Port Lock bit 1
        constexpr uint32_t LK0 = (1U << 0);  ///< Port Lock bit 0
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C0_BASE = 0x40005400;
    constexpr uint32_t I2C1_BASE = 0x40005800;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CTL0;  ///< Offset: 0x00 - Control register 0
        volatile uint32_t CTL1;  ///< Offset: 0x04 - Control register 1
        volatile uint32_t SADDR0;  ///< Offset: 0x08 - Slave address register 0
        volatile uint32_t SADDR1;  ///< Offset: 0x0C - Slave address register 1
        volatile uint32_t DATA;  ///< Offset: 0x10 - Transfer buffer register
        volatile uint32_t STAT0;  ///< Offset: 0x14 - Transfer status register 0
        volatile uint32_t STAT1;  ///< Offset: 0x18 - Transfer status register 1
        volatile uint32_t CKCFG;  ///< Offset: 0x1C - Clock configure register
        volatile uint32_t RT;  ///< Offset: 0x20 - Rise time register
    };

    /// Peripheral instances
    inline Registers* I2C0 = reinterpret_cast<Registers*>(I2C0_BASE);
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);

    // Bit definitions
    /// CTL0 Register bits
    namespace ctl0_bits {
        constexpr uint32_t SRESET = (1U << 15);  ///< Software reset
        constexpr uint32_t SALT = (1U << 13);  ///< SMBus alert
        constexpr uint32_t PECTRANS = (1U << 12);  ///< PEC Transfer
        constexpr uint32_t POAP = (1U << 11);  ///< Position of ACK and PEC when receiving
        constexpr uint32_t ACKEN = (1U << 10);  ///< Whether or not to send an ACK
        constexpr uint32_t STOP = (1U << 9);  ///< Generate a STOP condition on I2C bus
        constexpr uint32_t START = (1U << 8);  ///< Generate a START condition on I2C bus
        constexpr uint32_t SS = (1U << 7);  ///< Whether to stretch SCL low when data is not ready in slave mode
        constexpr uint32_t GCEN = (1U << 6);  ///< Whether or not to response to a General Call (0x00)
        constexpr uint32_t PECEN = (1U << 5);  ///< PEC Calculation Switch
        constexpr uint32_t ARPEN = (1U << 4);  ///< ARP protocol in SMBus switch
        constexpr uint32_t SMBSEL = (1U << 3);  ///< SMBusType Selection
        constexpr uint32_t SMBEN = (1U << 1);  ///< SMBus/I2C mode switch
        constexpr uint32_t I2CEN = (1U << 0);  ///< I2C peripheral enable
    }

    /// CTL1 Register bits
    namespace ctl1_bits {
        constexpr uint32_t DMALST = (1U << 12);  ///< Flag indicating DMA last transfer
        constexpr uint32_t DMAON = (1U << 11);  ///< DMA mode switch
        constexpr uint32_t BUFIE = (1U << 10);  ///< Buffer interrupt enable
        constexpr uint32_t EVIE = (1U << 9);  ///< Event interrupt enable
        constexpr uint32_t ERRIE = (1U << 8);  ///< Error interrupt enable
        constexpr uint32_t I2CCLK = (6 << 0);  ///< I2C Peripheral clock frequency
    }

    /// SADDR0 Register bits
    namespace saddr0_bits {
        constexpr uint32_t ADDFORMAT = (1U << 15);  ///< Address mode for the I2C slave
        constexpr uint32_t ADDRESS9_8 = (2 << 8);  ///< Highest two bits of a 10-bit address
        constexpr uint32_t ADDRESS7_1 = (7 << 1);  ///< 7-bit address or bits 7:1 of a 10-bit address
        constexpr uint32_t ADDRESS0 = (1U << 0);  ///< Bit 0 of a 10-bit address
    }

    /// SADDR1 Register bits
    namespace saddr1_bits {
        constexpr uint32_t ADDRESS2 = (7 << 1);  ///< Second I2C address for the slave in Dual-Address mode
        constexpr uint32_t DUADEN = (1U << 0);  ///< Dual-Address mode switch
    }

    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t TRB = (8 << 0);  ///< Transmission or reception data buffer register
    }

    /// STAT0 Register bits
    namespace stat0_bits {
        constexpr uint32_t SMBALT = (1U << 15);  ///< SMBus Alert status
        constexpr uint32_t SMBTO = (1U << 14);  ///< Timeout signal in SMBus mode
        constexpr uint32_t PECERR = (1U << 12);  ///< PEC error when receiving data
        constexpr uint32_t OUERR = (1U << 11);  ///< Over-run or under-run situation occurs in slave mode
        constexpr uint32_t AERR = (1U << 10);  ///< Acknowledge error
        constexpr uint32_t LOSTARB = (1U << 9);  ///< Arbitration Lost in master mode
        constexpr uint32_t BERR = (1U << 8);  ///< A bus error occurs indication a unexpected START or STOP condition on I2C bus
        constexpr uint32_t TBE = (1U << 7);  ///< I2C_DATA is Empty during transmitting
        constexpr uint32_t RBNE = (1U << 6);  ///< I2C_DATA is not Empty during receiving
        constexpr uint32_t STPDET = (1U << 4);  ///< STOP condition detected in slave mode
        constexpr uint32_t ADD10SEND = (1U << 3);  ///< Header of 10-bit address is sent in master mode
        constexpr uint32_t BTC = (1U << 2);  ///< Byte transmission completed
        constexpr uint32_t ADDSEND = (1U << 1);  ///< Address is sent in master mode or received and matches in slave mode
        constexpr uint32_t SBSEND = (1U << 0);  ///< START condition sent out in master mode
    }

    /// STAT1 Register bits
    namespace stat1_bits {
        constexpr uint32_t PECV = (8 << 8);  ///< Packet Error Checking Value that calculated by hardware when PEC is enabled
        constexpr uint32_t DUMODF = (1U << 7);  ///< Dual Flag in slave mode
        constexpr uint32_t HSTSMB = (1U << 6);  ///< SMBus Host Header detected in slave mode
        constexpr uint32_t DEFSMB = (1U << 5);  ///< Default address of SMBusDevice
        constexpr uint32_t RXGC = (1U << 4);  ///< General call address (00h) received
        constexpr uint32_t TR = (1U << 2);  ///< Whether the I2C is a transmitter or a receiver
        constexpr uint32_t I2CBSY = (1U << 1);  ///< Busy flag
        constexpr uint32_t MASTER = (1U << 0);  ///< A flag indicating whether I2C block is in master or slave mode
    }

    /// CKCFG Register bits
    namespace ckcfg_bits {
        constexpr uint32_t FAST = (1U << 15);  ///< I2C speed selection in master mode
        constexpr uint32_t DTCY = (1U << 14);  ///< Duty cycle in fast mode
        constexpr uint32_t CLKC = (12 << 0);  ///< I2C Clock control in master mode
    }

    /// RT Register bits
    namespace rt_bits {
        constexpr uint32_t RISETIME = (6 << 0);  ///< Maximum rise time in master mode
    }

}

// ============================================================================
// ECLIC Peripheral
// ============================================================================

namespace eclic {
    /// Base addresses
    constexpr uint32_t ECLIC_BASE = 0xD2000000;

    /// ECLIC Register structure
    struct Registers {
        volatile uint32_t CLICCFG;  ///< Offset: 0x00 - cliccfg Register
        volatile uint32_t CLICINFO;  ///< Offset: 0x04 - clicinfo Register
        volatile uint32_t MTH;  ///< Offset: 0x0B - MTH Register
        volatile uint32_t CLICINTIP_0;  ///< Offset: 0x1000 - clicintip Register
        volatile uint32_t CLICINTIP_1;  ///< Offset: 0x1004 - clicintip Register
        volatile uint32_t CLICINTIP_2;  ///< Offset: 0x1008 - clicintip Register
        volatile uint32_t CLICINTIP_3;  ///< Offset: 0x100C - clicintip Register
        volatile uint32_t CLICINTIP_4;  ///< Offset: 0x1010 - clicintip Register
        volatile uint32_t CLICINTIP_5;  ///< Offset: 0x1014 - clicintip Register
        volatile uint32_t CLICINTIP_6;  ///< Offset: 0x1018 - clicintip Register
        volatile uint32_t CLICINTIP_7;  ///< Offset: 0x101C - clicintip Register
        volatile uint32_t CLICINTIP_8;  ///< Offset: 0x1020 - clicintip Register
        volatile uint32_t CLICINTIP_9;  ///< Offset: 0x1024 - clicintip Register
        volatile uint32_t CLICINTIP_10;  ///< Offset: 0x1028 - clicintip Register
        volatile uint32_t CLICINTIP_11;  ///< Offset: 0x102C - clicintip Register
        volatile uint32_t CLICINTIP_12;  ///< Offset: 0x1030 - clicintip Register
        volatile uint32_t CLICINTIP_13;  ///< Offset: 0x1034 - clicintip Register
        volatile uint32_t CLICINTIP_14;  ///< Offset: 0x1038 - clicintip Register
        volatile uint32_t CLICINTIP_15;  ///< Offset: 0x103C - clicintip Register
        volatile uint32_t CLICINTIP_16;  ///< Offset: 0x1040 - clicintip Register
        volatile uint32_t CLICINTIP_17;  ///< Offset: 0x1044 - clicintip Register
        volatile uint32_t CLICINTIP_18;  ///< Offset: 0x1048 - clicintip Register
        volatile uint32_t CLICINTIP_19;  ///< Offset: 0x104C - clicintip Register
        volatile uint32_t CLICINTIP_20;  ///< Offset: 0x1050 - clicintip Register
        volatile uint32_t CLICINTIP_21;  ///< Offset: 0x1054 - clicintip Register
        volatile uint32_t CLICINTIP_22;  ///< Offset: 0x1058 - clicintip Register
        volatile uint32_t CLICINTIP_23;  ///< Offset: 0x105C - clicintip Register
        volatile uint32_t CLICINTIP_24;  ///< Offset: 0x1060 - clicintip Register
        volatile uint32_t CLICINTIP_25;  ///< Offset: 0x1064 - clicintip Register
        volatile uint32_t CLICINTIP_26;  ///< Offset: 0x1068 - clicintip Register
        volatile uint32_t CLICINTIP_27;  ///< Offset: 0x106C - clicintip Register
        volatile uint32_t CLICINTIP_28;  ///< Offset: 0x1070 - clicintip Register
        volatile uint32_t CLICINTIP_29;  ///< Offset: 0x1074 - clicintip Register
        volatile uint32_t CLICINTIP_30;  ///< Offset: 0x1078 - clicintip Register
        volatile uint32_t CLICINTIP_31;  ///< Offset: 0x107C - clicintip Register
        volatile uint32_t CLICINTIP_32;  ///< Offset: 0x1080 - clicintip Register
        volatile uint32_t CLICINTIP_33;  ///< Offset: 0x1084 - clicintip Register
        volatile uint32_t CLICINTIP_34;  ///< Offset: 0x1088 - clicintip Register
        volatile uint32_t CLICINTIP_35;  ///< Offset: 0x108C - clicintip Register
        volatile uint32_t CLICINTIP_36;  ///< Offset: 0x1090 - clicintip Register
        volatile uint32_t CLICINTIP_37;  ///< Offset: 0x1094 - clicintip Register
        volatile uint32_t CLICINTIP_38;  ///< Offset: 0x1098 - clicintip Register
        volatile uint32_t CLICINTIP_39;  ///< Offset: 0x109C - clicintip Register
        volatile uint32_t CLICINTIP_40;  ///< Offset: 0x10A0 - clicintip Register
        volatile uint32_t CLICINTIP_41;  ///< Offset: 0x10A4 - clicintip Register
        volatile uint32_t CLICINTIP_42;  ///< Offset: 0x10A8 - clicintip Register
        volatile uint32_t CLICINTIP_43;  ///< Offset: 0x10AC - clicintip Register
        volatile uint32_t CLICINTIP_44;  ///< Offset: 0x10B0 - clicintip Register
        volatile uint32_t CLICINTIP_45;  ///< Offset: 0x10B4 - clicintip Register
        volatile uint32_t CLICINTIP_46;  ///< Offset: 0x10B8 - clicintip Register
        volatile uint32_t CLICINTIP_47;  ///< Offset: 0x10BC - clicintip Register
        volatile uint32_t CLICINTIP_48;  ///< Offset: 0x10C0 - clicintip Register
        volatile uint32_t CLICINTIP_49;  ///< Offset: 0x10C4 - clicintip Register
        volatile uint32_t CLICINTIP_50;  ///< Offset: 0x10C8 - clicintip Register
        volatile uint32_t CLICINTIP_51;  ///< Offset: 0x10CC - clicintip Register
        volatile uint32_t CLICINTIP_52;  ///< Offset: 0x10D0 - clicintip Register
        volatile uint32_t CLICINTIP_53;  ///< Offset: 0x10D4 - clicintip Register
        volatile uint32_t CLICINTIP_54;  ///< Offset: 0x10D8 - clicintip Register
        volatile uint32_t CLICINTIP_55;  ///< Offset: 0x10DC - clicintip Register
        volatile uint32_t CLICINTIP_56;  ///< Offset: 0x10E0 - clicintip Register
        volatile uint32_t CLICINTIP_57;  ///< Offset: 0x10E4 - clicintip Register
        volatile uint32_t CLICINTIP_58;  ///< Offset: 0x10E8 - clicintip Register
        volatile uint32_t CLICINTIP_59;  ///< Offset: 0x10EC - clicintip Register
        volatile uint32_t CLICINTIP_60;  ///< Offset: 0x10F0 - clicintip Register
        volatile uint32_t CLICINTIP_61;  ///< Offset: 0x10F4 - clicintip Register
        volatile uint32_t CLICINTIP_62;  ///< Offset: 0x10F8 - clicintip Register
        volatile uint32_t CLICINTIP_63;  ///< Offset: 0x10FC - clicintip Register
        volatile uint32_t CLICINTIP_64;  ///< Offset: 0x1100 - clicintip Register
        volatile uint32_t CLICINTIP_65;  ///< Offset: 0x1104 - clicintip Register
        volatile uint32_t CLICINTIP_66;  ///< Offset: 0x1108 - clicintip Register
        volatile uint32_t CLICINTIP_67;  ///< Offset: 0x110C - clicintip Register
        volatile uint32_t CLICINTIP_68;  ///< Offset: 0x1110 - clicintip Register
        volatile uint32_t CLICINTIP_69;  ///< Offset: 0x1114 - clicintip Register
        volatile uint32_t CLICINTIP_70;  ///< Offset: 0x1118 - clicintip Register
        volatile uint32_t CLICINTIP_71;  ///< Offset: 0x111C - clicintip Register
        volatile uint32_t CLICINTIP_72;  ///< Offset: 0x1120 - clicintip Register
        volatile uint32_t CLICINTIP_73;  ///< Offset: 0x1124 - clicintip Register
        volatile uint32_t CLICINTIP_74;  ///< Offset: 0x1128 - clicintip Register
        volatile uint32_t CLICINTIP_75;  ///< Offset: 0x112C - clicintip Register
        volatile uint32_t CLICINTIP_76;  ///< Offset: 0x1130 - clicintip Register
        volatile uint32_t CLICINTIP_77;  ///< Offset: 0x1134 - clicintip Register
        volatile uint32_t CLICINTIP_78;  ///< Offset: 0x1138 - clicintip Register
        volatile uint32_t CLICINTIP_79;  ///< Offset: 0x113C - clicintip Register
        volatile uint32_t CLICINTIP_80;  ///< Offset: 0x1140 - clicintip Register
        volatile uint32_t CLICINTIP_81;  ///< Offset: 0x1144 - clicintip Register
        volatile uint32_t CLICINTIP_82;  ///< Offset: 0x1148 - clicintip Register
        volatile uint32_t CLICINTIP_83;  ///< Offset: 0x114C - clicintip Register
        volatile uint32_t CLICINTIP_84;  ///< Offset: 0x1150 - clicintip Register
        volatile uint32_t CLICINTIP_85;  ///< Offset: 0x1158 - clicintip Register
        volatile uint32_t CLICINTIP_86;  ///< Offset: 0x115C - clicintip Register
        volatile uint32_t CLICINTIE_0;  ///< Offset: 0x1001 - clicintie Register
        volatile uint32_t CLICINTIE_1;  ///< Offset: 0x1005 - clicintie Register
        volatile uint32_t CLICINTIE_2;  ///< Offset: 0x1009 - clicintie Register
        volatile uint32_t CLICINTIE_3;  ///< Offset: 0x100D - clicintie Register
        volatile uint32_t CLICINTIE_4;  ///< Offset: 0x1011 - clicintie Register
        volatile uint32_t CLICINTIE_5;  ///< Offset: 0x1015 - clicintie Register
        volatile uint32_t CLICINTIE_6;  ///< Offset: 0x1019 - clicintie Register
        volatile uint32_t CLICINTIE_7;  ///< Offset: 0x101D - clicintie Register
        volatile uint32_t CLICINTIE_8;  ///< Offset: 0x1021 - clicintie Register
        volatile uint32_t CLICINTIE_9;  ///< Offset: 0x1025 - clicintie Register
        volatile uint32_t CLICINTIE_10;  ///< Offset: 0x1029 - clicintie Register
        volatile uint32_t CLICINTIE_11;  ///< Offset: 0x102D - clicintie Register
        volatile uint32_t CLICINTIE_12;  ///< Offset: 0x1031 - clicintie Register
        volatile uint32_t CLICINTIE_13;  ///< Offset: 0x1035 - clicintie Register
        volatile uint32_t CLICINTIE_14;  ///< Offset: 0x1039 - clicintie Register
        volatile uint32_t CLICINTIE_15;  ///< Offset: 0x103D - clicintie Register
        volatile uint32_t CLICINTIE_16;  ///< Offset: 0x1041 - clicintie Register
        volatile uint32_t CLICINTIE_17;  ///< Offset: 0x1045 - clicintie Register
        volatile uint32_t CLICINTIE_18;  ///< Offset: 0x1049 - clicintie Register
        volatile uint32_t CLICINTIE_19;  ///< Offset: 0x104D - clicintie Register
        volatile uint32_t CLICINTIE_20;  ///< Offset: 0x1051 - clicintie Register
        volatile uint32_t CLICINTIE_21;  ///< Offset: 0x1055 - clicintie Register
        volatile uint32_t CLICINTIE_22;  ///< Offset: 0x1059 - clicintie Register
        volatile uint32_t CLICINTIE_23;  ///< Offset: 0x105D - clicintie Register
        volatile uint32_t CLICINTIE_24;  ///< Offset: 0x1061 - clicintie Register
        volatile uint32_t CLICINTIE_25;  ///< Offset: 0x1065 - clicintie Register
        volatile uint32_t CLICINTIE_26;  ///< Offset: 0x1069 - clicintie Register
        volatile uint32_t CLICINTIE_27;  ///< Offset: 0x106D - clicintie Register
        volatile uint32_t CLICINTIE_28;  ///< Offset: 0x1071 - clicintie Register
        volatile uint32_t CLICINTIE_29;  ///< Offset: 0x1075 - clicintie Register
        volatile uint32_t CLICINTIE_30;  ///< Offset: 0x1079 - clicintie Register
        volatile uint32_t CLICINTIE_31;  ///< Offset: 0x107D - clicintie Register
        volatile uint32_t CLICINTIE_32;  ///< Offset: 0x1081 - clicintie Register
        volatile uint32_t CLICINTIE_33;  ///< Offset: 0x1085 - clicintie Register
        volatile uint32_t CLICINTIE_34;  ///< Offset: 0x1089 - clicintie Register
        volatile uint32_t CLICINTIE_35;  ///< Offset: 0x108D - clicintie Register
        volatile uint32_t CLICINTIE_36;  ///< Offset: 0x1091 - clicintie Register
        volatile uint32_t CLICINTIE_37;  ///< Offset: 0x1095 - clicintie Register
        volatile uint32_t CLICINTIE_38;  ///< Offset: 0x1099 - clicintie Register
        volatile uint32_t CLICINTIE_39;  ///< Offset: 0x109D - clicintie Register
        volatile uint32_t CLICINTIE_40;  ///< Offset: 0x10A1 - clicintie Register
        volatile uint32_t CLICINTIE_41;  ///< Offset: 0x10A5 - clicintie Register
        volatile uint32_t CLICINTIE_42;  ///< Offset: 0x10A9 - clicintie Register
        volatile uint32_t CLICINTIE_43;  ///< Offset: 0x10AD - clicintie Register
        volatile uint32_t CLICINTIE_44;  ///< Offset: 0x10B1 - clicintie Register
        volatile uint32_t CLICINTIE_45;  ///< Offset: 0x10B5 - clicintie Register
        volatile uint32_t CLICINTIE_46;  ///< Offset: 0x10B9 - clicintie Register
        volatile uint32_t CLICINTIE_47;  ///< Offset: 0x10BD - clicintie Register
        volatile uint32_t CLICINTIE_48;  ///< Offset: 0x10C1 - clicintie Register
        volatile uint32_t CLICINTIE_49;  ///< Offset: 0x10C5 - clicintie Register
        volatile uint32_t CLICINTIE_50;  ///< Offset: 0x10C9 - clicintie Register
        volatile uint32_t CLICINTIE_51;  ///< Offset: 0x10CD - clicintie Register
        volatile uint32_t CLICINTIE_52;  ///< Offset: 0x10D1 - clicintie Register
        volatile uint32_t CLICINTIE_53;  ///< Offset: 0x10D5 - clicintie Register
        volatile uint32_t CLICINTIE_54;  ///< Offset: 0x10D9 - clicintie Register
        volatile uint32_t CLICINTIE_55;  ///< Offset: 0x10DD - clicintie Register
        volatile uint32_t CLICINTIE_56;  ///< Offset: 0x10E1 - clicintie Register
        volatile uint32_t CLICINTIE_57;  ///< Offset: 0x10E5 - clicintie Register
        volatile uint32_t CLICINTIE_58;  ///< Offset: 0x10E9 - clicintie Register
        volatile uint32_t CLICINTIE_59;  ///< Offset: 0x10ED - clicintie Register
        volatile uint32_t CLICINTIE_60;  ///< Offset: 0x10F1 - clicintie Register
        volatile uint32_t CLICINTIE_61;  ///< Offset: 0x10F5 - clicintie Register
        volatile uint32_t CLICINTIE_62;  ///< Offset: 0x10F9 - clicintie Register
        volatile uint32_t CLICINTIE_63;  ///< Offset: 0x10FD - clicintie Register
        volatile uint32_t CLICINTIE_64;  ///< Offset: 0x1101 - clicintie Register
        volatile uint32_t CLICINTIE_65;  ///< Offset: 0x1105 - clicintie Register
        volatile uint32_t CLICINTIE_66;  ///< Offset: 0x1109 - clicintie Register
        volatile uint32_t CLICINTIE_67;  ///< Offset: 0x110D - clicintie Register
        volatile uint32_t CLICINTIE_68;  ///< Offset: 0x1111 - clicintie Register
        volatile uint32_t CLICINTIE_69;  ///< Offset: 0x1115 - clicintie Register
        volatile uint32_t CLICINTIE_70;  ///< Offset: 0x1119 - clicintie Register
        volatile uint32_t CLICINTIE_71;  ///< Offset: 0x111D - clicintie Register
        volatile uint32_t CLICINTIE_72;  ///< Offset: 0x1121 - clicintie Register
        volatile uint32_t CLICINTIE_73;  ///< Offset: 0x1125 - clicintie Register
        volatile uint32_t CLICINTIE_74;  ///< Offset: 0x1129 - clicintie Register
        volatile uint32_t CLICINTIE_75;  ///< Offset: 0x112D - clicintie Register
        volatile uint32_t CLICINTIE_76;  ///< Offset: 0x1131 - clicintie Register
        volatile uint32_t CLICINTIE_77;  ///< Offset: 0x1135 - clicintie Register
        volatile uint32_t CLICINTIE_78;  ///< Offset: 0x1139 - clicintie Register
        volatile uint32_t CLICINTIE_79;  ///< Offset: 0x113D - clicintie Register
        volatile uint32_t CLICINTIE_80;  ///< Offset: 0x1141 - clicintie Register
        volatile uint32_t CLICINTIE_81;  ///< Offset: 0x1145 - clicintie Register
        volatile uint32_t CLICINTIE_82;  ///< Offset: 0x1149 - clicintie Register
        volatile uint32_t CLICINTIE_83;  ///< Offset: 0x114D - clicintie Register
        volatile uint32_t CLICINTIE_84;  ///< Offset: 0x1151 - clicintie Register
        volatile uint32_t CLICINTIE_85;  ///< Offset: 0x1155 - clicintie Register
        volatile uint32_t CLICINTIE_86;  ///< Offset: 0x1159 - clicintie Register
        volatile uint32_t CLICINTATTR_0;  ///< Offset: 0x1002 - clicintattr Register
        volatile uint32_t CLICINTATTR_1;  ///< Offset: 0x1006 - clicintattr Register
        volatile uint32_t CLICINTATTR_2;  ///< Offset: 0x100A - clicintattr Register
        volatile uint32_t CLICINTATTR_3;  ///< Offset: 0x100E - clicintattr Register
        volatile uint32_t CLICINTATTR_4;  ///< Offset: 0x1012 - clicintattr Register
        volatile uint32_t CLICINTATTR_5;  ///< Offset: 0x1016 - clicintattr Register
        volatile uint32_t CLICINTATTR_6;  ///< Offset: 0x101A - clicintattr Register
        volatile uint32_t CLICINTATTR_7;  ///< Offset: 0x101E - clicintattr Register
        volatile uint32_t CLICINTATTR_8;  ///< Offset: 0x1022 - clicintattr Register
        volatile uint32_t CLICINTATTR_9;  ///< Offset: 0x1026 - clicintattr Register
        volatile uint32_t CLICINTATTR_10;  ///< Offset: 0x102A - clicintattr Register
        volatile uint32_t CLICINTATTR_11;  ///< Offset: 0x102E - clicintattr Register
        volatile uint32_t CLICINTATTR_12;  ///< Offset: 0x1032 - clicintattr Register
        volatile uint32_t CLICINTATTR_13;  ///< Offset: 0x1036 - clicintattr Register
        volatile uint32_t CLICINTATTR_14;  ///< Offset: 0x103A - clicintattr Register
        volatile uint32_t CLICINTATTR_15;  ///< Offset: 0x103E - clicintattr Register
        volatile uint32_t CLICINTATTR_16;  ///< Offset: 0x1042 - clicintattr Register
        volatile uint32_t CLICINTATTR_17;  ///< Offset: 0x1046 - clicintattr Register
        volatile uint32_t CLICINTATTR_18;  ///< Offset: 0x104A - clicintattr Register
        volatile uint32_t CLICINTATTR_19;  ///< Offset: 0x104E - clicintattr Register
        volatile uint32_t CLICINTATTR_20;  ///< Offset: 0x1052 - clicintattr Register
        volatile uint32_t CLICINTATTR_21;  ///< Offset: 0x1056 - clicintattr Register
        volatile uint32_t CLICINTATTR_22;  ///< Offset: 0x105A - clicintattr Register
        volatile uint32_t CLICINTATTR_23;  ///< Offset: 0x105E - clicintattr Register
        volatile uint32_t CLICINTATTR_24;  ///< Offset: 0x1062 - clicintattr Register
        volatile uint32_t CLICINTATTR_25;  ///< Offset: 0x1066 - clicintattr Register
        volatile uint32_t CLICINTATTR_26;  ///< Offset: 0x106A - clicintattr Register
        volatile uint32_t CLICINTATTR_27;  ///< Offset: 0x106E - clicintattr Register
        volatile uint32_t CLICINTATTR_28;  ///< Offset: 0x1072 - clicintattr Register
        volatile uint32_t CLICINTATTR_29;  ///< Offset: 0x1076 - clicintattr Register
        volatile uint32_t CLICINTATTR_30;  ///< Offset: 0x107A - clicintattr Register
        volatile uint32_t CLICINTATTR_31;  ///< Offset: 0x107E - clicintattr Register
        volatile uint32_t CLICINTATTR_32;  ///< Offset: 0x1082 - clicintattr Register
        volatile uint32_t CLICINTATTR_33;  ///< Offset: 0x1086 - clicintattr Register
        volatile uint32_t CLICINTATTR_34;  ///< Offset: 0x108A - clicintattr Register
        volatile uint32_t CLICINTATTR_35;  ///< Offset: 0x108E - clicintattr Register
        volatile uint32_t CLICINTATTR_36;  ///< Offset: 0x1092 - clicintattr Register
        volatile uint32_t CLICINTATTR_37;  ///< Offset: 0x1096 - clicintattr Register
        volatile uint32_t CLICINTATTR_38;  ///< Offset: 0x109A - clicintattr Register
        volatile uint32_t CLICINTATTR_39;  ///< Offset: 0x109E - clicintattr Register
        volatile uint32_t CLICINTATTR_40;  ///< Offset: 0x10A2 - clicintattr Register
        volatile uint32_t CLICINTATTR_41;  ///< Offset: 0x10A6 - clicintattr Register
        volatile uint32_t CLICINTATTR_42;  ///< Offset: 0x10AA - clicintattr Register
        volatile uint32_t CLICINTATTR_43;  ///< Offset: 0x10AE - clicintattr Register
        volatile uint32_t CLICINTATTR_44;  ///< Offset: 0x10B2 - clicintattr Register
        volatile uint32_t CLICINTATTR_45;  ///< Offset: 0x10B6 - clicintattr Register
        volatile uint32_t CLICINTATTR_46;  ///< Offset: 0x10BA - clicintattr Register
        volatile uint32_t CLICINTATTR_47;  ///< Offset: 0x10BE - clicintattr Register
        volatile uint32_t CLICINTATTR_48;  ///< Offset: 0x10C2 - clicintattr Register
        volatile uint32_t CLICINTATTR_49;  ///< Offset: 0x10C6 - clicintattr Register
        volatile uint32_t CLICINTATTR_50;  ///< Offset: 0x10CA - clicintattr Register
        volatile uint32_t CLICINTATTR_51;  ///< Offset: 0x10CE - clicintattr Register
        volatile uint32_t CLICINTATTR_52;  ///< Offset: 0x10D2 - clicintattr Register
        volatile uint32_t CLICINTATTR_53;  ///< Offset: 0x10D6 - clicintattr Register
        volatile uint32_t CLICINTATTR_54;  ///< Offset: 0x10DA - clicintattr Register
        volatile uint32_t CLICINTATTR_55;  ///< Offset: 0x10DE - clicintattr Register
        volatile uint32_t CLICINTATTR_56;  ///< Offset: 0x10E2 - clicintattr Register
        volatile uint32_t CLICINTATTR_57;  ///< Offset: 0x10E6 - clicintattr Register
        volatile uint32_t CLICINTATTR_58;  ///< Offset: 0x10EA - clicintattr Register
        volatile uint32_t CLICINTATTR_59;  ///< Offset: 0x10EE - clicintattr Register
        volatile uint32_t CLICINTATTR_60;  ///< Offset: 0x10F2 - clicintattr Register
        volatile uint32_t CLICINTATTR_61;  ///< Offset: 0x10F6 - clicintattr Register
        volatile uint32_t CLICINTATTR_62;  ///< Offset: 0x10FA - clicintattr Register
        volatile uint32_t CLICINTATTR_63;  ///< Offset: 0x10FE - clicintattr Register
        volatile uint32_t CLICINTATTR_64;  ///< Offset: 0x1102 - clicintattr Register
        volatile uint32_t CLICINTATTR_65;  ///< Offset: 0x1106 - clicintattr Register
        volatile uint32_t CLICINTATTR_66;  ///< Offset: 0x110A - clicintattr Register
        volatile uint32_t CLICINTATTR_67;  ///< Offset: 0x110E - clicintattr Register
        volatile uint32_t CLICINTATTR_68;  ///< Offset: 0x1112 - clicintattr Register
        volatile uint32_t CLICINTATTR_69;  ///< Offset: 0x1116 - clicintattr Register
        volatile uint32_t CLICINTATTR_70;  ///< Offset: 0x111A - clicintattr Register
        volatile uint32_t CLICINTATTR_71;  ///< Offset: 0x111E - clicintattr Register
        volatile uint32_t CLICINTATTR_72;  ///< Offset: 0x1122 - clicintattr Register
        volatile uint32_t CLICINTATTR_73;  ///< Offset: 0x1126 - clicintattr Register
        volatile uint32_t CLICINTATTR_74;  ///< Offset: 0x112A - clicintattr Register
        volatile uint32_t CLICINTATTR_75;  ///< Offset: 0x112E - clicintattr Register
        volatile uint32_t CLICINTATTR_76;  ///< Offset: 0x1132 - clicintattr Register
        volatile uint32_t CLICINTATTR_77;  ///< Offset: 0x1136 - clicintattr Register
        volatile uint32_t CLICINTATTR_78;  ///< Offset: 0x113A - clicintattr Register
        volatile uint32_t CLICINTATTR_79;  ///< Offset: 0x113E - clicintattr Register
        volatile uint32_t CLICINTATTR_80;  ///< Offset: 0x1142 - clicintattr Register
        volatile uint32_t CLICINTATTR_81;  ///< Offset: 0x1146 - clicintattr Register
        volatile uint32_t CLICINTATTR_82;  ///< Offset: 0x114A - clicintattr Register
        volatile uint32_t CLICINTATTR_83;  ///< Offset: 0x114E - clicintattr Register
        volatile uint32_t CLICINTATTR_84;  ///< Offset: 0x1152 - clicintattr Register
        volatile uint32_t CLICINTATTR_85;  ///< Offset: 0x1156 - clicintattr Register
        volatile uint32_t CLICINTATTR_86;  ///< Offset: 0x115A - clicintattr Register
        volatile uint32_t CLICINTCTL_0;  ///< Offset: 0x1003 - clicintctl Register
        volatile uint32_t CLICINTCTL_1;  ///< Offset: 0x1007 - clicintctl Register
        volatile uint32_t CLICINTCTL_2;  ///< Offset: 0x100B - clicintctl Register
        volatile uint32_t CLICINTCTL_3;  ///< Offset: 0x100F - clicintctl Register
        volatile uint32_t CLICINTCTL_4;  ///< Offset: 0x1013 - clicintctl Register
        volatile uint32_t CLICINTCTL_5;  ///< Offset: 0x1017 - clicintctl Register
        volatile uint32_t CLICINTCTL_6;  ///< Offset: 0x101B - clicintctl Register
        volatile uint32_t CLICINTCTL_7;  ///< Offset: 0x101F - clicintctl Register
        volatile uint32_t CLICINTCTL_8;  ///< Offset: 0x1023 - clicintctl Register
        volatile uint32_t CLICINTCTL_9;  ///< Offset: 0x1027 - clicintctl Register
        volatile uint32_t CLICINTCTL_10;  ///< Offset: 0x102B - clicintctl Register
        volatile uint32_t CLICINTCTL_11;  ///< Offset: 0x102F - clicintctl Register
        volatile uint32_t CLICINTCTL_12;  ///< Offset: 0x1033 - clicintctl Register
        volatile uint32_t CLICINTCTL_13;  ///< Offset: 0x1037 - clicintctl Register
        volatile uint32_t CLICINTCTL_14;  ///< Offset: 0x103B - clicintctl Register
        volatile uint32_t CLICINTCTL_15;  ///< Offset: 0x103F - clicintctl Register
        volatile uint32_t CLICINTCTL_16;  ///< Offset: 0x1043 - clicintctl Register
        volatile uint32_t CLICINTCTL_17;  ///< Offset: 0x1047 - clicintctl Register
        volatile uint32_t CLICINTCTL_18;  ///< Offset: 0x104B - clicintctl Register
        volatile uint32_t CLICINTCTL_19;  ///< Offset: 0x104F - clicintctl Register
        volatile uint32_t CLICINTCTL_20;  ///< Offset: 0x1053 - clicintctl Register
        volatile uint32_t CLICINTCTL_21;  ///< Offset: 0x1057 - clicintctl Register
        volatile uint32_t CLICINTCTL_22;  ///< Offset: 0x105B - clicintctl Register
        volatile uint32_t CLICINTCTL_23;  ///< Offset: 0x105F - clicintctl Register
        volatile uint32_t CLICINTCTL_24;  ///< Offset: 0x1063 - clicintctl Register
        volatile uint32_t CLICINTCTL_25;  ///< Offset: 0x1067 - clicintctl Register
        volatile uint32_t CLICINTCTL_26;  ///< Offset: 0x106B - clicintctl Register
        volatile uint32_t CLICINTCTL_27;  ///< Offset: 0x106F - clicintctl Register
        volatile uint32_t CLICINTCTL_28;  ///< Offset: 0x1073 - clicintctl Register
        volatile uint32_t CLICINTCTL_29;  ///< Offset: 0x1077 - clicintctl Register
        volatile uint32_t CLICINTCTL_30;  ///< Offset: 0x107B - clicintctl Register
        volatile uint32_t CLICINTCTL_31;  ///< Offset: 0x107F - clicintctl Register
        volatile uint32_t CLICINTCTL_32;  ///< Offset: 0x1083 - clicintctl Register
        volatile uint32_t CLICINTCTL_33;  ///< Offset: 0x1087 - clicintctl Register
        volatile uint32_t CLICINTCTL_34;  ///< Offset: 0x108B - clicintctl Register
        volatile uint32_t CLICINTCTL_35;  ///< Offset: 0x108F - clicintctl Register
        volatile uint32_t CLICINTCTL_36;  ///< Offset: 0x1093 - clicintctl Register
        volatile uint32_t CLICINTCTL_37;  ///< Offset: 0x1097 - clicintctl Register
        volatile uint32_t CLICINTCTL_38;  ///< Offset: 0x109B - clicintctl Register
        volatile uint32_t CLICINTCTL_39;  ///< Offset: 0x109F - clicintctl Register
        volatile uint32_t CLICINTCTL_40;  ///< Offset: 0x10A3 - clicintctl Register
        volatile uint32_t CLICINTCTL_41;  ///< Offset: 0x10A7 - clicintctl Register
        volatile uint32_t CLICINTCTL_42;  ///< Offset: 0x10AB - clicintctl Register
        volatile uint32_t CLICINTCTL_43;  ///< Offset: 0x10AF - clicintctl Register
        volatile uint32_t CLICINTCTL_44;  ///< Offset: 0x10B3 - clicintctl Register
        volatile uint32_t CLICINTCTL_45;  ///< Offset: 0x10B7 - clicintctl Register
        volatile uint32_t CLICINTCTL_46;  ///< Offset: 0x10BB - clicintctl Register
        volatile uint32_t CLICINTCTL_47;  ///< Offset: 0x10BF - clicintctl Register
        volatile uint32_t CLICINTCTL_48;  ///< Offset: 0x10C3 - clicintctl Register
        volatile uint32_t CLICINTCTL_49;  ///< Offset: 0x10C7 - clicintctl Register
        volatile uint32_t CLICINTCTL_50;  ///< Offset: 0x10CB - clicintctl Register
        volatile uint32_t CLICINTCTL_51;  ///< Offset: 0x10CF - clicintctl Register
        volatile uint32_t CLICINTCTL_52;  ///< Offset: 0x10D3 - clicintctl Register
        volatile uint32_t CLICINTCTL_53;  ///< Offset: 0x10D7 - clicintctl Register
        volatile uint32_t CLICINTCTL_54;  ///< Offset: 0x10DB - clicintctl Register
        volatile uint32_t CLICINTCTL_55;  ///< Offset: 0x10DF - clicintctl Register
        volatile uint32_t CLICINTCTL_56;  ///< Offset: 0x10E3 - clicintctl Register
        volatile uint32_t CLICINTCTL_57;  ///< Offset: 0x10E7 - clicintctl Register
        volatile uint32_t CLICINTCTL_58;  ///< Offset: 0x10EB - clicintctl Register
        volatile uint32_t CLICINTCTL_59;  ///< Offset: 0x10EF - clicintctl Register
        volatile uint32_t CLICINTCTL_60;  ///< Offset: 0x10F3 - clicintctl Register
        volatile uint32_t CLICINTCTL_61;  ///< Offset: 0x10F7 - clicintctl Register
        volatile uint32_t CLICINTCTL_62;  ///< Offset: 0x10FB - clicintctl Register
        volatile uint32_t CLICINTCTL_63;  ///< Offset: 0x10FF - clicintctl Register
        volatile uint32_t CLICINTCTL_64;  ///< Offset: 0x1103 - clicintctl Register
        volatile uint32_t CLICINTCTL_65;  ///< Offset: 0x1107 - clicintctl Register
        volatile uint32_t CLICINTCTL_66;  ///< Offset: 0x110B - clicintctl Register
        volatile uint32_t CLICINTCTL_67;  ///< Offset: 0x110F - clicintctl Register
        volatile uint32_t CLICINTCTL_68;  ///< Offset: 0x1113 - clicintctl Register
        volatile uint32_t CLICINTCTL_69;  ///< Offset: 0x1117 - clicintctl Register
        volatile uint32_t CLICINTCTL_70;  ///< Offset: 0x111B - clicintctl Register
        volatile uint32_t CLICINTCTL_71;  ///< Offset: 0x111F - clicintctl Register
        volatile uint32_t CLICINTCTL_72;  ///< Offset: 0x1123 - clicintctl Register
        volatile uint32_t CLICINTCTL_73;  ///< Offset: 0x1127 - clicintctl Register
        volatile uint32_t CLICINTCTL_74;  ///< Offset: 0x112B - clicintctl Register
        volatile uint32_t CLICINTCTL_75;  ///< Offset: 0x112F - clicintctl Register
        volatile uint32_t CLICINTCTL_76;  ///< Offset: 0x1133 - clicintctl Register
        volatile uint32_t CLICINTCTL_77;  ///< Offset: 0x1137 - clicintctl Register
        volatile uint32_t CLICINTCTL_78;  ///< Offset: 0x113B - clicintctl Register
        volatile uint32_t CLICINTCTL_79;  ///< Offset: 0x113F - clicintctl Register
        volatile uint32_t CLICINTCTL_80;  ///< Offset: 0x1143 - clicintctl Register
        volatile uint32_t CLICINTCTL_81;  ///< Offset: 0x1147 - clicintctl Register
        volatile uint32_t CLICINTCTL_82;  ///< Offset: 0x114B - clicintctl Register
        volatile uint32_t CLICINTCTL_83;  ///< Offset: 0x114F - clicintctl Register
        volatile uint32_t CLICINTCTL_84;  ///< Offset: 0x1153 - clicintctl Register
        volatile uint32_t CLICINTCTL_85;  ///< Offset: 0x1157 - clicintctl Register
        volatile uint32_t CLICINTCTL_86;  ///< Offset: 0x115B - clicintctl Register
    };

    /// Peripheral instances
    inline Registers* ECLIC = reinterpret_cast<Registers*>(ECLIC_BASE);

    // Bit definitions
    /// CLICCFG Register bits
    namespace cliccfg_bits {
        constexpr uint32_t NLBITS = (4 << 1);  ///< NLBITS
    }

    /// CLICINFO Register bits
    namespace clicinfo_bits {
        constexpr uint32_t NUM_INTERRUPT = (13 << 0);  ///< NUM_INTERRUPT
        constexpr uint32_t VERSION = (8 << 13);  ///< VERSION
        constexpr uint32_t CLICINTCTLBITS = (4 << 21);  ///< CLICINTCTLBITS
    }

    /// MTH Register bits
    namespace mth_bits {
        constexpr uint32_t MTH = (8 << 0);  ///< MTH
    }

    /// CLICINTIP_0 Register bits
    namespace clicintip_0_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_1 Register bits
    namespace clicintip_1_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_2 Register bits
    namespace clicintip_2_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_3 Register bits
    namespace clicintip_3_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_4 Register bits
    namespace clicintip_4_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_5 Register bits
    namespace clicintip_5_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_6 Register bits
    namespace clicintip_6_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_7 Register bits
    namespace clicintip_7_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_8 Register bits
    namespace clicintip_8_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_9 Register bits
    namespace clicintip_9_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_10 Register bits
    namespace clicintip_10_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_11 Register bits
    namespace clicintip_11_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_12 Register bits
    namespace clicintip_12_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_13 Register bits
    namespace clicintip_13_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_14 Register bits
    namespace clicintip_14_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_15 Register bits
    namespace clicintip_15_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_16 Register bits
    namespace clicintip_16_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_17 Register bits
    namespace clicintip_17_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_18 Register bits
    namespace clicintip_18_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_19 Register bits
    namespace clicintip_19_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_20 Register bits
    namespace clicintip_20_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_21 Register bits
    namespace clicintip_21_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_22 Register bits
    namespace clicintip_22_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_23 Register bits
    namespace clicintip_23_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_24 Register bits
    namespace clicintip_24_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_25 Register bits
    namespace clicintip_25_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_26 Register bits
    namespace clicintip_26_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_27 Register bits
    namespace clicintip_27_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_28 Register bits
    namespace clicintip_28_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_29 Register bits
    namespace clicintip_29_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_30 Register bits
    namespace clicintip_30_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_31 Register bits
    namespace clicintip_31_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_32 Register bits
    namespace clicintip_32_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_33 Register bits
    namespace clicintip_33_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_34 Register bits
    namespace clicintip_34_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_35 Register bits
    namespace clicintip_35_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_36 Register bits
    namespace clicintip_36_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_37 Register bits
    namespace clicintip_37_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_38 Register bits
    namespace clicintip_38_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_39 Register bits
    namespace clicintip_39_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_40 Register bits
    namespace clicintip_40_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_41 Register bits
    namespace clicintip_41_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_42 Register bits
    namespace clicintip_42_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_43 Register bits
    namespace clicintip_43_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_44 Register bits
    namespace clicintip_44_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_45 Register bits
    namespace clicintip_45_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_46 Register bits
    namespace clicintip_46_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_47 Register bits
    namespace clicintip_47_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_48 Register bits
    namespace clicintip_48_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_49 Register bits
    namespace clicintip_49_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_50 Register bits
    namespace clicintip_50_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_51 Register bits
    namespace clicintip_51_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_52 Register bits
    namespace clicintip_52_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_53 Register bits
    namespace clicintip_53_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_54 Register bits
    namespace clicintip_54_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_55 Register bits
    namespace clicintip_55_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_56 Register bits
    namespace clicintip_56_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_57 Register bits
    namespace clicintip_57_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_58 Register bits
    namespace clicintip_58_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_59 Register bits
    namespace clicintip_59_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_60 Register bits
    namespace clicintip_60_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_61 Register bits
    namespace clicintip_61_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_62 Register bits
    namespace clicintip_62_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_63 Register bits
    namespace clicintip_63_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_64 Register bits
    namespace clicintip_64_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_65 Register bits
    namespace clicintip_65_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_66 Register bits
    namespace clicintip_66_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_67 Register bits
    namespace clicintip_67_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_68 Register bits
    namespace clicintip_68_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_69 Register bits
    namespace clicintip_69_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_70 Register bits
    namespace clicintip_70_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_71 Register bits
    namespace clicintip_71_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_72 Register bits
    namespace clicintip_72_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_73 Register bits
    namespace clicintip_73_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_74 Register bits
    namespace clicintip_74_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_75 Register bits
    namespace clicintip_75_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_76 Register bits
    namespace clicintip_76_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_77 Register bits
    namespace clicintip_77_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_78 Register bits
    namespace clicintip_78_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_79 Register bits
    namespace clicintip_79_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_80 Register bits
    namespace clicintip_80_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_81 Register bits
    namespace clicintip_81_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_82 Register bits
    namespace clicintip_82_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_83 Register bits
    namespace clicintip_83_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_84 Register bits
    namespace clicintip_84_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_85 Register bits
    namespace clicintip_85_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIP_86 Register bits
    namespace clicintip_86_bits {
        constexpr uint32_t IP = (1U << 0);  ///< IP
    }

    /// CLICINTIE_0 Register bits
    namespace clicintie_0_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_1 Register bits
    namespace clicintie_1_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_2 Register bits
    namespace clicintie_2_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_3 Register bits
    namespace clicintie_3_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_4 Register bits
    namespace clicintie_4_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_5 Register bits
    namespace clicintie_5_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_6 Register bits
    namespace clicintie_6_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_7 Register bits
    namespace clicintie_7_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_8 Register bits
    namespace clicintie_8_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_9 Register bits
    namespace clicintie_9_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_10 Register bits
    namespace clicintie_10_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_11 Register bits
    namespace clicintie_11_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_12 Register bits
    namespace clicintie_12_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_13 Register bits
    namespace clicintie_13_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_14 Register bits
    namespace clicintie_14_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_15 Register bits
    namespace clicintie_15_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_16 Register bits
    namespace clicintie_16_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_17 Register bits
    namespace clicintie_17_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_18 Register bits
    namespace clicintie_18_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_19 Register bits
    namespace clicintie_19_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_20 Register bits
    namespace clicintie_20_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_21 Register bits
    namespace clicintie_21_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_22 Register bits
    namespace clicintie_22_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_23 Register bits
    namespace clicintie_23_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_24 Register bits
    namespace clicintie_24_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_25 Register bits
    namespace clicintie_25_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_26 Register bits
    namespace clicintie_26_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_27 Register bits
    namespace clicintie_27_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_28 Register bits
    namespace clicintie_28_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_29 Register bits
    namespace clicintie_29_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_30 Register bits
    namespace clicintie_30_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_31 Register bits
    namespace clicintie_31_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_32 Register bits
    namespace clicintie_32_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_33 Register bits
    namespace clicintie_33_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_34 Register bits
    namespace clicintie_34_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_35 Register bits
    namespace clicintie_35_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_36 Register bits
    namespace clicintie_36_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_37 Register bits
    namespace clicintie_37_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_38 Register bits
    namespace clicintie_38_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_39 Register bits
    namespace clicintie_39_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_40 Register bits
    namespace clicintie_40_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_41 Register bits
    namespace clicintie_41_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_42 Register bits
    namespace clicintie_42_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_43 Register bits
    namespace clicintie_43_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_44 Register bits
    namespace clicintie_44_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_45 Register bits
    namespace clicintie_45_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_46 Register bits
    namespace clicintie_46_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_47 Register bits
    namespace clicintie_47_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_48 Register bits
    namespace clicintie_48_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_49 Register bits
    namespace clicintie_49_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_50 Register bits
    namespace clicintie_50_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_51 Register bits
    namespace clicintie_51_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_52 Register bits
    namespace clicintie_52_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_53 Register bits
    namespace clicintie_53_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_54 Register bits
    namespace clicintie_54_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_55 Register bits
    namespace clicintie_55_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_56 Register bits
    namespace clicintie_56_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_57 Register bits
    namespace clicintie_57_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_58 Register bits
    namespace clicintie_58_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_59 Register bits
    namespace clicintie_59_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_60 Register bits
    namespace clicintie_60_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_61 Register bits
    namespace clicintie_61_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_62 Register bits
    namespace clicintie_62_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_63 Register bits
    namespace clicintie_63_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_64 Register bits
    namespace clicintie_64_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_65 Register bits
    namespace clicintie_65_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_66 Register bits
    namespace clicintie_66_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_67 Register bits
    namespace clicintie_67_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_68 Register bits
    namespace clicintie_68_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_69 Register bits
    namespace clicintie_69_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_70 Register bits
    namespace clicintie_70_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_71 Register bits
    namespace clicintie_71_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_72 Register bits
    namespace clicintie_72_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_73 Register bits
    namespace clicintie_73_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_74 Register bits
    namespace clicintie_74_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_75 Register bits
    namespace clicintie_75_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_76 Register bits
    namespace clicintie_76_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_77 Register bits
    namespace clicintie_77_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_78 Register bits
    namespace clicintie_78_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_79 Register bits
    namespace clicintie_79_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_80 Register bits
    namespace clicintie_80_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_81 Register bits
    namespace clicintie_81_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_82 Register bits
    namespace clicintie_82_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_83 Register bits
    namespace clicintie_83_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_84 Register bits
    namespace clicintie_84_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_85 Register bits
    namespace clicintie_85_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTIE_86 Register bits
    namespace clicintie_86_bits {
        constexpr uint32_t IE = (1U << 0);  ///< IE
    }

    /// CLICINTATTR_0 Register bits
    namespace clicintattr_0_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_1 Register bits
    namespace clicintattr_1_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_2 Register bits
    namespace clicintattr_2_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_3 Register bits
    namespace clicintattr_3_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_4 Register bits
    namespace clicintattr_4_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_5 Register bits
    namespace clicintattr_5_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_6 Register bits
    namespace clicintattr_6_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_7 Register bits
    namespace clicintattr_7_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_8 Register bits
    namespace clicintattr_8_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_9 Register bits
    namespace clicintattr_9_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_10 Register bits
    namespace clicintattr_10_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_11 Register bits
    namespace clicintattr_11_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_12 Register bits
    namespace clicintattr_12_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_13 Register bits
    namespace clicintattr_13_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_14 Register bits
    namespace clicintattr_14_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_15 Register bits
    namespace clicintattr_15_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_16 Register bits
    namespace clicintattr_16_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_17 Register bits
    namespace clicintattr_17_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_18 Register bits
    namespace clicintattr_18_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_19 Register bits
    namespace clicintattr_19_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_20 Register bits
    namespace clicintattr_20_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_21 Register bits
    namespace clicintattr_21_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_22 Register bits
    namespace clicintattr_22_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_23 Register bits
    namespace clicintattr_23_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_24 Register bits
    namespace clicintattr_24_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_25 Register bits
    namespace clicintattr_25_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_26 Register bits
    namespace clicintattr_26_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_27 Register bits
    namespace clicintattr_27_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_28 Register bits
    namespace clicintattr_28_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_29 Register bits
    namespace clicintattr_29_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_30 Register bits
    namespace clicintattr_30_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_31 Register bits
    namespace clicintattr_31_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_32 Register bits
    namespace clicintattr_32_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_33 Register bits
    namespace clicintattr_33_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_34 Register bits
    namespace clicintattr_34_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_35 Register bits
    namespace clicintattr_35_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_36 Register bits
    namespace clicintattr_36_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_37 Register bits
    namespace clicintattr_37_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_38 Register bits
    namespace clicintattr_38_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_39 Register bits
    namespace clicintattr_39_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_40 Register bits
    namespace clicintattr_40_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_41 Register bits
    namespace clicintattr_41_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_42 Register bits
    namespace clicintattr_42_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_43 Register bits
    namespace clicintattr_43_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_44 Register bits
    namespace clicintattr_44_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_45 Register bits
    namespace clicintattr_45_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_46 Register bits
    namespace clicintattr_46_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_47 Register bits
    namespace clicintattr_47_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_48 Register bits
    namespace clicintattr_48_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_49 Register bits
    namespace clicintattr_49_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_50 Register bits
    namespace clicintattr_50_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_51 Register bits
    namespace clicintattr_51_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_52 Register bits
    namespace clicintattr_52_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_53 Register bits
    namespace clicintattr_53_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_54 Register bits
    namespace clicintattr_54_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_55 Register bits
    namespace clicintattr_55_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_56 Register bits
    namespace clicintattr_56_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_57 Register bits
    namespace clicintattr_57_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_58 Register bits
    namespace clicintattr_58_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_59 Register bits
    namespace clicintattr_59_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_60 Register bits
    namespace clicintattr_60_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_61 Register bits
    namespace clicintattr_61_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_62 Register bits
    namespace clicintattr_62_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_63 Register bits
    namespace clicintattr_63_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_64 Register bits
    namespace clicintattr_64_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_65 Register bits
    namespace clicintattr_65_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_66 Register bits
    namespace clicintattr_66_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_67 Register bits
    namespace clicintattr_67_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_68 Register bits
    namespace clicintattr_68_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_69 Register bits
    namespace clicintattr_69_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_70 Register bits
    namespace clicintattr_70_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_71 Register bits
    namespace clicintattr_71_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_72 Register bits
    namespace clicintattr_72_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_73 Register bits
    namespace clicintattr_73_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_74 Register bits
    namespace clicintattr_74_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_75 Register bits
    namespace clicintattr_75_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_76 Register bits
    namespace clicintattr_76_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_77 Register bits
    namespace clicintattr_77_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_78 Register bits
    namespace clicintattr_78_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_79 Register bits
    namespace clicintattr_79_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_80 Register bits
    namespace clicintattr_80_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_81 Register bits
    namespace clicintattr_81_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_82 Register bits
    namespace clicintattr_82_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_83 Register bits
    namespace clicintattr_83_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_84 Register bits
    namespace clicintattr_84_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_85 Register bits
    namespace clicintattr_85_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTATTR_86 Register bits
    namespace clicintattr_86_bits {
        constexpr uint32_t SHV = (1U << 0);  ///< SHV
        constexpr uint32_t TRIG = (2 << 1);  ///< TRIG
    }

    /// CLICINTCTL_0 Register bits
    namespace clicintctl_0_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_1 Register bits
    namespace clicintctl_1_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_2 Register bits
    namespace clicintctl_2_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_3 Register bits
    namespace clicintctl_3_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_4 Register bits
    namespace clicintctl_4_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_5 Register bits
    namespace clicintctl_5_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_6 Register bits
    namespace clicintctl_6_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_7 Register bits
    namespace clicintctl_7_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_8 Register bits
    namespace clicintctl_8_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_9 Register bits
    namespace clicintctl_9_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_10 Register bits
    namespace clicintctl_10_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_11 Register bits
    namespace clicintctl_11_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_12 Register bits
    namespace clicintctl_12_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_13 Register bits
    namespace clicintctl_13_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_14 Register bits
    namespace clicintctl_14_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_15 Register bits
    namespace clicintctl_15_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_16 Register bits
    namespace clicintctl_16_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_17 Register bits
    namespace clicintctl_17_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_18 Register bits
    namespace clicintctl_18_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_19 Register bits
    namespace clicintctl_19_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_20 Register bits
    namespace clicintctl_20_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_21 Register bits
    namespace clicintctl_21_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_22 Register bits
    namespace clicintctl_22_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_23 Register bits
    namespace clicintctl_23_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_24 Register bits
    namespace clicintctl_24_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_25 Register bits
    namespace clicintctl_25_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_26 Register bits
    namespace clicintctl_26_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_27 Register bits
    namespace clicintctl_27_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_28 Register bits
    namespace clicintctl_28_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_29 Register bits
    namespace clicintctl_29_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_30 Register bits
    namespace clicintctl_30_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_31 Register bits
    namespace clicintctl_31_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_32 Register bits
    namespace clicintctl_32_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_33 Register bits
    namespace clicintctl_33_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_34 Register bits
    namespace clicintctl_34_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_35 Register bits
    namespace clicintctl_35_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_36 Register bits
    namespace clicintctl_36_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_37 Register bits
    namespace clicintctl_37_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_38 Register bits
    namespace clicintctl_38_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_39 Register bits
    namespace clicintctl_39_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_40 Register bits
    namespace clicintctl_40_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_41 Register bits
    namespace clicintctl_41_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_42 Register bits
    namespace clicintctl_42_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_43 Register bits
    namespace clicintctl_43_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_44 Register bits
    namespace clicintctl_44_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_45 Register bits
    namespace clicintctl_45_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_46 Register bits
    namespace clicintctl_46_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_47 Register bits
    namespace clicintctl_47_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_48 Register bits
    namespace clicintctl_48_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_49 Register bits
    namespace clicintctl_49_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_50 Register bits
    namespace clicintctl_50_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_51 Register bits
    namespace clicintctl_51_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_52 Register bits
    namespace clicintctl_52_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_53 Register bits
    namespace clicintctl_53_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_54 Register bits
    namespace clicintctl_54_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_55 Register bits
    namespace clicintctl_55_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_56 Register bits
    namespace clicintctl_56_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_57 Register bits
    namespace clicintctl_57_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_58 Register bits
    namespace clicintctl_58_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_59 Register bits
    namespace clicintctl_59_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_60 Register bits
    namespace clicintctl_60_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_61 Register bits
    namespace clicintctl_61_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_62 Register bits
    namespace clicintctl_62_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_63 Register bits
    namespace clicintctl_63_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_64 Register bits
    namespace clicintctl_64_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_65 Register bits
    namespace clicintctl_65_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_66 Register bits
    namespace clicintctl_66_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_67 Register bits
    namespace clicintctl_67_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_68 Register bits
    namespace clicintctl_68_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_69 Register bits
    namespace clicintctl_69_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_70 Register bits
    namespace clicintctl_70_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_71 Register bits
    namespace clicintctl_71_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_72 Register bits
    namespace clicintctl_72_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_73 Register bits
    namespace clicintctl_73_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_74 Register bits
    namespace clicintctl_74_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_75 Register bits
    namespace clicintctl_75_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_76 Register bits
    namespace clicintctl_76_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_77 Register bits
    namespace clicintctl_77_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_78 Register bits
    namespace clicintctl_78_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_79 Register bits
    namespace clicintctl_79_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_80 Register bits
    namespace clicintctl_80_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_81 Register bits
    namespace clicintctl_81_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_82 Register bits
    namespace clicintctl_82_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_83 Register bits
    namespace clicintctl_83_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_84 Register bits
    namespace clicintctl_84_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_85 Register bits
    namespace clicintctl_85_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

    /// CLICINTCTL_86 Register bits
    namespace clicintctl_86_bits {
        constexpr uint32_t LEVEL_PRIORITY = (8 << 0);  ///< LEVEL_PRIORITY
    }

}

// ============================================================================
// PMU Peripheral
// ============================================================================

namespace pmu {
    /// Base addresses
    constexpr uint32_t PMU_BASE = 0x40007000;

    /// PMU Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - power control register
        volatile uint32_t CS;  ///< Offset: 0x04 - power control/status register
    };

    /// Peripheral instances
    inline Registers* PMU = reinterpret_cast<Registers*>(PMU_BASE);

    // Bit definitions
    /// CTL Register bits
    namespace ctl_bits {
        constexpr uint32_t BKPWEN = (1U << 8);  ///< Backup Domain Write Enable
        constexpr uint32_t LVDT = (3 << 5);  ///< Low Voltage Detector Threshold
        constexpr uint32_t LVDEN = (1U << 4);  ///< Low Voltage Detector Enable
        constexpr uint32_t STBRST = (1U << 3);  ///< Standby Flag Reset
        constexpr uint32_t WURST = (1U << 2);  ///< Wakeup Flag Reset
        constexpr uint32_t STBMOD = (1U << 1);  ///< Standby Mode
        constexpr uint32_t LDOLP = (1U << 0);  ///< LDO Low Power Mode
    }

    /// CS Register bits
    namespace cs_bits {
        constexpr uint32_t WUPEN = (1U << 8);  ///< Enable WKUP pin
        constexpr uint32_t LVDF = (1U << 2);  ///< Low Voltage Detector Status Flag
        constexpr uint32_t STBF = (1U << 1);  ///< Standby flag
        constexpr uint32_t WUF = (1U << 0);  ///< Wakeup flag
    }

}

// ============================================================================
// RCU Peripheral
// ============================================================================

namespace rcu {
    /// Base addresses
    constexpr uint32_t RCU_BASE = 0x40021000;

    /// RCU Register structure
    struct Registers {
        volatile uint32_t CTL;  ///< Offset: 0x00 - Control register
        volatile uint32_t CFG0;  ///< Offset: 0x04 - Clock configuration register 0 (RCU_CFG0)
        volatile uint32_t INT;  ///< Offset: 0x08 - Clock interrupt register (RCU_INT)
        volatile uint32_t APB2RST;  ///< Offset: 0x0C - APB2 reset register (RCU_APB2RST)
        volatile uint32_t APB1RST;  ///< Offset: 0x10 - APB1 reset register (RCU_APB1RST)
        volatile uint32_t AHBEN;  ///< Offset: 0x14 - AHB enable register
        volatile uint32_t APB2EN;  ///< Offset: 0x18 - APB2 clock enable register (RCU_APB2EN)
        volatile uint32_t APB1EN;  ///< Offset: 0x1C - APB1 clock enable register (RCU_APB1EN)
        volatile uint32_t BDCTL;  ///< Offset: 0x20 - Backup domain control register (RCU_BDCTL)
        volatile uint32_t RSTSCK;  ///< Offset: 0x24 - Reset source /clock register (RCU_RSTSCK)
        volatile uint32_t AHBRST;  ///< Offset: 0x28 - AHB reset register
        volatile uint32_t CFG1;  ///< Offset: 0x2C - Clock Configuration register 1
        volatile uint32_t DSV;  ///< Offset: 0x34 - Deep sleep mode Voltage register
    };

    /// Peripheral instances
    inline Registers* RCU = reinterpret_cast<Registers*>(RCU_BASE);

    // Bit definitions
    /// CTL Register bits
    namespace ctl_bits {
        constexpr uint32_t IRC8MEN = (1U << 0);  ///< Internal 8MHz RC oscillator Enable
        constexpr uint32_t IRC8MSTB = (1U << 1);  ///< IRC8M Internal 8MHz RC Oscillator stabilization Flag
        constexpr uint32_t IRC8MADJ = (5 << 3);  ///< Internal 8MHz RC Oscillator clock trim adjust value
        constexpr uint32_t IRC8MCALIB = (8 << 8);  ///< Internal 8MHz RC Oscillator calibration value register
        constexpr uint32_t HXTALEN = (1U << 16);  ///< External High Speed oscillator Enable
        constexpr uint32_t HXTALSTB = (1U << 17);  ///< External crystal oscillator (HXTAL) clock stabilization flag
        constexpr uint32_t HXTALBPS = (1U << 18);  ///< External crystal oscillator (HXTAL) clock bypass mode enable
        constexpr uint32_t CKMEN = (1U << 19);  ///< HXTAL Clock Monitor Enable
        constexpr uint32_t PLLEN = (1U << 24);  ///< PLL enable
        constexpr uint32_t PLLSTB = (1U << 25);  ///< PLL Clock Stabilization Flag
        constexpr uint32_t PLL1EN = (1U << 26);  ///< PLL1 enable
        constexpr uint32_t PLL1STB = (1U << 27);  ///< PLL1 Clock Stabilization Flag
        constexpr uint32_t PLL2EN = (1U << 28);  ///< PLL2 enable
        constexpr uint32_t PLL2STB = (1U << 29);  ///< PLL2 Clock Stabilization Flag
    }

    /// CFG0 Register bits
    namespace cfg0_bits {
        constexpr uint32_t SCS = (2 << 0);  ///< System clock switch
        constexpr uint32_t SCSS = (2 << 2);  ///< System clock switch status
        constexpr uint32_t AHBPSC = (4 << 4);  ///< AHB prescaler selection
        constexpr uint32_t APB1PSC = (3 << 8);  ///< APB1 prescaler selection
        constexpr uint32_t APB2PSC = (3 << 11);  ///< APB2 prescaler selection
        constexpr uint32_t ADCPSC_1_0 = (2 << 14);  ///< ADC clock prescaler selection
        constexpr uint32_t PLLSEL = (1U << 16);  ///< PLL Clock Source Selection
        constexpr uint32_t PREDV0_LSB = (1U << 17);  ///< The LSB of PREDV0 division factor
        constexpr uint32_t PLLMF_3_0 = (4 << 18);  ///< The PLL clock multiplication factor
        constexpr uint32_t USBFSPSC = (2 << 22);  ///< USBFS clock prescaler selection
        constexpr uint32_t CKOUT0SEL = (4 << 24);  ///< CKOUT0 Clock Source Selection
        constexpr uint32_t ADCPSC_2 = (1U << 28);  ///< Bit 2 of ADCPSC
        constexpr uint32_t PLLMF_4 = (1U << 29);  ///< Bit 4 of PLLMF
    }

    /// INT Register bits
    namespace int_bits {
        constexpr uint32_t IRC40KSTBIF = (1U << 0);  ///< IRC40K stabilization interrupt flag
        constexpr uint32_t LXTALSTBIF = (1U << 1);  ///< LXTAL stabilization interrupt flag
        constexpr uint32_t IRC8MSTBIF = (1U << 2);  ///< IRC8M stabilization interrupt flag
        constexpr uint32_t HXTALSTBIF = (1U << 3);  ///< HXTAL stabilization interrupt flag
        constexpr uint32_t PLLSTBIF = (1U << 4);  ///< PLL stabilization interrupt flag
        constexpr uint32_t PLL1STBIF = (1U << 5);  ///< PLL1 stabilization interrupt flag
        constexpr uint32_t PLL2STBIF = (1U << 6);  ///< PLL2 stabilization interrupt flag
        constexpr uint32_t CKMIF = (1U << 7);  ///< HXTAL Clock Stuck Interrupt Flag
        constexpr uint32_t IRC40KSTBIE = (1U << 8);  ///< IRC40K Stabilization interrupt enable
        constexpr uint32_t LXTALSTBIE = (1U << 9);  ///< LXTAL Stabilization Interrupt Enable
        constexpr uint32_t IRC8MSTBIE = (1U << 10);  ///< IRC8M Stabilization Interrupt Enable
        constexpr uint32_t HXTALSTBIE = (1U << 11);  ///< HXTAL Stabilization Interrupt Enable
        constexpr uint32_t PLLSTBIE = (1U << 12);  ///< PLL Stabilization Interrupt Enable
        constexpr uint32_t PLL1STBIE = (1U << 13);  ///< PLL1 Stabilization Interrupt Enable
        constexpr uint32_t PLL2STBIE = (1U << 14);  ///< PLL2 Stabilization Interrupt Enable
        constexpr uint32_t IRC40KSTBIC = (1U << 16);  ///< IRC40K Stabilization Interrupt Clear
        constexpr uint32_t LXTALSTBIC = (1U << 17);  ///< LXTAL Stabilization Interrupt Clear
        constexpr uint32_t IRC8MSTBIC = (1U << 18);  ///< IRC8M Stabilization Interrupt Clear
        constexpr uint32_t HXTALSTBIC = (1U << 19);  ///< HXTAL Stabilization Interrupt Clear
        constexpr uint32_t PLLSTBIC = (1U << 20);  ///< PLL stabilization Interrupt Clear
        constexpr uint32_t PLL1STBIC = (1U << 21);  ///< PLL1 stabilization Interrupt Clear
        constexpr uint32_t PLL2STBIC = (1U << 22);  ///< PLL2 stabilization Interrupt Clear
        constexpr uint32_t CKMIC = (1U << 23);  ///< HXTAL Clock Stuck Interrupt Clear
    }

    /// APB2RST Register bits
    namespace apb2rst_bits {
        constexpr uint32_t AFRST = (1U << 0);  ///< Alternate function I/O reset
        constexpr uint32_t PARST = (1U << 2);  ///< GPIO port A reset
        constexpr uint32_t PBRST = (1U << 3);  ///< GPIO port B reset
        constexpr uint32_t PCRST = (1U << 4);  ///< GPIO port C reset
        constexpr uint32_t PDRST = (1U << 5);  ///< GPIO port D reset
        constexpr uint32_t PERST = (1U << 6);  ///< GPIO port E reset
        constexpr uint32_t ADC0RST = (1U << 9);  ///< ADC0 reset
        constexpr uint32_t ADC1RST = (1U << 10);  ///< ADC1 reset
        constexpr uint32_t TIMER0RST = (1U << 11);  ///< Timer 0 reset
        constexpr uint32_t SPI0RST = (1U << 12);  ///< SPI0 reset
        constexpr uint32_t USART0RST = (1U << 14);  ///< USART0 Reset
    }

    /// APB1RST Register bits
    namespace apb1rst_bits {
        constexpr uint32_t TIMER1RST = (1U << 0);  ///< TIMER1 timer reset
        constexpr uint32_t TIMER2RST = (1U << 1);  ///< TIMER2 timer reset
        constexpr uint32_t TIMER3RST = (1U << 2);  ///< TIMER3 timer reset
        constexpr uint32_t TIMER4RST = (1U << 3);  ///< TIMER4 timer reset
        constexpr uint32_t TIMER5RST = (1U << 4);  ///< TIMER5 timer reset
        constexpr uint32_t TIMER6RST = (1U << 5);  ///< TIMER6 timer reset
        constexpr uint32_t WWDGTRST = (1U << 11);  ///< Window watchdog timer reset
        constexpr uint32_t SPI1RST = (1U << 14);  ///< SPI1 reset
        constexpr uint32_t SPI2RST = (1U << 15);  ///< SPI2 reset
        constexpr uint32_t USART1RST = (1U << 17);  ///< USART1 reset
        constexpr uint32_t USART2RST = (1U << 18);  ///< USART2 reset
        constexpr uint32_t UART3RST = (1U << 19);  ///< UART3 reset
        constexpr uint32_t UART4RST = (1U << 20);  ///< UART4 reset
        constexpr uint32_t I2C0RST = (1U << 21);  ///< I2C0 reset
        constexpr uint32_t I2C1RST = (1U << 22);  ///< I2C1 reset
        constexpr uint32_t CAN0RST = (1U << 25);  ///< CAN0 reset
        constexpr uint32_t CAN1RST = (1U << 26);  ///< CAN1 reset
        constexpr uint32_t BKPIRST = (1U << 27);  ///< Backup interface reset
        constexpr uint32_t PMURST = (1U << 28);  ///< Power control reset
        constexpr uint32_t DACRST = (1U << 29);  ///< DAC reset
    }

    /// AHBEN Register bits
    namespace ahben_bits {
        constexpr uint32_t DMA0EN = (1U << 0);  ///< DMA0 clock enable
        constexpr uint32_t DMA1EN = (1U << 1);  ///< DMA1 clock enable
        constexpr uint32_t SRAMSPEN = (1U << 2);  ///< SRAM interface clock enable when sleep mode
        constexpr uint32_t FMCSPEN = (1U << 4);  ///< FMC clock enable when sleep mode
        constexpr uint32_t CRCEN = (1U << 6);  ///< CRC clock enable
        constexpr uint32_t EXMCEN = (1U << 8);  ///< EXMC clock enable
        constexpr uint32_t USBFSEN = (1U << 12);  ///< USBFS clock enable
    }

    /// APB2EN Register bits
    namespace apb2en_bits {
        constexpr uint32_t AFEN = (1U << 0);  ///< Alternate function IO clock enable
        constexpr uint32_t PAEN = (1U << 2);  ///< GPIO port A clock enable
        constexpr uint32_t PBEN = (1U << 3);  ///< GPIO port B clock enable
        constexpr uint32_t PCEN = (1U << 4);  ///< GPIO port C clock enable
        constexpr uint32_t PDEN = (1U << 5);  ///< GPIO port D clock enable
        constexpr uint32_t PEEN = (1U << 6);  ///< GPIO port E clock enable
        constexpr uint32_t ADC0EN = (1U << 9);  ///< ADC0 clock enable
        constexpr uint32_t ADC1EN = (1U << 10);  ///< ADC1 clock enable
        constexpr uint32_t TIMER0EN = (1U << 11);  ///< TIMER0 clock enable
        constexpr uint32_t SPI0EN = (1U << 12);  ///< SPI0 clock enable
        constexpr uint32_t USART0EN = (1U << 14);  ///< USART0 clock enable
    }

    /// APB1EN Register bits
    namespace apb1en_bits {
        constexpr uint32_t TIMER1EN = (1U << 0);  ///< TIMER1 timer clock enable
        constexpr uint32_t TIMER2EN = (1U << 1);  ///< TIMER2 timer clock enable
        constexpr uint32_t TIMER3EN = (1U << 2);  ///< TIMER3 timer clock enable
        constexpr uint32_t TIMER4EN = (1U << 3);  ///< TIMER4 timer clock enable
        constexpr uint32_t TIMER5EN = (1U << 4);  ///< TIMER5 timer clock enable
        constexpr uint32_t TIMER6EN = (1U << 5);  ///< TIMER6 timer clock enable
        constexpr uint32_t WWDGTEN = (1U << 11);  ///< Window watchdog timer clock enable
        constexpr uint32_t SPI1EN = (1U << 14);  ///< SPI1 clock enable
        constexpr uint32_t SPI2EN = (1U << 15);  ///< SPI2 clock enable
        constexpr uint32_t USART1EN = (1U << 17);  ///< USART1 clock enable
        constexpr uint32_t USART2EN = (1U << 18);  ///< USART2 clock enable
        constexpr uint32_t UART3EN = (1U << 19);  ///< UART3 clock enable
        constexpr uint32_t UART4EN = (1U << 20);  ///< UART4 clock enable
        constexpr uint32_t I2C0EN = (1U << 21);  ///< I2C0 clock enable
        constexpr uint32_t I2C1EN = (1U << 22);  ///< I2C1 clock enable
        constexpr uint32_t CAN0EN = (1U << 25);  ///< CAN0 clock enable
        constexpr uint32_t CAN1EN = (1U << 26);  ///< CAN1 clock enable
        constexpr uint32_t BKPIEN = (1U << 27);  ///< Backup interface clock enable
        constexpr uint32_t PMUEN = (1U << 28);  ///< Power control clock enable
        constexpr uint32_t DACEN = (1U << 29);  ///< DAC clock enable
    }

    /// BDCTL Register bits
    namespace bdctl_bits {
        constexpr uint32_t LXTALEN = (1U << 0);  ///< LXTAL enable
        constexpr uint32_t LXTALSTB = (1U << 1);  ///< External low-speed oscillator stabilization
        constexpr uint32_t LXTALBPS = (1U << 2);  ///< LXTAL bypass mode enable
        constexpr uint32_t RTCSRC = (2 << 8);  ///< RTC clock entry selection
        constexpr uint32_t RTCEN = (1U << 15);  ///< RTC clock enable
        constexpr uint32_t BKPRST = (1U << 16);  ///< Backup domain reset
    }

    /// RSTSCK Register bits
    namespace rstsck_bits {
        constexpr uint32_t IRC40KEN = (1U << 0);  ///< IRC40K enable
        constexpr uint32_t IRC40KSTB = (1U << 1);  ///< IRC40K stabilization
        constexpr uint32_t RSTFC = (1U << 24);  ///< Reset flag clear
        constexpr uint32_t EPRSTF = (1U << 26);  ///< External PIN reset flag
        constexpr uint32_t PORRSTF = (1U << 27);  ///< Power reset flag
        constexpr uint32_t SWRSTF = (1U << 28);  ///< Software reset flag
        constexpr uint32_t FWDGTRSTF = (1U << 29);  ///< Free Watchdog timer reset flag
        constexpr uint32_t WWDGTRSTF = (1U << 30);  ///< Window watchdog timer reset flag
        constexpr uint32_t LPRSTF = (1U << 31);  ///< Low-power reset flag
    }

    /// AHBRST Register bits
    namespace ahbrst_bits {
        constexpr uint32_t USBFSRST = (1U << 12);  ///< USBFS reset
    }

    /// CFG1 Register bits
    namespace cfg1_bits {
        constexpr uint32_t PREDV0 = (4 << 0);  ///< PREDV0 division factor
        constexpr uint32_t PREDV1 = (4 << 4);  ///< PREDV1 division factor
        constexpr uint32_t PLL1MF = (4 << 8);  ///< The PLL1 clock multiplication factor
        constexpr uint32_t PLL2MF = (4 << 12);  ///< The PLL2 clock multiplication factor
        constexpr uint32_t PREDV0SEL = (1U << 16);  ///< PREDV0 input Clock Source Selection
        constexpr uint32_t I2S1SEL = (1U << 17);  ///< I2S1 Clock Source Selection
        constexpr uint32_t I2S2SEL = (1U << 18);  ///< I2S2 Clock Source Selection
    }

    /// DSV Register bits
    namespace dsv_bits {
        constexpr uint32_t DSLPVS = (2 << 0);  ///< Deep-sleep mode voltage select
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x40002800;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t INTEN;  ///< Offset: 0x00 - RTC interrupt enable register
        volatile uint32_t CTL;  ///< Offset: 0x04 - control register
        volatile uint32_t PSCH;  ///< Offset: 0x08 - RTC prescaler high register
        volatile uint32_t PSCL;  ///< Offset: 0x0C - RTC prescaler low register
        volatile uint32_t DIVH;  ///< Offset: 0x10 - RTC divider high register
        volatile uint32_t DIVL;  ///< Offset: 0x14 - RTC divider low register
        volatile uint32_t CNTH;  ///< Offset: 0x18 - RTC counter high register
        volatile uint32_t CNTL;  ///< Offset: 0x1C - RTC counter low register
        volatile uint32_t ALRMH;  ///< Offset: 0x20 - Alarm high register
        volatile uint32_t ALRML;  ///< Offset: 0x24 - RTC alarm low register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// INTEN Register bits
    namespace inten_bits {
        constexpr uint32_t OVIE = (1U << 2);  ///< Overflow interrupt enable
        constexpr uint32_t ALRMIE = (1U << 1);  ///< Alarm interrupt enable
        constexpr uint32_t SCIE = (1U << 0);  ///< Second interrupt
    }

    /// CTL Register bits
    namespace ctl_bits {
        constexpr uint32_t LWOFF = (1U << 5);  ///< Last write operation finished flag
        constexpr uint32_t CMF = (1U << 4);  ///< Configuration mode flag
        constexpr uint32_t RSYNF = (1U << 3);  ///< Registers synchronized flag
        constexpr uint32_t OVIF = (1U << 2);  ///< Overflow interrupt flag
        constexpr uint32_t ALRMIF = (1U << 1);  ///< Alarm interrupt flag
        constexpr uint32_t SCIF = (1U << 0);  ///< Sencond interrupt flag
    }

    /// PSCH Register bits
    namespace psch_bits {
        constexpr uint32_t PSC = (4 << 0);  ///< RTC prescaler value high
    }

    /// PSCL Register bits
    namespace pscl_bits {
        constexpr uint32_t PSC = (16 << 0);  ///< RTC prescaler value low
    }

    /// DIVH Register bits
    namespace divh_bits {
        constexpr uint32_t DIV = (4 << 0);  ///< RTC divider value high
    }

    /// DIVL Register bits
    namespace divl_bits {
        constexpr uint32_t DIV = (16 << 0);  ///< RTC divider value low
    }

    /// CNTH Register bits
    namespace cnth_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< RTC counter value high
    }

    /// CNTL Register bits
    namespace cntl_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< RTC counter value low
    }

    /// ALRMH Register bits
    namespace alrmh_bits {
        constexpr uint32_t ALRM = (16 << 0);  ///< Alarm value high
    }

    /// ALRML Register bits
    namespace alrml_bits {
        constexpr uint32_t ALRM = (16 << 0);  ///< alarm value low
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI0_BASE = 0x40013000;
    constexpr uint32_t SPI1_BASE = 0x40003800;
    constexpr uint32_t SPI2_BASE = 0x40003C00;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CTL0;  ///< Offset: 0x00 - control register 0
        volatile uint32_t CTL1;  ///< Offset: 0x04 - control register 1
        volatile uint32_t STAT;  ///< Offset: 0x08 - status register
        volatile uint32_t DATA;  ///< Offset: 0x0C - data register
        volatile uint32_t CRCPOLY;  ///< Offset: 0x10 - CRC polynomial register
        volatile uint32_t RCRC;  ///< Offset: 0x14 - RX CRC register
        volatile uint32_t TCRC;  ///< Offset: 0x18 - TX CRC register
        volatile uint32_t I2SCTL;  ///< Offset: 0x1C - I2S control register
        volatile uint32_t I2SPSC;  ///< Offset: 0x20 - I2S prescaler register
    };

    /// Peripheral instances
    inline Registers* SPI0 = reinterpret_cast<Registers*>(SPI0_BASE);
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);
    inline Registers* SPI2 = reinterpret_cast<Registers*>(SPI2_BASE);

    // Bit definitions
    /// CTL0 Register bits
    namespace ctl0_bits {
        constexpr uint32_t BDEN = (1U << 15);  ///< Bidirectional enable
        constexpr uint32_t BDOEN = (1U << 14);  ///< Bidirectional Transmit output enable
        constexpr uint32_t CRCEN = (1U << 13);  ///< CRC Calculation Enable
        constexpr uint32_t CRCNT = (1U << 12);  ///< CRC Next Transfer
        constexpr uint32_t FF16 = (1U << 11);  ///< Data frame format
        constexpr uint32_t RO = (1U << 10);  ///< Receive only
        constexpr uint32_t SWNSSEN = (1U << 9);  ///< NSS Software Mode Selection
        constexpr uint32_t SWNSS = (1U << 8);  ///< NSS Pin Selection In NSS Software Mode
        constexpr uint32_t LF = (1U << 7);  ///< LSB First Mode
        constexpr uint32_t SPIEN = (1U << 6);  ///< SPI enable
        constexpr uint32_t PSC = (3 << 3);  ///< Master Clock Prescaler Selection
        constexpr uint32_t MSTMOD = (1U << 2);  ///< Master Mode Enable
        constexpr uint32_t CKPL = (1U << 1);  ///< Clock polarity Selection
        constexpr uint32_t CKPH = (1U << 0);  ///< Clock Phase Selection
    }

    /// CTL1 Register bits
    namespace ctl1_bits {
        constexpr uint32_t TBEIE = (1U << 7);  ///< Tx buffer empty interrupt enable
        constexpr uint32_t RBNEIE = (1U << 6);  ///< RX buffer not empty interrupt enable
        constexpr uint32_t ERRIE = (1U << 5);  ///< Error interrupt enable
        constexpr uint32_t TMOD = (1U << 4);  ///< SPI TI mode enable
        constexpr uint32_t NSSP = (1U << 3);  ///< SPI NSS pulse mode enable
        constexpr uint32_t NSSDRV = (1U << 2);  ///< Drive NSS Output
        constexpr uint32_t DMATEN = (1U << 1);  ///< Transmit Buffer DMA Enable
        constexpr uint32_t DMAREN = (1U << 0);  ///< Rx buffer DMA enable
    }

    /// STAT Register bits
    namespace stat_bits {
        constexpr uint32_t FERR = (1U << 8);  ///< Format error
        constexpr uint32_t TRANS = (1U << 7);  ///< Transmitting On-going Bit
        constexpr uint32_t RXORERR = (1U << 6);  ///< Reception Overrun Error Bit
        constexpr uint32_t CONFERR = (1U << 5);  ///< SPI Configuration error
        constexpr uint32_t CRCERR = (1U << 4);  ///< SPI CRC Error Bit
        constexpr uint32_t TXURERR = (1U << 3);  ///< Transmission underrun error bit
        constexpr uint32_t I2SCH = (1U << 2);  ///< I2S channel side
        constexpr uint32_t TBE = (1U << 1);  ///< Transmit Buffer Empty
        constexpr uint32_t RBNE = (1U << 0);  ///< Receive Buffer Not Empty
    }

    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t SPI_DATA = (16 << 0);  ///< Data transfer register
    }

    /// CRCPOLY Register bits
    namespace crcpoly_bits {
        constexpr uint32_t CRCPOLY = (16 << 0);  ///< CRC polynomial value
    }

    /// RCRC Register bits
    namespace rcrc_bits {
        constexpr uint32_t RCRC = (16 << 0);  ///< RX CRC value
    }

    /// TCRC Register bits
    namespace tcrc_bits {
        constexpr uint32_t TCRC = (16 << 0);  ///< Tx CRC value
    }

    /// I2SCTL Register bits
    namespace i2sctl_bits {
        constexpr uint32_t I2SSEL = (1U << 11);  ///< I2S mode selection
        constexpr uint32_t I2SEN = (1U << 10);  ///< I2S Enable
        constexpr uint32_t I2SOPMOD = (2 << 8);  ///< I2S operation mode
        constexpr uint32_t PCMSMOD = (1U << 7);  ///< PCM frame synchronization mode
        constexpr uint32_t I2SSTD = (2 << 4);  ///< I2S standard selection
        constexpr uint32_t CKPL = (1U << 3);  ///< Idle state clock polarity
        constexpr uint32_t DTLEN = (2 << 1);  ///< Data length
        constexpr uint32_t CHLEN = (1U << 0);  ///< Channel length (number of bits per audio channel)
    }

    /// I2SPSC Register bits
    namespace i2spsc_bits {
        constexpr uint32_t MCKOEN = (1U << 9);  ///< I2S_MCK output enable
        constexpr uint32_t OF = (1U << 8);  ///< Odd factor for the prescaler
        constexpr uint32_t DIV = (8 << 0);  ///< Dividing factor for the prescaler
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TIMER0_BASE = 0x40012C00;
    constexpr uint32_t TIMER1_BASE = 0x40000000;
    constexpr uint32_t TIMER2_BASE = 0x40000400;
    constexpr uint32_t TIMER3_BASE = 0x40000800;
    constexpr uint32_t TIMER4_BASE = 0x40000C00;
    constexpr uint32_t TIMER5_BASE = 0x40001000;
    constexpr uint32_t TIMER6_BASE = 0x40001400;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CTL0;  ///< Offset: 0x00 - control register 0
        volatile uint32_t CTL1;  ///< Offset: 0x04 - control register 1
        volatile uint32_t SMCFG;  ///< Offset: 0x08 - slave mode configuration register
        volatile uint32_t DMAINTEN;  ///< Offset: 0x0C - DMA/Interrupt enable register
        volatile uint32_t INTF;  ///< Offset: 0x10 - Interrupt flag register
        volatile uint32_t SWEVG;  ///< Offset: 0x14 - Software event generation register
        volatile uint32_t CHCTL0_Output;  ///< Offset: 0x18 - Channel control register 0 (output mode)
        volatile uint32_t CHCTL0_Input;  ///< Offset: 0x18 - Channel control register 0 (input mode)
        volatile uint32_t CHCTL1_Output;  ///< Offset: 0x1C - Channel control register 1 (output mode)
        volatile uint32_t CHCTL1_Input;  ///< Offset: 0x1C - Channel control register 1 (input mode)
        volatile uint32_t CHCTL2;  ///< Offset: 0x20 - Channel control register 2
        volatile uint32_t CNT;  ///< Offset: 0x24 - counter
        volatile uint32_t PSC;  ///< Offset: 0x28 - prescaler
        volatile uint32_t CAR;  ///< Offset: 0x2C - Counter auto reload register
        volatile uint32_t CREP;  ///< Offset: 0x30 - Counter repetition register
        volatile uint32_t CH0CV;  ///< Offset: 0x34 - Channel 0 capture/compare value register
        volatile uint32_t CH1CV;  ///< Offset: 0x38 - Channel 1 capture/compare value register
        volatile uint32_t CH2CV;  ///< Offset: 0x3C - Channel 2 capture/compare value register
        volatile uint32_t CH3CV;  ///< Offset: 0x40 - Channel 3 capture/compare value register
        volatile uint32_t CCHP;  ///< Offset: 0x44 - channel complementary protection register
        volatile uint32_t DMACFG;  ///< Offset: 0x48 - DMA configuration register
        volatile uint32_t DMATB;  ///< Offset: 0x4C - DMA transfer buffer register
    };

    /// Peripheral instances
    inline Registers* TIMER0 = reinterpret_cast<Registers*>(TIMER0_BASE);
    inline Registers* TIMER1 = reinterpret_cast<Registers*>(TIMER1_BASE);
    inline Registers* TIMER2 = reinterpret_cast<Registers*>(TIMER2_BASE);
    inline Registers* TIMER3 = reinterpret_cast<Registers*>(TIMER3_BASE);
    inline Registers* TIMER4 = reinterpret_cast<Registers*>(TIMER4_BASE);
    inline Registers* TIMER5 = reinterpret_cast<Registers*>(TIMER5_BASE);
    inline Registers* TIMER6 = reinterpret_cast<Registers*>(TIMER6_BASE);

    // Bit definitions
    /// CTL0 Register bits
    namespace ctl0_bits {
        constexpr uint32_t CKDIV = (2 << 8);  ///< Clock division
        constexpr uint32_t ARSE = (1U << 7);  ///< Auto-reload shadow enable
        constexpr uint32_t CAM = (2 << 5);  ///< Counter aligns mode selection
        constexpr uint32_t DIR = (1U << 4);  ///< Direction
        constexpr uint32_t SPM = (1U << 3);  ///< Single pulse mode
        constexpr uint32_t UPS = (1U << 2);  ///< Update source
        constexpr uint32_t UPDIS = (1U << 1);  ///< Update disable
        constexpr uint32_t CEN = (1U << 0);  ///< Counter enable
    }

    /// CTL1 Register bits
    namespace ctl1_bits {
        constexpr uint32_t ISO3 = (1U << 14);  ///< Idle state of channel 3 output
        constexpr uint32_t ISO2N = (1U << 13);  ///< Idle state of channel 2 complementary output
        constexpr uint32_t ISO2 = (1U << 12);  ///< Idle state of channel 2 output
        constexpr uint32_t ISO1N = (1U << 11);  ///< Idle state of channel 1 complementary output
        constexpr uint32_t ISO1 = (1U << 10);  ///< Idle state of channel 1 output
        constexpr uint32_t ISO0N = (1U << 9);  ///< Idle state of channel 0 complementary output
        constexpr uint32_t ISO0 = (1U << 8);  ///< Idle state of channel 0 output
        constexpr uint32_t TI0S = (1U << 7);  ///< Channel 0 trigger input selection
        constexpr uint32_t MMC = (3 << 4);  ///< Master mode control
        constexpr uint32_t DMAS = (1U << 3);  ///< DMA request source selection
        constexpr uint32_t CCUC = (1U << 2);  ///< Commutation control shadow register update control
        constexpr uint32_t CCSE = (1U << 0);  ///< Commutation control shadow enable
    }

    /// SMCFG Register bits
    namespace smcfg_bits {
        constexpr uint32_t ETP = (1U << 15);  ///< External trigger polarity
        constexpr uint32_t SMC1 = (1U << 14);  ///< Part of SMC for enable External clock mode1
        constexpr uint32_t ETPSC = (2 << 12);  ///< External trigger prescaler
        constexpr uint32_t ETFC = (4 << 8);  ///< External trigger filter control
        constexpr uint32_t MSM = (1U << 7);  ///< Master/Slave mode
        constexpr uint32_t TRGS = (3 << 4);  ///< Trigger selection
        constexpr uint32_t SMC = (3 << 0);  ///< Slave mode selection
    }

    /// DMAINTEN Register bits
    namespace dmainten_bits {
        constexpr uint32_t TRGDEN = (1U << 14);  ///< Trigger DMA request enable
        constexpr uint32_t CMTDEN = (1U << 13);  ///< Commutation DMA request enable
        constexpr uint32_t CH3DEN = (1U << 12);  ///< Channel 3 capture/compare DMA request enable
        constexpr uint32_t CH2DEN = (1U << 11);  ///< Channel 2 capture/compare DMA request enable
        constexpr uint32_t CH1DEN = (1U << 10);  ///< Channel 1 capture/compare DMA request enable
        constexpr uint32_t CH0DEN = (1U << 9);  ///< Channel 0 capture/compare DMA request enable
        constexpr uint32_t UPDEN = (1U << 8);  ///< Update DMA request enable
        constexpr uint32_t BRKIE = (1U << 7);  ///< Break interrupt enable
        constexpr uint32_t TRGIE = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t CMTIE = (1U << 5);  ///< commutation interrupt enable
        constexpr uint32_t CH3IE = (1U << 4);  ///< Channel 3 capture/compare interrupt enable
        constexpr uint32_t CH2IE = (1U << 3);  ///< Channel 2 capture/compare interrupt enable
        constexpr uint32_t CH1IE = (1U << 2);  ///< Channel 1 capture/compare interrupt enable
        constexpr uint32_t CH0IE = (1U << 1);  ///< Channel 0 capture/compare interrupt enable
        constexpr uint32_t UPIE = (1U << 0);  ///< Update interrupt enable
    }

    /// INTF Register bits
    namespace intf_bits {
        constexpr uint32_t CH3OF = (1U << 12);  ///< Channel 3 over capture flag
        constexpr uint32_t CH2OF = (1U << 11);  ///< Channel 2 over capture flag
        constexpr uint32_t CH1OF = (1U << 10);  ///< Channel 1 over capture flag
        constexpr uint32_t CH0OF = (1U << 9);  ///< Channel 0 over capture flag
        constexpr uint32_t BRKIF = (1U << 7);  ///< Break interrupt flag
        constexpr uint32_t TRGIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t CMTIF = (1U << 5);  ///< Channel commutation interrupt flag
        constexpr uint32_t CH3IF = (1U << 4);  ///< Channel 3 capture/compare interrupt flag
        constexpr uint32_t CH2IF = (1U << 3);  ///< Channel 2 capture/compare interrupt flag
        constexpr uint32_t CH1IF = (1U << 2);  ///< Channel 1 capture/compare interrupt flag
        constexpr uint32_t CH0IF = (1U << 1);  ///< Channel 0 capture/compare interrupt flag
        constexpr uint32_t UPIF = (1U << 0);  ///< Update interrupt flag
    }

    /// SWEVG Register bits
    namespace swevg_bits {
        constexpr uint32_t BRKG = (1U << 7);  ///< Break event generation
        constexpr uint32_t TRGG = (1U << 6);  ///< Trigger event generation
        constexpr uint32_t CMTG = (1U << 5);  ///< Channel commutation event generation
        constexpr uint32_t CH3G = (1U << 4);  ///< Channel 3 capture or compare event generation
        constexpr uint32_t CH2G = (1U << 3);  ///< Channel 2 capture or compare event generation
        constexpr uint32_t CH1G = (1U << 2);  ///< Channel 1 capture or compare event generation
        constexpr uint32_t CH0G = (1U << 1);  ///< Channel 0 capture or compare event generation
        constexpr uint32_t UPG = (1U << 0);  ///< Update event generation
    }

    /// CHCTL0_Output Register bits
    namespace chctl0_output_bits {
        constexpr uint32_t CH1COMCEN = (1U << 15);  ///< Channel 1 output compare clear enable
        constexpr uint32_t CH1COMCTL = (3 << 12);  ///< Channel 1 compare output control
        constexpr uint32_t CH1COMSEN = (1U << 11);  ///< Channel 1 output compare shadow enable
        constexpr uint32_t CH1COMFEN = (1U << 10);  ///< Channel 1 output compare fast enable
        constexpr uint32_t CH1MS = (2 << 8);  ///< Channel 1 mode selection
        constexpr uint32_t CH0COMCEN = (1U << 7);  ///< Channel 0 output compare clear enable
        constexpr uint32_t CH0COMCTL = (3 << 4);  ///< Channel 0 compare output control
        constexpr uint32_t CH0COMSEN = (1U << 3);  ///< Channel 0 compare output shadow enable
        constexpr uint32_t CH0COMFEN = (1U << 2);  ///< Channel 0 output compare fast enable
        constexpr uint32_t CH0MS = (2 << 0);  ///< Channel 0 I/O mode selection
    }

    /// CHCTL0_Input Register bits
    namespace chctl0_input_bits {
        constexpr uint32_t CH1CAPFLT = (4 << 12);  ///< Channel 1 input capture filter control
        constexpr uint32_t CH1CAPPSC = (2 << 10);  ///< Channel 1 input capture prescaler
        constexpr uint32_t CH1MS = (2 << 8);  ///< Channel 1 mode selection
        constexpr uint32_t CH0CAPFLT = (4 << 4);  ///< Channel 0 input capture filter control
        constexpr uint32_t CH0CAPPSC = (2 << 2);  ///< Channel 0 input capture prescaler
        constexpr uint32_t CH0MS = (2 << 0);  ///< Channel 0 mode selection
    }

    /// CHCTL1_Output Register bits
    namespace chctl1_output_bits {
        constexpr uint32_t CH3COMCEN = (1U << 15);  ///< Channel 3 output compare clear enable
        constexpr uint32_t CH3COMCTL = (3 << 12);  ///< Channel 3 compare output control
        constexpr uint32_t CH3COMSEN = (1U << 11);  ///< Channel 3 output compare shadow enable
        constexpr uint32_t CH3COMFEN = (1U << 10);  ///< Channel 3 output compare fast enable
        constexpr uint32_t CH3MS = (2 << 8);  ///< Channel 3 mode selection
        constexpr uint32_t CH2COMCEN = (1U << 7);  ///< Channel 2 output compare clear enable
        constexpr uint32_t CH2COMCTL = (3 << 4);  ///< Channel 2 compare output control
        constexpr uint32_t CH2COMSEN = (1U << 3);  ///< Channel 2 compare output shadow enable
        constexpr uint32_t CH2COMFEN = (1U << 2);  ///< Channel 2 output compare fast enable
        constexpr uint32_t CH2MS = (2 << 0);  ///< Channel 2 I/O mode selection
    }

    /// CHCTL1_Input Register bits
    namespace chctl1_input_bits {
        constexpr uint32_t CH3CAPFLT = (4 << 12);  ///< Channel 3 input capture filter control
        constexpr uint32_t CH3CAPPSC = (2 << 10);  ///< Channel 3 input capture prescaler
        constexpr uint32_t CH3MS = (2 << 8);  ///< Channel 3 mode selection
        constexpr uint32_t CH2CAPFLT = (4 << 4);  ///< Channel 2 input capture filter control
        constexpr uint32_t CH2CAPPSC = (2 << 2);  ///< Channel 2 input capture prescaler
        constexpr uint32_t CH2MS = (2 << 0);  ///< Channel 2 mode selection
    }

    /// CHCTL2 Register bits
    namespace chctl2_bits {
        constexpr uint32_t CH3P = (1U << 13);  ///< Channel 3 capture/compare function polarity
        constexpr uint32_t CH3EN = (1U << 12);  ///< Channel 3 capture/compare function enable
        constexpr uint32_t CH2NP = (1U << 11);  ///< Channel 2 complementary output polarity
        constexpr uint32_t CH2NEN = (1U << 10);  ///< Channel 2 complementary output enable
        constexpr uint32_t CH2P = (1U << 9);  ///< Channel 2 capture/compare function polarity
        constexpr uint32_t CH2EN = (1U << 8);  ///< Channel 2 capture/compare function enable
        constexpr uint32_t CH1NP = (1U << 7);  ///< Channel 1 complementary output polarity
        constexpr uint32_t CH1NEN = (1U << 6);  ///< Channel 1 complementary output enable
        constexpr uint32_t CH1P = (1U << 5);  ///< Channel 1 capture/compare function polarity
        constexpr uint32_t CH1EN = (1U << 4);  ///< Channel 1 capture/compare function enable
        constexpr uint32_t CH0NP = (1U << 3);  ///< Channel 0 complementary output polarity
        constexpr uint32_t CH0NEN = (1U << 2);  ///< Channel 0 complementary output enable
        constexpr uint32_t CH0P = (1U << 1);  ///< Channel 0 capture/compare function polarity
        constexpr uint32_t CH0EN = (1U << 0);  ///< Channel 0 capture/compare function enable
    }

    /// CNT Register bits
    namespace cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< current counter value
    }

    /// PSC Register bits
    namespace psc_bits {
        constexpr uint32_t PSC = (16 << 0);  ///< Prescaler value of the counter clock
    }

    /// CAR Register bits
    namespace car_bits {
        constexpr uint32_t CARL = (16 << 0);  ///< Counter auto reload value
    }

    /// CREP Register bits
    namespace crep_bits {
        constexpr uint32_t CREP = (8 << 0);  ///< Counter repetition value
    }

    /// CH0CV Register bits
    namespace ch0cv_bits {
        constexpr uint32_t CH0VAL = (16 << 0);  ///< Capture or compare value of channel0
    }

    /// CH1CV Register bits
    namespace ch1cv_bits {
        constexpr uint32_t CH1VAL = (16 << 0);  ///< Capture or compare value of channel1
    }

    /// CH2CV Register bits
    namespace ch2cv_bits {
        constexpr uint32_t CH2VAL = (16 << 0);  ///< Capture or compare value of channel 2
    }

    /// CH3CV Register bits
    namespace ch3cv_bits {
        constexpr uint32_t CH3VAL = (16 << 0);  ///< Capture or compare value of channel 3
    }

    /// CCHP Register bits
    namespace cchp_bits {
        constexpr uint32_t POEN = (1U << 15);  ///< Primary output enable
        constexpr uint32_t OAEN = (1U << 14);  ///< Output automatic enable
        constexpr uint32_t BRKP = (1U << 13);  ///< Break polarity
        constexpr uint32_t BRKEN = (1U << 12);  ///< Break enable
        constexpr uint32_t ROS = (1U << 11);  ///< Run mode off-state configure
        constexpr uint32_t IOS = (1U << 10);  ///< Idle mode off-state configure
        constexpr uint32_t PROT = (2 << 8);  ///< Complementary register protect control
        constexpr uint32_t DTCFG = (8 << 0);  ///< Dead time configure
    }

    /// DMACFG Register bits
    namespace dmacfg_bits {
        constexpr uint32_t DMATC = (5 << 8);  ///< DMA transfer count
        constexpr uint32_t DMATA = (5 << 0);  ///< DMA transfer access start address
    }

    /// DMATB Register bits
    namespace dmatb_bits {
        constexpr uint32_t DMATB = (16 << 0);  ///< DMA transfer buffer
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART0_BASE = 0x40013800;
    constexpr uint32_t USART1_BASE = 0x40004400;
    constexpr uint32_t USART2_BASE = 0x40004800;
    constexpr uint32_t UART3_BASE = 0x40004C00;
    constexpr uint32_t UART4_BASE = 0x40005000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t STAT;  ///< Offset: 0x00 - Status register
        volatile uint32_t DATA;  ///< Offset: 0x04 - Data register
        volatile uint32_t BAUD;  ///< Offset: 0x08 - Baud rate register
        volatile uint32_t CTL0;  ///< Offset: 0x0C - Control register 0
        volatile uint32_t CTL1;  ///< Offset: 0x10 - Control register 1
        volatile uint32_t CTL2;  ///< Offset: 0x14 - Control register 2
        volatile uint32_t GP;  ///< Offset: 0x18 - Guard time and prescaler register
    };

    /// Peripheral instances
    inline Registers* USART0 = reinterpret_cast<Registers*>(USART0_BASE);
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);
    inline Registers* UART3 = reinterpret_cast<Registers*>(UART3_BASE);
    inline Registers* UART4 = reinterpret_cast<Registers*>(UART4_BASE);

    // Bit definitions
    /// STAT Register bits
    namespace stat_bits {
        constexpr uint32_t CTSF = (1U << 9);  ///< CTS change flag
        constexpr uint32_t LBDF = (1U << 8);  ///< LIN break detection flag
        constexpr uint32_t TBE = (1U << 7);  ///< Transmit data buffer empty
        constexpr uint32_t TC = (1U << 6);  ///< Transmission complete
        constexpr uint32_t RBNE = (1U << 5);  ///< Read data buffer not empty
        constexpr uint32_t IDLEF = (1U << 4);  ///< IDLE frame detected flag
        constexpr uint32_t ORERR = (1U << 3);  ///< Overrun error
        constexpr uint32_t NERR = (1U << 2);  ///< Noise error flag
        constexpr uint32_t FERR = (1U << 1);  ///< Frame error flag
        constexpr uint32_t PERR = (1U << 0);  ///< Parity error flag
    }

    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t DATA = (9 << 0);  ///< Transmit or read data value
    }

    /// BAUD Register bits
    namespace baud_bits {
        constexpr uint32_t INTDIV = (12 << 4);  ///< Integer part of baud-rate divider
        constexpr uint32_t FRADIV = (4 << 0);  ///< Fraction part of baud-rate divider
    }

    /// CTL0 Register bits
    namespace ctl0_bits {
        constexpr uint32_t UEN = (1U << 13);  ///< USART enable
        constexpr uint32_t WL = (1U << 12);  ///< Word length
        constexpr uint32_t WM = (1U << 11);  ///< Wakeup method in mute mode
        constexpr uint32_t PCEN = (1U << 10);  ///< Parity check function enable
        constexpr uint32_t PM = (1U << 9);  ///< Parity mode
        constexpr uint32_t PERRIE = (1U << 8);  ///< Parity error interrupt enable
        constexpr uint32_t TBEIE = (1U << 7);  ///< Transmitter buffer empty interrupt enable
        constexpr uint32_t TCIE = (1U << 6);  ///< Transmission complete interrupt enable
        constexpr uint32_t RBNEIE = (1U << 5);  ///< Read data buffer not empty interrupt and overrun error interrupt enable
        constexpr uint32_t IDLEIE = (1U << 4);  ///< IDLE line detected interrupt enable
        constexpr uint32_t TEN = (1U << 3);  ///< Transmitter enable
        constexpr uint32_t REN = (1U << 2);  ///< Receiver enable
        constexpr uint32_t RWU = (1U << 1);  ///< Receiver wakeup from mute mode
        constexpr uint32_t SBKCMD = (1U << 0);  ///< Send break command
    }

    /// CTL1 Register bits
    namespace ctl1_bits {
        constexpr uint32_t LMEN = (1U << 14);  ///< LIN mode enable
        constexpr uint32_t STB = (2 << 12);  ///< STOP bits length
        constexpr uint32_t CKEN = (1U << 11);  ///< CK pin enable
        constexpr uint32_t CPL = (1U << 10);  ///< Clock polarity
        constexpr uint32_t CPH = (1U << 9);  ///< Clock phase
        constexpr uint32_t CLEN = (1U << 8);  ///< CK Length
        constexpr uint32_t LBDIE = (1U << 6);  ///< LIN break detection interrupt enable
        constexpr uint32_t LBLEN = (1U << 5);  ///< LIN break frame length
        constexpr uint32_t ADDR = (4 << 0);  ///< Address of the USART
    }

    /// CTL2 Register bits
    namespace ctl2_bits {
        constexpr uint32_t CTSIE = (1U << 10);  ///< CTS interrupt enable
        constexpr uint32_t CTSEN = (1U << 9);  ///< CTS enable
        constexpr uint32_t RTSEN = (1U << 8);  ///< RTS enable
        constexpr uint32_t DENT = (1U << 7);  ///< DMA request enable for transmission
        constexpr uint32_t DENR = (1U << 6);  ///< DMA request enable for reception
        constexpr uint32_t SCEN = (1U << 5);  ///< Smartcard mode enable
        constexpr uint32_t NKEN = (1U << 4);  ///< Smartcard NACK enable
        constexpr uint32_t HDEN = (1U << 3);  ///< Half-duplex selection
        constexpr uint32_t IRLP = (1U << 2);  ///< IrDA low-power
        constexpr uint32_t IREN = (1U << 1);  ///< IrDA mode enable
        constexpr uint32_t ERRIE = (1U << 0);  ///< Error interrupt enable
    }

    /// GP Register bits
    namespace gp_bits {
        constexpr uint32_t GUAT = (8 << 8);  ///< Guard time value in Smartcard mode
        constexpr uint32_t PSC = (8 << 0);  ///< Prescaler value
    }

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USBFS_GLOBAL_BASE = 0x50000000;
    constexpr uint32_t USBFS_HOST_BASE = 0x50000400;
    constexpr uint32_t USBFS_DEVICE_BASE = 0x50000800;
    constexpr uint32_t USBFS_PWRCLK_BASE = 0x50000E00;

    /// USB Register structure
    struct Registers {
        volatile uint32_t GOTGCS;  ///< Offset: 0x00 - Global OTG control and status register (USBFS_GOTGCS)
        volatile uint32_t GOTGINTF;  ///< Offset: 0x04 - Global OTG interrupt flag register (USBFS_GOTGINTF)
        volatile uint32_t GAHBCS;  ///< Offset: 0x08 - Global AHB control and status register (USBFS_GAHBCS)
        volatile uint32_t GUSBCS;  ///< Offset: 0x0C - Global USB control and status register (USBFS_GUSBCSR)
        volatile uint32_t GRSTCTL;  ///< Offset: 0x10 - Global reset control register (USBFS_GRSTCTL)
        volatile uint32_t GINTF;  ///< Offset: 0x14 - Global interrupt flag register (USBFS_GINTF)
        volatile uint32_t GINTEN;  ///< Offset: 0x18 - Global interrupt enable register (USBFS_GINTEN)
        volatile uint32_t GRSTATR_Device;  ///< Offset: 0x1C - Global Receive status read(Device mode)
        volatile uint32_t GRSTATR_Host;  ///< Offset: 0x1C - Global Receive status read(Host mode)
        volatile uint32_t GRSTATP_Device;  ///< Offset: 0x20 - Global Receive status pop(Device mode)
        volatile uint32_t GRSTATP_Host;  ///< Offset: 0x20 - Global Receive status pop(Host mode)
        volatile uint32_t GRFLEN;  ///< Offset: 0x24 - Global Receive FIFO size register (USBFS_GRFLEN)
        volatile uint32_t HNPTFLEN;  ///< Offset: 0x28 - Host non-periodic transmit FIFO length register (Host mode)
        volatile uint32_t DIEP0TFLEN;  ///< Offset: 0x28 - Device IN endpoint 0 transmit FIFO length (Device mode)
        volatile uint32_t HNPTFQSTAT;  ///< Offset: 0x2C - Host non-periodic transmit FIFO/queue status register...
        volatile uint32_t GCCFG;  ///< Offset: 0x38 - Global core configuration register (USBFS_GCCFG)
        volatile uint32_t CID;  ///< Offset: 0x3C - core ID register
        volatile uint32_t HPTFLEN;  ///< Offset: 0x100 - Host periodic transmit FIFO length register (HPTFLEN)
        volatile uint32_t DIEP1TFLEN;  ///< Offset: 0x104 - device IN endpoint transmit FIFO size register (DIEP1TFLEN)
        volatile uint32_t DIEP2TFLEN;  ///< Offset: 0x108 - device IN endpoint transmit FIFO size register (DIEP2TFLEN)
        volatile uint32_t DIEP3TFLEN;  ///< Offset: 0x10C - device IN endpoint transmit FIFO size register (FS_DIEP3TXFLEN)
    };

    /// Peripheral instances
    inline Registers* USBFS_GLOBAL = reinterpret_cast<Registers*>(USBFS_GLOBAL_BASE);
    inline Registers* USBFS_HOST = reinterpret_cast<Registers*>(USBFS_HOST_BASE);
    inline Registers* USBFS_DEVICE = reinterpret_cast<Registers*>(USBFS_DEVICE_BASE);
    inline Registers* USBFS_PWRCLK = reinterpret_cast<Registers*>(USBFS_PWRCLK_BASE);

    // Bit definitions
    /// GOTGCS Register bits
    namespace gotgcs_bits {
        constexpr uint32_t SRPS = (1U << 0);  ///< SRP success
        constexpr uint32_t SRPREQ = (1U << 1);  ///< SRP request
        constexpr uint32_t HNPS = (1U << 8);  ///< Host success
        constexpr uint32_t HNPREQ = (1U << 9);  ///< HNP request
        constexpr uint32_t HHNPEN = (1U << 10);  ///< Host HNP enable
        constexpr uint32_t DHNPEN = (1U << 11);  ///< Device HNP enabled
        constexpr uint32_t IDPS = (1U << 16);  ///< ID pin status
        constexpr uint32_t DI = (1U << 17);  ///< Debounce interval
        constexpr uint32_t ASV = (1U << 18);  ///< A-session valid
        constexpr uint32_t BSV = (1U << 19);  ///< B-session valid
    }

    /// GOTGINTF Register bits
    namespace gotgintf_bits {
        constexpr uint32_t SESEND = (1U << 2);  ///< Session end
        constexpr uint32_t SRPEND = (1U << 8);  ///< Session request success status change
        constexpr uint32_t HNPEND = (1U << 9);  ///< HNP end
        constexpr uint32_t HNPDET = (1U << 17);  ///< Host negotiation request detected
        constexpr uint32_t ADTO = (1U << 18);  ///< A-device timeout
        constexpr uint32_t DF = (1U << 19);  ///< Debounce finish
    }

    /// GAHBCS Register bits
    namespace gahbcs_bits {
        constexpr uint32_t GINTEN = (1U << 0);  ///< Global interrupt enable
        constexpr uint32_t TXFTH = (1U << 7);  ///< Tx FIFO threshold
        constexpr uint32_t PTXFTH = (1U << 8);  ///< Periodic Tx FIFO threshold
    }

    /// GUSBCS Register bits
    namespace gusbcs_bits {
        constexpr uint32_t TOC = (3 << 0);  ///< Timeout calibration
        constexpr uint32_t SRPCEN = (1U << 8);  ///< SRP capability enable
        constexpr uint32_t HNPCEN = (1U << 9);  ///< HNP capability enable
        constexpr uint32_t UTT = (4 << 10);  ///< USB turnaround time
        constexpr uint32_t FHM = (1U << 29);  ///< Force host mode
        constexpr uint32_t FDM = (1U << 30);  ///< Force device mode
    }

    /// GRSTCTL Register bits
    namespace grstctl_bits {
        constexpr uint32_t CSRST = (1U << 0);  ///< Core soft reset
        constexpr uint32_t HCSRST = (1U << 1);  ///< HCLK soft reset
        constexpr uint32_t HFCRST = (1U << 2);  ///< Host frame counter reset
        constexpr uint32_t RXFF = (1U << 4);  ///< RxFIFO flush
        constexpr uint32_t TXFF = (1U << 5);  ///< TxFIFO flush
        constexpr uint32_t TXFNUM = (5 << 6);  ///< TxFIFO number
    }

    /// GINTF Register bits
    namespace gintf_bits {
        constexpr uint32_t COPM = (1U << 0);  ///< Current operation mode
        constexpr uint32_t MFIF = (1U << 1);  ///< Mode fault interrupt flag
        constexpr uint32_t OTGIF = (1U << 2);  ///< OTG interrupt flag
        constexpr uint32_t SOF = (1U << 3);  ///< Start of frame
        constexpr uint32_t RXFNEIF = (1U << 4);  ///< RxFIFO non-empty interrupt flag
        constexpr uint32_t NPTXFEIF = (1U << 5);  ///< Non-periodic TxFIFO empty interrupt flag
        constexpr uint32_t GNPINAK = (1U << 6);  ///< Global Non-Periodic IN NAK effective
        constexpr uint32_t GONAK = (1U << 7);  ///< Global OUT NAK effective
        constexpr uint32_t ESP = (1U << 10);  ///< Early suspend
        constexpr uint32_t SP = (1U << 11);  ///< USB suspend
        constexpr uint32_t RST = (1U << 12);  ///< USB reset
        constexpr uint32_t ENUMF = (1U << 13);  ///< Enumeration finished
        constexpr uint32_t ISOOPDIF = (1U << 14);  ///< Isochronous OUT packet dropped interrupt
        constexpr uint32_t EOPFIF = (1U << 15);  ///< End of periodic frame interrupt flag
        constexpr uint32_t IEPIF = (1U << 18);  ///< IN endpoint interrupt flag
        constexpr uint32_t OEPIF = (1U << 19);  ///< OUT endpoint interrupt flag
        constexpr uint32_t ISOINCIF = (1U << 20);  ///< Isochronous IN transfer Not Complete Interrupt Flag
        constexpr uint32_t PXNCIF_ISOONCIF = (1U << 21);  ///< periodic transfer not complete interrupt flag(Host mode)/isochronous OUT transfer not complete interrupt flag(Device mode)
        constexpr uint32_t HPIF = (1U << 24);  ///< Host port interrupt flag
        constexpr uint32_t HCIF = (1U << 25);  ///< Host channels interrupt flag
        constexpr uint32_t PTXFEIF = (1U << 26);  ///< Periodic TxFIFO empty interrupt flag
        constexpr uint32_t IDPSC = (1U << 28);  ///< ID pin status change
        constexpr uint32_t DISCIF = (1U << 29);  ///< Disconnect interrupt flag
        constexpr uint32_t SESIF = (1U << 30);  ///< Session interrupt flag
        constexpr uint32_t WKUPIF = (1U << 31);  ///< Wakeup interrupt flag
    }

    /// GINTEN Register bits
    namespace ginten_bits {
        constexpr uint32_t MFIE = (1U << 1);  ///< Mode fault interrupt enable
        constexpr uint32_t OTGIE = (1U << 2);  ///< OTG interrupt enable
        constexpr uint32_t SOFIE = (1U << 3);  ///< Start of frame interrupt enable
        constexpr uint32_t RXFNEIE = (1U << 4);  ///< Receive FIFO non-empty interrupt enable
        constexpr uint32_t NPTXFEIE = (1U << 5);  ///< Non-periodic TxFIFO empty interrupt enable
        constexpr uint32_t GNPINAKIE = (1U << 6);  ///< Global non-periodic IN NAK effective interrupt enable
        constexpr uint32_t GONAKIE = (1U << 7);  ///< Global OUT NAK effective interrupt enable
        constexpr uint32_t ESPIE = (1U << 10);  ///< Early suspend interrupt enable
        constexpr uint32_t SPIE = (1U << 11);  ///< USB suspend interrupt enable
        constexpr uint32_t RSTIE = (1U << 12);  ///< USB reset interrupt enable
        constexpr uint32_t ENUMFIE = (1U << 13);  ///< Enumeration finish interrupt enable
        constexpr uint32_t ISOOPDIE = (1U << 14);  ///< Isochronous OUT packet dropped interrupt enable
        constexpr uint32_t EOPFIE = (1U << 15);  ///< End of periodic frame interrupt enable
        constexpr uint32_t IEPIE = (1U << 18);  ///< IN endpoints interrupt enable
        constexpr uint32_t OEPIE = (1U << 19);  ///< OUT endpoints interrupt enable
        constexpr uint32_t ISOINCIE = (1U << 20);  ///< isochronous IN transfer not complete interrupt enable
        constexpr uint32_t PXNCIE_ISOONCIE = (1U << 21);  ///< periodic transfer not compelete Interrupt enable(Host mode)/isochronous OUT transfer not complete interrupt enable(Device mode)
        constexpr uint32_t HPIE = (1U << 24);  ///< Host port interrupt enable
        constexpr uint32_t HCIE = (1U << 25);  ///< Host channels interrupt enable
        constexpr uint32_t PTXFEIE = (1U << 26);  ///< Periodic TxFIFO empty interrupt enable
        constexpr uint32_t IDPSCIE = (1U << 28);  ///< ID pin status change interrupt enable
        constexpr uint32_t DISCIE = (1U << 29);  ///< Disconnect interrupt enable
        constexpr uint32_t SESIE = (1U << 30);  ///< Session interrupt enable
        constexpr uint32_t WKUPIE = (1U << 31);  ///< Wakeup interrupt enable
    }

    /// GRSTATR_Device Register bits
    namespace grstatr_device_bits {
        constexpr uint32_t EPNUM = (4 << 0);  ///< Endpoint number
        constexpr uint32_t BCOUNT = (11 << 4);  ///< Byte count
        constexpr uint32_t DPID = (2 << 15);  ///< Data PID
        constexpr uint32_t RPCKST = (4 << 17);  ///< Recieve packet status
    }

    /// GRSTATR_Host Register bits
    namespace grstatr_host_bits {
        constexpr uint32_t CNUM = (4 << 0);  ///< Channel number
        constexpr uint32_t BCOUNT = (11 << 4);  ///< Byte count
        constexpr uint32_t DPID = (2 << 15);  ///< Data PID
        constexpr uint32_t RPCKST = (4 << 17);  ///< Reivece packet status
    }

    /// GRSTATP_Device Register bits
    namespace grstatp_device_bits {
        constexpr uint32_t EPNUM = (4 << 0);  ///< Endpoint number
        constexpr uint32_t BCOUNT = (11 << 4);  ///< Byte count
        constexpr uint32_t DPID = (2 << 15);  ///< Data PID
        constexpr uint32_t RPCKST = (4 << 17);  ///< Recieve packet status
    }

    /// GRSTATP_Host Register bits
    namespace grstatp_host_bits {
        constexpr uint32_t CNUM = (4 << 0);  ///< Channel number
        constexpr uint32_t BCOUNT = (11 << 4);  ///< Byte count
        constexpr uint32_t DPID = (2 << 15);  ///< Data PID
        constexpr uint32_t RPCKST = (4 << 17);  ///< Reivece packet status
    }

    /// GRFLEN Register bits
    namespace grflen_bits {
        constexpr uint32_t RXFD = (16 << 0);  ///< Rx FIFO depth
    }

    /// HNPTFLEN Register bits
    namespace hnptflen_bits {
        constexpr uint32_t HNPTXRSAR = (16 << 0);  ///< host non-periodic transmit Tx RAM start address
        constexpr uint32_t HNPTXFD = (16 << 16);  ///< host non-periodic TxFIFO depth
    }

    /// DIEP0TFLEN Register bits
    namespace diep0tflen_bits {
        constexpr uint32_t IEP0TXFD = (16 << 16);  ///< in endpoint 0 Tx FIFO depth
        constexpr uint32_t IEP0TXRSAR = (16 << 0);  ///< in endpoint 0 Tx RAM start address
    }

    /// HNPTFQSTAT Register bits
    namespace hnptfqstat_bits {
        constexpr uint32_t NPTXFS = (16 << 0);  ///< Non-periodic TxFIFO space
        constexpr uint32_t NPTXRQS = (8 << 16);  ///< Non-periodic transmit request queue space
        constexpr uint32_t NPTXRQTOP = (7 << 24);  ///< Top of the non-periodic transmit request queue
    }

    /// GCCFG Register bits
    namespace gccfg_bits {
        constexpr uint32_t PWRON = (1U << 16);  ///< Power on
        constexpr uint32_t VBUSACEN = (1U << 18);  ///< The VBUS A-device Comparer enable
        constexpr uint32_t VBUSBCEN = (1U << 19);  ///< The VBUS B-device Comparer enable
        constexpr uint32_t SOFOEN = (1U << 20);  ///< SOF output enable
        constexpr uint32_t VBUSIG = (1U << 21);  ///< VBUS ignored
    }

    /// CID Register bits
    namespace cid_bits {
        constexpr uint32_t CID = (32 << 0);  ///< Core ID
    }

    /// HPTFLEN Register bits
    namespace hptflen_bits {
        constexpr uint32_t HPTXFSAR = (16 << 0);  ///< Host periodic TxFIFO start address
        constexpr uint32_t HPTXFD = (16 << 16);  ///< Host periodic TxFIFO depth
    }

    /// DIEP1TFLEN Register bits
    namespace diep1tflen_bits {
        constexpr uint32_t IEPTXRSAR = (16 << 0);  ///< IN endpoint FIFO transmit RAM start address
        constexpr uint32_t IEPTXFD = (16 << 16);  ///< IN endpoint TxFIFO depth
    }

    /// DIEP2TFLEN Register bits
    namespace diep2tflen_bits {
        constexpr uint32_t IEPTXRSAR = (16 << 0);  ///< IN endpoint FIFO transmit RAM start address
        constexpr uint32_t IEPTXFD = (16 << 16);  ///< IN endpoint TxFIFO depth
    }

    /// DIEP3TFLEN Register bits
    namespace diep3tflen_bits {
        constexpr uint32_t IEPTXRSAR = (16 << 0);  ///< IN endpoint FIFO4 transmit RAM start address
        constexpr uint32_t IEPTXFD = (16 << 16);  ///< IN endpoint TxFIFO depth
    }

}


} // namespace alloy::generated::gd32vf103

#endif // ALLOY_GENERATED_GD32VF103_PERIPHERALS_HPP