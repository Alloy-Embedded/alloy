/// Auto-generated code for LPC1102_04
/// Generated by Alloy Code Generator
/// Source: nxp_lpc1102.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:00:48
#ifndef ALLOY_GENERATED_LPC1102_04_PERIPHERALS_HPP
#define ALLOY_GENERATED_LPC1102_04_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::lpc1102_04 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 1;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 1;
    constexpr bool has_ct16b0 = true;
    constexpr uint32_t num_ct16b0_instances = 1;
    constexpr bool has_ct16b1 = true;
    constexpr uint32_t num_ct16b1_instances = 1;
    constexpr bool has_ct32b0 = true;
    constexpr uint32_t num_ct32b0_instances = 1;
    constexpr bool has_ct32b1 = true;
    constexpr uint32_t num_ct32b1_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 1;
    constexpr bool has_pmu = true;
    constexpr uint32_t num_pmu_instances = 1;
    constexpr bool has_flash = true;
    constexpr uint32_t num_flash_instances = 1;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 1;
    constexpr bool has_iocon = true;
    constexpr uint32_t num_iocon_instances = 1;
    constexpr bool has_syscon = true;
    constexpr uint32_t num_syscon_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 2;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ct16b0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ct16b1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ct32b0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ct32b1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pmu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct flash_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct iocon_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct syscon_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 2;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 2;
    constexpr uint32_t max_gpio_pins = 32;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_uart = true;
}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WWDT_BASE = 0x40004000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t WDMOD;  ///< Offset: 0x00 - Watchdog mode register. This register contains the basic...
        volatile uint32_t WDTC;  ///< Offset: 0x04 - Watchdog timer constant register. This register...
        volatile uint32_t WDFEED;  ///< Offset: 0x08 - Watchdog feed sequence register. Writing 0xAA followed...
        volatile uint32_t WDTV;  ///< Offset: 0x0C - Watchdog timer value register. This register reads out...
        volatile uint32_t WDWARNINT;  ///< Offset: 0x14 - Watchdog Warning Interrupt compare value.
        volatile uint32_t WDWINDOW;  ///< Offset: 0x18 - Watchdog Window compare value.
    };

    /// Peripheral instances
    inline Registers* WWDT = reinterpret_cast<Registers*>(WWDT_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART_BASE = 0x40008000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t RBR;  ///< Offset: 0x00 - Receiver Buffer Register. Contains the next received...
        volatile uint32_t THR;  ///< Offset: 0x00 - Transmit Holding Register. The next character to be...
        volatile uint32_t DLL;  ///< Offset: 0x00 - Divisor Latch LSB. Least significant byte of the baud...
        volatile uint32_t DLM;  ///< Offset: 0x04 - Divisor Latch MSB. Most significant byte of the baud...
        volatile uint32_t IER;  ///< Offset: 0x04 - Interrupt Enable Register. Contains individual interrupt...
        volatile uint32_t IIR;  ///< Offset: 0x08 - Interrupt ID Register. Identifies which interrupt(s) are pending.
        volatile uint32_t FCR;  ///< Offset: 0x08 - FIFO Control Register. Controls UART FIFO usage and modes.
        volatile uint32_t LCR;  ///< Offset: 0x0C - Line Control Register. Contains controls for frame...
        volatile uint32_t LSR;  ///< Offset: 0x14 - Line Status Register. Contains flags for transmit and...
        volatile uint32_t SCR;  ///< Offset: 0x1C - Scratch Pad Register. Eight-bit temporary storage for software.
        volatile uint32_t ACR;  ///< Offset: 0x20 - Auto-baud Control Register. Contains controls for the...
        volatile uint32_t FDR;  ///< Offset: 0x28 - Fractional Divider Register. Generates a clock input for...
        volatile uint32_t TER;  ///< Offset: 0x30 - Transmit Enable Register. Turns off UART transmitter for...
        volatile uint32_t RS485CTRL;  ///< Offset: 0x4C - RS-485/EIA-485 Control. Contains controls to configure...
        volatile uint32_t RS485ADRMATCH;  ///< Offset: 0x50 - RS-485/EIA-485 address match. Contains the address match...
        volatile uint32_t RS485DLY;  ///< Offset: 0x54 - RS-485/EIA-485 direction control delay.
    };

    /// Peripheral instances
    inline Registers* UART = reinterpret_cast<Registers*>(UART_BASE);

}

// ============================================================================
// CT16B0 Peripheral
// ============================================================================

namespace ct16b0 {
    /// Base addresses
    constexpr uint32_t CT16B0_BASE = 0x4000C000;

    /// CT16B0 Register structure
    struct Registers {
        volatile uint32_t IR;  ///< Offset: 0x00 - Interrupt Register (IR). The IR can be written to clear...
        volatile uint32_t TCR;  ///< Offset: 0x04 - Timer Control Register (TCR). The TCR is used to control...
        volatile uint32_t TC;  ///< Offset: 0x08 - Timer Counter (TC). The 16-bit TC is incremented every...
        volatile uint32_t PR;  ///< Offset: 0x0C - Prescale Register (PR). When the Prescale Counter...
        volatile uint32_t PC;  ///< Offset: 0x10 - Prescale Counter (PC). The 16-bit PC is a counter which...
        volatile uint32_t MCR;  ///< Offset: 0x14 - Match Control Register (MCR). The MCR is used to control...
        volatile uint32_t MR%s;  ///< Offset: 0x18 - Match Register. MR can be enabled through the MCR to...
        volatile uint32_t EMR;  ///< Offset: 0x3C - External Match Register (EMR). The EMR controls the...
        volatile uint32_t PWMC;  ///< Offset: 0x74 - PWM Control Register (PWMCON). The PWMCON enables PWM...
    };

    /// Peripheral instances
    inline Registers* CT16B0 = reinterpret_cast<Registers*>(CT16B0_BASE);

}

// ============================================================================
// CT16B1 Peripheral
// ============================================================================

namespace ct16b1 {
    /// Base addresses
    constexpr uint32_t CT16B1_BASE = 0x40010000;

    /// CT16B1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* CT16B1 = reinterpret_cast<Registers*>(CT16B1_BASE);

}

// ============================================================================
// CT32B0 Peripheral
// ============================================================================

namespace ct32b0 {
    /// Base addresses
    constexpr uint32_t CT32B0_BASE = 0x40014000;

    /// CT32B0 Register structure
    struct Registers {
        volatile uint32_t IR;  ///< Offset: 0x00 - Interrupt Register (IR). The IR can be written to clear...
        volatile uint32_t TCR;  ///< Offset: 0x04 - Timer Control Register (TCR). The TCR is used to control...
        volatile uint32_t TC;  ///< Offset: 0x08 - Timer Counter (TC). The 32-bit TC is incremented every...
        volatile uint32_t PR;  ///< Offset: 0x0C - Prescale Register (PR). When the Prescale Counter...
        volatile uint32_t PC;  ///< Offset: 0x10 - Prescale Counter (PC). The 32-bit PC is a counter which...
        volatile uint32_t MCR;  ///< Offset: 0x14 - Match Control Register (MCR). The MCR is used to control...
        volatile uint32_t MR%s;  ///< Offset: 0x18 - Match Register. MR can be enabled through the MCR to...
        volatile uint32_t EMR;  ///< Offset: 0x3C - External Match Register (EMR). The EMR controls the...
        volatile uint32_t PWMC;  ///< Offset: 0x74 - PWM Control Register (PWMCON). The PWMCON enables PWM...
    };

    /// Peripheral instances
    inline Registers* CT32B0 = reinterpret_cast<Registers*>(CT32B0_BASE);

}

// ============================================================================
// CT32B1 Peripheral
// ============================================================================

namespace ct32b1 {
    /// Base addresses
    constexpr uint32_t CT32B1_BASE = 0x40018000;

    /// CT32B1 Register structure
    struct Registers {
        volatile uint32_t IR;  ///< Offset: 0x00 - Interrupt Register (IR). The IR can be written to clear...
        volatile uint32_t TCR;  ///< Offset: 0x04 - Timer Control Register (TCR). The TCR is used to control...
        volatile uint32_t TC;  ///< Offset: 0x08 - Timer Counter (TC). The 32-bit TC is incremented every...
        volatile uint32_t PR;  ///< Offset: 0x0C - Prescale Register (PR). When the Prescale Counter...
        volatile uint32_t PC;  ///< Offset: 0x10 - Prescale Counter (PC). The 32-bit PC is a counter which...
        volatile uint32_t MCR;  ///< Offset: 0x14 - Match Control Register (MCR). The MCR is used to control...
        volatile uint32_t MR%s;  ///< Offset: 0x18 - Match Register. MR can be enabled through theMCR to...
        volatile uint32_t CCR;  ///< Offset: 0x28 - Capture Control Register (CCR). The CCR controls which...
        volatile uint32_t CR0;  ///< Offset: 0x2C - Capture Register 0 (CR0). CR0 is loaded with the value...
        volatile uint32_t EMR;  ///< Offset: 0x3C - External Match Register (EMR). The EMR controls the...
        volatile uint32_t CTCR;  ///< Offset: 0x70 - Count Control Register (CTCR). The CTCR selects between...
        volatile uint32_t PWMC;  ///< Offset: 0x74 - PWM Control Register (PWMCON). The PWMCON enables PWM...
    };

    /// Peripheral instances
    inline Registers* CT32B1 = reinterpret_cast<Registers*>(CT32B1_BASE);

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_BASE = 0x4001C000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - A/D Control Register. The ADCR register must be written...
        volatile uint32_t GDR;  ///< Offset: 0x04 - A/D Global Data Register. Contains the result of the...
        volatile uint32_t STAT;  ///< Offset: 0x30 - A/D Status Register. This register contains DONE and...
        volatile uint32_t INTEN;  ///< Offset: 0x0C - A/D Interrupt Enable Register. This register contains...
        volatile uint32_t DR%s;  ///< Offset: 0x10 - A/D Channel n Data Register. This register contains the...
    };

    /// Peripheral instances
    inline Registers* ADC = reinterpret_cast<Registers*>(ADC_BASE);

}

// ============================================================================
// PMU Peripheral
// ============================================================================

namespace pmu {
    /// Base addresses
    constexpr uint32_t PMU_BASE = 0x40038000;

    /// PMU Register structure
    struct Registers {
        volatile uint32_t PCON;  ///< Offset: 0x00 - Power control register
    };

    /// Peripheral instances
    inline Registers* PMU = reinterpret_cast<Registers*>(PMU_BASE);

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASHCTRL_BASE = 0x4003C000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t FLASHCFG;  ///< Offset: 0x10 - Flash memory access time configuration register
        volatile uint32_t FMSSTART;  ///< Offset: 0x20 - Signature start address register
        volatile uint32_t FMSSTOP;  ///< Offset: 0x24 - Signature stop-address register
        volatile uint32_t FMSW0;  ///< Offset: 0x2C - Word 0 [31:0]
        volatile uint32_t FMSW1;  ///< Offset: 0x30 - Word 1 [63:32]
        volatile uint32_t FMSW2;  ///< Offset: 0x34 - Word 2 [95:64]
        volatile uint32_t FMSW3;  ///< Offset: 0x38 - Word 3 [127:96]
        volatile uint32_t FMSTAT;  ///< Offset: 0xFE0 - Signature generation status register
        volatile uint32_t FMSTATCLR;  ///< Offset: 0xFE8 - Signature generation status clear register
    };

    /// Peripheral instances
    inline Registers* FLASHCTRL = reinterpret_cast<Registers*>(FLASHCTRL_BASE);

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI0_BASE = 0x40040000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - Control Register 0. Selects the serial clock rate, bus...
        volatile uint32_t CR1;  ///< Offset: 0x04 - Control Register 1. Selects master/slave and other modes.
        volatile uint32_t DR;  ///< Offset: 0x08 - Data Register. Writes fill the transmit FIFO, and reads...
        volatile uint32_t SR;  ///< Offset: 0x0C - Status Register
        volatile uint32_t CPSR;  ///< Offset: 0x10 - Clock Prescale Register
        volatile uint32_t IMSC;  ///< Offset: 0x14 - Interrupt Mask Set and Clear Register
        volatile uint32_t RIS;  ///< Offset: 0x18 - Raw Interrupt Status Register
        volatile uint32_t MIS;  ///< Offset: 0x1C - Masked Interrupt Status Register
        volatile uint32_t ICR;  ///< Offset: 0x20 - SSPICR Interrupt Clear Register
    };

    /// Peripheral instances
    inline Registers* SPI0 = reinterpret_cast<Registers*>(SPI0_BASE);

}

// ============================================================================
// IOCON Peripheral
// ============================================================================

namespace iocon {
    /// Base addresses
    constexpr uint32_t IOCON_BASE = 0x40044000;

    /// IOCON Register structure
    struct Registers {
        volatile uint32_t RESET_PIO0_0;  ///< Offset: 0x0C - I/O configuration for pin RESET/PIO0_0
        volatile uint32_t IOCON_PIO0_1;  ///< Offset: 0x10 - I/O configuration for pin PIO0_1/CLKOUT/CT32B0_MAT2
        volatile uint32_t IOCON_PIO0_6;  ///< Offset: 0x4C - I/O configuration for pin PIO0_6/SCK0
        volatile uint32_t PIO0_8;  ///< Offset: 0x60 - I/O configuration for pin PIO0_8/MISO0/CT16B0_MAT0
        volatile uint32_t PIO0_9;  ///< Offset: 0x64 - I/O configuration for pin PIO0_9/MOSI0/CT16B0_MAT1
        volatile uint32_t SWCLK_PIO0_10;  ///< Offset: 0x68 - I/O configuration for pin SWCLK/PIO0_10/ SCK0/CT16B0_MAT2
        volatile uint32_t R_PIO0_11;  ///< Offset: 0x74 - I/O configuration for pin R/PIO0_11/AD0/CT32B0_MAT3
        volatile uint32_t R_PIO1_0;  ///< Offset: 0x78 - I/O configuration for pin R/PIO1_0/AD1/CT32B1_CAP0
        volatile uint32_t R_PIO1_1;  ///< Offset: 0x7C - I/O configuration for pin R/PIO1_1/AD2/CT32B1_MAT0
        volatile uint32_t R_PIO1_2;  ///< Offset: 0x80 - I/O configuration for pin R/PIO1_2/AD3/CT32B1_MAT1
        volatile uint32_t SWDIO_PIO1_3;  ///< Offset: 0x90 - I/O configuration for pin SWDIO/PIO1_3/AD4/CT32B1_MAT2
        volatile uint32_t PIO1_6;  ///< Offset: 0xA4 - I/O configuration for pin PIO1_6/RXD/CT32B0_MAT0
        volatile uint32_t PIO1_7;  ///< Offset: 0xA8 - I/O configuration for pin PIO1_7/TXD/CT32B0_MAT1
    };

    /// Peripheral instances
    inline Registers* IOCON = reinterpret_cast<Registers*>(IOCON_BASE);

}

// ============================================================================
// SYSCON Peripheral
// ============================================================================

namespace syscon {
    /// Base addresses
    constexpr uint32_t SYSCON_BASE = 0x40048000;

    /// SYSCON Register structure
    struct Registers {
        volatile uint32_t SYSMEMREMAP;  ///< Offset: 0x00 - System memory remap
        volatile uint32_t PRESETCTRL;  ///< Offset: 0x04 - Peripheral reset control
        volatile uint32_t SYSPLLCTRL;  ///< Offset: 0x08 - System PLL control
        volatile uint32_t SYSPLLSTAT;  ///< Offset: 0x0C - System PLL status
        volatile uint32_t SYSOSCCTRL;  ///< Offset: 0x20 - System oscillator control
        volatile uint32_t WDTOSCCTRL;  ///< Offset: 0x24 - Watchdog oscillator control
        volatile uint32_t IRCCTRL;  ///< Offset: 0x28 - IRC control
        volatile uint32_t SYSRSTSTAT;  ///< Offset: 0x30 - System reset status register
        volatile uint32_t SYSPLLCLKSEL;  ///< Offset: 0x40 - System PLL clock source select
        volatile uint32_t SYSPLLCLKUEN;  ///< Offset: 0x44 - System PLL clock source update enable
        volatile uint32_t MAINCLKSEL;  ///< Offset: 0x70 - Main clock source select
        volatile uint32_t MAINCLKUEN;  ///< Offset: 0x74 - Main clock source update enable
        volatile uint32_t SYSAHBCLKDIV;  ///< Offset: 0x78 - System AHB clock divider
        volatile uint32_t SYSAHBCLKCTRL;  ///< Offset: 0x80 - System AHB clock control
        volatile uint32_t SSP0CLKDIV;  ///< Offset: 0x94 - SPI0 clock divder
        volatile uint32_t UARTCLKDIV;  ///< Offset: 0x98 - UART clock divder
        volatile uint32_t WDTCLKSEL;  ///< Offset: 0xD0 - WDT clock source select
        volatile uint32_t WDTCLKUEN;  ///< Offset: 0xD4 - WDT clock source update enable
        volatile uint32_t WDTCLKDIV;  ///< Offset: 0xD8 - WDT clock divider
        volatile uint32_t CLKOUTCLKSEL;  ///< Offset: 0xE0 - CLKOUT clock source select
        volatile uint32_t CLKOUTUEN;  ///< Offset: 0xE4 - CLKOUT clock source update enable
        volatile uint32_t CLKOUTCLKDIV;  ///< Offset: 0xE8 - CLKOUT clock divider
        volatile uint32_t PIOPORCAP0;  ///< Offset: 0x100 - POR captured PIO status 0
        volatile uint32_t BODCTRL;  ///< Offset: 0x150 - BOD control
        volatile uint32_t SYSTCKCAL;  ///< Offset: 0x154 - System tick counter calibration
        volatile uint32_t STARTAPRP0;  ///< Offset: 0x200 - Start logic edge control register 0
        volatile uint32_t STARTERP0;  ///< Offset: 0x204 - Start logic signal enable register 0
        volatile uint32_t STARTRSRP0CLR;  ///< Offset: 0x208 - Start logic reset register 0
        volatile uint32_t STARTSRP0;  ///< Offset: 0x20C - Start logic status register 0
        volatile uint32_t PDSLEEPCFG;  ///< Offset: 0x230 - Power-down states in Deep-sleep mode
        volatile uint32_t PDAWAKECFG;  ///< Offset: 0x234 - Power-down states after wake-up from Deep-sleep mode
        volatile uint32_t PDRUNCFG;  ///< Offset: 0x238 - Power-down configuration register
        volatile uint32_t DEVICE_ID;  ///< Offset: 0x3F4 - Device ID
    };

    /// Peripheral instances
    inline Registers* SYSCON = reinterpret_cast<Registers*>(SYSCON_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO0_BASE = 0x50000000;
    constexpr uint32_t GPIO1_BASE = 0x50010000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x3FF8 - Port n data address masking register locations for pins...
        volatile uint32_t DIR;  ///< Offset: 0x8000 - Data direction register for port n
        volatile uint32_t IS;  ///< Offset: 0x8004 - Interrupt sense register for port n
        volatile uint32_t IBE;  ///< Offset: 0x8008 - Interrupt both edges register for port n
        volatile uint32_t IEV;  ///< Offset: 0x800C - Interrupt event register for port n
        volatile uint32_t IE;  ///< Offset: 0x8010 - Interrupt mask register for port n
        volatile uint32_t RIS;  ///< Offset: 0x8014 - Raw interrupt status register for port n
        volatile uint32_t MIS;  ///< Offset: 0x8018 - Masked interrupt status register for port n
        volatile uint32_t IC;  ///< Offset: 0x801C - Interrupt clear register for port n
    };

    /// Peripheral instances
    inline Registers* GPIO0 = reinterpret_cast<Registers*>(GPIO0_BASE);
    inline Registers* GPIO1 = reinterpret_cast<Registers*>(GPIO1_BASE);

}


} // namespace alloy::generated::lpc1102_04

#endif // ALLOY_GENERATED_LPC1102_04_PERIPHERALS_HPP