/// Auto-generated code for LPC11Exx
/// Generated by Alloy Code Generator
/// Source: nxp_lpc11exx.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:22:06
#ifndef ALLOY_GENERATED_LPC11EXX_PERIPHERALS_HPP
#define ALLOY_GENERATED_LPC11EXX_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::lpc11exx {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C_BASE = 0x40000000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CONSET;  ///< Offset: 0x00 - I2C Control Set Register. When a one is written to a bit...
        volatile uint32_t STAT;  ///< Offset: 0x04 - I2C Status Register. During I2C operation, this register...
        volatile uint32_t DAT;  ///< Offset: 0x08 - I2C Data Register. During master or slave transmit mode,...
        volatile uint32_t ADR0;  ///< Offset: 0x0C - I2C Slave Address Register 0. Contains the 7-bit slave...
        volatile uint32_t SCLH;  ///< Offset: 0x10 - SCH Duty Cycle Register High Half Word. Determines the...
        volatile uint32_t SCLL;  ///< Offset: 0x14 - SCL Duty Cycle Register Low Half Word. Determines the...
        volatile uint32_t CONCLR;  ///< Offset: 0x18 - I2C Control Clear Register. When a one is written to a...
        volatile uint32_t MMCTRL;  ///< Offset: 0x1C - Monitor mode control register.
        volatile uint32_t ADR%s;  ///< Offset: 0x20 - I2C Slave Address Register. Contains the 7-bit slave...
        volatile uint32_t DATA_BUFFER;  ///< Offset: 0x2C - Data buffer register. The contents of the 8 MSBs of the...
        volatile uint32_t MASK%s;  ///< Offset: 0x30 - I2C Slave address mask register. This mask register is...
    };

    /// Peripheral instances
    inline Registers* I2C = reinterpret_cast<Registers*>(I2C_BASE);

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WWDT_BASE = 0x40004000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t MOD;  ///< Offset: 0x00 - Watchdog mode register. This register contains the basic...
        volatile uint32_t TC;  ///< Offset: 0x04 - Watchdog timer constant register. This 24-bit register...
        volatile uint32_t FEED;  ///< Offset: 0x08 - Watchdog feed sequence register. Writing 0xAA followed...
        volatile uint32_t TV;  ///< Offset: 0x0C - Watchdog timer value register. This 24-bit register...
        volatile uint32_t CLKSEL;  ///< Offset: 0x10 - Watchdog clock select register.
        volatile uint32_t WARNINT;  ///< Offset: 0x14 - Watchdog Warning Interrupt compare value.
        volatile uint32_t WINDOW;  ///< Offset: 0x18 - Watchdog Window compare value.
    };

    /// Peripheral instances
    inline Registers* WWDT = reinterpret_cast<Registers*>(WWDT_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART_BASE = 0x40008000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t RBR;  ///< Offset: 0x00 - Receiver Buffer Register. Contains the next received...
        volatile uint32_t THR;  ///< Offset: 0x00 - Transmit Holding Register. The next character to be...
        volatile uint32_t DLL;  ///< Offset: 0x00 - Divisor Latch LSB. Least significant byte of the baud...
        volatile uint32_t DLM;  ///< Offset: 0x04 - Divisor Latch MSB. Most significant byte of the baud...
        volatile uint32_t IER;  ///< Offset: 0x04 - Interrupt Enable Register. Contains individual interrupt...
        volatile uint32_t IIR;  ///< Offset: 0x08 - Interrupt ID Register. Identifies which interrupt(s) are pending.
        volatile uint32_t FCR;  ///< Offset: 0x08 - FIFO Control Register. Controls USART FIFO usage and modes.
        volatile uint32_t LCR;  ///< Offset: 0x0C - Line Control Register. Contains controls for frame...
        volatile uint32_t MCR;  ///< Offset: 0x10 - Modem Control Register.
        volatile uint32_t LSR;  ///< Offset: 0x14 - Line Status Register. Contains flags for transmit and...
        volatile uint32_t MSR;  ///< Offset: 0x18 - Modem Status Register.
        volatile uint32_t SCR;  ///< Offset: 0x1C - Scratch Pad Register. Eight-bit temporary storage for software.
        volatile uint32_t ACR;  ///< Offset: 0x20 - Auto-baud Control Register. Contains controls for the...
        volatile uint32_t ICR;  ///< Offset: 0x24 - IrDA Control Register. Enables and configures the IrDA...
        volatile uint32_t FDR;  ///< Offset: 0x28 - Fractional Divider Register. Generates a clock input for...
        volatile uint32_t OSR;  ///< Offset: 0x2C - Oversampling Register. Controls the degree of...
        volatile uint32_t TER;  ///< Offset: 0x30 - Transmit Enable Register. Turns off USART transmitter...
        volatile uint32_t HDEN;  ///< Offset: 0x40 - Half duplex enable register.
        volatile uint32_t SCICTRL;  ///< Offset: 0x48 - Smart Card Interface Control register. Enables and...
        volatile uint32_t RS485CTRL;  ///< Offset: 0x4C - RS-485/EIA-485 Control. Contains controls to configure...
        volatile uint32_t RS485ADRMATCH;  ///< Offset: 0x50 - RS-485/EIA-485 address match. Contains the address match...
        volatile uint32_t RS485DLY;  ///< Offset: 0x54 - RS-485/EIA-485 direction control delay.
        volatile uint32_t SYNCCTRL;  ///< Offset: 0x58 - Synchronous mode control register.
    };

    /// Peripheral instances
    inline Registers* USART = reinterpret_cast<Registers*>(USART_BASE);

}

// ============================================================================
// CT16B0 Peripheral
// ============================================================================

namespace ct16b0 {
    /// Base addresses
    constexpr uint32_t CT16B0_BASE = 0x4000C000;

    /// CT16B0 Register structure
    struct Registers {
        volatile uint32_t IR;  ///< Offset: 0x00 - Interrupt Register. The IR can be written to clear...
        volatile uint32_t TCR;  ///< Offset: 0x04 - Timer Control Register. The TCR is used to control the...
        volatile uint32_t TC;  ///< Offset: 0x08 - Timer Counter. The 16-bit TC is incremented every PR+1...
        volatile uint32_t PR;  ///< Offset: 0x0C - Prescale Register. When the Prescale Counter (below) is...
        volatile uint32_t PC;  ///< Offset: 0x10 - Prescale Counter. The 16-bit PC is a counter which is...
        volatile uint32_t MCR;  ///< Offset: 0x14 - Match Control Register. The MCR is used to control if an...
        volatile uint32_t MR%s;  ///< Offset: 0x18 - Match Register 0. MR0 can be enabled through the MCR to...
        volatile uint32_t CCR;  ///< Offset: 0x28 - Capture Control Register. The CCR controls which edges...
        volatile uint32_t CR0;  ///< Offset: 0x2C - Capture Register 0. CR0 is loaded with the value of TC...
        volatile uint32_t CR1;  ///< Offset: 0x34 - Capture Register 1. CR1 is loaded with the value of TC...
        volatile uint32_t EMR;  ///< Offset: 0x3C - External Match Register. The EMR controls the match...
        volatile uint32_t CTCR;  ///< Offset: 0x70 - Count Control Register. The CTCR selects between Timer...
        volatile uint32_t PWMC;  ///< Offset: 0x74 - PWM Control Register. The PWMCON enables PWM mode for...
    };

    /// Peripheral instances
    inline Registers* CT16B0 = reinterpret_cast<Registers*>(CT16B0_BASE);

}

// ============================================================================
// CT16B1 Peripheral
// ============================================================================

namespace ct16b1 {
    /// Base addresses
    constexpr uint32_t CT16B1_BASE = 0x40010000;

    /// CT16B1 Register structure
    struct Registers {
        volatile uint32_t IR;  ///< Offset: 0x00 - Interrupt Register. The IR can be written to clear...
        volatile uint32_t TCR;  ///< Offset: 0x04 - Timer Control Register. The TCR is used to control the...
        volatile uint32_t TC;  ///< Offset: 0x08 - Timer Counter. The 16-bit TC is incremented every PR+1...
        volatile uint32_t PR;  ///< Offset: 0x0C - Prescale Register. When the Prescale Counter (below) is...
        volatile uint32_t PC;  ///< Offset: 0x10 - Prescale Counter. The 16-bit PC is a counter which is...
        volatile uint32_t MCR;  ///< Offset: 0x14 - Match Control Register. The MCR is used to control if an...
        volatile uint32_t MR%s;  ///< Offset: 0x18 - Match Register 0. MR0 can be enabled through the MCR to...
        volatile uint32_t CCR;  ///< Offset: 0x28 - Capture Control Register. The CCR controls which edges...
        volatile uint32_t CR0;  ///< Offset: 0x2C - Capture Register 0. CR0 is loaded with the value of TC...
        volatile uint32_t CR1;  ///< Offset: 0x30 - Capture Register 1. CR1 is loaded with the value of TC...
        volatile uint32_t EMR;  ///< Offset: 0x3C - External Match Register. The EMR controls the match...
        volatile uint32_t CTCR;  ///< Offset: 0x70 - Count Control Register. The CTCR selects between Timer...
        volatile uint32_t PWMC;  ///< Offset: 0x74 - PWM Control Register. The PWMCON enables PWM mode for...
    };

    /// Peripheral instances
    inline Registers* CT16B1 = reinterpret_cast<Registers*>(CT16B1_BASE);

}

// ============================================================================
// CT32B0 Peripheral
// ============================================================================

namespace ct32b0 {
    /// Base addresses
    constexpr uint32_t CT32B0_BASE = 0x40014000;

    /// CT32B0 Register structure
    struct Registers {
        volatile uint32_t IR;  ///< Offset: 0x00 - Interrupt Register. The IR can be written to clear...
        volatile uint32_t TCR;  ///< Offset: 0x04 - Timer Control Register. The TCR is used to control the...
        volatile uint32_t TC;  ///< Offset: 0x08 - Timer Counter. The 32-bit TC is incremented every PR+1...
        volatile uint32_t PR;  ///< Offset: 0x0C - Prescale Register. When the Prescale Counter (below) is...
        volatile uint32_t PC;  ///< Offset: 0x10 - Prescale Counter. The 32-bit PC is a counter which is...
        volatile uint32_t MCR;  ///< Offset: 0x14 - Match Control Register. The MCR is used to control if an...
        volatile uint32_t MR%s;  ///< Offset: 0x18 - Match Register 0. MR0 can be enabled through the MCR to...
        volatile uint32_t CCR;  ///< Offset: 0x28 - Capture Control Register. The CCR controls which edges...
        volatile uint32_t CR0;  ///< Offset: 0x2C - Capture Register 0. CR0 is loaded with the value of TC...
        volatile uint32_t CR1;  ///< Offset: 0x34 - Capture Register 1. CR1 is loaded with the value of TC...
        volatile uint32_t EMR;  ///< Offset: 0x3C - External Match Register. The EMR controls the match...
        volatile uint32_t CTCR;  ///< Offset: 0x70 - Count Control Register. The CTCR selects between Timer...
        volatile uint32_t PWMC;  ///< Offset: 0x74 - PWM Control Register. The PWMCON enables PWM mode for...
    };

    /// Peripheral instances
    inline Registers* CT32B0 = reinterpret_cast<Registers*>(CT32B0_BASE);

}

// ============================================================================
// CT32B1 Peripheral
// ============================================================================

namespace ct32b1 {
    /// Base addresses
    constexpr uint32_t CT32B1_BASE = 0x40018000;

    /// CT32B1 Register structure
    struct Registers {
        volatile uint32_t IR;  ///< Offset: 0x00 - Interrupt Register. The IR can be written to clear...
        volatile uint32_t TCR;  ///< Offset: 0x04 - Timer Control Register. The TCR is used to control the...
        volatile uint32_t TC;  ///< Offset: 0x08 - Timer Counter. The 32-bit TC is incremented every PR+1...
        volatile uint32_t PR;  ///< Offset: 0x0C - Prescale Register. When the Prescale Counter (below) is...
        volatile uint32_t PC;  ///< Offset: 0x10 - Prescale Counter. The 32-bit PC is a counter which is...
        volatile uint32_t MCR;  ///< Offset: 0x14 - Match Control Register. The MCR is used to control if an...
        volatile uint32_t MR%s;  ///< Offset: 0x18 - Match Register 0. MR0 can be enabled through the MCR to...
        volatile uint32_t CCR;  ///< Offset: 0x28 - Capture Control Register. The CCR controls which edges...
        volatile uint32_t CR0;  ///< Offset: 0x2C - Capture Register 0. CR0 is loaded with the value of TC...
        volatile uint32_t CR1;  ///< Offset: 0x30 - Capture Register 1. CR1 is loaded with the value of TC...
        volatile uint32_t EMR;  ///< Offset: 0x3C - External Match Register. The EMR controls the match...
        volatile uint32_t CTCR;  ///< Offset: 0x70 - Count Control Register. The CTCR selects between Timer...
        volatile uint32_t PWMC;  ///< Offset: 0x74 - PWM Control Register. The PWMCON enables PWM mode for...
    };

    /// Peripheral instances
    inline Registers* CT32B1 = reinterpret_cast<Registers*>(CT32B1_BASE);

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_BASE = 0x4001C000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - A/D Control Register. The CR register must be written to...
        volatile uint32_t GDR;  ///< Offset: 0x04 - A/D Global Data Register. Contains the result of the...
        volatile uint32_t INTEN;  ///< Offset: 0x0C - A/D Interrupt Enable Register. This register contains...
        volatile uint32_t DR%s;  ///< Offset: 0x10 - A/D Channel Data Register. This register contains the...
        volatile uint32_t STAT;  ///< Offset: 0x30 - A/D Status Register. This register contains DONE and...
    };

    /// Peripheral instances
    inline Registers* ADC = reinterpret_cast<Registers*>(ADC_BASE);

}

// ============================================================================
// PMU Peripheral
// ============================================================================

namespace pmu {
    /// Base addresses
    constexpr uint32_t PMU_BASE = 0x40038000;

    /// PMU Register structure
    struct Registers {
        volatile uint32_t PCON;  ///< Offset: 0x00 - Power control register
        volatile uint32_t GPREG%s;  ///< Offset: 0x04 - General purpose register 0
        volatile uint32_t GPREG4;  ///< Offset: 0x14 - General purpose register 4
    };

    /// Peripheral instances
    inline Registers* PMU = reinterpret_cast<Registers*>(PMU_BASE);

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASHCTRL_BASE = 0x4003C000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t EEMSSTART;  ///< Offset: 0x9C - EEPROM BIST start address register
        volatile uint32_t EEMSSTOP;  ///< Offset: 0xA0 - EEPROM BIST stop address register
        volatile uint32_t EEMSSIG;  ///< Offset: 0xA4 - EEPROM 24-bit BIST signature register
        volatile uint32_t FLASHCFG;  ///< Offset: 0x10 - Flash memory access time configuration register
        volatile uint32_t FMSSTART;  ///< Offset: 0x20 - Signature start address register
        volatile uint32_t FMSSTOP;  ///< Offset: 0x24 - Signature stop-address register
        volatile uint32_t FMSW0;  ///< Offset: 0x2C - Word 0 [31:0]
        volatile uint32_t FMSW1;  ///< Offset: 0x30 - Word 1 [63:32]
        volatile uint32_t FMSW2;  ///< Offset: 0x34 - Word 2 [95:64]
        volatile uint32_t FMSW3;  ///< Offset: 0x38 - Word 3 [127:96]
        volatile uint32_t FMSTAT;  ///< Offset: 0xFE0 - Signature generation status register
        volatile uint32_t FMSTATCLR;  ///< Offset: 0xFE8 - Signature generation status clear register
    };

    /// Peripheral instances
    inline Registers* FLASHCTRL = reinterpret_cast<Registers*>(FLASHCTRL_BASE);

}

// ============================================================================
// SSP0 Peripheral
// ============================================================================

namespace ssp0 {
    /// Base addresses
    constexpr uint32_t SSP0_BASE = 0x40040000;

    /// SSP0 Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - Control Register 0. Selects the serial clock rate, bus...
        volatile uint32_t CR1;  ///< Offset: 0x04 - Control Register 1. Selects master/slave and other modes.
        volatile uint32_t DR;  ///< Offset: 0x08 - Data Register. Writes fill the transmit FIFO, and reads...
        volatile uint32_t SR;  ///< Offset: 0x0C - Status Register
        volatile uint32_t CPSR;  ///< Offset: 0x10 - Clock Prescale Register
        volatile uint32_t IMSC;  ///< Offset: 0x14 - Interrupt Mask Set and Clear Register
        volatile uint32_t RIS;  ///< Offset: 0x18 - Raw Interrupt Status Register
        volatile uint32_t MIS;  ///< Offset: 0x1C - Masked Interrupt Status Register
        volatile uint32_t ICR;  ///< Offset: 0x20 - SSPICR Interrupt Clear Register
    };

    /// Peripheral instances
    inline Registers* SSP0 = reinterpret_cast<Registers*>(SSP0_BASE);

}

// ============================================================================
// IOCON Peripheral
// ============================================================================

namespace iocon {
    /// Base addresses
    constexpr uint32_t IOCON_BASE = 0x40044000;

    /// IOCON Register structure
    struct Registers {
        volatile uint32_t RESET_PIO0_0;  ///< Offset: 0x00 - I/O configuration for pin RESET/PIO0_0
        volatile uint32_t PIO0_1;  ///< Offset: 0x04 - I/O configuration for pin PIO0_1/CLKOUT/CT32B0_MAT2
        volatile uint32_t PIO0_2;  ///< Offset: 0x08 - I/O configuration for pin PIO0_2/SSEL0/CT16B0_CAP0
        volatile uint32_t PIO0_3;  ///< Offset: 0x0C - I/O configuration for pin PIO0_3
        volatile uint32_t PIO0_4;  ///< Offset: 0x10 - I/O configuration for pin PIO0_4/SCL
        volatile uint32_t PIO0_5;  ///< Offset: 0x14 - I/O configuration for pin PIO0_5/SDA
        volatile uint32_t PIO0_6;  ///< Offset: 0x18 - I/O configuration for pin PIO0_6/SCK0
        volatile uint32_t PIO0_7;  ///< Offset: 0x1C - I/O configuration for pin PIO0_7/CTS
        volatile uint32_t PIO0_8;  ///< Offset: 0x20 - I/O configuration for pin PIO0_8/MISO0/CT16B0_MAT0
        volatile uint32_t PIO0_9;  ///< Offset: 0x24 - I/O configuration for pin PIO0_9/MOSI0/CT16B0_MAT1
        volatile uint32_t SWCLK_PIO0_10;  ///< Offset: 0x28 - I/O configuration for pin SWCLK/PIO0_10/ SCK0/CT16B0_MAT2
        volatile uint32_t TDI_PIO0_11;  ///< Offset: 0x2C - I/O configuration for pin TDI/PIO0_11/AD0/CT32B0_MAT3
        volatile uint32_t TMS_PIO0_12;  ///< Offset: 0x30 - I/O configuration for pin TMS/PIO0_12/AD1/CT32B1_CAP0
        volatile uint32_t TDO_PIO0_13;  ///< Offset: 0x34 - I/O configuration for pin TDO/PIO0_13/AD2/CT32B1_MAT0
        volatile uint32_t TRST_PIO0_14;  ///< Offset: 0x38 - I/O configuration for pin TRST/PIO0_14/AD3/CT32B1_MAT1
        volatile uint32_t SWDIO_PIO0_15;  ///< Offset: 0x3C - I/O configuration for pin SWDIO/PIO0_15/AD4/CT32B1_MAT2
        volatile uint32_t PIO0_16;  ///< Offset: 0x40 - I/O configuration for pin PIO0_16/AD5/CT32B1_MAT3/ WAKEUP
        volatile uint32_t PIO0_17;  ///< Offset: 0x44 - I/O configuration for pin PIO0_17/RTS/CT32B0_CAP0/SCLK
        volatile uint32_t PIO0_18;  ///< Offset: 0x48 - I/O configuration for pin PIO0_18/RXD/CT32B0_MAT0
        volatile uint32_t PIO0_19;  ///< Offset: 0x4C - I/O configuration for pin PIO0_19/TXD/CT32B0_MAT1
        volatile uint32_t PIO0_20;  ///< Offset: 0x50 - I/O configuration for pin PIO0_20/CT16B1_CAP0
        volatile uint32_t PIO0_21;  ///< Offset: 0x54 - I/O configuration for pin PIO0_21/CT16B1_MAT0/MOSI1
        volatile uint32_t PIO0_22;  ///< Offset: 0x58 - I/O configuration for pin PIO0_22/AD6/CT16B1_MAT1/MISO1
        volatile uint32_t PIO0_23;  ///< Offset: 0x5C - I/O configuration for pin PIO0_23/AD7
        volatile uint32_t PIO1_0;  ///< Offset: 0x60 - I/O configuration for pin PIO1_0/CT32B1_MAT0
        volatile uint32_t PIO1_1;  ///< Offset: 0x64 - I/O configuration for pin PIO1_1/CT32B1_MAT1
        volatile uint32_t PIO1_2;  ///< Offset: 0x68 - I/O configuration for pin PIO1_2/CT32B1_MAT2
        volatile uint32_t PIO1_3;  ///< Offset: 0x6C - I/O configuration for pin PIO1_3/CT32B1_MAT3
        volatile uint32_t PIO1_4;  ///< Offset: 0x70 - I/O configuration for pin PIO1_4/CT32B1_CAP0
        volatile uint32_t PIO1_5;  ///< Offset: 0x74 - I/O configuration for pin PIO1_5/CT32B1_CAP1
        volatile uint32_t PIO1_6;  ///< Offset: 0x78 - I/O configuration for pin PIO1_6
        volatile uint32_t PIO1_7;  ///< Offset: 0x7C - I/O configuration for pin PIO1_7
        volatile uint32_t PIO1_8;  ///< Offset: 0x80 - I/O configuration for pin PIO1_8
        volatile uint32_t PIO1_9;  ///< Offset: 0x84 - I/O configuration for pin PIO1_9
        volatile uint32_t PIO1_10;  ///< Offset: 0x88 - I/O configuration for pin PIO1_10
        volatile uint32_t PIO1_11;  ///< Offset: 0x8C - I/O configuration for pin PIO1_11
        volatile uint32_t PIO1_12;  ///< Offset: 0x90 - I/O configuration for pin PIO1_12
        volatile uint32_t PIO1_13;  ///< Offset: 0x94 - I/O configuration for pin PIO1_13/DTR/CT16B0_MAT0/TXD
        volatile uint32_t PIO1_14;  ///< Offset: 0x98 - I/O configuration for pin PIO1_14/DSR/CT16B0_MAT1/RXD
        volatile uint32_t PIO1_15;  ///< Offset: 0x9C - I/O configuration for pin PIO1_15/DCD/ CT16B0_MAT2/SCK1
        volatile uint32_t PIO1_16;  ///< Offset: 0xA0 - I/O configuration for pin PIO1_16/RI/CT16B0_CAP0
        volatile uint32_t PIO1_17;  ///< Offset: 0xA4 - I/O configuration for PIO1_17/CT16B0_CAP1/RXD
        volatile uint32_t PIO1_18;  ///< Offset: 0xA8 - I/O configuration for PIO1_18/CT16B1_CAP1/TXD
        volatile uint32_t PIO1_19;  ///< Offset: 0xAC - I/O configuration for pin PIO1_19/DTR/SSEL1
        volatile uint32_t PIO1_20;  ///< Offset: 0xB0 - I/O configuration for pin PIO1_20/DSR/SCK1
        volatile uint32_t PIO1_21;  ///< Offset: 0xB4 - I/O configuration for pin PIO1_21/DCD/MISO1
        volatile uint32_t PIO1_22;  ///< Offset: 0xB8 - I/O configuration for pin PIO1_22/RI/MOSI1
        volatile uint32_t PIO1_23;  ///< Offset: 0xBC - I/O configuration for pin PIO1_23/CT16B1_MAT1/SSEL1
        volatile uint32_t PIO1_24;  ///< Offset: 0xC0 - I/O configuration for pin PIO1_24/ CT32B0_MAT0
        volatile uint32_t PIO1_25;  ///< Offset: 0xC4 - I/O configuration for pin PIO1_25/CT32B0_MAT1
        volatile uint32_t PIO1_26;  ///< Offset: 0xC8 - I/O configuration for pin PIO1_26/CT32B0_MAT2/ RXD
        volatile uint32_t PIO1_27;  ///< Offset: 0xCC - I/O configuration for pin PIO1_27/CT32B0_MAT3/ TXD
        volatile uint32_t PIO1_28;  ///< Offset: 0xD0 - I/O configuration for pin PIO1_28/CT32B0_CAP0/ SCLK
        volatile uint32_t PIO1_29;  ///< Offset: 0xD4 - I/O configuration for pin PIO1_29/SCK0/ CT32B0_CAP1
        volatile uint32_t PIO1_31;  ///< Offset: 0xDC - I/O configuration for pin PIO1_31
    };

    /// Peripheral instances
    inline Registers* IOCON = reinterpret_cast<Registers*>(IOCON_BASE);

}

// ============================================================================
// SYSCON Peripheral
// ============================================================================

namespace syscon {
    /// Base addresses
    constexpr uint32_t SYSCON_BASE = 0x40048000;

    /// SYSCON Register structure
    struct Registers {
        volatile uint32_t SYSMEMREMAP;  ///< Offset: 0x00 - System memory remap
        volatile uint32_t PRESETCTRL;  ///< Offset: 0x04 - Peripheral reset control
        volatile uint32_t SYSPLLCTRL;  ///< Offset: 0x08 - System PLL control
        volatile uint32_t SYSPLLSTAT;  ///< Offset: 0x0C - System PLL status
        volatile uint32_t SYSOSCCTRL;  ///< Offset: 0x20 - System oscillator control
        volatile uint32_t WDTOSCCTRL;  ///< Offset: 0x24 - Watchdog oscillator control
        volatile uint32_t SYSRSTSTAT;  ///< Offset: 0x30 - System reset status register
        volatile uint32_t SYSPLLCLKSEL;  ///< Offset: 0x40 - System PLL clock source select
        volatile uint32_t SYSPLLCLKUEN;  ///< Offset: 0x44 - System PLL clock source update enable
        volatile uint32_t MAINCLKSEL;  ///< Offset: 0x70 - Main clock source select
        volatile uint32_t MAINCLKUEN;  ///< Offset: 0x74 - Main clock source update enable
        volatile uint32_t SYSAHBCLKDIV;  ///< Offset: 0x78 - System clock divider
        volatile uint32_t SYSAHBCLKCTRL;  ///< Offset: 0x80 - System clock control
        volatile uint32_t SSP0CLKDIV;  ///< Offset: 0x94 - SSP0 clock divider
        volatile uint32_t UARTCLKDIV;  ///< Offset: 0x98 - UART clock divider
        volatile uint32_t SSP1CLKDIV;  ///< Offset: 0x9C - SSP1 clock divider
        volatile uint32_t CLKOUTSEL;  ///< Offset: 0xE0 - CLKOUT clock source select
        volatile uint32_t CLKOUTUEN;  ///< Offset: 0xE4 - CLKOUT clock source update enable
        volatile uint32_t CLKOUTDIV;  ///< Offset: 0xE8 - CLKOUT clock divider
        volatile uint32_t PIOPORCAP0;  ///< Offset: 0x100 - POR captured PIO status 0
        volatile uint32_t PIOPORCAP1;  ///< Offset: 0x104 - POR captured PIO status 1
        volatile uint32_t BODCTRL;  ///< Offset: 0x150 - Brown-Out Detect
        volatile uint32_t SYSTCKCAL;  ///< Offset: 0x154 - System tick counter calibration
        volatile uint32_t IRQLATENCY;  ///< Offset: 0x170 - IQR delay. Allows trade-off between interrupt latency...
        volatile uint32_t NMISRC;  ///< Offset: 0x174 - NMI Source Control
        volatile uint32_t PINTSEL%s;  ///< Offset: 0x178 - GPIO Pin Interrupt Select register 0
        volatile uint32_t STARTERP0;  ///< Offset: 0x204 - Start logic 0 interrupt wake-up enable register 0
        volatile uint32_t STARTERP1;  ///< Offset: 0x214 - Start logic 1 interrupt wake-up enable register 1
        volatile uint32_t PDSLEEPCFG;  ///< Offset: 0x230 - Power-down states in deep-sleep mode
        volatile uint32_t PDAWAKECFG;  ///< Offset: 0x234 - Power-down states for wake-up from deep-sleep
        volatile uint32_t PDRUNCFG;  ///< Offset: 0x238 - Power configuration register
        volatile uint32_t DEVICE_ID;  ///< Offset: 0x3F4 - Device ID
    };

    /// Peripheral instances
    inline Registers* SYSCON = reinterpret_cast<Registers*>(SYSCON_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_PIN_INT_BASE = 0x4004C000;
    constexpr uint32_t GPIO_GROUP_INT0_BASE = 0x4005C000;
    constexpr uint32_t GPIO_GROUP_INT1_BASE = 0x40060000;
    constexpr uint32_t GPIO_PORT_BASE = 0x50000000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t ISEL;  ///< Offset: 0x00 - Pin Interrupt Mode register
        volatile uint32_t IENR;  ///< Offset: 0x04 - Pin Interrupt Enable (Rising) register
        volatile uint32_t SIENR;  ///< Offset: 0x08 - Set Pin Interrupt Enable (Rising) register
        volatile uint32_t CIENR;  ///< Offset: 0x0C - Clear Pin Interrupt Enable (Rising) register
        volatile uint32_t IENF;  ///< Offset: 0x10 - Pin Interrupt Enable Falling Edge / Active Level register
        volatile uint32_t SIENF;  ///< Offset: 0x14 - Set Pin Interrupt Enable Falling Edge / Active Level register
        volatile uint32_t CIENF;  ///< Offset: 0x18 - Clear Pin Interrupt Enable Falling Edge / Active Level address
        volatile uint32_t RISE;  ///< Offset: 0x1C - Pin Interrupt Rising Edge register
        volatile uint32_t FALL;  ///< Offset: 0x20 - Pin Interrupt Falling Edge register
        volatile uint32_t IST;  ///< Offset: 0x24 - Pin Interrupt Status register
    };

    /// Peripheral instances
    inline Registers* GPIO_PIN_INT = reinterpret_cast<Registers*>(GPIO_PIN_INT_BASE);
    inline Registers* GPIO_GROUP_INT0 = reinterpret_cast<Registers*>(GPIO_GROUP_INT0_BASE);
    inline Registers* GPIO_GROUP_INT1 = reinterpret_cast<Registers*>(GPIO_GROUP_INT1_BASE);
    inline Registers* GPIO_PORT = reinterpret_cast<Registers*>(GPIO_PORT_BASE);

}

// ============================================================================
// SSP1 Peripheral
// ============================================================================

namespace ssp1 {
    /// Base addresses
    constexpr uint32_t SSP1_BASE = 0x40058000;

    /// SSP1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SSP1 = reinterpret_cast<Registers*>(SSP1_BASE);

}


} // namespace alloy::generated::lpc11exx

#endif // ALLOY_GENERATED_LPC11EXX_PERIPHERALS_HPP