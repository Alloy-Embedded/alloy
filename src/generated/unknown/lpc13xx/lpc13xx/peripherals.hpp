/// Auto-generated code for LPC13xx
/// Generated by Alloy Code Generator
/// Source: nxp_lpc13xx.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:00:39
#ifndef ALLOY_GENERATED_LPC13XX_PERIPHERALS_HPP
#define ALLOY_GENERATED_LPC13XX_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::lpc13xx {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 1;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 1;
    constexpr bool has_ct16b0 = true;
    constexpr uint32_t num_ct16b0_instances = 1;
    constexpr bool has_ct16b1 = true;
    constexpr uint32_t num_ct16b1_instances = 1;
    constexpr bool has_ct32b0 = true;
    constexpr uint32_t num_ct32b0_instances = 1;
    constexpr bool has_ct32b1 = true;
    constexpr uint32_t num_ct32b1_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 1;
    constexpr bool has_usb = true;
    constexpr uint32_t num_usb_instances = 1;
    constexpr bool has_pmu = true;
    constexpr uint32_t num_pmu_instances = 1;
    constexpr bool has_fmc = true;
    constexpr uint32_t num_fmc_instances = 1;
    constexpr bool has_ssp0 = true;
    constexpr uint32_t num_ssp0_instances = 1;
    constexpr bool has_iocon = true;
    constexpr uint32_t num_iocon_instances = 1;
    constexpr bool has_syscon = true;
    constexpr uint32_t num_syscon_instances = 1;
    constexpr bool has_ssp1 = true;
    constexpr uint32_t num_ssp1_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 4;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ct16b0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ct16b1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ct32b0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ct32b1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usb_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pmu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fmc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssp0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct iocon_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct syscon_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ssp1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 4;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 4;
    constexpr uint32_t max_gpio_pins = 64;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_uart = true;
}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C_BASE = 0x40000000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CONSET;  ///< Offset: 0x00 - I2C Control Set Register. When a one is written to a bit...
        volatile uint32_t STAT;  ///< Offset: 0x04 - I2C Status Register. During I2C operation, this register...
        volatile uint32_t DAT;  ///< Offset: 0x08 - I2C Data Register. During master or slave transmit mode,...
        volatile uint32_t ADR0;  ///< Offset: 0x0C - I2C Slave Address Register 0. Contains the 7-bit slave...
        volatile uint32_t SCLH;  ///< Offset: 0x10 - SCH Duty Cycle Register High Half Word. Determines the...
        volatile uint32_t SCLL;  ///< Offset: 0x14 - SCL Duty Cycle Register Low Half Word. Determines the...
        volatile uint32_t CONCLR;  ///< Offset: 0x18 - I2C Control Clear Register. When a one is written to a...
        volatile uint32_t MMCTRL;  ///< Offset: 0x1C - Monitor mode control register.
        volatile uint32_t ADR%s;  ///< Offset: 0x20 - I2C Slave Address Register 1. Contains the 7-bit slave...
        volatile uint32_t DATA_BUFFER;  ///< Offset: 0x2C - Data buffer register. The contents of the 8 MSBs of the...
        volatile uint32_t MASK%s;  ///< Offset: 0x30 - I2C Slave address mask register n. This mask register is...
    };

    /// Peripheral instances
    inline Registers* I2C = reinterpret_cast<Registers*>(I2C_BASE);

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WWDT_BASE = 0x40004000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t MOD;  ///< Offset: 0x00 - Watchdog mode register. This register contains the basic...
        volatile uint32_t TC;  ///< Offset: 0x04 - Watchdog timer constant register. This register...
        volatile uint32_t FEED;  ///< Offset: 0x08 - Watchdog feed sequence register. Writing 0xAA followed...
        volatile uint32_t TV;  ///< Offset: 0x0C - Watchdog timer value register. This register reads out...
        volatile uint32_t WARNINT;  ///< Offset: 0x14 - Watchdog Warning Interrupt compare value.
        volatile uint32_t WINDOW;  ///< Offset: 0x18 - Watchdog Window compare value.
    };

    /// Peripheral instances
    inline Registers* WWDT = reinterpret_cast<Registers*>(WWDT_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART_BASE = 0x40008000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t RBR;  ///< Offset: 0x00 - Receiver Buffer Register. Contains the next received...
        volatile uint32_t THR;  ///< Offset: 0x00 - Transmit Holding Register. The next character to be...
        volatile uint32_t DLL;  ///< Offset: 0x00 - Divisor Latch LSB. Least significant byte of the baud...
        volatile uint32_t DLM;  ///< Offset: 0x04 - Divisor Latch MSB. Most significant byte of the baud...
        volatile uint32_t IER;  ///< Offset: 0x04 - Interrupt Enable Register. Contains individual interrupt...
        volatile uint32_t IIR;  ///< Offset: 0x08 - Interrupt ID Register. Identifies which interrupt(s) are pending.
        volatile uint32_t FCR;  ///< Offset: 0x08 - FIFO Control Register. Controls UART FIFO usage and modes.
        volatile uint32_t LCR;  ///< Offset: 0x0C - Line Control Register. Contains controls for frame...
        volatile uint32_t MCR;  ///< Offset: 0x10 - Modem control register
        volatile uint32_t LSR;  ///< Offset: 0x14 - Line Status Register. Contains flags for transmit and...
        volatile uint32_t MSR;  ///< Offset: 0x18 - Modem status register
        volatile uint32_t SCR;  ///< Offset: 0x1C - Scratch Pad Register. Eight-bit temporary storage for software.
        volatile uint32_t ACR;  ///< Offset: 0x20 - Auto-baud Control Register. Contains controls for the...
        volatile uint32_t FDR;  ///< Offset: 0x28 - Fractional Divider Register. Generates a clock input for...
        volatile uint32_t TER;  ///< Offset: 0x30 - Transmit Enable Register. Turns off UART transmitter for...
        volatile uint32_t RS485CTRL;  ///< Offset: 0x4C - RS-485/EIA-485 Control. Contains controls to configure...
        volatile uint32_t RS485ADRMATCH;  ///< Offset: 0x50 - RS-485/EIA-485 address match. Contains the address match...
        volatile uint32_t RS485DLY;  ///< Offset: 0x54 - RS-485/EIA-485 direction control delay.
    };

    /// Peripheral instances
    inline Registers* UART = reinterpret_cast<Registers*>(UART_BASE);

}

// ============================================================================
// CT16B0 Peripheral
// ============================================================================

namespace ct16b0 {
    /// Base addresses
    constexpr uint32_t CT16B0_BASE = 0x4000C000;

    /// CT16B0 Register structure
    struct Registers {
        volatile uint32_t BIR;  ///< Offset: 0x00 - Interrupt Register (IR). The IR can be written to clear...
        volatile uint32_t BTCR;  ///< Offset: 0x04 - Timer Control Register (TCR). The TCR is used to control...
        volatile uint32_t BTC;  ///< Offset: 0x08 - Timer Counter (TC). The 16-bit TC is incremented every...
        volatile uint32_t BPR;  ///< Offset: 0x0C - Prescale Register (PR). When the Prescale Counter...
        volatile uint32_t BPC;  ///< Offset: 0x10 - Prescale Counter (PC). The 16-bit PC is a counter which...
        volatile uint32_t BMCR;  ///< Offset: 0x14 - Match Control Register (MCR). The MCR is used to control...
        volatile uint32_t BMR%s;  ///< Offset: 0x18 - Match Register 0 (MR0). MR0 can be enabled through the...
        volatile uint32_t BCCR;  ///< Offset: 0x28 - Capture Control Register (CCR). The CCR controls which...
        volatile uint32_t BCR0;  ///< Offset: 0x2C - Capture Register 0 (CR0). CR0 is loaded with the value...
        volatile uint32_t BEMR;  ///< Offset: 0x3C - External Match Register (EMR). The EMR controls the...
        volatile uint32_t BCTCR;  ///< Offset: 0x70 - Count Control Register (CTCR). The CTCR selects between...
        volatile uint32_t BPWMC;  ///< Offset: 0x74 - PWM Control Register (PWMCON). The PWMCON enables PWM...
    };

    /// Peripheral instances
    inline Registers* CT16B0 = reinterpret_cast<Registers*>(CT16B0_BASE);

}

// ============================================================================
// CT16B1 Peripheral
// ============================================================================

namespace ct16b1 {
    /// Base addresses
    constexpr uint32_t CT16B1_BASE = 0x40010000;

    /// CT16B1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* CT16B1 = reinterpret_cast<Registers*>(CT16B1_BASE);

}

// ============================================================================
// CT32B0 Peripheral
// ============================================================================

namespace ct32b0 {
    /// Base addresses
    constexpr uint32_t CT32B0_BASE = 0x40014000;

    /// CT32B0 Register structure
    struct Registers {
        volatile uint32_t BIR;  ///< Offset: 0x00 - Interrupt Register (IR). The IR can be written to clear...
        volatile uint32_t BTCR;  ///< Offset: 0x04 - Timer Control Register (TCR). The TCR is used to control...
        volatile uint32_t BTC;  ///< Offset: 0x08 - Timer Counter (TC). The 32-bit TC is incremented every...
        volatile uint32_t BPR;  ///< Offset: 0x0C - Prescale Register (PR). When the Prescale Counter...
        volatile uint32_t BPC;  ///< Offset: 0x10 - Prescale Counter (PC). The 32-bit PC is a counter which...
        volatile uint32_t BMCR;  ///< Offset: 0x14 - Match Control Register (MCR). The MCR is used to control...
        volatile uint32_t BMR%s;  ///< Offset: 0x18 - Match Register. MR can be enabled through the MCR to...
        volatile uint32_t BCCR;  ///< Offset: 0x28 - Capture Control Register (CCR). The CCR controls which...
        volatile uint32_t BCR0;  ///< Offset: 0x2C - Capture Register 0 (CR0). CR0 is loaded with the value...
        volatile uint32_t BEMR;  ///< Offset: 0x3C - External Match Register (EMR). The EMR controls the...
        volatile uint32_t BCTCR;  ///< Offset: 0x70 - Count Control Register (CTCR). The CTCR selects between...
        volatile uint32_t BPWMC;  ///< Offset: 0x74 - PWM Control Register (PWMCON). The PWMCON enables PWM...
    };

    /// Peripheral instances
    inline Registers* CT32B0 = reinterpret_cast<Registers*>(CT32B0_BASE);

}

// ============================================================================
// CT32B1 Peripheral
// ============================================================================

namespace ct32b1 {
    /// Base addresses
    constexpr uint32_t CT32B1_BASE = 0x40018000;

    /// CT32B1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* CT32B1 = reinterpret_cast<Registers*>(CT32B1_BASE);

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_BASE = 0x4001C000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - A/D Control Register. The AD0CR register must be written...
        volatile uint32_t GDR;  ///< Offset: 0x04 - A/D Global Data Register. Contains the result of the...
        volatile uint32_t INTEN;  ///< Offset: 0x0C - A/D Interrupt Enable Register. This register contains...
        volatile uint32_t DR%s;  ///< Offset: 0x10 - A/D Channel n Data Register. This register contains the...
        volatile uint32_t STAT;  ///< Offset: 0x30 - A/D Status Register. This register contains DONE and...
    };

    /// Peripheral instances
    inline Registers* ADC = reinterpret_cast<Registers*>(ADC_BASE);

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USB_BASE = 0x40020000;

    /// USB Register structure
    struct Registers {
        volatile uint32_t DEVINTST;  ///< Offset: 0x00 - USB Device Interrupt Status
        volatile uint32_t DEVINTEN;  ///< Offset: 0x04 - USB Device Interrupt Enable
        volatile uint32_t DEVINTCTRL;  ///< Offset: 0x08 - USB Device Interrupt Clear
        volatile uint32_t DEVINTSET;  ///< Offset: 0x0C - USB Device Interrupt Set
        volatile uint32_t CMDCODE;  ///< Offset: 0x10 - USB Command Code
        volatile uint32_t CMDDATA;  ///< Offset: 0x14 - USB Command Data
        volatile uint32_t RXDATA;  ///< Offset: 0x18 - USB Receive Data
        volatile uint32_t TXDATA;  ///< Offset: 0x1C - USB Transmit Data
        volatile uint32_t RXPLEN;  ///< Offset: 0x20 - USB Receive Packet Length
        volatile uint32_t TXPLENn;  ///< Offset: 0x24 - USB Transmit Packet Length
        volatile uint32_t CTRL;  ///< Offset: 0x28 - USB Control
        volatile uint32_t DEVFIQSEL;  ///< Offset: 0x2C - USB Device FIQ select
    };

    /// Peripheral instances
    inline Registers* USB = reinterpret_cast<Registers*>(USB_BASE);

}

// ============================================================================
// PMU Peripheral
// ============================================================================

namespace pmu {
    /// Base addresses
    constexpr uint32_t PMU_BASE = 0x40038000;

    /// PMU Register structure
    struct Registers {
        volatile uint32_t PCON;  ///< Offset: 0x00 - Power control register
        volatile uint32_t GPREG%s;  ///< Offset: 0x04 - General purpose register
        volatile uint32_t GPREG4;  ///< Offset: 0x14 - General purpose register 4
    };

    /// Peripheral instances
    inline Registers* PMU = reinterpret_cast<Registers*>(PMU_BASE);

}

// ============================================================================
// FMC Peripheral
// ============================================================================

namespace fmc {
    /// Base addresses
    constexpr uint32_t FMC_BASE = 0x4003C000;

    /// FMC Register structure
    struct Registers {
        volatile uint32_t FLASHCFG;  ///< Offset: 0x10 - Flash configuration register
        volatile uint32_t FMSSTART;  ///< Offset: 0x20 - Signature start address register
        volatile uint32_t FMSSTOP;  ///< Offset: 0x24 - Signature stop-address register
        volatile uint32_t FMSW0;  ///< Offset: 0x2C - Word 0 [31:0]
        volatile uint32_t FMSW1;  ///< Offset: 0x30 - Word 1 [63:32]
        volatile uint32_t FMSW2;  ///< Offset: 0x34 - Word 2 [95:64]
        volatile uint32_t FMSW3;  ///< Offset: 0x38 - Word 3 [127:96]
        volatile uint32_t FMSTAT;  ///< Offset: 0xFE0 - Signature generation status register
        volatile uint32_t FMSTATCLR;  ///< Offset: 0xFE8 - Signature generation status clear register
    };

    /// Peripheral instances
    inline Registers* FMC = reinterpret_cast<Registers*>(FMC_BASE);

}

// ============================================================================
// SSP0 Peripheral
// ============================================================================

namespace ssp0 {
    /// Base addresses
    constexpr uint32_t SSP0_BASE = 0x40040000;

    /// SSP0 Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - Control Register 0. Selects the serial clock rate, bus...
        volatile uint32_t CR1;  ///< Offset: 0x04 - Control Register 1. Selects master/slave and other modes.
        volatile uint32_t DR;  ///< Offset: 0x08 - Data Register. Writes fill the transmit FIFO, and reads...
        volatile uint32_t SR;  ///< Offset: 0x0C - Status Register.
        volatile uint32_t CPSR;  ///< Offset: 0x10 - Clock Prescale Register.
        volatile uint32_t IMSC;  ///< Offset: 0x14 - Interrupt Mask Set and Clear Register.
        volatile uint32_t RIS;  ///< Offset: 0x18 - Raw Interrupt Status Register.
        volatile uint32_t MIS;  ///< Offset: 0x1C - Masked Interrupt Status Register.
        volatile uint32_t ICR;  ///< Offset: 0x20 - SSPICR Interrupt Clear Register.
    };

    /// Peripheral instances
    inline Registers* SSP0 = reinterpret_cast<Registers*>(SSP0_BASE);

}

// ============================================================================
// IOCON Peripheral
// ============================================================================

namespace iocon {
    /// Base addresses
    constexpr uint32_t IOCON_BASE = 0x40044000;

    /// IOCON Register structure
    struct Registers {
        volatile uint32_t PIO2_6;  ///< Offset: 0x00 - I/O configuration for pin PIO2_6
        volatile uint32_t PIO2_0;  ///< Offset: 0x08 - I/O configuration for pin PIO2_0/DTR/SSEL1
        volatile uint32_t RESET_PIO0_0;  ///< Offset: 0x0C - I/O configuration for pin RESET/PIO0_0
        volatile uint32_t PIO0_1;  ///< Offset: 0x10 - I/O configuration for pin PIO0_1/CLKOUT/ CT32B0_MAT2/USB_FTOGGLE
        volatile uint32_t PIO1_8;  ///< Offset: 0x14 - I/O configuration for pin PIO1_8/CT16B1_CAP0
        volatile uint32_t PIO0_2;  ///< Offset: 0x1C - I/O configuration for pin PIO0_2/SSEL0/ CT16B0_CAP0
        volatile uint32_t PIO2_7;  ///< Offset: 0x20 - I/O configuration for pin PIO2_7
        volatile uint32_t PIO2_8;  ///< Offset: 0x24 - I/O configuration for pin PIO2_8
        volatile uint32_t PIO2_1;  ///< Offset: 0x28 - I/O configuration for pin PIO2_1/DSR/SCK1
        volatile uint32_t PIO0_3;  ///< Offset: 0x2C - I/O configuration for pin PIO0_3/USB_VBUS
        volatile uint32_t PIO0_4;  ///< Offset: 0x30 - I/O configuration for pin PIO0_4/SCL
        volatile uint32_t PIO0_5;  ///< Offset: 0x34 - I/O configuration for pin PIO0_5/SDA
        volatile uint32_t PIO1_9;  ///< Offset: 0x38 - I/O configuration for pin PIO1_9/CT16B1_MAT0
        volatile uint32_t PIO3_4;  ///< Offset: 0x3C - I/O configuration for pin PIO3_4
        volatile uint32_t PIO2_4;  ///< Offset: 0x40 - I/O configuration for pin PIO2_4
        volatile uint32_t PIO2_5;  ///< Offset: 0x44 - I/O configuration for pin PIO2_5
        volatile uint32_t PIO3_5;  ///< Offset: 0x48 - I/O configuration for pin PIO3_5
        volatile uint32_t PIO0_6;  ///< Offset: 0x4C - I/O configuration for pin PIO0_6/USB_CONNECT/SCK
        volatile uint32_t PIO0_7;  ///< Offset: 0x50 - I/O configuration for pin PIO0_7/CTS
        volatile uint32_t PIO2_9;  ///< Offset: 0x54 - I/O configuration for pin PIO2_9
        volatile uint32_t PIO2_10;  ///< Offset: 0x58 - I/O configuration for pin PIO2_10
        volatile uint32_t PIO2_2;  ///< Offset: 0x5C - I/O configuration for pin PIO2_2/DCD/MISO1
        volatile uint32_t PIO0_8;  ///< Offset: 0x60 - I/O configuration for pin PIO0_8/MISO0/CT16B0_MAT0
        volatile uint32_t PIO0_9;  ///< Offset: 0x64 - I/O configuration for pin PIO0_9/MOSI0/ CT16B0_MAT1/SWO
        volatile uint32_t SWCLK_PIO0_10;  ///< Offset: 0x68 - I/O configuration for pin SWCLK/PIO0_10/ SCK/CT16B0_MAT2
        volatile uint32_t PIO1_10;  ///< Offset: 0x6C - I/O configuration for pin PIO1_10/AD6/ CT16B1_MAT1
        volatile uint32_t PIO2_11;  ///< Offset: 0x70 - I/O configuration for pin PIO2_11/SCK
        volatile uint32_t R_PIO0_11;  ///< Offset: 0x74 - I/O configuration for pin R/PIO0_11/AD0/CT32B0_MAT3
        volatile uint32_t R_PIO1_0;  ///< Offset: 0x78 - I/O configuration for pin R/PIO1_0/AD1/ CT32B1_CAP0
        volatile uint32_t R_PIO1_1;  ///< Offset: 0x7C - I/O configuration for pin R/PIO1_1/AD2/CT32B1_MAT0
        volatile uint32_t R_PIO1_2;  ///< Offset: 0x80 - I/O configuration for pin R/PIO1_2/AD3/ CT32B1_MAT1
        volatile uint32_t PIO3_0;  ///< Offset: 0x84 - I/O configuration for pin PIO3_0/DTR
        volatile uint32_t PIO3_1;  ///< Offset: 0x88 - I/O configuration for pin PIO3_1/DSR
        volatile uint32_t PIO2_3;  ///< Offset: 0x8C - I/O configuration for pin PIO2_3/RI/MOSI1
        volatile uint32_t SWDIO_PIO1_3;  ///< Offset: 0x90 - I/O configuration for pin SWDIO/PIO1_3/AD4/ CT32B1_MAT2
        volatile uint32_t PIO1_4;  ///< Offset: 0x94 - I/O configuration for pin PIO1_4/AD5/CT32B1_MAT3
        volatile uint32_t PIO1_11;  ///< Offset: 0x98 - I/O configuration for pin PIO1_11/AD7
        volatile uint32_t PIO3_2;  ///< Offset: 0x9C - I/O configuration for pin PIO3_2/DCD
        volatile uint32_t PIO1_5;  ///< Offset: 0xA0 - I/O configuration for pin PIO1_5/RTS/CT32B0_CAP0
        volatile uint32_t PIO1_6;  ///< Offset: 0xA4 - I/O configuration for pin PIO1_6/RXD/CT32B0_MAT0
        volatile uint32_t PIO1_7;  ///< Offset: 0xA8 - I/O configuration for pin PIO1_7/TXD/CT32B0_MAT1
        volatile uint32_t PIO3_3;  ///< Offset: 0xAC - I/O configuration for pin PIO3_3/RI
        volatile uint32_t SCK0_LOC;  ///< Offset: 0xB0 - SCK0 pin location register
        volatile uint32_t DSR_LOC;  ///< Offset: 0xB4 - DSR pin location select register
        volatile uint32_t DCD_LOC;  ///< Offset: 0xB8 - DCD pin location select register
        volatile uint32_t RI_LOC;  ///< Offset: 0xBC - RI pin location register
    };

    /// Peripheral instances
    inline Registers* IOCON = reinterpret_cast<Registers*>(IOCON_BASE);

}

// ============================================================================
// SYSCON Peripheral
// ============================================================================

namespace syscon {
    /// Base addresses
    constexpr uint32_t SYSCON_BASE = 0x40048000;

    /// SYSCON Register structure
    struct Registers {
        volatile uint32_t SYSMEMREMAP;  ///< Offset: 0x00 - System memory remap
        volatile uint32_t PRESETCTRL;  ///< Offset: 0x04 - Peripheral reset control
        volatile uint32_t SYSPLLCTRL;  ///< Offset: 0x08 - System PLL control
        volatile uint32_t SYSPLLSTAT;  ///< Offset: 0x0C - System PLL status
        volatile uint32_t USBPLLCTRL;  ///< Offset: 0x10 - USB PLL control
        volatile uint32_t USBPLLSTAT;  ///< Offset: 0x14 - USB PLL status
        volatile uint32_t SYSOSCCTRL;  ///< Offset: 0x20 - System oscillator control
        volatile uint32_t WDTOSCCTRL;  ///< Offset: 0x24 - Watchdog oscillator control
        volatile uint32_t IRCCTRL;  ///< Offset: 0x28 - IRC control
        volatile uint32_t SYSRESSTAT;  ///< Offset: 0x30 - System reset status register
        volatile uint32_t SYSPLLCLKSEL;  ///< Offset: 0x40 - System PLL clock source select
        volatile uint32_t SYSPLLCLKUEN;  ///< Offset: 0x44 - System PLL clock source update enable
        volatile uint32_t USBPLLCLKSEL;  ///< Offset: 0x48 - USB PLL clock source select
        volatile uint32_t USBPLLCLKUEN;  ///< Offset: 0x4C - USB PLL clock source update enable
        volatile uint32_t MAINCLKSEL;  ///< Offset: 0x70 - Main clock source select
        volatile uint32_t MAINCLKUEN;  ///< Offset: 0x74 - Main clock source update enable
        volatile uint32_t SYSAHBCLKDIV;  ///< Offset: 0x78 - System AHB clock divider
        volatile uint32_t SYSAHBCLKCTRL;  ///< Offset: 0x80 - System AHB clock control
        volatile uint32_t SSP0CLKDIV;  ///< Offset: 0x94 - SSP clock divder
        volatile uint32_t UARTCLKDIV;  ///< Offset: 0x98 - UART clock divder
        volatile uint32_t SSP1CLKDIV;  ///< Offset: 0x9C - SPISP1 clock divder
        volatile uint32_t TRACECLKDIV;  ///< Offset: 0xAC - ARM trace clock divider
        volatile uint32_t SYSTICKCLKDIV;  ///< Offset: 0xB0 - SYSTICK clock divder
        volatile uint32_t USBCLKSEL;  ///< Offset: 0xC0 - USB clock source select
        volatile uint32_t USBCLKUEN;  ///< Offset: 0xC4 - USB clock source update enable
        volatile uint32_t USBCLKDIV;  ///< Offset: 0xC8 - USB clock source divider
        volatile uint32_t WDTCLKSEL;  ///< Offset: 0xD0 - WDT clock source select
        volatile uint32_t WDTCLKUEN;  ///< Offset: 0xD4 - WDT clock source update enable
        volatile uint32_t WDTCLKDIV;  ///< Offset: 0xD8 - WDT clock divider
        volatile uint32_t CLKOUTCLKSEL;  ///< Offset: 0xE0 - CLKOUT clock source select
        volatile uint32_t CLKOUTUEN;  ///< Offset: 0xE4 - CLKOUT clock source update enable
        volatile uint32_t CLKOUTDIV;  ///< Offset: 0xE8 - CLKOUT clock divider
        volatile uint32_t PIOPORCAP0;  ///< Offset: 0x100 - POR captured PIO status 0
        volatile uint32_t PIOPORCAP1;  ///< Offset: 0x104 - POR captured PIO status 1
        volatile uint32_t BODCTRL;  ///< Offset: 0x150 - BOD control
        volatile uint32_t SYSTCKCAL;  ///< Offset: 0x154 - System tick counter calibration
        volatile uint32_t STARTAPRP0;  ///< Offset: 0x200 - Start logic edge control register 0; bottom 32 interrupts
        volatile uint32_t STARTERP0;  ///< Offset: 0x204 - Start logic signal enable register 0; bottom 32 interrupts
        volatile uint32_t STARTRSRP0CLR;  ///< Offset: 0x208 - Start logic reset register 0; bottom 32 interrupts
        volatile uint32_t STARTSRP0;  ///< Offset: 0x20C - Start logic status register 0; bottom 32 interrupts
        volatile uint32_t STARTAPRP1;  ///< Offset: 0x210 - Start logic edge control register 1; top 8 interrupts
        volatile uint32_t STARTERP1;  ///< Offset: 0x214 - Start logic signal enable register 1; top 8 interrupts
        volatile uint32_t STARTRSRP1CLR;  ///< Offset: 0x218 - Start logic reset register 1; top 8 interrupts
        volatile uint32_t STARTSRP1;  ///< Offset: 0x21C - Start logic status register 1; top 8 interrupts
        volatile uint32_t PDSLEEPCFG;  ///< Offset: 0x230 - Power-down states in Deep-sleep mode
        volatile uint32_t PDAWAKECFG;  ///< Offset: 0x234 - Power-down states after wake-up from Deep-sleep mode
        volatile uint32_t PDRUNCFG;  ///< Offset: 0x238 - Power-down configuration register
        volatile uint32_t DEVICE_ID;  ///< Offset: 0x3F4 - Device ID
    };

    /// Peripheral instances
    inline Registers* SYSCON = reinterpret_cast<Registers*>(SYSCON_BASE);

}

// ============================================================================
// SSP1 Peripheral
// ============================================================================

namespace ssp1 {
    /// Base addresses
    constexpr uint32_t SSP1_BASE = 0x40058000;

    /// SSP1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SSP1 = reinterpret_cast<Registers*>(SSP1_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO0_BASE = 0x50000000;
    constexpr uint32_t GPIO1_BASE = 0x50010000;
    constexpr uint32_t GPIO2_BASE = 0x50020000;
    constexpr uint32_t GPIO3_BASE = 0x50030000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x3FFC - Port n data register for pins PIOn_0 to PIOn_11
        volatile uint32_t DIR;  ///< Offset: 0x8000 - Data direction register for port n
        volatile uint32_t IS;  ///< Offset: 0x8004 - Interrupt sense register for port n
        volatile uint32_t IBE;  ///< Offset: 0x8008 - Interrupt both edges register for port n
        volatile uint32_t IEV;  ///< Offset: 0x800C - Interrupt event register for port n
        volatile uint32_t IE;  ///< Offset: 0x8010 - Interrupt mask register for port n
        volatile uint32_t RIS;  ///< Offset: 0x8014 - Raw interrupt status register for port n
        volatile uint32_t MIS;  ///< Offset: 0x8018 - Masked interrupt status register for port n
        volatile uint32_t IC;  ///< Offset: 0x801C - Interrupt clear register for port n
    };

    /// Peripheral instances
    inline Registers* GPIO0 = reinterpret_cast<Registers*>(GPIO0_BASE);
    inline Registers* GPIO1 = reinterpret_cast<Registers*>(GPIO1_BASE);
    inline Registers* GPIO2 = reinterpret_cast<Registers*>(GPIO2_BASE);
    inline Registers* GPIO3 = reinterpret_cast<Registers*>(GPIO3_BASE);

}


} // namespace alloy::generated::lpc13xx

#endif // ALLOY_GENERATED_LPC13XX_PERIPHERALS_HPP