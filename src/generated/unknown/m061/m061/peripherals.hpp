/// Auto-generated code for M061
/// Generated by Alloy Code Generator
/// Source: toshiba_m061.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:21:42
#ifndef ALLOY_GENERATED_M061_PERIPHERALS_HPP
#define ALLOY_GENERATED_M061_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::m061 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// PA Peripheral
// ============================================================================

namespace pa {
    /// Base addresses
    constexpr uint32_t PA_BASE = 0x400C0000;

    /// PA Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PA Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PA Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PA Function Register 1
        volatile uint32_t OD;  ///< Offset: 0x28 - PA Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PA Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PA Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PA Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PA = reinterpret_cast<Registers*>(PA_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PA0 = (1U << 0);  ///< PA0
        constexpr uint32_t PA1 = (1U << 1);  ///< PA1
        constexpr uint32_t PA2 = (1U << 2);  ///< PA2
        constexpr uint32_t PA3 = (1U << 3);  ///< PA3
        constexpr uint32_t PA4 = (1U << 4);  ///< PA4
        constexpr uint32_t PA5 = (1U << 5);  ///< PA5
        constexpr uint32_t PA6 = (1U << 6);  ///< PA6
        constexpr uint32_t PA7 = (1U << 7);  ///< PA7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PA0C = (1U << 0);  ///< PA0C
        constexpr uint32_t PA1C = (1U << 1);  ///< PA1C
        constexpr uint32_t PA2C = (1U << 2);  ///< PA2C
        constexpr uint32_t PA3C = (1U << 3);  ///< PA3C
        constexpr uint32_t PA4C = (1U << 4);  ///< PA4C
        constexpr uint32_t PA5C = (1U << 5);  ///< PA5C
        constexpr uint32_t PA6C = (1U << 6);  ///< PA6C
        constexpr uint32_t PA7C = (1U << 7);  ///< PA7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PA0F1 = (1U << 0);  ///< PA0F1
        constexpr uint32_t PA1F1 = (1U << 1);  ///< PA1F1
        constexpr uint32_t PA2F1 = (1U << 2);  ///< PA2F1
        constexpr uint32_t PA3F1 = (1U << 3);  ///< PA3F1
        constexpr uint32_t PA4F1 = (1U << 4);  ///< PA4F1
        constexpr uint32_t PA5F1 = (1U << 5);  ///< PA5F1
        constexpr uint32_t PA6F1 = (1U << 6);  ///< PA6F1
        constexpr uint32_t PA7F1 = (1U << 7);  ///< PA7F1
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PA0OD = (1U << 0);  ///< PA0OD
        constexpr uint32_t PA1OD = (1U << 1);  ///< PA1OD
        constexpr uint32_t PA2OD = (1U << 2);  ///< PA2OD
        constexpr uint32_t PA3OD = (1U << 3);  ///< PA3OD
        constexpr uint32_t PA4OD = (1U << 4);  ///< PA4OD
        constexpr uint32_t PA5OD = (1U << 5);  ///< PA5OD
        constexpr uint32_t PA6OD = (1U << 6);  ///< PA6OD
        constexpr uint32_t PA7OD = (1U << 7);  ///< PA7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PA0UP = (1U << 0);  ///< PA0UP
        constexpr uint32_t PA1UP = (1U << 1);  ///< PA1UP
        constexpr uint32_t PA2UP = (1U << 2);  ///< PA2UP
        constexpr uint32_t PA3UP = (1U << 3);  ///< PA3UP
        constexpr uint32_t PA4UP = (1U << 4);  ///< PA4UP
        constexpr uint32_t PA5UP = (1U << 5);  ///< PA5UP
        constexpr uint32_t PA6UP = (1U << 6);  ///< PA6UP
        constexpr uint32_t PA7UP = (1U << 7);  ///< PA7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PA0DN = (1U << 0);  ///< PA0DN
        constexpr uint32_t PA1DN = (1U << 1);  ///< PA1DN
        constexpr uint32_t PA2DN = (1U << 2);  ///< PA2DN
        constexpr uint32_t PA3DN = (1U << 3);  ///< PA3DN
        constexpr uint32_t PA4DN = (1U << 4);  ///< PA4DN
        constexpr uint32_t PA5DN = (1U << 5);  ///< PA5DN
        constexpr uint32_t PA6DN = (1U << 6);  ///< PA6DN
        constexpr uint32_t PA7DN = (1U << 7);  ///< PA7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PA0IE = (1U << 0);  ///< PA0IE
        constexpr uint32_t PA1IE = (1U << 1);  ///< PA1IE
        constexpr uint32_t PA2IE = (1U << 2);  ///< PA2IE
        constexpr uint32_t PA3IE = (1U << 3);  ///< PA3IE
        constexpr uint32_t PA4IE = (1U << 4);  ///< PA4IE
        constexpr uint32_t PA5IE = (1U << 5);  ///< PA5IE
        constexpr uint32_t PA6IE = (1U << 6);  ///< PA6IE
        constexpr uint32_t PA7IE = (1U << 7);  ///< PA7IE
    }

}

// ============================================================================
// PB Peripheral
// ============================================================================

namespace pb {
    /// Base addresses
    constexpr uint32_t PB_BASE = 0x400C0100;

    /// PB Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PB Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PB Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PB Function Register 1
        volatile uint32_t OD;  ///< Offset: 0x28 - PB Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PB Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PB Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PB Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PB = reinterpret_cast<Registers*>(PB_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PB0 = (1U << 0);  ///< PB0
        constexpr uint32_t PB1 = (1U << 1);  ///< PB1
        constexpr uint32_t PB2 = (1U << 2);  ///< PB2
        constexpr uint32_t PB3 = (1U << 3);  ///< PB3
        constexpr uint32_t PB4 = (1U << 4);  ///< PB4
        constexpr uint32_t PB5 = (1U << 5);  ///< PB5
        constexpr uint32_t PB6 = (1U << 6);  ///< PB6
        constexpr uint32_t PB7 = (1U << 7);  ///< PB7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PB0C = (1U << 0);  ///< PB0C
        constexpr uint32_t PB1C = (1U << 1);  ///< PB1C
        constexpr uint32_t PB2C = (1U << 2);  ///< PB2C
        constexpr uint32_t PB3C = (1U << 3);  ///< PB3C
        constexpr uint32_t PB4C = (1U << 4);  ///< PB4C
        constexpr uint32_t PB5C = (1U << 5);  ///< PB5C
        constexpr uint32_t PB6C = (1U << 6);  ///< PB6C
        constexpr uint32_t PB7C = (1U << 7);  ///< PB7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PB0F1 = (1U << 0);  ///< PB0F1
        constexpr uint32_t PB1F1 = (1U << 1);  ///< PB1F1
        constexpr uint32_t PB2F1 = (1U << 2);  ///< PB2F1
        constexpr uint32_t PB3F1 = (1U << 3);  ///< PB3F1
        constexpr uint32_t PB4F1 = (1U << 4);  ///< PB4F1
        constexpr uint32_t PB5F1 = (1U << 5);  ///< PB5F1
        constexpr uint32_t PB6F1 = (1U << 6);  ///< PB6F1
        constexpr uint32_t PB7F1 = (1U << 7);  ///< PB7F1
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PB0OD = (1U << 0);  ///< PB0OD
        constexpr uint32_t PB1OD = (1U << 1);  ///< PB1OD
        constexpr uint32_t PB2OD = (1U << 2);  ///< PB2OD
        constexpr uint32_t PB3OD = (1U << 3);  ///< PB3OD
        constexpr uint32_t PB4OD = (1U << 4);  ///< PB4OD
        constexpr uint32_t PB5OD = (1U << 5);  ///< PB5OD
        constexpr uint32_t PB6OD = (1U << 6);  ///< PB6OD
        constexpr uint32_t PB7OD = (1U << 7);  ///< PB7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PB0UP = (1U << 0);  ///< PB0UP
        constexpr uint32_t PB1UP = (1U << 1);  ///< PB1UP
        constexpr uint32_t PB2UP = (1U << 2);  ///< PB2UP
        constexpr uint32_t PB3UP = (1U << 3);  ///< PB3UP
        constexpr uint32_t PB4UP = (1U << 4);  ///< PB4UP
        constexpr uint32_t PB5UP = (1U << 5);  ///< PB5UP
        constexpr uint32_t PB6UP = (1U << 6);  ///< PB6UP
        constexpr uint32_t PB7UP = (1U << 7);  ///< PB7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PB0DN = (1U << 0);  ///< PB0DN
        constexpr uint32_t PB1DN = (1U << 1);  ///< PB1DN
        constexpr uint32_t PB2DN = (1U << 2);  ///< PB2DN
        constexpr uint32_t PB3DN = (1U << 3);  ///< PB3DN
        constexpr uint32_t PB4DN = (1U << 4);  ///< PB4DN
        constexpr uint32_t PB5DN = (1U << 5);  ///< PB5DN
        constexpr uint32_t PB6DN = (1U << 6);  ///< PB6DN
        constexpr uint32_t PB7DN = (1U << 7);  ///< PB7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PB0IE = (1U << 0);  ///< PB0IE
        constexpr uint32_t PB1IE = (1U << 1);  ///< PB1IE
        constexpr uint32_t PB2IE = (1U << 2);  ///< PB2IE
        constexpr uint32_t PB3IE = (1U << 3);  ///< PB3IE
        constexpr uint32_t PB4IE = (1U << 4);  ///< PB4IE
        constexpr uint32_t PB5IE = (1U << 5);  ///< PB5IE
        constexpr uint32_t PB6IE = (1U << 6);  ///< PB6IE
        constexpr uint32_t PB7IE = (1U << 7);  ///< PB7IE
    }

}

// ============================================================================
// PC Peripheral
// ============================================================================

namespace pc {
    /// Base addresses
    constexpr uint32_t PC_BASE = 0x400C0200;

    /// PC Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PC Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PC Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PC Function Register 1
        volatile uint32_t OD;  ///< Offset: 0x28 - PC Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PC Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PC Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PC Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PC = reinterpret_cast<Registers*>(PC_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PC0 = (1U << 0);  ///< PC0
        constexpr uint32_t PC1 = (1U << 1);  ///< PC1
        constexpr uint32_t PC2 = (1U << 2);  ///< PC2
        constexpr uint32_t PC3 = (1U << 3);  ///< PC3
        constexpr uint32_t PC4 = (1U << 4);  ///< PC4
        constexpr uint32_t PC5 = (1U << 5);  ///< PC5
        constexpr uint32_t PC6 = (1U << 6);  ///< PC6
        constexpr uint32_t PC7 = (1U << 7);  ///< PC7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PC0C = (1U << 0);  ///< PC0C
        constexpr uint32_t PC1C = (1U << 1);  ///< PC1C
        constexpr uint32_t PC2C = (1U << 2);  ///< PC2C
        constexpr uint32_t PC3C = (1U << 3);  ///< PC3C
        constexpr uint32_t PC4C = (1U << 4);  ///< PC4C
        constexpr uint32_t PC5C = (1U << 5);  ///< PC5C
        constexpr uint32_t PC6C = (1U << 6);  ///< PC6C
        constexpr uint32_t PC7C = (1U << 7);  ///< PC7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PC0F1 = (1U << 0);  ///< PC0F1
        constexpr uint32_t PC1F1 = (1U << 1);  ///< PC1F1
        constexpr uint32_t PC2F1 = (1U << 2);  ///< PC2F1
        constexpr uint32_t PC3F1 = (1U << 3);  ///< PC3F1
        constexpr uint32_t PC4F1 = (1U << 4);  ///< PC4F1
        constexpr uint32_t PC5F1 = (1U << 5);  ///< PC5F1
        constexpr uint32_t PC6F1 = (1U << 6);  ///< PC6F1
        constexpr uint32_t PC7F1 = (1U << 7);  ///< PC7F1
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PC0OD = (1U << 0);  ///< PC0OD
        constexpr uint32_t PC1OD = (1U << 1);  ///< PC1OD
        constexpr uint32_t PC2OD = (1U << 2);  ///< PC2OD
        constexpr uint32_t PC3OD = (1U << 3);  ///< PC3OD
        constexpr uint32_t PC4OD = (1U << 4);  ///< PC4OD
        constexpr uint32_t PC5OD = (1U << 5);  ///< PC5OD
        constexpr uint32_t PC6OD = (1U << 6);  ///< PC6OD
        constexpr uint32_t PC7OD = (1U << 7);  ///< PC7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PC0UP = (1U << 0);  ///< PC0UP
        constexpr uint32_t PC1UP = (1U << 1);  ///< PC1UP
        constexpr uint32_t PC2UP = (1U << 2);  ///< PC2UP
        constexpr uint32_t PC3UP = (1U << 3);  ///< PC3UP
        constexpr uint32_t PC4UP = (1U << 4);  ///< PC4UP
        constexpr uint32_t PC5UP = (1U << 5);  ///< PC5UP
        constexpr uint32_t PC6UP = (1U << 6);  ///< PC6UP
        constexpr uint32_t PC7UP = (1U << 7);  ///< PC7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PC0DN = (1U << 0);  ///< PC0DN
        constexpr uint32_t PC1DN = (1U << 1);  ///< PC1DN
        constexpr uint32_t PC2DN = (1U << 2);  ///< PC2DN
        constexpr uint32_t PC3DN = (1U << 3);  ///< PC3DN
        constexpr uint32_t PC4DN = (1U << 4);  ///< PC4DN
        constexpr uint32_t PC5DN = (1U << 5);  ///< PC5DN
        constexpr uint32_t PC6DN = (1U << 6);  ///< PC6DN
        constexpr uint32_t PC7DN = (1U << 7);  ///< PC7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PC0IE = (1U << 0);  ///< PC0IE
        constexpr uint32_t PC1IE = (1U << 1);  ///< PC1IE
        constexpr uint32_t PC2IE = (1U << 2);  ///< PC2IE
        constexpr uint32_t PC3IE = (1U << 3);  ///< PC3IE
        constexpr uint32_t PC4IE = (1U << 4);  ///< PC4IE
        constexpr uint32_t PC5IE = (1U << 5);  ///< PC5IE
        constexpr uint32_t PC6IE = (1U << 6);  ///< PC6IE
        constexpr uint32_t PC7IE = (1U << 7);  ///< PC7IE
    }

}

// ============================================================================
// PD Peripheral
// ============================================================================

namespace pd {
    /// Base addresses
    constexpr uint32_t PD_BASE = 0x400C0300;

    /// PD Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PD Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PD Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PD Function Register 1
        volatile uint32_t OD;  ///< Offset: 0x28 - PD Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PD Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PD Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PD Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PD = reinterpret_cast<Registers*>(PD_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PD0 = (1U << 0);  ///< PD0
        constexpr uint32_t PD1 = (1U << 1);  ///< PD1
        constexpr uint32_t PD2 = (1U << 2);  ///< PD2
        constexpr uint32_t PD3 = (1U << 3);  ///< PD3
        constexpr uint32_t PD4 = (1U << 4);  ///< PD4
        constexpr uint32_t PD5 = (1U << 5);  ///< PD5
        constexpr uint32_t PD6 = (1U << 6);  ///< PD6
        constexpr uint32_t PD7 = (1U << 7);  ///< PD7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PD0C = (1U << 0);  ///< PD0C
        constexpr uint32_t PD1C = (1U << 1);  ///< PD1C
        constexpr uint32_t PD2C = (1U << 2);  ///< PD2C
        constexpr uint32_t PD3C = (1U << 3);  ///< PD3C
        constexpr uint32_t PD4C = (1U << 4);  ///< PD4C
        constexpr uint32_t PD5C = (1U << 5);  ///< PD5C
        constexpr uint32_t PD6C = (1U << 6);  ///< PD6C
        constexpr uint32_t PD7C = (1U << 7);  ///< PD7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PD0F1 = (1U << 0);  ///< PD0F1
        constexpr uint32_t PD1F1 = (1U << 1);  ///< PD1F1
        constexpr uint32_t PD2F1 = (1U << 2);  ///< PD2F1
        constexpr uint32_t PD3F1 = (1U << 3);  ///< PD3F1
        constexpr uint32_t PD4F1 = (1U << 4);  ///< PD4F1
        constexpr uint32_t PD5F1 = (1U << 5);  ///< PD5F1
        constexpr uint32_t PD6F1 = (1U << 6);  ///< PD6F1
        constexpr uint32_t PD7F1 = (1U << 7);  ///< PD7F1
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PD0OD = (1U << 0);  ///< PD0OD
        constexpr uint32_t PD1OD = (1U << 1);  ///< PD1OD
        constexpr uint32_t PD2OD = (1U << 2);  ///< PD2OD
        constexpr uint32_t PD3OD = (1U << 3);  ///< PD3OD
        constexpr uint32_t PD4OD = (1U << 4);  ///< PD4OD
        constexpr uint32_t PD5OD = (1U << 5);  ///< PD5OD
        constexpr uint32_t PD6OD = (1U << 6);  ///< PD6OD
        constexpr uint32_t PD7OD = (1U << 7);  ///< PD7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PD0UP = (1U << 0);  ///< PD0UP
        constexpr uint32_t PD1UP = (1U << 1);  ///< PD1UP
        constexpr uint32_t PD2UP = (1U << 2);  ///< PD2UP
        constexpr uint32_t PD3UP = (1U << 3);  ///< PD3UP
        constexpr uint32_t PD4UP = (1U << 4);  ///< PD4UP
        constexpr uint32_t PD5UP = (1U << 5);  ///< PD5UP
        constexpr uint32_t PD6UP = (1U << 6);  ///< PD6UP
        constexpr uint32_t PD7UP = (1U << 7);  ///< PD7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PD0DN = (1U << 0);  ///< PD0DN
        constexpr uint32_t PD1DN = (1U << 1);  ///< PD1DN
        constexpr uint32_t PD2DN = (1U << 2);  ///< PD2DN
        constexpr uint32_t PD3DN = (1U << 3);  ///< PD3DN
        constexpr uint32_t PD4DN = (1U << 4);  ///< PD4DN
        constexpr uint32_t PD5DN = (1U << 5);  ///< PD5DN
        constexpr uint32_t PD6DN = (1U << 6);  ///< PD6DN
        constexpr uint32_t PD7DN = (1U << 7);  ///< PD7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PD0IE = (1U << 0);  ///< PD0IE
        constexpr uint32_t PD1IE = (1U << 1);  ///< PD1IE
        constexpr uint32_t PD2IE = (1U << 2);  ///< PD2IE
        constexpr uint32_t PD3IE = (1U << 3);  ///< PD3IE
        constexpr uint32_t PD4IE = (1U << 4);  ///< PD4IE
        constexpr uint32_t PD5IE = (1U << 5);  ///< PD5IE
        constexpr uint32_t PD6IE = (1U << 6);  ///< PD6IE
        constexpr uint32_t PD7IE = (1U << 7);  ///< PD7IE
    }

}

// ============================================================================
// PE Peripheral
// ============================================================================

namespace pe {
    /// Base addresses
    constexpr uint32_t PE_BASE = 0x400C0400;

    /// PE Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PE Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PE Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PE Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PE Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PE Function Register 3
        volatile uint32_t OD;  ///< Offset: 0x28 - PE Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PE Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PE Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PE Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PE = reinterpret_cast<Registers*>(PE_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PE0 = (1U << 0);  ///< PE0
        constexpr uint32_t PE1 = (1U << 1);  ///< PE1
        constexpr uint32_t PE2 = (1U << 2);  ///< PE2
        constexpr uint32_t PE3 = (1U << 3);  ///< PE3
        constexpr uint32_t PE4 = (1U << 4);  ///< PE4
        constexpr uint32_t PE5 = (1U << 5);  ///< PE5
        constexpr uint32_t PE6 = (1U << 6);  ///< PE6
        constexpr uint32_t PE7 = (1U << 7);  ///< PE7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PE0C = (1U << 0);  ///< PE0C
        constexpr uint32_t PE1C = (1U << 1);  ///< PE1C
        constexpr uint32_t PE2C = (1U << 2);  ///< PE2C
        constexpr uint32_t PE3C = (1U << 3);  ///< PE3C
        constexpr uint32_t PE4C = (1U << 4);  ///< PE4C
        constexpr uint32_t PE5C = (1U << 5);  ///< PE5C
        constexpr uint32_t PE6C = (1U << 6);  ///< PE6C
        constexpr uint32_t PE7C = (1U << 7);  ///< PE7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PE0F1 = (1U << 0);  ///< PE0F1
        constexpr uint32_t PE1F1 = (1U << 1);  ///< PE1F1
        constexpr uint32_t PE2F1 = (1U << 2);  ///< PE2F1
        constexpr uint32_t PE3F1 = (1U << 3);  ///< PE3F1
        constexpr uint32_t PE4F1 = (1U << 4);  ///< PE4F1
        constexpr uint32_t PE5F1 = (1U << 5);  ///< PE5F1
        constexpr uint32_t PE6F1 = (1U << 6);  ///< PE6F1
        constexpr uint32_t PE7F1 = (1U << 7);  ///< PE7F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PE0F2 = (1U << 0);  ///< PE0F2
        constexpr uint32_t PE1F2 = (1U << 1);  ///< PE1F2
        constexpr uint32_t PE2F2 = (1U << 2);  ///< PE2F2
        constexpr uint32_t PE3F2 = (1U << 3);  ///< PE3F2
        constexpr uint32_t PE4F2 = (1U << 4);  ///< PE4F2
        constexpr uint32_t PE5F2 = (1U << 5);  ///< PE5F2
        constexpr uint32_t PE6F2 = (1U << 6);  ///< PE6F2
        constexpr uint32_t PE7F2 = (1U << 7);  ///< PE7F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PE3F3 = (1U << 3);  ///< PE3F3
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PE0OD = (1U << 0);  ///< PE0OD
        constexpr uint32_t PE1OD = (1U << 1);  ///< PE1OD
        constexpr uint32_t PE2OD = (1U << 2);  ///< PE2OD
        constexpr uint32_t PE3OD = (1U << 3);  ///< PE3OD
        constexpr uint32_t PE4OD = (1U << 4);  ///< PE4OD
        constexpr uint32_t PE5OD = (1U << 5);  ///< PE5OD
        constexpr uint32_t PE6OD = (1U << 6);  ///< PE6OD
        constexpr uint32_t PE7OD = (1U << 7);  ///< PE7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PE0UP = (1U << 0);  ///< PE0UP
        constexpr uint32_t PE1UP = (1U << 1);  ///< PE1UP
        constexpr uint32_t PE2UP = (1U << 2);  ///< PE2UP
        constexpr uint32_t PE3UP = (1U << 3);  ///< PE3UP
        constexpr uint32_t PE4UP = (1U << 4);  ///< PE4UP
        constexpr uint32_t PE5UP = (1U << 5);  ///< PE5UP
        constexpr uint32_t PE6UP = (1U << 6);  ///< PE6UP
        constexpr uint32_t PE7UP = (1U << 7);  ///< PE7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PE0DN = (1U << 0);  ///< PE0DN
        constexpr uint32_t PE1DN = (1U << 1);  ///< PE1DN
        constexpr uint32_t PE2DN = (1U << 2);  ///< PE2DN
        constexpr uint32_t PE3DN = (1U << 3);  ///< PE3DN
        constexpr uint32_t PE4DN = (1U << 4);  ///< PE4DN
        constexpr uint32_t PE5DN = (1U << 5);  ///< PE5DN
        constexpr uint32_t PE6DN = (1U << 6);  ///< PE6DN
        constexpr uint32_t PE7DN = (1U << 7);  ///< PE7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PE0IE = (1U << 0);  ///< PE0IE
        constexpr uint32_t PE1IE = (1U << 1);  ///< PE1IE
        constexpr uint32_t PE2IE = (1U << 2);  ///< PE2IE
        constexpr uint32_t PE3IE = (1U << 3);  ///< PE3IE
        constexpr uint32_t PE4IE = (1U << 4);  ///< PE4IE
        constexpr uint32_t PE5IE = (1U << 5);  ///< PE5IE
        constexpr uint32_t PE6IE = (1U << 6);  ///< PE6IE
        constexpr uint32_t PE7IE = (1U << 7);  ///< PE7IE
    }

}

// ============================================================================
// PF Peripheral
// ============================================================================

namespace pf {
    /// Base addresses
    constexpr uint32_t PF_BASE = 0x400C0500;

    /// PF Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PF Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PF Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PF Function Register 1
        volatile uint32_t OD;  ///< Offset: 0x28 - PF Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PF Pull-Up Control Register
        volatile uint32_t PFN;  ///< Offset: 0x30 - PF Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PF Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PF = reinterpret_cast<Registers*>(PF_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PF0 = (1U << 0);  ///< PF0
        constexpr uint32_t PF1 = (1U << 1);  ///< PF1
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PF0C = (1U << 0);  ///< PF0C
        constexpr uint32_t PF1C = (1U << 1);  ///< PF1C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PF1F1 = (1U << 1);  ///< PF1F1
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PF0OD = (1U << 0);  ///< PF0OD
        constexpr uint32_t PF1OD = (1U << 1);  ///< PF1OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PF0UP = (1U << 0);  ///< PF0UP
        constexpr uint32_t PF1UP = (1U << 1);  ///< PF1UP
    }

    /// PFN Register bits
    namespace pfn_bits {
        constexpr uint32_t PF0DN = (1U << 0);  ///< PF0DN
        constexpr uint32_t PF1DN = (1U << 1);  ///< PF1DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PF0IE = (1U << 0);  ///< PF0IE
        constexpr uint32_t PF1IE = (1U << 1);  ///< PF1IE
    }

}

// ============================================================================
// PG Peripheral
// ============================================================================

namespace pg {
    /// Base addresses
    constexpr uint32_t PG_BASE = 0x400C0600;

    /// PG Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PG Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PG Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PG Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PG Function Register 2
        volatile uint32_t OD;  ///< Offset: 0x28 - PG Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PG Pull-Up Control Register
        volatile uint32_t PGN;  ///< Offset: 0x30 - PG Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PG Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PG = reinterpret_cast<Registers*>(PG_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PG0 = (1U << 0);  ///< PG0
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PG0C = (1U << 0);  ///< PG0C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PG0F1 = (1U << 0);  ///< PG0F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PG0F2 = (1U << 0);  ///< PG0F2
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PG0OD = (1U << 0);  ///< PG0OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PG0UP = (1U << 0);  ///< PG0UP
    }

    /// PGN Register bits
    namespace pgn_bits {
        constexpr uint32_t PG0DN = (1U << 0);  ///< PG0DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PG0IE = (1U << 0);  ///< PG0IE
    }

}

// ============================================================================
// PH Peripheral
// ============================================================================

namespace ph {
    /// Base addresses
    constexpr uint32_t PH_BASE = 0x400C0700;

    /// PH Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PH Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PH Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PH Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PH Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PH Function Register 3
        volatile uint32_t OD;  ///< Offset: 0x28 - PH OPHn Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PH Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PH Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PH Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PH = reinterpret_cast<Registers*>(PH_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PH0 = (1U << 0);  ///< PH0
        constexpr uint32_t PH1 = (1U << 1);  ///< PH1
        constexpr uint32_t PH2 = (1U << 2);  ///< PH2
        constexpr uint32_t PH3 = (1U << 3);  ///< PH3
        constexpr uint32_t PH4 = (1U << 4);  ///< PH4
        constexpr uint32_t PH5 = (1U << 5);  ///< PH5
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PH0C = (1U << 0);  ///< PH0C
        constexpr uint32_t PH1C = (1U << 1);  ///< PH1C
        constexpr uint32_t PH2C = (1U << 2);  ///< PH2C
        constexpr uint32_t PH3C = (1U << 3);  ///< PH3C
        constexpr uint32_t PH4C = (1U << 4);  ///< PH4C
        constexpr uint32_t PH5C = (1U << 5);  ///< PH5C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PH0F1 = (1U << 0);  ///< PH0F1
        constexpr uint32_t PH1F1 = (1U << 1);  ///< PH1F1
        constexpr uint32_t PH2F1 = (1U << 2);  ///< PH2F1
        constexpr uint32_t PH3F1 = (1U << 3);  ///< PH3F1
        constexpr uint32_t PH4F1 = (1U << 4);  ///< PH4F1
        constexpr uint32_t PH5F1 = (1U << 5);  ///< PH5F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PH0F2 = (1U << 0);  ///< PH0F2
        constexpr uint32_t PH2F2 = (1U << 2);  ///< PH2F2
        constexpr uint32_t PH3F2 = (1U << 3);  ///< PH3F2
        constexpr uint32_t PH5F2 = (1U << 5);  ///< PH5F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PH2F3 = (1U << 2);  ///< PH2F3
        constexpr uint32_t PH5F3 = (1U << 5);  ///< PH5F3
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PH0OD = (1U << 0);  ///< PH0OD
        constexpr uint32_t PH1OD = (1U << 1);  ///< PH1OD
        constexpr uint32_t PH2OD = (1U << 2);  ///< PH2OD
        constexpr uint32_t PH3OD = (1U << 3);  ///< PH3OD
        constexpr uint32_t PH4OD = (1U << 4);  ///< PH4OD
        constexpr uint32_t PH5OD = (1U << 5);  ///< PH5OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PH0UP = (1U << 0);  ///< PH0UP
        constexpr uint32_t PH1UP = (1U << 1);  ///< PH1UP
        constexpr uint32_t PH2UP = (1U << 2);  ///< PH2UP
        constexpr uint32_t PH3UP = (1U << 3);  ///< PH3UP
        constexpr uint32_t PH4UP = (1U << 4);  ///< PH4UP
        constexpr uint32_t PH5UP = (1U << 5);  ///< PH5UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PH0DN = (1U << 0);  ///< PH0DN
        constexpr uint32_t PH1DN = (1U << 1);  ///< PH1DN
        constexpr uint32_t PH2DN = (1U << 2);  ///< PH2DN
        constexpr uint32_t PH3DN = (1U << 3);  ///< PH3DN
        constexpr uint32_t PH4DN = (1U << 4);  ///< PH4DN
        constexpr uint32_t PH5DN = (1U << 5);  ///< PH5DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PH0IE = (1U << 0);  ///< PH0IE
        constexpr uint32_t PH1IE = (1U << 1);  ///< PH1IE
        constexpr uint32_t PH2IE = (1U << 2);  ///< PH2IE
        constexpr uint32_t PH3IE = (1U << 3);  ///< PH3IE
        constexpr uint32_t PH4IE = (1U << 4);  ///< PH4IE
        constexpr uint32_t PH5IE = (1U << 5);  ///< PH5IE
    }

}

// ============================================================================
// PI Peripheral
// ============================================================================

namespace pi {
    /// Base addresses
    constexpr uint32_t PI_BASE = 0x400C0800;

    /// PI Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PI Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PI Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PI Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PI Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PI Function Register 3
        volatile uint32_t OD;  ///< Offset: 0x28 - PI OPIn Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PI Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PI Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PI Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PI = reinterpret_cast<Registers*>(PI_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PI0 = (1U << 0);  ///< PI0
        constexpr uint32_t PI1 = (1U << 1);  ///< PI1
        constexpr uint32_t PI2 = (1U << 2);  ///< PI2
        constexpr uint32_t PI3 = (1U << 3);  ///< PI3
        constexpr uint32_t PI4 = (1U << 4);  ///< PI4
        constexpr uint32_t PI5 = (1U << 5);  ///< PI5
        constexpr uint32_t PI6 = (1U << 6);  ///< PI6
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PI0C = (1U << 0);  ///< PI0C
        constexpr uint32_t PI1C = (1U << 1);  ///< PI1C
        constexpr uint32_t PI2C = (1U << 2);  ///< PI2C
        constexpr uint32_t PI3C = (1U << 3);  ///< PI3C
        constexpr uint32_t PI4C = (1U << 4);  ///< PI4C
        constexpr uint32_t PI5C = (1U << 5);  ///< PI5C
        constexpr uint32_t PI6C = (1U << 6);  ///< PI6C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PI0F1 = (1U << 0);  ///< PI0F1
        constexpr uint32_t PI1F1 = (1U << 1);  ///< PI1F1
        constexpr uint32_t PI2F1 = (1U << 2);  ///< PI2F1
        constexpr uint32_t PI3F1 = (1U << 3);  ///< PI3F1
        constexpr uint32_t PI4F1 = (1U << 4);  ///< PI4F1
        constexpr uint32_t PI5F1 = (1U << 5);  ///< PI5F1
        constexpr uint32_t PI6F1 = (1U << 6);  ///< PI6F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PI0F2 = (1U << 0);  ///< PI0F2
        constexpr uint32_t PI2F2 = (1U << 2);  ///< PI2F2
        constexpr uint32_t PI6F2 = (1U << 6);  ///< PI6F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PI2F3 = (1U << 2);  ///< PI2F3
        constexpr uint32_t PI6F3 = (1U << 6);  ///< PI6F3
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PI0OD = (1U << 0);  ///< PI0OD
        constexpr uint32_t PI1OD = (1U << 1);  ///< PI1OD
        constexpr uint32_t PI2OD = (1U << 2);  ///< PI2OD
        constexpr uint32_t PI3OD = (1U << 3);  ///< PI3OD
        constexpr uint32_t PI4OD = (1U << 4);  ///< PI4OD
        constexpr uint32_t PI5OD = (1U << 5);  ///< PI5OD
        constexpr uint32_t PI6OD = (1U << 6);  ///< PI6OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PI0UP = (1U << 0);  ///< PI0UP
        constexpr uint32_t PI1UP = (1U << 1);  ///< PI1UP
        constexpr uint32_t PI2UP = (1U << 2);  ///< PI2UP
        constexpr uint32_t PI3UP = (1U << 3);  ///< PI3UP
        constexpr uint32_t PI4UP = (1U << 4);  ///< PI4UP
        constexpr uint32_t PI5UP = (1U << 5);  ///< PI5UP
        constexpr uint32_t PI6UP = (1U << 6);  ///< PI6UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PI0DN = (1U << 0);  ///< PI0DN
        constexpr uint32_t PI1DN = (1U << 1);  ///< PI1DN
        constexpr uint32_t PI2DN = (1U << 2);  ///< PI2DN
        constexpr uint32_t PI3DN = (1U << 3);  ///< PI3DN
        constexpr uint32_t PI4DN = (1U << 4);  ///< PI4DN
        constexpr uint32_t PI5DN = (1U << 5);  ///< PI5DN
        constexpr uint32_t PI6DN = (1U << 6);  ///< PI6DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PI0IE = (1U << 0);  ///< PI0IE
        constexpr uint32_t PI1IE = (1U << 1);  ///< PI1IE
        constexpr uint32_t PI2IE = (1U << 2);  ///< PI2IE
        constexpr uint32_t PI3IE = (1U << 3);  ///< PI3IE
        constexpr uint32_t PI4IE = (1U << 4);  ///< PI4IE
        constexpr uint32_t PI5IE = (1U << 5);  ///< PI5IE
        constexpr uint32_t PI6IE = (1U << 6);  ///< PI6IE
    }

}

// ============================================================================
// PJ Peripheral
// ============================================================================

namespace pj {
    /// Base addresses
    constexpr uint32_t PJ_BASE = 0x400C0900;

    /// PJ Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PJ Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PJ Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PJ Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PJ Function Register 2
        volatile uint32_t OD;  ///< Offset: 0x28 - PJ OPJn Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PJ Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PJ Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PJ Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PJ = reinterpret_cast<Registers*>(PJ_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PJ0 = (1U << 0);  ///< PJ0
        constexpr uint32_t PJ1 = (1U << 1);  ///< PJ1
        constexpr uint32_t PJ2 = (1U << 2);  ///< PJ2
        constexpr uint32_t PJ3 = (1U << 3);  ///< PJ3
        constexpr uint32_t PJ4 = (1U << 4);  ///< PJ4
        constexpr uint32_t PJ5 = (1U << 5);  ///< PJ5
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PJ0C = (1U << 0);  ///< PJ0C
        constexpr uint32_t PJ1C = (1U << 1);  ///< PJ1C
        constexpr uint32_t PJ2C = (1U << 2);  ///< PJ2C
        constexpr uint32_t PJ3C = (1U << 3);  ///< PJ3C
        constexpr uint32_t PJ4C = (1U << 4);  ///< PJ4C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PJ0F1 = (1U << 0);  ///< PJ0F1
        constexpr uint32_t PJ1F1 = (1U << 1);  ///< PJ1F1
        constexpr uint32_t PJ2F1 = (1U << 2);  ///< PJ2F1
        constexpr uint32_t PJ3F1 = (1U << 3);  ///< PJ3F1
        constexpr uint32_t PJ4F1 = (1U << 4);  ///< PJ4F1
        constexpr uint32_t PJ5F1 = (1U << 5);  ///< PJ5F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PJ2F2 = (1U << 2);  ///< PJ2F2
        constexpr uint32_t PJ4F2 = (1U << 4);  ///< PJ4F2
        constexpr uint32_t PJ5F2 = (1U << 5);  ///< PJ5F2
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PJ0OD = (1U << 0);  ///< PJ0OD
        constexpr uint32_t PJ1OD = (1U << 1);  ///< PJ1OD
        constexpr uint32_t PJ2OD = (1U << 2);  ///< PJ2OD
        constexpr uint32_t PJ3OD = (1U << 3);  ///< PJ3OD
        constexpr uint32_t PJ4OD = (1U << 4);  ///< PJ4OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PJ0UP = (1U << 0);  ///< PJ0UP
        constexpr uint32_t PJ1UP = (1U << 1);  ///< PJ1UP
        constexpr uint32_t PJ2UP = (1U << 2);  ///< PJ2UP
        constexpr uint32_t PJ3UP = (1U << 3);  ///< PJ3UP
        constexpr uint32_t PJ4UP = (1U << 4);  ///< PJ4UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PJ0DN = (1U << 0);  ///< PJ0DN
        constexpr uint32_t PJ1DN = (1U << 1);  ///< PJ1DN
        constexpr uint32_t PJ2DN = (1U << 2);  ///< PJ2DN
        constexpr uint32_t PJ3DN = (1U << 3);  ///< PJ3DN
        constexpr uint32_t PJ4DN = (1U << 4);  ///< PJ4DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PJ0IE = (1U << 0);  ///< PJ0IE
        constexpr uint32_t PJ1IE = (1U << 1);  ///< PJ1IE
        constexpr uint32_t PJ2IE = (1U << 2);  ///< PJ2IE
        constexpr uint32_t PJ3IE = (1U << 3);  ///< PJ3IE
        constexpr uint32_t PJ4IE = (1U << 4);  ///< PJ4IE
        constexpr uint32_t PJ5IE = (1U << 5);  ///< PJ5IE
    }

}

// ============================================================================
// PK Peripheral
// ============================================================================

namespace pk {
    /// Base addresses
    constexpr uint32_t PK_BASE = 0x400C0A00;

    /// PK Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PK Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PK Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PK Function Register 1
        volatile uint32_t OD;  ///< Offset: 0x28 - PK Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PK Pull-Up Control Register
        volatile uint32_t PKN;  ///< Offset: 0x30 - PK Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PK Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PK = reinterpret_cast<Registers*>(PK_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PK0 = (1U << 0);  ///< PK0
        constexpr uint32_t PK1 = (1U << 1);  ///< PK1
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PK0C = (1U << 0);  ///< PK0C
        constexpr uint32_t PK1C = (1U << 1);  ///< PK1C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PK0F1 = (1U << 0);  ///< PK0F1
        constexpr uint32_t PK1F1 = (1U << 1);  ///< PK1F1
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PK0OD = (1U << 0);  ///< PK0OD
        constexpr uint32_t PK1OD = (1U << 1);  ///< PK1OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PK0UP = (1U << 0);  ///< PK0UP
        constexpr uint32_t PK1UP = (1U << 1);  ///< PK1UP
    }

    /// PKN Register bits
    namespace pkn_bits {
        constexpr uint32_t PK0DN = (1U << 0);  ///< PK0DN
        constexpr uint32_t PK1DN = (1U << 1);  ///< PK1DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PK0IE = (1U << 0);  ///< PK0IE
        constexpr uint32_t PK1IE = (1U << 1);  ///< PK1IE
    }

}

// ============================================================================
// TB0 Peripheral
// ============================================================================

namespace tb0 {
    /// Base addresses
    constexpr uint32_t TB0_BASE = 0x400C4000;

    /// TB0 Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - TB Enable Register
        volatile uint32_t RUN;  ///< Offset: 0x04 - TB RUN Register
        volatile uint32_t CR;  ///< Offset: 0x08 - TB Control Register
        volatile uint32_t MOD;  ///< Offset: 0x0C - TB Mode Register
        volatile uint32_t FFCR;  ///< Offset: 0x10 - TB Flip-Flop Control Register
        volatile uint32_t ST;  ///< Offset: 0x14 - TB Status Register
        volatile uint32_t IM;  ///< Offset: 0x18 - TB Interrupt Mask Register
        volatile uint32_t UC;  ///< Offset: 0x1C - TB Read Capture Register
        volatile uint32_t RG0;  ///< Offset: 0x20 - TB RG0 Timer Register
        volatile uint32_t RG1;  ///< Offset: 0x24 - TB RG1 Timer Register
        volatile uint32_t CP0;  ///< Offset: 0x28 - TB CP0 Capture Register
        volatile uint32_t CP1;  ///< Offset: 0x2C - TB CP1 Capture Register
    };

    /// Peripheral instances
    inline Registers* TB0 = reinterpret_cast<Registers*>(TB0_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t TBHALT = (1U << 6);  ///< TBHALT
        constexpr uint32_t TBEN = (1U << 7);  ///< TBEN
    }

    /// RUN Register bits
    namespace run_bits {
        constexpr uint32_t TBRUN = (1U << 0);  ///< TBRUN
        constexpr uint32_t TBPRUN = (1U << 2);  ///< TBPRUN
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t CSSEL = (1U << 0);  ///< CSSEL
        constexpr uint32_t TRGSEL = (1U << 1);  ///< TRGSEL
        constexpr uint32_t TBINSEL = (1U << 2);  ///< TBINSEL
        constexpr uint32_t I2TB = (1U << 3);  ///< I2TB
        constexpr uint32_t TBSYNC = (1U << 5);  ///< TBSYNC
        constexpr uint32_t TBWBF = (1U << 7);  ///< TBWBF
    }

    /// MOD Register bits
    namespace mod_bits {
        constexpr uint32_t TBCLK = (3 << 0);  ///< TBCLK
        constexpr uint32_t TBCLE = (1U << 3);  ///< TBCLE
        constexpr uint32_t TBCPM = (2 << 4);  ///< TBCPM
        constexpr uint32_t TBCP = (1U << 6);  ///< TBCP
    }

    /// FFCR Register bits
    namespace ffcr_bits {
        constexpr uint32_t TBFF0C = (2 << 0);  ///< TBFF0C
        constexpr uint32_t TBE0T1 = (1U << 2);  ///< TBE0T1
        constexpr uint32_t TBE1T1 = (1U << 3);  ///< TBE1T1
        constexpr uint32_t TBC0T1 = (1U << 4);  ///< TBC0T1
        constexpr uint32_t TBC1T1 = (1U << 5);  ///< TBC1T1
    }

    /// ST Register bits
    namespace st_bits {
        constexpr uint32_t INTTB0 = (1U << 0);  ///< INTTB0
        constexpr uint32_t INTTB1 = (1U << 1);  ///< INTTB1
        constexpr uint32_t INTTBOF = (1U << 2);  ///< INTTBOF
    }

    /// IM Register bits
    namespace im_bits {
        constexpr uint32_t TBIM0 = (1U << 0);  ///< TBIM0
        constexpr uint32_t TBIM1 = (1U << 1);  ///< TBIM1
        constexpr uint32_t TBIMOF = (1U << 2);  ///< TBIMOF
    }

    /// UC Register bits
    namespace uc_bits {
        constexpr uint32_t UC = (16 << 0);  ///< UC
    }

    /// RG0 Register bits
    namespace rg0_bits {
        constexpr uint32_t TBRG0 = (16 << 0);  ///< TBRG0
    }

    /// RG1 Register bits
    namespace rg1_bits {
        constexpr uint32_t TBRG1 = (16 << 0);  ///< TBRG1
    }

    /// CP0 Register bits
    namespace cp0_bits {
        constexpr uint32_t TBCP0 = (16 << 0);  ///< TBCP0
    }

    /// CP1 Register bits
    namespace cp1_bits {
        constexpr uint32_t TBCP1 = (16 << 0);  ///< TBCP1
    }

}

// ============================================================================
// TB1 Peripheral
// ============================================================================

namespace tb1 {
    /// Base addresses
    constexpr uint32_t TB1_BASE = 0x440C4100;

    /// TB1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB1 = reinterpret_cast<Registers*>(TB1_BASE);

}

// ============================================================================
// T16A0 Peripheral
// ============================================================================

namespace t16a0 {
    /// Base addresses
    constexpr uint32_t T16A0_BASE = 0x4008D000;

    /// T16A0 Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - Enable Register
        volatile uint32_t RUN;  ///< Offset: 0x04 - RUN Register
        volatile uint32_t CR;  ///< Offset: 0x08 - Control Register
        volatile uint32_t RG;  ///< Offset: 0x0C - Timer Register
        volatile uint32_t CP;  ///< Offset: 0x10 - Capture Register
    };

    /// Peripheral instances
    inline Registers* T16A0 = reinterpret_cast<Registers*>(T16A0_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t I2T16A = (1U << 0);  ///< I2T16A
        constexpr uint32_t HALT = (1U << 1);  ///< HALT
    }

    /// RUN Register bits
    namespace run_bits {
        constexpr uint32_t RUN = (1U << 0);  ///< RUN
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t CLK = (1U << 0);  ///< CLK
        constexpr uint32_t FFCR = (2 << 4);  ///< FFCR
        constexpr uint32_t FFEN = (1U << 7);  ///< FFEN
    }

    /// RG Register bits
    namespace rg_bits {
        constexpr uint32_t RG = (16 << 0);  ///< RG
    }

    /// CP Register bits
    namespace cp_bits {
        constexpr uint32_t CP = (16 << 0);  ///< CP
    }

}

// ============================================================================
// T16A1 Peripheral
// ============================================================================

namespace t16a1 {
    /// Base addresses
    constexpr uint32_t T16A1_BASE = 0x4008E000;

    /// T16A1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* T16A1 = reinterpret_cast<Registers*>(T16A1_BASE);

}

// ============================================================================
// T16A2 Peripheral
// ============================================================================

namespace t16a2 {
    /// Base addresses
    constexpr uint32_t T16A2_BASE = 0x4008F000;

    /// T16A2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* T16A2 = reinterpret_cast<Registers*>(T16A2_BASE);

}

// ============================================================================
// T16A3 Peripheral
// ============================================================================

namespace t16a3 {
    /// Base addresses
    constexpr uint32_t T16A3_BASE = 0x40090000;

    /// T16A3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* T16A3 = reinterpret_cast<Registers*>(T16A3_BASE);

}

// ============================================================================
// T16A4 Peripheral
// ============================================================================

namespace t16a4 {
    /// Base addresses
    constexpr uint32_t T16A4_BASE = 0x40091000;

    /// T16A4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* T16A4 = reinterpret_cast<Registers*>(T16A4_BASE);

}

// ============================================================================
// T16A5 Peripheral
// ============================================================================

namespace t16a5 {
    /// Base addresses
    constexpr uint32_t T16A5_BASE = 0x44092000;

    /// T16A5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* T16A5 = reinterpret_cast<Registers*>(T16A5_BASE);

}

// ============================================================================
// T16A6 Peripheral
// ============================================================================

namespace t16a6 {
    /// Base addresses
    constexpr uint32_t T16A6_BASE = 0x44093000;

    /// T16A6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* T16A6 = reinterpret_cast<Registers*>(T16A6_BASE);

}

// ============================================================================
// WD0 Peripheral
// ============================================================================

namespace wd0 {
    /// Base addresses
    constexpr uint32_t WD0_BASE = 0x400F2000;

    /// WD0 Register structure
    struct Registers {
        volatile uint32_t MOD;  ///< Offset: 0x00 - WD Mode Register
        volatile uint32_t CR;  ///< Offset: 0x04 - WD Control Register
    };

    /// Peripheral instances
    inline Registers* WD0 = reinterpret_cast<Registers*>(WD0_BASE);

    // Bit definitions
    /// MOD Register bits
    namespace mod_bits {
        constexpr uint32_t RESCR = (1U << 1);  ///< RESCR
        constexpr uint32_t I2WDT = (1U << 2);  ///< I2WDT
        constexpr uint32_t WDTP = (3 << 4);  ///< WDTP
        constexpr uint32_t WDTE = (1U << 7);  ///< WDTE
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WDCR = (8 << 0);  ///< WDCR
    }

}

// ============================================================================
// WD1 Peripheral
// ============================================================================

namespace wd1 {
    /// Base addresses
    constexpr uint32_t WD1_BASE = 0x440F2100;

    /// WD1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* WD1 = reinterpret_cast<Registers*>(WD1_BASE);

}

// ============================================================================
// SC0 Peripheral
// ============================================================================

namespace sc0 {
    /// Base addresses
    constexpr uint32_t SC0_BASE = 0x400E1000;

    /// SC0 Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - SC Enable Register
        volatile uint32_t BUF;  ///< Offset: 0x04 - SC Buffer Register
        volatile uint32_t CR;  ///< Offset: 0x08 - SC Control Register
        volatile uint32_t MOD0;  ///< Offset: 0x0C - SC Mode Control Register 0
        volatile uint32_t BRCR;  ///< Offset: 0x10 - SC Baud Rate Generator Control Register
        volatile uint32_t BRADD;  ///< Offset: 0x14 - SC Baud Rate Generator Control Register 2
        volatile uint32_t MOD1;  ///< Offset: 0x18 - SC Mode Control Register 1
        volatile uint32_t MOD2;  ///< Offset: 0x1C - SC Mode Control Register 2
    };

    /// Peripheral instances
    inline Registers* SC0 = reinterpret_cast<Registers*>(SC0_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t SIOE = (1U << 0);  ///< SIOE
    }

    /// BUF Register bits
    namespace buf_bits {
        constexpr uint32_t TB_RB = (8 << 0);  ///< TB_RB
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t IOC = (1U << 0);  ///< IOC
        constexpr uint32_t SCLKS = (1U << 1);  ///< SCLKS
        constexpr uint32_t FERR = (1U << 2);  ///< FERR
        constexpr uint32_t PERR = (1U << 3);  ///< PERR
        constexpr uint32_t OERR = (1U << 4);  ///< OERR
        constexpr uint32_t PE = (1U << 5);  ///< PE
        constexpr uint32_t EVEN = (1U << 6);  ///< EVEN
        constexpr uint32_t RB8 = (1U << 7);  ///< RB8
    }

    /// MOD0 Register bits
    namespace mod0_bits {
        constexpr uint32_t SC = (2 << 0);  ///< SC
        constexpr uint32_t SM = (2 << 2);  ///< SM
        constexpr uint32_t WU = (1U << 4);  ///< WU
        constexpr uint32_t RXE = (1U << 5);  ///< RXE
        constexpr uint32_t CTSE = (1U << 6);  ///< CTSE
        constexpr uint32_t TB8 = (1U << 7);  ///< TB8
    }

    /// BRCR Register bits
    namespace brcr_bits {
        constexpr uint32_t BRS = (4 << 0);  ///< BRS
        constexpr uint32_t BRCK = (2 << 4);  ///< BRCK
        constexpr uint32_t BRADDE = (1U << 6);  ///< BRADDE
    }

    /// BRADD Register bits
    namespace bradd_bits {
        constexpr uint32_t BRK = (4 << 0);  ///< BRK
    }

    /// MOD1 Register bits
    namespace mod1_bits {
        constexpr uint32_t SINT = (3 << 1);  ///< SINT
        constexpr uint32_t TXE = (1U << 4);  ///< TXE
        constexpr uint32_t FDPX = (2 << 5);  ///< FDPX
        constexpr uint32_t I2SC = (1U << 7);  ///< I2SC
    }

    /// MOD2 Register bits
    namespace mod2_bits {
        constexpr uint32_t SWRST = (2 << 0);  ///< SWRST
        constexpr uint32_t WBUF = (1U << 2);  ///< WBUF
        constexpr uint32_t DRCHG = (1U << 3);  ///< DRCHG
        constexpr uint32_t SBLEN = (1U << 4);  ///< SBLEN
        constexpr uint32_t TXRUN = (1U << 5);  ///< TXRUN
        constexpr uint32_t RBFLL = (1U << 6);  ///< RBFLL
        constexpr uint32_t TBEMP = (1U << 7);  ///< TBEMP
    }

}

// ============================================================================
// SC1 Peripheral
// ============================================================================

namespace sc1 {
    /// Base addresses
    constexpr uint32_t SC1_BASE = 0x400E1100;

    /// SC1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SC1 = reinterpret_cast<Registers*>(SC1_BASE);

}

// ============================================================================
// SC2 Peripheral
// ============================================================================

namespace sc2 {
    /// Base addresses
    constexpr uint32_t SC2_BASE = 0x400E1200;

    /// SC2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SC2 = reinterpret_cast<Registers*>(SC2_BASE);

}

// ============================================================================
// SC3 Peripheral
// ============================================================================

namespace sc3 {
    /// Base addresses
    constexpr uint32_t SC3_BASE = 0x400E1300;

    /// SC3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SC3 = reinterpret_cast<Registers*>(SC3_BASE);

}

// ============================================================================
// SBI Peripheral
// ============================================================================

namespace sbi {
    /// Base addresses
    constexpr uint32_t SBI_BASE = 0x400E0000;

    /// SBI Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - SBI Control Register 0
        volatile uint32_t CR1_A;  ///< Offset: 0x04 - SBI Control Register 1 (I2C Mode)
        volatile uint32_t CR1_B;  ///< Offset: 0x04 - SBI Control Register 1 (SIO Mode)
        volatile uint32_t DBR;  ///< Offset: 0x08 - SBI Data Buffer Register
        volatile uint32_t I2CAR;  ///< Offset: 0x0C - SBI I2C Bus Address Register
        volatile uint32_t CR2_A;  ///< Offset: 0x10 - SBI Control Register 2 (I2C Mode)
        volatile uint32_t CR2_B;  ///< Offset: 0x10 - SBI Control Register 2 (SIO Mode)
        volatile uint32_t SR_A;  ///< Offset: 0x10 - SBI Status Register (I2C Mode)
        volatile uint32_t SR_B;  ///< Offset: 0x10 - SBI Status Register (SIO Mode)
        volatile uint32_t BR0;  ///< Offset: 0x14 - SBI Baud Rate Register 0
    };

    /// Peripheral instances
    inline Registers* SBI = reinterpret_cast<Registers*>(SBI_BASE);

    // Bit definitions
    /// CR0 Register bits
    namespace cr0_bits {
        constexpr uint32_t SBIEN = (1U << 7);  ///< SBIEN
    }

    /// CR1_A Register bits
    namespace cr1_a_bits {
        constexpr uint32_t SWRMON = (1U << 0);  ///< SWRMON
        constexpr uint32_t SCK = (3 << 0);  ///< SCK
        constexpr uint32_t ACK = (1U << 4);  ///< ACK
        constexpr uint32_t BC = (3 << 5);  ///< BC
    }

    /// CR1_B Register bits
    namespace cr1_b_bits {
        constexpr uint32_t SCK = (3 << 0);  ///< SCK
        constexpr uint32_t SIOM = (2 << 4);  ///< SIOM
        constexpr uint32_t SIOINH = (1U << 6);  ///< SIOINH
        constexpr uint32_t SIOS = (1U << 7);  ///< SIOS
    }

    /// DBR Register bits
    namespace dbr_bits {
        constexpr uint32_t DB = (8 << 0);  ///< DB
    }

    /// I2CAR Register bits
    namespace i2car_bits {
        constexpr uint32_t ALS = (1U << 0);  ///< ALS
        constexpr uint32_t SA = (7 << 1);  ///< SA
    }

    /// CR2_A Register bits
    namespace cr2_a_bits {
        constexpr uint32_t SWRST = (2 << 0);  ///< SWRST
        constexpr uint32_t SBIM = (2 << 2);  ///< SBIM
        constexpr uint32_t PIN = (1U << 4);  ///< PIN
        constexpr uint32_t BB = (1U << 5);  ///< BB
        constexpr uint32_t TRX = (1U << 6);  ///< TRX
        constexpr uint32_t MST = (1U << 7);  ///< MST
    }

    /// CR2_B Register bits
    namespace cr2_b_bits {
        constexpr uint32_t SBIM = (2 << 2);  ///< SBIM
    }

    /// SR_A Register bits
    namespace sr_a_bits {
        constexpr uint32_t LRB = (1U << 0);  ///< LRB
        constexpr uint32_t ADO = (1U << 1);  ///< ADO
        constexpr uint32_t AAS = (1U << 2);  ///< AAS
        constexpr uint32_t AL = (1U << 3);  ///< AL
        constexpr uint32_t PIN = (1U << 4);  ///< PIN
        constexpr uint32_t BB = (1U << 5);  ///< BB
        constexpr uint32_t TRX = (1U << 6);  ///< TRX
        constexpr uint32_t MST = (1U << 7);  ///< MST
    }

    /// SR_B Register bits
    namespace sr_b_bits {
        constexpr uint32_t SEF = (1U << 2);  ///< SEF
        constexpr uint32_t SIOF = (1U << 3);  ///< SIOF
    }

    /// BR0 Register bits
    namespace br0_bits {
        constexpr uint32_t I2SBI = (1U << 6);  ///< I2SBI
    }

}

// ============================================================================
// AD Peripheral
// ============================================================================

namespace ad {
    /// Base addresses
    constexpr uint32_t AD_BASE = 0x400FC000;

    /// AD Register structure
    struct Registers {
        volatile uint32_t CLK;  ///< Offset: 0x00 - AD Conversion Clock Setting Register
        volatile uint32_t MOD0;  ///< Offset: 0x04 - AD Mode Control Register 0
        volatile uint32_t MOD1;  ///< Offset: 0x08 - AD Mode Control Register 1
        volatile uint32_t MOD2;  ///< Offset: 0x0C - AD Mode Control Register 2
        volatile uint32_t MOD3;  ///< Offset: 0x10 - AD Mode Control Register 3
        volatile uint32_t MOD4;  ///< Offset: 0x14 - AD Mode Control Register 4
        volatile uint32_t MOD5;  ///< Offset: 0x18 - AD Mode Control Register 5
        volatile uint32_t REG0;  ///< Offset: 0x30 - AD Conversion Result Register 08
        volatile uint32_t REG1;  ///< Offset: 0x34 - AD Conversion Result Register 19
        volatile uint32_t REG2;  ///< Offset: 0x38 - AD Conversion Result Register 2A
        volatile uint32_t REG3;  ///< Offset: 0x3C - AD Conversion Result Register 3B
        volatile uint32_t REG4;  ///< Offset: 0x40 - AD Conversion Result Register 4C
        volatile uint32_t REG5;  ///< Offset: 0x44 - AD Conversion Result Register 5D
        volatile uint32_t REG6;  ///< Offset: 0x48 - AD Conversion Result Register 6E
        volatile uint32_t REG7;  ///< Offset: 0x4C - AD Conversion Result Register 7F
        volatile uint32_t REG8;  ///< Offset: 0x50 - AD Conversion Result Register 8
        volatile uint32_t REG9;  ///< Offset: 0x54 - AD Conversion Result Register 9
        volatile uint32_t REG10;  ///< Offset: 0x58 - AD Conversion Result Register 10
        volatile uint32_t REG11;  ///< Offset: 0x5C - AD Conversion Result Register 11
        volatile uint32_t REGSP;  ///< Offset: 0x60 - AD Conversion Result Register SP
        volatile uint32_t CMP0;  ///< Offset: 0x64 - AD Conversion Result Comparison Register 0
        volatile uint32_t CMP1;  ///< Offset: 0x68 - AD Conversion Result Comparison Register 1
    };

    /// Peripheral instances
    inline Registers* AD = reinterpret_cast<Registers*>(AD_BASE);

    // Bit definitions
    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t ADCLK = (3 << 0);  ///< ADCLK
        constexpr uint32_t ADCC = (2 << 6);  ///< ADCC
    }

    /// MOD0 Register bits
    namespace mod0_bits {
        constexpr uint32_t ADS = (1U << 0);  ///< ADS
        constexpr uint32_t SCAN = (1U << 1);  ///< SCAN
        constexpr uint32_t REPEAT = (1U << 2);  ///< REPEAT
        constexpr uint32_t ITM = (2 << 3);  ///< ITM
        constexpr uint32_t ADBFN = (1U << 6);  ///< ADBFN
        constexpr uint32_t EOCFN = (1U << 7);  ///< EOCFN
    }

    /// MOD1 Register bits
    namespace mod1_bits {
        constexpr uint32_t ADCH = (4 << 0);  ///< ADCH
        constexpr uint32_t ADSCN = (2 << 4);  ///< ADSCN
        constexpr uint32_t I2AD = (1U << 6);  ///< I2AD
        constexpr uint32_t VREFON = (1U << 7);  ///< VREFON
    }

    /// MOD2 Register bits
    namespace mod2_bits {
        constexpr uint32_t HPADCH = (4 << 0);  ///< HPADCH
        constexpr uint32_t HPADCE = (1U << 5);  ///< HPADCE
        constexpr uint32_t ADBFHP = (1U << 6);  ///< ADBFHP
        constexpr uint32_t EOCFHP = (1U << 7);  ///< EOCFHP
    }

    /// MOD3 Register bits
    namespace mod3_bits {
        constexpr uint32_t ADOBSV0 = (1U << 0);  ///< ADOBSV0
        constexpr uint32_t ADREGS0 = (4 << 1);  ///< ADREGS0
        constexpr uint32_t ADOBIC0 = (1U << 5);  ///< ADOBIC0
    }

    /// MOD4 Register bits
    namespace mod4_bits {
        constexpr uint32_t ADRST = (2 << 0);  ///< ADRST
        constexpr uint32_t ADHTG = (1U << 4);  ///< ADHTG
        constexpr uint32_t ADHS = (1U << 5);  ///< ADHS
        constexpr uint32_t HADHTG = (1U << 6);  ///< HADHTG
        constexpr uint32_t HADHS = (1U << 7);  ///< HADHS
    }

    /// MOD5 Register bits
    namespace mod5_bits {
        constexpr uint32_t ADOBSV1 = (1U << 0);  ///< ADOBSV1
        constexpr uint32_t ADREGS1 = (4 << 1);  ///< ADREGS1
        constexpr uint32_t ADOBIC1 = (1U << 5);  ///< ADOBIC1
    }

    /// REG0 Register bits
    namespace reg0_bits {
        constexpr uint32_t ADR0RF = (1U << 0);  ///< ADR0RF
        constexpr uint32_t OVR0 = (1U << 1);  ///< OVR0
        constexpr uint32_t ADR0 = (10 << 6);  ///< ADR0
    }

    /// REG1 Register bits
    namespace reg1_bits {
        constexpr uint32_t ADR1RF = (1U << 0);  ///< ADR1RF
        constexpr uint32_t OVR1 = (1U << 1);  ///< OVR1
        constexpr uint32_t ADR1 = (10 << 6);  ///< ADR1
    }

    /// REG2 Register bits
    namespace reg2_bits {
        constexpr uint32_t ADR2RF = (1U << 0);  ///< ADR2RF
        constexpr uint32_t OVR2 = (1U << 1);  ///< OVR2
        constexpr uint32_t ADR2 = (10 << 6);  ///< ADR2
    }

    /// REG3 Register bits
    namespace reg3_bits {
        constexpr uint32_t ADR3RF = (1U << 0);  ///< ADR3RF
        constexpr uint32_t OVR3 = (1U << 1);  ///< OVR3
        constexpr uint32_t ADR3 = (10 << 6);  ///< ADR3
    }

    /// REG4 Register bits
    namespace reg4_bits {
        constexpr uint32_t ADR4RF = (1U << 0);  ///< ADR4RF
        constexpr uint32_t OVR4 = (1U << 1);  ///< OVR4
        constexpr uint32_t ADR4 = (10 << 6);  ///< ADR4
    }

    /// REG5 Register bits
    namespace reg5_bits {
        constexpr uint32_t ADR5RF = (1U << 0);  ///< ADR5RF
        constexpr uint32_t OVR5 = (1U << 1);  ///< OVR5
        constexpr uint32_t ADR5 = (10 << 6);  ///< ADR5
    }

    /// REG6 Register bits
    namespace reg6_bits {
        constexpr uint32_t ADR6RF = (1U << 0);  ///< ADR6RF
        constexpr uint32_t OVR6 = (1U << 1);  ///< OVR6
        constexpr uint32_t ADR6 = (10 << 6);  ///< ADR6
    }

    /// REG7 Register bits
    namespace reg7_bits {
        constexpr uint32_t ADR7RF = (1U << 0);  ///< ADR7RF
        constexpr uint32_t OVR7 = (1U << 1);  ///< OVR7
        constexpr uint32_t ADR7 = (10 << 6);  ///< ADR7
    }

    /// REG8 Register bits
    namespace reg8_bits {
        constexpr uint32_t ADR8RF = (1U << 0);  ///< ADR8RF
        constexpr uint32_t OVR8 = (1U << 1);  ///< OVR8
        constexpr uint32_t ADR8 = (10 << 6);  ///< ADR8
    }

    /// REG9 Register bits
    namespace reg9_bits {
        constexpr uint32_t ADR9RF = (1U << 0);  ///< ADR9RF
        constexpr uint32_t OVR9 = (1U << 1);  ///< OVR9
        constexpr uint32_t ADR9 = (10 << 6);  ///< ADR9
    }

    /// REG10 Register bits
    namespace reg10_bits {
        constexpr uint32_t ADR10RF = (1U << 0);  ///< ADR10RF
        constexpr uint32_t OVR10 = (1U << 1);  ///< OVR10
        constexpr uint32_t ADR10 = (10 << 6);  ///< ADR10
    }

    /// REG11 Register bits
    namespace reg11_bits {
        constexpr uint32_t ADR11RF = (1U << 0);  ///< ADR11RF
        constexpr uint32_t OVR11 = (1U << 1);  ///< OVR11
        constexpr uint32_t ADR11 = (10 << 6);  ///< ADR11
    }

    /// REGSP Register bits
    namespace regsp_bits {
        constexpr uint32_t ADRSPRF = (1U << 0);  ///< ADRSPRF
        constexpr uint32_t OVRSP = (1U << 1);  ///< OVRSP
        constexpr uint32_t ADRSP = (10 << 6);  ///< ADRSP
    }

    /// CMP0 Register bits
    namespace cmp0_bits {
        constexpr uint32_t ADCOM0 = (10 << 6);  ///< ADCOM0
    }

    /// CMP1 Register bits
    namespace cmp1_bits {
        constexpr uint32_t ADCOM1 = (10 << 6);  ///< ADCOM1
    }

}

// ============================================================================
// DSAD0 Peripheral
// ============================================================================

namespace dsad0 {
    /// Base addresses
    constexpr uint32_t DSAD0_BASE = 0x44067000;

    /// DSAD0 Register structure
    struct Registers {
        volatile uint32_t CLK;  ///< Offset: 0x00 - DSAD Conversion Clock Setting Register
        volatile uint32_t CR0;  ///< Offset: 0x04 - DSAD Control Register 0
        volatile uint32_t CR1;  ///< Offset: 0x08 - DSAD Control Register 1
        volatile uint32_t CR2;  ///< Offset: 0x0C - DSAD Control Register 2
        volatile uint32_t CR3;  ///< Offset: 0x10 - DSAD Control Register 3
        volatile uint32_t CR4;  ///< Offset: 0x14 - DSAD Control Register 4
        volatile uint32_t ADJ;  ///< Offset: 0x18 - DSAD Adjust Register
        volatile uint32_t ST;  ///< Offset: 0x1C - DSAD Status Register
        volatile uint32_t RES;  ///< Offset: 0x20 - DSAD Result Register
    };

    /// Peripheral instances
    inline Registers* DSAD0 = reinterpret_cast<Registers*>(DSAD0_BASE);

    // Bit definitions
    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t ADCLK = (3 << 0);  ///< ADCLK
    }

    /// CR0 Register bits
    namespace cr0_bits {
        constexpr uint32_t ADRST = (2 << 0);  ///< ADRST
    }

    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t MODEN = (1U << 0);  ///< MODEN
        constexpr uint32_t BIASEN = (1U << 1);  ///< BIASEN
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t ADS = (1U << 0);  ///< ADS
    }

    /// CR3 Register bits
    namespace cr3_bits {
        constexpr uint32_t REPEAT = (1U << 0);  ///< REPEAT
        constexpr uint32_t ADSYNC = (1U << 8);  ///< ADSYNC
    }

    /// CR4 Register bits
    namespace cr4_bits {
        constexpr uint32_t DSGAIN = (3 << 0);  ///< DSGAIN
    }

    /// ADJ Register bits
    namespace adj_bits {
        constexpr uint32_t ADJ = (1U << 0);  ///< ADJ
        constexpr uint32_t OFFSET = (16 << 16);  ///< OFFSET
    }

    /// ST Register bits
    namespace st_bits {
        constexpr uint32_t ADBF = (1U << 0);  ///< ADBF
        constexpr uint32_t EOCF = (1U << 1);  ///< EOCF
    }

    /// RES Register bits
    namespace res_bits {
        constexpr uint32_t ADRF = (1U << 0);  ///< ADRF
        constexpr uint32_t ADOVR = (1U << 1);  ///< ADOVR
        constexpr uint32_t ADR = (24 << 8);  ///< ADR
    }

}

// ============================================================================
// DSAD1 Peripheral
// ============================================================================

namespace dsad1 {
    /// Base addresses
    constexpr uint32_t DSAD1_BASE = 0x44068000;

    /// DSAD1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* DSAD1 = reinterpret_cast<Registers*>(DSAD1_BASE);

}

// ============================================================================
// DSAD2 Peripheral
// ============================================================================

namespace dsad2 {
    /// Base addresses
    constexpr uint32_t DSAD2_BASE = 0x44069000;

    /// DSAD2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* DSAD2 = reinterpret_cast<Registers*>(DSAD2_BASE);

}

// ============================================================================
// TEMP Peripheral
// ============================================================================

namespace temp {
    /// Base addresses
    constexpr uint32_t TEMP_BASE = 0x4005D000;

    /// TEMP Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - TEMP Enable Register
        volatile uint32_t CR;  ///< Offset: 0x04 - TEMP Control Registe
    };

    /// Peripheral instances
    inline Registers* TEMP = reinterpret_cast<Registers*>(TEMP_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t EN0 = (1U << 0);  ///< EN0
        constexpr uint32_t EN1 = (1U << 1);  ///< EN1
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t CR0 = (1U << 0);  ///< CR0
    }

}

// ============================================================================
// LVD Peripheral
// ============================================================================

namespace lvd {
    /// Base addresses
    constexpr uint32_t LVD_BASE = 0x400F4000;

    /// LVD Register structure
    struct Registers {
        volatile uint32_t ICR;  ///< Offset: 0x04 - LVD-NMI Control Register
        volatile uint32_t SR;  ///< Offset: 0x08 - LVD Status Control Register
    };

    /// Peripheral instances
    inline Registers* LVD = reinterpret_cast<Registers*>(LVD_BASE);

    // Bit definitions
    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t LVDEN2 = (1U << 0);  ///< LVDEN2
        constexpr uint32_t LVDLVL2 = (3 << 1);  ///< LVDLVL2
        constexpr uint32_t INTSEL = (1U << 4);  ///< INTSEL
        constexpr uint32_t LVDINTEN = (1U << 5);  ///< LVDINTEN
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t LVDST2 = (1U << 1);  ///< LVDST2
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x400CC000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t SECR;  ///< Offset: 0x00 - RTC Sec setting register
        volatile uint32_t MINR;  ///< Offset: 0x01 - RTC Min settging register
        volatile uint32_t HOURR;  ///< Offset: 0x02 - RTC Hour setting register
        volatile uint32_t DAYR;  ///< Offset: 0x04 - RTC Day setting register
        volatile uint32_t DATER;  ///< Offset: 0x05 - RTC Date setting register
        volatile uint32_t MONTHR;  ///< Offset: 0x06 - RTC Month settging register PAGE0
        volatile uint32_t YEARR_A;  ///< Offset: 0x07 - RTC Year setting register PAGE0
        volatile uint32_t YEARR_B;  ///< Offset: 0x07 - RTC Leap year register PAGE1
        volatile uint32_t PAGER;  ///< Offset: 0x08 - RTC Page register
        volatile uint32_t RESTR;  ///< Offset: 0x0C - RTC Reset register
        volatile uint32_t PROTECT;  ///< Offset: 0x0E - RTC clock adjust control register
        volatile uint32_t ADJCTL;  ///< Offset: 0x0F - RTC protect register
        volatile uint32_t ADJDAT;  ///< Offset: 0x10 - RTC clock adjust data register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// SECR Register bits
    namespace secr_bits {
        constexpr uint32_t SE = (7 << 0);  ///< SE
    }

    /// MINR Register bits
    namespace minr_bits {
        constexpr uint32_t MI = (7 << 0);  ///< MI
    }

    /// HOURR Register bits
    namespace hourr_bits {
        constexpr uint32_t HO = (6 << 0);  ///< HO
    }

    /// DAYR Register bits
    namespace dayr_bits {
        constexpr uint32_t WE = (3 << 0);  ///< WE
    }

    /// DATER Register bits
    namespace dater_bits {
        constexpr uint32_t DA = (6 << 0);  ///< DA
    }

    /// MONTHR Register bits
    namespace monthr_bits {
        constexpr uint32_t MO = (5 << 0);  ///< MO
    }

    /// YEARR_A Register bits
    namespace yearr_a_bits {
        constexpr uint32_t YE = (8 << 0);  ///< YE
    }

    /// YEARR_B Register bits
    namespace yearr_b_bits {
        constexpr uint32_t LEAP = (2 << 0);  ///< LEAP
    }

    /// PAGER Register bits
    namespace pager_bits {
        constexpr uint32_t PAGE = (1U << 0);  ///< PAGE
        constexpr uint32_t ENAALM = (1U << 2);  ///< ENAALM
        constexpr uint32_t ENATMR = (1U << 3);  ///< ENATMR
        constexpr uint32_t ADJUST = (1U << 4);  ///< ADJUST
        constexpr uint32_t INTENA = (1U << 7);  ///< INTENA
    }

    /// RESTR Register bits
    namespace restr_bits {
        constexpr uint32_t DIS8HZ = (1U << 0);  ///< DIS8HZ
        constexpr uint32_t DIS4HZ = (1U << 1);  ///< DIS4HZ
        constexpr uint32_t DIS2HZ = (1U << 2);  ///< DIS2HZ
        constexpr uint32_t RESTALM = (1U << 4);  ///< RESTALM
        constexpr uint32_t RSTTMR = (1U << 5);  ///< RSTTMR
        constexpr uint32_t DIS16HZ = (1U << 6);  ///< DIS16HZ
        constexpr uint32_t DIS1HZ = (1U << 7);  ///< DIS1HZ
    }

    /// PROTECT Register bits
    namespace protect_bits {
        constexpr uint32_t PROTECT = (8 << 0);  ///< PROTECT
    }

    /// ADJCTL Register bits
    namespace adjctl_bits {
        constexpr uint32_t AJEN = (1U << 0);  ///< AJEN
        constexpr uint32_t AJSEL = (3 << 1);  ///< AJSEL
    }

    /// ADJDAT Register bits
    namespace adjdat_bits {
        constexpr uint32_t ADJDAT = (9 << 0);  ///< ADJDAT
    }

}

// ============================================================================
// LCD Peripheral
// ============================================================================

namespace lcd {
    /// Base addresses
    constexpr uint32_t LCD_BASE = 0x4006E000;

    /// LCD Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - Enable register
        volatile uint32_t CR1;  ///< Offset: 0x04 - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x08 - Control register 2
        volatile uint32_t BUF00;  ///< Offset: 0x0C - Buffer register 00
        volatile uint32_t BUF01;  ///< Offset: 0x10 - Buffer register 01
        volatile uint32_t BUF02;  ///< Offset: 0x14 - Buffer register 02
        volatile uint32_t BUF03;  ///< Offset: 0x18 - Buffer register 03
        volatile uint32_t BUF04;  ///< Offset: 0x1C - Buffer register 04
        volatile uint32_t BUF05;  ///< Offset: 0x20 - Buffer register 05
        volatile uint32_t BUF06;  ///< Offset: 0x24 - Buffer register 06
        volatile uint32_t BUF07;  ///< Offset: 0x28 - Buffer register 07
        volatile uint32_t BUF08;  ///< Offset: 0x2C - Buffer register 08
        volatile uint32_t BUF09;  ///< Offset: 0x30 - Buffer register 09
        volatile uint32_t BUF10;  ///< Offset: 0x34 - Buffer register 10
        volatile uint32_t BUF11;  ///< Offset: 0x38 - Buffer register 11
        volatile uint32_t BUF12;  ///< Offset: 0x3C - Buffer register 12
        volatile uint32_t BUF13;  ///< Offset: 0x40 - Buffer register 13
        volatile uint32_t BUF14;  ///< Offset: 0x44 - Buffer register 14
        volatile uint32_t BUF15;  ///< Offset: 0x48 - Buffer register 15
        volatile uint32_t BUF16;  ///< Offset: 0x4C - Buffer register 16
        volatile uint32_t BUF17;  ///< Offset: 0x50 - Buffer register 17
        volatile uint32_t BUF18;  ///< Offset: 0x54 - Buffer register 18
        volatile uint32_t BUF19;  ///< Offset: 0x58 - Buffer register 19
    };

    /// Peripheral instances
    inline Registers* LCD = reinterpret_cast<Registers*>(LCD_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t LCDE = (1U << 0);  ///< LCDE
    }

    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t SLF = (4 << 0);  ///< SLF
        constexpr uint32_t DUTY = (3 << 4);  ///< DUTY
        constexpr uint32_t EDSP = (1U << 7);  ///< EDSP
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t BRSEL = (1U << 3);  ///< BRSEL
        constexpr uint32_t BRH = (1U << 4);  ///< BRH
        constexpr uint32_t LRSE = (3 << 5);  ///< LRSE
    }

    /// BUF00 Register bits
    namespace buf00_bits {
        constexpr uint32_t SEG0 = (4 << 0);  ///< SEG0
        constexpr uint32_t SEG1 = (4 << 4);  ///< SEG1
    }

    /// BUF01 Register bits
    namespace buf01_bits {
        constexpr uint32_t SEG2 = (4 << 0);  ///< SEG2
        constexpr uint32_t SEG3 = (4 << 4);  ///< SEG3
    }

    /// BUF02 Register bits
    namespace buf02_bits {
        constexpr uint32_t SEG4 = (4 << 0);  ///< SEG4
        constexpr uint32_t SEG5 = (4 << 4);  ///< SEG5
    }

    /// BUF03 Register bits
    namespace buf03_bits {
        constexpr uint32_t SEG6 = (4 << 0);  ///< SEG6
        constexpr uint32_t SEG7 = (4 << 4);  ///< SEG7
    }

    /// BUF04 Register bits
    namespace buf04_bits {
        constexpr uint32_t SEG8 = (4 << 0);  ///< SEG8
        constexpr uint32_t SEG9 = (4 << 4);  ///< SEG9
    }

    /// BUF05 Register bits
    namespace buf05_bits {
        constexpr uint32_t SEG10 = (4 << 0);  ///< SEG10
        constexpr uint32_t SEG11 = (4 << 4);  ///< SEG11
    }

    /// BUF06 Register bits
    namespace buf06_bits {
        constexpr uint32_t SEG12 = (4 << 0);  ///< SEG12
        constexpr uint32_t SEG13 = (4 << 4);  ///< SEG13
    }

    /// BUF07 Register bits
    namespace buf07_bits {
        constexpr uint32_t SEG14 = (4 << 0);  ///< SEG14
        constexpr uint32_t SEG15 = (4 << 4);  ///< SEG15
    }

    /// BUF08 Register bits
    namespace buf08_bits {
        constexpr uint32_t SEG16 = (4 << 0);  ///< SEG16
        constexpr uint32_t SEG17 = (4 << 4);  ///< SEG17
    }

    /// BUF09 Register bits
    namespace buf09_bits {
        constexpr uint32_t SEG18 = (4 << 0);  ///< SEG18
        constexpr uint32_t SEG19 = (4 << 4);  ///< SEG19
    }

    /// BUF10 Register bits
    namespace buf10_bits {
        constexpr uint32_t SEG20 = (4 << 0);  ///< SEG20
        constexpr uint32_t SEG21 = (4 << 4);  ///< SEG21
    }

    /// BUF11 Register bits
    namespace buf11_bits {
        constexpr uint32_t SEG22 = (4 << 0);  ///< SEG22
        constexpr uint32_t SEG23 = (4 << 4);  ///< SEG23
    }

    /// BUF12 Register bits
    namespace buf12_bits {
        constexpr uint32_t SEG24 = (4 << 0);  ///< SEG24
        constexpr uint32_t SEG25 = (4 << 4);  ///< SEG25
    }

    /// BUF13 Register bits
    namespace buf13_bits {
        constexpr uint32_t SEG26 = (4 << 0);  ///< SEG26
        constexpr uint32_t SEG27 = (4 << 4);  ///< SEG27
    }

    /// BUF14 Register bits
    namespace buf14_bits {
        constexpr uint32_t SEG28 = (4 << 0);  ///< SEG28
        constexpr uint32_t SEG29 = (4 << 4);  ///< SEG29
    }

    /// BUF15 Register bits
    namespace buf15_bits {
        constexpr uint32_t SEG30 = (4 << 0);  ///< SEG30
        constexpr uint32_t SEG31 = (4 << 4);  ///< SEG31
    }

    /// BUF16 Register bits
    namespace buf16_bits {
        constexpr uint32_t SEG32 = (4 << 0);  ///< SEG32
        constexpr uint32_t SEG33 = (4 << 4);  ///< SEG33
    }

    /// BUF17 Register bits
    namespace buf17_bits {
        constexpr uint32_t SEG34 = (4 << 0);  ///< SEG34
        constexpr uint32_t SEG35 = (4 << 4);  ///< SEG35
    }

    /// BUF18 Register bits
    namespace buf18_bits {
        constexpr uint32_t SEG36 = (4 << 0);  ///< SEG36
        constexpr uint32_t SEG37 = (4 << 4);  ///< SEG37
    }

    /// BUF19 Register bits
    namespace buf19_bits {
        constexpr uint32_t SEG38 = (4 << 0);  ///< SEG38
        constexpr uint32_t SEG39 = (4 << 4);  ///< SEG39
    }

}

// ============================================================================
// FC Peripheral
// ============================================================================

namespace fc {
    /// Base addresses
    constexpr uint32_t FC_BASE = 0x41FFF000;

    /// FC Register structure
    struct Registers {
        volatile uint32_t SECBIT;  ///< Offset: 0x10 - FC Security Bit Register
        volatile uint32_t FLCS;  ///< Offset: 0x20 - FC Flash Control Register
        volatile uint32_t DBGEN;  ///< Offset: 0x5C - FC Debug enable monitor Register
    };

    /// Peripheral instances
    inline Registers* FC = reinterpret_cast<Registers*>(FC_BASE);

    // Bit definitions
    /// SECBIT Register bits
    namespace secbit_bits {
        constexpr uint32_t SECBIT = (1U << 0);  ///< SECBIT
    }

    /// FLCS Register bits
    namespace flcs_bits {
        constexpr uint32_t RDY_BSY = (1U << 0);  ///< RDY_BSY
        constexpr uint32_t BLPRO = (4 << 16);  ///< BLPRO
    }

    /// DBGEN Register bits
    namespace dbgen_bits {
        constexpr uint32_t EN0 = (1U << 0);  ///< EN0
        constexpr uint32_t EN1 = (1U << 1);  ///< EN1
    }

}

// ============================================================================
// PCE Peripheral
// ============================================================================

namespace pce {
    /// Base addresses
    constexpr uint32_t PCE_BASE = 0x4406F000;

    /// PCE Register structure
    struct Registers {
        volatile uint32_t PINTCR;  ///< Offset: 0x00 - PCE core interrupt control
        volatile uint32_t MINTCR;  ///< Offset: 0x04 - Interrupt control to the main core
        volatile uint32_t PCLKCR;  ///< Offset: 0x08 - PCE core clock control)
        volatile uint32_t PNMIFLG;  ///< Offset: 0x0C - PCE core NMI event flag)
        volatile uint32_t PNMICLR;  ///< Offset: 0x10 - PCE core NMI event clear)
    };

    /// Peripheral instances
    inline Registers* PCE = reinterpret_cast<Registers*>(PCE_BASE);

    // Bit definitions
    /// PINTCR Register bits
    namespace pintcr_bits {
        constexpr uint32_t PCERST = (1U << 0);  ///< PCERST
        constexpr uint32_t PCENMI = (1U << 1);  ///< PCENMI
        constexpr uint32_t PCEINT = (1U << 2);  ///< PCEINT
    }

    /// MINTCR Register bits
    namespace mintcr_bits {
        constexpr uint32_t MAININT = (1U << 0);  ///< MAININT
    }

    /// PCLKCR Register bits
    namespace pclkcr_bits {
        constexpr uint32_t PCECLK = (1U << 0);  ///< PCECLK
    }

    /// PNMIFLG Register bits
    namespace pnmiflg_bits {
        constexpr uint32_t WDTNMIF = (1U << 0);  ///< WDTNMIF
        constexpr uint32_t PCEIFNMIF = (1U << 1);  ///< PCEIFNMIF
    }

    /// PNMICLR Register bits
    namespace pnmiclr_bits {
        constexpr uint32_t WDTNMIC = (1U << 0);  ///< WDTNMIC
        constexpr uint32_t PCEIFNMIC = (1U << 1);  ///< PCEIFNMIC
    }

}

// ============================================================================
// CG Peripheral
// ============================================================================

namespace cg {
    /// Base addresses
    constexpr uint32_t CG_BASE = 0x400F3000;

    /// CG Register structure
    struct Registers {
        volatile uint32_t SYSCR;  ///< Offset: 0x00 - System Control Register
        volatile uint32_t OSCCR;  ///< Offset: 0x04 - Oscillation Control Register
        volatile uint32_t STBYCR;  ///< Offset: 0x08 - Standby Control Register
        volatile uint32_t EHCLKSEL;  ///< Offset: 0x0C - External High-speed clock select register
        volatile uint32_t CKSEL;  ///< Offset: 0x10 - System Clock Selection Register
        volatile uint32_t ICRCG;  ///< Offset: 0x14 - CG Interrupt Request Clear Register
        volatile uint32_t RSTFLG;  ///< Offset: 0x1C - Reset Flag Register
        volatile uint32_t IMCGA;  ///< Offset: 0x20 - CG Interrupt Mode Control Register A
        volatile uint32_t IMCGB;  ///< Offset: 0x24 - CG Interrupt Mode Control Register B
    };

    /// Peripheral instances
    inline Registers* CG = reinterpret_cast<Registers*>(CG_BASE);

    // Bit definitions
    /// SYSCR Register bits
    namespace syscr_bits {
        constexpr uint32_t GEAR = (3 << 0);  ///< GEAR
        constexpr uint32_t PRCK = (3 << 8);  ///< PRCK
        constexpr uint32_t FPSEL = (2 << 12);  ///< FPSEL
        constexpr uint32_t SCOSEL = (2 << 16);  ///< SCOSEL
        constexpr uint32_t FCSTOP = (1U << 20);  ///< FCSTOP
    }

    /// OSCCR Register bits
    namespace osccr_bits {
        constexpr uint32_t WUEON = (1U << 0);  ///< WUEON
        constexpr uint32_t WUEF = (1U << 1);  ///< WUEF
        constexpr uint32_t WUPSEL1 = (1U << 3);  ///< WUPSEL1
        constexpr uint32_t XEN1 = (1U << 8);  ///< XEN1
        constexpr uint32_t XTEN = (1U << 9);  ///< XTEN
        constexpr uint32_t LOSCSEL = (1U << 10);  ///< LOSCSEL
        constexpr uint32_t EHCLKEN = (1U << 11);  ///< EHCLKEN
        constexpr uint32_t WUPTL = (2 << 14);  ///< WUPTL
        constexpr uint32_t XEN2 = (1U << 16);  ///< XEN2
        constexpr uint32_t OSCSEL = (1U << 17);  ///< OSCSEL
        constexpr uint32_t HOSCON = (1U << 18);  ///< HOSCON
        constexpr uint32_t WUPSEL2 = (1U << 19);  ///< WUPSEL2
        constexpr uint32_t WUPT = (12 << 20);  ///< WUPT
    }

    /// STBYCR Register bits
    namespace stbycr_bits {
        constexpr uint32_t STBY = (3 << 0);  ///< STBY
        constexpr uint32_t RXEN = (1U << 8);  ///< RXEN
        constexpr uint32_t RXTEN = (1U << 9);  ///< RXTEN
        constexpr uint32_t DRVE = (1U << 16);  ///< DRVE
    }

    /// EHCLKSEL Register bits
    namespace ehclksel_bits {
        constexpr uint32_t EHCLKSEL = (1U << 0);  ///< EHCLKSEL
    }

    /// CKSEL Register bits
    namespace cksel_bits {
        constexpr uint32_t SYSCKFLG = (1U << 0);  ///< SYSCKFLG
        constexpr uint32_t SYSCK = (1U << 1);  ///< SYSCK
    }

    /// ICRCG Register bits
    namespace icrcg_bits {
        constexpr uint32_t ICRCG = (5 << 0);  ///< ICRCG
    }

    /// RSTFLG Register bits
    namespace rstflg_bits {
        constexpr uint32_t PINRSTF = (1U << 0);  ///< PINRSTF
        constexpr uint32_t WDTRSTF = (1U << 2);  ///< WDTRSTF
        constexpr uint32_t DBGRSTF = (1U << 4);  ///< DBGRSTF
    }

    /// IMCGA Register bits
    namespace imcga_bits {
        constexpr uint32_t INT0EN = (1U << 0);  ///< INT0EN
        constexpr uint32_t EMST0 = (2 << 2);  ///< EMST0
        constexpr uint32_t EMCG0 = (3 << 4);  ///< EMCG0
        constexpr uint32_t INT1EN = (1U << 8);  ///< INT1EN
        constexpr uint32_t EMST1 = (2 << 10);  ///< EMST1
        constexpr uint32_t EMCG1 = (3 << 12);  ///< EMCG1
        constexpr uint32_t INT2EN = (1U << 16);  ///< INT2EN
        constexpr uint32_t EMST2 = (2 << 18);  ///< EMST2
        constexpr uint32_t EMCG2 = (3 << 20);  ///< EMCG2
        constexpr uint32_t INT3EN = (1U << 24);  ///< INT3EN
        constexpr uint32_t EMST3 = (2 << 26);  ///< EMST3
        constexpr uint32_t EMCG3 = (3 << 28);  ///< EMCG3
    }

    /// IMCGB Register bits
    namespace imcgb_bits {
        constexpr uint32_t INT4EN = (1U << 0);  ///< INT4EN
        constexpr uint32_t EMST4 = (2 << 2);  ///< EMST4
        constexpr uint32_t EMCG4 = (3 << 4);  ///< EMCG4
        constexpr uint32_t INT5EN = (1U << 8);  ///< INT5EN
        constexpr uint32_t EMST5 = (2 << 10);  ///< EMST5
        constexpr uint32_t EMCG5 = (3 << 12);  ///< EMCG5
    }

}


} // namespace alloy::generated::m061

#endif // ALLOY_GENERATED_M061_PERIPHERALS_HPP