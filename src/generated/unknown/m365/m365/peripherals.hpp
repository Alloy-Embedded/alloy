/// Auto-generated code for M365
/// Generated by Alloy Code Generator
/// Source: toshiba_m365.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:00:47
#ifndef ALLOY_GENERATED_M365_PERIPHERALS_HPP
#define ALLOY_GENERATED_M365_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::m365 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 1;
    constexpr bool has_udfs = true;
    constexpr uint32_t num_udfs_instances = 1;
    constexpr bool has_udfs2 = true;
    constexpr uint32_t num_udfs2_instances = 1;
    constexpr bool has_ad = true;
    constexpr uint32_t num_ad_instances = 1;
    constexpr bool has_pa = true;
    constexpr uint32_t num_pa_instances = 1;
    constexpr bool has_pb = true;
    constexpr uint32_t num_pb_instances = 1;
    constexpr bool has_pc = true;
    constexpr uint32_t num_pc_instances = 1;
    constexpr bool has_pd = true;
    constexpr uint32_t num_pd_instances = 1;
    constexpr bool has_pe = true;
    constexpr uint32_t num_pe_instances = 1;
    constexpr bool has_pf = true;
    constexpr uint32_t num_pf_instances = 1;
    constexpr bool has_pg = true;
    constexpr uint32_t num_pg_instances = 1;
    constexpr bool has_ph = true;
    constexpr uint32_t num_ph_instances = 1;
    constexpr bool has_pi = true;
    constexpr uint32_t num_pi_instances = 1;
    constexpr bool has_pj = true;
    constexpr uint32_t num_pj_instances = 1;
    constexpr bool has_pk = true;
    constexpr uint32_t num_pk_instances = 1;
    constexpr bool has_tb0 = true;
    constexpr uint32_t num_tb0_instances = 1;
    constexpr bool has_tb1 = true;
    constexpr uint32_t num_tb1_instances = 1;
    constexpr bool has_tb2 = true;
    constexpr uint32_t num_tb2_instances = 1;
    constexpr bool has_tb3 = true;
    constexpr uint32_t num_tb3_instances = 1;
    constexpr bool has_tb4 = true;
    constexpr uint32_t num_tb4_instances = 1;
    constexpr bool has_tb5 = true;
    constexpr uint32_t num_tb5_instances = 1;
    constexpr bool has_tb6 = true;
    constexpr uint32_t num_tb6_instances = 1;
    constexpr bool has_tb7 = true;
    constexpr uint32_t num_tb7_instances = 1;
    constexpr bool has_tb8 = true;
    constexpr uint32_t num_tb8_instances = 1;
    constexpr bool has_tb9 = true;
    constexpr uint32_t num_tb9_instances = 1;
    constexpr bool has_sbi0 = true;
    constexpr uint32_t num_sbi0_instances = 1;
    constexpr bool has_sbi1 = true;
    constexpr uint32_t num_sbi1_instances = 1;
    constexpr bool has_sc0 = true;
    constexpr uint32_t num_sc0_instances = 1;
    constexpr bool has_sc1 = true;
    constexpr uint32_t num_sc1_instances = 1;
    constexpr bool has_wd = true;
    constexpr uint32_t num_wd_instances = 1;
    constexpr bool has_cg = true;
    constexpr uint32_t num_cg_instances = 1;
    constexpr bool has_fc = true;
    constexpr uint32_t num_fc_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct udfs_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct udfs2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ad_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pa_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pb_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pd_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pe_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pf_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ph_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pi_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pj_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pk_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb4_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb5_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb6_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb7_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb8_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tb9_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sbi0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sbi1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sc0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sc1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wd_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct cg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fc_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits

    // USART-specific traits
}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAC_BASE = 0x40000000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t INTSTATUS;  ///< Offset: 0x00 - DMAC Interrupt Status Register
        volatile uint32_t INTTCSTATUS;  ///< Offset: 0x04 - DMAC Interrupt Terminal Count Status Register
        volatile uint32_t INTTCCLEAR;  ///< Offset: 0x08 - DMAC Interrupt Terminal Count Clear Register
        volatile uint32_t INTERRORSTATUS;  ///< Offset: 0x0C - DMAC Interrupt Error Status Register
        volatile uint32_t INTERRCLR;  ///< Offset: 0x10 - DMAC Interrupt Error Clear Register
        volatile uint32_t RAWINTTCSTATUS;  ///< Offset: 0x14 - DMAC Raw Interrupt Terminal Count Status Register
        volatile uint32_t RAWINTERRORSTATUS;  ///< Offset: 0x18 - DMAC Raw Error Interrupt Status Register
        volatile uint32_t ENBLDCHNS;  ///< Offset: 0x1C - DMAC Enabled Channel Register
        volatile uint32_t SOFTBREQ;  ///< Offset: 0x20 - DMAC Software Burst Request Register
        volatile uint32_t SOFTSREQ;  ///< Offset: 0x24 - DMAC Software Single Request Register
        volatile uint32_t CONFIGURATION;  ///< Offset: 0x30 - DMAC Configuration Register
        volatile uint32_t C0SRCADDR;  ///< Offset: 0x100 - DMAC Channel0 Source Address Register
        volatile uint32_t C0DESTADDR;  ///< Offset: 0x104 - DMAC Channel0 Destination Address Register
        volatile uint32_t C0LLI;  ///< Offset: 0x108 - DMAC Channel0 Linked List Item Register
        volatile uint32_t C0CONTROL;  ///< Offset: 0x10C - DMAC Channel0 Control Register
        volatile uint32_t C0CONFIGURATION;  ///< Offset: 0x110 - DMAC Channel0 Configuration Register
        volatile uint32_t C1SRCADDR;  ///< Offset: 0x120 - DMAC Channel1 Source Address Register
        volatile uint32_t C1DESTADDR;  ///< Offset: 0x124 - DMAC Channel1 Destination Address Register
        volatile uint32_t C1LLI;  ///< Offset: 0x128 - DMAC Channel1 Linked List Item Register
        volatile uint32_t C1CONTROL;  ///< Offset: 0x12C - DMAC Channel1 Control Register
        volatile uint32_t C1CONFIGURATION;  ///< Offset: 0x130 - DMAC Channel1 Configuration Register
    };

    /// Peripheral instances
    inline Registers* DMAC = reinterpret_cast<Registers*>(DMAC_BASE);

    // Bit definitions
    /// INTSTATUS Register bits
    namespace intstatus_bits {
        constexpr uint32_t INTSTATUS0 = (1U << 0);  ///< INTSTATUS0
        constexpr uint32_t INTSTATUS1 = (1U << 1);  ///< INTSTATUS1
    }

    /// INTTCSTATUS Register bits
    namespace inttcstatus_bits {
        constexpr uint32_t INTTCSTATUS0 = (1U << 0);  ///< INTTCSTATUS0
        constexpr uint32_t INTTCSTATUS1 = (1U << 1);  ///< INTTCSTATUS1
    }

    /// INTTCCLEAR Register bits
    namespace inttcclear_bits {
        constexpr uint32_t INTTCCLEAR0 = (1U << 0);  ///< INTTCCLEAR0
        constexpr uint32_t INTTCCLEAR1 = (1U << 1);  ///< INTTCCLEAR1
    }

    /// INTERRORSTATUS Register bits
    namespace interrorstatus_bits {
        constexpr uint32_t INTERRSTATUS0 = (1U << 0);  ///< INTERRSTATUS0
        constexpr uint32_t INTERRSTATUS1 = (1U << 1);  ///< INTERRSTATUS1
    }

    /// INTERRCLR Register bits
    namespace interrclr_bits {
        constexpr uint32_t INTERRCLR0 = (1U << 0);  ///< INTERRCLR0
        constexpr uint32_t INTERRCLR1 = (1U << 1);  ///< INTERRCLR1
    }

    /// RAWINTTCSTATUS Register bits
    namespace rawinttcstatus_bits {
        constexpr uint32_t RAWINTTCS0 = (1U << 0);  ///< RAWINTTCS0
        constexpr uint32_t RAWINTTCS1 = (1U << 1);  ///< RAWINTTCS1
    }

    /// RAWINTERRORSTATUS Register bits
    namespace rawinterrorstatus_bits {
        constexpr uint32_t RAWINTERRS0 = (1U << 0);  ///< RAWINTERRS0
        constexpr uint32_t RAWINTERRS1 = (1U << 1);  ///< RAWINTERRS1
    }

    /// ENBLDCHNS Register bits
    namespace enbldchns_bits {
        constexpr uint32_t ENABLEDCH0 = (1U << 0);  ///< ENABLEDCH0
        constexpr uint32_t ENABLEDCH1 = (1U << 1);  ///< ENABLEDCH1
    }

    /// SOFTBREQ Register bits
    namespace softbreq_bits {
        constexpr uint32_t SOFTBREQ0 = (1U << 0);  ///< SOFTBREQ0
        constexpr uint32_t SOFTBREQ1 = (1U << 1);  ///< SOFTBREQ1
        constexpr uint32_t SOFTBREQ2 = (1U << 2);  ///< SOFTBREQ2
        constexpr uint32_t SOFTBREQ3 = (1U << 3);  ///< SOFTBREQ3
        constexpr uint32_t SOFTBREQ4 = (1U << 4);  ///< SOFTBREQ4
        constexpr uint32_t SOFTBREQ5 = (1U << 5);  ///< SOFTBREQ5
        constexpr uint32_t SOFTBREQ6 = (1U << 6);  ///< SOFTBREQ6
        constexpr uint32_t SOFTBREQ7 = (1U << 7);  ///< SOFTBREQ7
        constexpr uint32_t SOFTBREQ8 = (1U << 8);  ///< SOFTBREQ8
        constexpr uint32_t SOFTBREQ9 = (1U << 9);  ///< SOFTBREQ9
        constexpr uint32_t SOFTBREQ10 = (1U << 10);  ///< SOFTBREQ10
        constexpr uint32_t SOFTBREQ11 = (1U << 11);  ///< SOFTBREQ11
        constexpr uint32_t SOFTBREQ12 = (1U << 12);  ///< SOFTBREQ12
        constexpr uint32_t SOFTBREQ13 = (1U << 13);  ///< SOFTBREQ13
        constexpr uint32_t SOFTBREQ14 = (1U << 14);  ///< SOFTBREQ14
        constexpr uint32_t SOFTBREQ15 = (1U << 15);  ///< SOFTBREQ15
    }

    /// SOFTSREQ Register bits
    namespace softsreq_bits {
        constexpr uint32_t SOFTSREQ10 = (1U << 10);  ///< SOFTSREQ10
        constexpr uint32_t SOFTSREQ11 = (1U << 11);  ///< SOFTSREQ11
        constexpr uint32_t SOFTSREQ12 = (1U << 12);  ///< SOFTSREQ12
        constexpr uint32_t SOFTSREQ13 = (1U << 13);  ///< SOFTSREQ13
        constexpr uint32_t SOFTSREQ14 = (1U << 14);  ///< SOFTSREQ14
        constexpr uint32_t SOFTSREQ15 = (1U << 15);  ///< SOFTSREQ15
    }

    /// CONFIGURATION Register bits
    namespace configuration_bits {
        constexpr uint32_t E = (1U << 0);  ///< E
        constexpr uint32_t M = (1U << 1);  ///< M
    }

    /// C0SRCADDR Register bits
    namespace c0srcaddr_bits {
        constexpr uint32_t SRCADDR = (32 << 0);  ///< SRCADDR
    }

    /// C0DESTADDR Register bits
    namespace c0destaddr_bits {
        constexpr uint32_t DESTADDR = (32 << 0);  ///< DESTADDR
    }

    /// C0LLI Register bits
    namespace c0lli_bits {
        constexpr uint32_t LLI = (30 << 2);  ///< LLI
    }

    /// C0CONTROL Register bits
    namespace c0control_bits {
        constexpr uint32_t TRANSFERSIZE = (12 << 0);  ///< TRANSFERSIZE
        constexpr uint32_t SBSIZE = (3 << 12);  ///< SBSIZE
        constexpr uint32_t DBSIZE = (3 << 15);  ///< DBSIZE
        constexpr uint32_t SWIDTH = (3 << 18);  ///< SWIDTH
        constexpr uint32_t DWIDTH = (3 << 21);  ///< DWIDTH
        constexpr uint32_t SI = (1U << 26);  ///< SI
        constexpr uint32_t DI = (1U << 27);  ///< DI
        constexpr uint32_t I = (1U << 31);  ///< I
    }

    /// C0CONFIGURATION Register bits
    namespace c0configuration_bits {
        constexpr uint32_t E = (1U << 0);  ///< E
        constexpr uint32_t SRCPERIPHERAL = (4 << 1);  ///< SRCPERIPHERAL
        constexpr uint32_t DESTPERIPHERAL = (4 << 6);  ///< DESTPERIPHERAL
        constexpr uint32_t FLOWCNTRL = (3 << 11);  ///< FLOWCNTRL
        constexpr uint32_t IE = (1U << 14);  ///< IE
        constexpr uint32_t ITC = (1U << 15);  ///< ITC
        constexpr uint32_t LOCK = (1U << 16);  ///< LOCK
        constexpr uint32_t ACTIVE = (1U << 17);  ///< ACTIVE
        constexpr uint32_t HALT = (1U << 18);  ///< HALT
    }

    /// C1SRCADDR Register bits
    namespace c1srcaddr_bits {
        constexpr uint32_t SRCADDR = (32 << 0);  ///< SRCADDR
    }

    /// C1DESTADDR Register bits
    namespace c1destaddr_bits {
        constexpr uint32_t DESTADDR = (32 << 0);  ///< DESTADDR
    }

    /// C1LLI Register bits
    namespace c1lli_bits {
        constexpr uint32_t LLI = (31 << 1);  ///< LLI
    }

    /// C1CONTROL Register bits
    namespace c1control_bits {
        constexpr uint32_t TRANSFERSIZE = (12 << 0);  ///< TRANSFERSIZE
        constexpr uint32_t SBSIZE = (3 << 12);  ///< SBSIZE
        constexpr uint32_t DBSIZE = (3 << 15);  ///< DBSIZE
        constexpr uint32_t SWIDTH = (3 << 18);  ///< SWIDTH
        constexpr uint32_t DWIDTH = (3 << 21);  ///< DWIDTH
        constexpr uint32_t SI = (1U << 26);  ///< SI
        constexpr uint32_t DI = (1U << 27);  ///< DI
        constexpr uint32_t I = (1U << 31);  ///< I
    }

    /// C1CONFIGURATION Register bits
    namespace c1configuration_bits {
        constexpr uint32_t E = (1U << 0);  ///< E
        constexpr uint32_t SRCPERIPHERAL = (4 << 1);  ///< SRCPERIPHERAL
        constexpr uint32_t DESTPERIPHERAL = (4 << 6);  ///< DESTPERIPHERAL
        constexpr uint32_t FLOWCNTRL = (3 << 11);  ///< FLOWCNTRL
        constexpr uint32_t IE = (1U << 14);  ///< IE
        constexpr uint32_t ITC = (1U << 15);  ///< ITC
        constexpr uint32_t LOCK = (1U << 16);  ///< LOCK
        constexpr uint32_t ACTIVE = (1U << 17);  ///< ACTIVE
        constexpr uint32_t HALT = (1U << 18);  ///< HALT
    }

}

// ============================================================================
// UDFS Peripheral
// ============================================================================

namespace udfs {
    /// Base addresses
    constexpr uint32_t UDFS_BASE = 0x40008000;

    /// UDFS Register structure
    struct Registers {
        volatile uint32_t INTSTS;  ///< Offset: 0x00 - Interrupt Status Register
        volatile uint32_t INTENB;  ///< Offset: 0x04 - Interrupt Enable Register
        volatile uint32_t MWTOUT;  ///< Offset: 0x08 - Master Write Timeout Register
        volatile uint32_t C2STSET;  ///< Offset: 0x0C - UDC2 setting
        volatile uint32_t MSTSET;  ///< Offset: 0x10 - DMAC setting
        volatile uint32_t DMACRDREQ;  ///< Offset: 0x14 - DMAC Read request
        volatile uint32_t DMACRDVL;  ///< Offset: 0x18 - DMAC Read Value
        volatile uint32_t UDC2RDREQ;  ///< Offset: 0x1C - UDC2 Read Request
        volatile uint32_t UDC2RDVL;  ///< Offset: 0x20 - UDC2 Read Value
        volatile uint32_t ARBTSET;  ///< Offset: 0x3C - Arbiter Setting
        volatile uint32_t MWSADR;  ///< Offset: 0x40 - Master Write Start Address
        volatile uint32_t MWEADR;  ///< Offset: 0x44 - Master Write End Address
        volatile uint32_t MWCADR;  ///< Offset: 0x48 - Master Write Current Address
        volatile uint32_t MWAHBADR;  ///< Offset: 0x4C - Master Write AHB Address
        volatile uint32_t MRSADR;  ///< Offset: 0x50 - Master Read Start Address
        volatile uint32_t MREADR;  ///< Offset: 0x54 - Master Read End Address
        volatile uint32_t MRCADR;  ///< Offset: 0x58 - Master Read Current Address
        volatile uint32_t MRAHBADR;  ///< Offset: 0x5C - Master Read AHB Address
        volatile uint32_t PWCTL;  ///< Offset: 0x80 - Power Detect Control
        volatile uint32_t MSTSTS;  ///< Offset: 0x84 - Master Status
        volatile uint32_t TOUTCNT;  ///< Offset: 0x88 - Timeout Count
    };

    /// Peripheral instances
    inline Registers* UDFS = reinterpret_cast<Registers*>(UDFS_BASE);

    // Bit definitions
    /// INTSTS Register bits
    namespace intsts_bits {
        constexpr uint32_t SETUP = (1U << 0);  ///< SETUP
        constexpr uint32_t STATUS_NAK = (1U << 1);  ///< STATUS_NAK
        constexpr uint32_t STATUS = (1U << 2);  ///< STATUS
        constexpr uint32_t RX_ZERO = (1U << 3);  ///< RX_ZERO
        constexpr uint32_t SOF = (1U << 4);  ///< SOF
        constexpr uint32_t EP0 = (1U << 5);  ///< EP0
        constexpr uint32_t EP = (1U << 6);  ///< EP
        constexpr uint32_t NAK = (1U << 7);  ///< NAK
        constexpr uint32_t SUSPEND_RESUME = (1U << 8);  ///< SUSPEND_RESUME
        constexpr uint32_t USB_RESET = (1U << 9);  ///< USB_RESET
        constexpr uint32_t USB_RESET_END = (1U << 10);  ///< USB_RESET_END
        constexpr uint32_t MW_SET_ADD = (1U << 17);  ///< MW_SET_ADD
        constexpr uint32_t MW_END_ADD = (1U << 18);  ///< MW_END_ADD
        constexpr uint32_t MW_TIMEOUT = (1U << 19);  ///< MW_TIMEOUT
        constexpr uint32_t MW_AHBERR = (1U << 20);  ///< MW_AHBERR
        constexpr uint32_t MR_END_ADD = (1U << 21);  ///< MR_END_ADD
        constexpr uint32_t MR_EP_DSET = (1U << 22);  ///< MR_EP_DSET
        constexpr uint32_t MR_AHBERR = (1U << 23);  ///< MR_AHBERR
        constexpr uint32_t UDC2_REG_RD = (1U << 24);  ///< UDC2_REG_RD
        constexpr uint32_t DMAC_REG_RD = (1U << 25);  ///< DMAC_REG_RD
        constexpr uint32_t POWERDETECT = (1U << 28);  ///< POWERDETECT
        constexpr uint32_t MW_RERR = (1U << 29);  ///< MW_RERR
    }

    /// INTENB Register bits
    namespace intenb_bits {
        constexpr uint32_t SUSPEND_RESUME_EN = (1U << 8);  ///< SUSPEND_RESUME_EN
        constexpr uint32_t RESET_EN = (1U << 9);  ///< RESET_EN
        constexpr uint32_t RESET_END_EN = (1U << 10);  ///< RESET_END_EN
        constexpr uint32_t MW_SET_ADD_EN = (1U << 17);  ///< MW_SET_ADD_EN
        constexpr uint32_t MW_END_ADD_EN = (1U << 18);  ///< MW_END_ADD_EN
        constexpr uint32_t MW_TIMEOUT = (1U << 19);  ///< MW_TIMEOUT
        constexpr uint32_t MW_AHBERR = (1U << 20);  ///< MW_AHBERR
        constexpr uint32_t MR_END_ADD_EN = (1U << 21);  ///< MR_END_ADD_EN
        constexpr uint32_t MR_EP_DSET_EN = (1U << 22);  ///< MR_EP_DSET_EN
        constexpr uint32_t MR_AHBERR = (1U << 23);  ///< MR_AHBERR
        constexpr uint32_t UDC2_REG_RD = (1U << 24);  ///< UDC2_REG_RD
        constexpr uint32_t DMAC_REG_RD_EN = (1U << 25);  ///< DMAC_REG_RD_EN
        constexpr uint32_t POWER_DETECT_EN = (1U << 28);  ///< POWER_DETECT_EN
        constexpr uint32_t MW_RERROR_EN = (1U << 29);  ///< MW_RERROR_EN
    }

    /// MWTOUT Register bits
    namespace mwtout_bits {
        constexpr uint32_t TIMEOUT_EN = (1U << 0);  ///< TIMEOUT_EN
        constexpr uint32_t TIMEOUTSET = (31 << 1);  ///< TIMEOUTSET
    }

    /// C2STSET Register bits
    namespace c2stset_bits {
        constexpr uint32_t TX0 = (1U << 0);  ///< TX0
        constexpr uint32_t EOPB_ENABLE = (1U << 4);  ///< EOPB_ENABLE
    }

    /// MSTSET Register bits
    namespace mstset_bits {
        constexpr uint32_t MW_ENABLE = (1U << 0);  ///< MW_ENABLE
        constexpr uint32_t MW_ABORT = (1U << 1);  ///< MW_ABORT
        constexpr uint32_t MW_RESET = (1U << 2);  ///< MW_RESET
        constexpr uint32_t MR_ENABLE = (1U << 4);  ///< MR_ENABLE
        constexpr uint32_t MR_ABORT = (1U << 5);  ///< MR_ABORT
        constexpr uint32_t MR_RESET = (1U << 6);  ///< MR_RESET
        constexpr uint32_t M_BURST_TYPE = (1U << 8);  ///< M_BURST_TYPE
    }

    /// DMACRDREQ Register bits
    namespace dmacrdreq_bits {
        constexpr uint32_t DMARDADR = (6 << 2);  ///< DMARDADR
        constexpr uint32_t DMARDCLR = (1U << 30);  ///< DMARDCLR
        constexpr uint32_t DMARDREQ = (1U << 31);  ///< DMARDREQ
    }

    /// DMACRDVL Register bits
    namespace dmacrdvl_bits {
        constexpr uint32_t DMARDDATA = (32 << 0);  ///< DMARDDATA
    }

    /// UDC2RDREQ Register bits
    namespace udc2rdreq_bits {
        constexpr uint32_t UDC2RDADR = (8 << 2);  ///< UDC2RDADR
        constexpr uint32_t UDC2RDCLR = (1U << 30);  ///< UDC2RDCLR
        constexpr uint32_t UDC2RDREQ = (1U << 31);  ///< UDC2RDREQ
    }

    /// UDC2RDVL Register bits
    namespace udc2rdvl_bits {
        constexpr uint32_t UDC2RDATA = (32 << 0);  ///< UDC2RDATA
    }

    /// ARBTSET Register bits
    namespace arbtset_bits {
        constexpr uint32_t ABTPRI_R0 = (2 << 0);  ///< ABTPRI_R0
        constexpr uint32_t ABTPRI_R1 = (2 << 4);  ///< ABTPRI_R1
        constexpr uint32_t ABTPRI_W0 = (2 << 8);  ///< ABTPRI_W0
        constexpr uint32_t ABTPRI_W1 = (2 << 12);  ///< ABTPRI_W1
        constexpr uint32_t ABTMOD = (1U << 28);  ///< ABTMOD
        constexpr uint32_t ABT_EN = (1U << 31);  ///< ABT_EN
    }

    /// MWSADR Register bits
    namespace mwsadr_bits {
        constexpr uint32_t MWSADR = (32 << 0);  ///< MWSADR
    }

    /// MWEADR Register bits
    namespace mweadr_bits {
        constexpr uint32_t MWEADR = (32 << 0);  ///< MWEADR
    }

    /// MWCADR Register bits
    namespace mwcadr_bits {
        constexpr uint32_t MWCADR = (32 << 0);  ///< MWCADR
    }

    /// MWAHBADR Register bits
    namespace mwahbadr_bits {
        constexpr uint32_t MWAHBADR = (32 << 0);  ///< MWAHBADR
    }

    /// MRSADR Register bits
    namespace mrsadr_bits {
        constexpr uint32_t MRSADR = (32 << 0);  ///< MRSADR
    }

    /// MREADR Register bits
    namespace mreadr_bits {
        constexpr uint32_t MREADR = (32 << 0);  ///< MREADR
    }

    /// MRCADR Register bits
    namespace mrcadr_bits {
        constexpr uint32_t MRCADR = (32 << 0);  ///< MRCADR
    }

    /// MRAHBADR Register bits
    namespace mrahbadr_bits {
        constexpr uint32_t MRAHBADR = (32 << 0);  ///< MRAHBADR
    }

    /// PWCTL Register bits
    namespace pwctl_bits {
        constexpr uint32_t USB_RESET = (1U << 0);  ///< USB_RESET
        constexpr uint32_t PW_RESETB = (1U << 1);  ///< PW_RESETB
        constexpr uint32_t PW_DETECT = (1U << 2);  ///< PW_DETECT
        constexpr uint32_t PHY_SUSPEND = (1U << 3);  ///< PHY_SUSPEND
        constexpr uint32_t SUSPEND_X = (1U << 4);  ///< SUSPEND_X
        constexpr uint32_t PHY_RESETB = (1U << 5);  ///< PHY_RESETB
        constexpr uint32_t PHY_REMOTE_WKUP = (1U << 6);  ///< PHY_REMOTE_WKUP
        constexpr uint32_t WAKEUP_EN = (1U << 7);  ///< WAKEUP_EN
    }

    /// MSTSTS Register bits
    namespace mststs_bits {
        constexpr uint32_t MWEPDSET = (1U << 0);  ///< MWEPDSET
        constexpr uint32_t MREPDSET = (1U << 1);  ///< MREPDSET
        constexpr uint32_t MWBFEMP = (1U << 2);  ///< MWBFEMP
        constexpr uint32_t MRBFEMP = (1U << 3);  ///< MRBFEMP
        constexpr uint32_t MREPEMPTY = (1U << 4);  ///< MREPEMPTY
    }

    /// TOUTCNT Register bits
    namespace toutcnt_bits {
        constexpr uint32_t TMOUTCNT = (32 << 0);  ///< TMOUTCNT
    }

}

// ============================================================================
// UDFS2 Peripheral
// ============================================================================

namespace udfs2 {
    /// Base addresses
    constexpr uint32_t UDFS2_BASE = 0x40008200;

    /// UDFS2 Register structure
    struct Registers {
        volatile uint32_t ADR;  ///< Offset: 0x00 - UDC2 Address State
        volatile uint32_t FRM;  ///< Offset: 0x04 - UDC2 Frame
        volatile uint32_t CMD;  ///< Offset: 0x0C - UDC2 Command
        volatile uint32_t BRQ;  ///< Offset: 0x10 - UDC2 bRequest-bmRequest Type
        volatile uint32_t WVL;  ///< Offset: 0x14 - UDC2 wValue
        volatile uint32_t WIDX;  ///< Offset: 0x18 - UDC2 wIndex
        volatile uint32_t WLGTH;  ///< Offset: 0x1C - UDC2 wLength
        volatile uint32_t INT;  ///< Offset: 0x20 - UDC2 INT
        volatile uint32_t INTEP;  ///< Offset: 0x24 - UDC2 INT_EP
        volatile uint32_t INTEPMSK;  ///< Offset: 0x28 - UDC2 INT_EP_MASK
        volatile uint32_t INTRX0;  ///< Offset: 0x2C - UDC2 INT RX DATA0
        volatile uint32_t EP0MSZ;  ///< Offset: 0x30 - UDC2 EP0 Max Packet Size
        volatile uint32_t EP0STS;  ///< Offset: 0x34 - UDC2 EP0 Status
        volatile uint32_t EP0DSZ;  ///< Offset: 0x38 - UDC2 EP0 Data Size
        volatile uint32_t EP0FIFO;  ///< Offset: 0x3C - UDC2 EP0 FIFO
        volatile uint32_t EP1MSZ;  ///< Offset: 0x40 - UDC2 EP1 Max Packet Size
        volatile uint32_t EP1STS;  ///< Offset: 0x44 - UDC2 EP1 Status
        volatile uint32_t EP1DSZ;  ///< Offset: 0x48 - UDC2 EP1 Data Size
        volatile uint32_t EP1FIFO;  ///< Offset: 0x4C - UDC2 EP1 FIFO
        volatile uint32_t EP2MSZ;  ///< Offset: 0x50 - UDC2 EP2 Max Packet Size
        volatile uint32_t EP2STS;  ///< Offset: 0x54 - UDC2 EP2 Status
        volatile uint32_t EP2DSZ;  ///< Offset: 0x58 - UDC2 EP2 Data Size
        volatile uint32_t EP2FIFO;  ///< Offset: 0x5C - UDC2 EP2 FIFO
        volatile uint32_t EP3MSZ;  ///< Offset: 0x60 - UDC2 EP3 Max Packet Size
        volatile uint32_t EP3STS;  ///< Offset: 0x64 - UDC2 EP3 Status
        volatile uint32_t EP3DSZ;  ///< Offset: 0x68 - UDC2 EP3 Data Size
        volatile uint32_t EP3FIFO;  ///< Offset: 0x6C - UDC2 EP3 FIFO
        volatile uint32_t EP4MSZ;  ///< Offset: 0x70 - UDC2 EP4 Max Packet Size
        volatile uint32_t EP4STS;  ///< Offset: 0x74 - UDC2 EP4 Status
        volatile uint32_t EP4DSZ;  ///< Offset: 0x78 - UDC2 EP4 Data Size
        volatile uint32_t EP4FIFO;  ///< Offset: 0x7C - UDC2 EP4 FIFO
        volatile uint32_t EP5MSZ;  ///< Offset: 0x80 - UDC2 EP5 Max Packet Size
        volatile uint32_t EP5STS;  ///< Offset: 0x84 - UDC2 EP5 Status
        volatile uint32_t EP5DSZ;  ///< Offset: 0x88 - UDC2 EP5 Data Size
        volatile uint32_t EP5FIFO;  ///< Offset: 0x8C - UDC2 EP5 FIFO
        volatile uint32_t EP6MSZ;  ///< Offset: 0x90 - UDC2 EP6 Max Packet Size
        volatile uint32_t EP6STS;  ///< Offset: 0x94 - UDC2 EP6 Status
        volatile uint32_t EP6DSZ;  ///< Offset: 0x98 - UDC2 EP6 Data Size
        volatile uint32_t EP6FIFO;  ///< Offset: 0x9C - UDC2 EP6 FIFO
        volatile uint32_t EP7MSZ;  ///< Offset: 0xA0 - UDC2 EP7 Max Packet Size
        volatile uint32_t EP7STS;  ///< Offset: 0xA4 - UDC2 EP7 Status
        volatile uint32_t EP7DSZ;  ///< Offset: 0xA8 - UDC2 EP7 Data Size
        volatile uint32_t EP7FIFO;  ///< Offset: 0xAC - UDC2 EP7 FIFO
        volatile uint32_t INTNAK;  ///< Offset: 0x130 - UDC2 INT NAK
        volatile uint32_t INTNAKMSK;  ///< Offset: 0x134 - UDC2 INT NAK MASK
    };

    /// Peripheral instances
    inline Registers* UDFS2 = reinterpret_cast<Registers*>(UDFS2_BASE);

    // Bit definitions
    /// ADR Register bits
    namespace adr_bits {
        constexpr uint32_t DEV_ADR = (7 << 0);  ///< DEV_ADR
        constexpr uint32_t DEFAULT = (1U << 8);  ///< DEFAULT
        constexpr uint32_t ADDRESSED = (1U << 9);  ///< ADDRESSED
        constexpr uint32_t CONFIGURED = (1U << 10);  ///< CONFIGURED
        constexpr uint32_t SUSPEND = (1U << 11);  ///< SUSPEND
        constexpr uint32_t CUR_SPEED = (2 << 12);  ///< CUR_SPEED
        constexpr uint32_t EP_BI_MODE = (1U << 14);  ///< EP_BI_MODE
        constexpr uint32_t STAGE_ERR = (1U << 15);  ///< STAGE_ERR
    }

    /// FRM Register bits
    namespace frm_bits {
        constexpr uint32_t FRAME = (11 << 0);  ///< FRAME
        constexpr uint32_t F_STATUS = (2 << 12);  ///< F_STATUS
        constexpr uint32_t CREATE_SOF = (1U << 15);  ///< CREATE_SOF
    }

    /// CMD Register bits
    namespace cmd_bits {
        constexpr uint32_t COM = (4 << 0);  ///< COM
        constexpr uint32_t EP = (4 << 4);  ///< EP
        constexpr uint32_t RX_NULLPKT_EP = (4 << 8);  ///< RX_NULLPKT_EP
        constexpr uint32_t INT_TOGGLE = (1U << 15);  ///< INT_TOGGLE
    }

    /// BRQ Register bits
    namespace brq_bits {
        constexpr uint32_t RECIPIENT = (5 << 0);  ///< RECIPIENT
        constexpr uint32_t REQ_TYPE = (2 << 5);  ///< REQ_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t REQUESET = (8 << 8);  ///< REQUESET
    }

    /// WVL Register bits
    namespace wvl_bits {
        constexpr uint32_t VALUE = (16 << 0);  ///< VALUE
    }

    /// WIDX Register bits
    namespace widx_bits {
        constexpr uint32_t INDEX = (16 << 0);  ///< INDEX
    }

    /// WLGTH Register bits
    namespace wlgth_bits {
        constexpr uint32_t LENGTH = (16 << 0);  ///< LENGTH
    }

    /// INT Register bits
    namespace int_bits {
        constexpr uint32_t I_SETUP = (1U << 0);  ///< I_SETUP
        constexpr uint32_t I_STATUS_NAK = (1U << 1);  ///< I_STATUS_NAK
        constexpr uint32_t I_STATUS = (1U << 2);  ///< I_STATUS
        constexpr uint32_t I_RX_DATA0 = (1U << 3);  ///< I_RX_DATA0
        constexpr uint32_t I_SOF = (1U << 4);  ///< I_SOF
        constexpr uint32_t I_EP0 = (1U << 5);  ///< I_EP0
        constexpr uint32_t I_EP = (1U << 6);  ///< I_EP
        constexpr uint32_t I_NAK = (1U << 7);  ///< I_NAK
        constexpr uint32_t M_SETUP = (1U << 8);  ///< M_SETUP
        constexpr uint32_t M_STATUS_NAK = (1U << 9);  ///< M_STATUS_NAK
        constexpr uint32_t M_STATUS = (1U << 10);  ///< M_STATUS
        constexpr uint32_t M_RX_DATA0 = (1U << 11);  ///< M_RX_DATA0
        constexpr uint32_t M_SOF = (1U << 12);  ///< M_SOF
        constexpr uint32_t M_EP0 = (1U << 13);  ///< M_EP0
        constexpr uint32_t M_EP = (1U << 14);  ///< M_EP
        constexpr uint32_t M_NAK = (1U << 15);  ///< M_NAK
    }

    /// INTEP Register bits
    namespace intep_bits {
        constexpr uint32_t I_EP1 = (1U << 1);  ///< I_EP1
        constexpr uint32_t I_EP2 = (1U << 2);  ///< I_EP2
        constexpr uint32_t I_EP3 = (1U << 3);  ///< I_EP3
        constexpr uint32_t I_EP4 = (1U << 4);  ///< I_EP4
        constexpr uint32_t I_EP5 = (1U << 5);  ///< I_EP5
        constexpr uint32_t I_EP6 = (1U << 6);  ///< I_EP6
        constexpr uint32_t I_EP7 = (1U << 7);  ///< I_EP7
    }

    /// INTEPMSK Register bits
    namespace intepmsk_bits {
        constexpr uint32_t M_EP0 = (1U << 0);  ///< M_EP0
        constexpr uint32_t M_EP1 = (1U << 1);  ///< M_EP1
        constexpr uint32_t M_EP2 = (1U << 2);  ///< M_EP2
        constexpr uint32_t M_EP3 = (1U << 3);  ///< M_EP3
        constexpr uint32_t M_EP4 = (1U << 4);  ///< M_EP4
        constexpr uint32_t M_EP5 = (1U << 5);  ///< M_EP5
        constexpr uint32_t M_EP6 = (1U << 6);  ///< M_EP6
        constexpr uint32_t M_EP7 = (1U << 7);  ///< M_EP7
    }

    /// INTRX0 Register bits
    namespace intrx0_bits {
        constexpr uint32_t RX_D0_EP0 = (1U << 0);  ///< RX_D0_EP0
        constexpr uint32_t RX_D0_EP1 = (1U << 1);  ///< RX_D0_EP1
        constexpr uint32_t RX_D0_EP2 = (1U << 2);  ///< RX_D0_EP2
        constexpr uint32_t RX_D0_EP3 = (1U << 3);  ///< RX_D0_EP3
        constexpr uint32_t RX_D0_EP4 = (1U << 4);  ///< RX_D0_EP4
        constexpr uint32_t RX_D0_EP5 = (1U << 5);  ///< RX_D0_EP5
        constexpr uint32_t RX_D0_EP6 = (1U << 6);  ///< RX_D0_EP6
        constexpr uint32_t RX_D0_EP7 = (1U << 7);  ///< RX_D0_EP7
    }

    /// EP0MSZ Register bits
    namespace ep0msz_bits {
        constexpr uint32_t MAX_PKT = (7 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX0_DATA = (1U << 15);  ///< TX0_DATA
    }

    /// EP0STS Register bits
    namespace ep0sts_bits {
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t EP0_MASK = (1U << 15);  ///< EP0_MASK
    }

    /// EP0DSZ Register bits
    namespace ep0dsz_bits {
        constexpr uint32_t SIZE = (7 << 0);  ///< SIZE
    }

    /// EP0FIFO Register bits
    namespace ep0fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP1MSZ Register bits
    namespace ep1msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX0_DATA = (1U << 15);  ///< TX0_DATA
    }

    /// EP1STS Register bits
    namespace ep1sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP1DSZ Register bits
    namespace ep1dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP1FIFO Register bits
    namespace ep1fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP2MSZ Register bits
    namespace ep2msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX0_DATA = (1U << 15);  ///< TX0_DATA
    }

    /// EP2STS Register bits
    namespace ep2sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP2DSZ Register bits
    namespace ep2dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP2FIFO Register bits
    namespace ep2fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP3MSZ Register bits
    namespace ep3msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX0_DATA = (1U << 15);  ///< TX0_DATA
    }

    /// EP3STS Register bits
    namespace ep3sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP3DSZ Register bits
    namespace ep3dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP3FIFO Register bits
    namespace ep3fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP4MSZ Register bits
    namespace ep4msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX0_DATA = (1U << 15);  ///< TX0_DATA
    }

    /// EP4STS Register bits
    namespace ep4sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP4DSZ Register bits
    namespace ep4dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP4FIFO Register bits
    namespace ep4fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP5MSZ Register bits
    namespace ep5msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX0_DATA = (1U << 15);  ///< TX0_DATA
    }

    /// EP5STS Register bits
    namespace ep5sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP5DSZ Register bits
    namespace ep5dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP5FIFO Register bits
    namespace ep5fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP6MSZ Register bits
    namespace ep6msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX0_DATA = (1U << 15);  ///< TX0_DATA
    }

    /// EP6STS Register bits
    namespace ep6sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP6DSZ Register bits
    namespace ep6dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP6FIFO Register bits
    namespace ep6fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP7MSZ Register bits
    namespace ep7msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX0_DATA = (1U << 15);  ///< TX0_DATA
    }

    /// EP7STS Register bits
    namespace ep7sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP7DSZ Register bits
    namespace ep7dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP7FIFO Register bits
    namespace ep7fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// INTNAK Register bits
    namespace intnak_bits {
        constexpr uint32_t I_EP1 = (1U << 1);  ///< I_EP1
        constexpr uint32_t I_EP2 = (1U << 2);  ///< I_EP2
        constexpr uint32_t I_EP3 = (1U << 3);  ///< I_EP3
        constexpr uint32_t I_EP4 = (1U << 4);  ///< I_EP4
        constexpr uint32_t I_EP5 = (1U << 5);  ///< I_EP5
        constexpr uint32_t I_EP6 = (1U << 6);  ///< I_EP6
        constexpr uint32_t I_EP7 = (1U << 7);  ///< I_EP7
    }

    /// INTNAKMSK Register bits
    namespace intnakmsk_bits {
        constexpr uint32_t M_EP1 = (1U << 1);  ///< M_EP1
        constexpr uint32_t M_EP2 = (1U << 2);  ///< M_EP2
        constexpr uint32_t M_EP3 = (1U << 3);  ///< M_EP3
        constexpr uint32_t M_EP4 = (1U << 4);  ///< M_EP4
        constexpr uint32_t M_EP5 = (1U << 5);  ///< M_EP5
        constexpr uint32_t M_EP6 = (1U << 6);  ///< M_EP6
        constexpr uint32_t M_EP7 = (1U << 7);  ///< M_EP7
    }

}

// ============================================================================
// AD Peripheral
// ============================================================================

namespace ad {
    /// Base addresses
    constexpr uint32_t AD_BASE = 0x40050000;

    /// AD Register structure
    struct Registers {
        volatile uint32_t CLK;  ///< Offset: 0x00 - AD Conversion Clock Setting Register
        volatile uint32_t MOD0;  ///< Offset: 0x04 - AD Mode Control Register 0
        volatile uint32_t MOD1;  ///< Offset: 0x08 - AD Mode Control Register 1
        volatile uint32_t MOD2;  ///< Offset: 0x0C - AD Mode Control Register 2
        volatile uint32_t MOD3;  ///< Offset: 0x10 - AD Mode Control Register 3
        volatile uint32_t MOD4;  ///< Offset: 0x14 - AD Mode Control Register 4
        volatile uint32_t MOD5;  ///< Offset: 0x18 - AD Mode Control Register 5
        volatile uint32_t MOD6;  ///< Offset: 0x1C - AD Mode Control Register 6
        volatile uint32_t MOD7;  ///< Offset: 0x20 - AD Mode Control Register 7
        volatile uint32_t CMPCR0;  ///< Offset: 0x24 - AD Monitoring Setting Register 0
        volatile uint32_t CMPCR1;  ///< Offset: 0x28 - AD Monitoring Setting Register 1
        volatile uint32_t CMP0;  ///< Offset: 0x2C - AD Conversion Result Comparison Register 0
        volatile uint32_t CMP1;  ///< Offset: 0x30 - AD Conversion Result Comparison Register 1
        volatile uint32_t REG00;  ///< Offset: 0x34 - AD Conversion Result Register 00
        volatile uint32_t REG01;  ///< Offset: 0x38 - AD Conversion Result Register 01
        volatile uint32_t REG02;  ///< Offset: 0x3C - AD Conversion Result Register 02
        volatile uint32_t REG03;  ///< Offset: 0x40 - AD Conversion Result Register 03
        volatile uint32_t REG04;  ///< Offset: 0x44 - AD Conversion Result Register 04
        volatile uint32_t REG05;  ///< Offset: 0x48 - AD Conversion Result Register 05
        volatile uint32_t REG06;  ///< Offset: 0x4C - AD Conversion Result Register 06
        volatile uint32_t REG07;  ///< Offset: 0x50 - AD Conversion Result Register 07
        volatile uint32_t REG08;  ///< Offset: 0x54 - AD Conversion Result Register 08
        volatile uint32_t REG09;  ///< Offset: 0x58 - AD Conversion Result Register 09
        volatile uint32_t REG10;  ///< Offset: 0x5C - AD Conversion Result Register 10
        volatile uint32_t REG11;  ///< Offset: 0x60 - AD Conversion Result Register 11
        volatile uint32_t REGSP;  ///< Offset: 0x74 - AD Conversion Result Register SP
    };

    /// Peripheral instances
    inline Registers* AD = reinterpret_cast<Registers*>(AD_BASE);

    // Bit definitions
    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t ADCLK = (3 << 0);  ///< ADCLK
        constexpr uint32_t ADSH = (4 << 4);  ///< ADSH
    }

    /// MOD0 Register bits
    namespace mod0_bits {
        constexpr uint32_t ADS = (1U << 0);  ///< ADS
        constexpr uint32_t HPADS = (1U << 1);  ///< HPADS
    }

    /// MOD1 Register bits
    namespace mod1_bits {
        constexpr uint32_t ADHWE = (1U << 0);  ///< ADHWE
        constexpr uint32_t ADHWS = (1U << 1);  ///< ADHWS
        constexpr uint32_t HPADHWE = (1U << 2);  ///< HPADHWE
        constexpr uint32_t HPADHWS = (1U << 3);  ///< HPADHWS
        constexpr uint32_t RCUT = (1U << 5);  ///< RCUT
        constexpr uint32_t I2AD = (1U << 6);  ///< I2AD
        constexpr uint32_t VREFON = (1U << 7);  ///< VREFON
    }

    /// MOD2 Register bits
    namespace mod2_bits {
        constexpr uint32_t ADCH = (4 << 0);  ///< ADCH
        constexpr uint32_t HPADCH = (4 << 4);  ///< HPADCH
    }

    /// MOD3 Register bits
    namespace mod3_bits {
        constexpr uint32_t SCAN = (1U << 0);  ///< SCAN
        constexpr uint32_t REPEAT = (1U << 1);  ///< REPEAT
        constexpr uint32_t ITM = (3 << 4);  ///< ITM
    }

    /// MOD4 Register bits
    namespace mod4_bits {
        constexpr uint32_t SCANSTA = (4 << 0);  ///< SCANSTA
        constexpr uint32_t SCANAREA = (4 << 4);  ///< SCANAREA
    }

    /// MOD5 Register bits
    namespace mod5_bits {
        constexpr uint32_t ADBF = (1U << 0);  ///< ADBF
        constexpr uint32_t EOCF = (1U << 1);  ///< EOCF
        constexpr uint32_t HPADBF = (1U << 2);  ///< HPADBF
        constexpr uint32_t HPEOCF = (1U << 3);  ///< HPEOCF
    }

    /// MOD6 Register bits
    namespace mod6_bits {
        constexpr uint32_t ADRST = (2 << 0);  ///< ADRST
    }

    /// MOD7 Register bits
    namespace mod7_bits {
        constexpr uint32_t INTADDMA = (1U << 0);  ///< INTADDMA
        constexpr uint32_t INTADHPDMA = (1U << 1);  ///< INTADHPDMA
    }

    /// CMPCR0 Register bits
    namespace cmpcr0_bits {
        constexpr uint32_t REGS0 = (4 << 0);  ///< REGS0
        constexpr uint32_t ADBIG0 = (1U << 4);  ///< ADBIG0
        constexpr uint32_t CMP0EN = (1U << 7);  ///< CMP0EN
        constexpr uint32_t CMPCNT0 = (4 << 8);  ///< CMPCNT0
    }

    /// CMPCR1 Register bits
    namespace cmpcr1_bits {
        constexpr uint32_t REGS1 = (4 << 0);  ///< REGS1
        constexpr uint32_t ADBIG1 = (1U << 4);  ///< ADBIG1
        constexpr uint32_t CMP1EN = (1U << 7);  ///< CMP1EN
        constexpr uint32_t CMPCNT1 = (4 << 8);  ///< CMPCNT1
    }

    /// CMP0 Register bits
    namespace cmp0_bits {
        constexpr uint32_t AD0CMP = (12 << 0);  ///< AD0CMP
    }

    /// CMP1 Register bits
    namespace cmp1_bits {
        constexpr uint32_t AD1CMP = (12 << 0);  ///< AD1CMP
    }

    /// REG00 Register bits
    namespace reg00_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG01 Register bits
    namespace reg01_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG02 Register bits
    namespace reg02_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG03 Register bits
    namespace reg03_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG04 Register bits
    namespace reg04_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG05 Register bits
    namespace reg05_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG06 Register bits
    namespace reg06_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG07 Register bits
    namespace reg07_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG08 Register bits
    namespace reg08_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG09 Register bits
    namespace reg09_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG10 Register bits
    namespace reg10_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REG11 Register bits
    namespace reg11_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADPOSWF = (1U << 14);  ///< ADPOSWF
    }

    /// REGSP Register bits
    namespace regsp_bits {
        constexpr uint32_t ADRSP = (12 << 0);  ///< ADRSP
        constexpr uint32_t SPADRARF = (1U << 12);  ///< SPADRARF
        constexpr uint32_t SPOVRA = (1U << 13);  ///< SPOVRA
    }

}

// ============================================================================
// PA Peripheral
// ============================================================================

namespace pa {
    /// Base addresses
    constexpr uint32_t PA_BASE = 0x400C0000;

    /// PA Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PA Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PA Control Register
        volatile uint32_t OD;  ///< Offset: 0x28 - PA Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PA Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PA Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PA = reinterpret_cast<Registers*>(PA_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PA0 = (1U << 0);  ///< PA0
        constexpr uint32_t PA1 = (1U << 1);  ///< PA1
        constexpr uint32_t PA2 = (1U << 2);  ///< PA2
        constexpr uint32_t PA3 = (1U << 3);  ///< PA3
        constexpr uint32_t PA4 = (1U << 4);  ///< PA4
        constexpr uint32_t PA5 = (1U << 5);  ///< PA5
        constexpr uint32_t PA6 = (1U << 6);  ///< PA6
        constexpr uint32_t PA7 = (1U << 7);  ///< PA7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PA0C = (1U << 0);  ///< PA0C
        constexpr uint32_t PA1C = (1U << 1);  ///< PA1C
        constexpr uint32_t PA2C = (1U << 2);  ///< PA2C
        constexpr uint32_t PA3C = (1U << 3);  ///< PA3C
        constexpr uint32_t PA4C = (1U << 4);  ///< PA4C
        constexpr uint32_t PA5C = (1U << 5);  ///< PA5C
        constexpr uint32_t PA6C = (1U << 6);  ///< PA6C
        constexpr uint32_t PA7C = (1U << 7);  ///< PA7C
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PA0OD = (1U << 0);  ///< PA0OD
        constexpr uint32_t PA1OD = (1U << 1);  ///< PA1OD
        constexpr uint32_t PA2OD = (1U << 2);  ///< PA2OD
        constexpr uint32_t PA3OD = (1U << 3);  ///< PA3OD
        constexpr uint32_t PA4OD = (1U << 4);  ///< PA4OD
        constexpr uint32_t PA5OD = (1U << 5);  ///< PA5OD
        constexpr uint32_t PA6OD = (1U << 6);  ///< PA6OD
        constexpr uint32_t PA7OD = (1U << 7);  ///< PA7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PA0UP = (1U << 0);  ///< PA0UP
        constexpr uint32_t PA1UP = (1U << 1);  ///< PA1UP
        constexpr uint32_t PA2UP = (1U << 2);  ///< PA2UP
        constexpr uint32_t PA3UP = (1U << 3);  ///< PA3UP
        constexpr uint32_t PA4UP = (1U << 4);  ///< PA4UP
        constexpr uint32_t PA5UP = (1U << 5);  ///< PA5UP
        constexpr uint32_t PA6UP = (1U << 6);  ///< PA6UP
        constexpr uint32_t PA7UP = (1U << 7);  ///< PA7UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PA0IE = (1U << 0);  ///< PA0IE
        constexpr uint32_t PA1IE = (1U << 1);  ///< PA1IE
        constexpr uint32_t PA2IE = (1U << 2);  ///< PA2IE
        constexpr uint32_t PA3IE = (1U << 3);  ///< PA3IE
        constexpr uint32_t PA4IE = (1U << 4);  ///< PA4IE
        constexpr uint32_t PA5IE = (1U << 5);  ///< PA5IE
        constexpr uint32_t PA6IE = (1U << 6);  ///< PA6IE
        constexpr uint32_t PA7IE = (1U << 7);  ///< PA7IE
    }

}

// ============================================================================
// PB Peripheral
// ============================================================================

namespace pb {
    /// Base addresses
    constexpr uint32_t PB_BASE = 0x400C0100;

    /// PB Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PB Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PB Control Register
        volatile uint32_t OD;  ///< Offset: 0x28 - PB Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PB Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PB Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PB = reinterpret_cast<Registers*>(PB_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PB0 = (1U << 0);  ///< PB0
        constexpr uint32_t PB1 = (1U << 1);  ///< PB1
        constexpr uint32_t PB2 = (1U << 2);  ///< PB2
        constexpr uint32_t PB3 = (1U << 3);  ///< PB3
        constexpr uint32_t PB4 = (1U << 4);  ///< PB4
        constexpr uint32_t PB5 = (1U << 5);  ///< PB5
        constexpr uint32_t PB6 = (1U << 6);  ///< PB6
        constexpr uint32_t PB7 = (1U << 7);  ///< PB7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PB0C = (1U << 0);  ///< PB0C
        constexpr uint32_t PB1C = (1U << 1);  ///< PB1C
        constexpr uint32_t PB2C = (1U << 2);  ///< PB2C
        constexpr uint32_t PB3C = (1U << 3);  ///< PB3C
        constexpr uint32_t PB4C = (1U << 4);  ///< PB4C
        constexpr uint32_t PB5C = (1U << 5);  ///< PB5C
        constexpr uint32_t PB6C = (1U << 6);  ///< PB6C
        constexpr uint32_t PB7C = (1U << 7);  ///< PB7C
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PB0OD = (1U << 0);  ///< PB0OD
        constexpr uint32_t PB1OD = (1U << 1);  ///< PB1OD
        constexpr uint32_t PB2OD = (1U << 2);  ///< PB2OD
        constexpr uint32_t PB3OD = (1U << 3);  ///< PB3OD
        constexpr uint32_t PB4OD = (1U << 4);  ///< PB4OD
        constexpr uint32_t PB5OD = (1U << 5);  ///< PB5OD
        constexpr uint32_t PB6OD = (1U << 6);  ///< PB6OD
        constexpr uint32_t PB7OD = (1U << 7);  ///< PB7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PB0UP = (1U << 0);  ///< PB0UP
        constexpr uint32_t PB1UP = (1U << 1);  ///< PB1UP
        constexpr uint32_t PB2UP = (1U << 2);  ///< PB2UP
        constexpr uint32_t PB3UP = (1U << 3);  ///< PB3UP
        constexpr uint32_t PB4UP = (1U << 4);  ///< PB4UP
        constexpr uint32_t PB5UP = (1U << 5);  ///< PB5UP
        constexpr uint32_t PB6UP = (1U << 6);  ///< PB6UP
        constexpr uint32_t PB7UP = (1U << 7);  ///< PB7UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PB0IE = (1U << 0);  ///< PB0IE
        constexpr uint32_t PB1IE = (1U << 1);  ///< PB1IE
        constexpr uint32_t PB2IE = (1U << 2);  ///< PB2IE
        constexpr uint32_t PB3IE = (1U << 3);  ///< PB3IE
        constexpr uint32_t PB4IE = (1U << 4);  ///< PB4IE
        constexpr uint32_t PB5IE = (1U << 5);  ///< PB5IE
        constexpr uint32_t PB6IE = (1U << 6);  ///< PB6IE
        constexpr uint32_t PB7IE = (1U << 7);  ///< PB7IE
    }

}

// ============================================================================
// PC Peripheral
// ============================================================================

namespace pc {
    /// Base addresses
    constexpr uint32_t PC_BASE = 0x400C0200;

    /// PC Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PC Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PC Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PC Function Register 1
        volatile uint32_t FR3;  ///< Offset: 0x10 - PC Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PC Function Register 4
        volatile uint32_t OD;  ///< Offset: 0x28 - PC Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PC Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PC Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PC = reinterpret_cast<Registers*>(PC_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PC0 = (1U << 0);  ///< PC0
        constexpr uint32_t PC1 = (1U << 1);  ///< PC1
        constexpr uint32_t PC2 = (1U << 2);  ///< PC2
        constexpr uint32_t PC4 = (1U << 4);  ///< PC4
        constexpr uint32_t PC5 = (1U << 5);  ///< PC5
        constexpr uint32_t PC6 = (1U << 6);  ///< PC6
        constexpr uint32_t PC7 = (1U << 7);  ///< PC7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PC0C = (1U << 0);  ///< PC0C
        constexpr uint32_t PC1C = (1U << 1);  ///< PC1C
        constexpr uint32_t PC2C = (1U << 2);  ///< PC2C
        constexpr uint32_t PC4C = (1U << 4);  ///< PC4C
        constexpr uint32_t PC5C = (1U << 5);  ///< PC5C
        constexpr uint32_t PC6C = (1U << 6);  ///< PC6C
        constexpr uint32_t PC7C = (1U << 7);  ///< PC7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PC0F1 = (1U << 0);  ///< PC0F1
        constexpr uint32_t PC1F1 = (1U << 1);  ///< PC1F1
        constexpr uint32_t PC2F1 = (1U << 2);  ///< PC2F1
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PC0F3 = (1U << 0);  ///< PC0F3
        constexpr uint32_t PC1F3 = (1U << 1);  ///< PC1F3
        constexpr uint32_t PC2F3 = (1U << 2);  ///< PC2F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PC2F4 = (1U << 2);  ///< PC2F4
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PC0OD = (1U << 0);  ///< PC0OD
        constexpr uint32_t PC1OD = (1U << 1);  ///< PC1OD
        constexpr uint32_t PC2OD = (1U << 2);  ///< PC2OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PC0UP = (1U << 0);  ///< PC0UP
        constexpr uint32_t PC1UP = (1U << 1);  ///< PC1UP
        constexpr uint32_t PC2UP = (1U << 2);  ///< PC2UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PC0IE = (1U << 0);  ///< PC0IE
        constexpr uint32_t PC1IE = (1U << 1);  ///< PC1IE
        constexpr uint32_t PC2IE = (1U << 2);  ///< PC2IE
    }

}

// ============================================================================
// PD Peripheral
// ============================================================================

namespace pd {
    /// Base addresses
    constexpr uint32_t PD_BASE = 0x400C0300;

    /// PD Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PD Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PD Control Register
        volatile uint32_t FR3;  ///< Offset: 0x10 - PD Function Register 3
        volatile uint32_t OD;  ///< Offset: 0x28 - PD Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PD Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PD Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PD = reinterpret_cast<Registers*>(PD_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PD0 = (1U << 0);  ///< PD0
        constexpr uint32_t PD1 = (1U << 1);  ///< PD1
        constexpr uint32_t PD2 = (1U << 2);  ///< PD2
        constexpr uint32_t PD3 = (1U << 3);  ///< PD3
        constexpr uint32_t PD4 = (1U << 4);  ///< PD4
        constexpr uint32_t PD5 = (1U << 5);  ///< PD5
        constexpr uint32_t PD6 = (1U << 6);  ///< PD6
        constexpr uint32_t PD7 = (1U << 7);  ///< PD7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PD0C = (1U << 0);  ///< PD0C
        constexpr uint32_t PD1C = (1U << 1);  ///< PD1C
        constexpr uint32_t PD2C = (1U << 2);  ///< PD2C
        constexpr uint32_t PD3C = (1U << 3);  ///< PD3C
        constexpr uint32_t PD4C = (1U << 4);  ///< PD4C
        constexpr uint32_t PD5C = (1U << 5);  ///< PD5C
        constexpr uint32_t PD6C = (1U << 6);  ///< PD6C
        constexpr uint32_t PD7C = (1U << 7);  ///< PD7C
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PD0F3 = (1U << 0);  ///< PD0F3
        constexpr uint32_t PD1F3 = (1U << 1);  ///< PD1F3
        constexpr uint32_t PD2F3 = (1U << 2);  ///< PD2F3
        constexpr uint32_t PD3F3 = (1U << 3);  ///< PD3F3
        constexpr uint32_t PD7F3 = (1U << 7);  ///< PD7F3
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PD0OD = (1U << 0);  ///< PD0OD
        constexpr uint32_t PD1OD = (1U << 1);  ///< PD1OD
        constexpr uint32_t PD2OD = (1U << 2);  ///< PD2OD
        constexpr uint32_t PD3OD = (1U << 3);  ///< PD3OD
        constexpr uint32_t PD4OD = (1U << 4);  ///< PD4OD
        constexpr uint32_t PD5OD = (1U << 5);  ///< PD5OD
        constexpr uint32_t PD6OD = (1U << 6);  ///< PD6OD
        constexpr uint32_t PD7OD = (1U << 7);  ///< PD7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PD0UP = (1U << 0);  ///< PD0UP
        constexpr uint32_t PD1UP = (1U << 1);  ///< PD1UP
        constexpr uint32_t PD2UP = (1U << 2);  ///< PD2UP
        constexpr uint32_t PD3UP = (1U << 3);  ///< PD3UP
        constexpr uint32_t PD4UP = (1U << 4);  ///< PD4UP
        constexpr uint32_t PD5UP = (1U << 5);  ///< PD5UP
        constexpr uint32_t PD6UP = (1U << 6);  ///< PD6UP
        constexpr uint32_t PD7UP = (1U << 7);  ///< PD7UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PD0IE = (1U << 0);  ///< PD0IE
        constexpr uint32_t PD1IE = (1U << 1);  ///< PD1IE
        constexpr uint32_t PD2IE = (1U << 2);  ///< PD2IE
        constexpr uint32_t PD3IE = (1U << 3);  ///< PD3IE
        constexpr uint32_t PD4IE = (1U << 4);  ///< PD4IE
        constexpr uint32_t PD5IE = (1U << 5);  ///< PD5IE
        constexpr uint32_t PD6IE = (1U << 6);  ///< PD6IE
        constexpr uint32_t PD7IE = (1U << 7);  ///< PD7IE
    }

}

// ============================================================================
// PE Peripheral
// ============================================================================

namespace pe {
    /// Base addresses
    constexpr uint32_t PE_BASE = 0x400C0400;

    /// PE Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PE Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PE Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PE Function Register 1
        volatile uint32_t FR3;  ///< Offset: 0x10 - PE Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PE Function Register 4
        volatile uint32_t OD;  ///< Offset: 0x28 - PE Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PE Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PE Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PE = reinterpret_cast<Registers*>(PE_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PE0 = (1U << 0);  ///< PE0
        constexpr uint32_t PE1 = (1U << 1);  ///< PE1
        constexpr uint32_t PE2 = (1U << 2);  ///< PE2
        constexpr uint32_t PE3 = (1U << 3);  ///< PE3
        constexpr uint32_t PE4 = (1U << 4);  ///< PE4
        constexpr uint32_t PE5 = (1U << 5);  ///< PE5
        constexpr uint32_t PE6 = (1U << 6);  ///< PE6
        constexpr uint32_t PE7 = (1U << 7);  ///< PE7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PE0C = (1U << 0);  ///< PE0C
        constexpr uint32_t PE1C = (1U << 1);  ///< PE1C
        constexpr uint32_t PE2C = (1U << 2);  ///< PE2C
        constexpr uint32_t PE3C = (1U << 3);  ///< PE3C
        constexpr uint32_t PE4C = (1U << 4);  ///< PE4C
        constexpr uint32_t PE5C = (1U << 5);  ///< PE5C
        constexpr uint32_t PE6C = (1U << 6);  ///< PE6C
        constexpr uint32_t PE7C = (1U << 7);  ///< PE7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PE0F1 = (1U << 0);  ///< PE0F1
        constexpr uint32_t PE1F1 = (1U << 1);  ///< PE1F1
        constexpr uint32_t PE2F1 = (1U << 2);  ///< PE2F1
        constexpr uint32_t PE3F1 = (1U << 3);  ///< PE3F1
        constexpr uint32_t PE4F1 = (1U << 4);  ///< PE4F1
        constexpr uint32_t PE5F1 = (1U << 5);  ///< PE5F1
        constexpr uint32_t PE6F1 = (1U << 6);  ///< PE6F1
        constexpr uint32_t PE7F1 = (1U << 7);  ///< PE7F1
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PE2F3 = (1U << 2);  ///< PE2F3
        constexpr uint32_t PE3F3 = (1U << 3);  ///< PE3F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PE2F4 = (1U << 2);  ///< PE2F4
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PE0OD = (1U << 0);  ///< PE0OD
        constexpr uint32_t PE1OD = (1U << 1);  ///< PE1OD
        constexpr uint32_t PE2OD = (1U << 2);  ///< PE2OD
        constexpr uint32_t PE3OD = (1U << 3);  ///< PE3OD
        constexpr uint32_t PE4OD = (1U << 4);  ///< PE4OD
        constexpr uint32_t PE5OD = (1U << 5);  ///< PE5OD
        constexpr uint32_t PE6OD = (1U << 6);  ///< PE6OD
        constexpr uint32_t PE7OD = (1U << 7);  ///< PE7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PE0UP = (1U << 0);  ///< PE0UP
        constexpr uint32_t PE1UP = (1U << 1);  ///< PE1UP
        constexpr uint32_t PE2UP = (1U << 2);  ///< PE2UP
        constexpr uint32_t PE3UP = (1U << 3);  ///< PE3UP
        constexpr uint32_t PE4UP = (1U << 4);  ///< PE4UP
        constexpr uint32_t PE5UP = (1U << 5);  ///< PE5UP
        constexpr uint32_t PE6UP = (1U << 6);  ///< PE6UP
        constexpr uint32_t PE7UP = (1U << 7);  ///< PE7UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PE0IE = (1U << 0);  ///< PE0IE
        constexpr uint32_t PE1IE = (1U << 1);  ///< PE1IE
        constexpr uint32_t PE2IE = (1U << 2);  ///< PE2IE
        constexpr uint32_t PE3IE = (1U << 3);  ///< PE3IE
        constexpr uint32_t PE4IE = (1U << 4);  ///< PE4IE
        constexpr uint32_t PE5IE = (1U << 5);  ///< PE5IE
        constexpr uint32_t PE6IE = (1U << 6);  ///< PE6IE
        constexpr uint32_t PE7IE = (1U << 7);  ///< PE7IE
    }

}

// ============================================================================
// PF Peripheral
// ============================================================================

namespace pf {
    /// Base addresses
    constexpr uint32_t PF_BASE = 0x400C0500;

    /// PF Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PF Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PF Control Register
        volatile uint32_t FR2;  ///< Offset: 0x0C - PF Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PF Function Register 3
        volatile uint32_t OD;  ///< Offset: 0x28 - PF Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PF Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PF Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PF = reinterpret_cast<Registers*>(PF_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PF0 = (1U << 0);  ///< PF0
        constexpr uint32_t PF1 = (1U << 1);  ///< PF1
        constexpr uint32_t PF2 = (1U << 2);  ///< PF2
        constexpr uint32_t PF3 = (1U << 3);  ///< PF3
        constexpr uint32_t PF4 = (1U << 4);  ///< PF4
        constexpr uint32_t PF5 = (1U << 5);  ///< PF5
        constexpr uint32_t PF6 = (1U << 6);  ///< PF6
        constexpr uint32_t PF7 = (1U << 7);  ///< PF7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PF0C = (1U << 0);  ///< PF0C
        constexpr uint32_t PF1C = (1U << 1);  ///< PF1C
        constexpr uint32_t PF2C = (1U << 2);  ///< PF2C
        constexpr uint32_t PF3C = (1U << 3);  ///< PF3C
        constexpr uint32_t PF4C = (1U << 4);  ///< PF4C
        constexpr uint32_t PF5C = (1U << 5);  ///< PF5C
        constexpr uint32_t PF6C = (1U << 6);  ///< PF6C
        constexpr uint32_t PF7C = (1U << 7);  ///< PF7C
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PF4F2 = (1U << 4);  ///< PF4F2
        constexpr uint32_t PF5F2 = (1U << 5);  ///< PF5F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PF0F3 = (1U << 0);  ///< PF0F3
        constexpr uint32_t PF4F3 = (1U << 4);  ///< PF4F3
        constexpr uint32_t PF5F3 = (1U << 5);  ///< PF5F3
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PF0OD = (1U << 0);  ///< PF0OD
        constexpr uint32_t PF1OD = (1U << 1);  ///< PF1OD
        constexpr uint32_t PF2OD = (1U << 2);  ///< PF2OD
        constexpr uint32_t PF3OD = (1U << 3);  ///< PF3OD
        constexpr uint32_t PF4OD = (1U << 4);  ///< PF4OD
        constexpr uint32_t PF5OD = (1U << 5);  ///< PF5OD
        constexpr uint32_t PF6OD = (1U << 6);  ///< PF6OD
        constexpr uint32_t PF7OD = (1U << 7);  ///< PF7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PF0UP = (1U << 0);  ///< PF0UP
        constexpr uint32_t PF1UP = (1U << 1);  ///< PF1UP
        constexpr uint32_t PF2UP = (1U << 2);  ///< PF2UP
        constexpr uint32_t PF3UP = (1U << 3);  ///< PF3UP
        constexpr uint32_t PF4UP = (1U << 4);  ///< PF4UP
        constexpr uint32_t PF5UP = (1U << 5);  ///< PF5UP
        constexpr uint32_t PF6UP = (1U << 6);  ///< PF6UP
        constexpr uint32_t PF7UP = (1U << 7);  ///< PF7UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PF1IE = (1U << 1);  ///< PF1IE
        constexpr uint32_t PF2IE = (1U << 2);  ///< PF2IE
        constexpr uint32_t PF3IE = (1U << 3);  ///< PF3IE
        constexpr uint32_t PF4IE = (1U << 4);  ///< PF4IE
        constexpr uint32_t PF5IE = (1U << 5);  ///< PF5IE
        constexpr uint32_t PF6IE = (1U << 6);  ///< PF6IE
        constexpr uint32_t PF7IE = (1U << 7);  ///< PF7IE
    }

}

// ============================================================================
// PG Peripheral
// ============================================================================

namespace pg {
    /// Base addresses
    constexpr uint32_t PG_BASE = 0x400C0600;

    /// PG Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PG Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PG Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PG Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PG Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PG Function Register 4
        volatile uint32_t OD;  ///< Offset: 0x28 - PG Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PG Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PG Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PG = reinterpret_cast<Registers*>(PG_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PG0 = (1U << 0);  ///< PG0
        constexpr uint32_t PG1 = (1U << 1);  ///< PG1
        constexpr uint32_t PG2 = (1U << 2);  ///< PG2
        constexpr uint32_t PG3 = (1U << 3);  ///< PG3
        constexpr uint32_t PG4 = (1U << 4);  ///< PG4
        constexpr uint32_t PG5 = (1U << 5);  ///< PG5
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PG0C = (1U << 0);  ///< PG0C
        constexpr uint32_t PG1C = (1U << 1);  ///< PG1C
        constexpr uint32_t PG2C = (1U << 2);  ///< PG2C
        constexpr uint32_t PG3C = (1U << 3);  ///< PG3C
        constexpr uint32_t PG4C = (1U << 4);  ///< PG4C
        constexpr uint32_t PG5C = (1U << 5);  ///< PG5C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PG0F1 = (1U << 0);  ///< PG0F1
        constexpr uint32_t PG1F1 = (1U << 1);  ///< PG1F1
        constexpr uint32_t PG2F1 = (1U << 2);  ///< PG2F1
        constexpr uint32_t PG3F1 = (1U << 3);  ///< PG3F1
        constexpr uint32_t PG5F1 = (1U << 5);  ///< PG5F1
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PG1F3 = (1U << 1);  ///< PG1F3
        constexpr uint32_t PG2F3 = (1U << 2);  ///< PG2F3
        constexpr uint32_t PG3F3 = (1U << 3);  ///< PG3F3
        constexpr uint32_t PG4F3 = (1U << 4);  ///< PG4F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PG0F4 = (1U << 0);  ///< PG0F4
        constexpr uint32_t PG1F4 = (1U << 1);  ///< PG1F4
        constexpr uint32_t PG2F4 = (1U << 2);  ///< PG2F4
        constexpr uint32_t PG3F4 = (1U << 3);  ///< PG3F4
        constexpr uint32_t PG4F4 = (1U << 4);  ///< PG4F4
        constexpr uint32_t PG5F4 = (1U << 5);  ///< PG5F4
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PG0OD = (1U << 0);  ///< PG0OD
        constexpr uint32_t PG1OD = (1U << 1);  ///< PG1OD
        constexpr uint32_t PG2OD = (1U << 2);  ///< PG2OD
        constexpr uint32_t PG3OD = (1U << 3);  ///< PG3OD
        constexpr uint32_t PG4OD = (1U << 4);  ///< PG4OD
        constexpr uint32_t PG5OD = (1U << 5);  ///< PG5OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PG0UP = (1U << 0);  ///< PG0UP
        constexpr uint32_t PG1UP = (1U << 1);  ///< PG1UP
        constexpr uint32_t PG2UP = (1U << 2);  ///< PG2UP
        constexpr uint32_t PG3UP = (1U << 3);  ///< PG3UP
        constexpr uint32_t PG4UP = (1U << 4);  ///< PG4UP
        constexpr uint32_t PG5UP = (1U << 5);  ///< PG5UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PG0IE = (1U << 0);  ///< PG0IE
        constexpr uint32_t PG1IE = (1U << 1);  ///< PG1IE
        constexpr uint32_t PG2IE = (1U << 2);  ///< PG2IE
        constexpr uint32_t PG3IE = (1U << 3);  ///< PG3IE
        constexpr uint32_t PG4IE = (1U << 4);  ///< PG4IE
        constexpr uint32_t PG5IE = (1U << 5);  ///< PG5IE
    }

}

// ============================================================================
// PH Peripheral
// ============================================================================

namespace ph {
    /// Base addresses
    constexpr uint32_t PH_BASE = 0x400C0700;

    /// PH Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PH Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PH Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PH Function Register 1
        volatile uint32_t FR3;  ///< Offset: 0x10 - PH Function Register 3
        volatile uint32_t OD;  ///< Offset: 0x28 - PH Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PH Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PH Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PH = reinterpret_cast<Registers*>(PH_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PH0 = (1U << 0);  ///< PH0
        constexpr uint32_t PH1 = (1U << 1);  ///< PH1
        constexpr uint32_t PH2 = (1U << 2);  ///< PH2
        constexpr uint32_t PH3 = (1U << 3);  ///< PH3
        constexpr uint32_t PH4 = (1U << 4);  ///< PH4
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PH0C = (1U << 0);  ///< PH0C
        constexpr uint32_t PH1C = (1U << 1);  ///< PH1C
        constexpr uint32_t PH2C = (1U << 2);  ///< PH2C
        constexpr uint32_t PH3C = (1U << 3);  ///< PH3C
        constexpr uint32_t PH4C = (1U << 4);  ///< PH4C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PH0F1 = (1U << 0);  ///< PH0F1
        constexpr uint32_t PH2F1 = (1U << 2);  ///< PH2F1
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PH2F3 = (1U << 2);  ///< PH2F3
        constexpr uint32_t PH3F3 = (1U << 3);  ///< PH3F3
        constexpr uint32_t PH4F3 = (1U << 4);  ///< PH4F3
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PH0OD = (1U << 0);  ///< PH0OD
        constexpr uint32_t PH1OD = (1U << 1);  ///< PH1OD
        constexpr uint32_t PH2OD = (1U << 2);  ///< PH2OD
        constexpr uint32_t PH3OD = (1U << 3);  ///< PH3OD
        constexpr uint32_t PH4OD = (1U << 4);  ///< PH4OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PH0UP = (1U << 0);  ///< PH0UP
        constexpr uint32_t PH1UP = (1U << 1);  ///< PH1UP
        constexpr uint32_t PH2UP = (1U << 2);  ///< PH2UP
        constexpr uint32_t PH3UP = (1U << 3);  ///< PH3UP
        constexpr uint32_t PH4UP = (1U << 4);  ///< PH4UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PH0IE = (1U << 0);  ///< PH0IE
        constexpr uint32_t PH1IE = (1U << 1);  ///< PH1IE
        constexpr uint32_t PH2IE = (1U << 2);  ///< PH2IE
        constexpr uint32_t PH3IE = (1U << 3);  ///< PH3IE
        constexpr uint32_t PH4IE = (1U << 4);  ///< PH4IE
    }

}

// ============================================================================
// PI Peripheral
// ============================================================================

namespace pi {
    /// Base addresses
    constexpr uint32_t PI_BASE = 0x400C0800;

    /// PI Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PI Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PI Control Register
        volatile uint32_t OD;  ///< Offset: 0x28 - PI Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PI Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PI Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PI Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PI = reinterpret_cast<Registers*>(PI_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PI0 = (1U << 0);  ///< PI0
        constexpr uint32_t PI1 = (1U << 1);  ///< PI1
        constexpr uint32_t PI2 = (1U << 2);  ///< PI2
        constexpr uint32_t PI3 = (1U << 3);  ///< PI3
        constexpr uint32_t PI4 = (1U << 4);  ///< PI4
        constexpr uint32_t PI5 = (1U << 5);  ///< PI5
        constexpr uint32_t PI6 = (1U << 6);  ///< PI6
        constexpr uint32_t PI7 = (1U << 7);  ///< PI7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PI0C = (1U << 0);  ///< PI0C
        constexpr uint32_t PI1C = (1U << 1);  ///< PI1C
        constexpr uint32_t PI2C = (1U << 2);  ///< PI2C
        constexpr uint32_t PI3C = (1U << 3);  ///< PI3C
        constexpr uint32_t PI4C = (1U << 4);  ///< PI4C
        constexpr uint32_t PI5C = (1U << 5);  ///< PI5C
        constexpr uint32_t PI6C = (1U << 6);  ///< PI6C
        constexpr uint32_t PI7C = (1U << 7);  ///< PI7C
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PI0OD = (1U << 0);  ///< PI0OD
        constexpr uint32_t PI1OD = (1U << 1);  ///< PI1OD
        constexpr uint32_t PI2OD = (1U << 2);  ///< PI2OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PI0UP = (1U << 0);  ///< PI0UP
        constexpr uint32_t PI1UP = (1U << 1);  ///< PI1UP
        constexpr uint32_t PI2UP = (1U << 2);  ///< PI2UP
        constexpr uint32_t PI3UP = (1U << 3);  ///< PI3UP
        constexpr uint32_t PI4UP = (1U << 4);  ///< PI4UP
        constexpr uint32_t PI5UP = (1U << 5);  ///< PI5UP
        constexpr uint32_t PI6UP = (1U << 6);  ///< PI6UP
        constexpr uint32_t PI7UP = (1U << 7);  ///< PI7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PI3DN = (1U << 3);  ///< PI3DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PI0IE = (1U << 0);  ///< PI0IE
        constexpr uint32_t PI1IE = (1U << 1);  ///< PI1IE
        constexpr uint32_t PI2IE = (1U << 2);  ///< PI2IE
        constexpr uint32_t PI3IE = (1U << 3);  ///< PI3IE
        constexpr uint32_t PI4IE = (1U << 4);  ///< PI4IE
        constexpr uint32_t PI5IE = (1U << 5);  ///< PI5IE
        constexpr uint32_t PI6IE = (1U << 6);  ///< PI6IE
        constexpr uint32_t PI7IE = (1U << 7);  ///< PI7IE
    }

}

// ============================================================================
// PJ Peripheral
// ============================================================================

namespace pj {
    /// Base addresses
    constexpr uint32_t PJ_BASE = 0x400C0900;

    /// PJ Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PJ Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PJ Control Register
        volatile uint32_t FR2;  ///< Offset: 0x0C - PJ Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PJ Function Register 3
        volatile uint32_t PUP;  ///< Offset: 0x2C - PJ Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PJ Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PJ = reinterpret_cast<Registers*>(PJ_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PJ0 = (1U << 0);  ///< PJ0
        constexpr uint32_t PJ1 = (1U << 1);  ///< PJ1
        constexpr uint32_t PJ2 = (1U << 2);  ///< PJ2
        constexpr uint32_t PJ3 = (1U << 3);  ///< PJ3
        constexpr uint32_t PJ4 = (1U << 4);  ///< PJ4
        constexpr uint32_t PJ5 = (1U << 5);  ///< PJ5
        constexpr uint32_t PJ6 = (1U << 6);  ///< PJ6
        constexpr uint32_t PJ7 = (1U << 7);  ///< PJ7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PJ0C = (1U << 0);  ///< PJ0C
        constexpr uint32_t PJ1C = (1U << 1);  ///< PJ1C
        constexpr uint32_t PJ2C = (1U << 2);  ///< PJ2C
        constexpr uint32_t PJ3C = (1U << 3);  ///< PJ3C
        constexpr uint32_t PJ4C = (1U << 4);  ///< PJ4C
        constexpr uint32_t PJ5C = (1U << 5);  ///< PJ5C
        constexpr uint32_t PJ6C = (1U << 6);  ///< PJ6C
        constexpr uint32_t PJ7C = (1U << 7);  ///< PJ7C
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PJ7F2 = (1U << 7);  ///< PJ7F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PJ6F3 = (1U << 6);  ///< PJ6F3
        constexpr uint32_t PJ7F3 = (1U << 7);  ///< PJ7F3
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PJ0UP = (1U << 0);  ///< PJ0UP
        constexpr uint32_t PJ1UP = (1U << 1);  ///< PJ1UP
        constexpr uint32_t PJ2UP = (1U << 2);  ///< PJ2UP
        constexpr uint32_t PJ3UP = (1U << 3);  ///< PJ3UP
        constexpr uint32_t PJ4UP = (1U << 4);  ///< PJ4UP
        constexpr uint32_t PJ5UP = (1U << 5);  ///< PJ5UP
        constexpr uint32_t PJ6UP = (1U << 6);  ///< PJ6UP
        constexpr uint32_t PJ7UP = (1U << 7);  ///< PJ7UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PJ0IE = (1U << 0);  ///< PJ0IE
        constexpr uint32_t PJ1IE = (1U << 1);  ///< PJ1IE
        constexpr uint32_t PJ2IE = (1U << 2);  ///< PJ2IE
        constexpr uint32_t PJ3IE = (1U << 3);  ///< PJ3IE
        constexpr uint32_t PJ4IE = (1U << 4);  ///< PJ4IE
        constexpr uint32_t PJ5IE = (1U << 5);  ///< PJ5IE
        constexpr uint32_t PJ6IE = (1U << 6);  ///< PJ6IE
        constexpr uint32_t PJ7IE = (1U << 7);  ///< PJ7IE
    }

}

// ============================================================================
// PK Peripheral
// ============================================================================

namespace pk {
    /// Base addresses
    constexpr uint32_t PK_BASE = 0x400C0A00;

    /// PK Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PK Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PK Control Register
        volatile uint32_t FR2;  ///< Offset: 0x0C - PK Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PK Function Register 3
        volatile uint32_t PUP;  ///< Offset: 0x2C - PK Pull-Up Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PK Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PK = reinterpret_cast<Registers*>(PK_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PK0 = (1U << 0);  ///< PK0
        constexpr uint32_t PK1 = (1U << 1);  ///< PK1
        constexpr uint32_t PK2 = (1U << 2);  ///< PK2
        constexpr uint32_t PK3 = (1U << 3);  ///< PK3
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PK0C = (1U << 0);  ///< PK0C
        constexpr uint32_t PK1C = (1U << 1);  ///< PK1C
        constexpr uint32_t PK2C = (1U << 2);  ///< PK2C
        constexpr uint32_t PK3C = (1U << 3);  ///< PK3C
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PK0F2 = (1U << 0);  ///< PK0F2
        constexpr uint32_t PK1F2 = (1U << 1);  ///< PK1F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PK0F3 = (1U << 0);  ///< PK0F3
        constexpr uint32_t PK1F3 = (1U << 1);  ///< PK1F3
        constexpr uint32_t PK2F3 = (1U << 2);  ///< PK2F3
        constexpr uint32_t PK3F3 = (1U << 3);  ///< PK3F3
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PK0UP = (1U << 0);  ///< PK0UP
        constexpr uint32_t PK1UP = (1U << 1);  ///< PK1UP
        constexpr uint32_t PK2UP = (1U << 2);  ///< PK2UP
        constexpr uint32_t PK3UP = (1U << 3);  ///< PK3UP
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PK0IE = (1U << 0);  ///< PK0IE
        constexpr uint32_t PK1IE = (1U << 1);  ///< PK1IE
        constexpr uint32_t PK2IE = (1U << 2);  ///< PK2IE
        constexpr uint32_t PK3IE = (1U << 3);  ///< PK3IE
    }

}

// ============================================================================
// TB0 Peripheral
// ============================================================================

namespace tb0 {
    /// Base addresses
    constexpr uint32_t TB0_BASE = 0x400C4000;

    /// TB0 Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - TB Enable Register
        volatile uint32_t RUN;  ///< Offset: 0x04 - TB RUN Register
        volatile uint32_t CR;  ///< Offset: 0x08 - TB Control Register
        volatile uint32_t MOD;  ///< Offset: 0x0C - TB Mode Register
        volatile uint32_t FFCR;  ///< Offset: 0x10 - TB Flip-Flop Control Register
        volatile uint32_t ST;  ///< Offset: 0x14 - TB Status Register
        volatile uint32_t IM;  ///< Offset: 0x18 - TB Interrupt Mask Register
        volatile uint32_t UC;  ///< Offset: 0x1C - TB Read Capture Register
        volatile uint32_t RG0;  ///< Offset: 0x20 - TB RG0 Timer Register
        volatile uint32_t RG1;  ///< Offset: 0x24 - TB RG1 Timer Register
        volatile uint32_t CP0;  ///< Offset: 0x28 - TB CP0 Capture Register
        volatile uint32_t CP1;  ///< Offset: 0x2C - TB CP1 Capture Register
        volatile uint32_t DMA;  ///< Offset: 0x30 - TB DMA Enable Register
    };

    /// Peripheral instances
    inline Registers* TB0 = reinterpret_cast<Registers*>(TB0_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t TBHALT = (1U << 6);  ///< TBHALT
        constexpr uint32_t TBEN = (1U << 7);  ///< TBEN
    }

    /// RUN Register bits
    namespace run_bits {
        constexpr uint32_t TBRUN = (1U << 0);  ///< TBRUN
        constexpr uint32_t TBPRUN = (1U << 2);  ///< TBPRUN
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t CSSEL = (1U << 0);  ///< CSSEL
        constexpr uint32_t TRGSEL = (1U << 1);  ///< TRGSEL
        constexpr uint32_t TBINSEL = (1U << 2);  ///< TBINSEL
        constexpr uint32_t I2TB = (1U << 3);  ///< I2TB
        constexpr uint32_t FT0SEL = (1U << 4);  ///< FT0SEL
        constexpr uint32_t TBSYNC = (1U << 5);  ///< TBSYNC
        constexpr uint32_t TBWBF = (1U << 7);  ///< TBWBF
    }

    /// MOD Register bits
    namespace mod_bits {
        constexpr uint32_t TBCLK = (3 << 0);  ///< TBCLK
        constexpr uint32_t TBCLE = (1U << 3);  ///< TBCLE
        constexpr uint32_t TBCPM = (2 << 4);  ///< TBCPM
        constexpr uint32_t TBCP = (1U << 6);  ///< TBCP
    }

    /// FFCR Register bits
    namespace ffcr_bits {
        constexpr uint32_t TBFF0C = (2 << 0);  ///< TBFF0C
        constexpr uint32_t TBE0T1 = (1U << 2);  ///< TBE0T1
        constexpr uint32_t TBE1T1 = (1U << 3);  ///< TBE1T1
        constexpr uint32_t TBC0T1 = (1U << 4);  ///< TBC0T1
        constexpr uint32_t TBC1T1 = (1U << 5);  ///< TBC1T1
    }

    /// ST Register bits
    namespace st_bits {
        constexpr uint32_t INTTB0 = (1U << 0);  ///< INTTB0
        constexpr uint32_t INTTB1 = (1U << 1);  ///< INTTB1
        constexpr uint32_t INTTBOF = (1U << 2);  ///< INTTBOF
    }

    /// IM Register bits
    namespace im_bits {
        constexpr uint32_t TBIM0 = (1U << 0);  ///< TBIM0
        constexpr uint32_t TBIM1 = (1U << 1);  ///< TBIM1
        constexpr uint32_t TBIMOF = (1U << 2);  ///< TBIMOF
    }

    /// UC Register bits
    namespace uc_bits {
        constexpr uint32_t UC = (16 << 0);  ///< UC
    }

    /// RG0 Register bits
    namespace rg0_bits {
        constexpr uint32_t TBRG0 = (16 << 0);  ///< TBRG0
    }

    /// RG1 Register bits
    namespace rg1_bits {
        constexpr uint32_t TBRG1 = (16 << 0);  ///< TBRG1
    }

    /// CP0 Register bits
    namespace cp0_bits {
        constexpr uint32_t TBCP0 = (16 << 0);  ///< TBCP0
    }

    /// CP1 Register bits
    namespace cp1_bits {
        constexpr uint32_t TBCP1 = (16 << 0);  ///< TBCP1
    }

    /// DMA Register bits
    namespace dma_bits {
        constexpr uint32_t TBDMAEN0 = (1U << 0);  ///< TBDMAEN0
        constexpr uint32_t TBDMAEN1 = (1U << 1);  ///< TBDMAEN1
        constexpr uint32_t TBDMAEN2 = (1U << 2);  ///< TBDMAEN2
    }

}

// ============================================================================
// TB1 Peripheral
// ============================================================================

namespace tb1 {
    /// Base addresses
    constexpr uint32_t TB1_BASE = 0x400C4100;

    /// TB1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB1 = reinterpret_cast<Registers*>(TB1_BASE);

}

// ============================================================================
// TB2 Peripheral
// ============================================================================

namespace tb2 {
    /// Base addresses
    constexpr uint32_t TB2_BASE = 0x400C4200;

    /// TB2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB2 = reinterpret_cast<Registers*>(TB2_BASE);

}

// ============================================================================
// TB3 Peripheral
// ============================================================================

namespace tb3 {
    /// Base addresses
    constexpr uint32_t TB3_BASE = 0x400C4300;

    /// TB3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB3 = reinterpret_cast<Registers*>(TB3_BASE);

}

// ============================================================================
// TB4 Peripheral
// ============================================================================

namespace tb4 {
    /// Base addresses
    constexpr uint32_t TB4_BASE = 0x400C4400;

    /// TB4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB4 = reinterpret_cast<Registers*>(TB4_BASE);

}

// ============================================================================
// TB5 Peripheral
// ============================================================================

namespace tb5 {
    /// Base addresses
    constexpr uint32_t TB5_BASE = 0x400C4500;

    /// TB5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB5 = reinterpret_cast<Registers*>(TB5_BASE);

}

// ============================================================================
// TB6 Peripheral
// ============================================================================

namespace tb6 {
    /// Base addresses
    constexpr uint32_t TB6_BASE = 0x400C4600;

    /// TB6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB6 = reinterpret_cast<Registers*>(TB6_BASE);

}

// ============================================================================
// TB7 Peripheral
// ============================================================================

namespace tb7 {
    /// Base addresses
    constexpr uint32_t TB7_BASE = 0x400C4700;

    /// TB7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB7 = reinterpret_cast<Registers*>(TB7_BASE);

}

// ============================================================================
// TB8 Peripheral
// ============================================================================

namespace tb8 {
    /// Base addresses
    constexpr uint32_t TB8_BASE = 0x400C4800;

    /// TB8 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB8 = reinterpret_cast<Registers*>(TB8_BASE);

}

// ============================================================================
// TB9 Peripheral
// ============================================================================

namespace tb9 {
    /// Base addresses
    constexpr uint32_t TB9_BASE = 0x400C4900;

    /// TB9 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB9 = reinterpret_cast<Registers*>(TB9_BASE);

}

// ============================================================================
// SBI0 Peripheral
// ============================================================================

namespace sbi0 {
    /// Base addresses
    constexpr uint32_t SBI0_BASE = 0x400E0000;

    /// SBI0 Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - SBI Control Register 0
        volatile uint32_t CR1_A;  ///< Offset: 0x04 - SBI Control Register 1 (I2C Mode)
        volatile uint32_t CR1_B;  ///< Offset: 0x04 - SBI Control Register 1 (SIO Mode)
        volatile uint32_t DBR;  ///< Offset: 0x08 - SBI Data Buffer Register
        volatile uint32_t I2CAR;  ///< Offset: 0x0C - SBI I2C Bus Address Register
        volatile uint32_t CR2_A;  ///< Offset: 0x10 - SBI Control Register 2 (I2C Mode)
        volatile uint32_t CR2_B;  ///< Offset: 0x10 - SBI Control Register 2 (SIO Mode)
        volatile uint32_t SR_A;  ///< Offset: 0x10 - SBI Status Register (I2C Mode)
        volatile uint32_t SR_B;  ///< Offset: 0x10 - SBI Status Register (SIO Mode)
        volatile uint32_t BR0;  ///< Offset: 0x14 - SBI Baud Rate Register 0
    };

    /// Peripheral instances
    inline Registers* SBI0 = reinterpret_cast<Registers*>(SBI0_BASE);

    // Bit definitions
    /// CR0 Register bits
    namespace cr0_bits {
        constexpr uint32_t SBIEN = (1U << 7);  ///< SBIEN
    }

    /// CR1_A Register bits
    namespace cr1_a_bits {
        constexpr uint32_t SWRMON = (1U << 0);  ///< SWRMON
        constexpr uint32_t SCK = (3 << 0);  ///< SCK
        constexpr uint32_t ACK = (1U << 4);  ///< ACK
        constexpr uint32_t BC = (3 << 5);  ///< BC
    }

    /// CR1_B Register bits
    namespace cr1_b_bits {
        constexpr uint32_t SCK = (3 << 0);  ///< SCK
        constexpr uint32_t SIOM = (2 << 4);  ///< SIOM
        constexpr uint32_t SIOINH = (1U << 6);  ///< SIOINH
        constexpr uint32_t SIOS = (1U << 7);  ///< SIOS
    }

    /// DBR Register bits
    namespace dbr_bits {
        constexpr uint32_t DB = (8 << 0);  ///< DB
    }

    /// I2CAR Register bits
    namespace i2car_bits {
        constexpr uint32_t ALS = (1U << 0);  ///< ALS
        constexpr uint32_t SA = (7 << 1);  ///< SA
    }

    /// CR2_A Register bits
    namespace cr2_a_bits {
        constexpr uint32_t SWRST = (2 << 0);  ///< SWRST
        constexpr uint32_t SBIM = (2 << 2);  ///< SBIM
        constexpr uint32_t PIN = (1U << 4);  ///< PIN
        constexpr uint32_t BB = (1U << 5);  ///< BB
        constexpr uint32_t TRX = (1U << 6);  ///< TRX
        constexpr uint32_t MST = (1U << 7);  ///< MST
    }

    /// CR2_B Register bits
    namespace cr2_b_bits {
        constexpr uint32_t SBIM = (2 << 2);  ///< SBIM
    }

    /// SR_A Register bits
    namespace sr_a_bits {
        constexpr uint32_t LRB = (1U << 0);  ///< LRB
        constexpr uint32_t ADO = (1U << 1);  ///< ADO
        constexpr uint32_t AAS = (1U << 2);  ///< AAS
        constexpr uint32_t AL = (1U << 3);  ///< AL
        constexpr uint32_t PIN = (1U << 4);  ///< PIN
        constexpr uint32_t BB = (1U << 5);  ///< BB
        constexpr uint32_t TRX = (1U << 6);  ///< TRX
        constexpr uint32_t MST = (1U << 7);  ///< MST
    }

    /// SR_B Register bits
    namespace sr_b_bits {
        constexpr uint32_t SEF = (1U << 2);  ///< SEF
        constexpr uint32_t SIOF = (1U << 3);  ///< SIOF
    }

    /// BR0 Register bits
    namespace br0_bits {
        constexpr uint32_t I2SBI = (1U << 6);  ///< I2SBI
    }

}

// ============================================================================
// SBI1 Peripheral
// ============================================================================

namespace sbi1 {
    /// Base addresses
    constexpr uint32_t SBI1_BASE = 0x400E0100;

    /// SBI1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SBI1 = reinterpret_cast<Registers*>(SBI1_BASE);

}

// ============================================================================
// SC0 Peripheral
// ============================================================================

namespace sc0 {
    /// Base addresses
    constexpr uint32_t SC0_BASE = 0x400E1000;

    /// SC0 Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - SC Enable Register
        volatile uint32_t BUF;  ///< Offset: 0x04 - SC Buffer Register
        volatile uint32_t CR;  ///< Offset: 0x08 - SC Control Register
        volatile uint32_t MOD0;  ///< Offset: 0x0C - SC Mode Control Register 0
        volatile uint32_t BRCR;  ///< Offset: 0x10 - SC Baud Rate Generator Control Register
        volatile uint32_t BRADD;  ///< Offset: 0x14 - SC Baud Rate Generator Control Register 2
        volatile uint32_t MOD1;  ///< Offset: 0x18 - SC Mode Control Register 1
        volatile uint32_t MOD2;  ///< Offset: 0x1C - SC Mode Control Register 2
        volatile uint32_t RFC;  ///< Offset: 0x20 - SC RX FIFO Configuration Register
        volatile uint32_t TFC;  ///< Offset: 0x24 - SC TX FIFO Configuration Register
        volatile uint32_t RST;  ///< Offset: 0x28 - SC RX FIFO Status Register
        volatile uint32_t TST;  ///< Offset: 0x2C - SC TX FIFO Status Register
        volatile uint32_t FCNF;  ///< Offset: 0x30 - SC FIFO Configuration Register
        volatile uint32_t DMA;  ///< Offset: 0x34 - SC DMA Enable Register
    };

    /// Peripheral instances
    inline Registers* SC0 = reinterpret_cast<Registers*>(SC0_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t SIOE = (1U << 0);  ///< SIOE
    }

    /// BUF Register bits
    namespace buf_bits {
        constexpr uint32_t TB_RB = (8 << 0);  ///< TB_RB
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t IOC = (1U << 0);  ///< IOC
        constexpr uint32_t SCLKS = (1U << 1);  ///< SCLKS
        constexpr uint32_t FERR = (1U << 2);  ///< FERR
        constexpr uint32_t PERR = (1U << 3);  ///< PERR
        constexpr uint32_t OERR = (1U << 4);  ///< OERR
        constexpr uint32_t PE = (1U << 5);  ///< PE
        constexpr uint32_t EVEN = (1U << 6);  ///< EVEN
        constexpr uint32_t RB8 = (1U << 7);  ///< RB8
    }

    /// MOD0 Register bits
    namespace mod0_bits {
        constexpr uint32_t SC = (2 << 0);  ///< SC
        constexpr uint32_t SM = (2 << 2);  ///< SM
        constexpr uint32_t WU = (1U << 4);  ///< WU
        constexpr uint32_t RXE = (1U << 5);  ///< RXE
        constexpr uint32_t CTSE = (1U << 6);  ///< CTSE
        constexpr uint32_t TB8 = (1U << 7);  ///< TB8
    }

    /// BRCR Register bits
    namespace brcr_bits {
        constexpr uint32_t BRS = (4 << 0);  ///< BRS
        constexpr uint32_t BRCK = (2 << 4);  ///< BRCK
        constexpr uint32_t BRADDE = (1U << 6);  ///< BRADDE
    }

    /// BRADD Register bits
    namespace bradd_bits {
        constexpr uint32_t BRK = (4 << 0);  ///< BRK
    }

    /// MOD1 Register bits
    namespace mod1_bits {
        constexpr uint32_t SINT = (3 << 1);  ///< SINT
        constexpr uint32_t TXE = (1U << 4);  ///< TXE
        constexpr uint32_t FDPX = (2 << 5);  ///< FDPX
        constexpr uint32_t I2SC = (1U << 7);  ///< I2SC
    }

    /// MOD2 Register bits
    namespace mod2_bits {
        constexpr uint32_t SWRST = (2 << 0);  ///< SWRST
        constexpr uint32_t WBUF = (1U << 2);  ///< WBUF
        constexpr uint32_t DRCHG = (1U << 3);  ///< DRCHG
        constexpr uint32_t SBLEN = (1U << 4);  ///< SBLEN
        constexpr uint32_t TXRUN = (1U << 5);  ///< TXRUN
        constexpr uint32_t RBFLL = (1U << 6);  ///< RBFLL
        constexpr uint32_t TBEMP = (1U << 7);  ///< TBEMP
    }

    /// RFC Register bits
    namespace rfc_bits {
        constexpr uint32_t RIL = (2 << 0);  ///< RIL
        constexpr uint32_t RFIS = (1U << 6);  ///< RFIS
        constexpr uint32_t RFCS = (1U << 7);  ///< RFCS
    }

    /// TFC Register bits
    namespace tfc_bits {
        constexpr uint32_t TIL = (2 << 0);  ///< TIL
        constexpr uint32_t TFIS = (1U << 6);  ///< TFIS
        constexpr uint32_t TFCS = (1U << 7);  ///< TFCS
    }

    /// RST Register bits
    namespace rst_bits {
        constexpr uint32_t RLVL = (3 << 0);  ///< RLVL
        constexpr uint32_t ROR = (1U << 7);  ///< ROR
    }

    /// TST Register bits
    namespace tst_bits {
        constexpr uint32_t TLVL = (3 << 0);  ///< TLVL
        constexpr uint32_t TUR = (1U << 7);  ///< TUR
    }

    /// FCNF Register bits
    namespace fcnf_bits {
        constexpr uint32_t CNFG = (1U << 0);  ///< CNFG
        constexpr uint32_t RXTXCNT = (1U << 1);  ///< RXTXCNT
        constexpr uint32_t RFIE = (1U << 2);  ///< RFIE
        constexpr uint32_t TFIE = (1U << 3);  ///< TFIE
        constexpr uint32_t RFST = (1U << 4);  ///< RFST
    }

    /// DMA Register bits
    namespace dma_bits {
        constexpr uint32_t DMAEN0 = (1U << 0);  ///< DMAEN0
        constexpr uint32_t DMAEN1 = (1U << 1);  ///< DMAEN1
    }

}

// ============================================================================
// SC1 Peripheral
// ============================================================================

namespace sc1 {
    /// Base addresses
    constexpr uint32_t SC1_BASE = 0x400E1100;

    /// SC1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SC1 = reinterpret_cast<Registers*>(SC1_BASE);

}

// ============================================================================
// WD Peripheral
// ============================================================================

namespace wd {
    /// Base addresses
    constexpr uint32_t WD_BASE = 0x400F2000;

    /// WD Register structure
    struct Registers {
        volatile uint32_t MOD;  ///< Offset: 0x00 - WD Mode Register
        volatile uint32_t CR;  ///< Offset: 0x04 - WD Control Register
    };

    /// Peripheral instances
    inline Registers* WD = reinterpret_cast<Registers*>(WD_BASE);

    // Bit definitions
    /// MOD Register bits
    namespace mod_bits {
        constexpr uint32_t RESCR = (1U << 1);  ///< RESCR
        constexpr uint32_t I2WDT = (1U << 2);  ///< I2WDT
        constexpr uint32_t WDTP = (3 << 4);  ///< WDTP
        constexpr uint32_t WDTE = (1U << 7);  ///< WDTE
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WDCR = (8 << 0);  ///< Disable/Clear Code
    }

}

// ============================================================================
// CG Peripheral
// ============================================================================

namespace cg {
    /// Base addresses
    constexpr uint32_t CG_BASE = 0x400F3000;

    /// CG Register structure
    struct Registers {
        volatile uint32_t SYSCR;  ///< Offset: 0x00 - System Control Register
        volatile uint32_t OSCCR;  ///< Offset: 0x04 - Oscillation Control Register
        volatile uint32_t STBYCR;  ///< Offset: 0x08 - Standby Control Register
        volatile uint32_t PLLSEL;  ///< Offset: 0x0C - PLL Selection Register
        volatile uint32_t USBCTL;  ///< Offset: 0x38 - USB Clock and Reset Control register
        volatile uint32_t PROTECT;  ///< Offset: 0x3C - Protect Register
        volatile uint32_t IMCGA;  ///< Offset: 0x40 - CG Interrupt Mode Control Register A
        volatile uint32_t IMCGB;  ///< Offset: 0x44 - CG Interrupt Mode Control Register B
        volatile uint32_t IMCGC;  ///< Offset: 0x48 - CG Interrupt Mode Control Register C
        volatile uint32_t ICRCG;  ///< Offset: 0x60 - CG Interrupt Request Clear Register
        volatile uint32_t RSTFLG;  ///< Offset: 0x64 - Reset Flag Register
        volatile uint32_t NMIFLG;  ///< Offset: 0x68 - NMI Flag Register
    };

    /// Peripheral instances
    inline Registers* CG = reinterpret_cast<Registers*>(CG_BASE);

    // Bit definitions
    /// SYSCR Register bits
    namespace syscr_bits {
        constexpr uint32_t GEAR = (3 << 0);  ///< GEAR
        constexpr uint32_t PRCK = (3 << 8);  ///< PRCK
        constexpr uint32_t FPSEL = (1U << 12);  ///< FPSEL
        constexpr uint32_t SCOSEL = (2 << 16);  ///< SCOSEL
        constexpr uint32_t FCSTOP = (1U << 20);  ///< FCSTOP
    }

    /// OSCCR Register bits
    namespace osccr_bits {
        constexpr uint32_t WUEON = (1U << 0);  ///< WUEON
        constexpr uint32_t WUEF = (1U << 1);  ///< WUEF
        constexpr uint32_t PLLON = (1U << 2);  ///< PLLON
        constexpr uint32_t XEN1 = (1U << 8);  ///< XEN1
        constexpr uint32_t XEN2 = (1U << 16);  ///< XEN2
        constexpr uint32_t OSCSEL = (1U << 17);  ///< OSCSEL
        constexpr uint32_t EHOSCSEL = (1U << 18);  ///< EHOSCSEL
        constexpr uint32_t HWUPSEL = (1U << 19);  ///< HWUPSEL
        constexpr uint32_t WUODR = (12 << 20);  ///< WUODR
    }

    /// STBYCR Register bits
    namespace stbycr_bits {
        constexpr uint32_t STBY = (3 << 0);  ///< STBY
        constexpr uint32_t DRVE = (1U << 16);  ///< DRVE
    }

    /// PLLSEL Register bits
    namespace pllsel_bits {
        constexpr uint32_t PLLSEL = (1U << 0);  ///< PLLSEL
        constexpr uint32_t PLLSET = (15 << 1);  ///< PLLSET
    }

    /// USBCTL Register bits
    namespace usbctl_bits {
        constexpr uint32_t USBCLKEN = (1U << 8);  ///< USBCLKEN
        constexpr uint32_t USBCLKSEL = (1U << 9);  ///< USBCLKSEL
    }

    /// PROTECT Register bits
    namespace protect_bits {
        constexpr uint32_t CGPROTECT = (8 << 0);  ///< CGPROTECT
    }

    /// IMCGA Register bits
    namespace imcga_bits {
        constexpr uint32_t INT0EN = (1U << 0);  ///< INT0EN
        constexpr uint32_t EMST0 = (2 << 2);  ///< EMST0
        constexpr uint32_t EMCG0 = (3 << 4);  ///< EMCG0
        constexpr uint32_t INT1EN = (1U << 8);  ///< INT1EN
        constexpr uint32_t EMST1 = (2 << 10);  ///< EMST1
        constexpr uint32_t EMCG1 = (3 << 12);  ///< EMCG1
        constexpr uint32_t INT2EN = (1U << 16);  ///< INT2EN
        constexpr uint32_t EMST2 = (2 << 18);  ///< EMST2
        constexpr uint32_t EMCG2 = (3 << 20);  ///< EMCG2
        constexpr uint32_t INT3EN = (1U << 24);  ///< INT3EN
        constexpr uint32_t EMST3 = (2 << 26);  ///< EMST3
        constexpr uint32_t EMCG3 = (3 << 28);  ///< EMCG3
    }

    /// IMCGB Register bits
    namespace imcgb_bits {
        constexpr uint32_t INT4EN = (1U << 0);  ///< INT4EN
        constexpr uint32_t EMST4 = (2 << 2);  ///< EMST4
        constexpr uint32_t EMCG4 = (3 << 4);  ///< EMCG4
        constexpr uint32_t INT5EN = (1U << 8);  ///< INT5EN
        constexpr uint32_t EMST5 = (2 << 10);  ///< EMST5
        constexpr uint32_t EMCG5 = (3 << 12);  ///< EMCG5
        constexpr uint32_t INT6EN = (1U << 16);  ///< INT6EN
        constexpr uint32_t EMST6 = (2 << 18);  ///< EMST6
        constexpr uint32_t EMCG6 = (3 << 20);  ///< EMCG6
        constexpr uint32_t INT7EN = (1U << 24);  ///< INT7EN
        constexpr uint32_t EMST7 = (2 << 26);  ///< EMST7
        constexpr uint32_t EMCG7 = (3 << 28);  ///< EMCG7
    }

    /// IMCGC Register bits
    namespace imcgc_bits {
        constexpr uint32_t INT8EN = (1U << 0);  ///< INT8EN
        constexpr uint32_t EMST8 = (2 << 2);  ///< EMST8
        constexpr uint32_t EMCG8 = (3 << 4);  ///< EMCG8
        constexpr uint32_t INT9EN = (1U << 8);  ///< INT9EN
        constexpr uint32_t EMST9 = (2 << 10);  ///< EMST9
        constexpr uint32_t EMCG9 = (3 << 12);  ///< EMCG9
        constexpr uint32_t INTAEN = (1U << 16);  ///< INTAEN
        constexpr uint32_t EMSTA = (2 << 18);  ///< EMSTA
        constexpr uint32_t EMCGA = (3 << 20);  ///< EMCGA
        constexpr uint32_t INTBEN = (1U << 24);  ///< INTBEN
        constexpr uint32_t EMSTB = (2 << 26);  ///< EMSTB
        constexpr uint32_t EMCGB = (3 << 28);  ///< EMCGB
    }

    /// ICRCG Register bits
    namespace icrcg_bits {
        constexpr uint32_t ICRCG = (5 << 0);  ///< ICRCG
    }

    /// RSTFLG Register bits
    namespace rstflg_bits {
        constexpr uint32_t PINRSTF = (1U << 0);  ///< PINRSTF
        constexpr uint32_t WDTRSTF = (1U << 2);  ///< WDTRSTF
        constexpr uint32_t STOP2RSTF = (1U << 3);  ///< STOP2RSTF
        constexpr uint32_t DBGRSTF = (1U << 4);  ///< DBGRSTF
    }

    /// NMIFLG Register bits
    namespace nmiflg_bits {
        constexpr uint32_t NMIFLG0 = (1U << 0);  ///< NMIFLG0
        constexpr uint32_t NMIFLG1 = (1U << 1);  ///< NMIFLG1
    }

}

// ============================================================================
// FC Peripheral
// ============================================================================

namespace fc {
    /// Base addresses
    constexpr uint32_t FC_BASE = 0x41FFF010;

    /// FC Register structure
    struct Registers {
        volatile uint32_t SECBIT;  ///< Offset: 0x00 - FC Security Bit Register
        volatile uint32_t FLCS;  ///< Offset: 0x10 - FC Flash Control Register
    };

    /// Peripheral instances
    inline Registers* FC = reinterpret_cast<Registers*>(FC_BASE);

    // Bit definitions
    /// SECBIT Register bits
    namespace secbit_bits {
        constexpr uint32_t SECBIT = (1U << 0);  ///< SECBIT
    }

    /// FLCS Register bits
    namespace flcs_bits {
        constexpr uint32_t RDY_BSY = (1U << 0);  ///< RDY_BSY
        constexpr uint32_t BLPRO = (6 << 16);  ///< BLPRO
    }

}


} // namespace alloy::generated::m365

#endif // ALLOY_GENERATED_M365_PERIPHERALS_HPP