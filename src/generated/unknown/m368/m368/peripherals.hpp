/// Auto-generated code for M368
/// Generated by Alloy Code Generator
/// Source: toshiba_m368.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:21:41
#ifndef ALLOY_GENERATED_M368_PERIPHERALS_HPP
#define ALLOY_GENERATED_M368_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::m368 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CANMB0_BASE = 0x40005000;
    constexpr uint32_t CANMB1_BASE = 0x40005020;
    constexpr uint32_t CANMB2_BASE = 0x40005040;
    constexpr uint32_t CANMB3_BASE = 0x40005060;
    constexpr uint32_t CANMB4_BASE = 0x40005080;
    constexpr uint32_t CANMB5_BASE = 0x400050A0;
    constexpr uint32_t CANMB6_BASE = 0x400050C0;
    constexpr uint32_t CANMB7_BASE = 0x400050E0;
    constexpr uint32_t CANMB8_BASE = 0x40005100;
    constexpr uint32_t CANMB9_BASE = 0x40005120;
    constexpr uint32_t CANMB10_BASE = 0x40005140;
    constexpr uint32_t CANMB11_BASE = 0x40005160;
    constexpr uint32_t CANMB12_BASE = 0x40005180;
    constexpr uint32_t CANMB13_BASE = 0x400051A0;
    constexpr uint32_t CANMB14_BASE = 0x400051C0;
    constexpr uint32_t CANMB15_BASE = 0x400051E0;
    constexpr uint32_t CANMB16_BASE = 0x40005200;
    constexpr uint32_t CANMB17_BASE = 0x40005220;
    constexpr uint32_t CANMB18_BASE = 0x40005240;
    constexpr uint32_t CANMB19_BASE = 0x40005260;
    constexpr uint32_t CANMB20_BASE = 0x40005280;
    constexpr uint32_t CANMB21_BASE = 0x400052A0;
    constexpr uint32_t CANMB22_BASE = 0x400052C0;
    constexpr uint32_t CANMB23_BASE = 0x400052E0;
    constexpr uint32_t CANMB24_BASE = 0x40005300;
    constexpr uint32_t CANMB25_BASE = 0x40005320;
    constexpr uint32_t CANMB26_BASE = 0x40005340;
    constexpr uint32_t CANMB27_BASE = 0x40005360;
    constexpr uint32_t CANMB28_BASE = 0x40005380;
    constexpr uint32_t CANMB29_BASE = 0x400053A0;
    constexpr uint32_t CANMB30_BASE = 0x400053C0;
    constexpr uint32_t CANMB31_BASE = 0x400053E0;
    constexpr uint32_t CAN_BASE = 0x40005400;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t ID;  ///< Offset: 0x00 - CAN Mailbox Register
        volatile uint32_t TSVMCF;  ///< Offset: 0x08 - CAN Mailbox Register
        volatile uint32_t DL;  ///< Offset: 0x10 - CAN Mailbox Register
        volatile uint32_t DH;  ///< Offset: 0x18 - CAN Mailbox Register
    };

    /// Peripheral instances
    inline Registers* CANMB0 = reinterpret_cast<Registers*>(CANMB0_BASE);
    inline Registers* CANMB1 = reinterpret_cast<Registers*>(CANMB1_BASE);
    inline Registers* CANMB2 = reinterpret_cast<Registers*>(CANMB2_BASE);
    inline Registers* CANMB3 = reinterpret_cast<Registers*>(CANMB3_BASE);
    inline Registers* CANMB4 = reinterpret_cast<Registers*>(CANMB4_BASE);
    inline Registers* CANMB5 = reinterpret_cast<Registers*>(CANMB5_BASE);
    inline Registers* CANMB6 = reinterpret_cast<Registers*>(CANMB6_BASE);
    inline Registers* CANMB7 = reinterpret_cast<Registers*>(CANMB7_BASE);
    inline Registers* CANMB8 = reinterpret_cast<Registers*>(CANMB8_BASE);
    inline Registers* CANMB9 = reinterpret_cast<Registers*>(CANMB9_BASE);
    inline Registers* CANMB10 = reinterpret_cast<Registers*>(CANMB10_BASE);
    inline Registers* CANMB11 = reinterpret_cast<Registers*>(CANMB11_BASE);
    inline Registers* CANMB12 = reinterpret_cast<Registers*>(CANMB12_BASE);
    inline Registers* CANMB13 = reinterpret_cast<Registers*>(CANMB13_BASE);
    inline Registers* CANMB14 = reinterpret_cast<Registers*>(CANMB14_BASE);
    inline Registers* CANMB15 = reinterpret_cast<Registers*>(CANMB15_BASE);
    inline Registers* CANMB16 = reinterpret_cast<Registers*>(CANMB16_BASE);
    inline Registers* CANMB17 = reinterpret_cast<Registers*>(CANMB17_BASE);
    inline Registers* CANMB18 = reinterpret_cast<Registers*>(CANMB18_BASE);
    inline Registers* CANMB19 = reinterpret_cast<Registers*>(CANMB19_BASE);
    inline Registers* CANMB20 = reinterpret_cast<Registers*>(CANMB20_BASE);
    inline Registers* CANMB21 = reinterpret_cast<Registers*>(CANMB21_BASE);
    inline Registers* CANMB22 = reinterpret_cast<Registers*>(CANMB22_BASE);
    inline Registers* CANMB23 = reinterpret_cast<Registers*>(CANMB23_BASE);
    inline Registers* CANMB24 = reinterpret_cast<Registers*>(CANMB24_BASE);
    inline Registers* CANMB25 = reinterpret_cast<Registers*>(CANMB25_BASE);
    inline Registers* CANMB26 = reinterpret_cast<Registers*>(CANMB26_BASE);
    inline Registers* CANMB27 = reinterpret_cast<Registers*>(CANMB27_BASE);
    inline Registers* CANMB28 = reinterpret_cast<Registers*>(CANMB28_BASE);
    inline Registers* CANMB29 = reinterpret_cast<Registers*>(CANMB29_BASE);
    inline Registers* CANMB30 = reinterpret_cast<Registers*>(CANMB30_BASE);
    inline Registers* CANMB31 = reinterpret_cast<Registers*>(CANMB31_BASE);
    inline Registers* CAN = reinterpret_cast<Registers*>(CAN_BASE);

    // Bit definitions
    /// ID Register bits
    namespace id_bits {
        constexpr uint32_t ID = (29 << 0);  ///< ID
        constexpr uint32_t RFH = (1U << 29);  ///< RFH
        constexpr uint32_t GAME = (1U << 30);  ///< GAME
        constexpr uint32_t IDE = (1U << 31);  ///< IDE
    }

    /// TSVMCF Register bits
    namespace tsvmcf_bits {
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
        constexpr uint32_t RTR = (1U << 4);  ///< RTR
        constexpr uint32_t TSV = (16 << 16);  ///< TSV
    }

    /// DL Register bits
    namespace dl_bits {
        constexpr uint32_t D0 = (8 << 0);  ///< D0
        constexpr uint32_t D1 = (8 << 8);  ///< D1
        constexpr uint32_t D2 = (8 << 16);  ///< D2
        constexpr uint32_t D3 = (8 << 24);  ///< D3
    }

    /// DH Register bits
    namespace dh_bits {
        constexpr uint32_t D4 = (8 << 0);  ///< D4
        constexpr uint32_t D5 = (8 << 8);  ///< D5
        constexpr uint32_t D6 = (8 << 16);  ///< D6
        constexpr uint32_t D7 = (8 << 24);  ///< D7
    }

}

// ============================================================================
// HC Peripheral
// ============================================================================

namespace hc {
    /// Base addresses
    constexpr uint32_t HC_BASE = 0x40006000;

    /// HC Register structure
    struct Registers {
        volatile uint32_t REVISION;  ///< Offset: 0x00 - USB Host Controller Revision Register
        volatile uint32_t CONTROL;  ///< Offset: 0x04 - USB Host Controller Control Register
        volatile uint32_t COMMANDSTATUS;  ///< Offset: 0x08 - USB Host Controller Command Status Register
        volatile uint32_t INTERRUPTSTATUS;  ///< Offset: 0x0C - USB Host Controller Interrupt Status Register
        volatile uint32_t INTERRUPTENABLE;  ///< Offset: 0x10 - USB Host Controller Interrupt Enable Register
        volatile uint32_t INTERRUPTDISABLE;  ///< Offset: 0x14 - USB Host Controller Interrupt Disable Register
        volatile uint32_t HCCA;  ///< Offset: 0x18 - USB Host Controller Communication Area Register
        volatile uint32_t PERIODCURRENTED;  ///< Offset: 0x1C - USB Host Controller Period Current ED Register
        volatile uint32_t CONTROLHEADED;  ///< Offset: 0x20 - USB Host Controller Control Head ED Register
        volatile uint32_t CONTROLCURRENTED;  ///< Offset: 0x24 - USB Host Controller Control Current ED Register
        volatile uint32_t BULKHEADED;  ///< Offset: 0x28 - USB Host Controller Bulk Head ED Register
        volatile uint32_t BULKCURRENTED;  ///< Offset: 0x2C - USB Host Controller Bulk Current ED Register
        volatile uint32_t DONEHEAD;  ///< Offset: 0x30 - USB Host Controller Done Head Register
        volatile uint32_t FMINTERVAL;  ///< Offset: 0x34 - USB Host Controller Frame Interval Register
        volatile uint32_t FMREMAINING;  ///< Offset: 0x38 - USB Host Controller Frame Remaining Register
        volatile uint32_t FMNUMBER;  ///< Offset: 0x3C - USB Host Controller Frame Number Register
        volatile uint32_t PERIODSTART;  ///< Offset: 0x40 - USB Host Controller Period Start Register
        volatile uint32_t LSTHRESHOLD;  ///< Offset: 0x44 - USB Host Controller LS Threshold Register
        volatile uint32_t RHDESCRIPTORA;  ///< Offset: 0x48 - USB Host Controller Root Hub Descriptor Register
        volatile uint32_t RHDESCRIPTORB;  ///< Offset: 0x4C - USB Host Controller Root Hub Descriptor Register
        volatile uint32_t RHSTATUS;  ///< Offset: 0x50 - USB Host Controller Root Hub Status Register
        volatile uint32_t RHPORTSTATUS1;  ///< Offset: 0x54 - USB Host Controller Root Hub Port Status Register
        volatile uint32_t BCR0;  ///< Offset: 0x80 - USB Host Controller Clock and Transceiver Control Register
    };

    /// Peripheral instances
    inline Registers* HC = reinterpret_cast<Registers*>(HC_BASE);

    // Bit definitions
    /// REVISION Register bits
    namespace revision_bits {
        constexpr uint32_t REV = (8 << 0);  ///< REV
    }

    /// CONTROL Register bits
    namespace control_bits {
        constexpr uint32_t CBSR = (2 << 0);  ///< CBSR
        constexpr uint32_t PLE = (1U << 2);  ///< PLE
        constexpr uint32_t IE = (1U << 3);  ///< IE
        constexpr uint32_t CLE = (1U << 4);  ///< CLE
        constexpr uint32_t BLE = (1U << 5);  ///< BLE
        constexpr uint32_t HCFS = (2 << 6);  ///< HCFS
        constexpr uint32_t IR = (1U << 8);  ///< IR
        constexpr uint32_t RWC = (1U << 9);  ///< RWC
        constexpr uint32_t RWE = (1U << 10);  ///< RWE
    }

    /// COMMANDSTATUS Register bits
    namespace commandstatus_bits {
        constexpr uint32_t HCR = (1U << 0);  ///< HCR
        constexpr uint32_t CLF = (1U << 1);  ///< CLF
        constexpr uint32_t BLF = (1U << 2);  ///< BLF
        constexpr uint32_t OCR = (1U << 3);  ///< OCR
        constexpr uint32_t SOC = (2 << 16);  ///< SOC
    }

    /// INTERRUPTSTATUS Register bits
    namespace interruptstatus_bits {
        constexpr uint32_t SO = (1U << 0);  ///< SO
        constexpr uint32_t WDH = (1U << 1);  ///< WDH
        constexpr uint32_t SF = (1U << 2);  ///< SF
        constexpr uint32_t RD = (1U << 3);  ///< RD
        constexpr uint32_t UE = (1U << 4);  ///< UE
        constexpr uint32_t FNO = (1U << 5);  ///< FNO
        constexpr uint32_t RHSC = (1U << 6);  ///< RHSC
        constexpr uint32_t OC = (1U << 30);  ///< OC
    }

    /// INTERRUPTENABLE Register bits
    namespace interruptenable_bits {
        constexpr uint32_t SO = (1U << 0);  ///< SO
        constexpr uint32_t WDH = (1U << 1);  ///< WDH
        constexpr uint32_t SF = (1U << 2);  ///< SF
        constexpr uint32_t RD = (1U << 3);  ///< RD
        constexpr uint32_t UE = (1U << 4);  ///< UE
        constexpr uint32_t FNO = (1U << 5);  ///< FNO
        constexpr uint32_t RHSC = (1U << 6);  ///< RHSC
        constexpr uint32_t OC = (1U << 30);  ///< OC
        constexpr uint32_t MIE = (1U << 31);  ///< MIE
    }

    /// INTERRUPTDISABLE Register bits
    namespace interruptdisable_bits {
        constexpr uint32_t SO = (1U << 0);  ///< SO
        constexpr uint32_t WDH = (1U << 1);  ///< WDH
        constexpr uint32_t SF = (1U << 2);  ///< SF
        constexpr uint32_t RD = (1U << 3);  ///< RD
        constexpr uint32_t UE = (1U << 4);  ///< UE
        constexpr uint32_t FNO = (1U << 5);  ///< FNO
        constexpr uint32_t RHSC = (1U << 6);  ///< RHSC
        constexpr uint32_t OC = (1U << 30);  ///< OC
        constexpr uint32_t MIE = (1U << 31);  ///< MIE
    }

    /// HCCA Register bits
    namespace hcca_bits {
        constexpr uint32_t HCCA = (24 << 8);  ///< HCCA
    }

    /// PERIODCURRENTED Register bits
    namespace periodcurrented_bits {
        constexpr uint32_t PCED = (28 << 4);  ///< PCED
    }

    /// CONTROLHEADED Register bits
    namespace controlheaded_bits {
        constexpr uint32_t CHED = (28 << 4);  ///< CHED
    }

    /// CONTROLCURRENTED Register bits
    namespace controlcurrented_bits {
        constexpr uint32_t CCED = (28 << 4);  ///< CCED
    }

    /// BULKHEADED Register bits
    namespace bulkheaded_bits {
        constexpr uint32_t BHED = (28 << 4);  ///< BHED
    }

    /// BULKCURRENTED Register bits
    namespace bulkcurrented_bits {
        constexpr uint32_t BCED = (28 << 4);  ///< BCED
    }

    /// DONEHEAD Register bits
    namespace donehead_bits {
        constexpr uint32_t DH = (28 << 4);  ///< DH
    }

    /// FMINTERVAL Register bits
    namespace fminterval_bits {
        constexpr uint32_t FI = (14 << 0);  ///< FI
        constexpr uint32_t FSMPS = (15 << 16);  ///< FSMPS
        constexpr uint32_t FIT = (1U << 31);  ///< FIT
    }

    /// FMREMAINING Register bits
    namespace fmremaining_bits {
        constexpr uint32_t FR = (14 << 0);  ///< FR
        constexpr uint32_t FRT = (1U << 31);  ///< FRT
    }

    /// FMNUMBER Register bits
    namespace fmnumber_bits {
        constexpr uint32_t FN = (16 << 0);  ///< FN
    }

    /// PERIODSTART Register bits
    namespace periodstart_bits {
        constexpr uint32_t PS = (14 << 0);  ///< PS
    }

    /// LSTHRESHOLD Register bits
    namespace lsthreshold_bits {
        constexpr uint32_t LST = (12 << 0);  ///< LST
    }

    /// RHDESCRIPTORA Register bits
    namespace rhdescriptora_bits {
        constexpr uint32_t NDP = (8 << 0);  ///< NDP
        constexpr uint32_t PSM = (1U << 8);  ///< PSM
        constexpr uint32_t NPS = (1U << 9);  ///< NPS
        constexpr uint32_t DT = (1U << 10);  ///< DT
        constexpr uint32_t OCPM = (1U << 11);  ///< OCPM
        constexpr uint32_t NOCP = (1U << 12);  ///< NOCP
        constexpr uint32_t POTPGT = (8 << 24);  ///< POTPGT
    }

    /// RHDESCRIPTORB Register bits
    namespace rhdescriptorb_bits {
        constexpr uint32_t DR = (16 << 0);  ///< DR
        constexpr uint32_t PPCM = (16 << 16);  ///< PPCM
    }

    /// RHSTATUS Register bits
    namespace rhstatus_bits {
        constexpr uint32_t LPS = (1U << 0);  ///< LPS
        constexpr uint32_t OCI = (1U << 1);  ///< OCI
        constexpr uint32_t DRWE = (1U << 15);  ///< DRWE
        constexpr uint32_t LPSC = (1U << 16);  ///< LPSC
        constexpr uint32_t OCIC = (1U << 17);  ///< OCIC
        constexpr uint32_t CRWE = (1U << 31);  ///< CRWE
    }

    /// RHPORTSTATUS1 Register bits
    namespace rhportstatus1_bits {
        constexpr uint32_t CCS = (1U << 0);  ///< CCS
        constexpr uint32_t PES = (1U << 1);  ///< PES
        constexpr uint32_t PSS = (1U << 2);  ///< PSS
        constexpr uint32_t POCI = (1U << 3);  ///< POCI
        constexpr uint32_t PRS = (1U << 4);  ///< PRS
        constexpr uint32_t PPS = (1U << 8);  ///< PPS
        constexpr uint32_t LSDA = (1U << 9);  ///< LSDA
        constexpr uint32_t CSC = (1U << 16);  ///< CSC
        constexpr uint32_t PESC = (1U << 17);  ///< PESC
        constexpr uint32_t PSSC = (1U << 18);  ///< PSSC
        constexpr uint32_t OCIC = (1U << 19);  ///< OCIC
        constexpr uint32_t PRSC = (1U << 20);  ///< PRSC
    }

    /// BCR0 Register bits
    namespace bcr0_bits {
        constexpr uint32_t OVCE = (1U << 29);  ///< OVCE
        constexpr uint32_t TRNS_SUSP = (1U << 30);  ///< TRNS_SUSP
    }

}

// ============================================================================
// UDFS Peripheral
// ============================================================================

namespace udfs {
    /// Base addresses
    constexpr uint32_t UDFS_BASE = 0x40008000;

    /// UDFS Register structure
    struct Registers {
        volatile uint32_t INTSTS;  ///< Offset: 0x00 - Interrupt Status Register
        volatile uint32_t INTENB;  ///< Offset: 0x04 - Interrupt Enable Register
        volatile uint32_t MWTOUT;  ///< Offset: 0x08 - Master Write Timeout Register
        volatile uint32_t C2STSET;  ///< Offset: 0x0C - UDC2 setting
        volatile uint32_t MSTSET;  ///< Offset: 0x10 - DMAC setting
        volatile uint32_t DMACRDREQ;  ///< Offset: 0x14 - DMAC Read request
        volatile uint32_t DMACRDVL;  ///< Offset: 0x18 - DMAC Read Value
        volatile uint32_t UDC2RDREQ;  ///< Offset: 0x1C - UDC2 Read Request
        volatile uint32_t UDC2RDVL;  ///< Offset: 0x20 - UDC2 Read Value
        volatile uint32_t ARBTSET;  ///< Offset: 0x3C - Arbiter Setting
        volatile uint32_t MWSADR;  ///< Offset: 0x40 - Master Write Start Address
        volatile uint32_t MWEADR;  ///< Offset: 0x44 - Master Write End Address
        volatile uint32_t MWCADR;  ///< Offset: 0x48 - Master Write Current Address
        volatile uint32_t MWAHBADR;  ///< Offset: 0x4C - Master Write AHB Address
        volatile uint32_t MRSADR;  ///< Offset: 0x50 - Master Read Start Address
        volatile uint32_t MREADR;  ///< Offset: 0x54 - Master Read End Address
        volatile uint32_t MRCADR;  ///< Offset: 0x58 - Master Read Current Address
        volatile uint32_t MRAHBADR;  ///< Offset: 0x5C - Master Read AHB Address
        volatile uint32_t PWCTL;  ///< Offset: 0x80 - Power Detect Control
        volatile uint32_t MSTSTS;  ///< Offset: 0x84 - Master Status
        volatile uint32_t TOUTCNT;  ///< Offset: 0x88 - Timeout Count
    };

    /// Peripheral instances
    inline Registers* UDFS = reinterpret_cast<Registers*>(UDFS_BASE);

    // Bit definitions
    /// INTSTS Register bits
    namespace intsts_bits {
        constexpr uint32_t INT_SETUP = (1U << 0);  ///< INT_SETUP
        constexpr uint32_t INT_STATUS_NAK = (1U << 1);  ///< INT_STATUS_NAK
        constexpr uint32_t INT_STATUS = (1U << 2);  ///< INT_STATUS
        constexpr uint32_t INT_RX_ZERO = (1U << 3);  ///< INT_RX_ZERO
        constexpr uint32_t INT_SOF = (1U << 4);  ///< INT_SOF
        constexpr uint32_t INT_EP0 = (1U << 5);  ///< INT_EP0
        constexpr uint32_t INT_EP = (1U << 6);  ///< INT_EP
        constexpr uint32_t INT_NAK = (1U << 7);  ///< INT_NAK
        constexpr uint32_t INT_SUSPEND_RESUME = (1U << 8);  ///< INT_SUSPEND_RESUME
        constexpr uint32_t INT_USB_RESET = (1U << 9);  ///< INT_USB_RESET
        constexpr uint32_t INT_USB_RESET_END = (1U << 10);  ///< INT_USB_RESET_END
        constexpr uint32_t INT_MW_SET_ADD = (1U << 17);  ///< INT_MW_SET_ADD
        constexpr uint32_t INT_MW_END_ADD = (1U << 18);  ///< INT_MW_END_ADD
        constexpr uint32_t INT_MW_TIMEOUT = (1U << 19);  ///< INT_MW_TIMEOUT
        constexpr uint32_t INT_MW_AHBERR = (1U << 20);  ///< INT_MW_AHBERR
        constexpr uint32_t INT_MR_END_ADD = (1U << 21);  ///< INT_MR_END_ADD
        constexpr uint32_t INT_MR_EP_DSET = (1U << 22);  ///< INT_MR_EP_DSET
        constexpr uint32_t INT_MR_AHBERR = (1U << 23);  ///< INT_MR_AHBERR
        constexpr uint32_t INT_UDC2_REG_RD = (1U << 24);  ///< INT_UDC2_REG_RD
        constexpr uint32_t INT_DMAC_REG_RD = (1U << 25);  ///< INT_DMAC_REG_RD
        constexpr uint32_t INT_POWERDETECT = (1U << 28);  ///< INT_POWERDETECT
        constexpr uint32_t INT_MW_RERROR = (1U << 29);  ///< INT_MW_RERROR
    }

    /// INTENB Register bits
    namespace intenb_bits {
        constexpr uint32_t SUSPEND_RESUME_EN = (1U << 8);  ///< SUSPEND_RESUME_EN
        constexpr uint32_t RESET_EN = (1U << 9);  ///< RESET_EN
        constexpr uint32_t RESET_END_EN = (1U << 10);  ///< RESET_END_EN
        constexpr uint32_t MW_SET_ADD_EN = (1U << 17);  ///< MW_SET_ADD_EN
        constexpr uint32_t MW_END_ADD_EN = (1U << 18);  ///< MW_END_ADD_EN
        constexpr uint32_t MW_TIMEOUT_EN = (1U << 19);  ///< MW_TIMEOUT_EN
        constexpr uint32_t MW_AHBERR_EN = (1U << 20);  ///< MW_AHBERR_EN
        constexpr uint32_t MR_END_ADD_EN = (1U << 21);  ///< MR_END_ADD_EN
        constexpr uint32_t MR_EP_DSET_EN = (1U << 22);  ///< MR_EP_DSET_EN
        constexpr uint32_t MR_AHBERR_EN = (1U << 23);  ///< MR_AHBERR_EN
        constexpr uint32_t UDC2_REG_RD_EN = (1U << 24);  ///< UDC2_REG_RD_EN
        constexpr uint32_t DMAC_REG_RD_EN = (1U << 25);  ///< DMAC_REG_RD_EN
        constexpr uint32_t POWER_DETECT_EN = (1U << 28);  ///< POWER_DETECT_EN
        constexpr uint32_t MW_RERROR_EN = (1U << 29);  ///< MW_RERROR_EN
    }

    /// MWTOUT Register bits
    namespace mwtout_bits {
        constexpr uint32_t TIMEOUT_EN = (1U << 0);  ///< TIMEOUT_EN
        constexpr uint32_t TIMEOUTSET = (31 << 1);  ///< TIMEOUTSET
    }

    /// C2STSET Register bits
    namespace c2stset_bits {
        constexpr uint32_t TX0 = (1U << 0);  ///< TX0
        constexpr uint32_t EOPB_ENABLE = (1U << 4);  ///< EOPB_ENABLE
    }

    /// MSTSET Register bits
    namespace mstset_bits {
        constexpr uint32_t MW_ENABLE = (1U << 0);  ///< MW_ENABLE
        constexpr uint32_t MW_ABORT = (1U << 1);  ///< MW_ABORT
        constexpr uint32_t MW_RESET = (1U << 2);  ///< MW_RESET
        constexpr uint32_t MR_ENABLE = (1U << 4);  ///< MR_ENABLE
        constexpr uint32_t MR_ABORT = (1U << 5);  ///< MR_ABORT
        constexpr uint32_t MR_RESET = (1U << 6);  ///< MR_RESET
        constexpr uint32_t M_BURST_TYPE = (1U << 8);  ///< M_BURST_TYPE
    }

    /// DMACRDREQ Register bits
    namespace dmacrdreq_bits {
        constexpr uint32_t DMARDADR = (6 << 2);  ///< DMARDADR
        constexpr uint32_t DMARDCLR = (1U << 30);  ///< DMARDCLR
        constexpr uint32_t DMARDREQ = (1U << 31);  ///< DMARDREQ
    }

    /// DMACRDVL Register bits
    namespace dmacrdvl_bits {
        constexpr uint32_t DMARDDATA = (32 << 0);  ///< DMARDDATA
    }

    /// UDC2RDREQ Register bits
    namespace udc2rdreq_bits {
        constexpr uint32_t UDC2RDADR = (8 << 2);  ///< UDC2RDADR
        constexpr uint32_t UDC2RDCLR = (1U << 30);  ///< UDC2RDCLR
        constexpr uint32_t UDC2RDREQ = (1U << 31);  ///< UDC2RDREQ
    }

    /// UDC2RDVL Register bits
    namespace udc2rdvl_bits {
        constexpr uint32_t UDC2RDATA = (16 << 0);  ///< UDC2RDATA
    }

    /// ARBTSET Register bits
    namespace arbtset_bits {
        constexpr uint32_t ABTPRI_R0 = (2 << 0);  ///< ABTPRI_R0
        constexpr uint32_t ABTPRI_R1 = (2 << 4);  ///< ABTPRI_R1
        constexpr uint32_t ABTPRI_W0 = (2 << 8);  ///< ABTPRI_W0
        constexpr uint32_t ABTPRI_W1 = (2 << 12);  ///< ABTPRI_W1
        constexpr uint32_t ABTMOD = (1U << 28);  ///< ABTMOD
        constexpr uint32_t ABT_EN = (1U << 31);  ///< ABT_EN
    }

    /// MWSADR Register bits
    namespace mwsadr_bits {
        constexpr uint32_t MWSADR = (32 << 0);  ///< MWSADR
    }

    /// MWEADR Register bits
    namespace mweadr_bits {
        constexpr uint32_t MWEADR = (32 << 0);  ///< MWEADR
    }

    /// MWCADR Register bits
    namespace mwcadr_bits {
        constexpr uint32_t MWCADR = (32 << 0);  ///< MWCADR
    }

    /// MWAHBADR Register bits
    namespace mwahbadr_bits {
        constexpr uint32_t MWAHBADR = (32 << 0);  ///< MWAHBADR
    }

    /// MRSADR Register bits
    namespace mrsadr_bits {
        constexpr uint32_t MRSADR = (32 << 0);  ///< MRSADR
    }

    /// MREADR Register bits
    namespace mreadr_bits {
        constexpr uint32_t MREADR = (32 << 0);  ///< MREADR
    }

    /// MRCADR Register bits
    namespace mrcadr_bits {
        constexpr uint32_t MRCADR = (32 << 0);  ///< MRCADR
    }

    /// MRAHBADR Register bits
    namespace mrahbadr_bits {
        constexpr uint32_t MRAHBADR = (32 << 0);  ///< MRAHBADR
    }

    /// PWCTL Register bits
    namespace pwctl_bits {
        constexpr uint32_t USB_RESET = (1U << 0);  ///< USB_RESET
        constexpr uint32_t PW_RESETB = (1U << 1);  ///< PW_RESETB
        constexpr uint32_t PW_DETECT = (1U << 2);  ///< PW_DETECT
        constexpr uint32_t PHY_SUSPEND = (1U << 3);  ///< PHY_SUSPEND
        constexpr uint32_t SUSPEND_X = (1U << 4);  ///< SUSPEND_X
        constexpr uint32_t PHY_RESETB = (1U << 5);  ///< PHY_RESETB
        constexpr uint32_t PHY_REMOTE_WKUP = (1U << 6);  ///< PHY_REMOTE_WKUP
        constexpr uint32_t WAKEUP_EN = (1U << 7);  ///< WAKEUP_EN
    }

    /// MSTSTS Register bits
    namespace mststs_bits {
        constexpr uint32_t MWEPDSET = (1U << 0);  ///< MWEPDSET
        constexpr uint32_t MREPDSET = (1U << 1);  ///< MREPDSET
        constexpr uint32_t MWBFEMP = (1U << 2);  ///< MWBFEMP
        constexpr uint32_t MRBFEMP = (1U << 3);  ///< MRBFEMP
        constexpr uint32_t MREPEMPTY = (1U << 4);  ///< MREPEMPTY
    }

    /// TOUTCNT Register bits
    namespace toutcnt_bits {
        constexpr uint32_t TMOUTCNT = (32 << 0);  ///< TMOUTCNT
    }

}

// ============================================================================
// UDFS2 Peripheral
// ============================================================================

namespace udfs2 {
    /// Base addresses
    constexpr uint32_t UDFS2_BASE = 0x40008200;

    /// UDFS2 Register structure
    struct Registers {
        volatile uint32_t ADR;  ///< Offset: 0x00 - UDC2 Address State
        volatile uint32_t FRM;  ///< Offset: 0x04 - UDC2 Frame
        volatile uint32_t CMD;  ///< Offset: 0x0C - UDC2 Command
        volatile uint32_t BRQ;  ///< Offset: 0x10 - UDC2 bRequest-bmRequest Type
        volatile uint32_t WVL;  ///< Offset: 0x14 - UDC2 wValue
        volatile uint32_t WIDX;  ///< Offset: 0x18 - UDC2 wIndex
        volatile uint32_t WLGTH;  ///< Offset: 0x1C - UDC2 wLength
        volatile uint32_t INT;  ///< Offset: 0x20 - UDC2 INT
        volatile uint32_t INTEP;  ///< Offset: 0x24 - UDC2 INT_EP
        volatile uint32_t INTEPMSK;  ///< Offset: 0x28 - UDC2 INT_EP_MASK
        volatile uint32_t INTRX0;  ///< Offset: 0x2C - UDC2 INT RX DATA0
        volatile uint32_t EP0MSZ;  ///< Offset: 0x30 - UDC2 EP0 Max Packet Size
        volatile uint32_t EP0STS;  ///< Offset: 0x34 - UDC2 EP0 Status
        volatile uint32_t EP0DSZ;  ///< Offset: 0x38 - UDC2 EP0 Data Size
        volatile uint32_t EP0FIFO;  ///< Offset: 0x3C - UDC2 EP0 FIFO
        volatile uint32_t EP1MSZ;  ///< Offset: 0x40 - UDC2 EP1 Max Packet Size
        volatile uint32_t EP1STS;  ///< Offset: 0x44 - UDC2 EP1 Status
        volatile uint32_t EP1DSZ;  ///< Offset: 0x48 - UDC2 EP1 Data Size
        volatile uint32_t EP1FIFO;  ///< Offset: 0x4C - UDC2 EP1 FIFO
        volatile uint32_t EP2MSZ;  ///< Offset: 0x50 - UDC2 EP2 Max Packet Size
        volatile uint32_t EP2STS;  ///< Offset: 0x54 - UDC2 EP2 Status
        volatile uint32_t EP2DSZ;  ///< Offset: 0x58 - UDC2 EP2 Data Size
        volatile uint32_t EP2FIFO;  ///< Offset: 0x5C - UDC2 EP2 FIFO
        volatile uint32_t EP3MSZ;  ///< Offset: 0x60 - UDC3 EP3 Max Packet Size
        volatile uint32_t EP3STS;  ///< Offset: 0x64 - UDC3 EP3 Status
        volatile uint32_t EP3DSZ;  ///< Offset: 0x68 - UDC3 EP3 Data Size
        volatile uint32_t EP3FIFO;  ///< Offset: 0x6C - UDC3 EP3 FIFO
        volatile uint32_t EP4MSZ;  ///< Offset: 0x70 - UDC2 EP4 Max Packet Size
        volatile uint32_t EP4STS;  ///< Offset: 0x74 - UDC2 EP4 Status
        volatile uint32_t EP4DSZ;  ///< Offset: 0x78 - UDC2 EP4 Data Size
        volatile uint32_t EP4FIFO;  ///< Offset: 0x7C - UDC2 EP4 FIFO
        volatile uint32_t EP5MSZ;  ///< Offset: 0x80 - UDC2 EP5 Max Packet Size
        volatile uint32_t EP5STS;  ///< Offset: 0x84 - UDC2 EP5 Status
        volatile uint32_t EP5DSZ;  ///< Offset: 0x88 - UDC2 EP5 Data Size
        volatile uint32_t EP5FIFO;  ///< Offset: 0x8C - UDC2 EP5 FIFO
        volatile uint32_t EP6MSZ;  ///< Offset: 0x90 - UDC2 EP6 Max Packet Size
        volatile uint32_t EP6STS;  ///< Offset: 0x94 - UDC2 EP6 Status
        volatile uint32_t EP6DSZ;  ///< Offset: 0x98 - UDC2 EP6 Data Size
        volatile uint32_t EP6FIFO;  ///< Offset: 0x9C - UDC2 EP6 FIFO
        volatile uint32_t EP7MSZ;  ///< Offset: 0xA0 - UDC2 EP7 Max Packet Size
        volatile uint32_t EP7STS;  ///< Offset: 0xA4 - UDC2 EP7 Status
        volatile uint32_t EP7DSZ;  ///< Offset: 0xA8 - UDC2 EP7 Data Size
        volatile uint32_t EP7FIFO;  ///< Offset: 0xAC - UDC2 EP7 FIFO
        volatile uint32_t INTNAK;  ///< Offset: 0x330 - UDC2 INT NAK
        volatile uint32_t INTNAKMSK;  ///< Offset: 0x334 - UDC2 INT NAK MASK
    };

    /// Peripheral instances
    inline Registers* UDFS2 = reinterpret_cast<Registers*>(UDFS2_BASE);

    // Bit definitions
    /// ADR Register bits
    namespace adr_bits {
        constexpr uint32_t DEV_ADR = (7 << 0);  ///< DEV_ADR
        constexpr uint32_t DEFAULT = (1U << 8);  ///< DEFAULT
        constexpr uint32_t ADDRESSED = (1U << 9);  ///< ADDRESSED
        constexpr uint32_t CONFIGURED = (1U << 10);  ///< CONFIGURED
        constexpr uint32_t SUSPEND = (1U << 11);  ///< SUSPEND
        constexpr uint32_t CUR_SPEED = (2 << 12);  ///< CUR_SPEED
        constexpr uint32_t EP_BI_MODE = (1U << 14);  ///< EP_BI_MODE
        constexpr uint32_t STAGE_ERR = (1U << 15);  ///< STAGE_ERR
    }

    /// FRM Register bits
    namespace frm_bits {
        constexpr uint32_t FRAME = (11 << 0);  ///< FRAME
        constexpr uint32_t F_STATUS = (2 << 12);  ///< F_STATUS
        constexpr uint32_t CREATE_SOF = (1U << 15);  ///< CREATE_SOF
    }

    /// CMD Register bits
    namespace cmd_bits {
        constexpr uint32_t COM = (4 << 0);  ///< COM
        constexpr uint32_t EP = (4 << 4);  ///< EP
        constexpr uint32_t RX_NULLPKT_EP = (4 << 8);  ///< RX_NULLPKT_EP
        constexpr uint32_t INT_TOGGLE = (1U << 15);  ///< INT_TOGGLE
    }

    /// BRQ Register bits
    namespace brq_bits {
        constexpr uint32_t RECIPIENT = (5 << 0);  ///< RECIPIENT
        constexpr uint32_t REQ_TYPE = (2 << 5);  ///< REQ_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t REQUESET = (8 << 8);  ///< REQUESET
    }

    /// WVL Register bits
    namespace wvl_bits {
        constexpr uint32_t VALUE = (16 << 0);  ///< VALUE
    }

    /// WIDX Register bits
    namespace widx_bits {
        constexpr uint32_t INDEX = (16 << 0);  ///< INDEX
    }

    /// WLGTH Register bits
    namespace wlgth_bits {
        constexpr uint32_t LENGTH = (16 << 0);  ///< LENGTH
    }

    /// INT Register bits
    namespace int_bits {
        constexpr uint32_t I_SETUP = (1U << 0);  ///< I_SETUP
        constexpr uint32_t I_STATUS_NAK = (1U << 1);  ///< I_STATUS_NAK
        constexpr uint32_t I_STATUS = (1U << 2);  ///< I_STATUS
        constexpr uint32_t I_RX_DATA0 = (1U << 3);  ///< I_RX_DATA0
        constexpr uint32_t I_SOF = (1U << 4);  ///< I_SOF
        constexpr uint32_t I_EP0 = (1U << 5);  ///< I_EP0
        constexpr uint32_t I_EP = (1U << 6);  ///< I_EP
        constexpr uint32_t I_NAK = (1U << 7);  ///< I_NAK
        constexpr uint32_t M_SETUP = (1U << 8);  ///< M_SETUP
        constexpr uint32_t M_STATUS_NAK = (1U << 9);  ///< M_STATUS_NAK
        constexpr uint32_t M_STATUS = (1U << 10);  ///< M_STATUS
        constexpr uint32_t M_RX_DATA0 = (1U << 11);  ///< M_RX_DATA0
        constexpr uint32_t M_SOF = (1U << 12);  ///< M_SOF
        constexpr uint32_t M_EP0 = (1U << 13);  ///< M_EP0
        constexpr uint32_t M_EP = (1U << 14);  ///< M_EP
        constexpr uint32_t M_NAK = (1U << 15);  ///< M_NAK
    }

    /// INTEP Register bits
    namespace intep_bits {
        constexpr uint32_t I_EP1 = (1U << 1);  ///< I_EP1
        constexpr uint32_t I_EP2 = (1U << 2);  ///< I_EP2
        constexpr uint32_t I_EP3 = (1U << 3);  ///< I_EP3
        constexpr uint32_t I_EP4 = (1U << 4);  ///< I_EP4
        constexpr uint32_t I_EP5 = (1U << 5);  ///< I_EP5
        constexpr uint32_t I_EP6 = (1U << 6);  ///< I_EP6
        constexpr uint32_t I_EP7 = (1U << 7);  ///< I_EP7
    }

    /// INTEPMSK Register bits
    namespace intepmsk_bits {
        constexpr uint32_t M_EP = (8 << 0);  ///< M_EP
    }

    /// INTRX0 Register bits
    namespace intrx0_bits {
        constexpr uint32_t RX_D0_EP = (8 << 0);  ///< RX_D0_EP
    }

    /// EP0MSZ Register bits
    namespace ep0msz_bits {
        constexpr uint32_t MAX_PKT = (7 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX_0DATA = (1U << 15);  ///< TX_0DATA
    }

    /// EP0STS Register bits
    namespace ep0sts_bits {
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t EP0_MASK = (1U << 15);  ///< EP0_MASK
    }

    /// EP0DSZ Register bits
    namespace ep0dsz_bits {
        constexpr uint32_t SIZE = (7 << 0);  ///< SIZE
    }

    /// EP0FIFO Register bits
    namespace ep0fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP1MSZ Register bits
    namespace ep1msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX_0DATA = (1U << 15);  ///< TX_0DATA
    }

    /// EP1STS Register bits
    namespace ep1sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP1DSZ Register bits
    namespace ep1dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP1FIFO Register bits
    namespace ep1fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP2MSZ Register bits
    namespace ep2msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX_0DATA = (1U << 15);  ///< TX_0DATA
    }

    /// EP2STS Register bits
    namespace ep2sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP2DSZ Register bits
    namespace ep2dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP2FIFO Register bits
    namespace ep2fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP3MSZ Register bits
    namespace ep3msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX_0DATA = (1U << 15);  ///< TX_0DATA
    }

    /// EP3STS Register bits
    namespace ep3sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP3DSZ Register bits
    namespace ep3dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP3FIFO Register bits
    namespace ep3fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP4MSZ Register bits
    namespace ep4msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX_0DATA = (1U << 15);  ///< TX_0DATA
    }

    /// EP4STS Register bits
    namespace ep4sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP4DSZ Register bits
    namespace ep4dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP4FIFO Register bits
    namespace ep4fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP5MSZ Register bits
    namespace ep5msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX_0DATA = (1U << 15);  ///< TX_0DATA
    }

    /// EP5STS Register bits
    namespace ep5sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP5DSZ Register bits
    namespace ep5dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP5FIFO Register bits
    namespace ep5fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP6MSZ Register bits
    namespace ep6msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX_0DATA = (1U << 15);  ///< TX_0DATA
    }

    /// EP6STS Register bits
    namespace ep6sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP6DSZ Register bits
    namespace ep6dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP6FIFO Register bits
    namespace ep6fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// EP7MSZ Register bits
    namespace ep7msz_bits {
        constexpr uint32_t MAX_PKT = (11 << 0);  ///< MAX_PKT
        constexpr uint32_t DSET = (1U << 12);  ///< DSET
        constexpr uint32_t TX_0DATA = (1U << 15);  ///< TX_0DATA
    }

    /// EP7STS Register bits
    namespace ep7sts_bits {
        constexpr uint32_t NUM_MF = (2 << 0);  ///< NUM_MF
        constexpr uint32_t T_TYPE = (2 << 2);  ///< T_TYPE
        constexpr uint32_t DIR = (1U << 7);  ///< DIR
        constexpr uint32_t DISABLE = (1U << 8);  ///< DISABLE
        constexpr uint32_t STATUS = (3 << 9);  ///< STATUS
        constexpr uint32_t TOGGLE = (2 << 12);  ///< TOGGLE
        constexpr uint32_t BUS_SEL = (1U << 14);  ///< BUS_SEL
        constexpr uint32_t PKT_MODE = (1U << 15);  ///< PKT_MODE
    }

    /// EP7DSZ Register bits
    namespace ep7dsz_bits {
        constexpr uint32_t SIZE = (11 << 0);  ///< SIZE
    }

    /// EP7FIFO Register bits
    namespace ep7fifo_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// INTNAK Register bits
    namespace intnak_bits {
        constexpr uint32_t I_EP1 = (1U << 1);  ///< I_EP1
        constexpr uint32_t I_EP2 = (1U << 2);  ///< I_EP2
        constexpr uint32_t I_EP3 = (1U << 3);  ///< I_EP3
        constexpr uint32_t I_EP4 = (1U << 4);  ///< I_EP4
        constexpr uint32_t I_EP5 = (1U << 5);  ///< I_EP5
        constexpr uint32_t I_EP6 = (1U << 6);  ///< I_EP6
        constexpr uint32_t I_EP7 = (1U << 7);  ///< I_EP7
    }

    /// INTNAKMSK Register bits
    namespace intnakmsk_bits {
        constexpr uint32_t M_EP1 = (1U << 1);  ///< M_EP1
        constexpr uint32_t M_EP2 = (1U << 2);  ///< M_EP2
        constexpr uint32_t M_EP3 = (1U << 3);  ///< M_EP3
        constexpr uint32_t M_EP4 = (1U << 4);  ///< M_EP4
        constexpr uint32_t M_EP5 = (1U << 5);  ///< M_EP5
        constexpr uint32_t M_EP6 = (1U << 6);  ///< M_EP6
        constexpr uint32_t M_EP7 = (1U << 7);  ///< M_EP7
    }

}

// ============================================================================
// SSP0 Peripheral
// ============================================================================

namespace ssp0 {
    /// Base addresses
    constexpr uint32_t SSP0_BASE = 0x40040000;

    /// SSP0 Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - SSP Control Register 0
        volatile uint32_t CR1;  ///< Offset: 0x04 - SSP Control Register 1
        volatile uint32_t DR;  ///< Offset: 0x08 - SSP Data Register
        volatile uint32_t SR;  ///< Offset: 0x0C - SSP Status Register
        volatile uint32_t CPSR;  ///< Offset: 0x10 - SSP Clock Prescaler Register
        volatile uint32_t IMSC;  ///< Offset: 0x14 - SSP Interrupt Mask Set and Clear Register
        volatile uint32_t RIS;  ///< Offset: 0x18 - SSP Raw Interrupt Status Register
        volatile uint32_t MIS;  ///< Offset: 0x1C - SSP Masked Interrupt Status Register
        volatile uint32_t ICR;  ///< Offset: 0x20 - SSP Interrupt Clear Register
        volatile uint32_t DMACR;  ///< Offset: 0x24 - SSP DMA Control Register
    };

    /// Peripheral instances
    inline Registers* SSP0 = reinterpret_cast<Registers*>(SSP0_BASE);

    // Bit definitions
    /// CR0 Register bits
    namespace cr0_bits {
        constexpr uint32_t DSS = (4 << 0);  ///< DSS
        constexpr uint32_t FRF = (2 << 4);  ///< FRF
        constexpr uint32_t SPO = (1U << 6);  ///< SPO
        constexpr uint32_t SPH = (1U << 7);  ///< SPH
        constexpr uint32_t SCR = (8 << 8);  ///< SCR
    }

    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t LBM = (1U << 0);  ///< LBM
        constexpr uint32_t SSE = (1U << 1);  ///< SSE
        constexpr uint32_t MS = (1U << 2);  ///< MS
        constexpr uint32_t SOD = (1U << 3);  ///< SOD
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< DATA
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TFE = (1U << 0);  ///< TFE
        constexpr uint32_t TNF = (1U << 1);  ///< TNF
        constexpr uint32_t RNE = (1U << 2);  ///< RNE
        constexpr uint32_t RFF = (1U << 3);  ///< RFF
        constexpr uint32_t BSY = (1U << 4);  ///< BSY
    }

    /// CPSR Register bits
    namespace cpsr_bits {
        constexpr uint32_t CPSDVSR = (8 << 0);  ///< CPSDVSR
    }

    /// IMSC Register bits
    namespace imsc_bits {
        constexpr uint32_t RORIM = (1U << 0);  ///< RORIM
        constexpr uint32_t RTIM = (1U << 1);  ///< RTIM
        constexpr uint32_t RXIM = (1U << 2);  ///< RXIM
        constexpr uint32_t TXIM = (1U << 3);  ///< TXIM
    }

    /// RIS Register bits
    namespace ris_bits {
        constexpr uint32_t RORRIS = (1U << 0);  ///< RORRIS
        constexpr uint32_t RTRIS = (1U << 1);  ///< RTRIS
        constexpr uint32_t RXRIS = (1U << 2);  ///< RXRIS
        constexpr uint32_t TXRIS = (1U << 3);  ///< TXRIS
    }

    /// MIS Register bits
    namespace mis_bits {
        constexpr uint32_t RORMIS = (1U << 0);  ///< RORMIS
        constexpr uint32_t RTMIS = (1U << 1);  ///< RTMIS
        constexpr uint32_t RXMIS = (1U << 2);  ///< RXMIS
        constexpr uint32_t TXMIS = (1U << 3);  ///< TXMIS
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t RORIC = (1U << 0);  ///< RORIC
        constexpr uint32_t RTIC = (1U << 1);  ///< RTIC
    }

    /// DMACR Register bits
    namespace dmacr_bits {
        constexpr uint32_t RXDMAE = (1U << 0);  ///< RXDMAE
        constexpr uint32_t TXDMAE = (1U << 1);  ///< TXDMAE
    }

}

// ============================================================================
// SSP1 Peripheral
// ============================================================================

namespace ssp1 {
    /// Base addresses
    constexpr uint32_t SSP1_BASE = 0x40041000;

    /// SSP1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SSP1 = reinterpret_cast<Registers*>(SSP1_BASE);

}

// ============================================================================
// SSP2 Peripheral
// ============================================================================

namespace ssp2 {
    /// Base addresses
    constexpr uint32_t SSP2_BASE = 0x40042000;

    /// SSP2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SSP2 = reinterpret_cast<Registers*>(SSP2_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART4_BASE = 0x40048000;
    constexpr uint32_t UART5_BASE = 0x40049000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t DR;  ///< Offset: 0x00 - Data Register
        volatile uint32_t RSR;  ///< Offset: 0x04 - Receive Status Register
        volatile uint32_t ECR;  ///< Offset: 0x04 - Error Clear Register
        volatile uint32_t FR;  ///< Offset: 0x18 - Flag Register
        volatile uint32_t ILPR;  ///< Offset: 0x20 - IrDA Low-power Counter register
        volatile uint32_t IBDR;  ///< Offset: 0x24 - Integer Baud Rate Register
        volatile uint32_t FBDR;  ///< Offset: 0x28 - Fractional Baud Rate Register
        volatile uint32_t LCR_H;  ///< Offset: 0x2C - Line Control Register
        volatile uint32_t CR;  ///< Offset: 0x30 - Cntrol Register
        volatile uint32_t IFLS;  ///< Offset: 0x34 - Interrupt FIFO Level Select Register
        volatile uint32_t IMSC;  ///< Offset: 0x38 - Interrupt Mask set_Clear Register
        volatile uint32_t RIS;  ///< Offset: 0x3C - Raw Interrupt Status Register
        volatile uint32_t MIS;  ///< Offset: 0x40 - Masked Interrupt Status Register
        volatile uint32_t ICR;  ///< Offset: 0x44 - Interrupt Clear Register
        volatile uint32_t DMACR;  ///< Offset: 0x48 - DMA Control Register
    };

    /// Peripheral instances
    inline Registers* UART4 = reinterpret_cast<Registers*>(UART4_BASE);
    inline Registers* UART5 = reinterpret_cast<Registers*>(UART5_BASE);

    // Bit definitions
    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DATA = (8 << 0);  ///< DATA
        constexpr uint32_t FE = (1U << 8);  ///< FE
        constexpr uint32_t PE = (1U << 9);  ///< PE
        constexpr uint32_t BE = (1U << 10);  ///< BE
        constexpr uint32_t OE = (1U << 11);  ///< OE
    }

    /// RSR Register bits
    namespace rsr_bits {
        constexpr uint32_t FE = (1U << 0);  ///< FE
        constexpr uint32_t PE = (1U << 1);  ///< PE
        constexpr uint32_t BE = (1U << 2);  ///< BE
        constexpr uint32_t OE = (1U << 3);  ///< OE
    }

    /// ECR Register bits
    namespace ecr_bits {
        constexpr uint32_t FE = (1U << 0);  ///< FE
        constexpr uint32_t PE = (1U << 1);  ///< PE
        constexpr uint32_t BE = (1U << 2);  ///< BE
        constexpr uint32_t OE = (1U << 3);  ///< OE
    }

    /// FR Register bits
    namespace fr_bits {
        constexpr uint32_t CTS = (1U << 0);  ///< CTS
        constexpr uint32_t DSR = (1U << 1);  ///< DSR
        constexpr uint32_t DCD = (1U << 2);  ///< DCD
        constexpr uint32_t BUSY = (1U << 3);  ///< BUSY
        constexpr uint32_t RXFE = (1U << 4);  ///< RXFE
        constexpr uint32_t TXFF = (1U << 5);  ///< TXFF
        constexpr uint32_t RXFF = (1U << 6);  ///< RXFF
        constexpr uint32_t TXFE = (1U << 7);  ///< TXFE
        constexpr uint32_t RI = (1U << 8);  ///< RI
    }

    /// ILPR Register bits
    namespace ilpr_bits {
        constexpr uint32_t ILPDVSR = (8 << 0);  ///< ILPDVSR
    }

    /// IBDR Register bits
    namespace ibdr_bits {
        constexpr uint32_t BAUDDIVINT = (16 << 0);  ///< BAUDDIVINT
    }

    /// FBDR Register bits
    namespace fbdr_bits {
        constexpr uint32_t BAUDDIVFRAC = (6 << 0);  ///< BAUDDIVFRAC
    }

    /// LCR_H Register bits
    namespace lcr_h_bits {
        constexpr uint32_t BRK = (1U << 0);  ///< BRK
        constexpr uint32_t PEN = (1U << 1);  ///< PEN
        constexpr uint32_t EPS = (1U << 2);  ///< EPS
        constexpr uint32_t STP2 = (1U << 3);  ///< STP2
        constexpr uint32_t FEN = (1U << 4);  ///< FEN
        constexpr uint32_t WLEN = (2 << 5);  ///< WLEN
        constexpr uint32_t SPS = (1U << 7);  ///< SPS
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t UARTEN = (1U << 0);  ///< UARTEN
        constexpr uint32_t SIREN = (1U << 1);  ///< SIREN
        constexpr uint32_t SIRLP = (1U << 2);  ///< SIRLP
        constexpr uint32_t TXE = (1U << 8);  ///< TXE
        constexpr uint32_t RXE = (1U << 9);  ///< RXE
        constexpr uint32_t DTR = (1U << 10);  ///< DTR
        constexpr uint32_t RTS = (1U << 11);  ///< RTS
        constexpr uint32_t RTSEN = (1U << 14);  ///< RTSEN
        constexpr uint32_t CTSEN = (1U << 15);  ///< CTSEN
    }

    /// IFLS Register bits
    namespace ifls_bits {
        constexpr uint32_t TXIFLSEL = (3 << 0);  ///< TXIFLSEL
        constexpr uint32_t RXIFLSEL = (3 << 3);  ///< RXIFLSEL
    }

    /// IMSC Register bits
    namespace imsc_bits {
        constexpr uint32_t RIMIM = (1U << 0);  ///< RIMIM
        constexpr uint32_t CTSMIM = (1U << 1);  ///< CTSMIM
        constexpr uint32_t DCDMIM = (1U << 2);  ///< DCDMIM
        constexpr uint32_t DSRMIM = (1U << 3);  ///< DSRMIM
        constexpr uint32_t RXIM = (1U << 4);  ///< RXIM
        constexpr uint32_t TXIM = (1U << 5);  ///< TXIM
        constexpr uint32_t RTIM = (1U << 6);  ///< RTIM
        constexpr uint32_t FEIM = (1U << 7);  ///< FEIM
        constexpr uint32_t PEIM = (1U << 8);  ///< PEIM
        constexpr uint32_t BEIM = (1U << 9);  ///< BEIM
        constexpr uint32_t OEIM = (1U << 10);  ///< OEIM
    }

    /// RIS Register bits
    namespace ris_bits {
        constexpr uint32_t RIRMIS = (1U << 0);  ///< RIRMIS
        constexpr uint32_t CTSRMIS = (1U << 1);  ///< CTSRMIS
        constexpr uint32_t DCDRMIS = (1U << 2);  ///< DCDRMIS
        constexpr uint32_t DSRRMIS = (1U << 3);  ///< DSRRMIS
        constexpr uint32_t RXRIS = (1U << 4);  ///< RXRIS
        constexpr uint32_t TXRIS = (1U << 5);  ///< TXRIS
        constexpr uint32_t RTRIS = (1U << 6);  ///< RTRIS
        constexpr uint32_t FERIS = (1U << 7);  ///< FERIS
        constexpr uint32_t PERIS = (1U << 8);  ///< PERIS
        constexpr uint32_t BERIS = (1U << 9);  ///< BERIS
        constexpr uint32_t OERIS = (1U << 10);  ///< OERIS
    }

    /// MIS Register bits
    namespace mis_bits {
        constexpr uint32_t RIMMIS = (1U << 0);  ///< RIMMIS
        constexpr uint32_t CTSMMIS = (1U << 1);  ///< CTSMMIS
        constexpr uint32_t DCDMMIS = (1U << 2);  ///< DCDMMIS
        constexpr uint32_t DSRMMIS = (1U << 3);  ///< DSRMMIS
        constexpr uint32_t RXMIS = (1U << 4);  ///< RXMIS
        constexpr uint32_t TXMIS = (1U << 5);  ///< TXMIS
        constexpr uint32_t RTMIS = (1U << 6);  ///< RTMIS
        constexpr uint32_t FEMIS = (1U << 7);  ///< FEMIS
        constexpr uint32_t PEMIS = (1U << 8);  ///< PEMIS
        constexpr uint32_t BEMIS = (1U << 9);  ///< BEMIS
        constexpr uint32_t OEMIS = (1U << 10);  ///< OEMIS
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t RIMIC = (1U << 0);  ///< RIMIC
        constexpr uint32_t CTSMIC = (1U << 1);  ///< CTSMIC
        constexpr uint32_t DCDMIC = (1U << 2);  ///< DCDMIC
        constexpr uint32_t DSRMIC = (1U << 3);  ///< DSRMIC
        constexpr uint32_t RXIC = (1U << 4);  ///< RXIC
        constexpr uint32_t TXIC = (1U << 5);  ///< TXIC
        constexpr uint32_t RTIC = (1U << 6);  ///< RTIC
        constexpr uint32_t FEIC = (1U << 7);  ///< FEIC
        constexpr uint32_t PEIC = (1U << 8);  ///< PEIC
        constexpr uint32_t BEIC = (1U << 9);  ///< BEIC
        constexpr uint32_t OEIC = (1U << 10);  ///< OEIC
    }

    /// DMACR Register bits
    namespace dmacr_bits {
        constexpr uint32_t RXDMAE = (1U << 0);  ///< RXDMAE
        constexpr uint32_t TXDMAE = (1U << 1);  ///< TXDMAE
        constexpr uint32_t DMAONERR = (1U << 2);  ///< DMAONERR
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAA_BASE = 0x4004C000;
    constexpr uint32_t DMAB_BASE = 0x4004D000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t STATUS;  ///< Offset: 0x00 - DMA Status Register
        volatile uint32_t CFG;  ///< Offset: 0x04 - DMA Configuration Register
        volatile uint32_t CTRLBASEPTR;  ///< Offset: 0x08 - DMA Control Data Base Pointer Register
        volatile uint32_t ALTCTRLBASEPTR;  ///< Offset: 0x0C - DMA Channel Alternate Control Data Base Pointer Register
        volatile uint32_t CHNLSWREQUEST;  ///< Offset: 0x14 - DMA Channel Software Request Register
        volatile uint32_t CHNLUSEBURSTSET;  ///< Offset: 0x18 - DMA Channel Useburst Set Register
        volatile uint32_t CHNLUSEBURSTCLR;  ///< Offset: 0x1C - DMA Channel Useburst Clear Register
        volatile uint32_t CHNLREQMASKSET;  ///< Offset: 0x20 - DMA Channel Request Mask Set Register
        volatile uint32_t CHNLREQMASKCLR;  ///< Offset: 0x24 - DMA Channel Request Mask Clear Register
        volatile uint32_t CHNLENABLESET;  ///< Offset: 0x28 - DMA Channel Enable Set Register
        volatile uint32_t CHNLENABLECLR;  ///< Offset: 0x2C - DMA Channel Enable Clear Register
        volatile uint32_t CHNLPRIALTSET;  ///< Offset: 0x30 - DMA Channel Primary-Alternate Set Register
        volatile uint32_t CHNLPRIALTCLR;  ///< Offset: 0x34 - DMA Channel Primary-Alternate Clear Register
        volatile uint32_t CHNLPRIORITYSET;  ///< Offset: 0x38 - DMA Channel Priority Set Register
        volatile uint32_t CHNLPRIORITYCLR;  ///< Offset: 0x3C - DMA Channel Priority Clear Register
        volatile uint32_t ERRCLR;  ///< Offset: 0x4C - DMA Bus Error Clear Register
    };

    /// Peripheral instances
    inline Registers* DMAA = reinterpret_cast<Registers*>(DMAA_BASE);
    inline Registers* DMAB = reinterpret_cast<Registers*>(DMAB_BASE);

    // Bit definitions
    /// STATUS Register bits
    namespace status_bits {
        constexpr uint32_t MASTER_ENABLE = (1U << 0);  ///< MASTER_ENABLE
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t MASTER_ENABLE = (1U << 0);  ///< MASTER_ENABLE
    }

    /// CTRLBASEPTR Register bits
    namespace ctrlbaseptr_bits {
        constexpr uint32_t CTRL_BASE_PTR = (22 << 10);  ///< CTRL_BASE_PTR
    }

    /// ALTCTRLBASEPTR Register bits
    namespace altctrlbaseptr_bits {
        constexpr uint32_t ALT_CTRL_BASE_PTR = (32 << 0);  ///< ALT_CTRL_BASE_PTR
    }

    /// CHNLSWREQUEST Register bits
    namespace chnlswrequest_bits {
        constexpr uint32_t CHNL_SW_REQUEST = (32 << 0);  ///< CHNL_SW_REQUEST
    }

    /// CHNLUSEBURSTSET Register bits
    namespace chnluseburstset_bits {
        constexpr uint32_t CHNL_USEBURST_SET = (32 << 0);  ///< CHNL_USEBURST_SET
    }

    /// CHNLUSEBURSTCLR Register bits
    namespace chnluseburstclr_bits {
        constexpr uint32_t CHNL_USEBURST_CLR = (32 << 0);  ///< CHNL_USEBURST_CLR
    }

    /// CHNLREQMASKSET Register bits
    namespace chnlreqmaskset_bits {
        constexpr uint32_t CHNL_REQ_MASK_SET = (32 << 0);  ///< CHNL_REQ_MASK_SET
    }

    /// CHNLREQMASKCLR Register bits
    namespace chnlreqmaskclr_bits {
        constexpr uint32_t CHNL_REQ_MASK_CLR = (32 << 0);  ///< CHNL_REQ_MASK_CLR
    }

    /// CHNLENABLESET Register bits
    namespace chnlenableset_bits {
        constexpr uint32_t CHNL_ENABLE_SET = (32 << 0);  ///< CHNL_ENABLE_SET
    }

    /// CHNLENABLECLR Register bits
    namespace chnlenableclr_bits {
        constexpr uint32_t CHNL_ENABLE_CLR = (32 << 0);  ///< CHNL_ENABLE_CLR
    }

    /// CHNLPRIALTSET Register bits
    namespace chnlprialtset_bits {
        constexpr uint32_t CHNL_PRI_ALT_SET = (32 << 0);  ///< CHNL_PRI_ALT_SET
    }

    /// CHNLPRIALTCLR Register bits
    namespace chnlprialtclr_bits {
        constexpr uint32_t CHNL_PRI_ALT_CLR = (32 << 0);  ///< CHNL_PRI_ALT_CLR
    }

    /// CHNLPRIORITYSET Register bits
    namespace chnlpriorityset_bits {
        constexpr uint32_t CHNL_PRIORITY_SET = (32 << 0);  ///< CHNL_PRIORITY_SET
    }

    /// CHNLPRIORITYCLR Register bits
    namespace chnlpriorityclr_bits {
        constexpr uint32_t CHNL_PRIORITY_CLR = (32 << 0);  ///< CHNL_PRIORITY_CLR
    }

    /// ERRCLR Register bits
    namespace errclr_bits {
        constexpr uint32_t ERR_CLR = (1U << 0);  ///< ERR_CLR
    }

}

// ============================================================================
// ADA Peripheral
// ============================================================================

namespace ada {
    /// Base addresses
    constexpr uint32_t ADA_BASE = 0x40050000;

    /// ADA Register structure
    struct Registers {
        volatile uint32_t CLK;  ///< Offset: 0x00 - AD Conversion Clock Setting Register
        volatile uint32_t MOD0;  ///< Offset: 0x04 - AD Mode Control Register 0
        volatile uint32_t MOD1;  ///< Offset: 0x08 - AD Mode Control Register 1
        volatile uint32_t MOD2;  ///< Offset: 0x0C - AD Mode Control Register 2
        volatile uint32_t MOD3;  ///< Offset: 0x10 - AD Mode Control Register 3
        volatile uint32_t MOD4;  ///< Offset: 0x14 - AD Mode Control Register 4
        volatile uint32_t MOD5;  ///< Offset: 0x18 - AD Mode Control Register 5
        volatile uint32_t MOD6;  ///< Offset: 0x1C - AD Mode Control Register 6
        volatile uint32_t CMPCR0;  ///< Offset: 0x24 - AD Monitoring Setting Register 0
        volatile uint32_t CMPCR1;  ///< Offset: 0x28 - AD Monitoring Setting Register 1
        volatile uint32_t CMP0;  ///< Offset: 0x2C - AD Conversion Result Comparison Register 0
        volatile uint32_t CMP1;  ///< Offset: 0x30 - AD Conversion Result Comparison Register 1
        volatile uint32_t REG00;  ///< Offset: 0x34 - AD Conversion Result Register 00
        volatile uint32_t REG01;  ///< Offset: 0x38 - AD Conversion Result Register 01
        volatile uint32_t REG02;  ///< Offset: 0x3C - AD Conversion Result Register 02
        volatile uint32_t REG03;  ///< Offset: 0x40 - AD Conversion Result Register 03
        volatile uint32_t REG04;  ///< Offset: 0x44 - AD Conversion Result Register 04
        volatile uint32_t REG05;  ///< Offset: 0x48 - AD Conversion Result Register 05
        volatile uint32_t REG06;  ///< Offset: 0x4C - AD Conversion Result Register 06
        volatile uint32_t REG07;  ///< Offset: 0x50 - AD Conversion Result Register 07
        volatile uint32_t REGSP;  ///< Offset: 0x74 - AD Conversion Result Register SP
    };

    /// Peripheral instances
    inline Registers* ADA = reinterpret_cast<Registers*>(ADA_BASE);

    // Bit definitions
    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t ADCLK = (3 << 0);  ///< ADCLK
        constexpr uint32_t ADSH = (4 << 4);  ///< ADSH
    }

    /// MOD0 Register bits
    namespace mod0_bits {
        constexpr uint32_t ADS = (1U << 0);  ///< ADS
        constexpr uint32_t HPADS = (1U << 1);  ///< HPADS
    }

    /// MOD1 Register bits
    namespace mod1_bits {
        constexpr uint32_t ADHWE = (1U << 0);  ///< ADHWE
        constexpr uint32_t ADHWS = (1U << 1);  ///< ADHWS
        constexpr uint32_t HPADHWE = (1U << 2);  ///< HPADHWE
        constexpr uint32_t HPADHWS = (1U << 3);  ///< HPADHWS
        constexpr uint32_t RCUT = (1U << 5);  ///< RCUT
        constexpr uint32_t I2AD = (1U << 6);  ///< I2AD
        constexpr uint32_t DACON = (1U << 7);  ///< DACON
    }

    /// MOD2 Register bits
    namespace mod2_bits {
        constexpr uint32_t ADCH = (4 << 0);  ///< ADCH
        constexpr uint32_t HPADCH = (4 << 4);  ///< HPADCH
    }

    /// MOD3 Register bits
    namespace mod3_bits {
        constexpr uint32_t SCAN = (1U << 0);  ///< SCAN
        constexpr uint32_t REPEAT = (1U << 1);  ///< REPEAT
        constexpr uint32_t ITM = (3 << 4);  ///< ITM
    }

    /// MOD4 Register bits
    namespace mod4_bits {
        constexpr uint32_t SCANSTA = (4 << 0);  ///< SCANSTA
        constexpr uint32_t SCANAREA = (4 << 4);  ///< SCANAREA
    }

    /// MOD5 Register bits
    namespace mod5_bits {
        constexpr uint32_t ADBF = (1U << 0);  ///< ADBF
        constexpr uint32_t EOCF = (1U << 1);  ///< EOCF
        constexpr uint32_t HPADBF = (1U << 2);  ///< HPADBF
        constexpr uint32_t HPEOCF = (1U << 3);  ///< HPEOCF
    }

    /// MOD6 Register bits
    namespace mod6_bits {
        constexpr uint32_t ADRST = (2 << 0);  ///< ADRST
    }

    /// CMPCR0 Register bits
    namespace cmpcr0_bits {
        constexpr uint32_t AINS0 = (4 << 0);  ///< AINS0
        constexpr uint32_t ADBIG0 = (1U << 4);  ///< ADBIG0
        constexpr uint32_t CMPCOND0 = (1U << 5);  ///< CMPCOND0
        constexpr uint32_t CMP0EN = (1U << 7);  ///< CMP0EN
        constexpr uint32_t CMPCMT0 = (4 << 8);  ///< CMPCMT0
    }

    /// CMPCR1 Register bits
    namespace cmpcr1_bits {
        constexpr uint32_t AINS1 = (4 << 0);  ///< AINS1
        constexpr uint32_t ADBIG1 = (1U << 4);  ///< ADBIG1
        constexpr uint32_t CMPCOND1 = (1U << 5);  ///< CMPCOND1
        constexpr uint32_t CMP1EN = (1U << 7);  ///< CMP1EN
        constexpr uint32_t CMPCMT1 = (4 << 8);  ///< CMPCMT1
    }

    /// CMP0 Register bits
    namespace cmp0_bits {
        constexpr uint32_t AD0CMP = (12 << 0);  ///< AD0CMP
    }

    /// CMP1 Register bits
    namespace cmp1_bits {
        constexpr uint32_t AD1CMP = (12 << 0);  ///< AD1CMP
    }

    /// REG00 Register bits
    namespace reg00_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG01 Register bits
    namespace reg01_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG02 Register bits
    namespace reg02_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG03 Register bits
    namespace reg03_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG04 Register bits
    namespace reg04_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG05 Register bits
    namespace reg05_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG06 Register bits
    namespace reg06_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG07 Register bits
    namespace reg07_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REGSP Register bits
    namespace regsp_bits {
        constexpr uint32_t ADSPR = (12 << 0);  ///< ADSPR
        constexpr uint32_t ADSPRF = (1U << 12);  ///< ADSPRF
        constexpr uint32_t ADOVRSPF = (1U << 13);  ///< ADOVRSPF
        constexpr uint32_t _ADSPRF = (1U << 16);  ///< _ADSPRF
        constexpr uint32_t _ADOVRSPF = (1U << 17);  ///< _ADOVRSPF
        constexpr uint32_t _ADSPR = (12 << 20);  ///< _ADSPR
    }

}

// ============================================================================
// ADB Peripheral
// ============================================================================

namespace adb {
    /// Base addresses
    constexpr uint32_t ADB_BASE = 0x40051000;

    /// ADB Register structure
    struct Registers {
        volatile uint32_t CLK;  ///< Offset: 0x00 - AD Conversion Clock Setting Register
        volatile uint32_t MOD0;  ///< Offset: 0x04 - AD Mode Control Register 0
        volatile uint32_t MOD1;  ///< Offset: 0x08 - AD Mode Control Register 1
        volatile uint32_t MOD2;  ///< Offset: 0x0C - AD Mode Control Register 2
        volatile uint32_t MOD3;  ///< Offset: 0x10 - AD Mode Control Register 3
        volatile uint32_t MOD4;  ///< Offset: 0x14 - AD Mode Control Register 4
        volatile uint32_t MOD5;  ///< Offset: 0x18 - AD Mode Control Register 5
        volatile uint32_t MOD6;  ///< Offset: 0x1C - AD Mode Control Register 6
        volatile uint32_t CMPCR0;  ///< Offset: 0x24 - AD Monitoring Setting Register 0
        volatile uint32_t CMPCR1;  ///< Offset: 0x28 - AD Monitoring Setting Register 1
        volatile uint32_t CMP0;  ///< Offset: 0x2C - AD Conversion Result Comparison Register 0
        volatile uint32_t CMP1;  ///< Offset: 0x30 - AD Conversion Result Comparison Register 1
        volatile uint32_t REG00;  ///< Offset: 0x34 - AD Conversion Result Register 00
        volatile uint32_t REG01;  ///< Offset: 0x38 - AD Conversion Result Register 01
        volatile uint32_t REG02;  ///< Offset: 0x3C - AD Conversion Result Register 02
        volatile uint32_t REG03;  ///< Offset: 0x40 - AD Conversion Result Register 03
        volatile uint32_t REG04;  ///< Offset: 0x44 - AD Conversion Result Register 04
        volatile uint32_t REG05;  ///< Offset: 0x48 - AD Conversion Result Register 05
        volatile uint32_t REG06;  ///< Offset: 0x4C - AD Conversion Result Register 06
        volatile uint32_t REG07;  ///< Offset: 0x50 - AD Conversion Result Register 07
        volatile uint32_t REGSP;  ///< Offset: 0x74 - AD Conversion Result Register SP
    };

    /// Peripheral instances
    inline Registers* ADB = reinterpret_cast<Registers*>(ADB_BASE);

    // Bit definitions
    /// CLK Register bits
    namespace clk_bits {
        constexpr uint32_t ADCLK = (3 << 0);  ///< ADCLK
        constexpr uint32_t ADSH = (4 << 4);  ///< ADSH
    }

    /// MOD0 Register bits
    namespace mod0_bits {
        constexpr uint32_t ADS = (1U << 0);  ///< ADS
        constexpr uint32_t HPADS = (1U << 1);  ///< HPADS
    }

    /// MOD1 Register bits
    namespace mod1_bits {
        constexpr uint32_t ADHWE = (1U << 0);  ///< ADHWE
        constexpr uint32_t ADHWS = (1U << 1);  ///< ADHWS
        constexpr uint32_t HPADHWE = (1U << 2);  ///< HPADHWE
        constexpr uint32_t HPADHWS = (1U << 3);  ///< HPADHWS
        constexpr uint32_t RCUT = (1U << 5);  ///< RCUT
        constexpr uint32_t I2AD = (1U << 6);  ///< I2AD
        constexpr uint32_t DACON = (1U << 7);  ///< DACON
    }

    /// MOD2 Register bits
    namespace mod2_bits {
        constexpr uint32_t ADCH = (4 << 0);  ///< ADCH
        constexpr uint32_t HPADCH = (4 << 4);  ///< HPADCH
    }

    /// MOD3 Register bits
    namespace mod3_bits {
        constexpr uint32_t SCAN = (1U << 0);  ///< SCAN
        constexpr uint32_t REPEAT = (1U << 1);  ///< REPEAT
        constexpr uint32_t ITM = (3 << 4);  ///< ITM
    }

    /// MOD4 Register bits
    namespace mod4_bits {
        constexpr uint32_t SCANSTA = (4 << 0);  ///< SCANSTA
        constexpr uint32_t SCANAREA = (4 << 4);  ///< SCANAREA
    }

    /// MOD5 Register bits
    namespace mod5_bits {
        constexpr uint32_t ADBF = (1U << 0);  ///< ADBF
        constexpr uint32_t EOCF = (1U << 1);  ///< EOCF
        constexpr uint32_t HPADBF = (1U << 2);  ///< HPADBF
        constexpr uint32_t HPEOCF = (1U << 3);  ///< HPEOCF
    }

    /// MOD6 Register bits
    namespace mod6_bits {
        constexpr uint32_t ADRST = (2 << 0);  ///< ADRST
    }

    /// CMPCR0 Register bits
    namespace cmpcr0_bits {
        constexpr uint32_t AINS0 = (4 << 0);  ///< AINS0
        constexpr uint32_t ADBIG0 = (1U << 4);  ///< ADBIG0
        constexpr uint32_t CMPCOND0 = (1U << 5);  ///< CMPCOND0
        constexpr uint32_t CMP0EN = (1U << 7);  ///< CMP0EN
        constexpr uint32_t CMPCMT0 = (4 << 8);  ///< CMPCMT0
    }

    /// CMPCR1 Register bits
    namespace cmpcr1_bits {
        constexpr uint32_t AINS1 = (4 << 0);  ///< AINS1
        constexpr uint32_t ADBIG1 = (1U << 4);  ///< ADBIG1
        constexpr uint32_t CMPCOND1 = (1U << 5);  ///< CMPCOND1
        constexpr uint32_t CMP1EN = (1U << 7);  ///< CMP1EN
        constexpr uint32_t CMPCMT1 = (4 << 8);  ///< CMPCMT1
    }

    /// CMP0 Register bits
    namespace cmp0_bits {
        constexpr uint32_t AD0CMP = (12 << 0);  ///< AD0CMP
    }

    /// CMP1 Register bits
    namespace cmp1_bits {
        constexpr uint32_t AD1CMP = (12 << 0);  ///< AD1CMP
    }

    /// REG00 Register bits
    namespace reg00_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG01 Register bits
    namespace reg01_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG02 Register bits
    namespace reg02_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG03 Register bits
    namespace reg03_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG04 Register bits
    namespace reg04_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG05 Register bits
    namespace reg05_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG06 Register bits
    namespace reg06_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REG07 Register bits
    namespace reg07_bits {
        constexpr uint32_t ADR = (12 << 0);  ///< ADR
        constexpr uint32_t ADRF = (1U << 12);  ///< ADRF
        constexpr uint32_t ADOVRF = (1U << 13);  ///< ADOVRF
        constexpr uint32_t ADRF_MIR = (1U << 16);  ///< ADRF_MIR
        constexpr uint32_t ADOVRF_MIR = (1U << 17);  ///< ADOVRF_MIR
        constexpr uint32_t _ADR = (12 << 20);  ///< _ADR
    }

    /// REGSP Register bits
    namespace regsp_bits {
        constexpr uint32_t ADSPR = (12 << 0);  ///< ADSPR
        constexpr uint32_t ADSPRF = (1U << 12);  ///< ADSPRF
        constexpr uint32_t ADOVRSPF = (1U << 13);  ///< ADOVRSPF
        constexpr uint32_t _ADSPRF = (1U << 16);  ///< _ADSPRF
        constexpr uint32_t _ADOVRSPF = (1U << 17);  ///< _ADOVRSPF
        constexpr uint32_t _ADSPR = (12 << 20);  ///< _ADSPR
    }

}

// ============================================================================
// ADILV Peripheral
// ============================================================================

namespace adilv {
    /// Base addresses
    constexpr uint32_t ADILV_BASE = 0x40052000;

    /// ADILV Register structure
    struct Registers {
        volatile uint32_t MO1;  ///< Offset: 0x00 - Dual Unit Mode Trigger Controller START Register 1
        volatile uint32_t MO2;  ///< Offset: 0x04 - Dual Unit Mode Trigger Controller START Register 2
        volatile uint32_t MO3;  ///< Offset: 0x08 - Dual Unit Mode Trigger Controller START Register 3
    };

    /// Peripheral instances
    inline Registers* ADILV = reinterpret_cast<Registers*>(ADILV_BASE);

    // Bit definitions
    /// MO1 Register bits
    namespace mo1_bits {
        constexpr uint32_t SWATRG = (1U << 7);  ///< SWATRG
    }

    /// MO2 Register bits
    namespace mo2_bits {
        constexpr uint32_t TRGAEN = (1U << 0);  ///< TRGAEN
        constexpr uint32_t TRGASEL = (3 << 1);  ///< TRGASEL
        constexpr uint32_t TRGASTA = (1U << 4);  ///< TRGASTA
        constexpr uint32_t ADILV = (1U << 7);  ///< ADILV
    }

    /// MO3 Register bits
    namespace mo3_bits {
        constexpr uint32_t CORCNT = (8 << 0);  ///< CORCNT
    }

}

// ============================================================================
// DA0 Peripheral
// ============================================================================

namespace da0 {
    /// Base addresses
    constexpr uint32_t DA0_BASE = 0x40054000;

    /// DA0 Register structure
    struct Registers {
        volatile uint32_t CNT;  ///< Offset: 0x00 - DAC Control Register1
        volatile uint32_t REG;  ///< Offset: 0x04 - DAC Data Register
        volatile uint32_t DCTL;  ///< Offset: 0x08 - DAC Output Register
        volatile uint32_t TCTL;  ///< Offset: 0x0C - DAC Trigger Register
        volatile uint32_t VCTL;  ///< Offset: 0x10 - DAC Control Register2
    };

    /// Peripheral instances
    inline Registers* DA0 = reinterpret_cast<Registers*>(DA0_BASE);

    // Bit definitions
    /// CNT Register bits
    namespace cnt_bits {
        constexpr uint32_t OP = (1U << 0);  ///< OP
        constexpr uint32_t REFON = (1U << 1);  ///< REFON
    }

    /// REG Register bits
    namespace reg_bits {
        constexpr uint32_t DAC = (10 << 6);  ///< DAC
    }

    /// DCTL Register bits
    namespace dctl_bits {
        constexpr uint32_t WAVE = (2 << 0);  ///< WAVE
        constexpr uint32_t DMAEN = (1U << 7);  ///< DMAEN
        constexpr uint32_t TRGEN = (1U << 8);  ///< TRGEN
        constexpr uint32_t TRGSEL = (3 << 9);  ///< TRGSEL
        constexpr uint32_t AMPSEL = (2 << 16);  ///< AMPSEL
        constexpr uint32_t OFFSET = (3 << 18);  ///< OFFSET
    }

    /// TCTL Register bits
    namespace tctl_bits {
        constexpr uint32_t SWTRG = (1U << 0);  ///< SWTRG
        constexpr uint32_t DACCLR = (1U << 15);  ///< DACCLR
    }

    /// VCTL Register bits
    namespace vctl_bits {
        constexpr uint32_t VHOLDCTF = (4 << 0);  ///< VHOLDCTF
        constexpr uint32_t VHOLDCTB = (4 << 4);  ///< VHOLDCTB
    }

}

// ============================================================================
// DA1 Peripheral
// ============================================================================

namespace da1 {
    /// Base addresses
    constexpr uint32_t DA1_BASE = 0x40055000;

    /// DA1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* DA1 = reinterpret_cast<Registers*>(DA1_BASE);

}

// ============================================================================
// EXB Peripheral
// ============================================================================

namespace exb {
    /// Base addresses
    constexpr uint32_t EXB_BASE = 0x4005C000;

    /// EXB Register structure
    struct Registers {
        volatile uint32_t MOD;  ///< Offset: 0x00 - External Bus Mode Register
        volatile uint32_t AS0;  ///< Offset: 0x10 - External Bus Base Address and CS Space setting Register 0
        volatile uint32_t AS1;  ///< Offset: 0x14 - External Bus Base Address and CS Space setting Register 1
        volatile uint32_t AS2;  ///< Offset: 0x18 - External Bus Base Address and CS Space setting Register 2
        volatile uint32_t AS3;  ///< Offset: 0x1C - External Bus Base Address and CS Space setting Register 3
        volatile uint32_t CS0;  ///< Offset: 0x40 - Chip Select and Wait Controller Register 0
        volatile uint32_t CS1;  ///< Offset: 0x44 - Chip Select and Wait Controller Register 1
        volatile uint32_t CS2;  ///< Offset: 0x48 - Chip Select and Wait Controller Register 2
        volatile uint32_t CS3;  ///< Offset: 0x4C - Chip Select and Wait Controller Register 3
    };

    /// Peripheral instances
    inline Registers* EXB = reinterpret_cast<Registers*>(EXB_BASE);

    // Bit definitions
    /// MOD Register bits
    namespace mod_bits {
        constexpr uint32_t EXBSEL = (1U << 0);  ///< EXBSEL
        constexpr uint32_t EXBWAIT = (2 << 1);  ///< EXBWAIT
    }

    /// AS0 Register bits
    namespace as0_bits {
        constexpr uint32_t EXAR = (8 << 0);  ///< EXAR
        constexpr uint32_t SA = (16 << 16);  ///< SA
    }

    /// AS1 Register bits
    namespace as1_bits {
        constexpr uint32_t EXAR = (8 << 0);  ///< EXAR
        constexpr uint32_t SA = (16 << 16);  ///< SA
    }

    /// AS2 Register bits
    namespace as2_bits {
        constexpr uint32_t EXAR = (8 << 0);  ///< EXAR
        constexpr uint32_t SA = (16 << 16);  ///< SA
    }

    /// AS3 Register bits
    namespace as3_bits {
        constexpr uint32_t EXAR = (8 << 0);  ///< EXAR
        constexpr uint32_t SA = (16 << 16);  ///< SA
    }

    /// CS0 Register bits
    namespace cs0_bits {
        constexpr uint32_t CSW0 = (1U << 0);  ///< CSW0
        constexpr uint32_t CSW1 = (1U << 1);  ///< CSW1
        constexpr uint32_t CSW2 = (1U << 2);  ///< CSW2
        constexpr uint32_t CSIW = (5 << 8);  ///< CSIW
        constexpr uint32_t RDS = (2 << 16);  ///< RDS
        constexpr uint32_t WRS = (2 << 18);  ///< WRS
        constexpr uint32_t ALEW = (2 << 20);  ///< ALEW
        constexpr uint32_t RDR = (3 << 24);  ///< RDR
        constexpr uint32_t WRR = (3 << 27);  ///< WRR
        constexpr uint32_t CSR = (2 << 30);  ///< CSR
    }

    /// CS1 Register bits
    namespace cs1_bits {
        constexpr uint32_t CSW0 = (1U << 0);  ///< CSW0
        constexpr uint32_t CSW1 = (1U << 1);  ///< CSW1
        constexpr uint32_t CSW2 = (1U << 2);  ///< CSW2
        constexpr uint32_t CSIW = (5 << 8);  ///< CSIW
        constexpr uint32_t RDS = (2 << 16);  ///< RDS
        constexpr uint32_t WRS = (2 << 18);  ///< WRS
        constexpr uint32_t ALEW = (2 << 20);  ///< ALEW
        constexpr uint32_t RDR = (3 << 24);  ///< RDR
        constexpr uint32_t WRR = (3 << 27);  ///< WRR
        constexpr uint32_t CSR = (2 << 30);  ///< CSR
    }

    /// CS2 Register bits
    namespace cs2_bits {
        constexpr uint32_t CSW0 = (1U << 0);  ///< CSW0
        constexpr uint32_t CSW1 = (1U << 1);  ///< CSW1
        constexpr uint32_t CSW2 = (1U << 2);  ///< CSW2
        constexpr uint32_t CSIW = (5 << 8);  ///< CSIW
        constexpr uint32_t RDS = (2 << 16);  ///< RDS
        constexpr uint32_t WRS = (2 << 18);  ///< WRS
        constexpr uint32_t ALEW = (2 << 20);  ///< ALEW
        constexpr uint32_t RDR = (3 << 24);  ///< RDR
        constexpr uint32_t WRR = (3 << 27);  ///< WRR
        constexpr uint32_t CSR = (2 << 30);  ///< CSR
    }

    /// CS3 Register bits
    namespace cs3_bits {
        constexpr uint32_t CSW0 = (1U << 0);  ///< CSW0
        constexpr uint32_t CSW1 = (1U << 1);  ///< CSW1
        constexpr uint32_t CSW2 = (1U << 2);  ///< CSW2
        constexpr uint32_t CSIW = (5 << 8);  ///< CSIW
        constexpr uint32_t RDS = (2 << 16);  ///< RDS
        constexpr uint32_t WRS = (2 << 18);  ///< WRS
        constexpr uint32_t ALEW = (2 << 20);  ///< ALEW
        constexpr uint32_t RDR = (3 << 24);  ///< RDR
        constexpr uint32_t WRR = (3 << 27);  ///< WRR
        constexpr uint32_t CSR = (2 << 30);  ///< CSR
    }

}

// ============================================================================
// PA Peripheral
// ============================================================================

namespace pa {
    /// Base addresses
    constexpr uint32_t PA_BASE = 0x400C0000;

    /// PA Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PA Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PA Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PA Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PA Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PA Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PA Function Register 4
        volatile uint32_t FR5;  ///< Offset: 0x18 - PA Function Register 5
        volatile uint32_t OD;  ///< Offset: 0x28 - PA Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PA Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PA Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PA Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PA = reinterpret_cast<Registers*>(PA_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PA0 = (1U << 0);  ///< PA0
        constexpr uint32_t PA1 = (1U << 1);  ///< PA1
        constexpr uint32_t PA2 = (1U << 2);  ///< PA2
        constexpr uint32_t PA3 = (1U << 3);  ///< PA3
        constexpr uint32_t PA4 = (1U << 4);  ///< PA4
        constexpr uint32_t PA5 = (1U << 5);  ///< PA5
        constexpr uint32_t PA6 = (1U << 6);  ///< PA6
        constexpr uint32_t PA7 = (1U << 7);  ///< PA7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PA0C = (1U << 0);  ///< PA0C
        constexpr uint32_t PA1C = (1U << 1);  ///< PA1C
        constexpr uint32_t PA2C = (1U << 2);  ///< PA2C
        constexpr uint32_t PA3C = (1U << 3);  ///< PA3C
        constexpr uint32_t PA4C = (1U << 4);  ///< PA4C
        constexpr uint32_t PA5C = (1U << 5);  ///< PA5C
        constexpr uint32_t PA6C = (1U << 6);  ///< PA6C
        constexpr uint32_t PA7C = (1U << 7);  ///< PA7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PA0F1 = (1U << 0);  ///< PA0F1
        constexpr uint32_t PA1F1 = (1U << 1);  ///< PA1F1
        constexpr uint32_t PA2F1 = (1U << 2);  ///< PA2F1
        constexpr uint32_t PA3F1 = (1U << 3);  ///< PA3F1
        constexpr uint32_t PA4F1 = (1U << 4);  ///< PA4F1
        constexpr uint32_t PA5F1 = (1U << 5);  ///< PA5F1
        constexpr uint32_t PA6F1 = (1U << 6);  ///< PA6F1
        constexpr uint32_t PA7F1 = (1U << 7);  ///< PA7F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PA0F2 = (1U << 0);  ///< PA0F2
        constexpr uint32_t PA1F2 = (1U << 1);  ///< PA1F2
        constexpr uint32_t PA2F2 = (1U << 2);  ///< PA2F2
        constexpr uint32_t PA3F2 = (1U << 3);  ///< PA3F2
        constexpr uint32_t PA4F2 = (1U << 4);  ///< PA4F2
        constexpr uint32_t PA5F2 = (1U << 5);  ///< PA5F2
        constexpr uint32_t PA6F2 = (1U << 6);  ///< PA6F2
        constexpr uint32_t PA7F2 = (1U << 7);  ///< PA7F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PA3F3 = (1U << 3);  ///< PA3F3
        constexpr uint32_t PA5F3 = (1U << 5);  ///< PA5F3
        constexpr uint32_t PA6F3 = (1U << 6);  ///< PA6F3
        constexpr uint32_t PA7F3 = (1U << 7);  ///< PA7F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PA7F4 = (1U << 7);  ///< PA7F4
    }

    /// FR5 Register bits
    namespace fr5_bits {
        constexpr uint32_t PA7F5 = (1U << 7);  ///< PA7F5
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PA0OD = (1U << 0);  ///< PA0OD
        constexpr uint32_t PA1OD = (1U << 1);  ///< PA1OD
        constexpr uint32_t PA2OD = (1U << 2);  ///< PA2OD
        constexpr uint32_t PA3OD = (1U << 3);  ///< PA3OD
        constexpr uint32_t PA4OD = (1U << 4);  ///< PA4OD
        constexpr uint32_t PA5OD = (1U << 5);  ///< PA5OD
        constexpr uint32_t PA6OD = (1U << 6);  ///< PA6OD
        constexpr uint32_t PA7OD = (1U << 7);  ///< PA7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PA0UP = (1U << 0);  ///< PA0UP
        constexpr uint32_t PA1UP = (1U << 1);  ///< PA1UP
        constexpr uint32_t PA2UP = (1U << 2);  ///< PA2UP
        constexpr uint32_t PA3UP = (1U << 3);  ///< PA3UP
        constexpr uint32_t PA4UP = (1U << 4);  ///< PA4UP
        constexpr uint32_t PA5UP = (1U << 5);  ///< PA5UP
        constexpr uint32_t PA6UP = (1U << 6);  ///< PA6UP
        constexpr uint32_t PA7UP = (1U << 7);  ///< PA7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PA0DN = (1U << 0);  ///< PA0DN
        constexpr uint32_t PA1DN = (1U << 1);  ///< PA1DN
        constexpr uint32_t PA2DN = (1U << 2);  ///< PA2DN
        constexpr uint32_t PA3DN = (1U << 3);  ///< PA3DN
        constexpr uint32_t PA4DN = (1U << 4);  ///< PA4DN
        constexpr uint32_t PA5DN = (1U << 5);  ///< PA5DN
        constexpr uint32_t PA6DN = (1U << 6);  ///< PA6DN
        constexpr uint32_t PA7DN = (1U << 7);  ///< PA7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PA0IE = (1U << 0);  ///< PA0IE
        constexpr uint32_t PA1IE = (1U << 1);  ///< PA1IE
        constexpr uint32_t PA2IE = (1U << 2);  ///< PA2IE
        constexpr uint32_t PA3IE = (1U << 3);  ///< PA3IE
        constexpr uint32_t PA4IE = (1U << 4);  ///< PA4IE
        constexpr uint32_t PA5IE = (1U << 5);  ///< PA5IE
        constexpr uint32_t PA6IE = (1U << 6);  ///< PA6IE
        constexpr uint32_t PA7IE = (1U << 7);  ///< PA7IE
    }

}

// ============================================================================
// PB Peripheral
// ============================================================================

namespace pb {
    /// Base addresses
    constexpr uint32_t PB_BASE = 0x400C0100;

    /// PB Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PB Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PB Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PB Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PB Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PB Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PB Function Register 4
        volatile uint32_t OD;  ///< Offset: 0x28 - PB Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PB Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PB Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PB Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PB = reinterpret_cast<Registers*>(PB_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PB0 = (1U << 0);  ///< PB0
        constexpr uint32_t PB1 = (1U << 1);  ///< PB1
        constexpr uint32_t PB2 = (1U << 2);  ///< PB2
        constexpr uint32_t PB3 = (1U << 3);  ///< PB3
        constexpr uint32_t PB4 = (1U << 4);  ///< PB4
        constexpr uint32_t PB5 = (1U << 5);  ///< PB5
        constexpr uint32_t PB6 = (1U << 6);  ///< PB6
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PB0C = (1U << 0);  ///< PB0C
        constexpr uint32_t PB1C = (1U << 1);  ///< PB1C
        constexpr uint32_t PB2C = (1U << 2);  ///< PB2C
        constexpr uint32_t PB3C = (1U << 3);  ///< PB3C
        constexpr uint32_t PB4C = (1U << 4);  ///< PB4C
        constexpr uint32_t PB5C = (1U << 5);  ///< PB5C
        constexpr uint32_t PB6C = (1U << 6);  ///< PB6C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PB0F1 = (1U << 0);  ///< PB0F1
        constexpr uint32_t PB1F1 = (1U << 1);  ///< PB1F1
        constexpr uint32_t PB2F1 = (1U << 2);  ///< PB2F1
        constexpr uint32_t PB3F1 = (1U << 3);  ///< PB3F1
        constexpr uint32_t PB4F1 = (1U << 4);  ///< PB4F1
        constexpr uint32_t PB5F1 = (1U << 5);  ///< PB5F1
        constexpr uint32_t PB6F1 = (1U << 6);  ///< PB6F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PB2F2 = (1U << 2);  ///< PB2F2
        constexpr uint32_t PB3F2 = (1U << 3);  ///< PB3F2
        constexpr uint32_t PB4F2 = (1U << 4);  ///< PB4F2
        constexpr uint32_t PB5F2 = (1U << 5);  ///< PB5F2
        constexpr uint32_t PB6F2 = (1U << 6);  ///< PB6F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PB0F3 = (1U << 0);  ///< PB0F3
        constexpr uint32_t PB1F3 = (1U << 1);  ///< PB1F3
        constexpr uint32_t PB2F3 = (1U << 2);  ///< PB2F3
        constexpr uint32_t PB3F3 = (1U << 3);  ///< PB3F3
        constexpr uint32_t PB4F3 = (1U << 4);  ///< PB4F3
        constexpr uint32_t PB5F3 = (1U << 5);  ///< PB5F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PB2F4 = (1U << 2);  ///< PB2F4
        constexpr uint32_t PB3F4 = (1U << 3);  ///< PB3F4
        constexpr uint32_t PB4F4 = (1U << 4);  ///< PB4F4
        constexpr uint32_t PB5F4 = (1U << 5);  ///< PB5F4
        constexpr uint32_t PB6F4 = (1U << 6);  ///< PB6F4
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PB0OD = (1U << 0);  ///< PB0OD
        constexpr uint32_t PB1OD = (1U << 1);  ///< PB1OD
        constexpr uint32_t PB2OD = (1U << 2);  ///< PB2OD
        constexpr uint32_t PB3OD = (1U << 3);  ///< PB3OD
        constexpr uint32_t PB4OD = (1U << 4);  ///< PB4OD
        constexpr uint32_t PB5OD = (1U << 5);  ///< PB5OD
        constexpr uint32_t PB6OD = (1U << 6);  ///< PB6OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PB0UP = (1U << 0);  ///< PB0UP
        constexpr uint32_t PB1UP = (1U << 1);  ///< PB1UP
        constexpr uint32_t PB2UP = (1U << 2);  ///< PB2UP
        constexpr uint32_t PB3UP = (1U << 3);  ///< PB3UP
        constexpr uint32_t PB4UP = (1U << 4);  ///< PB4UP
        constexpr uint32_t PB5UP = (1U << 5);  ///< PB5UP
        constexpr uint32_t PB6UP = (1U << 6);  ///< PB6UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PB0DN = (1U << 0);  ///< PB0DN
        constexpr uint32_t PB1DN = (1U << 1);  ///< PB1DN
        constexpr uint32_t PB2DN = (1U << 2);  ///< PB2DN
        constexpr uint32_t PB3DN = (1U << 3);  ///< PB3DN
        constexpr uint32_t PB4DN = (1U << 4);  ///< PB4DN
        constexpr uint32_t PB5DN = (1U << 5);  ///< PB5DN
        constexpr uint32_t PB6DN = (1U << 6);  ///< PB6DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PB0IE = (1U << 0);  ///< PB0IE
        constexpr uint32_t PB1IE = (1U << 1);  ///< PB1IE
        constexpr uint32_t PB2IE = (1U << 2);  ///< PB2IE
        constexpr uint32_t PB3IE = (1U << 3);  ///< PB3IE
        constexpr uint32_t PB4IE = (1U << 4);  ///< PB4IE
        constexpr uint32_t PB5IE = (1U << 5);  ///< PB5IE
        constexpr uint32_t PB6IE = (1U << 6);  ///< PB6IE
    }

}

// ============================================================================
// PE Peripheral
// ============================================================================

namespace pe {
    /// Base addresses
    constexpr uint32_t PE_BASE = 0x400C0400;

    /// PE Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PE Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PE Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PE Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PE Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PE Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PE Function Register 4
        volatile uint32_t FR5;  ///< Offset: 0x18 - PE Function Register 5
        volatile uint32_t OD;  ///< Offset: 0x28 - PE Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PE Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PE Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PE Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PE = reinterpret_cast<Registers*>(PE_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PE0 = (1U << 0);  ///< PE0
        constexpr uint32_t PE1 = (1U << 1);  ///< PE1
        constexpr uint32_t PE2 = (1U << 2);  ///< PE2
        constexpr uint32_t PE3 = (1U << 3);  ///< PE3
        constexpr uint32_t PE4 = (1U << 4);  ///< PE4
        constexpr uint32_t PE5 = (1U << 5);  ///< PE5
        constexpr uint32_t PE6 = (1U << 6);  ///< PE6
        constexpr uint32_t PE7 = (1U << 7);  ///< PE7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PE0C = (1U << 0);  ///< PE0C
        constexpr uint32_t PE1C = (1U << 1);  ///< PE1C
        constexpr uint32_t PE2C = (1U << 2);  ///< PE2C
        constexpr uint32_t PE3C = (1U << 3);  ///< PE3C
        constexpr uint32_t PE4C = (1U << 4);  ///< PE4C
        constexpr uint32_t PE5C = (1U << 5);  ///< PE5C
        constexpr uint32_t PE6C = (1U << 6);  ///< PE6C
        constexpr uint32_t PE7C = (1U << 7);  ///< PE7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PE1F1 = (1U << 1);  ///< PE1F1
        constexpr uint32_t PE2F1 = (1U << 2);  ///< PE2F1
        constexpr uint32_t PE3F1 = (1U << 3);  ///< PE3F1
        constexpr uint32_t PE4F1 = (1U << 4);  ///< PE4F1
        constexpr uint32_t PE5F1 = (1U << 5);  ///< PE5F1
        constexpr uint32_t PE6F1 = (1U << 6);  ///< PE6F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PE0F2 = (1U << 0);  ///< PE0F2
        constexpr uint32_t PE1F2 = (1U << 1);  ///< PE1F2
        constexpr uint32_t PE2F2 = (1U << 2);  ///< PE2F2
        constexpr uint32_t PE3F2 = (1U << 3);  ///< PE3F2
        constexpr uint32_t PE4F2 = (1U << 4);  ///< PE4F2
        constexpr uint32_t PE5F2 = (1U << 5);  ///< PE5F2
        constexpr uint32_t PE6F2 = (1U << 6);  ///< PE6F2
        constexpr uint32_t PE7F2 = (1U << 7);  ///< PE7F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PE0F3 = (1U << 0);  ///< PE0F3
        constexpr uint32_t PE1F3 = (1U << 1);  ///< PE1F3
        constexpr uint32_t PE2F3 = (1U << 2);  ///< PE2F3
        constexpr uint32_t PE3F3 = (1U << 3);  ///< PE3F3
        constexpr uint32_t PE4F3 = (1U << 4);  ///< PE4F3
        constexpr uint32_t PE5F3 = (1U << 5);  ///< PE5F3
        constexpr uint32_t PE6F3 = (1U << 6);  ///< PE6F3
        constexpr uint32_t PE7F3 = (1U << 7);  ///< PE7F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PE0F4 = (1U << 0);  ///< PE0F4
        constexpr uint32_t PE1F4 = (1U << 1);  ///< PE1F4
        constexpr uint32_t PE3F4 = (1U << 3);  ///< PE3F4
        constexpr uint32_t PE4F4 = (1U << 4);  ///< PE4F4
        constexpr uint32_t PE7F4 = (1U << 7);  ///< PE7F4
    }

    /// FR5 Register bits
    namespace fr5_bits {
        constexpr uint32_t PE0F5 = (1U << 0);  ///< PE0F5
        constexpr uint32_t PE1F5 = (1U << 1);  ///< PE1F5
        constexpr uint32_t PE2F5 = (1U << 2);  ///< PE2F5
        constexpr uint32_t PE3F5 = (1U << 3);  ///< PE3F5
        constexpr uint32_t PE4F5 = (1U << 4);  ///< PE4F5
        constexpr uint32_t PE7F5 = (1U << 7);  ///< PE7F5
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PE0OD = (1U << 0);  ///< PE0OD
        constexpr uint32_t PE1OD = (1U << 1);  ///< PE1OD
        constexpr uint32_t PE2OD = (1U << 2);  ///< PE2OD
        constexpr uint32_t PE3OD = (1U << 3);  ///< PE3OD
        constexpr uint32_t PE4OD = (1U << 4);  ///< PE4OD
        constexpr uint32_t PE5OD = (1U << 5);  ///< PE5OD
        constexpr uint32_t PE6OD = (1U << 6);  ///< PE6OD
        constexpr uint32_t PE7OD = (1U << 7);  ///< PE7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PE0UP = (1U << 0);  ///< PE0UP
        constexpr uint32_t PE1UP = (1U << 1);  ///< PE1UP
        constexpr uint32_t PE2UP = (1U << 2);  ///< PE2UP
        constexpr uint32_t PE3UP = (1U << 3);  ///< PE3UP
        constexpr uint32_t PE4UP = (1U << 4);  ///< PE4UP
        constexpr uint32_t PE5UP = (1U << 5);  ///< PE5UP
        constexpr uint32_t PE6UP = (1U << 6);  ///< PE6UP
        constexpr uint32_t PE7UP = (1U << 7);  ///< PE7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PE0DN = (1U << 0);  ///< PE0DN
        constexpr uint32_t PE1DN = (1U << 1);  ///< PE1DN
        constexpr uint32_t PE2DN = (1U << 2);  ///< PE2DN
        constexpr uint32_t PE3DN = (1U << 3);  ///< PE3DN
        constexpr uint32_t PE4DN = (1U << 4);  ///< PE4DN
        constexpr uint32_t PE5DN = (1U << 5);  ///< PE5DN
        constexpr uint32_t PE6DN = (1U << 6);  ///< PE6DN
        constexpr uint32_t PE7DN = (1U << 7);  ///< PE7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PE0IE = (1U << 0);  ///< PE0IE
        constexpr uint32_t PE1IE = (1U << 1);  ///< PE1IE
        constexpr uint32_t PE2IE = (1U << 2);  ///< PE2IE
        constexpr uint32_t PE3IE = (1U << 3);  ///< PE3IE
        constexpr uint32_t PE4IE = (1U << 4);  ///< PE4IE
        constexpr uint32_t PE5IE = (1U << 5);  ///< PE5IE
        constexpr uint32_t PE6IE = (1U << 6);  ///< PE6IE
        constexpr uint32_t PE7IE = (1U << 7);  ///< PE7IE
    }

}

// ============================================================================
// PF Peripheral
// ============================================================================

namespace pf {
    /// Base addresses
    constexpr uint32_t PF_BASE = 0x400C0500;

    /// PF Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PF Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PF Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PF Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PF Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PF Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PF Function Register 4
        volatile uint32_t OD;  ///< Offset: 0x28 - PF Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PF Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PF Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PF Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PF = reinterpret_cast<Registers*>(PF_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PF0 = (1U << 0);  ///< PF0
        constexpr uint32_t PF1 = (1U << 1);  ///< PF1
        constexpr uint32_t PF2 = (1U << 2);  ///< PF2
        constexpr uint32_t PF3 = (1U << 3);  ///< PF3
        constexpr uint32_t PF4 = (1U << 4);  ///< PF4
        constexpr uint32_t PF5 = (1U << 5);  ///< PF5
        constexpr uint32_t PF6 = (1U << 6);  ///< PF6
        constexpr uint32_t PF7 = (1U << 7);  ///< PF7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PF0C = (1U << 0);  ///< PF0C
        constexpr uint32_t PF1C = (1U << 1);  ///< PF1C
        constexpr uint32_t PF2C = (1U << 2);  ///< PF2C
        constexpr uint32_t PF3C = (1U << 3);  ///< PF3C
        constexpr uint32_t PF4C = (1U << 4);  ///< PF4C
        constexpr uint32_t PF5C = (1U << 5);  ///< PF5C
        constexpr uint32_t PF6C = (1U << 6);  ///< PF6C
        constexpr uint32_t PF7C = (1U << 7);  ///< PF7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PF0F1 = (1U << 0);  ///< PF0F1
        constexpr uint32_t PF1F1 = (1U << 1);  ///< PF1F1
        constexpr uint32_t PF2F1 = (1U << 2);  ///< PF2F1
        constexpr uint32_t PF3F1 = (1U << 3);  ///< PF3F1
        constexpr uint32_t PF4F1 = (1U << 4);  ///< PF4F1
        constexpr uint32_t PF5F1 = (1U << 5);  ///< PF5F1
        constexpr uint32_t PF6F1 = (1U << 6);  ///< PF6F1
        constexpr uint32_t PF7F1 = (1U << 7);  ///< PF7F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PF4F2 = (1U << 4);  ///< PF4F2
        constexpr uint32_t PF5F2 = (1U << 5);  ///< PF5F2
        constexpr uint32_t PF6F2 = (1U << 6);  ///< PF6F2
        constexpr uint32_t PF7F2 = (1U << 7);  ///< PF7F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PF0F3 = (1U << 0);  ///< PF0F3
        constexpr uint32_t PF1F3 = (1U << 1);  ///< PF1F3
        constexpr uint32_t PF2F3 = (1U << 2);  ///< PF2F3
        constexpr uint32_t PF3F3 = (1U << 3);  ///< PF3F3
        constexpr uint32_t PF4F4 = (1U << 4);  ///< PF4F4
        constexpr uint32_t PF5F3 = (1U << 5);  ///< PF5F3
        constexpr uint32_t PF6F3 = (1U << 6);  ///< PF6F3
        constexpr uint32_t PF7F3 = (1U << 7);  ///< PF7F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PF1F4 = (1U << 1);  ///< PF1F4
        constexpr uint32_t PF2F4 = (1U << 2);  ///< PF2F4
        constexpr uint32_t PF5F4 = (1U << 5);  ///< PF5F4
        constexpr uint32_t PF6F4 = (1U << 6);  ///< PF6F4
        constexpr uint32_t PF7F4 = (1U << 7);  ///< PF7F4
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PF0OD = (1U << 0);  ///< PF0OD
        constexpr uint32_t PF1OD = (1U << 1);  ///< PF1OD
        constexpr uint32_t PF2OD = (1U << 2);  ///< PF2OD
        constexpr uint32_t PF3OD = (1U << 3);  ///< PF3OD
        constexpr uint32_t PF4OD = (1U << 4);  ///< PF4OD
        constexpr uint32_t PF5OD = (1U << 5);  ///< PF5OD
        constexpr uint32_t PF6OD = (1U << 6);  ///< PF6OD
        constexpr uint32_t PF7OD = (1U << 7);  ///< PF7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PF0UP = (1U << 0);  ///< PF0UP
        constexpr uint32_t PF1UP = (1U << 1);  ///< PF1UP
        constexpr uint32_t PF2UP = (1U << 2);  ///< PF2UP
        constexpr uint32_t PF3UP = (1U << 3);  ///< PF3UP
        constexpr uint32_t PF4UP = (1U << 4);  ///< PF4UP
        constexpr uint32_t PF5UP = (1U << 5);  ///< PF5UP
        constexpr uint32_t PF6UP = (1U << 6);  ///< PF6UP
        constexpr uint32_t PF7UP = (1U << 7);  ///< PF7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PF0DN = (1U << 0);  ///< PF0DN
        constexpr uint32_t PF1DN = (1U << 1);  ///< PF1DN
        constexpr uint32_t PF2DN = (1U << 2);  ///< PF2DN
        constexpr uint32_t PF3DN = (1U << 3);  ///< PF3DN
        constexpr uint32_t PF4DN = (1U << 4);  ///< PF4DN
        constexpr uint32_t PF5DN = (1U << 5);  ///< PF5DN
        constexpr uint32_t PF6DN = (1U << 6);  ///< PF6DN
        constexpr uint32_t PF7DN = (1U << 7);  ///< PF7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PF0IE = (1U << 0);  ///< PF0IE
        constexpr uint32_t PF1IE = (1U << 1);  ///< PF1IE
        constexpr uint32_t PF2IE = (1U << 2);  ///< PF2IE
        constexpr uint32_t PF3IE = (1U << 3);  ///< PF3IE
        constexpr uint32_t PF4IE = (1U << 4);  ///< PF4IE
        constexpr uint32_t PF5IE = (1U << 5);  ///< PF5IE
        constexpr uint32_t PF6IE = (1U << 6);  ///< PF6IE
        constexpr uint32_t PF7IE = (1U << 7);  ///< PF7IE
    }

}

// ============================================================================
// PG Peripheral
// ============================================================================

namespace pg {
    /// Base addresses
    constexpr uint32_t PG_BASE = 0x400C0600;

    /// PG Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PG Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PG Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PG Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PG Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PG Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PG Function Register 4
        volatile uint32_t OD;  ///< Offset: 0x28 - PG Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PG Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PG Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PG Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PG = reinterpret_cast<Registers*>(PG_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PG0 = (1U << 0);  ///< PG0
        constexpr uint32_t PG1 = (1U << 1);  ///< PG1
        constexpr uint32_t PG2 = (1U << 2);  ///< PG2
        constexpr uint32_t PG3 = (1U << 3);  ///< PG3
        constexpr uint32_t PG4 = (1U << 4);  ///< PG4
        constexpr uint32_t PG5 = (1U << 5);  ///< PG5
        constexpr uint32_t PG6 = (1U << 6);  ///< PG6
        constexpr uint32_t PG7 = (1U << 7);  ///< PG7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PG0C = (1U << 0);  ///< PG0C
        constexpr uint32_t PG1C = (1U << 1);  ///< PG1C
        constexpr uint32_t PG2C = (1U << 2);  ///< PG2C
        constexpr uint32_t PG3C = (1U << 3);  ///< PG3C
        constexpr uint32_t PG4C = (1U << 4);  ///< PG4C
        constexpr uint32_t PG5C = (1U << 5);  ///< PG5C
        constexpr uint32_t PG6C = (1U << 6);  ///< PG6C
        constexpr uint32_t PG7C = (1U << 7);  ///< PG7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PG0F1 = (1U << 0);  ///< PG0F1
        constexpr uint32_t PG1F1 = (1U << 1);  ///< PG1F1
        constexpr uint32_t PG2F1 = (1U << 2);  ///< PG2F1
        constexpr uint32_t PG3F1 = (1U << 3);  ///< PG3F1
        constexpr uint32_t PG4F1 = (1U << 4);  ///< PG4F1
        constexpr uint32_t PG5F1 = (1U << 5);  ///< PG5F1
        constexpr uint32_t PG6F1 = (1U << 6);  ///< PG6F1
        constexpr uint32_t PG7F1 = (1U << 7);  ///< PG7F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PG1F2 = (1U << 1);  ///< PG1F2
        constexpr uint32_t PG2F2 = (1U << 2);  ///< PG2F2
        constexpr uint32_t PG3F2 = (1U << 3);  ///< PG3F2
        constexpr uint32_t PG4F2 = (1U << 4);  ///< PG4F2
        constexpr uint32_t PG5F2 = (1U << 5);  ///< PG5F2
        constexpr uint32_t PG6F2 = (1U << 6);  ///< PG6F2
        constexpr uint32_t PG7F2 = (1U << 7);  ///< PG7F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PG0F3 = (1U << 0);  ///< PG0F3
        constexpr uint32_t PG1F3 = (1U << 1);  ///< PG1F3
        constexpr uint32_t PG2F3 = (1U << 2);  ///< PG2F3
        constexpr uint32_t PG3F3 = (1U << 3);  ///< PG3F3
        constexpr uint32_t PG4F3 = (1U << 4);  ///< PG4F3
        constexpr uint32_t PG5F3 = (1U << 5);  ///< PG5F3
        constexpr uint32_t PG6F3 = (1U << 6);  ///< PG6F3
        constexpr uint32_t PG7F3 = (1U << 7);  ///< PG7F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PG2F4 = (1U << 2);  ///< PG2F4
        constexpr uint32_t PG3F4 = (1U << 3);  ///< PG3F4
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PG0OD = (1U << 0);  ///< PG0OD
        constexpr uint32_t PG1OD = (1U << 1);  ///< PG1OD
        constexpr uint32_t PG2OD = (1U << 2);  ///< PG2OD
        constexpr uint32_t PG3OD = (1U << 3);  ///< PG3OD
        constexpr uint32_t PG4OD = (1U << 4);  ///< PG4OD
        constexpr uint32_t PG5OD = (1U << 5);  ///< PG5OD
        constexpr uint32_t PG6OD = (1U << 6);  ///< PG6OD
        constexpr uint32_t PG7OD = (1U << 7);  ///< PG7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PG0UP = (1U << 0);  ///< PG0UP
        constexpr uint32_t PG1UP = (1U << 1);  ///< PG1UP
        constexpr uint32_t PG2UP = (1U << 2);  ///< PG2UP
        constexpr uint32_t PG3UP = (1U << 3);  ///< PG3UP
        constexpr uint32_t PG4UP = (1U << 4);  ///< PG4UP
        constexpr uint32_t PG5UP = (1U << 5);  ///< PG5UP
        constexpr uint32_t PG6UP = (1U << 6);  ///< PG6UP
        constexpr uint32_t PG7UP = (1U << 7);  ///< PG7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PG0DN = (1U << 0);  ///< PG0DN
        constexpr uint32_t PG1DN = (1U << 1);  ///< PG1DN
        constexpr uint32_t PG2DN = (1U << 2);  ///< PG2DN
        constexpr uint32_t PG3DN = (1U << 3);  ///< PG3DN
        constexpr uint32_t PG4DN = (1U << 4);  ///< PG4DN
        constexpr uint32_t PG5DN = (1U << 5);  ///< PG5DN
        constexpr uint32_t PG6DN = (1U << 6);  ///< PG6DN
        constexpr uint32_t PG7DN = (1U << 7);  ///< PG7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PG0IE = (1U << 0);  ///< PG0IE
        constexpr uint32_t PG1IE = (1U << 1);  ///< PG1IE
        constexpr uint32_t PG2IE = (1U << 2);  ///< PG2IE
        constexpr uint32_t PG3IE = (1U << 3);  ///< PG3IE
        constexpr uint32_t PG4IE = (1U << 4);  ///< PG4IE
        constexpr uint32_t PG5IE = (1U << 5);  ///< PG5IE
        constexpr uint32_t PG6IE = (1U << 6);  ///< PG6IE
        constexpr uint32_t PG7IE = (1U << 7);  ///< PG7IE
    }

}

// ============================================================================
// PH Peripheral
// ============================================================================

namespace ph {
    /// Base addresses
    constexpr uint32_t PH_BASE = 0x400C0700;

    /// PH Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PH Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PH Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PH Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PH Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PH Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PH Function Register 4
        volatile uint32_t FR5;  ///< Offset: 0x18 - PH Function Register 5
        volatile uint32_t OD;  ///< Offset: 0x28 - PH Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PH Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PH Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PH Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PH = reinterpret_cast<Registers*>(PH_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PH0 = (1U << 0);  ///< PH0
        constexpr uint32_t PH1 = (1U << 1);  ///< PH1
        constexpr uint32_t PH2 = (1U << 2);  ///< PH2
        constexpr uint32_t PH3 = (1U << 3);  ///< PH3
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PH0C = (1U << 0);  ///< PH0C
        constexpr uint32_t PH1C = (1U << 1);  ///< PH1C
        constexpr uint32_t PH2C = (1U << 2);  ///< PH2C
        constexpr uint32_t PH3C = (1U << 3);  ///< PH3C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PH0F1 = (1U << 0);  ///< PH0F1
        constexpr uint32_t PH1F1 = (1U << 1);  ///< PH1F1
        constexpr uint32_t PH2F1 = (1U << 2);  ///< PH2F1
        constexpr uint32_t PH3F1 = (1U << 3);  ///< PH3F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PH0F2 = (1U << 0);  ///< PH0F2
        constexpr uint32_t PH1F2 = (1U << 1);  ///< PH1F2
        constexpr uint32_t PH2F2 = (1U << 2);  ///< PH2F2
        constexpr uint32_t PH3F2 = (1U << 3);  ///< PH3F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PH0F3 = (1U << 0);  ///< PH0F3
        constexpr uint32_t PH1F3 = (1U << 1);  ///< PH1F3
        constexpr uint32_t PH2F3 = (1U << 2);  ///< PH2F3
        constexpr uint32_t PH3F3 = (1U << 3);  ///< PH3F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PH2F4 = (1U << 2);  ///< PH2F4
        constexpr uint32_t PH3F4 = (1U << 3);  ///< PH3F4
    }

    /// FR5 Register bits
    namespace fr5_bits {
        constexpr uint32_t PH0F5 = (1U << 0);  ///< PH0F5
        constexpr uint32_t PH1F5 = (1U << 1);  ///< PH1F5
        constexpr uint32_t PH2F5 = (1U << 2);  ///< PH2F5
        constexpr uint32_t PH3F5 = (1U << 3);  ///< PH3F5
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PH0OD = (1U << 0);  ///< PH0OD
        constexpr uint32_t PH1OD = (1U << 1);  ///< PH1OD
        constexpr uint32_t PH2OD = (1U << 2);  ///< PH2OD
        constexpr uint32_t PH3OD = (1U << 3);  ///< PH3OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PH0UP = (1U << 0);  ///< PH0UP
        constexpr uint32_t PH1UP = (1U << 1);  ///< PH1UP
        constexpr uint32_t PH2UP = (1U << 2);  ///< PH2UP
        constexpr uint32_t PH3UP = (1U << 3);  ///< PH3UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PN0DN = (1U << 0);  ///< PN0DN
        constexpr uint32_t PN1DN = (1U << 1);  ///< PN1DN
        constexpr uint32_t PN2DN = (1U << 2);  ///< PN2DN
        constexpr uint32_t PN3DN = (1U << 3);  ///< PN3DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PH0IE = (1U << 0);  ///< PH0IE
        constexpr uint32_t PH1IE = (1U << 1);  ///< PH1IE
        constexpr uint32_t PH2IE = (1U << 2);  ///< PH2IE
        constexpr uint32_t PH3IE = (1U << 3);  ///< PH3IE
    }

}

// ============================================================================
// PI Peripheral
// ============================================================================

namespace pi {
    /// Base addresses
    constexpr uint32_t PI_BASE = 0x400C0800;

    /// PI Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PI Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PI Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PI Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PI Function Register 2
        volatile uint32_t OD;  ///< Offset: 0x28 - PI Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PI Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PI Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PI Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PI = reinterpret_cast<Registers*>(PI_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PI0 = (1U << 0);  ///< PI0
        constexpr uint32_t PI1 = (1U << 1);  ///< PI1
        constexpr uint32_t PI2 = (1U << 2);  ///< PI2
        constexpr uint32_t PI3 = (1U << 3);  ///< PI3
        constexpr uint32_t PI4 = (1U << 4);  ///< PI4
        constexpr uint32_t PI5 = (1U << 5);  ///< PI5
        constexpr uint32_t PI6 = (1U << 6);  ///< PI6
        constexpr uint32_t PI7 = (1U << 7);  ///< PI7
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PI0C = (1U << 0);  ///< PI0C
        constexpr uint32_t PI1C = (1U << 1);  ///< PI1C
        constexpr uint32_t PI2C = (1U << 2);  ///< PI2C
        constexpr uint32_t PI3C = (1U << 3);  ///< PI3C
        constexpr uint32_t PI4C = (1U << 4);  ///< PI4C
        constexpr uint32_t PI5C = (1U << 5);  ///< PI5C
        constexpr uint32_t PI6C = (1U << 6);  ///< PI6C
        constexpr uint32_t PI7C = (1U << 7);  ///< PI7C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PI0F1 = (1U << 0);  ///< PI0F1
        constexpr uint32_t PI1F1 = (1U << 1);  ///< PI1F1
        constexpr uint32_t PI2F1 = (1U << 2);  ///< PI2F1
        constexpr uint32_t PI3F1 = (1U << 3);  ///< PI3F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PI3F2 = (1U << 3);  ///< PI3F2
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PI0OD = (1U << 0);  ///< PI0OD
        constexpr uint32_t PI1OD = (1U << 1);  ///< PI1OD
        constexpr uint32_t PI2OD = (1U << 2);  ///< PI2OD
        constexpr uint32_t PI3OD = (1U << 3);  ///< PI3OD
        constexpr uint32_t PI4OD = (1U << 4);  ///< PI4OD
        constexpr uint32_t PI5OD = (1U << 5);  ///< PI5OD
        constexpr uint32_t PI6OD = (1U << 6);  ///< PI6OD
        constexpr uint32_t PI7OD = (1U << 7);  ///< PI7OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PI0UP = (1U << 0);  ///< PI0UP
        constexpr uint32_t PI1UP = (1U << 1);  ///< PI1UP
        constexpr uint32_t PI2UP = (1U << 2);  ///< PI2UP
        constexpr uint32_t PI3UP = (1U << 3);  ///< PI3UP
        constexpr uint32_t PI4UP = (1U << 4);  ///< PI4UP
        constexpr uint32_t PI5UP = (1U << 5);  ///< PI5UP
        constexpr uint32_t PI6UP = (1U << 6);  ///< PI6UP
        constexpr uint32_t PI7UP = (1U << 7);  ///< PI7UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PI0DN = (1U << 0);  ///< PI0DN
        constexpr uint32_t PI1DN = (1U << 1);  ///< PI1DN
        constexpr uint32_t PI2DN = (1U << 2);  ///< PI2DN
        constexpr uint32_t PI3DN = (1U << 3);  ///< PI3DN
        constexpr uint32_t PI4DN = (1U << 4);  ///< PI4DN
        constexpr uint32_t PI5DN = (1U << 5);  ///< PI5DN
        constexpr uint32_t PI6DN = (1U << 6);  ///< PI6DN
        constexpr uint32_t PI7DN = (1U << 7);  ///< PI7DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PI0IE = (1U << 0);  ///< PI0IE
        constexpr uint32_t PI1IE = (1U << 1);  ///< PI1IE
        constexpr uint32_t PI2IE = (1U << 2);  ///< PI2IE
        constexpr uint32_t PI3IE = (1U << 3);  ///< PI3IE
        constexpr uint32_t PI4IE = (1U << 4);  ///< PI4IE
        constexpr uint32_t PI5IE = (1U << 5);  ///< PI5IE
        constexpr uint32_t PI6IE = (1U << 6);  ///< PI6IE
        constexpr uint32_t PI7IE = (1U << 7);  ///< PI7IE
    }

}

// ============================================================================
// PK Peripheral
// ============================================================================

namespace pk {
    /// Base addresses
    constexpr uint32_t PK_BASE = 0x400C0A00;

    /// PK Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PK Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PK Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PK Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PK Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PK Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PK Function Register 4
        volatile uint32_t OD;  ///< Offset: 0x28 - PK Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PK Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PK Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PK Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PK = reinterpret_cast<Registers*>(PK_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PK0 = (1U << 0);  ///< PK0
        constexpr uint32_t PK1 = (1U << 1);  ///< PK1
        constexpr uint32_t PK2 = (1U << 2);  ///< PK2
        constexpr uint32_t PK3 = (1U << 3);  ///< PK3
        constexpr uint32_t PK4 = (1U << 4);  ///< PK4
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PK0C = (1U << 0);  ///< PK0C
        constexpr uint32_t PK1C = (1U << 1);  ///< PK1C
        constexpr uint32_t PK2C = (1U << 2);  ///< PK2C
        constexpr uint32_t PK3C = (1U << 3);  ///< PK3C
        constexpr uint32_t PK4C = (1U << 4);  ///< PK4C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PK0F1 = (1U << 0);  ///< PK0F1
        constexpr uint32_t PK1F1 = (1U << 1);  ///< PK1F1
        constexpr uint32_t PK2F1 = (1U << 2);  ///< PK2F1
        constexpr uint32_t PK3F1 = (1U << 3);  ///< PK3F1
        constexpr uint32_t PK4F1 = (1U << 4);  ///< PK4F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PK1F2 = (1U << 1);  ///< PK1F2
        constexpr uint32_t PK2F2 = (1U << 2);  ///< PK2F2
        constexpr uint32_t PK3F2 = (1U << 3);  ///< PK3F2
        constexpr uint32_t PK4F2 = (1U << 4);  ///< PK4F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PK1F3 = (1U << 1);  ///< PK1F3
        constexpr uint32_t PK2F3 = (1U << 2);  ///< PK2F3
        constexpr uint32_t PK3F3 = (1U << 3);  ///< PK3F3
        constexpr uint32_t PK4F3 = (1U << 4);  ///< PK4F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PK1F4 = (1U << 1);  ///< PK1F4
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PK0OD = (1U << 0);  ///< PK0OD
        constexpr uint32_t PK1OD = (1U << 1);  ///< PK1OD
        constexpr uint32_t PK2OD = (1U << 2);  ///< PK2OD
        constexpr uint32_t PK3OD = (1U << 3);  ///< PK3OD
        constexpr uint32_t PK4OD = (1U << 4);  ///< PK4OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PK0UP = (1U << 0);  ///< PK0UP
        constexpr uint32_t PK1UP = (1U << 1);  ///< PK1UP
        constexpr uint32_t PK2UP = (1U << 2);  ///< PK2UP
        constexpr uint32_t PK3UP = (1U << 3);  ///< PK3UP
        constexpr uint32_t PK4UP = (1U << 4);  ///< PK4UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PK0DN = (1U << 0);  ///< PK0DN
        constexpr uint32_t PK1DN = (1U << 1);  ///< PK1DN
        constexpr uint32_t PK2DN = (1U << 2);  ///< PK2DN
        constexpr uint32_t PK3DN = (1U << 3);  ///< PK3DN
        constexpr uint32_t PK4DN = (1U << 4);  ///< PK4DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PK0IE = (1U << 0);  ///< PK0IE
        constexpr uint32_t PK1IE = (1U << 1);  ///< PK1IE
        constexpr uint32_t PK2IE = (1U << 2);  ///< PK2IE
        constexpr uint32_t PK3IE = (1U << 3);  ///< PK3IE
        constexpr uint32_t PK4IE = (1U << 4);  ///< PK4IE
    }

}

// ============================================================================
// PL Peripheral
// ============================================================================

namespace pl {
    /// Base addresses
    constexpr uint32_t PL_BASE = 0x400C0B00;

    /// PL Register structure
    struct Registers {
        volatile uint32_t DATA;  ///< Offset: 0x00 - PL Data Register
        volatile uint32_t CR;  ///< Offset: 0x04 - PL Control Register
        volatile uint32_t FR1;  ///< Offset: 0x08 - PL Function Register 1
        volatile uint32_t FR2;  ///< Offset: 0x0C - PL Function Register 2
        volatile uint32_t FR3;  ///< Offset: 0x10 - PL Function Register 3
        volatile uint32_t FR4;  ///< Offset: 0x14 - PL Function Register 4
        volatile uint32_t FR5;  ///< Offset: 0x18 - PL Function Register 5
        volatile uint32_t FR6;  ///< Offset: 0x1C - PL Function Register 6
        volatile uint32_t OD;  ///< Offset: 0x28 - PL Open Drain Control Register
        volatile uint32_t PUP;  ///< Offset: 0x2C - PL Pull-Up Control Register
        volatile uint32_t PDN;  ///< Offset: 0x30 - PL Pull-Down Control Register
        volatile uint32_t IE;  ///< Offset: 0x38 - PL Input Enable Control Register
    };

    /// Peripheral instances
    inline Registers* PL = reinterpret_cast<Registers*>(PL_BASE);

    // Bit definitions
    /// DATA Register bits
    namespace data_bits {
        constexpr uint32_t PL0 = (1U << 0);  ///< PL0
        constexpr uint32_t PL1 = (1U << 1);  ///< PL1
        constexpr uint32_t PL2 = (1U << 2);  ///< PL2
        constexpr uint32_t PL3 = (1U << 3);  ///< PL3
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PL0C = (1U << 0);  ///< PL0C
        constexpr uint32_t PL1C = (1U << 1);  ///< PL1C
        constexpr uint32_t PL2C = (1U << 2);  ///< PL2C
        constexpr uint32_t PL3C = (1U << 3);  ///< PL3C
    }

    /// FR1 Register bits
    namespace fr1_bits {
        constexpr uint32_t PL0F1 = (1U << 0);  ///< PL0F1
        constexpr uint32_t PL1F1 = (1U << 1);  ///< PL1F1
        constexpr uint32_t PL2F1 = (1U << 2);  ///< PL2F1
        constexpr uint32_t PL3F1 = (1U << 3);  ///< PL3F1
    }

    /// FR2 Register bits
    namespace fr2_bits {
        constexpr uint32_t PL0F2 = (1U << 0);  ///< PL0F2
        constexpr uint32_t PL1F2 = (1U << 1);  ///< PL1F2
        constexpr uint32_t PL2F2 = (1U << 2);  ///< PL2F2
        constexpr uint32_t PL3F2 = (1U << 3);  ///< PL3F2
    }

    /// FR3 Register bits
    namespace fr3_bits {
        constexpr uint32_t PL0F3 = (1U << 0);  ///< PL0F3
        constexpr uint32_t PL1F3 = (1U << 1);  ///< PL1F3
        constexpr uint32_t PL2F3 = (1U << 2);  ///< PL2F3
        constexpr uint32_t PL3F3 = (1U << 3);  ///< PL3F3
    }

    /// FR4 Register bits
    namespace fr4_bits {
        constexpr uint32_t PL0F4 = (1U << 0);  ///< PL0F4
        constexpr uint32_t PL1F4 = (1U << 1);  ///< PL1F4
        constexpr uint32_t PL2F4 = (1U << 2);  ///< PL2F4
        constexpr uint32_t PL3F4 = (1U << 3);  ///< PL3F4
    }

    /// FR5 Register bits
    namespace fr5_bits {
        constexpr uint32_t PL1F5 = (1U << 1);  ///< PL1F5
        constexpr uint32_t PL2F5 = (1U << 2);  ///< PL2F5
        constexpr uint32_t PL3F5 = (1U << 3);  ///< PL3F5
    }

    /// FR6 Register bits
    namespace fr6_bits {
        constexpr uint32_t PL3F6 = (1U << 3);  ///< PL3F6
    }

    /// OD Register bits
    namespace od_bits {
        constexpr uint32_t PL0OD = (1U << 0);  ///< PL0OD
        constexpr uint32_t PL1OD = (1U << 1);  ///< PL1OD
        constexpr uint32_t PL2OD = (1U << 2);  ///< PL2OD
        constexpr uint32_t PL3OD = (1U << 3);  ///< PL3OD
    }

    /// PUP Register bits
    namespace pup_bits {
        constexpr uint32_t PL0UP = (1U << 0);  ///< PL0UP
        constexpr uint32_t PL1UP = (1U << 1);  ///< PL1UP
        constexpr uint32_t PL2UP = (1U << 2);  ///< PL2UP
        constexpr uint32_t PL3UP = (1U << 3);  ///< PL3UP
    }

    /// PDN Register bits
    namespace pdn_bits {
        constexpr uint32_t PL0DN = (1U << 0);  ///< PL0DN
        constexpr uint32_t PL1DN = (1U << 1);  ///< PL1DN
        constexpr uint32_t PL2DN = (1U << 2);  ///< PL2DN
        constexpr uint32_t PL3DN = (1U << 3);  ///< PL3DN
    }

    /// IE Register bits
    namespace ie_bits {
        constexpr uint32_t PL0IE = (1U << 0);  ///< PL0IE
        constexpr uint32_t PL1IE = (1U << 1);  ///< PL1IE
        constexpr uint32_t PL2IE = (1U << 2);  ///< PL2IE
        constexpr uint32_t PL3IE = (1U << 3);  ///< PL3IE
    }

}

// ============================================================================
// TB0 Peripheral
// ============================================================================

namespace tb0 {
    /// Base addresses
    constexpr uint32_t TB0_BASE = 0x400C4000;

    /// TB0 Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - TB Enable Register
        volatile uint32_t RUN;  ///< Offset: 0x04 - TB RUN Register
        volatile uint32_t CR;  ///< Offset: 0x08 - TB Control Register
        volatile uint32_t MOD;  ///< Offset: 0x0C - TB Mode Register
        volatile uint32_t FFCR;  ///< Offset: 0x10 - TB Flip-Flop Control Register
        volatile uint32_t ST;  ///< Offset: 0x14 - TB Status Register
        volatile uint32_t IM;  ///< Offset: 0x18 - TB Interrupt Mask Register
        volatile uint32_t UC;  ///< Offset: 0x1C - TB Read Capture Register
        volatile uint32_t RG0;  ///< Offset: 0x20 - TB RG0 Timer Register
        volatile uint32_t RG1;  ///< Offset: 0x24 - TB RG1 Timer Register
        volatile uint32_t CP0;  ///< Offset: 0x28 - TB CP0 Capture Register
        volatile uint32_t CP1;  ///< Offset: 0x2C - TB CP1 Capture Register
        volatile uint32_t DMA;  ///< Offset: 0x30 - TB DMA Enable Register
    };

    /// Peripheral instances
    inline Registers* TB0 = reinterpret_cast<Registers*>(TB0_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t TBHALT = (1U << 6);  ///< TBHALT
        constexpr uint32_t TBEN = (1U << 7);  ///< TBEN
    }

    /// RUN Register bits
    namespace run_bits {
        constexpr uint32_t TBRUN = (1U << 0);  ///< TBRUN
        constexpr uint32_t TBPRUN = (1U << 2);  ///< TBPRUN
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t CSSEL = (1U << 0);  ///< CSSEL
        constexpr uint32_t TRGSEL = (1U << 1);  ///< TRGSEL
        constexpr uint32_t TBINSEL = (1U << 2);  ///< TBINSEL
        constexpr uint32_t I2TB = (1U << 3);  ///< I2TB
        constexpr uint32_t TBSYNC = (1U << 5);  ///< TBSYNC
        constexpr uint32_t TBWBF = (1U << 7);  ///< TBWBF
    }

    /// MOD Register bits
    namespace mod_bits {
        constexpr uint32_t TBCLK = (3 << 0);  ///< TBCLK
        constexpr uint32_t TBCLE = (1U << 3);  ///< TBCLE
        constexpr uint32_t TBCPM = (2 << 4);  ///< TBCPM
        constexpr uint32_t TBCP = (1U << 6);  ///< TBCP
    }

    /// FFCR Register bits
    namespace ffcr_bits {
        constexpr uint32_t TBFF0C = (2 << 0);  ///< TBFF0C
        constexpr uint32_t TBE0T1 = (1U << 2);  ///< TBE0T1
        constexpr uint32_t TBE1T1 = (1U << 3);  ///< TBE1T1
        constexpr uint32_t TBC0T1 = (1U << 4);  ///< TBC0T1
        constexpr uint32_t TBC1T1 = (1U << 5);  ///< TBC1T1
    }

    /// ST Register bits
    namespace st_bits {
        constexpr uint32_t INTTB0 = (1U << 0);  ///< INTTB0
        constexpr uint32_t INTTB1 = (1U << 1);  ///< INTTB1
        constexpr uint32_t INTTBOF = (1U << 2);  ///< INTTBOF
    }

    /// IM Register bits
    namespace im_bits {
        constexpr uint32_t TBIM0 = (1U << 0);  ///< TBIM0
        constexpr uint32_t TBIM1 = (1U << 1);  ///< TBIM1
        constexpr uint32_t TBIMOF = (1U << 2);  ///< TBIMOF
    }

    /// UC Register bits
    namespace uc_bits {
        constexpr uint32_t TBUC = (16 << 0);  ///< TBUC
    }

    /// RG0 Register bits
    namespace rg0_bits {
        constexpr uint32_t TBRG0 = (16 << 0);  ///< TBRG0
    }

    /// RG1 Register bits
    namespace rg1_bits {
        constexpr uint32_t TBRG1 = (16 << 0);  ///< TBRG1
    }

    /// CP0 Register bits
    namespace cp0_bits {
        constexpr uint32_t TBCP0 = (16 << 0);  ///< TBCP0
    }

    /// CP1 Register bits
    namespace cp1_bits {
        constexpr uint32_t TBCP1 = (16 << 0);  ///< TBCP1
    }

    /// DMA Register bits
    namespace dma_bits {
        constexpr uint32_t DMAEN0 = (1U << 0);  ///< DMAEN0
        constexpr uint32_t DMAEN1 = (1U << 1);  ///< DMAEN1
        constexpr uint32_t DMAEN2 = (1U << 2);  ///< DMAEN2
    }

}

// ============================================================================
// TB1 Peripheral
// ============================================================================

namespace tb1 {
    /// Base addresses
    constexpr uint32_t TB1_BASE = 0x400C4100;

    /// TB1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB1 = reinterpret_cast<Registers*>(TB1_BASE);

}

// ============================================================================
// TB2 Peripheral
// ============================================================================

namespace tb2 {
    /// Base addresses
    constexpr uint32_t TB2_BASE = 0x400C4200;

    /// TB2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB2 = reinterpret_cast<Registers*>(TB2_BASE);

}

// ============================================================================
// TB3 Peripheral
// ============================================================================

namespace tb3 {
    /// Base addresses
    constexpr uint32_t TB3_BASE = 0x400C4300;

    /// TB3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB3 = reinterpret_cast<Registers*>(TB3_BASE);

}

// ============================================================================
// TB4 Peripheral
// ============================================================================

namespace tb4 {
    /// Base addresses
    constexpr uint32_t TB4_BASE = 0x400C4400;

    /// TB4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB4 = reinterpret_cast<Registers*>(TB4_BASE);

}

// ============================================================================
// TB5 Peripheral
// ============================================================================

namespace tb5 {
    /// Base addresses
    constexpr uint32_t TB5_BASE = 0x400C4500;

    /// TB5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB5 = reinterpret_cast<Registers*>(TB5_BASE);

}

// ============================================================================
// TB6 Peripheral
// ============================================================================

namespace tb6 {
    /// Base addresses
    constexpr uint32_t TB6_BASE = 0x400C4600;

    /// TB6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB6 = reinterpret_cast<Registers*>(TB6_BASE);

}

// ============================================================================
// TB7 Peripheral
// ============================================================================

namespace tb7 {
    /// Base addresses
    constexpr uint32_t TB7_BASE = 0x400C4700;

    /// TB7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TB7 = reinterpret_cast<Registers*>(TB7_BASE);

}

// ============================================================================
// MT0 Peripheral
// ============================================================================

namespace mt0 {
    /// Base addresses
    constexpr uint32_t MT0_BASE = 0x400C7000;

    /// MT0 Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - MPT Enable Register
        volatile uint32_t RUN;  ///< Offset: 0x04 - MPT RUN Register
        volatile uint32_t TBCR;  ///< Offset: 0x08 - MPT Control Register
        volatile uint32_t TBMOD;  ///< Offset: 0x0C - MPT Mode Register
        volatile uint32_t TBFFCR;  ///< Offset: 0x10 - MPT Flip-Flop Control Register
        volatile uint32_t TBST;  ///< Offset: 0x14 - MPT Status Register
        volatile uint32_t TBIM;  ///< Offset: 0x18 - MPT Interrupt Mask Register
        volatile uint32_t TBUC;  ///< Offset: 0x1C - MPT Read Capture Register
        volatile uint32_t RG0;  ///< Offset: 0x20 - MPT RG0 Timer Register
        volatile uint32_t RG1;  ///< Offset: 0x24 - MPT RG1 Timer Register
        volatile uint32_t CP0;  ///< Offset: 0x28 - MPT CP0 Capture Register
        volatile uint32_t CP1;  ///< Offset: 0x2C - MPT CP1 Capture Register
        volatile uint32_t IGCR;  ///< Offset: 0x30 - IGBT Control Register
        volatile uint32_t IGRESTA;  ///< Offset: 0x34 - IGBT Timer Restart Register
        volatile uint32_t IGST;  ///< Offset: 0x38 - IGBT Timer Status Register
        volatile uint32_t IGICR;  ///< Offset: 0x3C - IGBT Input Control Register
        volatile uint32_t IGOCR;  ///< Offset: 0x40 - IGBT Output Control Register
        volatile uint32_t IGRG2;  ///< Offset: 0x44 - IGBT RG2 Timer Register
        volatile uint32_t IGRG3;  ///< Offset: 0x48 - IGBT RG3 Timer Register
        volatile uint32_t IGRG4;  ///< Offset: 0x4C - IGBT RG4 Timer Register
        volatile uint32_t IGEMGCR;  ///< Offset: 0x50 - IGBT EMG Control Register
        volatile uint32_t IGEMGST;  ///< Offset: 0x54 - IGBT EMG Status Register
    };

    /// Peripheral instances
    inline Registers* MT0 = reinterpret_cast<Registers*>(MT0_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t MTMODE = (1U << 0);  ///< MTMODE
        constexpr uint32_t MTHALT = (1U << 6);  ///< MTHALT
        constexpr uint32_t MTEN = (1U << 7);  ///< MTEN
    }

    /// RUN Register bits
    namespace run_bits {
        constexpr uint32_t MTRUN = (1U << 0);  ///< MTRUN
        constexpr uint32_t MTPRUN = (1U << 2);  ///< MTPRUN
    }

    /// TBCR Register bits
    namespace tbcr_bits {
        constexpr uint32_t MTTBCSSEL = (1U << 0);  ///< MTTBCSSEL
        constexpr uint32_t MTTBTRGSEL = (1U << 1);  ///< MTTBTRGSEL
        constexpr uint32_t MTI2TB = (1U << 3);  ///< MTI2TB
        constexpr uint32_t MTTBWBF = (1U << 7);  ///< MTTBWBF
    }

    /// TBMOD Register bits
    namespace tbmod_bits {
        constexpr uint32_t MTTBCLK = (2 << 0);  ///< MTTBCLK
        constexpr uint32_t MTTBCLE = (1U << 2);  ///< MTTBCLE
        constexpr uint32_t MTTBCPM = (2 << 3);  ///< MTTBCPM
        constexpr uint32_t MTTBCP = (1U << 5);  ///< MTTBCP
        constexpr uint32_t MTTBRSWR = (1U << 6);  ///< MTTBRSWR
    }

    /// TBFFCR Register bits
    namespace tbffcr_bits {
        constexpr uint32_t MTTBFF0C = (2 << 0);  ///< MTTBFF0C
        constexpr uint32_t MTTBE0T1 = (1U << 2);  ///< MTTBE0T1
        constexpr uint32_t MTTBE1T1 = (1U << 3);  ///< MTTBE1T1
        constexpr uint32_t MTTBC0T1 = (1U << 4);  ///< MTTBC0T1
        constexpr uint32_t MTTBC1T1 = (1U << 5);  ///< MTTBC1T1
    }

    /// TBST Register bits
    namespace tbst_bits {
        constexpr uint32_t MTTBINTTB0 = (1U << 0);  ///< MTTBINTTB0
        constexpr uint32_t MTTBINTTB1 = (1U << 1);  ///< MTTBINTTB1
        constexpr uint32_t MTTBINTTBOF = (1U << 2);  ///< MTTBINTTBOF
    }

    /// TBIM Register bits
    namespace tbim_bits {
        constexpr uint32_t MTTBIM0 = (1U << 0);  ///< MTTBIM0
        constexpr uint32_t MTTBIM1 = (1U << 1);  ///< MTTBIM1
        constexpr uint32_t MTTBIMOF = (1U << 2);  ///< MTTBIMOF
    }

    /// TBUC Register bits
    namespace tbuc_bits {
        constexpr uint32_t MTUC = (16 << 0);  ///< MTUC
    }

    /// RG0 Register bits
    namespace rg0_bits {
        constexpr uint32_t MTRG0 = (16 << 0);  ///< MTRG0
    }

    /// RG1 Register bits
    namespace rg1_bits {
        constexpr uint32_t MTRG1 = (16 << 0);  ///< MTRG1
    }

    /// CP0 Register bits
    namespace cp0_bits {
        constexpr uint32_t MTCP0 = (16 << 0);  ///< MTCP0
    }

    /// CP1 Register bits
    namespace cp1_bits {
        constexpr uint32_t MTCP1 = (16 << 0);  ///< MTCP1
    }

    /// IGCR Register bits
    namespace igcr_bits {
        constexpr uint32_t IGCLK = (2 << 0);  ///< IGCLK
        constexpr uint32_t IGSTA = (2 << 2);  ///< IGSTA
        constexpr uint32_t IGSTP = (2 << 4);  ///< IGSTP
        constexpr uint32_t IGSNGL = (1U << 6);  ///< IGSNGL
        constexpr uint32_t IGPRD = (2 << 8);  ///< IGPRD
        constexpr uint32_t IGIDIS = (1U << 10);  ///< IGIDIS
    }

    /// IGRESTA Register bits
    namespace igresta_bits {
        constexpr uint32_t IGRESTA = (1U << 0);  ///< IGRESTA
    }

    /// IGST Register bits
    namespace igst_bits {
        constexpr uint32_t IGST = (1U << 0);  ///< IGST
    }

    /// IGICR Register bits
    namespace igicr_bits {
        constexpr uint32_t IGNCSEL = (4 << 0);  ///< IGNCSEL
        constexpr uint32_t IGTRGSEL = (1U << 6);  ///< IGTRGSEL
        constexpr uint32_t IGTRGM = (1U << 7);  ///< IGTRGM
    }

    /// IGOCR Register bits
    namespace igocr_bits {
        constexpr uint32_t IGOEN0 = (1U << 0);  ///< IGOEN0
        constexpr uint32_t IGOEN1 = (1U << 1);  ///< IGOEN1
        constexpr uint32_t IGPOL0 = (1U << 4);  ///< IGPOL0
        constexpr uint32_t IGPOL1 = (1U << 5);  ///< IGPOL1
    }

    /// IGRG2 Register bits
    namespace igrg2_bits {
        constexpr uint32_t IGRG2 = (16 << 0);  ///< IGRG2
    }

    /// IGRG3 Register bits
    namespace igrg3_bits {
        constexpr uint32_t IGRG3 = (16 << 0);  ///< IGRG3
    }

    /// IGRG4 Register bits
    namespace igrg4_bits {
        constexpr uint32_t IGRG4 = (16 << 0);  ///< IGRG4
    }

    /// IGEMGCR Register bits
    namespace igemgcr_bits {
        constexpr uint32_t IGEMGEN = (1U << 0);  ///< IGEMGEN
        constexpr uint32_t IGEMGOC = (1U << 1);  ///< IGEMGOC
        constexpr uint32_t IGEMGRS = (1U << 2);  ///< IGEMGRS
        constexpr uint32_t IGEMGCNT = (4 << 4);  ///< IGEMGCNT
    }

    /// IGEMGST Register bits
    namespace igemgst_bits {
        constexpr uint32_t IGEMGST = (1U << 0);  ///< IGEMGST
        constexpr uint32_t IGEMGIN = (1U << 1);  ///< IGEMGIN
    }

}

// ============================================================================
// MT1 Peripheral
// ============================================================================

namespace mt1 {
    /// Base addresses
    constexpr uint32_t MT1_BASE = 0x400C7100;

    /// MT1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MT1 = reinterpret_cast<Registers*>(MT1_BASE);

}

// ============================================================================
// MT2 Peripheral
// ============================================================================

namespace mt2 {
    /// Base addresses
    constexpr uint32_t MT2_BASE = 0x400C7200;

    /// MT2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MT2 = reinterpret_cast<Registers*>(MT2_BASE);

}

// ============================================================================
// MT3 Peripheral
// ============================================================================

namespace mt3 {
    /// Base addresses
    constexpr uint32_t MT3_BASE = 0x400C7300;

    /// MT3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MT3 = reinterpret_cast<Registers*>(MT3_BASE);

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x400CC000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t SECR;  ///< Offset: 0x00 - RTC Second Column Register
        volatile uint32_t MINR;  ///< Offset: 0x01 - RTC Minute Column Register
        volatile uint32_t HOURR;  ///< Offset: 0x02 - RTC Hour Column Register
        volatile uint32_t DAYR;  ///< Offset: 0x04 - RTC Day of the Week Column Register
        volatile uint32_t DATER;  ///< Offset: 0x05 - RTC Day Column Register
        volatile uint32_t MONTHR_A;  ///< Offset: 0x06 - RTC Month Column Register
        volatile uint32_t MONTHR_B;  ///< Offset: 0x06 - RTC Month Column Register
        volatile uint32_t YEARR_A;  ///< Offset: 0x07 - RTC Year Column Register
        volatile uint32_t YEARR_B;  ///< Offset: 0x07 - RTC Year Column Register
        volatile uint32_t PAGER;  ///< Offset: 0x08 - RTC PAGE Register
        volatile uint32_t RESTR;  ///< Offset: 0x0C - RTC Reset Register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// SECR Register bits
    namespace secr_bits {
        constexpr uint32_t SE = (7 << 0);  ///< SE
    }

    /// MINR Register bits
    namespace minr_bits {
        constexpr uint32_t MI = (7 << 0);  ///< MI
    }

    /// HOURR Register bits
    namespace hourr_bits {
        constexpr uint32_t HO = (6 << 0);  ///< HO
    }

    /// DAYR Register bits
    namespace dayr_bits {
        constexpr uint32_t WE = (3 << 0);  ///< WE
    }

    /// DATER Register bits
    namespace dater_bits {
        constexpr uint32_t DA = (6 << 0);  ///< DA
    }

    /// MONTHR_A Register bits
    namespace monthr_a_bits {
        constexpr uint32_t MO = (5 << 0);  ///< MO
    }

    /// MONTHR_B Register bits
    namespace monthr_b_bits {
        constexpr uint32_t MO0 = (1U << 0);  ///< MO0
    }

    /// YEARR_A Register bits
    namespace yearr_a_bits {
        constexpr uint32_t YE = (8 << 0);  ///< YE
    }

    /// YEARR_B Register bits
    namespace yearr_b_bits {
        constexpr uint32_t LEAP = (2 << 0);  ///< LEAP
    }

    /// PAGER Register bits
    namespace pager_bits {
        constexpr uint32_t PAGE = (1U << 0);  ///< PAGE
        constexpr uint32_t ENAALM = (1U << 2);  ///< ENAALM
        constexpr uint32_t ENATMR = (1U << 3);  ///< ENATMR
        constexpr uint32_t ADJUST = (1U << 4);  ///< ADJUST
        constexpr uint32_t INTENA = (1U << 7);  ///< INTENA
    }

    /// RESTR Register bits
    namespace restr_bits {
        constexpr uint32_t DIS8HZ = (1U << 0);  ///< DIS8HZ
        constexpr uint32_t DIS4HZ = (1U << 1);  ///< DIS4HZ
        constexpr uint32_t DIS2HZ = (1U << 2);  ///< DIS2HZ
        constexpr uint32_t RSTALM = (1U << 4);  ///< RSTALM
        constexpr uint32_t RSTTMR = (1U << 5);  ///< RSTTMR
        constexpr uint32_t DIS16HZ = (1U << 6);  ///< DIS16HZ
        constexpr uint32_t DIS1HZ = (1U << 7);  ///< DIS1HZ
    }

}

// ============================================================================
// SBI0 Peripheral
// ============================================================================

namespace sbi0 {
    /// Base addresses
    constexpr uint32_t SBI0_BASE = 0x400E0000;

    /// SBI0 Register structure
    struct Registers {
        volatile uint32_t CR0;  ///< Offset: 0x00 - SBI Control Register 0
        volatile uint32_t CR1_A;  ///< Offset: 0x04 - SBI Control Register 1 (I2C Mode)
        volatile uint32_t CR1_B;  ///< Offset: 0x04 - SBI Control Register 1 (SIO Mode)
        volatile uint32_t DBR;  ///< Offset: 0x08 - SBI Data Buffer Register
        volatile uint32_t I2CAR;  ///< Offset: 0x0C - SBI I2C Bus Address Register
        volatile uint32_t CR2;  ///< Offset: 0x10 - SBI Control Register 2 (I2C Mode)
        volatile uint32_t SR;  ///< Offset: 0x10 - SBI Status Register (I2C Mode)
        volatile uint32_t BR0;  ///< Offset: 0x14 - SBI Baud Rate Register 0
    };

    /// Peripheral instances
    inline Registers* SBI0 = reinterpret_cast<Registers*>(SBI0_BASE);

    // Bit definitions
    /// CR0 Register bits
    namespace cr0_bits {
        constexpr uint32_t SBIEN = (1U << 7);  ///< SBIEN
    }

    /// CR1_A Register bits
    namespace cr1_a_bits {
        constexpr uint32_t SWRMON = (1U << 0);  ///< SWRMON
        constexpr uint32_t SCK = (3 << 0);  ///< SCK
        constexpr uint32_t ACK = (1U << 4);  ///< ACK
        constexpr uint32_t BC = (3 << 5);  ///< BC
    }

    /// CR1_B Register bits
    namespace cr1_b_bits {
        constexpr uint32_t SCK = (3 << 0);  ///< SCK
        constexpr uint32_t SIOM = (2 << 4);  ///< SIOM
        constexpr uint32_t SIOINH = (1U << 6);  ///< SIOINH
        constexpr uint32_t SIOS = (1U << 7);  ///< SIOS
    }

    /// DBR Register bits
    namespace dbr_bits {
        constexpr uint32_t DB = (8 << 0);  ///< DB
    }

    /// I2CAR Register bits
    namespace i2car_bits {
        constexpr uint32_t ALS = (1U << 0);  ///< ALS
        constexpr uint32_t SA = (7 << 1);  ///< SA
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t SWRST = (2 << 0);  ///< SWRST
        constexpr uint32_t SBIM = (2 << 2);  ///< SBIM
        constexpr uint32_t PIN = (1U << 4);  ///< PIN
        constexpr uint32_t BB = (1U << 5);  ///< BB
        constexpr uint32_t TRX = (1U << 6);  ///< TRX
        constexpr uint32_t MST = (1U << 7);  ///< MST
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t LRB = (1U << 0);  ///< LRB
        constexpr uint32_t ADO = (1U << 1);  ///< ADO
        constexpr uint32_t AAS = (1U << 2);  ///< AAS
        constexpr uint32_t AL = (1U << 3);  ///< AL
        constexpr uint32_t PIN = (1U << 4);  ///< PIN
        constexpr uint32_t BB = (1U << 5);  ///< BB
        constexpr uint32_t TRX = (1U << 6);  ///< TRX
        constexpr uint32_t MST = (1U << 7);  ///< MST
    }

    /// BR0 Register bits
    namespace br0_bits {
        constexpr uint32_t I2SBI = (1U << 6);  ///< I2SBI
    }

}

// ============================================================================
// SBI1 Peripheral
// ============================================================================

namespace sbi1 {
    /// Base addresses
    constexpr uint32_t SBI1_BASE = 0x400E0100;

    /// SBI1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SBI1 = reinterpret_cast<Registers*>(SBI1_BASE);

}

// ============================================================================
// SBI2 Peripheral
// ============================================================================

namespace sbi2 {
    /// Base addresses
    constexpr uint32_t SBI2_BASE = 0x400E0200;

    /// SBI2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SBI2 = reinterpret_cast<Registers*>(SBI2_BASE);

}

// ============================================================================
// SC0 Peripheral
// ============================================================================

namespace sc0 {
    /// Base addresses
    constexpr uint32_t SC0_BASE = 0x400E1000;

    /// SC0 Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - SC Enable Register
        volatile uint32_t BUF;  ///< Offset: 0x04 - SC Buffer Register
        volatile uint32_t CR;  ///< Offset: 0x08 - SC Control Register
        volatile uint32_t MOD0;  ///< Offset: 0x0C - SC Mode Control Register 0
        volatile uint32_t BRCR;  ///< Offset: 0x10 - SC Baud Rate Generator Control Register
        volatile uint32_t BRADD;  ///< Offset: 0x14 - SC Baud Rate Generator Control Register 2
        volatile uint32_t MOD1;  ///< Offset: 0x18 - SC Mode Control Register 1
        volatile uint32_t MOD2;  ///< Offset: 0x1C - SC Mode Control Register 2
        volatile uint32_t RFC;  ///< Offset: 0x20 - SC RX FIFO Configuration Register
        volatile uint32_t TFC;  ///< Offset: 0x24 - SC TX FIFO Configuration Register
        volatile uint32_t RST;  ///< Offset: 0x28 - SC RX FIFO Status Register
        volatile uint32_t TST;  ///< Offset: 0x2C - SC TX FIFO Status Register
        volatile uint32_t FCNF;  ///< Offset: 0x30 - SC FIFO Configuration Register
    };

    /// Peripheral instances
    inline Registers* SC0 = reinterpret_cast<Registers*>(SC0_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t SIOE = (1U << 0);  ///< SIOE
    }

    /// BUF Register bits
    namespace buf_bits {
        constexpr uint32_t TB_RB = (8 << 0);  ///< TB_RB
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t IOC = (1U << 0);  ///< IOC
        constexpr uint32_t SCLKS = (1U << 1);  ///< SCLKS
        constexpr uint32_t FERR = (1U << 2);  ///< FERR
        constexpr uint32_t PERR = (1U << 3);  ///< PERR
        constexpr uint32_t OERR = (1U << 4);  ///< OERR
        constexpr uint32_t PE = (1U << 5);  ///< PE
        constexpr uint32_t EVEN = (1U << 6);  ///< EVEN
        constexpr uint32_t RB8 = (1U << 7);  ///< RB8
    }

    /// MOD0 Register bits
    namespace mod0_bits {
        constexpr uint32_t SC = (2 << 0);  ///< SC
        constexpr uint32_t SM = (2 << 2);  ///< SM
        constexpr uint32_t WU = (1U << 4);  ///< WU
        constexpr uint32_t RXE = (1U << 5);  ///< RXE
        constexpr uint32_t CTSE = (1U << 6);  ///< CTSE
        constexpr uint32_t TB8 = (1U << 7);  ///< TB8
    }

    /// BRCR Register bits
    namespace brcr_bits {
        constexpr uint32_t BRS = (4 << 0);  ///< BRS
        constexpr uint32_t BRCK = (2 << 4);  ///< BRCK
        constexpr uint32_t BRADDE = (1U << 6);  ///< BRADDE
    }

    /// BRADD Register bits
    namespace bradd_bits {
        constexpr uint32_t BRK = (4 << 0);  ///< BRK
    }

    /// MOD1 Register bits
    namespace mod1_bits {
        constexpr uint32_t SINT = (3 << 1);  ///< SINT
        constexpr uint32_t TXE = (1U << 4);  ///< TXE
        constexpr uint32_t FDPX = (2 << 5);  ///< FDPX
        constexpr uint32_t I2SC = (1U << 7);  ///< I2SC
    }

    /// MOD2 Register bits
    namespace mod2_bits {
        constexpr uint32_t SWRST = (2 << 0);  ///< SWRST
        constexpr uint32_t WBUF = (1U << 2);  ///< WBUF
        constexpr uint32_t DRCHG = (1U << 3);  ///< DRCHG
        constexpr uint32_t SBLEN = (1U << 4);  ///< SBLEN
        constexpr uint32_t TXRUN = (1U << 5);  ///< TXRUN
        constexpr uint32_t RBFLL = (1U << 6);  ///< RBFLL
        constexpr uint32_t TBEMP = (1U << 7);  ///< TBEMP
    }

    /// RFC Register bits
    namespace rfc_bits {
        constexpr uint32_t RIL = (2 << 0);  ///< RIL
        constexpr uint32_t RFIS = (1U << 6);  ///< RFIS
        constexpr uint32_t RFCS = (1U << 7);  ///< RFCS
    }

    /// TFC Register bits
    namespace tfc_bits {
        constexpr uint32_t TIL = (2 << 0);  ///< TIL
        constexpr uint32_t TFIS = (1U << 6);  ///< TFIS
        constexpr uint32_t TFCS = (1U << 7);  ///< TFCS
    }

    /// RST Register bits
    namespace rst_bits {
        constexpr uint32_t RLVL = (3 << 0);  ///< RLVL
        constexpr uint32_t ROR = (1U << 7);  ///< ROR
    }

    /// TST Register bits
    namespace tst_bits {
        constexpr uint32_t TLVL = (3 << 0);  ///< TLVL
        constexpr uint32_t TUR = (1U << 7);  ///< TUR
    }

    /// FCNF Register bits
    namespace fcnf_bits {
        constexpr uint32_t CNFG = (1U << 0);  ///< CNFG
        constexpr uint32_t RXTXCNT = (1U << 1);  ///< RXTXCNT
        constexpr uint32_t RFIE = (1U << 2);  ///< RFIE
        constexpr uint32_t TFIE = (1U << 3);  ///< TFIE
        constexpr uint32_t RFST = (1U << 4);  ///< RFST
    }

}

// ============================================================================
// SC1 Peripheral
// ============================================================================

namespace sc1 {
    /// Base addresses
    constexpr uint32_t SC1_BASE = 0x400E1100;

    /// SC1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SC1 = reinterpret_cast<Registers*>(SC1_BASE);

}

// ============================================================================
// SC2 Peripheral
// ============================================================================

namespace sc2 {
    /// Base addresses
    constexpr uint32_t SC2_BASE = 0x400E1200;

    /// SC2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SC2 = reinterpret_cast<Registers*>(SC2_BASE);

}

// ============================================================================
// SC3 Peripheral
// ============================================================================

namespace sc3 {
    /// Base addresses
    constexpr uint32_t SC3_BASE = 0x400E1300;

    /// SC3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SC3 = reinterpret_cast<Registers*>(SC3_BASE);

}

// ============================================================================
// RMC Peripheral
// ============================================================================

namespace rmc {
    /// Base addresses
    constexpr uint32_t RMC_BASE = 0x400E7000;

    /// RMC Register structure
    struct Registers {
        volatile uint32_t EN;  ///< Offset: 0x00 - RMC Enable Register
        volatile uint32_t REN;  ///< Offset: 0x04 - RMC Receive Enable Register
        volatile uint32_t RBUF1;  ///< Offset: 0x08 - RMC Receive Data Buffer Register 1
        volatile uint32_t RBUF2;  ///< Offset: 0x0C - RMC Receive Data Buffer Register 2
        volatile uint32_t RBUF3;  ///< Offset: 0x10 - RMC Receive Data Buffer Register 3
        volatile uint32_t RCR1;  ///< Offset: 0x14 - RMC Receive Control Register 1
        volatile uint32_t RCR2;  ///< Offset: 0x18 - RMC Receive Control Register 2
        volatile uint32_t RCR3;  ///< Offset: 0x1C - RMC Receive Control Register 3
        volatile uint32_t RCR4;  ///< Offset: 0x20 - RMC Receive Control Register 4
        volatile uint32_t RSTAT;  ///< Offset: 0x24 - RMC Receive Status Register
        volatile uint32_t END1;  ///< Offset: 0x28 - RMC Receive End Bit Number Register 1
        volatile uint32_t END2;  ///< Offset: 0x2C - RMC Receive End Bit Number Register 2
        volatile uint32_t END3;  ///< Offset: 0x30 - RMC Receive End Bit Number Register 3
        volatile uint32_t FSSEL;  ///< Offset: 0x34 - RMC Frequency Selection Register
    };

    /// Peripheral instances
    inline Registers* RMC = reinterpret_cast<Registers*>(RMC_BASE);

    // Bit definitions
    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t RMCEN = (1U << 0);  ///< RMCEN
    }

    /// REN Register bits
    namespace ren_bits {
        constexpr uint32_t RMCREN = (1U << 0);  ///< RMCREN
    }

    /// RBUF1 Register bits
    namespace rbuf1_bits {
        constexpr uint32_t RMCRBUF = (32 << 0);  ///< RMCRBUF
    }

    /// RBUF2 Register bits
    namespace rbuf2_bits {
        constexpr uint32_t RMCRBUF = (32 << 0);  ///< RMCRBUF
    }

    /// RBUF3 Register bits
    namespace rbuf3_bits {
        constexpr uint32_t RMCRBUF = (8 << 0);  ///< RMCRBUF
    }

    /// RCR1 Register bits
    namespace rcr1_bits {
        constexpr uint32_t RMCLLMIN = (8 << 0);  ///< RMCLLMIN
        constexpr uint32_t RMCLLMAX = (8 << 8);  ///< RMCLLMAX
        constexpr uint32_t RMCLCMIN = (8 << 16);  ///< RMCLCMIN
        constexpr uint32_t RMCLCMAX = (8 << 24);  ///< RMCLCMAX
    }

    /// RCR2 Register bits
    namespace rcr2_bits {
        constexpr uint32_t RMCDMAX = (8 << 0);  ///< RMCDMAX
        constexpr uint32_t RMCLL = (8 << 8);  ///< RMCLL
        constexpr uint32_t RMCPHM = (1U << 24);  ///< RMCPHM
        constexpr uint32_t RMCLD = (1U << 25);  ///< RMCLD
        constexpr uint32_t RMCEDIEN = (1U << 30);  ///< RMCEDIEN
        constexpr uint32_t RMCLIEN = (1U << 31);  ///< RMCLIEN
    }

    /// RCR3 Register bits
    namespace rcr3_bits {
        constexpr uint32_t RMCDATL = (7 << 0);  ///< RMCDATL
        constexpr uint32_t RMCDATH = (7 << 8);  ///< RMCDATH
    }

    /// RCR4 Register bits
    namespace rcr4_bits {
        constexpr uint32_t RMCNC = (4 << 0);  ///< RMCNC
        constexpr uint32_t RMCPO = (1U << 7);  ///< RMCPO
    }

    /// RSTAT Register bits
    namespace rstat_bits {
        constexpr uint32_t RMCRNUM = (7 << 0);  ///< RMCRNUM
        constexpr uint32_t RMCRLDR = (1U << 7);  ///< RMCRLDR
        constexpr uint32_t RMCEDIF = (1U << 12);  ///< RMCEDIF
        constexpr uint32_t RMCDMAXIF = (1U << 13);  ///< RMCDMAXIF
        constexpr uint32_t RMCLOIF = (1U << 14);  ///< RMCLOIF
        constexpr uint32_t RMCRLIF = (1U << 15);  ///< RMCRLIF
    }

    /// END1 Register bits
    namespace end1_bits {
        constexpr uint32_t RMCEND1 = (7 << 0);  ///< RMCEND1
    }

    /// END2 Register bits
    namespace end2_bits {
        constexpr uint32_t RMCEND2 = (7 << 0);  ///< RMCEND2
    }

    /// END3 Register bits
    namespace end3_bits {
        constexpr uint32_t RMCEND3 = (7 << 0);  ///< RMCEND3
    }

    /// FSSEL Register bits
    namespace fssel_bits {
        constexpr uint32_t RMCCLK = (1U << 0);  ///< RMCCLK
    }

}

// ============================================================================
// OFD Peripheral
// ============================================================================

namespace ofd {
    /// Base addresses
    constexpr uint32_t OFD_BASE = 0x400F1000;

    /// OFD Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - OFD Control Register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - OFD Control Register 2
        volatile uint32_t MN0;  ///< Offset: 0x08 - OFD Lower Detection Frequency Setting Register
        volatile uint32_t MN1;  ///< Offset: 0x0C - OFD Lower Detection Frequency Setting Register
        volatile uint32_t MX0;  ///< Offset: 0x10 - OFD Higher Detection Frequency Setting Register
        volatile uint32_t MX1;  ///< Offset: 0x14 - OFD Higher Detection Frequency Setting Register
        volatile uint32_t RST;  ///< Offset: 0x18 - OFD Reset Enable Control Register
        volatile uint32_t STAT;  ///< Offset: 0x1C - OFD Status Register
        volatile uint32_t MON;  ///< Offset: 0x20 - OFD
    };

    /// Peripheral instances
    inline Registers* OFD = reinterpret_cast<Registers*>(OFD_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t OFDWEN = (8 << 0);  ///< OFDWEN
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t OFDEN = (8 << 0);  ///< OFDEN
    }

    /// MN0 Register bits
    namespace mn0_bits {
        constexpr uint32_t OFDMN0 = (9 << 0);  ///< OFDMN0
    }

    /// MN1 Register bits
    namespace mn1_bits {
        constexpr uint32_t OFDMN1 = (9 << 0);  ///< OFDMN1
    }

    /// MX0 Register bits
    namespace mx0_bits {
        constexpr uint32_t OFDMX0 = (9 << 0);  ///< OFDMX0
    }

    /// MX1 Register bits
    namespace mx1_bits {
        constexpr uint32_t OFDMX1 = (9 << 0);  ///< OFDMX1
    }

    /// RST Register bits
    namespace rst_bits {
        constexpr uint32_t OFDRSTEN = (1U << 0);  ///< OFDRSTEN
    }

    /// STAT Register bits
    namespace stat_bits {
        constexpr uint32_t FRQERR = (1U << 0);  ///< FRQERR
        constexpr uint32_t OFDBUSY = (1U << 1);  ///< OFDBUSY
    }

    /// MON Register bits
    namespace mon_bits {
        constexpr uint32_t OFDMON = (1U << 0);  ///< OFDMON
    }

}

// ============================================================================
// WD Peripheral
// ============================================================================

namespace wd {
    /// Base addresses
    constexpr uint32_t WD_BASE = 0x400F2000;

    /// WD Register structure
    struct Registers {
        volatile uint32_t MOD;  ///< Offset: 0x00 - WD Mode Register
        volatile uint32_t CR;  ///< Offset: 0x04 - WD Control Register
    };

    /// Peripheral instances
    inline Registers* WD = reinterpret_cast<Registers*>(WD_BASE);

    // Bit definitions
    /// MOD Register bits
    namespace mod_bits {
        constexpr uint32_t RESCR = (1U << 1);  ///< RESCR
        constexpr uint32_t I2WDT = (1U << 2);  ///< I2WDT
        constexpr uint32_t WDTP = (3 << 4);  ///< WDTP
        constexpr uint32_t WDTE = (1U << 7);  ///< WDTE
    }

}

// ============================================================================
// CG Peripheral
// ============================================================================

namespace cg {
    /// Base addresses
    constexpr uint32_t CG_BASE = 0x400F3000;

    /// CG Register structure
    struct Registers {
        volatile uint32_t SYSCR;  ///< Offset: 0x00 - System Control Register
        volatile uint32_t OSCCR;  ///< Offset: 0x04 - Oscillation Control Register
        volatile uint32_t STBYCR;  ///< Offset: 0x08 - Standby Control Register
        volatile uint32_t PLLSEL;  ///< Offset: 0x0C - PLL Selection Register
        volatile uint32_t PCKSTP;  ///< Offset: 0x18 - Peripheral Clock Stop Register
        volatile uint32_t PROTECT;  ///< Offset: 0x3C - Protect Register
        volatile uint32_t IMCGA;  ///< Offset: 0x40 - CG Interrupt Mode Control Register A
        volatile uint32_t IMCGB;  ///< Offset: 0x44 - CG Interrupt Mode Control Register B
        volatile uint32_t IMCGC;  ///< Offset: 0x48 - CG Interrupt Mode Control Register C
        volatile uint32_t IMCGD;  ///< Offset: 0x4C - CG Interrupt Mode Control Register D
        volatile uint32_t ICRCG;  ///< Offset: 0x60 - CG Interrupt Request Clear Register
        volatile uint32_t RSTFLG;  ///< Offset: 0x64 - Reset Flag Register
        volatile uint32_t NMIFLG;  ///< Offset: 0x68 - NMI Flag Register
    };

    /// Peripheral instances
    inline Registers* CG = reinterpret_cast<Registers*>(CG_BASE);

    // Bit definitions
    /// SYSCR Register bits
    namespace syscr_bits {
        constexpr uint32_t GEAR = (3 << 0);  ///< GEAR
        constexpr uint32_t PRCK = (3 << 8);  ///< PRCK
        constexpr uint32_t FPSEL = (1U << 12);  ///< FPSEL
        constexpr uint32_t SCOSEL = (2 << 16);  ///< SCOSEL
        constexpr uint32_t FCSTOP = (1U << 20);  ///< FCSTOP
    }

    /// OSCCR Register bits
    namespace osccr_bits {
        constexpr uint32_t WUEON = (1U << 0);  ///< WUEON
        constexpr uint32_t WUEF = (1U << 1);  ///< WUEF
        constexpr uint32_t PLLON = (1U << 2);  ///< PLLON
        constexpr uint32_t WUPSEL1 = (1U << 3);  ///< WUPSEL1
        constexpr uint32_t XEN1 = (1U << 8);  ///< XEN1
        constexpr uint32_t XTEN = (1U << 9);  ///< XTEN
        constexpr uint32_t XEN3 = (1U << 10);  ///< XEN3
        constexpr uint32_t DRVOSCH = (1U << 12);  ///< DRVOSCH
        constexpr uint32_t DRVOSCL = (1U << 13);  ///< DRVOSCL
        constexpr uint32_t WUPTL = (2 << 14);  ///< WUPTL
        constexpr uint32_t XEN2 = (1U << 16);  ///< XEN2
        constexpr uint32_t OSCSEL = (1U << 17);  ///< OSCSEL
        constexpr uint32_t EHOSCSEL = (1U << 18);  ///< EHOSCSEL
        constexpr uint32_t WUPSEL2 = (1U << 19);  ///< WUPSEL2
        constexpr uint32_t WUPT = (12 << 20);  ///< WUPT
    }

    /// STBYCR Register bits
    namespace stbycr_bits {
        constexpr uint32_t STBY = (3 << 0);  ///< STBY
        constexpr uint32_t DRVE = (1U << 16);  ///< DRVE
        constexpr uint32_t PTKEEP = (1U << 17);  ///< PTKEEP
    }

    /// PLLSEL Register bits
    namespace pllsel_bits {
        constexpr uint32_t PLLSEL = (1U << 0);  ///< PLLSEL
        constexpr uint32_t PLLSET = (15 << 1);  ///< PLLSET
    }

    /// PCKSTP Register bits
    namespace pckstp_bits {
        constexpr uint32_t USBDSTP = (1U << 0);  ///< USBDSTP
        constexpr uint32_t USBHSTP = (1U << 1);  ///< USBHSTP
        constexpr uint32_t CANSTP = (1U << 2);  ///< CANSTP
        constexpr uint32_t EMSTP = (1U << 3);  ///< EMSTP
    }

    /// PROTECT Register bits
    namespace protect_bits {
        constexpr uint32_t CGPROTECT = (8 << 0);  ///< CGPROTECT
    }

    /// IMCGA Register bits
    namespace imcga_bits {
        constexpr uint32_t INT0EN = (1U << 0);  ///< INT0EN
        constexpr uint32_t EMST0 = (2 << 2);  ///< EMST0
        constexpr uint32_t EMCG0 = (3 << 4);  ///< EMCG0
        constexpr uint32_t INT1EN = (1U << 8);  ///< INT1EN
        constexpr uint32_t EMST1 = (2 << 10);  ///< EMST1
        constexpr uint32_t EMCG1 = (3 << 12);  ///< EMCG1
        constexpr uint32_t INT2EN = (1U << 16);  ///< INT2EN
        constexpr uint32_t EMST2 = (2 << 18);  ///< EMST2
        constexpr uint32_t EMCG2 = (3 << 20);  ///< EMCG2
        constexpr uint32_t INT3EN = (1U << 24);  ///< INT3EN
        constexpr uint32_t EMST3 = (2 << 26);  ///< EMST3
        constexpr uint32_t EMCG3 = (3 << 28);  ///< EMCG3
    }

    /// IMCGB Register bits
    namespace imcgb_bits {
        constexpr uint32_t INT4EN = (1U << 0);  ///< INT4EN
        constexpr uint32_t EMST4 = (2 << 2);  ///< EMST4
        constexpr uint32_t EMCG4 = (3 << 4);  ///< EMCG4
        constexpr uint32_t INT5EN = (1U << 8);  ///< INT5EN
        constexpr uint32_t EMST5 = (2 << 10);  ///< EMST5
        constexpr uint32_t EMCG5 = (3 << 12);  ///< EMCG5
        constexpr uint32_t INT6EN = (1U << 16);  ///< INT6EN
        constexpr uint32_t EMST6 = (2 << 18);  ///< EMST6
        constexpr uint32_t EMCG6 = (3 << 20);  ///< EMCG6
        constexpr uint32_t INT7EN = (1U << 24);  ///< INT7EN
        constexpr uint32_t EMST7 = (2 << 26);  ///< EMST7
        constexpr uint32_t EMCG7 = (3 << 28);  ///< EMCG7
    }

    /// IMCGC Register bits
    namespace imcgc_bits {
        constexpr uint32_t INT8EN = (1U << 0);  ///< INT8EN
        constexpr uint32_t EMST8 = (2 << 2);  ///< EMST8
        constexpr uint32_t EMCG8 = (3 << 4);  ///< EMCG8
        constexpr uint32_t INT9EN = (1U << 8);  ///< INT9EN
        constexpr uint32_t EMST9 = (2 << 10);  ///< EMST9
        constexpr uint32_t EMCG9 = (3 << 12);  ///< EMCG9
        constexpr uint32_t INTAEN = (1U << 16);  ///< INTAEN
        constexpr uint32_t EMSTA = (2 << 18);  ///< EMSTA
        constexpr uint32_t EMCGA = (3 << 20);  ///< EMCGA
        constexpr uint32_t INTBEN = (1U << 24);  ///< INTBEN
        constexpr uint32_t EMSTB = (2 << 26);  ///< EMSTB
        constexpr uint32_t EMCGB = (3 << 28);  ///< EMCGB
    }

    /// IMCGD Register bits
    namespace imcgd_bits {
        constexpr uint32_t INTUSBWKUPEN = (1U << 0);  ///< INTUSBWKUPEN
        constexpr uint32_t EMSTUSBWKUP = (2 << 2);  ///< EMSTUSBWKUP
        constexpr uint32_t EMCGUSBWKUP = (3 << 4);  ///< EMCGUSBWKUP
        constexpr uint32_t INTDEN = (1U << 8);  ///< INTDEN
        constexpr uint32_t EMSTD = (2 << 10);  ///< EMSTD
        constexpr uint32_t EMCGD = (3 << 12);  ///< EMCGD
        constexpr uint32_t INTRTCEN = (1U << 16);  ///< INTRTCEN
        constexpr uint32_t EMSTRTC = (2 << 18);  ///< EMSTRTC
        constexpr uint32_t EMCGRTC = (3 << 20);  ///< EMCGRTC
        constexpr uint32_t INTRMCRXEN = (1U << 24);  ///< INTRMCRXEN
        constexpr uint32_t EMSTRMCRX = (2 << 26);  ///< EMSTRMCRX
        constexpr uint32_t EMCGRMCRX = (3 << 28);  ///< EMCGRMCRX
    }

    /// ICRCG Register bits
    namespace icrcg_bits {
        constexpr uint32_t ICRCG = (5 << 0);  ///< ICRCG
    }

    /// RSTFLG Register bits
    namespace rstflg_bits {
        constexpr uint32_t PONRSTF = (1U << 0);  ///< PONRSTF
        constexpr uint32_t PINRSTF = (1U << 1);  ///< PINRSTF
        constexpr uint32_t WDTRSTF = (1U << 2);  ///< WDTRSTF
        constexpr uint32_t STOP2RSTF = (1U << 3);  ///< STOP2RSTF
        constexpr uint32_t DBGRSTF = (1U << 4);  ///< DBGRSTF
        constexpr uint32_t OFDRSTF = (1U << 5);  ///< OFDRSTF
        constexpr uint32_t LVDRSTF = (1U << 6);  ///< LVDRSTF
    }

    /// NMIFLG Register bits
    namespace nmiflg_bits {
        constexpr uint32_t NMIFLG0 = (1U << 0);  ///< NMIFLG0
        constexpr uint32_t NMIFLG1 = (1U << 1);  ///< NMIFLG1
        constexpr uint32_t NMIFLG2 = (1U << 2);  ///< NMIFLG2
        constexpr uint32_t NMIFLG3 = (1U << 3);  ///< NMIFLG3
    }

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USBPLL_BASE = 0x400F3100;

    /// USB Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - USB PLL Control Register
        volatile uint32_t EN;  ///< Offset: 0x04 - USB PLL Enable Register
        volatile uint32_t SEL;  ///< Offset: 0x08 - USB PLL Select Register
    };

    /// Peripheral instances
    inline Registers* USBPLL = reinterpret_cast<Registers*>(USBPLL_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t USBPLLON = (1U << 0);  ///< USBPLLON
    }

    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t USBDEN = (1U << 0);  ///< USBDEN
        constexpr uint32_t USBHEN = (1U << 1);  ///< USBHEN
    }

    /// SEL Register bits
    namespace sel_bits {
        constexpr uint32_t USBPLLSEL = (1U << 0);  ///< USBPLLSEL
        constexpr uint32_t USBPLLSET = (15 << 1);  ///< USBPLLSET
    }

}

// ============================================================================
// TRMOSC Peripheral
// ============================================================================

namespace trmosc {
    /// Base addresses
    constexpr uint32_t TRMOSC_BASE = 0x400F3200;

    /// TRMOSC Register structure
    struct Registers {
        volatile uint32_t PRO;  ///< Offset: 0x00 - Protection Register
        volatile uint32_t EN;  ///< Offset: 0x04 - Enable Register
        volatile uint32_t INIT;  ///< Offset: 0x08 - Initial Trimming Level Monitor Register
        volatile uint32_t SET;  ///< Offset: 0x0C - Trimming Level Setting Register
    };

    /// Peripheral instances
    inline Registers* TRMOSC = reinterpret_cast<Registers*>(TRMOSC_BASE);

    // Bit definitions
    /// PRO Register bits
    namespace pro_bits {
        constexpr uint32_t PROTECT = (8 << 0);  ///< PROTECT
    }

    /// EN Register bits
    namespace en_bits {
        constexpr uint32_t TRIMEN = (1U << 0);  ///< TRIMEN
    }

    /// INIT Register bits
    namespace init_bits {
        constexpr uint32_t TRIMINITF = (4 << 0);  ///< TRIMINITF
        constexpr uint32_t TRIMINITC = (6 << 8);  ///< TRIMINITC
    }

    /// SET Register bits
    namespace set_bits {
        constexpr uint32_t TRIMSETF = (4 << 0);  ///< TRIMSETF
        constexpr uint32_t TRIMSETC = (6 << 8);  ///< TRIMSETC
    }

}

// ============================================================================
// LVD Peripheral
// ============================================================================

namespace lvd {
    /// Base addresses
    constexpr uint32_t LVD_BASE = 0x400F4000;

    /// LVD Register structure
    struct Registers {
        volatile uint32_t RCR;  ///< Offset: 0x00 - LVD-RESET Control Register
        volatile uint32_t ICR;  ///< Offset: 0x04 - LVD-NMI Control Register
        volatile uint32_t SR;  ///< Offset: 0x08 - LVD Status Control Register
    };

    /// Peripheral instances
    inline Registers* LVD = reinterpret_cast<Registers*>(LVD_BASE);

    // Bit definitions
    /// RCR Register bits
    namespace rcr_bits {
        constexpr uint32_t LVDEN1 = (1U << 0);  ///< LVDEN1
        constexpr uint32_t LVDLVL1 = (3 << 1);  ///< LVDLVL1
        constexpr uint32_t LVDRSTEN = (1U << 5);  ///< LVDRSTEN
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t LVDEN2 = (1U << 0);  ///< LVDEN2
        constexpr uint32_t LVDLVL2 = (3 << 1);  ///< LVDLVL2
        constexpr uint32_t INTSEL = (1U << 4);  ///< INTSEL
        constexpr uint32_t LVDINTEN = (1U << 5);  ///< LVDINTEN
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t LVDST1 = (1U << 0);  ///< LVDST1
        constexpr uint32_t LVDST2 = (1U << 1);  ///< LVDST2
    }

}

// ============================================================================
// MTPD Peripheral
// ============================================================================

namespace mtpd {
    /// Base addresses
    constexpr uint32_t MTPD_BASE = 0x400F6000;

    /// MTPD Register structure
    struct Registers {
        volatile uint32_t MDEN;  ///< Offset: 0x00 - PMD Enable Register
        volatile uint32_t PORTMD;  ///< Offset: 0x04 - Port Output Mode Register
        volatile uint32_t MDCR;  ///< Offset: 0x08 - PMD Control Register
        volatile uint32_t CNTSTA;  ///< Offset: 0x0C - PWM Counter Status Register
        volatile uint32_t MDCNT;  ///< Offset: 0x10 - PWM Counter Register
        volatile uint32_t MDPRD;  ///< Offset: 0x14 - PWM Period Register
        volatile uint32_t CMPU;  ///< Offset: 0x18 - PWM Compare Register
        volatile uint32_t CMPV;  ///< Offset: 0x1C - PWM Compare Register
        volatile uint32_t CMPW;  ///< Offset: 0x20 - PWM Compare Register
        volatile uint32_t MDOUT;  ///< Offset: 0x28 - PMD Output Control Register
        volatile uint32_t MDPOT;  ///< Offset: 0x2C - PMD Output Setting Register
        volatile uint32_t EMGREL;  ///< Offset: 0x30 - EMG Release Register
        volatile uint32_t EMGCR;  ///< Offset: 0x34 - EMG Control Register
        volatile uint32_t EMGSTA;  ///< Offset: 0x38 - EMG Status Register
        volatile uint32_t DTR;  ///< Offset: 0x44 - Dead Time Register
    };

    /// Peripheral instances
    inline Registers* MTPD = reinterpret_cast<Registers*>(MTPD_BASE);

    // Bit definitions
    /// MDEN Register bits
    namespace mden_bits {
        constexpr uint32_t PWMEN = (1U << 0);  ///< PWMEN
    }

    /// PORTMD Register bits
    namespace portmd_bits {
        constexpr uint32_t PORTMD = (1U << 0);  ///< PORTMD
    }

    /// MDCR Register bits
    namespace mdcr_bits {
        constexpr uint32_t PWMMD = (1U << 0);  ///< PWMMD
        constexpr uint32_t INTPRD = (2 << 1);  ///< INTPRD
        constexpr uint32_t PINT = (1U << 3);  ///< PINT
        constexpr uint32_t DTYMD = (1U << 4);  ///< DTYMD
        constexpr uint32_t SYNTMD = (1U << 5);  ///< SYNTMD
        constexpr uint32_t PWMCK = (1U << 6);  ///< PWMCK
    }

    /// CNTSTA Register bits
    namespace cntsta_bits {
        constexpr uint32_t UPDWN = (1U << 0);  ///< UPDWN
    }

    /// MDCNT Register bits
    namespace mdcnt_bits {
        constexpr uint32_t MDCNT = (16 << 0);  ///< MDCNT
    }

    /// MDPRD Register bits
    namespace mdprd_bits {
        constexpr uint32_t MDPRD = (16 << 0);  ///< MDPRD
    }

    /// CMPU Register bits
    namespace cmpu_bits {
        constexpr uint32_t CMPU = (16 << 0);  ///< CMPU
    }

    /// CMPV Register bits
    namespace cmpv_bits {
        constexpr uint32_t CMPV = (16 << 0);  ///< CMPV
    }

    /// CMPW Register bits
    namespace cmpw_bits {
        constexpr uint32_t CMPW = (16 << 0);  ///< CMPW
    }

    /// MDOUT Register bits
    namespace mdout_bits {
        constexpr uint32_t UOC = (2 << 0);  ///< UOC
        constexpr uint32_t VOC = (2 << 2);  ///< VOC
        constexpr uint32_t WOC = (2 << 4);  ///< WOC
        constexpr uint32_t UPWM = (1U << 8);  ///< UPWM
        constexpr uint32_t VPWM = (1U << 9);  ///< VPWM
        constexpr uint32_t WPWM = (1U << 10);  ///< WPWM
    }

    /// MDPOT Register bits
    namespace mdpot_bits {
        constexpr uint32_t PSYNCS = (2 << 0);  ///< PSYNCS
        constexpr uint32_t POLL = (1U << 2);  ///< POLL
        constexpr uint32_t POLH = (1U << 3);  ///< POLH
    }

    /// EMGREL Register bits
    namespace emgrel_bits {
        constexpr uint32_t EMGREL = (8 << 0);  ///< EMGREL
    }

    /// EMGCR Register bits
    namespace emgcr_bits {
        constexpr uint32_t EMGEN = (1U << 0);  ///< EMGEN
        constexpr uint32_t EMGRS = (1U << 1);  ///< EMGRS
        constexpr uint32_t EMGMD = (2 << 3);  ///< EMGMD
        constexpr uint32_t INHEN = (1U << 5);  ///< INHEN
        constexpr uint32_t EMGCNT = (4 << 8);  ///< EMGCNT
    }

    /// EMGSTA Register bits
    namespace emgsta_bits {
        constexpr uint32_t EMGST = (1U << 0);  ///< EMGST
        constexpr uint32_t EMGI = (1U << 1);  ///< EMGI
    }

    /// DTR Register bits
    namespace dtr_bits {
        constexpr uint32_t DTR = (8 << 0);  ///< DTR
    }

}

// ============================================================================
// EN Peripheral
// ============================================================================

namespace en {
    /// Base addresses
    constexpr uint32_t EN_BASE = 0x400F7000;

    /// EN Register structure
    struct Registers {
        volatile uint32_t TNCR;  ///< Offset: 0x00 - Encoder Input Control Register
        volatile uint32_t RELOAD;  ///< Offset: 0x04 - Encoder Counter Reload Register
        volatile uint32_t INT;  ///< Offset: 0x08 - Encoder Compare Register
        volatile uint32_t CNT;  ///< Offset: 0x0C - Encoder Counter Register
    };

    /// Peripheral instances
    inline Registers* EN = reinterpret_cast<Registers*>(EN_BASE);

    // Bit definitions
    /// TNCR Register bits
    namespace tncr_bits {
        constexpr uint32_t ENDEV = (3 << 0);  ///< ENDEV
        constexpr uint32_t INTEN = (1U << 3);  ///< INTEN
        constexpr uint32_t NR = (2 << 4);  ///< NR
        constexpr uint32_t ENRUN = (1U << 6);  ///< ENRUN
        constexpr uint32_t ZEN = (1U << 7);  ///< ZEN
        constexpr uint32_t CMPEN = (1U << 8);  ///< CMPEN
        constexpr uint32_t ZESEL = (1U << 9);  ///< ZESEL
        constexpr uint32_t ENCLR = (1U << 10);  ///< ENCLR
        constexpr uint32_t SFTCAP = (1U << 11);  ///< SFTCAP
        constexpr uint32_t ZDET = (1U << 12);  ///< ZDET
        constexpr uint32_t UD = (1U << 13);  ///< UD
        constexpr uint32_t REVERR = (1U << 14);  ///< REVERR
        constexpr uint32_t CMP = (1U << 15);  ///< CMP
        constexpr uint32_t P3EN = (1U << 16);  ///< P3EN
        constexpr uint32_t MODE = (2 << 17);  ///< MODE
    }

    /// RELOAD Register bits
    namespace reload_bits {
        constexpr uint32_t RELOAD = (16 << 0);  ///< RELOAD
    }

    /// INT Register bits
    namespace int_bits {
        constexpr uint32_t INT = (24 << 0);  ///< INT
    }

    /// CNT Register bits
    namespace cnt_bits {
        constexpr uint32_t CNT = (24 << 0);  ///< CNT
    }

}

// ============================================================================
// FC Peripheral
// ============================================================================

namespace fc {
    /// Base addresses
    constexpr uint32_t FC_BASE = 0x41FFF000;

    /// FC Register structure
    struct Registers {
        volatile uint32_t SECBIT;  ///< Offset: 0x10 - FC Security Bit Register
        volatile uint32_t FLCS;  ///< Offset: 0x20 - FC Flash Control Register
    };

    /// Peripheral instances
    inline Registers* FC = reinterpret_cast<Registers*>(FC_BASE);

    // Bit definitions
    /// SECBIT Register bits
    namespace secbit_bits {
        constexpr uint32_t SECBIT = (1U << 0);  ///< SECBIT
    }

    /// FLCS Register bits
    namespace flcs_bits {
        constexpr uint32_t RDY_BSY = (1U << 0);  ///< RDY_BSY
        constexpr uint32_t BLPRO = (6 << 16);  ///< BLPRO
    }

}


} // namespace alloy::generated::m368

#endif // ALLOY_GENERATED_M368_PERIPHERALS_HPP