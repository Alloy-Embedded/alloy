/// Auto-generated code for MB9AF1AxM
/// Generated by Alloy Code Generator
/// Source: fujitsu_mb9af1axm.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:01:02
#ifndef ALLOY_GENERATED_MB9AF1AXM_PERIPHERALS_HPP
#define ALLOY_GENERATED_MB9AF1AXM_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::mb9af1axm {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_flash = true;
    constexpr uint32_t num_flash_instances = 1;
    constexpr bool has_crg = true;
    constexpr uint32_t num_crg_instances = 1;
    constexpr bool has_crtrim = true;
    constexpr uint32_t num_crtrim_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 2;
    constexpr bool has_mft0 = true;
    constexpr uint32_t num_mft0_instances = 1;
    constexpr bool has_btiosel03 = true;
    constexpr uint32_t num_btiosel03_instances = 1;
    constexpr bool has_btiosel47 = true;
    constexpr uint32_t num_btiosel47_instances = 1;
    constexpr bool has_sbssr = true;
    constexpr uint32_t num_sbssr_instances = 1;
    constexpr bool has_bt0 = true;
    constexpr uint32_t num_bt0_instances = 1;
    constexpr bool has_bt1 = true;
    constexpr uint32_t num_bt1_instances = 1;
    constexpr bool has_bt2 = true;
    constexpr uint32_t num_bt2_instances = 1;
    constexpr bool has_bt3 = true;
    constexpr uint32_t num_bt3_instances = 1;
    constexpr bool has_bt4 = true;
    constexpr uint32_t num_bt4_instances = 1;
    constexpr bool has_bt5 = true;
    constexpr uint32_t num_bt5_instances = 1;
    constexpr bool has_bt6 = true;
    constexpr uint32_t num_bt6_instances = 1;
    constexpr bool has_bt7 = true;
    constexpr uint32_t num_bt7_instances = 1;
    constexpr bool has_mft = true;
    constexpr uint32_t num_mft_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 1;
    constexpr bool has_dac = true;
    constexpr uint32_t num_dac_instances = 1;
    constexpr bool has_exti = true;
    constexpr uint32_t num_exti_instances = 1;
    constexpr bool has_intreq = true;
    constexpr uint32_t num_intreq_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 1;
    constexpr bool has_hdmicec0 = true;
    constexpr uint32_t num_hdmicec0_instances = 1;
    constexpr bool has_hdmicec1 = true;
    constexpr uint32_t num_hdmicec1_instances = 1;
    constexpr bool has_lvd = true;
    constexpr uint32_t num_lvd_instances = 1;
    constexpr bool has_ds = true;
    constexpr uint32_t num_ds_instances = 1;
    constexpr bool has_mfs0 = true;
    constexpr uint32_t num_mfs0_instances = 1;
    constexpr bool has_mfs1 = true;
    constexpr uint32_t num_mfs1_instances = 1;
    constexpr bool has_mfs2 = true;
    constexpr uint32_t num_mfs2_instances = 1;
    constexpr bool has_mfs3 = true;
    constexpr uint32_t num_mfs3_instances = 1;
    constexpr bool has_mfs4 = true;
    constexpr uint32_t num_mfs4_instances = 1;
    constexpr bool has_mfs5 = true;
    constexpr uint32_t num_mfs5_instances = 1;
    constexpr bool has_mfs6 = true;
    constexpr uint32_t num_mfs6_instances = 1;
    constexpr bool has_mfs7 = true;
    constexpr uint32_t num_mfs7_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct flash_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crtrim_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct mft0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct btiosel03_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct btiosel47_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sbssr_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt4_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt5_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt6_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt7_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mft_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dac_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct exti_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct intreq_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct hdmicec0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct hdmicec1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct lvd_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ds_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs4_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs5_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs6_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs7_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 1;
    constexpr uint32_t max_gpio_pins = 16;  // 16 pins per port

    // USART-specific traits
}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_IF_BASE = 0x40000000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t FASZR;  ///< Offset: 0x00 - Flash Access Size Register
        volatile uint32_t FSTR;  ///< Offset: 0x08 - Flash Status Register
        volatile uint32_t FSYNDN;  ///< Offset: 0x10 - Flash Sync Down Register
        volatile uint32_t CRTRMM;  ///< Offset: 0x100 - CR Trimming Data Mirror Register
    };

    /// Peripheral instances
    inline Registers* FLASH_IF = reinterpret_cast<Registers*>(FLASH_IF_BASE);

    // Bit definitions
    /// FASZR Register bits
    namespace faszr_bits {
        constexpr uint32_t ASZ = (2 << 0);  ///< Flash Access Size
    }

    /// FSTR Register bits
    namespace fstr_bits {
        constexpr uint32_t HNG = (1U << 1);  ///< Flash Hang flag
        constexpr uint32_t RDY = (1U << 0);  ///< Flash Rdy
    }

    /// FSYNDN Register bits
    namespace fsyndn_bits {
        constexpr uint32_t SD = (3 << 0);  ///< Flash Sync
    }

    /// CRTRMM Register bits
    namespace crtrmm_bits {
        constexpr uint32_t TRMM = (10 << 0);  ///< CR Trimming Data Mirror
    }

}

// ============================================================================
// CRG Peripheral
// ============================================================================

namespace crg {
    /// Base addresses
    constexpr uint32_t CRG_BASE = 0x40010000;

    /// CRG Register structure
    struct Registers {
        volatile uint32_t SCM_CTL;  ///< Offset: 0x00 - System Clock Mode Control Register
        volatile uint32_t SCM_STR;  ///< Offset: 0x04 - System Clock Mode Status Register
        volatile uint32_t BSC_PSR;  ///< Offset: 0x10 - Base Clock Prescaler Register
        volatile uint32_t APBC0_PSR;  ///< Offset: 0x14 - APB0 Prescaler Register
        volatile uint32_t APBC1_PSR;  ///< Offset: 0x18 - APB1 Prescaler Register
        volatile uint32_t APBC2_PSR;  ///< Offset: 0x1C - APB2 Prescaler Register
        volatile uint32_t SWC_PSR;  ///< Offset: 0x20 - Software Watchdog Clock Prescaler Register
        volatile uint32_t TTC_PSR;  ///< Offset: 0x28 - Trace Clock Prescaler Register
        volatile uint32_t CSW_TMR;  ///< Offset: 0x30 - Clock Stabilization Wait Time Register
        volatile uint32_t PSW_TMR;  ///< Offset: 0x34 - PLL Clock Stabilization Wait Time Setup Register
        volatile uint32_t PLL_CTL1;  ///< Offset: 0x38 - PLL Control Register 1
        volatile uint32_t PLL_CTL2;  ///< Offset: 0x3C - PLL Control Register 2
        volatile uint32_t DBWDT_CTL;  ///< Offset: 0x54 - Debug Break Watchdog Timer Control Register
        volatile uint32_t INT_ENR;  ///< Offset: 0x60 - Interrupt Enable Register
        volatile uint32_t INT_STR;  ///< Offset: 0x64 - Interrupt Status Register
        volatile uint32_t INT_CLR;  ///< Offset: 0x68 - Interrupt Clear Register
        volatile uint32_t RST_STR;  ///< Offset: 0x0C - Reset Cause Register
        volatile uint32_t STB_CTL;  ///< Offset: 0x08 - Standby Mode Control Register
        volatile uint32_t CSV_CTL;  ///< Offset: 0x40 - CSV control register
        volatile uint32_t CSV_STR;  ///< Offset: 0x44 - CSV status register
        volatile uint32_t FCSWH_CTL;  ///< Offset: 0x48 - Frequency detection window setting register
        volatile uint32_t FCSWL_CTL;  ///< Offset: 0x4C - Frequency detection window setting register
        volatile uint32_t FCSWD_CTL;  ///< Offset: 0x50 - Frequency detection counter register
    };

    /// Peripheral instances
    inline Registers* CRG = reinterpret_cast<Registers*>(CRG_BASE);

    // Bit definitions
    /// SCM_CTL Register bits
    namespace scm_ctl_bits {
        constexpr uint32_t RCS = (3 << 5);  ///< Master clock switch control bits
        constexpr uint32_t PLLE = (1U << 4);  ///< PLL oscillation enable bit
        constexpr uint32_t SOSCE = (1U << 3);  ///< Sub clock oscillation enable bit
        constexpr uint32_t MOSCE = (1U << 1);  ///< Main clock oscillation enable bit
    }

    /// SCM_STR Register bits
    namespace scm_str_bits {
        constexpr uint32_t RCM = (3 << 5);  ///< Master clock selection bits
        constexpr uint32_t PLRDY = (1U << 4);  ///< PLL oscillation stable bit
        constexpr uint32_t SORDY = (1U << 3);  ///< Sub clock oscillation stable bit
        constexpr uint32_t MORDY = (1U << 1);  ///< Main clock oscillation stable bit
    }

    /// BSC_PSR Register bits
    namespace bsc_psr_bits {
        constexpr uint32_t BSR = (3 << 0);  ///< Base clock frequency division ratio setting bit
    }

    /// APBC0_PSR Register bits
    namespace apbc0_psr_bits {
        constexpr uint32_t APBC0 = (2 << 0);  ///< APB0 bus clock frequency division ratio setting bit
    }

    /// APBC1_PSR Register bits
    namespace apbc1_psr_bits {
        constexpr uint32_t APBC1EN = (1U << 7);  ///< APB1 clock enable bit
        constexpr uint32_t APBC1RST = (1U << 4);  ///< APB1 bus reset control bit
        constexpr uint32_t APBC1 = (2 << 0);  ///< APB1 bus clock frequency division ratio setting bit
    }

    /// APBC2_PSR Register bits
    namespace apbc2_psr_bits {
        constexpr uint32_t APBC2EN = (1U << 7);  ///< APB2 clock enable bit
        constexpr uint32_t APBC2RST = (1U << 4);  ///< APB2 bus reset control bit
        constexpr uint32_t APBC2 = (2 << 0);  ///< APB2 bus clock frequency division ratio setting bit
    }

    /// SWC_PSR Register bits
    namespace swc_psr_bits {
        constexpr uint32_t TESTB = (1U << 7);  ///< TEST bit
        constexpr uint32_t SWDS = (2 << 0);  ///< Software watchdog clock frequency division ratio setting bit
    }

    /// TTC_PSR Register bits
    namespace ttc_psr_bits {
        constexpr uint32_t TTC = (2 << 0);  ///< Trace clock frequency division ratio setting bit
    }

    /// CSW_TMR Register bits
    namespace csw_tmr_bits {
        constexpr uint32_t SOWT = (3 << 4);  ///< Sub clock stabilization wait time setup bit
        constexpr uint32_t MOWT = (4 << 0);  ///< Main clock stabilization wait time setup bit
    }

    /// PSW_TMR Register bits
    namespace psw_tmr_bits {
        constexpr uint32_t PINC = (1U << 4);  ///< PLL input clock select bit
        constexpr uint32_t POWT = (3 << 0);  ///< PLL clock stabilization wait time setup bit
    }

    /// PLL_CTL1 Register bits
    namespace pll_ctl1_bits {
        constexpr uint32_t PLLK = (4 << 4);  ///< PLL input clock frequency division ratio setting bit
        constexpr uint32_t PLLM = (4 << 0);  ///< PLL VCO clock frequency division ratio setting bit
    }

    /// PLL_CTL2 Register bits
    namespace pll_ctl2_bits {
        constexpr uint32_t PLLN = (6 << 0);  ///< PLL feedback frequency division ratio setting bit
    }

    /// DBWDT_CTL Register bits
    namespace dbwdt_ctl_bits {
        constexpr uint32_t DPHWBE = (1U << 7);  ///< HW-WDG debug mode break bit
        constexpr uint32_t DPSWBE = (1U << 5);  ///< SW-WDG debug mode break bit
    }

    /// INT_ENR Register bits
    namespace int_enr_bits {
        constexpr uint32_t FCSE = (1U << 5);  ///< Anomalous frequency detection interrupt enable bit
        constexpr uint32_t PCSE = (1U << 2);  ///< PLL oscillation stabilization completion interrupt enable bit
        constexpr uint32_t SCSE = (1U << 1);  ///< Sub oscillation stabilization completion interrupt enable bit
        constexpr uint32_t MCSE = (1U << 0);  ///< Main oscillation stabilization completion interrupt enable bit
    }

    /// INT_STR Register bits
    namespace int_str_bits {
        constexpr uint32_t FCSI = (1U << 5);  ///< Anomalous frequency detection interrupt status bit
        constexpr uint32_t PCSI = (1U << 2);  ///< PLL oscillation stabilization completion interrupt status bit
        constexpr uint32_t SCSI = (1U << 1);  ///< Sub oscillation stabilization completion interrupt status bit
        constexpr uint32_t MCSI = (1U << 0);  ///< Main oscillation stabilization completion interrupt status bit
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t FCSC = (1U << 5);  ///< Anomalous frequency detection interrupt cause clear bit
        constexpr uint32_t PCSC = (1U << 2);  ///< PLL oscillation stabilization completion interrupt cause clear bit
        constexpr uint32_t SCSC = (1U << 1);  ///< Sub oscillation stabilization completion interrupt cause clear bit
        constexpr uint32_t MCSC = (1U << 0);  ///< Main oscillation stabilization completion interrupt cause clear bit
    }

    /// RST_STR Register bits
    namespace rst_str_bits {
        constexpr uint32_t SRST = (1U << 8);  ///< Software reset flag
        constexpr uint32_t FCSR = (1U << 7);  ///< Flag for anomalous frequency detection reset
        constexpr uint32_t CSVR = (1U << 6);  ///< Clock failure detection reset flag
        constexpr uint32_t HWDT = (1U << 5);  ///< Hardware watchdog reset flag
        constexpr uint32_t SWDT = (1U << 4);  ///< Software watchdog reset flag
        constexpr uint32_t LVDH = (1U << 3);  ///< Low-voltage detection reset flag
        constexpr uint32_t INITX = (1U << 1);  ///< INITX pin input reset flag
        constexpr uint32_t PONR = (1U << 0);  ///< Power-on reset/low-voltage detection reset flag
    }

    /// STB_CTL Register bits
    namespace stb_ctl_bits {
        constexpr uint32_t KEY = (16 << 16);  ///< Standby mode control write control bit
        constexpr uint32_t SPL = (1U << 4);  ///< Standby pin level setting bit
        constexpr uint32_t DSTM = (1U << 2);  ///< Deep standby mode select bit
        constexpr uint32_t STM = (2 << 0);  ///< Standby mode selection bit
    }

    /// CSV_CTL Register bits
    namespace csv_ctl_bits {
        constexpr uint32_t FCD = (3 << 12);  ///< FCS count cycle setting bits
        constexpr uint32_t FCSRE = (1U << 9);  ///< FCS reset output enable bit
        constexpr uint32_t FCSDE = (1U << 8);  ///< FCS function enable bit
        constexpr uint32_t SCSVE = (1U << 1);  ///< Sub CSV function enable bit
        constexpr uint32_t MCSVE = (1U << 0);  ///< Main CSV function enable bit
    }

    /// CSV_STR Register bits
    namespace csv_str_bits {
        constexpr uint32_t SCMF = (1U << 1);  ///< Sub clock failure detection flag
        constexpr uint32_t MCMF = (1U << 0);  ///< Main clock failure detection flag
    }

}

// ============================================================================
// CRTRIM Peripheral
// ============================================================================

namespace crtrim {
    /// Base addresses
    constexpr uint32_t CRTRIM_BASE = 0x4002E000;

    /// CRTRIM Register structure
    struct Registers {
        volatile uint32_t MCR_PSR;  ///< Offset: 0x00 - High-speed CR oscillation Frequency Division Setup Register
        volatile uint32_t MCR_FTRM;  ///< Offset: 0x04 - High-speed CR oscillation Frequency Trimming Register
        volatile uint32_t MCR_RLR;  ///< Offset: 0x0C - High-Speed CR Oscillation Register Write-Protect Register
    };

    /// Peripheral instances
    inline Registers* CRTRIM = reinterpret_cast<Registers*>(CRTRIM_BASE);

    // Bit definitions
    /// MCR_PSR Register bits
    namespace mcr_psr_bits {
        constexpr uint32_t CSR = (3 << 0);  ///< High-speed CR oscillation frequency division ratio setting bits
    }

    /// MCR_FTRM Register bits
    namespace mcr_ftrm_bits {
        constexpr uint32_t TRD = (10 << 0);  ///< Frequency trimming setup bits
    }

    /// MCR_RLR Register bits
    namespace mcr_rlr_bits {
        constexpr uint32_t TRMLCK = (32 << 0);  ///< Register write-protect bits
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t SWWDT_BASE = 0x40012000;
    constexpr uint32_t HWWDT_BASE = 0x40011000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t WDOGLOAD;  ///< Offset: 0x00 - Software Watchdog Timer Load Register
        volatile uint32_t WDOGVALUE;  ///< Offset: 0x04 - Software Watchdog Timer Value Register
        volatile uint32_t WDOGCONTROL;  ///< Offset: 0x08 - Software Watchdog Timer Control Register
        volatile uint32_t WDOGINTCLR;  ///< Offset: 0x0C - Software Watchdog Timer Clear Register
        volatile uint32_t WDOGRIS;  ///< Offset: 0x10 - Software Watchdog Timer Interrupt Status Register
        volatile uint32_t WDOGLOCK;  ///< Offset: 0xC00 - Software Watchdog Timer Lock Register
    };

    /// Peripheral instances
    inline Registers* SWWDT = reinterpret_cast<Registers*>(SWWDT_BASE);
    inline Registers* HWWDT = reinterpret_cast<Registers*>(HWWDT_BASE);

    // Bit definitions
    /// WDOGCONTROL Register bits
    namespace wdogcontrol_bits {
        constexpr uint32_t RESEN = (1U << 1);  ///< Reset enable bit of the software watchdog
        constexpr uint32_t INTEN = (1U << 0);  ///< Interrupt and counter enable bit of the software watchdog
    }

    /// WDOGRIS Register bits
    namespace wdogris_bits {
        constexpr uint32_t RIS = (1U << 0);  ///< Software watchdog interrupt status bit
    }

}

// ============================================================================
// MFT0 Peripheral
// ============================================================================

namespace mft0 {
    /// Base addresses
    constexpr uint32_t MFT0_BASE = 0x40020000;

    /// MFT0 Register structure
    struct Registers {
        volatile uint32_t FRT_TCSA0;  ///< Offset: 0x30 - FRT-ch.0 Control Register A
        volatile uint32_t FRT_TCSA1;  ///< Offset: 0x40 - FRT-ch.1 Control Register A
        volatile uint32_t FRT_TCSA2;  ///< Offset: 0x50 - FRT-ch.2 Control Register A
        volatile uint32_t FRT_TCSB0;  ///< Offset: 0x34 - FRT-ch.0 Control Register B
        volatile uint32_t FRT_TCSB1;  ///< Offset: 0x44 - FRT-ch.1 Control Register B
        volatile uint32_t FRT_TCSB2;  ///< Offset: 0x54 - FRT-ch.2 Control Register B
        volatile uint32_t FRT_TCCP0;  ///< Offset: 0x28 - FRT-ch.0 Cycle Setting Register
        volatile uint32_t FRT_TCCP1;  ///< Offset: 0x38 - FRT-ch.1 Cycle Setting Register
        volatile uint32_t FRT_TCCP2;  ///< Offset: 0x48 - FRT-ch.2 Cycle Setting Register
        volatile uint32_t FRT_TCDT0;  ///< Offset: 0x2C - FRT-ch.0 Count Value Register
        volatile uint32_t FRT_TCDT1;  ///< Offset: 0x3C - FRT-ch.1 Count Value Register
        volatile uint32_t FRT_TCDT2;  ///< Offset: 0x4C - FRT-ch.2 Count Value Register
        volatile uint32_t OCU_OCFS10;  ///< Offset: 0x58 - "OCU ch.1,0 Connecting FRT Select Register"
        volatile uint32_t OCU_OCFS32;  ///< Offset: 0x59 - "OCU ch.3,2 Connecting FRT Select Register"
        volatile uint32_t OCU_OCFS54;  ///< Offset: 0x5C - "OCU ch.5,4 Connecting FRT Select Register"
        volatile uint32_t OCU_OCSA10;  ///< Offset: 0x18 - "OCU ch.1,0 Control Register A"
        volatile uint32_t OCU_OCSA32;  ///< Offset: 0x1C - "OCU ch.3,2 Control Register A"
        volatile uint32_t OCU_OCSA54;  ///< Offset: 0x20 - "OCU ch.5,4 Control Register A"
        volatile uint32_t OCU_OCSB10;  ///< Offset: 0x19 - "OCU ch.1,0 Control Register B"
        volatile uint32_t OCU_OCSB32;  ///< Offset: 0x1D - "OCU ch.3,2 Control Register B"
        volatile uint32_t OCU_OCSB54;  ///< Offset: 0x21 - "OCU ch.5,4 Control Register B"
        volatile uint32_t OCU_OCSC;  ///< Offset: 0x24 - OCU Control Register C
        volatile uint32_t OCU_OCCP0;  ///< Offset: 0x00 - OCU ch.0 Compare Value Store Register
        volatile uint32_t OCU_OCCP1;  ///< Offset: 0x04 - OCU ch.1 Compare Value Store Register
        volatile uint32_t OCU_OCCP2;  ///< Offset: 0x08 - OCU ch.2 Compare Value Store Register
        volatile uint32_t OCU_OCCP3;  ///< Offset: 0x0C - OCU ch.3 Compare Value Store Register
        volatile uint32_t OCU_OCCP4;  ///< Offset: 0x10 - OCU ch.4 Compare Value Store Register
        volatile uint32_t OCU_OCCP5;  ///< Offset: 0x14 - OCU ch.5 Compare Value Store Register
        volatile uint32_t WFG_WFSA10;  ///< Offset: 0x8C - WFG ch.10 Control Register A
        volatile uint32_t WFG_WFSA32;  ///< Offset: 0x90 - WFG ch.32 Control Register A
        volatile uint32_t WFG_WFSA54;  ///< Offset: 0x94 - WFG ch.54 Control Register A
        volatile uint32_t WFG_WFTM10;  ///< Offset: 0x80 - WFG ch.10 Timer Value Register
        volatile uint32_t WFG_WFTM32;  ///< Offset: 0x84 - WFG ch.32 Timer Value Register
        volatile uint32_t WFG_WFTM54;  ///< Offset: 0x88 - WFG ch.54 Timer Value Register
        volatile uint32_t WFG_NZCL;  ///< Offset: 0x9C - NZCL Control Register
        volatile uint32_t WFG_WFIR;  ///< Offset: 0x98 - WFG Interrupt Control Register
        volatile uint32_t ICU_ICFS10;  ///< Offset: 0x60 - "ICU ch.1,0 Connecting FRT Select Register"
        volatile uint32_t ICU_ICFS32;  ///< Offset: 0x61 - "ICU ch.3,2 Connecting FRT Select Register"
        volatile uint32_t ICU_ICSA10;  ///< Offset: 0x78 - "ICU ch.1,0 Control Register A"
        volatile uint32_t ICU_ICSA32;  ///< Offset: 0x7C - "ICU ch.3,2 Control Register A"
        volatile uint32_t ICU_ICSB10;  ///< Offset: 0x79 - "ICU ch.1,0 Control Register B"
        volatile uint32_t ICU_ICSB32;  ///< Offset: 0x7D - "ICU ch.3,2 Control Register B"
        volatile uint32_t ICU_ICCP0;  ///< Offset: 0x68 - ICU ch.0 Capture value store register
        volatile uint32_t ICU_ICCP1;  ///< Offset: 0x6C - ICU ch.1 Capture value store register
        volatile uint32_t ICU_ICCP2;  ///< Offset: 0x70 - ICU ch.2 Capture value store register
        volatile uint32_t ICU_ICCP3;  ///< Offset: 0x74 - ICU ch.3 Capture value store register
        volatile uint32_t ADCMP_ACSA;  ///< Offset: 0xBC - ADCMP Control Register A
        volatile uint32_t ADCMP_ACSB;  ///< Offset: 0xB8 - ADCMP Control Register B
        volatile uint32_t ADCMP_ACCP0;  ///< Offset: 0xA0 - ADCMP ch.0 Compare Value Store Register
        volatile uint32_t ADCMP_ACCP1;  ///< Offset: 0xA8 - ADCMP ch.1 Compare Value Store Register
        volatile uint32_t ADCMP_ACCP2;  ///< Offset: 0xB0 - ADCMP ch.2 Compare Value Store Register
        volatile uint32_t ADCMP_ACCPDN0;  ///< Offset: 0xA4 - ADCMP ch.0 Compare Value Store Register
        volatile uint32_t ADCMP_ACCPDN1;  ///< Offset: 0xAC - ADCMP ch.1 Compare Value Store Register
        volatile uint32_t ADCMP_ACCPDN2;  ///< Offset: 0xB4 - ADCMP ch.2 Compare Value Store Register
        volatile uint32_t ADCMP_ATSA;  ///< Offset: 0xC0 - ADC Start Trigger Select Register
    };

    /// Peripheral instances
    inline Registers* MFT0 = reinterpret_cast<Registers*>(MFT0_BASE);

    // Bit definitions
    /// FRT_TCSA0 Register bits
    namespace frt_tcsa0_bits {
        constexpr uint32_t CLK = (4 << 0);  ///< FRT clock cycle
        constexpr uint32_t SCLR = (1U << 4);  ///< FRT operation state initialization request
        constexpr uint32_t MODE = (1U << 5);  ///< FRT's count mode
        constexpr uint32_t STOP = (1U << 6);  ///< Puts FRT in stopping state
        constexpr uint32_t BFE = (1U << 7);  ///< Enables TCCP's buffer function
        constexpr uint32_t ICRE = (1U << 8);  ///< "Generates interrupt when ""1"" is set to TCSA.ICLR"
        constexpr uint32_t ICLR = (1U << 9);  ///< interrupt flag
        constexpr uint32_t IRQZE = (1U << 13);  ///< "Generates interrupt, when ""1"" is set to TCSA.IRQZF"
        constexpr uint32_t IRQZF = (1U << 14);  ///< zero interrupt flag
        constexpr uint32_t ECKE = (1U << 15);  ///< Uses an external input clock (FRCK) as FRT's count clock
    }

    /// FRT_TCSB0 Register bits
    namespace frt_tcsb0_bits {
        constexpr uint32_t AD2E = (1U << 2);  ///< Outputs AD conversion start signal to ADCunit2 upon Zero value detection by FRT
        constexpr uint32_t AD1E = (1U << 1);  ///< Outputs AD conversion start signal to ADCunit1 upon Zero value detection by FRT
        constexpr uint32_t AD0E = (1U << 0);  ///< Outputs AD conversion start signal to ADCunit0 upon Zero value detection by FRT
    }

    /// OCU_OCFS10 Register bits
    namespace ocu_ocfs10_bits {
        constexpr uint32_t FSO0 = (4 << 0);  ///< Connects FRT ch.x to OCU ch.0
        constexpr uint32_t FSO1 = (4 << 4);  ///< Connects FRT ch.x to OCU ch.1
    }

    /// OCU_OCSA10 Register bits
    namespace ocu_ocsa10_bits {
        constexpr uint32_t CST0 = (1U << 0);  ///< Enables the operation of OCU ch.(0)
        constexpr uint32_t CST1 = (1U << 1);  ///< Enables the operation of OCU ch.(1)
        constexpr uint32_t BDIS0 = (1U << 2);  ///< Disables the buffer function of the OCCP(0) register
        constexpr uint32_t BDIS1 = (1U << 3);  ///< Disables the buffer function of the OCCP(1) register
        constexpr uint32_t IOE0 = (1U << 4);  ///< "Generates interrupt, when ""1"" is set to OCSA.IOP0"
        constexpr uint32_t IOE1 = (1U << 5);  ///< "Generates interrupt, when ""1"" is set to OCSA.IOP1"
        constexpr uint32_t IOP0 = (1U << 6);  ///< Indicates that a match has already been detected between FRT's count value and OCCP(0) value at OCU ch.(0).
        constexpr uint32_t IOP1 = (1U << 7);  ///< Indicates that a match has already been detected between FRT's count value and OCCP(1) value at OCU ch.(1).
    }

    /// OCU_OCSB10 Register bits
    namespace ocu_ocsb10_bits {
        constexpr uint32_t OTD0 = (1U << 0);  ///< Indicates that the RT(0) output pin is in the High-level output state.
        constexpr uint32_t OTD1 = (1U << 1);  ///< Indicates that the RT(1) output pin is in the High-level output state.
        constexpr uint32_t CMOD = (1U << 4);  ///< selects OCU's operation mode in combination with OCSC.MOD0 to MOD5
        constexpr uint32_t BTS0 = (1U << 5);  ///< Performs buffer transfer of the OCCP(0) register upon Peak value detection by FRT
        constexpr uint32_t BTS1 = (1U << 6);  ///< Performs buffer transfer of the OCCP(1) register upon Peak value detection by FRT
    }

    /// OCU_OCSC Register bits
    namespace ocu_ocsc_bits {
        constexpr uint32_t MOD0 = (1U << 8);  ///< OCSC.MOD0 and OCSC.MOD1 determine the operation mode of OCU ch.0/ch.1 in combination with OCSB10.CMOD
        constexpr uint32_t MOD1 = (1U << 9);  ///< OCSC.MOD0 and OCSC.MOD1 determine the operation mode of OCU ch.0/ch.1 in combination with OCSB10.CMOD
        constexpr uint32_t MOD2 = (1U << 10);  ///< OCSC.MOD2 and OCSC.MOD3 determine the operation mode of OCU ch.2/ch.3 in combination with OCSB32.CMOD
        constexpr uint32_t MOD3 = (1U << 11);  ///< OCSC.MOD2 and OCSC.MOD3 determine the operation mode of OCU ch.2/ch.3 in combination with OCSB32.CMOD
        constexpr uint32_t MOD4 = (1U << 12);  ///< OCSC.MOD4 and OCSC.MOD5 determine the operation mode of OCU ch.4/ch.5 in combination with OCSB54.CMOD
        constexpr uint32_t MOD5 = (1U << 13);  ///< OCSC.MOD4 and OCSC.MOD5 determine the operation mode of OCU ch.4/ch.5 in combination with OCSB54.CMOD
    }

    /// WFG_WFSA10 Register bits
    namespace wfg_wfsa10_bits {
        constexpr uint32_t DCK = (3 << 0);  ///< clock cycle of the WFG timer
        constexpr uint32_t TMD = (3 << 3);  ///< WFG's operation mode
        constexpr uint32_t GTEN = (2 << 6);  ///< the CH_GATE signal for each channel of WFG
        constexpr uint32_t PSEL = (2 << 8);  ///< the PPG timer unit to be used at each channel of WFG
        constexpr uint32_t PGEN = (2 << 10);  ///< specifies how to reflect the CH_PPG signal that is input to each channel of WFG on WFG output
        constexpr uint32_t DMOD = (1U << 12);  ///< specifies which polarity will be used to output the non-overlap signal
    }

    /// WFG_NZCL Register bits
    namespace wfg_nzcl_bits {
        constexpr uint32_t DTIE = (1U << 0);  ///< DTIF interrupt enable
        constexpr uint32_t NWS = (3 << 1);  ///< noise-canceling width of the noise-canceller for the DTTIX pin
        constexpr uint32_t SDTI = (1U << 4);  ///< Forcibly generates DTIF interrupt
    }

    /// WFG_WFIR Register bits
    namespace wfg_wfir_bits {
        constexpr uint32_t DTIF = (1U << 0);  ///< Indicates that DTIF interrupt has been generated.
        constexpr uint32_t DTIC = (1U << 1);  ///< Clears WFIR.DTIF and deasserts the DTIF interrupt signal.
        constexpr uint32_t TMIF10 = (1U << 4);  ///< Indicates that WFG10 timer interrupt has been generated.
        constexpr uint32_t TMIC10 = (1U << 5);  ///< Clears WFIR.TMIF10 and deasserts the WFG10 timer interrupt signal.
        constexpr uint32_t TMIE10 = (1U << 6);  ///< Starts the WFG10 timer
        constexpr uint32_t TMIS10 = (1U << 7);  ///< Stops the WFG10 timer
        constexpr uint32_t TMIF32 = (1U << 8);  ///< Indicates that WFG32 timer interrupt has been generated.
        constexpr uint32_t TMIC32 = (1U << 9);  ///< Clears WFIR.TMIF32 and deasserts the WFG32 timer interrupt signal.
        constexpr uint32_t TMIE32 = (1U << 10);  ///< Starts the WFG32 timer
        constexpr uint32_t TMIS32 = (1U << 11);  ///< Stops the WFG32 timer
        constexpr uint32_t TMIF54 = (1U << 12);  ///< Indicates that WFG54 timer interrupt has been generated.
        constexpr uint32_t TMIC54 = (1U << 13);  ///< Clears WFIR.TMIF54 and deasserts the WFG54 timer interrupt signal.
        constexpr uint32_t TMIE54 = (1U << 14);  ///< Starts the WFG54 timer
        constexpr uint32_t TMIS54 = (1U << 15);  ///< Stops the WFG54 timer
    }

    /// ICU_ICFS10 Register bits
    namespace icu_icfs10_bits {
        constexpr uint32_t FSI0 = (4 << 0);  ///< Connects FRT ch.x to ICU ch.(0)
        constexpr uint32_t FSI1 = (4 << 4);  ///< Connects FRT ch.x to ICU ch.(1)
    }

    /// ICU_ICSA10 Register bits
    namespace icu_icsa10_bits {
        constexpr uint32_t EG0 = (2 << 0);  ///< enables/disables the operation of ICU-ch.(0) and selects a valid edge(s)
        constexpr uint32_t EG1 = (2 << 2);  ///< enables/disables the operation of ICU-ch.(1) and selects a valid edge(s)
        constexpr uint32_t ICE0 = (1U << 4);  ///< "Generates interrupt, when ""1"" is set to ICSA.ICP0."
        constexpr uint32_t ICE1 = (1U << 5);  ///< "Generates interrupt, when ""1"" is set to ICSA.ICP1."
        constexpr uint32_t ICP0 = (1U << 6);  ///< Indicates that a valid edge has been detected at ICU ch.(0) and the capture operation has been performed
        constexpr uint32_t ICP1 = (1U << 7);  ///< Indicates that a valid edge has been detected at ICU ch.(1) and the capture operation has been performed
    }

    /// ICU_ICSB10 Register bits
    namespace icu_icsb10_bits {
        constexpr uint32_t IEI0 = (1U << 0);  ///< indicates the latest valid edge of ICU-ch.(0)
        constexpr uint32_t IEI1 = (1U << 1);  ///< indicates the latest valid edge of ICU-ch.(1)
    }

    /// ADCMP_ACSA Register bits
    namespace adcmp_acsa_bits {
        constexpr uint32_t CE0 = (2 << 0);  ///< enable or disable the operation of ADCMP-ch.0 and select the FRT to be connected
        constexpr uint32_t CE1 = (2 << 2);  ///< enable or disable the operation of ADCMP-ch.1 and select the FRT to be connected
        constexpr uint32_t CE2 = (2 << 4);  ///< enable or disable the operation of ADCMP-ch.2 and select the FRT to be connected
        constexpr uint32_t SEL0 = (2 << 8);  ///< which count state FRT should be in to instruct AD conversion to be started at ADCMP-ch.0
        constexpr uint32_t SEL1 = (2 << 10);  ///< which count state FRT should be in to instruct AD conversion to be started at ADCMP-ch.1
        constexpr uint32_t SEL2 = (2 << 12);  ///< which count state FRT should be in to instruct AD conversion to be started at ADCMP-ch.2
    }

    /// ADCMP_ACSB Register bits
    namespace adcmp_acsb_bits {
        constexpr uint32_t BDIS0 = (1U << 0);  ///< Disables the buffer function of the ACCP0 and ACCPDN0 registers
        constexpr uint32_t BDIS1 = (1U << 1);  ///< Disables the buffer function of the ACCP1 and ACCPDN1 registers
        constexpr uint32_t BDIS2 = (1U << 2);  ///< Disables the buffer function of the ACCP2 and ACCPDN2 registers
        constexpr uint32_t BTS0 = (1U << 4);  ///< Performs buffer transfer of the ACCP0 and ACCPDN0 registers upon Peak value detection by FRT
        constexpr uint32_t BTS1 = (1U << 5);  ///< Performs buffer transfer of the ACCP1 and ACCPDN1 registers upon Peak value detection by FRT
        constexpr uint32_t BTS2 = (1U << 6);  ///< Performs buffer transfer of the ACCP2 and ACCPDN2 registers upon Peak value detection by FRT
    }

    /// ADCMP_ATSA Register bits
    namespace adcmp_atsa_bits {
        constexpr uint32_t AD0S = (2 << 0);  ///< selects the start signal to be used to start the scan conversion of ADC unit0
        constexpr uint32_t AD1S = (2 << 2);  ///< selects the start signal to be used to start the scan conversion of ADC unit1
        constexpr uint32_t AD2S = (2 << 4);  ///< selects the start signal to be used to start the scan conversion of ADC unit2
        constexpr uint32_t AD0P = (2 << 8);  ///< selects the start signal to be used to start priority conversion of ADC unit0
        constexpr uint32_t AD1P = (2 << 10);  ///< selects the start signal to be used to start priority conversion of ADC unit1
        constexpr uint32_t AD2P = (2 << 12);  ///< selects the start signal to be used to start priority conversion of ADC unit2
    }

}

// ============================================================================
// BTIOSEL03 Peripheral
// ============================================================================

namespace btiosel03 {
    /// Base addresses
    constexpr uint32_t BTIOSEL03_BASE = 0x40025100;

    /// BTIOSEL03 Register structure
    struct Registers {
        volatile uint32_t BTSEL0123;  ///< Offset: 0x00 - I/O Select Register
    };

    /// Peripheral instances
    inline Registers* BTIOSEL03 = reinterpret_cast<Registers*>(BTIOSEL03_BASE);

    // Bit definitions
    /// BTSEL0123 Register bits
    namespace btsel0123_bits {
        constexpr uint32_t SEL23_ = (4 << 12);  ///< I/O select bits for Ch.2/Ch.3
        constexpr uint32_t SEL01_ = (4 << 8);  ///< I/O select bits for Ch.0/Ch.1
    }

}

// ============================================================================
// BTIOSEL47 Peripheral
// ============================================================================

namespace btiosel47 {
    /// Base addresses
    constexpr uint32_t BTIOSEL47_BASE = 0x40025300;

    /// BTIOSEL47 Register structure
    struct Registers {
        volatile uint32_t BTSEL4567;  ///< Offset: 0x00 - I/O Select Register
    };

    /// Peripheral instances
    inline Registers* BTIOSEL47 = reinterpret_cast<Registers*>(BTIOSEL47_BASE);

    // Bit definitions
    /// BTSEL4567 Register bits
    namespace btsel4567_bits {
        constexpr uint32_t SEL67_ = (4 << 12);  ///< I/O select bits for Ch.6/Ch.7
        constexpr uint32_t SEL45_ = (4 << 8);  ///< I/O select bits for Ch.4/Ch.5
    }

}

// ============================================================================
// SBSSR Peripheral
// ============================================================================

namespace sbssr {
    /// Base addresses
    constexpr uint32_t SBSSR_BASE = 0x40025F00;

    /// SBSSR Register structure
    struct Registers {
        volatile uint32_t BTSSSR;  ///< Offset: 0xFC - Software-based Simultaneous Startup Register
    };

    /// Peripheral instances
    inline Registers* SBSSR = reinterpret_cast<Registers*>(SBSSR_BASE);

    // Bit definitions
    /// BTSSSR Register bits
    namespace btsssr_bits {
        constexpr uint32_t SSSR15 = (1U << 15);  ///< Bit15 of BTSSSR
        constexpr uint32_t SSSR14 = (1U << 14);  ///< Bit14 of BTSSSR
        constexpr uint32_t SSSR13 = (1U << 13);  ///< Bit13 of BTSSSR
        constexpr uint32_t SSSR12 = (1U << 12);  ///< Bit12 of BTSSSR
        constexpr uint32_t SSSR11 = (1U << 11);  ///< Bit11 of BTSSSR
        constexpr uint32_t SSSR10 = (1U << 10);  ///< Bit10 of BTSSSR
        constexpr uint32_t SSSR9 = (1U << 9);  ///< Bit9 of BTSSSR
        constexpr uint32_t SSSR8 = (1U << 8);  ///< Bit8 of BTSSSR
        constexpr uint32_t SSSR7 = (1U << 7);  ///< Bit7 of BTSSSR
        constexpr uint32_t SSSR6 = (1U << 6);  ///< Bit6 of BTSSSR
        constexpr uint32_t SSSR5 = (1U << 5);  ///< Bit5 of BTSSSR
        constexpr uint32_t SSSR4 = (1U << 4);  ///< Bit4 of BTSSSR
        constexpr uint32_t SSSR3 = (1U << 3);  ///< Bit3 of BTSSSR
        constexpr uint32_t SSSR2 = (1U << 2);  ///< Bit2 of BTSSSR
        constexpr uint32_t SSSR1 = (1U << 1);  ///< Bit1 of BTSSSR
        constexpr uint32_t SSSR0 = (1U << 0);  ///< Bit0 of BTSSSR
    }

}

// ============================================================================
// BT0 Peripheral
// ============================================================================

namespace bt0 {
    /// Base addresses
    constexpr uint32_t BT0_BASE = 0x40025000;

    /// BT0 Register structure
    struct Registers {
        volatile uint32_t PWM_TMCR;  ///< Offset: 0x0C - Timer Control Register
        volatile uint32_t PWM_TMCR2;  ///< Offset: 0x11 - Timer Control Register 2
        volatile uint32_t PWM_STC;  ///< Offset: 0x10 - Status Control Register
        volatile uint32_t PWM_PCSR;  ///< Offset: 0x00 - PWM Cycle Set Register
        volatile uint32_t PWM_PDUT;  ///< Offset: 0x04 - PWM Duty Set Register
        volatile uint32_t PWM_TMR;  ///< Offset: 0x08 - Timer Register
        volatile uint32_t PPG_TMCR;  ///< Offset: 0x0C - Timer Control Register
        volatile uint32_t PPG_TMCR2;  ///< Offset: 0x11 - Timer Control Register 2
        volatile uint32_t PPG_STC;  ///< Offset: 0x10 - Status Control Register
        volatile uint32_t PPG_PRLL;  ///< Offset: 0x00 - LOW Width Reload Register
        volatile uint32_t PPG_PRLH;  ///< Offset: 0x04 - HIGH Width Reload Register
        volatile uint32_t PPG_TMR;  ///< Offset: 0x08 - Timer Register
        volatile uint32_t RT_TMCR;  ///< Offset: 0x0C - Timer Control Register
        volatile uint32_t RT_TMCR2;  ///< Offset: 0x11 - Timer Control Register 2
        volatile uint32_t RT_STC;  ///< Offset: 0x10 - Status Control Register
        volatile uint32_t RT_PCSR;  ///< Offset: 0x00 - PWM Cycle Set Register
        volatile uint32_t RT_TMR;  ///< Offset: 0x08 - Timer Register
        volatile uint32_t PWC_TMCR;  ///< Offset: 0x0C - Timer Control Register
        volatile uint32_t PWC_TMCR2;  ///< Offset: 0x11 - Timer Control Register 2
        volatile uint32_t PWC_STC;  ///< Offset: 0x10 - Status Control Register
        volatile uint32_t PWC_DTBF;  ///< Offset: 0x04 - Data Buffer Register
    };

    /// Peripheral instances
    inline Registers* BT0 = reinterpret_cast<Registers*>(BT0_BASE);

    // Bit definitions
    /// PWM_TMCR Register bits
    namespace pwm_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< Count clock selection bit
        constexpr uint32_t RTGEN = (1U << 11);  ///< Restart enable bit
        constexpr uint32_t PMSK = (1U << 10);  ///< Pulse output mask bit
        constexpr uint32_t EGS = (2 << 8);  ///< Trigger input edge selection bits
        constexpr uint32_t FMD = (3 << 4);  ///< Timer function selection bits
        constexpr uint32_t OSEL = (1U << 3);  ///< Output polarity specification bit
        constexpr uint32_t MDSE = (1U << 2);  ///< Mode selection bit
        constexpr uint32_t CTEN = (1U << 1);  ///< Count operation enable bit
        constexpr uint32_t STRG = (1U << 0);  ///< Software trigger bit
    }

    /// PWM_TMCR2 Register bits
    namespace pwm_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< Count clock selection bit
    }

    /// PWM_STC Register bits
    namespace pwm_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< Trigger interrupt request enable bit
        constexpr uint32_t DTIE = (1U << 5);  ///< Duty match interrupt request enable bit
        constexpr uint32_t UDIE = (1U << 4);  ///< Underflow interrupt request enable bit
        constexpr uint32_t TGIR = (1U << 2);  ///< Trigger interrupt request bit
        constexpr uint32_t DTIR = (1U << 1);  ///< Duty match interrupt request bit
        constexpr uint32_t UDIR = (1U << 0);  ///< Underflow interrupt request bit
    }

    /// PPG_TMCR Register bits
    namespace ppg_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< Count clock selection bit
        constexpr uint32_t RTGEN = (1U << 11);  ///< Restart enable bit
        constexpr uint32_t PMSK = (1U << 10);  ///< Pulse output mask bit
        constexpr uint32_t EGS = (2 << 8);  ///< Trigger input edge selection bits
        constexpr uint32_t FMD = (3 << 4);  ///< Timer function selection bits
        constexpr uint32_t OSEL = (1U << 3);  ///< Output polarity specification bit
        constexpr uint32_t MDSE = (1U << 2);  ///< Mode selection bit
        constexpr uint32_t CTEN = (1U << 1);  ///< Count operation enable bit
        constexpr uint32_t STRG = (1U << 0);  ///< Software trigger bit
    }

    /// PPG_TMCR2 Register bits
    namespace ppg_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< Count clock selection bit
    }

    /// PPG_STC Register bits
    namespace ppg_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< Trigger interrupt request enable bit
        constexpr uint32_t UDIE = (1U << 4);  ///< Underflow interrupt request enable bit
        constexpr uint32_t TGIR = (1U << 2);  ///< Trigger interrupt request bit
        constexpr uint32_t UDIR = (1U << 0);  ///< Underflow interrupt request bit
    }

    /// RT_TMCR Register bits
    namespace rt_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< Count clock selection bit
        constexpr uint32_t EGS = (2 << 8);  ///< Trigger input edge selection bits
        constexpr uint32_t T32 = (1U << 7);  ///< 32-bit timer selection bit
        constexpr uint32_t FMD = (3 << 4);  ///< Timer function selection bits
        constexpr uint32_t OSEL = (1U << 3);  ///< Output polarity specification bit
        constexpr uint32_t MDSE = (1U << 2);  ///< Mode selection bit
        constexpr uint32_t CTEN = (1U << 1);  ///< Timer enable bit
        constexpr uint32_t STRG = (1U << 0);  ///< Software trigger bit
    }

    /// RT_TMCR2 Register bits
    namespace rt_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< Count clock selection bit
    }

    /// RT_STC Register bits
    namespace rt_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< Trigger interrupt request enable bit
        constexpr uint32_t UDIE = (1U << 4);  ///< Underflow interrupt request enable bit
        constexpr uint32_t TGIR = (1U << 2);  ///< Trigger interrupt request bit
        constexpr uint32_t UDIR = (1U << 0);  ///< Underflow interrupt request bit
    }

    /// PWC_TMCR Register bits
    namespace pwc_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< Count clock selection bit
        constexpr uint32_t EGS = (3 << 8);  ///< Measurement edge selection bits
        constexpr uint32_t T32 = (1U << 7);  ///< 32-bit timer selection bit
        constexpr uint32_t FMD = (3 << 4);  ///< Timer function selection bits
        constexpr uint32_t MDSE = (1U << 2);  ///< Mode selection bit
        constexpr uint32_t CTEN = (1U << 1);  ///< Timer enable bit
    }

    /// PWC_TMCR2 Register bits
    namespace pwc_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< Count clock selection bit
    }

    /// PWC_STC Register bits
    namespace pwc_stc_bits {
        constexpr uint32_t ERR = (1U << 7);  ///< Error flag bit
        constexpr uint32_t EDIE = (1U << 6);  ///< Measurement completion interrupt request enable bit
        constexpr uint32_t OVIE = (1U << 4);  ///< Overflow interrupt request enable bit
        constexpr uint32_t EDIR = (1U << 2);  ///< Measurement completion interrupt request bit
        constexpr uint32_t OVIR = (1U << 0);  ///< Overflow interrupt request bit
    }

}

// ============================================================================
// BT1 Peripheral
// ============================================================================

namespace bt1 {
    /// Base addresses
    constexpr uint32_t BT1_BASE = 0x40025040;

    /// BT1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT1 = reinterpret_cast<Registers*>(BT1_BASE);

}

// ============================================================================
// BT2 Peripheral
// ============================================================================

namespace bt2 {
    /// Base addresses
    constexpr uint32_t BT2_BASE = 0x40025080;

    /// BT2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT2 = reinterpret_cast<Registers*>(BT2_BASE);

}

// ============================================================================
// BT3 Peripheral
// ============================================================================

namespace bt3 {
    /// Base addresses
    constexpr uint32_t BT3_BASE = 0x400250C0;

    /// BT3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT3 = reinterpret_cast<Registers*>(BT3_BASE);

}

// ============================================================================
// BT4 Peripheral
// ============================================================================

namespace bt4 {
    /// Base addresses
    constexpr uint32_t BT4_BASE = 0x40025200;

    /// BT4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT4 = reinterpret_cast<Registers*>(BT4_BASE);

}

// ============================================================================
// BT5 Peripheral
// ============================================================================

namespace bt5 {
    /// Base addresses
    constexpr uint32_t BT5_BASE = 0x40025240;

    /// BT5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT5 = reinterpret_cast<Registers*>(BT5_BASE);

}

// ============================================================================
// BT6 Peripheral
// ============================================================================

namespace bt6 {
    /// Base addresses
    constexpr uint32_t BT6_BASE = 0x40025280;

    /// BT6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT6 = reinterpret_cast<Registers*>(BT6_BASE);

}

// ============================================================================
// BT7 Peripheral
// ============================================================================

namespace bt7 {
    /// Base addresses
    constexpr uint32_t BT7_BASE = 0x400252C0;

    /// BT7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT7 = reinterpret_cast<Registers*>(BT7_BASE);

}

// ============================================================================
// MFT Peripheral
// ============================================================================

namespace mft {
    /// Base addresses
    constexpr uint32_t MFT_PPG_BASE = 0x40024000;

    /// MFT Register structure
    struct Registers {
        volatile uint32_t TTCR0;  ///< Offset: 0x00 - PPG Start Trigger Control Register 0
        volatile uint32_t COMP0;  ///< Offset: 0x08 - PPG Compare Register 0
        volatile uint32_t COMP2;  ///< Offset: 0x0C - PPG Compare Register 2
        volatile uint32_t COMP4;  ///< Offset: 0x10 - PPG Compare Register 4
        volatile uint32_t COMP6;  ///< Offset: 0x14 - PPG Compare Register 6
        volatile uint32_t TRG;  ///< Offset: 0x100 - PPG Start Register 0
        volatile uint32_t REVC;  ///< Offset: 0x104 - Output Reverse Register 0
        volatile uint32_t PPGC0;  ///< Offset: 0x201 - PPG Operation Mode Control Register 0
        volatile uint32_t PPGC1;  ///< Offset: 0x200 - PPG Operation Mode Control Register 1
        volatile uint32_t PPGC2;  ///< Offset: 0x205 - PPG Operation Mode Control Register 2
        volatile uint32_t PPGC3;  ///< Offset: 0x204 - PPG Operation Mode Control Register 3
        volatile uint32_t PPGC4;  ///< Offset: 0x241 - PPG Operation Mode Control Register 4
        volatile uint32_t PPGC5;  ///< Offset: 0x240 - PPG Operation Mode Control Register 5
        volatile uint32_t PPGC6;  ///< Offset: 0x245 - PPG Operation Mode Control Register 6
        volatile uint32_t PPGC7;  ///< Offset: 0x244 - PPG Operation Mode Control Register 7
        volatile uint32_t PRLH0;  ///< Offset: 0x209 - PPG0 Reload Registers High
        volatile uint32_t PRLL0;  ///< Offset: 0x208 - PPG0 Reload Registers Low
        volatile uint32_t PRLH1;  ///< Offset: 0x20D - PPG1 Reload Registers High
        volatile uint32_t PRLL1;  ///< Offset: 0x20C - PPG1 Reload Registers Low
        volatile uint32_t PRLH2;  ///< Offset: 0x211 - PPG2 Reload Registers High
        volatile uint32_t PRLL2;  ///< Offset: 0x210 - PPG2 Reload Registers Low
        volatile uint32_t PRLH3;  ///< Offset: 0x215 - PPG3 Reload Registers High
        volatile uint32_t PRLL3;  ///< Offset: 0x214 - PPG3 Reload Registers Low
        volatile uint32_t PRLH4;  ///< Offset: 0x249 - PPG4 Reload Registers High
        volatile uint32_t PRLL4;  ///< Offset: 0x248 - PPG4 Reload Registers Low
        volatile uint32_t PRLH5;  ///< Offset: 0x24D - PPG5 Reload Registers High
        volatile uint32_t PRLL5;  ///< Offset: 0x24C - PPG5 Reload Registers Low
        volatile uint32_t PRLH6;  ///< Offset: 0x251 - PPG6 Reload Registers High
        volatile uint32_t PRLL6;  ///< Offset: 0x250 - PPG6 Reload Registers Low
        volatile uint32_t PRLH7;  ///< Offset: 0x255 - PPG7 Reload Registers High
        volatile uint32_t PRLL7;  ///< Offset: 0x254 - PPG7 Reload Registers Low
        volatile uint32_t GATEC0;  ///< Offset: 0x218 - PPG Gate Function Control Registers 0
        volatile uint32_t GATEC4;  ///< Offset: 0x258 - PPG Gate Function Control Registers 4
        volatile uint32_t IGBTC;  ///< Offset: 0x380 - IGBT Mode Control Register
    };

    /// Peripheral instances
    inline Registers* MFT_PPG = reinterpret_cast<Registers*>(MFT_PPG_BASE);

    // Bit definitions
    /// TTCR0 Register bits
    namespace ttcr0_bits {
        constexpr uint32_t TRG6O = (1U << 15);  ///< PPG6 trigger stop bit
        constexpr uint32_t TRG4O = (1U << 14);  ///< PPG4 trigger stop bit
        constexpr uint32_t TRG2O = (1U << 13);  ///< PPG2 trigger stop bit
        constexpr uint32_t TRG0O = (1U << 12);  ///< PPG0 trigger stop bit
        constexpr uint32_t CS0 = (2 << 10);  ///< 8-bit UP counter clock select bits for comparison
        constexpr uint32_t MONI0 = (1U << 9);  ///< 8-bit UP counter operation state monitor bit for comparison
        constexpr uint32_t STR0 = (1U << 8);  ///< 8-bit UP counter operation enable bit for comparison
    }

    /// TRG Register bits
    namespace trg_bits {
        constexpr uint32_t PEN07 = (1U << 7);  ///< PPG7 Start Trigger bit
        constexpr uint32_t PEN06 = (1U << 6);  ///< PPG6 Start Trigger bit
        constexpr uint32_t PEN05 = (1U << 5);  ///< PPG5 Start Trigger bit
        constexpr uint32_t PEN04 = (1U << 4);  ///< PPG4 Start Trigger bit
        constexpr uint32_t PEN03 = (1U << 3);  ///< PPG3 Start Trigger bit
        constexpr uint32_t PEN02 = (1U << 2);  ///< PPG2 Start Trigger bit
        constexpr uint32_t PEN01 = (1U << 1);  ///< PPG1 Start Trigger bit
        constexpr uint32_t PEN00 = (1U << 0);  ///< PPG0 Start Trigger bit
    }

    /// REVC Register bits
    namespace revc_bits {
        constexpr uint32_t REV07 = (1U << 7);  ///< PPG7 Output Reverse Enable bit
        constexpr uint32_t REV06 = (1U << 6);  ///< PPG6 Output Reverse Enable bit
        constexpr uint32_t REV05 = (1U << 5);  ///< PPG5 Output Reverse Enable bit
        constexpr uint32_t REV04 = (1U << 4);  ///< PPG4 Output Reverse Enable bit
        constexpr uint32_t REV03 = (1U << 3);  ///< PPG3 Output Reverse Enable bit
        constexpr uint32_t REV02 = (1U << 2);  ///< PPG2 Output Reverse Enable bit
        constexpr uint32_t REV01 = (1U << 1);  ///< PPG1 Output Reverse Enable bit
        constexpr uint32_t REV00 = (1U << 0);  ///< PPG0 Output Reverse Enable bit
    }

    /// PPGC0 Register bits
    namespace ppgc0_bits {
        constexpr uint32_t PIE = (1U << 7);  ///< PPG Interrupt Enable bit
        constexpr uint32_t PUF = (1U << 6);  ///< PPG Counter Underflow bit
        constexpr uint32_t INTM = (1U << 5);  ///< Interrupt Mode Select bit
        constexpr uint32_t PCS = (2 << 3);  ///< PPG DOWN Counter Operation Clock Select bits
        constexpr uint32_t MD = (2 << 1);  ///< PPG Operation Mode Set bits
        constexpr uint32_t TTRG = (1U << 0);  ///< PPG start trigger select bit
    }

    /// PRLH0 Register bits
    namespace prlh0_bits {
        constexpr uint32_t PRLH = (8 << 0);  ///< Reload Registers High
    }

    /// PRLL0 Register bits
    namespace prll0_bits {
        constexpr uint32_t PRLL = (8 << 0);  ///< Reload Registers Low
    }

    /// GATEC0 Register bits
    namespace gatec0_bits {
        constexpr uint32_t STRG2 = (1U << 5);  ///< Select a trigger for PPG2
        constexpr uint32_t EDGE2 = (1U << 4);  ///< Select Start Effective Level for PPG2
        constexpr uint32_t STRG0 = (1U << 1);  ///< Select a trigger for PPG0
        constexpr uint32_t EDGE0 = (1U << 0);  ///< Select Start Effective Level for PPG0
    }

    /// GATEC4 Register bits
    namespace gatec4_bits {
        constexpr uint32_t STRG6 = (1U << 5);  ///< Select a trigger for PPG6
        constexpr uint32_t EDGE6 = (1U << 4);  ///< Select Start Effective Level for PPG6
        constexpr uint32_t STRG4 = (1U << 1);  ///< Select a trigger for PPG4
        constexpr uint32_t EDGE4 = (1U << 0);  ///< Select Start Effective Level for PPG4
    }

    /// IGBTC Register bits
    namespace igbtc_bits {
        constexpr uint32_t IGATIH = (1U << 7);  ///< Stop prohibition mode selection in output active bit
        constexpr uint32_t IGNFW = (3 << 4);  ///< Noise filter width selection bit
        constexpr uint32_t IGOSEL = (2 << 2);  ///< Output level selection bit
        constexpr uint32_t IGTRGLV = (1U << 1);  ///< Trigger input level selection bit
        constexpr uint32_t IGBTMD = (1U << 0);  ///< IGBT mode selection bit
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC0_BASE = 0x40027000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ADCR;  ///< Offset: 0x01 - A/D Control Register
        volatile uint32_t ADSR;  ///< Offset: 0x00 - A/D Status Register
        volatile uint32_t SCCR;  ///< Offset: 0x09 - Scan Conversion Control Register
        volatile uint32_t SFNS;  ///< Offset: 0x08 - Scan Conversion FIFO Stage Count Setup Register
        volatile uint32_t SCFD;  ///< Offset: 0x0C - Scan Conversion FIFO Data Register
        volatile uint32_t SCIS3;  ///< Offset: 0x11 - Scan Conversion Input Selection Register 3
        volatile uint32_t SCIS2;  ///< Offset: 0x10 - Scan Conversion Input Selection Register 2
        volatile uint32_t SCIS1;  ///< Offset: 0x15 - Scan Conversion Input Selection Register 1
        volatile uint32_t SCIS0;  ///< Offset: 0x14 - Scan Conversion Input Selection Register 0
        volatile uint32_t PFNS;  ///< Offset: 0x18 - Priority Conversion FIFO Stage Count Setup Register
        volatile uint32_t PCCR;  ///< Offset: 0x19 - Priority Conversion Control Register
        volatile uint32_t PCFD;  ///< Offset: 0x1C - Priority Conversion FIFO Data Register
        volatile uint32_t PCIS;  ///< Offset: 0x20 - Priority Conversion Input Selection Register
        volatile uint32_t CMPCR;  ///< Offset: 0x24 - A/D Comparison Control Register
        volatile uint32_t CMPD;  ///< Offset: 0x26 - A/D Comparison Value Setup Register
        volatile uint32_t ADSS3;  ///< Offset: 0x29 - Sampling Time Selection Register 3
        volatile uint32_t ADSS2;  ///< Offset: 0x28 - Sampling Time Selection Register 2
        volatile uint32_t ADSS1;  ///< Offset: 0x2D - Sampling Time Selection Register 1
        volatile uint32_t ADSS0;  ///< Offset: 0x2C - Sampling Time Selection Register 0
        volatile uint32_t ADST1;  ///< Offset: 0x30 - Sampling Time Setup Register 1
        volatile uint32_t ADST0;  ///< Offset: 0x31 - Sampling Time Setup Register 0
        volatile uint32_t ADCT;  ///< Offset: 0x34 - Comparison Time Setup Register
        volatile uint32_t PRTSL;  ///< Offset: 0x38 - Priority Conversion Timer Trigger Selection Register
        volatile uint32_t SCTSL;  ///< Offset: 0x39 - Scan Conversion Timer Trigger Selection Register
        volatile uint32_t ADCEN;  ///< Offset: 0x3C - A/D Operation Enable Setup Register
    };

    /// Peripheral instances
    inline Registers* ADC0 = reinterpret_cast<Registers*>(ADC0_BASE);

    // Bit definitions
    /// ADCR Register bits
    namespace adcr_bits {
        constexpr uint32_t SCIF = (1U << 7);  ///< Scan conversion interrupt request bit
        constexpr uint32_t PCIF = (1U << 6);  ///< Priority conversion interrupt request bit
        constexpr uint32_t CMPIF = (1U << 5);  ///< Conversion result comparison interrupt request bit
        constexpr uint32_t SCIE = (1U << 3);  ///< Scan conversion interrupt enable bit
        constexpr uint32_t PCIE = (1U << 2);  ///< Priority conversion interrupt enable bit
        constexpr uint32_t CMPIE = (1U << 1);  ///< Conversion result comparison interrupt enable bit
        constexpr uint32_t OVRIE = (1U << 0);  ///< FIFO overrun interrupt enable bit
    }

    /// ADSR Register bits
    namespace adsr_bits {
        constexpr uint32_t ADSTP = (1U << 7);  ///< A/D conversion forced stop bit
        constexpr uint32_t FDAS = (1U << 6);  ///< FIFO data placement selection bit
        constexpr uint32_t PCNS = (1U << 2);  ///< Priority conversion pending flag
        constexpr uint32_t PCS = (1U << 1);  ///< Priority conversion status flag
        constexpr uint32_t SCS = (1U << 0);  ///< Scan conversion status flag
    }

    /// SCCR Register bits
    namespace sccr_bits {
        constexpr uint32_t SEMP = (1U << 7);  ///< Scan conversion FIFO empty bit
        constexpr uint32_t SFUL = (1U << 6);  ///< Scan conversion FIFO full bit
        constexpr uint32_t SOVR = (1U << 5);  ///< Scan conversion overrun flag
        constexpr uint32_t SFCLR = (1U << 4);  ///< Scan conversion FIFO clear bit
        constexpr uint32_t RPT = (1U << 2);  ///< Scan conversion repeat bit
        constexpr uint32_t SHEN = (1U << 1);  ///< Scan conversion timer start enable bit
        constexpr uint32_t SSTR = (1U << 0);  ///< Scan conversion start bit
    }

    /// SFNS Register bits
    namespace sfns_bits {
        constexpr uint32_t SFS = (4 << 0);  ///< Scan conversion FIFO stage count setting bit
    }

    /// SCFD Register bits
    namespace scfd_bits {
        constexpr uint32_t SD = (12 << 20);  ///< Scan conversion result
        constexpr uint32_t INVL = (1U << 12);  ///< A/D conversion result disable bit
        constexpr uint32_t RS = (2 << 8);  ///< Scan conversion start factor
        constexpr uint32_t SC = (5 << 0);  ///< Conversion input channel bits
    }

    /// SCIS3 Register bits
    namespace scis3_bits {
        constexpr uint32_t AN31 = (1U << 7);  ///< Bit7 of SCIS3
        constexpr uint32_t AN30 = (1U << 6);  ///< Bit6 of SCIS3
        constexpr uint32_t AN29 = (1U << 5);  ///< Bit5 of SCIS3
        constexpr uint32_t AN28 = (1U << 4);  ///< Bit4 of SCIS3
        constexpr uint32_t AN27 = (1U << 3);  ///< Bit3 of SCIS3
        constexpr uint32_t AN26 = (1U << 2);  ///< Bit2 of SCIS3
        constexpr uint32_t AN25 = (1U << 1);  ///< Bit1 of SCIS3
        constexpr uint32_t AN24 = (1U << 0);  ///< Bit0 of SCIS3
    }

    /// SCIS2 Register bits
    namespace scis2_bits {
        constexpr uint32_t AN23 = (1U << 7);  ///< Bit7 of SCIS2
        constexpr uint32_t AN22 = (1U << 6);  ///< Bit6 of SCIS2
        constexpr uint32_t AN21 = (1U << 5);  ///< Bit5 of SCIS2
        constexpr uint32_t AN20 = (1U << 4);  ///< Bit4 of SCIS2
        constexpr uint32_t AN19 = (1U << 3);  ///< Bit3 of SCIS2
        constexpr uint32_t AN18 = (1U << 2);  ///< Bit2 of SCIS2
        constexpr uint32_t AN17 = (1U << 1);  ///< Bit1 of SCIS2
        constexpr uint32_t AN16 = (1U << 0);  ///< Bit0 of SCIS2
    }

    /// SCIS1 Register bits
    namespace scis1_bits {
        constexpr uint32_t AN15 = (1U << 7);  ///< Bit7 of SCIS1
        constexpr uint32_t AN14 = (1U << 6);  ///< Bit6 of SCIS1
        constexpr uint32_t AN13 = (1U << 5);  ///< Bit5 of SCIS1
        constexpr uint32_t AN12 = (1U << 4);  ///< Bit4 of SCIS1
        constexpr uint32_t AN11 = (1U << 3);  ///< Bit3 of SCIS1
        constexpr uint32_t AN10 = (1U << 2);  ///< Bit2 of SCIS1
        constexpr uint32_t AN9 = (1U << 1);  ///< Bit1 of SCIS1
        constexpr uint32_t AN8 = (1U << 0);  ///< Bit0 of SCIS1
    }

    /// SCIS0 Register bits
    namespace scis0_bits {
        constexpr uint32_t AN7 = (1U << 7);  ///< Bit7 of SCIS0
        constexpr uint32_t AN6 = (1U << 6);  ///< Bit6 of SCIS0
        constexpr uint32_t AN5 = (1U << 5);  ///< Bit5 of SCIS0
        constexpr uint32_t AN4 = (1U << 4);  ///< Bit4 of SCIS0
        constexpr uint32_t AN3 = (1U << 3);  ///< Bit3 of SCIS0
        constexpr uint32_t AN2 = (1U << 2);  ///< Bit2 of SCIS0
        constexpr uint32_t AN1 = (1U << 1);  ///< Bit1 of SCIS0
        constexpr uint32_t AN0 = (1U << 0);  ///< Bit0 of SCIS0
    }

    /// PFNS Register bits
    namespace pfns_bits {
        constexpr uint32_t TEST = (2 << 4);  ///< Test bits
        constexpr uint32_t PFS = (2 << 0);  ///< Priority conversion FIFO stage count setting bits
    }

    /// PCCR Register bits
    namespace pccr_bits {
        constexpr uint32_t PEMP = (1U << 7);  ///< Priority conversion FIFO empty bit
        constexpr uint32_t PFUL = (1U << 6);  ///< Priority conversion FIFO full bit
        constexpr uint32_t POVR = (1U << 5);  ///< Priority conversion overrun flag
        constexpr uint32_t PFCLR = (1U << 4);  ///< Priority conversion FIFO clear bit
        constexpr uint32_t ESCE = (1U << 3);  ///< External trigger analog input selection bit
        constexpr uint32_t PEEN = (1U << 2);  ///< Priority conversion external start enable bit
        constexpr uint32_t PHEN = (1U << 1);  ///< Priority conversion timer start enable bit
        constexpr uint32_t PSTR = (1U << 0);  ///< Priority conversion start bit
    }

    /// PCFD Register bits
    namespace pcfd_bits {
        constexpr uint32_t PD = (12 << 20);  ///< Priority conversion result
        constexpr uint32_t INVL = (1U << 12);  ///< A/D conversion result disable bit
        constexpr uint32_t RS = (3 << 8);  ///< Scan conversion start factor
        constexpr uint32_t PC = (5 << 0);  ///< Conversion input channel bits
    }

    /// PCIS Register bits
    namespace pcis_bits {
        constexpr uint32_t P2A = (5 << 3);  ///< Priority level 2 analog input selection
        constexpr uint32_t P1A = (3 << 0);  ///< Priority level 1 analog input selection
    }

    /// CMPCR Register bits
    namespace cmpcr_bits {
        constexpr uint32_t CMPEN = (1U << 7);  ///< Conversion result comparison function operation enable bit
        constexpr uint32_t CMD1 = (1U << 6);  ///< Comparison mode 1
        constexpr uint32_t CMD0 = (1U << 5);  ///< Comparison mode 0
        constexpr uint32_t CCH = (5 << 0);  ///< Comparison target analog input channel
    }

    /// CMPD Register bits
    namespace cmpd_bits {
        constexpr uint32_t CMAD = (10 << 6);  ///< A/D conversion result value setting bits
    }

    /// ADSS3 Register bits
    namespace adss3_bits {
        constexpr uint32_t TS31 = (1U << 7);  ///< Bit7 of ADSS3
        constexpr uint32_t TS30 = (1U << 6);  ///< Bit6 of ADSS3
        constexpr uint32_t TS29 = (1U << 5);  ///< Bit5 of ADSS3
        constexpr uint32_t TS28 = (1U << 4);  ///< Bit4 of ADSS3
        constexpr uint32_t TS27 = (1U << 3);  ///< Bit3 of ADSS3
        constexpr uint32_t TS26 = (1U << 2);  ///< Bit2 of ADSS3
        constexpr uint32_t TS25 = (1U << 1);  ///< Bit1 of ADSS3
        constexpr uint32_t TS24 = (1U << 0);  ///< Bit0 of ADSS3
    }

    /// ADSS2 Register bits
    namespace adss2_bits {
        constexpr uint32_t TS23 = (1U << 7);  ///< Bit7 of ADSS2
        constexpr uint32_t TS22 = (1U << 6);  ///< Bit6 of ADSS2
        constexpr uint32_t TS21 = (1U << 5);  ///< Bit5 of ADSS2
        constexpr uint32_t TS20 = (1U << 4);  ///< Bit4 of ADSS2
        constexpr uint32_t TS19 = (1U << 3);  ///< Bit3 of ADSS2
        constexpr uint32_t TS18 = (1U << 2);  ///< Bit2 of ADSS2
        constexpr uint32_t TS17 = (1U << 1);  ///< Bit1 of ADSS2
        constexpr uint32_t TS16 = (1U << 0);  ///< Bit0 of ADSS2
    }

    /// ADSS1 Register bits
    namespace adss1_bits {
        constexpr uint32_t TS15 = (1U << 7);  ///< Bit7 of ADSS1
        constexpr uint32_t TS14 = (1U << 6);  ///< Bit6 of ADSS1
        constexpr uint32_t TS13 = (1U << 5);  ///< Bit5 of ADSS1
        constexpr uint32_t TS12 = (1U << 4);  ///< Bit4 of ADSS1
        constexpr uint32_t TS11 = (1U << 3);  ///< Bit3 of ADSS1
        constexpr uint32_t TS10 = (1U << 2);  ///< Bit2 of ADSS1
        constexpr uint32_t TS9 = (1U << 1);  ///< Bit1 of ADSS1
        constexpr uint32_t TS8 = (1U << 0);  ///< Bit0 of ADSS1
    }

    /// ADSS0 Register bits
    namespace adss0_bits {
        constexpr uint32_t TS7 = (1U << 7);  ///< Bit7 of ADSS0
        constexpr uint32_t TS6 = (1U << 6);  ///< Bit6 of ADSS0
        constexpr uint32_t TS5 = (1U << 5);  ///< Bit5 of ADSS0
        constexpr uint32_t TS4 = (1U << 4);  ///< Bit4 of ADSS0
        constexpr uint32_t TS3 = (1U << 3);  ///< Bit3 of ADSS0
        constexpr uint32_t TS2 = (1U << 2);  ///< Bit2 of ADSS0
        constexpr uint32_t TS1 = (1U << 1);  ///< Bit1 of ADSS0
        constexpr uint32_t TS0 = (1U << 0);  ///< Bit0 of ADSS0
    }

    /// ADST1 Register bits
    namespace adst1_bits {
        constexpr uint32_t STX1 = (3 << 5);  ///< Sampling time N times setting bits
        constexpr uint32_t ST1 = (5 << 0);  ///< Sampling time setting bits
    }

    /// ADST0 Register bits
    namespace adst0_bits {
        constexpr uint32_t STX0 = (3 << 5);  ///< Sampling time N times setting bits
        constexpr uint32_t ST0 = (5 << 0);  ///< Sampling time setting bits
    }

    /// ADCT Register bits
    namespace adct_bits {
        constexpr uint32_t CT = (8 << 0);  ///< Compare clock frequency division ratio setting bits
    }

    /// PRTSL Register bits
    namespace prtsl_bits {
        constexpr uint32_t PRTSL = (4 << 0);  ///< Priority conversion timer trigger selection bit
    }

    /// SCTSL Register bits
    namespace sctsl_bits {
        constexpr uint32_t SCTSL = (4 << 0);  ///< Scan conversion timer trigger selection bit
    }

    /// ADCEN Register bits
    namespace adcen_bits {
        constexpr uint32_t ENBLTIME = (8 << 8);  ///< Basic cycle selection bit
        constexpr uint32_t READY = (1U << 1);  ///< A/D operation enable state bit
        constexpr uint32_t ENBL = (1U << 0);  ///< A/D operation enable bit
    }

}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DAC_BASE = 0x40028000;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t DADR0;  ///< Offset: 0x00 - D/A Data Register
        volatile uint32_t DACR0;  ///< Offset: 0x02 - D/A Control Register
        volatile uint32_t DADR1;  ///< Offset: 0x04 - D/A Data Register
        volatile uint32_t DACR1;  ///< Offset: 0x06 - D/A Control Register
    };

    /// Peripheral instances
    inline Registers* DAC = reinterpret_cast<Registers*>(DAC_BASE);

    // Bit definitions
    /// DADR0 Register bits
    namespace dadr0_bits {
        constexpr uint32_t DA9 = (1U << 9);  ///< Bit9 of DADR0
        constexpr uint32_t DA8 = (1U << 8);  ///< Bit8 of DADR0
        constexpr uint32_t DA7 = (1U << 7);  ///< Bit7 of DADR0
        constexpr uint32_t DA6 = (1U << 6);  ///< Bit6 of DADR0
        constexpr uint32_t DA5 = (1U << 5);  ///< Bit5 of DADR0
        constexpr uint32_t DA4 = (1U << 4);  ///< Bit4 of DADR0
        constexpr uint32_t DA3 = (1U << 3);  ///< Bit3 of DADR0
        constexpr uint32_t DA2 = (1U << 2);  ///< Bit2 of DADR0
        constexpr uint32_t DA1 = (1U << 1);  ///< Bit1 of DADR0
        constexpr uint32_t DA0 = (1U << 0);  ///< Bit0 of DADR0
    }

    /// DACR0 Register bits
    namespace dacr0_bits {
        constexpr uint32_t DAE = (1U << 0);  ///< D/A converter operation enable bit
    }

    /// DADR1 Register bits
    namespace dadr1_bits {
        constexpr uint32_t DA9 = (1U << 9);  ///< Bit9 of DADR1
        constexpr uint32_t DA8 = (1U << 8);  ///< Bit8 of DADR1
        constexpr uint32_t DA7 = (1U << 7);  ///< Bit7 of DADR1
        constexpr uint32_t DA6 = (1U << 6);  ///< Bit6 of DADR1
        constexpr uint32_t DA5 = (1U << 5);  ///< Bit5 of DADR1
        constexpr uint32_t DA4 = (1U << 4);  ///< Bit4 of DADR1
        constexpr uint32_t DA3 = (1U << 3);  ///< Bit3 of DADR1
        constexpr uint32_t DA2 = (1U << 2);  ///< Bit2 of DADR1
        constexpr uint32_t DA1 = (1U << 1);  ///< Bit1 of DADR1
        constexpr uint32_t DA0 = (1U << 0);  ///< Bit0 of DADR1
    }

    /// DACR1 Register bits
    namespace dacr1_bits {
        constexpr uint32_t DAE = (1U << 0);  ///< D/A converter operation enable bit
    }

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40030000;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t ENIR;  ///< Offset: 0x00 - Enable Interrupt Request Register
        volatile uint32_t EIRR;  ///< Offset: 0x04 - External Interrupt Request Register
        volatile uint32_t EICL;  ///< Offset: 0x08 - External Interrupt Clear Register
        volatile uint32_t ELVR;  ///< Offset: 0x0C - External Interrupt Level Register
        volatile uint32_t NMIRR;  ///< Offset: 0x14 - Non Maskable Interrupt Request Register
        volatile uint32_t NMICL;  ///< Offset: 0x18 - Non Maskable Interrupt Clear Register
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// ENIR Register bits
    namespace enir_bits {
        constexpr uint32_t EN15 = (1U << 15);  ///< Bit15 of ENIR
        constexpr uint32_t EN14 = (1U << 14);  ///< Bit14 of ENIR
        constexpr uint32_t EN8 = (1U << 8);  ///< Bit8 of ENIR
        constexpr uint32_t EN7 = (1U << 7);  ///< Bit7 of ENIR
        constexpr uint32_t EN6 = (1U << 6);  ///< Bit6 of ENIR
        constexpr uint32_t EN5 = (1U << 5);  ///< Bit5 of ENIR
        constexpr uint32_t EN4 = (1U << 4);  ///< Bit4 of ENIR
        constexpr uint32_t EN3 = (1U << 3);  ///< Bit3 of ENIR
        constexpr uint32_t EN2 = (1U << 2);  ///< Bit2 of ENIR
        constexpr uint32_t EN1 = (1U << 1);  ///< Bit1 of ENIR
        constexpr uint32_t EN0 = (1U << 0);  ///< Bit0 of ENIR
    }

    /// EIRR Register bits
    namespace eirr_bits {
        constexpr uint32_t ER15 = (1U << 15);  ///< Bit15 of EIRR
        constexpr uint32_t ER14 = (1U << 14);  ///< Bit14 of EIRR
        constexpr uint32_t ER8 = (1U << 8);  ///< Bit8 of EIRR
        constexpr uint32_t ER7 = (1U << 7);  ///< Bit7 of EIRR
        constexpr uint32_t ER6 = (1U << 6);  ///< Bit6 of EIRR
        constexpr uint32_t ER5 = (1U << 5);  ///< Bit5 of EIRR
        constexpr uint32_t ER4 = (1U << 4);  ///< Bit4 of EIRR
        constexpr uint32_t ER3 = (1U << 3);  ///< Bit3 of EIRR
        constexpr uint32_t ER2 = (1U << 2);  ///< Bit2 of EIRR
        constexpr uint32_t ER1 = (1U << 1);  ///< Bit1 of EIRR
        constexpr uint32_t ER0 = (1U << 0);  ///< Bit0 of EIRR
    }

    /// EICL Register bits
    namespace eicl_bits {
        constexpr uint32_t ECL15 = (1U << 15);  ///< Bit15 of EICL
        constexpr uint32_t ECL14 = (1U << 14);  ///< Bit14 of EICL
        constexpr uint32_t ECL8 = (1U << 8);  ///< Bit8 of EICL
        constexpr uint32_t ECL7 = (1U << 7);  ///< Bit7 of EICL
        constexpr uint32_t ECL6 = (1U << 6);  ///< Bit6 of EICL
        constexpr uint32_t ECL5 = (1U << 5);  ///< Bit5 of EICL
        constexpr uint32_t ECL4 = (1U << 4);  ///< Bit4 of EICL
        constexpr uint32_t ECL3 = (1U << 3);  ///< Bit3 of EICL
        constexpr uint32_t ECL2 = (1U << 2);  ///< Bit2 of EICL
        constexpr uint32_t ECL1 = (1U << 1);  ///< Bit1 of EICL
        constexpr uint32_t ECL0 = (1U << 0);  ///< Bit0 of EICL
    }

    /// ELVR Register bits
    namespace elvr_bits {
        constexpr uint32_t LB15 = (1U << 31);  ///< Bit31 of ELVR
        constexpr uint32_t LA15 = (1U << 30);  ///< Bit30 of ELVR
        constexpr uint32_t LB14 = (1U << 29);  ///< Bit29 of ELVR
        constexpr uint32_t LA14 = (1U << 28);  ///< Bit28 of ELVR
        constexpr uint32_t LB8 = (1U << 17);  ///< Bit17 of ELVR
        constexpr uint32_t LA8 = (1U << 16);  ///< Bit16 of ELVR
        constexpr uint32_t LB7 = (1U << 15);  ///< Bit15 of ELVR
        constexpr uint32_t LA7 = (1U << 14);  ///< Bit14 of ELVR
        constexpr uint32_t LB6 = (1U << 13);  ///< Bit13 of ELVR
        constexpr uint32_t LA6 = (1U << 12);  ///< Bit12 of ELVR
        constexpr uint32_t LB5 = (1U << 11);  ///< Bit11 of ELVR
        constexpr uint32_t LA5 = (1U << 10);  ///< Bit10 of ELVR
        constexpr uint32_t LB4 = (1U << 9);  ///< Bit9 of ELVR
        constexpr uint32_t LA4 = (1U << 8);  ///< Bit8 of ELVR
        constexpr uint32_t LB3 = (1U << 7);  ///< Bit7 of ELVR
        constexpr uint32_t LA3 = (1U << 6);  ///< Bit6 of ELVR
        constexpr uint32_t LB2 = (1U << 5);  ///< Bit5 of ELVR
        constexpr uint32_t LA2 = (1U << 4);  ///< Bit4 of ELVR
        constexpr uint32_t LB1 = (1U << 3);  ///< Bit3 of ELVR
        constexpr uint32_t LA1 = (1U << 2);  ///< Bit2 of ELVR
        constexpr uint32_t LB0 = (1U << 1);  ///< Bit1 of ELVR
        constexpr uint32_t LA0 = (1U << 0);  ///< Bit0 of ELVR
    }

    /// NMIRR Register bits
    namespace nmirr_bits {
        constexpr uint32_t NR = (1U << 0);  ///< NMI interrupt request detection bit
    }

    /// NMICL Register bits
    namespace nmicl_bits {
        constexpr uint32_t NCL = (1U << 0);  ///< NMI interrupt cause clear bit
    }

}

// ============================================================================
// INTREQ Peripheral
// ============================================================================

namespace intreq {
    /// Base addresses
    constexpr uint32_t INTREQ_BASE = 0x40031000;

    /// INTREQ Register structure
    struct Registers {
        volatile uint32_t EXC02MON;  ///< Offset: 0x10 - EXC02 batch read register
        volatile uint32_t IRQ00MON;  ///< Offset: 0x14 - IRQ00 Batch Read Register
        volatile uint32_t IRQ01MON;  ///< Offset: 0x18 - IRQ01 Batch Read Register
        volatile uint32_t IRQ02MON;  ///< Offset: 0x1C - IRQ02 Batch Read Register
        volatile uint32_t IRQ03MON;  ///< Offset: 0x20 - IRQ03 Batch Read Register
        volatile uint32_t IRQ04MON;  ///< Offset: 0x24 - IRQ04 Batch Read Register
        volatile uint32_t IRQ05MON;  ///< Offset: 0x28 - IRQ05 Batch Read Register
        volatile uint32_t IRQ06MON;  ///< Offset: 0x2C - IRQ06 Batch Read Register
        volatile uint32_t IRQ07MON;  ///< Offset: 0x30 - IRQ07 Batch Read Register
        volatile uint32_t IRQ08MON;  ///< Offset: 0x34 - IRQ08 Batch Read Register
        volatile uint32_t IRQ09MON;  ///< Offset: 0x38 - IRQ9 Batch Read Register
        volatile uint32_t IRQ10MON;  ///< Offset: 0x3C - IRQ10 Batch Read Register
        volatile uint32_t IRQ11MON;  ///< Offset: 0x40 - IRQ11 Batch Read Register
        volatile uint32_t IRQ12MON;  ///< Offset: 0x44 - IRQ12 Batch Read Register
        volatile uint32_t IRQ13MON;  ///< Offset: 0x48 - IRQ13 Batch Read Register
        volatile uint32_t IRQ14MON;  ///< Offset: 0x4C - IRQ14 Batch Read Register
        volatile uint32_t IRQ15MON;  ///< Offset: 0x50 - IRQ15 Batch Read Register
        volatile uint32_t IRQ16MON;  ///< Offset: 0x54 - IRQ16 Batch Read Register
        volatile uint32_t IRQ17MON;  ///< Offset: 0x58 - IRQ17 Batch Read Register
        volatile uint32_t IRQ18MON;  ///< Offset: 0x5C - IRQ18 Batch Read Register
        volatile uint32_t IRQ19MON;  ///< Offset: 0x60 - IRQ19 Batch Read Register
        volatile uint32_t IRQ20MON;  ///< Offset: 0x64 - IRQ20 Batch Read Register
        volatile uint32_t IRQ21MON;  ///< Offset: 0x68 - IRQ21 Batch Read Register
        volatile uint32_t IRQ22MON;  ///< Offset: 0x6C - IRQ22 Batch Read Register
        volatile uint32_t IRQ23MON;  ///< Offset: 0x70 - IRQ23 Batch Read Register
        volatile uint32_t IRQ24MON;  ///< Offset: 0x74 - IRQ24 Batch Read Register
        volatile uint32_t IRQ25MON;  ///< Offset: 0x78 - IRQ25 Batch Read Register
        volatile uint32_t IRQ26MON;  ///< Offset: 0x7C - IRQ26 Batch Read Register
        volatile uint32_t IRQ27MON;  ///< Offset: 0x80 - IRQ27 Batch Read Register
        volatile uint32_t IRQ28MON;  ///< Offset: 0x84 - IRQ28 Batch Read Register
        volatile uint32_t IRQ30MON;  ///< Offset: 0x8C - IRQ30 Batch Read Register
        volatile uint32_t IRQ31MON;  ///< Offset: 0x90 - IRQ31 Batch Read Register
    };

    /// Peripheral instances
    inline Registers* INTREQ = reinterpret_cast<Registers*>(INTREQ_BASE);

    // Bit definitions
    /// EXC02MON Register bits
    namespace exc02mon_bits {
        constexpr uint32_t HWINT = (1U << 1);  ///< Hardware watchdog timer interrupt request
        constexpr uint32_t NMI = (1U << 0);  ///< External NMIX pin interrupt request
    }

    /// IRQ00MON Register bits
    namespace irq00mon_bits {
        constexpr uint32_t FCSINT = (1U << 0);  ///< Anomalous frequency detection by CSV interrupt request
    }

    /// IRQ01MON Register bits
    namespace irq01mon_bits {
        constexpr uint32_t SWWDTINT = (1U << 0);  ///< Software watchdog timer interrupt request
    }

    /// IRQ02MON Register bits
    namespace irq02mon_bits {
        constexpr uint32_t LVDINT = (1U << 0);  ///< Low voltage detection (LVD) interrupt request
    }

    /// IRQ03MON Register bits
    namespace irq03mon_bits {
        constexpr uint32_t WAVE0INT3 = (1U << 3);  ///< WFG timer 54 interrupt request in MFT unit 0
        constexpr uint32_t WAVE0INT2 = (1U << 2);  ///< WFG timer 32 interrupt request in MFT unit 0
        constexpr uint32_t WAVE0INT1 = (1U << 1);  ///< WFG timer 10 interrupt request in MFT unit 0
        constexpr uint32_t WAVE0INT0 = (1U << 0);  ///< DTIF (motor emergency stop) interrupt request in MFT unit 0
    }

    /// IRQ04MON Register bits
    namespace irq04mon_bits {
        constexpr uint32_t EXTINT7 = (1U << 7);  ///< Interrupt request on external interrupt ch.7
        constexpr uint32_t EXTINT6 = (1U << 6);  ///< Interrupt request on external interrupt ch.6
        constexpr uint32_t EXTINT5 = (1U << 5);  ///< Interrupt request on external interrupt ch.5
        constexpr uint32_t EXTINT4 = (1U << 4);  ///< Interrupt request on external interrupt ch.4
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< Interrupt request on external interrupt ch.3
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< Interrupt request on external interrupt ch.2
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< Interrupt request on external interrupt ch.1
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< Interrupt request on external interrupt ch.0
    }

    /// IRQ05MON Register bits
    namespace irq05mon_bits {
        constexpr uint32_t EXTINT15 = (1U << 7);  ///< Interrupt request on external interrupt ch.15
        constexpr uint32_t EXTINT14 = (1U << 6);  ///< Interrupt request on external interrupt ch.14
        constexpr uint32_t EXTINT8 = (1U << 0);  ///< Interrupt request on external interrupt ch.8
    }

    /// IRQ06MON Register bits
    namespace irq06mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.0
    }

    /// IRQ07MON Register bits
    namespace irq07mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.0
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.0
    }

    /// IRQ08MON Register bits
    namespace irq08mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.1
    }

    /// IRQ09MON Register bits
    namespace irq09mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.1
    }

    /// IRQ10MON Register bits
    namespace irq10mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.2
    }

    /// IRQ11MON Register bits
    namespace irq11mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.2
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.2
    }

    /// IRQ12MON Register bits
    namespace irq12mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.3
    }

    /// IRQ13MON Register bits
    namespace irq13mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.3
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.3
    }

    /// IRQ14MON Register bits
    namespace irq14mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.4
    }

    /// IRQ15MON Register bits
    namespace irq15mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.4
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.4
    }

    /// IRQ16MON Register bits
    namespace irq16mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.5
    }

    /// IRQ17MON Register bits
    namespace irq17mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.5
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.5
    }

    /// IRQ18MON Register bits
    namespace irq18mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.6
    }

    /// IRQ19MON Register bits
    namespace irq19mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.6
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.6
    }

    /// IRQ20MON Register bits
    namespace irq20mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.7
    }

    /// IRQ21MON Register bits
    namespace irq21mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.7
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.7
    }

    /// IRQ22MON Register bits
    namespace irq22mon_bits {
        constexpr uint32_t PPGINT2 = (1U << 2);  ///< Interrupt request on PPG ch.4
        constexpr uint32_t PPGINT1 = (1U << 1);  ///< Interrupt request on PPG ch.2
        constexpr uint32_t PPGINT0 = (1U << 0);  ///< Interrupt request on PPG ch.0
    }

    /// IRQ23MON Register bits
    namespace irq23mon_bits {
        constexpr uint32_t RTCINT = (1U << 5);  ///< RTC interrupt request
        constexpr uint32_t MPLLINT = (1U << 2);  ///< Stabilization wait completion interrupt request for main PLL oscillation
        constexpr uint32_t SOSCINT = (1U << 1);  ///< Stabilization wait completion interrupt request for sub-clock oscillation
        constexpr uint32_t MOSCINT = (1U << 0);  ///< Stabilization wait completion interrupt request for main clock oscillation
    }

    /// IRQ24MON Register bits
    namespace irq24mon_bits {
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< Conversion result comparison interrupt request in the corresponding A/D unit 0.
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< FIFO overrun interrupt request in the corresponding A/D unit 0.
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< Scan conversion interrupt request in the corresponding A/D unit 0.
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< Priority conversion interrupt request in the corresponding A/D unit 0.
    }

    /// IRQ25MON Register bits
    namespace irq25mon_bits {
        constexpr uint32_t FRT0INT5 = (1U << 5);  ///< Zero detection interrupt request on the free run timer ch.2 in the MFT unit 0
        constexpr uint32_t FRT0INT4 = (1U << 4);  ///< Zero detection interrupt request on the free run timer ch.1 in the MFT unit 0
        constexpr uint32_t FRT0INT3 = (1U << 3);  ///< Zero detection interrupt request on the free run timer ch.0 in the MFT unit 0
        constexpr uint32_t FRT0INT2 = (1U << 2);  ///< Peak value detection interrupt request on the free run timer ch.2 in the MFT unit 0
        constexpr uint32_t FRT0INT1 = (1U << 1);  ///< Peak value detection interrupt request on the free run timer ch.1 in the MFT unit 0
        constexpr uint32_t FRT0INT0 = (1U << 0);  ///< Peak value detection interrupt request on the free run timer ch.0 in the MFT unit 0
    }

    /// IRQ26MON Register bits
    namespace irq26mon_bits {
        constexpr uint32_t ICU0INT3 = (1U << 3);  ///< Interrupt request on the input capture ch.3 in the MFT unit 0
        constexpr uint32_t ICU0INT2 = (1U << 2);  ///< Interrupt request on the input capture ch.2 in the MFT unit 0
        constexpr uint32_t ICU0INT1 = (1U << 1);  ///< Interrupt request on the input capture ch.1 in the MFT unit 0
        constexpr uint32_t ICU0INT0 = (1U << 0);  ///< Interrupt request on the input capture ch.0 in the MFT unit 0
    }

    /// IRQ27MON Register bits
    namespace irq27mon_bits {
        constexpr uint32_t OCU0INT5 = (1U << 5);  ///< Interrupt request on the output compare ch.5 in the MFT unit 0
        constexpr uint32_t OCU0INT4 = (1U << 4);  ///< Interrupt request on the output compare ch.4 in the MFT unit 0
        constexpr uint32_t OCU0INT3 = (1U << 3);  ///< Interrupt request on the output compare ch.3 in the MFT unit 0
        constexpr uint32_t OCU0INT2 = (1U << 2);  ///< Interrupt request on the output compare ch.2 in the MFT unit 0
        constexpr uint32_t OCU0INT1 = (1U << 1);  ///< Interrupt request on the output compare ch.1 in the MFT unit 0
        constexpr uint32_t OCU0INT0 = (1U << 0);  ///< Interrupt request on the output compare ch.0 in the MFT unit 0
    }

    /// IRQ28MON Register bits
    namespace irq28mon_bits {
        constexpr uint32_t BTINT15 = (1U << 15);  ///< IRQ1 interrupt request on the base timer ch.7
        constexpr uint32_t BTINT14 = (1U << 14);  ///< IRQ0 interrupt request on the base timer ch.7
        constexpr uint32_t BTINT13 = (1U << 13);  ///< IRQ1 interrupt request on the base timer ch.6
        constexpr uint32_t BTINT12 = (1U << 12);  ///< IRQ0 interrupt request on the base timer ch.6
        constexpr uint32_t BTINT11 = (1U << 11);  ///< IRQ1 interrupt request on the base timer ch.5
        constexpr uint32_t BTINT10 = (1U << 10);  ///< IRQ0 interrupt request on the base timer ch.5
        constexpr uint32_t BTINT9 = (1U << 9);  ///< IRQ1 interrupt request on the base timer ch.4
        constexpr uint32_t BTINT8 = (1U << 8);  ///< IRQ0 interrupt request on the base timer ch.4
        constexpr uint32_t BTINT7 = (1U << 7);  ///< IRQ1 interrupt request on the base timer ch.3
        constexpr uint32_t BTINT6 = (1U << 6);  ///< IRQ0 interrupt request on the base timer ch.3
        constexpr uint32_t BTINT5 = (1U << 5);  ///< IRQ1 interrupt request on the base timer ch.2
        constexpr uint32_t BTINT4 = (1U << 4);  ///< IRQ0 interrupt request on the base timer ch.2
        constexpr uint32_t BTINT3 = (1U << 3);  ///< IRQ1 interrupt request on the base timer ch.1
        constexpr uint32_t BTINT2 = (1U << 2);  ///< IRQ0 interrupt request on the base timer ch.1
        constexpr uint32_t BTINT1 = (1U << 1);  ///< IRQ1 interrupt request on the base timer ch.0
        constexpr uint32_t BTINT0 = (1U << 0);  ///< IRQ0 interrupt request on the base timer ch.0
    }

    /// IRQ30MON Register bits
    namespace irq30mon_bits {
        constexpr uint32_t RCEC0INT = (1U << 5);  ///< Interrupt request for HDMI-CEC/Remote Control Reception ch.0
    }

    /// IRQ31MON Register bits
    namespace irq31mon_bits {
        constexpr uint32_t RCEC1INT = (1U << 6);  ///< Interrupt request for HDMI-CEC/Remote Control Reception ch.1
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_BASE = 0x40033000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t PFR0;  ///< Offset: 0x00 - Port function setting register 0
        volatile uint32_t PFR1;  ///< Offset: 0x04 - Port function setting register 1
        volatile uint32_t PFR2;  ///< Offset: 0x08 - Port function setting register 2
        volatile uint32_t PFR3;  ///< Offset: 0x0C - Port function setting register 3
        volatile uint32_t PFR4;  ///< Offset: 0x10 - Port function setting register 4
        volatile uint32_t PFR5;  ///< Offset: 0x14 - Port function setting register 5
        volatile uint32_t PFR6;  ///< Offset: 0x18 - Port function setting register 6
        volatile uint32_t PFR8;  ///< Offset: 0x20 - Port function setting register 8
        volatile uint32_t PFRE;  ///< Offset: 0x38 - Port function setting register E
        volatile uint32_t PCR0;  ///< Offset: 0x100 - Pull-up Setting Register 0
        volatile uint32_t PCR1;  ///< Offset: 0x104 - Pull-up Setting Register 1
        volatile uint32_t PCR2;  ///< Offset: 0x108 - Pull-up Setting Register 2
        volatile uint32_t PCR3;  ///< Offset: 0x10C - Pull-up Setting Register 3
        volatile uint32_t PCR4;  ///< Offset: 0x110 - Pull-up Setting Register 4
        volatile uint32_t PCR5;  ///< Offset: 0x114 - Pull-up Setting Register 5
        volatile uint32_t PCR6;  ///< Offset: 0x118 - Pull-up Setting Register 6
        volatile uint32_t PCRE;  ///< Offset: 0x138 - Pull-up Setting Register E
        volatile uint32_t DDR0;  ///< Offset: 0x200 - Port input/output direction setting register 0
        volatile uint32_t DDR1;  ///< Offset: 0x204 - Port input/output direction setting register 1
        volatile uint32_t DDR2;  ///< Offset: 0x208 - Port input/output direction setting register 2
        volatile uint32_t DDR3;  ///< Offset: 0x20C - Port input/output direction setting register 3
        volatile uint32_t DDR4;  ///< Offset: 0x210 - Port input/output direction setting register 4
        volatile uint32_t DDR5;  ///< Offset: 0x214 - Port input/output direction setting register 5
        volatile uint32_t DDR6;  ///< Offset: 0x218 - Port input/output direction setting register 6
        volatile uint32_t DDR8;  ///< Offset: 0x220 - Port input/output direction setting register 8
        volatile uint32_t DDRE;  ///< Offset: 0x238 - Port input/output direction setting register E
        volatile uint32_t PDIR0;  ///< Offset: 0x300 - Port input data register 0
        volatile uint32_t PDIR1;  ///< Offset: 0x304 - Port input data register 1
        volatile uint32_t PDIR2;  ///< Offset: 0x308 - Port input data register 2
        volatile uint32_t PDIR3;  ///< Offset: 0x30C - Port input data register 3
        volatile uint32_t PDIR4;  ///< Offset: 0x310 - Port input data register 4
        volatile uint32_t PDIR5;  ///< Offset: 0x314 - Port input data register 5
        volatile uint32_t PDIR6;  ///< Offset: 0x318 - Port input data register 6
        volatile uint32_t PDIR8;  ///< Offset: 0x320 - Port input data register 8
        volatile uint32_t PDIRE;  ///< Offset: 0x338 - Port input data register E
        volatile uint32_t PDOR0;  ///< Offset: 0x400 - Port output data register 0
        volatile uint32_t PDOR1;  ///< Offset: 0x404 - Port output data register 1
        volatile uint32_t PDOR2;  ///< Offset: 0x408 - Port output data register 2
        volatile uint32_t PDOR3;  ///< Offset: 0x40C - Port output data register 3
        volatile uint32_t PDOR4;  ///< Offset: 0x410 - Port output data register 4
        volatile uint32_t PDOR5;  ///< Offset: 0x414 - Port output data register 5
        volatile uint32_t PDOR6;  ///< Offset: 0x418 - Port output data register 6
        volatile uint32_t PDOR8;  ///< Offset: 0x420 - Port output data register 8
        volatile uint32_t PDORE;  ///< Offset: 0x438 - Port output data register E
        volatile uint32_t ADE;  ///< Offset: 0x500 - Analog input setting register
        volatile uint32_t SPSR;  ///< Offset: 0x580 - Special port setting register
        volatile uint32_t EPFR00;  ///< Offset: 0x600 - Extended pin function setting register 00
        volatile uint32_t EPFR01;  ///< Offset: 0x604 - Extended pin function setting register 01
        volatile uint32_t EPFR04;  ///< Offset: 0x610 - Extended pin function setting register 04
        volatile uint32_t EPFR05;  ///< Offset: 0x614 - Extended pin function setting register 05
        volatile uint32_t EPFR06;  ///< Offset: 0x618 - Extended pin function setting register 06
        volatile uint32_t EPFR07;  ///< Offset: 0x61C - Extended pin function setting register 07
        volatile uint32_t EPFR08;  ///< Offset: 0x620 - Extended pin function setting register 08
        volatile uint32_t EPFR09;  ///< Offset: 0x624 - Extended pin function setting register 09
        volatile uint32_t EPFR14;  ///< Offset: 0x638 - Extended pin function setting register 14
        volatile uint32_t PZR0;  ///< Offset: 0x700 - Port Pseudo Open Drain Setting Register 0
        volatile uint32_t PZR6;  ///< Offset: 0x718 - Port Pseudo Open Drain Setting Register 6
        volatile uint32_t PZR8;  ///< Offset: 0x720 - Port Pseudo Open Drain Setting Register 8
    };

    /// Peripheral instances
    inline Registers* GPIO = reinterpret_cast<Registers*>(GPIO_BASE);

    // Bit definitions
    /// PFR0 Register bits
    namespace pfr0_bits {
        constexpr uint32_t PF = (1U << 15);  ///< Bit15 of PFR0
        constexpr uint32_t PE = (1U << 14);  ///< Bit14 of PFR0
        constexpr uint32_t PD = (1U << 13);  ///< Bit13 of PFR0
        constexpr uint32_t PC = (1U << 12);  ///< Bit12 of PFR0
        constexpr uint32_t PB = (1U << 11);  ///< Bit11 of PFR0
        constexpr uint32_t PA = (1U << 10);  ///< Bit10 of PFR0
        constexpr uint32_t P7 = (1U << 7);  ///< Bit7 of PFR0
        constexpr uint32_t P4 = (1U << 4);  ///< Bit4 of PFR0
        constexpr uint32_t P3 = (1U << 3);  ///< Bit3 of PFR0
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of PFR0
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of PFR0
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PFR0
    }

    /// PFR1 Register bits
    namespace pfr1_bits {
        constexpr uint32_t PB = (1U << 11);  ///< Bit11 of PFR1
        constexpr uint32_t PA = (1U << 10);  ///< Bit10 of PFR1
        constexpr uint32_t P9 = (1U << 9);  ///< Bit9 of PFR1
        constexpr uint32_t P8 = (1U << 8);  ///< Bit8 of PFR1
        constexpr uint32_t P7 = (1U << 7);  ///< Bit7 of PFR1
        constexpr uint32_t P6 = (1U << 6);  ///< Bit6 of PFR1
        constexpr uint32_t P5 = (1U << 5);  ///< Bit5 of PFR1
        constexpr uint32_t P4 = (1U << 4);  ///< Bit4 of PFR1
        constexpr uint32_t P3 = (1U << 3);  ///< Bit3 of PFR1
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of PFR1
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of PFR1
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PFR1
    }

    /// PFR2 Register bits
    namespace pfr2_bits {
        constexpr uint32_t P3 = (1U << 3);  ///< Bit3 of PFR2
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of PFR2
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of PFR2
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PFR2
    }

    /// PFR3 Register bits
    namespace pfr3_bits {
        constexpr uint32_t PF = (1U << 15);  ///< Bit15 of PFR3
        constexpr uint32_t PE = (1U << 14);  ///< Bit14 of PFR3
        constexpr uint32_t PD = (1U << 13);  ///< Bit13 of PFR3
        constexpr uint32_t PC = (1U << 12);  ///< Bit12 of PFR3
        constexpr uint32_t PB = (1U << 11);  ///< Bit11 of PFR3
        constexpr uint32_t PA = (1U << 10);  ///< Bit10 of PFR3
        constexpr uint32_t P9 = (1U << 9);  ///< Bit9 of PFR3
        constexpr uint32_t P3 = (1U << 3);  ///< Bit3 of PFR3
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of PFR3
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of PFR3
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PFR3
    }

    /// PFR4 Register bits
    namespace pfr4_bits {
        constexpr uint32_t PE = (1U << 14);  ///< Bit14 of PFR4
        constexpr uint32_t PD = (1U << 13);  ///< Bit13 of PFR4
        constexpr uint32_t PC = (1U << 12);  ///< Bit12 of PFR4
        constexpr uint32_t PB = (1U << 11);  ///< Bit11 of PFR4
        constexpr uint32_t PA = (1U << 10);  ///< Bit10 of PFR4
        constexpr uint32_t P9 = (1U << 9);  ///< Bit9 of PFR4
        constexpr uint32_t P8 = (1U << 8);  ///< Bit8 of PFR4
        constexpr uint32_t P7 = (1U << 7);  ///< Bit7 of PFR4
        constexpr uint32_t P6 = (1U << 6);  ///< Bit6 of PFR4
        constexpr uint32_t P5 = (1U << 5);  ///< Bit5 of PFR4
        constexpr uint32_t P4 = (1U << 4);  ///< Bit4 of PFR4
    }

    /// PFR5 Register bits
    namespace pfr5_bits {
        constexpr uint32_t P6 = (1U << 6);  ///< Bit6 of PFR5
        constexpr uint32_t P5 = (1U << 5);  ///< Bit5 of PFR5
        constexpr uint32_t P4 = (1U << 4);  ///< Bit4 of PFR5
        constexpr uint32_t P3 = (1U << 3);  ///< Bit3 of PFR5
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of PFR5
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of PFR5
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PFR5
    }

    /// PFR6 Register bits
    namespace pfr6_bits {
        constexpr uint32_t P3 = (1U << 3);  ///< Bit3 of PFR6
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of PFR6
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of PFR6
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PFR6
    }

    /// PFR8 Register bits
    namespace pfr8_bits {
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of PFR8
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of PFR8
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PFR8
    }

    /// PFRE Register bits
    namespace pfre_bits {
        constexpr uint32_t P3 = (1U << 3);  ///< Bit2 of PFRE
        constexpr uint32_t P2 = (1U << 2);  ///< Bit1 of PFRE
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PFRE
    }

    /// DDR0 Register bits
    namespace ddr0_bits {
        constexpr uint32_t PF = (1U << 15);  ///< Bit15 of DDR0
        constexpr uint32_t PE = (1U << 14);  ///< Bit14 of DDR0
        constexpr uint32_t PD = (1U << 13);  ///< Bit13 of DDR0
        constexpr uint32_t PC = (1U << 12);  ///< Bit12 of DDR0
        constexpr uint32_t PB = (1U << 11);  ///< Bit11 of DDR0
        constexpr uint32_t PA = (1U << 10);  ///< Bit10 of DDR0
        constexpr uint32_t P7 = (1U << 7);  ///< Bit7 of DDR0
        constexpr uint32_t P4 = (1U << 4);  ///< Bit4 of DDR0
        constexpr uint32_t P3 = (1U << 3);  ///< Bit3 of DDR0
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of DDR0
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of DDR0
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of DDR0
    }

    /// ADE Register bits
    namespace ade_bits {
        constexpr uint32_t AN11 = (1U << 11);  ///< Bit11 of ADE
        constexpr uint32_t AN10 = (1U << 10);  ///< Bit10 of ADE
        constexpr uint32_t AN9 = (1U << 9);  ///< Bit9 of ADE
        constexpr uint32_t AN8 = (1U << 8);  ///< Bit8 of ADE
        constexpr uint32_t AN7 = (1U << 7);  ///< Bit7 of ADE
        constexpr uint32_t AN6 = (1U << 6);  ///< Bit6 of ADE
        constexpr uint32_t AN5 = (1U << 5);  ///< Bit5 of ADE
        constexpr uint32_t AN4 = (1U << 4);  ///< Bit4 of ADE
        constexpr uint32_t AN3 = (1U << 3);  ///< Bit3 of ADE
        constexpr uint32_t AN2 = (1U << 2);  ///< Bit2 of ADE
        constexpr uint32_t AN1 = (1U << 1);  ///< Bit1 of ADE
        constexpr uint32_t AN0 = (1U << 0);  ///< Bit0 of ADE
    }

    /// SPSR Register bits
    namespace spsr_bits {
        constexpr uint32_t MAINXC = (1U << 2);  ///< Main clock(oscillation) pin setting bit
        constexpr uint32_t SUBXC = (1U << 0);  ///< Sub clock(oscillation) pin setting bit
    }

    /// EPFR00 Register bits
    namespace epfr00_bits {
        constexpr uint32_t JTAGEN1S = (1U << 17);  ///< JTAG function select bit1
        constexpr uint32_t JTAGEN0B = (1U << 16);  ///< JTAG function select bit0
        constexpr uint32_t SUBOUTE = (2 << 6);  ///< Sub clock divide output function select bit
        constexpr uint32_t RTCCOE = (2 << 4);  ///< RTC clock output select bit
        constexpr uint32_t CROUTE = (2 << 1);  ///< Internal high-speed CR oscillation output function select bit
        constexpr uint32_t NMIS = (1U << 0);  ///< NMIX function select bit
    }

    /// EPFR01 Register bits
    namespace epfr01_bits {
        constexpr uint32_t IC03S = (3 << 29);  ///< IC03 input select bit
        constexpr uint32_t IC02S = (3 << 26);  ///< IC02 input select bit
        constexpr uint32_t IC01S = (3 << 23);  ///< IC01 input select bit
        constexpr uint32_t IC00S = (3 << 20);  ///< IC00 input select bit
        constexpr uint32_t FRCK0S = (2 << 18);  ///< FRCK0 input select bit
        constexpr uint32_t DTTI0S = (2 << 16);  ///< DTTIX0 input select bit
        constexpr uint32_t DTTI0C = (1U << 12);  ///< DTTIX0 function select bit
        constexpr uint32_t RTO05E = (2 << 10);  ///< RTO05E output select bit
        constexpr uint32_t RTO04E = (2 << 8);  ///< RTO04E output select bit
        constexpr uint32_t RTO03E = (2 << 6);  ///< RTO03E output select bit
        constexpr uint32_t RTO02E = (2 << 4);  ///< RTO02E output select bit
        constexpr uint32_t RTO01E = (2 << 2);  ///< RTO01E output select bit
        constexpr uint32_t RTO00E = (2 << 0);  ///< RTO00E output select bit
    }

    /// EPFR04 Register bits
    namespace epfr04_bits {
        constexpr uint32_t TIOB3S = (2 << 28);  ///< TIOB3 input select bit
        constexpr uint32_t TIOA3E = (2 << 26);  ///< TIOA3E output select bit
        constexpr uint32_t TIOA3S = (2 << 24);  ///< TIOA3 input select bit
        constexpr uint32_t TIOB2S = (2 << 20);  ///< TIOB2 input select bit
        constexpr uint32_t TIOA2E = (2 << 18);  ///< TIOA2 output select bit
        constexpr uint32_t TIOB1S = (2 << 12);  ///< TIOB1 input select bit
        constexpr uint32_t TIOA1E = (2 << 10);  ///< TIOA1E output select bit
        constexpr uint32_t TIOA1S = (2 << 8);  ///< TIOA1 input select bit
        constexpr uint32_t TIOB0S = (3 << 4);  ///< TIOB0 input select bit
        constexpr uint32_t TIOA0E = (2 << 2);  ///< TIOA0 output select bit
    }

    /// EPFR05 Register bits
    namespace epfr05_bits {
        constexpr uint32_t TIOB7S = (2 << 28);  ///< TIOB7 input select Bit
        constexpr uint32_t TIOA7E = (2 << 26);  ///< TIOA7E output select bit
        constexpr uint32_t TIOA7S = (2 << 24);  ///< TIOA7 input select bit
        constexpr uint32_t TIOB6S = (2 << 20);  ///< TIOB6 input select bit
        constexpr uint32_t TIOA6E = (2 << 18);  ///< TIOA6 output select bit
        constexpr uint32_t TIOB5S = (2 << 12);  ///< TIOB5 input select bit
        constexpr uint32_t TIOA5E = (2 << 10);  ///< TIOA5E output select bit
        constexpr uint32_t TIOA5S = (2 << 8);  ///< TIOA5 input select bit
        constexpr uint32_t TIOB4S = (2 << 4);  ///< TIOB4 input select bit
        constexpr uint32_t TIOA4E = (2 << 2);  ///< TIOA4 output select bit
    }

    /// EPFR06 Register bits
    namespace epfr06_bits {
        constexpr uint32_t EINT15S = (2 << 30);  ///< External interrupt 15 input select bit
        constexpr uint32_t EINT14S = (2 << 28);  ///< External interrupt 14 input select bit
        constexpr uint32_t EINT08S = (2 << 16);  ///< External interrupt 8 input select bit
        constexpr uint32_t EINT07S = (2 << 14);  ///< External interrupt 7 input select bit
        constexpr uint32_t EINT06S = (2 << 12);  ///< External interrupt 6 input select bit
        constexpr uint32_t EINT05S = (2 << 10);  ///< External interrupt 5 input select bit
        constexpr uint32_t EINT04S = (2 << 8);  ///< External interrupt 4 input select bit
        constexpr uint32_t EINT03S = (2 << 6);  ///< External interrupt 3 input select bit
        constexpr uint32_t EINT02S = (2 << 4);  ///< External interrupt 2 input select bit
        constexpr uint32_t EINT01S = (2 << 2);  ///< External interrupt 1 input select bit
        constexpr uint32_t EINT00S = (2 << 0);  ///< External interrupt 0 input select bit
    }

    /// EPFR07 Register bits
    namespace epfr07_bits {
        constexpr uint32_t SCK3B = (2 << 26);  ///< SCK3 input/output select bit
        constexpr uint32_t SOT3B = (2 << 24);  ///< SOT3B input/output select bit
        constexpr uint32_t SIN3S = (2 << 22);  ///< SIN3S input select bit
        constexpr uint32_t SCK2B = (2 << 20);  ///< SCK2 input/output select bit
        constexpr uint32_t SOT2B = (2 << 18);  ///< SOT2B input/output select bit
        constexpr uint32_t SIN2S = (2 << 16);  ///< SIN2S input select bit
        constexpr uint32_t SCK1B = (2 << 14);  ///< SCK1 input/output select bit
        constexpr uint32_t SOT1B = (2 << 12);  ///< SCK1B input/output select bit
        constexpr uint32_t SIN1S = (2 << 10);  ///< SIN1S input select bit
        constexpr uint32_t SCK0B = (2 << 8);  ///< SCK0 input/output select bit
        constexpr uint32_t SOT0B = (2 << 6);  ///< SOT0B input/output select bit
        constexpr uint32_t SIN0S = (2 << 4);  ///< SIN0S input select bit
    }

    /// EPFR08 Register bits
    namespace epfr08_bits {
        constexpr uint32_t SCK7B = (2 << 26);  ///< SCK7 input/output select bit
        constexpr uint32_t SOT7B = (2 << 24);  ///< SOT7B input/output select bit
        constexpr uint32_t SIN7S = (2 << 22);  ///< SIN7S input select bit
        constexpr uint32_t SCK6B = (2 << 20);  ///< SCK6 input/output select bit
        constexpr uint32_t SOT6B = (2 << 18);  ///< SOT6B input/output select bit
        constexpr uint32_t SIN6S = (2 << 16);  ///< SIN6S input select bit
        constexpr uint32_t SCK5B = (2 << 14);  ///< SCK5 input/output select bit
        constexpr uint32_t SOT5B = (2 << 12);  ///< SOT5B input/output select bit
        constexpr uint32_t SIN5S = (2 << 10);  ///< SIN5S input select bit
        constexpr uint32_t SCK4B = (2 << 8);  ///< SCK4 input/output select bit
        constexpr uint32_t SOT4B = (2 << 6);  ///< SOT4B input/output select bit
        constexpr uint32_t SIN4S = (2 << 4);  ///< SIN4S input select bit
        constexpr uint32_t CTS4S = (2 << 2);  ///< CTS4S Input Select bits
        constexpr uint32_t RTS4E = (2 << 0);  ///< RTS4E Output Select bits
    }

    /// EPFR09 Register bits
    namespace epfr09_bits {
        constexpr uint32_t ADTRG0S = (4 << 12);  ///< ADTRG0 input select bit
    }

    /// EPFR14 Register bits
    namespace epfr14_bits {
        constexpr uint32_t CEC1B = (1U << 31);  ///< CEC1 Input/Output Select bit
        constexpr uint32_t CEC0B = (1U << 30);  ///< CEC0 Input/Output Select bit
    }

    /// PZR0 Register bits
    namespace pzr0_bits {
        constexpr uint32_t PC = (1U << 12);  ///< Bit12 of PZR0
        constexpr uint32_t PB = (1U << 11);  ///< Bit11 of PZR0
    }

    /// PZR6 Register bits
    namespace pzr6_bits {
        constexpr uint32_t P0 = (1U << 0);  ///< Bit0 of PZR6
    }

    /// PZR8 Register bits
    namespace pzr8_bits {
        constexpr uint32_t P2 = (1U << 2);  ///< Bit2 of PZR8
        constexpr uint32_t P1 = (1U << 1);  ///< Bit1 of PZR8
    }

}

// ============================================================================
// HDMICEC0 Peripheral
// ============================================================================

namespace hdmicec0 {
    /// Base addresses
    constexpr uint32_t HDMICEC0_BASE = 0x40034000;

    /// HDMICEC0 Register structure
    struct Registers {
        volatile uint32_t TXCTRL;  ///< Offset: 0x00 - Transmission Control Register
        volatile uint32_t TXDATA;  ///< Offset: 0x04 - Transmission Data Register
        volatile uint32_t TXSTS;  ///< Offset: 0x08 - Transmission Status Register
        volatile uint32_t SFREE;  ///< Offset: 0x0C - Signal Free Time Setting Register
        volatile uint32_t RCST;  ///< Offset: 0x40 - Reception Interrupt Control Register
        volatile uint32_t RCCR;  ///< Offset: 0x41 - Reception Control Register
        volatile uint32_t RCDAHW;  ///< Offset: 0x44 - "H" Width Setting Register A
        volatile uint32_t RCSHW;  ///< Offset: 0x45 - Start Bit "H" Width Setting Register
        volatile uint32_t RCDBHW;  ///< Offset: 0x49 - "H" Width Setting Register B
        volatile uint32_t RCADR2;  ///< Offset: 0x4C - Device Address Setting Register 2
        volatile uint32_t RCADR1;  ///< Offset: 0x4D - Device Address Setting Register 1
        volatile uint32_t RCDTHL;  ///< Offset: 0x50 - Data Save Register (High-Low)
        volatile uint32_t RCDTHH;  ///< Offset: 0x51 - Data Save Register (High-High)
        volatile uint32_t RCDTLL;  ///< Offset: 0x54 - Data Save Register (Low-Low)
        volatile uint32_t RCDTLH;  ///< Offset: 0x55 - Data Save Register (Low-High)
        volatile uint32_t RCCKD;  ///< Offset: 0x58 - Clock Division Setting Register
        volatile uint32_t RCRHW;  ///< Offset: 0x5C - Repeat Code "H" Width Setting Register
        volatile uint32_t RCRC;  ///< Offset: 0x5D - Repeat Code Interrupt Control Register
        volatile uint32_t RCLE;  ///< Offset: 0x61 - Data Bit Width Violation Control Register
        volatile uint32_t RCLESW;  ///< Offset: 0x64 - Minimum Data Bit Width Setting Register
        volatile uint32_t RCLELW;  ///< Offset: 0x65 - Maximum Data Bit Width Setting Register
    };

    /// Peripheral instances
    inline Registers* HDMICEC0 = reinterpret_cast<Registers*>(HDMICEC0_BASE);

    // Bit definitions
    /// TXCTRL Register bits
    namespace txctrl_bits {
        constexpr uint32_t IBREN = (1U << 5);  ///< Bus error detection interrupt enable bit
        constexpr uint32_t ITSTEN = (1U << 4);  ///< transmission status interrupt enable bit
        constexpr uint32_t EOM = (1U << 3);  ///< EOM setting bit
        constexpr uint32_t START = (1U << 2);  ///< START setting bit
        constexpr uint32_t TXEN = (1U << 0);  ///< Transmission operation enable bit
    }

    /// TXDATA Register bits
    namespace txdata_bits {
        constexpr uint32_t TXDATA = (8 << 0);  ///< Transmission Data
    }

    /// TXSTS Register bits
    namespace txsts_bits {
        constexpr uint32_t IBR = (1U << 5);  ///< Bus error detection interrupt request bit
        constexpr uint32_t ITST = (1U << 4);  ///< Transmission status interrupt request bit
        constexpr uint32_t ACKSV = (1U << 0);  ///< ACK cycle value bit
    }

    /// SFREE Register bits
    namespace sfree_bits {
        constexpr uint32_t SFREE = (4 << 0);  ///< Signal free time setting bits
    }

    /// RCST Register bits
    namespace rcst_bits {
        constexpr uint32_t STIE = (1U << 7);  ///< Start bit interrupt enable bit
        constexpr uint32_t ACKIE = (1U << 6);  ///< ACK interrupt enable bit
        constexpr uint32_t OVFIE = (1U << 5);  ///< Counter overflow interrupt enable bit
        constexpr uint32_t OVFSEL = (1U << 4);  ///< Counter overflow detection condition setting bit
        constexpr uint32_t ST = (1U << 3);  ///< Start bit detection bit
        constexpr uint32_t ACK = (1U << 2);  ///< ACK: ACK detection bit
        constexpr uint32_t EOM = (1U << 1);  ///< EOM detection bit
        constexpr uint32_t OVF = (1U << 0);  ///< Counter overflow detection bit
    }

    /// RCCR Register bits
    namespace rccr_bits {
        constexpr uint32_t THSEL = (1U << 7);  ///< Threshold selection bit
        constexpr uint32_t ADRCE = (1U << 3);  ///< Address comparison enable bit
        constexpr uint32_t MOD1 = (1U << 2);  ///< Operation mode setting bits
        constexpr uint32_t MOD0 = (1U << 1);  ///< Operation mode setting bits
        constexpr uint32_t EN = (1U << 0);  ///< Operation enable bit
    }

    /// RCDAHW Register bits
    namespace rcdahw_bits {
        constexpr uint32_t RCDAHW = (8 << 0);  ///< "H" Width Setting A
    }

    /// RCSHW Register bits
    namespace rcshw_bits {
        constexpr uint32_t RCSHW = (8 << 0);  ///< Start Bit "H" Width Setting
    }

    /// RCDBHW Register bits
    namespace rcdbhw_bits {
        constexpr uint32_t RCDBHW = (8 << 0);  ///< "H" Width Setting B
    }

    /// RCADR2 Register bits
    namespace rcadr2_bits {
        constexpr uint32_t RCADR2 = (5 << 0);  ///< Device Address 2
    }

    /// RCADR1 Register bits
    namespace rcadr1_bits {
        constexpr uint32_t RCADR1 = (5 << 0);  ///< Device Address 1
    }

    /// RCDTHL Register bits
    namespace rcdthl_bits {
        constexpr uint32_t RCDTHL = (8 << 0);  ///< RCDTHL
    }

    /// RCDTHH Register bits
    namespace rcdthh_bits {
        constexpr uint32_t RCDTHH = (8 << 0);  ///< RCDTHH
    }

    /// RCDTLL Register bits
    namespace rcdtll_bits {
        constexpr uint32_t RCDTLL = (8 << 0);  ///< RCDTLL
    }

    /// RCDTLH Register bits
    namespace rcdtlh_bits {
        constexpr uint32_t RCDTLH = (8 << 0);  ///< RCDTLH
    }

    /// RCCKD Register bits
    namespace rcckd_bits {
        constexpr uint32_t CKSEL = (1U << 12);  ///< Operating clock selection bit
        constexpr uint32_t CKDIV = (12 << 0);  ///< Operating clock division setting bits
    }

    /// RCRHW Register bits
    namespace rcrhw_bits {
        constexpr uint32_t RCRHW = (8 << 0);  ///< "Repeat code "H" width setting bits"
    }

    /// RCRC Register bits
    namespace rcrc_bits {
        constexpr uint32_t RCIE = (1U << 4);  ///< Repeat Code Interrupt enable bit
        constexpr uint32_t RC = (1U << 0);  ///< Repeat code detection flag bit
    }

    /// RCLE Register bits
    namespace rcle_bits {
        constexpr uint32_t LELIE = (1U << 7);  ///< Maximum data bit width violation interrupt enable bit
        constexpr uint32_t LESIE = (1U << 6);  ///< Minimum data bit width violation interrupt enable bit
        constexpr uint32_t LELE = (1U << 5);  ///< Maximum data bit width violation detection enable bit
        constexpr uint32_t LESE = (1U << 4);  ///< Minimum data bit width violation detection enable bit
        constexpr uint32_t EPE = (1U << 3);  ///< Error pulse output enable bit
        constexpr uint32_t LEL = (1U << 1);  ///< Maximum data bit width violation detection flag bit
        constexpr uint32_t LES = (1U << 0);  ///< Minimum data bit width violation detection flag bit
    }

    /// RCLESW Register bits
    namespace rclesw_bits {
        constexpr uint32_t RCLESW = (8 << 0);  ///< Minimum data bit width setting bits
    }

    /// RCLELW Register bits
    namespace rclelw_bits {
        constexpr uint32_t RCLELW = (8 << 0);  ///< Maximum data bit width setting bits
    }

}

// ============================================================================
// HDMICEC1 Peripheral
// ============================================================================

namespace hdmicec1 {
    /// Base addresses
    constexpr uint32_t HDMICEC1_BASE = 0x40034100;

    /// HDMICEC1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* HDMICEC1 = reinterpret_cast<Registers*>(HDMICEC1_BASE);

}

// ============================================================================
// LVD Peripheral
// ============================================================================

namespace lvd {
    /// Base addresses
    constexpr uint32_t LVD_BASE = 0x40035000;

    /// LVD Register structure
    struct Registers {
        volatile uint32_t LVD_CTL;  ///< Offset: 0x00 - Low-voltage Detection Voltage Control Register
        volatile uint32_t LVD_STR;  ///< Offset: 0x04 - Low-voltage Detection Interrupt Register
        volatile uint32_t LVD_CLR;  ///< Offset: 0x08 - Low-voltage Detection Interrupt Clear Register
        volatile uint32_t LVD_RLR;  ///< Offset: 0x0C - Low-voltage Detection Voltage Protection Register
        volatile uint32_t LVD_STR2;  ///< Offset: 0x10 - Low-voltage Detection Circuit Status Register
    };

    /// Peripheral instances
    inline Registers* LVD = reinterpret_cast<Registers*>(LVD_BASE);

    // Bit definitions
    /// LVD_CTL Register bits
    namespace lvd_ctl_bits {
        constexpr uint32_t LVDRE = (1U << 15);  ///< Low-voltage detection reset operation enable bit
        constexpr uint32_t SVHR = (4 << 10);  ///< Low-voltage detection reset voltage setting bits
        constexpr uint32_t LVDIE = (1U << 7);  ///< Low-voltage detection interrupt enable bit
        constexpr uint32_t SVHI = (4 << 2);  ///< Low-voltage detection interrupt voltage setting bits
        constexpr uint32_t LVDIM = (1U << 1);  ///< Low-voltage detection interrupt low power mode select bit
    }

    /// LVD_STR Register bits
    namespace lvd_str_bits {
        constexpr uint32_t LVDIR = (1U << 7);  ///< Low-voltage detection interrupt bit
    }

    /// LVD_CLR Register bits
    namespace lvd_clr_bits {
        constexpr uint32_t LVDCL = (1U << 7);  ///< Low-voltage detection interrupt clear bit
    }

    /// LVD_RLR Register bits
    namespace lvd_rlr_bits {
        constexpr uint32_t LVDLCK = (32 << 0);  ///< Low-voltage Detection Voltage Control Register protection bits
    }

    /// LVD_STR2 Register bits
    namespace lvd_str2_bits {
        constexpr uint32_t LVDIRDY = (1U << 7);  ///< Low-voltage detection interrupt status flag
        constexpr uint32_t LVDRRDY = (1U << 6);  ///< Low-voltage detection reset status flag
    }

}

// ============================================================================
// DS Peripheral
// ============================================================================

namespace ds {
    /// Base addresses
    constexpr uint32_t DS_BASE = 0x40035100;

    /// DS Register structure
    struct Registers {
        volatile uint32_t RCK_CTL;  ///< Offset: 0x04 - Sub Clock Control Register
        volatile uint32_t PMD_CTL;  ///< Offset: 0x700 - RTC Mode Control Register
        volatile uint32_t WRFSR;  ///< Offset: 0x704 - Deep Standby Return Cause Register 1
        volatile uint32_t WIFSR;  ///< Offset: 0x708 - Deep Standby Return Cause Register 2
        volatile uint32_t WIER;  ///< Offset: 0x70C - Deep Standby Return Enable Register
        volatile uint32_t WILVR;  ///< Offset: 0x710 - WKUP Pin Input Level Register
        volatile uint32_t BUR01;  ///< Offset: 0x800 - Backup Registers from 1
        volatile uint32_t BUR02;  ///< Offset: 0x801 - Backup Registers from 2
        volatile uint32_t BUR03;  ///< Offset: 0x802 - Backup Registers from 3
        volatile uint32_t BUR04;  ///< Offset: 0x803 - Backup Registers from 4
        volatile uint32_t BUR05;  ///< Offset: 0x804 - Backup Registers from 5
        volatile uint32_t BUR06;  ///< Offset: 0x805 - Backup Registers from 6
        volatile uint32_t BUR07;  ///< Offset: 0x806 - Backup Registers from 7
        volatile uint32_t BUR08;  ///< Offset: 0x807 - Backup Registers from 8
        volatile uint32_t BUR09;  ///< Offset: 0x808 - Backup Registers from 9
        volatile uint32_t BUR10;  ///< Offset: 0x809 - Backup Registers from 10
        volatile uint32_t BUR11;  ///< Offset: 0x80A - Backup Registers from 11
        volatile uint32_t BUR12;  ///< Offset: 0x80B - Backup Registers from 12
        volatile uint32_t BUR13;  ///< Offset: 0x80C - Backup Registers from 13
        volatile uint32_t BUR14;  ///< Offset: 0x80D - Backup Registers from 14
        volatile uint32_t BUR15;  ///< Offset: 0x80E - Backup Registers from 15
        volatile uint32_t BUR16;  ///< Offset: 0x80F - Backup Registers from 16
    };

    /// Peripheral instances
    inline Registers* DS = reinterpret_cast<Registers*>(DS_BASE);

    // Bit definitions
    /// RCK_CTL Register bits
    namespace rck_ctl_bits {
        constexpr uint32_t CECCKE = (1U << 1);  ///< CEC clock control bit
        constexpr uint32_t RTCCKE = (1U << 0);  ///< RTC clock control bit
    }

    /// PMD_CTL Register bits
    namespace pmd_ctl_bits {
        constexpr uint32_t RTCE = (1U << 0);  ///< RTC mode control bit
    }

    /// WRFSR Register bits
    namespace wrfsr_bits {
        constexpr uint32_t WLVDH = (1U << 1);  ///< Low-voltage detection reset return bit
        constexpr uint32_t WINITX = (1U << 0);  ///< INITX pin input reset return bit
    }

    /// WIFSR Register bits
    namespace wifsr_bits {
        constexpr uint32_t WCEC1I = (1U << 9);  ///< CEC ch.1 interrupt return bit
        constexpr uint32_t WCEC0I = (1U << 8);  ///< CEC ch.0 interrupt return bit
        constexpr uint32_t WUI3 = (1U << 5);  ///< WKUP pin input return bit 3
        constexpr uint32_t WUI2 = (1U << 4);  ///< WKUP pin input return bit 2
        constexpr uint32_t WUI1 = (1U << 3);  ///< WKUP pin input return bit 1
        constexpr uint32_t WUI0 = (1U << 2);  ///< WKUP pin input return bit 0
        constexpr uint32_t WLVDI = (1U << 1);  ///< LVD interrupt return bit
        constexpr uint32_t WRTCI = (1U << 0);  ///< RTC interrupt return bit
    }

    /// WIER Register bits
    namespace wier_bits {
        constexpr uint32_t WCEC1E = (1U << 9);  ///< HDMI-CEC/ Remote Control Reception ch.1 interrupt return enable bit
        constexpr uint32_t WCEC0E = (1U << 8);  ///< HDMI-CEC/ Remote Control Reception ch.0 interrupt return enable bit
        constexpr uint32_t WUI3E = (1U << 5);  ///< WKUP pin input return enable bit 3
        constexpr uint32_t WUI2E = (1U << 4);  ///< WKUP pin input return enable bit 2
        constexpr uint32_t WUI1E = (1U << 3);  ///< WKUP pin input return enable bit 1
        constexpr uint32_t WLVDE = (1U << 1);  ///< LVD interrupt return enable bit
        constexpr uint32_t WRTCE = (1U << 0);  ///< RTC interrupt return enable bit
    }

    /// WILVR Register bits
    namespace wilvr_bits {
        constexpr uint32_t WUI3LV = (1U << 2);  ///< WKUP pin input level select bit 3
        constexpr uint32_t WUI2LV = (1U << 1);  ///< WKUP pin input level select bit 2
        constexpr uint32_t WUI1LV = (1U << 0);  ///< WKUP pin input level select bit 1
    }

}

// ============================================================================
// MFS0 Peripheral
// ============================================================================

namespace mfs0 {
    /// Base addresses
    constexpr uint32_t MFS0_BASE = 0x40038000;

    /// MFS0 Register structure
    struct Registers {
        volatile uint32_t UART_SCR;  ///< Offset: 0x01 - Serial Control Register
        volatile uint32_t UART_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t UART_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t UART_ESCR;  ///< Offset: 0x04 - Extended Communication Control Register
        volatile uint32_t UART_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t UART_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t UART_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t CSIO_SCR;  ///< Offset: 0x01 - Serial Control Register
        volatile uint32_t CSIO_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t CSIO_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t CSIO_ESCR;  ///< Offset: 0x04 - Extended Communication Control Register
        volatile uint32_t CSIO_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t CSIO_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t CSIO_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t I2C_IBCR;  ///< Offset: 0x01 - I2C Bus Control Register
        volatile uint32_t I2C_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t I2C_IBSR;  ///< Offset: 0x04 - I2C Bus Status Register
        volatile uint32_t I2C_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t I2C_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t I2C_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t I2C_ISMK;  ///< Offset: 0x11 - 7-bit Slave Address Mask Register
        volatile uint32_t I2C_ISBA;  ///< Offset: 0x10 - 7-bit Slave Address Register
        volatile uint32_t I2C_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t I2C_EIBCR;  ///< Offset: 0x1D - Extension I2C Bus Control Register
    };

    /// Peripheral instances
    inline Registers* MFS0 = reinterpret_cast<Registers*>(MFS0_BASE);

    // Bit definitions
    /// UART_SCR Register bits
    namespace uart_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< Programmable Clear bit
        constexpr uint32_t RIE = (1U << 4);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 3);  ///< Transmit interrupt enable bit
        constexpr uint32_t TBIE = (1U << 2);  ///< Transmit bus idle interrupt enable bit
        constexpr uint32_t RXE = (1U << 1);  ///< Received operation enable bit
        constexpr uint32_t TXE = (1U << 0);  ///< Transmission operation enable bit
    }

    /// UART_SMR Register bits
    namespace uart_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< Operation mode set bit
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t SBL = (1U << 3);  ///< Stop bit length select bit
        constexpr uint32_t BDS = (1U << 2);  ///< Transfer direction select bit
        constexpr uint32_t SOE = (1U << 0);  ///< Serial data output enable bit
    }

    /// UART_SSR Register bits
    namespace uart_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t PE = (1U << 5);  ///< Parity error flag bit (only functions in operation mode 0)
        constexpr uint32_t FRE = (1U << 4);  ///< Framing error flag bit
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag
    }

    /// UART_ESCR Register bits
    namespace uart_escr_bits {
        constexpr uint32_t FLWEN = (1U << 7);  ///< Flow control enable bit
        constexpr uint32_t ESBL = (1U << 6);  ///< Extension stop bit length select bit
        constexpr uint32_t INV = (1U << 5);  ///< Inverted serial data format bit
        constexpr uint32_t PEN = (1U << 4);  ///< Parity enable bit (only functions in operation mode 0)
        constexpr uint32_t P = (1U << 3);  ///< Parity select bit (only functions in operation mode 0)
        constexpr uint32_t L = (3 << 0);  ///< Data length select bit
    }

    /// UART_BGR Register bits
    namespace uart_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< External clock select bit
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// CSIO_SCR Register bits
    namespace csio_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< Programmable clear bit
        constexpr uint32_t MS = (1U << 6);  ///< Master/Slave function select bit
        constexpr uint32_t SPI = (1U << 5);  ///< SPI corresponding bit
        constexpr uint32_t RIE = (1U << 4);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 3);  ///< Transmit interrupt enable bit
        constexpr uint32_t TBIE = (1U << 2);  ///< Transmit bus idle interrupt enable bit
        constexpr uint32_t RXE = (1U << 1);  ///< Data received enable bit
        constexpr uint32_t TXE = (1U << 0);  ///< Data transmission enable bit
    }

    /// CSIO_SMR Register bits
    namespace csio_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< Operation mode set bits
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t SCINV = (1U << 3);  ///< Serial clock invert bit
        constexpr uint32_t BDS = (1U << 2);  ///< Transfer direction select bit
        constexpr uint32_t SCKE = (1U << 1);  ///< Master mode serial clock output enable bit
        constexpr uint32_t SOE = (1U << 0);  ///< Serial data output enable bit
    }

    /// CSIO_SSR Register bits
    namespace csio_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag bit
    }

    /// CSIO_ESCR Register bits
    namespace csio_escr_bits {
        constexpr uint32_t SOP = (1U << 7);  ///< Serial output pin set bit
        constexpr uint32_t WT = (2 << 3);  ///< Data transmit/received wait select bits
        constexpr uint32_t L = (3 << 0);  ///< Data length select bits
    }

    /// CSIO_BGR Register bits
    namespace csio_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// I2C_IBCR Register bits
    namespace i2c_ibcr_bits {
        constexpr uint32_t MSS = (1U << 7);  ///< Master/slave select bit
        constexpr uint32_t ACT_SCC = (1U << 6);  ///< Operation flag/iteration start condition generation bit
        constexpr uint32_t ACKE = (1U << 5);  ///< Data byte acknowledge enable bit
        constexpr uint32_t WSEL = (1U << 4);  ///< Wait selection bit
        constexpr uint32_t CNDE = (1U << 3);  ///< Condition detection interrupt enable bit
        constexpr uint32_t INTE = (1U << 2);  ///< Interrupt enable bit
        constexpr uint32_t BER = (1U << 1);  ///< Bus error flag bit
        constexpr uint32_t INT = (1U << 0);  ///< interrupt flag bit
    }

    /// I2C_SMR Register bits
    namespace i2c_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< operation mode set bits
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t RIE = (1U << 3);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 2);  ///< Transmit interrupt enable bit
    }

    /// I2C_IBSR Register bits
    namespace i2c_ibsr_bits {
        constexpr uint32_t FBT = (1U << 7);  ///< First byte bit
        constexpr uint32_t RACK = (1U << 6);  ///< Acknowledge flag bit
        constexpr uint32_t RSA = (1U << 5);  ///< Reserved address detection bit
        constexpr uint32_t TRX = (1U << 4);  ///< Data direction bit
        constexpr uint32_t AL = (1U << 3);  ///< Arbitration lost bit
        constexpr uint32_t RSC = (1U << 2);  ///< Iteration start condition check bit
        constexpr uint32_t SPC = (1U << 1);  ///< Stop condition check bit
        constexpr uint32_t BB = (1U << 0);  ///< Bus state bit
    }

    /// I2C_SSR Register bits
    namespace i2c_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t TSET = (1U << 6);  ///< Transmit empty flag set bit
        constexpr uint32_t DMA = (1U << 5);  ///< DMA mode enable bit
        constexpr uint32_t TBIE = (1U << 4);  ///< Transmit bus idle interrupt enable bit (Effective only when DMA mode is enabled)
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag bit (Effective only when DMA mode is enabled)
    }

    /// I2C_ISMK Register bits
    namespace i2c_ismk_bits {
        constexpr uint32_t EN = (1U << 7);  ///< I2C interface operation enable bit
        constexpr uint32_t SM = (7 << 0);  ///< Slave address mask bits
    }

    /// I2C_ISBA Register bits
    namespace i2c_isba_bits {
        constexpr uint32_t SAEN = (1U << 7);  ///< Slave address enable bit
        constexpr uint32_t SA = (7 << 0);  ///< 7-bit slave address
    }

    /// I2C_BGR Register bits
    namespace i2c_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// I2C_EIBCR Register bits
    namespace i2c_eibcr_bits {
        constexpr uint32_t SDAS = (1U << 5);  ///< SDA status bit
        constexpr uint32_t SCLS = (1U << 4);  ///< SCL status bit
        constexpr uint32_t SDAC = (1U << 3);  ///< SDA output control bit
        constexpr uint32_t SCLC = (1U << 2);  ///< SCL output control bit
        constexpr uint32_t SOCE = (1U << 1);  ///< Serial output enabled bit
        constexpr uint32_t BEC = (1U << 0);  ///< Bus error control bit
    }

}

// ============================================================================
// MFS1 Peripheral
// ============================================================================

namespace mfs1 {
    /// Base addresses
    constexpr uint32_t MFS1_BASE = 0x40038100;

    /// MFS1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS1 = reinterpret_cast<Registers*>(MFS1_BASE);

}

// ============================================================================
// MFS2 Peripheral
// ============================================================================

namespace mfs2 {
    /// Base addresses
    constexpr uint32_t MFS2_BASE = 0x40038200;

    /// MFS2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS2 = reinterpret_cast<Registers*>(MFS2_BASE);

}

// ============================================================================
// MFS3 Peripheral
// ============================================================================

namespace mfs3 {
    /// Base addresses
    constexpr uint32_t MFS3_BASE = 0x40038300;

    /// MFS3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS3 = reinterpret_cast<Registers*>(MFS3_BASE);

}

// ============================================================================
// MFS4 Peripheral
// ============================================================================

namespace mfs4 {
    /// Base addresses
    constexpr uint32_t MFS4_BASE = 0x40038400;

    /// MFS4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS4 = reinterpret_cast<Registers*>(MFS4_BASE);

}

// ============================================================================
// MFS5 Peripheral
// ============================================================================

namespace mfs5 {
    /// Base addresses
    constexpr uint32_t MFS5_BASE = 0x40038500;

    /// MFS5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS5 = reinterpret_cast<Registers*>(MFS5_BASE);

}

// ============================================================================
// MFS6 Peripheral
// ============================================================================

namespace mfs6 {
    /// Base addresses
    constexpr uint32_t MFS6_BASE = 0x40038600;

    /// MFS6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS6 = reinterpret_cast<Registers*>(MFS6_BASE);

}

// ============================================================================
// MFS7 Peripheral
// ============================================================================

namespace mfs7 {
    /// Base addresses
    constexpr uint32_t MFS7_BASE = 0x40038700;

    /// MFS7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS7 = reinterpret_cast<Registers*>(MFS7_BASE);

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x4003B000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t WTCR1;  ///< Offset: 0x00 - Control Register 1
        volatile uint32_t WTCR2;  ///< Offset: 0x04 - Control Register 2
        volatile uint32_t WTBR;  ///< Offset: 0x08 - Counter Cycle Setting Register
        volatile uint32_t WTDR;  ///< Offset: 0x0F - Date Register
        volatile uint32_t WTHR;  ///< Offset: 0x0E - Hour register
        volatile uint32_t WTMIR;  ///< Offset: 0x0D - Minute Register
        volatile uint32_t WTSR;  ///< Offset: 0x0C - Second Register
        volatile uint32_t WTYR;  ///< Offset: 0x12 - Year Register
        volatile uint32_t WTMOR;  ///< Offset: 0x11 - Month Register
        volatile uint32_t WTDW;  ///< Offset: 0x10 - Day of the Week Register
        volatile uint32_t ALDR;  ///< Offset: 0x17 - Alarm Date Register
        volatile uint32_t ALHR;  ///< Offset: 0x16 - Alarm Hour Register
        volatile uint32_t ALMIR;  ///< Offset: 0x15 - Alarm Minute Register
        volatile uint32_t ALYR;  ///< Offset: 0x1A - Alarm Years Register
        volatile uint32_t ALMOR;  ///< Offset: 0x19 - Alarm Month Register
        volatile uint32_t WTTR;  ///< Offset: 0x1C - Timer Setting Register
        volatile uint32_t WTCLKS;  ///< Offset: 0x20 - Clock Selection Register
        volatile uint32_t WTCLKM;  ///< Offset: 0x21 - Selection Clock Status Register
        volatile uint32_t WTCAL;  ///< Offset: 0x24 - Frequency Correction Value Setting Register
        volatile uint32_t WTCALEN;  ///< Offset: 0x26 - Frequency Correction Enable Register
        volatile uint32_t WTDIV;  ///< Offset: 0x28 - Divider Ratio Setting Register
        volatile uint32_t WTDIVEN;  ///< Offset: 0x29 - Divider Output Enable Register
        volatile uint32_t WTCALPRD;  ///< Offset: 0x2C - Frequency Correction Cycle Setting Register
        volatile uint32_t WTCOSEL;  ///< Offset: 0x30 - RTCCO Output Selection Register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// WTCR1 Register bits
    namespace wtcr1_bits {
        constexpr uint32_t INTCRIE = (1U << 31);  ///< Year/month/date/hour/minute/second/day of the week counter value read completion interrupt enable bit
        constexpr uint32_t INTERIE = (1U << 30);  ///< Time rewrite error interrupt enable bit
        constexpr uint32_t INTALIE = (1U << 29);  ///< Alarm interrupt enable bit
        constexpr uint32_t INTTMIE = (1U << 28);  ///< Timer interrupt enable bit
        constexpr uint32_t INTHIE = (1U << 27);  ///< 1-hour interrupt enable bit
        constexpr uint32_t INTMIE = (1U << 26);  ///< 1-minute interrupt enable bit
        constexpr uint32_t INTSIE = (1U << 25);  ///< 1-second interrupt enable bit
        constexpr uint32_t INTSSIE = (1U << 24);  ///< 0.5-second interrupt enable bit
        constexpr uint32_t INTCRI = (1U << 23);  ///< Year/month/date/hour/minute/second/day of the week counter value read completion interrupt flag bit
        constexpr uint32_t INTERI = (1U << 22);  ///< Time rewrite error interrupt flag bit
        constexpr uint32_t INTALI = (1U << 21);  ///< Alarm interrupt flag bit
        constexpr uint32_t INTTMI = (1U << 20);  ///< Timer interrupt flag bit
        constexpr uint32_t INTHI = (1U << 19);  ///< 1-hour interrupt flag bit
        constexpr uint32_t INTMI = (1U << 18);  ///< 1-minute interrupt flag bit
        constexpr uint32_t INTSI = (1U << 17);  ///< 1-second interrupt flag bit
        constexpr uint32_t INTSSI = (1U << 16);  ///< 0.5-second interrupt flag bit
        constexpr uint32_t YEN = (1U << 12);  ///< Alarm year register enable bit
        constexpr uint32_t MOEN = (1U << 11);  ///< Alarm month register enable bit
        constexpr uint32_t DEN = (1U << 10);  ///< Alarm date register enable bit
        constexpr uint32_t HEN = (1U << 9);  ///< Alarm hour register enable bit
        constexpr uint32_t MIEN = (1U << 8);  ///< Alarm minute register enable bit
        constexpr uint32_t BUSY = (1U << 6);  ///< Busy bit
        constexpr uint32_t SCRST = (1U << 5);  ///< Sub second generation/1-second generation counter reset bit
        constexpr uint32_t SCST = (1U << 4);  ///< 1-second clock output stop bit
        constexpr uint32_t SRST = (1U << 3);  ///< RTC reset bit
        constexpr uint32_t RUN = (1U << 2);  ///< RTC count block operation bit
        constexpr uint32_t ST = (1U << 0);  ///< Start bit
    }

    /// WTCR2 Register bits
    namespace wtcr2_bits {
        constexpr uint32_t TMRUN = (1U << 10);  ///< Timer counter operation bit
        constexpr uint32_t TMEN = (1U << 9);  ///< Timer counter control bit
        constexpr uint32_t TMST = (1U << 8);  ///< Timer counter start bit
        constexpr uint32_t CREAD = (1U << 0);  ///< Year/month/date/hour/minute/second/day of the week counter value read control bit
    }

    /// WTBR Register bits
    namespace wtbr_bits {
        constexpr uint32_t BR23 = (1U << 23);  ///< Bit23 of WTBR
        constexpr uint32_t BR22 = (1U << 22);  ///< Bit22 of WTBR
        constexpr uint32_t BR21 = (1U << 21);  ///< Bit21 of WTBR
        constexpr uint32_t BR20 = (1U << 20);  ///< Bit20 of WTBR
        constexpr uint32_t BR19 = (1U << 19);  ///< Bit19 of WTBR
        constexpr uint32_t BR18 = (1U << 18);  ///< Bit18 of WTBR
        constexpr uint32_t BR17 = (1U << 17);  ///< Bit17 of WTBR
        constexpr uint32_t BR16 = (1U << 16);  ///< Bit16 of WTBR
        constexpr uint32_t BR15 = (1U << 15);  ///< Bit15 of WTBR
        constexpr uint32_t BR14 = (1U << 14);  ///< Bit14 of WTBR
        constexpr uint32_t BR13 = (1U << 13);  ///< Bit13 of WTBR
        constexpr uint32_t BR12 = (1U << 12);  ///< Bit12 of WTBR
        constexpr uint32_t BR11 = (1U << 11);  ///< Bit11 of WTBR
        constexpr uint32_t BR10 = (1U << 10);  ///< Bit10 of WTBR
        constexpr uint32_t BR9 = (1U << 9);  ///< Bit9 of WTBR
        constexpr uint32_t BR8 = (1U << 8);  ///< Bit8 of WTBR
        constexpr uint32_t BR7 = (1U << 7);  ///< Bit7 of WTBR
        constexpr uint32_t BR6 = (1U << 6);  ///< Bit6 of WTBR
        constexpr uint32_t BR5 = (1U << 5);  ///< Bit5 of WTBR
        constexpr uint32_t BR4 = (1U << 4);  ///< Bit4 of WTBR
        constexpr uint32_t BR3 = (1U << 3);  ///< Bit3 of WTBR
        constexpr uint32_t BR2 = (1U << 2);  ///< Bit2 of WTBR
        constexpr uint32_t BR1 = (1U << 1);  ///< Bit1 of WTBR
        constexpr uint32_t BR0 = (1U << 0);  ///< Bit0 of WTBR
    }

    /// WTDR Register bits
    namespace wtdr_bits {
        constexpr uint32_t TD = (2 << 4);  ///< the second digit of the date
        constexpr uint32_t D = (4 << 0);  ///< the first digit of the date
    }

    /// WTHR Register bits
    namespace wthr_bits {
        constexpr uint32_t TH = (2 << 4);  ///< the second digit of the hour
        constexpr uint32_t H = (4 << 0);  ///< the first digit of the hour
    }

    /// WTMIR Register bits
    namespace wtmir_bits {
        constexpr uint32_t TMI = (3 << 4);  ///< the second digit of the minute
        constexpr uint32_t MI = (4 << 0);  ///< the first digit of the minute
    }

    /// WTSR Register bits
    namespace wtsr_bits {
        constexpr uint32_t TS = (3 << 4);  ///< the second digit of the second
        constexpr uint32_t S = (4 << 0);  ///< the first digit of the second
    }

    /// WTYR Register bits
    namespace wtyr_bits {
        constexpr uint32_t TY = (4 << 4);  ///< the second digit of the year
        constexpr uint32_t Y = (4 << 0);  ///< the first digit of the year
    }

    /// WTMOR Register bits
    namespace wtmor_bits {
        constexpr uint32_t TMO0 = (1U << 4);  ///< the second digit in the month
        constexpr uint32_t MO = (4 << 0);  ///< the first digit of the month
    }

    /// WTDW Register bits
    namespace wtdw_bits {
        constexpr uint32_t DW = (3 << 0);  ///< Day of the week
    }

    /// ALDR Register bits
    namespace aldr_bits {
        constexpr uint32_t TAD = (2 << 4);  ///< the second digit of the alarm-set date
        constexpr uint32_t AD = (4 << 0);  ///< the first digit of the alarm-set date
    }

    /// ALHR Register bits
    namespace alhr_bits {
        constexpr uint32_t TAH = (2 << 4);  ///< the second digit of the alarm-set hour
        constexpr uint32_t AH = (4 << 0);  ///< the first digit of the alarm-set hour
    }

    /// ALMIR Register bits
    namespace almir_bits {
        constexpr uint32_t TAMI = (3 << 4);  ///< the second digit of the alarm-set minute
        constexpr uint32_t AMI = (4 << 0);  ///< the first digit of the alarm-set minute
    }

    /// ALYR Register bits
    namespace alyr_bits {
        constexpr uint32_t TAY = (4 << 4);  ///< the second digit of the alarm-set year
        constexpr uint32_t AY = (4 << 0);  ///< the first digit of the alarm-set year
    }

    /// ALMOR Register bits
    namespace almor_bits {
        constexpr uint32_t TAMO0 = (1U << 4);  ///< the second digit of the alarm-set month
        constexpr uint32_t AMO = (4 << 0);  ///< the first digit of the alarm-set month
    }

    /// WTTR Register bits
    namespace wttr_bits {
        constexpr uint32_t TM17 = (1U << 17);  ///< Bit17 of WTTR
        constexpr uint32_t TM16 = (1U << 16);  ///< Bit16 of WTTR
        constexpr uint32_t TM15 = (1U << 15);  ///< Bit15 of WTTR
        constexpr uint32_t TM14 = (1U << 14);  ///< Bit14 of WTTR
        constexpr uint32_t TM13 = (1U << 13);  ///< Bit13 of WTTR
        constexpr uint32_t TM12 = (1U << 12);  ///< Bit12 of WTTR
        constexpr uint32_t TM11 = (1U << 11);  ///< Bit11 of WTTR
        constexpr uint32_t TM10 = (1U << 10);  ///< Bit10 of WTTR
        constexpr uint32_t TM9 = (1U << 9);  ///< Bit9 of WTTR
        constexpr uint32_t TM8 = (1U << 8);  ///< Bit8 of WTTR
        constexpr uint32_t TM7 = (1U << 7);  ///< Bit7 of WTTR
        constexpr uint32_t TM6 = (1U << 6);  ///< Bit6 of WTTR
        constexpr uint32_t TM5 = (1U << 5);  ///< Bit5 of WTTR
        constexpr uint32_t TM4 = (1U << 4);  ///< Bit4 of WTTR
        constexpr uint32_t TM3 = (1U << 3);  ///< Bit3 of WTTR
        constexpr uint32_t TM2 = (1U << 2);  ///< Bit2 of WTTR
        constexpr uint32_t TM1 = (1U << 1);  ///< Bit1 of WTTR
        constexpr uint32_t TM0 = (1U << 0);  ///< Bit0 of WTTR
    }

    /// WTCLKS Register bits
    namespace wtclks_bits {
        constexpr uint32_t WTCLKS = (1U << 0);  ///< Input clock selection bit
    }

    /// WTCLKM Register bits
    namespace wtclkm_bits {
        constexpr uint32_t WTCLKM = (2 << 0);  ///< Clock selection status bit
    }

    /// WTCAL Register bits
    namespace wtcal_bits {
        constexpr uint32_t WTCAL = (10 << 0);  ///< Frequency correction value
    }

    /// WTCALEN Register bits
    namespace wtcalen_bits {
        constexpr uint32_t WTCALEN = (1U << 0);  ///< Frequency correction enable bit
    }

    /// WTDIV Register bits
    namespace wtdiv_bits {
        constexpr uint32_t WTDIV = (4 << 0);  ///< Divider ratio
    }

    /// WTDIVEN Register bits
    namespace wtdiven_bits {
        constexpr uint32_t WTDIVRDY = (1U << 1);  ///< Divider status bit
        constexpr uint32_t WTDIVEN = (1U << 0);  ///< Divider enable bit
    }

    /// WTCALPRD Register bits
    namespace wtcalprd_bits {
        constexpr uint32_t WTCALPRD = (6 << 0);  ///< frequency correction value
    }

    /// WTCOSEL Register bits
    namespace wtcosel_bits {
        constexpr uint32_t WTCOSEL = (1U << 0);  ///< RTCCO output selection bit
    }

}


} // namespace alloy::generated::mb9af1axm

#endif // ALLOY_GENERATED_MB9AF1AXM_PERIPHERALS_HPP