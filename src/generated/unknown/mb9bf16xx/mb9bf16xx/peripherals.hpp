/// Auto-generated code for MB9BF16xx
/// Generated by Alloy Code Generator
/// Source: spansion_mb9bf16xx.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:22:07
#ifndef ALLOY_GENERATED_MB9BF16XX_PERIPHERALS_HPP
#define ALLOY_GENERATED_MB9BF16XX_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::mb9bf16xx {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t WORKFLASH_IF_BASE = 0x200E0000;
    constexpr uint32_t FLASH_IF_BASE = 0x40000000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t WFASZR;  ///< Offset: 0x00 - register WFASZR
        volatile uint32_t WFRWTR;  ///< Offset: 0x04 - register WFRWTR
        volatile uint32_t WFSTR;  ///< Offset: 0x08 - register WFSTR
    };

    /// Peripheral instances
    inline Registers* WORKFLASH_IF = reinterpret_cast<Registers*>(WORKFLASH_IF_BASE);
    inline Registers* FLASH_IF = reinterpret_cast<Registers*>(FLASH_IF_BASE);

    // Bit definitions
    /// WFASZR Register bits
    namespace wfaszr_bits {
        constexpr uint32_t ASZ = (1U << 0);  ///< bitfield ASZ
    }

    /// WFRWTR Register bits
    namespace wfrwtr_bits {
        constexpr uint32_t RWT = (3 << 0);  ///< bitfield RWT
    }

    /// WFSTR Register bits
    namespace wfstr_bits {
        constexpr uint32_t HNG = (1U << 1);  ///< bitfield HNG
        constexpr uint32_t RDY = (1U << 0);  ///< bitfield RDY
    }

}

// ============================================================================
// UNIQUE Peripheral
// ============================================================================

namespace unique {
    /// Base addresses
    constexpr uint32_t UNIQUE_ID_BASE = 0x40000200;

    /// UNIQUE Register structure
    struct Registers {
        volatile uint32_t UIDR0;  ///< Offset: 0x00 - register UIDR0
        volatile uint32_t UIDR1;  ///< Offset: 0x04 - register UIDR1
    };

    /// Peripheral instances
    inline Registers* UNIQUE_ID = reinterpret_cast<Registers*>(UNIQUE_ID_BASE);

    // Bit definitions
    /// UIDR0 Register bits
    namespace uidr0_bits {
        constexpr uint32_t UID = (28 << 4);  ///< bitfield UID
    }

    /// UIDR1 Register bits
    namespace uidr1_bits {
        constexpr uint32_t UID = (13 << 0);  ///< bitfield UID
    }

}

// ============================================================================
// ECC Peripheral
// ============================================================================

namespace ecc {
    /// Base addresses
    constexpr uint32_t ECC_CAPTURE_BASE = 0x40000300;

    /// ECC Register structure
    struct Registers {
        volatile uint32_t FERRAD;  ///< Offset: 0x00 - register FERRAD
    };

    /// Peripheral instances
    inline Registers* ECC_CAPTURE = reinterpret_cast<Registers*>(ECC_CAPTURE_BASE);

    // Bit definitions
    /// FERRAD Register bits
    namespace ferrad_bits {
        constexpr uint32_t ERRAD = (23 << 0);  ///< bitfield ERRAD
    }

}

// ============================================================================
// CRG Peripheral
// ============================================================================

namespace crg {
    /// Base addresses
    constexpr uint32_t CRG_BASE = 0x40010000;

    /// CRG Register structure
    struct Registers {
        volatile uint32_t SCM_CTL;  ///< Offset: 0x00 - register SCM_CTL
        volatile uint32_t SCM_STR;  ///< Offset: 0x04 - register SCM_STR
        volatile uint32_t BSC_PSR;  ///< Offset: 0x10 - register BSC_PSR
        volatile uint32_t APBC0_PSR;  ///< Offset: 0x14 - register APBC0_PSR
        volatile uint32_t APBC1_PSR;  ///< Offset: 0x18 - register APBC1_PSR
        volatile uint32_t APBC2_PSR;  ///< Offset: 0x1C - register APBC2_PSR
        volatile uint32_t SWC_PSR;  ///< Offset: 0x20 - register SWC_PSR
        volatile uint32_t TTC_PSR;  ///< Offset: 0x28 - register TTC_PSR
        volatile uint32_t CSW_TMR;  ///< Offset: 0x30 - register CSW_TMR
        volatile uint32_t PSW_TMR;  ///< Offset: 0x34 - register PSW_TMR
        volatile uint32_t PLL_CTL1;  ///< Offset: 0x38 - register PLL_CTL1
        volatile uint32_t PLL_CTL2;  ///< Offset: 0x3C - register PLL_CTL2
        volatile uint32_t DBWDT_CTL;  ///< Offset: 0x54 - register DBWDT_CTL
        volatile uint32_t INT_ENR;  ///< Offset: 0x60 - register INT_ENR
        volatile uint32_t INT_STR;  ///< Offset: 0x64 - register INT_STR
        volatile uint32_t INT_CLR;  ///< Offset: 0x68 - register INT_CLR
        volatile uint32_t STB_CTL;  ///< Offset: 0x08 - register STB_CTL
        volatile uint32_t RST_STR;  ///< Offset: 0x0C - register RST_STR
        volatile uint32_t CSV_CTL;  ///< Offset: 0x40 - register CSV_CTL
        volatile uint32_t CSV_STR;  ///< Offset: 0x44 - register CSV_STR
        volatile uint32_t FCSWH_CTL;  ///< Offset: 0x48 - register FCSWH_CTL
        volatile uint32_t FCSWL_CTL;  ///< Offset: 0x4C - register FCSWL_CTL
        volatile uint32_t FCSWD_CTL;  ///< Offset: 0x50 - register FCSWD_CTL
    };

    /// Peripheral instances
    inline Registers* CRG = reinterpret_cast<Registers*>(CRG_BASE);

    // Bit definitions
    /// SCM_CTL Register bits
    namespace scm_ctl_bits {
        constexpr uint32_t RCS = (3 << 5);  ///< bitfield RCS
        constexpr uint32_t PLLE = (1U << 4);  ///< bitfield PLLE
        constexpr uint32_t SOSCE = (1U << 3);  ///< bitfield SOSCE
        constexpr uint32_t MOSCE = (1U << 1);  ///< bitfield MOSCE
    }

    /// SCM_STR Register bits
    namespace scm_str_bits {
        constexpr uint32_t RCM = (3 << 5);  ///< bitfield RCM
        constexpr uint32_t PLRDY = (1U << 4);  ///< bitfield PLRDY
        constexpr uint32_t SORDY = (1U << 3);  ///< bitfield SORDY
        constexpr uint32_t MORDY = (1U << 1);  ///< bitfield MORDY
    }

    /// BSC_PSR Register bits
    namespace bsc_psr_bits {
        constexpr uint32_t BSR = (3 << 0);  ///< bitfield BSR
    }

    /// APBC0_PSR Register bits
    namespace apbc0_psr_bits {
        constexpr uint32_t APBC0 = (2 << 0);  ///< bitfield APBC0
    }

    /// APBC1_PSR Register bits
    namespace apbc1_psr_bits {
        constexpr uint32_t APBC1EN = (1U << 7);  ///< bitfield APBC1EN
        constexpr uint32_t APBC1RST = (1U << 4);  ///< bitfield APBC1RST
        constexpr uint32_t APBC1 = (2 << 0);  ///< bitfield APBC1
    }

    /// APBC2_PSR Register bits
    namespace apbc2_psr_bits {
        constexpr uint32_t APBC2EN = (1U << 7);  ///< bitfield APBC2EN
        constexpr uint32_t APBC2RST = (1U << 4);  ///< bitfield APBC2RST
        constexpr uint32_t APBC2 = (2 << 0);  ///< bitfield APBC2
    }

    /// SWC_PSR Register bits
    namespace swc_psr_bits {
        constexpr uint32_t TESTB = (1U << 7);  ///< bitfield TESTB
        constexpr uint32_t SWDS = (2 << 0);  ///< bitfield SWDS
    }

    /// TTC_PSR Register bits
    namespace ttc_psr_bits {
        constexpr uint32_t TTC = (2 << 0);  ///< bitfield TTC
    }

    /// CSW_TMR Register bits
    namespace csw_tmr_bits {
        constexpr uint32_t SOWT = (4 << 4);  ///< bitfield SOWT
        constexpr uint32_t MOWT = (4 << 0);  ///< bitfield MOWT
    }

    /// PSW_TMR Register bits
    namespace psw_tmr_bits {
        constexpr uint32_t PINC = (1U << 4);  ///< bitfield PINC
        constexpr uint32_t POWT = (3 << 0);  ///< bitfield POWT
    }

    /// PLL_CTL1 Register bits
    namespace pll_ctl1_bits {
        constexpr uint32_t PLLK = (4 << 4);  ///< bitfield PLLK
        constexpr uint32_t PLLM = (4 << 0);  ///< bitfield PLLM
    }

    /// PLL_CTL2 Register bits
    namespace pll_ctl2_bits {
        constexpr uint32_t PLLN = (6 << 0);  ///< bitfield PLLN
    }

    /// DBWDT_CTL Register bits
    namespace dbwdt_ctl_bits {
        constexpr uint32_t DPHWBE = (1U << 7);  ///< bitfield DPHWBE
        constexpr uint32_t DPSWBE = (1U << 5);  ///< bitfield DPSWBE
    }

    /// INT_ENR Register bits
    namespace int_enr_bits {
        constexpr uint32_t FCSE = (1U << 5);  ///< bitfield FCSE
        constexpr uint32_t PCSE = (1U << 2);  ///< bitfield PCSE
        constexpr uint32_t SCSE = (1U << 1);  ///< bitfield SCSE
        constexpr uint32_t MCSE = (1U << 0);  ///< bitfield MCSE
    }

    /// INT_STR Register bits
    namespace int_str_bits {
        constexpr uint32_t FCSI = (1U << 5);  ///< bitfield FCSI
        constexpr uint32_t PCSI = (1U << 2);  ///< bitfield PCSI
        constexpr uint32_t SCSI = (1U << 1);  ///< bitfield SCSI
        constexpr uint32_t MCSI = (1U << 0);  ///< bitfield MCSI
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t FCSC = (1U << 5);  ///< bitfield FCSC
        constexpr uint32_t PCSC = (1U << 2);  ///< bitfield PCSC
        constexpr uint32_t SCSC = (1U << 1);  ///< bitfield SCSC
        constexpr uint32_t MCSC = (1U << 0);  ///< bitfield MCSC
    }

    /// STB_CTL Register bits
    namespace stb_ctl_bits {
        constexpr uint32_t KEY = (16 << 16);  ///< bitfield KEY
        constexpr uint32_t SPL = (1U << 4);  ///< bitfield SPL
        constexpr uint32_t DSTM = (1U << 2);  ///< bitfield DSTM
        constexpr uint32_t STM = (2 << 0);  ///< bitfield STM
    }

    /// RST_STR Register bits
    namespace rst_str_bits {
        constexpr uint32_t SRST = (1U << 8);  ///< bitfield SRST
        constexpr uint32_t FCSR = (1U << 7);  ///< bitfield FCSR
        constexpr uint32_t CSVR = (1U << 6);  ///< bitfield CSVR
        constexpr uint32_t HWDT = (1U << 5);  ///< bitfield HWDT
        constexpr uint32_t SWDT = (1U << 4);  ///< bitfield SWDT
        constexpr uint32_t INITX = (1U << 1);  ///< bitfield INITX
        constexpr uint32_t PONR = (1U << 0);  ///< bitfield PONR
    }

    /// CSV_CTL Register bits
    namespace csv_ctl_bits {
        constexpr uint32_t FCD = (3 << 12);  ///< bitfield FCD
        constexpr uint32_t FCSRE = (1U << 9);  ///< bitfield FCSRE
        constexpr uint32_t FCSDE = (1U << 8);  ///< bitfield FCSDE
        constexpr uint32_t SCSVE = (1U << 1);  ///< bitfield SCSVE
        constexpr uint32_t MCSVE = (1U << 0);  ///< bitfield MCSVE
    }

    /// CSV_STR Register bits
    namespace csv_str_bits {
        constexpr uint32_t SCMF = (1U << 1);  ///< bitfield SCMF
        constexpr uint32_t MCMF = (1U << 0);  ///< bitfield MCMF
    }

    /// FCSWH_CTL Register bits
    namespace fcswh_ctl_bits {
        constexpr uint32_t FWH = (16 << 0);  ///< bitfield FWH
    }

    /// FCSWL_CTL Register bits
    namespace fcswl_ctl_bits {
        constexpr uint32_t FWL = (16 << 0);  ///< bitfield FWL
    }

    /// FCSWD_CTL Register bits
    namespace fcswd_ctl_bits {
        constexpr uint32_t FWD = (16 << 0);  ///< bitfield FWD
    }

}

// ============================================================================
// CRTRIM Peripheral
// ============================================================================

namespace crtrim {
    /// Base addresses
    constexpr uint32_t CRTRIM_BASE = 0x4002E000;

    /// CRTRIM Register structure
    struct Registers {
        volatile uint32_t MCR_PSR;  ///< Offset: 0x00 - register MCR_PSR
        volatile uint32_t MCR_FTRM;  ///< Offset: 0x04 - register MCR_FTRM
        volatile uint32_t MCR_TTRM;  ///< Offset: 0x08 - register MCR_TTRM
        volatile uint32_t MCR_RLR;  ///< Offset: 0x0C - register MCR_RLR
    };

    /// Peripheral instances
    inline Registers* CRTRIM = reinterpret_cast<Registers*>(CRTRIM_BASE);

    // Bit definitions
    /// MCR_PSR Register bits
    namespace mcr_psr_bits {
        constexpr uint32_t CSR = (3 << 0);  ///< bitfield CSR
    }

    /// MCR_FTRM Register bits
    namespace mcr_ftrm_bits {
        constexpr uint32_t TRD = (10 << 0);  ///< bitfield TRD
    }

    /// MCR_TTRM Register bits
    namespace mcr_ttrm_bits {
        constexpr uint32_t TRT = (5 << 0);  ///< bitfield TRT
    }

    /// MCR_RLR Register bits
    namespace mcr_rlr_bits {
        constexpr uint32_t TRMLCK = (32 << 0);  ///< bitfield TRMLCK
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t SWWDT_BASE = 0x40012000;
    constexpr uint32_t HWWDT_BASE = 0x40011000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t WDOGLOAD;  ///< Offset: 0x00 - register WDOGLOAD
        volatile uint32_t WDOGVALUE;  ///< Offset: 0x04 - register WDOGVALUE
        volatile uint32_t WDOGCONTROL;  ///< Offset: 0x08 - register WDOGCONTROL
        volatile uint32_t WDOGINTCLR;  ///< Offset: 0x0C - register WDOGINTCLR
        volatile uint32_t WDOGRIS;  ///< Offset: 0x10 - register WDOGRIS
        volatile uint32_t WDOGSPMC;  ///< Offset: 0x18 - register WDOGSPMC
        volatile uint32_t WDOGLOCK;  ///< Offset: 0xC00 - register WDOGLOCK
    };

    /// Peripheral instances
    inline Registers* SWWDT = reinterpret_cast<Registers*>(SWWDT_BASE);
    inline Registers* HWWDT = reinterpret_cast<Registers*>(HWWDT_BASE);

    // Bit definitions
    /// WDOGCONTROL Register bits
    namespace wdogcontrol_bits {
        constexpr uint32_t SPM = (1U << 4);  ///< bitfield SPM
        constexpr uint32_t TWD = (2 << 2);  ///< bitfield TWD
        constexpr uint32_t RESEN = (1U << 1);  ///< bitfield RESEN
        constexpr uint32_t INTEN = (1U << 0);  ///< bitfield INTEN
    }

    /// WDOGRIS Register bits
    namespace wdogris_bits {
        constexpr uint32_t RIS = (1U << 0);  ///< bitfield RIS
    }

    /// WDOGSPMC Register bits
    namespace wdogspmc_bits {
        constexpr uint32_t TRG = (1U << 0);  ///< bitfield TRG
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t DTIM_BASE = 0x40015000;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t TIMER1LOAD;  ///< Offset: 0x00 - register TIMER1LOAD
        volatile uint32_t TIMER1VALUE;  ///< Offset: 0x04 - register TIMER1VALUE
        volatile uint32_t TIMER1CONTROL;  ///< Offset: 0x08 - register TIMER1CONTROL
        volatile uint32_t TIMER1INTCLR;  ///< Offset: 0x0C - register TIMER1INTCLR
        volatile uint32_t TIMER1RIS;  ///< Offset: 0x10 - register TIMER1RIS
        volatile uint32_t TIMER1MIS;  ///< Offset: 0x14 - register TIMER1MIS
        volatile uint32_t TIMER1BGLOAD;  ///< Offset: 0x18 - register TIMER1BGLOAD
        volatile uint32_t TIMER2LOAD;  ///< Offset: 0x20 - register TIMER2LOAD
        volatile uint32_t TIMER2VALUE;  ///< Offset: 0x24 - register TIMER2VALUE
        volatile uint32_t TIMER2CONTROL;  ///< Offset: 0x28 - register TIMER2CONTROL
        volatile uint32_t TIMER2INTCLR;  ///< Offset: 0x2C - register TIMER2INTCLR
        volatile uint32_t TIMER2RIS;  ///< Offset: 0x30 - register TIMER2RIS
        volatile uint32_t TIMER2MIS;  ///< Offset: 0x34 - register TIMER2MIS
        volatile uint32_t TIMER2BGLOAD;  ///< Offset: 0x38 - register TIMER2BGLOAD
    };

    /// Peripheral instances
    inline Registers* DTIM = reinterpret_cast<Registers*>(DTIM_BASE);

    // Bit definitions
    /// TIMER1CONTROL Register bits
    namespace timer1control_bits {
        constexpr uint32_t TimerEn = (1U << 7);  ///< bitfield TimerEn
        constexpr uint32_t TimerMode = (1U << 6);  ///< bitfield TimerMode
        constexpr uint32_t IntEnable = (1U << 5);  ///< bitfield IntEnable
        constexpr uint32_t TimerPre = (2 << 2);  ///< bitfield TimerPre
        constexpr uint32_t TimerSize = (1U << 1);  ///< bitfield TimerSize
        constexpr uint32_t OneShot = (1U << 0);  ///< bitfield OneShot
    }

    /// TIMER1RIS Register bits
    namespace timer1ris_bits {
        constexpr uint32_t TIMER1RIS = (1U << 0);  ///< bitfield TIMER1RIS
    }

    /// TIMER1MIS Register bits
    namespace timer1mis_bits {
        constexpr uint32_t TIMER1MIS = (1U << 0);  ///< bitfield TIMER1MIS
    }

}

// ============================================================================
// MFT0 Peripheral
// ============================================================================

namespace mft0 {
    /// Base addresses
    constexpr uint32_t MFT0_BASE = 0x40020000;

    /// MFT0 Register structure
    struct Registers {
        volatile uint32_t FRT_TCCP0;  ///< Offset: 0x142 - register FRT_TCCP0
        volatile uint32_t FRT_TCDT0;  ///< Offset: 0x146 - register FRT_TCDT0
        volatile uint32_t FRT_TCSA0;  ///< Offset: 0x148 - register FRT_TCSA0
        volatile uint32_t FRT_TCSC0;  ///< Offset: 0x14B - register FRT_TCSC0
        volatile uint32_t FRT_TCCP1;  ///< Offset: 0x14E - register FRT_TCCP1
        volatile uint32_t FRT_TCDT1;  ///< Offset: 0x152 - register FRT_TCDT1
        volatile uint32_t FRT_TCSA1;  ///< Offset: 0x154 - register FRT_TCSA1
        volatile uint32_t FRT_TCSC1;  ///< Offset: 0x156 - register FRT_TCSC1
        volatile uint32_t FRT_TCCP2;  ///< Offset: 0x15A - register FRT_TCCP2
        volatile uint32_t FRT_TCDT2;  ///< Offset: 0x15E - register FRT_TCDT2
        volatile uint32_t FRT_TCSA2;  ///< Offset: 0x160 - register FRT_TCSA2
        volatile uint32_t FRT_TCSC2;  ///< Offset: 0x162 - register FRT_TCSC2
        volatile uint32_t FRT_TCAL;  ///< Offset: 0x164 - register FRT_TCAL
        volatile uint32_t OCU_OCCP0;  ///< Offset: 0x102 - register OCU_OCCP0
        volatile uint32_t OCU_OCCP1;  ///< Offset: 0x106 - register OCU_OCCP1
        volatile uint32_t OCU_OCCP2;  ///< Offset: 0x10A - register OCU_OCCP2
        volatile uint32_t OCU_OCCP3;  ///< Offset: 0x10E - register OCU_OCCP3
        volatile uint32_t OCU_OCCP4;  ///< Offset: 0x112 - register OCU_OCCP4
        volatile uint32_t OCU_OCCP5;  ///< Offset: 0x116 - register OCU_OCCP5
        volatile uint32_t OCU_OCSA10;  ///< Offset: 0x118 - register OCU_OCSA10
        volatile uint32_t OCU_OCSB10;  ///< Offset: 0x119 - register OCU_OCSB10
        volatile uint32_t OCU_OCSD10;  ///< Offset: 0x11A - register OCU_OCSD10
        volatile uint32_t OCU_OCSA32;  ///< Offset: 0x11C - register OCU_OCSA32
        volatile uint32_t OCU_OCSB32;  ///< Offset: 0x11D - register OCU_OCSB32
        volatile uint32_t OCU_OCSD32;  ///< Offset: 0x11E - register OCU_OCSD32
        volatile uint32_t OCU_OCSA54;  ///< Offset: 0x120 - register OCU_OCSA54
        volatile uint32_t OCU_OCSB54;  ///< Offset: 0x121 - register OCU_OCSB54
        volatile uint32_t OCU_OCSD54;  ///< Offset: 0x122 - register OCU_OCSD54
        volatile uint32_t OCU_OCSC;  ///< Offset: 0x124 - register OCU_OCSC
        volatile uint32_t OCU_OCSE0;  ///< Offset: 0x128 - register OCU_OCSE0
        volatile uint32_t OCU_OCSE1;  ///< Offset: 0x12C - register OCU_OCSE1
        volatile uint32_t OCU_OCSE2;  ///< Offset: 0x130 - register OCU_OCSE2
        volatile uint32_t OCU_OCSE3;  ///< Offset: 0x134 - register OCU_OCSE3
        volatile uint32_t OCU_OCSE4;  ///< Offset: 0x138 - register OCU_OCSE4
        volatile uint32_t OCU_OCSE5;  ///< Offset: 0x13C - register OCU_OCSE5
        volatile uint32_t OCU_OCFS10;  ///< Offset: 0x168 - register OCU_OCFS10
        volatile uint32_t OCU_OCFS32;  ///< Offset: 0x169 - register OCU_OCFS32
        volatile uint32_t OCU_OCFS54;  ///< Offset: 0x16A - register OCU_OCFS54
        volatile uint32_t WFG_WFTF10;  ///< Offset: 0x18E - register WFG_WFTF10
        volatile uint32_t WFG_WFTA10;  ///< Offset: 0x190 - register WFG_WFTA10
        volatile uint32_t WFG_WFTB10;  ///< Offset: 0x192 - register WFG_WFTB10
        volatile uint32_t WFG_WFTF32;  ///< Offset: 0x196 - register WFG_WFTF32
        volatile uint32_t WFG_WFTA32;  ///< Offset: 0x198 - register WFG_WFTA32
        volatile uint32_t WFG_WFTB32;  ///< Offset: 0x19A - register WFG_WFTB32
        volatile uint32_t WFG_WFTF54;  ///< Offset: 0x19E - register WFG_WFTF54
        volatile uint32_t WFG_WFTA54;  ///< Offset: 0x1A0 - register WFG_WFTA54
        volatile uint32_t WFG_WFTB54;  ///< Offset: 0x1A2 - register WFG_WFTB54
        volatile uint32_t WFG_WFSA10;  ///< Offset: 0x1A4 - register WFG_WFSA10
        volatile uint32_t WFG_WFSA32;  ///< Offset: 0x1A8 - register WFG_WFSA32
        volatile uint32_t WFG_WFSA54;  ///< Offset: 0x1AC - register WFG_WFSA54
        volatile uint32_t WFG_WFIR;  ///< Offset: 0x1B0 - register WFG_WFIR
        volatile uint32_t WFG_NZCL;  ///< Offset: 0x1B4 - register WFG_NZCL
        volatile uint32_t ICU_ICFS10;  ///< Offset: 0x16C - register ICU_ICFS10
        volatile uint32_t ICU_ICFS32;  ///< Offset: 0x16D - register ICU_ICFS32
        volatile uint32_t ICU_ICCP0;  ///< Offset: 0x176 - register ICU_ICCP0
        volatile uint32_t ICU_ICCP1;  ///< Offset: 0x17A - register ICU_ICCP1
        volatile uint32_t ICU_ICCP2;  ///< Offset: 0x17E - register ICU_ICCP2
        volatile uint32_t ICU_ICCP3;  ///< Offset: 0x182 - register ICU_ICCP3
        volatile uint32_t ICU_ICSA10;  ///< Offset: 0x184 - register ICU_ICSA10
        volatile uint32_t ICU_ICSB10;  ///< Offset: 0x185 - register ICU_ICSB10
        volatile uint32_t ICU_ICSA32;  ///< Offset: 0x188 - register ICU_ICSA32
        volatile uint32_t ICU_ICSB32;  ///< Offset: 0x189 - register ICU_ICSB32
        volatile uint32_t ADCMP_ACFS10;  ///< Offset: 0x170 - register ADCMP_ACFS10
        volatile uint32_t ADCMP_ACFS32;  ///< Offset: 0x171 - register ADCMP_ACFS32
        volatile uint32_t ADCMP_ACFS54;  ///< Offset: 0x172 - register ADCMP_ACFS54
        volatile uint32_t ADCMP_ACMP0;  ///< Offset: 0x1BA - register ADCMP_ACMP0
        volatile uint32_t ADCMP_ACMP1;  ///< Offset: 0x1BE - register ADCMP_ACMP1
        volatile uint32_t ADCMP_ACMP2;  ///< Offset: 0x1C2 - register ADCMP_ACMP2
        volatile uint32_t ADCMP_ACMP3;  ///< Offset: 0x1C6 - register ADCMP_ACMP3
        volatile uint32_t ADCMP_ACMP4;  ///< Offset: 0x1CA - register ADCMP_ACMP4
        volatile uint32_t ADCMP_ACMP5;  ///< Offset: 0x1CE - register ADCMP_ACMP5
        volatile uint32_t ADCMP_ACSA;  ///< Offset: 0x1D0 - register ADCMP_ACSA
        volatile uint32_t ADCMP_ACSC0;  ///< Offset: 0x1D4 - register ADCMP_ACSC0
        volatile uint32_t ADCMP_ACSD0;  ///< Offset: 0x1D5 - register ADCMP_ACSD0
        volatile uint32_t ADCMP_ACSC1;  ///< Offset: 0x1D8 - register ADCMP_ACSC1
        volatile uint32_t ADCMP_ACSD1;  ///< Offset: 0x1D9 - register ADCMP_ACSD1
        volatile uint32_t ADCMP_ACSC2;  ///< Offset: 0x1DC - register ADCMP_ACSC2
        volatile uint32_t ADCMP_ACSD2;  ///< Offset: 0x1DD - register ADCMP_ACSD2
        volatile uint32_t ADCMP_ACSC3;  ///< Offset: 0x1E0 - register ADCMP_ACSC3
        volatile uint32_t ADCMP_ACSD3;  ///< Offset: 0x1E1 - register ADCMP_ACSD3
        volatile uint32_t ADCMP_ACSC4;  ///< Offset: 0x1E4 - register ADCMP_ACSC4
        volatile uint32_t ADCMP_ACSD4;  ///< Offset: 0x1E5 - register ADCMP_ACSD4
        volatile uint32_t ADCMP_ACSC5;  ///< Offset: 0x1E8 - register ADCMP_ACSC5
        volatile uint32_t ADCMP_ACSD5;  ///< Offset: 0x1E9 - register ADCMP_ACSD5
    };

    /// Peripheral instances
    inline Registers* MFT0 = reinterpret_cast<Registers*>(MFT0_BASE);

    // Bit definitions
    /// FRT_TCSA0 Register bits
    namespace frt_tcsa0_bits {
        constexpr uint32_t CLK = (4 << 0);  ///< bitfield CLK
        constexpr uint32_t SCLR = (1U << 4);  ///< bitfield SCLR
        constexpr uint32_t MODE = (1U << 5);  ///< bitfield MODE
        constexpr uint32_t STOP = (1U << 6);  ///< bitfield STOP
        constexpr uint32_t BFE = (1U << 7);  ///< bitfield BFE
        constexpr uint32_t ICRE = (1U << 8);  ///< bitfield ICRE
        constexpr uint32_t ICLR = (1U << 9);  ///< bitfield ICLR
        constexpr uint32_t IRQZE = (1U << 13);  ///< bitfield IRQZE
        constexpr uint32_t IRQZF = (1U << 14);  ///< bitfield IRQZF
        constexpr uint32_t ECKE = (1U << 15);  ///< bitfield ECKE
    }

    /// FRT_TCSC0 Register bits
    namespace frt_tcsc0_bits {
        constexpr uint32_t MSPC = (4 << 12);  ///< bitfield MSPC
        constexpr uint32_t MSZC = (4 << 8);  ///< bitfield MSZC
        constexpr uint32_t MSPI = (4 << 4);  ///< bitfield MSPI
        constexpr uint32_t MSZI = (4 << 0);  ///< bitfield MSZI
    }

    /// FRT_TCAL Register bits
    namespace frt_tcal_bits {
        constexpr uint32_t SCLR22 = (1U << 24);  ///< bitfield SCLR22
        constexpr uint32_t SCLR21 = (1U << 23);  ///< bitfield SCLR21
        constexpr uint32_t SCLR20 = (1U << 22);  ///< bitfield SCLR20
        constexpr uint32_t SCLR12 = (1U << 21);  ///< bitfield SCLR12
        constexpr uint32_t SCLR11 = (1U << 20);  ///< bitfield SCLR11
        constexpr uint32_t SCLR10 = (1U << 19);  ///< bitfield SCLR10
        constexpr uint32_t SCLR02 = (1U << 18);  ///< bitfield SCLR02
        constexpr uint32_t SCLR01 = (1U << 17);  ///< bitfield SCLR01
        constexpr uint32_t SCLR00 = (1U << 16);  ///< bitfield SCLR00
        constexpr uint32_t STOP22 = (1U << 8);  ///< bitfield STOP22
        constexpr uint32_t STOP21 = (1U << 7);  ///< bitfield STOP21
        constexpr uint32_t STOP20 = (1U << 6);  ///< bitfield STOP20
        constexpr uint32_t STOP12 = (1U << 5);  ///< bitfield STOP12
        constexpr uint32_t STOP11 = (1U << 4);  ///< bitfield STOP11
        constexpr uint32_t STOP10 = (1U << 3);  ///< bitfield STOP10
        constexpr uint32_t STOP02 = (1U << 2);  ///< bitfield STOP02
        constexpr uint32_t STOP01 = (1U << 1);  ///< bitfield STOP01
        constexpr uint32_t STOP00 = (1U << 0);  ///< bitfield STOP00
    }

    /// OCU_OCSA10 Register bits
    namespace ocu_ocsa10_bits {
        constexpr uint32_t IOP1 = (1U << 7);  ///< bitfield IOP1
        constexpr uint32_t IOP0 = (1U << 6);  ///< bitfield IOP0
        constexpr uint32_t IOE1 = (1U << 5);  ///< bitfield IOE1
        constexpr uint32_t IOE0 = (1U << 4);  ///< bitfield IOE0
        constexpr uint32_t CST1 = (1U << 1);  ///< bitfield CST1
        constexpr uint32_t CST0 = (1U << 0);  ///< bitfield CST0
    }

    /// OCU_OCSB10 Register bits
    namespace ocu_ocsb10_bits {
        constexpr uint32_t FM4 = (1U << 7);  ///< bitfield FM4
        constexpr uint32_t CMOD = (1U << 4);  ///< bitfield CMOD
        constexpr uint32_t OTD1 = (1U << 1);  ///< bitfield OTD1
        constexpr uint32_t OTD0 = (1U << 0);  ///< bitfield OTD0
    }

    /// OCU_OCSD10 Register bits
    namespace ocu_ocsd10_bits {
        constexpr uint32_t OCSE1BUFE = (2 << 6);  ///< bitfield OCSE1BUFE
        constexpr uint32_t OCSE0BUFE = (2 << 4);  ///< bitfield OCSE0BUFE
        constexpr uint32_t OCCP1BUFE = (2 << 2);  ///< bitfield OCCP1BUFE
        constexpr uint32_t OCCP0BUFE = (2 << 0);  ///< bitfield OCCP0BUFE
    }

    /// OCU_OCSC Register bits
    namespace ocu_ocsc_bits {
        constexpr uint32_t MOD5 = (1U << 13);  ///< bitfield MOD5
        constexpr uint32_t MOD4 = (1U << 12);  ///< bitfield MOD4
        constexpr uint32_t MOD3 = (1U << 11);  ///< bitfield MOD3
        constexpr uint32_t MOD2 = (1U << 10);  ///< bitfield MOD2
        constexpr uint32_t MOD1 = (1U << 9);  ///< bitfield MOD1
        constexpr uint32_t MOD0 = (1U << 8);  ///< bitfield MOD0
    }

    /// OCU_OCSE0 Register bits
    namespace ocu_ocse0_bits {
        constexpr uint32_t OCSE = (8 << 0);  ///< bitfield OCSE
    }

    /// OCU_OCSE1 Register bits
    namespace ocu_ocse1_bits {
        constexpr uint32_t OCSE = (16 << 0);  ///< bitfield OCSE
    }

    /// OCU_OCFS10 Register bits
    namespace ocu_ocfs10_bits {
        constexpr uint32_t FSO1 = (4 << 4);  ///< bitfield FSO1
        constexpr uint32_t FSO0 = (4 << 0);  ///< bitfield FSO0
    }

    /// WFG_WFSA10 Register bits
    namespace wfg_wfsa10_bits {
        constexpr uint32_t DMOD = (2 << 12);  ///< bitfield DMOD
        constexpr uint32_t PGEN = (2 << 10);  ///< bitfield PGEN
        constexpr uint32_t PSEL = (2 << 8);  ///< bitfield PSEL
        constexpr uint32_t GTEN = (2 << 6);  ///< bitfield GTEN
        constexpr uint32_t TMD = (3 << 3);  ///< bitfield TMD
        constexpr uint32_t DCK = (3 << 0);  ///< bitfield DCK
    }

    /// WFG_WFIR Register bits
    namespace wfg_wfir_bits {
        constexpr uint32_t TMIS54 = (1U << 15);  ///< bitfield TMIS54
        constexpr uint32_t TMIE54 = (1U << 14);  ///< bitfield TMIE54
        constexpr uint32_t TMIC54 = (1U << 13);  ///< bitfield TMIC54
        constexpr uint32_t TMIF54 = (1U << 12);  ///< bitfield TMIF54
        constexpr uint32_t TMIS32 = (1U << 11);  ///< bitfield TMIS32
        constexpr uint32_t TMIE32 = (1U << 10);  ///< bitfield TMIE32
        constexpr uint32_t TMIC32 = (1U << 9);  ///< bitfield TMIC32
        constexpr uint32_t TMIF32 = (1U << 8);  ///< bitfield TMIF32
        constexpr uint32_t TMIS10 = (1U << 7);  ///< bitfield TMIS10
        constexpr uint32_t TMIE10 = (1U << 6);  ///< bitfield TMIE10
        constexpr uint32_t TMIC10 = (1U << 5);  ///< bitfield TMIC10
        constexpr uint32_t TMIF10 = (1U << 4);  ///< bitfield TMIF10
        constexpr uint32_t DTICB = (1U << 3);  ///< bitfield DTICB
        constexpr uint32_t DTIFB = (1U << 2);  ///< bitfield DTIFB
        constexpr uint32_t DTICA = (1U << 1);  ///< bitfield DTICA
        constexpr uint32_t DTIFA = (1U << 0);  ///< bitfield DTIFA
    }

    /// WFG_NZCL Register bits
    namespace wfg_nzcl_bits {
        constexpr uint32_t WIM54 = (1U << 14);  ///< bitfield WIM54
        constexpr uint32_t WIM32 = (1U << 13);  ///< bitfield WIM32
        constexpr uint32_t WIM10 = (1U << 12);  ///< bitfield WIM10
        constexpr uint32_t DIMB = (1U << 9);  ///< bitfield DIMB
        constexpr uint32_t DIMA = (1U << 8);  ///< bitfield DIMA
        constexpr uint32_t DTIEB = (1U << 5);  ///< bitfield DTIEB
        constexpr uint32_t SDTI = (1U << 4);  ///< bitfield SDTI
        constexpr uint32_t NWS = (3 << 1);  ///< bitfield NWS
        constexpr uint32_t DTIEA = (1U << 0);  ///< bitfield DTIEA
    }

    /// ICU_ICFS10 Register bits
    namespace icu_icfs10_bits {
        constexpr uint32_t FSI0 = (4 << 0);  ///< bitfield FSI0
        constexpr uint32_t FSI1 = (4 << 4);  ///< bitfield FSI1
    }

    /// ICU_ICSA10 Register bits
    namespace icu_icsa10_bits {
        constexpr uint32_t EG0 = (2 << 0);  ///< bitfield EG0
        constexpr uint32_t EG1 = (2 << 2);  ///< bitfield EG1
        constexpr uint32_t ICE0 = (1U << 4);  ///< bitfield ICE0
        constexpr uint32_t ICE1 = (1U << 5);  ///< bitfield ICE1
        constexpr uint32_t ICP0 = (1U << 6);  ///< bitfield ICP0
        constexpr uint32_t ICP1 = (1U << 7);  ///< bitfield ICP1
    }

    /// ICU_ICSB10 Register bits
    namespace icu_icsb10_bits {
        constexpr uint32_t IEI0 = (1U << 0);  ///< bitfield IEI0
        constexpr uint32_t IEI1 = (1U << 1);  ///< bitfield IEI1
    }

    /// ADCMP_ACFS10 Register bits
    namespace adcmp_acfs10_bits {
        constexpr uint32_t FSA1 = (4 << 4);  ///< bitfield FSA1
        constexpr uint32_t FSA0 = (4 << 0);  ///< bitfield FSA0
    }

    /// ADCMP_ACMP0 Register bits
    namespace adcmp_acmp0_bits {
        constexpr uint32_t ACMP = (16 << 0);  ///< bitfield ACMP
    }

    /// ADCMP_ACSA Register bits
    namespace adcmp_acsa_bits {
        constexpr uint32_t SEL54 = (2 << 12);  ///< bitfield SEL54
        constexpr uint32_t SEL32 = (2 << 10);  ///< bitfield SEL32
        constexpr uint32_t SEL10 = (2 << 8);  ///< bitfield SEL10
        constexpr uint32_t CE54 = (2 << 4);  ///< bitfield CE54
        constexpr uint32_t CE32 = (2 << 2);  ///< bitfield CE32
        constexpr uint32_t CE10 = (2 << 0);  ///< bitfield CE10
    }

    /// ADCMP_ACSC0 Register bits
    namespace adcmp_acsc0_bits {
        constexpr uint32_t ADSEL = (3 << 2);  ///< bitfield ADSEL
        constexpr uint32_t BUFE = (2 << 0);  ///< bitfield BUFE
    }

    /// ADCMP_ACSD0 Register bits
    namespace adcmp_acsd0_bits {
        constexpr uint32_t ZE = (1U << 7);  ///< bitfield ZE
        constexpr uint32_t UE = (1U << 6);  ///< bitfield UE
        constexpr uint32_t PE = (1U << 5);  ///< bitfield PE
        constexpr uint32_t DE = (1U << 4);  ///< bitfield DE
        constexpr uint32_t OCUS = (1U << 1);  ///< bitfield OCUS
        constexpr uint32_t AMOD = (1U << 0);  ///< bitfield AMOD
    }

}

// ============================================================================
// MFT1 Peripheral
// ============================================================================

namespace mft1 {
    /// Base addresses
    constexpr uint32_t MFT1_BASE = 0x40021000;

    /// MFT1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFT1 = reinterpret_cast<Registers*>(MFT1_BASE);

}

// ============================================================================
// MFT2 Peripheral
// ============================================================================

namespace mft2 {
    /// Base addresses
    constexpr uint32_t MFT2_BASE = 0x40022000;

    /// MFT2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFT2 = reinterpret_cast<Registers*>(MFT2_BASE);

}

// ============================================================================
// MFT Peripheral
// ============================================================================

namespace mft {
    /// Base addresses
    constexpr uint32_t MFT_PPG_BASE = 0x40024000;

    /// MFT Register structure
    struct Registers {
        volatile uint32_t TTCR0;  ///< Offset: 0x00 - register TTCR0
        volatile uint32_t TTCR1;  ///< Offset: 0x20 - register TTCR1
        volatile uint32_t TTCR2;  ///< Offset: 0x40 - register TTCR2
        volatile uint32_t COMP0;  ///< Offset: 0x08 - register COMP0
        volatile uint32_t COMP2;  ///< Offset: 0x0C - register COMP2
        volatile uint32_t COMP4;  ///< Offset: 0x10 - register COMP4
        volatile uint32_t COMP6;  ///< Offset: 0x14 - register COMP6
        volatile uint32_t COMP1;  ///< Offset: 0x28 - register COMP1
        volatile uint32_t COMP3;  ///< Offset: 0x2C - register COMP3
        volatile uint32_t COMP5;  ///< Offset: 0x30 - register COMP5
        volatile uint32_t COMP7;  ///< Offset: 0x34 - register COMP7
        volatile uint32_t COMP8;  ///< Offset: 0x48 - register COMP8
        volatile uint32_t COMP10;  ///< Offset: 0x4C - register COMP10
        volatile uint32_t COMP12;  ///< Offset: 0x50 - register COMP12
        volatile uint32_t COMP14;  ///< Offset: 0x54 - register COMP14
        volatile uint32_t TRG;  ///< Offset: 0x100 - register TRG
        volatile uint32_t TRG1;  ///< Offset: 0x140 - register TRG1
        volatile uint32_t REVC;  ///< Offset: 0x104 - register REVC
        volatile uint32_t REVC1;  ///< Offset: 0x144 - register REVC1
        volatile uint32_t PPGC0;  ///< Offset: 0x201 - register PPGC0
        volatile uint32_t PPGC1;  ///< Offset: 0x200 - register PPGC1
        volatile uint32_t PPGC2;  ///< Offset: 0x205 - register PPGC2
        volatile uint32_t PPGC3;  ///< Offset: 0x204 - register PPGC3
        volatile uint32_t PPGC4;  ///< Offset: 0x241 - register PPGC4
        volatile uint32_t PPGC5;  ///< Offset: 0x240 - register PPGC5
        volatile uint32_t PPGC6;  ///< Offset: 0x245 - register PPGC6
        volatile uint32_t PPGC7;  ///< Offset: 0x244 - register PPGC7
        volatile uint32_t PPGC8;  ///< Offset: 0x281 - register PPGC8
        volatile uint32_t PPGC9;  ///< Offset: 0x280 - register PPGC9
        volatile uint32_t PPGC10;  ///< Offset: 0x285 - register PPGC10
        volatile uint32_t PPGC11;  ///< Offset: 0x284 - register PPGC11
        volatile uint32_t PPGC12;  ///< Offset: 0x2C1 - register PPGC12
        volatile uint32_t PPGC13;  ///< Offset: 0x2C0 - register PPGC13
        volatile uint32_t PPGC14;  ///< Offset: 0x2C5 - register PPGC14
        volatile uint32_t PPGC15;  ///< Offset: 0x2C4 - register PPGC15
        volatile uint32_t PPGC16;  ///< Offset: 0x301 - register PPGC16
        volatile uint32_t PPGC17;  ///< Offset: 0x300 - register PPGC17
        volatile uint32_t PPGC18;  ///< Offset: 0x305 - register PPGC18
        volatile uint32_t PPGC19;  ///< Offset: 0x304 - register PPGC19
        volatile uint32_t PPGC20;  ///< Offset: 0x341 - register PPGC20
        volatile uint32_t PPGC21;  ///< Offset: 0x340 - register PPGC21
        volatile uint32_t PPGC22;  ///< Offset: 0x345 - register PPGC22
        volatile uint32_t PPGC23;  ///< Offset: 0x344 - register PPGC23
        volatile uint32_t PRLH0;  ///< Offset: 0x209 - register PRLH0
        volatile uint32_t PRLL0;  ///< Offset: 0x208 - register PRLL0
        volatile uint32_t PRLH1;  ///< Offset: 0x20D - register PRLH1
        volatile uint32_t PRLL1;  ///< Offset: 0x20C - register PRLL1
        volatile uint32_t PRLH2;  ///< Offset: 0x211 - register PRLH2
        volatile uint32_t PRLL2;  ///< Offset: 0x210 - register PRLL2
        volatile uint32_t PRLH3;  ///< Offset: 0x215 - register PRLH3
        volatile uint32_t PRLL3;  ///< Offset: 0x214 - register PRLL3
        volatile uint32_t PRLH4;  ///< Offset: 0x249 - register PRLH4
        volatile uint32_t PRLL4;  ///< Offset: 0x248 - register PRLL4
        volatile uint32_t PRLH5;  ///< Offset: 0x24D - register PRLH5
        volatile uint32_t PRLL5;  ///< Offset: 0x24C - register PRLL5
        volatile uint32_t PRLH6;  ///< Offset: 0x251 - register PRLH6
        volatile uint32_t PRLL6;  ///< Offset: 0x250 - register PRLL6
        volatile uint32_t PRLH7;  ///< Offset: 0x255 - register PRLH7
        volatile uint32_t PRLL7;  ///< Offset: 0x254 - register PRLL7
        volatile uint32_t PRLH8;  ///< Offset: 0x289 - register PRLH8
        volatile uint32_t PRLL8;  ///< Offset: 0x288 - register PRLL8
        volatile uint32_t PRLH9;  ///< Offset: 0x28D - register PRLH9
        volatile uint32_t PRLL9;  ///< Offset: 0x28C - register PRLL9
        volatile uint32_t PRLH10;  ///< Offset: 0x291 - register PRLH10
        volatile uint32_t PRLL10;  ///< Offset: 0x290 - register PRLL10
        volatile uint32_t PRLH11;  ///< Offset: 0x295 - register PRLH11
        volatile uint32_t PRLL11;  ///< Offset: 0x294 - register PRLL11
        volatile uint32_t PRLH12;  ///< Offset: 0x2C9 - register PRLH12
        volatile uint32_t PRLL12;  ///< Offset: 0x2C8 - register PRLL12
        volatile uint32_t PRLH13;  ///< Offset: 0x2CD - register PRLH13
        volatile uint32_t PRLL13;  ///< Offset: 0x2CC - register PRLL13
        volatile uint32_t PRLH14;  ///< Offset: 0x2D1 - register PRLH14
        volatile uint32_t PRLL14;  ///< Offset: 0x2D0 - register PRLL14
        volatile uint32_t PRLH15;  ///< Offset: 0x2D5 - register PRLH15
        volatile uint32_t PRLL15;  ///< Offset: 0x2D4 - register PRLL15
        volatile uint32_t PRLH16;  ///< Offset: 0x309 - register PRLH16
        volatile uint32_t PRLL16;  ///< Offset: 0x308 - register PRLL16
        volatile uint32_t PRLH17;  ///< Offset: 0x30D - register PRLH17
        volatile uint32_t PRLL17;  ///< Offset: 0x30C - register PRLL17
        volatile uint32_t PRLH18;  ///< Offset: 0x311 - register PRLH18
        volatile uint32_t PRLL18;  ///< Offset: 0x310 - register PRLL18
        volatile uint32_t PRLH19;  ///< Offset: 0x315 - register PRLH19
        volatile uint32_t PRLL19;  ///< Offset: 0x314 - register PRLL19
        volatile uint32_t PRLH20;  ///< Offset: 0x349 - register PRLH20
        volatile uint32_t PRLL20;  ///< Offset: 0x348 - register PRLL20
        volatile uint32_t PRLH21;  ///< Offset: 0x34D - register PRLH21
        volatile uint32_t PRLL21;  ///< Offset: 0x34C - register PRLL21
        volatile uint32_t PRLH22;  ///< Offset: 0x351 - register PRLH22
        volatile uint32_t PRLL22;  ///< Offset: 0x350 - register PRLL22
        volatile uint32_t PRLH23;  ///< Offset: 0x355 - register PRLH23
        volatile uint32_t PRLL23;  ///< Offset: 0x354 - register PRLL23
        volatile uint32_t GATEC0;  ///< Offset: 0x218 - register GATEC0
        volatile uint32_t GATEC4;  ///< Offset: 0x258 - register GATEC4
        volatile uint32_t GATEC8;  ///< Offset: 0x298 - register GATEC8
        volatile uint32_t GATEC12;  ///< Offset: 0x2D8 - register GATEC12
        volatile uint32_t GATEC16;  ///< Offset: 0x318 - register GATEC16
        volatile uint32_t GATEC20;  ///< Offset: 0x358 - register GATEC20
        volatile uint32_t IGBTC;  ///< Offset: 0x380 - register IGBTC
    };

    /// Peripheral instances
    inline Registers* MFT_PPG = reinterpret_cast<Registers*>(MFT_PPG_BASE);

    // Bit definitions
    /// TTCR0 Register bits
    namespace ttcr0_bits {
        constexpr uint32_t TRG6O = (1U << 15);  ///< bitfield TRG6O
        constexpr uint32_t TRG4O = (1U << 14);  ///< bitfield TRG4O
        constexpr uint32_t TRG2O = (1U << 13);  ///< bitfield TRG2O
        constexpr uint32_t TRG0O = (1U << 12);  ///< bitfield TRG0O
        constexpr uint32_t CS0 = (2 << 10);  ///< bitfield CS0
        constexpr uint32_t MONI0 = (1U << 9);  ///< bitfield MONI0
        constexpr uint32_t STR0 = (1U << 8);  ///< bitfield STR0
    }

    /// TTCR1 Register bits
    namespace ttcr1_bits {
        constexpr uint32_t TRG7O = (1U << 15);  ///< bitfield TRG7O
        constexpr uint32_t TRG5O = (1U << 14);  ///< bitfield TRG5O
        constexpr uint32_t TRG3O = (1U << 13);  ///< bitfield TRG3O
        constexpr uint32_t TRG1O = (1U << 12);  ///< bitfield TRG1O
        constexpr uint32_t CS1 = (2 << 10);  ///< bitfield CS1
        constexpr uint32_t MONI1 = (1U << 9);  ///< bitfield MONI1
        constexpr uint32_t STR1 = (1U << 8);  ///< bitfield STR1
    }

    /// TTCR2 Register bits
    namespace ttcr2_bits {
        constexpr uint32_t TRG22O = (1U << 15);  ///< bitfield TRG22O
        constexpr uint32_t TRG20O = (1U << 14);  ///< bitfield TRG20O
        constexpr uint32_t TRG18O = (1U << 13);  ///< bitfield TRG18O
        constexpr uint32_t TRG16O = (1U << 12);  ///< bitfield TRG16O
        constexpr uint32_t CS2 = (2 << 10);  ///< bitfield CS2
        constexpr uint32_t MONI2 = (1U << 9);  ///< bitfield MONI2
        constexpr uint32_t STR2 = (1U << 8);  ///< bitfield STR2
    }

    /// TRG Register bits
    namespace trg_bits {
        constexpr uint32_t PEN15 = (1U << 15);  ///< bitfield PEN15
        constexpr uint32_t PEN14 = (1U << 14);  ///< bitfield PEN14
        constexpr uint32_t PEN13 = (1U << 13);  ///< bitfield PEN13
        constexpr uint32_t PEN12 = (1U << 12);  ///< bitfield PEN12
        constexpr uint32_t PEN11 = (1U << 11);  ///< bitfield PEN11
        constexpr uint32_t PEN10 = (1U << 10);  ///< bitfield PEN10
        constexpr uint32_t PEN09 = (1U << 9);  ///< bitfield PEN09
        constexpr uint32_t PEN08 = (1U << 8);  ///< bitfield PEN08
        constexpr uint32_t PEN07 = (1U << 7);  ///< bitfield PEN07
        constexpr uint32_t PEN06 = (1U << 6);  ///< bitfield PEN06
        constexpr uint32_t PEN05 = (1U << 5);  ///< bitfield PEN05
        constexpr uint32_t PEN04 = (1U << 4);  ///< bitfield PEN04
        constexpr uint32_t PEN03 = (1U << 3);  ///< bitfield PEN03
        constexpr uint32_t PEN02 = (1U << 2);  ///< bitfield PEN02
        constexpr uint32_t PEN01 = (1U << 1);  ///< bitfield PEN01
        constexpr uint32_t PEN00 = (1U << 0);  ///< bitfield PEN00
    }

    /// TRG1 Register bits
    namespace trg1_bits {
        constexpr uint32_t PEN23 = (1U << 7);  ///< bitfield PEN23
        constexpr uint32_t PEN22 = (1U << 6);  ///< bitfield PEN22
        constexpr uint32_t PEN21 = (1U << 5);  ///< bitfield PEN21
        constexpr uint32_t PEN20 = (1U << 4);  ///< bitfield PEN20
        constexpr uint32_t PEN19 = (1U << 3);  ///< bitfield PEN19
        constexpr uint32_t PEN18 = (1U << 2);  ///< bitfield PEN18
        constexpr uint32_t PEN17 = (1U << 1);  ///< bitfield PEN17
        constexpr uint32_t PEN16 = (1U << 0);  ///< bitfield PEN16
    }

    /// REVC Register bits
    namespace revc_bits {
        constexpr uint32_t REV15 = (1U << 15);  ///< bitfield REV15
        constexpr uint32_t REV14 = (1U << 14);  ///< bitfield REV14
        constexpr uint32_t REV13 = (1U << 13);  ///< bitfield REV13
        constexpr uint32_t REV12 = (1U << 12);  ///< bitfield REV12
        constexpr uint32_t REV11 = (1U << 11);  ///< bitfield REV11
        constexpr uint32_t REV10 = (1U << 10);  ///< bitfield REV10
        constexpr uint32_t REV09 = (1U << 9);  ///< bitfield REV09
        constexpr uint32_t REV08 = (1U << 8);  ///< bitfield REV08
        constexpr uint32_t REV07 = (1U << 7);  ///< bitfield REV07
        constexpr uint32_t REV06 = (1U << 6);  ///< bitfield REV06
        constexpr uint32_t REV05 = (1U << 5);  ///< bitfield REV05
        constexpr uint32_t REV04 = (1U << 4);  ///< bitfield REV04
        constexpr uint32_t REV03 = (1U << 3);  ///< bitfield REV03
        constexpr uint32_t REV02 = (1U << 2);  ///< bitfield REV02
        constexpr uint32_t REV01 = (1U << 1);  ///< bitfield REV01
        constexpr uint32_t REV00 = (1U << 0);  ///< bitfield REV00
    }

    /// REVC1 Register bits
    namespace revc1_bits {
        constexpr uint32_t REV23 = (1U << 7);  ///< bitfield REV23
        constexpr uint32_t REV22 = (1U << 6);  ///< bitfield REV22
        constexpr uint32_t REV21 = (1U << 5);  ///< bitfield REV21
        constexpr uint32_t REV20 = (1U << 4);  ///< bitfield REV20
        constexpr uint32_t REV19 = (1U << 3);  ///< bitfield REV19
        constexpr uint32_t REV18 = (1U << 2);  ///< bitfield REV18
        constexpr uint32_t REV17 = (1U << 1);  ///< bitfield REV17
        constexpr uint32_t REV16 = (1U << 0);  ///< bitfield REV16
    }

    /// PPGC0 Register bits
    namespace ppgc0_bits {
        constexpr uint32_t PIE = (1U << 7);  ///< bitfield PIE
        constexpr uint32_t PUF = (1U << 6);  ///< bitfield PUF
        constexpr uint32_t INTM = (1U << 5);  ///< bitfield INTM
        constexpr uint32_t PCS = (2 << 3);  ///< bitfield PCS
        constexpr uint32_t MD = (2 << 1);  ///< bitfield MD
        constexpr uint32_t TTRG = (1U << 0);  ///< bitfield TTRG
    }

    /// PRLH0 Register bits
    namespace prlh0_bits {
        constexpr uint32_t PRLH = (8 << 0);  ///< bitfield PRLH
    }

    /// PRLL0 Register bits
    namespace prll0_bits {
        constexpr uint32_t PRLL = (8 << 0);  ///< bitfield PRLL
    }

    /// GATEC0 Register bits
    namespace gatec0_bits {
        constexpr uint32_t STRG2 = (1U << 5);  ///< bitfield STRG2
        constexpr uint32_t EDGE2 = (1U << 4);  ///< bitfield EDGE2
        constexpr uint32_t STRG0 = (1U << 1);  ///< bitfield STRG0
        constexpr uint32_t EDGE0 = (1U << 0);  ///< bitfield EDGE0
    }

    /// GATEC4 Register bits
    namespace gatec4_bits {
        constexpr uint32_t STRG6 = (1U << 5);  ///< bitfield STRG6
        constexpr uint32_t EDGE6 = (1U << 4);  ///< bitfield EDGE6
        constexpr uint32_t STRG4 = (1U << 1);  ///< bitfield STRG4
        constexpr uint32_t EDGE4 = (1U << 0);  ///< bitfield EDGE4
    }

    /// GATEC8 Register bits
    namespace gatec8_bits {
        constexpr uint32_t STRG10 = (1U << 5);  ///< bitfield STRG10
        constexpr uint32_t EDGE10 = (1U << 4);  ///< bitfield EDGE10
        constexpr uint32_t STRG8 = (1U << 1);  ///< bitfield STRG8
        constexpr uint32_t EDGE8 = (1U << 0);  ///< bitfield EDGE8
    }

    /// GATEC12 Register bits
    namespace gatec12_bits {
        constexpr uint32_t STRG14 = (1U << 5);  ///< bitfield STRG14
        constexpr uint32_t EDGE14 = (1U << 4);  ///< bitfield EDGE14
        constexpr uint32_t STRG12 = (1U << 1);  ///< bitfield STRG12
        constexpr uint32_t EDGE12 = (1U << 0);  ///< bitfield EDGE12
    }

    /// GATEC16 Register bits
    namespace gatec16_bits {
        constexpr uint32_t STRG18 = (1U << 5);  ///< bitfield STRG18
        constexpr uint32_t EDGE18 = (1U << 4);  ///< bitfield EDGE18
        constexpr uint32_t STRG16 = (1U << 1);  ///< bitfield STRG16
        constexpr uint32_t EDGE16 = (1U << 0);  ///< bitfield EDGE16
    }

    /// GATEC20 Register bits
    namespace gatec20_bits {
        constexpr uint32_t STRG22 = (1U << 5);  ///< bitfield STRG22
        constexpr uint32_t EDGE22 = (1U << 4);  ///< bitfield EDGE22
        constexpr uint32_t STRG20 = (1U << 1);  ///< bitfield STRG20
        constexpr uint32_t EDGE20 = (1U << 0);  ///< bitfield EDGE20
    }

    /// IGBTC Register bits
    namespace igbtc_bits {
        constexpr uint32_t IGATIH = (1U << 7);  ///< bitfield IGATIH
        constexpr uint32_t IGNFW = (3 << 4);  ///< bitfield IGNFW
        constexpr uint32_t IGOSEL = (2 << 2);  ///< bitfield IGOSEL
        constexpr uint32_t IGTRGLV = (1U << 1);  ///< bitfield IGTRGLV
        constexpr uint32_t IGBTMD = (1U << 0);  ///< bitfield IGBTMD
    }

}

// ============================================================================
// BTIOSEL03 Peripheral
// ============================================================================

namespace btiosel03 {
    /// Base addresses
    constexpr uint32_t BTIOSEL03_BASE = 0x40025100;

    /// BTIOSEL03 Register structure
    struct Registers {
        volatile uint32_t BTSEL0123;  ///< Offset: 0x00 - register BTSEL0123
    };

    /// Peripheral instances
    inline Registers* BTIOSEL03 = reinterpret_cast<Registers*>(BTIOSEL03_BASE);

    // Bit definitions
    /// BTSEL0123 Register bits
    namespace btsel0123_bits {
        constexpr uint32_t SEL23_ = (4 << 12);  ///< bitfield SEL23_
        constexpr uint32_t SEL01_ = (4 << 8);  ///< bitfield SEL01_
    }

}

// ============================================================================
// BTIOSEL47 Peripheral
// ============================================================================

namespace btiosel47 {
    /// Base addresses
    constexpr uint32_t BTIOSEL47_BASE = 0x40025300;

    /// BTIOSEL47 Register structure
    struct Registers {
        volatile uint32_t BTSEL4567;  ///< Offset: 0x00 - register BTSEL4567
    };

    /// Peripheral instances
    inline Registers* BTIOSEL47 = reinterpret_cast<Registers*>(BTIOSEL47_BASE);

    // Bit definitions
    /// BTSEL4567 Register bits
    namespace btsel4567_bits {
        constexpr uint32_t SEL67_ = (4 << 12);  ///< bitfield SEL67_
        constexpr uint32_t SEL45_ = (4 << 8);  ///< bitfield SEL45_
    }

}

// ============================================================================
// BTIOSEL8B Peripheral
// ============================================================================

namespace btiosel8b {
    /// Base addresses
    constexpr uint32_t BTIOSEL8B_BASE = 0x40025500;

    /// BTIOSEL8B Register structure
    struct Registers {
        volatile uint32_t BTSEL89AB;  ///< Offset: 0x00 - register BTSEL89AB
    };

    /// Peripheral instances
    inline Registers* BTIOSEL8B = reinterpret_cast<Registers*>(BTIOSEL8B_BASE);

    // Bit definitions
    /// BTSEL89AB Register bits
    namespace btsel89ab_bits {
        constexpr uint32_t SELAB_ = (4 << 12);  ///< bitfield SELAB_
        constexpr uint32_t SEL89_ = (4 << 8);  ///< bitfield SEL89_
    }

}

// ============================================================================
// BTIOSELCF Peripheral
// ============================================================================

namespace btioselcf {
    /// Base addresses
    constexpr uint32_t BTIOSELCF_BASE = 0x40025700;

    /// BTIOSELCF Register structure
    struct Registers {
        volatile uint32_t BTSELCDEF;  ///< Offset: 0x00 - register BTSELCDEF
    };

    /// Peripheral instances
    inline Registers* BTIOSELCF = reinterpret_cast<Registers*>(BTIOSELCF_BASE);

    // Bit definitions
    /// BTSELCDEF Register bits
    namespace btselcdef_bits {
        constexpr uint32_t SELEF_ = (4 << 12);  ///< bitfield SELEF_
        constexpr uint32_t SELCD_ = (4 << 8);  ///< bitfield SELCD_
    }

}

// ============================================================================
// SBSSR Peripheral
// ============================================================================

namespace sbssr {
    /// Base addresses
    constexpr uint32_t SBSSR_BASE = 0x40025F00;

    /// SBSSR Register structure
    struct Registers {
        volatile uint32_t BTSSSR;  ///< Offset: 0xFC - register BTSSSR
    };

    /// Peripheral instances
    inline Registers* SBSSR = reinterpret_cast<Registers*>(SBSSR_BASE);

    // Bit definitions
    /// BTSSSR Register bits
    namespace btsssr_bits {
        constexpr uint32_t SSSR15 = (1U << 15);  ///< bitfield SSSR15
        constexpr uint32_t SSSR14 = (1U << 14);  ///< bitfield SSSR14
        constexpr uint32_t SSSR13 = (1U << 13);  ///< bitfield SSSR13
        constexpr uint32_t SSSR12 = (1U << 12);  ///< bitfield SSSR12
        constexpr uint32_t SSSR11 = (1U << 11);  ///< bitfield SSSR11
        constexpr uint32_t SSSR10 = (1U << 10);  ///< bitfield SSSR10
        constexpr uint32_t SSSR9 = (1U << 9);  ///< bitfield SSSR9
        constexpr uint32_t SSSR8 = (1U << 8);  ///< bitfield SSSR8
        constexpr uint32_t SSSR7 = (1U << 7);  ///< bitfield SSSR7
        constexpr uint32_t SSSR6 = (1U << 6);  ///< bitfield SSSR6
        constexpr uint32_t SSSR5 = (1U << 5);  ///< bitfield SSSR5
        constexpr uint32_t SSSR4 = (1U << 4);  ///< bitfield SSSR4
        constexpr uint32_t SSSR3 = (1U << 3);  ///< bitfield SSSR3
        constexpr uint32_t SSSR2 = (1U << 2);  ///< bitfield SSSR2
        constexpr uint32_t SSSR1 = (1U << 1);  ///< bitfield SSSR1
        constexpr uint32_t SSSR0 = (1U << 0);  ///< bitfield SSSR0
    }

}

// ============================================================================
// BT0 Peripheral
// ============================================================================

namespace bt0 {
    /// Base addresses
    constexpr uint32_t BT0_BASE = 0x40025000;

    /// BT0 Register structure
    struct Registers {
        volatile uint32_t PWM_TMCR;  ///< Offset: 0x0C - register PWM_TMCR
        volatile uint32_t PWM_TMCR2;  ///< Offset: 0x11 - register PWM_TMCR2
        volatile uint32_t PWM_STC;  ///< Offset: 0x10 - register PWM_STC
        volatile uint32_t PWM_PCSR;  ///< Offset: 0x00 - register PWM_PCSR
        volatile uint32_t PWM_PDUT;  ///< Offset: 0x04 - register PWM_PDUT
        volatile uint32_t PWM_TMR;  ///< Offset: 0x08 - register PWM_TMR
        volatile uint32_t PPG_TMCR;  ///< Offset: 0x0C - register PPG_TMCR
        volatile uint32_t PPG_TMCR2;  ///< Offset: 0x11 - register PPG_TMCR2
        volatile uint32_t PPG_STC;  ///< Offset: 0x10 - register PPG_STC
        volatile uint32_t PPG_PRLL;  ///< Offset: 0x00 - register PPG_PRLL
        volatile uint32_t PPG_PRLH;  ///< Offset: 0x04 - register PPG_PRLH
        volatile uint32_t PPG_TMR;  ///< Offset: 0x08 - register PPG_TMR
        volatile uint32_t RT_TMCR;  ///< Offset: 0x0C - register RT_TMCR
        volatile uint32_t RT_TMCR2;  ///< Offset: 0x11 - register RT_TMCR2
        volatile uint32_t RT_STC;  ///< Offset: 0x10 - register RT_STC
        volatile uint32_t RT_PCSR;  ///< Offset: 0x00 - register RT_PCSR
        volatile uint32_t RT_TMR;  ///< Offset: 0x08 - register RT_TMR
        volatile uint32_t PWC_TMCR;  ///< Offset: 0x0C - register PWC_TMCR
        volatile uint32_t PWC_TMCR2;  ///< Offset: 0x11 - register PWC_TMCR2
        volatile uint32_t PWC_STC;  ///< Offset: 0x10 - register PWC_STC
        volatile uint32_t PWC_DTBF;  ///< Offset: 0x04 - register PWC_DTBF
    };

    /// Peripheral instances
    inline Registers* BT0 = reinterpret_cast<Registers*>(BT0_BASE);

    // Bit definitions
    /// PWM_TMCR Register bits
    namespace pwm_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< bitfield CKS2_0
        constexpr uint32_t RTGEN = (1U << 11);  ///< bitfield RTGEN
        constexpr uint32_t PMSK = (1U << 10);  ///< bitfield PMSK
        constexpr uint32_t EGS = (2 << 8);  ///< bitfield EGS
        constexpr uint32_t FMD = (3 << 4);  ///< bitfield FMD
        constexpr uint32_t OSEL = (1U << 3);  ///< bitfield OSEL
        constexpr uint32_t MDSE = (1U << 2);  ///< bitfield MDSE
        constexpr uint32_t CTEN = (1U << 1);  ///< bitfield CTEN
        constexpr uint32_t STRG = (1U << 0);  ///< bitfield STRG
    }

    /// PWM_TMCR2 Register bits
    namespace pwm_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< bitfield CKS3
    }

    /// PWM_STC Register bits
    namespace pwm_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< bitfield TGIE
        constexpr uint32_t DTIE = (1U << 5);  ///< bitfield DTIE
        constexpr uint32_t UDIE = (1U << 4);  ///< bitfield UDIE
        constexpr uint32_t TGIR = (1U << 2);  ///< bitfield TGIR
        constexpr uint32_t DTIR = (1U << 1);  ///< bitfield DTIR
        constexpr uint32_t UDIR = (1U << 0);  ///< bitfield UDIR
    }

    /// PPG_TMCR Register bits
    namespace ppg_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< bitfield CKS2_0
        constexpr uint32_t RTGEN = (1U << 11);  ///< bitfield RTGEN
        constexpr uint32_t PMSK = (1U << 10);  ///< bitfield PMSK
        constexpr uint32_t EGS = (2 << 8);  ///< bitfield EGS
        constexpr uint32_t FMD = (3 << 4);  ///< bitfield FMD
        constexpr uint32_t OSEL = (1U << 3);  ///< bitfield OSEL
        constexpr uint32_t MDSE = (1U << 2);  ///< bitfield MDSE
        constexpr uint32_t CTEN = (1U << 1);  ///< bitfield CTEN
        constexpr uint32_t STRG = (1U << 0);  ///< bitfield STRG
    }

    /// PPG_TMCR2 Register bits
    namespace ppg_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 1);  ///< bitfield CKS3
    }

    /// PPG_STC Register bits
    namespace ppg_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< bitfield TGIE
        constexpr uint32_t UDIE = (1U << 4);  ///< bitfield UDIE
        constexpr uint32_t TGIR = (1U << 2);  ///< bitfield TGIR
        constexpr uint32_t UDIR = (1U << 0);  ///< bitfield UDIR
    }

    /// RT_TMCR Register bits
    namespace rt_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< bitfield CKS2_0
        constexpr uint32_t EGS = (2 << 8);  ///< bitfield EGS
        constexpr uint32_t T32 = (1U << 7);  ///< bitfield T32
        constexpr uint32_t FMD = (3 << 4);  ///< bitfield FMD
        constexpr uint32_t OSEL = (1U << 3);  ///< bitfield OSEL
        constexpr uint32_t MDSE = (1U << 2);  ///< bitfield MDSE
        constexpr uint32_t CTEN = (1U << 1);  ///< bitfield CTEN
        constexpr uint32_t STRG = (1U << 0);  ///< bitfield STRG
    }

    /// RT_TMCR2 Register bits
    namespace rt_tmcr2_bits {
        constexpr uint32_t GATE = (1U << 7);  ///< bitfield GATE
        constexpr uint32_t CKS3 = (1U << 0);  ///< bitfield CKS3
    }

    /// RT_STC Register bits
    namespace rt_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< bitfield TGIE
        constexpr uint32_t UDIE = (1U << 4);  ///< bitfield UDIE
        constexpr uint32_t TGIR = (1U << 2);  ///< bitfield TGIR
        constexpr uint32_t UDIR = (1U << 0);  ///< bitfield UDIR
    }

    /// PWC_TMCR Register bits
    namespace pwc_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< bitfield CKS2_0
        constexpr uint32_t EGS = (3 << 8);  ///< bitfield EGS
        constexpr uint32_t T32 = (1U << 7);  ///< bitfield T32
        constexpr uint32_t FMD = (3 << 4);  ///< bitfield FMD
        constexpr uint32_t MDSE = (1U << 2);  ///< bitfield MDSE
        constexpr uint32_t CTEN = (1U << 1);  ///< bitfield CTEN
    }

    /// PWC_TMCR2 Register bits
    namespace pwc_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< bitfield CKS3
    }

    /// PWC_STC Register bits
    namespace pwc_stc_bits {
        constexpr uint32_t ERR = (1U << 7);  ///< bitfield ERR
        constexpr uint32_t EDIE = (1U << 6);  ///< bitfield EDIE
        constexpr uint32_t OVIE = (1U << 4);  ///< bitfield OVIE
        constexpr uint32_t EDIR = (1U << 2);  ///< bitfield EDIR
        constexpr uint32_t OVIR = (1U << 0);  ///< bitfield OVIR
    }

}

// ============================================================================
// BT1 Peripheral
// ============================================================================

namespace bt1 {
    /// Base addresses
    constexpr uint32_t BT1_BASE = 0x40025040;

    /// BT1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT1 = reinterpret_cast<Registers*>(BT1_BASE);

}

// ============================================================================
// BT2 Peripheral
// ============================================================================

namespace bt2 {
    /// Base addresses
    constexpr uint32_t BT2_BASE = 0x40025080;

    /// BT2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT2 = reinterpret_cast<Registers*>(BT2_BASE);

}

// ============================================================================
// BT3 Peripheral
// ============================================================================

namespace bt3 {
    /// Base addresses
    constexpr uint32_t BT3_BASE = 0x400250C0;

    /// BT3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT3 = reinterpret_cast<Registers*>(BT3_BASE);

}

// ============================================================================
// BT4 Peripheral
// ============================================================================

namespace bt4 {
    /// Base addresses
    constexpr uint32_t BT4_BASE = 0x40025200;

    /// BT4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT4 = reinterpret_cast<Registers*>(BT4_BASE);

}

// ============================================================================
// BT5 Peripheral
// ============================================================================

namespace bt5 {
    /// Base addresses
    constexpr uint32_t BT5_BASE = 0x40025240;

    /// BT5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT5 = reinterpret_cast<Registers*>(BT5_BASE);

}

// ============================================================================
// BT6 Peripheral
// ============================================================================

namespace bt6 {
    /// Base addresses
    constexpr uint32_t BT6_BASE = 0x40025280;

    /// BT6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT6 = reinterpret_cast<Registers*>(BT6_BASE);

}

// ============================================================================
// BT7 Peripheral
// ============================================================================

namespace bt7 {
    /// Base addresses
    constexpr uint32_t BT7_BASE = 0x400252C0;

    /// BT7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT7 = reinterpret_cast<Registers*>(BT7_BASE);

}

// ============================================================================
// BT8 Peripheral
// ============================================================================

namespace bt8 {
    /// Base addresses
    constexpr uint32_t BT8_BASE = 0x40025400;

    /// BT8 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT8 = reinterpret_cast<Registers*>(BT8_BASE);

}

// ============================================================================
// BT9 Peripheral
// ============================================================================

namespace bt9 {
    /// Base addresses
    constexpr uint32_t BT9_BASE = 0x40025440;

    /// BT9 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT9 = reinterpret_cast<Registers*>(BT9_BASE);

}

// ============================================================================
// BT10 Peripheral
// ============================================================================

namespace bt10 {
    /// Base addresses
    constexpr uint32_t BT10_BASE = 0x40025480;

    /// BT10 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT10 = reinterpret_cast<Registers*>(BT10_BASE);

}

// ============================================================================
// BT11 Peripheral
// ============================================================================

namespace bt11 {
    /// Base addresses
    constexpr uint32_t BT11_BASE = 0x400254C0;

    /// BT11 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT11 = reinterpret_cast<Registers*>(BT11_BASE);

}

// ============================================================================
// BT12 Peripheral
// ============================================================================

namespace bt12 {
    /// Base addresses
    constexpr uint32_t BT12_BASE = 0x40025600;

    /// BT12 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT12 = reinterpret_cast<Registers*>(BT12_BASE);

}

// ============================================================================
// BT13 Peripheral
// ============================================================================

namespace bt13 {
    /// Base addresses
    constexpr uint32_t BT13_BASE = 0x40025640;

    /// BT13 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT13 = reinterpret_cast<Registers*>(BT13_BASE);

}

// ============================================================================
// BT14 Peripheral
// ============================================================================

namespace bt14 {
    /// Base addresses
    constexpr uint32_t BT14_BASE = 0x40025680;

    /// BT14 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT14 = reinterpret_cast<Registers*>(BT14_BASE);

}

// ============================================================================
// BT15 Peripheral
// ============================================================================

namespace bt15 {
    /// Base addresses
    constexpr uint32_t BT15_BASE = 0x400256C0;

    /// BT15 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT15 = reinterpret_cast<Registers*>(BT15_BASE);

}

// ============================================================================
// QPRC0 Peripheral
// ============================================================================

namespace qprc0 {
    /// Base addresses
    constexpr uint32_t QPRC0_BASE = 0x40026000;
    constexpr uint32_t QPRC0_NF_BASE = 0x40026100;

    /// QPRC0 Register structure
    struct Registers {
        volatile uint32_t QPCR;  ///< Offset: 0x00 - register QPCR
        volatile uint32_t QRCR;  ///< Offset: 0x04 - register QRCR
        volatile uint32_t QPCCR;  ///< Offset: 0x08 - register QPCCR
        volatile uint32_t QPRCR;  ///< Offset: 0x0C - register QPRCR
        volatile uint32_t QCR;  ///< Offset: 0x18 - register QCR
        volatile uint32_t QECR;  ///< Offset: 0x1C - register QECR
        volatile uint32_t QICRL;  ///< Offset: 0x14 - register QICRL
        volatile uint32_t QICRH;  ///< Offset: 0x15 - register QICRH
        volatile uint32_t QMPR;  ///< Offset: 0x10 - register QMPR
        volatile uint32_t QRCRR;  ///< Offset: 0x3C - register QRCRR
        volatile uint32_t QPCRR;  ///< Offset: 0x3E - register QPCRR
    };

    /// Peripheral instances
    inline Registers* QPRC0 = reinterpret_cast<Registers*>(QPRC0_BASE);
    inline Registers* QPRC0_NF = reinterpret_cast<Registers*>(QPRC0_NF_BASE);

    // Bit definitions
    /// QCR Register bits
    namespace qcr_bits {
        constexpr uint32_t CGE = (2 << 14);  ///< bitfield CGE
        constexpr uint32_t BES = (2 << 12);  ///< bitfield BES
        constexpr uint32_t AES = (2 << 10);  ///< bitfield AES
        constexpr uint32_t PCRM = (2 << 8);  ///< bitfield PCRM
        constexpr uint32_t SWAP = (1U << 7);  ///< bitfield SWAP
        constexpr uint32_t RSEL = (1U << 6);  ///< bitfield RSEL
        constexpr uint32_t CGSC = (1U << 5);  ///< bitfield CGSC
        constexpr uint32_t PSTP = (1U << 4);  ///< bitfield PSTP
        constexpr uint32_t RCM = (2 << 2);  ///< bitfield RCM
        constexpr uint32_t PCM = (2 << 0);  ///< bitfield PCM
    }

    /// QECR Register bits
    namespace qecr_bits {
        constexpr uint32_t ORNGIE = (1U << 2);  ///< bitfield ORNGIE
        constexpr uint32_t ORNGF = (1U << 1);  ///< bitfield ORNGF
        constexpr uint32_t ORNGMD = (1U << 0);  ///< bitfield ORNGMD
    }

    /// QICRL Register bits
    namespace qicrl_bits {
        constexpr uint32_t ZIIF = (1U << 7);  ///< bitfield ZIIF
        constexpr uint32_t OFDF = (1U << 6);  ///< bitfield OFDF
        constexpr uint32_t UFDF = (1U << 5);  ///< bitfield UFDF
        constexpr uint32_t OUZIE = (1U << 4);  ///< bitfield OUZIE
        constexpr uint32_t QPRCMF = (1U << 3);  ///< bitfield QPRCMF
        constexpr uint32_t QPRCMIE = (1U << 2);  ///< bitfield QPRCMIE
        constexpr uint32_t QPCMF = (1U << 1);  ///< bitfield QPCMF
        constexpr uint32_t QPCMIE = (1U << 0);  ///< bitfield QPCMIE
    }

    /// QICRH Register bits
    namespace qicrh_bits {
        constexpr uint32_t QPCNRCMF = (1U << 5);  ///< bitfield QPCNRCMF
        constexpr uint32_t QPCNRCMIE = (1U << 4);  ///< bitfield QPCNRCMIE
        constexpr uint32_t DIROU = (1U << 3);  ///< bitfield DIROU
        constexpr uint32_t DIRPC = (1U << 2);  ///< bitfield DIRPC
        constexpr uint32_t CDCF = (1U << 1);  ///< bitfield CDCF
        constexpr uint32_t CDCIE = (1U << 0);  ///< bitfield CDCIE
    }

}

// ============================================================================
// QPRC1 Peripheral
// ============================================================================

namespace qprc1 {
    /// Base addresses
    constexpr uint32_t QPRC1_BASE = 0x40026040;
    constexpr uint32_t QPRC1_NF_BASE = 0x40026110;

    /// QPRC1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* QPRC1 = reinterpret_cast<Registers*>(QPRC1_BASE);
    inline Registers* QPRC1_NF = reinterpret_cast<Registers*>(QPRC1_NF_BASE);

}

// ============================================================================
// QPRC2 Peripheral
// ============================================================================

namespace qprc2 {
    /// Base addresses
    constexpr uint32_t QPRC2_BASE = 0x40026080;
    constexpr uint32_t QPRC2_NF_BASE = 0x40026120;

    /// QPRC2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* QPRC2 = reinterpret_cast<Registers*>(QPRC2_BASE);
    inline Registers* QPRC2_NF = reinterpret_cast<Registers*>(QPRC2_NF_BASE);

}

// ============================================================================
// QPRC3 Peripheral
// ============================================================================

namespace qprc3 {
    /// Base addresses
    constexpr uint32_t QPRC3_BASE = 0x400260C0;
    constexpr uint32_t QPRC3_NF_BASE = 0x40026130;

    /// QPRC3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* QPRC3 = reinterpret_cast<Registers*>(QPRC3_BASE);
    inline Registers* QPRC3_NF = reinterpret_cast<Registers*>(QPRC3_NF_BASE);

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC0_BASE = 0x40027000;
    constexpr uint32_t ADC1_BASE = 0x40027100;
    constexpr uint32_t ADC2_BASE = 0x40027200;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ADCR;  ///< Offset: 0x01 - register ADCR
        volatile uint32_t ADSR;  ///< Offset: 0x00 - register ADSR
        volatile uint32_t SCCR;  ///< Offset: 0x09 - register SCCR
        volatile uint32_t SFNS;  ///< Offset: 0x08 - register SFNS
        volatile uint32_t SCFD;  ///< Offset: 0x0C - register SCFD
        volatile uint32_t SCIS3;  ///< Offset: 0x11 - register SCIS3
        volatile uint32_t SCIS2;  ///< Offset: 0x10 - register SCIS2
        volatile uint32_t SCIS1;  ///< Offset: 0x15 - register SCIS1
        volatile uint32_t SCIS0;  ///< Offset: 0x14 - register SCIS0
        volatile uint32_t PFNS;  ///< Offset: 0x18 - register PFNS
        volatile uint32_t PCCR;  ///< Offset: 0x19 - register PCCR
        volatile uint32_t PCFD;  ///< Offset: 0x1C - register PCFD
        volatile uint32_t PCIS;  ///< Offset: 0x20 - register PCIS
        volatile uint32_t CMPCR;  ///< Offset: 0x24 - register CMPCR
        volatile uint32_t CMPD;  ///< Offset: 0x26 - register CMPD
        volatile uint32_t ADSS3;  ///< Offset: 0x29 - register ADSS3
        volatile uint32_t ADSS2;  ///< Offset: 0x28 - register ADSS2
        volatile uint32_t ADSS1;  ///< Offset: 0x2D - register ADSS1
        volatile uint32_t ADSS0;  ///< Offset: 0x2C - register ADSS0
        volatile uint32_t ADST1;  ///< Offset: 0x30 - register ADST1
        volatile uint32_t ADST0;  ///< Offset: 0x31 - register ADST0
        volatile uint32_t ADCT;  ///< Offset: 0x34 - register ADCT
        volatile uint32_t PRTSL;  ///< Offset: 0x38 - register PRTSL
        volatile uint32_t SCTSL;  ///< Offset: 0x39 - register SCTSL
        volatile uint32_t ADCEN;  ///< Offset: 0x3C - register ADCEN
        volatile uint32_t WCMRCOT;  ///< Offset: 0x44 - register WCMRCOT
        volatile uint32_t WCMRCIF;  ///< Offset: 0x48 - register WCMRCIF
        volatile uint32_t WCMPCR;  ///< Offset: 0x4C - register WCMPCR
        volatile uint32_t WCMPSR;  ///< Offset: 0x4D - register WCMPSR
        volatile uint32_t WCMPDL;  ///< Offset: 0x50 - register WCMPDL
        volatile uint32_t WCMPDH;  ///< Offset: 0x52 - register WCMPDH
    };

    /// Peripheral instances
    inline Registers* ADC0 = reinterpret_cast<Registers*>(ADC0_BASE);
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);
    inline Registers* ADC2 = reinterpret_cast<Registers*>(ADC2_BASE);

    // Bit definitions
    /// ADCR Register bits
    namespace adcr_bits {
        constexpr uint32_t SCIF = (1U << 7);  ///< bitfield SCIF
        constexpr uint32_t PCIF = (1U << 6);  ///< bitfield PCIF
        constexpr uint32_t CMPIF = (1U << 5);  ///< bitfield CMPIF
        constexpr uint32_t SCIE = (1U << 3);  ///< bitfield SCIE
        constexpr uint32_t PCIE = (1U << 2);  ///< bitfield PCIE
        constexpr uint32_t CMPIE = (1U << 1);  ///< bitfield CMPIE
        constexpr uint32_t OVRIE = (1U << 0);  ///< bitfield OVRIE
    }

    /// ADSR Register bits
    namespace adsr_bits {
        constexpr uint32_t ADSTP = (1U << 7);  ///< bitfield ADSTP
        constexpr uint32_t FDAS = (1U << 6);  ///< bitfield FDAS
        constexpr uint32_t PCNS = (1U << 2);  ///< bitfield PCNS
        constexpr uint32_t PCS = (1U << 1);  ///< bitfield PCS
        constexpr uint32_t SCS = (1U << 0);  ///< bitfield SCS
    }

    /// SCCR Register bits
    namespace sccr_bits {
        constexpr uint32_t SEMP = (1U << 7);  ///< bitfield SEMP
        constexpr uint32_t SFUL = (1U << 6);  ///< bitfield SFUL
        constexpr uint32_t SOVR = (1U << 5);  ///< bitfield SOVR
        constexpr uint32_t SFCLR = (1U << 4);  ///< bitfield SFCLR
        constexpr uint32_t RPT = (1U << 2);  ///< bitfield RPT
        constexpr uint32_t SHEN = (1U << 1);  ///< bitfield SHEN
        constexpr uint32_t SSTR = (1U << 0);  ///< bitfield SSTR
    }

    /// SFNS Register bits
    namespace sfns_bits {
        constexpr uint32_t SFS = (4 << 0);  ///< bitfield SFS
    }

    /// SCFD Register bits
    namespace scfd_bits {
        constexpr uint32_t SD = (12 << 20);  ///< bitfield SD
        constexpr uint32_t INVL = (1U << 12);  ///< bitfield INVL
        constexpr uint32_t RS = (2 << 8);  ///< bitfield RS
        constexpr uint32_t SC = (5 << 0);  ///< bitfield SC
    }

    /// SCIS3 Register bits
    namespace scis3_bits {
        constexpr uint32_t AN31 = (1U << 7);  ///< bitfield AN31
        constexpr uint32_t AN30 = (1U << 6);  ///< bitfield AN30
        constexpr uint32_t AN29 = (1U << 5);  ///< bitfield AN29
        constexpr uint32_t AN28 = (1U << 4);  ///< bitfield AN28
        constexpr uint32_t AN27 = (1U << 3);  ///< bitfield AN27
        constexpr uint32_t AN26 = (1U << 2);  ///< bitfield AN26
        constexpr uint32_t AN25 = (1U << 1);  ///< bitfield AN25
        constexpr uint32_t AN24 = (1U << 0);  ///< bitfield AN24
    }

    /// SCIS2 Register bits
    namespace scis2_bits {
        constexpr uint32_t AN23 = (1U << 7);  ///< bitfield AN23
        constexpr uint32_t AN22 = (1U << 6);  ///< bitfield AN22
        constexpr uint32_t AN21 = (1U << 5);  ///< bitfield AN21
        constexpr uint32_t AN20 = (1U << 4);  ///< bitfield AN20
        constexpr uint32_t AN19 = (1U << 3);  ///< bitfield AN19
        constexpr uint32_t AN18 = (1U << 2);  ///< bitfield AN18
        constexpr uint32_t AN17 = (1U << 1);  ///< bitfield AN17
        constexpr uint32_t AN16 = (1U << 0);  ///< bitfield AN16
    }

    /// SCIS1 Register bits
    namespace scis1_bits {
        constexpr uint32_t AN15 = (1U << 7);  ///< bitfield AN15
        constexpr uint32_t AN14 = (1U << 6);  ///< bitfield AN14
        constexpr uint32_t AN13 = (1U << 5);  ///< bitfield AN13
        constexpr uint32_t AN12 = (1U << 4);  ///< bitfield AN12
        constexpr uint32_t AN11 = (1U << 3);  ///< bitfield AN11
        constexpr uint32_t AN10 = (1U << 2);  ///< bitfield AN10
        constexpr uint32_t AN9 = (1U << 1);  ///< bitfield AN9
        constexpr uint32_t AN8 = (1U << 0);  ///< bitfield AN8
    }

    /// SCIS0 Register bits
    namespace scis0_bits {
        constexpr uint32_t AN7 = (1U << 7);  ///< bitfield AN7
        constexpr uint32_t AN6 = (1U << 6);  ///< bitfield AN6
        constexpr uint32_t AN5 = (1U << 5);  ///< bitfield AN5
        constexpr uint32_t AN4 = (1U << 4);  ///< bitfield AN4
        constexpr uint32_t AN3 = (1U << 3);  ///< bitfield AN3
        constexpr uint32_t AN2 = (1U << 2);  ///< bitfield AN2
        constexpr uint32_t AN1 = (1U << 1);  ///< bitfield AN1
        constexpr uint32_t AN0 = (1U << 0);  ///< bitfield AN0
    }

    /// PFNS Register bits
    namespace pfns_bits {
        constexpr uint32_t TEST = (2 << 4);  ///< bitfield TEST
        constexpr uint32_t PFS = (2 << 0);  ///< bitfield PFS
    }

    /// PCCR Register bits
    namespace pccr_bits {
        constexpr uint32_t PEMP = (1U << 7);  ///< bitfield PEMP
        constexpr uint32_t PFUL = (1U << 6);  ///< bitfield PFUL
        constexpr uint32_t POVR = (1U << 5);  ///< bitfield POVR
        constexpr uint32_t PFCLR = (1U << 4);  ///< bitfield PFCLR
        constexpr uint32_t ESCE = (1U << 3);  ///< bitfield ESCE
        constexpr uint32_t PEEN = (1U << 2);  ///< bitfield PEEN
        constexpr uint32_t PHEN = (1U << 1);  ///< bitfield PHEN
        constexpr uint32_t PSTR = (1U << 0);  ///< bitfield PSTR
    }

    /// PCFD Register bits
    namespace pcfd_bits {
        constexpr uint32_t PD = (12 << 20);  ///< bitfield PD
        constexpr uint32_t INVL = (1U << 12);  ///< bitfield INVL
        constexpr uint32_t RS = (3 << 8);  ///< bitfield RS
        constexpr uint32_t PC = (5 << 0);  ///< bitfield PC
    }

    /// PCIS Register bits
    namespace pcis_bits {
        constexpr uint32_t P2A = (5 << 3);  ///< bitfield P2A
        constexpr uint32_t P1A = (3 << 0);  ///< bitfield P1A
    }

    /// CMPCR Register bits
    namespace cmpcr_bits {
        constexpr uint32_t CMPEN = (1U << 7);  ///< bitfield CMPEN
        constexpr uint32_t CMD1 = (1U << 6);  ///< bitfield CMD1
        constexpr uint32_t CMD0 = (1U << 5);  ///< bitfield CMD0
        constexpr uint32_t CCH = (5 << 0);  ///< bitfield CCH
    }

    /// CMPD Register bits
    namespace cmpd_bits {
        constexpr uint32_t CMAD = (10 << 6);  ///< bitfield CMAD
    }

    /// ADSS3 Register bits
    namespace adss3_bits {
        constexpr uint32_t TS31 = (1U << 7);  ///< bitfield TS31
        constexpr uint32_t TS30 = (1U << 6);  ///< bitfield TS30
        constexpr uint32_t TS29 = (1U << 5);  ///< bitfield TS29
        constexpr uint32_t TS28 = (1U << 4);  ///< bitfield TS28
        constexpr uint32_t TS27 = (1U << 3);  ///< bitfield TS27
        constexpr uint32_t TS26 = (1U << 2);  ///< bitfield TS26
        constexpr uint32_t TS25 = (1U << 1);  ///< bitfield TS25
        constexpr uint32_t TS24 = (1U << 0);  ///< bitfield TS24
    }

    /// ADSS2 Register bits
    namespace adss2_bits {
        constexpr uint32_t TS23 = (1U << 7);  ///< bitfield TS23
        constexpr uint32_t TS22 = (1U << 6);  ///< bitfield TS22
        constexpr uint32_t TS21 = (1U << 5);  ///< bitfield TS21
        constexpr uint32_t TS20 = (1U << 4);  ///< bitfield TS20
        constexpr uint32_t TS19 = (1U << 3);  ///< bitfield TS19
        constexpr uint32_t TS18 = (1U << 2);  ///< bitfield TS18
        constexpr uint32_t TS17 = (1U << 1);  ///< bitfield TS17
        constexpr uint32_t TS16 = (1U << 0);  ///< bitfield TS16
    }

    /// ADSS1 Register bits
    namespace adss1_bits {
        constexpr uint32_t TS15 = (1U << 7);  ///< bitfield TS15
        constexpr uint32_t TS14 = (1U << 6);  ///< bitfield TS14
        constexpr uint32_t TS13 = (1U << 5);  ///< bitfield TS13
        constexpr uint32_t TS12 = (1U << 4);  ///< bitfield TS12
        constexpr uint32_t TS11 = (1U << 3);  ///< bitfield TS11
        constexpr uint32_t TS10 = (1U << 2);  ///< bitfield TS10
        constexpr uint32_t TS9 = (1U << 1);  ///< bitfield TS9
        constexpr uint32_t TS8 = (1U << 0);  ///< bitfield TS8
    }

    /// ADSS0 Register bits
    namespace adss0_bits {
        constexpr uint32_t TS7 = (1U << 7);  ///< bitfield TS7
        constexpr uint32_t TS6 = (1U << 6);  ///< bitfield TS6
        constexpr uint32_t TS5 = (1U << 5);  ///< bitfield TS5
        constexpr uint32_t TS4 = (1U << 4);  ///< bitfield TS4
        constexpr uint32_t TS3 = (1U << 3);  ///< bitfield TS3
        constexpr uint32_t TS2 = (1U << 2);  ///< bitfield TS2
        constexpr uint32_t TS1 = (1U << 1);  ///< bitfield TS1
        constexpr uint32_t TS0 = (1U << 0);  ///< bitfield TS0
    }

    /// ADST1 Register bits
    namespace adst1_bits {
        constexpr uint32_t STX1 = (3 << 5);  ///< bitfield STX1
        constexpr uint32_t ST1 = (5 << 0);  ///< bitfield ST1
    }

    /// ADST0 Register bits
    namespace adst0_bits {
        constexpr uint32_t STX0 = (3 << 5);  ///< bitfield STX0
        constexpr uint32_t ST0 = (5 << 0);  ///< bitfield ST0
    }

    /// ADCT Register bits
    namespace adct_bits {
        constexpr uint32_t CT = (8 << 0);  ///< bitfield CT
    }

    /// PRTSL Register bits
    namespace prtsl_bits {
        constexpr uint32_t PRTSL = (4 << 0);  ///< bitfield PRTSL
    }

    /// SCTSL Register bits
    namespace sctsl_bits {
        constexpr uint32_t SCTSL = (4 << 0);  ///< bitfield SCTSL
    }

    /// ADCEN Register bits
    namespace adcen_bits {
        constexpr uint32_t ENBLTIME = (8 << 8);  ///< bitfield ENBLTIME
        constexpr uint32_t READY = (1U << 1);  ///< bitfield READY
        constexpr uint32_t ENBL = (1U << 0);  ///< bitfield ENBL
    }

    /// WCMRCOT Register bits
    namespace wcmrcot_bits {
        constexpr uint32_t RCOOF = (1U << 0);  ///< bitfield RCOOF
    }

    /// WCMRCIF Register bits
    namespace wcmrcif_bits {
        constexpr uint32_t RCINT = (1U << 0);  ///< bitfield RCINT
    }

    /// WCMPCR Register bits
    namespace wcmpcr_bits {
        constexpr uint32_t RCOCD = (3 << 5);  ///< bitfield RCOCD
        constexpr uint32_t RCOIRS = (1U << 4);  ///< bitfield RCOIRS
        constexpr uint32_t RCOIE = (1U << 3);  ///< bitfield RCOIE
        constexpr uint32_t RCOE = (1U << 2);  ///< bitfield RCOE
    }

    /// WCMPSR Register bits
    namespace wcmpsr_bits {
        constexpr uint32_t WCMD = (1U << 5);  ///< bitfield WCMD
        constexpr uint32_t WCCH = (5 << 0);  ///< bitfield WCCH
    }

    /// WCMPDL Register bits
    namespace wcmpdl_bits {
        constexpr uint32_t CMLD = (10 << 6);  ///< bitfield CMLD
    }

    /// WCMPDH Register bits
    namespace wcmpdh_bits {
        constexpr uint32_t CMHD = (10 << 6);  ///< bitfield CMHD
    }

}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DAC0_BASE = 0x40033000;
    constexpr uint32_t DAC1_BASE = 0x40033008;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t DACR;  ///< Offset: 0x00 - register DACR
        volatile uint32_t DADR;  ///< Offset: 0x04 - register DADR
    };

    /// Peripheral instances
    inline Registers* DAC0 = reinterpret_cast<Registers*>(DAC0_BASE);
    inline Registers* DAC1 = reinterpret_cast<Registers*>(DAC1_BASE);

    // Bit definitions
    /// DACR Register bits
    namespace dacr_bits {
        constexpr uint32_t DDAS = (1U << 5);  ///< bitfield DDAS
        constexpr uint32_t DAC10 = (1U << 4);  ///< bitfield DAC10
        constexpr uint32_t DRDY = (1U << 1);  ///< bitfield DRDY
        constexpr uint32_t DAE = (1U << 0);  ///< bitfield DAE
    }

    /// DADR Register bits
    namespace dadr_bits {
        constexpr uint32_t DA = (10 << 0);  ///< bitfield DA
    }

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40030000;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t ENIR;  ///< Offset: 0x00 - register ENIR
        volatile uint32_t EIRR;  ///< Offset: 0x04 - register EIRR
        volatile uint32_t EICL;  ///< Offset: 0x08 - register EICL
        volatile uint32_t ELVR;  ///< Offset: 0x0C - register ELVR
        volatile uint32_t ELVR1;  ///< Offset: 0x10 - register ELVR1
        volatile uint32_t NMIRR;  ///< Offset: 0x14 - register NMIRR
        volatile uint32_t NMICL;  ///< Offset: 0x18 - register NMICL
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// ENIR Register bits
    namespace enir_bits {
        constexpr uint32_t EN31 = (1U << 31);  ///< bitfield EN31
        constexpr uint32_t EN30 = (1U << 30);  ///< bitfield EN30
        constexpr uint32_t EN29 = (1U << 29);  ///< bitfield EN29
        constexpr uint32_t EN28 = (1U << 28);  ///< bitfield EN28
        constexpr uint32_t EN27 = (1U << 27);  ///< bitfield EN27
        constexpr uint32_t EN26 = (1U << 26);  ///< bitfield EN26
        constexpr uint32_t EN25 = (1U << 25);  ///< bitfield EN25
        constexpr uint32_t EN24 = (1U << 24);  ///< bitfield EN24
        constexpr uint32_t EN23 = (1U << 23);  ///< bitfield EN23
        constexpr uint32_t EN22 = (1U << 22);  ///< bitfield EN22
        constexpr uint32_t EN21 = (1U << 21);  ///< bitfield EN21
        constexpr uint32_t EN20 = (1U << 20);  ///< bitfield EN20
        constexpr uint32_t EN19 = (1U << 19);  ///< bitfield EN19
        constexpr uint32_t EN18 = (1U << 18);  ///< bitfield EN18
        constexpr uint32_t EN17 = (1U << 17);  ///< bitfield EN17
        constexpr uint32_t EN16 = (1U << 16);  ///< bitfield EN16
        constexpr uint32_t EN15 = (1U << 15);  ///< bitfield EN15
        constexpr uint32_t EN14 = (1U << 14);  ///< bitfield EN14
        constexpr uint32_t EN13 = (1U << 13);  ///< bitfield EN13
        constexpr uint32_t EN12 = (1U << 12);  ///< bitfield EN12
        constexpr uint32_t EN11 = (1U << 11);  ///< bitfield EN11
        constexpr uint32_t EN10 = (1U << 10);  ///< bitfield EN10
        constexpr uint32_t EN9 = (1U << 9);  ///< bitfield EN9
        constexpr uint32_t EN8 = (1U << 8);  ///< bitfield EN8
        constexpr uint32_t EN7 = (1U << 7);  ///< bitfield EN7
        constexpr uint32_t EN6 = (1U << 6);  ///< bitfield EN6
        constexpr uint32_t EN5 = (1U << 5);  ///< bitfield EN5
        constexpr uint32_t EN4 = (1U << 4);  ///< bitfield EN4
        constexpr uint32_t EN3 = (1U << 3);  ///< bitfield EN3
        constexpr uint32_t EN2 = (1U << 2);  ///< bitfield EN2
        constexpr uint32_t EN1 = (1U << 1);  ///< bitfield EN1
        constexpr uint32_t EN0 = (1U << 0);  ///< bitfield EN0
    }

    /// EIRR Register bits
    namespace eirr_bits {
        constexpr uint32_t ER31 = (1U << 31);  ///< bitfield ER31
        constexpr uint32_t ER30 = (1U << 30);  ///< bitfield ER30
        constexpr uint32_t ER29 = (1U << 29);  ///< bitfield ER29
        constexpr uint32_t ER28 = (1U << 28);  ///< bitfield ER28
        constexpr uint32_t ER27 = (1U << 27);  ///< bitfield ER27
        constexpr uint32_t ER26 = (1U << 26);  ///< bitfield ER26
        constexpr uint32_t ER25 = (1U << 25);  ///< bitfield ER25
        constexpr uint32_t ER24 = (1U << 24);  ///< bitfield ER24
        constexpr uint32_t ER23 = (1U << 23);  ///< bitfield ER23
        constexpr uint32_t ER22 = (1U << 22);  ///< bitfield ER22
        constexpr uint32_t ER21 = (1U << 21);  ///< bitfield ER21
        constexpr uint32_t ER20 = (1U << 20);  ///< bitfield ER20
        constexpr uint32_t ER19 = (1U << 19);  ///< bitfield ER19
        constexpr uint32_t ER18 = (1U << 18);  ///< bitfield ER18
        constexpr uint32_t ER17 = (1U << 17);  ///< bitfield ER17
        constexpr uint32_t ER16 = (1U << 16);  ///< bitfield ER16
        constexpr uint32_t ER15 = (1U << 15);  ///< bitfield ER15
        constexpr uint32_t ER14 = (1U << 14);  ///< bitfield ER14
        constexpr uint32_t ER13 = (1U << 13);  ///< bitfield ER13
        constexpr uint32_t ER12 = (1U << 12);  ///< bitfield ER12
        constexpr uint32_t ER11 = (1U << 11);  ///< bitfield ER11
        constexpr uint32_t ER10 = (1U << 10);  ///< bitfield ER10
        constexpr uint32_t ER9 = (1U << 9);  ///< bitfield ER9
        constexpr uint32_t ER8 = (1U << 8);  ///< bitfield ER8
        constexpr uint32_t ER7 = (1U << 7);  ///< bitfield ER7
        constexpr uint32_t ER6 = (1U << 6);  ///< bitfield ER6
        constexpr uint32_t ER5 = (1U << 5);  ///< bitfield ER5
        constexpr uint32_t ER4 = (1U << 4);  ///< bitfield ER4
        constexpr uint32_t ER3 = (1U << 3);  ///< bitfield ER3
        constexpr uint32_t ER2 = (1U << 2);  ///< bitfield ER2
        constexpr uint32_t ER1 = (1U << 1);  ///< bitfield ER1
        constexpr uint32_t ER0 = (1U << 0);  ///< bitfield ER0
    }

    /// EICL Register bits
    namespace eicl_bits {
        constexpr uint32_t ECL31 = (1U << 31);  ///< bitfield ECL31
        constexpr uint32_t ECL30 = (1U << 30);  ///< bitfield ECL30
        constexpr uint32_t ECL29 = (1U << 29);  ///< bitfield ECL29
        constexpr uint32_t ECL28 = (1U << 28);  ///< bitfield ECL28
        constexpr uint32_t ECL27 = (1U << 27);  ///< bitfield ECL27
        constexpr uint32_t ECL26 = (1U << 26);  ///< bitfield ECL26
        constexpr uint32_t ECL25 = (1U << 25);  ///< bitfield ECL25
        constexpr uint32_t ECL24 = (1U << 24);  ///< bitfield ECL24
        constexpr uint32_t ECL23 = (1U << 23);  ///< bitfield ECL23
        constexpr uint32_t ECL22 = (1U << 22);  ///< bitfield ECL22
        constexpr uint32_t ECL21 = (1U << 21);  ///< bitfield ECL21
        constexpr uint32_t ECL20 = (1U << 20);  ///< bitfield ECL20
        constexpr uint32_t ECL19 = (1U << 19);  ///< bitfield ECL19
        constexpr uint32_t ECL18 = (1U << 18);  ///< bitfield ECL18
        constexpr uint32_t ECL17 = (1U << 17);  ///< bitfield ECL17
        constexpr uint32_t ECL16 = (1U << 16);  ///< bitfield ECL16
        constexpr uint32_t ECL15 = (1U << 15);  ///< bitfield ECL15
        constexpr uint32_t ECL14 = (1U << 14);  ///< bitfield ECL14
        constexpr uint32_t ECL13 = (1U << 13);  ///< bitfield ECL13
        constexpr uint32_t ECL12 = (1U << 12);  ///< bitfield ECL12
        constexpr uint32_t ECL11 = (1U << 11);  ///< bitfield ECL11
        constexpr uint32_t ECL10 = (1U << 10);  ///< bitfield ECL10
        constexpr uint32_t ECL9 = (1U << 9);  ///< bitfield ECL9
        constexpr uint32_t ECL8 = (1U << 8);  ///< bitfield ECL8
        constexpr uint32_t ECL7 = (1U << 7);  ///< bitfield ECL7
        constexpr uint32_t ECL6 = (1U << 6);  ///< bitfield ECL6
        constexpr uint32_t ECL5 = (1U << 5);  ///< bitfield ECL5
        constexpr uint32_t ECL4 = (1U << 4);  ///< bitfield ECL4
        constexpr uint32_t ECL3 = (1U << 3);  ///< bitfield ECL3
        constexpr uint32_t ECL2 = (1U << 2);  ///< bitfield ECL2
        constexpr uint32_t ECL1 = (1U << 1);  ///< bitfield ECL1
        constexpr uint32_t ECL0 = (1U << 0);  ///< bitfield ECL0
    }

    /// ELVR Register bits
    namespace elvr_bits {
        constexpr uint32_t LB15 = (1U << 31);  ///< bitfield LB15
        constexpr uint32_t LA15 = (1U << 30);  ///< bitfield LA15
        constexpr uint32_t LB14 = (1U << 29);  ///< bitfield LB14
        constexpr uint32_t LA14 = (1U << 28);  ///< bitfield LA14
        constexpr uint32_t LB13 = (1U << 27);  ///< bitfield LB13
        constexpr uint32_t LA13 = (1U << 26);  ///< bitfield LA13
        constexpr uint32_t LB12 = (1U << 25);  ///< bitfield LB12
        constexpr uint32_t LA12 = (1U << 24);  ///< bitfield LA12
        constexpr uint32_t LB11 = (1U << 23);  ///< bitfield LB11
        constexpr uint32_t LA11 = (1U << 22);  ///< bitfield LA11
        constexpr uint32_t LB10 = (1U << 21);  ///< bitfield LB10
        constexpr uint32_t LA10 = (1U << 20);  ///< bitfield LA10
        constexpr uint32_t LB9 = (1U << 19);  ///< bitfield LB9
        constexpr uint32_t LA9 = (1U << 18);  ///< bitfield LA9
        constexpr uint32_t LB8 = (1U << 17);  ///< bitfield LB8
        constexpr uint32_t LA8 = (1U << 16);  ///< bitfield LA8
        constexpr uint32_t LB7 = (1U << 15);  ///< bitfield LB7
        constexpr uint32_t LA7 = (1U << 14);  ///< bitfield LA7
        constexpr uint32_t LB6 = (1U << 13);  ///< bitfield LB6
        constexpr uint32_t LA6 = (1U << 12);  ///< bitfield LA6
        constexpr uint32_t LB5 = (1U << 11);  ///< bitfield LB5
        constexpr uint32_t LA5 = (1U << 10);  ///< bitfield LA5
        constexpr uint32_t LB4 = (1U << 9);  ///< bitfield LB4
        constexpr uint32_t LA4 = (1U << 8);  ///< bitfield LA4
        constexpr uint32_t LB3 = (1U << 7);  ///< bitfield LB3
        constexpr uint32_t LA3 = (1U << 6);  ///< bitfield LA3
        constexpr uint32_t LB2 = (1U << 5);  ///< bitfield LB2
        constexpr uint32_t LA2 = (1U << 4);  ///< bitfield LA2
        constexpr uint32_t LB1 = (1U << 3);  ///< bitfield LB1
        constexpr uint32_t LA1 = (1U << 2);  ///< bitfield LA1
        constexpr uint32_t LB0 = (1U << 1);  ///< bitfield LB0
        constexpr uint32_t LA0 = (1U << 0);  ///< bitfield LA0
    }

    /// ELVR1 Register bits
    namespace elvr1_bits {
        constexpr uint32_t LB31 = (1U << 31);  ///< bitfield LB31
        constexpr uint32_t LA31 = (1U << 30);  ///< bitfield LA31
        constexpr uint32_t LB30 = (1U << 29);  ///< bitfield LB30
        constexpr uint32_t LA30 = (1U << 28);  ///< bitfield LA30
        constexpr uint32_t LB29 = (1U << 27);  ///< bitfield LB29
        constexpr uint32_t LA29 = (1U << 26);  ///< bitfield LA29
        constexpr uint32_t LB28 = (1U << 25);  ///< bitfield LB28
        constexpr uint32_t LA28 = (1U << 24);  ///< bitfield LA28
        constexpr uint32_t LB27 = (1U << 23);  ///< bitfield LB27
        constexpr uint32_t LA27 = (1U << 22);  ///< bitfield LA27
        constexpr uint32_t LB26 = (1U << 21);  ///< bitfield LB26
        constexpr uint32_t LA26 = (1U << 20);  ///< bitfield LA26
        constexpr uint32_t LB25 = (1U << 19);  ///< bitfield LB25
        constexpr uint32_t LA25 = (1U << 18);  ///< bitfield LA25
        constexpr uint32_t LB24 = (1U << 17);  ///< bitfield LB24
        constexpr uint32_t LA24 = (1U << 16);  ///< bitfield LA24
        constexpr uint32_t LB23 = (1U << 15);  ///< bitfield LB23
        constexpr uint32_t LA23 = (1U << 14);  ///< bitfield LA23
        constexpr uint32_t LB22 = (1U << 13);  ///< bitfield LB22
        constexpr uint32_t LA22 = (1U << 12);  ///< bitfield LA22
        constexpr uint32_t LB21 = (1U << 11);  ///< bitfield LB21
        constexpr uint32_t LA21 = (1U << 10);  ///< bitfield LA21
        constexpr uint32_t LB20 = (1U << 9);  ///< bitfield LB20
        constexpr uint32_t LA20 = (1U << 8);  ///< bitfield LA20
        constexpr uint32_t LB19 = (1U << 7);  ///< bitfield LB19
        constexpr uint32_t LA19 = (1U << 6);  ///< bitfield LA19
        constexpr uint32_t LB18 = (1U << 5);  ///< bitfield LB18
        constexpr uint32_t LA18 = (1U << 4);  ///< bitfield LA18
        constexpr uint32_t LB17 = (1U << 3);  ///< bitfield LB17
        constexpr uint32_t LA17 = (1U << 2);  ///< bitfield LA17
        constexpr uint32_t LB16 = (1U << 1);  ///< bitfield LB16
        constexpr uint32_t LA16 = (1U << 0);  ///< bitfield LA16
    }

    /// NMIRR Register bits
    namespace nmirr_bits {
        constexpr uint32_t NR = (1U << 0);  ///< bitfield NR
    }

    /// NMICL Register bits
    namespace nmicl_bits {
        constexpr uint32_t NCL = (1U << 0);  ///< bitfield NCL
    }

}

// ============================================================================
// INTREQ Peripheral
// ============================================================================

namespace intreq {
    /// Base addresses
    constexpr uint32_t INTREQ_BASE = 0x40031000;

    /// INTREQ Register structure
    struct Registers {
        volatile uint32_t DRQSEL;  ///< Offset: 0x00 - register DRQSEL
        volatile uint32_t ODDPKS;  ///< Offset: 0x10 - register ODDPKS
        volatile uint32_t IRQ003SEL;  ///< Offset: 0x110 - register IRQ003SEL
        volatile uint32_t IRQ004SEL;  ///< Offset: 0x114 - register IRQ004SEL
        volatile uint32_t IRQ005SEL;  ///< Offset: 0x118 - register IRQ005SEL
        volatile uint32_t IRQ006SEL;  ///< Offset: 0x11C - register IRQ006SEL
        volatile uint32_t IRQ007SEL;  ///< Offset: 0x120 - register IRQ007SEL
        volatile uint32_t IRQ008SEL;  ///< Offset: 0x124 - register IRQ008SEL
        volatile uint32_t IRQ009SEL;  ///< Offset: 0x128 - register IRQ009SEL
        volatile uint32_t IRQ010SEL;  ///< Offset: 0x12C - register IRQ010SEL
        volatile uint32_t EXC02MON;  ///< Offset: 0x200 - register EXC02MON
        volatile uint32_t IRQ000MON;  ///< Offset: 0x204 - register IRQ000MON
        volatile uint32_t IRQ001MON;  ///< Offset: 0x208 - register IRQ001MON
        volatile uint32_t IRQ002MON;  ///< Offset: 0x20C - register IRQ002MON
        volatile uint32_t IRQ003MON;  ///< Offset: 0x210 - register IRQ003MON
        volatile uint32_t IRQ004MON;  ///< Offset: 0x214 - register IRQ004MON
        volatile uint32_t IRQ005MON;  ///< Offset: 0x218 - register IRQ005MON
        volatile uint32_t IRQ006MON;  ///< Offset: 0x21C - register IRQ006MON
        volatile uint32_t IRQ007MON;  ///< Offset: 0x220 - register IRQ007MON
        volatile uint32_t IRQ008MON;  ///< Offset: 0x224 - register IRQ008MON
        volatile uint32_t IRQ009MON;  ///< Offset: 0x228 - register IRQ009MON
        volatile uint32_t IRQ010MON;  ///< Offset: 0x22C - register IRQ010MON
        volatile uint32_t IRQ011MON;  ///< Offset: 0x230 - register IRQ011MON
        volatile uint32_t IRQ012MON;  ///< Offset: 0x234 - register IRQ012MON
        volatile uint32_t IRQ013MON;  ///< Offset: 0x238 - register IRQ013MON
        volatile uint32_t IRQ014MON;  ///< Offset: 0x23C - register IRQ014MON
        volatile uint32_t IRQ015MON;  ///< Offset: 0x240 - register IRQ015MON
        volatile uint32_t IRQ016MON;  ///< Offset: 0x244 - register IRQ016MON
        volatile uint32_t IRQ017MON;  ///< Offset: 0x248 - register IRQ017MON
        volatile uint32_t IRQ018MON;  ///< Offset: 0x24C - register IRQ018MON
        volatile uint32_t IRQ019MON;  ///< Offset: 0x250 - register IRQ019MON
        volatile uint32_t IRQ020MON;  ///< Offset: 0x254 - register IRQ020MON
        volatile uint32_t IRQ021MON;  ///< Offset: 0x258 - register IRQ021MON
        volatile uint32_t IRQ022MON;  ///< Offset: 0x25C - register IRQ022MON
        volatile uint32_t IRQ023MON;  ///< Offset: 0x260 - register IRQ023MON
        volatile uint32_t IRQ024MON;  ///< Offset: 0x264 - register IRQ024MON
        volatile uint32_t IRQ025MON;  ///< Offset: 0x268 - register IRQ025MON
        volatile uint32_t IRQ026MON;  ///< Offset: 0x26C - register IRQ026MON
        volatile uint32_t IRQ027MON;  ///< Offset: 0x270 - register IRQ027MON
        volatile uint32_t IRQ028MON;  ///< Offset: 0x274 - register IRQ028MON
        volatile uint32_t IRQ029MON;  ///< Offset: 0x278 - register IRQ029MON
        volatile uint32_t IRQ030MON;  ///< Offset: 0x27C - register IRQ030MON
        volatile uint32_t IRQ031MON;  ///< Offset: 0x280 - register IRQ031MON
        volatile uint32_t IRQ032MON;  ///< Offset: 0x284 - register IRQ032MON
        volatile uint32_t IRQ033MON;  ///< Offset: 0x288 - register IRQ033MON
        volatile uint32_t IRQ034MON;  ///< Offset: 0x28C - register IRQ034MON
        volatile uint32_t IRQ035MON;  ///< Offset: 0x290 - register IRQ035MON
        volatile uint32_t IRQ036MON;  ///< Offset: 0x294 - register IRQ036MON
        volatile uint32_t IRQ037MON;  ///< Offset: 0x298 - register IRQ037MON
        volatile uint32_t IRQ038MON;  ///< Offset: 0x29C - register IRQ038MON
        volatile uint32_t IRQ039MON;  ///< Offset: 0x2A0 - register IRQ039MON
        volatile uint32_t IRQ040MON;  ///< Offset: 0x2A4 - register IRQ040MON
        volatile uint32_t IRQ041MON;  ///< Offset: 0x2A8 - register IRQ041MON
        volatile uint32_t IRQ042MON;  ///< Offset: 0x2AC - register IRQ042MON
        volatile uint32_t IRQ043MON;  ///< Offset: 0x2B0 - register IRQ043MON
        volatile uint32_t IRQ044MON;  ///< Offset: 0x2B4 - register IRQ044MON
        volatile uint32_t IRQ045MON;  ///< Offset: 0x2B8 - register IRQ045MON
        volatile uint32_t IRQ046MON;  ///< Offset: 0x2BC - register IRQ046MON
        volatile uint32_t IRQ047MON;  ///< Offset: 0x2C0 - register IRQ047MON
        volatile uint32_t IRQ048MON;  ///< Offset: 0x2C4 - register IRQ048MON
        volatile uint32_t IRQ049MON;  ///< Offset: 0x2C8 - register IRQ049MON
        volatile uint32_t IRQ050MON;  ///< Offset: 0x2CC - register IRQ050MON
        volatile uint32_t IRQ051MON;  ///< Offset: 0x2D0 - register IRQ051MON
        volatile uint32_t IRQ052MON;  ///< Offset: 0x2D4 - register IRQ052MON
        volatile uint32_t IRQ053MON;  ///< Offset: 0x2D8 - register IRQ053MON
        volatile uint32_t IRQ054MON;  ///< Offset: 0x2DC - register IRQ054MON
        volatile uint32_t IRQ055MON;  ///< Offset: 0x2E0 - register IRQ055MON
        volatile uint32_t IRQ056MON;  ///< Offset: 0x2E4 - register IRQ056MON
        volatile uint32_t IRQ057MON;  ///< Offset: 0x2E8 - register IRQ057MON
        volatile uint32_t IRQ058MON;  ///< Offset: 0x2EC - register IRQ058MON
        volatile uint32_t IRQ059MON;  ///< Offset: 0x2F0 - register IRQ059MON
        volatile uint32_t IRQ060MON;  ///< Offset: 0x2F4 - register IRQ060MON
        volatile uint32_t IRQ061MON;  ///< Offset: 0x2F8 - register IRQ061MON
        volatile uint32_t IRQ062MON;  ///< Offset: 0x2FC - register IRQ062MON
        volatile uint32_t IRQ063MON;  ///< Offset: 0x300 - register IRQ063MON
        volatile uint32_t IRQ064MON;  ///< Offset: 0x304 - register IRQ064MON
        volatile uint32_t IRQ065MON;  ///< Offset: 0x308 - register IRQ065MON
        volatile uint32_t IRQ066MON;  ///< Offset: 0x30C - register IRQ066MON
        volatile uint32_t IRQ067MON;  ///< Offset: 0x310 - register IRQ067MON
        volatile uint32_t IRQ068MON;  ///< Offset: 0x314 - register IRQ068MON
        volatile uint32_t IRQ069MON;  ///< Offset: 0x318 - register IRQ069MON
        volatile uint32_t IRQ070MON;  ///< Offset: 0x31C - register IRQ070MON
        volatile uint32_t IRQ071MON;  ///< Offset: 0x320 - register IRQ071MON
        volatile uint32_t IRQ072MON;  ///< Offset: 0x324 - register IRQ072MON
        volatile uint32_t IRQ073MON;  ///< Offset: 0x328 - register IRQ073MON
        volatile uint32_t IRQ074MON;  ///< Offset: 0x32C - register IRQ074MON
        volatile uint32_t IRQ075MON;  ///< Offset: 0x330 - register IRQ075MON
        volatile uint32_t IRQ076MON;  ///< Offset: 0x334 - register IRQ076MON
        volatile uint32_t IRQ077MON;  ///< Offset: 0x338 - register IRQ077MON
        volatile uint32_t IRQ078MON;  ///< Offset: 0x33C - register IRQ078MON
        volatile uint32_t IRQ079MON;  ///< Offset: 0x340 - register IRQ079MON
        volatile uint32_t IRQ080MON;  ///< Offset: 0x344 - register IRQ080MON
        volatile uint32_t IRQ081MON;  ///< Offset: 0x348 - register IRQ081MON
        volatile uint32_t IRQ082MON;  ///< Offset: 0x34C - register IRQ082MON
        volatile uint32_t IRQ083MON;  ///< Offset: 0x350 - register IRQ083MON
        volatile uint32_t IRQ084MON;  ///< Offset: 0x354 - register IRQ084MON
        volatile uint32_t IRQ085MON;  ///< Offset: 0x358 - register IRQ085MON
        volatile uint32_t IRQ086MON;  ///< Offset: 0x35C - register IRQ086MON
        volatile uint32_t IRQ087MON;  ///< Offset: 0x360 - register IRQ087MON
        volatile uint32_t IRQ088MON;  ///< Offset: 0x364 - register IRQ088MON
        volatile uint32_t IRQ089MON;  ///< Offset: 0x368 - register IRQ089MON
        volatile uint32_t IRQ090MON;  ///< Offset: 0x36C - register IRQ090MON
        volatile uint32_t IRQ091MON;  ///< Offset: 0x370 - register IRQ091MON
        volatile uint32_t IRQ092MON;  ///< Offset: 0x374 - register IRQ092MON
        volatile uint32_t IRQ093MON;  ///< Offset: 0x378 - register IRQ093MON
        volatile uint32_t IRQ094MON;  ///< Offset: 0x37C - register IRQ094MON
        volatile uint32_t IRQ095MON;  ///< Offset: 0x380 - register IRQ095MON
        volatile uint32_t IRQ096MON;  ///< Offset: 0x384 - register IRQ096MON
        volatile uint32_t IRQ097MON;  ///< Offset: 0x388 - register IRQ097MON
        volatile uint32_t IRQ098MON;  ///< Offset: 0x38C - register IRQ098MON
        volatile uint32_t IRQ099MON;  ///< Offset: 0x390 - register IRQ099MON
        volatile uint32_t IRQ100MON;  ///< Offset: 0x394 - register IRQ100MON
        volatile uint32_t IRQ101MON;  ///< Offset: 0x398 - register IRQ101MON
        volatile uint32_t IRQ102MON;  ///< Offset: 0x39C - register IRQ102MON
        volatile uint32_t IRQ103MON;  ///< Offset: 0x3A0 - register IRQ103MON
        volatile uint32_t IRQ104MON;  ///< Offset: 0x3A4 - register IRQ104MON
        volatile uint32_t IRQ105MON;  ///< Offset: 0x3A8 - register IRQ105MON
        volatile uint32_t IRQ106MON;  ///< Offset: 0x3AC - register IRQ106MON
        volatile uint32_t IRQ107MON;  ///< Offset: 0x3B0 - register IRQ107MON
        volatile uint32_t IRQ108MON;  ///< Offset: 0x3B4 - register IRQ108MON
        volatile uint32_t IRQ109MON;  ///< Offset: 0x3B8 - register IRQ109MON
        volatile uint32_t IRQ110MON;  ///< Offset: 0x3BC - register IRQ110MON
        volatile uint32_t IRQ111MON;  ///< Offset: 0x3C0 - register IRQ111MON
        volatile uint32_t IRQ112MON;  ///< Offset: 0x3C4 - register IRQ112MON
        volatile uint32_t IRQ113MON;  ///< Offset: 0x3C8 - register IRQ113MON
        volatile uint32_t IRQ114MON;  ///< Offset: 0x3CC - register IRQ114MON
        volatile uint32_t IRQ115MON;  ///< Offset: 0x3D0 - register IRQ115MON
        volatile uint32_t IRQ116MON;  ///< Offset: 0x3D4 - register IRQ116MON
        volatile uint32_t IRQ117MON;  ///< Offset: 0x3D8 - register IRQ117MON
        volatile uint32_t IRQ118MON;  ///< Offset: 0x3DC - register IRQ118MON
        volatile uint32_t IRQ119MON;  ///< Offset: 0x3E0 - register IRQ119MON
        volatile uint32_t IRQ120MON;  ///< Offset: 0x3E4 - register IRQ120MON
        volatile uint32_t IRQ121MON;  ///< Offset: 0x3E8 - register IRQ121MON
        volatile uint32_t IRQ122MON;  ///< Offset: 0x3EC - register IRQ122MON
        volatile uint32_t IRQ123MON;  ///< Offset: 0x3F0 - register IRQ123MON
        volatile uint32_t IRQ124MON;  ///< Offset: 0x3F4 - register IRQ124MON
        volatile uint32_t IRQ125MON;  ///< Offset: 0x3F8 - register IRQ125MON
        volatile uint32_t IRQ126MON;  ///< Offset: 0x3FC - register IRQ126MON
        volatile uint32_t IRQ127MON;  ///< Offset: 0x400 - register IRQ127MON
    };

    /// Peripheral instances
    inline Registers* INTREQ = reinterpret_cast<Registers*>(INTREQ_BASE);

    // Bit definitions
    /// DRQSEL Register bits
    namespace drqsel_bits {
        constexpr uint32_t EXINT3 = (1U << 31);  ///< bitfield EXINT3
        constexpr uint32_t EXINT2 = (1U << 30);  ///< bitfield EXINT2
        constexpr uint32_t EXINT1 = (1U << 29);  ///< bitfield EXINT1
        constexpr uint32_t EXINT0 = (1U << 28);  ///< bitfield EXINT0
        constexpr uint32_t MFS7TX = (1U << 27);  ///< bitfield MFS7TX
        constexpr uint32_t MFS7RX = (1U << 26);  ///< bitfield MFS7RX
        constexpr uint32_t MFS6TX = (1U << 25);  ///< bitfield MFS6TX
        constexpr uint32_t MFS6RX = (1U << 24);  ///< bitfield MFS6RX
        constexpr uint32_t MFS5TX = (1U << 23);  ///< bitfield MFS5TX
        constexpr uint32_t MFS5RX = (1U << 22);  ///< bitfield MFS5RX
        constexpr uint32_t MFS4TX = (1U << 21);  ///< bitfield MFS4TX
        constexpr uint32_t MFS4RX = (1U << 20);  ///< bitfield MFS4RX
        constexpr uint32_t MFS3TX = (1U << 19);  ///< bitfield MFS3TX
        constexpr uint32_t MFS3RX = (1U << 18);  ///< bitfield MFS3RX
        constexpr uint32_t MFS2TX = (1U << 17);  ///< bitfield MFS2TX
        constexpr uint32_t MFS2RX = (1U << 16);  ///< bitfield MFS2RX
        constexpr uint32_t MFS1TX = (1U << 15);  ///< bitfield MFS1TX
        constexpr uint32_t MFS1RX = (1U << 14);  ///< bitfield MFS1RX
        constexpr uint32_t MFS0TX = (1U << 13);  ///< bitfield MFS0TX
        constexpr uint32_t MFS0RX = (1U << 12);  ///< bitfield MFS0RX
        constexpr uint32_t IRQ0BT6 = (1U << 11);  ///< bitfield IRQ0BT6
        constexpr uint32_t IRQ0BT4 = (1U << 10);  ///< bitfield IRQ0BT4
        constexpr uint32_t IRQ0BT2 = (1U << 9);  ///< bitfield IRQ0BT2
        constexpr uint32_t IRQ0BT0 = (1U << 8);  ///< bitfield IRQ0BT0
        constexpr uint32_t ADCSCAN2 = (1U << 7);  ///< bitfield ADCSCAN2
        constexpr uint32_t ADCSCAN1 = (1U << 6);  ///< bitfield ADCSCAN1
        constexpr uint32_t ADCSCAN0 = (1U << 5);  ///< bitfield ADCSCAN0
        constexpr uint32_t USBEP5 = (1U << 4);  ///< bitfield USBEP5
        constexpr uint32_t USBEP4 = (1U << 3);  ///< bitfield USBEP4
        constexpr uint32_t USBEP3 = (1U << 2);  ///< bitfield USBEP3
        constexpr uint32_t USBEP2 = (1U << 1);  ///< bitfield USBEP2
        constexpr uint32_t USBEP1 = (1U << 0);  ///< bitfield USBEP1
    }

    /// ODDPKS Register bits
    namespace oddpks_bits {
        constexpr uint32_t ODDPKS4 = (1U << 4);  ///< bitfield ODDPKS4
        constexpr uint32_t ODDPKS3 = (1U << 3);  ///< bitfield ODDPKS3
        constexpr uint32_t ODDPKS2 = (1U << 2);  ///< bitfield ODDPKS2
        constexpr uint32_t ODDPKS1 = (1U << 1);  ///< bitfield ODDPKS1
        constexpr uint32_t ODDPKS0 = (1U << 0);  ///< bitfield ODDPKS0
    }

    /// IRQ003SEL Register bits
    namespace irq003sel_bits {
        constexpr uint32_t SELBIT = (8 << 16);  ///< bitfield SELBIT
        constexpr uint32_t SELIRQ = (8 << 0);  ///< bitfield SELIRQ
    }

    /// IRQ004SEL Register bits
    namespace irq004sel_bits {
        constexpr uint32_t SELBIT = (8 << 16);  ///< bitfield SELBIT
        constexpr uint32_t SELIRQ = (8 << 0);  ///< bitfield SELIRQ
    }

    /// IRQ005SEL Register bits
    namespace irq005sel_bits {
        constexpr uint32_t SELBIT = (8 << 16);  ///< bitfield SELBIT
        constexpr uint32_t SELIRQ = (8 << 0);  ///< bitfield SELIRQ
    }

    /// IRQ006SEL Register bits
    namespace irq006sel_bits {
        constexpr uint32_t SELBIT = (8 << 16);  ///< bitfield SELBIT
        constexpr uint32_t SELIRQ = (8 << 0);  ///< bitfield SELIRQ
    }

    /// IRQ007SEL Register bits
    namespace irq007sel_bits {
        constexpr uint32_t SELBIT = (8 << 16);  ///< bitfield SELBIT
        constexpr uint32_t SELIRQ = (8 << 0);  ///< bitfield SELIRQ
    }

    /// IRQ008SEL Register bits
    namespace irq008sel_bits {
        constexpr uint32_t SELBIT = (8 << 16);  ///< bitfield SELBIT
        constexpr uint32_t SELIRQ = (8 << 0);  ///< bitfield SELIRQ
    }

    /// IRQ009SEL Register bits
    namespace irq009sel_bits {
        constexpr uint32_t SELBIT = (8 << 16);  ///< bitfield SELBIT
        constexpr uint32_t SELIRQ = (8 << 0);  ///< bitfield SELIRQ
    }

    /// IRQ010SEL Register bits
    namespace irq010sel_bits {
        constexpr uint32_t SELBIT = (8 << 16);  ///< bitfield SELBIT
        constexpr uint32_t SELIRQ = (8 << 0);  ///< bitfield SELIRQ
    }

    /// EXC02MON Register bits
    namespace exc02mon_bits {
        constexpr uint32_t HWINT = (1U << 1);  ///< bitfield HWINT
        constexpr uint32_t NMI = (1U << 0);  ///< bitfield NMI
    }

    /// IRQ000MON Register bits
    namespace irq000mon_bits {
        constexpr uint32_t FCSINT = (1U << 0);  ///< bitfield FCSINT
    }

    /// IRQ001MON Register bits
    namespace irq001mon_bits {
        constexpr uint32_t SWWDTINT = (1U << 0);  ///< bitfield SWWDTINT
    }

    /// IRQ002MON Register bits
    namespace irq002mon_bits {
        constexpr uint32_t LVDINT = (1U << 0);  ///< bitfield LVDINT
    }

    /// IRQ003MON Register bits
    namespace irq003mon_bits {
        constexpr uint32_t IRQBIT7 = (1U << 7);  ///< bitfield IRQBIT7
        constexpr uint32_t IRQBIT6 = (1U << 6);  ///< bitfield IRQBIT6
        constexpr uint32_t IRQBIT5 = (1U << 5);  ///< bitfield IRQBIT5
        constexpr uint32_t IRQBIT4 = (1U << 4);  ///< bitfield IRQBIT4
        constexpr uint32_t IRQBIT3 = (1U << 3);  ///< bitfield IRQBIT3
        constexpr uint32_t IRQBIT2 = (1U << 2);  ///< bitfield IRQBIT2
        constexpr uint32_t IRQBIT1 = (1U << 1);  ///< bitfield IRQBIT1
        constexpr uint32_t IRQBIT0 = (1U << 0);  ///< bitfield IRQBIT0
    }

    /// IRQ004MON Register bits
    namespace irq004mon_bits {
        constexpr uint32_t IRQBIT7 = (1U << 7);  ///< bitfield IRQBIT7
        constexpr uint32_t IRQBIT6 = (1U << 6);  ///< bitfield IRQBIT6
        constexpr uint32_t IRQBIT5 = (1U << 5);  ///< bitfield IRQBIT5
        constexpr uint32_t IRQBIT4 = (1U << 4);  ///< bitfield IRQBIT4
        constexpr uint32_t IRQBIT3 = (1U << 3);  ///< bitfield IRQBIT3
        constexpr uint32_t IRQBIT2 = (1U << 2);  ///< bitfield IRQBIT2
        constexpr uint32_t IRQBIT1 = (1U << 1);  ///< bitfield IRQBIT1
        constexpr uint32_t IRQBIT0 = (1U << 0);  ///< bitfield IRQBIT0
    }

    /// IRQ005MON Register bits
    namespace irq005mon_bits {
        constexpr uint32_t IRQBIT7 = (1U << 7);  ///< bitfield IRQBIT7
        constexpr uint32_t IRQBIT6 = (1U << 6);  ///< bitfield IRQBIT6
        constexpr uint32_t IRQBIT5 = (1U << 5);  ///< bitfield IRQBIT5
        constexpr uint32_t IRQBIT4 = (1U << 4);  ///< bitfield IRQBIT4
        constexpr uint32_t IRQBIT3 = (1U << 3);  ///< bitfield IRQBIT3
        constexpr uint32_t IRQBIT2 = (1U << 2);  ///< bitfield IRQBIT2
        constexpr uint32_t IRQBIT1 = (1U << 1);  ///< bitfield IRQBIT1
        constexpr uint32_t IRQBIT0 = (1U << 0);  ///< bitfield IRQBIT0
    }

    /// IRQ006MON Register bits
    namespace irq006mon_bits {
        constexpr uint32_t IRQBIT7 = (1U << 7);  ///< bitfield IRQBIT7
        constexpr uint32_t IRQBIT6 = (1U << 6);  ///< bitfield IRQBIT6
        constexpr uint32_t IRQBIT5 = (1U << 5);  ///< bitfield IRQBIT5
        constexpr uint32_t IRQBIT4 = (1U << 4);  ///< bitfield IRQBIT4
        constexpr uint32_t IRQBIT3 = (1U << 3);  ///< bitfield IRQBIT3
        constexpr uint32_t IRQBIT2 = (1U << 2);  ///< bitfield IRQBIT2
        constexpr uint32_t IRQBIT1 = (1U << 1);  ///< bitfield IRQBIT1
        constexpr uint32_t IRQBIT0 = (1U << 0);  ///< bitfield IRQBIT0
    }

    /// IRQ007MON Register bits
    namespace irq007mon_bits {
        constexpr uint32_t IRQBIT7 = (1U << 7);  ///< bitfield IRQBIT7
        constexpr uint32_t IRQBIT6 = (1U << 6);  ///< bitfield IRQBIT6
        constexpr uint32_t IRQBIT5 = (1U << 5);  ///< bitfield IRQBIT5
        constexpr uint32_t IRQBIT4 = (1U << 4);  ///< bitfield IRQBIT4
        constexpr uint32_t IRQBIT3 = (1U << 3);  ///< bitfield IRQBIT3
        constexpr uint32_t IRQBIT2 = (1U << 2);  ///< bitfield IRQBIT2
        constexpr uint32_t IRQBIT1 = (1U << 1);  ///< bitfield IRQBIT1
        constexpr uint32_t IRQBIT0 = (1U << 0);  ///< bitfield IRQBIT0
    }

    /// IRQ008MON Register bits
    namespace irq008mon_bits {
        constexpr uint32_t IRQBIT7 = (1U << 7);  ///< bitfield IRQBIT7
        constexpr uint32_t IRQBIT6 = (1U << 6);  ///< bitfield IRQBIT6
        constexpr uint32_t IRQBIT5 = (1U << 5);  ///< bitfield IRQBIT5
        constexpr uint32_t IRQBIT4 = (1U << 4);  ///< bitfield IRQBIT4
        constexpr uint32_t IRQBIT3 = (1U << 3);  ///< bitfield IRQBIT3
        constexpr uint32_t IRQBIT2 = (1U << 2);  ///< bitfield IRQBIT2
        constexpr uint32_t IRQBIT1 = (1U << 1);  ///< bitfield IRQBIT1
        constexpr uint32_t IRQBIT0 = (1U << 0);  ///< bitfield IRQBIT0
    }

    /// IRQ009MON Register bits
    namespace irq009mon_bits {
        constexpr uint32_t IRQBIT7 = (1U << 7);  ///< bitfield IRQBIT7
        constexpr uint32_t IRQBIT6 = (1U << 6);  ///< bitfield IRQBIT6
        constexpr uint32_t IRQBIT5 = (1U << 5);  ///< bitfield IRQBIT5
        constexpr uint32_t IRQBIT4 = (1U << 4);  ///< bitfield IRQBIT4
        constexpr uint32_t IRQBIT3 = (1U << 3);  ///< bitfield IRQBIT3
        constexpr uint32_t IRQBIT2 = (1U << 2);  ///< bitfield IRQBIT2
        constexpr uint32_t IRQBIT1 = (1U << 1);  ///< bitfield IRQBIT1
        constexpr uint32_t IRQBIT0 = (1U << 0);  ///< bitfield IRQBIT0
    }

    /// IRQ010MON Register bits
    namespace irq010mon_bits {
        constexpr uint32_t IRQBIT7 = (1U << 7);  ///< bitfield IRQBIT7
        constexpr uint32_t IRQBIT6 = (1U << 6);  ///< bitfield IRQBIT6
        constexpr uint32_t IRQBIT5 = (1U << 5);  ///< bitfield IRQBIT5
        constexpr uint32_t IRQBIT4 = (1U << 4);  ///< bitfield IRQBIT4
        constexpr uint32_t IRQBIT3 = (1U << 3);  ///< bitfield IRQBIT3
        constexpr uint32_t IRQBIT2 = (1U << 2);  ///< bitfield IRQBIT2
        constexpr uint32_t IRQBIT1 = (1U << 1);  ///< bitfield IRQBIT1
        constexpr uint32_t IRQBIT0 = (1U << 0);  ///< bitfield IRQBIT0
    }

    /// IRQ011MON Register bits
    namespace irq011mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ012MON Register bits
    namespace irq012mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ013MON Register bits
    namespace irq013mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ014MON Register bits
    namespace irq014mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ015MON Register bits
    namespace irq015mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ016MON Register bits
    namespace irq016mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ017MON Register bits
    namespace irq017mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ018MON Register bits
    namespace irq018mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ019MON Register bits
    namespace irq019mon_bits {
        constexpr uint32_t QUDINT5 = (1U << 5);  ///< bitfield QUDINT5
        constexpr uint32_t QUDINT4 = (1U << 4);  ///< bitfield QUDINT4
        constexpr uint32_t QUDINT3 = (1U << 3);  ///< bitfield QUDINT3
        constexpr uint32_t QUDINT2 = (1U << 2);  ///< bitfield QUDINT2
        constexpr uint32_t QUDINT1 = (1U << 1);  ///< bitfield QUDINT1
        constexpr uint32_t QUDINT0 = (1U << 0);  ///< bitfield QUDINT0
    }

    /// IRQ020MON Register bits
    namespace irq020mon_bits {
        constexpr uint32_t QUDINT5 = (1U << 5);  ///< bitfield QUDINT5
        constexpr uint32_t QUDINT4 = (1U << 4);  ///< bitfield QUDINT4
        constexpr uint32_t QUDINT3 = (1U << 3);  ///< bitfield QUDINT3
        constexpr uint32_t QUDINT2 = (1U << 2);  ///< bitfield QUDINT2
        constexpr uint32_t QUDINT1 = (1U << 1);  ///< bitfield QUDINT1
        constexpr uint32_t QUDINT0 = (1U << 0);  ///< bitfield QUDINT0
    }

    /// IRQ021MON Register bits
    namespace irq021mon_bits {
        constexpr uint32_t WAVEINT3 = (1U << 3);  ///< bitfield WAVEINT3
        constexpr uint32_t WAVEINT2 = (1U << 2);  ///< bitfield WAVEINT2
        constexpr uint32_t WAVEINT1 = (1U << 1);  ///< bitfield WAVEINT1
        constexpr uint32_t WAVEINT0 = (1U << 0);  ///< bitfield WAVEINT0
    }

    /// IRQ022MON Register bits
    namespace irq022mon_bits {
        constexpr uint32_t WAVEINT3 = (1U << 3);  ///< bitfield WAVEINT3
        constexpr uint32_t WAVEINT2 = (1U << 2);  ///< bitfield WAVEINT2
        constexpr uint32_t WAVEINT1 = (1U << 1);  ///< bitfield WAVEINT1
        constexpr uint32_t WAVEINT0 = (1U << 0);  ///< bitfield WAVEINT0
    }

    /// IRQ023MON Register bits
    namespace irq023mon_bits {
        constexpr uint32_t WAVEINT3 = (1U << 3);  ///< bitfield WAVEINT3
        constexpr uint32_t WAVEINT2 = (1U << 2);  ///< bitfield WAVEINT2
        constexpr uint32_t WAVEINT1 = (1U << 1);  ///< bitfield WAVEINT1
        constexpr uint32_t WAVEINT0 = (1U << 0);  ///< bitfield WAVEINT0
    }

    /// IRQ024MON Register bits
    namespace irq024mon_bits {
        constexpr uint32_t FRT_PEAK_INT2 = (1U << 2);  ///< bitfield FRT_PEAK_INT2
        constexpr uint32_t FRT_PEAK_INT1 = (1U << 1);  ///< bitfield FRT_PEAK_INT1
        constexpr uint32_t FRT_PEAK_INT0 = (1U << 0);  ///< bitfield FRT_PEAK_INT0
    }

    /// IRQ025MON Register bits
    namespace irq025mon_bits {
        constexpr uint32_t FRT_ZERO_INT2 = (1U << 2);  ///< bitfield FRT_ZERO_INT2
        constexpr uint32_t FRT_ZERO_INT1 = (1U << 1);  ///< bitfield FRT_ZERO_INT1
        constexpr uint32_t FRT_ZERO_INT0 = (1U << 0);  ///< bitfield FRT_ZERO_INT0
    }

    /// IRQ026MON Register bits
    namespace irq026mon_bits {
        constexpr uint32_t ICUINT3 = (1U << 3);  ///< bitfield ICUINT3
        constexpr uint32_t ICUINT2 = (1U << 2);  ///< bitfield ICUINT2
        constexpr uint32_t ICUINT1 = (1U << 1);  ///< bitfield ICUINT1
        constexpr uint32_t ICUINT0 = (1U << 0);  ///< bitfield ICUINT0
    }

    /// IRQ027MON Register bits
    namespace irq027mon_bits {
        constexpr uint32_t OCUINT5 = (1U << 5);  ///< bitfield OCUINT5
        constexpr uint32_t OCUINT4 = (1U << 4);  ///< bitfield OCUINT4
        constexpr uint32_t OCUINT3 = (1U << 3);  ///< bitfield OCUINT3
        constexpr uint32_t OCUINT2 = (1U << 2);  ///< bitfield OCUINT2
        constexpr uint32_t OCUINT1 = (1U << 1);  ///< bitfield OCUINT1
        constexpr uint32_t OCUINT0 = (1U << 0);  ///< bitfield OCUINT0
    }

    /// IRQ028MON Register bits
    namespace irq028mon_bits {
        constexpr uint32_t FRT_PEAK_INT2 = (1U << 2);  ///< bitfield FRT_PEAK_INT2
        constexpr uint32_t FRT_PEAK_INT1 = (1U << 1);  ///< bitfield FRT_PEAK_INT1
        constexpr uint32_t FRT_PEAK_INT0 = (1U << 0);  ///< bitfield FRT_PEAK_INT0
    }

    /// IRQ029MON Register bits
    namespace irq029mon_bits {
        constexpr uint32_t FRT_ZERO_INT2 = (1U << 2);  ///< bitfield FRT_ZERO_INT2
        constexpr uint32_t FRT_ZERO_INT1 = (1U << 1);  ///< bitfield FRT_ZERO_INT1
        constexpr uint32_t FRT_ZERO_INT0 = (1U << 0);  ///< bitfield FRT_ZERO_INT0
    }

    /// IRQ030MON Register bits
    namespace irq030mon_bits {
        constexpr uint32_t ICUINT3 = (1U << 3);  ///< bitfield ICUINT3
        constexpr uint32_t ICUINT2 = (1U << 2);  ///< bitfield ICUINT2
        constexpr uint32_t ICUINT1 = (1U << 1);  ///< bitfield ICUINT1
        constexpr uint32_t ICUINT0 = (1U << 0);  ///< bitfield ICUINT0
    }

    /// IRQ031MON Register bits
    namespace irq031mon_bits {
        constexpr uint32_t OCUINT5 = (1U << 5);  ///< bitfield OCUINT5
        constexpr uint32_t OCUINT4 = (1U << 4);  ///< bitfield OCUINT4
        constexpr uint32_t OCUINT3 = (1U << 3);  ///< bitfield OCUINT3
        constexpr uint32_t OCUINT2 = (1U << 2);  ///< bitfield OCUINT2
        constexpr uint32_t OCUINT1 = (1U << 1);  ///< bitfield OCUINT1
        constexpr uint32_t OCUINT0 = (1U << 0);  ///< bitfield OCUINT0
    }

    /// IRQ032MON Register bits
    namespace irq032mon_bits {
        constexpr uint32_t FRT_PEAK_INT2 = (1U << 2);  ///< bitfield FRT_PEAK_INT2
        constexpr uint32_t FRT_PEAK_INT1 = (1U << 1);  ///< bitfield FRT_PEAK_INT1
        constexpr uint32_t FRT_PEAK_INT0 = (1U << 0);  ///< bitfield FRT_PEAK_INT0
    }

    /// IRQ033MON Register bits
    namespace irq033mon_bits {
        constexpr uint32_t FRT_ZERO_INT2 = (1U << 2);  ///< bitfield FRT_ZERO_INT2
        constexpr uint32_t FRT_ZERO_INT1 = (1U << 1);  ///< bitfield FRT_ZERO_INT1
        constexpr uint32_t FRT_ZERO_INT0 = (1U << 0);  ///< bitfield FRT_ZERO_INT0
    }

    /// IRQ034MON Register bits
    namespace irq034mon_bits {
        constexpr uint32_t ICUINT3 = (1U << 3);  ///< bitfield ICUINT3
        constexpr uint32_t ICUINT2 = (1U << 2);  ///< bitfield ICUINT2
        constexpr uint32_t ICUINT1 = (1U << 1);  ///< bitfield ICUINT1
        constexpr uint32_t ICUINT0 = (1U << 0);  ///< bitfield ICUINT0
    }

    /// IRQ035MON Register bits
    namespace irq035mon_bits {
        constexpr uint32_t OCUINT5 = (1U << 5);  ///< bitfield OCUINT5
        constexpr uint32_t OCUINT4 = (1U << 4);  ///< bitfield OCUINT4
        constexpr uint32_t OCUINT3 = (1U << 3);  ///< bitfield OCUINT3
        constexpr uint32_t OCUINT2 = (1U << 2);  ///< bitfield OCUINT2
        constexpr uint32_t OCUINT1 = (1U << 1);  ///< bitfield OCUINT1
        constexpr uint32_t OCUINT0 = (1U << 0);  ///< bitfield OCUINT0
    }

    /// IRQ036MON Register bits
    namespace irq036mon_bits {
        constexpr uint32_t PPGINT2 = (1U << 2);  ///< bitfield PPGINT2
        constexpr uint32_t PPGINT1 = (1U << 1);  ///< bitfield PPGINT1
        constexpr uint32_t PPGINT0 = (1U << 0);  ///< bitfield PPGINT0
    }

    /// IRQ037MON Register bits
    namespace irq037mon_bits {
        constexpr uint32_t PPGINT2 = (1U << 2);  ///< bitfield PPGINT2
        constexpr uint32_t PPGINT1 = (1U << 1);  ///< bitfield PPGINT1
        constexpr uint32_t PPGINT0 = (1U << 0);  ///< bitfield PPGINT0
    }

    /// IRQ038MON Register bits
    namespace irq038mon_bits {
        constexpr uint32_t PPGINT2 = (1U << 2);  ///< bitfield PPGINT2
        constexpr uint32_t PPGINT1 = (1U << 1);  ///< bitfield PPGINT1
        constexpr uint32_t PPGINT0 = (1U << 0);  ///< bitfield PPGINT0
    }

    /// IRQ039MON Register bits
    namespace irq039mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ040MON Register bits
    namespace irq040mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ041MON Register bits
    namespace irq041mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ042MON Register bits
    namespace irq042mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ043MON Register bits
    namespace irq043mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ044MON Register bits
    namespace irq044mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ045MON Register bits
    namespace irq045mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ046MON Register bits
    namespace irq046mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ047MON Register bits
    namespace irq047mon_bits {
        constexpr uint32_t TIMINT2 = (1U << 1);  ///< bitfield TIMINT2
        constexpr uint32_t TIMINT1 = (1U << 0);  ///< bitfield TIMINT1
    }

    /// IRQ048MON Register bits
    namespace irq048mon_bits {
        constexpr uint32_t WCINT = (1U << 0);  ///< bitfield WCINT
    }

    /// IRQ049MON Register bits
    namespace irq049mon_bits {
        constexpr uint32_t BMEMCS = (1U << 0);  ///< bitfield BMEMCS
    }

    /// IRQ050MON Register bits
    namespace irq050mon_bits {
        constexpr uint32_t RTCINT = (1U << 0);  ///< bitfield RTCINT
    }

    /// IRQ051MON Register bits
    namespace irq051mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ052MON Register bits
    namespace irq052mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ053MON Register bits
    namespace irq053mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ054MON Register bits
    namespace irq054mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ055MON Register bits
    namespace irq055mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ056MON Register bits
    namespace irq056mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ057MON Register bits
    namespace irq057mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ058MON Register bits
    namespace irq058mon_bits {
        constexpr uint32_t EXTINT = (1U << 0);  ///< bitfield EXTINT
    }

    /// IRQ059MON Register bits
    namespace irq059mon_bits {
        constexpr uint32_t UPLLINT = (1U << 3);  ///< bitfield UPLLINT
        constexpr uint32_t MPLLINT = (1U << 2);  ///< bitfield MPLLINT
        constexpr uint32_t SOSCINT = (1U << 1);  ///< bitfield SOSCINT
        constexpr uint32_t MOSCINT = (1U << 0);  ///< bitfield MOSCINT
    }

    /// IRQ060MON Register bits
    namespace irq060mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ061MON Register bits
    namespace irq061mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ062MON Register bits
    namespace irq062mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ063MON Register bits
    namespace irq063mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ064MON Register bits
    namespace irq064mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ065MON Register bits
    namespace irq065mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ066MON Register bits
    namespace irq066mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ067MON Register bits
    namespace irq067mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ068MON Register bits
    namespace irq068mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ069MON Register bits
    namespace irq069mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ070MON Register bits
    namespace irq070mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ071MON Register bits
    namespace irq071mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ072MON Register bits
    namespace irq072mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ073MON Register bits
    namespace irq073mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ074MON Register bits
    namespace irq074mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ075MON Register bits
    namespace irq075mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ076MON Register bits
    namespace irq076mon_bits {
        constexpr uint32_t ADCINT4 = (1U << 4);  ///< bitfield ADCINT4
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< bitfield ADCINT3
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< bitfield ADCINT2
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< bitfield ADCINT1
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< bitfield ADCINT0
    }

    /// IRQ077MON Register bits
    namespace irq077mon_bits {
        constexpr uint32_t ADCINT4 = (1U << 4);  ///< bitfield ADCINT4
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< bitfield ADCINT3
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< bitfield ADCINT2
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< bitfield ADCINT1
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< bitfield ADCINT0
    }

    /// IRQ078MON Register bits
    namespace irq078mon_bits {
        constexpr uint32_t USB_DRQ_INT4 = (1U << 4);  ///< bitfield USB_DRQ_INT4
        constexpr uint32_t USB_DRQ_INT3 = (1U << 3);  ///< bitfield USB_DRQ_INT3
        constexpr uint32_t USB_DRQ_INT2 = (1U << 2);  ///< bitfield USB_DRQ_INT2
        constexpr uint32_t USB_DRQ_INT1 = (1U << 1);  ///< bitfield USB_DRQ_INT1
        constexpr uint32_t USB_DRQ_INT0 = (1U << 0);  ///< bitfield USB_DRQ_INT0
    }

    /// IRQ079MON Register bits
    namespace irq079mon_bits {
        constexpr uint32_t USB_INT5 = (1U << 5);  ///< bitfield USB_INT5
        constexpr uint32_t USB_INT4 = (1U << 4);  ///< bitfield USB_INT4
        constexpr uint32_t USB_INT3 = (1U << 3);  ///< bitfield USB_INT3
        constexpr uint32_t USB_INT2 = (1U << 2);  ///< bitfield USB_INT2
        constexpr uint32_t USB_INT1 = (1U << 1);  ///< bitfield USB_INT1
        constexpr uint32_t USB_INT0 = (1U << 0);  ///< bitfield USB_INT0
    }

    /// IRQ080MON Register bits
    namespace irq080mon_bits {
        constexpr uint32_t CANINT = (1U << 0);  ///< bitfield CANINT
    }

    /// IRQ081MON Register bits
    namespace irq081mon_bits {
        constexpr uint32_t CANINT = (1U << 0);  ///< bitfield CANINT
    }

    /// IRQ082MON Register bits
    namespace irq082mon_bits {
        constexpr uint32_t MACLPI = (1U << 2);  ///< bitfield MACLPI
        constexpr uint32_t MACPMT = (1U << 1);  ///< bitfield MACPMT
        constexpr uint32_t MACSBD = (1U << 0);  ///< bitfield MACSBD
    }

    /// IRQ083MON Register bits
    namespace irq083mon_bits {
        constexpr uint32_t DMACINT = (1U << 0);  ///< bitfield DMACINT
    }

    /// IRQ084MON Register bits
    namespace irq084mon_bits {
        constexpr uint32_t DMACINT = (1U << 0);  ///< bitfield DMACINT
    }

    /// IRQ085MON Register bits
    namespace irq085mon_bits {
        constexpr uint32_t DMACINT = (1U << 0);  ///< bitfield DMACINT
    }

    /// IRQ086MON Register bits
    namespace irq086mon_bits {
        constexpr uint32_t DMACINT = (1U << 0);  ///< bitfield DMACINT
    }

    /// IRQ087MON Register bits
    namespace irq087mon_bits {
        constexpr uint32_t DMACINT = (1U << 0);  ///< bitfield DMACINT
    }

    /// IRQ088MON Register bits
    namespace irq088mon_bits {
        constexpr uint32_t DMACINT = (1U << 0);  ///< bitfield DMACINT
    }

    /// IRQ089MON Register bits
    namespace irq089mon_bits {
        constexpr uint32_t DMACINT = (1U << 0);  ///< bitfield DMACINT
    }

    /// IRQ090MON Register bits
    namespace irq090mon_bits {
        constexpr uint32_t DMACINT = (1U << 0);  ///< bitfield DMACINT
    }

    /// IRQ091MON Register bits
    namespace irq091mon_bits {
        constexpr uint32_t DSTCINT1 = (1U << 1);  ///< bitfield DSTCINT1
        constexpr uint32_t DSTCINT0 = (1U << 0);  ///< bitfield DSTCINT0
    }

    /// IRQ092MON Register bits
    namespace irq092mon_bits {
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< bitfield EXTINT3
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< bitfield EXTINT2
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< bitfield EXTINT1
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< bitfield EXTINT0
    }

    /// IRQ093MON Register bits
    namespace irq093mon_bits {
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< bitfield EXTINT3
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< bitfield EXTINT2
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< bitfield EXTINT1
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< bitfield EXTINT0
    }

    /// IRQ094MON Register bits
    namespace irq094mon_bits {
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< bitfield EXTINT3
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< bitfield EXTINT2
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< bitfield EXTINT1
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< bitfield EXTINT0
    }

    /// IRQ095MON Register bits
    namespace irq095mon_bits {
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< bitfield EXTINT3
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< bitfield EXTINT2
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< bitfield EXTINT1
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< bitfield EXTINT0
    }

    /// IRQ096MON Register bits
    namespace irq096mon_bits {
        constexpr uint32_t QUDINT5 = (1U << 5);  ///< bitfield QUDINT5
        constexpr uint32_t QUDINT4 = (1U << 4);  ///< bitfield QUDINT4
        constexpr uint32_t QUDINT3 = (1U << 3);  ///< bitfield QUDINT3
        constexpr uint32_t QUDINT2 = (1U << 2);  ///< bitfield QUDINT2
        constexpr uint32_t QUDINT1 = (1U << 1);  ///< bitfield QUDINT1
        constexpr uint32_t QUDINT0 = (1U << 0);  ///< bitfield QUDINT0
    }

    /// IRQ097MON Register bits
    namespace irq097mon_bits {
        constexpr uint32_t QUDINT5 = (1U << 5);  ///< bitfield QUDINT5
        constexpr uint32_t QUDINT4 = (1U << 4);  ///< bitfield QUDINT4
        constexpr uint32_t QUDINT3 = (1U << 3);  ///< bitfield QUDINT3
        constexpr uint32_t QUDINT2 = (1U << 2);  ///< bitfield QUDINT2
        constexpr uint32_t QUDINT1 = (1U << 1);  ///< bitfield QUDINT1
        constexpr uint32_t QUDINT0 = (1U << 0);  ///< bitfield QUDINT0
    }

    /// IRQ098MON Register bits
    namespace irq098mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ099MON Register bits
    namespace irq099mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ100MON Register bits
    namespace irq100mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ101MON Register bits
    namespace irq101mon_bits {
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ102MON Register bits
    namespace irq102mon_bits {
        constexpr uint32_t BTINT7 = (1U << 7);  ///< bitfield BTINT7
        constexpr uint32_t BTINT6 = (1U << 6);  ///< bitfield BTINT6
        constexpr uint32_t BTINT5 = (1U << 5);  ///< bitfield BTINT5
        constexpr uint32_t BTINT4 = (1U << 4);  ///< bitfield BTINT4
        constexpr uint32_t BTINT3 = (1U << 3);  ///< bitfield BTINT3
        constexpr uint32_t BTINT2 = (1U << 2);  ///< bitfield BTINT2
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ103MON Register bits
    namespace irq103mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ104MON Register bits
    namespace irq104mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ105MON Register bits
    namespace irq105mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ106MON Register bits
    namespace irq106mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ107MON Register bits
    namespace irq107mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ108MON Register bits
    namespace irq108mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ109MON Register bits
    namespace irq109mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ110MON Register bits
    namespace irq110mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ111MON Register bits
    namespace irq111mon_bits {
        constexpr uint32_t ADCINT4 = (1U << 4);  ///< bitfield ADCINT4
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< bitfield ADCINT3
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< bitfield ADCINT2
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< bitfield ADCINT1
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< bitfield ADCINT0
    }

    /// IRQ113MON Register bits
    namespace irq113mon_bits {
        constexpr uint32_t USB_DRQ_INT4 = (1U << 4);  ///< bitfield USB_DRQ_INT4
        constexpr uint32_t USB_DRQ_INT3 = (1U << 3);  ///< bitfield USB_DRQ_INT3
        constexpr uint32_t USB_DRQ_INT2 = (1U << 2);  ///< bitfield USB_DRQ_INT2
        constexpr uint32_t USB_DRQ_INT1 = (1U << 1);  ///< bitfield USB_DRQ_INT1
        constexpr uint32_t USB_DRQ_INT0 = (1U << 0);  ///< bitfield USB_DRQ_INT0
    }

    /// IRQ114MON Register bits
    namespace irq114mon_bits {
        constexpr uint32_t USB_INT5 = (1U << 5);  ///< bitfield USB_INT5
        constexpr uint32_t USB_INT4 = (1U << 4);  ///< bitfield USB_INT4
        constexpr uint32_t USB_INT3 = (1U << 3);  ///< bitfield USB_INT3
        constexpr uint32_t USB_INT2 = (1U << 2);  ///< bitfield USB_INT2
        constexpr uint32_t USB_INT1 = (1U << 1);  ///< bitfield USB_INT1
        constexpr uint32_t USB_INT0 = (1U << 0);  ///< bitfield USB_INT0
    }

    /// IRQ118MON Register bits
    namespace irq118mon_bits {
        constexpr uint32_t SDINT1 = (1U << 1);  ///< bitfield SDINT1
        constexpr uint32_t SDINT0 = (1U << 0);  ///< bitfield SDINT0
    }

    /// IRQ119MON Register bits
    namespace irq119mon_bits {
        constexpr uint32_t FLINT = (1U << 0);  ///< bitfield FLINT
    }

    /// IRQ120MON Register bits
    namespace irq120mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ121MON Register bits
    namespace irq121mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ122MON Register bits
    namespace irq122mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ123MON Register bits
    namespace irq123mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ124MON Register bits
    namespace irq124mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ125MON Register bits
    namespace irq125mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ126MON Register bits
    namespace irq126mon_bits {
        constexpr uint32_t MFSRINT = (1U << 0);  ///< bitfield MFSRINT
    }

    /// IRQ127MON Register bits
    namespace irq127mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_BASE = 0x4006F000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t PFR0;  ///< Offset: 0x00 - register PFR0
        volatile uint32_t PFR1;  ///< Offset: 0x04 - register PFR1
        volatile uint32_t PFR2;  ///< Offset: 0x08 - register PFR2
        volatile uint32_t PFR3;  ///< Offset: 0x0C - register PFR3
        volatile uint32_t PFR4;  ///< Offset: 0x10 - register PFR4
        volatile uint32_t PFR5;  ///< Offset: 0x14 - register PFR5
        volatile uint32_t PFR6;  ///< Offset: 0x18 - register PFR6
        volatile uint32_t PFR7;  ///< Offset: 0x1C - register PFR7
        volatile uint32_t PFR8;  ///< Offset: 0x20 - register PFR8
        volatile uint32_t PFRE;  ///< Offset: 0x38 - register PFRE
        volatile uint32_t PCR0;  ///< Offset: 0x100 - register PCR0
        volatile uint32_t PCR1;  ///< Offset: 0x104 - register PCR1
        volatile uint32_t PCR2;  ///< Offset: 0x108 - register PCR2
        volatile uint32_t PCR3;  ///< Offset: 0x10C - register PCR3
        volatile uint32_t PCR4;  ///< Offset: 0x110 - register PCR4
        volatile uint32_t PCR5;  ///< Offset: 0x114 - register PCR5
        volatile uint32_t PCR6;  ///< Offset: 0x118 - register PCR6
        volatile uint32_t PCR7;  ///< Offset: 0x11C - register PCR7
        volatile uint32_t PCR8;  ///< Offset: 0x120 - register PCR8
        volatile uint32_t PCRE;  ///< Offset: 0x138 - register PCRE
        volatile uint32_t DDR0;  ///< Offset: 0x200 - register DDR0
        volatile uint32_t DDR1;  ///< Offset: 0x204 - register DDR1
        volatile uint32_t DDR2;  ///< Offset: 0x208 - register DDR2
        volatile uint32_t DDR3;  ///< Offset: 0x20C - register DDR3
        volatile uint32_t DDR4;  ///< Offset: 0x210 - register DDR4
        volatile uint32_t DDR5;  ///< Offset: 0x214 - register DDR5
        volatile uint32_t DDR6;  ///< Offset: 0x218 - register DDR6
        volatile uint32_t DDR7;  ///< Offset: 0x21C - register DDR7
        volatile uint32_t DDR8;  ///< Offset: 0x220 - register DDR8
        volatile uint32_t DDRE;  ///< Offset: 0x238 - register DDRE
        volatile uint32_t PDIR0;  ///< Offset: 0x300 - register PDIR0
        volatile uint32_t PDIR1;  ///< Offset: 0x304 - register PDIR1
        volatile uint32_t PDIR2;  ///< Offset: 0x308 - register PDIR2
        volatile uint32_t PDIR3;  ///< Offset: 0x30C - register PDIR3
        volatile uint32_t PDIR4;  ///< Offset: 0x310 - register PDIR4
        volatile uint32_t PDIR5;  ///< Offset: 0x314 - register PDIR5
        volatile uint32_t PDIR6;  ///< Offset: 0x318 - register PDIR6
        volatile uint32_t PDIR7;  ///< Offset: 0x31C - register PDIR7
        volatile uint32_t PDIR8;  ///< Offset: 0x320 - register PDIR8
        volatile uint32_t PDIRE;  ///< Offset: 0x338 - register PDIRE
        volatile uint32_t PDOR0;  ///< Offset: 0x400 - register PDOR0
        volatile uint32_t PDOR1;  ///< Offset: 0x404 - register PDOR1
        volatile uint32_t PDOR2;  ///< Offset: 0x408 - register PDOR2
        volatile uint32_t PDOR3;  ///< Offset: 0x40C - register PDOR3
        volatile uint32_t PDOR4;  ///< Offset: 0x410 - register PDOR4
        volatile uint32_t PDOR5;  ///< Offset: 0x414 - register PDOR5
        volatile uint32_t PDOR6;  ///< Offset: 0x418 - register PDOR6
        volatile uint32_t PDOR7;  ///< Offset: 0x41C - register PDOR7
        volatile uint32_t PDOR8;  ///< Offset: 0x420 - register PDOR8
        volatile uint32_t PDORE;  ///< Offset: 0x438 - register PDORE
        volatile uint32_t ADE;  ///< Offset: 0x500 - register ADE
        volatile uint32_t SPSR;  ///< Offset: 0x580 - register SPSR
        volatile uint32_t EPFR00;  ///< Offset: 0x600 - register EPFR00
        volatile uint32_t EPFR01;  ///< Offset: 0x604 - register EPFR01
        volatile uint32_t EPFR02;  ///< Offset: 0x608 - register EPFR02
        volatile uint32_t EPFR03;  ///< Offset: 0x60C - register EPFR03
        volatile uint32_t EPFR04;  ///< Offset: 0x610 - register EPFR04
        volatile uint32_t EPFR05;  ///< Offset: 0x614 - register EPFR05
        volatile uint32_t EPFR06;  ///< Offset: 0x618 - register EPFR06
        volatile uint32_t EPFR07;  ///< Offset: 0x61C - register EPFR07
        volatile uint32_t EPFR08;  ///< Offset: 0x620 - register EPFR08
        volatile uint32_t EPFR09;  ///< Offset: 0x624 - register EPFR09
        volatile uint32_t EPFR10;  ///< Offset: 0x628 - register EPFR10
        volatile uint32_t EPFR11;  ///< Offset: 0x62C - register EPFR11
        volatile uint32_t EPFR12;  ///< Offset: 0x630 - register EPFR12
        volatile uint32_t EPFR13;  ///< Offset: 0x634 - register EPFR13
        volatile uint32_t EPFR14;  ///< Offset: 0x638 - register EPFR14
        volatile uint32_t EPFR15;  ///< Offset: 0x63C - register EPFR15
        volatile uint32_t EPFR16;  ///< Offset: 0x640 - register EPFR16
        volatile uint32_t EPFR17;  ///< Offset: 0x644 - register EPFR17
        volatile uint32_t EPFR18;  ///< Offset: 0x648 - register EPFR18
        volatile uint32_t EPFR19;  ///< Offset: 0x64C - register EPFR19
        volatile uint32_t EPFR20;  ///< Offset: 0x650 - register EPFR20
        volatile uint32_t PZR0;  ///< Offset: 0x700 - register PZR0
        volatile uint32_t PZR1;  ///< Offset: 0x704 - register PZR1
        volatile uint32_t PZR2;  ///< Offset: 0x708 - register PZR2
        volatile uint32_t PZR3;  ///< Offset: 0x70C - register PZR3
        volatile uint32_t PZR4;  ///< Offset: 0x710 - register PZR4
        volatile uint32_t PZR5;  ///< Offset: 0x714 - register PZR5
        volatile uint32_t PZR6;  ///< Offset: 0x718 - register PZR6
        volatile uint32_t PZR7;  ///< Offset: 0x71C - register PZR7
        volatile uint32_t PZR8;  ///< Offset: 0x720 - register PZR8
        volatile uint32_t PZRE;  ///< Offset: 0x738 - register PZRE
    };

    /// Peripheral instances
    inline Registers* GPIO = reinterpret_cast<Registers*>(GPIO_BASE);

    // Bit definitions
    /// PFR0 Register bits
    namespace pfr0_bits {
        constexpr uint32_t P0E = (1U << 14);  ///< bitfield P0E
        constexpr uint32_t P0D = (1U << 13);  ///< bitfield P0D
        constexpr uint32_t P0C = (1U << 12);  ///< bitfield P0C
        constexpr uint32_t P0B = (1U << 11);  ///< bitfield P0B
        constexpr uint32_t P0A = (1U << 10);  ///< bitfield P0A
        constexpr uint32_t P09 = (1U << 9);  ///< bitfield P09
        constexpr uint32_t P08 = (1U << 8);  ///< bitfield P08
        constexpr uint32_t P07 = (1U << 7);  ///< bitfield P07
        constexpr uint32_t P06 = (1U << 6);  ///< bitfield P06
        constexpr uint32_t P05 = (1U << 5);  ///< bitfield P05
        constexpr uint32_t P04 = (1U << 4);  ///< bitfield P04
        constexpr uint32_t P03 = (1U << 3);  ///< bitfield P03
        constexpr uint32_t P02 = (1U << 2);  ///< bitfield P02
        constexpr uint32_t P01 = (1U << 1);  ///< bitfield P01
        constexpr uint32_t P00 = (1U << 0);  ///< bitfield P00
    }

    /// PFR1 Register bits
    namespace pfr1_bits {
        constexpr uint32_t P1F = (1U << 15);  ///< bitfield P1F
        constexpr uint32_t P1E = (1U << 14);  ///< bitfield P1E
        constexpr uint32_t P1D = (1U << 13);  ///< bitfield P1D
        constexpr uint32_t P1C = (1U << 12);  ///< bitfield P1C
        constexpr uint32_t P1B = (1U << 11);  ///< bitfield P1B
        constexpr uint32_t P1A = (1U << 10);  ///< bitfield P1A
        constexpr uint32_t P19 = (1U << 9);  ///< bitfield P19
        constexpr uint32_t P18 = (1U << 8);  ///< bitfield P18
        constexpr uint32_t P17 = (1U << 7);  ///< bitfield P17
        constexpr uint32_t P16 = (1U << 6);  ///< bitfield P16
        constexpr uint32_t P15 = (1U << 5);  ///< bitfield P15
        constexpr uint32_t P14 = (1U << 4);  ///< bitfield P14
        constexpr uint32_t P13 = (1U << 3);  ///< bitfield P13
        constexpr uint32_t P12 = (1U << 2);  ///< bitfield P12
        constexpr uint32_t P11 = (1U << 1);  ///< bitfield P11
        constexpr uint32_t P10 = (1U << 0);  ///< bitfield P10
    }

    /// PFR2 Register bits
    namespace pfr2_bits {
        constexpr uint32_t P27 = (1U << 7);  ///< bitfield P27
        constexpr uint32_t P26 = (1U << 6);  ///< bitfield P26
        constexpr uint32_t P25 = (1U << 5);  ///< bitfield P25
        constexpr uint32_t P24 = (1U << 4);  ///< bitfield P24
        constexpr uint32_t P23 = (1U << 3);  ///< bitfield P23
        constexpr uint32_t P22 = (1U << 2);  ///< bitfield P22
        constexpr uint32_t P21 = (1U << 1);  ///< bitfield P21
        constexpr uint32_t P20 = (1U << 0);  ///< bitfield P20
    }

    /// PFR3 Register bits
    namespace pfr3_bits {
        constexpr uint32_t P3F = (1U << 15);  ///< bitfield P3F
        constexpr uint32_t P3E = (1U << 14);  ///< bitfield P3E
        constexpr uint32_t P3D = (1U << 13);  ///< bitfield P3D
        constexpr uint32_t P3C = (1U << 12);  ///< bitfield P3C
        constexpr uint32_t P3B = (1U << 11);  ///< bitfield P3B
        constexpr uint32_t P3A = (1U << 10);  ///< bitfield P3A
        constexpr uint32_t P39 = (1U << 9);  ///< bitfield P39
        constexpr uint32_t P38 = (1U << 8);  ///< bitfield P38
        constexpr uint32_t P37 = (1U << 7);  ///< bitfield P37
        constexpr uint32_t P36 = (1U << 6);  ///< bitfield P36
        constexpr uint32_t P35 = (1U << 5);  ///< bitfield P35
        constexpr uint32_t P34 = (1U << 4);  ///< bitfield P34
        constexpr uint32_t P33 = (1U << 3);  ///< bitfield P33
        constexpr uint32_t P32 = (1U << 2);  ///< bitfield P32
        constexpr uint32_t P31 = (1U << 1);  ///< bitfield P31
        constexpr uint32_t P30 = (1U << 0);  ///< bitfield P30
    }

    /// PFR4 Register bits
    namespace pfr4_bits {
        constexpr uint32_t P4E = (1U << 14);  ///< bitfield P4E
        constexpr uint32_t P4D = (1U << 13);  ///< bitfield P4D
        constexpr uint32_t P4C = (1U << 12);  ///< bitfield P4C
        constexpr uint32_t P4B = (1U << 11);  ///< bitfield P4B
        constexpr uint32_t P4A = (1U << 10);  ///< bitfield P4A
        constexpr uint32_t P49 = (1U << 9);  ///< bitfield P49
        constexpr uint32_t P48 = (1U << 8);  ///< bitfield P48
        constexpr uint32_t P47 = (1U << 7);  ///< bitfield P47
        constexpr uint32_t P46 = (1U << 6);  ///< bitfield P46
        constexpr uint32_t P45 = (1U << 5);  ///< bitfield P45
        constexpr uint32_t P44 = (1U << 4);  ///< bitfield P44
        constexpr uint32_t P43 = (1U << 3);  ///< bitfield P43
        constexpr uint32_t P42 = (1U << 2);  ///< bitfield P42
        constexpr uint32_t P41 = (1U << 1);  ///< bitfield P41
        constexpr uint32_t P40 = (1U << 0);  ///< bitfield P40
    }

    /// PFR5 Register bits
    namespace pfr5_bits {
        constexpr uint32_t P5B = (1U << 11);  ///< bitfield P5B
        constexpr uint32_t P5A = (1U << 10);  ///< bitfield P5A
        constexpr uint32_t P59 = (1U << 9);  ///< bitfield P59
        constexpr uint32_t P58 = (1U << 8);  ///< bitfield P58
        constexpr uint32_t P57 = (1U << 7);  ///< bitfield P57
        constexpr uint32_t P56 = (1U << 6);  ///< bitfield P56
        constexpr uint32_t P55 = (1U << 5);  ///< bitfield P55
        constexpr uint32_t P54 = (1U << 4);  ///< bitfield P54
        constexpr uint32_t P53 = (1U << 3);  ///< bitfield P53
        constexpr uint32_t P52 = (1U << 2);  ///< bitfield P52
        constexpr uint32_t P51 = (1U << 1);  ///< bitfield P51
        constexpr uint32_t P50 = (1U << 0);  ///< bitfield P50
    }

    /// PFR6 Register bits
    namespace pfr6_bits {
        constexpr uint32_t P68 = (1U << 8);  ///< bitfield P68
        constexpr uint32_t P67 = (1U << 7);  ///< bitfield P67
        constexpr uint32_t P66 = (1U << 6);  ///< bitfield P66
        constexpr uint32_t P65 = (1U << 5);  ///< bitfield P65
        constexpr uint32_t P64 = (1U << 4);  ///< bitfield P64
        constexpr uint32_t P63 = (1U << 3);  ///< bitfield P63
        constexpr uint32_t P62 = (1U << 2);  ///< bitfield P62
        constexpr uint32_t P61 = (1U << 1);  ///< bitfield P61
        constexpr uint32_t P60 = (1U << 0);  ///< bitfield P60
    }

    /// PFR7 Register bits
    namespace pfr7_bits {
        constexpr uint32_t P74 = (1U << 4);  ///< bitfield P74
        constexpr uint32_t P73 = (1U << 3);  ///< bitfield P73
        constexpr uint32_t P72 = (1U << 2);  ///< bitfield P72
        constexpr uint32_t P71 = (1U << 1);  ///< bitfield P71
        constexpr uint32_t P70 = (1U << 0);  ///< bitfield P70
    }

    /// PFR8 Register bits
    namespace pfr8_bits {
        constexpr uint32_t P81 = (1U << 1);  ///< bitfield P81
        constexpr uint32_t P80 = (1U << 0);  ///< bitfield P80
    }

    /// PFRE Register bits
    namespace pfre_bits {
        constexpr uint32_t PE3 = (1U << 3);  ///< bitfield PE3
        constexpr uint32_t PE2 = (1U << 2);  ///< bitfield PE2
        constexpr uint32_t PE0 = (1U << 0);  ///< bitfield PE0
    }

    /// DDR0 Register bits
    namespace ddr0_bits {
        constexpr uint32_t P0F = (1U << 15);  ///< bitfield P0F
        constexpr uint32_t P0E = (1U << 14);  ///< bitfield P0E
        constexpr uint32_t P0D = (1U << 13);  ///< bitfield P0D
        constexpr uint32_t P0C = (1U << 12);  ///< bitfield P0C
        constexpr uint32_t P0B = (1U << 11);  ///< bitfield P0B
        constexpr uint32_t P0A = (1U << 10);  ///< bitfield P0A
        constexpr uint32_t P09 = (1U << 9);  ///< bitfield P09
        constexpr uint32_t P08 = (1U << 8);  ///< bitfield P08
        constexpr uint32_t P07 = (1U << 7);  ///< bitfield P07
        constexpr uint32_t P06 = (1U << 6);  ///< bitfield P06
        constexpr uint32_t P05 = (1U << 5);  ///< bitfield P05
        constexpr uint32_t P04 = (1U << 4);  ///< bitfield P04
        constexpr uint32_t P03 = (1U << 3);  ///< bitfield P03
        constexpr uint32_t P02 = (1U << 2);  ///< bitfield P02
        constexpr uint32_t P01 = (1U << 1);  ///< bitfield P01
        constexpr uint32_t P00 = (1U << 0);  ///< bitfield P00
    }

    /// ADE Register bits
    namespace ade_bits {
        constexpr uint32_t AN31 = (1U << 31);  ///< bitfield AN31
        constexpr uint32_t AN30 = (1U << 30);  ///< bitfield AN30
        constexpr uint32_t AN29 = (1U << 29);  ///< bitfield AN29
        constexpr uint32_t AN28 = (1U << 28);  ///< bitfield AN28
        constexpr uint32_t AN27 = (1U << 27);  ///< bitfield AN27
        constexpr uint32_t AN26 = (1U << 26);  ///< bitfield AN26
        constexpr uint32_t AN25 = (1U << 25);  ///< bitfield AN25
        constexpr uint32_t AN24 = (1U << 24);  ///< bitfield AN24
        constexpr uint32_t AN23 = (1U << 23);  ///< bitfield AN23
        constexpr uint32_t AN22 = (1U << 22);  ///< bitfield AN22
        constexpr uint32_t AN21 = (1U << 21);  ///< bitfield AN21
        constexpr uint32_t AN20 = (1U << 20);  ///< bitfield AN20
        constexpr uint32_t AN19 = (1U << 19);  ///< bitfield AN19
        constexpr uint32_t AN18 = (1U << 18);  ///< bitfield AN18
        constexpr uint32_t AN17 = (1U << 17);  ///< bitfield AN17
        constexpr uint32_t AN16 = (1U << 16);  ///< bitfield AN16
        constexpr uint32_t AN15 = (1U << 15);  ///< bitfield AN15
        constexpr uint32_t AN14 = (1U << 14);  ///< bitfield AN14
        constexpr uint32_t AN13 = (1U << 13);  ///< bitfield AN13
        constexpr uint32_t AN12 = (1U << 12);  ///< bitfield AN12
        constexpr uint32_t AN11 = (1U << 11);  ///< bitfield AN11
        constexpr uint32_t AN10 = (1U << 10);  ///< bitfield AN10
        constexpr uint32_t AN09 = (1U << 9);  ///< bitfield AN09
        constexpr uint32_t AN08 = (1U << 8);  ///< bitfield AN08
        constexpr uint32_t AN07 = (1U << 7);  ///< bitfield AN07
        constexpr uint32_t AN06 = (1U << 6);  ///< bitfield AN06
        constexpr uint32_t AN05 = (1U << 5);  ///< bitfield AN05
        constexpr uint32_t AN04 = (1U << 4);  ///< bitfield AN04
        constexpr uint32_t AN03 = (1U << 3);  ///< bitfield AN03
        constexpr uint32_t AN02 = (1U << 2);  ///< bitfield AN02
        constexpr uint32_t AN01 = (1U << 1);  ///< bitfield AN01
        constexpr uint32_t AN00 = (1U << 0);  ///< bitfield AN00
    }

    /// SPSR Register bits
    namespace spsr_bits {
        constexpr uint32_t USB1C = (1U << 5);  ///< bitfield USB1C
        constexpr uint32_t USB0C = (1U << 4);  ///< bitfield USB0C
        constexpr uint32_t MAINXC = (2 << 2);  ///< bitfield MAINXC
    }

    /// EPFR00 Register bits
    namespace epfr00_bits {
        constexpr uint32_t TRC1E = (1U << 25);  ///< bitfield TRC1E
        constexpr uint32_t TRC0E = (1U << 24);  ///< bitfield TRC0E
        constexpr uint32_t JTAGEN1S = (1U << 17);  ///< bitfield JTAGEN1S
        constexpr uint32_t JTAGEN0B = (1U << 16);  ///< bitfield JTAGEN0B
        constexpr uint32_t USBP1E = (1U << 13);  ///< bitfield USBP1E
        constexpr uint32_t USBP0E = (1U << 9);  ///< bitfield USBP0E
        constexpr uint32_t SUBOUTE = (2 << 6);  ///< bitfield SUBOUTE
        constexpr uint32_t RTCCOE = (2 << 4);  ///< bitfield RTCCOE
        constexpr uint32_t CROUTE = (2 << 1);  ///< bitfield CROUTE
        constexpr uint32_t NMIS = (1U << 0);  ///< bitfield NMIS
    }

    /// EPFR01 Register bits
    namespace epfr01_bits {
        constexpr uint32_t IC03S = (3 << 29);  ///< bitfield IC03S
        constexpr uint32_t IC02S = (3 << 26);  ///< bitfield IC02S
        constexpr uint32_t IC01S = (3 << 23);  ///< bitfield IC01S
        constexpr uint32_t IC00S = (3 << 20);  ///< bitfield IC00S
        constexpr uint32_t FRCK0S = (2 << 18);  ///< bitfield FRCK0S
        constexpr uint32_t DTTI0S = (2 << 16);  ///< bitfield DTTI0S
        constexpr uint32_t DTTI0C = (1U << 12);  ///< bitfield DTTI0C
        constexpr uint32_t RTO05E = (2 << 10);  ///< bitfield RTO05E
        constexpr uint32_t RTO04E = (2 << 8);  ///< bitfield RTO04E
        constexpr uint32_t RTO03E = (2 << 6);  ///< bitfield RTO03E
        constexpr uint32_t RTO02E = (2 << 4);  ///< bitfield RTO02E
        constexpr uint32_t RTO01E = (2 << 2);  ///< bitfield RTO01E
        constexpr uint32_t RTO00E = (2 << 0);  ///< bitfield RTO00E
    }

    /// EPFR02 Register bits
    namespace epfr02_bits {
        constexpr uint32_t IC13S = (3 << 29);  ///< bitfield IC13S
        constexpr uint32_t IC12S = (3 << 26);  ///< bitfield IC12S
        constexpr uint32_t IC11S = (3 << 23);  ///< bitfield IC11S
        constexpr uint32_t IC10S = (3 << 20);  ///< bitfield IC10S
        constexpr uint32_t FRCK1S = (2 << 18);  ///< bitfield FRCK1S
        constexpr uint32_t DTTI1S = (2 << 16);  ///< bitfield DTTI1S
        constexpr uint32_t DTTI1C = (1U << 12);  ///< bitfield DTTI1C
        constexpr uint32_t RTO15E = (2 << 10);  ///< bitfield RTO15E
        constexpr uint32_t RTO14E = (2 << 8);  ///< bitfield RTO14E
        constexpr uint32_t RTO13E = (2 << 6);  ///< bitfield RTO13E
        constexpr uint32_t RTO12E = (2 << 4);  ///< bitfield RTO12E
        constexpr uint32_t RTO11E = (2 << 2);  ///< bitfield RTO11E
        constexpr uint32_t RTO10E = (2 << 0);  ///< bitfield RTO10E
    }

    /// EPFR03 Register bits
    namespace epfr03_bits {
        constexpr uint32_t IC23S = (3 << 29);  ///< bitfield IC23S
        constexpr uint32_t IC22S = (3 << 26);  ///< bitfield IC22S
        constexpr uint32_t IC21S = (3 << 23);  ///< bitfield IC21S
        constexpr uint32_t IC20S = (3 << 20);  ///< bitfield IC20S
        constexpr uint32_t FRCK2S = (2 << 18);  ///< bitfield FRCK2S
        constexpr uint32_t DTTI2S = (2 << 16);  ///< bitfield DTTI2S
        constexpr uint32_t DTTI2C = (1U << 12);  ///< bitfield DTTI2C
        constexpr uint32_t RTO25E = (2 << 10);  ///< bitfield RTO25E
        constexpr uint32_t RTO24E = (2 << 8);  ///< bitfield RTO24E
        constexpr uint32_t RTO23E = (2 << 6);  ///< bitfield RTO23E
        constexpr uint32_t RTO22E = (2 << 4);  ///< bitfield RTO22E
        constexpr uint32_t RTO21E = (2 << 2);  ///< bitfield RTO21E
        constexpr uint32_t RTO20E = (2 << 0);  ///< bitfield RTO20E
    }

    /// EPFR04 Register bits
    namespace epfr04_bits {
        constexpr uint32_t TIOB3S = (2 << 28);  ///< bitfield TIOB3S
        constexpr uint32_t TIOA3E = (2 << 26);  ///< bitfield TIOA3E
        constexpr uint32_t TIOA3S = (2 << 24);  ///< bitfield TIOA3S
        constexpr uint32_t TIOB2S = (2 << 20);  ///< bitfield TIOB2S
        constexpr uint32_t TIOA2E = (2 << 18);  ///< bitfield TIOA2E
        constexpr uint32_t TIOB1S = (2 << 12);  ///< bitfield TIOB1S
        constexpr uint32_t TIOA1E = (2 << 10);  ///< bitfield TIOA1E
        constexpr uint32_t TIOA1S = (2 << 8);  ///< bitfield TIOA1S
        constexpr uint32_t TIOB0S = (3 << 4);  ///< bitfield TIOB0S
        constexpr uint32_t TIOA0E = (2 << 2);  ///< bitfield TIOA0E
    }

    /// EPFR05 Register bits
    namespace epfr05_bits {
        constexpr uint32_t TIOB7S = (2 << 28);  ///< bitfield TIOB7S
        constexpr uint32_t TIOA7E = (2 << 26);  ///< bitfield TIOA7E
        constexpr uint32_t TIOA7S = (2 << 24);  ///< bitfield TIOA7S
        constexpr uint32_t TIOB6S = (2 << 20);  ///< bitfield TIOB6S
        constexpr uint32_t TIOA6E = (2 << 18);  ///< bitfield TIOA6E
        constexpr uint32_t TIOB5S = (2 << 12);  ///< bitfield TIOB5S
        constexpr uint32_t TIOA5E = (2 << 10);  ///< bitfield TIOA5E
        constexpr uint32_t TIOA5S = (2 << 8);  ///< bitfield TIOA5S
        constexpr uint32_t TIOB4S = (2 << 4);  ///< bitfield TIOB4S
        constexpr uint32_t TIOA4E = (2 << 2);  ///< bitfield TIOA4E
    }

    /// EPFR06 Register bits
    namespace epfr06_bits {
        constexpr uint32_t EINT15S = (2 << 30);  ///< bitfield EINT15S
        constexpr uint32_t EINT14S = (2 << 28);  ///< bitfield EINT14S
        constexpr uint32_t EINT13S = (2 << 26);  ///< bitfield EINT13S
        constexpr uint32_t EINT12S = (2 << 24);  ///< bitfield EINT12S
        constexpr uint32_t EINT11S = (2 << 22);  ///< bitfield EINT11S
        constexpr uint32_t EINT10S = (2 << 20);  ///< bitfield EINT10S
        constexpr uint32_t EINT09S = (2 << 18);  ///< bitfield EINT09S
        constexpr uint32_t EINT08S = (2 << 16);  ///< bitfield EINT08S
        constexpr uint32_t EINT07S = (2 << 14);  ///< bitfield EINT07S
        constexpr uint32_t EINT06S = (2 << 12);  ///< bitfield EINT06S
        constexpr uint32_t EINT05S = (2 << 10);  ///< bitfield EINT05S
        constexpr uint32_t EINT04S = (2 << 8);  ///< bitfield EINT04S
        constexpr uint32_t EINT03S = (2 << 6);  ///< bitfield EINT03S
        constexpr uint32_t EINT02S = (2 << 4);  ///< bitfield EINT02S
        constexpr uint32_t EINT01S = (2 << 2);  ///< bitfield EINT01S
        constexpr uint32_t EINT00S = (2 << 0);  ///< bitfield EINT00S
    }

    /// EPFR07 Register bits
    namespace epfr07_bits {
        constexpr uint32_t SCK3B = (2 << 26);  ///< bitfield SCK3B
        constexpr uint32_t SOT3B = (2 << 24);  ///< bitfield SOT3B
        constexpr uint32_t SIN3S = (2 << 22);  ///< bitfield SIN3S
        constexpr uint32_t SCK2B = (2 << 20);  ///< bitfield SCK2B
        constexpr uint32_t SOT2B = (2 << 18);  ///< bitfield SOT2B
        constexpr uint32_t SIN2S = (2 << 16);  ///< bitfield SIN2S
        constexpr uint32_t SCK1B = (2 << 14);  ///< bitfield SCK1B
        constexpr uint32_t SOT1B = (2 << 12);  ///< bitfield SOT1B
        constexpr uint32_t SIN1S = (2 << 10);  ///< bitfield SIN1S
        constexpr uint32_t SCK0B = (2 << 8);  ///< bitfield SCK0B
        constexpr uint32_t SOT0B = (2 << 6);  ///< bitfield SOT0B
        constexpr uint32_t SIN0S = (2 << 4);  ///< bitfield SIN0S
    }

    /// EPFR08 Register bits
    namespace epfr08_bits {
        constexpr uint32_t CTS5S = (2 << 30);  ///< bitfield CTS5S
        constexpr uint32_t RTS5E = (2 << 28);  ///< bitfield RTS5E
        constexpr uint32_t SCK7B = (2 << 26);  ///< bitfield SCK7B
        constexpr uint32_t SOT7B = (2 << 24);  ///< bitfield SOT7B
        constexpr uint32_t SIN7S = (2 << 22);  ///< bitfield SIN7S
        constexpr uint32_t SCK6B = (2 << 20);  ///< bitfield SCK6B
        constexpr uint32_t SOT6B = (2 << 18);  ///< bitfield SOT6B
        constexpr uint32_t SIN6S = (2 << 16);  ///< bitfield SIN6S
        constexpr uint32_t SCK5B = (2 << 14);  ///< bitfield SCK5B
        constexpr uint32_t SOT5B = (2 << 12);  ///< bitfield SOT5B
        constexpr uint32_t SIN5S = (2 << 10);  ///< bitfield SIN5S
        constexpr uint32_t SCK4B = (2 << 8);  ///< bitfield SCK4B
        constexpr uint32_t SOT4B = (2 << 6);  ///< bitfield SOT4B
        constexpr uint32_t SIN4S = (2 << 4);  ///< bitfield SIN4S
        constexpr uint32_t CTS4S = (2 << 2);  ///< bitfield CTS4S
        constexpr uint32_t RTS4E = (2 << 0);  ///< bitfield RTS4E
    }

    /// EPFR09 Register bits
    namespace epfr09_bits {
        constexpr uint32_t CTX1E = (2 << 30);  ///< bitfield CTX1E
        constexpr uint32_t CRX1S = (2 << 28);  ///< bitfield CRX1S
        constexpr uint32_t CTX0E = (2 << 26);  ///< bitfield CTX0E
        constexpr uint32_t CRX0S = (2 << 24);  ///< bitfield CRX0S
        constexpr uint32_t ADTRG2S = (4 << 20);  ///< bitfield ADTRG2S
        constexpr uint32_t ADTRG1S = (4 << 16);  ///< bitfield ADTRG1S
        constexpr uint32_t ADTRG0S = (4 << 12);  ///< bitfield ADTRG0S
        constexpr uint32_t QZIN1S = (2 << 10);  ///< bitfield QZIN1S
        constexpr uint32_t QBIN1S = (2 << 8);  ///< bitfield QBIN1S
        constexpr uint32_t QAIN1S = (2 << 6);  ///< bitfield QAIN1S
        constexpr uint32_t QZIN0S = (2 << 4);  ///< bitfield QZIN0S
        constexpr uint32_t QBIN0S = (2 << 2);  ///< bitfield QBIN0S
        constexpr uint32_t QAIN0S = (2 << 0);  ///< bitfield QAIN0S
    }

    /// EPFR10 Register bits
    namespace epfr10_bits {
        constexpr uint32_t UEA24E = (1U << 31);  ///< bitfield UEA24E
        constexpr uint32_t UEA23E = (1U << 30);  ///< bitfield UEA23E
        constexpr uint32_t UEA22E = (1U << 29);  ///< bitfield UEA22E
        constexpr uint32_t UEA21E = (1U << 28);  ///< bitfield UEA21E
        constexpr uint32_t UEA20E = (1U << 27);  ///< bitfield UEA20E
        constexpr uint32_t UEA19E = (1U << 26);  ///< bitfield UEA19E
        constexpr uint32_t UEA18E = (1U << 25);  ///< bitfield UEA18E
        constexpr uint32_t UEA17E = (1U << 24);  ///< bitfield UEA17E
        constexpr uint32_t UEA16E = (1U << 23);  ///< bitfield UEA16E
        constexpr uint32_t UEA15E = (1U << 22);  ///< bitfield UEA15E
        constexpr uint32_t UEA14E = (1U << 21);  ///< bitfield UEA14E
        constexpr uint32_t UEA13E = (1U << 20);  ///< bitfield UEA13E
        constexpr uint32_t UEA12E = (1U << 19);  ///< bitfield UEA12E
        constexpr uint32_t UEA11E = (1U << 18);  ///< bitfield UEA11E
        constexpr uint32_t UEA10E = (1U << 17);  ///< bitfield UEA10E
        constexpr uint32_t UEA09E = (1U << 16);  ///< bitfield UEA09E
        constexpr uint32_t UEA08E = (1U << 15);  ///< bitfield UEA08E
        constexpr uint32_t UEAOOE = (1U << 14);  ///< bitfield UEAOOE
        constexpr uint32_t UECS7E = (1U << 13);  ///< bitfield UECS7E
        constexpr uint32_t UECS6E = (1U << 12);  ///< bitfield UECS6E
        constexpr uint32_t UECS5E = (1U << 11);  ///< bitfield UECS5E
        constexpr uint32_t UECS4E = (1U << 10);  ///< bitfield UECS4E
        constexpr uint32_t UECS3E = (1U << 9);  ///< bitfield UECS3E
        constexpr uint32_t UECS2E = (1U << 8);  ///< bitfield UECS2E
        constexpr uint32_t UECS1E = (1U << 7);  ///< bitfield UECS1E
        constexpr uint32_t UEFLSE = (1U << 6);  ///< bitfield UEFLSE
        constexpr uint32_t UEOEXE = (1U << 5);  ///< bitfield UEOEXE
        constexpr uint32_t UEDQME = (1U << 4);  ///< bitfield UEDQME
        constexpr uint32_t UEWEXE = (1U << 3);  ///< bitfield UEWEXE
        constexpr uint32_t UECLKE = (1U << 2);  ///< bitfield UECLKE
        constexpr uint32_t UEDTHB = (1U << 1);  ///< bitfield UEDTHB
        constexpr uint32_t UEDEFB = (1U << 0);  ///< bitfield UEDEFB
    }

    /// EPFR11 Register bits
    namespace epfr11_bits {
        constexpr uint32_t UERLC = (1U << 25);  ///< bitfield UERLC
        constexpr uint32_t UED15B = (1U << 24);  ///< bitfield UED15B
        constexpr uint32_t UED14B = (1U << 23);  ///< bitfield UED14B
        constexpr uint32_t UED13B = (1U << 22);  ///< bitfield UED13B
        constexpr uint32_t UED12B = (1U << 21);  ///< bitfield UED12B
        constexpr uint32_t UED11B = (1U << 20);  ///< bitfield UED11B
        constexpr uint32_t UED10B = (1U << 19);  ///< bitfield UED10B
        constexpr uint32_t UED09B = (1U << 18);  ///< bitfield UED09B
        constexpr uint32_t UED08B = (1U << 17);  ///< bitfield UED08B
        constexpr uint32_t UED07B = (1U << 16);  ///< bitfield UED07B
        constexpr uint32_t UED06B = (1U << 15);  ///< bitfield UED06B
        constexpr uint32_t UED05B = (1U << 14);  ///< bitfield UED05B
        constexpr uint32_t UED04B = (1U << 13);  ///< bitfield UED04B
        constexpr uint32_t UED03B = (1U << 12);  ///< bitfield UED03B
        constexpr uint32_t UED02B = (1U << 11);  ///< bitfield UED02B
        constexpr uint32_t UED01B = (1U << 10);  ///< bitfield UED01B
        constexpr uint32_t UED00B = (1U << 9);  ///< bitfield UED00B
        constexpr uint32_t UEA07E = (1U << 8);  ///< bitfield UEA07E
        constexpr uint32_t UEA06E = (1U << 7);  ///< bitfield UEA06E
        constexpr uint32_t UEA05E = (1U << 6);  ///< bitfield UEA05E
        constexpr uint32_t UEA04E = (1U << 5);  ///< bitfield UEA04E
        constexpr uint32_t UEA03E = (1U << 4);  ///< bitfield UEA03E
        constexpr uint32_t UEA02E = (1U << 3);  ///< bitfield UEA02E
        constexpr uint32_t UEA01E = (1U << 2);  ///< bitfield UEA01E
        constexpr uint32_t UECS0E = (1U << 1);  ///< bitfield UECS0E
        constexpr uint32_t UEALEE = (1U << 0);  ///< bitfield UEALEE
    }

    /// EPFR12 Register bits
    namespace epfr12_bits {
        constexpr uint32_t TIOB11S = (2 << 28);  ///< bitfield TIOB11S
        constexpr uint32_t TIOA11E = (2 << 26);  ///< bitfield TIOA11E
        constexpr uint32_t TIOA11S = (2 << 24);  ///< bitfield TIOA11S
        constexpr uint32_t TIOB10S = (2 << 20);  ///< bitfield TIOB10S
        constexpr uint32_t TIOA10E = (2 << 18);  ///< bitfield TIOA10E
        constexpr uint32_t TIOB9S = (2 << 12);  ///< bitfield TIOB9S
        constexpr uint32_t TIOA9E = (2 << 10);  ///< bitfield TIOA9E
        constexpr uint32_t TIOA9S = (2 << 8);  ///< bitfield TIOA9S
        constexpr uint32_t TIOB8S = (2 << 4);  ///< bitfield TIOB8S
        constexpr uint32_t TIOA8E = (2 << 2);  ///< bitfield TIOA8E
    }

    /// EPFR13 Register bits
    namespace epfr13_bits {
        constexpr uint32_t TIOB15S = (2 << 28);  ///< bitfield TIOB15S
        constexpr uint32_t TIOA15E = (2 << 26);  ///< bitfield TIOA15E
        constexpr uint32_t TIOA15S = (2 << 24);  ///< bitfield TIOA15S
        constexpr uint32_t TIOB14S = (2 << 20);  ///< bitfield TIOB14S
        constexpr uint32_t TIOA14E = (2 << 18);  ///< bitfield TIOA14E
        constexpr uint32_t TIOB13S = (2 << 12);  ///< bitfield TIOB13S
        constexpr uint32_t TIOA13E = (2 << 10);  ///< bitfield TIOA13E
        constexpr uint32_t TIOA13S = (2 << 8);  ///< bitfield TIOA13S
        constexpr uint32_t TIOB12S = (2 << 4);  ///< bitfield TIOB12S
        constexpr uint32_t TIOA12E = (2 << 2);  ///< bitfield TIOA12E
    }

    /// EPFR14 Register bits
    namespace epfr14_bits {
        constexpr uint32_t E_SPLC = (2 << 28);  ///< bitfield E_SPLC
        constexpr uint32_t E_PSE = (1U << 27);  ///< bitfield E_PSE
        constexpr uint32_t E_CKE = (1U << 26);  ///< bitfield E_CKE
        constexpr uint32_t E_MD1B = (1U << 25);  ///< bitfield E_MD1B
        constexpr uint32_t E_MD0B = (1U << 24);  ///< bitfield E_MD0B
        constexpr uint32_t E_MC1B = (1U << 23);  ///< bitfield E_MC1B
        constexpr uint32_t E_MC0E = (1U << 22);  ///< bitfield E_MC0E
        constexpr uint32_t E_TE1E = (1U << 21);  ///< bitfield E_TE1E
        constexpr uint32_t E_TE0E = (1U << 20);  ///< bitfield E_TE0E
        constexpr uint32_t E_TD1E = (1U << 19);  ///< bitfield E_TD1E
        constexpr uint32_t E_TD0E = (1U << 18);  ///< bitfield E_TD0E
        constexpr uint32_t QZIN2S = (2 << 4);  ///< bitfield QZIN2S
        constexpr uint32_t QBIN2S = (2 << 2);  ///< bitfield QBIN2S
        constexpr uint32_t QAIN2S = (2 << 0);  ///< bitfield QAIN2S
    }

    /// EPFR15 Register bits
    namespace epfr15_bits {
        constexpr uint32_t EINT31S = (2 << 30);  ///< bitfield EINT31S
        constexpr uint32_t EINT30S = (2 << 28);  ///< bitfield EINT30S
        constexpr uint32_t EINT29S = (2 << 26);  ///< bitfield EINT29S
        constexpr uint32_t EINT28S = (2 << 24);  ///< bitfield EINT28S
        constexpr uint32_t EINT27S = (2 << 22);  ///< bitfield EINT27S
        constexpr uint32_t EINT26S = (2 << 20);  ///< bitfield EINT26S
        constexpr uint32_t EINT25S = (2 << 18);  ///< bitfield EINT25S
        constexpr uint32_t EINT24S = (2 << 16);  ///< bitfield EINT24S
        constexpr uint32_t EINT23S = (2 << 14);  ///< bitfield EINT23S
        constexpr uint32_t EINT22S = (2 << 12);  ///< bitfield EINT22S
        constexpr uint32_t EINT21S = (2 << 10);  ///< bitfield EINT21S
        constexpr uint32_t EINT20S = (2 << 8);  ///< bitfield EINT20S
        constexpr uint32_t EINT19S = (2 << 6);  ///< bitfield EINT19S
        constexpr uint32_t EINT18S = (2 << 4);  ///< bitfield EINT18S
        constexpr uint32_t EINT17S = (2 << 2);  ///< bitfield EINT17S
        constexpr uint32_t EINT16S = (2 << 0);  ///< bitfield EINT16S
    }

    /// EPFR16 Register bits
    namespace epfr16_bits {
        constexpr uint32_t SFMPBC = (1U << 29);  ///< bitfield SFMPBC
        constexpr uint32_t SFMPAC = (1U << 28);  ///< bitfield SFMPAC
        constexpr uint32_t SCK11B = (2 << 26);  ///< bitfield SCK11B
        constexpr uint32_t SOT11B = (2 << 24);  ///< bitfield SOT11B
        constexpr uint32_t SIN11S = (2 << 22);  ///< bitfield SIN11S
        constexpr uint32_t SCK10B = (2 << 20);  ///< bitfield SCK10B
        constexpr uint32_t SOT10B = (2 << 18);  ///< bitfield SOT10B
        constexpr uint32_t SIN10S = (2 << 16);  ///< bitfield SIN10S
        constexpr uint32_t SCK9B = (2 << 14);  ///< bitfield SCK9B
        constexpr uint32_t SOT9B = (2 << 12);  ///< bitfield SOT9B
        constexpr uint32_t SIN9S = (2 << 10);  ///< bitfield SIN9S
        constexpr uint32_t SCK8B = (2 << 8);  ///< bitfield SCK8B
        constexpr uint32_t SOT8B = (2 << 6);  ///< bitfield SOT8B
        constexpr uint32_t SIN8S = (2 << 4);  ///< bitfield SIN8S
        constexpr uint32_t SCS7B = (2 << 2);  ///< bitfield SCS7B
        constexpr uint32_t SCS6B = (2 << 0);  ///< bitfield SCS6B
    }

    /// EPFR17 Register bits
    namespace epfr17_bits {
        constexpr uint32_t SCK15B = (2 << 26);  ///< bitfield SCK15B
        constexpr uint32_t SOT15B = (2 << 24);  ///< bitfield SOT15B
        constexpr uint32_t SIN15S = (2 << 22);  ///< bitfield SIN15S
        constexpr uint32_t SCK14B = (2 << 20);  ///< bitfield SCK14B
        constexpr uint32_t SOT14B = (2 << 18);  ///< bitfield SOT14B
        constexpr uint32_t SIN14S = (2 << 16);  ///< bitfield SIN14S
        constexpr uint32_t SCK13B = (2 << 14);  ///< bitfield SCK13B
        constexpr uint32_t SOT13B = (2 << 12);  ///< bitfield SOT13B
        constexpr uint32_t SIN13S = (2 << 10);  ///< bitfield SIN13S
        constexpr uint32_t SCK12B = (2 << 8);  ///< bitfield SCK12B
        constexpr uint32_t SOT12B = (2 << 6);  ///< bitfield SOT12B
        constexpr uint32_t SIN12S = (2 << 4);  ///< bitfield SIN12S
    }

    /// EPFR18 Register bits
    namespace epfr18_bits {
        constexpr uint32_t SDWPS = (2 << 28);  ///< bitfield SDWPS
        constexpr uint32_t SDCDS = (2 << 26);  ///< bitfield SDCDS
        constexpr uint32_t SDDATA3B = (2 << 24);  ///< bitfield SDDATA3B
        constexpr uint32_t SDDATA2B = (2 << 22);  ///< bitfield SDDATA2B
        constexpr uint32_t SDDATA1B = (2 << 20);  ///< bitfield SDDATA1B
        constexpr uint32_t SDDATA0B = (2 << 18);  ///< bitfield SDDATA0B
        constexpr uint32_t SDCMDB = (2 << 16);  ///< bitfield SDCMDB
        constexpr uint32_t SDCLKE = (2 << 14);  ///< bitfield SDCLKE
        constexpr uint32_t QZIN3S = (2 << 8);  ///< bitfield QZIN3S
        constexpr uint32_t QBIN3S = (2 << 6);  ///< bitfield QBIN3S
        constexpr uint32_t QAIN3S = (2 << 4);  ///< bitfield QAIN3S
    }

    /// EPFR20 Register bits
    namespace epfr20_bits {
        constexpr uint32_t UED31B = (1U << 24);  ///< bitfield UED31B
        constexpr uint32_t UED30B = (1U << 23);  ///< bitfield UED30B
        constexpr uint32_t UED29B = (1U << 22);  ///< bitfield UED29B
        constexpr uint32_t UED28B = (1U << 21);  ///< bitfield UED28B
        constexpr uint32_t UED27B = (1U << 20);  ///< bitfield UED27B
        constexpr uint32_t UED26B = (1U << 19);  ///< bitfield UED26B
        constexpr uint32_t UED25B = (1U << 18);  ///< bitfield UED25B
        constexpr uint32_t UED24B = (1U << 17);  ///< bitfield UED24B
        constexpr uint32_t UED23B = (1U << 16);  ///< bitfield UED23B
        constexpr uint32_t UED22B = (1U << 15);  ///< bitfield UED22B
        constexpr uint32_t UED21B = (1U << 14);  ///< bitfield UED21B
        constexpr uint32_t UED20B = (1U << 13);  ///< bitfield UED20B
        constexpr uint32_t UED19B = (1U << 12);  ///< bitfield UED19B
        constexpr uint32_t UED18B = (1U << 11);  ///< bitfield UED18B
        constexpr uint32_t UED17B = (1U << 10);  ///< bitfield UED17B
        constexpr uint32_t UED16B = (1U << 9);  ///< bitfield UED16B
        constexpr uint32_t UEDTHHB = (1U << 8);  ///< bitfield UEDTHHB
        constexpr uint32_t UEDQM3E = (1U << 7);  ///< bitfield UEDQM3E
        constexpr uint32_t UEDQM2E = (1U << 6);  ///< bitfield UEDQM2E
        constexpr uint32_t UECSXE = (1U << 5);  ///< bitfield UECSXE
        constexpr uint32_t UEDWEXE = (1U << 4);  ///< bitfield UEDWEXE
        constexpr uint32_t UECASE = (1U << 3);  ///< bitfield UECASE
        constexpr uint32_t UERASE = (1U << 2);  ///< bitfield UERASE
        constexpr uint32_t UESMCEE = (1U << 1);  ///< bitfield UESMCEE
        constexpr uint32_t UESMCKE = (1U << 0);  ///< bitfield UESMCKE
    }

}

// ============================================================================
// LVD Peripheral
// ============================================================================

namespace lvd {
    /// Base addresses
    constexpr uint32_t LVD_BASE = 0x40035000;

    /// LVD Register structure
    struct Registers {
        volatile uint32_t LVD_CTL;  ///< Offset: 0x00 - register LVD_CTL
        volatile uint32_t LVD_STR;  ///< Offset: 0x04 - register LVD_STR
        volatile uint32_t LVD_CLR;  ///< Offset: 0x08 - register LVD_CLR
        volatile uint32_t LVD_RLR;  ///< Offset: 0x0C - register LVD_RLR
        volatile uint32_t LVD_STR2;  ///< Offset: 0x10 - register LVD_STR2
    };

    /// Peripheral instances
    inline Registers* LVD = reinterpret_cast<Registers*>(LVD_BASE);

    // Bit definitions
    /// LVD_CTL Register bits
    namespace lvd_ctl_bits {
        constexpr uint32_t LVDIE = (1U << 7);  ///< bitfield LVDIE
        constexpr uint32_t SVHI = (4 << 2);  ///< bitfield SVHI
    }

    /// LVD_STR Register bits
    namespace lvd_str_bits {
        constexpr uint32_t LVDIR = (1U << 7);  ///< bitfield LVDIR
    }

    /// LVD_CLR Register bits
    namespace lvd_clr_bits {
        constexpr uint32_t LVDCL = (1U << 7);  ///< bitfield LVDCL
    }

    /// LVD_RLR Register bits
    namespace lvd_rlr_bits {
        constexpr uint32_t LVDLCK = (32 << 0);  ///< bitfield LVDLCK
    }

    /// LVD_STR2 Register bits
    namespace lvd_str2_bits {
        constexpr uint32_t LVDIRDY = (1U << 7);  ///< bitfield LVDIRDY
    }

}

// ============================================================================
// DS Peripheral
// ============================================================================

namespace ds {
    /// Base addresses
    constexpr uint32_t DS_BASE = 0x40035100;

    /// DS Register structure
    struct Registers {
        volatile uint32_t RCK_CTL;  ///< Offset: 0x04 - register RCK_CTL
        volatile uint32_t PMD_CTL;  ///< Offset: 0x700 - register PMD_CTL
        volatile uint32_t WRFSR;  ///< Offset: 0x704 - register WRFSR
        volatile uint32_t WIFSR;  ///< Offset: 0x708 - register WIFSR
        volatile uint32_t WIER;  ///< Offset: 0x70C - register WIER
        volatile uint32_t WILVR;  ///< Offset: 0x710 - register WILVR
        volatile uint32_t DSRAMR;  ///< Offset: 0x714 - register DSRAMR
        volatile uint32_t BUR01;  ///< Offset: 0x800 - register BUR01
        volatile uint32_t BUR02;  ///< Offset: 0x801 - register BUR02
        volatile uint32_t BUR03;  ///< Offset: 0x802 - register BUR03
        volatile uint32_t BUR04;  ///< Offset: 0x803 - register BUR04
        volatile uint32_t BUR05;  ///< Offset: 0x804 - register BUR05
        volatile uint32_t BUR06;  ///< Offset: 0x805 - register BUR06
        volatile uint32_t BUR07;  ///< Offset: 0x806 - register BUR07
        volatile uint32_t BUR08;  ///< Offset: 0x807 - register BUR08
        volatile uint32_t BUR09;  ///< Offset: 0x808 - register BUR09
        volatile uint32_t BUR10;  ///< Offset: 0x809 - register BUR10
        volatile uint32_t BUR11;  ///< Offset: 0x80A - register BUR11
        volatile uint32_t BUR12;  ///< Offset: 0x80B - register BUR12
        volatile uint32_t BUR13;  ///< Offset: 0x80C - register BUR13
        volatile uint32_t BUR14;  ///< Offset: 0x80D - register BUR14
        volatile uint32_t BUR15;  ///< Offset: 0x80E - register BUR15
        volatile uint32_t BUR16;  ///< Offset: 0x80F - register BUR16
    };

    /// Peripheral instances
    inline Registers* DS = reinterpret_cast<Registers*>(DS_BASE);

    // Bit definitions
    /// RCK_CTL Register bits
    namespace rck_ctl_bits {
        constexpr uint32_t RTCCKE = (1U << 0);  ///< bitfield RTCCKE
    }

    /// PMD_CTL Register bits
    namespace pmd_ctl_bits {
        constexpr uint32_t RTCE = (1U << 0);  ///< bitfield RTCE
    }

    /// WRFSR Register bits
    namespace wrfsr_bits {
        constexpr uint32_t WLVDH = (1U << 1);  ///< bitfield WLVDH
        constexpr uint32_t WINITX = (1U << 0);  ///< bitfield WINITX
    }

    /// WIFSR Register bits
    namespace wifsr_bits {
        constexpr uint32_t WUI5 = (1U << 7);  ///< bitfield WUI5
        constexpr uint32_t WUI4 = (1U << 6);  ///< bitfield WUI4
        constexpr uint32_t WUI3 = (1U << 5);  ///< bitfield WUI3
        constexpr uint32_t WUI2 = (1U << 4);  ///< bitfield WUI2
        constexpr uint32_t WUI1 = (1U << 3);  ///< bitfield WUI1
        constexpr uint32_t WUI0 = (1U << 2);  ///< bitfield WUI0
        constexpr uint32_t WLVDI = (1U << 1);  ///< bitfield WLVDI
        constexpr uint32_t WRTCI = (1U << 0);  ///< bitfield WRTCI
    }

    /// WIER Register bits
    namespace wier_bits {
        constexpr uint32_t WUI5E = (1U << 7);  ///< bitfield WUI5E
        constexpr uint32_t WUI4E = (1U << 6);  ///< bitfield WUI4E
        constexpr uint32_t WUI3E = (1U << 5);  ///< bitfield WUI3E
        constexpr uint32_t WUI2E = (1U << 4);  ///< bitfield WUI2E
        constexpr uint32_t WUI1E = (1U << 3);  ///< bitfield WUI1E
        constexpr uint32_t WLVDE = (1U << 1);  ///< bitfield WLVDE
        constexpr uint32_t WRTCE = (1U << 0);  ///< bitfield WRTCE
    }

    /// WILVR Register bits
    namespace wilvr_bits {
        constexpr uint32_t WUI5LV = (1U << 4);  ///< bitfield WUI5LV
        constexpr uint32_t WUI4LV = (1U << 3);  ///< bitfield WUI4LV
        constexpr uint32_t WUI3LV = (1U << 2);  ///< bitfield WUI3LV
        constexpr uint32_t WUI2LV = (1U << 1);  ///< bitfield WUI2LV
        constexpr uint32_t WUI1LV = (1U << 0);  ///< bitfield WUI1LV
    }

    /// DSRAMR Register bits
    namespace dsramr_bits {
        constexpr uint32_t SRAMR = (2 << 0);  ///< bitfield SRAMR
    }

}

// ============================================================================
// MFS0 Peripheral
// ============================================================================

namespace mfs0 {
    /// Base addresses
    constexpr uint32_t MFS0_BASE = 0x40038000;

    /// MFS0 Register structure
    struct Registers {
        volatile uint32_t UART_SCR;  ///< Offset: 0x01 - register UART_SCR
        volatile uint32_t UART_SMR;  ///< Offset: 0x00 - register UART_SMR
        volatile uint32_t UART_SSR;  ///< Offset: 0x05 - register UART_SSR
        volatile uint32_t UART_ESCR;  ///< Offset: 0x04 - register UART_ESCR
        volatile uint32_t UART_RDR;  ///< Offset: 0x08 - register UART_RDR
        volatile uint32_t UART_TDR;  ///< Offset: 0x08 - register UART_TDR
        volatile uint32_t UART_BGR;  ///< Offset: 0x0C - register UART_BGR
        volatile uint32_t UART_FCR1;  ///< Offset: 0x15 - register UART_FCR1
        volatile uint32_t UART_FCR0;  ///< Offset: 0x14 - register UART_FCR0
        volatile uint32_t UART_FBYTE1;  ///< Offset: 0x18 - register UART_FBYTE1
        volatile uint32_t UART_FBYTE2;  ///< Offset: 0x19 - register UART_FBYTE2
        volatile uint32_t CSIO_SCR;  ///< Offset: 0x01 - register CSIO_SCR
        volatile uint32_t CSIO_SMR;  ///< Offset: 0x00 - register CSIO_SMR
        volatile uint32_t CSIO_SSR;  ///< Offset: 0x05 - register CSIO_SSR
        volatile uint32_t CSIO_ESCR;  ///< Offset: 0x04 - register CSIO_ESCR
        volatile uint32_t CSIO_RDR;  ///< Offset: 0x08 - register CSIO_RDR
        volatile uint32_t CSIO_TDR;  ///< Offset: 0x08 - register CSIO_TDR
        volatile uint32_t CSIO_BGR;  ///< Offset: 0x0C - register CSIO_BGR
        volatile uint32_t CSIO_FCR1;  ///< Offset: 0x15 - register CSIO_FCR1
        volatile uint32_t CSIO_FCR0;  ///< Offset: 0x14 - register CSIO_FCR0
        volatile uint32_t CSIO_FBYTE1;  ///< Offset: 0x18 - register CSIO_FBYTE1
        volatile uint32_t CSIO_FBYTE2;  ///< Offset: 0x19 - register CSIO_FBYTE2
        volatile uint32_t CSIO_SCSTR0;  ///< Offset: 0x1C - register CSIO_SCSTR0
        volatile uint32_t CSIO_SCSTR1;  ///< Offset: 0x1D - register CSIO_SCSTR1
        volatile uint32_t CSIO_SCSTR2;  ///< Offset: 0x20 - register CSIO_SCSTR2
        volatile uint32_t CSIO_SCSTR3;  ///< Offset: 0x21 - register CSIO_SCSTR3
        volatile uint32_t CSIO_SACSR;  ///< Offset: 0x24 - register CSIO_SACSR
        volatile uint32_t CSIO_STMR;  ///< Offset: 0x28 - register CSIO_STMR
        volatile uint32_t CSIO_STMCR;  ///< Offset: 0x2C - register CSIO_STMCR
        volatile uint32_t CSIO_SCSCR;  ///< Offset: 0x30 - register CSIO_SCSCR
        volatile uint32_t CSIO_TBYTE0;  ///< Offset: 0x3C - register CSIO_TBYTE0
        volatile uint32_t CSIO_TBYTE1;  ///< Offset: 0x3D - register CSIO_TBYTE1
        volatile uint32_t CSIO_TBYTE2;  ///< Offset: 0x40 - register CSIO_TBYTE2
        volatile uint32_t CSIO_TBYTE3;  ///< Offset: 0x41 - register CSIO_TBYTE3
        volatile uint32_t LIN_SCR;  ///< Offset: 0x01 - register LIN_SCR
        volatile uint32_t LIN_SMR;  ///< Offset: 0x00 - register LIN_SMR
        volatile uint32_t LIN_SSR;  ///< Offset: 0x05 - register LIN_SSR
        volatile uint32_t LIN_ESCR;  ///< Offset: 0x04 - register LIN_ESCR
        volatile uint32_t LIN_RDR;  ///< Offset: 0x08 - register LIN_RDR
        volatile uint32_t LIN_TDR;  ///< Offset: 0x08 - register LIN_TDR
        volatile uint32_t LIN_BGR;  ///< Offset: 0x0C - register LIN_BGR
        volatile uint32_t LIN_FCR1;  ///< Offset: 0x15 - register LIN_FCR1
        volatile uint32_t LIN_FCR0;  ///< Offset: 0x14 - register LIN_FCR0
        volatile uint32_t LIN_FBYTE1;  ///< Offset: 0x18 - register LIN_FBYTE1
        volatile uint32_t LIN_FBYTE2;  ///< Offset: 0x19 - register LIN_FBYTE2
        volatile uint32_t I2C_IBCR;  ///< Offset: 0x01 - register I2C_IBCR
        volatile uint32_t I2C_SMR;  ///< Offset: 0x00 - register I2C_SMR
        volatile uint32_t I2C_IBSR;  ///< Offset: 0x04 - register I2C_IBSR
        volatile uint32_t I2C_SSR;  ///< Offset: 0x05 - register I2C_SSR
        volatile uint32_t I2C_RDR;  ///< Offset: 0x08 - register I2C_RDR
        volatile uint32_t I2C_TDR;  ///< Offset: 0x08 - register I2C_TDR
        volatile uint32_t I2C_BGR;  ///< Offset: 0x0C - register I2C_BGR
        volatile uint32_t I2C_ISMK;  ///< Offset: 0x11 - register I2C_ISMK
        volatile uint32_t I2C_ISBA;  ///< Offset: 0x10 - register I2C_ISBA
        volatile uint32_t I2C_FCR1;  ///< Offset: 0x15 - register I2C_FCR1
        volatile uint32_t I2C_FCR0;  ///< Offset: 0x14 - register I2C_FCR0
        volatile uint32_t I2C_FBYTE1;  ///< Offset: 0x18 - register I2C_FBYTE1
        volatile uint32_t I2C_FBYTE2;  ///< Offset: 0x19 - register I2C_FBYTE2
        volatile uint32_t I2C_NFCR;  ///< Offset: 0x1C - register I2C_NFCR
        volatile uint32_t I2C_EIBCR;  ///< Offset: 0x1D - register I2C_EIBCR
    };

    /// Peripheral instances
    inline Registers* MFS0 = reinterpret_cast<Registers*>(MFS0_BASE);

    // Bit definitions
    /// UART_SCR Register bits
    namespace uart_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< bitfield UPCL
        constexpr uint32_t RIE = (1U << 4);  ///< bitfield RIE
        constexpr uint32_t TIE = (1U << 3);  ///< bitfield TIE
        constexpr uint32_t TBIE = (1U << 2);  ///< bitfield TBIE
        constexpr uint32_t RXE = (1U << 1);  ///< bitfield RXE
        constexpr uint32_t TXE = (1U << 0);  ///< bitfield TXE
    }

    /// UART_SMR Register bits
    namespace uart_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< bitfield MD
        constexpr uint32_t SBL = (1U << 3);  ///< bitfield SBL
        constexpr uint32_t BDS = (1U << 2);  ///< bitfield BDS
        constexpr uint32_t SOE = (1U << 0);  ///< bitfield SOE
    }

    /// UART_SSR Register bits
    namespace uart_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< bitfield REC
        constexpr uint32_t PE = (1U << 5);  ///< bitfield PE
        constexpr uint32_t FRE = (1U << 4);  ///< bitfield FRE
        constexpr uint32_t ORE = (1U << 3);  ///< bitfield ORE
        constexpr uint32_t RDRF = (1U << 2);  ///< bitfield RDRF
        constexpr uint32_t TDRE = (1U << 1);  ///< bitfield TDRE
        constexpr uint32_t TBI = (1U << 0);  ///< bitfield TBI
    }

    /// UART_ESCR Register bits
    namespace uart_escr_bits {
        constexpr uint32_t FLWEN = (1U << 7);  ///< bitfield FLWEN
        constexpr uint32_t ESBL = (1U << 6);  ///< bitfield ESBL
        constexpr uint32_t INV = (1U << 5);  ///< bitfield INV
        constexpr uint32_t PEN = (1U << 4);  ///< bitfield PEN
        constexpr uint32_t P = (1U << 3);  ///< bitfield P
        constexpr uint32_t L = (3 << 0);  ///< bitfield L
    }

    /// UART_RDR Register bits
    namespace uart_rdr_bits {
        constexpr uint32_t D = (9 << 0);  ///< bitfield D
    }

    /// UART_TDR Register bits
    namespace uart_tdr_bits {
        constexpr uint32_t D = (9 << 0);  ///< bitfield D
    }

    /// UART_BGR Register bits
    namespace uart_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< bitfield EXT
        constexpr uint32_t BGR1 = (7 << 8);  ///< bitfield BGR1
        constexpr uint32_t BGR0 = (8 << 0);  ///< bitfield BGR0
    }

    /// UART_FCR1 Register bits
    namespace uart_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< bitfield FLSTE
        constexpr uint32_t FRIIE = (1U << 3);  ///< bitfield FRIIE
        constexpr uint32_t FDRQ = (1U << 2);  ///< bitfield FDRQ
        constexpr uint32_t FTIE = (1U << 1);  ///< bitfield FTIE
        constexpr uint32_t FSEL = (1U << 0);  ///< bitfield FSEL
    }

    /// UART_FCR0 Register bits
    namespace uart_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< bitfield FLST
        constexpr uint32_t FLD = (1U << 5);  ///< bitfield FLD
        constexpr uint32_t FSET = (1U << 4);  ///< bitfield FSET
        constexpr uint32_t FCL2 = (1U << 3);  ///< bitfield FCL2
        constexpr uint32_t FCL1 = (1U << 2);  ///< bitfield FCL1
        constexpr uint32_t FE2 = (1U << 1);  ///< bitfield FE2
        constexpr uint32_t FE1 = (1U << 0);  ///< bitfield FE1
    }

    /// CSIO_SCR Register bits
    namespace csio_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< bitfield UPCL
        constexpr uint32_t MS = (1U << 6);  ///< bitfield MS
        constexpr uint32_t SPI = (1U << 5);  ///< bitfield SPI
        constexpr uint32_t RIE = (1U << 4);  ///< bitfield RIE
        constexpr uint32_t TIE = (1U << 3);  ///< bitfield TIE
        constexpr uint32_t TBIE = (1U << 2);  ///< bitfield TBIE
        constexpr uint32_t RXE = (1U << 1);  ///< bitfield RXE
        constexpr uint32_t TXE = (1U << 0);  ///< bitfield TXE
    }

    /// CSIO_SMR Register bits
    namespace csio_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< bitfield MD
        constexpr uint32_t SCINV = (1U << 3);  ///< bitfield SCINV
        constexpr uint32_t BDS = (1U << 2);  ///< bitfield BDS
        constexpr uint32_t SCKE = (1U << 1);  ///< bitfield SCKE
        constexpr uint32_t SOE = (1U << 0);  ///< bitfield SOE
    }

    /// CSIO_SSR Register bits
    namespace csio_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< bitfield REC
        constexpr uint32_t AWC = (1U << 4);  ///< bitfield AWC
        constexpr uint32_t ORE = (1U << 3);  ///< bitfield ORE
        constexpr uint32_t RDRF = (1U << 2);  ///< bitfield RDRF
        constexpr uint32_t TDRE = (1U << 1);  ///< bitfield TDRE
        constexpr uint32_t TBI = (1U << 0);  ///< bitfield TBI
    }

    /// CSIO_ESCR Register bits
    namespace csio_escr_bits {
        constexpr uint32_t SOP = (1U << 7);  ///< bitfield SOP
        constexpr uint32_t L3 = (1U << 6);  ///< bitfield L3
        constexpr uint32_t WT = (2 << 3);  ///< bitfield WT
        constexpr uint32_t L = (3 << 0);  ///< bitfield L
    }

    /// CSIO_RDR Register bits
    namespace csio_rdr_bits {
        constexpr uint32_t D = (16 << 0);  ///< bitfield D
    }

    /// CSIO_TDR Register bits
    namespace csio_tdr_bits {
        constexpr uint32_t D = (16 << 0);  ///< bitfield D
    }

    /// CSIO_BGR Register bits
    namespace csio_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< bitfield BGR1
        constexpr uint32_t BGR0 = (8 << 0);  ///< bitfield BGR0
    }

    /// CSIO_FCR1 Register bits
    namespace csio_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< bitfield FLSTE
        constexpr uint32_t FRIIE = (1U << 3);  ///< bitfield FRIIE
        constexpr uint32_t FDRQ = (1U << 2);  ///< bitfield FDRQ
        constexpr uint32_t FTIE = (1U << 1);  ///< bitfield FTIE
        constexpr uint32_t FSEL = (1U << 0);  ///< bitfield FSEL
    }

    /// CSIO_FCR0 Register bits
    namespace csio_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< bitfield FLST
        constexpr uint32_t FLD = (1U << 5);  ///< bitfield FLD
        constexpr uint32_t FSET = (1U << 4);  ///< bitfield FSET
        constexpr uint32_t FCL2 = (1U << 3);  ///< bitfield FCL2
        constexpr uint32_t FCL1 = (1U << 2);  ///< bitfield FCL1
        constexpr uint32_t FE2 = (1U << 1);  ///< bitfield FE2
        constexpr uint32_t FE1 = (1U << 0);  ///< bitfield FE1
    }

    /// CSIO_SCSTR0 Register bits
    namespace csio_scstr0_bits {
        constexpr uint32_t CSHD = (8 << 0);  ///< bitfield CSHD
    }

    /// CSIO_SCSTR1 Register bits
    namespace csio_scstr1_bits {
        constexpr uint32_t CSSU = (8 << 0);  ///< bitfield CSSU
    }

    /// CSIO_SCSTR2 Register bits
    namespace csio_scstr2_bits {
        constexpr uint32_t CSDS = (16 << 0);  ///< bitfield CSDS
    }

    /// CSIO_SACSR Register bits
    namespace csio_sacsr_bits {
        constexpr uint32_t TBEEN = (1U << 13);  ///< bitfield TBEEN
        constexpr uint32_t CSEIE = (1U << 12);  ///< bitfield CSEIE
        constexpr uint32_t CSE = (1U << 11);  ///< bitfield CSE
        constexpr uint32_t TINT = (1U << 8);  ///< bitfield TINT
        constexpr uint32_t TINTE = (1U << 7);  ///< bitfield TINTE
        constexpr uint32_t TSYNE = (1U << 6);  ///< bitfield TSYNE
        constexpr uint32_t TDIV = (4 << 1);  ///< bitfield TDIV
        constexpr uint32_t TMRE = (1U << 0);  ///< bitfield TMRE
    }

    /// CSIO_STMR Register bits
    namespace csio_stmr_bits {
        constexpr uint32_t TM = (16 << 0);  ///< bitfield TM
    }

    /// CSIO_STMCR Register bits
    namespace csio_stmcr_bits {
        constexpr uint32_t TC = (16 << 0);  ///< bitfield TC
    }

    /// CSIO_SCSCR Register bits
    namespace csio_scscr_bits {
        constexpr uint32_t SCAM = (1U << 9);  ///< bitfield SCAM
        constexpr uint32_t CDIV = (3 << 6);  ///< bitfield CDIV
        constexpr uint32_t CSLVL = (1U << 5);  ///< bitfield CSLVL
        constexpr uint32_t CSEN0 = (1U << 1);  ///< bitfield CSEN0
        constexpr uint32_t CSOE = (1U << 0);  ///< bitfield CSOE
    }

    /// LIN_SCR Register bits
    namespace lin_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< bitfield UPCL
        constexpr uint32_t MS = (1U << 6);  ///< bitfield MS
        constexpr uint32_t LBR = (1U << 5);  ///< bitfield LBR
        constexpr uint32_t RIE = (1U << 4);  ///< bitfield RIE
        constexpr uint32_t TIE = (1U << 3);  ///< bitfield TIE
        constexpr uint32_t TBIE = (1U << 2);  ///< bitfield TBIE
        constexpr uint32_t RXE = (1U << 1);  ///< bitfield RXE
        constexpr uint32_t TXE = (1U << 0);  ///< bitfield TXE
    }

    /// LIN_SMR Register bits
    namespace lin_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< bitfield MD
        constexpr uint32_t WUCR = (1U << 4);  ///< bitfield WUCR
        constexpr uint32_t SBL = (1U << 3);  ///< bitfield SBL
        constexpr uint32_t SOE = (1U << 0);  ///< bitfield SOE
    }

    /// LIN_SSR Register bits
    namespace lin_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< bitfield REC
        constexpr uint32_t LBD = (1U << 5);  ///< bitfield LBD
        constexpr uint32_t FRE = (1U << 4);  ///< bitfield FRE
        constexpr uint32_t ORE = (1U << 3);  ///< bitfield ORE
        constexpr uint32_t RDRF = (1U << 2);  ///< bitfield RDRF
        constexpr uint32_t TDRE = (1U << 1);  ///< bitfield TDRE
        constexpr uint32_t TBI = (1U << 0);  ///< bitfield TBI
    }

    /// LIN_ESCR Register bits
    namespace lin_escr_bits {
        constexpr uint32_t ESBL = (1U << 6);  ///< bitfield ESBL
        constexpr uint32_t LBIE = (1U << 4);  ///< bitfield LBIE
        constexpr uint32_t LBL = (2 << 2);  ///< bitfield LBL
        constexpr uint32_t DEL = (2 << 0);  ///< bitfield DEL
    }

    /// LIN_RDR Register bits
    namespace lin_rdr_bits {
        constexpr uint32_t D = (8 << 0);  ///< bitfield D
    }

    /// LIN_TDR Register bits
    namespace lin_tdr_bits {
        constexpr uint32_t D = (8 << 0);  ///< bitfield D
    }

    /// LIN_BGR Register bits
    namespace lin_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< bitfield EXT
        constexpr uint32_t BGR1 = (7 << 8);  ///< bitfield BGR1
        constexpr uint32_t BGR0 = (8 << 0);  ///< bitfield BGR0
    }

    /// LIN_FCR1 Register bits
    namespace lin_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< bitfield FLSTE
        constexpr uint32_t FRIIE = (1U << 3);  ///< bitfield FRIIE
        constexpr uint32_t FDRQ = (1U << 2);  ///< bitfield FDRQ
        constexpr uint32_t FTIE = (1U << 1);  ///< bitfield FTIE
        constexpr uint32_t FSEL = (1U << 0);  ///< bitfield FSEL
    }

    /// LIN_FCR0 Register bits
    namespace lin_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< bitfield FLST
        constexpr uint32_t FLD = (1U << 5);  ///< bitfield FLD
        constexpr uint32_t FSET = (1U << 4);  ///< bitfield FSET
        constexpr uint32_t FCL2 = (1U << 3);  ///< bitfield FCL2
        constexpr uint32_t FCL1 = (1U << 2);  ///< bitfield FCL1
        constexpr uint32_t FE2 = (1U << 1);  ///< bitfield FE2
        constexpr uint32_t FE1 = (1U << 0);  ///< bitfield FE1
    }

    /// I2C_IBCR Register bits
    namespace i2c_ibcr_bits {
        constexpr uint32_t MSS = (1U << 7);  ///< bitfield MSS
        constexpr uint32_t ACT_SCC = (1U << 6);  ///< bitfield ACT_SCC
        constexpr uint32_t ACKE = (1U << 5);  ///< bitfield ACKE
        constexpr uint32_t WSEL = (1U << 4);  ///< bitfield WSEL
        constexpr uint32_t CNDE = (1U << 3);  ///< bitfield CNDE
        constexpr uint32_t INTE = (1U << 2);  ///< bitfield INTE
        constexpr uint32_t BER = (1U << 1);  ///< bitfield BER
        constexpr uint32_t INT = (1U << 0);  ///< bitfield INT
    }

    /// I2C_SMR Register bits
    namespace i2c_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< bitfield MD
        constexpr uint32_t RIE = (1U << 3);  ///< bitfield RIE
        constexpr uint32_t TIE = (1U << 2);  ///< bitfield TIE
    }

    /// I2C_IBSR Register bits
    namespace i2c_ibsr_bits {
        constexpr uint32_t FBT = (1U << 7);  ///< bitfield FBT
        constexpr uint32_t RACK = (1U << 6);  ///< bitfield RACK
        constexpr uint32_t RSA = (1U << 5);  ///< bitfield RSA
        constexpr uint32_t TRX = (1U << 4);  ///< bitfield TRX
        constexpr uint32_t AL = (1U << 3);  ///< bitfield AL
        constexpr uint32_t RSC = (1U << 2);  ///< bitfield RSC
        constexpr uint32_t SPC = (1U << 1);  ///< bitfield SPC
        constexpr uint32_t BB = (1U << 0);  ///< bitfield BB
    }

    /// I2C_SSR Register bits
    namespace i2c_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< bitfield REC
        constexpr uint32_t TSET = (1U << 6);  ///< bitfield TSET
        constexpr uint32_t DMA = (1U << 5);  ///< bitfield DMA
        constexpr uint32_t TBIE = (1U << 4);  ///< bitfield TBIE
        constexpr uint32_t ORE = (1U << 3);  ///< bitfield ORE
        constexpr uint32_t RDRF = (1U << 2);  ///< bitfield RDRF
        constexpr uint32_t TDRE = (1U << 1);  ///< bitfield TDRE
        constexpr uint32_t TBI = (1U << 0);  ///< bitfield TBI
    }

    /// I2C_RDR Register bits
    namespace i2c_rdr_bits {
        constexpr uint32_t D = (8 << 0);  ///< bitfield D
    }

    /// I2C_TDR Register bits
    namespace i2c_tdr_bits {
        constexpr uint32_t D = (8 << 0);  ///< bitfield D
    }

    /// I2C_BGR Register bits
    namespace i2c_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< bitfield BGR1
        constexpr uint32_t BGR0 = (8 << 0);  ///< bitfield BGR0
    }

    /// I2C_ISMK Register bits
    namespace i2c_ismk_bits {
        constexpr uint32_t EN = (1U << 7);  ///< bitfield EN
        constexpr uint32_t SM = (7 << 0);  ///< bitfield SM
    }

    /// I2C_ISBA Register bits
    namespace i2c_isba_bits {
        constexpr uint32_t SAEN = (1U << 7);  ///< bitfield SAEN
        constexpr uint32_t SA = (7 << 0);  ///< bitfield SA
    }

    /// I2C_FCR1 Register bits
    namespace i2c_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< bitfield FLSTE
        constexpr uint32_t FRIIE = (1U << 3);  ///< bitfield FRIIE
        constexpr uint32_t FDRQ = (1U << 2);  ///< bitfield FDRQ
        constexpr uint32_t FTIE = (1U << 1);  ///< bitfield FTIE
        constexpr uint32_t FSEL = (1U << 0);  ///< bitfield FSEL
    }

    /// I2C_FCR0 Register bits
    namespace i2c_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< bitfield FLST
        constexpr uint32_t FLD = (1U << 5);  ///< bitfield FLD
        constexpr uint32_t FSET = (1U << 4);  ///< bitfield FSET
        constexpr uint32_t FCL2 = (1U << 3);  ///< bitfield FCL2
        constexpr uint32_t FCL1 = (1U << 2);  ///< bitfield FCL1
        constexpr uint32_t FE2 = (1U << 1);  ///< bitfield FE2
        constexpr uint32_t FE1 = (1U << 0);  ///< bitfield FE1
    }

    /// I2C_NFCR Register bits
    namespace i2c_nfcr_bits {
        constexpr uint32_t NFT = (5 << 0);  ///< bitfield NFT
    }

    /// I2C_EIBCR Register bits
    namespace i2c_eibcr_bits {
        constexpr uint32_t SDAS = (1U << 5);  ///< bitfield SDAS
        constexpr uint32_t SCLS = (1U << 4);  ///< bitfield SCLS
        constexpr uint32_t SDAC = (1U << 3);  ///< bitfield SDAC
        constexpr uint32_t SCLC = (1U << 2);  ///< bitfield SCLC
        constexpr uint32_t SOCE = (1U << 1);  ///< bitfield SOCE
        constexpr uint32_t BEC = (1U << 0);  ///< bitfield BEC
    }

}

// ============================================================================
// MFS1 Peripheral
// ============================================================================

namespace mfs1 {
    /// Base addresses
    constexpr uint32_t MFS1_BASE = 0x40038100;

    /// MFS1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS1 = reinterpret_cast<Registers*>(MFS1_BASE);

}

// ============================================================================
// MFS2 Peripheral
// ============================================================================

namespace mfs2 {
    /// Base addresses
    constexpr uint32_t MFS2_BASE = 0x40038200;

    /// MFS2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS2 = reinterpret_cast<Registers*>(MFS2_BASE);

}

// ============================================================================
// MFS3 Peripheral
// ============================================================================

namespace mfs3 {
    /// Base addresses
    constexpr uint32_t MFS3_BASE = 0x40038300;

    /// MFS3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS3 = reinterpret_cast<Registers*>(MFS3_BASE);

}

// ============================================================================
// MFS4 Peripheral
// ============================================================================

namespace mfs4 {
    /// Base addresses
    constexpr uint32_t MFS4_BASE = 0x40038400;

    /// MFS4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS4 = reinterpret_cast<Registers*>(MFS4_BASE);

}

// ============================================================================
// MFS5 Peripheral
// ============================================================================

namespace mfs5 {
    /// Base addresses
    constexpr uint32_t MFS5_BASE = 0x40038500;

    /// MFS5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS5 = reinterpret_cast<Registers*>(MFS5_BASE);

}

// ============================================================================
// MFS6 Peripheral
// ============================================================================

namespace mfs6 {
    /// Base addresses
    constexpr uint32_t MFS6_BASE = 0x40038600;

    /// MFS6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS6 = reinterpret_cast<Registers*>(MFS6_BASE);

}

// ============================================================================
// MFS7 Peripheral
// ============================================================================

namespace mfs7 {
    /// Base addresses
    constexpr uint32_t MFS7_BASE = 0x40038700;

    /// MFS7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS7 = reinterpret_cast<Registers*>(MFS7_BASE);

}

// ============================================================================
// MFS8 Peripheral
// ============================================================================

namespace mfs8 {
    /// Base addresses
    constexpr uint32_t MFS8_BASE = 0x40038800;

    /// MFS8 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS8 = reinterpret_cast<Registers*>(MFS8_BASE);

}

// ============================================================================
// MFS9 Peripheral
// ============================================================================

namespace mfs9 {
    /// Base addresses
    constexpr uint32_t MFS9_BASE = 0x40038900;

    /// MFS9 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS9 = reinterpret_cast<Registers*>(MFS9_BASE);

}

// ============================================================================
// MFS10 Peripheral
// ============================================================================

namespace mfs10 {
    /// Base addresses
    constexpr uint32_t MFS10_BASE = 0x40038A00;

    /// MFS10 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS10 = reinterpret_cast<Registers*>(MFS10_BASE);

}

// ============================================================================
// MFS11 Peripheral
// ============================================================================

namespace mfs11 {
    /// Base addresses
    constexpr uint32_t MFS11_BASE = 0x40038B00;

    /// MFS11 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS11 = reinterpret_cast<Registers*>(MFS11_BASE);

}

// ============================================================================
// MFS12 Peripheral
// ============================================================================

namespace mfs12 {
    /// Base addresses
    constexpr uint32_t MFS12_BASE = 0x40038C00;

    /// MFS12 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS12 = reinterpret_cast<Registers*>(MFS12_BASE);

}

// ============================================================================
// MFS13 Peripheral
// ============================================================================

namespace mfs13 {
    /// Base addresses
    constexpr uint32_t MFS13_BASE = 0x40038D00;

    /// MFS13 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS13 = reinterpret_cast<Registers*>(MFS13_BASE);

}

// ============================================================================
// MFS14 Peripheral
// ============================================================================

namespace mfs14 {
    /// Base addresses
    constexpr uint32_t MFS14_BASE = 0x40038E00;

    /// MFS14 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS14 = reinterpret_cast<Registers*>(MFS14_BASE);

}

// ============================================================================
// MFS15 Peripheral
// ============================================================================

namespace mfs15 {
    /// Base addresses
    constexpr uint32_t MFS15_BASE = 0x40038F00;

    /// MFS15 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS15 = reinterpret_cast<Registers*>(MFS15_BASE);

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40039000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t CRCCR;  ///< Offset: 0x00 - register CRCCR
        volatile uint32_t CRCINIT;  ///< Offset: 0x04 - register CRCINIT
        volatile uint32_t CRCIN;  ///< Offset: 0x08 - register CRCIN
        volatile uint32_t CRCR;  ///< Offset: 0x0C - register CRCR
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// CRCCR Register bits
    namespace crccr_bits {
        constexpr uint32_t FXOR = (1U << 6);  ///< bitfield FXOR
        constexpr uint32_t CRCLSF = (1U << 5);  ///< bitfield CRCLSF
        constexpr uint32_t CRCLTE = (1U << 4);  ///< bitfield CRCLTE
        constexpr uint32_t LSBFST = (1U << 3);  ///< bitfield LSBFST
        constexpr uint32_t LTLEND = (1U << 2);  ///< bitfield LTLEND
        constexpr uint32_t CRC32 = (1U << 1);  ///< bitfield CRC32
        constexpr uint32_t INIT = (1U << 0);  ///< bitfield INIT
    }

    /// CRCINIT Register bits
    namespace crcinit_bits {
        constexpr uint32_t D = (32 << 0);  ///< bitfield D
    }

    /// CRCIN Register bits
    namespace crcin_bits {
        constexpr uint32_t D = (32 << 0);  ///< bitfield D
    }

    /// CRCR Register bits
    namespace crcr_bits {
        constexpr uint32_t D = (32 << 0);  ///< bitfield D
    }

}

// ============================================================================
// WC Peripheral
// ============================================================================

namespace wc {
    /// Base addresses
    constexpr uint32_t WC_BASE = 0x4003A000;

    /// WC Register structure
    struct Registers {
        volatile uint32_t WCRD;  ///< Offset: 0x00 - register WCRD
        volatile uint32_t WCRL;  ///< Offset: 0x01 - register WCRL
        volatile uint32_t WCCR;  ///< Offset: 0x02 - register WCCR
        volatile uint32_t CLK_SEL;  ///< Offset: 0x10 - register CLK_SEL
        volatile uint32_t CLK_EN;  ///< Offset: 0x14 - register CLK_EN
    };

    /// Peripheral instances
    inline Registers* WC = reinterpret_cast<Registers*>(WC_BASE);

    // Bit definitions
    /// WCRD Register bits
    namespace wcrd_bits {
        constexpr uint32_t CTR = (6 << 0);  ///< bitfield CTR
    }

    /// WCRL Register bits
    namespace wcrl_bits {
        constexpr uint32_t RLC = (6 << 0);  ///< bitfield RLC
    }

    /// WCCR Register bits
    namespace wccr_bits {
        constexpr uint32_t WCEN = (1U << 7);  ///< bitfield WCEN
        constexpr uint32_t WCOP = (1U << 6);  ///< bitfield WCOP
        constexpr uint32_t CS = (2 << 2);  ///< bitfield CS
        constexpr uint32_t WCIE = (1U << 1);  ///< bitfield WCIE
        constexpr uint32_t WCIF = (1U << 0);  ///< bitfield WCIF
    }

    /// CLK_SEL Register bits
    namespace clk_sel_bits {
        constexpr uint32_t SEL_OUT = (3 << 8);  ///< bitfield SEL_OUT
        constexpr uint32_t SEL_IN = (2 << 0);  ///< bitfield SEL_IN
    }

    /// CLK_EN Register bits
    namespace clk_en_bits {
        constexpr uint32_t CLK_EN_R = (1U << 1);  ///< bitfield CLK_EN_R
        constexpr uint32_t CLK_EN = (1U << 0);  ///< bitfield CLK_EN
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x4003B000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t WTCR10;  ///< Offset: 0x100 - register WTCR10
        volatile uint32_t WTCR11;  ///< Offset: 0x104 - register WTCR11
        volatile uint32_t WTCR12;  ///< Offset: 0x108 - register WTCR12
        volatile uint32_t WTCR13;  ///< Offset: 0x10C - register WTCR13
        volatile uint32_t WTCR20;  ///< Offset: 0x110 - register WTCR20
        volatile uint32_t WTCR21;  ///< Offset: 0x114 - register WTCR21
        volatile uint32_t WTSR;  ///< Offset: 0x11C - register WTSR
        volatile uint32_t WTMIR;  ///< Offset: 0x120 - register WTMIR
        volatile uint32_t WTHR;  ///< Offset: 0x124 - register WTHR
        volatile uint32_t WTDR;  ///< Offset: 0x128 - register WTDR
        volatile uint32_t WTDW;  ///< Offset: 0x12C - register WTDW
        volatile uint32_t WTMOR;  ///< Offset: 0x130 - register WTMOR
        volatile uint32_t WTYR;  ///< Offset: 0x134 - register WTYR
        volatile uint32_t ALMIR;  ///< Offset: 0x138 - register ALMIR
        volatile uint32_t ALHR;  ///< Offset: 0x13C - register ALHR
        volatile uint32_t ALDR;  ///< Offset: 0x140 - register ALDR
        volatile uint32_t ALMOR;  ///< Offset: 0x144 - register ALMOR
        volatile uint32_t ALYR;  ///< Offset: 0x148 - register ALYR
        volatile uint32_t WTTR0;  ///< Offset: 0x14C - register WTTR0
        volatile uint32_t WTTR1;  ///< Offset: 0x150 - register WTTR1
        volatile uint32_t WTTR2;  ///< Offset: 0x154 - register WTTR2
        volatile uint32_t WTCAL0;  ///< Offset: 0x158 - register WTCAL0
        volatile uint32_t WTCAL1;  ///< Offset: 0x15C - register WTCAL1
        volatile uint32_t WTCALEN;  ///< Offset: 0x160 - register WTCALEN
        volatile uint32_t WTDIV;  ///< Offset: 0x164 - register WTDIV
        volatile uint32_t WTDIVEN;  ///< Offset: 0x168 - register WTDIVEN
        volatile uint32_t WTCALPRD;  ///< Offset: 0x16C - register WTCALPRD
        volatile uint32_t WTCOSEL;  ///< Offset: 0x170 - register WTCOSEL
        volatile uint32_t VB_CLKDIV;  ///< Offset: 0x174 - register VB_CLKDIV
        volatile uint32_t WTOSCCNT;  ///< Offset: 0x178 - register WTOSCCNT
        volatile uint32_t CCS;  ///< Offset: 0x17C - register CCS
        volatile uint32_t CCB;  ///< Offset: 0x180 - register CCB
        volatile uint32_t TRIM;  ///< Offset: 0x184 - register TRIM
        volatile uint32_t BOOST;  ///< Offset: 0x188 - register BOOST
        volatile uint32_t EWKUP;  ///< Offset: 0x18C - register EWKUP
        volatile uint32_t VDET;  ///< Offset: 0x190 - register VDET
        volatile uint32_t FDET;  ///< Offset: 0x194 - register FDET
        volatile uint32_t HIBRST;  ///< Offset: 0x198 - register HIBRST
        volatile uint32_t VBPFR;  ///< Offset: 0x19C - register VBPFR
        volatile uint32_t VBPCR;  ///< Offset: 0x1A0 - register VBPCR
        volatile uint32_t VBDDR;  ///< Offset: 0x1A4 - register VBDDR
        volatile uint32_t VBDIR;  ///< Offset: 0x1A8 - register VBDIR
        volatile uint32_t VBDOR;  ///< Offset: 0x1AC - register VBDOR
        volatile uint32_t VBPZR;  ///< Offset: 0x1B0 - register VBPZR
        volatile uint32_t BREG00;  ///< Offset: 0x200 - register BREG00
        volatile uint32_t BREG01;  ///< Offset: 0x201 - register BREG01
        volatile uint32_t BREG02;  ///< Offset: 0x202 - register BREG02
        volatile uint32_t BREG03;  ///< Offset: 0x203 - register BREG03
        volatile uint32_t BREG04;  ///< Offset: 0x204 - register BREG04
        volatile uint32_t BREG05;  ///< Offset: 0x205 - register BREG05
        volatile uint32_t BREG06;  ///< Offset: 0x206 - register BREG06
        volatile uint32_t BREG07;  ///< Offset: 0x207 - register BREG07
        volatile uint32_t BREG08;  ///< Offset: 0x208 - register BREG08
        volatile uint32_t BREG09;  ///< Offset: 0x209 - register BREG09
        volatile uint32_t BREG0A;  ///< Offset: 0x20A - register BREG0A
        volatile uint32_t BREG0B;  ///< Offset: 0x20B - register BREG0B
        volatile uint32_t BREG0C;  ///< Offset: 0x20C - register BREG0C
        volatile uint32_t BREG0D;  ///< Offset: 0x20D - register BREG0D
        volatile uint32_t BREG0E;  ///< Offset: 0x20E - register BREG0E
        volatile uint32_t BREG0F;  ///< Offset: 0x20F - register BREG0F
        volatile uint32_t BREG10;  ///< Offset: 0x210 - register BREG10
        volatile uint32_t BREG11;  ///< Offset: 0x211 - register BREG11
        volatile uint32_t BREG12;  ///< Offset: 0x212 - register BREG12
        volatile uint32_t BREG13;  ///< Offset: 0x213 - register BREG13
        volatile uint32_t BREG14;  ///< Offset: 0x214 - register BREG14
        volatile uint32_t BREG15;  ///< Offset: 0x215 - register BREG15
        volatile uint32_t BREG16;  ///< Offset: 0x216 - register BREG16
        volatile uint32_t BREG17;  ///< Offset: 0x217 - register BREG17
        volatile uint32_t BREG18;  ///< Offset: 0x218 - register BREG18
        volatile uint32_t BREG19;  ///< Offset: 0x219 - register BREG19
        volatile uint32_t BREG1A;  ///< Offset: 0x21A - register BREG1A
        volatile uint32_t BREG1B;  ///< Offset: 0x21B - register BREG1B
        volatile uint32_t BREG1C;  ///< Offset: 0x21C - register BREG1C
        volatile uint32_t BREG1D;  ///< Offset: 0x21D - register BREG1D
        volatile uint32_t BREG1E;  ///< Offset: 0x21E - register BREG1E
        volatile uint32_t BREG1F;  ///< Offset: 0x21F - register BREG1F
        volatile uint32_t BREG20;  ///< Offset: 0x220 - register BREG20
        volatile uint32_t BREG21;  ///< Offset: 0x221 - register BREG21
        volatile uint32_t BREG22;  ///< Offset: 0x222 - register BREG22
        volatile uint32_t BREG23;  ///< Offset: 0x223 - register BREG23
        volatile uint32_t BREG24;  ///< Offset: 0x224 - register BREG24
        volatile uint32_t BREG25;  ///< Offset: 0x225 - register BREG25
        volatile uint32_t BREG26;  ///< Offset: 0x226 - register BREG26
        volatile uint32_t BREG27;  ///< Offset: 0x227 - register BREG27
        volatile uint32_t BREG28;  ///< Offset: 0x228 - register BREG28
        volatile uint32_t BREG29;  ///< Offset: 0x229 - register BREG29
        volatile uint32_t BREG2A;  ///< Offset: 0x22A - register BREG2A
        volatile uint32_t BREG2B;  ///< Offset: 0x22B - register BREG2B
        volatile uint32_t BREG2C;  ///< Offset: 0x22C - register BREG2C
        volatile uint32_t BREG2D;  ///< Offset: 0x22D - register BREG2D
        volatile uint32_t BREG2E;  ///< Offset: 0x22E - register BREG2E
        volatile uint32_t BREG2F;  ///< Offset: 0x22F - register BREG2F
        volatile uint32_t BREG30;  ///< Offset: 0x230 - register BREG30
        volatile uint32_t BREG31;  ///< Offset: 0x231 - register BREG31
        volatile uint32_t BREG32;  ///< Offset: 0x232 - register BREG32
        volatile uint32_t BREG33;  ///< Offset: 0x233 - register BREG33
        volatile uint32_t BREG34;  ///< Offset: 0x234 - register BREG34
        volatile uint32_t BREG35;  ///< Offset: 0x235 - register BREG35
        volatile uint32_t BREG36;  ///< Offset: 0x236 - register BREG36
        volatile uint32_t BREG37;  ///< Offset: 0x237 - register BREG37
        volatile uint32_t BREG38;  ///< Offset: 0x238 - register BREG38
        volatile uint32_t BREG39;  ///< Offset: 0x239 - register BREG39
        volatile uint32_t BREG3A;  ///< Offset: 0x23A - register BREG3A
        volatile uint32_t BREG3B;  ///< Offset: 0x23B - register BREG3B
        volatile uint32_t BREG3C;  ///< Offset: 0x23C - register BREG3C
        volatile uint32_t BREG3D;  ///< Offset: 0x23D - register BREG3D
        volatile uint32_t BREG3E;  ///< Offset: 0x23E - register BREG3E
        volatile uint32_t BREG3F;  ///< Offset: 0x23F - register BREG3F
        volatile uint32_t BREG40;  ///< Offset: 0x240 - register BREG40
        volatile uint32_t BREG41;  ///< Offset: 0x241 - register BREG41
        volatile uint32_t BREG42;  ///< Offset: 0x242 - register BREG42
        volatile uint32_t BREG43;  ///< Offset: 0x243 - register BREG43
        volatile uint32_t BREG44;  ///< Offset: 0x244 - register BREG44
        volatile uint32_t BREG45;  ///< Offset: 0x245 - register BREG45
        volatile uint32_t BREG46;  ///< Offset: 0x246 - register BREG46
        volatile uint32_t BREG47;  ///< Offset: 0x247 - register BREG47
        volatile uint32_t BREG48;  ///< Offset: 0x248 - register BREG48
        volatile uint32_t BREG49;  ///< Offset: 0x249 - register BREG49
        volatile uint32_t BREG4A;  ///< Offset: 0x24A - register BREG4A
        volatile uint32_t BREG4B;  ///< Offset: 0x24B - register BREG4B
        volatile uint32_t BREG4C;  ///< Offset: 0x24C - register BREG4C
        volatile uint32_t BREG4D;  ///< Offset: 0x24D - register BREG4D
        volatile uint32_t BREG4E;  ///< Offset: 0x24E - register BREG4E
        volatile uint32_t BREG4F;  ///< Offset: 0x24F - register BREG4F
        volatile uint32_t BREG50;  ///< Offset: 0x250 - register BREG50
        volatile uint32_t BREG51;  ///< Offset: 0x251 - register BREG51
        volatile uint32_t BREG52;  ///< Offset: 0x252 - register BREG52
        volatile uint32_t BREG53;  ///< Offset: 0x253 - register BREG53
        volatile uint32_t BREG54;  ///< Offset: 0x254 - register BREG54
        volatile uint32_t BREG55;  ///< Offset: 0x255 - register BREG55
        volatile uint32_t BREG56;  ///< Offset: 0x256 - register BREG56
        volatile uint32_t BREG57;  ///< Offset: 0x257 - register BREG57
        volatile uint32_t BREG58;  ///< Offset: 0x258 - register BREG58
        volatile uint32_t BREG59;  ///< Offset: 0x259 - register BREG59
        volatile uint32_t BREG5A;  ///< Offset: 0x25A - register BREG5A
        volatile uint32_t BREG5B;  ///< Offset: 0x25B - register BREG5B
        volatile uint32_t BREG5C;  ///< Offset: 0x25C - register BREG5C
        volatile uint32_t BREG5D;  ///< Offset: 0x25D - register BREG5D
        volatile uint32_t BREG5E;  ///< Offset: 0x25E - register BREG5E
        volatile uint32_t BREG5F;  ///< Offset: 0x25F - register BREG5F
        volatile uint32_t BREG60;  ///< Offset: 0x260 - register BREG60
        volatile uint32_t BREG61;  ///< Offset: 0x261 - register BREG61
        volatile uint32_t BREG62;  ///< Offset: 0x262 - register BREG62
        volatile uint32_t BREG63;  ///< Offset: 0x263 - register BREG63
        volatile uint32_t BREG64;  ///< Offset: 0x264 - register BREG64
        volatile uint32_t BREG65;  ///< Offset: 0x265 - register BREG65
        volatile uint32_t BREG66;  ///< Offset: 0x266 - register BREG66
        volatile uint32_t BREG67;  ///< Offset: 0x267 - register BREG67
        volatile uint32_t BREG68;  ///< Offset: 0x268 - register BREG68
        volatile uint32_t BREG69;  ///< Offset: 0x269 - register BREG69
        volatile uint32_t BREG6A;  ///< Offset: 0x26A - register BREG6A
        volatile uint32_t BREG6B;  ///< Offset: 0x26B - register BREG6B
        volatile uint32_t BREG6C;  ///< Offset: 0x26C - register BREG6C
        volatile uint32_t BREG6D;  ///< Offset: 0x26D - register BREG6D
        volatile uint32_t BREG6E;  ///< Offset: 0x26E - register BREG6E
        volatile uint32_t BREG6F;  ///< Offset: 0x26F - register BREG6F
        volatile uint32_t BREG70;  ///< Offset: 0x270 - register BREG70
        volatile uint32_t BREG71;  ///< Offset: 0x271 - register BREG71
        volatile uint32_t BREG72;  ///< Offset: 0x272 - register BREG72
        volatile uint32_t BREG73;  ///< Offset: 0x273 - register BREG73
        volatile uint32_t BREG74;  ///< Offset: 0x274 - register BREG74
        volatile uint32_t BREG75;  ///< Offset: 0x275 - register BREG75
        volatile uint32_t BREG76;  ///< Offset: 0x276 - register BREG76
        volatile uint32_t BREG77;  ///< Offset: 0x277 - register BREG77
        volatile uint32_t BREG78;  ///< Offset: 0x278 - register BREG78
        volatile uint32_t BREG79;  ///< Offset: 0x279 - register BREG79
        volatile uint32_t BREG7A;  ///< Offset: 0x27A - register BREG7A
        volatile uint32_t BREG7B;  ///< Offset: 0x27B - register BREG7B
        volatile uint32_t BREG7C;  ///< Offset: 0x27C - register BREG7C
        volatile uint32_t BREG7D;  ///< Offset: 0x27D - register BREG7D
        volatile uint32_t BREG7E;  ///< Offset: 0x27E - register BREG7E
        volatile uint32_t BREG7F;  ///< Offset: 0x27F - register BREG7F
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// WTCR10 Register bits
    namespace wtcr10_bits {
        constexpr uint32_t TRANS = (1U << 7);  ///< bitfield TRANS
        constexpr uint32_t BUSY = (1U << 6);  ///< bitfield BUSY
        constexpr uint32_t SCRST = (1U << 5);  ///< bitfield SCRST
        constexpr uint32_t SCST = (1U << 4);  ///< bitfield SCST
        constexpr uint32_t SRST = (1U << 3);  ///< bitfield SRST
        constexpr uint32_t RUN = (1U << 2);  ///< bitfield RUN
        constexpr uint32_t ST = (1U << 0);  ///< bitfield ST
    }

    /// WTCR11 Register bits
    namespace wtcr11_bits {
        constexpr uint32_t YEN = (1U << 4);  ///< bitfield YEN
        constexpr uint32_t MOEN = (1U << 3);  ///< bitfield MOEN
        constexpr uint32_t DEN = (1U << 2);  ///< bitfield DEN
        constexpr uint32_t HEN = (1U << 1);  ///< bitfield HEN
        constexpr uint32_t MIEN = (1U << 0);  ///< bitfield MIEN
    }

    /// WTCR12 Register bits
    namespace wtcr12_bits {
        constexpr uint32_t INTCRI = (1U << 7);  ///< bitfield INTCRI
        constexpr uint32_t INTERI = (1U << 6);  ///< bitfield INTERI
        constexpr uint32_t INTALI = (1U << 5);  ///< bitfield INTALI
        constexpr uint32_t INTTMI = (1U << 4);  ///< bitfield INTTMI
        constexpr uint32_t INTHI = (1U << 3);  ///< bitfield INTHI
        constexpr uint32_t INTMI = (1U << 2);  ///< bitfield INTMI
        constexpr uint32_t INTSI = (1U << 1);  ///< bitfield INTSI
        constexpr uint32_t INTSSI = (1U << 0);  ///< bitfield INTSSI
    }

    /// WTCR13 Register bits
    namespace wtcr13_bits {
        constexpr uint32_t INTCRIE = (1U << 7);  ///< bitfield INTCRIE
        constexpr uint32_t INTERIE = (1U << 6);  ///< bitfield INTERIE
        constexpr uint32_t INTALIE = (1U << 5);  ///< bitfield INTALIE
        constexpr uint32_t INTTMIE = (1U << 4);  ///< bitfield INTTMIE
        constexpr uint32_t INTHIE = (1U << 3);  ///< bitfield INTHIE
        constexpr uint32_t INTMIE = (1U << 2);  ///< bitfield INTMIE
        constexpr uint32_t INTSIE = (1U << 1);  ///< bitfield INTSIE
        constexpr uint32_t INTSSIE = (1U << 0);  ///< bitfield INTSSIE
    }

    /// WTCR20 Register bits
    namespace wtcr20_bits {
        constexpr uint32_t PWRITE = (1U << 5);  ///< bitfield PWRITE
        constexpr uint32_t PREAD = (1U << 4);  ///< bitfield PREAD
        constexpr uint32_t BWRITE = (1U << 3);  ///< bitfield BWRITE
        constexpr uint32_t BREAD = (1U << 2);  ///< bitfield BREAD
        constexpr uint32_t CWRITE = (1U << 1);  ///< bitfield CWRITE
        constexpr uint32_t CREAD = (1U << 0);  ///< bitfield CREAD
    }

    /// WTCR21 Register bits
    namespace wtcr21_bits {
        constexpr uint32_t TMRUN = (1U << 2);  ///< bitfield TMRUN
        constexpr uint32_t TMEN = (1U << 1);  ///< bitfield TMEN
        constexpr uint32_t TMST = (1U << 0);  ///< bitfield TMST
    }

    /// WTSR Register bits
    namespace wtsr_bits {
        constexpr uint32_t TS = (3 << 4);  ///< bitfield TS
        constexpr uint32_t S = (4 << 0);  ///< bitfield S
    }

    /// WTMIR Register bits
    namespace wtmir_bits {
        constexpr uint32_t TMI = (3 << 4);  ///< bitfield TMI
        constexpr uint32_t MI = (4 << 0);  ///< bitfield MI
    }

    /// WTHR Register bits
    namespace wthr_bits {
        constexpr uint32_t TH = (2 << 4);  ///< bitfield TH
        constexpr uint32_t H = (4 << 0);  ///< bitfield H
    }

    /// WTDR Register bits
    namespace wtdr_bits {
        constexpr uint32_t TD = (2 << 4);  ///< bitfield TD
        constexpr uint32_t D = (4 << 0);  ///< bitfield D
    }

    /// WTDW Register bits
    namespace wtdw_bits {
        constexpr uint32_t DW = (3 << 0);  ///< bitfield DW
    }

    /// WTMOR Register bits
    namespace wtmor_bits {
        constexpr uint32_t TMO0 = (1U << 4);  ///< bitfield TMO0
        constexpr uint32_t MO = (4 << 0);  ///< bitfield MO
    }

    /// WTYR Register bits
    namespace wtyr_bits {
        constexpr uint32_t TY = (4 << 4);  ///< bitfield TY
        constexpr uint32_t Y = (4 << 0);  ///< bitfield Y
    }

    /// ALMIR Register bits
    namespace almir_bits {
        constexpr uint32_t TAMI = (3 << 4);  ///< bitfield TAMI
        constexpr uint32_t AMI = (4 << 0);  ///< bitfield AMI
    }

    /// ALHR Register bits
    namespace alhr_bits {
        constexpr uint32_t TAH = (2 << 4);  ///< bitfield TAH
        constexpr uint32_t AH = (4 << 0);  ///< bitfield AH
    }

    /// ALDR Register bits
    namespace aldr_bits {
        constexpr uint32_t TAD = (2 << 4);  ///< bitfield TAD
        constexpr uint32_t AD = (4 << 0);  ///< bitfield AD
    }

    /// ALMOR Register bits
    namespace almor_bits {
        constexpr uint32_t TAMO0 = (1U << 4);  ///< bitfield TAMO0
        constexpr uint32_t AMO = (4 << 0);  ///< bitfield AMO
    }

    /// ALYR Register bits
    namespace alyr_bits {
        constexpr uint32_t TAY = (4 << 4);  ///< bitfield TAY
        constexpr uint32_t AY = (4 << 0);  ///< bitfield AY
    }

    /// WTTR0 Register bits
    namespace wttr0_bits {
        constexpr uint32_t TM7 = (1U << 7);  ///< bitfield TM7
        constexpr uint32_t TM6 = (1U << 6);  ///< bitfield TM6
        constexpr uint32_t TM5 = (1U << 5);  ///< bitfield TM5
        constexpr uint32_t TM4 = (1U << 4);  ///< bitfield TM4
        constexpr uint32_t TM3 = (1U << 3);  ///< bitfield TM3
        constexpr uint32_t TM2 = (1U << 2);  ///< bitfield TM2
        constexpr uint32_t TM1 = (1U << 1);  ///< bitfield TM1
        constexpr uint32_t TM0 = (1U << 0);  ///< bitfield TM0
    }

    /// WTTR1 Register bits
    namespace wttr1_bits {
        constexpr uint32_t TM15 = (1U << 7);  ///< bitfield TM15
        constexpr uint32_t TM14 = (1U << 6);  ///< bitfield TM14
        constexpr uint32_t TM13 = (1U << 5);  ///< bitfield TM13
        constexpr uint32_t TM12 = (1U << 4);  ///< bitfield TM12
        constexpr uint32_t TM11 = (1U << 3);  ///< bitfield TM11
        constexpr uint32_t TM10 = (1U << 2);  ///< bitfield TM10
        constexpr uint32_t TM9 = (1U << 1);  ///< bitfield TM9
        constexpr uint32_t TM8 = (1U << 0);  ///< bitfield TM8
    }

    /// WTTR2 Register bits
    namespace wttr2_bits {
        constexpr uint32_t TM17 = (1U << 1);  ///< bitfield TM17
        constexpr uint32_t TM16 = (1U << 0);  ///< bitfield TM16
    }

    /// WTCAL0 Register bits
    namespace wtcal0_bits {
        constexpr uint32_t WTCAL0 = (8 << 0);  ///< bitfield WTCAL0
    }

    /// WTCAL1 Register bits
    namespace wtcal1_bits {
        constexpr uint32_t WTCAL1 = (2 << 0);  ///< bitfield WTCAL1
    }

    /// WTCALEN Register bits
    namespace wtcalen_bits {
        constexpr uint32_t WTCALEN = (1U << 0);  ///< bitfield WTCALEN
    }

    /// WTDIV Register bits
    namespace wtdiv_bits {
        constexpr uint32_t WTDIV = (4 << 0);  ///< bitfield WTDIV
    }

    /// WTDIVEN Register bits
    namespace wtdiven_bits {
        constexpr uint32_t WTDIVRDY = (1U << 1);  ///< bitfield WTDIVRDY
        constexpr uint32_t WTDIVEN = (1U << 0);  ///< bitfield WTDIVEN
    }

    /// WTCALPRD Register bits
    namespace wtcalprd_bits {
        constexpr uint32_t WTCALPRD = (6 << 0);  ///< bitfield WTCALPRD
    }

    /// WTCOSEL Register bits
    namespace wtcosel_bits {
        constexpr uint32_t WTCOSEL = (1U << 0);  ///< bitfield WTCOSEL
    }

    /// VB_CLKDIV Register bits
    namespace vb_clkdiv_bits {
        constexpr uint32_t DIV = (8 << 0);  ///< bitfield DIV
    }

    /// WTOSCCNT Register bits
    namespace wtosccnt_bits {
        constexpr uint32_t SOSCNTL = (1U << 1);  ///< bitfield SOSCNTL
        constexpr uint32_t SOSCEX = (1U << 0);  ///< bitfield SOSCEX
    }

    /// BOOST Register bits
    namespace boost_bits {
        constexpr uint32_t BOOST = (2 << 0);  ///< bitfield BOOST
    }

    /// EWKUP Register bits
    namespace ewkup_bits {
        constexpr uint32_t WUP0 = (1U << 0);  ///< bitfield WUP0
    }

    /// VDET Register bits
    namespace vdet_bits {
        constexpr uint32_t PON = (1U << 7);  ///< bitfield PON
    }

    /// HIBRST Register bits
    namespace hibrst_bits {
        constexpr uint32_t HIBRST = (1U << 0);  ///< bitfield HIBRST
    }

    /// VBPFR Register bits
    namespace vbpfr_bits {
        constexpr uint32_t SPSR1 = (1U << 5);  ///< bitfield SPSR1
        constexpr uint32_t SPSR0 = (1U << 4);  ///< bitfield SPSR0
        constexpr uint32_t VPFR3 = (1U << 3);  ///< bitfield VPFR3
        constexpr uint32_t VPFR2 = (1U << 2);  ///< bitfield VPFR2
        constexpr uint32_t VPFR1 = (1U << 1);  ///< bitfield VPFR1
        constexpr uint32_t VPFR0 = (1U << 0);  ///< bitfield VPFR0
    }

    /// VBPCR Register bits
    namespace vbpcr_bits {
        constexpr uint32_t VPCR3 = (1U << 3);  ///< bitfield VPCR3
        constexpr uint32_t VPCR2 = (1U << 2);  ///< bitfield VPCR2
        constexpr uint32_t VPCR1 = (1U << 1);  ///< bitfield VPCR1
        constexpr uint32_t VPCR0 = (1U << 0);  ///< bitfield VPCR0
    }

    /// VBDDR Register bits
    namespace vbddr_bits {
        constexpr uint32_t VDDR3 = (1U << 3);  ///< bitfield VDDR3
        constexpr uint32_t VDDR2 = (1U << 2);  ///< bitfield VDDR2
        constexpr uint32_t VDDR1 = (1U << 1);  ///< bitfield VDDR1
        constexpr uint32_t VDDR0 = (1U << 0);  ///< bitfield VDDR0
    }

    /// VBDIR Register bits
    namespace vbdir_bits {
        constexpr uint32_t VDIR3 = (1U << 3);  ///< bitfield VDIR3
        constexpr uint32_t VDIR2 = (1U << 2);  ///< bitfield VDIR2
        constexpr uint32_t VDIR1 = (1U << 1);  ///< bitfield VDIR1
        constexpr uint32_t VDIR0 = (1U << 0);  ///< bitfield VDIR0
    }

    /// VBDOR Register bits
    namespace vbdor_bits {
        constexpr uint32_t VDOR3 = (1U << 3);  ///< bitfield VDOR3
        constexpr uint32_t VDOR2 = (1U << 2);  ///< bitfield VDOR2
        constexpr uint32_t VDOR1 = (1U << 1);  ///< bitfield VDOR1
        constexpr uint32_t VDOR0 = (1U << 0);  ///< bitfield VDOR0
    }

    /// VBPZR Register bits
    namespace vbpzr_bits {
        constexpr uint32_t VPZR1 = (1U << 1);  ///< bitfield VPZR1
        constexpr uint32_t VPZR0 = (1U << 0);  ///< bitfield VPZR0
    }

}

// ============================================================================
// LCR Peripheral
// ============================================================================

namespace lcr {
    /// Base addresses
    constexpr uint32_t LCR_BASE = 0x4003C000;

    /// LCR Register structure
    struct Registers {
        volatile uint32_t LCR_PRSLD;  ///< Offset: 0x00 - register LCR_PRSLD
    };

    /// Peripheral instances
    inline Registers* LCR = reinterpret_cast<Registers*>(LCR_BASE);

    // Bit definitions
    /// LCR_PRSLD Register bits
    namespace lcr_prsld_bits {
        constexpr uint32_t LCR_PRSLD = (6 << 0);  ///< bitfield LCR_PRSLD
    }

}

// ============================================================================
// CLK Peripheral
// ============================================================================

namespace clk {
    /// Base addresses
    constexpr uint32_t CLK_GATING_BASE = 0x4003C100;

    /// CLK Register structure
    struct Registers {
        volatile uint32_t CKEN0;  ///< Offset: 0x00 - register CKEN0
        volatile uint32_t MRST0;  ///< Offset: 0x04 - register MRST0
        volatile uint32_t CKEN1;  ///< Offset: 0x10 - register CKEN1
        volatile uint32_t MRST1;  ///< Offset: 0x14 - register MRST1
        volatile uint32_t CKEN2;  ///< Offset: 0x20 - register CKEN2
        volatile uint32_t MRST2;  ///< Offset: 0x24 - register MRST2
    };

    /// Peripheral instances
    inline Registers* CLK_GATING = reinterpret_cast<Registers*>(CLK_GATING_BASE);

    // Bit definitions
    /// CKEN0 Register bits
    namespace cken0_bits {
        constexpr uint32_t GIOCK = (1U << 28);  ///< bitfield GIOCK
        constexpr uint32_t EXBCK = (1U << 26);  ///< bitfield EXBCK
        constexpr uint32_t DMACK = (1U << 24);  ///< bitfield DMACK
        constexpr uint32_t ADCCK3 = (1U << 19);  ///< bitfield ADCCK3
        constexpr uint32_t ADCCK2 = (1U << 18);  ///< bitfield ADCCK2
        constexpr uint32_t ADCCK1 = (1U << 17);  ///< bitfield ADCCK1
        constexpr uint32_t ADCCK0 = (1U << 16);  ///< bitfield ADCCK0
        constexpr uint32_t MFSCK15 = (1U << 15);  ///< bitfield MFSCK15
        constexpr uint32_t MFSCK14 = (1U << 14);  ///< bitfield MFSCK14
        constexpr uint32_t MFSCK13 = (1U << 13);  ///< bitfield MFSCK13
        constexpr uint32_t MFSCK12 = (1U << 12);  ///< bitfield MFSCK12
        constexpr uint32_t MFSCK11 = (1U << 11);  ///< bitfield MFSCK11
        constexpr uint32_t MFSCK10 = (1U << 10);  ///< bitfield MFSCK10
        constexpr uint32_t MFSCK9 = (1U << 9);  ///< bitfield MFSCK9
        constexpr uint32_t MFSCK8 = (1U << 8);  ///< bitfield MFSCK8
        constexpr uint32_t MFSCK7 = (1U << 7);  ///< bitfield MFSCK7
        constexpr uint32_t MFSCK6 = (1U << 6);  ///< bitfield MFSCK6
        constexpr uint32_t MFSCK5 = (1U << 5);  ///< bitfield MFSCK5
        constexpr uint32_t MFSCK4 = (1U << 4);  ///< bitfield MFSCK4
        constexpr uint32_t MFSCK3 = (1U << 3);  ///< bitfield MFSCK3
        constexpr uint32_t MFSCK2 = (1U << 2);  ///< bitfield MFSCK2
        constexpr uint32_t MFSCK1 = (1U << 1);  ///< bitfield MFSCK1
        constexpr uint32_t MFSCK0 = (1U << 0);  ///< bitfield MFSCK0
    }

    /// MRST0 Register bits
    namespace mrst0_bits {
        constexpr uint32_t EXBRST = (1U << 26);  ///< bitfield EXBRST
        constexpr uint32_t DMARST = (1U << 24);  ///< bitfield DMARST
        constexpr uint32_t ADCRST3 = (1U << 19);  ///< bitfield ADCRST3
        constexpr uint32_t ADCRST2 = (1U << 18);  ///< bitfield ADCRST2
        constexpr uint32_t ADCRST1 = (1U << 17);  ///< bitfield ADCRST1
        constexpr uint32_t ADCRST0 = (1U << 16);  ///< bitfield ADCRST0
        constexpr uint32_t MFSRST15 = (1U << 15);  ///< bitfield MFSRST15
        constexpr uint32_t MFSRST14 = (1U << 14);  ///< bitfield MFSRST14
        constexpr uint32_t MFSRST13 = (1U << 13);  ///< bitfield MFSRST13
        constexpr uint32_t MFSRST12 = (1U << 12);  ///< bitfield MFSRST12
        constexpr uint32_t MFSRST11 = (1U << 11);  ///< bitfield MFSRST11
        constexpr uint32_t MFSRST10 = (1U << 10);  ///< bitfield MFSRST10
        constexpr uint32_t MFSRST9 = (1U << 9);  ///< bitfield MFSRST9
        constexpr uint32_t MFSRST8 = (1U << 8);  ///< bitfield MFSRST8
        constexpr uint32_t MFSRST7 = (1U << 7);  ///< bitfield MFSRST7
        constexpr uint32_t MFSRST6 = (1U << 6);  ///< bitfield MFSRST6
        constexpr uint32_t MFSRST5 = (1U << 5);  ///< bitfield MFSRST5
        constexpr uint32_t MFSRST4 = (1U << 4);  ///< bitfield MFSRST4
        constexpr uint32_t MFSRST3 = (1U << 3);  ///< bitfield MFSRST3
        constexpr uint32_t MFSRST2 = (1U << 2);  ///< bitfield MFSRST2
        constexpr uint32_t MFSRST1 = (1U << 1);  ///< bitfield MFSRST1
        constexpr uint32_t MFSRST0 = (1U << 0);  ///< bitfield MFSRST0
    }

    /// CKEN1 Register bits
    namespace cken1_bits {
        constexpr uint32_t QDUCK3 = (1U << 19);  ///< bitfield QDUCK3
        constexpr uint32_t QDUCK2 = (1U << 18);  ///< bitfield QDUCK2
        constexpr uint32_t QDUCK1 = (1U << 17);  ///< bitfield QDUCK1
        constexpr uint32_t QDUCK0 = (1U << 16);  ///< bitfield QDUCK0
        constexpr uint32_t MFTCK3 = (1U << 11);  ///< bitfield MFTCK3
        constexpr uint32_t MFTCK2 = (1U << 10);  ///< bitfield MFTCK2
        constexpr uint32_t MFTCK1 = (1U << 9);  ///< bitfield MFTCK1
        constexpr uint32_t MFTCK0 = (1U << 8);  ///< bitfield MFTCK0
        constexpr uint32_t BTMCK3 = (1U << 3);  ///< bitfield BTMCK3
        constexpr uint32_t BTMCK2 = (1U << 2);  ///< bitfield BTMCK2
        constexpr uint32_t BTMCK1 = (1U << 1);  ///< bitfield BTMCK1
        constexpr uint32_t BTMCK0 = (1U << 0);  ///< bitfield BTMCK0
    }

    /// MRST1 Register bits
    namespace mrst1_bits {
        constexpr uint32_t QDURST3 = (1U << 19);  ///< bitfield QDURST3
        constexpr uint32_t QDURST2 = (1U << 18);  ///< bitfield QDURST2
        constexpr uint32_t QDURST1 = (1U << 17);  ///< bitfield QDURST1
        constexpr uint32_t QDURST0 = (1U << 16);  ///< bitfield QDURST0
        constexpr uint32_t MFTRST3 = (1U << 11);  ///< bitfield MFTRST3
        constexpr uint32_t MFTRST2 = (1U << 10);  ///< bitfield MFTRST2
        constexpr uint32_t MFTRST1 = (1U << 9);  ///< bitfield MFTRST1
        constexpr uint32_t MFTRST0 = (1U << 8);  ///< bitfield MFTRST0
        constexpr uint32_t BTMRST3 = (1U << 3);  ///< bitfield BTMRST3
        constexpr uint32_t BTMRST2 = (1U << 2);  ///< bitfield BTMRST2
        constexpr uint32_t BTMRST1 = (1U << 1);  ///< bitfield BTMRST1
        constexpr uint32_t BTMRST0 = (1U << 0);  ///< bitfield BTMRST0
    }

    /// CKEN2 Register bits
    namespace cken2_bits {
        constexpr uint32_t SDCCK = (1U << 8);  ///< bitfield SDCCK
        constexpr uint32_t CANCK1 = (1U << 5);  ///< bitfield CANCK1
        constexpr uint32_t CANCK0 = (1U << 4);  ///< bitfield CANCK0
        constexpr uint32_t USBCK1 = (1U << 1);  ///< bitfield USBCK1
        constexpr uint32_t USBCK0 = (1U << 0);  ///< bitfield USBCK0
    }

    /// MRST2 Register bits
    namespace mrst2_bits {
        constexpr uint32_t SDCRST = (1U << 8);  ///< bitfield SDCRST
        constexpr uint32_t CANRST1 = (1U << 5);  ///< bitfield CANRST1
        constexpr uint32_t CANRST0 = (1U << 4);  ///< bitfield CANRST0
        constexpr uint32_t USBRST1 = (1U << 1);  ///< bitfield USBRST1
        constexpr uint32_t USBRST0 = (1U << 0);  ///< bitfield USBRST0
    }

}

// ============================================================================
// PLL Peripheral
// ============================================================================

namespace pll {
    /// Base addresses
    constexpr uint32_t PLL_CONTROL_BASE = 0x4003C800;

    /// PLL Register structure
    struct Registers {
        volatile uint32_t SSCTL1;  ///< Offset: 0x00 - register SSCTL1
        volatile uint32_t SSCTL2;  ///< Offset: 0x04 - register SSCTL2
    };

    /// Peripheral instances
    inline Registers* PLL_CONTROL = reinterpret_cast<Registers*>(PLL_CONTROL_BASE);

}

// ============================================================================
// EXBUS Peripheral
// ============================================================================

namespace exbus {
    /// Base addresses
    constexpr uint32_t EXBUS_BASE = 0x4003F000;

    /// EXBUS Register structure
    struct Registers {
        volatile uint32_t MODE0;  ///< Offset: 0x00 - register MODE0
        volatile uint32_t MODE1;  ///< Offset: 0x04 - register MODE1
        volatile uint32_t MODE2;  ///< Offset: 0x08 - register MODE2
        volatile uint32_t MODE3;  ///< Offset: 0x0C - register MODE3
        volatile uint32_t MODE4;  ///< Offset: 0x10 - register MODE4
        volatile uint32_t MODE5;  ///< Offset: 0x14 - register MODE5
        volatile uint32_t MODE6;  ///< Offset: 0x18 - register MODE6
        volatile uint32_t MODE7;  ///< Offset: 0x1C - register MODE7
        volatile uint32_t TIM0;  ///< Offset: 0x20 - register TIM0
        volatile uint32_t TIM1;  ///< Offset: 0x24 - register TIM1
        volatile uint32_t TIM2;  ///< Offset: 0x28 - register TIM2
        volatile uint32_t TIM3;  ///< Offset: 0x2C - register TIM3
        volatile uint32_t TIM4;  ///< Offset: 0x30 - register TIM4
        volatile uint32_t TIM5;  ///< Offset: 0x34 - register TIM5
        volatile uint32_t TIM6;  ///< Offset: 0x38 - register TIM6
        volatile uint32_t TIM7;  ///< Offset: 0x3C - register TIM7
        volatile uint32_t AREA0;  ///< Offset: 0x40 - register AREA0
        volatile uint32_t AREA1;  ///< Offset: 0x44 - register AREA1
        volatile uint32_t AREA2;  ///< Offset: 0x48 - register AREA2
        volatile uint32_t AREA3;  ///< Offset: 0x4C - register AREA3
        volatile uint32_t AREA4;  ///< Offset: 0x50 - register AREA4
        volatile uint32_t AREA5;  ///< Offset: 0x54 - register AREA5
        volatile uint32_t AREA6;  ///< Offset: 0x58 - register AREA6
        volatile uint32_t AREA7;  ///< Offset: 0x5C - register AREA7
        volatile uint32_t ATIM0;  ///< Offset: 0x60 - register ATIM0
        volatile uint32_t ATIM1;  ///< Offset: 0x64 - register ATIM1
        volatile uint32_t ATIM2;  ///< Offset: 0x68 - register ATIM2
        volatile uint32_t ATIM3;  ///< Offset: 0x6C - register ATIM3
        volatile uint32_t ATIM4;  ///< Offset: 0x70 - register ATIM4
        volatile uint32_t ATIM5;  ///< Offset: 0x74 - register ATIM5
        volatile uint32_t ATIM6;  ///< Offset: 0x78 - register ATIM6
        volatile uint32_t ATIM7;  ///< Offset: 0x7C - register ATIM7
        volatile uint32_t SMODE;  ///< Offset: 0x100 - register SMODE
        volatile uint32_t REFTIM;  ///< Offset: 0x104 - register REFTIM
        volatile uint32_t PWRDWN;  ///< Offset: 0x108 - register PWRDWN
        volatile uint32_t SDTIM;  ///< Offset: 0x10C - register SDTIM
        volatile uint32_t SDCMD;  ///< Offset: 0x110 - register SDCMD
        volatile uint32_t MEMCERR;  ///< Offset: 0x200 - register MEMCERR
        volatile uint32_t DCLKR;  ///< Offset: 0x300 - register DCLKR
        volatile uint32_t EST;  ///< Offset: 0x304 - register EST
        volatile uint32_t WEAD;  ///< Offset: 0x308 - register WEAD
        volatile uint32_t ESCLR;  ///< Offset: 0x30C - register ESCLR
        volatile uint32_t AMODE;  ///< Offset: 0x310 - register AMODE
    };

    /// Peripheral instances
    inline Registers* EXBUS = reinterpret_cast<Registers*>(EXBUS_BASE);

    // Bit definitions
    /// MODE0 Register bits
    namespace mode0_bits {
        constexpr uint32_t MOEXEUP = (1U << 13);  ///< bitfield MOEXEUP
        constexpr uint32_t MPXCSOF = (1U << 12);  ///< bitfield MPXCSOF
        constexpr uint32_t MPXDOFF = (1U << 11);  ///< bitfield MPXDOFF
        constexpr uint32_t ALEINV = (1U << 9);  ///< bitfield ALEINV
        constexpr uint32_t MPXMODE = (1U << 8);  ///< bitfield MPXMODE
        constexpr uint32_t SHRTDOUT = (1U << 7);  ///< bitfield SHRTDOUT
        constexpr uint32_t RDY = (1U << 6);  ///< bitfield RDY
        constexpr uint32_t PAGE = (1U << 5);  ///< bitfield PAGE
        constexpr uint32_t NAND = (1U << 4);  ///< bitfield NAND
        constexpr uint32_t WEOFF = (1U << 3);  ///< bitfield WEOFF
        constexpr uint32_t RBMON = (1U << 2);  ///< bitfield RBMON
        constexpr uint32_t WDTH = (2 << 0);  ///< bitfield WDTH
    }

    /// TIM0 Register bits
    namespace tim0_bits {
        constexpr uint32_t WIDLC = (4 << 28);  ///< bitfield WIDLC
        constexpr uint32_t WWEC = (4 << 24);  ///< bitfield WWEC
        constexpr uint32_t WADC = (4 << 20);  ///< bitfield WADC
        constexpr uint32_t WACC = (4 << 16);  ///< bitfield WACC
        constexpr uint32_t RIDLC = (4 << 12);  ///< bitfield RIDLC
        constexpr uint32_t FRADC = (4 << 8);  ///< bitfield FRADC
        constexpr uint32_t RADC = (4 << 4);  ///< bitfield RADC
        constexpr uint32_t RACC = (4 << 0);  ///< bitfield RACC
    }

    /// AREA0 Register bits
    namespace area0_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA1 Register bits
    namespace area1_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA2 Register bits
    namespace area2_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA3 Register bits
    namespace area3_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA4 Register bits
    namespace area4_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA5 Register bits
    namespace area5_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA6 Register bits
    namespace area6_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA7 Register bits
    namespace area7_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// ATIM0 Register bits
    namespace atim0_bits {
        constexpr uint32_t ALEW = (4 << 8);  ///< bitfield ALEW
        constexpr uint32_t ALES = (4 << 4);  ///< bitfield ALES
        constexpr uint32_t ALC = (4 << 0);  ///< bitfield ALC
    }

    /// SMODE Register bits
    namespace smode_bits {
        constexpr uint32_t MSDCLKOFF = (1U << 16);  ///< bitfield MSDCLKOFF
        constexpr uint32_t BASEL = (4 << 12);  ///< bitfield BASEL
        constexpr uint32_t RASEL = (4 << 8);  ///< bitfield RASEL
        constexpr uint32_t CASEL = (2 << 4);  ///< bitfield CASEL
        constexpr uint32_t ROFF = (1U << 2);  ///< bitfield ROFF
        constexpr uint32_t PDON = (1U << 1);  ///< bitfield PDON
        constexpr uint32_t SDON = (1U << 0);  ///< bitfield SDON
    }

    /// REFTIM Register bits
    namespace reftim_bits {
        constexpr uint32_t PREF = (1U << 24);  ///< bitfield PREF
        constexpr uint32_t NREF = (8 << 16);  ///< bitfield NREF
        constexpr uint32_t REFC = (16 << 0);  ///< bitfield REFC
    }

    /// PWRDWN Register bits
    namespace pwrdwn_bits {
        constexpr uint32_t PDC = (16 << 0);  ///< bitfield PDC
    }

    /// SDTIM Register bits
    namespace sdtim_bits {
        constexpr uint32_t TDPL = (2 << 24);  ///< bitfield TDPL
        constexpr uint32_t TREFC = (4 << 20);  ///< bitfield TREFC
        constexpr uint32_t TRAS = (4 << 16);  ///< bitfield TRAS
        constexpr uint32_t TRCD = (4 << 12);  ///< bitfield TRCD
        constexpr uint32_t TRP = (4 << 8);  ///< bitfield TRP
        constexpr uint32_t TRC = (4 << 4);  ///< bitfield TRC
        constexpr uint32_t CL = (2 << 0);  ///< bitfield CL
    }

    /// SDCMD Register bits
    namespace sdcmd_bits {
        constexpr uint32_t PEND = (1U << 31);  ///< bitfield PEND
        constexpr uint32_t SDCKE = (1U << 20);  ///< bitfield SDCKE
        constexpr uint32_t SDCS = (1U << 19);  ///< bitfield SDCS
        constexpr uint32_t SDRAS = (1U << 18);  ///< bitfield SDRAS
        constexpr uint32_t SDCAS = (1U << 17);  ///< bitfield SDCAS
        constexpr uint32_t SDWE = (1U << 16);  ///< bitfield SDWE
        constexpr uint32_t SDAD = (16 << 0);  ///< bitfield SDAD
    }

    /// MEMCERR Register bits
    namespace memcerr_bits {
        constexpr uint32_t SDION = (1U << 3);  ///< bitfield SDION
        constexpr uint32_t SFION = (1U << 2);  ///< bitfield SFION
        constexpr uint32_t SDER = (1U << 1);  ///< bitfield SDER
        constexpr uint32_t SFER = (1U << 0);  ///< bitfield SFER
    }

    /// DCLKR Register bits
    namespace dclkr_bits {
        constexpr uint32_t MCLKON = (1U << 4);  ///< bitfield MCLKON
        constexpr uint32_t MDIV = (4 << 0);  ///< bitfield MDIV
    }

    /// EST Register bits
    namespace est_bits {
        constexpr uint32_t WERR = (1U << 0);  ///< bitfield WERR
    }

    /// WEAD Register bits
    namespace wead_bits {
        constexpr uint32_t ADDR = (32 << 0);  ///< bitfield ADDR
    }

    /// ESCLR Register bits
    namespace esclr_bits {
        constexpr uint32_t WERRCLR = (1U << 0);  ///< bitfield WERRCLR
    }

    /// AMODE Register bits
    namespace amode_bits {
        constexpr uint32_t WAEN = (1U << 0);  ///< bitfield WAEN
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAC_BASE = 0x40060000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t DMACR;  ///< Offset: 0x00 - register DMACR
        volatile uint32_t DMACA0;  ///< Offset: 0x10 - register DMACA0
        volatile uint32_t DMACB0;  ///< Offset: 0x14 - register DMACB0
        volatile uint32_t DMACSA0;  ///< Offset: 0x18 - register DMACSA0
        volatile uint32_t DMACDA0;  ///< Offset: 0x1C - register DMACDA0
        volatile uint32_t DMACA1;  ///< Offset: 0x20 - register DMACA1
        volatile uint32_t DMACB1;  ///< Offset: 0x24 - register DMACB1
        volatile uint32_t DMACSA1;  ///< Offset: 0x28 - register DMACSA1
        volatile uint32_t DMACDA1;  ///< Offset: 0x2C - register DMACDA1
        volatile uint32_t DMACA2;  ///< Offset: 0x30 - register DMACA2
        volatile uint32_t DMACB2;  ///< Offset: 0x34 - register DMACB2
        volatile uint32_t DMACSA2;  ///< Offset: 0x38 - register DMACSA2
        volatile uint32_t DMACDA2;  ///< Offset: 0x3C - register DMACDA2
        volatile uint32_t DMACA3;  ///< Offset: 0x40 - register DMACA3
        volatile uint32_t DMACB3;  ///< Offset: 0x44 - register DMACB3
        volatile uint32_t DMACSA3;  ///< Offset: 0x48 - register DMACSA3
        volatile uint32_t DMACDA3;  ///< Offset: 0x4C - register DMACDA3
        volatile uint32_t DMACA4;  ///< Offset: 0x50 - register DMACA4
        volatile uint32_t DMACB4;  ///< Offset: 0x54 - register DMACB4
        volatile uint32_t DMACSA4;  ///< Offset: 0x58 - register DMACSA4
        volatile uint32_t DMACDA4;  ///< Offset: 0x5C - register DMACDA4
        volatile uint32_t DMACA5;  ///< Offset: 0x60 - register DMACA5
        volatile uint32_t DMACB5;  ///< Offset: 0x64 - register DMACB5
        volatile uint32_t DMACSA5;  ///< Offset: 0x68 - register DMACSA5
        volatile uint32_t DMACDA5;  ///< Offset: 0x6C - register DMACDA5
        volatile uint32_t DMACA6;  ///< Offset: 0x70 - register DMACA6
        volatile uint32_t DMACB6;  ///< Offset: 0x74 - register DMACB6
        volatile uint32_t DMACSA6;  ///< Offset: 0x78 - register DMACSA6
        volatile uint32_t DMACDA6;  ///< Offset: 0x7C - register DMACDA6
        volatile uint32_t DMACA7;  ///< Offset: 0x80 - register DMACA7
        volatile uint32_t DMACB7;  ///< Offset: 0x84 - register DMACB7
        volatile uint32_t DMACSA7;  ///< Offset: 0x88 - register DMACSA7
        volatile uint32_t DMACDA7;  ///< Offset: 0x8C - register DMACDA7
    };

    /// Peripheral instances
    inline Registers* DMAC = reinterpret_cast<Registers*>(DMAC_BASE);

    // Bit definitions
    /// DMACR Register bits
    namespace dmacr_bits {
        constexpr uint32_t DE = (1U << 31);  ///< bitfield DE
        constexpr uint32_t DS = (1U << 30);  ///< bitfield DS
        constexpr uint32_t PR = (1U << 28);  ///< bitfield PR
        constexpr uint32_t DH = (4 << 24);  ///< bitfield DH
    }

    /// DMACA0 Register bits
    namespace dmaca0_bits {
        constexpr uint32_t EB = (1U << 31);  ///< bitfield EB
        constexpr uint32_t PB = (1U << 30);  ///< bitfield PB
        constexpr uint32_t ST = (1U << 29);  ///< bitfield ST
        constexpr uint32_t IS = (6 << 23);  ///< bitfield IS
        constexpr uint32_t BC = (4 << 16);  ///< bitfield BC
        constexpr uint32_t TC = (16 << 0);  ///< bitfield TC
    }

    /// DMACB0 Register bits
    namespace dmacb0_bits {
        constexpr uint32_t MS = (2 << 28);  ///< bitfield MS
        constexpr uint32_t TW = (2 << 26);  ///< bitfield TW
        constexpr uint32_t FS = (1U << 25);  ///< bitfield FS
        constexpr uint32_t FD = (1U << 24);  ///< bitfield FD
        constexpr uint32_t RC = (1U << 23);  ///< bitfield RC
        constexpr uint32_t RS = (1U << 22);  ///< bitfield RS
        constexpr uint32_t RD = (1U << 21);  ///< bitfield RD
        constexpr uint32_t EI = (1U << 20);  ///< bitfield EI
        constexpr uint32_t CI = (1U << 19);  ///< bitfield CI
        constexpr uint32_t SS = (3 << 16);  ///< bitfield SS
        constexpr uint32_t EM = (1U << 0);  ///< bitfield EM
    }

}

// ============================================================================
// DSTC Peripheral
// ============================================================================

namespace dstc {
    /// Base addresses
    constexpr uint32_t DSTC_BASE = 0x40061000;

    /// DSTC Register structure
    struct Registers {
        volatile uint32_t DESTP;  ///< Offset: 0x00 - register DESTP
        volatile uint32_t HWDESP;  ///< Offset: 0x04 - register HWDESP
        volatile uint32_t CMD;  ///< Offset: 0x08 - register CMD
        volatile uint32_t CFG;  ///< Offset: 0x09 - register CFG
        volatile uint32_t SWTR;  ///< Offset: 0x0A - register SWTR
        volatile uint32_t MONERS;  ///< Offset: 0x0C - register MONERS
        volatile uint32_t DREQENB0;  ///< Offset: 0x10 - register DREQENB0
        volatile uint32_t DREQENB1;  ///< Offset: 0x14 - register DREQENB1
        volatile uint32_t DREQENB2;  ///< Offset: 0x18 - register DREQENB2
        volatile uint32_t DREQENB3;  ///< Offset: 0x1C - register DREQENB3
        volatile uint32_t DREQENB4;  ///< Offset: 0x20 - register DREQENB4
        volatile uint32_t DREQENB5;  ///< Offset: 0x24 - register DREQENB5
        volatile uint32_t DREQENB6;  ///< Offset: 0x28 - register DREQENB6
        volatile uint32_t DREQENB7;  ///< Offset: 0x2C - register DREQENB7
        volatile uint32_t HWINT0;  ///< Offset: 0x30 - register HWINT0
        volatile uint32_t HWINT1;  ///< Offset: 0x34 - register HWINT1
        volatile uint32_t HWINT2;  ///< Offset: 0x38 - register HWINT2
        volatile uint32_t HWINT3;  ///< Offset: 0x3C - register HWINT3
        volatile uint32_t HWINT4;  ///< Offset: 0x40 - register HWINT4
        volatile uint32_t HWINT5;  ///< Offset: 0x44 - register HWINT5
        volatile uint32_t HWINT6;  ///< Offset: 0x48 - register HWINT6
        volatile uint32_t HWINT7;  ///< Offset: 0x4C - register HWINT7
        volatile uint32_t DQMSK0;  ///< Offset: 0x70 - register DQMSK0
        volatile uint32_t DQMSK1;  ///< Offset: 0x74 - register DQMSK1
        volatile uint32_t DQMSK2;  ///< Offset: 0x78 - register DQMSK2
        volatile uint32_t DQMSK3;  ///< Offset: 0x7C - register DQMSK3
        volatile uint32_t DQMSK4;  ///< Offset: 0x80 - register DQMSK4
        volatile uint32_t DQMSK5;  ///< Offset: 0x84 - register DQMSK5
        volatile uint32_t DQMSK6;  ///< Offset: 0x88 - register DQMSK6
        volatile uint32_t DQMSK7;  ///< Offset: 0x8C - register DQMSK7
        volatile uint32_t DQMSKCLR0;  ///< Offset: 0x90 - register DQMSKCLR0
        volatile uint32_t DQMSKCLR1;  ///< Offset: 0x94 - register DQMSKCLR1
        volatile uint32_t DQMSKCLR2;  ///< Offset: 0x98 - register DQMSKCLR2
        volatile uint32_t DQMSKCLR3;  ///< Offset: 0x9C - register DQMSKCLR3
        volatile uint32_t DQMSKCLR4;  ///< Offset: 0xA0 - register DQMSKCLR4
        volatile uint32_t DQMSKCLR5;  ///< Offset: 0xA4 - register DQMSKCLR5
        volatile uint32_t DQMSKCLR6;  ///< Offset: 0xA8 - register DQMSKCLR6
        volatile uint32_t DQMSKCLR7;  ///< Offset: 0xAC - register DQMSKCLR7
    };

    /// Peripheral instances
    inline Registers* DSTC = reinterpret_cast<Registers*>(DSTC_BASE);

    // Bit definitions
    /// HWDESP Register bits
    namespace hwdesp_bits {
        constexpr uint32_t HWDESP = (14 << 16);  ///< bitfield HWDESP
        constexpr uint32_t CHANNEL = (8 << 0);  ///< bitfield CHANNEL
    }

    /// CFG Register bits
    namespace cfg_bits {
        constexpr uint32_t SWPR = (3 << 4);  ///< bitfield SWPR
        constexpr uint32_t ESTE = (1U << 3);  ///< bitfield ESTE
        constexpr uint32_t RBDIS = (1U << 2);  ///< bitfield RBDIS
        constexpr uint32_t ERINTE = (1U << 1);  ///< bitfield ERINTE
        constexpr uint32_t SWINTE = (1U << 0);  ///< bitfield SWINTE
    }

    /// SWTR Register bits
    namespace swtr_bits {
        constexpr uint32_t SWST = (1U << 15);  ///< bitfield SWST
        constexpr uint32_t SWREQ = (1U << 14);  ///< bitfield SWREQ
        constexpr uint32_t SWDESP = (14 << 0);  ///< bitfield SWDESP
    }

    /// MONERS Register bits
    namespace moners_bits {
        constexpr uint32_t EDESP = (14 << 16);  ///< bitfield EDESP
        constexpr uint32_t ECH = (8 << 8);  ///< bitfield ECH
        constexpr uint32_t EHS = (1U << 6);  ///< bitfield EHS
        constexpr uint32_t ESTOP = (1U << 4);  ///< bitfield ESTOP
        constexpr uint32_t DER = (1U << 3);  ///< bitfield DER
        constexpr uint32_t EST = (3 << 0);  ///< bitfield EST
    }

}

// ============================================================================
// SDIF Peripheral
// ============================================================================

namespace sdif {
    /// Base addresses
    constexpr uint32_t SDIF_BASE = 0x4006E000;

    /// SDIF Register structure
    struct Registers {
        volatile uint32_t DUMMY;  ///< Offset: 0x00 - register DUMMY
    };

    /// Peripheral instances
    inline Registers* SDIF = reinterpret_cast<Registers*>(SDIF_BASE);

}


} // namespace alloy::generated::mb9bf16xx

#endif // ALLOY_GENERATED_MB9BF16XX_PERIPHERALS_HPP