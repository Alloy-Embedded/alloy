/// Auto-generated code for MB9BF32xT
/// Generated by Alloy Code Generator
/// Source: spansion_mb9bf32xt.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:22:05
#ifndef ALLOY_GENERATED_MB9BF32XT_PERIPHERALS_HPP
#define ALLOY_GENERATED_MB9BF32XT_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::mb9bf32xt {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_IF_BASE = 0x40000000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t FRWTR;  ///< Offset: 0x04 - register FRWTR
        volatile uint32_t FSTR;  ///< Offset: 0x08 - register FSTR
        volatile uint32_t FICR;  ///< Offset: 0x20 - register FICR
        volatile uint32_t FISR;  ///< Offset: 0x24 - register FISR
        volatile uint32_t FICLR;  ///< Offset: 0x28 - register FICLR
        volatile uint32_t FSTR1;  ///< Offset: 0x88 - register FSTR1
        volatile uint32_t CRTRMM;  ///< Offset: 0x100 - register CRTRMM
    };

    /// Peripheral instances
    inline Registers* FLASH_IF = reinterpret_cast<Registers*>(FLASH_IF_BASE);

    // Bit definitions
    /// FRWTR Register bits
    namespace frwtr_bits {
        constexpr uint32_t RWT = (2 << 0);  ///< bitfield RWT
    }

    /// FSTR Register bits
    namespace fstr_bits {
        constexpr uint32_t PGMS = (1U << 5);  ///< bitfield PGMS
        constexpr uint32_t SERS = (1U << 4);  ///< bitfield SERS
        constexpr uint32_t ESPS = (1U << 3);  ///< bitfield ESPS
        constexpr uint32_t CERS = (1U << 2);  ///< bitfield CERS
        constexpr uint32_t HNG = (1U << 1);  ///< bitfield HNG
        constexpr uint32_t RDY = (1U << 0);  ///< bitfield RDY
    }

    /// FICR Register bits
    namespace ficr_bits {
        constexpr uint32_t HANGIE = (1U << 1);  ///< bitfield HANGIE
        constexpr uint32_t RDYIE = (1U << 0);  ///< bitfield RDYIE
    }

    /// FISR Register bits
    namespace fisr_bits {
        constexpr uint32_t HANGIF = (1U << 1);  ///< bitfield HANGIF
        constexpr uint32_t RDYIF = (1U << 0);  ///< bitfield RDYIF
    }

    /// FICLR Register bits
    namespace ficlr_bits {
        constexpr uint32_t HANGC = (1U << 1);  ///< bitfield HANGC
        constexpr uint32_t RDYC = (1U << 0);  ///< bitfield RDYC
    }

    /// FSTR1 Register bits
    namespace fstr1_bits {
        constexpr uint32_t PGMS = (1U << 5);  ///< bitfield PGMS
        constexpr uint32_t SERS = (1U << 4);  ///< bitfield SERS
        constexpr uint32_t ESPS = (1U << 3);  ///< bitfield ESPS
        constexpr uint32_t CERS = (1U << 2);  ///< bitfield CERS
        constexpr uint32_t HNG = (1U << 1);  ///< bitfield HNG
        constexpr uint32_t RDY = (1U << 0);  ///< bitfield RDY
    }

    /// CRTRMM Register bits
    namespace crtrmm_bits {
        constexpr uint32_t TTRMM = (5 << 16);  ///< bitfield TTRMM
        constexpr uint32_t TRMM = (10 << 0);  ///< bitfield TRMM
    }

}

// ============================================================================
// UNIQUE Peripheral
// ============================================================================

namespace unique {
    /// Base addresses
    constexpr uint32_t UNIQUE_ID_BASE = 0x40000200;

    /// UNIQUE Register structure
    struct Registers {
        volatile uint32_t UIDR0;  ///< Offset: 0x00 - register UIDR0
        volatile uint32_t UIDR1;  ///< Offset: 0x04 - register UIDR1
    };

    /// Peripheral instances
    inline Registers* UNIQUE_ID = reinterpret_cast<Registers*>(UNIQUE_ID_BASE);

    // Bit definitions
    /// UIDR0 Register bits
    namespace uidr0_bits {
        constexpr uint32_t UID27 = (1U << 31);  ///< bitfield UID27
        constexpr uint32_t UID26 = (1U << 30);  ///< bitfield UID26
        constexpr uint32_t UID25 = (1U << 29);  ///< bitfield UID25
        constexpr uint32_t UID24 = (1U << 28);  ///< bitfield UID24
        constexpr uint32_t UID23 = (1U << 27);  ///< bitfield UID23
        constexpr uint32_t UID22 = (1U << 26);  ///< bitfield UID22
        constexpr uint32_t UID21 = (1U << 25);  ///< bitfield UID21
        constexpr uint32_t UID20 = (1U << 24);  ///< bitfield UID20
        constexpr uint32_t UID19 = (1U << 23);  ///< bitfield UID19
        constexpr uint32_t UID18 = (1U << 22);  ///< bitfield UID18
        constexpr uint32_t UID17 = (1U << 21);  ///< bitfield UID17
        constexpr uint32_t UID16 = (1U << 20);  ///< bitfield UID16
        constexpr uint32_t UID15 = (1U << 19);  ///< bitfield UID15
        constexpr uint32_t UID14 = (1U << 18);  ///< bitfield UID14
        constexpr uint32_t UID13 = (1U << 17);  ///< bitfield UID13
        constexpr uint32_t UID12 = (1U << 16);  ///< bitfield UID12
        constexpr uint32_t UID11 = (1U << 15);  ///< bitfield UID11
        constexpr uint32_t UID10 = (1U << 14);  ///< bitfield UID10
        constexpr uint32_t UID9 = (1U << 13);  ///< bitfield UID9
        constexpr uint32_t UID8 = (1U << 12);  ///< bitfield UID8
        constexpr uint32_t UID7 = (1U << 11);  ///< bitfield UID7
        constexpr uint32_t UID6 = (1U << 10);  ///< bitfield UID6
        constexpr uint32_t UID5 = (1U << 9);  ///< bitfield UID5
        constexpr uint32_t UID4 = (1U << 8);  ///< bitfield UID4
        constexpr uint32_t UID3 = (1U << 7);  ///< bitfield UID3
        constexpr uint32_t UID2 = (1U << 6);  ///< bitfield UID2
        constexpr uint32_t UID1 = (1U << 5);  ///< bitfield UID1
        constexpr uint32_t UID0 = (1U << 4);  ///< bitfield UID0
    }

    /// UIDR1 Register bits
    namespace uidr1_bits {
        constexpr uint32_t UID40 = (1U << 12);  ///< bitfield UID40
        constexpr uint32_t UID39 = (1U << 11);  ///< bitfield UID39
        constexpr uint32_t UID38 = (1U << 10);  ///< bitfield UID38
        constexpr uint32_t UID37 = (1U << 9);  ///< bitfield UID37
        constexpr uint32_t UID36 = (1U << 8);  ///< bitfield UID36
        constexpr uint32_t UID35 = (1U << 7);  ///< bitfield UID35
        constexpr uint32_t UID34 = (1U << 6);  ///< bitfield UID34
        constexpr uint32_t UID33 = (1U << 5);  ///< bitfield UID33
        constexpr uint32_t UID32 = (1U << 4);  ///< bitfield UID32
        constexpr uint32_t UID31 = (1U << 3);  ///< bitfield UID31
        constexpr uint32_t UID30 = (1U << 2);  ///< bitfield UID30
        constexpr uint32_t UID29 = (1U << 1);  ///< bitfield UID29
        constexpr uint32_t UID28 = (1U << 0);  ///< bitfield UID28
    }

}

// ============================================================================
// CRG Peripheral
// ============================================================================

namespace crg {
    /// Base addresses
    constexpr uint32_t CRG_BASE = 0x40010000;

    /// CRG Register structure
    struct Registers {
        volatile uint32_t SCM_CTL;  ///< Offset: 0x00 - register SCM_CTL
        volatile uint32_t SCM_STR;  ///< Offset: 0x04 - register SCM_STR
        volatile uint32_t BSC_PSR;  ///< Offset: 0x10 - register BSC_PSR
        volatile uint32_t APBC0_PSR;  ///< Offset: 0x14 - register APBC0_PSR
        volatile uint32_t APBC1_PSR;  ///< Offset: 0x18 - register APBC1_PSR
        volatile uint32_t APBC2_PSR;  ///< Offset: 0x1C - register APBC2_PSR
        volatile uint32_t SWC_PSR;  ///< Offset: 0x20 - register SWC_PSR
        volatile uint32_t TTC_PSR;  ///< Offset: 0x28 - register TTC_PSR
        volatile uint32_t CSW_TMR;  ///< Offset: 0x30 - register CSW_TMR
        volatile uint32_t PSW_TMR;  ///< Offset: 0x34 - register PSW_TMR
        volatile uint32_t PLL_CTL1;  ///< Offset: 0x38 - register PLL_CTL1
        volatile uint32_t PLL_CTL2;  ///< Offset: 0x3C - register PLL_CTL2
        volatile uint32_t DBWDT_CTL;  ///< Offset: 0x54 - register DBWDT_CTL
        volatile uint32_t INT_ENR;  ///< Offset: 0x60 - register INT_ENR
        volatile uint32_t INT_STR;  ///< Offset: 0x64 - register INT_STR
        volatile uint32_t INT_CLR;  ///< Offset: 0x68 - register INT_CLR
        volatile uint32_t RST_STR;  ///< Offset: 0x0C - register RST_STR
        volatile uint32_t STB_CTL;  ///< Offset: 0x08 - register STB_CTL
        volatile uint32_t CSV_CTL;  ///< Offset: 0x40 - register CSV_CTL
        volatile uint32_t CSV_STR;  ///< Offset: 0x44 - register CSV_STR
        volatile uint32_t FCSWH_CTL;  ///< Offset: 0x48 - register FCSWH_CTL
        volatile uint32_t FCSWL_CTL;  ///< Offset: 0x4C - register FCSWL_CTL
        volatile uint32_t FCSWD_CTL;  ///< Offset: 0x50 - register FCSWD_CTL
    };

    /// Peripheral instances
    inline Registers* CRG = reinterpret_cast<Registers*>(CRG_BASE);

    // Bit definitions
    /// SCM_CTL Register bits
    namespace scm_ctl_bits {
        constexpr uint32_t RCS = (3 << 5);  ///< bitfield RCS
        constexpr uint32_t PLLE = (1U << 4);  ///< bitfield PLLE
        constexpr uint32_t SOSCE = (1U << 3);  ///< bitfield SOSCE
        constexpr uint32_t MOSCE = (1U << 1);  ///< bitfield MOSCE
    }

    /// SCM_STR Register bits
    namespace scm_str_bits {
        constexpr uint32_t RCM = (3 << 5);  ///< bitfield RCM
        constexpr uint32_t PLRDY = (1U << 4);  ///< bitfield PLRDY
        constexpr uint32_t SORDY = (1U << 3);  ///< bitfield SORDY
        constexpr uint32_t MORDY = (1U << 1);  ///< bitfield MORDY
    }

    /// BSC_PSR Register bits
    namespace bsc_psr_bits {
        constexpr uint32_t BSR = (3 << 0);  ///< bitfield BSR
    }

    /// APBC0_PSR Register bits
    namespace apbc0_psr_bits {
        constexpr uint32_t APBC0 = (2 << 0);  ///< bitfield APBC0
    }

    /// APBC1_PSR Register bits
    namespace apbc1_psr_bits {
        constexpr uint32_t APBC1EN = (1U << 7);  ///< bitfield APBC1EN
        constexpr uint32_t APBC1RST = (1U << 4);  ///< bitfield APBC1RST
        constexpr uint32_t APBC1 = (2 << 0);  ///< bitfield APBC1
    }

    /// APBC2_PSR Register bits
    namespace apbc2_psr_bits {
        constexpr uint32_t APBC2EN = (1U << 7);  ///< bitfield APBC2EN
        constexpr uint32_t APBC2RST = (1U << 4);  ///< bitfield APBC2RST
        constexpr uint32_t APBC2 = (2 << 0);  ///< bitfield APBC2
    }

    /// SWC_PSR Register bits
    namespace swc_psr_bits {
        constexpr uint32_t TESTB = (1U << 7);  ///< bitfield TESTB
        constexpr uint32_t SWDS = (2 << 0);  ///< bitfield SWDS
    }

    /// TTC_PSR Register bits
    namespace ttc_psr_bits {
        constexpr uint32_t TTC = (2 << 0);  ///< bitfield TTC
    }

    /// CSW_TMR Register bits
    namespace csw_tmr_bits {
        constexpr uint32_t SOWT = (3 << 4);  ///< bitfield SOWT
        constexpr uint32_t MOWT = (4 << 0);  ///< bitfield MOWT
    }

    /// PSW_TMR Register bits
    namespace psw_tmr_bits {
        constexpr uint32_t PINC = (1U << 4);  ///< bitfield PINC
        constexpr uint32_t POWT = (3 << 0);  ///< bitfield POWT
    }

    /// PLL_CTL1 Register bits
    namespace pll_ctl1_bits {
        constexpr uint32_t PLLK = (4 << 4);  ///< bitfield PLLK
        constexpr uint32_t PLLM = (4 << 0);  ///< bitfield PLLM
    }

    /// PLL_CTL2 Register bits
    namespace pll_ctl2_bits {
        constexpr uint32_t PLLN = (6 << 0);  ///< bitfield PLLN
    }

    /// DBWDT_CTL Register bits
    namespace dbwdt_ctl_bits {
        constexpr uint32_t DPHWBE = (1U << 7);  ///< bitfield DPHWBE
        constexpr uint32_t DPSWBE = (1U << 5);  ///< bitfield DPSWBE
    }

    /// INT_ENR Register bits
    namespace int_enr_bits {
        constexpr uint32_t FCSE = (1U << 5);  ///< bitfield FCSE
        constexpr uint32_t PCSE = (1U << 2);  ///< bitfield PCSE
        constexpr uint32_t SCSE = (1U << 1);  ///< bitfield SCSE
        constexpr uint32_t MCSE = (1U << 0);  ///< bitfield MCSE
    }

    /// INT_STR Register bits
    namespace int_str_bits {
        constexpr uint32_t FCSI = (1U << 5);  ///< bitfield FCSI
        constexpr uint32_t PCSI = (1U << 2);  ///< bitfield PCSI
        constexpr uint32_t SCSI = (1U << 1);  ///< bitfield SCSI
        constexpr uint32_t MCSI = (1U << 0);  ///< bitfield MCSI
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t FCSC = (1U << 5);  ///< bitfield FCSC
        constexpr uint32_t PCSC = (1U << 2);  ///< bitfield PCSC
        constexpr uint32_t SCSC = (1U << 1);  ///< bitfield SCSC
        constexpr uint32_t MCSC = (1U << 0);  ///< bitfield MCSC
    }

    /// RST_STR Register bits
    namespace rst_str_bits {
        constexpr uint32_t SRST = (1U << 8);  ///< bitfield SRST
        constexpr uint32_t FCSR = (1U << 7);  ///< bitfield FCSR
        constexpr uint32_t CSVR = (1U << 6);  ///< bitfield CSVR
        constexpr uint32_t HWDT = (1U << 5);  ///< bitfield HWDT
        constexpr uint32_t SWDT = (1U << 4);  ///< bitfield SWDT
        constexpr uint32_t INITX = (1U << 1);  ///< bitfield INITX
        constexpr uint32_t PONR = (1U << 0);  ///< bitfield PONR
    }

    /// STB_CTL Register bits
    namespace stb_ctl_bits {
        constexpr uint32_t KEY = (16 << 16);  ///< bitfield KEY
        constexpr uint32_t SPL = (1U << 4);  ///< bitfield SPL
        constexpr uint32_t DSTM = (1U << 2);  ///< bitfield DSTM
        constexpr uint32_t STM = (2 << 0);  ///< bitfield STM
    }

    /// CSV_CTL Register bits
    namespace csv_ctl_bits {
        constexpr uint32_t FCD = (3 << 12);  ///< bitfield FCD
        constexpr uint32_t FCSRE = (1U << 9);  ///< bitfield FCSRE
        constexpr uint32_t FCSDE = (1U << 8);  ///< bitfield FCSDE
        constexpr uint32_t SCSVE = (1U << 1);  ///< bitfield SCSVE
        constexpr uint32_t MCSVE = (1U << 0);  ///< bitfield MCSVE
    }

    /// CSV_STR Register bits
    namespace csv_str_bits {
        constexpr uint32_t SCMF = (1U << 1);  ///< bitfield SCMF
        constexpr uint32_t MCMF = (1U << 0);  ///< bitfield MCMF
    }

}

// ============================================================================
// CRTRIM Peripheral
// ============================================================================

namespace crtrim {
    /// Base addresses
    constexpr uint32_t CRTRIM_BASE = 0x4002E000;

    /// CRTRIM Register structure
    struct Registers {
        volatile uint32_t MCR_PSR;  ///< Offset: 0x00 - register MCR_PSR
        volatile uint32_t MCR_FTRM;  ///< Offset: 0x04 - register MCR_FTRM
        volatile uint32_t MCR_TTRM;  ///< Offset: 0x08 - register MCR_TTRM
        volatile uint32_t MCR_RLR;  ///< Offset: 0x0C - register MCR_RLR
    };

    /// Peripheral instances
    inline Registers* CRTRIM = reinterpret_cast<Registers*>(CRTRIM_BASE);

    // Bit definitions
    /// MCR_PSR Register bits
    namespace mcr_psr_bits {
        constexpr uint32_t CSR = (2 << 0);  ///< bitfield CSR
    }

    /// MCR_FTRM Register bits
    namespace mcr_ftrm_bits {
        constexpr uint32_t TRD = (10 << 0);  ///< bitfield TRD
    }

    /// MCR_TTRM Register bits
    namespace mcr_ttrm_bits {
        constexpr uint32_t TRT = (5 << 0);  ///< bitfield TRT
    }

    /// MCR_RLR Register bits
    namespace mcr_rlr_bits {
        constexpr uint32_t TRMLCK = (32 << 0);  ///< bitfield TRMLCK
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t SWWDT_BASE = 0x40012000;
    constexpr uint32_t HWWDT_BASE = 0x40011000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t WDOGLOAD;  ///< Offset: 0x00 - register WDOGLOAD
        volatile uint32_t WDOGVALUE;  ///< Offset: 0x04 - register WDOGVALUE
        volatile uint32_t WDOGCONTROL;  ///< Offset: 0x08 - register WDOGCONTROL
        volatile uint32_t WDOGINTCLR;  ///< Offset: 0x0C - register WDOGINTCLR
        volatile uint32_t WDOGRIS;  ///< Offset: 0x10 - register WDOGRIS
        volatile uint32_t WDOGLOCK;  ///< Offset: 0xC00 - register WDOGLOCK
    };

    /// Peripheral instances
    inline Registers* SWWDT = reinterpret_cast<Registers*>(SWWDT_BASE);
    inline Registers* HWWDT = reinterpret_cast<Registers*>(HWWDT_BASE);

    // Bit definitions
    /// WDOGCONTROL Register bits
    namespace wdogcontrol_bits {
        constexpr uint32_t RESEN = (1U << 1);  ///< bitfield RESEN
        constexpr uint32_t INTEN = (1U << 0);  ///< bitfield INTEN
    }

    /// WDOGRIS Register bits
    namespace wdogris_bits {
        constexpr uint32_t RIS = (1U << 0);  ///< bitfield RIS
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t DTIM_BASE = 0x40015000;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t TIMER1LOAD;  ///< Offset: 0x00 - register TIMER1LOAD
        volatile uint32_t TIMER1VALUE;  ///< Offset: 0x04 - register TIMER1VALUE
        volatile uint32_t TIMER1CONTROL;  ///< Offset: 0x08 - register TIMER1CONTROL
        volatile uint32_t TIMER1INTCLR;  ///< Offset: 0x0C - register TIMER1INTCLR
        volatile uint32_t TIMER1RIS;  ///< Offset: 0x10 - register TIMER1RIS
        volatile uint32_t TIMER1MIS;  ///< Offset: 0x14 - register TIMER1MIS
        volatile uint32_t TIMER1BGLOAD;  ///< Offset: 0x18 - register TIMER1BGLOAD
        volatile uint32_t TIMER2LOAD;  ///< Offset: 0x20 - register TIMER2LOAD
        volatile uint32_t TIMER2VALUE;  ///< Offset: 0x24 - register TIMER2VALUE
        volatile uint32_t TIMER2CONTROL;  ///< Offset: 0x28 - register TIMER2CONTROL
        volatile uint32_t TIMER2INTCLR;  ///< Offset: 0x2C - register TIMER2INTCLR
        volatile uint32_t TIMER2RIS;  ///< Offset: 0x30 - register TIMER2RIS
        volatile uint32_t TIMER2MIS;  ///< Offset: 0x34 - register TIMER2MIS
        volatile uint32_t TIMER2BGLOAD;  ///< Offset: 0x38 - register TIMER2BGLOAD
    };

    /// Peripheral instances
    inline Registers* DTIM = reinterpret_cast<Registers*>(DTIM_BASE);

    // Bit definitions
    /// TIMER1CONTROL Register bits
    namespace timer1control_bits {
        constexpr uint32_t TimerEn = (1U << 7);  ///< bitfield TimerEn
        constexpr uint32_t TimerMode = (1U << 6);  ///< bitfield TimerMode
        constexpr uint32_t IntEnable = (1U << 5);  ///< bitfield IntEnable
        constexpr uint32_t TimerPre = (2 << 2);  ///< bitfield TimerPre
        constexpr uint32_t TimerSize = (1U << 1);  ///< bitfield TimerSize
        constexpr uint32_t OneShot = (1U << 0);  ///< bitfield OneShot
    }

    /// TIMER1RIS Register bits
    namespace timer1ris_bits {
        constexpr uint32_t TIMER1RIS = (1U << 0);  ///< bitfield TIMER1RIS
    }

    /// TIMER1MIS Register bits
    namespace timer1mis_bits {
        constexpr uint32_t TIMER1MIS = (1U << 0);  ///< bitfield TIMER1MIS
    }

}

// ============================================================================
// MFT0 Peripheral
// ============================================================================

namespace mft0 {
    /// Base addresses
    constexpr uint32_t MFT0_BASE = 0x40020000;

    /// MFT0 Register structure
    struct Registers {
        volatile uint32_t FRT_TCSA0;  ///< Offset: 0x30 - register FRT_TCSA0
        volatile uint32_t FRT_TCSA1;  ///< Offset: 0x40 - register FRT_TCSA1
        volatile uint32_t FRT_TCSA2;  ///< Offset: 0x50 - register FRT_TCSA2
        volatile uint32_t FRT_TCSB0;  ///< Offset: 0x34 - register FRT_TCSB0
        volatile uint32_t FRT_TCSB1;  ///< Offset: 0x44 - register FRT_TCSB1
        volatile uint32_t FRT_TCSB2;  ///< Offset: 0x54 - register FRT_TCSB2
        volatile uint32_t FRT_TCCP0;  ///< Offset: 0x28 - register FRT_TCCP0
        volatile uint32_t FRT_TCCP1;  ///< Offset: 0x38 - register FRT_TCCP1
        volatile uint32_t FRT_TCCP2;  ///< Offset: 0x48 - register FRT_TCCP2
        volatile uint32_t FRT_TCDT0;  ///< Offset: 0x2C - register FRT_TCDT0
        volatile uint32_t FRT_TCDT1;  ///< Offset: 0x3C - register FRT_TCDT1
        volatile uint32_t FRT_TCDT2;  ///< Offset: 0x4C - register FRT_TCDT2
        volatile uint32_t OCU_OCFS10;  ///< Offset: 0x58 - register OCU_OCFS10
        volatile uint32_t OCU_OCFS32;  ///< Offset: 0x59 - register OCU_OCFS32
        volatile uint32_t OCU_OCFS54;  ///< Offset: 0x5C - register OCU_OCFS54
        volatile uint32_t OCU_OCSA10;  ///< Offset: 0x18 - register OCU_OCSA10
        volatile uint32_t OCU_OCSA32;  ///< Offset: 0x1C - register OCU_OCSA32
        volatile uint32_t OCU_OCSA54;  ///< Offset: 0x20 - register OCU_OCSA54
        volatile uint32_t OCU_OCSB10;  ///< Offset: 0x19 - register OCU_OCSB10
        volatile uint32_t OCU_OCSB32;  ///< Offset: 0x1D - register OCU_OCSB32
        volatile uint32_t OCU_OCSB54;  ///< Offset: 0x21 - register OCU_OCSB54
        volatile uint32_t OCU_OCSC;  ///< Offset: 0x24 - register OCU_OCSC
        volatile uint32_t OCU_OCCP0;  ///< Offset: 0x00 - register OCU_OCCP0
        volatile uint32_t OCU_OCCP1;  ///< Offset: 0x04 - register OCU_OCCP1
        volatile uint32_t OCU_OCCP2;  ///< Offset: 0x08 - register OCU_OCCP2
        volatile uint32_t OCU_OCCP3;  ///< Offset: 0x0C - register OCU_OCCP3
        volatile uint32_t OCU_OCCP4;  ///< Offset: 0x10 - register OCU_OCCP4
        volatile uint32_t OCU_OCCP5;  ///< Offset: 0x14 - register OCU_OCCP5
        volatile uint32_t WFG_WFSA10;  ///< Offset: 0x8C - register WFG_WFSA10
        volatile uint32_t WFG_WFSA32;  ///< Offset: 0x90 - register WFG_WFSA32
        volatile uint32_t WFG_WFSA54;  ///< Offset: 0x94 - register WFG_WFSA54
        volatile uint32_t WFG_WFTM10;  ///< Offset: 0x80 - register WFG_WFTM10
        volatile uint32_t WFG_WFTM32;  ///< Offset: 0x84 - register WFG_WFTM32
        volatile uint32_t WFG_WFTM54;  ///< Offset: 0x88 - register WFG_WFTM54
        volatile uint32_t WFG_NZCL;  ///< Offset: 0x9C - register WFG_NZCL
        volatile uint32_t WFG_WFIR;  ///< Offset: 0x98 - register WFG_WFIR
        volatile uint32_t ICU_ICFS10;  ///< Offset: 0x60 - register ICU_ICFS10
        volatile uint32_t ICU_ICFS32;  ///< Offset: 0x61 - register ICU_ICFS32
        volatile uint32_t ICU_ICSA10;  ///< Offset: 0x78 - register ICU_ICSA10
        volatile uint32_t ICU_ICSA32;  ///< Offset: 0x7C - register ICU_ICSA32
        volatile uint32_t ICU_ICSB10;  ///< Offset: 0x79 - register ICU_ICSB10
        volatile uint32_t ICU_ICSB32;  ///< Offset: 0x7D - register ICU_ICSB32
        volatile uint32_t ICU_ICCP0;  ///< Offset: 0x68 - register ICU_ICCP0
        volatile uint32_t ICU_ICCP1;  ///< Offset: 0x6C - register ICU_ICCP1
        volatile uint32_t ICU_ICCP2;  ///< Offset: 0x70 - register ICU_ICCP2
        volatile uint32_t ICU_ICCP3;  ///< Offset: 0x74 - register ICU_ICCP3
        volatile uint32_t ADCMP_ACSA;  ///< Offset: 0xBC - register ADCMP_ACSA
        volatile uint32_t ADCMP_ACSB;  ///< Offset: 0xB8 - register ADCMP_ACSB
        volatile uint32_t ADCMP_ACCP0;  ///< Offset: 0xA0 - register ADCMP_ACCP0
        volatile uint32_t ADCMP_ACCP1;  ///< Offset: 0xA8 - register ADCMP_ACCP1
        volatile uint32_t ADCMP_ACCP2;  ///< Offset: 0xB0 - register ADCMP_ACCP2
        volatile uint32_t ADCMP_ACCPDN0;  ///< Offset: 0xA4 - register ADCMP_ACCPDN0
        volatile uint32_t ADCMP_ACCPDN1;  ///< Offset: 0xAC - register ADCMP_ACCPDN1
        volatile uint32_t ADCMP_ACCPDN2;  ///< Offset: 0xB4 - register ADCMP_ACCPDN2
        volatile uint32_t ADCMP_ATSA;  ///< Offset: 0xC0 - register ADCMP_ATSA
    };

    /// Peripheral instances
    inline Registers* MFT0 = reinterpret_cast<Registers*>(MFT0_BASE);

    // Bit definitions
    /// FRT_TCSA0 Register bits
    namespace frt_tcsa0_bits {
        constexpr uint32_t CLK = (4 << 0);  ///< bitfield CLK
        constexpr uint32_t SCLR = (1U << 4);  ///< bitfield SCLR
        constexpr uint32_t MODE = (1U << 5);  ///< bitfield MODE
        constexpr uint32_t STOP = (1U << 6);  ///< bitfield STOP
        constexpr uint32_t BFE = (1U << 7);  ///< bitfield BFE
        constexpr uint32_t ICRE = (1U << 8);  ///< bitfield ICRE
        constexpr uint32_t ICLR = (1U << 9);  ///< bitfield ICLR
        constexpr uint32_t IRQZE = (1U << 13);  ///< bitfield IRQZE
        constexpr uint32_t IRQZF = (1U << 14);  ///< bitfield IRQZF
        constexpr uint32_t ECKE = (1U << 15);  ///< bitfield ECKE
    }

    /// FRT_TCSB0 Register bits
    namespace frt_tcsb0_bits {
        constexpr uint32_t AD2E = (1U << 2);  ///< bitfield AD2E
        constexpr uint32_t AD1E = (1U << 1);  ///< bitfield AD1E
        constexpr uint32_t AD0E = (1U << 0);  ///< bitfield AD0E
    }

    /// OCU_OCFS10 Register bits
    namespace ocu_ocfs10_bits {
        constexpr uint32_t FSO0 = (4 << 0);  ///< bitfield FSO0
        constexpr uint32_t FSO1 = (4 << 4);  ///< bitfield FSO1
    }

    /// OCU_OCSA10 Register bits
    namespace ocu_ocsa10_bits {
        constexpr uint32_t CST0 = (1U << 0);  ///< bitfield CST0
        constexpr uint32_t CST1 = (1U << 1);  ///< bitfield CST1
        constexpr uint32_t BDIS0 = (1U << 2);  ///< bitfield BDIS0
        constexpr uint32_t BDIS1 = (1U << 3);  ///< bitfield BDIS1
        constexpr uint32_t IOE0 = (1U << 4);  ///< bitfield IOE0
        constexpr uint32_t IOE1 = (1U << 5);  ///< bitfield IOE1
        constexpr uint32_t IOP0 = (1U << 6);  ///< bitfield IOP0
        constexpr uint32_t IOP1 = (1U << 7);  ///< bitfield IOP1
    }

    /// OCU_OCSB10 Register bits
    namespace ocu_ocsb10_bits {
        constexpr uint32_t OTD0 = (1U << 0);  ///< bitfield OTD0
        constexpr uint32_t OTD1 = (1U << 1);  ///< bitfield OTD1
        constexpr uint32_t CMOD = (1U << 4);  ///< bitfield CMOD
        constexpr uint32_t BTS0 = (1U << 5);  ///< bitfield BTS0
        constexpr uint32_t BTS1 = (1U << 6);  ///< bitfield BTS1
    }

    /// OCU_OCSC Register bits
    namespace ocu_ocsc_bits {
        constexpr uint32_t MOD0 = (1U << 8);  ///< bitfield MOD0
        constexpr uint32_t MOD1 = (1U << 9);  ///< bitfield MOD1
        constexpr uint32_t MOD2 = (1U << 10);  ///< bitfield MOD2
        constexpr uint32_t MOD3 = (1U << 11);  ///< bitfield MOD3
        constexpr uint32_t MOD4 = (1U << 12);  ///< bitfield MOD4
        constexpr uint32_t MOD5 = (1U << 13);  ///< bitfield MOD5
    }

    /// WFG_WFSA10 Register bits
    namespace wfg_wfsa10_bits {
        constexpr uint32_t DCK = (3 << 0);  ///< bitfield DCK
        constexpr uint32_t TMD = (3 << 3);  ///< bitfield TMD
        constexpr uint32_t GTEN = (2 << 6);  ///< bitfield GTEN
        constexpr uint32_t PSEL = (2 << 8);  ///< bitfield PSEL
        constexpr uint32_t PGEN = (2 << 10);  ///< bitfield PGEN
        constexpr uint32_t DMOD = (1U << 12);  ///< bitfield DMOD
    }

    /// WFG_NZCL Register bits
    namespace wfg_nzcl_bits {
        constexpr uint32_t DTIE = (1U << 0);  ///< bitfield DTIE
        constexpr uint32_t NWS = (3 << 1);  ///< bitfield NWS
        constexpr uint32_t SDTI = (1U << 4);  ///< bitfield SDTI
    }

    /// WFG_WFIR Register bits
    namespace wfg_wfir_bits {
        constexpr uint32_t DTIF = (1U << 0);  ///< bitfield DTIF
        constexpr uint32_t DTIC = (1U << 1);  ///< bitfield DTIC
        constexpr uint32_t TMIF10 = (1U << 4);  ///< bitfield TMIF10
        constexpr uint32_t TMIC10 = (1U << 5);  ///< bitfield TMIC10
        constexpr uint32_t TMIE10 = (1U << 6);  ///< bitfield TMIE10
        constexpr uint32_t TMIS10 = (1U << 7);  ///< bitfield TMIS10
        constexpr uint32_t TMIF32 = (1U << 8);  ///< bitfield TMIF32
        constexpr uint32_t TMIC32 = (1U << 9);  ///< bitfield TMIC32
        constexpr uint32_t TMIE32 = (1U << 10);  ///< bitfield TMIE32
        constexpr uint32_t TMIS32 = (1U << 11);  ///< bitfield TMIS32
        constexpr uint32_t TMIF54 = (1U << 12);  ///< bitfield TMIF54
        constexpr uint32_t TMIC54 = (1U << 13);  ///< bitfield TMIC54
        constexpr uint32_t TMIE54 = (1U << 14);  ///< bitfield TMIE54
        constexpr uint32_t TMIS54 = (1U << 15);  ///< bitfield TMIS54
    }

    /// ICU_ICFS10 Register bits
    namespace icu_icfs10_bits {
        constexpr uint32_t FSI0 = (4 << 0);  ///< bitfield FSI0
        constexpr uint32_t FSI1 = (4 << 4);  ///< bitfield FSI1
    }

    /// ICU_ICSA10 Register bits
    namespace icu_icsa10_bits {
        constexpr uint32_t EG0 = (2 << 0);  ///< bitfield EG0
        constexpr uint32_t EG1 = (2 << 2);  ///< bitfield EG1
        constexpr uint32_t ICE0 = (1U << 4);  ///< bitfield ICE0
        constexpr uint32_t ICE1 = (1U << 5);  ///< bitfield ICE1
        constexpr uint32_t ICP0 = (1U << 6);  ///< bitfield ICP0
        constexpr uint32_t ICP1 = (1U << 7);  ///< bitfield ICP1
    }

    /// ICU_ICSB10 Register bits
    namespace icu_icsb10_bits {
        constexpr uint32_t IEI0 = (1U << 0);  ///< bitfield IEI0
        constexpr uint32_t IEI1 = (1U << 1);  ///< bitfield IEI1
    }

    /// ADCMP_ACSA Register bits
    namespace adcmp_acsa_bits {
        constexpr uint32_t CE0 = (2 << 0);  ///< bitfield CE0
        constexpr uint32_t CE1 = (2 << 2);  ///< bitfield CE1
        constexpr uint32_t CE2 = (2 << 4);  ///< bitfield CE2
        constexpr uint32_t SEL0 = (2 << 8);  ///< bitfield SEL0
        constexpr uint32_t SEL1 = (2 << 10);  ///< bitfield SEL1
        constexpr uint32_t SEL2 = (2 << 12);  ///< bitfield SEL2
    }

    /// ADCMP_ACSB Register bits
    namespace adcmp_acsb_bits {
        constexpr uint32_t BDIS0 = (1U << 0);  ///< bitfield BDIS0
        constexpr uint32_t BDIS1 = (1U << 1);  ///< bitfield BDIS1
        constexpr uint32_t BDIS2 = (1U << 2);  ///< bitfield BDIS2
        constexpr uint32_t BTS0 = (1U << 4);  ///< bitfield BTS0
        constexpr uint32_t BTS1 = (1U << 5);  ///< bitfield BTS1
        constexpr uint32_t BTS2 = (1U << 6);  ///< bitfield BTS2
    }

    /// ADCMP_ATSA Register bits
    namespace adcmp_atsa_bits {
        constexpr uint32_t AD0S = (2 << 0);  ///< bitfield AD0S
        constexpr uint32_t AD1S = (2 << 2);  ///< bitfield AD1S
        constexpr uint32_t AD2S = (2 << 4);  ///< bitfield AD2S
        constexpr uint32_t AD0P = (2 << 8);  ///< bitfield AD0P
        constexpr uint32_t AD1P = (2 << 10);  ///< bitfield AD1P
        constexpr uint32_t AD2P = (2 << 12);  ///< bitfield AD2P
    }

}

// ============================================================================
// BTIOSEL03 Peripheral
// ============================================================================

namespace btiosel03 {
    /// Base addresses
    constexpr uint32_t BTIOSEL03_BASE = 0x40025100;

    /// BTIOSEL03 Register structure
    struct Registers {
        volatile uint32_t BTSEL0123;  ///< Offset: 0x00 - register BTSEL0123
    };

    /// Peripheral instances
    inline Registers* BTIOSEL03 = reinterpret_cast<Registers*>(BTIOSEL03_BASE);

    // Bit definitions
    /// BTSEL0123 Register bits
    namespace btsel0123_bits {
        constexpr uint32_t SEL23_ = (4 << 12);  ///< bitfield SEL23_
        constexpr uint32_t SEL01_ = (4 << 8);  ///< bitfield SEL01_
    }

}

// ============================================================================
// BTIOSEL47 Peripheral
// ============================================================================

namespace btiosel47 {
    /// Base addresses
    constexpr uint32_t BTIOSEL47_BASE = 0x40025300;

    /// BTIOSEL47 Register structure
    struct Registers {
        volatile uint32_t BTSEL4567;  ///< Offset: 0x00 - register BTSEL4567
    };

    /// Peripheral instances
    inline Registers* BTIOSEL47 = reinterpret_cast<Registers*>(BTIOSEL47_BASE);

    // Bit definitions
    /// BTSEL4567 Register bits
    namespace btsel4567_bits {
        constexpr uint32_t SEL67_ = (4 << 12);  ///< bitfield SEL67_
        constexpr uint32_t SEL45_ = (4 << 8);  ///< bitfield SEL45_
    }

}

// ============================================================================
// BTIOSEL8B Peripheral
// ============================================================================

namespace btiosel8b {
    /// Base addresses
    constexpr uint32_t BTIOSEL8B_BASE = 0x40025500;

    /// BTIOSEL8B Register structure
    struct Registers {
        volatile uint32_t BTSEL89AB;  ///< Offset: 0x00 - register BTSEL89AB
    };

    /// Peripheral instances
    inline Registers* BTIOSEL8B = reinterpret_cast<Registers*>(BTIOSEL8B_BASE);

    // Bit definitions
    /// BTSEL89AB Register bits
    namespace btsel89ab_bits {
        constexpr uint32_t SELAB_ = (4 << 12);  ///< bitfield SELAB_
        constexpr uint32_t SEL89_ = (4 << 8);  ///< bitfield SEL89_
    }

}

// ============================================================================
// BTIOSELCF Peripheral
// ============================================================================

namespace btioselcf {
    /// Base addresses
    constexpr uint32_t BTIOSELCF_BASE = 0x40025700;

    /// BTIOSELCF Register structure
    struct Registers {
        volatile uint32_t BTSELCDEF;  ///< Offset: 0x00 - register BTSELCDEF
    };

    /// Peripheral instances
    inline Registers* BTIOSELCF = reinterpret_cast<Registers*>(BTIOSELCF_BASE);

    // Bit definitions
    /// BTSELCDEF Register bits
    namespace btselcdef_bits {
        constexpr uint32_t SELEF_ = (4 << 12);  ///< bitfield SELEF_
        constexpr uint32_t SELCD_ = (4 << 8);  ///< bitfield SELCD_
    }

}

// ============================================================================
// SBSSR Peripheral
// ============================================================================

namespace sbssr {
    /// Base addresses
    constexpr uint32_t SBSSR_BASE = 0x40025F00;

    /// SBSSR Register structure
    struct Registers {
        volatile uint32_t BTSSSR;  ///< Offset: 0xFC - register BTSSSR
    };

    /// Peripheral instances
    inline Registers* SBSSR = reinterpret_cast<Registers*>(SBSSR_BASE);

    // Bit definitions
    /// BTSSSR Register bits
    namespace btsssr_bits {
        constexpr uint32_t SSSR15 = (1U << 15);  ///< bitfield SSSR15
        constexpr uint32_t SSSR14 = (1U << 14);  ///< bitfield SSSR14
        constexpr uint32_t SSSR13 = (1U << 13);  ///< bitfield SSSR13
        constexpr uint32_t SSSR12 = (1U << 12);  ///< bitfield SSSR12
        constexpr uint32_t SSSR11 = (1U << 11);  ///< bitfield SSSR11
        constexpr uint32_t SSSR10 = (1U << 10);  ///< bitfield SSSR10
        constexpr uint32_t SSSR9 = (1U << 9);  ///< bitfield SSSR9
        constexpr uint32_t SSSR8 = (1U << 8);  ///< bitfield SSSR8
        constexpr uint32_t SSSR7 = (1U << 7);  ///< bitfield SSSR7
        constexpr uint32_t SSSR6 = (1U << 6);  ///< bitfield SSSR6
        constexpr uint32_t SSSR5 = (1U << 5);  ///< bitfield SSSR5
        constexpr uint32_t SSSR4 = (1U << 4);  ///< bitfield SSSR4
        constexpr uint32_t SSSR3 = (1U << 3);  ///< bitfield SSSR3
        constexpr uint32_t SSSR2 = (1U << 2);  ///< bitfield SSSR2
        constexpr uint32_t SSSR1 = (1U << 1);  ///< bitfield SSSR1
        constexpr uint32_t SSSR0 = (1U << 0);  ///< bitfield SSSR0
    }

}

// ============================================================================
// BT0 Peripheral
// ============================================================================

namespace bt0 {
    /// Base addresses
    constexpr uint32_t BT0_BASE = 0x40025000;

    /// BT0 Register structure
    struct Registers {
        volatile uint32_t PWM_TMCR;  ///< Offset: 0x0C - register PWM_TMCR
        volatile uint32_t PWM_TMCR2;  ///< Offset: 0x11 - register PWM_TMCR2
        volatile uint32_t PWM_STC;  ///< Offset: 0x10 - register PWM_STC
        volatile uint32_t PWM_PCSR;  ///< Offset: 0x00 - register PWM_PCSR
        volatile uint32_t PWM_PDUT;  ///< Offset: 0x04 - register PWM_PDUT
        volatile uint32_t PWM_TMR;  ///< Offset: 0x08 - register PWM_TMR
        volatile uint32_t PPG_TMCR;  ///< Offset: 0x0C - register PPG_TMCR
        volatile uint32_t PPG_TMCR2;  ///< Offset: 0x11 - register PPG_TMCR2
        volatile uint32_t PPG_STC;  ///< Offset: 0x10 - register PPG_STC
        volatile uint32_t PPG_PRLL;  ///< Offset: 0x00 - register PPG_PRLL
        volatile uint32_t PPG_PRLH;  ///< Offset: 0x04 - register PPG_PRLH
        volatile uint32_t PPG_TMR;  ///< Offset: 0x08 - register PPG_TMR
        volatile uint32_t RT_TMCR;  ///< Offset: 0x0C - register RT_TMCR
        volatile uint32_t RT_TMCR2;  ///< Offset: 0x11 - register RT_TMCR2
        volatile uint32_t RT_STC;  ///< Offset: 0x10 - register RT_STC
        volatile uint32_t RT_PCSR;  ///< Offset: 0x00 - register RT_PCSR
        volatile uint32_t RT_TMR;  ///< Offset: 0x08 - register RT_TMR
        volatile uint32_t PWC_TMCR;  ///< Offset: 0x0C - register PWC_TMCR
        volatile uint32_t PWC_TMCR2;  ///< Offset: 0x11 - register PWC_TMCR2
        volatile uint32_t PWC_STC;  ///< Offset: 0x10 - register PWC_STC
        volatile uint32_t PWC_DTBF;  ///< Offset: 0x04 - register PWC_DTBF
    };

    /// Peripheral instances
    inline Registers* BT0 = reinterpret_cast<Registers*>(BT0_BASE);

    // Bit definitions
    /// PWM_TMCR Register bits
    namespace pwm_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< bitfield CKS2_0
        constexpr uint32_t RTGEN = (1U << 11);  ///< bitfield RTGEN
        constexpr uint32_t PMSK = (1U << 10);  ///< bitfield PMSK
        constexpr uint32_t EGS = (2 << 8);  ///< bitfield EGS
        constexpr uint32_t FMD = (3 << 4);  ///< bitfield FMD
        constexpr uint32_t OSEL = (1U << 3);  ///< bitfield OSEL
        constexpr uint32_t MDSE = (1U << 2);  ///< bitfield MDSE
        constexpr uint32_t CTEN = (1U << 1);  ///< bitfield CTEN
        constexpr uint32_t STRG = (1U << 0);  ///< bitfield STRG
    }

    /// PWM_TMCR2 Register bits
    namespace pwm_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< bitfield CKS3
    }

    /// PWM_STC Register bits
    namespace pwm_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< bitfield TGIE
        constexpr uint32_t DTIE = (1U << 5);  ///< bitfield DTIE
        constexpr uint32_t UDIE = (1U << 4);  ///< bitfield UDIE
        constexpr uint32_t TGIR = (1U << 2);  ///< bitfield TGIR
        constexpr uint32_t DTIR = (1U << 1);  ///< bitfield DTIR
        constexpr uint32_t UDIR = (1U << 0);  ///< bitfield UDIR
    }

    /// PPG_TMCR Register bits
    namespace ppg_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< bitfield CKS2_0
        constexpr uint32_t RTGEN = (1U << 11);  ///< bitfield RTGEN
        constexpr uint32_t PMSK = (1U << 10);  ///< bitfield PMSK
        constexpr uint32_t EGS = (2 << 8);  ///< bitfield EGS
        constexpr uint32_t FMD = (3 << 4);  ///< bitfield FMD
        constexpr uint32_t OSEL = (1U << 3);  ///< bitfield OSEL
        constexpr uint32_t MDSE = (1U << 2);  ///< bitfield MDSE
        constexpr uint32_t CTEN = (1U << 1);  ///< bitfield CTEN
        constexpr uint32_t STRG = (1U << 0);  ///< bitfield STRG
    }

    /// PPG_TMCR2 Register bits
    namespace ppg_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 1);  ///< bitfield CKS3
    }

    /// PPG_STC Register bits
    namespace ppg_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< bitfield TGIE
        constexpr uint32_t UDIE = (1U << 4);  ///< bitfield UDIE
        constexpr uint32_t TGIR = (1U << 2);  ///< bitfield TGIR
        constexpr uint32_t UDIR = (1U << 0);  ///< bitfield UDIR
    }

    /// RT_TMCR Register bits
    namespace rt_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< bitfield CKS2_0
        constexpr uint32_t EGS = (2 << 8);  ///< bitfield EGS
        constexpr uint32_t T32 = (1U << 7);  ///< bitfield T32
        constexpr uint32_t FMD = (3 << 4);  ///< bitfield FMD
        constexpr uint32_t OSEL = (1U << 3);  ///< bitfield OSEL
        constexpr uint32_t MDSE = (1U << 2);  ///< bitfield MDSE
        constexpr uint32_t CTEN = (1U << 1);  ///< bitfield CTEN
        constexpr uint32_t STRG = (1U << 0);  ///< bitfield STRG
    }

    /// RT_TMCR2 Register bits
    namespace rt_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< bitfield CKS3
    }

    /// RT_STC Register bits
    namespace rt_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< bitfield TGIE
        constexpr uint32_t UDIE = (1U << 4);  ///< bitfield UDIE
        constexpr uint32_t TGIR = (1U << 2);  ///< bitfield TGIR
        constexpr uint32_t UDIR = (1U << 0);  ///< bitfield UDIR
    }

    /// PWC_TMCR Register bits
    namespace pwc_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< bitfield CKS2_0
        constexpr uint32_t EGS = (3 << 8);  ///< bitfield EGS
        constexpr uint32_t T32 = (1U << 7);  ///< bitfield T32
        constexpr uint32_t FMD = (3 << 4);  ///< bitfield FMD
        constexpr uint32_t MDSE = (1U << 2);  ///< bitfield MDSE
        constexpr uint32_t CTEN = (1U << 1);  ///< bitfield CTEN
    }

    /// PWC_TMCR2 Register bits
    namespace pwc_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< bitfield CKS3
    }

    /// PWC_STC Register bits
    namespace pwc_stc_bits {
        constexpr uint32_t ERR = (1U << 7);  ///< bitfield ERR
        constexpr uint32_t EDIE = (1U << 6);  ///< bitfield EDIE
        constexpr uint32_t OVIE = (1U << 4);  ///< bitfield OVIE
        constexpr uint32_t EDIR = (1U << 2);  ///< bitfield EDIR
        constexpr uint32_t OVIR = (1U << 0);  ///< bitfield OVIR
    }

}

// ============================================================================
// BT1 Peripheral
// ============================================================================

namespace bt1 {
    /// Base addresses
    constexpr uint32_t BT1_BASE = 0x40025040;

    /// BT1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT1 = reinterpret_cast<Registers*>(BT1_BASE);

}

// ============================================================================
// BT2 Peripheral
// ============================================================================

namespace bt2 {
    /// Base addresses
    constexpr uint32_t BT2_BASE = 0x40025080;

    /// BT2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT2 = reinterpret_cast<Registers*>(BT2_BASE);

}

// ============================================================================
// BT3 Peripheral
// ============================================================================

namespace bt3 {
    /// Base addresses
    constexpr uint32_t BT3_BASE = 0x400250C0;

    /// BT3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT3 = reinterpret_cast<Registers*>(BT3_BASE);

}

// ============================================================================
// BT4 Peripheral
// ============================================================================

namespace bt4 {
    /// Base addresses
    constexpr uint32_t BT4_BASE = 0x40025200;

    /// BT4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT4 = reinterpret_cast<Registers*>(BT4_BASE);

}

// ============================================================================
// BT5 Peripheral
// ============================================================================

namespace bt5 {
    /// Base addresses
    constexpr uint32_t BT5_BASE = 0x40025240;

    /// BT5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT5 = reinterpret_cast<Registers*>(BT5_BASE);

}

// ============================================================================
// BT6 Peripheral
// ============================================================================

namespace bt6 {
    /// Base addresses
    constexpr uint32_t BT6_BASE = 0x40025280;

    /// BT6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT6 = reinterpret_cast<Registers*>(BT6_BASE);

}

// ============================================================================
// BT7 Peripheral
// ============================================================================

namespace bt7 {
    /// Base addresses
    constexpr uint32_t BT7_BASE = 0x400252C0;

    /// BT7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT7 = reinterpret_cast<Registers*>(BT7_BASE);

}

// ============================================================================
// BT8 Peripheral
// ============================================================================

namespace bt8 {
    /// Base addresses
    constexpr uint32_t BT8_BASE = 0x40025400;

    /// BT8 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT8 = reinterpret_cast<Registers*>(BT8_BASE);

}

// ============================================================================
// BT9 Peripheral
// ============================================================================

namespace bt9 {
    /// Base addresses
    constexpr uint32_t BT9_BASE = 0x40025440;

    /// BT9 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT9 = reinterpret_cast<Registers*>(BT9_BASE);

}

// ============================================================================
// BT10 Peripheral
// ============================================================================

namespace bt10 {
    /// Base addresses
    constexpr uint32_t BT10_BASE = 0x40025480;

    /// BT10 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT10 = reinterpret_cast<Registers*>(BT10_BASE);

}

// ============================================================================
// BT11 Peripheral
// ============================================================================

namespace bt11 {
    /// Base addresses
    constexpr uint32_t BT11_BASE = 0x400254C0;

    /// BT11 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT11 = reinterpret_cast<Registers*>(BT11_BASE);

}

// ============================================================================
// BT12 Peripheral
// ============================================================================

namespace bt12 {
    /// Base addresses
    constexpr uint32_t BT12_BASE = 0x40025600;

    /// BT12 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT12 = reinterpret_cast<Registers*>(BT12_BASE);

}

// ============================================================================
// BT13 Peripheral
// ============================================================================

namespace bt13 {
    /// Base addresses
    constexpr uint32_t BT13_BASE = 0x40025640;

    /// BT13 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT13 = reinterpret_cast<Registers*>(BT13_BASE);

}

// ============================================================================
// BT14 Peripheral
// ============================================================================

namespace bt14 {
    /// Base addresses
    constexpr uint32_t BT14_BASE = 0x40025680;

    /// BT14 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT14 = reinterpret_cast<Registers*>(BT14_BASE);

}

// ============================================================================
// BT15 Peripheral
// ============================================================================

namespace bt15 {
    /// Base addresses
    constexpr uint32_t BT15_BASE = 0x400256C0;

    /// BT15 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT15 = reinterpret_cast<Registers*>(BT15_BASE);

}

// ============================================================================
// QPRC0 Peripheral
// ============================================================================

namespace qprc0 {
    /// Base addresses
    constexpr uint32_t QPRC0_BASE = 0x40026000;

    /// QPRC0 Register structure
    struct Registers {
        volatile uint32_t QPCR;  ///< Offset: 0x00 - register QPCR
        volatile uint32_t QRCR;  ///< Offset: 0x04 - register QRCR
        volatile uint32_t QPCCR;  ///< Offset: 0x08 - register QPCCR
        volatile uint32_t QPRCR;  ///< Offset: 0x0C - register QPRCR
        volatile uint32_t QCR;  ///< Offset: 0x18 - register QCR
        volatile uint32_t QECR;  ///< Offset: 0x1C - register QECR
        volatile uint32_t QICRL;  ///< Offset: 0x14 - register QICRL
        volatile uint32_t QICRH;  ///< Offset: 0x15 - register QICRH
        volatile uint32_t QMPR;  ///< Offset: 0x10 - register QMPR
        volatile uint32_t QRCRR;  ///< Offset: 0x3C - register QRCRR
        volatile uint32_t QPCRR;  ///< Offset: 0x3E - register QPCRR
    };

    /// Peripheral instances
    inline Registers* QPRC0 = reinterpret_cast<Registers*>(QPRC0_BASE);

    // Bit definitions
    /// QCR Register bits
    namespace qcr_bits {
        constexpr uint32_t CGE = (2 << 14);  ///< bitfield CGE
        constexpr uint32_t BES = (2 << 12);  ///< bitfield BES
        constexpr uint32_t AES = (2 << 10);  ///< bitfield AES
        constexpr uint32_t PCRM = (2 << 8);  ///< bitfield PCRM
        constexpr uint32_t SWAP = (1U << 7);  ///< bitfield SWAP
        constexpr uint32_t RSEL = (1U << 6);  ///< bitfield RSEL
        constexpr uint32_t CGSC = (1U << 5);  ///< bitfield CGSC
        constexpr uint32_t PSTP = (1U << 4);  ///< bitfield PSTP
        constexpr uint32_t RCM = (2 << 2);  ///< bitfield RCM
        constexpr uint32_t PCM = (2 << 0);  ///< bitfield PCM
    }

    /// QECR Register bits
    namespace qecr_bits {
        constexpr uint32_t ORNGIE = (1U << 2);  ///< bitfield ORNGIE
        constexpr uint32_t ORNGF = (1U << 1);  ///< bitfield ORNGF
        constexpr uint32_t ORNGMD = (1U << 0);  ///< bitfield ORNGMD
    }

    /// QICRL Register bits
    namespace qicrl_bits {
        constexpr uint32_t ZIIF = (1U << 7);  ///< bitfield ZIIF
        constexpr uint32_t OFDF = (1U << 6);  ///< bitfield OFDF
        constexpr uint32_t UFDF = (1U << 5);  ///< bitfield UFDF
        constexpr uint32_t OUZIE = (1U << 4);  ///< bitfield OUZIE
        constexpr uint32_t QPRCMF = (1U << 3);  ///< bitfield QPRCMF
        constexpr uint32_t QPRCMIE = (1U << 2);  ///< bitfield QPRCMIE
        constexpr uint32_t QPCMF = (1U << 1);  ///< bitfield QPCMF
        constexpr uint32_t QPCMIE = (1U << 0);  ///< bitfield QPCMIE
    }

    /// QICRH Register bits
    namespace qicrh_bits {
        constexpr uint32_t QPCNRCMF = (1U << 5);  ///< bitfield QPCNRCMF
        constexpr uint32_t QPCNRCMIE = (1U << 4);  ///< bitfield QPCNRCMIE
        constexpr uint32_t DIROU = (1U << 3);  ///< bitfield DIROU
        constexpr uint32_t DIRPC = (1U << 2);  ///< bitfield DIRPC
        constexpr uint32_t CDCF = (1U << 1);  ///< bitfield CDCF
        constexpr uint32_t CDCIE = (1U << 0);  ///< bitfield CDCIE
    }

}

// ============================================================================
// QPRC1 Peripheral
// ============================================================================

namespace qprc1 {
    /// Base addresses
    constexpr uint32_t QPRC1_BASE = 0x40026040;

    /// QPRC1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* QPRC1 = reinterpret_cast<Registers*>(QPRC1_BASE);

}

// ============================================================================
// WC Peripheral
// ============================================================================

namespace wc {
    /// Base addresses
    constexpr uint32_t WC_BASE = 0x4003A000;

    /// WC Register structure
    struct Registers {
        volatile uint32_t WCRD;  ///< Offset: 0x00 - register WCRD
        volatile uint32_t WCRL;  ///< Offset: 0x01 - register WCRL
        volatile uint32_t WCCR;  ///< Offset: 0x02 - register WCCR
        volatile uint32_t CLK_SEL;  ///< Offset: 0x10 - register CLK_SEL
        volatile uint32_t CLK_EN;  ///< Offset: 0x14 - register CLK_EN
    };

    /// Peripheral instances
    inline Registers* WC = reinterpret_cast<Registers*>(WC_BASE);

    // Bit definitions
    /// WCRD Register bits
    namespace wcrd_bits {
        constexpr uint32_t CTR = (6 << 0);  ///< bitfield CTR
    }

    /// WCRL Register bits
    namespace wcrl_bits {
        constexpr uint32_t RLC = (6 << 0);  ///< bitfield RLC
    }

    /// WCCR Register bits
    namespace wccr_bits {
        constexpr uint32_t WCEN = (1U << 7);  ///< bitfield WCEN
        constexpr uint32_t WCOP = (1U << 6);  ///< bitfield WCOP
        constexpr uint32_t CS = (2 << 2);  ///< bitfield CS
        constexpr uint32_t WCIE = (1U << 1);  ///< bitfield WCIE
        constexpr uint32_t WCIF = (1U << 0);  ///< bitfield WCIF
    }

    /// CLK_SEL Register bits
    namespace clk_sel_bits {
        constexpr uint32_t SEL_OUT = (1U << 8);  ///< bitfield SEL_OUT
        constexpr uint32_t SEL_IN = (1U << 0);  ///< bitfield SEL_IN
    }

    /// CLK_EN Register bits
    namespace clk_en_bits {
        constexpr uint32_t CLK_EN_R = (1U << 1);  ///< bitfield CLK_EN_R
        constexpr uint32_t CLK_EN = (1U << 0);  ///< bitfield CLK_EN
    }

}

// ============================================================================
// MFT Peripheral
// ============================================================================

namespace mft {
    /// Base addresses
    constexpr uint32_t MFT_PPG_BASE = 0x40024000;

    /// MFT Register structure
    struct Registers {
        volatile uint32_t TTCR0;  ///< Offset: 0x00 - register TTCR0
        volatile uint32_t COMP0;  ///< Offset: 0x08 - register COMP0
        volatile uint32_t COMP2;  ///< Offset: 0x0C - register COMP2
        volatile uint32_t COMP4;  ///< Offset: 0x10 - register COMP4
        volatile uint32_t COMP6;  ///< Offset: 0x14 - register COMP6
        volatile uint32_t TRG;  ///< Offset: 0x100 - register TRG
        volatile uint32_t REVC;  ///< Offset: 0x104 - register REVC
        volatile uint32_t PPGC0;  ///< Offset: 0x201 - register PPGC0
        volatile uint32_t PPGC1;  ///< Offset: 0x200 - register PPGC1
        volatile uint32_t PPGC2;  ///< Offset: 0x205 - register PPGC2
        volatile uint32_t PPGC3;  ///< Offset: 0x204 - register PPGC3
        volatile uint32_t PPGC4;  ///< Offset: 0x241 - register PPGC4
        volatile uint32_t PPGC5;  ///< Offset: 0x240 - register PPGC5
        volatile uint32_t PPGC6;  ///< Offset: 0x245 - register PPGC6
        volatile uint32_t PPGC7;  ///< Offset: 0x244 - register PPGC7
        volatile uint32_t PRLH0;  ///< Offset: 0x209 - register PRLH0
        volatile uint32_t PRLL0;  ///< Offset: 0x208 - register PRLL0
        volatile uint32_t PRLH1;  ///< Offset: 0x20D - register PRLH1
        volatile uint32_t PRLL1;  ///< Offset: 0x20C - register PRLL1
        volatile uint32_t PRLH2;  ///< Offset: 0x211 - register PRLH2
        volatile uint32_t PRLL2;  ///< Offset: 0x210 - register PRLL2
        volatile uint32_t PRLH3;  ///< Offset: 0x215 - register PRLH3
        volatile uint32_t PRLL3;  ///< Offset: 0x214 - register PRLL3
        volatile uint32_t PRLH4;  ///< Offset: 0x249 - register PRLH4
        volatile uint32_t PRLL4;  ///< Offset: 0x248 - register PRLL4
        volatile uint32_t PRLH5;  ///< Offset: 0x24D - register PRLH5
        volatile uint32_t PRLL5;  ///< Offset: 0x24C - register PRLL5
        volatile uint32_t PRLH6;  ///< Offset: 0x251 - register PRLH6
        volatile uint32_t PRLL6;  ///< Offset: 0x250 - register PRLL6
        volatile uint32_t PRLH7;  ///< Offset: 0x255 - register PRLH7
        volatile uint32_t PRLL7;  ///< Offset: 0x254 - register PRLL7
        volatile uint32_t GATEC0;  ///< Offset: 0x218 - register GATEC0
        volatile uint32_t GATEC4;  ///< Offset: 0x258 - register GATEC4
        volatile uint32_t IGBTC;  ///< Offset: 0x380 - register IGBTC
    };

    /// Peripheral instances
    inline Registers* MFT_PPG = reinterpret_cast<Registers*>(MFT_PPG_BASE);

    // Bit definitions
    /// TTCR0 Register bits
    namespace ttcr0_bits {
        constexpr uint32_t TRG6O = (1U << 15);  ///< bitfield TRG6O
        constexpr uint32_t TRG4O = (1U << 14);  ///< bitfield TRG4O
        constexpr uint32_t TRG2O = (1U << 13);  ///< bitfield TRG2O
        constexpr uint32_t TRG0O = (1U << 12);  ///< bitfield TRG0O
        constexpr uint32_t CS0 = (2 << 10);  ///< bitfield CS0
        constexpr uint32_t MONI0 = (1U << 9);  ///< bitfield MONI0
        constexpr uint32_t STR0 = (1U << 8);  ///< bitfield STR0
    }

    /// TRG Register bits
    namespace trg_bits {
        constexpr uint32_t PEN07 = (1U << 7);  ///< bitfield PEN07
        constexpr uint32_t PEN06 = (1U << 6);  ///< bitfield PEN06
        constexpr uint32_t PEN05 = (1U << 5);  ///< bitfield PEN05
        constexpr uint32_t PEN04 = (1U << 4);  ///< bitfield PEN04
        constexpr uint32_t PEN03 = (1U << 3);  ///< bitfield PEN03
        constexpr uint32_t PEN02 = (1U << 2);  ///< bitfield PEN02
        constexpr uint32_t PEN01 = (1U << 1);  ///< bitfield PEN01
        constexpr uint32_t PEN00 = (1U << 0);  ///< bitfield PEN00
    }

    /// REVC Register bits
    namespace revc_bits {
        constexpr uint32_t REV07 = (1U << 7);  ///< bitfield REV07
        constexpr uint32_t REV06 = (1U << 6);  ///< bitfield REV06
        constexpr uint32_t REV05 = (1U << 5);  ///< bitfield REV05
        constexpr uint32_t REV04 = (1U << 4);  ///< bitfield REV04
        constexpr uint32_t REV03 = (1U << 3);  ///< bitfield REV03
        constexpr uint32_t REV02 = (1U << 2);  ///< bitfield REV02
        constexpr uint32_t REV01 = (1U << 1);  ///< bitfield REV01
        constexpr uint32_t REV00 = (1U << 0);  ///< bitfield REV00
    }

    /// PPGC0 Register bits
    namespace ppgc0_bits {
        constexpr uint32_t PIE = (1U << 7);  ///< bitfield PIE
        constexpr uint32_t PUF = (1U << 6);  ///< bitfield PUF
        constexpr uint32_t INTM = (1U << 5);  ///< bitfield INTM
        constexpr uint32_t PCS = (2 << 3);  ///< bitfield PCS
        constexpr uint32_t MD = (2 << 1);  ///< bitfield MD
        constexpr uint32_t TTRG = (1U << 0);  ///< bitfield TTRG
    }

    /// PRLH0 Register bits
    namespace prlh0_bits {
        constexpr uint32_t PRLH = (8 << 0);  ///< bitfield PRLH
    }

    /// PRLL0 Register bits
    namespace prll0_bits {
        constexpr uint32_t PRLL = (8 << 0);  ///< bitfield PRLL
    }

    /// GATEC0 Register bits
    namespace gatec0_bits {
        constexpr uint32_t STRG2 = (1U << 5);  ///< bitfield STRG2
        constexpr uint32_t EDGE2 = (1U << 4);  ///< bitfield EDGE2
        constexpr uint32_t STRG0 = (1U << 1);  ///< bitfield STRG0
        constexpr uint32_t EDGE0 = (1U << 0);  ///< bitfield EDGE0
    }

    /// GATEC4 Register bits
    namespace gatec4_bits {
        constexpr uint32_t STRG6 = (1U << 5);  ///< bitfield STRG6
        constexpr uint32_t EDGE6 = (1U << 4);  ///< bitfield EDGE6
        constexpr uint32_t STRG4 = (1U << 1);  ///< bitfield STRG4
        constexpr uint32_t EDGE4 = (1U << 0);  ///< bitfield EDGE4
    }

    /// IGBTC Register bits
    namespace igbtc_bits {
        constexpr uint32_t IGATIH = (1U << 7);  ///< bitfield IGATIH
        constexpr uint32_t IGNFW = (3 << 4);  ///< bitfield IGNFW
        constexpr uint32_t IGOSEL = (2 << 2);  ///< bitfield IGOSEL
        constexpr uint32_t IGTRGLV = (1U << 1);  ///< bitfield IGTRGLV
        constexpr uint32_t IGBTMD = (1U << 0);  ///< bitfield IGBTMD
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC0_BASE = 0x40027000;
    constexpr uint32_t ADC1_BASE = 0x40027100;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ADCR;  ///< Offset: 0x01 - register ADCR
        volatile uint32_t ADSR;  ///< Offset: 0x00 - register ADSR
        volatile uint32_t SCCR;  ///< Offset: 0x09 - register SCCR
        volatile uint32_t SFNS;  ///< Offset: 0x08 - register SFNS
        volatile uint32_t SCFD;  ///< Offset: 0x0C - register SCFD
        volatile uint32_t SCIS3;  ///< Offset: 0x11 - register SCIS3
        volatile uint32_t SCIS2;  ///< Offset: 0x10 - register SCIS2
        volatile uint32_t SCIS1;  ///< Offset: 0x15 - register SCIS1
        volatile uint32_t SCIS0;  ///< Offset: 0x14 - register SCIS0
        volatile uint32_t PFNS;  ///< Offset: 0x18 - register PFNS
        volatile uint32_t PCCR;  ///< Offset: 0x19 - register PCCR
        volatile uint32_t PCFD;  ///< Offset: 0x1C - register PCFD
        volatile uint32_t PCIS;  ///< Offset: 0x20 - register PCIS
        volatile uint32_t CMPCR;  ///< Offset: 0x24 - register CMPCR
        volatile uint32_t CMPD;  ///< Offset: 0x26 - register CMPD
        volatile uint32_t ADSS3;  ///< Offset: 0x29 - register ADSS3
        volatile uint32_t ADSS2;  ///< Offset: 0x28 - register ADSS2
        volatile uint32_t ADSS1;  ///< Offset: 0x2D - register ADSS1
        volatile uint32_t ADSS0;  ///< Offset: 0x2C - register ADSS0
        volatile uint32_t ADST1;  ///< Offset: 0x30 - register ADST1
        volatile uint32_t ADST0;  ///< Offset: 0x31 - register ADST0
        volatile uint32_t ADCT;  ///< Offset: 0x34 - register ADCT
        volatile uint32_t PRTSL;  ///< Offset: 0x38 - register PRTSL
        volatile uint32_t SCTSL;  ///< Offset: 0x39 - register SCTSL
        volatile uint32_t ADCEN;  ///< Offset: 0x3C - register ADCEN
    };

    /// Peripheral instances
    inline Registers* ADC0 = reinterpret_cast<Registers*>(ADC0_BASE);
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);

    // Bit definitions
    /// ADCR Register bits
    namespace adcr_bits {
        constexpr uint32_t SCIF = (1U << 7);  ///< bitfield SCIF
        constexpr uint32_t PCIF = (1U << 6);  ///< bitfield PCIF
        constexpr uint32_t CMPIF = (1U << 5);  ///< bitfield CMPIF
        constexpr uint32_t SCIE = (1U << 3);  ///< bitfield SCIE
        constexpr uint32_t PCIE = (1U << 2);  ///< bitfield PCIE
        constexpr uint32_t CMPIE = (1U << 1);  ///< bitfield CMPIE
        constexpr uint32_t OVRIE = (1U << 0);  ///< bitfield OVRIE
    }

    /// ADSR Register bits
    namespace adsr_bits {
        constexpr uint32_t ADSTP = (1U << 7);  ///< bitfield ADSTP
        constexpr uint32_t FDAS = (1U << 6);  ///< bitfield FDAS
        constexpr uint32_t PCNS = (1U << 2);  ///< bitfield PCNS
        constexpr uint32_t PCS = (1U << 1);  ///< bitfield PCS
        constexpr uint32_t SCS = (1U << 0);  ///< bitfield SCS
    }

    /// SCCR Register bits
    namespace sccr_bits {
        constexpr uint32_t SEMP = (1U << 7);  ///< bitfield SEMP
        constexpr uint32_t SFUL = (1U << 6);  ///< bitfield SFUL
        constexpr uint32_t SOVR = (1U << 5);  ///< bitfield SOVR
        constexpr uint32_t SFCLR = (1U << 4);  ///< bitfield SFCLR
        constexpr uint32_t RPT = (1U << 2);  ///< bitfield RPT
        constexpr uint32_t SHEN = (1U << 1);  ///< bitfield SHEN
        constexpr uint32_t SSTR = (1U << 0);  ///< bitfield SSTR
    }

    /// SFNS Register bits
    namespace sfns_bits {
        constexpr uint32_t SFS = (4 << 0);  ///< bitfield SFS
    }

    /// SCFD Register bits
    namespace scfd_bits {
        constexpr uint32_t SD = (12 << 20);  ///< bitfield SD
        constexpr uint32_t INVL = (1U << 12);  ///< bitfield INVL
        constexpr uint32_t RS = (2 << 8);  ///< bitfield RS
        constexpr uint32_t SC = (5 << 0);  ///< bitfield SC
    }

    /// SCIS3 Register bits
    namespace scis3_bits {
        constexpr uint32_t AN31 = (1U << 7);  ///< bitfield AN31
        constexpr uint32_t AN30 = (1U << 6);  ///< bitfield AN30
        constexpr uint32_t AN29 = (1U << 5);  ///< bitfield AN29
        constexpr uint32_t AN28 = (1U << 4);  ///< bitfield AN28
        constexpr uint32_t AN27 = (1U << 3);  ///< bitfield AN27
        constexpr uint32_t AN26 = (1U << 2);  ///< bitfield AN26
        constexpr uint32_t AN25 = (1U << 1);  ///< bitfield AN25
        constexpr uint32_t AN24 = (1U << 0);  ///< bitfield AN24
    }

    /// SCIS2 Register bits
    namespace scis2_bits {
        constexpr uint32_t AN23 = (1U << 7);  ///< bitfield AN23
        constexpr uint32_t AN22 = (1U << 6);  ///< bitfield AN22
        constexpr uint32_t AN21 = (1U << 5);  ///< bitfield AN21
        constexpr uint32_t AN20 = (1U << 4);  ///< bitfield AN20
        constexpr uint32_t AN19 = (1U << 3);  ///< bitfield AN19
        constexpr uint32_t AN18 = (1U << 2);  ///< bitfield AN18
        constexpr uint32_t AN17 = (1U << 1);  ///< bitfield AN17
        constexpr uint32_t AN16 = (1U << 0);  ///< bitfield AN16
    }

    /// SCIS1 Register bits
    namespace scis1_bits {
        constexpr uint32_t AN15 = (1U << 7);  ///< bitfield AN15
        constexpr uint32_t AN14 = (1U << 6);  ///< bitfield AN14
        constexpr uint32_t AN13 = (1U << 5);  ///< bitfield AN13
        constexpr uint32_t AN12 = (1U << 4);  ///< bitfield AN12
        constexpr uint32_t AN11 = (1U << 3);  ///< bitfield AN11
        constexpr uint32_t AN10 = (1U << 2);  ///< bitfield AN10
        constexpr uint32_t AN9 = (1U << 1);  ///< bitfield AN9
        constexpr uint32_t AN8 = (1U << 0);  ///< bitfield AN8
    }

    /// SCIS0 Register bits
    namespace scis0_bits {
        constexpr uint32_t AN7 = (1U << 7);  ///< bitfield AN7
        constexpr uint32_t AN6 = (1U << 6);  ///< bitfield AN6
        constexpr uint32_t AN5 = (1U << 5);  ///< bitfield AN5
        constexpr uint32_t AN4 = (1U << 4);  ///< bitfield AN4
        constexpr uint32_t AN3 = (1U << 3);  ///< bitfield AN3
        constexpr uint32_t AN2 = (1U << 2);  ///< bitfield AN2
        constexpr uint32_t AN1 = (1U << 1);  ///< bitfield AN1
        constexpr uint32_t AN0 = (1U << 0);  ///< bitfield AN0
    }

    /// PFNS Register bits
    namespace pfns_bits {
        constexpr uint32_t TEST = (2 << 4);  ///< bitfield TEST
        constexpr uint32_t PFS = (2 << 0);  ///< bitfield PFS
    }

    /// PCCR Register bits
    namespace pccr_bits {
        constexpr uint32_t PEMP = (1U << 7);  ///< bitfield PEMP
        constexpr uint32_t PFUL = (1U << 6);  ///< bitfield PFUL
        constexpr uint32_t POVR = (1U << 5);  ///< bitfield POVR
        constexpr uint32_t PFCLR = (1U << 4);  ///< bitfield PFCLR
        constexpr uint32_t ESCE = (1U << 3);  ///< bitfield ESCE
        constexpr uint32_t PEEN = (1U << 2);  ///< bitfield PEEN
        constexpr uint32_t PHEN = (1U << 1);  ///< bitfield PHEN
        constexpr uint32_t PSTR = (1U << 0);  ///< bitfield PSTR
    }

    /// PCFD Register bits
    namespace pcfd_bits {
        constexpr uint32_t PD = (12 << 20);  ///< bitfield PD
        constexpr uint32_t INVL = (1U << 12);  ///< bitfield INVL
        constexpr uint32_t RS = (3 << 8);  ///< bitfield RS
        constexpr uint32_t PC = (5 << 0);  ///< bitfield PC
    }

    /// PCIS Register bits
    namespace pcis_bits {
        constexpr uint32_t P2A = (5 << 3);  ///< bitfield P2A
        constexpr uint32_t P1A = (3 << 0);  ///< bitfield P1A
    }

    /// CMPCR Register bits
    namespace cmpcr_bits {
        constexpr uint32_t CMPEN = (1U << 7);  ///< bitfield CMPEN
        constexpr uint32_t CMD1 = (1U << 6);  ///< bitfield CMD1
        constexpr uint32_t CMD0 = (1U << 5);  ///< bitfield CMD0
        constexpr uint32_t CCH = (5 << 0);  ///< bitfield CCH
    }

    /// CMPD Register bits
    namespace cmpd_bits {
        constexpr uint32_t CMAD = (10 << 6);  ///< bitfield CMAD
    }

    /// ADSS3 Register bits
    namespace adss3_bits {
        constexpr uint32_t TS31 = (1U << 7);  ///< bitfield TS31
        constexpr uint32_t TS30 = (1U << 6);  ///< bitfield TS30
        constexpr uint32_t TS29 = (1U << 5);  ///< bitfield TS29
        constexpr uint32_t TS28 = (1U << 4);  ///< bitfield TS28
        constexpr uint32_t TS27 = (1U << 3);  ///< bitfield TS27
        constexpr uint32_t TS26 = (1U << 2);  ///< bitfield TS26
        constexpr uint32_t TS25 = (1U << 1);  ///< bitfield TS25
        constexpr uint32_t TS24 = (1U << 0);  ///< bitfield TS24
    }

    /// ADSS2 Register bits
    namespace adss2_bits {
        constexpr uint32_t TS23 = (1U << 7);  ///< bitfield TS23
        constexpr uint32_t TS22 = (1U << 6);  ///< bitfield TS22
        constexpr uint32_t TS21 = (1U << 5);  ///< bitfield TS21
        constexpr uint32_t TS20 = (1U << 4);  ///< bitfield TS20
        constexpr uint32_t TS19 = (1U << 3);  ///< bitfield TS19
        constexpr uint32_t TS18 = (1U << 2);  ///< bitfield TS18
        constexpr uint32_t TS17 = (1U << 1);  ///< bitfield TS17
        constexpr uint32_t TS16 = (1U << 0);  ///< bitfield TS16
    }

    /// ADSS1 Register bits
    namespace adss1_bits {
        constexpr uint32_t TS15 = (1U << 7);  ///< bitfield TS15
        constexpr uint32_t TS14 = (1U << 6);  ///< bitfield TS14
        constexpr uint32_t TS13 = (1U << 5);  ///< bitfield TS13
        constexpr uint32_t TS12 = (1U << 4);  ///< bitfield TS12
        constexpr uint32_t TS11 = (1U << 3);  ///< bitfield TS11
        constexpr uint32_t TS10 = (1U << 2);  ///< bitfield TS10
        constexpr uint32_t TS9 = (1U << 1);  ///< bitfield TS9
        constexpr uint32_t TS8 = (1U << 0);  ///< bitfield TS8
    }

    /// ADSS0 Register bits
    namespace adss0_bits {
        constexpr uint32_t TS7 = (1U << 7);  ///< bitfield TS7
        constexpr uint32_t TS6 = (1U << 6);  ///< bitfield TS6
        constexpr uint32_t TS5 = (1U << 5);  ///< bitfield TS5
        constexpr uint32_t TS4 = (1U << 4);  ///< bitfield TS4
        constexpr uint32_t TS3 = (1U << 3);  ///< bitfield TS3
        constexpr uint32_t TS2 = (1U << 2);  ///< bitfield TS2
        constexpr uint32_t TS1 = (1U << 1);  ///< bitfield TS1
        constexpr uint32_t TS0 = (1U << 0);  ///< bitfield TS0
    }

    /// ADST1 Register bits
    namespace adst1_bits {
        constexpr uint32_t STX1 = (3 << 5);  ///< bitfield STX1
        constexpr uint32_t ST1 = (5 << 0);  ///< bitfield ST1
    }

    /// ADST0 Register bits
    namespace adst0_bits {
        constexpr uint32_t STX0 = (3 << 5);  ///< bitfield STX0
        constexpr uint32_t ST0 = (5 << 0);  ///< bitfield ST0
    }

    /// ADCT Register bits
    namespace adct_bits {
        constexpr uint32_t CT = (8 << 0);  ///< bitfield CT
    }

    /// PRTSL Register bits
    namespace prtsl_bits {
        constexpr uint32_t PRTSL = (4 << 0);  ///< bitfield PRTSL
    }

    /// SCTSL Register bits
    namespace sctsl_bits {
        constexpr uint32_t SCTSL = (4 << 0);  ///< bitfield SCTSL
    }

    /// ADCEN Register bits
    namespace adcen_bits {
        constexpr uint32_t ENBLTIME = (8 << 8);  ///< bitfield ENBLTIME
        constexpr uint32_t READY = (1U << 1);  ///< bitfield READY
        constexpr uint32_t ENBL = (1U << 0);  ///< bitfield ENBL
    }

}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DAC_BASE = 0x40028000;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t DADR0;  ///< Offset: 0x00 - register DADR0
        volatile uint32_t DACR0;  ///< Offset: 0x02 - register DACR0
        volatile uint32_t DADR1;  ///< Offset: 0x04 - register DADR1
        volatile uint32_t DACR1;  ///< Offset: 0x06 - register DACR1
    };

    /// Peripheral instances
    inline Registers* DAC = reinterpret_cast<Registers*>(DAC_BASE);

    // Bit definitions
    /// DADR0 Register bits
    namespace dadr0_bits {
        constexpr uint32_t DA9 = (1U << 9);  ///< bitfield DA9
        constexpr uint32_t DA8 = (1U << 8);  ///< bitfield DA8
        constexpr uint32_t DA7 = (1U << 7);  ///< bitfield DA7
        constexpr uint32_t DA6 = (1U << 6);  ///< bitfield DA6
        constexpr uint32_t DA5 = (1U << 5);  ///< bitfield DA5
        constexpr uint32_t DA4 = (1U << 4);  ///< bitfield DA4
        constexpr uint32_t DA3 = (1U << 3);  ///< bitfield DA3
        constexpr uint32_t DA2 = (1U << 2);  ///< bitfield DA2
        constexpr uint32_t DA1 = (1U << 1);  ///< bitfield DA1
        constexpr uint32_t DA0 = (1U << 0);  ///< bitfield DA0
    }

    /// DACR0 Register bits
    namespace dacr0_bits {
        constexpr uint32_t DAE = (1U << 0);  ///< bitfield DAE
    }

    /// DADR1 Register bits
    namespace dadr1_bits {
        constexpr uint32_t DA9 = (1U << 9);  ///< bitfield DA9
        constexpr uint32_t DA8 = (1U << 8);  ///< bitfield DA8
        constexpr uint32_t DA7 = (1U << 7);  ///< bitfield DA7
        constexpr uint32_t DA6 = (1U << 6);  ///< bitfield DA6
        constexpr uint32_t DA5 = (1U << 5);  ///< bitfield DA5
        constexpr uint32_t DA4 = (1U << 4);  ///< bitfield DA4
        constexpr uint32_t DA3 = (1U << 3);  ///< bitfield DA3
        constexpr uint32_t DA2 = (1U << 2);  ///< bitfield DA2
        constexpr uint32_t DA1 = (1U << 1);  ///< bitfield DA1
        constexpr uint32_t DA0 = (1U << 0);  ///< bitfield DA0
    }

    /// DACR1 Register bits
    namespace dacr1_bits {
        constexpr uint32_t DAE = (1U << 0);  ///< bitfield DAE
    }

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40030000;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t ENIR;  ///< Offset: 0x00 - register ENIR
        volatile uint32_t EIRR;  ///< Offset: 0x04 - register EIRR
        volatile uint32_t EICL;  ///< Offset: 0x08 - register EICL
        volatile uint32_t ELVR;  ///< Offset: 0x0C - register ELVR
        volatile uint32_t ELVR1;  ///< Offset: 0x10 - register ELVR1
        volatile uint32_t NMIRR;  ///< Offset: 0x14 - register NMIRR
        volatile uint32_t NMICL;  ///< Offset: 0x18 - register NMICL
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// ENIR Register bits
    namespace enir_bits {
        constexpr uint32_t EN31 = (1U << 31);  ///< bitfield EN31
        constexpr uint32_t EN30 = (1U << 30);  ///< bitfield EN30
        constexpr uint32_t EN29 = (1U << 29);  ///< bitfield EN29
        constexpr uint32_t EN28 = (1U << 28);  ///< bitfield EN28
        constexpr uint32_t EN27 = (1U << 27);  ///< bitfield EN27
        constexpr uint32_t EN26 = (1U << 26);  ///< bitfield EN26
        constexpr uint32_t EN25 = (1U << 25);  ///< bitfield EN25
        constexpr uint32_t EN24 = (1U << 24);  ///< bitfield EN24
        constexpr uint32_t EN23 = (1U << 23);  ///< bitfield EN23
        constexpr uint32_t EN22 = (1U << 22);  ///< bitfield EN22
        constexpr uint32_t EN21 = (1U << 21);  ///< bitfield EN21
        constexpr uint32_t EN20 = (1U << 20);  ///< bitfield EN20
        constexpr uint32_t EN19 = (1U << 19);  ///< bitfield EN19
        constexpr uint32_t EN18 = (1U << 18);  ///< bitfield EN18
        constexpr uint32_t EN17 = (1U << 17);  ///< bitfield EN17
        constexpr uint32_t EN16 = (1U << 16);  ///< bitfield EN16
        constexpr uint32_t EN15 = (1U << 15);  ///< bitfield EN15
        constexpr uint32_t EN14 = (1U << 14);  ///< bitfield EN14
        constexpr uint32_t EN13 = (1U << 13);  ///< bitfield EN13
        constexpr uint32_t EN12 = (1U << 12);  ///< bitfield EN12
        constexpr uint32_t EN11 = (1U << 11);  ///< bitfield EN11
        constexpr uint32_t EN10 = (1U << 10);  ///< bitfield EN10
        constexpr uint32_t EN9 = (1U << 9);  ///< bitfield EN9
        constexpr uint32_t EN8 = (1U << 8);  ///< bitfield EN8
        constexpr uint32_t EN7 = (1U << 7);  ///< bitfield EN7
        constexpr uint32_t EN6 = (1U << 6);  ///< bitfield EN6
        constexpr uint32_t EN5 = (1U << 5);  ///< bitfield EN5
        constexpr uint32_t EN4 = (1U << 4);  ///< bitfield EN4
        constexpr uint32_t EN3 = (1U << 3);  ///< bitfield EN3
        constexpr uint32_t EN2 = (1U << 2);  ///< bitfield EN2
        constexpr uint32_t EN1 = (1U << 1);  ///< bitfield EN1
        constexpr uint32_t EN0 = (1U << 0);  ///< bitfield EN0
    }

    /// EIRR Register bits
    namespace eirr_bits {
        constexpr uint32_t ER31 = (1U << 31);  ///< bitfield ER31
        constexpr uint32_t ER30 = (1U << 30);  ///< bitfield ER30
        constexpr uint32_t ER29 = (1U << 29);  ///< bitfield ER29
        constexpr uint32_t ER28 = (1U << 28);  ///< bitfield ER28
        constexpr uint32_t ER27 = (1U << 27);  ///< bitfield ER27
        constexpr uint32_t ER26 = (1U << 26);  ///< bitfield ER26
        constexpr uint32_t ER25 = (1U << 25);  ///< bitfield ER25
        constexpr uint32_t ER24 = (1U << 24);  ///< bitfield ER24
        constexpr uint32_t ER23 = (1U << 23);  ///< bitfield ER23
        constexpr uint32_t ER22 = (1U << 22);  ///< bitfield ER22
        constexpr uint32_t ER21 = (1U << 21);  ///< bitfield ER21
        constexpr uint32_t ER20 = (1U << 20);  ///< bitfield ER20
        constexpr uint32_t ER19 = (1U << 19);  ///< bitfield ER19
        constexpr uint32_t ER18 = (1U << 18);  ///< bitfield ER18
        constexpr uint32_t ER17 = (1U << 17);  ///< bitfield ER17
        constexpr uint32_t ER16 = (1U << 16);  ///< bitfield ER16
        constexpr uint32_t ER15 = (1U << 15);  ///< bitfield ER15
        constexpr uint32_t ER14 = (1U << 14);  ///< bitfield ER14
        constexpr uint32_t ER13 = (1U << 13);  ///< bitfield ER13
        constexpr uint32_t ER12 = (1U << 12);  ///< bitfield ER12
        constexpr uint32_t ER11 = (1U << 11);  ///< bitfield ER11
        constexpr uint32_t ER10 = (1U << 10);  ///< bitfield ER10
        constexpr uint32_t ER9 = (1U << 9);  ///< bitfield ER9
        constexpr uint32_t ER8 = (1U << 8);  ///< bitfield ER8
        constexpr uint32_t ER7 = (1U << 7);  ///< bitfield ER7
        constexpr uint32_t ER6 = (1U << 6);  ///< bitfield ER6
        constexpr uint32_t ER5 = (1U << 5);  ///< bitfield ER5
        constexpr uint32_t ER4 = (1U << 4);  ///< bitfield ER4
        constexpr uint32_t ER3 = (1U << 3);  ///< bitfield ER3
        constexpr uint32_t ER2 = (1U << 2);  ///< bitfield ER2
        constexpr uint32_t ER1 = (1U << 1);  ///< bitfield ER1
        constexpr uint32_t ER0 = (1U << 0);  ///< bitfield ER0
    }

    /// EICL Register bits
    namespace eicl_bits {
        constexpr uint32_t ECL31 = (1U << 31);  ///< bitfield ECL31
        constexpr uint32_t ECL30 = (1U << 30);  ///< bitfield ECL30
        constexpr uint32_t ECL29 = (1U << 29);  ///< bitfield ECL29
        constexpr uint32_t ECL28 = (1U << 28);  ///< bitfield ECL28
        constexpr uint32_t ECL27 = (1U << 27);  ///< bitfield ECL27
        constexpr uint32_t ECL26 = (1U << 26);  ///< bitfield ECL26
        constexpr uint32_t ECL25 = (1U << 25);  ///< bitfield ECL25
        constexpr uint32_t ECL24 = (1U << 24);  ///< bitfield ECL24
        constexpr uint32_t ECL23 = (1U << 23);  ///< bitfield ECL23
        constexpr uint32_t ECL22 = (1U << 22);  ///< bitfield ECL22
        constexpr uint32_t ECL21 = (1U << 21);  ///< bitfield ECL21
        constexpr uint32_t ECL20 = (1U << 20);  ///< bitfield ECL20
        constexpr uint32_t ECL19 = (1U << 19);  ///< bitfield ECL19
        constexpr uint32_t ECL18 = (1U << 18);  ///< bitfield ECL18
        constexpr uint32_t ECL17 = (1U << 17);  ///< bitfield ECL17
        constexpr uint32_t ECL16 = (1U << 16);  ///< bitfield ECL16
        constexpr uint32_t ECL15 = (1U << 15);  ///< bitfield ECL15
        constexpr uint32_t ECL14 = (1U << 14);  ///< bitfield ECL14
        constexpr uint32_t ECL13 = (1U << 13);  ///< bitfield ECL13
        constexpr uint32_t ECL12 = (1U << 12);  ///< bitfield ECL12
        constexpr uint32_t ECL11 = (1U << 11);  ///< bitfield ECL11
        constexpr uint32_t ECL10 = (1U << 10);  ///< bitfield ECL10
        constexpr uint32_t ECL9 = (1U << 9);  ///< bitfield ECL9
        constexpr uint32_t ECL8 = (1U << 8);  ///< bitfield ECL8
        constexpr uint32_t ECL7 = (1U << 7);  ///< bitfield ECL7
        constexpr uint32_t ECL6 = (1U << 6);  ///< bitfield ECL6
        constexpr uint32_t ECL5 = (1U << 5);  ///< bitfield ECL5
        constexpr uint32_t ECL4 = (1U << 4);  ///< bitfield ECL4
        constexpr uint32_t ECL3 = (1U << 3);  ///< bitfield ECL3
        constexpr uint32_t ECL2 = (1U << 2);  ///< bitfield ECL2
        constexpr uint32_t ECL1 = (1U << 1);  ///< bitfield ECL1
        constexpr uint32_t ECL0 = (1U << 0);  ///< bitfield ECL0
    }

    /// ELVR Register bits
    namespace elvr_bits {
        constexpr uint32_t LB15 = (1U << 31);  ///< bitfield LB15
        constexpr uint32_t LA15 = (1U << 30);  ///< bitfield LA15
        constexpr uint32_t LB14 = (1U << 29);  ///< bitfield LB14
        constexpr uint32_t LA14 = (1U << 28);  ///< bitfield LA14
        constexpr uint32_t LB13 = (1U << 27);  ///< bitfield LB13
        constexpr uint32_t LA13 = (1U << 26);  ///< bitfield LA13
        constexpr uint32_t LB12 = (1U << 25);  ///< bitfield LB12
        constexpr uint32_t LA12 = (1U << 24);  ///< bitfield LA12
        constexpr uint32_t LB11 = (1U << 23);  ///< bitfield LB11
        constexpr uint32_t LA11 = (1U << 22);  ///< bitfield LA11
        constexpr uint32_t LB10 = (1U << 21);  ///< bitfield LB10
        constexpr uint32_t LA10 = (1U << 20);  ///< bitfield LA10
        constexpr uint32_t LB9 = (1U << 19);  ///< bitfield LB9
        constexpr uint32_t LA9 = (1U << 18);  ///< bitfield LA9
        constexpr uint32_t LB8 = (1U << 17);  ///< bitfield LB8
        constexpr uint32_t LA8 = (1U << 16);  ///< bitfield LA8
        constexpr uint32_t LB7 = (1U << 15);  ///< bitfield LB7
        constexpr uint32_t LA7 = (1U << 14);  ///< bitfield LA7
        constexpr uint32_t LB6 = (1U << 13);  ///< bitfield LB6
        constexpr uint32_t LA6 = (1U << 12);  ///< bitfield LA6
        constexpr uint32_t LB5 = (1U << 11);  ///< bitfield LB5
        constexpr uint32_t LA5 = (1U << 10);  ///< bitfield LA5
        constexpr uint32_t LB4 = (1U << 9);  ///< bitfield LB4
        constexpr uint32_t LA4 = (1U << 8);  ///< bitfield LA4
        constexpr uint32_t LB3 = (1U << 7);  ///< bitfield LB3
        constexpr uint32_t LA3 = (1U << 6);  ///< bitfield LA3
        constexpr uint32_t LB2 = (1U << 5);  ///< bitfield LB2
        constexpr uint32_t LA2 = (1U << 4);  ///< bitfield LA2
        constexpr uint32_t LB1 = (1U << 3);  ///< bitfield LB1
        constexpr uint32_t LA1 = (1U << 2);  ///< bitfield LA1
        constexpr uint32_t LB0 = (1U << 1);  ///< bitfield LB0
        constexpr uint32_t LA0 = (1U << 0);  ///< bitfield LA0
    }

    /// ELVR1 Register bits
    namespace elvr1_bits {
        constexpr uint32_t LB31 = (1U << 31);  ///< bitfield LB31
        constexpr uint32_t LA31 = (1U << 30);  ///< bitfield LA31
        constexpr uint32_t LB30 = (1U << 29);  ///< bitfield LB30
        constexpr uint32_t LA30 = (1U << 28);  ///< bitfield LA30
        constexpr uint32_t LB29 = (1U << 27);  ///< bitfield LB29
        constexpr uint32_t LA29 = (1U << 26);  ///< bitfield LA29
        constexpr uint32_t LB28 = (1U << 25);  ///< bitfield LB28
        constexpr uint32_t LA28 = (1U << 24);  ///< bitfield LA28
        constexpr uint32_t LB27 = (1U << 23);  ///< bitfield LB27
        constexpr uint32_t LA27 = (1U << 22);  ///< bitfield LA27
        constexpr uint32_t LB26 = (1U << 21);  ///< bitfield LB26
        constexpr uint32_t LA26 = (1U << 20);  ///< bitfield LA26
        constexpr uint32_t LB25 = (1U << 19);  ///< bitfield LB25
        constexpr uint32_t LA25 = (1U << 18);  ///< bitfield LA25
        constexpr uint32_t LB24 = (1U << 17);  ///< bitfield LB24
        constexpr uint32_t LA24 = (1U << 16);  ///< bitfield LA24
        constexpr uint32_t LB23 = (1U << 15);  ///< bitfield LB23
        constexpr uint32_t LA23 = (1U << 14);  ///< bitfield LA23
        constexpr uint32_t LB22 = (1U << 13);  ///< bitfield LB22
        constexpr uint32_t LA22 = (1U << 12);  ///< bitfield LA22
        constexpr uint32_t LB21 = (1U << 11);  ///< bitfield LB21
        constexpr uint32_t LA21 = (1U << 10);  ///< bitfield LA21
        constexpr uint32_t LB20 = (1U << 9);  ///< bitfield LB20
        constexpr uint32_t LA20 = (1U << 8);  ///< bitfield LA20
        constexpr uint32_t LB19 = (1U << 7);  ///< bitfield LB19
        constexpr uint32_t LA19 = (1U << 6);  ///< bitfield LA19
        constexpr uint32_t LB18 = (1U << 5);  ///< bitfield LB18
        constexpr uint32_t LA18 = (1U << 4);  ///< bitfield LA18
        constexpr uint32_t LB17 = (1U << 3);  ///< bitfield LB17
        constexpr uint32_t LA17 = (1U << 2);  ///< bitfield LA17
        constexpr uint32_t LB16 = (1U << 1);  ///< bitfield LB16
        constexpr uint32_t LA16 = (1U << 0);  ///< bitfield LA16
    }

    /// NMIRR Register bits
    namespace nmirr_bits {
        constexpr uint32_t NR = (1U << 0);  ///< bitfield NR
    }

    /// NMICL Register bits
    namespace nmicl_bits {
        constexpr uint32_t NCL = (1U << 0);  ///< bitfield NCL
    }

}

// ============================================================================
// INTREQ Peripheral
// ============================================================================

namespace intreq {
    /// Base addresses
    constexpr uint32_t INTREQ_BASE = 0x40031000;

    /// INTREQ Register structure
    struct Registers {
        volatile uint32_t DRQSEL;  ///< Offset: 0x00 - register DRQSEL
        volatile uint32_t ODDPKS;  ///< Offset: 0x0B - register ODDPKS
        volatile uint32_t IRQCMODE;  ///< Offset: 0x0C - register IRQCMODE
        volatile uint32_t EXC02MON;  ///< Offset: 0x10 - register EXC02MON
        volatile uint32_t IRQ00MON;  ///< Offset: 0x14 - register IRQ00MON
        volatile uint32_t IRQ01MON;  ///< Offset: 0x18 - register IRQ01MON
        volatile uint32_t IRQ02MON;  ///< Offset: 0x1C - register IRQ02MON
        volatile uint32_t IRQ03MON;  ///< Offset: 0x20 - register IRQ03MON
        volatile uint32_t IRQ04MON;  ///< Offset: 0x24 - register IRQ04MON
        volatile uint32_t IRQ05MON;  ///< Offset: 0x28 - register IRQ05MON
        volatile uint32_t IRQ06MON;  ///< Offset: 0x2C - register IRQ06MON
        volatile uint32_t IRQ07MON;  ///< Offset: 0x30 - register IRQ07MON
        volatile uint32_t IRQ08MON;  ///< Offset: 0x34 - register IRQ08MON
        volatile uint32_t IRQ09MON;  ///< Offset: 0x38 - register IRQ09MON
        volatile uint32_t IRQ10MON;  ///< Offset: 0x3C - register IRQ10MON
        volatile uint32_t IRQ11MON;  ///< Offset: 0x40 - register IRQ11MON
        volatile uint32_t IRQ12MON;  ///< Offset: 0x44 - register IRQ12MON
        volatile uint32_t IRQ13MON;  ///< Offset: 0x48 - register IRQ13MON
        volatile uint32_t IRQ14MON;  ///< Offset: 0x4C - register IRQ14MON
        volatile uint32_t IRQ15MON;  ///< Offset: 0x50 - register IRQ15MON
        volatile uint32_t IRQ16MON;  ///< Offset: 0x54 - register IRQ16MON
        volatile uint32_t IRQ17MON;  ///< Offset: 0x58 - register IRQ17MON
        volatile uint32_t IRQ18MON;  ///< Offset: 0x5C - register IRQ18MON
        volatile uint32_t IRQ19MON;  ///< Offset: 0x60 - register IRQ19MON
        volatile uint32_t IRQ20MON;  ///< Offset: 0x64 - register IRQ20MON
        volatile uint32_t IRQ21MON;  ///< Offset: 0x68 - register IRQ21MON
        volatile uint32_t IRQ22MON;  ///< Offset: 0x6C - register IRQ22MON
        volatile uint32_t IRQ23MON;  ///< Offset: 0x70 - register IRQ23MON
        volatile uint32_t IRQ24MON;  ///< Offset: 0x74 - register IRQ24MON
        volatile uint32_t IRQ25MON;  ///< Offset: 0x78 - register IRQ25MON
        volatile uint32_t IRQ26MON;  ///< Offset: 0x7C - register IRQ26MON
        volatile uint32_t IRQ27MON;  ///< Offset: 0x80 - register IRQ27MON
        volatile uint32_t IRQ28MON;  ///< Offset: 0x84 - register IRQ28MON
        volatile uint32_t IRQ29MON;  ///< Offset: 0x88 - register IRQ29MON
        volatile uint32_t IRQ30MON;  ///< Offset: 0x8C - register IRQ30MON
        volatile uint32_t IRQ31MON;  ///< Offset: 0x90 - register IRQ31MON
        volatile uint32_t IRQ32MON;  ///< Offset: 0x94 - register IRQ32MON
        volatile uint32_t IRQ33MON;  ///< Offset: 0x98 - register IRQ33MON
        volatile uint32_t IRQ34MON;  ///< Offset: 0x9C - register IRQ34MON
        volatile uint32_t IRQ35MON;  ///< Offset: 0xA0 - register IRQ35MON
        volatile uint32_t IRQ36MON;  ///< Offset: 0xA4 - register IRQ36MON
        volatile uint32_t IRQ37MON;  ///< Offset: 0xA8 - register IRQ37MON
        volatile uint32_t IRQ38MON;  ///< Offset: 0xAC - register IRQ38MON
        volatile uint32_t IRQ39MON;  ///< Offset: 0xB0 - register IRQ39MON
        volatile uint32_t IRQ40MON;  ///< Offset: 0xB4 - register IRQ40MON
        volatile uint32_t IRQ41MON;  ///< Offset: 0xB8 - register IRQ41MON
        volatile uint32_t IRQ42MON;  ///< Offset: 0xBC - register IRQ42MON
        volatile uint32_t IRQ43MON;  ///< Offset: 0xC0 - register IRQ43MON
        volatile uint32_t IRQ44MON;  ///< Offset: 0xC4 - register IRQ44MON
        volatile uint32_t IRQ45MON;  ///< Offset: 0xC8 - register IRQ45MON
        volatile uint32_t IRQ46MON;  ///< Offset: 0xCC - register IRQ46MON
        volatile uint32_t IRQ47MON;  ///< Offset: 0xD0 - register IRQ47MON
        volatile uint32_t RCINTSEL0;  ///< Offset: 0x210 - register RCINTSEL0
        volatile uint32_t RCINTSEL1;  ///< Offset: 0x214 - register RCINTSEL1
    };

    /// Peripheral instances
    inline Registers* INTREQ = reinterpret_cast<Registers*>(INTREQ_BASE);

    // Bit definitions
    /// DRQSEL Register bits
    namespace drqsel_bits {
        constexpr uint32_t EXINT3 = (1U << 31);  ///< bitfield EXINT3
        constexpr uint32_t EXINT2 = (1U << 30);  ///< bitfield EXINT2
        constexpr uint32_t EXINT1 = (1U << 29);  ///< bitfield EXINT1
        constexpr uint32_t EXINT0 = (1U << 28);  ///< bitfield EXINT0
        constexpr uint32_t MFS7TX = (1U << 27);  ///< bitfield MFS7TX
        constexpr uint32_t MFS7RX = (1U << 26);  ///< bitfield MFS7RX
        constexpr uint32_t MFS6TX = (1U << 25);  ///< bitfield MFS6TX
        constexpr uint32_t MFS6RX = (1U << 24);  ///< bitfield MFS6RX
        constexpr uint32_t MFS5TX = (1U << 23);  ///< bitfield MFS5TX
        constexpr uint32_t MFS5RX = (1U << 22);  ///< bitfield MFS5RX
        constexpr uint32_t MFS4TX = (1U << 21);  ///< bitfield MFS4TX
        constexpr uint32_t MFS4RX = (1U << 20);  ///< bitfield MFS4RX
        constexpr uint32_t MFS3TX = (1U << 19);  ///< bitfield MFS3TX
        constexpr uint32_t MFS3RX = (1U << 18);  ///< bitfield MFS3RX
        constexpr uint32_t MFS2TX = (1U << 17);  ///< bitfield MFS2TX
        constexpr uint32_t MFS2RX = (1U << 16);  ///< bitfield MFS2RX
        constexpr uint32_t MFS1TX = (1U << 15);  ///< bitfield MFS1TX
        constexpr uint32_t MFS1RX = (1U << 14);  ///< bitfield MFS1RX
        constexpr uint32_t MFS0TX = (1U << 13);  ///< bitfield MFS0TX
        constexpr uint32_t MFS0RX = (1U << 12);  ///< bitfield MFS0RX
        constexpr uint32_t IRQ0BT6 = (1U << 11);  ///< bitfield IRQ0BT6
        constexpr uint32_t IRQ0BT4 = (1U << 10);  ///< bitfield IRQ0BT4
        constexpr uint32_t IRQ0BT2 = (1U << 9);  ///< bitfield IRQ0BT2
        constexpr uint32_t IRQ0BT0 = (1U << 8);  ///< bitfield IRQ0BT0
        constexpr uint32_t ADCSCAN2 = (1U << 7);  ///< bitfield ADCSCAN2
        constexpr uint32_t ADCSCAN1 = (1U << 6);  ///< bitfield ADCSCAN1
        constexpr uint32_t ADCSCAN0 = (1U << 5);  ///< bitfield ADCSCAN0
        constexpr uint32_t USBEP5 = (1U << 4);  ///< bitfield USBEP5
        constexpr uint32_t USBEP4 = (1U << 3);  ///< bitfield USBEP4
        constexpr uint32_t USBEP3 = (1U << 2);  ///< bitfield USBEP3
        constexpr uint32_t USBEP2 = (1U << 1);  ///< bitfield USBEP2
        constexpr uint32_t USBEP1 = (1U << 0);  ///< bitfield USBEP1
    }

    /// ODDPKS Register bits
    namespace oddpks_bits {
        constexpr uint32_t ODDPKS4 = (1U << 4);  ///< bitfield ODDPKS4
        constexpr uint32_t ODDPKS3 = (1U << 3);  ///< bitfield ODDPKS3
        constexpr uint32_t ODDPKS2 = (1U << 2);  ///< bitfield ODDPKS2
        constexpr uint32_t ODDPKS1 = (1U << 1);  ///< bitfield ODDPKS1
        constexpr uint32_t ODDPKS0 = (1U << 0);  ///< bitfield ODDPKS0
    }

    /// IRQCMODE Register bits
    namespace irqcmode_bits {
        constexpr uint32_t IRQCMODE = (1U << 0);  ///< bitfield IRQCMODE
    }

    /// EXC02MON Register bits
    namespace exc02mon_bits {
        constexpr uint32_t HWINT = (1U << 1);  ///< bitfield HWINT
        constexpr uint32_t NMI = (1U << 0);  ///< bitfield NMI
    }

    /// IRQ00MON Register bits
    namespace irq00mon_bits {
        constexpr uint32_t FCSINT = (1U << 0);  ///< bitfield FCSINT
    }

    /// IRQ01MON Register bits
    namespace irq01mon_bits {
        constexpr uint32_t SWWDTINT = (1U << 0);  ///< bitfield SWWDTINT
    }

    /// IRQ02MON Register bits
    namespace irq02mon_bits {
        constexpr uint32_t LVDINT = (1U << 0);  ///< bitfield LVDINT
    }

    /// IRQ03MON Register bits
    namespace irq03mon_bits {
        constexpr uint32_t WAVE0INT3 = (1U << 3);  ///< bitfield WAVE0INT3
        constexpr uint32_t WAVE0INT2 = (1U << 2);  ///< bitfield WAVE0INT2
        constexpr uint32_t WAVE0INT1 = (1U << 1);  ///< bitfield WAVE0INT1
        constexpr uint32_t WAVE0INT0 = (1U << 0);  ///< bitfield WAVE0INT0
    }

    /// IRQ04MON Register bits
    namespace irq04mon_bits {
        constexpr uint32_t EXTINT7 = (1U << 7);  ///< bitfield EXTINT7
        constexpr uint32_t EXTINT6 = (1U << 6);  ///< bitfield EXTINT6
        constexpr uint32_t EXTINT5 = (1U << 5);  ///< bitfield EXTINT5
        constexpr uint32_t EXTINT4 = (1U << 4);  ///< bitfield EXTINT4
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< bitfield EXTINT3
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< bitfield EXTINT2
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< bitfield EXTINT1
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< bitfield EXTINT0
    }

    /// IRQ05MON Register bits
    namespace irq05mon_bits {
        constexpr uint32_t EXTINT23 = (1U << 23);  ///< bitfield EXTINT23
        constexpr uint32_t EXTINT22 = (1U << 22);  ///< bitfield EXTINT22
        constexpr uint32_t EXTINT21 = (1U << 21);  ///< bitfield EXTINT21
        constexpr uint32_t EXTINT20 = (1U << 20);  ///< bitfield EXTINT20
        constexpr uint32_t EXTINT19 = (1U << 19);  ///< bitfield EXTINT19
        constexpr uint32_t EXTINT18 = (1U << 18);  ///< bitfield EXTINT18
        constexpr uint32_t EXTINT17 = (1U << 17);  ///< bitfield EXTINT17
        constexpr uint32_t EXTINT16 = (1U << 16);  ///< bitfield EXTINT16
        constexpr uint32_t EXTINT15 = (1U << 15);  ///< bitfield EXTINT15
        constexpr uint32_t EXTINT14 = (1U << 14);  ///< bitfield EXTINT14
        constexpr uint32_t EXTINT13 = (1U << 13);  ///< bitfield EXTINT13
        constexpr uint32_t EXTINT12 = (1U << 12);  ///< bitfield EXTINT12
        constexpr uint32_t EXTINT11 = (1U << 11);  ///< bitfield EXTINT11
        constexpr uint32_t EXTINT10 = (1U << 10);  ///< bitfield EXTINT10
        constexpr uint32_t EXTINT9 = (1U << 9);  ///< bitfield EXTINT9
        constexpr uint32_t EXTINT8 = (1U << 8);  ///< bitfield EXTINT8
        constexpr uint32_t EXTINT7 = (1U << 7);  ///< bitfield EXTINT7
        constexpr uint32_t EXTINT6 = (1U << 6);  ///< bitfield EXTINT6
        constexpr uint32_t EXTINT5 = (1U << 5);  ///< bitfield EXTINT5
        constexpr uint32_t EXTINT4 = (1U << 4);  ///< bitfield EXTINT4
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< bitfield EXTINT3
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< bitfield EXTINT2
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< bitfield EXTINT1
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< bitfield EXTINT0
    }

    /// IRQ06MON Register bits
    namespace irq06mon_bits {
        constexpr uint32_t QUD1INT5 = (1U << 13);  ///< bitfield QUD1INT5
        constexpr uint32_t QUD1INT4 = (1U << 12);  ///< bitfield QUD1INT4
        constexpr uint32_t QUD1INT3 = (1U << 11);  ///< bitfield QUD1INT3
        constexpr uint32_t QUD1INT2 = (1U << 10);  ///< bitfield QUD1INT2
        constexpr uint32_t QUD1INT1 = (1U << 9);  ///< bitfield QUD1INT1
        constexpr uint32_t QUD1INT0 = (1U << 8);  ///< bitfield QUD1INT0
        constexpr uint32_t QUD0INT5 = (1U << 7);  ///< bitfield QUD0INT5
        constexpr uint32_t QUD0INT4 = (1U << 6);  ///< bitfield QUD0INT4
        constexpr uint32_t QUD0INT3 = (1U << 5);  ///< bitfield QUD0INT3
        constexpr uint32_t QUD0INT2 = (1U << 4);  ///< bitfield QUD0INT2
        constexpr uint32_t QUD0INT1 = (1U << 3);  ///< bitfield QUD0INT1
        constexpr uint32_t QUD0INT0 = (1U << 2);  ///< bitfield QUD0INT0
        constexpr uint32_t TIMINT2 = (1U << 1);  ///< bitfield TIMINT2
        constexpr uint32_t TIMINT1 = (1U << 0);  ///< bitfield TIMINT1
    }

    /// IRQ07MON Register bits
    namespace irq07mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ08MON Register bits
    namespace irq08mon_bits {
        constexpr uint32_t MFSINT3 = (1U << 3);  ///< bitfield MFSINT3
        constexpr uint32_t MFSINT2 = (1U << 2);  ///< bitfield MFSINT2
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ09MON Register bits
    namespace irq09mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ10MON Register bits
    namespace irq10mon_bits {
        constexpr uint32_t MFSINT3 = (1U << 3);  ///< bitfield MFSINT3
        constexpr uint32_t MFSINT2 = (1U << 2);  ///< bitfield MFSINT2
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ11MON Register bits
    namespace irq11mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ12MON Register bits
    namespace irq12mon_bits {
        constexpr uint32_t MFSINT3 = (1U << 3);  ///< bitfield MFSINT3
        constexpr uint32_t MFSINT2 = (1U << 2);  ///< bitfield MFSINT2
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ13MON Register bits
    namespace irq13mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ14MON Register bits
    namespace irq14mon_bits {
        constexpr uint32_t MFSINT3 = (1U << 3);  ///< bitfield MFSINT3
        constexpr uint32_t MFSINT2 = (1U << 2);  ///< bitfield MFSINT2
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ15MON Register bits
    namespace irq15mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ16MON Register bits
    namespace irq16mon_bits {
        constexpr uint32_t MFSINT3 = (1U << 3);  ///< bitfield MFSINT3
        constexpr uint32_t MFSINT2 = (1U << 2);  ///< bitfield MFSINT2
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ17MON Register bits
    namespace irq17mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ18MON Register bits
    namespace irq18mon_bits {
        constexpr uint32_t MFSINT3 = (1U << 3);  ///< bitfield MFSINT3
        constexpr uint32_t MFSINT2 = (1U << 2);  ///< bitfield MFSINT2
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ19MON Register bits
    namespace irq19mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ20MON Register bits
    namespace irq20mon_bits {
        constexpr uint32_t MFSINT3 = (1U << 3);  ///< bitfield MFSINT3
        constexpr uint32_t MFSINT2 = (1U << 2);  ///< bitfield MFSINT2
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ21MON Register bits
    namespace irq21mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ22MON Register bits
    namespace irq22mon_bits {
        constexpr uint32_t MFSINT3 = (1U << 3);  ///< bitfield MFSINT3
        constexpr uint32_t MFSINT2 = (1U << 2);  ///< bitfield MFSINT2
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< bitfield MFSINT1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< bitfield MFSINT0
    }

    /// IRQ23MON Register bits
    namespace irq23mon_bits {
        constexpr uint32_t PPGINT2 = (1U << 2);  ///< bitfield PPGINT2
        constexpr uint32_t PPGINT1 = (1U << 1);  ///< bitfield PPGINT1
        constexpr uint32_t PPGINT0 = (1U << 0);  ///< bitfield PPGINT0
    }

    /// IRQ24MON Register bits
    namespace irq24mon_bits {
        constexpr uint32_t RTCINT = (1U << 5);  ///< bitfield RTCINT
        constexpr uint32_t WCINT = (1U << 4);  ///< bitfield WCINT
        constexpr uint32_t UPLLINT = (1U << 3);  ///< bitfield UPLLINT
        constexpr uint32_t MPLLINT = (1U << 2);  ///< bitfield MPLLINT
        constexpr uint32_t SOSCINT = (1U << 1);  ///< bitfield SOSCINT
        constexpr uint32_t MOSCINT = (1U << 0);  ///< bitfield MOSCINT
    }

    /// IRQ25MON Register bits
    namespace irq25mon_bits {
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< bitfield ADCINT3
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< bitfield ADCINT2
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< bitfield ADCINT1
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< bitfield ADCINT0
    }

    /// IRQ26MON Register bits
    namespace irq26mon_bits {
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< bitfield ADCINT3
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< bitfield ADCINT2
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< bitfield ADCINT1
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< bitfield ADCINT0
    }

    /// IRQ28MON Register bits
    namespace irq28mon_bits {
        constexpr uint32_t FRT0INT5 = (1U << 5);  ///< bitfield FRT0INT5
        constexpr uint32_t FRT0INT4 = (1U << 4);  ///< bitfield FRT0INT4
        constexpr uint32_t FRT0INT3 = (1U << 3);  ///< bitfield FRT0INT3
        constexpr uint32_t FRT0INT2 = (1U << 2);  ///< bitfield FRT0INT2
        constexpr uint32_t FRT0INT1 = (1U << 1);  ///< bitfield FRT0INT1
        constexpr uint32_t FRT0INT0 = (1U << 0);  ///< bitfield FRT0INT0
    }

    /// IRQ29MON Register bits
    namespace irq29mon_bits {
        constexpr uint32_t ICU0INT3 = (1U << 3);  ///< bitfield ICU0INT3
        constexpr uint32_t ICU0INT2 = (1U << 2);  ///< bitfield ICU0INT2
        constexpr uint32_t ICU0INT1 = (1U << 1);  ///< bitfield ICU0INT1
        constexpr uint32_t ICU0INT0 = (1U << 0);  ///< bitfield ICU0INT0
    }

    /// IRQ30MON Register bits
    namespace irq30mon_bits {
        constexpr uint32_t OCU0INT5 = (1U << 5);  ///< bitfield OCU0INT5
        constexpr uint32_t OCU0INT4 = (1U << 4);  ///< bitfield OCU0INT4
        constexpr uint32_t OCU0INT3 = (1U << 3);  ///< bitfield OCU0INT3
        constexpr uint32_t OCU0INT2 = (1U << 2);  ///< bitfield OCU0INT2
        constexpr uint32_t OCU0INT1 = (1U << 1);  ///< bitfield OCU0INT1
        constexpr uint32_t OCU0INT0 = (1U << 0);  ///< bitfield OCU0INT0
    }

    /// IRQ31MON Register bits
    namespace irq31mon_bits {
        constexpr uint32_t BTINT15 = (1U << 15);  ///< bitfield BTINT15
        constexpr uint32_t BTINT14 = (1U << 14);  ///< bitfield BTINT14
        constexpr uint32_t BTINT13 = (1U << 13);  ///< bitfield BTINT13
        constexpr uint32_t BTINT12 = (1U << 12);  ///< bitfield BTINT12
        constexpr uint32_t BTINT11 = (1U << 11);  ///< bitfield BTINT11
        constexpr uint32_t BTINT10 = (1U << 10);  ///< bitfield BTINT10
        constexpr uint32_t BTINT9 = (1U << 9);  ///< bitfield BTINT9
        constexpr uint32_t BTINT8 = (1U << 8);  ///< bitfield BTINT8
        constexpr uint32_t BTINT7 = (1U << 7);  ///< bitfield BTINT7
        constexpr uint32_t BTINT6 = (1U << 6);  ///< bitfield BTINT6
        constexpr uint32_t BTINT5 = (1U << 5);  ///< bitfield BTINT5
        constexpr uint32_t BTINT4 = (1U << 4);  ///< bitfield BTINT4
        constexpr uint32_t BTINT3 = (1U << 3);  ///< bitfield BTINT3
        constexpr uint32_t BTINT2 = (1U << 2);  ///< bitfield BTINT2
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ34MON Register bits
    namespace irq34mon_bits {
        constexpr uint32_t USB0INT4 = (1U << 4);  ///< bitfield USB0INT4
        constexpr uint32_t USB0INT3 = (1U << 3);  ///< bitfield USB0INT3
        constexpr uint32_t USB0INT2 = (1U << 2);  ///< bitfield USB0INT2
        constexpr uint32_t USB0INT1 = (1U << 1);  ///< bitfield USB0INT1
        constexpr uint32_t USB0INT0 = (1U << 0);  ///< bitfield USB0INT0
    }

    /// IRQ35MON Register bits
    namespace irq35mon_bits {
        constexpr uint32_t USB0INT5 = (1U << 5);  ///< bitfield USB0INT5
        constexpr uint32_t USB0INT4 = (1U << 4);  ///< bitfield USB0INT4
        constexpr uint32_t USB0INT3 = (1U << 3);  ///< bitfield USB0INT3
        constexpr uint32_t USB0INT2 = (1U << 2);  ///< bitfield USB0INT2
        constexpr uint32_t USB0INT1 = (1U << 1);  ///< bitfield USB0INT1
        constexpr uint32_t USB0INT0 = (1U << 0);  ///< bitfield USB0INT0
    }

    /// IRQ36MON Register bits
    namespace irq36mon_bits {
        constexpr uint32_t RCEC0INT = (1U << 5);  ///< bitfield RCEC0INT
    }

    /// IRQ37MON Register bits
    namespace irq37mon_bits {
        constexpr uint32_t RCEC1INT = (1U << 6);  ///< bitfield RCEC1INT
    }

    /// IRQ38MON Register bits
    namespace irq38mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< bitfield DMAINT
    }

    /// IRQ39MON Register bits
    namespace irq39mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< bitfield DMAINT
    }

    /// IRQ40MON Register bits
    namespace irq40mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< bitfield DMAINT
    }

    /// IRQ41MON Register bits
    namespace irq41mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< bitfield DMAINT
    }

    /// IRQ42MON Register bits
    namespace irq42mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< bitfield DMAINT
    }

    /// IRQ43MON Register bits
    namespace irq43mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< bitfield DMAINT
    }

    /// IRQ44MON Register bits
    namespace irq44mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< bitfield DMAINT
    }

    /// IRQ45MON Register bits
    namespace irq45mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< bitfield DMAINT
    }

    /// IRQ46MON Register bits
    namespace irq46mon_bits {
        constexpr uint32_t BTINT15 = (1U << 15);  ///< bitfield BTINT15
        constexpr uint32_t BTINT14 = (1U << 14);  ///< bitfield BTINT14
        constexpr uint32_t BTINT13 = (1U << 13);  ///< bitfield BTINT13
        constexpr uint32_t BTINT12 = (1U << 12);  ///< bitfield BTINT12
        constexpr uint32_t BTINT11 = (1U << 11);  ///< bitfield BTINT11
        constexpr uint32_t BTINT10 = (1U << 10);  ///< bitfield BTINT10
        constexpr uint32_t BTINT9 = (1U << 9);  ///< bitfield BTINT9
        constexpr uint32_t BTINT8 = (1U << 8);  ///< bitfield BTINT8
        constexpr uint32_t BTINT7 = (1U << 7);  ///< bitfield BTINT7
        constexpr uint32_t BTINT6 = (1U << 6);  ///< bitfield BTINT6
        constexpr uint32_t BTINT5 = (1U << 5);  ///< bitfield BTINT5
        constexpr uint32_t BTINT4 = (1U << 4);  ///< bitfield BTINT4
        constexpr uint32_t BTINT3 = (1U << 3);  ///< bitfield BTINT3
        constexpr uint32_t BTINT2 = (1U << 2);  ///< bitfield BTINT2
        constexpr uint32_t BTINT1 = (1U << 1);  ///< bitfield BTINT1
        constexpr uint32_t BTINT0 = (1U << 0);  ///< bitfield BTINT0
    }

    /// IRQ47MON Register bits
    namespace irq47mon_bits {
        constexpr uint32_t FLASHINT = (1U << 11);  ///< bitfield FLASHINT
    }

    /// RCINTSEL0 Register bits
    namespace rcintsel0_bits {
        constexpr uint32_t INTSEL3 = (8 << 24);  ///< bitfield INTSEL3
        constexpr uint32_t INTSEL2 = (8 << 16);  ///< bitfield INTSEL2
        constexpr uint32_t INTSEL1 = (8 << 8);  ///< bitfield INTSEL1
        constexpr uint32_t INTSEL0 = (8 << 0);  ///< bitfield INTSEL0
    }

    /// RCINTSEL1 Register bits
    namespace rcintsel1_bits {
        constexpr uint32_t INTSEL7 = (8 << 24);  ///< bitfield INTSEL7
        constexpr uint32_t INTSEL6 = (8 << 16);  ///< bitfield INTSEL6
        constexpr uint32_t INTSEL5 = (8 << 8);  ///< bitfield INTSEL5
        constexpr uint32_t INTSEL4 = (8 << 0);  ///< bitfield INTSEL4
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_BASE = 0x40033000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t PFR0;  ///< Offset: 0x00 - register PFR0
        volatile uint32_t PFR1;  ///< Offset: 0x04 - register PFR1
        volatile uint32_t PFR2;  ///< Offset: 0x08 - register PFR2
        volatile uint32_t PFR3;  ///< Offset: 0x0C - register PFR3
        volatile uint32_t PFR4;  ///< Offset: 0x10 - register PFR4
        volatile uint32_t PFR5;  ///< Offset: 0x14 - register PFR5
        volatile uint32_t PFR6;  ///< Offset: 0x18 - register PFR6
        volatile uint32_t PFR7;  ///< Offset: 0x1C - register PFR7
        volatile uint32_t PFR8;  ///< Offset: 0x20 - register PFR8
        volatile uint32_t PFR9;  ///< Offset: 0x24 - register PFR9
        volatile uint32_t PFRA;  ///< Offset: 0x28 - register PFRA
        volatile uint32_t PFRB;  ///< Offset: 0x2C - register PFRB
        volatile uint32_t PFRC;  ///< Offset: 0x30 - register PFRC
        volatile uint32_t PFRD;  ///< Offset: 0x34 - register PFRD
        volatile uint32_t PFRE;  ///< Offset: 0x38 - register PFRE
        volatile uint32_t PFRF;  ///< Offset: 0x3C - register PFRF
        volatile uint32_t PCR0;  ///< Offset: 0x100 - register PCR0
        volatile uint32_t PCR1;  ///< Offset: 0x104 - register PCR1
        volatile uint32_t PCR2;  ///< Offset: 0x108 - register PCR2
        volatile uint32_t PCR3;  ///< Offset: 0x10C - register PCR3
        volatile uint32_t PCR4;  ///< Offset: 0x110 - register PCR4
        volatile uint32_t PCR5;  ///< Offset: 0x114 - register PCR5
        volatile uint32_t PCR6;  ///< Offset: 0x118 - register PCR6
        volatile uint32_t PCR7;  ///< Offset: 0x11C - register PCR7
        volatile uint32_t PCR8;  ///< Offset: 0x120 - register PCR8
        volatile uint32_t PCR9;  ///< Offset: 0x124 - register PCR9
        volatile uint32_t PCRA;  ///< Offset: 0x128 - register PCRA
        volatile uint32_t PCRB;  ///< Offset: 0x12C - register PCRB
        volatile uint32_t PCRC;  ///< Offset: 0x130 - register PCRC
        volatile uint32_t PCRD;  ///< Offset: 0x134 - register PCRD
        volatile uint32_t PCRE;  ///< Offset: 0x138 - register PCRE
        volatile uint32_t PCRF;  ///< Offset: 0x13C - register PCRF
        volatile uint32_t DDR0;  ///< Offset: 0x200 - register DDR0
        volatile uint32_t DDR1;  ///< Offset: 0x204 - register DDR1
        volatile uint32_t DDR2;  ///< Offset: 0x208 - register DDR2
        volatile uint32_t DDR3;  ///< Offset: 0x20C - register DDR3
        volatile uint32_t DDR4;  ///< Offset: 0x210 - register DDR4
        volatile uint32_t DDR5;  ///< Offset: 0x214 - register DDR5
        volatile uint32_t DDR6;  ///< Offset: 0x218 - register DDR6
        volatile uint32_t DDR7;  ///< Offset: 0x21C - register DDR7
        volatile uint32_t DDR8;  ///< Offset: 0x220 - register DDR8
        volatile uint32_t DDR9;  ///< Offset: 0x224 - register DDR9
        volatile uint32_t DDRA;  ///< Offset: 0x228 - register DDRA
        volatile uint32_t DDRB;  ///< Offset: 0x22C - register DDRB
        volatile uint32_t DDRC;  ///< Offset: 0x230 - register DDRC
        volatile uint32_t DDRD;  ///< Offset: 0x234 - register DDRD
        volatile uint32_t DDRE;  ///< Offset: 0x238 - register DDRE
        volatile uint32_t DDRF;  ///< Offset: 0x23C - register DDRF
        volatile uint32_t PDIR0;  ///< Offset: 0x300 - register PDIR0
        volatile uint32_t PDIR1;  ///< Offset: 0x304 - register PDIR1
        volatile uint32_t PDIR2;  ///< Offset: 0x308 - register PDIR2
        volatile uint32_t PDIR3;  ///< Offset: 0x30C - register PDIR3
        volatile uint32_t PDIR4;  ///< Offset: 0x310 - register PDIR4
        volatile uint32_t PDIR5;  ///< Offset: 0x314 - register PDIR5
        volatile uint32_t PDIR6;  ///< Offset: 0x318 - register PDIR6
        volatile uint32_t PDIR7;  ///< Offset: 0x31C - register PDIR7
        volatile uint32_t PDIR8;  ///< Offset: 0x320 - register PDIR8
        volatile uint32_t PDIR9;  ///< Offset: 0x324 - register PDIR9
        volatile uint32_t PDIRA;  ///< Offset: 0x328 - register PDIRA
        volatile uint32_t PDIRB;  ///< Offset: 0x32C - register PDIRB
        volatile uint32_t PDIRC;  ///< Offset: 0x330 - register PDIRC
        volatile uint32_t PDIRD;  ///< Offset: 0x334 - register PDIRD
        volatile uint32_t PDIRE;  ///< Offset: 0x338 - register PDIRE
        volatile uint32_t PDIRF;  ///< Offset: 0x33C - register PDIRF
        volatile uint32_t PDOR0;  ///< Offset: 0x400 - register PDOR0
        volatile uint32_t PDOR1;  ///< Offset: 0x404 - register PDOR1
        volatile uint32_t PDOR2;  ///< Offset: 0x408 - register PDOR2
        volatile uint32_t PDOR3;  ///< Offset: 0x40C - register PDOR3
        volatile uint32_t PDOR4;  ///< Offset: 0x410 - register PDOR4
        volatile uint32_t PDOR5;  ///< Offset: 0x414 - register PDOR5
        volatile uint32_t PDOR6;  ///< Offset: 0x418 - register PDOR6
        volatile uint32_t PDOR7;  ///< Offset: 0x41C - register PDOR7
        volatile uint32_t PDOR8;  ///< Offset: 0x420 - register PDOR8
        volatile uint32_t PDOR9;  ///< Offset: 0x424 - register PDOR9
        volatile uint32_t PDORA;  ///< Offset: 0x428 - register PDORA
        volatile uint32_t PDORB;  ///< Offset: 0x42C - register PDORB
        volatile uint32_t PDORC;  ///< Offset: 0x430 - register PDORC
        volatile uint32_t PDORD;  ///< Offset: 0x434 - register PDORD
        volatile uint32_t PDORE;  ///< Offset: 0x438 - register PDORE
        volatile uint32_t PDORF;  ///< Offset: 0x43C - register PDORF
        volatile uint32_t ADE;  ///< Offset: 0x500 - register ADE
        volatile uint32_t SPSR;  ///< Offset: 0x580 - register SPSR
        volatile uint32_t EPFR00;  ///< Offset: 0x600 - register EPFR00
        volatile uint32_t EPFR01;  ///< Offset: 0x604 - register EPFR01
        volatile uint32_t EPFR02;  ///< Offset: 0x608 - register EPFR02
        volatile uint32_t EPFR03;  ///< Offset: 0x60C - register EPFR03
        volatile uint32_t EPFR04;  ///< Offset: 0x610 - register EPFR04
        volatile uint32_t EPFR05;  ///< Offset: 0x614 - register EPFR05
        volatile uint32_t EPFR06;  ///< Offset: 0x618 - register EPFR06
        volatile uint32_t EPFR07;  ///< Offset: 0x61C - register EPFR07
        volatile uint32_t EPFR08;  ///< Offset: 0x620 - register EPFR08
        volatile uint32_t EPFR09;  ///< Offset: 0x624 - register EPFR09
        volatile uint32_t EPFR10;  ///< Offset: 0x628 - register EPFR10
        volatile uint32_t EPFR11;  ///< Offset: 0x62C - register EPFR11
        volatile uint32_t EPFR12;  ///< Offset: 0x630 - register EPFR12
        volatile uint32_t EPFR13;  ///< Offset: 0x634 - register EPFR13
        volatile uint32_t EPFR14;  ///< Offset: 0x638 - register EPFR14
        volatile uint32_t EPFR15;  ///< Offset: 0x63C - register EPFR15
        volatile uint32_t EPFR16;  ///< Offset: 0x640 - register EPFR16
        volatile uint32_t EPFR17;  ///< Offset: 0x644 - register EPFR17
        volatile uint32_t EPFR18;  ///< Offset: 0x648 - register EPFR18
        volatile uint32_t PZR0;  ///< Offset: 0x700 - register PZR0
        volatile uint32_t PZR1;  ///< Offset: 0x704 - register PZR1
        volatile uint32_t PZR2;  ///< Offset: 0x708 - register PZR2
        volatile uint32_t PZR3;  ///< Offset: 0x70C - register PZR3
        volatile uint32_t PZR4;  ///< Offset: 0x710 - register PZR4
        volatile uint32_t PZR5;  ///< Offset: 0x714 - register PZR5
        volatile uint32_t PZR6;  ///< Offset: 0x718 - register PZR6
        volatile uint32_t PZR7;  ///< Offset: 0x71C - register PZR7
        volatile uint32_t PZR8;  ///< Offset: 0x720 - register PZR8
        volatile uint32_t PZR9;  ///< Offset: 0x724 - register PZR9
        volatile uint32_t PZRA;  ///< Offset: 0x728 - register PZRA
        volatile uint32_t PZRB;  ///< Offset: 0x72C - register PZRB
        volatile uint32_t PZRC;  ///< Offset: 0x730 - register PZRC
        volatile uint32_t PZRD;  ///< Offset: 0x734 - register PZRD
        volatile uint32_t PZRE;  ///< Offset: 0x738 - register PZRE
        volatile uint32_t PZRF;  ///< Offset: 0x73C - register PZRF
    };

    /// Peripheral instances
    inline Registers* GPIO = reinterpret_cast<Registers*>(GPIO_BASE);

    // Bit definitions
    /// PFR0 Register bits
    namespace pfr0_bits {
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR1 Register bits
    namespace pfr1_bits {
        constexpr uint32_t PF = (1U << 15);  ///< bitfield PF
        constexpr uint32_t PE = (1U << 14);  ///< bitfield PE
        constexpr uint32_t PD = (1U << 13);  ///< bitfield PD
        constexpr uint32_t PC = (1U << 12);  ///< bitfield PC
        constexpr uint32_t PB = (1U << 11);  ///< bitfield PB
        constexpr uint32_t PA = (1U << 10);  ///< bitfield PA
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR2 Register bits
    namespace pfr2_bits {
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR3 Register bits
    namespace pfr3_bits {
        constexpr uint32_t PF = (1U << 15);  ///< bitfield PF
        constexpr uint32_t PE = (1U << 14);  ///< bitfield PE
        constexpr uint32_t PD = (1U << 13);  ///< bitfield PD
        constexpr uint32_t PC = (1U << 12);  ///< bitfield PC
        constexpr uint32_t PB = (1U << 11);  ///< bitfield PB
        constexpr uint32_t PA = (1U << 10);  ///< bitfield PA
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR4 Register bits
    namespace pfr4_bits {
        constexpr uint32_t PE = (1U << 14);  ///< bitfield PE
        constexpr uint32_t PD = (1U << 13);  ///< bitfield PD
        constexpr uint32_t PC = (1U << 12);  ///< bitfield PC
        constexpr uint32_t PB = (1U << 11);  ///< bitfield PB
        constexpr uint32_t PA = (1U << 10);  ///< bitfield PA
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR5 Register bits
    namespace pfr5_bits {
        constexpr uint32_t PD = (1U << 13);  ///< bitfield PD
        constexpr uint32_t PC = (1U << 12);  ///< bitfield PC
        constexpr uint32_t PB = (1U << 11);  ///< bitfield PB
        constexpr uint32_t PA = (1U << 10);  ///< bitfield PA
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR6 Register bits
    namespace pfr6_bits {
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR7 Register bits
    namespace pfr7_bits {
        constexpr uint32_t PF = (1U << 15);  ///< bitfield PF
        constexpr uint32_t PE = (1U << 14);  ///< bitfield PE
        constexpr uint32_t PD = (1U << 13);  ///< bitfield PD
        constexpr uint32_t PC = (1U << 12);  ///< bitfield PC
        constexpr uint32_t PB = (1U << 11);  ///< bitfield PB
        constexpr uint32_t PA = (1U << 10);  ///< bitfield PA
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR8 Register bits
    namespace pfr8_bits {
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFR9 Register bits
    namespace pfr9_bits {
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFRA Register bits
    namespace pfra_bits {
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFRB Register bits
    namespace pfrb_bits {
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFRC Register bits
    namespace pfrc_bits {
        constexpr uint32_t PF = (1U << 15);  ///< bitfield PF
        constexpr uint32_t PE = (1U << 14);  ///< bitfield PE
        constexpr uint32_t PD = (1U << 13);  ///< bitfield PD
        constexpr uint32_t PC = (1U << 12);  ///< bitfield PC
        constexpr uint32_t PB = (1U << 11);  ///< bitfield PB
        constexpr uint32_t PA = (1U << 10);  ///< bitfield PA
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFRD Register bits
    namespace pfrd_bits {
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFRE Register bits
    namespace pfre_bits {
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// PFRF Register bits
    namespace pfrf_bits {
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// DDR0 Register bits
    namespace ddr0_bits {
        constexpr uint32_t P9 = (1U << 9);  ///< bitfield P9
        constexpr uint32_t P8 = (1U << 8);  ///< bitfield P8
        constexpr uint32_t P7 = (1U << 7);  ///< bitfield P7
        constexpr uint32_t P6 = (1U << 6);  ///< bitfield P6
        constexpr uint32_t P5 = (1U << 5);  ///< bitfield P5
        constexpr uint32_t P4 = (1U << 4);  ///< bitfield P4
        constexpr uint32_t P3 = (1U << 3);  ///< bitfield P3
        constexpr uint32_t P2 = (1U << 2);  ///< bitfield P2
        constexpr uint32_t P1 = (1U << 1);  ///< bitfield P1
        constexpr uint32_t P0 = (1U << 0);  ///< bitfield P0
    }

    /// ADE Register bits
    namespace ade_bits {
        constexpr uint32_t AN31 = (1U << 31);  ///< bitfield AN31
        constexpr uint32_t AN30 = (1U << 30);  ///< bitfield AN30
        constexpr uint32_t AN29 = (1U << 29);  ///< bitfield AN29
        constexpr uint32_t AN28 = (1U << 28);  ///< bitfield AN28
        constexpr uint32_t AN27 = (1U << 27);  ///< bitfield AN27
        constexpr uint32_t AN26 = (1U << 26);  ///< bitfield AN26
        constexpr uint32_t AN25 = (1U << 25);  ///< bitfield AN25
        constexpr uint32_t AN24 = (1U << 24);  ///< bitfield AN24
        constexpr uint32_t AN23 = (1U << 23);  ///< bitfield AN23
        constexpr uint32_t AN22 = (1U << 22);  ///< bitfield AN22
        constexpr uint32_t AN21 = (1U << 21);  ///< bitfield AN21
        constexpr uint32_t AN20 = (1U << 20);  ///< bitfield AN20
        constexpr uint32_t AN19 = (1U << 19);  ///< bitfield AN19
        constexpr uint32_t AN18 = (1U << 18);  ///< bitfield AN18
        constexpr uint32_t AN17 = (1U << 17);  ///< bitfield AN17
        constexpr uint32_t AN16 = (1U << 16);  ///< bitfield AN16
        constexpr uint32_t AN15 = (1U << 15);  ///< bitfield AN15
        constexpr uint32_t AN14 = (1U << 14);  ///< bitfield AN14
        constexpr uint32_t AN13 = (1U << 13);  ///< bitfield AN13
        constexpr uint32_t AN12 = (1U << 12);  ///< bitfield AN12
        constexpr uint32_t AN11 = (1U << 11);  ///< bitfield AN11
        constexpr uint32_t AN10 = (1U << 10);  ///< bitfield AN10
        constexpr uint32_t AN9 = (1U << 9);  ///< bitfield AN9
        constexpr uint32_t AN8 = (1U << 8);  ///< bitfield AN8
        constexpr uint32_t AN7 = (1U << 7);  ///< bitfield AN7
        constexpr uint32_t AN6 = (1U << 6);  ///< bitfield AN6
        constexpr uint32_t AN5 = (1U << 5);  ///< bitfield AN5
        constexpr uint32_t AN4 = (1U << 4);  ///< bitfield AN4
        constexpr uint32_t AN3 = (1U << 3);  ///< bitfield AN3
        constexpr uint32_t AN2 = (1U << 2);  ///< bitfield AN2
        constexpr uint32_t AN1 = (1U << 1);  ///< bitfield AN1
        constexpr uint32_t AN0 = (1U << 0);  ///< bitfield AN0
    }

    /// SPSR Register bits
    namespace spsr_bits {
        constexpr uint32_t USB0C = (1U << 4);  ///< bitfield USB0C
        constexpr uint32_t MAINXC = (2 << 2);  ///< bitfield MAINXC
        constexpr uint32_t SUBXC = (2 << 0);  ///< bitfield SUBXC
    }

    /// EPFR00 Register bits
    namespace epfr00_bits {
        constexpr uint32_t TRC1E = (1U << 25);  ///< bitfield TRC1E
        constexpr uint32_t TRC0E = (1U << 24);  ///< bitfield TRC0E
        constexpr uint32_t JTAGEN1S = (1U << 17);  ///< bitfield JTAGEN1S
        constexpr uint32_t JTAGEN0B = (1U << 16);  ///< bitfield JTAGEN0B
        constexpr uint32_t USBP0E = (1U << 9);  ///< bitfield USBP0E
        constexpr uint32_t SUBOUTE = (2 << 6);  ///< bitfield SUBOUTE
        constexpr uint32_t RTCCOE = (2 << 4);  ///< bitfield RTCCOE
        constexpr uint32_t CROUTE = (2 << 1);  ///< bitfield CROUTE
        constexpr uint32_t NMIS = (1U << 0);  ///< bitfield NMIS
    }

    /// EPFR01 Register bits
    namespace epfr01_bits {
        constexpr uint32_t IC03S = (3 << 29);  ///< bitfield IC03S
        constexpr uint32_t IC02S = (3 << 26);  ///< bitfield IC02S
        constexpr uint32_t IC01S = (3 << 23);  ///< bitfield IC01S
        constexpr uint32_t IC00S = (3 << 20);  ///< bitfield IC00S
        constexpr uint32_t FRCK0S = (2 << 18);  ///< bitfield FRCK0S
        constexpr uint32_t DTTI0S = (2 << 16);  ///< bitfield DTTI0S
        constexpr uint32_t DTTI0C = (1U << 12);  ///< bitfield DTTI0C
        constexpr uint32_t RTO05E = (2 << 10);  ///< bitfield RTO05E
        constexpr uint32_t RTO04E = (2 << 8);  ///< bitfield RTO04E
        constexpr uint32_t RTO03E = (2 << 6);  ///< bitfield RTO03E
        constexpr uint32_t RTO02E = (2 << 4);  ///< bitfield RTO02E
        constexpr uint32_t RTO01E = (2 << 2);  ///< bitfield RTO01E
        constexpr uint32_t RTO00E = (2 << 0);  ///< bitfield RTO00E
    }

    /// EPFR04 Register bits
    namespace epfr04_bits {
        constexpr uint32_t TIOB3S = (2 << 28);  ///< bitfield TIOB3S
        constexpr uint32_t TIOA3E = (2 << 26);  ///< bitfield TIOA3E
        constexpr uint32_t TIOA3S = (2 << 24);  ///< bitfield TIOA3S
        constexpr uint32_t TIOB2S = (2 << 20);  ///< bitfield TIOB2S
        constexpr uint32_t TIOA2E = (2 << 18);  ///< bitfield TIOA2E
        constexpr uint32_t TIOB1S = (2 << 12);  ///< bitfield TIOB1S
        constexpr uint32_t TIOA1E = (2 << 10);  ///< bitfield TIOA1E
        constexpr uint32_t TIOA1S = (2 << 8);  ///< bitfield TIOA1S
        constexpr uint32_t TIOB0S = (3 << 4);  ///< bitfield TIOB0S
        constexpr uint32_t TIOA0E = (2 << 2);  ///< bitfield TIOA0E
    }

    /// EPFR05 Register bits
    namespace epfr05_bits {
        constexpr uint32_t TIOB7S = (2 << 28);  ///< bitfield TIOB7S
        constexpr uint32_t TIOA7E = (2 << 26);  ///< bitfield TIOA7E
        constexpr uint32_t TIOA7S = (2 << 24);  ///< bitfield TIOA7S
        constexpr uint32_t TIOB6S = (2 << 20);  ///< bitfield TIOB6S
        constexpr uint32_t TIOA6E = (2 << 18);  ///< bitfield TIOA6E
        constexpr uint32_t TIOB5S = (2 << 12);  ///< bitfield TIOB5S
        constexpr uint32_t TIOA5E = (2 << 10);  ///< bitfield TIOA5E
        constexpr uint32_t TIOA5S = (2 << 8);  ///< bitfield TIOA5S
        constexpr uint32_t TIOB4S = (2 << 4);  ///< bitfield TIOB4S
        constexpr uint32_t TIOA4E = (2 << 2);  ///< bitfield TIOA4E
    }

    /// EPFR06 Register bits
    namespace epfr06_bits {
        constexpr uint32_t EINT15S = (2 << 30);  ///< bitfield EINT15S
        constexpr uint32_t EINT14S = (2 << 28);  ///< bitfield EINT14S
        constexpr uint32_t EINT13S = (2 << 26);  ///< bitfield EINT13S
        constexpr uint32_t EINT12S = (2 << 24);  ///< bitfield EINT12S
        constexpr uint32_t EINT11S = (2 << 22);  ///< bitfield EINT11S
        constexpr uint32_t EINT10S = (2 << 20);  ///< bitfield EINT10S
        constexpr uint32_t EINT09S = (2 << 18);  ///< bitfield EINT09S
        constexpr uint32_t EINT08S = (2 << 16);  ///< bitfield EINT08S
        constexpr uint32_t EINT07S = (2 << 14);  ///< bitfield EINT07S
        constexpr uint32_t EINT06S = (2 << 12);  ///< bitfield EINT06S
        constexpr uint32_t EINT05S = (2 << 10);  ///< bitfield EINT05S
        constexpr uint32_t EINT04S = (2 << 8);  ///< bitfield EINT04S
        constexpr uint32_t EINT03S = (2 << 6);  ///< bitfield EINT03S
        constexpr uint32_t EINT02S = (2 << 4);  ///< bitfield EINT02S
        constexpr uint32_t EINT01S = (2 << 2);  ///< bitfield EINT01S
        constexpr uint32_t EINT00S = (2 << 0);  ///< bitfield EINT00S
    }

    /// EPFR07 Register bits
    namespace epfr07_bits {
        constexpr uint32_t SCK3B = (2 << 26);  ///< bitfield SCK3B
        constexpr uint32_t SOT3B = (2 << 24);  ///< bitfield SOT3B
        constexpr uint32_t SIN3S = (2 << 22);  ///< bitfield SIN3S
        constexpr uint32_t SCK2B = (2 << 20);  ///< bitfield SCK2B
        constexpr uint32_t SOT2B = (2 << 18);  ///< bitfield SOT2B
        constexpr uint32_t SIN2S = (2 << 16);  ///< bitfield SIN2S
        constexpr uint32_t SCK1B = (2 << 14);  ///< bitfield SCK1B
        constexpr uint32_t SOT1B = (2 << 12);  ///< bitfield SOT1B
        constexpr uint32_t SIN1S = (2 << 10);  ///< bitfield SIN1S
        constexpr uint32_t SCK0B = (2 << 8);  ///< bitfield SCK0B
        constexpr uint32_t SOT0B = (2 << 6);  ///< bitfield SOT0B
        constexpr uint32_t SIN0S = (2 << 4);  ///< bitfield SIN0S
    }

    /// EPFR08 Register bits
    namespace epfr08_bits {
        constexpr uint32_t SCK7B = (2 << 26);  ///< bitfield SCK7B
        constexpr uint32_t SOT7B = (2 << 24);  ///< bitfield SOT7B
        constexpr uint32_t SIN7S = (2 << 22);  ///< bitfield SIN7S
        constexpr uint32_t SCK6B = (2 << 20);  ///< bitfield SCK6B
        constexpr uint32_t SOT6B = (2 << 18);  ///< bitfield SOT6B
        constexpr uint32_t SIN6S = (2 << 16);  ///< bitfield SIN6S
        constexpr uint32_t SCK5B = (2 << 14);  ///< bitfield SCK5B
        constexpr uint32_t SOT5B = (2 << 12);  ///< bitfield SOT5B
        constexpr uint32_t SIN5S = (2 << 10);  ///< bitfield SIN5S
        constexpr uint32_t SCK4B = (2 << 8);  ///< bitfield SCK4B
        constexpr uint32_t SOT4B = (2 << 6);  ///< bitfield SOT4B
        constexpr uint32_t SIN4S = (2 << 4);  ///< bitfield SIN4S
        constexpr uint32_t CTS4S = (2 << 2);  ///< bitfield CTS4S
        constexpr uint32_t RTS4E = (2 << 0);  ///< bitfield RTS4E
    }

    /// EPFR09 Register bits
    namespace epfr09_bits {
        constexpr uint32_t ADTRG1S = (4 << 16);  ///< bitfield ADTRG1S
        constexpr uint32_t ADTRG0S = (4 << 12);  ///< bitfield ADTRG0S
        constexpr uint32_t QZIN1S = (2 << 10);  ///< bitfield QZIN1S
        constexpr uint32_t QBIN1S = (2 << 8);  ///< bitfield QBIN1S
        constexpr uint32_t QAIN1S = (2 << 6);  ///< bitfield QAIN1S
        constexpr uint32_t QZIN0S = (2 << 4);  ///< bitfield QZIN0S
        constexpr uint32_t QBIN0S = (2 << 2);  ///< bitfield QBIN0S
        constexpr uint32_t QAIN0S = (2 << 0);  ///< bitfield QAIN0S
    }

    /// EPFR10 Register bits
    namespace epfr10_bits {
        constexpr uint32_t UEA24E = (1U << 31);  ///< bitfield UEA24E
        constexpr uint32_t UEA23E = (1U << 30);  ///< bitfield UEA23E
        constexpr uint32_t UEA22E = (1U << 29);  ///< bitfield UEA22E
        constexpr uint32_t UEA21E = (1U << 28);  ///< bitfield UEA21E
        constexpr uint32_t UEA20E = (1U << 27);  ///< bitfield UEA20E
        constexpr uint32_t UEA19E = (1U << 26);  ///< bitfield UEA19E
        constexpr uint32_t UEA18E = (1U << 25);  ///< bitfield UEA18E
        constexpr uint32_t UEA17E = (1U << 24);  ///< bitfield UEA17E
        constexpr uint32_t UEA16E = (1U << 23);  ///< bitfield UEA16E
        constexpr uint32_t UEA15E = (1U << 22);  ///< bitfield UEA15E
        constexpr uint32_t UEA14E = (1U << 21);  ///< bitfield UEA14E
        constexpr uint32_t UEA13E = (1U << 20);  ///< bitfield UEA13E
        constexpr uint32_t UEA12E = (1U << 19);  ///< bitfield UEA12E
        constexpr uint32_t UEA11E = (1U << 18);  ///< bitfield UEA11E
        constexpr uint32_t UEA10E = (1U << 17);  ///< bitfield UEA10E
        constexpr uint32_t UEA09E = (1U << 16);  ///< bitfield UEA09E
        constexpr uint32_t UEA08E = (1U << 15);  ///< bitfield UEA08E
        constexpr uint32_t UEAOOE = (1U << 14);  ///< bitfield UEAOOE
        constexpr uint32_t UECS7E = (1U << 13);  ///< bitfield UECS7E
        constexpr uint32_t UECS6E = (1U << 12);  ///< bitfield UECS6E
        constexpr uint32_t UECS5E = (1U << 11);  ///< bitfield UECS5E
        constexpr uint32_t UECS4E = (1U << 10);  ///< bitfield UECS4E
        constexpr uint32_t UECS3E = (1U << 9);  ///< bitfield UECS3E
        constexpr uint32_t UECS2E = (1U << 8);  ///< bitfield UECS2E
        constexpr uint32_t UECS1E = (1U << 7);  ///< bitfield UECS1E
        constexpr uint32_t UEFLSE = (1U << 6);  ///< bitfield UEFLSE
        constexpr uint32_t UEOEXE = (1U << 5);  ///< bitfield UEOEXE
        constexpr uint32_t UEDQME = (1U << 4);  ///< bitfield UEDQME
        constexpr uint32_t UEWEXE = (1U << 3);  ///< bitfield UEWEXE
        constexpr uint32_t UECLKE = (1U << 2);  ///< bitfield UECLKE
        constexpr uint32_t UEDTHB = (1U << 1);  ///< bitfield UEDTHB
        constexpr uint32_t UEDEFB = (1U << 0);  ///< bitfield UEDEFB
    }

    /// EPFR11 Register bits
    namespace epfr11_bits {
        constexpr uint32_t UERLC = (1U << 25);  ///< bitfield UERLC
        constexpr uint32_t UED15B = (1U << 24);  ///< bitfield UED15B
        constexpr uint32_t UED14B = (1U << 23);  ///< bitfield UED14B
        constexpr uint32_t UED13B = (1U << 22);  ///< bitfield UED13B
        constexpr uint32_t UED12B = (1U << 21);  ///< bitfield UED12B
        constexpr uint32_t UED11B = (1U << 20);  ///< bitfield UED11B
        constexpr uint32_t UED10B = (1U << 19);  ///< bitfield UED10B
        constexpr uint32_t UED09B = (1U << 18);  ///< bitfield UED09B
        constexpr uint32_t UED08B = (1U << 17);  ///< bitfield UED08B
        constexpr uint32_t UED07B = (1U << 16);  ///< bitfield UED07B
        constexpr uint32_t UED06B = (1U << 15);  ///< bitfield UED06B
        constexpr uint32_t UED05B = (1U << 14);  ///< bitfield UED05B
        constexpr uint32_t UED04B = (1U << 13);  ///< bitfield UED04B
        constexpr uint32_t UED03B = (1U << 12);  ///< bitfield UED03B
        constexpr uint32_t UED02B = (1U << 11);  ///< bitfield UED02B
        constexpr uint32_t UED01B = (1U << 10);  ///< bitfield UED01B
        constexpr uint32_t UED00B = (1U << 9);  ///< bitfield UED00B
        constexpr uint32_t UEA07E = (1U << 8);  ///< bitfield UEA07E
        constexpr uint32_t UEA06E = (1U << 7);  ///< bitfield UEA06E
        constexpr uint32_t UEA05E = (1U << 6);  ///< bitfield UEA05E
        constexpr uint32_t UEA04E = (1U << 5);  ///< bitfield UEA04E
        constexpr uint32_t UEA03E = (1U << 4);  ///< bitfield UEA03E
        constexpr uint32_t UEA02E = (1U << 3);  ///< bitfield UEA02E
        constexpr uint32_t UEA01E = (1U << 2);  ///< bitfield UEA01E
        constexpr uint32_t UECS0E = (1U << 1);  ///< bitfield UECS0E
        constexpr uint32_t UEALEE = (1U << 0);  ///< bitfield UEALEE
    }

    /// EPFR12 Register bits
    namespace epfr12_bits {
        constexpr uint32_t TIOB11S = (2 << 28);  ///< bitfield TIOB11S
        constexpr uint32_t TIOA11E = (2 << 26);  ///< bitfield TIOA11E
        constexpr uint32_t TIOA11S = (2 << 24);  ///< bitfield TIOA11S
        constexpr uint32_t TIOB10S = (2 << 20);  ///< bitfield TIOB10S
        constexpr uint32_t TIOA10E = (2 << 18);  ///< bitfield TIOA10E
        constexpr uint32_t TIOB9S = (2 << 12);  ///< bitfield TIOB9S
        constexpr uint32_t TIOA9E = (2 << 10);  ///< bitfield TIOA9E
        constexpr uint32_t TIOA9S = (2 << 8);  ///< bitfield TIOA9S
        constexpr uint32_t TIOB8S = (2 << 4);  ///< bitfield TIOB8S
        constexpr uint32_t TIOA8E = (2 << 2);  ///< bitfield TIOA8E
    }

    /// EPFR13 Register bits
    namespace epfr13_bits {
        constexpr uint32_t TIOB15S = (2 << 28);  ///< bitfield TIOB15S
        constexpr uint32_t TIOA15E = (2 << 26);  ///< bitfield TIOA15E
        constexpr uint32_t TIOA15S = (2 << 24);  ///< bitfield TIOA15S
        constexpr uint32_t TIOB14S = (2 << 20);  ///< bitfield TIOB14S
        constexpr uint32_t TIOA14E = (2 << 18);  ///< bitfield TIOA14E
        constexpr uint32_t TIOB13S = (2 << 12);  ///< bitfield TIOB13S
        constexpr uint32_t TIOA13E = (2 << 10);  ///< bitfield TIOA13E
        constexpr uint32_t TIOA13S = (2 << 8);  ///< bitfield TIOA13S
        constexpr uint32_t TIOB12S = (2 << 4);  ///< bitfield TIOB12S
        constexpr uint32_t TIOA12E = (2 << 2);  ///< bitfield TIOA12E
    }

    /// EPFR15 Register bits
    namespace epfr15_bits {
        constexpr uint32_t EINT31S = (2 << 30);  ///< bitfield EINT31S
        constexpr uint32_t EINT30S = (2 << 28);  ///< bitfield EINT30S
        constexpr uint32_t EINT29S = (2 << 26);  ///< bitfield EINT29S
        constexpr uint32_t EINT28S = (2 << 24);  ///< bitfield EINT28S
        constexpr uint32_t EINT27S = (2 << 22);  ///< bitfield EINT27S
        constexpr uint32_t EINT26S = (2 << 20);  ///< bitfield EINT26S
        constexpr uint32_t EINT25S = (2 << 18);  ///< bitfield EINT25S
        constexpr uint32_t EINT24S = (2 << 16);  ///< bitfield EINT24S
        constexpr uint32_t EINT23S = (2 << 14);  ///< bitfield EINT23S
        constexpr uint32_t EINT22S = (2 << 12);  ///< bitfield EINT22S
        constexpr uint32_t EINT21S = (2 << 10);  ///< bitfield EINT21S
        constexpr uint32_t EINT20S = (2 << 8);  ///< bitfield EINT20S
        constexpr uint32_t EINT19S = (2 << 6);  ///< bitfield EINT19S
        constexpr uint32_t EINT18S = (2 << 4);  ///< bitfield EINT18S
        constexpr uint32_t EINT17S = (2 << 2);  ///< bitfield EINT17S
        constexpr uint32_t EINT16S = (2 << 0);  ///< bitfield EINT16S
    }

    /// EPFR16 Register bits
    namespace epfr16_bits {
        constexpr uint32_t SCK11B = (2 << 26);  ///< bitfield SCK11B
        constexpr uint32_t SOT11B = (2 << 24);  ///< bitfield SOT11B
        constexpr uint32_t SIN11S = (2 << 22);  ///< bitfield SIN11S
        constexpr uint32_t SCK10B = (2 << 20);  ///< bitfield SCK10B
        constexpr uint32_t SOT10B = (2 << 18);  ///< bitfield SOT10B
        constexpr uint32_t SIN10S = (2 << 16);  ///< bitfield SIN10S
        constexpr uint32_t SCK9B = (2 << 14);  ///< bitfield SCK9B
        constexpr uint32_t SOT9B = (2 << 12);  ///< bitfield SOT9B
        constexpr uint32_t SIN9S = (2 << 10);  ///< bitfield SIN9S
        constexpr uint32_t SCK8B = (2 << 8);  ///< bitfield SCK8B
        constexpr uint32_t SOT8B = (2 << 6);  ///< bitfield SOT8B
        constexpr uint32_t SIN8S = (2 << 4);  ///< bitfield SIN8S
    }

    /// EPFR17 Register bits
    namespace epfr17_bits {
        constexpr uint32_t SCK15B = (2 << 26);  ///< bitfield SCK15B
        constexpr uint32_t SOT15B = (2 << 24);  ///< bitfield SOT15B
        constexpr uint32_t SIN15S = (2 << 22);  ///< bitfield SIN15S
        constexpr uint32_t SCK14B = (2 << 20);  ///< bitfield SCK14B
        constexpr uint32_t SOT14B = (2 << 18);  ///< bitfield SOT14B
        constexpr uint32_t SIN14S = (2 << 16);  ///< bitfield SIN14S
        constexpr uint32_t SCK13B = (2 << 14);  ///< bitfield SCK13B
        constexpr uint32_t SOT13B = (2 << 12);  ///< bitfield SOT13B
        constexpr uint32_t SIN13S = (2 << 10);  ///< bitfield SIN13S
        constexpr uint32_t SCK12B = (2 << 8);  ///< bitfield SCK12B
        constexpr uint32_t SOT12B = (2 << 6);  ///< bitfield SOT12B
        constexpr uint32_t SIN12S = (2 << 4);  ///< bitfield SIN12S
    }

    /// EPFR18 Register bits
    namespace epfr18_bits {
        constexpr uint32_t CECR1B = (2 << 2);  ///< bitfield CECR1B
        constexpr uint32_t CECR0B = (2 << 0);  ///< bitfield CECR0B
    }

}

// ============================================================================
// HDMICEC0 Peripheral
// ============================================================================

namespace hdmicec0 {
    /// Base addresses
    constexpr uint32_t HDMICEC0_BASE = 0x40034000;

    /// HDMICEC0 Register structure
    struct Registers {
        volatile uint32_t TXCTRL;  ///< Offset: 0x00 - register TXCTRL
        volatile uint32_t TXDATA;  ///< Offset: 0x04 - register TXDATA
        volatile uint32_t TXSTS;  ///< Offset: 0x08 - register TXSTS
        volatile uint32_t SFREE;  ///< Offset: 0x0C - register SFREE
        volatile uint32_t RCST;  ///< Offset: 0x40 - register RCST
        volatile uint32_t RCCR;  ///< Offset: 0x41 - register RCCR
        volatile uint32_t RCDAHW;  ///< Offset: 0x44 - register RCDAHW
        volatile uint32_t RCSHW;  ///< Offset: 0x45 - register RCSHW
        volatile uint32_t RCDBHW;  ///< Offset: 0x49 - register RCDBHW
        volatile uint32_t RCADR2;  ///< Offset: 0x4C - register RCADR2
        volatile uint32_t RCADR1;  ///< Offset: 0x4D - register RCADR1
        volatile uint32_t RCDTHL;  ///< Offset: 0x50 - register RCDTHL
        volatile uint32_t RCDTHH;  ///< Offset: 0x51 - register RCDTHH
        volatile uint32_t RCDTLL;  ///< Offset: 0x54 - register RCDTLL
        volatile uint32_t RCDTLH;  ///< Offset: 0x55 - register RCDTLH
        volatile uint32_t RCCKD;  ///< Offset: 0x58 - register RCCKD
        volatile uint32_t RCRHW;  ///< Offset: 0x5C - register RCRHW
        volatile uint32_t RCRC;  ///< Offset: 0x5D - register RCRC
        volatile uint32_t RCLE;  ///< Offset: 0x61 - register RCLE
        volatile uint32_t RCLESW;  ///< Offset: 0x64 - register RCLESW
        volatile uint32_t RCLELW;  ///< Offset: 0x65 - register RCLELW
    };

    /// Peripheral instances
    inline Registers* HDMICEC0 = reinterpret_cast<Registers*>(HDMICEC0_BASE);

    // Bit definitions
    /// TXCTRL Register bits
    namespace txctrl_bits {
        constexpr uint32_t IBREN = (1U << 5);  ///< bitfield IBREN
        constexpr uint32_t ITSTEN = (1U << 4);  ///< bitfield ITSTEN
        constexpr uint32_t EOM = (1U << 3);  ///< bitfield EOM
        constexpr uint32_t START = (1U << 2);  ///< bitfield START
        constexpr uint32_t TXEN = (1U << 0);  ///< bitfield TXEN
    }

    /// TXDATA Register bits
    namespace txdata_bits {
        constexpr uint32_t TXDATA = (8 << 0);  ///< bitfield TXDATA
    }

    /// TXSTS Register bits
    namespace txsts_bits {
        constexpr uint32_t IBR = (1U << 5);  ///< bitfield IBR
        constexpr uint32_t ITST = (1U << 4);  ///< bitfield ITST
        constexpr uint32_t ACKSV = (1U << 0);  ///< bitfield ACKSV
    }

    /// SFREE Register bits
    namespace sfree_bits {
        constexpr uint32_t SFREE = (4 << 0);  ///< bitfield SFREE
    }

    /// RCST Register bits
    namespace rcst_bits {
        constexpr uint32_t STIE = (1U << 7);  ///< bitfield STIE
        constexpr uint32_t ACKIE = (1U << 6);  ///< bitfield ACKIE
        constexpr uint32_t OVFIE = (1U << 5);  ///< bitfield OVFIE
        constexpr uint32_t OVFSEL = (1U << 4);  ///< bitfield OVFSEL
        constexpr uint32_t ST = (1U << 3);  ///< bitfield ST
        constexpr uint32_t ACK = (1U << 2);  ///< bitfield ACK
        constexpr uint32_t EOM = (1U << 1);  ///< bitfield EOM
        constexpr uint32_t OVF = (1U << 0);  ///< bitfield OVF
    }

    /// RCCR Register bits
    namespace rccr_bits {
        constexpr uint32_t THSEL = (1U << 7);  ///< bitfield THSEL
        constexpr uint32_t ADRCE = (1U << 3);  ///< bitfield ADRCE
        constexpr uint32_t MOD1 = (1U << 2);  ///< bitfield MOD1
        constexpr uint32_t MOD0 = (1U << 1);  ///< bitfield MOD0
        constexpr uint32_t EN = (1U << 0);  ///< bitfield EN
    }

    /// RCDAHW Register bits
    namespace rcdahw_bits {
        constexpr uint32_t RCDAHW = (8 << 0);  ///< bitfield RCDAHW
    }

    /// RCSHW Register bits
    namespace rcshw_bits {
        constexpr uint32_t RCSHW = (8 << 0);  ///< bitfield RCSHW
    }

    /// RCDBHW Register bits
    namespace rcdbhw_bits {
        constexpr uint32_t RCDBHW = (8 << 0);  ///< bitfield RCDBHW
    }

    /// RCADR2 Register bits
    namespace rcadr2_bits {
        constexpr uint32_t RCADR2 = (5 << 0);  ///< bitfield RCADR2
    }

    /// RCADR1 Register bits
    namespace rcadr1_bits {
        constexpr uint32_t RCADR1 = (5 << 0);  ///< bitfield RCADR1
    }

    /// RCDTHL Register bits
    namespace rcdthl_bits {
        constexpr uint32_t RCDTHL = (8 << 0);  ///< bitfield RCDTHL
    }

    /// RCDTHH Register bits
    namespace rcdthh_bits {
        constexpr uint32_t RCDTHH = (8 << 0);  ///< bitfield RCDTHH
    }

    /// RCDTLL Register bits
    namespace rcdtll_bits {
        constexpr uint32_t RCDTLL = (8 << 0);  ///< bitfield RCDTLL
    }

    /// RCDTLH Register bits
    namespace rcdtlh_bits {
        constexpr uint32_t RCDTLH = (8 << 0);  ///< bitfield RCDTLH
    }

    /// RCCKD Register bits
    namespace rcckd_bits {
        constexpr uint32_t CKSEL = (1U << 12);  ///< bitfield CKSEL
        constexpr uint32_t CKDIV = (12 << 0);  ///< bitfield CKDIV
    }

    /// RCRHW Register bits
    namespace rcrhw_bits {
        constexpr uint32_t RCRHW = (8 << 0);  ///< bitfield RCRHW
    }

    /// RCRC Register bits
    namespace rcrc_bits {
        constexpr uint32_t RCIE = (1U << 4);  ///< bitfield RCIE
        constexpr uint32_t RC = (1U << 0);  ///< bitfield RC
    }

    /// RCLE Register bits
    namespace rcle_bits {
        constexpr uint32_t LELIE = (1U << 7);  ///< bitfield LELIE
        constexpr uint32_t LESIE = (1U << 6);  ///< bitfield LESIE
        constexpr uint32_t LELE = (1U << 5);  ///< bitfield LELE
        constexpr uint32_t LESE = (1U << 4);  ///< bitfield LESE
        constexpr uint32_t EPE = (1U << 3);  ///< bitfield EPE
        constexpr uint32_t LEL = (1U << 1);  ///< bitfield LEL
        constexpr uint32_t LES = (1U << 0);  ///< bitfield LES
    }

    /// RCLESW Register bits
    namespace rclesw_bits {
        constexpr uint32_t RCLESW = (8 << 0);  ///< bitfield RCLESW
    }

    /// RCLELW Register bits
    namespace rclelw_bits {
        constexpr uint32_t RCLELW = (8 << 0);  ///< bitfield RCLELW
    }

}

// ============================================================================
// HDMICEC1 Peripheral
// ============================================================================

namespace hdmicec1 {
    /// Base addresses
    constexpr uint32_t HDMICEC1_BASE = 0x40034100;

    /// HDMICEC1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* HDMICEC1 = reinterpret_cast<Registers*>(HDMICEC1_BASE);

}

// ============================================================================
// LVD Peripheral
// ============================================================================

namespace lvd {
    /// Base addresses
    constexpr uint32_t LVD_BASE = 0x40035000;

    /// LVD Register structure
    struct Registers {
        volatile uint32_t LVD_CTL;  ///< Offset: 0x00 - register LVD_CTL
        volatile uint32_t LVD_STR;  ///< Offset: 0x04 - register LVD_STR
        volatile uint32_t LVD_CLR;  ///< Offset: 0x08 - register LVD_CLR
        volatile uint32_t LVD_RLR;  ///< Offset: 0x0C - register LVD_RLR
        volatile uint32_t LVD_STR2;  ///< Offset: 0x10 - register LVD_STR2
    };

    /// Peripheral instances
    inline Registers* LVD = reinterpret_cast<Registers*>(LVD_BASE);

    // Bit definitions
    /// LVD_CTL Register bits
    namespace lvd_ctl_bits {
        constexpr uint32_t LVDRE = (1U << 15);  ///< bitfield LVDRE
        constexpr uint32_t SVHR = (5 << 10);  ///< bitfield SVHR
        constexpr uint32_t LVDIE = (1U << 7);  ///< bitfield LVDIE
        constexpr uint32_t SVHI = (5 << 2);  ///< bitfield SVHI
    }

    /// LVD_STR Register bits
    namespace lvd_str_bits {
        constexpr uint32_t LVDIR = (1U << 7);  ///< bitfield LVDIR
    }

    /// LVD_CLR Register bits
    namespace lvd_clr_bits {
        constexpr uint32_t LVDCL = (1U << 7);  ///< bitfield LVDCL
    }

    /// LVD_RLR Register bits
    namespace lvd_rlr_bits {
        constexpr uint32_t LVDLCK = (32 << 0);  ///< bitfield LVDLCK
    }

    /// LVD_STR2 Register bits
    namespace lvd_str2_bits {
        constexpr uint32_t LVDIRDY = (1U << 7);  ///< bitfield LVDIRDY
        constexpr uint32_t LVDRRDY = (1U << 6);  ///< bitfield LVDRRDY
    }

}

// ============================================================================
// DS Peripheral
// ============================================================================

namespace ds {
    /// Base addresses
    constexpr uint32_t DS_BASE = 0x40035100;

    /// DS Register structure
    struct Registers {
        volatile uint32_t REG_CTL;  ///< Offset: 0x00 - register REG_CTL
        volatile uint32_t RCK_CTL;  ///< Offset: 0x04 - register RCK_CTL
        volatile uint32_t PMD_CTL;  ///< Offset: 0x700 - register PMD_CTL
        volatile uint32_t WRFSR;  ///< Offset: 0x704 - register WRFSR
        volatile uint32_t WIFSR;  ///< Offset: 0x708 - register WIFSR
        volatile uint32_t WIER;  ///< Offset: 0x70C - register WIER
        volatile uint32_t WILVR;  ///< Offset: 0x710 - register WILVR
        volatile uint32_t DSRAMR;  ///< Offset: 0x714 - register DSRAMR
        volatile uint32_t BUR01;  ///< Offset: 0x800 - register BUR01
        volatile uint32_t BUR02;  ///< Offset: 0x801 - register BUR02
        volatile uint32_t BUR03;  ///< Offset: 0x802 - register BUR03
        volatile uint32_t BUR04;  ///< Offset: 0x803 - register BUR04
        volatile uint32_t BUR05;  ///< Offset: 0x804 - register BUR05
        volatile uint32_t BUR06;  ///< Offset: 0x805 - register BUR06
        volatile uint32_t BUR07;  ///< Offset: 0x806 - register BUR07
        volatile uint32_t BUR08;  ///< Offset: 0x807 - register BUR08
        volatile uint32_t BUR09;  ///< Offset: 0x808 - register BUR09
        volatile uint32_t BUR10;  ///< Offset: 0x809 - register BUR10
        volatile uint32_t BUR11;  ///< Offset: 0x80A - register BUR11
        volatile uint32_t BUR12;  ///< Offset: 0x80B - register BUR12
        volatile uint32_t BUR13;  ///< Offset: 0x80C - register BUR13
        volatile uint32_t BUR14;  ///< Offset: 0x80D - register BUR14
        volatile uint32_t BUR15;  ///< Offset: 0x80E - register BUR15
        volatile uint32_t BUR16;  ///< Offset: 0x80F - register BUR16
    };

    /// Peripheral instances
    inline Registers* DS = reinterpret_cast<Registers*>(DS_BASE);

    // Bit definitions
    /// REG_CTL Register bits
    namespace reg_ctl_bits {
        constexpr uint32_t ISUBSEL = (2 << 1);  ///< bitfield ISUBSEL
    }

    /// RCK_CTL Register bits
    namespace rck_ctl_bits {
        constexpr uint32_t CECCKE = (1U << 1);  ///< bitfield CECCKE
        constexpr uint32_t RTCCKE = (1U << 0);  ///< bitfield RTCCKE
    }

    /// PMD_CTL Register bits
    namespace pmd_ctl_bits {
        constexpr uint32_t RTCE = (1U << 0);  ///< bitfield RTCE
    }

    /// WRFSR Register bits
    namespace wrfsr_bits {
        constexpr uint32_t WLVDH = (1U << 1);  ///< bitfield WLVDH
        constexpr uint32_t WINITX = (1U << 0);  ///< bitfield WINITX
    }

    /// WIFSR Register bits
    namespace wifsr_bits {
        constexpr uint32_t WCEC1I = (1U << 9);  ///< bitfield WCEC1I
        constexpr uint32_t WCEC0I = (1U << 8);  ///< bitfield WCEC0I
        constexpr uint32_t WUI5 = (1U << 7);  ///< bitfield WUI5
        constexpr uint32_t WUI4 = (1U << 6);  ///< bitfield WUI4
        constexpr uint32_t WUI3 = (1U << 5);  ///< bitfield WUI3
        constexpr uint32_t WUI2 = (1U << 4);  ///< bitfield WUI2
        constexpr uint32_t WUI1 = (1U << 3);  ///< bitfield WUI1
        constexpr uint32_t WUI0 = (1U << 2);  ///< bitfield WUI0
        constexpr uint32_t WLVDI = (1U << 1);  ///< bitfield WLVDI
        constexpr uint32_t WRTCI = (1U << 0);  ///< bitfield WRTCI
    }

    /// WIER Register bits
    namespace wier_bits {
        constexpr uint32_t WCEC1E = (1U << 9);  ///< bitfield WCEC1E
        constexpr uint32_t WCEC0E = (1U << 8);  ///< bitfield WCEC0E
        constexpr uint32_t WUI5E = (1U << 7);  ///< bitfield WUI5E
        constexpr uint32_t WUI4E = (1U << 6);  ///< bitfield WUI4E
        constexpr uint32_t WUI3E = (1U << 5);  ///< bitfield WUI3E
        constexpr uint32_t WUI2E = (1U << 4);  ///< bitfield WUI2E
        constexpr uint32_t WUI1E = (1U << 3);  ///< bitfield WUI1E
        constexpr uint32_t WLVDE = (1U << 1);  ///< bitfield WLVDE
        constexpr uint32_t WRTCE = (1U << 0);  ///< bitfield WRTCE
    }

    /// WILVR Register bits
    namespace wilvr_bits {
        constexpr uint32_t WUI5LV = (1U << 4);  ///< bitfield WUI5LV
        constexpr uint32_t WUI4LV = (1U << 3);  ///< bitfield WUI4LV
        constexpr uint32_t WUI3LV = (1U << 2);  ///< bitfield WUI3LV
        constexpr uint32_t WUI2LV = (1U << 1);  ///< bitfield WUI2LV
        constexpr uint32_t WUI1LV = (1U << 0);  ///< bitfield WUI1LV
    }

    /// DSRAMR Register bits
    namespace dsramr_bits {
        constexpr uint32_t SRAMR = (2 << 0);  ///< bitfield SRAMR
    }

}

// ============================================================================
// MFS0 Peripheral
// ============================================================================

namespace mfs0 {
    /// Base addresses
    constexpr uint32_t MFS0_BASE = 0x40038000;

    /// MFS0 Register structure
    struct Registers {
        volatile uint32_t UART_SCR;  ///< Offset: 0x01 - register UART_SCR
        volatile uint32_t UART_SMR;  ///< Offset: 0x00 - register UART_SMR
        volatile uint32_t UART_SSR;  ///< Offset: 0x05 - register UART_SSR
        volatile uint32_t UART_ESCR;  ///< Offset: 0x04 - register UART_ESCR
        volatile uint32_t UART_RDR;  ///< Offset: 0x08 - register UART_RDR
        volatile uint32_t UART_TDR;  ///< Offset: 0x08 - register UART_TDR
        volatile uint32_t UART_BGR;  ///< Offset: 0x0C - register UART_BGR
        volatile uint32_t UART_FCR1;  ///< Offset: 0x15 - register UART_FCR1
        volatile uint32_t UART_FCR0;  ///< Offset: 0x14 - register UART_FCR0
        volatile uint32_t UART_FBYTE1;  ///< Offset: 0x18 - register UART_FBYTE1
        volatile uint32_t UART_FBYTE2;  ///< Offset: 0x19 - register UART_FBYTE2
        volatile uint32_t CSIO_SCR;  ///< Offset: 0x01 - register CSIO_SCR
        volatile uint32_t CSIO_SMR;  ///< Offset: 0x00 - register CSIO_SMR
        volatile uint32_t CSIO_SSR;  ///< Offset: 0x05 - register CSIO_SSR
        volatile uint32_t CSIO_ESCR;  ///< Offset: 0x04 - register CSIO_ESCR
        volatile uint32_t CSIO_RDR;  ///< Offset: 0x08 - register CSIO_RDR
        volatile uint32_t CSIO_TDR;  ///< Offset: 0x08 - register CSIO_TDR
        volatile uint32_t CSIO_BGR;  ///< Offset: 0x0C - register CSIO_BGR
        volatile uint32_t CSIO_FCR1;  ///< Offset: 0x15 - register CSIO_FCR1
        volatile uint32_t CSIO_FCR0;  ///< Offset: 0x14 - register CSIO_FCR0
        volatile uint32_t CSIO_FBYTE1;  ///< Offset: 0x18 - register CSIO_FBYTE1
        volatile uint32_t CSIO_FBYTE2;  ///< Offset: 0x19 - register CSIO_FBYTE2
        volatile uint32_t LIN_SCR;  ///< Offset: 0x01 - register LIN_SCR
        volatile uint32_t LIN_SMR;  ///< Offset: 0x00 - register LIN_SMR
        volatile uint32_t LIN_SSR;  ///< Offset: 0x05 - register LIN_SSR
        volatile uint32_t LIN_ESCR;  ///< Offset: 0x04 - register LIN_ESCR
        volatile uint32_t LIN_RDR;  ///< Offset: 0x08 - register LIN_RDR
        volatile uint32_t LIN_TDR;  ///< Offset: 0x08 - register LIN_TDR
        volatile uint32_t LIN_BGR;  ///< Offset: 0x0C - register LIN_BGR
        volatile uint32_t LIN_FCR1;  ///< Offset: 0x15 - register LIN_FCR1
        volatile uint32_t LIN_FCR0;  ///< Offset: 0x14 - register LIN_FCR0
        volatile uint32_t LIN_FBYTE1;  ///< Offset: 0x18 - register LIN_FBYTE1
        volatile uint32_t LIN_FBYTE2;  ///< Offset: 0x19 - register LIN_FBYTE2
        volatile uint32_t I2C_IBCR;  ///< Offset: 0x01 - register I2C_IBCR
        volatile uint32_t I2C_SMR;  ///< Offset: 0x00 - register I2C_SMR
        volatile uint32_t I2C_IBSR;  ///< Offset: 0x04 - register I2C_IBSR
        volatile uint32_t I2C_SSR;  ///< Offset: 0x05 - register I2C_SSR
        volatile uint32_t I2C_RDR;  ///< Offset: 0x08 - register I2C_RDR
        volatile uint32_t I2C_TDR;  ///< Offset: 0x08 - register I2C_TDR
        volatile uint32_t I2C_BGR;  ///< Offset: 0x0C - register I2C_BGR
        volatile uint32_t I2C_ISMK;  ///< Offset: 0x11 - register I2C_ISMK
        volatile uint32_t I2C_ISBA;  ///< Offset: 0x10 - register I2C_ISBA
        volatile uint32_t I2C_FCR1;  ///< Offset: 0x15 - register I2C_FCR1
        volatile uint32_t I2C_FCR0;  ///< Offset: 0x14 - register I2C_FCR0
        volatile uint32_t I2C_FBYTE1;  ///< Offset: 0x18 - register I2C_FBYTE1
        volatile uint32_t I2C_FBYTE2;  ///< Offset: 0x19 - register I2C_FBYTE2
        volatile uint32_t I2C_EIBCR;  ///< Offset: 0x1D - register I2C_EIBCR
    };

    /// Peripheral instances
    inline Registers* MFS0 = reinterpret_cast<Registers*>(MFS0_BASE);

    // Bit definitions
    /// UART_SCR Register bits
    namespace uart_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< bitfield UPCL
        constexpr uint32_t RIE = (1U << 4);  ///< bitfield RIE
        constexpr uint32_t TIE = (1U << 3);  ///< bitfield TIE
        constexpr uint32_t TBIE = (1U << 2);  ///< bitfield TBIE
        constexpr uint32_t RXE = (1U << 1);  ///< bitfield RXE
        constexpr uint32_t TXE = (1U << 0);  ///< bitfield TXE
    }

    /// UART_SMR Register bits
    namespace uart_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< bitfield MD
        constexpr uint32_t WUCR = (1U << 4);  ///< bitfield WUCR
        constexpr uint32_t SBL = (1U << 3);  ///< bitfield SBL
        constexpr uint32_t BDS = (1U << 2);  ///< bitfield BDS
        constexpr uint32_t SOE = (1U << 0);  ///< bitfield SOE
    }

    /// UART_SSR Register bits
    namespace uart_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< bitfield REC
        constexpr uint32_t PE = (1U << 5);  ///< bitfield PE
        constexpr uint32_t FRE = (1U << 4);  ///< bitfield FRE
        constexpr uint32_t ORE = (1U << 3);  ///< bitfield ORE
        constexpr uint32_t RDRF = (1U << 2);  ///< bitfield RDRF
        constexpr uint32_t TDRE = (1U << 1);  ///< bitfield TDRE
        constexpr uint32_t TBI = (1U << 0);  ///< bitfield TBI
    }

    /// UART_ESCR Register bits
    namespace uart_escr_bits {
        constexpr uint32_t FLWEN = (1U << 7);  ///< bitfield FLWEN
        constexpr uint32_t ESBL = (1U << 6);  ///< bitfield ESBL
        constexpr uint32_t INV = (1U << 5);  ///< bitfield INV
        constexpr uint32_t PEN = (1U << 4);  ///< bitfield PEN
        constexpr uint32_t P = (1U << 3);  ///< bitfield P
        constexpr uint32_t L = (3 << 0);  ///< bitfield L
    }

    /// UART_BGR Register bits
    namespace uart_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< bitfield EXT
        constexpr uint32_t BGR1 = (7 << 8);  ///< bitfield BGR1
        constexpr uint32_t BGR0 = (8 << 0);  ///< bitfield BGR0
    }

    /// UART_FCR1 Register bits
    namespace uart_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< bitfield FLSTE
        constexpr uint32_t FRIIE = (1U << 3);  ///< bitfield FRIIE
        constexpr uint32_t FDRQ = (1U << 2);  ///< bitfield FDRQ
        constexpr uint32_t FTIE = (1U << 1);  ///< bitfield FTIE
        constexpr uint32_t FSEL = (1U << 0);  ///< bitfield FSEL
    }

    /// UART_FCR0 Register bits
    namespace uart_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< bitfield FLST
        constexpr uint32_t FLD = (1U << 5);  ///< bitfield FLD
        constexpr uint32_t FSET = (1U << 4);  ///< bitfield FSET
        constexpr uint32_t FCL2 = (1U << 3);  ///< bitfield FCL2
        constexpr uint32_t FCL1 = (1U << 2);  ///< bitfield FCL1
        constexpr uint32_t FE2 = (1U << 1);  ///< bitfield FE2
        constexpr uint32_t FE1 = (1U << 0);  ///< bitfield FE1
    }

    /// CSIO_SCR Register bits
    namespace csio_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< bitfield UPCL
        constexpr uint32_t MS = (1U << 6);  ///< bitfield MS
        constexpr uint32_t SPI = (1U << 5);  ///< bitfield SPI
        constexpr uint32_t RIE = (1U << 4);  ///< bitfield RIE
        constexpr uint32_t TIE = (1U << 3);  ///< bitfield TIE
        constexpr uint32_t TBIE = (1U << 2);  ///< bitfield TBIE
        constexpr uint32_t RXE = (1U << 1);  ///< bitfield RXE
        constexpr uint32_t TXE = (1U << 0);  ///< bitfield TXE
    }

    /// CSIO_SMR Register bits
    namespace csio_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< bitfield MD
        constexpr uint32_t WUCR = (1U << 4);  ///< bitfield WUCR
        constexpr uint32_t SCINV = (1U << 3);  ///< bitfield SCINV
        constexpr uint32_t BDS = (1U << 2);  ///< bitfield BDS
        constexpr uint32_t SCKE = (1U << 1);  ///< bitfield SCKE
        constexpr uint32_t SOE = (1U << 0);  ///< bitfield SOE
    }

    /// CSIO_SSR Register bits
    namespace csio_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< bitfield REC
        constexpr uint32_t ORE = (1U << 3);  ///< bitfield ORE
        constexpr uint32_t RDRF = (1U << 2);  ///< bitfield RDRF
        constexpr uint32_t TDRE = (1U << 1);  ///< bitfield TDRE
        constexpr uint32_t TBI = (1U << 0);  ///< bitfield TBI
    }

    /// CSIO_ESCR Register bits
    namespace csio_escr_bits {
        constexpr uint32_t SOP = (1U << 7);  ///< bitfield SOP
        constexpr uint32_t WT = (2 << 3);  ///< bitfield WT
        constexpr uint32_t L = (3 << 0);  ///< bitfield L
    }

    /// CSIO_BGR Register bits
    namespace csio_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< bitfield BGR1
        constexpr uint32_t BGR0 = (8 << 0);  ///< bitfield BGR0
    }

    /// CSIO_FCR1 Register bits
    namespace csio_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< bitfield FLSTE
        constexpr uint32_t FRIIE = (1U << 3);  ///< bitfield FRIIE
        constexpr uint32_t FDRQ = (1U << 2);  ///< bitfield FDRQ
        constexpr uint32_t FTIE = (1U << 1);  ///< bitfield FTIE
        constexpr uint32_t FSEL = (1U << 0);  ///< bitfield FSEL
    }

    /// CSIO_FCR0 Register bits
    namespace csio_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< bitfield FLST
        constexpr uint32_t FLD = (1U << 5);  ///< bitfield FLD
        constexpr uint32_t FSET = (1U << 4);  ///< bitfield FSET
        constexpr uint32_t FCL2 = (1U << 3);  ///< bitfield FCL2
        constexpr uint32_t FCL1 = (1U << 2);  ///< bitfield FCL1
        constexpr uint32_t FE2 = (1U << 1);  ///< bitfield FE2
        constexpr uint32_t FE1 = (1U << 0);  ///< bitfield FE1
    }

    /// LIN_SCR Register bits
    namespace lin_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< bitfield UPCL
        constexpr uint32_t MS = (1U << 6);  ///< bitfield MS
        constexpr uint32_t LBR = (1U << 5);  ///< bitfield LBR
        constexpr uint32_t RIE = (1U << 4);  ///< bitfield RIE
        constexpr uint32_t TIE = (1U << 3);  ///< bitfield TIE
        constexpr uint32_t TBIE = (1U << 2);  ///< bitfield TBIE
        constexpr uint32_t RXE = (1U << 1);  ///< bitfield RXE
        constexpr uint32_t TXE = (1U << 0);  ///< bitfield TXE
    }

    /// LIN_SMR Register bits
    namespace lin_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< bitfield MD
        constexpr uint32_t WUCR = (1U << 4);  ///< bitfield WUCR
        constexpr uint32_t SBL = (1U << 3);  ///< bitfield SBL
        constexpr uint32_t SOE = (1U << 0);  ///< bitfield SOE
    }

    /// LIN_SSR Register bits
    namespace lin_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< bitfield REC
        constexpr uint32_t LBD = (1U << 5);  ///< bitfield LBD
        constexpr uint32_t FRE = (1U << 4);  ///< bitfield FRE
        constexpr uint32_t ORE = (1U << 3);  ///< bitfield ORE
        constexpr uint32_t RDRF = (1U << 2);  ///< bitfield RDRF
        constexpr uint32_t TDRE = (1U << 1);  ///< bitfield TDRE
        constexpr uint32_t TBI = (1U << 0);  ///< bitfield TBI
    }

    /// LIN_ESCR Register bits
    namespace lin_escr_bits {
        constexpr uint32_t ESBL = (1U << 6);  ///< bitfield ESBL
        constexpr uint32_t LBIE = (1U << 4);  ///< bitfield LBIE
        constexpr uint32_t LBL = (2 << 2);  ///< bitfield LBL
        constexpr uint32_t DEL = (2 << 0);  ///< bitfield DEL
    }

    /// LIN_BGR Register bits
    namespace lin_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< bitfield EXT
        constexpr uint32_t BGR1 = (7 << 8);  ///< bitfield BGR1
        constexpr uint32_t BGR0 = (8 << 0);  ///< bitfield BGR0
    }

    /// LIN_FCR1 Register bits
    namespace lin_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< bitfield FLSTE
        constexpr uint32_t FRIIE = (1U << 3);  ///< bitfield FRIIE
        constexpr uint32_t FDRQ = (1U << 2);  ///< bitfield FDRQ
        constexpr uint32_t FTIE = (1U << 1);  ///< bitfield FTIE
        constexpr uint32_t FSEL = (1U << 0);  ///< bitfield FSEL
    }

    /// LIN_FCR0 Register bits
    namespace lin_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< bitfield FLST
        constexpr uint32_t FLD = (1U << 5);  ///< bitfield FLD
        constexpr uint32_t FSET = (1U << 4);  ///< bitfield FSET
        constexpr uint32_t FCL2 = (1U << 3);  ///< bitfield FCL2
        constexpr uint32_t FCL1 = (1U << 2);  ///< bitfield FCL1
        constexpr uint32_t FE2 = (1U << 1);  ///< bitfield FE2
        constexpr uint32_t FE1 = (1U << 0);  ///< bitfield FE1
    }

    /// I2C_IBCR Register bits
    namespace i2c_ibcr_bits {
        constexpr uint32_t MSS = (1U << 7);  ///< bitfield MSS
        constexpr uint32_t ACT_SCC = (1U << 6);  ///< bitfield ACT_SCC
        constexpr uint32_t ACKE = (1U << 5);  ///< bitfield ACKE
        constexpr uint32_t WSEL = (1U << 4);  ///< bitfield WSEL
        constexpr uint32_t CNDE = (1U << 3);  ///< bitfield CNDE
        constexpr uint32_t INTE = (1U << 2);  ///< bitfield INTE
        constexpr uint32_t BER = (1U << 1);  ///< bitfield BER
        constexpr uint32_t INT = (1U << 0);  ///< bitfield INT
    }

    /// I2C_SMR Register bits
    namespace i2c_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< bitfield MD
        constexpr uint32_t WUCR = (1U << 4);  ///< bitfield WUCR
        constexpr uint32_t RIE = (1U << 3);  ///< bitfield RIE
        constexpr uint32_t TIE = (1U << 2);  ///< bitfield TIE
    }

    /// I2C_IBSR Register bits
    namespace i2c_ibsr_bits {
        constexpr uint32_t FBT = (1U << 7);  ///< bitfield FBT
        constexpr uint32_t RACK = (1U << 6);  ///< bitfield RACK
        constexpr uint32_t RSA = (1U << 5);  ///< bitfield RSA
        constexpr uint32_t TRX = (1U << 4);  ///< bitfield TRX
        constexpr uint32_t AL = (1U << 3);  ///< bitfield AL
        constexpr uint32_t RSC = (1U << 2);  ///< bitfield RSC
        constexpr uint32_t SPC = (1U << 1);  ///< bitfield SPC
        constexpr uint32_t BB = (1U << 0);  ///< bitfield BB
    }

    /// I2C_SSR Register bits
    namespace i2c_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< bitfield REC
        constexpr uint32_t TSET = (1U << 6);  ///< bitfield TSET
        constexpr uint32_t DMA = (1U << 5);  ///< bitfield DMA
        constexpr uint32_t TBIE = (1U << 4);  ///< bitfield TBIE
        constexpr uint32_t ORE = (1U << 3);  ///< bitfield ORE
        constexpr uint32_t RDRF = (1U << 2);  ///< bitfield RDRF
        constexpr uint32_t TDRE = (1U << 1);  ///< bitfield TDRE
        constexpr uint32_t TBI = (1U << 0);  ///< bitfield TBI
    }

    /// I2C_BGR Register bits
    namespace i2c_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< bitfield BGR1
        constexpr uint32_t BGR0 = (8 << 0);  ///< bitfield BGR0
    }

    /// I2C_ISMK Register bits
    namespace i2c_ismk_bits {
        constexpr uint32_t EN = (1U << 7);  ///< bitfield EN
        constexpr uint32_t SM = (7 << 0);  ///< bitfield SM
    }

    /// I2C_ISBA Register bits
    namespace i2c_isba_bits {
        constexpr uint32_t SAEN = (1U << 7);  ///< bitfield SAEN
        constexpr uint32_t SA = (7 << 0);  ///< bitfield SA
    }

    /// I2C_FCR1 Register bits
    namespace i2c_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< bitfield FLSTE
        constexpr uint32_t FRIIE = (1U << 3);  ///< bitfield FRIIE
        constexpr uint32_t FDRQ = (1U << 2);  ///< bitfield FDRQ
        constexpr uint32_t FTIE = (1U << 1);  ///< bitfield FTIE
        constexpr uint32_t FSEL = (1U << 0);  ///< bitfield FSEL
    }

    /// I2C_FCR0 Register bits
    namespace i2c_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< bitfield FLST
        constexpr uint32_t FLD = (1U << 5);  ///< bitfield FLD
        constexpr uint32_t FSET = (1U << 4);  ///< bitfield FSET
        constexpr uint32_t FCL2 = (1U << 3);  ///< bitfield FCL2
        constexpr uint32_t FCL1 = (1U << 2);  ///< bitfield FCL1
        constexpr uint32_t FE2 = (1U << 1);  ///< bitfield FE2
        constexpr uint32_t FE1 = (1U << 0);  ///< bitfield FE1
    }

    /// I2C_EIBCR Register bits
    namespace i2c_eibcr_bits {
        constexpr uint32_t SDAS = (1U << 5);  ///< bitfield SDAS
        constexpr uint32_t SCLS = (1U << 4);  ///< bitfield SCLS
        constexpr uint32_t SDAC = (1U << 3);  ///< bitfield SDAC
        constexpr uint32_t SCLC = (1U << 2);  ///< bitfield SCLC
        constexpr uint32_t SOCE = (1U << 1);  ///< bitfield SOCE
        constexpr uint32_t BEC = (1U << 0);  ///< bitfield BEC
    }

}

// ============================================================================
// MFS1 Peripheral
// ============================================================================

namespace mfs1 {
    /// Base addresses
    constexpr uint32_t MFS1_BASE = 0x40038100;

    /// MFS1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS1 = reinterpret_cast<Registers*>(MFS1_BASE);

}

// ============================================================================
// MFS2 Peripheral
// ============================================================================

namespace mfs2 {
    /// Base addresses
    constexpr uint32_t MFS2_BASE = 0x40038200;

    /// MFS2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS2 = reinterpret_cast<Registers*>(MFS2_BASE);

}

// ============================================================================
// MFS3 Peripheral
// ============================================================================

namespace mfs3 {
    /// Base addresses
    constexpr uint32_t MFS3_BASE = 0x40038300;

    /// MFS3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS3 = reinterpret_cast<Registers*>(MFS3_BASE);

}

// ============================================================================
// MFS4 Peripheral
// ============================================================================

namespace mfs4 {
    /// Base addresses
    constexpr uint32_t MFS4_BASE = 0x40038400;

    /// MFS4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS4 = reinterpret_cast<Registers*>(MFS4_BASE);

}

// ============================================================================
// MFS5 Peripheral
// ============================================================================

namespace mfs5 {
    /// Base addresses
    constexpr uint32_t MFS5_BASE = 0x40038500;

    /// MFS5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS5 = reinterpret_cast<Registers*>(MFS5_BASE);

}

// ============================================================================
// MFS6 Peripheral
// ============================================================================

namespace mfs6 {
    /// Base addresses
    constexpr uint32_t MFS6_BASE = 0x40038600;

    /// MFS6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS6 = reinterpret_cast<Registers*>(MFS6_BASE);

}

// ============================================================================
// MFS7 Peripheral
// ============================================================================

namespace mfs7 {
    /// Base addresses
    constexpr uint32_t MFS7_BASE = 0x40038700;

    /// MFS7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS7 = reinterpret_cast<Registers*>(MFS7_BASE);

}

// ============================================================================
// MFS8 Peripheral
// ============================================================================

namespace mfs8 {
    /// Base addresses
    constexpr uint32_t MFS8_BASE = 0x40038800;

    /// MFS8 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS8 = reinterpret_cast<Registers*>(MFS8_BASE);

}

// ============================================================================
// MFS9 Peripheral
// ============================================================================

namespace mfs9 {
    /// Base addresses
    constexpr uint32_t MFS9_BASE = 0x40038900;

    /// MFS9 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS9 = reinterpret_cast<Registers*>(MFS9_BASE);

}

// ============================================================================
// MFS10 Peripheral
// ============================================================================

namespace mfs10 {
    /// Base addresses
    constexpr uint32_t MFS10_BASE = 0x40038A00;

    /// MFS10 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS10 = reinterpret_cast<Registers*>(MFS10_BASE);

}

// ============================================================================
// MFS11 Peripheral
// ============================================================================

namespace mfs11 {
    /// Base addresses
    constexpr uint32_t MFS11_BASE = 0x40038B00;

    /// MFS11 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS11 = reinterpret_cast<Registers*>(MFS11_BASE);

}

// ============================================================================
// MFS12 Peripheral
// ============================================================================

namespace mfs12 {
    /// Base addresses
    constexpr uint32_t MFS12_BASE = 0x40038C00;

    /// MFS12 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS12 = reinterpret_cast<Registers*>(MFS12_BASE);

}

// ============================================================================
// MFS13 Peripheral
// ============================================================================

namespace mfs13 {
    /// Base addresses
    constexpr uint32_t MFS13_BASE = 0x40038D00;

    /// MFS13 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS13 = reinterpret_cast<Registers*>(MFS13_BASE);

}

// ============================================================================
// MFS14 Peripheral
// ============================================================================

namespace mfs14 {
    /// Base addresses
    constexpr uint32_t MFS14_BASE = 0x40038E00;

    /// MFS14 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS14 = reinterpret_cast<Registers*>(MFS14_BASE);

}

// ============================================================================
// MFS15 Peripheral
// ============================================================================

namespace mfs15 {
    /// Base addresses
    constexpr uint32_t MFS15_BASE = 0x40038F00;

    /// MFS15 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS15 = reinterpret_cast<Registers*>(MFS15_BASE);

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x4003B000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t WTCR1;  ///< Offset: 0x00 - register WTCR1
        volatile uint32_t WTCR2;  ///< Offset: 0x04 - register WTCR2
        volatile uint32_t WTBR;  ///< Offset: 0x08 - register WTBR
        volatile uint32_t WTDR;  ///< Offset: 0x0F - register WTDR
        volatile uint32_t WTHR;  ///< Offset: 0x0E - register WTHR
        volatile uint32_t WTMIR;  ///< Offset: 0x0D - register WTMIR
        volatile uint32_t WTSR;  ///< Offset: 0x0C - register WTSR
        volatile uint32_t WTYR;  ///< Offset: 0x12 - register WTYR
        volatile uint32_t WTMOR;  ///< Offset: 0x11 - register WTMOR
        volatile uint32_t WTDW;  ///< Offset: 0x10 - register WTDW
        volatile uint32_t ALDR;  ///< Offset: 0x17 - register ALDR
        volatile uint32_t ALHR;  ///< Offset: 0x16 - register ALHR
        volatile uint32_t ALMIR;  ///< Offset: 0x15 - register ALMIR
        volatile uint32_t ALYR;  ///< Offset: 0x1A - register ALYR
        volatile uint32_t ALMOR;  ///< Offset: 0x19 - register ALMOR
        volatile uint32_t WTTR;  ///< Offset: 0x1C - register WTTR
        volatile uint32_t WTCLKS;  ///< Offset: 0x20 - register WTCLKS
        volatile uint32_t WTCLKM;  ///< Offset: 0x21 - register WTCLKM
        volatile uint32_t WTCAL;  ///< Offset: 0x24 - register WTCAL
        volatile uint32_t WTCALEN;  ///< Offset: 0x26 - register WTCALEN
        volatile uint32_t WTDIV;  ///< Offset: 0x28 - register WTDIV
        volatile uint32_t WTDIVEN;  ///< Offset: 0x29 - register WTDIVEN
        volatile uint32_t WTCALPRD;  ///< Offset: 0x2C - register WTCALPRD
        volatile uint32_t WTCOSEL;  ///< Offset: 0x30 - register WTCOSEL
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// WTCR1 Register bits
    namespace wtcr1_bits {
        constexpr uint32_t INTCRIE = (1U << 31);  ///< bitfield INTCRIE
        constexpr uint32_t INTERIE = (1U << 30);  ///< bitfield INTERIE
        constexpr uint32_t INTALIE = (1U << 29);  ///< bitfield INTALIE
        constexpr uint32_t INTTMIE = (1U << 28);  ///< bitfield INTTMIE
        constexpr uint32_t INTHIE = (1U << 27);  ///< bitfield INTHIE
        constexpr uint32_t INTMIE = (1U << 26);  ///< bitfield INTMIE
        constexpr uint32_t INTSIE = (1U << 25);  ///< bitfield INTSIE
        constexpr uint32_t INTSSIE = (1U << 24);  ///< bitfield INTSSIE
        constexpr uint32_t INTCRI = (1U << 23);  ///< bitfield INTCRI
        constexpr uint32_t INTERI = (1U << 22);  ///< bitfield INTERI
        constexpr uint32_t INTALI = (1U << 21);  ///< bitfield INTALI
        constexpr uint32_t INTTMI = (1U << 20);  ///< bitfield INTTMI
        constexpr uint32_t INTHI = (1U << 19);  ///< bitfield INTHI
        constexpr uint32_t INTMI = (1U << 18);  ///< bitfield INTMI
        constexpr uint32_t INTSI = (1U << 17);  ///< bitfield INTSI
        constexpr uint32_t INTSSI = (1U << 16);  ///< bitfield INTSSI
        constexpr uint32_t YEN = (1U << 12);  ///< bitfield YEN
        constexpr uint32_t MOEN = (1U << 11);  ///< bitfield MOEN
        constexpr uint32_t DEN = (1U << 10);  ///< bitfield DEN
        constexpr uint32_t HEN = (1U << 9);  ///< bitfield HEN
        constexpr uint32_t MIEN = (1U << 8);  ///< bitfield MIEN
        constexpr uint32_t BUSY = (1U << 6);  ///< bitfield BUSY
        constexpr uint32_t SCRST = (1U << 5);  ///< bitfield SCRST
        constexpr uint32_t SCST = (1U << 4);  ///< bitfield SCST
        constexpr uint32_t SRST = (1U << 3);  ///< bitfield SRST
        constexpr uint32_t RUN = (1U << 2);  ///< bitfield RUN
        constexpr uint32_t ST = (1U << 0);  ///< bitfield ST
    }

    /// WTCR2 Register bits
    namespace wtcr2_bits {
        constexpr uint32_t TMRUN = (1U << 10);  ///< bitfield TMRUN
        constexpr uint32_t TMEN = (1U << 9);  ///< bitfield TMEN
        constexpr uint32_t TMST = (1U << 8);  ///< bitfield TMST
        constexpr uint32_t CREAD = (1U << 0);  ///< bitfield CREAD
    }

    /// WTBR Register bits
    namespace wtbr_bits {
        constexpr uint32_t BR23 = (1U << 23);  ///< bitfield BR23
        constexpr uint32_t BR22 = (1U << 22);  ///< bitfield BR22
        constexpr uint32_t BR21 = (1U << 21);  ///< bitfield BR21
        constexpr uint32_t BR20 = (1U << 20);  ///< bitfield BR20
        constexpr uint32_t BR19 = (1U << 19);  ///< bitfield BR19
        constexpr uint32_t BR18 = (1U << 18);  ///< bitfield BR18
        constexpr uint32_t BR17 = (1U << 17);  ///< bitfield BR17
        constexpr uint32_t BR16 = (1U << 16);  ///< bitfield BR16
        constexpr uint32_t BR15 = (1U << 15);  ///< bitfield BR15
        constexpr uint32_t BR14 = (1U << 14);  ///< bitfield BR14
        constexpr uint32_t BR13 = (1U << 13);  ///< bitfield BR13
        constexpr uint32_t BR12 = (1U << 12);  ///< bitfield BR12
        constexpr uint32_t BR11 = (1U << 11);  ///< bitfield BR11
        constexpr uint32_t BR10 = (1U << 10);  ///< bitfield BR10
        constexpr uint32_t BR9 = (1U << 9);  ///< bitfield BR9
        constexpr uint32_t BR8 = (1U << 8);  ///< bitfield BR8
        constexpr uint32_t BR7 = (1U << 7);  ///< bitfield BR7
        constexpr uint32_t BR6 = (1U << 6);  ///< bitfield BR6
        constexpr uint32_t BR5 = (1U << 5);  ///< bitfield BR5
        constexpr uint32_t BR4 = (1U << 4);  ///< bitfield BR4
        constexpr uint32_t BR3 = (1U << 3);  ///< bitfield BR3
        constexpr uint32_t BR2 = (1U << 2);  ///< bitfield BR2
        constexpr uint32_t BR1 = (1U << 1);  ///< bitfield BR1
        constexpr uint32_t BR0 = (1U << 0);  ///< bitfield BR0
    }

    /// WTDR Register bits
    namespace wtdr_bits {
        constexpr uint32_t TD = (2 << 4);  ///< bitfield TD
        constexpr uint32_t D = (4 << 0);  ///< bitfield D
    }

    /// WTHR Register bits
    namespace wthr_bits {
        constexpr uint32_t TH = (2 << 4);  ///< bitfield TH
        constexpr uint32_t H = (4 << 0);  ///< bitfield H
    }

    /// WTMIR Register bits
    namespace wtmir_bits {
        constexpr uint32_t TMI = (3 << 4);  ///< bitfield TMI
        constexpr uint32_t MI = (4 << 0);  ///< bitfield MI
    }

    /// WTSR Register bits
    namespace wtsr_bits {
        constexpr uint32_t TS = (3 << 4);  ///< bitfield TS
        constexpr uint32_t S = (4 << 0);  ///< bitfield S
    }

    /// WTYR Register bits
    namespace wtyr_bits {
        constexpr uint32_t TY = (4 << 4);  ///< bitfield TY
        constexpr uint32_t Y = (4 << 0);  ///< bitfield Y
    }

    /// WTMOR Register bits
    namespace wtmor_bits {
        constexpr uint32_t TMO0 = (1U << 4);  ///< bitfield TMO0
        constexpr uint32_t MO = (4 << 0);  ///< bitfield MO
    }

    /// WTDW Register bits
    namespace wtdw_bits {
        constexpr uint32_t DW = (3 << 0);  ///< bitfield DW
    }

    /// ALDR Register bits
    namespace aldr_bits {
        constexpr uint32_t TAD = (2 << 4);  ///< bitfield TAD
        constexpr uint32_t AD = (4 << 0);  ///< bitfield AD
    }

    /// ALHR Register bits
    namespace alhr_bits {
        constexpr uint32_t TAH = (2 << 4);  ///< bitfield TAH
        constexpr uint32_t AH = (4 << 0);  ///< bitfield AH
    }

    /// ALMIR Register bits
    namespace almir_bits {
        constexpr uint32_t TAMI = (3 << 4);  ///< bitfield TAMI
        constexpr uint32_t AMI = (4 << 0);  ///< bitfield AMI
    }

    /// ALYR Register bits
    namespace alyr_bits {
        constexpr uint32_t TAY = (4 << 4);  ///< bitfield TAY
        constexpr uint32_t AY = (4 << 0);  ///< bitfield AY
    }

    /// ALMOR Register bits
    namespace almor_bits {
        constexpr uint32_t TAMO0 = (1U << 4);  ///< bitfield TAMO0
        constexpr uint32_t AMO = (4 << 0);  ///< bitfield AMO
    }

    /// WTTR Register bits
    namespace wttr_bits {
        constexpr uint32_t TM17 = (1U << 17);  ///< bitfield TM17
        constexpr uint32_t TM16 = (1U << 16);  ///< bitfield TM16
        constexpr uint32_t TM15 = (1U << 15);  ///< bitfield TM15
        constexpr uint32_t TM14 = (1U << 14);  ///< bitfield TM14
        constexpr uint32_t TM13 = (1U << 13);  ///< bitfield TM13
        constexpr uint32_t TM12 = (1U << 12);  ///< bitfield TM12
        constexpr uint32_t TM11 = (1U << 11);  ///< bitfield TM11
        constexpr uint32_t TM10 = (1U << 10);  ///< bitfield TM10
        constexpr uint32_t TM9 = (1U << 9);  ///< bitfield TM9
        constexpr uint32_t TM8 = (1U << 8);  ///< bitfield TM8
        constexpr uint32_t TM7 = (1U << 7);  ///< bitfield TM7
        constexpr uint32_t TM6 = (1U << 6);  ///< bitfield TM6
        constexpr uint32_t TM5 = (1U << 5);  ///< bitfield TM5
        constexpr uint32_t TM4 = (1U << 4);  ///< bitfield TM4
        constexpr uint32_t TM3 = (1U << 3);  ///< bitfield TM3
        constexpr uint32_t TM2 = (1U << 2);  ///< bitfield TM2
        constexpr uint32_t TM1 = (1U << 1);  ///< bitfield TM1
        constexpr uint32_t TM0 = (1U << 0);  ///< bitfield TM0
    }

    /// WTCLKS Register bits
    namespace wtclks_bits {
        constexpr uint32_t WTCLKS = (1U << 0);  ///< bitfield WTCLKS
    }

    /// WTCLKM Register bits
    namespace wtclkm_bits {
        constexpr uint32_t WTCLKM = (2 << 0);  ///< bitfield WTCLKM
    }

    /// WTCAL Register bits
    namespace wtcal_bits {
        constexpr uint32_t WTCAL = (10 << 0);  ///< bitfield WTCAL
    }

    /// WTCALEN Register bits
    namespace wtcalen_bits {
        constexpr uint32_t WTCALEN = (1U << 0);  ///< bitfield WTCALEN
    }

    /// WTDIV Register bits
    namespace wtdiv_bits {
        constexpr uint32_t WTDIV = (4 << 0);  ///< bitfield WTDIV
    }

    /// WTDIVEN Register bits
    namespace wtdiven_bits {
        constexpr uint32_t WTDIVRDY = (1U << 1);  ///< bitfield WTDIVRDY
        constexpr uint32_t WTDIVEN = (1U << 0);  ///< bitfield WTDIVEN
    }

    /// WTCALPRD Register bits
    namespace wtcalprd_bits {
        constexpr uint32_t WTCALPRD = (6 << 0);  ///< bitfield WTCALPRD
    }

    /// WTCOSEL Register bits
    namespace wtcosel_bits {
        constexpr uint32_t WTCOSEL = (1U << 0);  ///< bitfield WTCOSEL
    }

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40039000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t CRCCR;  ///< Offset: 0x00 - register CRCCR
        volatile uint32_t CRCINIT;  ///< Offset: 0x04 - register CRCINIT
        volatile uint32_t CRCIN;  ///< Offset: 0x08 - register CRCIN
        volatile uint32_t CRCR;  ///< Offset: 0x0C - register CRCR
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// CRCCR Register bits
    namespace crccr_bits {
        constexpr uint32_t FXOR = (1U << 6);  ///< bitfield FXOR
        constexpr uint32_t CRCLSF = (1U << 5);  ///< bitfield CRCLSF
        constexpr uint32_t CRCLTE = (1U << 4);  ///< bitfield CRCLTE
        constexpr uint32_t LSBFST = (1U << 3);  ///< bitfield LSBFST
        constexpr uint32_t LTLEND = (1U << 2);  ///< bitfield LTLEND
        constexpr uint32_t CRC32 = (1U << 1);  ///< bitfield CRC32
        constexpr uint32_t INIT = (1U << 0);  ///< bitfield INIT
    }

    /// CRCINIT Register bits
    namespace crcinit_bits {
        constexpr uint32_t D = (32 << 0);  ///< bitfield D
    }

    /// CRCIN Register bits
    namespace crcin_bits {
        constexpr uint32_t D = (32 << 0);  ///< bitfield D
    }

    /// CRCR Register bits
    namespace crcr_bits {
        constexpr uint32_t D = (32 << 0);  ///< bitfield D
    }

}

// ============================================================================
// EXBUS Peripheral
// ============================================================================

namespace exbus {
    /// Base addresses
    constexpr uint32_t EXBUS_BASE = 0x4003F000;

    /// EXBUS Register structure
    struct Registers {
        volatile uint32_t MODE0;  ///< Offset: 0x00 - register MODE0
        volatile uint32_t MODE1;  ///< Offset: 0x04 - register MODE1
        volatile uint32_t MODE2;  ///< Offset: 0x08 - register MODE2
        volatile uint32_t MODE3;  ///< Offset: 0x0C - register MODE3
        volatile uint32_t MODE4;  ///< Offset: 0x10 - register MODE4
        volatile uint32_t MODE5;  ///< Offset: 0x14 - register MODE5
        volatile uint32_t MODE6;  ///< Offset: 0x18 - register MODE6
        volatile uint32_t MODE7;  ///< Offset: 0x1C - register MODE7
        volatile uint32_t TIM0;  ///< Offset: 0x20 - register TIM0
        volatile uint32_t TIM1;  ///< Offset: 0x24 - register TIM1
        volatile uint32_t TIM2;  ///< Offset: 0x28 - register TIM2
        volatile uint32_t TIM3;  ///< Offset: 0x2C - register TIM3
        volatile uint32_t TIM4;  ///< Offset: 0x30 - register TIM4
        volatile uint32_t TIM5;  ///< Offset: 0x34 - register TIM5
        volatile uint32_t TIM6;  ///< Offset: 0x38 - register TIM6
        volatile uint32_t TIM7;  ///< Offset: 0x3C - register TIM7
        volatile uint32_t AREA0;  ///< Offset: 0x40 - register AREA0
        volatile uint32_t AREA1;  ///< Offset: 0x44 - register AREA1
        volatile uint32_t AREA2;  ///< Offset: 0x48 - register AREA2
        volatile uint32_t AREA3;  ///< Offset: 0x4C - register AREA3
        volatile uint32_t AREA4;  ///< Offset: 0x50 - register AREA4
        volatile uint32_t AREA5;  ///< Offset: 0x54 - register AREA5
        volatile uint32_t AREA6;  ///< Offset: 0x58 - register AREA6
        volatile uint32_t AREA7;  ///< Offset: 0x5C - register AREA7
        volatile uint32_t ATIM0;  ///< Offset: 0x60 - register ATIM0
        volatile uint32_t ATIM1;  ///< Offset: 0x64 - register ATIM1
        volatile uint32_t ATIM2;  ///< Offset: 0x68 - register ATIM2
        volatile uint32_t ATIM3;  ///< Offset: 0x6C - register ATIM3
        volatile uint32_t ATIM4;  ///< Offset: 0x70 - register ATIM4
        volatile uint32_t ATIM5;  ///< Offset: 0x74 - register ATIM5
        volatile uint32_t ATIM6;  ///< Offset: 0x78 - register ATIM6
        volatile uint32_t ATIM7;  ///< Offset: 0x7C - register ATIM7
        volatile uint32_t DCLKR;  ///< Offset: 0x300 - register DCLKR
    };

    /// Peripheral instances
    inline Registers* EXBUS = reinterpret_cast<Registers*>(EXBUS_BASE);

    // Bit definitions
    /// MODE0 Register bits
    namespace mode0_bits {
        constexpr uint32_t MOEXEUP = (1U << 13);  ///< bitfield MOEXEUP
        constexpr uint32_t MPXCSOF = (1U << 12);  ///< bitfield MPXCSOF
        constexpr uint32_t MPXDOFF = (1U << 11);  ///< bitfield MPXDOFF
        constexpr uint32_t ALEINV = (1U << 9);  ///< bitfield ALEINV
        constexpr uint32_t MPXMODE = (1U << 8);  ///< bitfield MPXMODE
        constexpr uint32_t SHRTDOUT = (1U << 7);  ///< bitfield SHRTDOUT
        constexpr uint32_t RDY = (1U << 6);  ///< bitfield RDY
        constexpr uint32_t PAGE = (1U << 5);  ///< bitfield PAGE
        constexpr uint32_t NAND = (1U << 4);  ///< bitfield NAND
        constexpr uint32_t WEOFF = (1U << 3);  ///< bitfield WEOFF
        constexpr uint32_t RBMON = (1U << 2);  ///< bitfield RBMON
        constexpr uint32_t WDTH = (2 << 0);  ///< bitfield WDTH
    }

    /// TIM0 Register bits
    namespace tim0_bits {
        constexpr uint32_t WIDLC = (4 << 28);  ///< bitfield WIDLC
        constexpr uint32_t WWEC = (4 << 24);  ///< bitfield WWEC
        constexpr uint32_t WADC = (4 << 20);  ///< bitfield WADC
        constexpr uint32_t WACC = (4 << 16);  ///< bitfield WACC
        constexpr uint32_t RIDLC = (4 << 12);  ///< bitfield RIDLC
        constexpr uint32_t FRADC = (4 << 8);  ///< bitfield FRADC
        constexpr uint32_t RADC = (4 << 4);  ///< bitfield RADC
        constexpr uint32_t RACC = (4 << 0);  ///< bitfield RACC
    }

    /// AREA0 Register bits
    namespace area0_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA1 Register bits
    namespace area1_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA2 Register bits
    namespace area2_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA3 Register bits
    namespace area3_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA4 Register bits
    namespace area4_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA5 Register bits
    namespace area5_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA6 Register bits
    namespace area6_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// AREA7 Register bits
    namespace area7_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< bitfield MASK
        constexpr uint32_t ADDR = (8 << 0);  ///< bitfield ADDR
    }

    /// ATIM0 Register bits
    namespace atim0_bits {
        constexpr uint32_t ALEW = (4 << 8);  ///< bitfield ALEW
        constexpr uint32_t ALES = (4 << 4);  ///< bitfield ALES
        constexpr uint32_t ALC = (4 << 0);  ///< bitfield ALC
    }

    /// DCLKR Register bits
    namespace dclkr_bits {
        constexpr uint32_t MCLKON = (1U << 4);  ///< bitfield MCLKON
        constexpr uint32_t MDIV = (4 << 0);  ///< bitfield MDIV
    }

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USBCLK_BASE = 0x40036000;
    constexpr uint32_t USB0_BASE = 0x40040000;

    /// USB Register structure
    struct Registers {
        volatile uint32_t UCCR;  ///< Offset: 0x00 - register UCCR
        volatile uint32_t UPCR1;  ///< Offset: 0x04 - register UPCR1
        volatile uint32_t UPCR2;  ///< Offset: 0x08 - register UPCR2
        volatile uint32_t UPCR3;  ///< Offset: 0x0C - register UPCR3
        volatile uint32_t UPCR4;  ///< Offset: 0x10 - register UPCR4
        volatile uint32_t UPCR5;  ///< Offset: 0x24 - register UPCR5
        volatile uint32_t UP_STR;  ///< Offset: 0x14 - register UP_STR
        volatile uint32_t UPINT_ENR;  ///< Offset: 0x18 - register UPINT_ENR
        volatile uint32_t UPINT_STR;  ///< Offset: 0x20 - register UPINT_STR
        volatile uint32_t UPINT_CLR;  ///< Offset: 0x1C - register UPINT_CLR
        volatile uint32_t USBEN;  ///< Offset: 0x30 - register USBEN
    };

    /// Peripheral instances
    inline Registers* USBCLK = reinterpret_cast<Registers*>(USBCLK_BASE);
    inline Registers* USB0 = reinterpret_cast<Registers*>(USB0_BASE);

    // Bit definitions
    /// UCCR Register bits
    namespace uccr_bits {
        constexpr uint32_t UCSEL = (1U << 1);  ///< bitfield UCSEL
        constexpr uint32_t UCEN = (1U << 0);  ///< bitfield UCEN
    }

    /// UPCR1 Register bits
    namespace upcr1_bits {
        constexpr uint32_t UPINC = (1U << 1);  ///< bitfield UPINC
        constexpr uint32_t UPLLEN = (1U << 0);  ///< bitfield UPLLEN
    }

    /// UPCR2 Register bits
    namespace upcr2_bits {
        constexpr uint32_t UPOWT = (3 << 0);  ///< bitfield UPOWT
    }

    /// UPCR3 Register bits
    namespace upcr3_bits {
        constexpr uint32_t UPLLK = (5 << 0);  ///< bitfield UPLLK
    }

    /// UPCR4 Register bits
    namespace upcr4_bits {
        constexpr uint32_t UPLLN = (5 << 0);  ///< bitfield UPLLN
    }

    /// UPCR5 Register bits
    namespace upcr5_bits {
        constexpr uint32_t UPLLM = (4 << 0);  ///< bitfield UPLLM
    }

    /// UP_STR Register bits
    namespace up_str_bits {
        constexpr uint32_t UPRDY = (1U << 0);  ///< bitfield UPRDY
    }

    /// UPINT_ENR Register bits
    namespace upint_enr_bits {
        constexpr uint32_t UPCSE = (1U << 0);  ///< bitfield UPCSE
    }

    /// UPINT_STR Register bits
    namespace upint_str_bits {
        constexpr uint32_t UPCSI = (1U << 0);  ///< bitfield UPCSI
    }

    /// UPINT_CLR Register bits
    namespace upint_clr_bits {
        constexpr uint32_t UPCSC = (1U << 0);  ///< bitfield UPCSC
    }

    /// USBEN Register bits
    namespace usben_bits {
        constexpr uint32_t USBEN = (1U << 0);  ///< bitfield USBEN
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAC_BASE = 0x40060000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t DMACR;  ///< Offset: 0x00 - register DMACR
        volatile uint32_t DMACA0;  ///< Offset: 0x10 - register DMACA0
        volatile uint32_t DMACB0;  ///< Offset: 0x14 - register DMACB0
        volatile uint32_t DMACSA0;  ///< Offset: 0x18 - register DMACSA0
        volatile uint32_t DMACDA0;  ///< Offset: 0x1C - register DMACDA0
        volatile uint32_t DMACA1;  ///< Offset: 0x20 - register DMACA1
        volatile uint32_t DMACB1;  ///< Offset: 0x24 - register DMACB1
        volatile uint32_t DMACSA1;  ///< Offset: 0x28 - register DMACSA1
        volatile uint32_t DMACDA1;  ///< Offset: 0x2C - register DMACDA1
        volatile uint32_t DMACA2;  ///< Offset: 0x30 - register DMACA2
        volatile uint32_t DMACB2;  ///< Offset: 0x34 - register DMACB2
        volatile uint32_t DMACSA2;  ///< Offset: 0x38 - register DMACSA2
        volatile uint32_t DMACDA2;  ///< Offset: 0x3C - register DMACDA2
        volatile uint32_t DMACA3;  ///< Offset: 0x40 - register DMACA3
        volatile uint32_t DMACB3;  ///< Offset: 0x44 - register DMACB3
        volatile uint32_t DMACSA3;  ///< Offset: 0x48 - register DMACSA3
        volatile uint32_t DMACDA3;  ///< Offset: 0x4C - register DMACDA3
        volatile uint32_t DMACA4;  ///< Offset: 0x50 - register DMACA4
        volatile uint32_t DMACB4;  ///< Offset: 0x54 - register DMACB4
        volatile uint32_t DMACSA4;  ///< Offset: 0x58 - register DMACSA4
        volatile uint32_t DMACDA4;  ///< Offset: 0x5C - register DMACDA4
        volatile uint32_t DMACA5;  ///< Offset: 0x60 - register DMACA5
        volatile uint32_t DMACB5;  ///< Offset: 0x64 - register DMACB5
        volatile uint32_t DMACSA5;  ///< Offset: 0x68 - register DMACSA5
        volatile uint32_t DMACDA5;  ///< Offset: 0x6C - register DMACDA5
        volatile uint32_t DMACA6;  ///< Offset: 0x70 - register DMACA6
        volatile uint32_t DMACB6;  ///< Offset: 0x74 - register DMACB6
        volatile uint32_t DMACSA6;  ///< Offset: 0x78 - register DMACSA6
        volatile uint32_t DMACDA6;  ///< Offset: 0x7C - register DMACDA6
        volatile uint32_t DMACA7;  ///< Offset: 0x80 - register DMACA7
        volatile uint32_t DMACB7;  ///< Offset: 0x84 - register DMACB7
        volatile uint32_t DMACSA7;  ///< Offset: 0x88 - register DMACSA7
        volatile uint32_t DMACDA7;  ///< Offset: 0x8C - register DMACDA7
    };

    /// Peripheral instances
    inline Registers* DMAC = reinterpret_cast<Registers*>(DMAC_BASE);

    // Bit definitions
    /// DMACR Register bits
    namespace dmacr_bits {
        constexpr uint32_t DE = (1U << 31);  ///< bitfield DE
        constexpr uint32_t DS = (1U << 30);  ///< bitfield DS
        constexpr uint32_t PR = (1U << 28);  ///< bitfield PR
        constexpr uint32_t DH = (4 << 24);  ///< bitfield DH
    }

    /// DMACA0 Register bits
    namespace dmaca0_bits {
        constexpr uint32_t EB = (1U << 31);  ///< bitfield EB
        constexpr uint32_t PB = (1U << 30);  ///< bitfield PB
        constexpr uint32_t ST = (1U << 29);  ///< bitfield ST
        constexpr uint32_t IS = (6 << 23);  ///< bitfield IS
        constexpr uint32_t BC = (4 << 16);  ///< bitfield BC
        constexpr uint32_t TC = (16 << 0);  ///< bitfield TC
    }

    /// DMACB0 Register bits
    namespace dmacb0_bits {
        constexpr uint32_t MS = (2 << 28);  ///< bitfield MS
        constexpr uint32_t TW = (2 << 26);  ///< bitfield TW
        constexpr uint32_t FS = (1U << 25);  ///< bitfield FS
        constexpr uint32_t FD = (1U << 24);  ///< bitfield FD
        constexpr uint32_t RC = (1U << 23);  ///< bitfield RC
        constexpr uint32_t RS = (1U << 22);  ///< bitfield RS
        constexpr uint32_t RD = (1U << 21);  ///< bitfield RD
        constexpr uint32_t EI = (1U << 20);  ///< bitfield EI
        constexpr uint32_t CI = (1U << 19);  ///< bitfield CI
        constexpr uint32_t SS = (3 << 16);  ///< bitfield SS
        constexpr uint32_t EM = (1U << 0);  ///< bitfield EM
    }

}


} // namespace alloy::generated::mb9bf32xt

#endif // ALLOY_GENERATED_MB9BF32XT_PERIPHERALS_HPP