/// Auto-generated code for MB9BF51xS
/// Generated by Alloy Code Generator
/// Source: fujitsu_mb9bf51xs.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:01:13
#ifndef ALLOY_GENERATED_MB9BF51XS_PERIPHERALS_HPP
#define ALLOY_GENERATED_MB9BF51XS_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::mb9bf51xs {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_flash = true;
    constexpr uint32_t num_flash_instances = 1;
    constexpr bool has_crg = true;
    constexpr uint32_t num_crg_instances = 1;
    constexpr bool has_crtrim = true;
    constexpr uint32_t num_crtrim_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 2;
    constexpr bool has_tim = true;
    constexpr uint32_t num_tim_instances = 1;
    constexpr bool has_mft0 = true;
    constexpr uint32_t num_mft0_instances = 1;
    constexpr bool has_mft1 = true;
    constexpr uint32_t num_mft1_instances = 1;
    constexpr bool has_mft2 = true;
    constexpr uint32_t num_mft2_instances = 1;
    constexpr bool has_btiosel03 = true;
    constexpr uint32_t num_btiosel03_instances = 1;
    constexpr bool has_btiosel47 = true;
    constexpr uint32_t num_btiosel47_instances = 1;
    constexpr bool has_btiosel8b = true;
    constexpr uint32_t num_btiosel8b_instances = 1;
    constexpr bool has_btioselcf = true;
    constexpr uint32_t num_btioselcf_instances = 1;
    constexpr bool has_sbssr = true;
    constexpr uint32_t num_sbssr_instances = 1;
    constexpr bool has_bt0 = true;
    constexpr uint32_t num_bt0_instances = 1;
    constexpr bool has_bt1 = true;
    constexpr uint32_t num_bt1_instances = 1;
    constexpr bool has_bt2 = true;
    constexpr uint32_t num_bt2_instances = 1;
    constexpr bool has_bt3 = true;
    constexpr uint32_t num_bt3_instances = 1;
    constexpr bool has_bt4 = true;
    constexpr uint32_t num_bt4_instances = 1;
    constexpr bool has_bt5 = true;
    constexpr uint32_t num_bt5_instances = 1;
    constexpr bool has_bt6 = true;
    constexpr uint32_t num_bt6_instances = 1;
    constexpr bool has_bt7 = true;
    constexpr uint32_t num_bt7_instances = 1;
    constexpr bool has_bt8 = true;
    constexpr uint32_t num_bt8_instances = 1;
    constexpr bool has_bt9 = true;
    constexpr uint32_t num_bt9_instances = 1;
    constexpr bool has_bt10 = true;
    constexpr uint32_t num_bt10_instances = 1;
    constexpr bool has_bt11 = true;
    constexpr uint32_t num_bt11_instances = 1;
    constexpr bool has_bt12 = true;
    constexpr uint32_t num_bt12_instances = 1;
    constexpr bool has_bt13 = true;
    constexpr uint32_t num_bt13_instances = 1;
    constexpr bool has_bt14 = true;
    constexpr uint32_t num_bt14_instances = 1;
    constexpr bool has_bt15 = true;
    constexpr uint32_t num_bt15_instances = 1;
    constexpr bool has_qprc0 = true;
    constexpr uint32_t num_qprc0_instances = 1;
    constexpr bool has_qprc1 = true;
    constexpr uint32_t num_qprc1_instances = 1;
    constexpr bool has_qprc2 = true;
    constexpr uint32_t num_qprc2_instances = 1;
    constexpr bool has_wc = true;
    constexpr uint32_t num_wc_instances = 1;
    constexpr bool has_mft = true;
    constexpr uint32_t num_mft_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 3;
    constexpr bool has_exti = true;
    constexpr uint32_t num_exti_instances = 1;
    constexpr bool has_intreq = true;
    constexpr uint32_t num_intreq_instances = 1;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 1;
    constexpr bool has_lvd = true;
    constexpr uint32_t num_lvd_instances = 1;
    constexpr bool has_mfs0 = true;
    constexpr uint32_t num_mfs0_instances = 1;
    constexpr bool has_mfs1 = true;
    constexpr uint32_t num_mfs1_instances = 1;
    constexpr bool has_mfs2 = true;
    constexpr uint32_t num_mfs2_instances = 1;
    constexpr bool has_mfs3 = true;
    constexpr uint32_t num_mfs3_instances = 1;
    constexpr bool has_mfs4 = true;
    constexpr uint32_t num_mfs4_instances = 1;
    constexpr bool has_mfs5 = true;
    constexpr uint32_t num_mfs5_instances = 1;
    constexpr bool has_mfs6 = true;
    constexpr uint32_t num_mfs6_instances = 1;
    constexpr bool has_mfs7 = true;
    constexpr uint32_t num_mfs7_instances = 1;
    constexpr bool has_mfs = true;
    constexpr uint32_t num_mfs_instances = 1;
    constexpr bool has_crc = true;
    constexpr uint32_t num_crc_instances = 1;
    constexpr bool has_exbus = true;
    constexpr uint32_t num_exbus_instances = 1;
    constexpr bool has_usb = true;
    constexpr uint32_t num_usb_instances = 3;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 1;
    constexpr bool has_can = true;
    constexpr uint32_t num_can_instances = 3;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct flash_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crtrim_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct tim_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mft0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mft1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mft2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct btiosel03_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct btiosel47_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct btiosel8b_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct btioselcf_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sbssr_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt4_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt5_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt6_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt7_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt8_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt9_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt10_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt11_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt12_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt13_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt14_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct bt15_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct qprc0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct qprc1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct qprc2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mft_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct exti_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct intreq_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct lvd_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs4_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs5_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs6_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs7_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct mfs_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct exbus_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usb_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct can_tag> {
        static constexpr uint32_t value = 3;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 1;
    constexpr uint32_t max_gpio_pins = 16;  // 16 pins per port

    // USART-specific traits
}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_IF_BASE = 0x40000000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t FASZR;  ///< Offset: 0x00 - Flash Access Size Register
        volatile uint32_t FRWTR;  ///< Offset: 0x04 - Flash Read Wait Register
        volatile uint32_t FSTR;  ///< Offset: 0x08 - Flash Status Register
        volatile uint32_t FSYNDN;  ///< Offset: 0x10 - Flash Sync Down Register
        volatile uint32_t FBFCR;  ///< Offset: 0x14 - Flash Buffer Control Register
        volatile uint32_t CRTRMM;  ///< Offset: 0x100 - CR Trimming Data Mirror Register
    };

    /// Peripheral instances
    inline Registers* FLASH_IF = reinterpret_cast<Registers*>(FLASH_IF_BASE);

    // Bit definitions
    /// FASZR Register bits
    namespace faszr_bits {
        constexpr uint32_t ASZ = (2 << 0);  ///< Flash Access Size
    }

    /// FRWTR Register bits
    namespace frwtr_bits {
        constexpr uint32_t RWT = (2 << 0);  ///< Read Wait Cycle
    }

    /// FSTR Register bits
    namespace fstr_bits {
        constexpr uint32_t ERR = (1U << 2);  ///< Flash ECC Error
        constexpr uint32_t HNG = (1U << 1);  ///< Flash Hang flag
        constexpr uint32_t RDY = (1U << 0);  ///< Flash Rdy
    }

    /// FSYNDN Register bits
    namespace fsyndn_bits {
        constexpr uint32_t SD = (3 << 0);  ///< Flash Sync
    }

    /// FBFCR Register bits
    namespace fbfcr_bits {
        constexpr uint32_t BS = (1U << 1);  ///< Buffer Status
        constexpr uint32_t BE = (1U << 0);  ///< Buffer Enable
    }

    /// CRTRMM Register bits
    namespace crtrmm_bits {
        constexpr uint32_t TRMM = (10 << 0);  ///< CR Trimming Data Mirror
    }

}

// ============================================================================
// CRG Peripheral
// ============================================================================

namespace crg {
    /// Base addresses
    constexpr uint32_t CRG_BASE = 0x40010000;

    /// CRG Register structure
    struct Registers {
        volatile uint32_t SCM_CTL;  ///< Offset: 0x00 - System Clock Mode Control Register
        volatile uint32_t SCM_STR;  ///< Offset: 0x04 - System Clock Mode Status Register
        volatile uint32_t BSC_PSR;  ///< Offset: 0x10 - Base Clock Prescaler Register
        volatile uint32_t APBC0_PSR;  ///< Offset: 0x14 - APB0 Prescaler Register
        volatile uint32_t APBC1_PSR;  ///< Offset: 0x18 - APB1 Prescaler Register
        volatile uint32_t APBC2_PSR;  ///< Offset: 0x1C - APB2 Prescaler Register
        volatile uint32_t SWC_PSR;  ///< Offset: 0x20 - Software Watchdog Clock Prescaler Register
        volatile uint32_t TTC_PSR;  ///< Offset: 0x28 - Trace Clock Prescaler Register
        volatile uint32_t CSW_TMR;  ///< Offset: 0x30 - Clock Stabilization Wait Time Register
        volatile uint32_t PSW_TMR;  ///< Offset: 0x34 - PLL Clock Stabilization Wait Time Setup Register
        volatile uint32_t PLL_CTL1;  ///< Offset: 0x38 - PLL Control Register 1
        volatile uint32_t PLL_CTL2;  ///< Offset: 0x3C - PLL Control Register 2
        volatile uint32_t DBWDT_CTL;  ///< Offset: 0x54 - Debug Break Watchdog Timer Control Register
        volatile uint32_t INT_ENR;  ///< Offset: 0x60 - Interrupt Enable Register
        volatile uint32_t INT_STR;  ///< Offset: 0x64 - Interrupt Status Register
        volatile uint32_t INT_CLR;  ///< Offset: 0x68 - Interrupt Clear Register
        volatile uint32_t RST_STR;  ///< Offset: 0x0C - Reset Cause Register
        volatile uint32_t STB_CTL;  ///< Offset: 0x08 - Standby Mode Control Register
        volatile uint32_t CSV_CTL;  ///< Offset: 0x40 - CSV control register
        volatile uint32_t CSV_STR;  ///< Offset: 0x44 - CSV status register
        volatile uint32_t FCSWH_CTL;  ///< Offset: 0x48 - Frequency detection window setting register
        volatile uint32_t FCSWL_CTL;  ///< Offset: 0x4C - Frequency detection window setting register
        volatile uint32_t FCSWD_CTL;  ///< Offset: 0x50 - Frequency detection counter register
    };

    /// Peripheral instances
    inline Registers* CRG = reinterpret_cast<Registers*>(CRG_BASE);

    // Bit definitions
    /// SCM_CTL Register bits
    namespace scm_ctl_bits {
        constexpr uint32_t RCS = (3 << 5);  ///< Master clock switch control bits
        constexpr uint32_t PLLE = (1U << 4);  ///< PLL oscillation enable bit
        constexpr uint32_t SOSCE = (1U << 3);  ///< Sub clock oscillation enable bit
        constexpr uint32_t MOSCE = (1U << 1);  ///< Main clock oscillation enable bit
    }

    /// SCM_STR Register bits
    namespace scm_str_bits {
        constexpr uint32_t RCM = (3 << 5);  ///< Master clock selection bits
        constexpr uint32_t PLRDY = (1U << 4);  ///< PLL oscillation stable bit
        constexpr uint32_t SORDY = (1U << 3);  ///< Sub clock oscillation stable bit
        constexpr uint32_t MORDY = (1U << 1);  ///< Main clock oscillation stable bit
    }

    /// BSC_PSR Register bits
    namespace bsc_psr_bits {
        constexpr uint32_t BSR = (3 << 0);  ///< Base clock frequency division ratio setting bit
    }

    /// APBC0_PSR Register bits
    namespace apbc0_psr_bits {
        constexpr uint32_t APBC0 = (2 << 0);  ///< APB0 bus clock frequency division ratio setting bit
    }

    /// APBC1_PSR Register bits
    namespace apbc1_psr_bits {
        constexpr uint32_t APBC1EN = (1U << 7);  ///< APB1 clock enable bit
        constexpr uint32_t APBC1RST = (1U << 4);  ///< APB1 bus reset control bit
        constexpr uint32_t APBC1 = (2 << 0);  ///< APB1 bus clock frequency division ratio setting bit
    }

    /// APBC2_PSR Register bits
    namespace apbc2_psr_bits {
        constexpr uint32_t APBC2EN = (1U << 7);  ///< APB2 clock enable bit
        constexpr uint32_t APBC2RST = (1U << 4);  ///< APB2 bus reset control bit
        constexpr uint32_t APBC2 = (2 << 0);  ///< APB2 bus clock frequency division ratio setting bit
    }

    /// SWC_PSR Register bits
    namespace swc_psr_bits {
        constexpr uint32_t TESTB = (1U << 7);  ///< TEST bit
        constexpr uint32_t SWDS = (2 << 0);  ///< Software watchdog clock frequency division ratio setting bit
    }

    /// TTC_PSR Register bits
    namespace ttc_psr_bits {
        constexpr uint32_t TTC = (2 << 0);  ///< Trace clock frequency division ratio setting bit
    }

    /// CSW_TMR Register bits
    namespace csw_tmr_bits {
        constexpr uint32_t SOWT = (3 << 4);  ///< Sub clock stabilization wait time setup bit
        constexpr uint32_t MOWT = (4 << 0);  ///< Main clock stabilization wait time setup bit
    }

    /// PSW_TMR Register bits
    namespace psw_tmr_bits {
        constexpr uint32_t PINC = (1U << 4);  ///< PLL input clock select bit
        constexpr uint32_t POWT = (3 << 0);  ///< PLL clock stabilization wait time setup bit
    }

    /// PLL_CTL1 Register bits
    namespace pll_ctl1_bits {
        constexpr uint32_t PLLK = (4 << 4);  ///< PLL input clock frequency division ratio setting bit
        constexpr uint32_t PLLM = (4 << 0);  ///< PLL VCO clock frequency division ratio setting bit
    }

    /// PLL_CTL2 Register bits
    namespace pll_ctl2_bits {
        constexpr uint32_t PLLN = (6 << 0);  ///< PLL feedback frequency division ratio setting bit
    }

    /// DBWDT_CTL Register bits
    namespace dbwdt_ctl_bits {
        constexpr uint32_t DPHWBE = (1U << 7);  ///< HW-WDG debug mode break bit
        constexpr uint32_t DPSWBE = (1U << 5);  ///< SW-WDG debug mode break bit
    }

    /// INT_ENR Register bits
    namespace int_enr_bits {
        constexpr uint32_t FCSE = (1U << 5);  ///< Anomalous frequency detection interrupt enable bit
        constexpr uint32_t PCSE = (1U << 2);  ///< PLL oscillation stabilization completion interrupt enable bit
        constexpr uint32_t SCSE = (1U << 1);  ///< Sub oscillation stabilization completion interrupt enable bit
        constexpr uint32_t MCSE = (1U << 0);  ///< Main oscillation stabilization completion interrupt enable bit
    }

    /// INT_STR Register bits
    namespace int_str_bits {
        constexpr uint32_t FCSI = (1U << 5);  ///< Anomalous frequency detection interrupt status bit
        constexpr uint32_t PCSI = (1U << 2);  ///< PLL oscillation stabilization completion interrupt status bit
        constexpr uint32_t SCSI = (1U << 1);  ///< Sub oscillation stabilization completion interrupt status bit
        constexpr uint32_t MCSI = (1U << 0);  ///< Main oscillation stabilization completion interrupt status bit
    }

    /// INT_CLR Register bits
    namespace int_clr_bits {
        constexpr uint32_t FCSC = (1U << 5);  ///< Anomalous frequency detection interrupt cause clear bit
        constexpr uint32_t PCSC = (1U << 2);  ///< PLL oscillation stabilization completion interrupt cause clear bit
        constexpr uint32_t SCSC = (1U << 1);  ///< Sub oscillation stabilization completion interrupt cause clear bit
        constexpr uint32_t MCSC = (1U << 0);  ///< Main oscillation stabilization completion interrupt cause clear bit
    }

    /// RST_STR Register bits
    namespace rst_str_bits {
        constexpr uint32_t SRST = (1U << 8);  ///< Software reset flag
        constexpr uint32_t FCSR = (1U << 7);  ///< Flag for anomalous frequency detection reset
        constexpr uint32_t CSVR = (1U << 6);  ///< Clock failure detection reset flag
        constexpr uint32_t HWDT = (1U << 5);  ///< Hardware watchdog reset flag
        constexpr uint32_t SWDT = (1U << 4);  ///< Software watchdog reset flag
        constexpr uint32_t INITX = (1U << 1);  ///< INITX pin input reset flag
        constexpr uint32_t PONR = (1U << 0);  ///< Power-on reset/low-voltage detection reset flag
    }

    /// STB_CTL Register bits
    namespace stb_ctl_bits {
        constexpr uint32_t KEY = (16 << 16);  ///< Standby mode control write control bit
        constexpr uint32_t SPL = (1U << 4);  ///< Standby pin level setting bit
        constexpr uint32_t STM = (2 << 0);  ///< Standby mode selection bit
    }

    /// CSV_CTL Register bits
    namespace csv_ctl_bits {
        constexpr uint32_t FCD = (3 << 12);  ///< FCS count cycle setting bits
        constexpr uint32_t FCSRE = (1U << 9);  ///< FCS reset output enable bit
        constexpr uint32_t FCSDE = (1U << 8);  ///< FCS function enable bit
        constexpr uint32_t SCSVE = (1U << 1);  ///< Sub CSV function enable bit
        constexpr uint32_t MCSVE = (1U << 0);  ///< Main CSV function enable bit
    }

    /// CSV_STR Register bits
    namespace csv_str_bits {
        constexpr uint32_t SCMF = (1U << 1);  ///< Sub clock failure detection flag
        constexpr uint32_t MCMF = (1U << 0);  ///< Main clock failure detection flag
    }

}

// ============================================================================
// CRTRIM Peripheral
// ============================================================================

namespace crtrim {
    /// Base addresses
    constexpr uint32_t CRTRIM_BASE = 0x4002E000;

    /// CRTRIM Register structure
    struct Registers {
        volatile uint32_t MCR_PSR;  ///< Offset: 0x00 - High-speed CR oscillation Frequency Division Setup Register
        volatile uint32_t MCR_FTRM;  ///< Offset: 0x04 - High-speed CR oscillation Frequency Trimming Register
        volatile uint32_t MCR_RLR;  ///< Offset: 0x0C - High-Speed CR Oscillation Register Write-Protect Register
    };

    /// Peripheral instances
    inline Registers* CRTRIM = reinterpret_cast<Registers*>(CRTRIM_BASE);

    // Bit definitions
    /// MCR_PSR Register bits
    namespace mcr_psr_bits {
        constexpr uint32_t CSR = (2 << 0);  ///< High-speed CR oscillation frequency division ratio setting bits
    }

    /// MCR_FTRM Register bits
    namespace mcr_ftrm_bits {
        constexpr uint32_t TRD = (8 << 0);  ///< Frequency trimming setup bits
    }

    /// MCR_RLR Register bits
    namespace mcr_rlr_bits {
        constexpr uint32_t TRMLCK = (32 << 0);  ///< Register write-protect bits
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t SWWDT_BASE = 0x40012000;
    constexpr uint32_t HWWDT_BASE = 0x40011000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t WDOGLOAD;  ///< Offset: 0x00 - Software Watchdog Timer Load Register
        volatile uint32_t WDOGVALUE;  ///< Offset: 0x04 - Software Watchdog Timer Value Register
        volatile uint32_t WDOGCONTROL;  ///< Offset: 0x08 - Software Watchdog Timer Control Register
        volatile uint32_t WDOGINTCLR;  ///< Offset: 0x0C - Software Watchdog Timer Clear Register
        volatile uint32_t WDOGRIS;  ///< Offset: 0x10 - Software Watchdog Timer Interrupt Status Register
        volatile uint32_t WDOGLOCK;  ///< Offset: 0xC00 - Software Watchdog Timer Lock Register
    };

    /// Peripheral instances
    inline Registers* SWWDT = reinterpret_cast<Registers*>(SWWDT_BASE);
    inline Registers* HWWDT = reinterpret_cast<Registers*>(HWWDT_BASE);

    // Bit definitions
    /// WDOGCONTROL Register bits
    namespace wdogcontrol_bits {
        constexpr uint32_t RESEN = (1U << 1);  ///< Reset enable bit of the software watchdog
        constexpr uint32_t INTEN = (1U << 0);  ///< Interrupt and counter enable bit of the software watchdog
    }

    /// WDOGRIS Register bits
    namespace wdogris_bits {
        constexpr uint32_t RIS = (1U << 0);  ///< Software watchdog interrupt status bit
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t DTIM_BASE = 0x40015000;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t TIMER1LOAD;  ///< Offset: 0x00 - Load Register
        volatile uint32_t TIMER1VALUE;  ///< Offset: 0x04 - Value Register
        volatile uint32_t TIMER1CONTROL;  ///< Offset: 0x08 - Control Register
        volatile uint32_t TIMER1INTCLR;  ///< Offset: 0x0C - Interrupt Clear Register
        volatile uint32_t TIMER1RIS;  ///< Offset: 0x10 - Interrupt Status Register
        volatile uint32_t TIMER1MIS;  ///< Offset: 0x14 - Masked Interrupt Status Register
        volatile uint32_t TIMER1BGLOAD;  ///< Offset: 0x18 - Background Load Register
        volatile uint32_t TIMER2LOAD;  ///< Offset: 0x20 - Load Register
        volatile uint32_t TIMER2VALUE;  ///< Offset: 0x24 - Value Register
        volatile uint32_t TIMER2CONTROL;  ///< Offset: 0x28 - Control Register
        volatile uint32_t TIMER2INTCLR;  ///< Offset: 0x2C - Interrupt Clear Register
        volatile uint32_t TIMER2RIS;  ///< Offset: 0x30 - Interrupt Status Register
        volatile uint32_t TIMER2MIS;  ///< Offset: 0x34 - Masked Interrupt Status Register
        volatile uint32_t TIMER2BGLOAD;  ///< Offset: 0x38 - Background Load Register
    };

    /// Peripheral instances
    inline Registers* DTIM = reinterpret_cast<Registers*>(DTIM_BASE);

    // Bit definitions
    /// TIMER1CONTROL Register bits
    namespace timer1control_bits {
        constexpr uint32_t TimerEn = (1U << 7);  ///< Enable bit
        constexpr uint32_t TimerMode = (1U << 6);  ///< Mode bit
        constexpr uint32_t IntEnable = (1U << 5);  ///< Interrupt enable bit
        constexpr uint32_t TimerPre = (2 << 2);  ///< Prescale bits
        constexpr uint32_t TimerSize = (1U << 1);  ///< Counter size bit
        constexpr uint32_t OneShot = (1U << 0);  ///< One-shot mode bit
    }

    /// TIMER1RIS Register bits
    namespace timer1ris_bits {
        constexpr uint32_t TIMER1RIS = (1U << 0);  ///< Interrupt Status Register bit
    }

    /// TIMER1MIS Register bits
    namespace timer1mis_bits {
        constexpr uint32_t TIMER1MIS = (1U << 0);  ///< Masked Interrupt Status bit
    }

}

// ============================================================================
// MFT0 Peripheral
// ============================================================================

namespace mft0 {
    /// Base addresses
    constexpr uint32_t MFT0_BASE = 0x40020000;

    /// MFT0 Register structure
    struct Registers {
        volatile uint32_t FRT_TCSA0;  ///< Offset: 0x30 - FRT-ch.0 Control Register A
        volatile uint32_t FRT_TCSA1;  ///< Offset: 0x40 - FRT-ch.1 Control Register A
        volatile uint32_t FRT_TCSA2;  ///< Offset: 0x50 - FRT-ch.2 Control Register A
        volatile uint32_t FRT_TCSB0;  ///< Offset: 0x34 - FRT-ch.0 Control Register B
        volatile uint32_t FRT_TCSB1;  ///< Offset: 0x44 - FRT-ch.1 Control Register B
        volatile uint32_t FRT_TCSB2;  ///< Offset: 0x54 - FRT-ch.2 Control Register B
        volatile uint32_t FRT_TCCP0;  ///< Offset: 0x28 - FRT-ch.0 Cycle Setting Register
        volatile uint32_t FRT_TCCP1;  ///< Offset: 0x38 - FRT-ch.1 Cycle Setting Register
        volatile uint32_t FRT_TCCP2;  ///< Offset: 0x48 - FRT-ch.2 Cycle Setting Register
        volatile uint32_t FRT_TCDT0;  ///< Offset: 0x2C - FRT-ch.0 Count Value Register
        volatile uint32_t FRT_TCDT1;  ///< Offset: 0x3C - FRT-ch.1 Count Value Register
        volatile uint32_t FRT_TCDT2;  ///< Offset: 0x4C - FRT-ch.2 Count Value Register
        volatile uint32_t OCU_OCFS10;  ///< Offset: 0x58 - "OCU ch.1,0 Connecting FRT Select Register"
        volatile uint32_t OCU_OCFS32;  ///< Offset: 0x59 - "OCU ch.3,2 Connecting FRT Select Register"
        volatile uint32_t OCU_OCFS54;  ///< Offset: 0x5C - "OCU ch.5,4 Connecting FRT Select Register"
        volatile uint32_t OCU_OCSA10;  ///< Offset: 0x18 - "OCU ch.1,0 Control Register A"
        volatile uint32_t OCU_OCSA32;  ///< Offset: 0x1C - "OCU ch.3,2 Control Register A"
        volatile uint32_t OCU_OCSA54;  ///< Offset: 0x20 - "OCU ch.5,4 Control Register A"
        volatile uint32_t OCU_OCSB10;  ///< Offset: 0x19 - "OCU ch.1,0 Control Register B"
        volatile uint32_t OCU_OCSB32;  ///< Offset: 0x1D - "OCU ch.3,2 Control Register B"
        volatile uint32_t OCU_OCSB54;  ///< Offset: 0x21 - "OCU ch.5,4 Control Register B"
        volatile uint32_t OCU_OCSC;  ///< Offset: 0x24 - OCU Control Register C
        volatile uint32_t OCU_OCCP0;  ///< Offset: 0x00 - OCU ch.0 Compare Value Store Register
        volatile uint32_t OCU_OCCP1;  ///< Offset: 0x04 - OCU ch.1 Compare Value Store Register
        volatile uint32_t OCU_OCCP2;  ///< Offset: 0x08 - OCU ch.2 Compare Value Store Register
        volatile uint32_t OCU_OCCP3;  ///< Offset: 0x0C - OCU ch.3 Compare Value Store Register
        volatile uint32_t OCU_OCCP4;  ///< Offset: 0x10 - OCU ch.4 Compare Value Store Register
        volatile uint32_t OCU_OCCP5;  ///< Offset: 0x14 - OCU ch.5 Compare Value Store Register
        volatile uint32_t WFG_WFSA10;  ///< Offset: 0x8C - WFG ch.10 Control Register A
        volatile uint32_t WFG_WFSA32;  ///< Offset: 0x90 - WFG ch.32 Control Register A
        volatile uint32_t WFG_WFSA54;  ///< Offset: 0x94 - WFG ch.54 Control Register A
        volatile uint32_t WFG_WFTM10;  ///< Offset: 0x80 - WFG ch.10 Timer Value Register
        volatile uint32_t WFG_WFTM32;  ///< Offset: 0x84 - WFG ch.32 Timer Value Register
        volatile uint32_t WFG_WFTM54;  ///< Offset: 0x88 - WFG ch.54 Timer Value Register
        volatile uint32_t WFG_NZCL;  ///< Offset: 0x9C - NZCL Control Register
        volatile uint32_t WFG_WFIR;  ///< Offset: 0x98 - WFG Interrupt Control Register
        volatile uint32_t ICU_ICFS10;  ///< Offset: 0x60 - "ICU ch.1,0 Connecting FRT Select Register"
        volatile uint32_t ICU_ICFS32;  ///< Offset: 0x61 - "ICU ch.3,2 Connecting FRT Select Register"
        volatile uint32_t ICU_ICSA10;  ///< Offset: 0x78 - "ICU ch.1,0 Control Register A"
        volatile uint32_t ICU_ICSA32;  ///< Offset: 0x7C - "ICU ch.3,2 Control Register A"
        volatile uint32_t ICU_ICSB10;  ///< Offset: 0x79 - "ICU ch.1,0 Control Register B"
        volatile uint32_t ICU_ICSB32;  ///< Offset: 0x7D - "ICU ch.3,2 Control Register B"
        volatile uint32_t ICU_ICCP0;  ///< Offset: 0x68 - ICU ch.0 Capture value store register
        volatile uint32_t ICU_ICCP1;  ///< Offset: 0x6C - ICU ch.1 Capture value store register
        volatile uint32_t ICU_ICCP2;  ///< Offset: 0x70 - ICU ch.2 Capture value store register
        volatile uint32_t ICU_ICCP3;  ///< Offset: 0x74 - ICU ch.3 Capture value store register
        volatile uint32_t ADCMP_ACSA;  ///< Offset: 0xBC - ADCMP Control Register A
        volatile uint32_t ADCMP_ACSB;  ///< Offset: 0xB8 - ADCMP Control Register B
        volatile uint32_t ADCMP_ACCP0;  ///< Offset: 0xA0 - ADCMP ch.0 Compare Value Store Register
        volatile uint32_t ADCMP_ACCP1;  ///< Offset: 0xA8 - ADCMP ch.1 Compare Value Store Register
        volatile uint32_t ADCMP_ACCP2;  ///< Offset: 0xB0 - ADCMP ch.2 Compare Value Store Register
        volatile uint32_t ADCMP_ACCPDN0;  ///< Offset: 0xA4 - ADCMP ch.0 Compare Value Store Register
        volatile uint32_t ADCMP_ACCPDN1;  ///< Offset: 0xAC - ADCMP ch.1 Compare Value Store Register
        volatile uint32_t ADCMP_ACCPDN2;  ///< Offset: 0xB4 - ADCMP ch.2 Compare Value Store Register
        volatile uint32_t ADCMP_ATSA;  ///< Offset: 0xC0 - ADC Start Trigger Select Register
    };

    /// Peripheral instances
    inline Registers* MFT0 = reinterpret_cast<Registers*>(MFT0_BASE);

    // Bit definitions
    /// FRT_TCSA0 Register bits
    namespace frt_tcsa0_bits {
        constexpr uint32_t CLK = (4 << 0);  ///< FRT clock cycle
        constexpr uint32_t SCLR = (1U << 4);  ///< FRT operation state initialization request
        constexpr uint32_t MODE = (1U << 5);  ///< FRT's count mode
        constexpr uint32_t STOP = (1U << 6);  ///< Puts FRT in stopping state
        constexpr uint32_t BFE = (1U << 7);  ///< Enables TCCP's buffer function
        constexpr uint32_t ICRE = (1U << 8);  ///< "Generates interrupt when ""1"" is set to TCSA.ICLR"
        constexpr uint32_t ICLR = (1U << 9);  ///< interrupt flag
        constexpr uint32_t IRQZE = (1U << 13);  ///< "Generates interrupt, when ""1"" is set to TCSA.IRQZF"
        constexpr uint32_t IRQZF = (1U << 14);  ///< zero interrupt flag
        constexpr uint32_t ECKE = (1U << 15);  ///< Uses an external input clock (FRCK) as FRT's count clock
    }

    /// FRT_TCSB0 Register bits
    namespace frt_tcsb0_bits {
        constexpr uint32_t AD2E = (1U << 2);  ///< Outputs AD conversion start signal to ADCunit2 upon Zero value detection by FRT
        constexpr uint32_t AD1E = (1U << 1);  ///< Outputs AD conversion start signal to ADCunit1 upon Zero value detection by FRT
        constexpr uint32_t AD0E = (1U << 0);  ///< Outputs AD conversion start signal to ADCunit0 upon Zero value detection by FRT
    }

    /// OCU_OCFS10 Register bits
    namespace ocu_ocfs10_bits {
        constexpr uint32_t FSO0 = (4 << 0);  ///< Connects FRT ch.x to OCU ch.0
        constexpr uint32_t FSO1 = (4 << 4);  ///< Connects FRT ch.x to OCU ch.1
    }

    /// OCU_OCSA10 Register bits
    namespace ocu_ocsa10_bits {
        constexpr uint32_t CST0 = (1U << 0);  ///< Enables the operation of OCU ch.(0)
        constexpr uint32_t CST1 = (1U << 1);  ///< Enables the operation of OCU ch.(1)
        constexpr uint32_t BDIS0 = (1U << 2);  ///< Disables the buffer function of the OCCP(0) register
        constexpr uint32_t BDIS1 = (1U << 3);  ///< Disables the buffer function of the OCCP(1) register
        constexpr uint32_t IOE0 = (1U << 4);  ///< "Generates interrupt, when ""1"" is set to OCSA.IOP0"
        constexpr uint32_t IOE1 = (1U << 5);  ///< "Generates interrupt, when ""1"" is set to OCSA.IOP1"
        constexpr uint32_t IOP0 = (1U << 6);  ///< Indicates that a match has already been detected between FRT's count value and OCCP(0) value at OCU ch.(0).
        constexpr uint32_t IOP1 = (1U << 7);  ///< Indicates that a match has already been detected between FRT's count value and OCCP(1) value at OCU ch.(1).
    }

    /// OCU_OCSB10 Register bits
    namespace ocu_ocsb10_bits {
        constexpr uint32_t OTD0 = (1U << 0);  ///< Indicates that the RT(0) output pin is in the High-level output state.
        constexpr uint32_t OTD1 = (1U << 1);  ///< Indicates that the RT(1) output pin is in the High-level output state.
        constexpr uint32_t CMOD = (1U << 4);  ///< selects OCU's operation mode in combination with OCSC.MOD0 to MOD5
        constexpr uint32_t BTS0 = (1U << 5);  ///< Performs buffer transfer of the OCCP(0) register upon Peak value detection by FRT
        constexpr uint32_t BTS1 = (1U << 6);  ///< Performs buffer transfer of the OCCP(1) register upon Peak value detection by FRT
    }

    /// OCU_OCSC Register bits
    namespace ocu_ocsc_bits {
        constexpr uint32_t MOD0 = (1U << 8);  ///< OCSC.MOD0 and OCSC.MOD1 determine the operation mode of OCU ch.0/ch.1 in combination with OCSB10.CMOD
        constexpr uint32_t MOD1 = (1U << 9);  ///< OCSC.MOD0 and OCSC.MOD1 determine the operation mode of OCU ch.0/ch.1 in combination with OCSB10.CMOD
        constexpr uint32_t MOD2 = (1U << 10);  ///< OCSC.MOD2 and OCSC.MOD3 determine the operation mode of OCU ch.2/ch.3 in combination with OCSB32.CMOD
        constexpr uint32_t MOD3 = (1U << 11);  ///< OCSC.MOD2 and OCSC.MOD3 determine the operation mode of OCU ch.2/ch.3 in combination with OCSB32.CMOD
        constexpr uint32_t MOD4 = (1U << 12);  ///< OCSC.MOD4 and OCSC.MOD5 determine the operation mode of OCU ch.4/ch.5 in combination with OCSB54.CMOD
        constexpr uint32_t MOD5 = (1U << 13);  ///< OCSC.MOD4 and OCSC.MOD5 determine the operation mode of OCU ch.4/ch.5 in combination with OCSB54.CMOD
    }

    /// WFG_WFSA10 Register bits
    namespace wfg_wfsa10_bits {
        constexpr uint32_t DCK = (3 << 0);  ///< clock cycle of the WFG timer
        constexpr uint32_t TMD = (3 << 3);  ///< WFG's operation mode
        constexpr uint32_t GTEN = (2 << 6);  ///< the CH_GATE signal for each channel of WFG
        constexpr uint32_t PSEL = (2 << 8);  ///< the PPG timer unit to be used at each channel of WFG
        constexpr uint32_t PGEN = (2 << 10);  ///< specifies how to reflect the CH_PPG signal that is input to each channel of WFG on WFG output
        constexpr uint32_t DMOD = (1U << 12);  ///< specifies which polarity will be used to output the non-overlap signal
    }

    /// WFG_NZCL Register bits
    namespace wfg_nzcl_bits {
        constexpr uint32_t DTIE = (1U << 0);  ///< DTIF interrupt enable
        constexpr uint32_t NWS = (3 << 1);  ///< noise-canceling width of the noise-canceller for the DTTIX pin
        constexpr uint32_t SDTI = (1U << 4);  ///< Forcibly generates DTIF interrupt
    }

    /// WFG_WFIR Register bits
    namespace wfg_wfir_bits {
        constexpr uint32_t DTIF = (1U << 0);  ///< Indicates that DTIF interrupt has been generated.
        constexpr uint32_t DTIC = (1U << 1);  ///< Clears WFIR.DTIF and deasserts the DTIF interrupt signal.
        constexpr uint32_t TMIF10 = (1U << 4);  ///< Indicates that WFG10 timer interrupt has been generated.
        constexpr uint32_t TMIC10 = (1U << 5);  ///< Clears WFIR.TMIF10 and deasserts the WFG10 timer interrupt signal.
        constexpr uint32_t TMIE10 = (1U << 6);  ///< Starts the WFG10 timer
        constexpr uint32_t TMIS10 = (1U << 7);  ///< Stops the WFG10 timer
        constexpr uint32_t TMIF32 = (1U << 8);  ///< Indicates that WFG32 timer interrupt has been generated.
        constexpr uint32_t TMIC32 = (1U << 9);  ///< Clears WFIR.TMIF32 and deasserts the WFG32 timer interrupt signal.
        constexpr uint32_t TMIE32 = (1U << 10);  ///< Starts the WFG32 timer
        constexpr uint32_t TMIS32 = (1U << 11);  ///< Stops the WFG32 timer
        constexpr uint32_t TMIF54 = (1U << 12);  ///< Indicates that WFG54 timer interrupt has been generated.
        constexpr uint32_t TMIC54 = (1U << 13);  ///< Clears WFIR.TMIF54 and deasserts the WFG54 timer interrupt signal.
        constexpr uint32_t TMIE54 = (1U << 14);  ///< Starts the WFG54 timer
        constexpr uint32_t TMIS54 = (1U << 15);  ///< Stops the WFG54 timer
    }

    /// ICU_ICFS10 Register bits
    namespace icu_icfs10_bits {
        constexpr uint32_t FSI0 = (4 << 0);  ///< Connects FRT ch.x to ICU ch.(0)
        constexpr uint32_t FSI1 = (4 << 4);  ///< Connects FRT ch.x to ICU ch.(1)
    }

    /// ICU_ICSA10 Register bits
    namespace icu_icsa10_bits {
        constexpr uint32_t EG0 = (2 << 0);  ///< enables/disables the operation of ICU-ch.(0) and selects a valid edge(s)
        constexpr uint32_t EG1 = (2 << 2);  ///< enables/disables the operation of ICU-ch.(1) and selects a valid edge(s)
        constexpr uint32_t ICE0 = (1U << 4);  ///< "Generates interrupt, when ""1"" is set to ICSA.ICP0."
        constexpr uint32_t ICE1 = (1U << 5);  ///< "Generates interrupt, when ""1"" is set to ICSA.ICP1."
        constexpr uint32_t ICP0 = (1U << 6);  ///< Indicates that a valid edge has been detected at ICU ch.(0) and the capture operation has been performed
        constexpr uint32_t ICP1 = (1U << 7);  ///< Indicates that a valid edge has been detected at ICU ch.(1) and the capture operation has been performed
    }

    /// ICU_ICSB10 Register bits
    namespace icu_icsb10_bits {
        constexpr uint32_t IEI0 = (1U << 0);  ///< indicates the latest valid edge of ICU-ch.(0)
        constexpr uint32_t IEI1 = (1U << 1);  ///< indicates the latest valid edge of ICU-ch.(1)
    }

    /// ADCMP_ACSA Register bits
    namespace adcmp_acsa_bits {
        constexpr uint32_t CE0 = (2 << 0);  ///< enable or disable the operation of ADCMP-ch.0 and select the FRT to be connected
        constexpr uint32_t CE1 = (2 << 2);  ///< enable or disable the operation of ADCMP-ch.1 and select the FRT to be connected
        constexpr uint32_t CE2 = (2 << 4);  ///< enable or disable the operation of ADCMP-ch.2 and select the FRT to be connected
        constexpr uint32_t SEL0 = (2 << 8);  ///< which count state FRT should be in to instruct AD conversion to be started at ADCMP-ch.0
        constexpr uint32_t SEL1 = (2 << 10);  ///< which count state FRT should be in to instruct AD conversion to be started at ADCMP-ch.1
        constexpr uint32_t SEL2 = (2 << 12);  ///< which count state FRT should be in to instruct AD conversion to be started at ADCMP-ch.2
    }

    /// ADCMP_ACSB Register bits
    namespace adcmp_acsb_bits {
        constexpr uint32_t BDIS0 = (1U << 0);  ///< Disables the buffer function of the ACCP0 and ACCPDN0 registers
        constexpr uint32_t BDIS1 = (1U << 1);  ///< Disables the buffer function of the ACCP1 and ACCPDN1 registers
        constexpr uint32_t BDIS2 = (1U << 2);  ///< Disables the buffer function of the ACCP2 and ACCPDN2 registers
        constexpr uint32_t BTS0 = (1U << 4);  ///< Performs buffer transfer of the ACCP0 and ACCPDN0 registers upon Peak value detection by FRT
        constexpr uint32_t BTS1 = (1U << 5);  ///< Performs buffer transfer of the ACCP1 and ACCPDN1 registers upon Peak value detection by FRT
        constexpr uint32_t BTS2 = (1U << 6);  ///< Performs buffer transfer of the ACCP2 and ACCPDN2 registers upon Peak value detection by FRT
    }

    /// ADCMP_ATSA Register bits
    namespace adcmp_atsa_bits {
        constexpr uint32_t AD0S = (2 << 0);  ///< selects the start signal to be used to start the scan conversion of ADC unit0
        constexpr uint32_t AD1S = (2 << 2);  ///< selects the start signal to be used to start the scan conversion of ADC unit1
        constexpr uint32_t AD2S = (2 << 4);  ///< selects the start signal to be used to start the scan conversion of ADC unit2
        constexpr uint32_t AD0P = (2 << 8);  ///< selects the start signal to be used to start priority conversion of ADC unit0
        constexpr uint32_t AD1P = (2 << 10);  ///< selects the start signal to be used to start priority conversion of ADC unit1
        constexpr uint32_t AD2P = (2 << 12);  ///< selects the start signal to be used to start priority conversion of ADC unit2
    }

}

// ============================================================================
// MFT1 Peripheral
// ============================================================================

namespace mft1 {
    /// Base addresses
    constexpr uint32_t MFT1_BASE = 0x40021000;

    /// MFT1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFT1 = reinterpret_cast<Registers*>(MFT1_BASE);

}

// ============================================================================
// MFT2 Peripheral
// ============================================================================

namespace mft2 {
    /// Base addresses
    constexpr uint32_t MFT2_BASE = 0x40022000;

    /// MFT2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFT2 = reinterpret_cast<Registers*>(MFT2_BASE);

}

// ============================================================================
// BTIOSEL03 Peripheral
// ============================================================================

namespace btiosel03 {
    /// Base addresses
    constexpr uint32_t BTIOSEL03_BASE = 0x40025100;

    /// BTIOSEL03 Register structure
    struct Registers {
        volatile uint32_t BTSEL0123;  ///< Offset: 0x00 - I/O Select Register
    };

    /// Peripheral instances
    inline Registers* BTIOSEL03 = reinterpret_cast<Registers*>(BTIOSEL03_BASE);

    // Bit definitions
    /// BTSEL0123 Register bits
    namespace btsel0123_bits {
        constexpr uint32_t SEL23_ = (4 << 12);  ///< I/O select bits for Ch.2/Ch.3
        constexpr uint32_t SEL01_ = (4 << 8);  ///< I/O select bits for Ch.0/Ch.1
    }

}

// ============================================================================
// BTIOSEL47 Peripheral
// ============================================================================

namespace btiosel47 {
    /// Base addresses
    constexpr uint32_t BTIOSEL47_BASE = 0x40025300;

    /// BTIOSEL47 Register structure
    struct Registers {
        volatile uint32_t BTSEL4567;  ///< Offset: 0x00 - I/O Select Register
    };

    /// Peripheral instances
    inline Registers* BTIOSEL47 = reinterpret_cast<Registers*>(BTIOSEL47_BASE);

    // Bit definitions
    /// BTSEL4567 Register bits
    namespace btsel4567_bits {
        constexpr uint32_t SEL67_ = (4 << 12);  ///< I/O select bits for Ch.6/Ch.7
        constexpr uint32_t SEL45_ = (4 << 8);  ///< I/O select bits for Ch.4/Ch.5
    }

}

// ============================================================================
// BTIOSEL8B Peripheral
// ============================================================================

namespace btiosel8b {
    /// Base addresses
    constexpr uint32_t BTIOSEL8B_BASE = 0x40025500;

    /// BTIOSEL8B Register structure
    struct Registers {
        volatile uint32_t BTSEL89AB;  ///< Offset: 0x00 - I/O Select Register
    };

    /// Peripheral instances
    inline Registers* BTIOSEL8B = reinterpret_cast<Registers*>(BTIOSEL8B_BASE);

    // Bit definitions
    /// BTSEL89AB Register bits
    namespace btsel89ab_bits {
        constexpr uint32_t SELAB_ = (4 << 12);  ///< I/O select bits for Ch.A/Ch.B
        constexpr uint32_t SEL89_ = (4 << 8);  ///< I/O select bits for Ch.8/Ch.9
    }

}

// ============================================================================
// BTIOSELCF Peripheral
// ============================================================================

namespace btioselcf {
    /// Base addresses
    constexpr uint32_t BTIOSELCF_BASE = 0x40025700;

    /// BTIOSELCF Register structure
    struct Registers {
        volatile uint32_t BTSELCDEF;  ///< Offset: 0x00 - I/O Select Register
    };

    /// Peripheral instances
    inline Registers* BTIOSELCF = reinterpret_cast<Registers*>(BTIOSELCF_BASE);

    // Bit definitions
    /// BTSELCDEF Register bits
    namespace btselcdef_bits {
        constexpr uint32_t SELEF_ = (4 << 12);  ///< I/O select bits for Ch.E/Ch.F
        constexpr uint32_t SELCD_ = (4 << 8);  ///< I/O select bits for Ch.C/Ch.D
    }

}

// ============================================================================
// SBSSR Peripheral
// ============================================================================

namespace sbssr {
    /// Base addresses
    constexpr uint32_t SBSSR_BASE = 0x40025F00;

    /// SBSSR Register structure
    struct Registers {
        volatile uint32_t BTSSSR;  ///< Offset: 0xFC - Software-based Simultaneous Startup Register
    };

    /// Peripheral instances
    inline Registers* SBSSR = reinterpret_cast<Registers*>(SBSSR_BASE);

    // Bit definitions
    /// BTSSSR Register bits
    namespace btsssr_bits {
        constexpr uint32_t SSSR15 = (1U << 15);  ///< Bit15 of BTSSSR
        constexpr uint32_t SSSR14 = (1U << 14);  ///< Bit14 of BTSSSR
        constexpr uint32_t SSSR13 = (1U << 13);  ///< Bit13 of BTSSSR
        constexpr uint32_t SSSR12 = (1U << 12);  ///< Bit12 of BTSSSR
        constexpr uint32_t SSSR11 = (1U << 11);  ///< Bit11 of BTSSSR
        constexpr uint32_t SSSR10 = (1U << 10);  ///< Bit10 of BTSSSR
        constexpr uint32_t SSSR9 = (1U << 9);  ///< Bit9 of BTSSSR
        constexpr uint32_t SSSR8 = (1U << 8);  ///< Bit8 of BTSSSR
        constexpr uint32_t SSSR7 = (1U << 7);  ///< Bit7 of BTSSSR
        constexpr uint32_t SSSR6 = (1U << 6);  ///< Bit6 of BTSSSR
        constexpr uint32_t SSSR5 = (1U << 5);  ///< Bit5 of BTSSSR
        constexpr uint32_t SSSR4 = (1U << 4);  ///< Bit4 of BTSSSR
        constexpr uint32_t SSSR3 = (1U << 3);  ///< Bit3 of BTSSSR
        constexpr uint32_t SSSR2 = (1U << 2);  ///< Bit2 of BTSSSR
        constexpr uint32_t SSSR1 = (1U << 1);  ///< Bit1 of BTSSSR
        constexpr uint32_t SSSR0 = (1U << 0);  ///< Bit0 of BTSSSR
    }

}

// ============================================================================
// BT0 Peripheral
// ============================================================================

namespace bt0 {
    /// Base addresses
    constexpr uint32_t BT0_BASE = 0x40025000;

    /// BT0 Register structure
    struct Registers {
        volatile uint32_t PWM_TMCR;  ///< Offset: 0x0C - Timer Control Register
        volatile uint32_t PWM_TMCR2;  ///< Offset: 0x11 - Timer Control Register 2
        volatile uint32_t PWM_STC;  ///< Offset: 0x10 - Status Control Register
        volatile uint32_t PWM_PCSR;  ///< Offset: 0x00 - PWM Cycle Set Register
        volatile uint32_t PWM_PDUT;  ///< Offset: 0x04 - PWM Duty Set Register
        volatile uint32_t PWM_TMR;  ///< Offset: 0x08 - Timer Register
        volatile uint32_t PPG_TMCR;  ///< Offset: 0x0C - Timer Control Register
        volatile uint32_t PPG_TMCR2;  ///< Offset: 0x11 - Timer Control Register 2
        volatile uint32_t PPG_STC;  ///< Offset: 0x10 - Status Control Register
        volatile uint32_t PPG_PRLL;  ///< Offset: 0x00 - LOW Width Reload Register
        volatile uint32_t PPG_PRLH;  ///< Offset: 0x04 - HIGH Width Reload Register
        volatile uint32_t PPG_TMR;  ///< Offset: 0x08 - Timer Register
        volatile uint32_t RT_TMCR;  ///< Offset: 0x0C - Timer Control Register
        volatile uint32_t RT_TMCR2;  ///< Offset: 0x11 - Timer Control Register 2
        volatile uint32_t RT_STC;  ///< Offset: 0x10 - Status Control Register
        volatile uint32_t RT_PCSR;  ///< Offset: 0x00 - PWM Cycle Set Register
        volatile uint32_t RT_TMR;  ///< Offset: 0x08 - Timer Register
        volatile uint32_t PWC_TMCR;  ///< Offset: 0x0C - Timer Control Register
        volatile uint32_t PWC_TMCR2;  ///< Offset: 0x11 - Timer Control Register 2
        volatile uint32_t PWC_STC;  ///< Offset: 0x10 - Status Control Register
        volatile uint32_t PWC_DTBF;  ///< Offset: 0x04 - Data Buffer Register
    };

    /// Peripheral instances
    inline Registers* BT0 = reinterpret_cast<Registers*>(BT0_BASE);

    // Bit definitions
    /// PWM_TMCR Register bits
    namespace pwm_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< Count clock selection bit
        constexpr uint32_t RTGEN = (1U << 11);  ///< Restart enable bit
        constexpr uint32_t PMSK = (1U << 10);  ///< Pulse output mask bit
        constexpr uint32_t EGS = (2 << 8);  ///< Trigger input edge selection bits
        constexpr uint32_t FMD = (3 << 4);  ///< Timer function selection bits
        constexpr uint32_t OSEL = (1U << 3);  ///< Output polarity specification bit
        constexpr uint32_t MDSE = (1U << 2);  ///< Mode selection bit
        constexpr uint32_t CTEN = (1U << 1);  ///< Count operation enable bit
        constexpr uint32_t STRG = (1U << 0);  ///< Software trigger bit
    }

    /// PWM_TMCR2 Register bits
    namespace pwm_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< Count clock selection bit
    }

    /// PWM_STC Register bits
    namespace pwm_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< Trigger interrupt request enable bit
        constexpr uint32_t DTIE = (1U << 5);  ///< Duty match interrupt request enable bit
        constexpr uint32_t UDIE = (1U << 4);  ///< Underflow interrupt request enable bit
        constexpr uint32_t TGIR = (1U << 2);  ///< Trigger interrupt request bit
        constexpr uint32_t DTIR = (1U << 1);  ///< Duty match interrupt request bit
        constexpr uint32_t UDIR = (1U << 0);  ///< Underflow interrupt request bit
    }

    /// PPG_TMCR Register bits
    namespace ppg_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< Count clock selection bit
        constexpr uint32_t RTGEN = (1U << 11);  ///< Restart enable bit
        constexpr uint32_t PMSK = (1U << 10);  ///< Pulse output mask bit
        constexpr uint32_t EGS = (2 << 8);  ///< Trigger input edge selection bits
        constexpr uint32_t FMD = (3 << 4);  ///< Timer function selection bits
        constexpr uint32_t OSEL = (1U << 3);  ///< Output polarity specification bit
        constexpr uint32_t MDSE = (1U << 2);  ///< Mode selection bit
        constexpr uint32_t CTEN = (1U << 1);  ///< Count operation enable bit
        constexpr uint32_t STRG = (1U << 0);  ///< Software trigger bit
    }

    /// PPG_TMCR2 Register bits
    namespace ppg_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< Count clock selection bit
    }

    /// PPG_STC Register bits
    namespace ppg_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< Trigger interrupt request enable bit
        constexpr uint32_t UDIE = (1U << 4);  ///< Underflow interrupt request enable bit
        constexpr uint32_t TGIR = (1U << 2);  ///< Trigger interrupt request bit
        constexpr uint32_t UDIR = (1U << 0);  ///< Underflow interrupt request bit
    }

    /// RT_TMCR Register bits
    namespace rt_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< Count clock selection bit
        constexpr uint32_t EGS = (2 << 8);  ///< Trigger input edge selection bits
        constexpr uint32_t T32 = (1U << 7);  ///< 32-bit timer selection bit
        constexpr uint32_t FMD = (3 << 4);  ///< Timer function selection bits
        constexpr uint32_t OSEL = (1U << 3);  ///< Output polarity specification bit
        constexpr uint32_t MDSE = (1U << 2);  ///< Mode selection bit
        constexpr uint32_t CTEN = (1U << 1);  ///< Timer enable bit
        constexpr uint32_t STRG = (1U << 0);  ///< Software trigger bit
    }

    /// RT_TMCR2 Register bits
    namespace rt_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< Count clock selection bit
    }

    /// RT_STC Register bits
    namespace rt_stc_bits {
        constexpr uint32_t TGIE = (1U << 6);  ///< Trigger interrupt request enable bit
        constexpr uint32_t UDIE = (1U << 4);  ///< Underflow interrupt request enable bit
        constexpr uint32_t TGIR = (1U << 2);  ///< Trigger interrupt request bit
        constexpr uint32_t UDIR = (1U << 0);  ///< Underflow interrupt request bit
    }

    /// PWC_TMCR Register bits
    namespace pwc_tmcr_bits {
        constexpr uint32_t CKS2_0 = (3 << 12);  ///< Count clock selection bit
        constexpr uint32_t EGS = (3 << 8);  ///< Measurement edge selection bits
        constexpr uint32_t T32 = (1U << 7);  ///< 32-bit timer selection bit
        constexpr uint32_t FMD = (3 << 4);  ///< Timer function selection bits
        constexpr uint32_t MDSE = (1U << 2);  ///< Mode selection bit
        constexpr uint32_t CTEN = (1U << 1);  ///< Timer enable bit
    }

    /// PWC_TMCR2 Register bits
    namespace pwc_tmcr2_bits {
        constexpr uint32_t CKS3 = (1U << 0);  ///< Count clock selection bit
    }

    /// PWC_STC Register bits
    namespace pwc_stc_bits {
        constexpr uint32_t ERR = (1U << 7);  ///< Error flag bit
        constexpr uint32_t EDIE = (1U << 6);  ///< Measurement completion interrupt request enable bit
        constexpr uint32_t OVIE = (1U << 4);  ///< Overflow interrupt request enable bit
        constexpr uint32_t EDIR = (1U << 2);  ///< Measurement completion interrupt request bit
        constexpr uint32_t OVIR = (1U << 0);  ///< Overflow interrupt request bit
    }

}

// ============================================================================
// BT1 Peripheral
// ============================================================================

namespace bt1 {
    /// Base addresses
    constexpr uint32_t BT1_BASE = 0x40025040;

    /// BT1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT1 = reinterpret_cast<Registers*>(BT1_BASE);

}

// ============================================================================
// BT2 Peripheral
// ============================================================================

namespace bt2 {
    /// Base addresses
    constexpr uint32_t BT2_BASE = 0x40025080;

    /// BT2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT2 = reinterpret_cast<Registers*>(BT2_BASE);

}

// ============================================================================
// BT3 Peripheral
// ============================================================================

namespace bt3 {
    /// Base addresses
    constexpr uint32_t BT3_BASE = 0x400250C0;

    /// BT3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT3 = reinterpret_cast<Registers*>(BT3_BASE);

}

// ============================================================================
// BT4 Peripheral
// ============================================================================

namespace bt4 {
    /// Base addresses
    constexpr uint32_t BT4_BASE = 0x40025200;

    /// BT4 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT4 = reinterpret_cast<Registers*>(BT4_BASE);

}

// ============================================================================
// BT5 Peripheral
// ============================================================================

namespace bt5 {
    /// Base addresses
    constexpr uint32_t BT5_BASE = 0x40025240;

    /// BT5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT5 = reinterpret_cast<Registers*>(BT5_BASE);

}

// ============================================================================
// BT6 Peripheral
// ============================================================================

namespace bt6 {
    /// Base addresses
    constexpr uint32_t BT6_BASE = 0x40025280;

    /// BT6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT6 = reinterpret_cast<Registers*>(BT6_BASE);

}

// ============================================================================
// BT7 Peripheral
// ============================================================================

namespace bt7 {
    /// Base addresses
    constexpr uint32_t BT7_BASE = 0x400252C0;

    /// BT7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT7 = reinterpret_cast<Registers*>(BT7_BASE);

}

// ============================================================================
// BT8 Peripheral
// ============================================================================

namespace bt8 {
    /// Base addresses
    constexpr uint32_t BT8_BASE = 0x40025400;

    /// BT8 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT8 = reinterpret_cast<Registers*>(BT8_BASE);

}

// ============================================================================
// BT9 Peripheral
// ============================================================================

namespace bt9 {
    /// Base addresses
    constexpr uint32_t BT9_BASE = 0x40025440;

    /// BT9 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT9 = reinterpret_cast<Registers*>(BT9_BASE);

}

// ============================================================================
// BT10 Peripheral
// ============================================================================

namespace bt10 {
    /// Base addresses
    constexpr uint32_t BT10_BASE = 0x40025480;

    /// BT10 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT10 = reinterpret_cast<Registers*>(BT10_BASE);

}

// ============================================================================
// BT11 Peripheral
// ============================================================================

namespace bt11 {
    /// Base addresses
    constexpr uint32_t BT11_BASE = 0x400254C0;

    /// BT11 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT11 = reinterpret_cast<Registers*>(BT11_BASE);

}

// ============================================================================
// BT12 Peripheral
// ============================================================================

namespace bt12 {
    /// Base addresses
    constexpr uint32_t BT12_BASE = 0x40025600;

    /// BT12 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT12 = reinterpret_cast<Registers*>(BT12_BASE);

}

// ============================================================================
// BT13 Peripheral
// ============================================================================

namespace bt13 {
    /// Base addresses
    constexpr uint32_t BT13_BASE = 0x40025640;

    /// BT13 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT13 = reinterpret_cast<Registers*>(BT13_BASE);

}

// ============================================================================
// BT14 Peripheral
// ============================================================================

namespace bt14 {
    /// Base addresses
    constexpr uint32_t BT14_BASE = 0x40025680;

    /// BT14 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT14 = reinterpret_cast<Registers*>(BT14_BASE);

}

// ============================================================================
// BT15 Peripheral
// ============================================================================

namespace bt15 {
    /// Base addresses
    constexpr uint32_t BT15_BASE = 0x400256C0;

    /// BT15 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* BT15 = reinterpret_cast<Registers*>(BT15_BASE);

}

// ============================================================================
// QPRC0 Peripheral
// ============================================================================

namespace qprc0 {
    /// Base addresses
    constexpr uint32_t QPRC0_BASE = 0x40026000;

    /// QPRC0 Register structure
    struct Registers {
        volatile uint32_t QPCR;  ///< Offset: 0x00 - QPRC Position Count Register
        volatile uint32_t QRCR;  ///< Offset: 0x04 - QPRC Revolution Count Register
        volatile uint32_t QPCCR;  ///< Offset: 0x08 - QPRC Position Counter Compare Register
        volatile uint32_t QPRCR;  ///< Offset: 0x0C - QPRC Position and Revolution Counter Compare Register
        volatile uint32_t QCR;  ///< Offset: 0x18 - QPRC Control Register
        volatile uint32_t QECR;  ///< Offset: 0x1C - QPRC Extension Control Register
        volatile uint32_t QICRL;  ///< Offset: 0x14 - Low-Order Bytes of QPRC Interrupt Control Register
        volatile uint32_t QICRH;  ///< Offset: 0x15 - High-Order Bytes of QPRC Interrupt Control Register
        volatile uint32_t QMPR;  ///< Offset: 0x10 - QPRC Maximum Position Register
        volatile uint32_t QRCRR;  ///< Offset: 0x3C - Quad counter rotation count Register
        volatile uint32_t QPCRR;  ///< Offset: 0x3E - Quad counter position count Register
    };

    /// Peripheral instances
    inline Registers* QPRC0 = reinterpret_cast<Registers*>(QPRC0_BASE);

    // Bit definitions
    /// QCR Register bits
    namespace qcr_bits {
        constexpr uint32_t CGE = (2 << 14);  ///< Detection edge selection bits
        constexpr uint32_t BES = (2 << 12);  ///< BIN detection edge selection bits
        constexpr uint32_t AES = (2 << 10);  ///< AIN detection edge selection bits
        constexpr uint32_t PCRM = (2 << 8);  ///< Position counter reset mask bits
        constexpr uint32_t SWAP = (1U << 7);  ///< Swap bit
        constexpr uint32_t RSEL = (1U << 6);  ///< Register function selection bit
        constexpr uint32_t CGSC = (1U << 5);  ///< Count clear or gate selection bit
        constexpr uint32_t PSTP = (1U << 4);  ///< Position counter stop bit
        constexpr uint32_t RCM = (2 << 2);  ///< Revolution counter mode bits
        constexpr uint32_t PCM = (2 << 0);  ///< Position counter mode bits
    }

    /// QECR Register bits
    namespace qecr_bits {
        constexpr uint32_t ORNGIE = (1U << 2);  ///< Outrange interrupt enable bit
        constexpr uint32_t ORNGF = (1U << 1);  ///< Outrange interrupt request flag bit
        constexpr uint32_t ORNGMD = (1U << 0);  ///< Outrange mode selection bit
    }

    /// QICRL Register bits
    namespace qicrl_bits {
        constexpr uint32_t ZIIF = (1U << 7);  ///< Zero index interrupt request flag bit
        constexpr uint32_t OFDF = (1U << 6);  ///< Overflow interrupt request flag bit
        constexpr uint32_t UFDF = (1U << 5);  ///< Underflow interrupt request flag bit
        constexpr uint32_t OUZIE = (1U << 4);  ///< "Overflow, underflow, or zero index interrupt enable bit"
        constexpr uint32_t QPRCMF = (1U << 3);  ///< PC and RC match interrupt request flag bit
        constexpr uint32_t QPRCMIE = (1U << 2);  ///< PC and RC match interrupt enable bit
        constexpr uint32_t QPCMF = (1U << 1);  ///< PC match interrupt request flag bit
        constexpr uint32_t QPCMIE = (1U << 0);  ///< PC match interrupt enable bit
    }

    /// QICRH Register bits
    namespace qicrh_bits {
        constexpr uint32_t QPCNRCMF = (1U << 5);  ///< PC match and RC match interrupt request flag bit
        constexpr uint32_t QPCNRCMIE = (1U << 4);  ///< PC match and RC match interrupt enable bit
        constexpr uint32_t DIROU = (1U << 3);  ///< Last position counter flow direction bit
        constexpr uint32_t DIRPC = (1U << 2);  ///< Last position counter direction bit
        constexpr uint32_t CDCF = (1U << 1);  ///< Count inversion interrupt request flag bit
        constexpr uint32_t CDCIE = (1U << 0);  ///< Count inversion interrupt enable bit
    }

}

// ============================================================================
// QPRC1 Peripheral
// ============================================================================

namespace qprc1 {
    /// Base addresses
    constexpr uint32_t QPRC1_BASE = 0x40026040;

    /// QPRC1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* QPRC1 = reinterpret_cast<Registers*>(QPRC1_BASE);

}

// ============================================================================
// QPRC2 Peripheral
// ============================================================================

namespace qprc2 {
    /// Base addresses
    constexpr uint32_t QPRC2_BASE = 0x40026080;

    /// QPRC2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* QPRC2 = reinterpret_cast<Registers*>(QPRC2_BASE);

}

// ============================================================================
// WC Peripheral
// ============================================================================

namespace wc {
    /// Base addresses
    constexpr uint32_t WC_BASE = 0x4003A000;

    /// WC Register structure
    struct Registers {
        volatile uint32_t WCRD;  ///< Offset: 0x00 - Watch Counter Read Register
        volatile uint32_t WCRL;  ///< Offset: 0x01 - Watch Counter Reload Register
        volatile uint32_t WCCR;  ///< Offset: 0x02 - Watch Counter Control Register
        volatile uint32_t CLK_SEL;  ///< Offset: 0x10 - Clock Selection Register
        volatile uint32_t CLK_EN;  ///< Offset: 0x14 - Division Clock Enable Register
    };

    /// Peripheral instances
    inline Registers* WC = reinterpret_cast<Registers*>(WC_BASE);

    // Bit definitions
    /// WCRD Register bits
    namespace wcrd_bits {
        constexpr uint32_t CTR = (6 << 0);  ///< counter value
    }

    /// WCRL Register bits
    namespace wcrl_bits {
        constexpr uint32_t RLC = (6 << 0);  ///< reload value
    }

    /// WCCR Register bits
    namespace wccr_bits {
        constexpr uint32_t WCEN = (1U << 7);  ///< Watch counter operation enable bit
        constexpr uint32_t WCOP = (1U << 6);  ///< Watch counter operating state flag
        constexpr uint32_t CS = (2 << 2);  ///< Count clock select bits
        constexpr uint32_t WCIE = (1U << 1);  ///< Interrupt request enable bit
        constexpr uint32_t WCIF = (1U << 0);  ///< Interrupt request flag bit
    }

    /// CLK_SEL Register bits
    namespace clk_sel_bits {
        constexpr uint32_t SEL_OUT = (1U << 8);  ///< Output clock selection bit
        constexpr uint32_t SEL_IN = (1U << 0);  ///< Input clock selection bit
    }

    /// CLK_EN Register bits
    namespace clk_en_bits {
        constexpr uint32_t CLK_EN_R = (1U << 1);  ///< Division clock enable read bit
        constexpr uint32_t CLK_EN = (1U << 0);  ///< Division clock enable bit
    }

}

// ============================================================================
// MFT Peripheral
// ============================================================================

namespace mft {
    /// Base addresses
    constexpr uint32_t MFT_PPG_BASE = 0x40024000;

    /// MFT Register structure
    struct Registers {
        volatile uint32_t TTCR0;  ///< Offset: 0x00 - PPG Start Trigger Control Register 0
        volatile uint32_t TTCR1;  ///< Offset: 0x20 - PPG Start Trigger Control Register 1
        volatile uint32_t TTCR2;  ///< Offset: 0x40 - PPG Start Trigger Control Register 2
        volatile uint32_t COMP0;  ///< Offset: 0x08 - PPG Compare Register 0
        volatile uint32_t COMP2;  ///< Offset: 0x0C - PPG Compare Register 2
        volatile uint32_t COMP4;  ///< Offset: 0x10 - PPG Compare Register 4
        volatile uint32_t COMP6;  ///< Offset: 0x14 - PPG Compare Register 6
        volatile uint32_t COMP1;  ///< Offset: 0x28 - PPG Compare Register 1
        volatile uint32_t COMP3;  ///< Offset: 0x2C - PPG Compare Register 3
        volatile uint32_t COMP5;  ///< Offset: 0x30 - PPG Compare Register 5
        volatile uint32_t COMP7;  ///< Offset: 0x34 - PPG Compare Register 7
        volatile uint32_t COMP8;  ///< Offset: 0x48 - PPG Compare Register 8
        volatile uint32_t COMP10;  ///< Offset: 0x4C - PPG Compare Register 10
        volatile uint32_t COMP12;  ///< Offset: 0x50 - PPG Compare Register 12
        volatile uint32_t COMP14;  ///< Offset: 0x54 - PPG Compare Register 14
        volatile uint32_t TRG;  ///< Offset: 0x100 - PPG Start Register 0
        volatile uint32_t TRG1;  ///< Offset: 0x140 - PPG Start Register 1
        volatile uint32_t REVC;  ///< Offset: 0x104 - Output Reverse Register 0
        volatile uint32_t REVC1;  ///< Offset: 0x144 - Output Reverse Register 1
        volatile uint32_t PPGC0;  ///< Offset: 0x201 - PPG Operation Mode Control Register 0
        volatile uint32_t PPGC1;  ///< Offset: 0x200 - PPG Operation Mode Control Register 1
        volatile uint32_t PPGC2;  ///< Offset: 0x205 - PPG Operation Mode Control Register 2
        volatile uint32_t PPGC3;  ///< Offset: 0x204 - PPG Operation Mode Control Register 3
        volatile uint32_t PPGC4;  ///< Offset: 0x241 - PPG Operation Mode Control Register 4
        volatile uint32_t PPGC5;  ///< Offset: 0x240 - PPG Operation Mode Control Register 5
        volatile uint32_t PPGC6;  ///< Offset: 0x245 - PPG Operation Mode Control Register 6
        volatile uint32_t PPGC7;  ///< Offset: 0x244 - PPG Operation Mode Control Register 7
        volatile uint32_t PPGC8;  ///< Offset: 0x281 - PPG Operation Mode Control Register 8
        volatile uint32_t PPGC9;  ///< Offset: 0x280 - PPG Operation Mode Control Register 9
        volatile uint32_t PPGC10;  ///< Offset: 0x285 - PPG Operation Mode Control Register 10
        volatile uint32_t PPGC11;  ///< Offset: 0x284 - PPG Operation Mode Control Register 11
        volatile uint32_t PPGC12;  ///< Offset: 0x2C1 - PPG Operation Mode Control Register 12
        volatile uint32_t PPGC13;  ///< Offset: 0x2C0 - PPG Operation Mode Control Register 13
        volatile uint32_t PPGC14;  ///< Offset: 0x2C5 - PPG Operation Mode Control Register 14
        volatile uint32_t PPGC15;  ///< Offset: 0x2C4 - PPG Operation Mode Control Register 15
        volatile uint32_t PPGC16;  ///< Offset: 0x301 - PPG Operation Mode Control Register 16
        volatile uint32_t PPGC17;  ///< Offset: 0x300 - PPG Operation Mode Control Register 17
        volatile uint32_t PPGC18;  ///< Offset: 0x305 - PPG Operation Mode Control Register 18
        volatile uint32_t PPGC19;  ///< Offset: 0x304 - PPG Operation Mode Control Register 19
        volatile uint32_t PPGC20;  ///< Offset: 0x341 - PPG Operation Mode Control Register 20
        volatile uint32_t PPGC21;  ///< Offset: 0x340 - PPG Operation Mode Control Register 21
        volatile uint32_t PPGC22;  ///< Offset: 0x345 - PPG Operation Mode Control Register 22
        volatile uint32_t PPGC23;  ///< Offset: 0x344 - PPG Operation Mode Control Register 23
        volatile uint32_t PRLH0;  ///< Offset: 0x209 - PPG0 Reload Registers High
        volatile uint32_t PRLL0;  ///< Offset: 0x208 - PPG0 Reload Registers Low
        volatile uint32_t PRLH1;  ///< Offset: 0x20D - PPG1 Reload Registers High
        volatile uint32_t PRLL1;  ///< Offset: 0x20C - PPG1 Reload Registers Low
        volatile uint32_t PRLH2;  ///< Offset: 0x211 - PPG2 Reload Registers High
        volatile uint32_t PRLL2;  ///< Offset: 0x210 - PPG2 Reload Registers Low
        volatile uint32_t PRLH3;  ///< Offset: 0x215 - PPG3 Reload Registers High
        volatile uint32_t PRLL3;  ///< Offset: 0x214 - PPG3 Reload Registers Low
        volatile uint32_t PRLH4;  ///< Offset: 0x249 - PPG4 Reload Registers High
        volatile uint32_t PRLL4;  ///< Offset: 0x248 - PPG4 Reload Registers Low
        volatile uint32_t PRLH5;  ///< Offset: 0x24D - PPG5 Reload Registers High
        volatile uint32_t PRLL5;  ///< Offset: 0x24C - PPG5 Reload Registers Low
        volatile uint32_t PRLH6;  ///< Offset: 0x251 - PPG6 Reload Registers High
        volatile uint32_t PRLL6;  ///< Offset: 0x250 - PPG6 Reload Registers Low
        volatile uint32_t PRLH7;  ///< Offset: 0x255 - PPG7 Reload Registers High
        volatile uint32_t PRLL7;  ///< Offset: 0x254 - PPG7 Reload Registers Low
        volatile uint32_t PRLH8;  ///< Offset: 0x289 - PPG8 Reload Registers High
        volatile uint32_t PRLL8;  ///< Offset: 0x288 - PPG8 Reload Registers Low
        volatile uint32_t PRLH9;  ///< Offset: 0x28D - PPG9 Reload Registers High
        volatile uint32_t PRLL9;  ///< Offset: 0x28C - PPG9 Reload Registers Low
        volatile uint32_t PRLH10;  ///< Offset: 0x291 - PPG10 Reload Registers High
        volatile uint32_t PRLL10;  ///< Offset: 0x290 - PPG10 Reload Registers Low
        volatile uint32_t PRLH11;  ///< Offset: 0x295 - PPG11 Reload Registers High
        volatile uint32_t PRLL11;  ///< Offset: 0x294 - PPG11 Reload Registers Low
        volatile uint32_t PRLH12;  ///< Offset: 0x2C9 - PPG12 Reload Registers High
        volatile uint32_t PRLL12;  ///< Offset: 0x2C8 - PPG12 Reload Registers Low
        volatile uint32_t PRLH13;  ///< Offset: 0x2CD - PPG13 Reload Registers High
        volatile uint32_t PRLL13;  ///< Offset: 0x2CC - PPG13 Reload Registers Low
        volatile uint32_t PRLH14;  ///< Offset: 0x2D1 - PPG14 Reload Registers High
        volatile uint32_t PRLL14;  ///< Offset: 0x2D0 - PPG14 Reload Registers Low
        volatile uint32_t PRLH15;  ///< Offset: 0x2D5 - PPG15 Reload Registers High
        volatile uint32_t PRLL15;  ///< Offset: 0x2D4 - PPG15 Reload Registers Low
        volatile uint32_t PRLH16;  ///< Offset: 0x309 - PPG16 Reload Registers High
        volatile uint32_t PRLL16;  ///< Offset: 0x308 - PPG16 Reload Registers Low
        volatile uint32_t PRLH17;  ///< Offset: 0x30D - PPG17 Reload Registers High
        volatile uint32_t PRLL17;  ///< Offset: 0x30C - PPG17 Reload Registers Low
        volatile uint32_t PRLH18;  ///< Offset: 0x311 - PPG18 Reload Registers High
        volatile uint32_t PRLL18;  ///< Offset: 0x310 - PPG18 Reload Registers Low
        volatile uint32_t PRLH19;  ///< Offset: 0x315 - PPG19 Reload Registers High
        volatile uint32_t PRLL19;  ///< Offset: 0x314 - PPG19 Reload Registers Low
        volatile uint32_t PRLH20;  ///< Offset: 0x349 - PPG20 Reload Registers High
        volatile uint32_t PRLL20;  ///< Offset: 0x348 - PPG20 Reload Registers Low
        volatile uint32_t PRLH21;  ///< Offset: 0x34D - PPG21 Reload Registers High
        volatile uint32_t PRLL21;  ///< Offset: 0x34C - PPG21 Reload Registers Low
        volatile uint32_t PRLH22;  ///< Offset: 0x351 - PPG22 Reload Registers High
        volatile uint32_t PRLL22;  ///< Offset: 0x350 - PPG22 Reload Registers Low
        volatile uint32_t PRLH23;  ///< Offset: 0x355 - PPG23 Reload Registers High
        volatile uint32_t PRLL23;  ///< Offset: 0x354 - PPG23 Reload Registers Low
        volatile uint32_t GATEC0;  ///< Offset: 0x218 - PPG Gate Function Control Registers 0
        volatile uint32_t GATEC4;  ///< Offset: 0x258 - PPG Gate Function Control Registers 4
        volatile uint32_t GATEC8;  ///< Offset: 0x298 - PPG Gate Function Control Registers 8
        volatile uint32_t GATEC12;  ///< Offset: 0x2D8 - PPG Gate Function Control Registers 12
        volatile uint32_t GATEC16;  ///< Offset: 0x318 - PPG Gate Function Control Registers 16
        volatile uint32_t GATEC20;  ///< Offset: 0x358 - PPG Gate Function Control Registers 20
    };

    /// Peripheral instances
    inline Registers* MFT_PPG = reinterpret_cast<Registers*>(MFT_PPG_BASE);

    // Bit definitions
    /// TTCR0 Register bits
    namespace ttcr0_bits {
        constexpr uint32_t TRG6O = (1U << 15);  ///< PPG6 trigger stop bit
        constexpr uint32_t TRG4O = (1U << 14);  ///< PPG4 trigger stop bit
        constexpr uint32_t TRG2O = (1U << 13);  ///< PPG2 trigger stop bit
        constexpr uint32_t TRG0O = (1U << 12);  ///< PPG0 trigger stop bit
        constexpr uint32_t CS0 = (2 << 10);  ///< 8-bit UP counter clock select bits for comparison
        constexpr uint32_t MONI0 = (1U << 9);  ///< 8-bit UP counter operation state monitor bit for comparison
        constexpr uint32_t STR0 = (1U << 8);  ///< 8-bit UP counter operation enable bit for comparison
    }

    /// TTCR1 Register bits
    namespace ttcr1_bits {
        constexpr uint32_t TRG7O = (1U << 15);  ///< PPG7 trigger stop bit
        constexpr uint32_t TRG5O = (1U << 14);  ///< PPG5 trigger stop bit
        constexpr uint32_t TRG3O = (1U << 13);  ///< PPG3 trigger stop bit
        constexpr uint32_t TRG1O = (1U << 12);  ///< PPG1 trigger stop bit
        constexpr uint32_t CS1 = (2 << 10);  ///< 8-bit UP counter clock select bits for comparison
        constexpr uint32_t MONI1 = (1U << 9);  ///< 8-bit UP counter operation state monitor bit for comparison
        constexpr uint32_t STR1 = (1U << 8);  ///< 8-bit UP counter operation enable bit for comparison
    }

    /// TTCR2 Register bits
    namespace ttcr2_bits {
        constexpr uint32_t TRG22O = (1U << 15);  ///< PPG22 trigger stop bit
        constexpr uint32_t TRG20O = (1U << 14);  ///< PPG20 trigger stop bit
        constexpr uint32_t TRG18O = (1U << 13);  ///< PPG18 trigger stop bit
        constexpr uint32_t TRG16O = (1U << 12);  ///< PPG16 trigger stop bit
        constexpr uint32_t CS2 = (2 << 10);  ///< 8-bit UP counter clock select bits for comparison
        constexpr uint32_t MONI2 = (1U << 9);  ///< 8-bit UP counter operation state monitor bit for comparison
        constexpr uint32_t STR2 = (1U << 8);  ///< 8-bit UP counter operation enable bit for comparison
    }

    /// TRG Register bits
    namespace trg_bits {
        constexpr uint32_t PEN15 = (1U << 15);  ///< PPG15 Start Trigger bit
        constexpr uint32_t PEN14 = (1U << 14);  ///< PPG14 Start Trigger bit
        constexpr uint32_t PEN13 = (1U << 13);  ///< PPG13 Start Trigger bit
        constexpr uint32_t PEN12 = (1U << 12);  ///< PPG12 Start Trigger bit
        constexpr uint32_t PEN11 = (1U << 11);  ///< PPG11 Start Trigger bit
        constexpr uint32_t PEN10 = (1U << 10);  ///< PPG10 Start Trigger bit
        constexpr uint32_t PEN09 = (1U << 9);  ///< PPG9 Start Trigger bit
        constexpr uint32_t PEN08 = (1U << 8);  ///< PPG8 Start Trigger bit
        constexpr uint32_t PEN07 = (1U << 7);  ///< PPG7 Start Trigger bit
        constexpr uint32_t PEN06 = (1U << 6);  ///< PPG6 Start Trigger bit
        constexpr uint32_t PEN05 = (1U << 5);  ///< PPG5 Start Trigger bit
        constexpr uint32_t PEN04 = (1U << 4);  ///< PPG4 Start Trigger bit
        constexpr uint32_t PEN03 = (1U << 3);  ///< PPG3 Start Trigger bit
        constexpr uint32_t PEN02 = (1U << 2);  ///< PPG2 Start Trigger bit
        constexpr uint32_t PEN01 = (1U << 1);  ///< PPG1 Start Trigger bit
        constexpr uint32_t PEN00 = (1U << 0);  ///< PPG0 Start Trigger bit
    }

    /// TRG1 Register bits
    namespace trg1_bits {
        constexpr uint32_t PEN23 = (1U << 7);  ///< PPG23 Start Trigger bit
        constexpr uint32_t PEN22 = (1U << 6);  ///< PPG22 Start Trigger bit
        constexpr uint32_t PEN21 = (1U << 5);  ///< PPG21 Start Trigger bit
        constexpr uint32_t PEN20 = (1U << 4);  ///< PPG20 Start Trigger bit
        constexpr uint32_t PEN19 = (1U << 3);  ///< PPG19 Start Trigger bit
        constexpr uint32_t PEN18 = (1U << 2);  ///< PPG18 Start Trigger bit
        constexpr uint32_t PEN17 = (1U << 1);  ///< PPG17 Start Trigger bit
        constexpr uint32_t PEN16 = (1U << 0);  ///< PPG16 Start Trigger bit
    }

    /// REVC Register bits
    namespace revc_bits {
        constexpr uint32_t REV15 = (1U << 15);  ///< PPG15 Output Reverse Enable bit
        constexpr uint32_t REV14 = (1U << 14);  ///< PPG14 Output Reverse Enable bit
        constexpr uint32_t REV13 = (1U << 13);  ///< PPG13 Output Reverse Enable bit
        constexpr uint32_t REV12 = (1U << 12);  ///< PPG12 Output Reverse Enable bit
        constexpr uint32_t REV11 = (1U << 11);  ///< PPG11 Output Reverse Enable bit
        constexpr uint32_t REV10 = (1U << 10);  ///< PPG10 Output Reverse Enable bit
        constexpr uint32_t REV09 = (1U << 9);  ///< PPG9 Output Reverse Enable bit
        constexpr uint32_t REV08 = (1U << 8);  ///< PPG8 Output Reverse Enable bit
        constexpr uint32_t REV07 = (1U << 7);  ///< PPG7 Output Reverse Enable bit
        constexpr uint32_t REV06 = (1U << 6);  ///< PPG6 Output Reverse Enable bit
        constexpr uint32_t REV05 = (1U << 5);  ///< PPG5 Output Reverse Enable bit
        constexpr uint32_t REV04 = (1U << 4);  ///< PPG4 Output Reverse Enable bit
        constexpr uint32_t REV03 = (1U << 3);  ///< PPG3 Output Reverse Enable bit
        constexpr uint32_t REV02 = (1U << 2);  ///< PPG2 Output Reverse Enable bit
        constexpr uint32_t REV01 = (1U << 1);  ///< PPG1 Output Reverse Enable bit
        constexpr uint32_t REV00 = (1U << 0);  ///< PPG0 Output Reverse Enable bit
    }

    /// REVC1 Register bits
    namespace revc1_bits {
        constexpr uint32_t REV23 = (1U << 7);  ///< PPG23 Output Reverse Enable bit
        constexpr uint32_t REV22 = (1U << 6);  ///< PPG22 Output Reverse Enable bit
        constexpr uint32_t REV21 = (1U << 5);  ///< PPG21 Output Reverse Enable bit
        constexpr uint32_t REV20 = (1U << 4);  ///< PPG20 Output Reverse Enable bit
        constexpr uint32_t REV19 = (1U << 3);  ///< PPG19 Output Reverse Enable bit
        constexpr uint32_t REV18 = (1U << 2);  ///< PPG18 Output Reverse Enable bit
        constexpr uint32_t REV17 = (1U << 1);  ///< PPG17 Output Reverse Enable bit
        constexpr uint32_t REV16 = (1U << 0);  ///< PPG16 Output Reverse Enable bit
    }

    /// PPGC0 Register bits
    namespace ppgc0_bits {
        constexpr uint32_t PIE = (1U << 7);  ///< PPG Interrupt Enable bit
        constexpr uint32_t PUF = (1U << 6);  ///< PPG Counter Underflow bit
        constexpr uint32_t INTM = (1U << 5);  ///< Interrupt Mode Select bit
        constexpr uint32_t PCS = (2 << 3);  ///< PPG DOWN Counter Operation Clock Select bits
        constexpr uint32_t MD = (2 << 1);  ///< PPG Operation Mode Set bits
        constexpr uint32_t TTRG = (1U << 0);  ///< PPG start trigger select bit
    }

    /// PRLH0 Register bits
    namespace prlh0_bits {
        constexpr uint32_t PRLH = (8 << 0);  ///< Reload Registers High
    }

    /// PRLL0 Register bits
    namespace prll0_bits {
        constexpr uint32_t PRLL = (8 << 0);  ///< Reload Registers Low
    }

    /// GATEC0 Register bits
    namespace gatec0_bits {
        constexpr uint32_t STRG2 = (1U << 5);  ///< Select a trigger for PPG2
        constexpr uint32_t EDGE2 = (1U << 4);  ///< Select Start Effective Level for PPG2
        constexpr uint32_t STRG0 = (1U << 1);  ///< Select a trigger for PPG0
        constexpr uint32_t EDGE0 = (1U << 0);  ///< Select Start Effective Level for PPG0
    }

    /// GATEC4 Register bits
    namespace gatec4_bits {
        constexpr uint32_t STRG6 = (1U << 5);  ///< Select a trigger for PPG6
        constexpr uint32_t EDGE6 = (1U << 4);  ///< Select Start Effective Level for PPG6
        constexpr uint32_t STRG4 = (1U << 1);  ///< Select a trigger for PPG4
        constexpr uint32_t EDGE4 = (1U << 0);  ///< Select Start Effective Level for PPG4
    }

    /// GATEC8 Register bits
    namespace gatec8_bits {
        constexpr uint32_t STRG10 = (1U << 5);  ///< Select a trigger for PPG10
        constexpr uint32_t EDGE10 = (1U << 4);  ///< Select Start Effective Level for PPG10
        constexpr uint32_t STRG8 = (1U << 1);  ///< Select a trigger for PPG8
        constexpr uint32_t EDGE8 = (1U << 0);  ///< Select Start Effective Level for PPG8
    }

    /// GATEC12 Register bits
    namespace gatec12_bits {
        constexpr uint32_t STRG14 = (1U << 5);  ///< Select a trigger for PPG14
        constexpr uint32_t EDGE14 = (1U << 4);  ///< Select Start Effective Level for PPG14
        constexpr uint32_t STRG12 = (1U << 1);  ///< Select a trigger for PPG12
        constexpr uint32_t EDGE12 = (1U << 0);  ///< Select Start Effective Level for PPG12
    }

    /// GATEC16 Register bits
    namespace gatec16_bits {
        constexpr uint32_t STRG18 = (1U << 5);  ///< Select a trigger for PPG18
        constexpr uint32_t EDGE18 = (1U << 4);  ///< Select Start Effective Level for PPG18
        constexpr uint32_t STRG16 = (1U << 1);  ///< Select a trigger for PPG16
        constexpr uint32_t EDGE16 = (1U << 0);  ///< Select Start Effective Level for PPG16
    }

    /// GATEC20 Register bits
    namespace gatec20_bits {
        constexpr uint32_t STRG22 = (1U << 5);  ///< Select a trigger for PPG22
        constexpr uint32_t EDGE22 = (1U << 4);  ///< Select Start Effective Level for PPG22
        constexpr uint32_t STRG20 = (1U << 1);  ///< Select a trigger for PPG20
        constexpr uint32_t EDGE20 = (1U << 0);  ///< Select Start Effective Level for PPG20
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC0_BASE = 0x40027000;
    constexpr uint32_t ADC1_BASE = 0x40027100;
    constexpr uint32_t ADC2_BASE = 0x40027200;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ADCR;  ///< Offset: 0x01 - A/D Control Register
        volatile uint32_t ADSR;  ///< Offset: 0x00 - A/D Status Register
        volatile uint32_t SCCR;  ///< Offset: 0x09 - Scan Conversion Control Register
        volatile uint32_t SFNS;  ///< Offset: 0x08 - Scan Conversion FIFO Stage Count Setup Register
        volatile uint32_t SCFD;  ///< Offset: 0x0C - Scan Conversion FIFO Data Register
        volatile uint32_t SCIS3;  ///< Offset: 0x11 - Scan Conversion Input Selection Register 3
        volatile uint32_t SCIS2;  ///< Offset: 0x10 - Scan Conversion Input Selection Register 2
        volatile uint32_t SCIS1;  ///< Offset: 0x15 - Scan Conversion Input Selection Register 1
        volatile uint32_t SCIS0;  ///< Offset: 0x14 - Scan Conversion Input Selection Register 0
        volatile uint32_t PFNS;  ///< Offset: 0x18 - Priority Conversion FIFO Stage Count Setup Register
        volatile uint32_t PCCR;  ///< Offset: 0x19 - Priority Conversion Control Register
        volatile uint32_t PCFD;  ///< Offset: 0x1C - Priority Conversion FIFO Data Register
        volatile uint32_t PCIS;  ///< Offset: 0x20 - Priority Conversion Input Selection Register
        volatile uint32_t CMPCR;  ///< Offset: 0x24 - A/D Comparison Control Register
        volatile uint32_t CMPD;  ///< Offset: 0x26 - A/D Comparison Value Setup Register
        volatile uint32_t ADSS3;  ///< Offset: 0x29 - Sampling Time Selection Register 3
        volatile uint32_t ADSS2;  ///< Offset: 0x28 - Sampling Time Selection Register 2
        volatile uint32_t ADSS1;  ///< Offset: 0x2D - Sampling Time Selection Register 1
        volatile uint32_t ADSS0;  ///< Offset: 0x2C - Sampling Time Selection Register 0
        volatile uint32_t ADST1;  ///< Offset: 0x30 - Sampling Time Setup Register 1
        volatile uint32_t ADST0;  ///< Offset: 0x31 - Sampling Time Setup Register 0
        volatile uint32_t ADCT;  ///< Offset: 0x34 - Comparison Time Setup Register
        volatile uint32_t PRTSL;  ///< Offset: 0x38 - Priority Conversion Timer Trigger Selection Register
        volatile uint32_t SCTSL;  ///< Offset: 0x39 - Scan Conversion Timer Trigger Selection Register
        volatile uint32_t ADCEN;  ///< Offset: 0x3C - A/D Operation Enable Setup Register
    };

    /// Peripheral instances
    inline Registers* ADC0 = reinterpret_cast<Registers*>(ADC0_BASE);
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);
    inline Registers* ADC2 = reinterpret_cast<Registers*>(ADC2_BASE);

    // Bit definitions
    /// ADCR Register bits
    namespace adcr_bits {
        constexpr uint32_t SCIF = (1U << 7);  ///< Scan conversion interrupt request bit
        constexpr uint32_t PCIF = (1U << 6);  ///< Priority conversion interrupt request bit
        constexpr uint32_t CMPIF = (1U << 5);  ///< Conversion result comparison interrupt request bit
        constexpr uint32_t SCIE = (1U << 3);  ///< Scan conversion interrupt enable bit
        constexpr uint32_t PCIE = (1U << 2);  ///< Priority conversion interrupt enable bit
        constexpr uint32_t CMPIE = (1U << 1);  ///< Conversion result comparison interrupt enable bit
        constexpr uint32_t OVRIE = (1U << 0);  ///< FIFO overrun interrupt enable bit
    }

    /// ADSR Register bits
    namespace adsr_bits {
        constexpr uint32_t ADSTP = (1U << 7);  ///< A/D conversion forced stop bit
        constexpr uint32_t FDAS = (1U << 6);  ///< FIFO data placement selection bit
        constexpr uint32_t PCNS = (1U << 2);  ///< Priority conversion pending flag
        constexpr uint32_t PCS = (1U << 1);  ///< Priority conversion status flag
        constexpr uint32_t SCS = (1U << 0);  ///< Scan conversion status flag
    }

    /// SCCR Register bits
    namespace sccr_bits {
        constexpr uint32_t SEMP = (1U << 7);  ///< Scan conversion FIFO empty bit
        constexpr uint32_t SFUL = (1U << 6);  ///< Scan conversion FIFO full bit
        constexpr uint32_t SOVR = (1U << 5);  ///< Scan conversion overrun flag
        constexpr uint32_t SFCLR = (1U << 4);  ///< Scan conversion FIFO clear bit
        constexpr uint32_t RPT = (1U << 2);  ///< Scan conversion repeat bit
        constexpr uint32_t SHEN = (1U << 1);  ///< Scan conversion timer start enable bit
        constexpr uint32_t SSTR = (1U << 0);  ///< Scan conversion start bit
    }

    /// SFNS Register bits
    namespace sfns_bits {
        constexpr uint32_t SFS = (4 << 0);  ///< Scan conversion FIFO stage count setting bit
    }

    /// SCFD Register bits
    namespace scfd_bits {
        constexpr uint32_t SD = (12 << 20);  ///< Scan conversion result
        constexpr uint32_t INVL = (1U << 12);  ///< A/D conversion result disable bit
        constexpr uint32_t RS = (2 << 8);  ///< Scan conversion start factor
        constexpr uint32_t SC = (5 << 0);  ///< Conversion input channel bits
    }

    /// SCIS3 Register bits
    namespace scis3_bits {
        constexpr uint32_t AN31 = (1U << 7);  ///< Bit7 of SCIS3
        constexpr uint32_t AN30 = (1U << 6);  ///< Bit6 of SCIS3
        constexpr uint32_t AN29 = (1U << 5);  ///< Bit5 of SCIS3
        constexpr uint32_t AN28 = (1U << 4);  ///< Bit4 of SCIS3
        constexpr uint32_t AN27 = (1U << 3);  ///< Bit3 of SCIS3
        constexpr uint32_t AN26 = (1U << 2);  ///< Bit2 of SCIS3
        constexpr uint32_t AN25 = (1U << 1);  ///< Bit1 of SCIS3
        constexpr uint32_t AN24 = (1U << 0);  ///< Bit0 of SCIS3
    }

    /// SCIS2 Register bits
    namespace scis2_bits {
        constexpr uint32_t AN23 = (1U << 7);  ///< Bit7 of SCIS2
        constexpr uint32_t AN22 = (1U << 6);  ///< Bit6 of SCIS2
        constexpr uint32_t AN21 = (1U << 5);  ///< Bit5 of SCIS2
        constexpr uint32_t AN20 = (1U << 4);  ///< Bit4 of SCIS2
        constexpr uint32_t AN19 = (1U << 3);  ///< Bit3 of SCIS2
        constexpr uint32_t AN18 = (1U << 2);  ///< Bit2 of SCIS2
        constexpr uint32_t AN17 = (1U << 1);  ///< Bit1 of SCIS2
        constexpr uint32_t AN16 = (1U << 0);  ///< Bit0 of SCIS2
    }

    /// SCIS1 Register bits
    namespace scis1_bits {
        constexpr uint32_t AN15 = (1U << 7);  ///< Bit7 of SCIS1
        constexpr uint32_t AN14 = (1U << 6);  ///< Bit6 of SCIS1
        constexpr uint32_t AN13 = (1U << 5);  ///< Bit5 of SCIS1
        constexpr uint32_t AN12 = (1U << 4);  ///< Bit4 of SCIS1
        constexpr uint32_t AN11 = (1U << 3);  ///< Bit3 of SCIS1
        constexpr uint32_t AN10 = (1U << 2);  ///< Bit2 of SCIS1
        constexpr uint32_t AN9 = (1U << 1);  ///< Bit1 of SCIS1
        constexpr uint32_t AN8 = (1U << 0);  ///< Bit0 of SCIS1
    }

    /// SCIS0 Register bits
    namespace scis0_bits {
        constexpr uint32_t AN7 = (1U << 7);  ///< Bit7 of SCIS0
        constexpr uint32_t AN6 = (1U << 6);  ///< Bit6 of SCIS0
        constexpr uint32_t AN5 = (1U << 5);  ///< Bit5 of SCIS0
        constexpr uint32_t AN4 = (1U << 4);  ///< Bit4 of SCIS0
        constexpr uint32_t AN3 = (1U << 3);  ///< Bit3 of SCIS0
        constexpr uint32_t AN2 = (1U << 2);  ///< Bit2 of SCIS0
        constexpr uint32_t AN1 = (1U << 1);  ///< Bit1 of SCIS0
        constexpr uint32_t AN0 = (1U << 0);  ///< Bit0 of SCIS0
    }

    /// PFNS Register bits
    namespace pfns_bits {
        constexpr uint32_t TEST = (2 << 4);  ///< Test bits
        constexpr uint32_t PFS = (2 << 0);  ///< Priority conversion FIFO stage count setting bits
    }

    /// PCCR Register bits
    namespace pccr_bits {
        constexpr uint32_t PEMP = (1U << 7);  ///< Priority conversion FIFO empty bit
        constexpr uint32_t PFUL = (1U << 6);  ///< Priority conversion FIFO full bit
        constexpr uint32_t POVR = (1U << 5);  ///< Priority conversion overrun flag
        constexpr uint32_t PFCLR = (1U << 4);  ///< Priority conversion FIFO clear bit
        constexpr uint32_t ESCE = (1U << 3);  ///< External trigger analog input selection bit
        constexpr uint32_t PEEN = (1U << 2);  ///< Priority conversion external start enable bit
        constexpr uint32_t PHEN = (1U << 1);  ///< Priority conversion timer start enable bit
        constexpr uint32_t PSTR = (1U << 0);  ///< Priority conversion start bit
    }

    /// PCFD Register bits
    namespace pcfd_bits {
        constexpr uint32_t PD = (12 << 20);  ///< Priority conversion result
        constexpr uint32_t INVL = (1U << 12);  ///< A/D conversion result disable bit
        constexpr uint32_t RS = (3 << 8);  ///< Scan conversion start factor
        constexpr uint32_t PC = (5 << 0);  ///< Conversion input channel bits
    }

    /// PCIS Register bits
    namespace pcis_bits {
        constexpr uint32_t P2A = (5 << 3);  ///< Priority level 2 analog input selection
        constexpr uint32_t P1A = (3 << 0);  ///< Priority level 1 analog input selection
    }

    /// CMPCR Register bits
    namespace cmpcr_bits {
        constexpr uint32_t CMPEN = (1U << 7);  ///< Conversion result comparison function operation enable bit
        constexpr uint32_t CMD1 = (1U << 6);  ///< Comparison mode 1
        constexpr uint32_t CMD0 = (1U << 5);  ///< Comparison mode 0
        constexpr uint32_t CCH = (5 << 0);  ///< Comparison target analog input channel
    }

    /// CMPD Register bits
    namespace cmpd_bits {
        constexpr uint32_t CMAD = (10 << 6);  ///< A/D conversion result value setting bits
    }

    /// ADSS3 Register bits
    namespace adss3_bits {
        constexpr uint32_t TS31 = (1U << 7);  ///< Bit7 of ADSS3
        constexpr uint32_t TS30 = (1U << 6);  ///< Bit6 of ADSS3
        constexpr uint32_t TS29 = (1U << 5);  ///< Bit5 of ADSS3
        constexpr uint32_t TS28 = (1U << 4);  ///< Bit4 of ADSS3
        constexpr uint32_t TS27 = (1U << 3);  ///< Bit3 of ADSS3
        constexpr uint32_t TS26 = (1U << 2);  ///< Bit2 of ADSS3
        constexpr uint32_t TS25 = (1U << 1);  ///< Bit1 of ADSS3
        constexpr uint32_t TS24 = (1U << 0);  ///< Bit0 of ADSS3
    }

    /// ADSS2 Register bits
    namespace adss2_bits {
        constexpr uint32_t TS23 = (1U << 7);  ///< Bit7 of ADSS2
        constexpr uint32_t TS22 = (1U << 6);  ///< Bit6 of ADSS2
        constexpr uint32_t TS21 = (1U << 5);  ///< Bit5 of ADSS2
        constexpr uint32_t TS20 = (1U << 4);  ///< Bit4 of ADSS2
        constexpr uint32_t TS19 = (1U << 3);  ///< Bit3 of ADSS2
        constexpr uint32_t TS18 = (1U << 2);  ///< Bit2 of ADSS2
        constexpr uint32_t TS17 = (1U << 1);  ///< Bit1 of ADSS2
        constexpr uint32_t TS16 = (1U << 0);  ///< Bit0 of ADSS2
    }

    /// ADSS1 Register bits
    namespace adss1_bits {
        constexpr uint32_t TS15 = (1U << 7);  ///< Bit7 of ADSS1
        constexpr uint32_t TS14 = (1U << 6);  ///< Bit6 of ADSS1
        constexpr uint32_t TS13 = (1U << 5);  ///< Bit5 of ADSS1
        constexpr uint32_t TS12 = (1U << 4);  ///< Bit4 of ADSS1
        constexpr uint32_t TS11 = (1U << 3);  ///< Bit3 of ADSS1
        constexpr uint32_t TS10 = (1U << 2);  ///< Bit2 of ADSS1
        constexpr uint32_t TS9 = (1U << 1);  ///< Bit1 of ADSS1
        constexpr uint32_t TS8 = (1U << 0);  ///< Bit0 of ADSS1
    }

    /// ADSS0 Register bits
    namespace adss0_bits {
        constexpr uint32_t TS7 = (1U << 7);  ///< Bit7 of ADSS0
        constexpr uint32_t TS6 = (1U << 6);  ///< Bit6 of ADSS0
        constexpr uint32_t TS5 = (1U << 5);  ///< Bit5 of ADSS0
        constexpr uint32_t TS4 = (1U << 4);  ///< Bit4 of ADSS0
        constexpr uint32_t TS3 = (1U << 3);  ///< Bit3 of ADSS0
        constexpr uint32_t TS2 = (1U << 2);  ///< Bit2 of ADSS0
        constexpr uint32_t TS1 = (1U << 1);  ///< Bit1 of ADSS0
        constexpr uint32_t TS0 = (1U << 0);  ///< Bit0 of ADSS0
    }

    /// ADST1 Register bits
    namespace adst1_bits {
        constexpr uint32_t STX1 = (3 << 5);  ///< Sampling time N times setting bits
        constexpr uint32_t ST1 = (5 << 0);  ///< Sampling time setting bits
    }

    /// ADST0 Register bits
    namespace adst0_bits {
        constexpr uint32_t STX0 = (3 << 5);  ///< Sampling time N times setting bits
        constexpr uint32_t ST0 = (5 << 0);  ///< Sampling time setting bits
    }

    /// ADCT Register bits
    namespace adct_bits {
        constexpr uint32_t CT = (8 << 0);  ///< Compare clock frequency division ratio setting bits
    }

    /// PRTSL Register bits
    namespace prtsl_bits {
        constexpr uint32_t PRTSL = (4 << 0);  ///< Priority conversion timer trigger selection bit
    }

    /// SCTSL Register bits
    namespace sctsl_bits {
        constexpr uint32_t SCTSL = (4 << 0);  ///< Scan conversion timer trigger selection bit
    }

    /// ADCEN Register bits
    namespace adcen_bits {
        constexpr uint32_t CYCLSL = (2 << 4);  ///< Basic cycle selection bit
        constexpr uint32_t READY = (1U << 1);  ///< A/D operation enable state bit
        constexpr uint32_t ENBL = (1U << 0);  ///< A/D operation enable bit
    }

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40030000;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t ENIR;  ///< Offset: 0x00 - Enable Interrupt Request Register
        volatile uint32_t EIRR;  ///< Offset: 0x04 - External Interrupt Request Register
        volatile uint32_t EICL;  ///< Offset: 0x08 - External Interrupt Clear Register
        volatile uint32_t ELVR;  ///< Offset: 0x0C - External Interrupt Level Register
        volatile uint32_t ELVR1;  ///< Offset: 0x10 - External Interrupt Level Register 1
        volatile uint32_t NMIRR;  ///< Offset: 0x14 - Non Maskable Interrupt Request Register
        volatile uint32_t NMICL;  ///< Offset: 0x18 - Non Maskable Interrupt Clear Register
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// ENIR Register bits
    namespace enir_bits {
        constexpr uint32_t EN31 = (1U << 31);  ///< Bit31 of ENIR
        constexpr uint32_t EN30 = (1U << 30);  ///< Bit30 of ENIR
        constexpr uint32_t EN29 = (1U << 29);  ///< Bit29 of ENIR
        constexpr uint32_t EN28 = (1U << 28);  ///< Bit28 of ENIR
        constexpr uint32_t EN27 = (1U << 27);  ///< Bit27 of ENIR
        constexpr uint32_t EN26 = (1U << 26);  ///< Bit26 of ENIR
        constexpr uint32_t EN25 = (1U << 25);  ///< Bit25 of ENIR
        constexpr uint32_t EN24 = (1U << 24);  ///< Bit24 of ENIR
        constexpr uint32_t EN23 = (1U << 23);  ///< Bit23 of ENIR
        constexpr uint32_t EN22 = (1U << 22);  ///< Bit22 of ENIR
        constexpr uint32_t EN21 = (1U << 21);  ///< Bit21 of ENIR
        constexpr uint32_t EN20 = (1U << 20);  ///< Bit20 of ENIR
        constexpr uint32_t EN19 = (1U << 19);  ///< Bit19 of ENIR
        constexpr uint32_t EN18 = (1U << 18);  ///< Bit18 of ENIR
        constexpr uint32_t EN17 = (1U << 17);  ///< Bit17 of ENIR
        constexpr uint32_t EN16 = (1U << 16);  ///< Bit16 of ENIR
        constexpr uint32_t EN15 = (1U << 15);  ///< Bit15 of ENIR
        constexpr uint32_t EN14 = (1U << 14);  ///< Bit14 of ENIR
        constexpr uint32_t EN13 = (1U << 13);  ///< Bit13 of ENIR
        constexpr uint32_t EN12 = (1U << 12);  ///< Bit12 of ENIR
        constexpr uint32_t EN11 = (1U << 11);  ///< Bit11 of ENIR
        constexpr uint32_t EN10 = (1U << 10);  ///< Bit10 of ENIR
        constexpr uint32_t EN9 = (1U << 9);  ///< Bit9 of ENIR
        constexpr uint32_t EN8 = (1U << 8);  ///< Bit8 of ENIR
        constexpr uint32_t EN7 = (1U << 7);  ///< Bit7 of ENIR
        constexpr uint32_t EN6 = (1U << 6);  ///< Bit6 of ENIR
        constexpr uint32_t EN5 = (1U << 5);  ///< Bit5 of ENIR
        constexpr uint32_t EN4 = (1U << 4);  ///< Bit4 of ENIR
        constexpr uint32_t EN3 = (1U << 3);  ///< Bit3 of ENIR
        constexpr uint32_t EN2 = (1U << 2);  ///< Bit2 of ENIR
        constexpr uint32_t EN1 = (1U << 1);  ///< Bit1 of ENIR
        constexpr uint32_t EN0 = (1U << 0);  ///< Bit0 of ENIR
    }

    /// EIRR Register bits
    namespace eirr_bits {
        constexpr uint32_t ER31 = (1U << 31);  ///< Bit31 of EIRR
        constexpr uint32_t ER30 = (1U << 30);  ///< Bit30 of EIRR
        constexpr uint32_t ER29 = (1U << 29);  ///< Bit29 of EIRR
        constexpr uint32_t ER28 = (1U << 28);  ///< Bit28 of EIRR
        constexpr uint32_t ER27 = (1U << 27);  ///< Bit27 of EIRR
        constexpr uint32_t ER26 = (1U << 26);  ///< Bit26 of EIRR
        constexpr uint32_t ER25 = (1U << 25);  ///< Bit25 of EIRR
        constexpr uint32_t ER24 = (1U << 24);  ///< Bit24 of EIRR
        constexpr uint32_t ER23 = (1U << 23);  ///< Bit23 of EIRR
        constexpr uint32_t ER22 = (1U << 22);  ///< Bit22 of EIRR
        constexpr uint32_t ER21 = (1U << 21);  ///< Bit21 of EIRR
        constexpr uint32_t ER20 = (1U << 20);  ///< Bit20 of EIRR
        constexpr uint32_t ER19 = (1U << 19);  ///< Bit19 of EIRR
        constexpr uint32_t ER18 = (1U << 18);  ///< Bit18 of EIRR
        constexpr uint32_t ER17 = (1U << 17);  ///< Bit17 of EIRR
        constexpr uint32_t ER16 = (1U << 16);  ///< Bit16 of EIRR
        constexpr uint32_t ER15 = (1U << 15);  ///< Bit15 of EIRR
        constexpr uint32_t ER14 = (1U << 14);  ///< Bit14 of EIRR
        constexpr uint32_t ER13 = (1U << 13);  ///< Bit13 of EIRR
        constexpr uint32_t ER12 = (1U << 12);  ///< Bit12 of EIRR
        constexpr uint32_t ER11 = (1U << 11);  ///< Bit11 of EIRR
        constexpr uint32_t ER10 = (1U << 10);  ///< Bit10 of EIRR
        constexpr uint32_t ER9 = (1U << 9);  ///< Bit9 of EIRR
        constexpr uint32_t ER8 = (1U << 8);  ///< Bit8 of EIRR
        constexpr uint32_t ER7 = (1U << 7);  ///< Bit7 of EIRR
        constexpr uint32_t ER6 = (1U << 6);  ///< Bit6 of EIRR
        constexpr uint32_t ER5 = (1U << 5);  ///< Bit5 of EIRR
        constexpr uint32_t ER4 = (1U << 4);  ///< Bit4 of EIRR
        constexpr uint32_t ER3 = (1U << 3);  ///< Bit3 of EIRR
        constexpr uint32_t ER2 = (1U << 2);  ///< Bit2 of EIRR
        constexpr uint32_t ER1 = (1U << 1);  ///< Bit1 of EIRR
        constexpr uint32_t ER0 = (1U << 0);  ///< Bit0 of EIRR
    }

    /// EICL Register bits
    namespace eicl_bits {
        constexpr uint32_t ECL31 = (1U << 31);  ///< Bit31 of EICL
        constexpr uint32_t ECL30 = (1U << 30);  ///< Bit30 of EICL
        constexpr uint32_t ECL29 = (1U << 29);  ///< Bit29 of EICL
        constexpr uint32_t ECL28 = (1U << 28);  ///< Bit28 of EICL
        constexpr uint32_t ECL27 = (1U << 27);  ///< Bit27 of EICL
        constexpr uint32_t ECL26 = (1U << 26);  ///< Bit26 of EICL
        constexpr uint32_t ECL25 = (1U << 25);  ///< Bit25 of EICL
        constexpr uint32_t ECL24 = (1U << 24);  ///< Bit24 of EICL
        constexpr uint32_t ECL23 = (1U << 23);  ///< Bit23 of EICL
        constexpr uint32_t ECL22 = (1U << 22);  ///< Bit22 of EICL
        constexpr uint32_t ECL21 = (1U << 21);  ///< Bit21 of EICL
        constexpr uint32_t ECL20 = (1U << 20);  ///< Bit20 of EICL
        constexpr uint32_t ECL19 = (1U << 19);  ///< Bit19 of EICL
        constexpr uint32_t ECL18 = (1U << 18);  ///< Bit18 of EICL
        constexpr uint32_t ECL17 = (1U << 17);  ///< Bit17 of EICL
        constexpr uint32_t ECL16 = (1U << 16);  ///< Bit16 of EICL
        constexpr uint32_t ECL15 = (1U << 15);  ///< Bit15 of EICL
        constexpr uint32_t ECL14 = (1U << 14);  ///< Bit14 of EICL
        constexpr uint32_t ECL13 = (1U << 13);  ///< Bit13 of EICL
        constexpr uint32_t ECL12 = (1U << 12);  ///< Bit12 of EICL
        constexpr uint32_t ECL11 = (1U << 11);  ///< Bit11 of EICL
        constexpr uint32_t ECL10 = (1U << 10);  ///< Bit10 of EICL
        constexpr uint32_t ECL9 = (1U << 9);  ///< Bit9 of EICL
        constexpr uint32_t ECL8 = (1U << 8);  ///< Bit8 of EICL
        constexpr uint32_t ECL7 = (1U << 7);  ///< Bit7 of EICL
        constexpr uint32_t ECL6 = (1U << 6);  ///< Bit6 of EICL
        constexpr uint32_t ECL5 = (1U << 5);  ///< Bit5 of EICL
        constexpr uint32_t ECL4 = (1U << 4);  ///< Bit4 of EICL
        constexpr uint32_t ECL3 = (1U << 3);  ///< Bit3 of EICL
        constexpr uint32_t ECL2 = (1U << 2);  ///< Bit2 of EICL
        constexpr uint32_t ECL1 = (1U << 1);  ///< Bit1 of EICL
        constexpr uint32_t ECL0 = (1U << 0);  ///< Bit0 of EICL
    }

    /// ELVR Register bits
    namespace elvr_bits {
        constexpr uint32_t LB15 = (1U << 31);  ///< Bit31 of ELVR
        constexpr uint32_t LA15 = (1U << 30);  ///< Bit30 of ELVR
        constexpr uint32_t LB14 = (1U << 29);  ///< Bit29 of ELVR
        constexpr uint32_t LA14 = (1U << 28);  ///< Bit28 of ELVR
        constexpr uint32_t LB13 = (1U << 27);  ///< Bit27 of ELVR
        constexpr uint32_t LA13 = (1U << 26);  ///< Bit26 of ELVR
        constexpr uint32_t LB12 = (1U << 25);  ///< Bit25 of ELVR
        constexpr uint32_t LA12 = (1U << 24);  ///< Bit24 of ELVR
        constexpr uint32_t LB11 = (1U << 23);  ///< Bit23 of ELVR
        constexpr uint32_t LA11 = (1U << 22);  ///< Bit22 of ELVR
        constexpr uint32_t LB10 = (1U << 21);  ///< Bit21 of ELVR
        constexpr uint32_t LA10 = (1U << 20);  ///< Bit20 of ELVR
        constexpr uint32_t LB9 = (1U << 19);  ///< Bit19 of ELVR
        constexpr uint32_t LA9 = (1U << 18);  ///< Bit18 of ELVR
        constexpr uint32_t LB8 = (1U << 17);  ///< Bit17 of ELVR
        constexpr uint32_t LA8 = (1U << 16);  ///< Bit16 of ELVR
        constexpr uint32_t LB7 = (1U << 15);  ///< Bit15 of ELVR
        constexpr uint32_t LA7 = (1U << 14);  ///< Bit14 of ELVR
        constexpr uint32_t LB6 = (1U << 13);  ///< Bit13 of ELVR
        constexpr uint32_t LA6 = (1U << 12);  ///< Bit12 of ELVR
        constexpr uint32_t LB5 = (1U << 11);  ///< Bit11 of ELVR
        constexpr uint32_t LA5 = (1U << 10);  ///< Bit10 of ELVR
        constexpr uint32_t LB4 = (1U << 9);  ///< Bit9 of ELVR
        constexpr uint32_t LA4 = (1U << 8);  ///< Bit8 of ELVR
        constexpr uint32_t LB3 = (1U << 7);  ///< Bit7 of ELVR
        constexpr uint32_t LA3 = (1U << 6);  ///< Bit6 of ELVR
        constexpr uint32_t LB2 = (1U << 5);  ///< Bit5 of ELVR
        constexpr uint32_t LA2 = (1U << 4);  ///< Bit4 of ELVR
        constexpr uint32_t LB1 = (1U << 3);  ///< Bit3 of ELVR
        constexpr uint32_t LA1 = (1U << 2);  ///< Bit2 of ELVR
        constexpr uint32_t LB0 = (1U << 1);  ///< Bit1 of ELVR
        constexpr uint32_t LA0 = (1U << 0);  ///< Bit0 of ELVR
    }

    /// ELVR1 Register bits
    namespace elvr1_bits {
        constexpr uint32_t LB31 = (1U << 31);  ///< Bit31 of ELVR1
        constexpr uint32_t LA31 = (1U << 30);  ///< Bit30 of ELVR1
        constexpr uint32_t LB30 = (1U << 29);  ///< Bit29 of ELVR1
        constexpr uint32_t LA30 = (1U << 28);  ///< Bit28 of ELVR1
        constexpr uint32_t LB29 = (1U << 27);  ///< Bit27 of ELVR1
        constexpr uint32_t LA29 = (1U << 26);  ///< Bit26 of ELVR1
        constexpr uint32_t LB28 = (1U << 25);  ///< Bit25 of ELVR1
        constexpr uint32_t LA28 = (1U << 24);  ///< Bit24 of ELVR1
        constexpr uint32_t LB27 = (1U << 23);  ///< Bit23 of ELVR1
        constexpr uint32_t LA27 = (1U << 22);  ///< Bit22 of ELVR1
        constexpr uint32_t LB26 = (1U << 21);  ///< Bit21 of ELVR1
        constexpr uint32_t LA26 = (1U << 20);  ///< Bit20 of ELVR1
        constexpr uint32_t LB25 = (1U << 19);  ///< Bit19 of ELVR1
        constexpr uint32_t LA25 = (1U << 18);  ///< Bit18 of ELVR1
        constexpr uint32_t LB24 = (1U << 17);  ///< Bit17 of ELVR1
        constexpr uint32_t LA24 = (1U << 16);  ///< Bit16 of ELVR1
        constexpr uint32_t LB23 = (1U << 15);  ///< Bit15 of ELVR1
        constexpr uint32_t LA23 = (1U << 14);  ///< Bit14 of ELVR1
        constexpr uint32_t LB22 = (1U << 13);  ///< Bit13 of ELVR1
        constexpr uint32_t LA22 = (1U << 12);  ///< Bit12 of ELVR1
        constexpr uint32_t LB21 = (1U << 11);  ///< Bit11 of ELVR1
        constexpr uint32_t LA21 = (1U << 10);  ///< Bit10 of ELVR1
        constexpr uint32_t LB20 = (1U << 9);  ///< Bit9 of ELVR1
        constexpr uint32_t LA20 = (1U << 8);  ///< Bit8 of ELVR1
        constexpr uint32_t LB19 = (1U << 7);  ///< Bit7 of ELVR1
        constexpr uint32_t LA19 = (1U << 6);  ///< Bit6 of ELVR1
        constexpr uint32_t LB18 = (1U << 5);  ///< Bit5 of ELVR1
        constexpr uint32_t LA18 = (1U << 4);  ///< Bit4 of ELVR1
        constexpr uint32_t LB17 = (1U << 3);  ///< Bit3 of ELVR1
        constexpr uint32_t LA17 = (1U << 2);  ///< Bit2 of ELVR1
        constexpr uint32_t LB16 = (1U << 1);  ///< Bit1 of ELVR1
        constexpr uint32_t LA16 = (1U << 0);  ///< Bit0 of ELVR1
    }

    /// NMIRR Register bits
    namespace nmirr_bits {
        constexpr uint32_t NR = (1U << 0);  ///< NMI interrupt request detection bit
    }

    /// NMICL Register bits
    namespace nmicl_bits {
        constexpr uint32_t NCL = (1U << 0);  ///< NMI interrupt cause clear bit
    }

}

// ============================================================================
// INTREQ Peripheral
// ============================================================================

namespace intreq {
    /// Base addresses
    constexpr uint32_t INTREQ_BASE = 0x40031000;

    /// INTREQ Register structure
    struct Registers {
        volatile uint32_t DRQSEL;  ///< Offset: 0x00 - DMA Request Selection Register
        volatile uint32_t ODDPKS;  ///< Offset: 0x0B - USB ch.0 Odd Packet Size DMA Enable Register
        volatile uint32_t EXC02MON;  ///< Offset: 0x10 - EXC02 batch read register
        volatile uint32_t IRQ00MON;  ///< Offset: 0x14 - IRQ00 Batch Read Register
        volatile uint32_t IRQ01MON;  ///< Offset: 0x18 - IRQ01 Batch Read Register
        volatile uint32_t IRQ02MON;  ///< Offset: 0x1C - IRQ02 Batch Read Register
        volatile uint32_t IRQ03MON;  ///< Offset: 0x20 - IRQ03 Batch Read Register
        volatile uint32_t IRQ04MON;  ///< Offset: 0x24 - IRQ04 Batch Read Register
        volatile uint32_t IRQ05MON;  ///< Offset: 0x28 - IRQ05 Batch Read Register
        volatile uint32_t IRQ06MON;  ///< Offset: 0x2C - IRQ06 Batch Read Register
        volatile uint32_t IRQ07MON;  ///< Offset: 0x30 - IRQ07 Batch Read Register
        volatile uint32_t IRQ08MON;  ///< Offset: 0x34 - IRQ08 Batch Read Register
        volatile uint32_t IRQ09MON;  ///< Offset: 0x38 - IRQ09 Batch Read Register
        volatile uint32_t IRQ10MON;  ///< Offset: 0x3C - IRQ10 Batch Read Register
        volatile uint32_t IRQ11MON;  ///< Offset: 0x40 - IRQ11 Batch Read Register
        volatile uint32_t IRQ12MON;  ///< Offset: 0x44 - IRQ12 Batch Read Register
        volatile uint32_t IRQ13MON;  ///< Offset: 0x48 - IRQ13 Batch Read Register
        volatile uint32_t IRQ14MON;  ///< Offset: 0x4C - IRQ14 Batch Read Register
        volatile uint32_t IRQ15MON;  ///< Offset: 0x50 - IRQ15 Batch Read Register
        volatile uint32_t IRQ16MON;  ///< Offset: 0x54 - IRQ16 Batch Read Register
        volatile uint32_t IRQ17MON;  ///< Offset: 0x58 - IRQ17 Batch Read Register
        volatile uint32_t IRQ18MON;  ///< Offset: 0x5C - IRQ18 Batch Read Register
        volatile uint32_t IRQ19MON;  ///< Offset: 0x60 - IRQ19 Batch Read Register
        volatile uint32_t IRQ20MON;  ///< Offset: 0x64 - IRQ20 Batch Read Register
        volatile uint32_t IRQ21MON;  ///< Offset: 0x68 - IRQ21 Batch Read Register
        volatile uint32_t IRQ22MON;  ///< Offset: 0x6C - IRQ22 Batch Read Register
        volatile uint32_t IRQ23MON;  ///< Offset: 0x70 - IRQ23 Batch Read Register
        volatile uint32_t IRQ24MON;  ///< Offset: 0x74 - IRQ24 Batch Read Register
        volatile uint32_t IRQ25MON;  ///< Offset: 0x78 - IRQ25 Batch Read Register
        volatile uint32_t IRQ26MON;  ///< Offset: 0x7C - IRQ26 Batch Read Register
        volatile uint32_t IRQ27MON;  ///< Offset: 0x80 - IRQ27 Batch Read Register
        volatile uint32_t IRQ28MON;  ///< Offset: 0x84 - IRQ28 Batch Read Register
        volatile uint32_t IRQ29MON;  ///< Offset: 0x88 - IRQ29 Batch Read Register
        volatile uint32_t IRQ30MON;  ///< Offset: 0x8C - IRQ30 Batch Read Register
        volatile uint32_t IRQ31MON;  ///< Offset: 0x90 - IRQ31 Batch Read Register
        volatile uint32_t IRQ32MON;  ///< Offset: 0x94 - IRQ32 Batch Read Register
        volatile uint32_t IRQ33MON;  ///< Offset: 0x98 - IRQ33 Batch Read Register
        volatile uint32_t IRQ34MON;  ///< Offset: 0x9C - IRQ34 Batch Read Register
        volatile uint32_t IRQ35MON;  ///< Offset: 0xA0 - IRQ35 Batch Read Register
        volatile uint32_t IRQ36MON;  ///< Offset: 0xA4 - IRQ36 Batch Read Register
        volatile uint32_t IRQ37MON;  ///< Offset: 0xA8 - IRQ37 Batch Read Register
        volatile uint32_t IRQ38MON;  ///< Offset: 0xAC - IRQ38 Batch Read Register
        volatile uint32_t IRQ39MON;  ///< Offset: 0xB0 - IRQ39 Batch Read Register
        volatile uint32_t IRQ40MON;  ///< Offset: 0xB4 - IRQ40 Batch Read Register
        volatile uint32_t IRQ41MON;  ///< Offset: 0xB8 - IRQ41 Batch Read Register
        volatile uint32_t IRQ42MON;  ///< Offset: 0xBC - IRQ42 Batch Read Register
        volatile uint32_t IRQ43MON;  ///< Offset: 0xC0 - IRQ43 Batch Read Register
        volatile uint32_t IRQ44MON;  ///< Offset: 0xC4 - IRQ44 Batch Read Register
        volatile uint32_t IRQ45MON;  ///< Offset: 0xC8 - IRQ45 Batch Read Register
        volatile uint32_t IRQ46MON;  ///< Offset: 0xCC - IRQ46 Batch Read Register
        volatile uint32_t DRQSEL1;  ///< Offset: 0x200 - DMA Request Select Register 1
        volatile uint32_t DQESEL;  ///< Offset: 0x204 - DMA Request Extended Selection Register
        volatile uint32_t ODDPKS1;  ///< Offset: 0x20F - USB ch.1 Odd Packet Size DMA Enable Register
    };

    /// Peripheral instances
    inline Registers* INTREQ = reinterpret_cast<Registers*>(INTREQ_BASE);

    // Bit definitions
    /// DRQSEL Register bits
    namespace drqsel_bits {
        constexpr uint32_t EXINT3 = (1U << 31);  ///< The interrupt signal of the external interrupt ch.3 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t EXINT2 = (1U << 30);  ///< The interrupt signal of the external interrupt ch.2 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t EXINT1 = (1U << 29);  ///< The interrupt signal of the external interrupt ch.1 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t EXINT0 = (1U << 28);  ///< The interrupt signal of the external interrupt ch.0 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS7TX = (1U << 27);  ///< The transmission interrupt signal of the MFS ch.7 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS7RX = (1U << 26);  ///< The reception interrupt signal of the MFS ch.7 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS6TX = (1U << 25);  ///< The transmission interrupt signal of the MFS ch.6 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS6RX = (1U << 24);  ///< The reception interrupt signal of the MFS ch.6 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS5TX = (1U << 23);  ///< The transmission interrupt signal of the MFS ch.5 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS5RX = (1U << 22);  ///< The reception interrupt signal of the MFS ch.5 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS4TX = (1U << 21);  ///< The transmission interrupt signal of the MFS ch.4 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS4RX = (1U << 20);  ///< The reception interrupt signal of the MFS ch.4 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS3TX = (1U << 19);  ///< The transmission interrupt signal of the MFS ch.3 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS3RX = (1U << 18);  ///< The reception interrupt signal of the MFS ch.3 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS2TX = (1U << 17);  ///< The transmission interrupt signal of the MFS ch.2 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS2RX = (1U << 16);  ///< The reception interrupt signal of the MFS ch.2 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS1TX = (1U << 15);  ///< The transmission interrupt signal of the MFS ch.1 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS1RX = (1U << 14);  ///< The reception interrupt signal of the MFS ch.1 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS0TX = (1U << 13);  ///< The transmission interrupt signal of the MFS ch.0 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t MFS0RX = (1U << 12);  ///< The reception interrupt signal of the MFS ch.0 is output as a transfer request to the DMAC (including extension).
        constexpr uint32_t IRQ0BT6 = (1U << 11);  ///< The IRQ0 interrupt signal of the base timer ch.6 is output as a transfer request to the DMAC.
        constexpr uint32_t IRQ0BT4 = (1U << 10);  ///< The IRQ0 interrupt signal of the base timer ch.4 is output as a transfer request to the DMAC.
        constexpr uint32_t IRQ0BT2 = (1U << 9);  ///< The IRQ0 interrupt signal of the base timer ch.3 is output as a transfer request to the DMAC.
        constexpr uint32_t IRQ0BT0 = (1U << 8);  ///< The IRQ0 interrupt signal of the base timer ch.0 is output as a transfer request to the DMAC.
        constexpr uint32_t ADCSCAN2 = (1U << 7);  ///< The scan conversion interrupt signal of the A/D converter unit 2 is output as a transfer request to the DMAC.
        constexpr uint32_t ADCSCAN1 = (1U << 6);  ///< The scan conversion interrupt signal of the A/D converter unit 1 is output as a transfer request to the DMAC.
        constexpr uint32_t ADCSCAN0 = (1U << 5);  ///< The scan conversion interrupt signal of the A/D converter unit 0 is output as a transfer request to the DMAC.
        constexpr uint32_t USBEP5 = (1U << 4);  ///< The EP5 DRQ interrupt signal of the USB ch.0 is output as a transfer request to the DMAC.
        constexpr uint32_t USBEP4 = (1U << 3);  ///< The EP4 DRQ interrupt signal of the USB ch.0 is output as a transfer request to the DMAC.
        constexpr uint32_t USBEP3 = (1U << 2);  ///< The EP3 DRQ interrupt signal of the USB ch.0 is output as a transfer request to the DMAC.
        constexpr uint32_t USBEP2 = (1U << 1);  ///< The EP2 DRQ interrupt signal of the USB ch.0 is output as a transfer request to the DMAC.
        constexpr uint32_t USBEP1 = (1U << 0);  ///< The EP1 DRQ interrupt signal of the USB ch.0 is output as a transfer request to the DMAC.
    }

    /// ODDPKS Register bits
    namespace oddpks_bits {
        constexpr uint32_t ODDPKS4 = (1U << 4);  ///< "When the transfer destination address of DMAC is USB.EP5DT, the bit width of the last transfer data is converted to Byte."
        constexpr uint32_t ODDPKS3 = (1U << 3);  ///< "When the transfer destination address of DMAC is USB.EP4DT, the bit width of the last transfer data is converted to Byte."
        constexpr uint32_t ODDPKS2 = (1U << 2);  ///< "When the transfer destination address of DMAC is USB.EP3DT, the bit width of the last transfer data is converted to Byte."
        constexpr uint32_t ODDPKS1 = (1U << 1);  ///< "When the transfer destination address of DMAC is USB.EP2DT, the bit width of the last transfer data is converted to Byte."
        constexpr uint32_t ODDPKS0 = (1U << 0);  ///< "When the transfer destination address of DMAC is USB.EP1DT, the bit width of the last transfer data is converted to Byte."
    }

    /// EXC02MON Register bits
    namespace exc02mon_bits {
        constexpr uint32_t HWINT = (1U << 1);  ///< Hardware watchdog timer interrupt request
        constexpr uint32_t NMI = (1U << 0);  ///< External NMIX pin interrupt request
    }

    /// IRQ00MON Register bits
    namespace irq00mon_bits {
        constexpr uint32_t FCSINT = (1U << 0);  ///< Anomalous frequency detection by CSV interrupt request
    }

    /// IRQ01MON Register bits
    namespace irq01mon_bits {
        constexpr uint32_t SWWDTINT = (1U << 0);  ///< Software watchdog timer interrupt request
    }

    /// IRQ02MON Register bits
    namespace irq02mon_bits {
        constexpr uint32_t LVDINT = (1U << 0);  ///< Low voltage detection (LVD) interrupt request
    }

    /// IRQ03MON Register bits
    namespace irq03mon_bits {
        constexpr uint32_t WAVE2INT3 = (1U << 11);  ///< WFG timer 54 interrupt request in MFT unit 2
        constexpr uint32_t WAVE2INT2 = (1U << 10);  ///< WFG timer 32 interrupt request in MFT unit 2
        constexpr uint32_t WAVE2INT1 = (1U << 9);  ///< WFG timer 10 interrupt request in MFT unit 2
        constexpr uint32_t WAVE2INT0 = (1U << 8);  ///< DTIF (motor emergency stop) interrupt request in MFT unit 2
        constexpr uint32_t WAVE1INT3 = (1U << 7);  ///< WFG timer 54 interrupt request in MFT unit 1
        constexpr uint32_t WAVE1INT2 = (1U << 6);  ///< WFG timer 32 interrupt request in MFT unit 1
        constexpr uint32_t WAVE1INT1 = (1U << 5);  ///< WFG timer 10 interrupt request in MFT unit 1
        constexpr uint32_t WAVE1INT0 = (1U << 4);  ///< DTIF (motor emergency stop) interrupt request in MFT unit 1
        constexpr uint32_t WAVE0INT3 = (1U << 3);  ///< WFG timer 54 interrupt request in MFT unit 0
        constexpr uint32_t WAVE0INT2 = (1U << 2);  ///< WFG timer 32 interrupt request in MFT unit 0
        constexpr uint32_t WAVE0INT1 = (1U << 1);  ///< WFG timer 10 interrupt request in MFT unit 0
        constexpr uint32_t WAVE0INT0 = (1U << 0);  ///< DTIF (motor emergency stop) interrupt request in MFT unit 0
    }

    /// IRQ04MON Register bits
    namespace irq04mon_bits {
        constexpr uint32_t EXTINT7 = (1U << 7);  ///< Interrupt request on external interrupt ch.7
        constexpr uint32_t EXTINT6 = (1U << 6);  ///< Interrupt request on external interrupt ch.6
        constexpr uint32_t EXTINT5 = (1U << 5);  ///< Interrupt request on external interrupt ch.5
        constexpr uint32_t EXTINT4 = (1U << 4);  ///< Interrupt request on external interrupt ch.4
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< Interrupt request on external interrupt ch.3
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< Interrupt request on external interrupt ch.2
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< Interrupt request on external interrupt ch.1
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< Interrupt request on external interrupt ch.0
    }

    /// IRQ05MON Register bits
    namespace irq05mon_bits {
        constexpr uint32_t EXTINT23 = (1U << 23);  ///< Interrupt request on external interrupt ch.31
        constexpr uint32_t EXTINT22 = (1U << 22);  ///< Interrupt request on external interrupt ch.30
        constexpr uint32_t EXTINT21 = (1U << 21);  ///< Interrupt request on external interrupt ch.29
        constexpr uint32_t EXTINT20 = (1U << 20);  ///< Interrupt request on external interrupt ch.28
        constexpr uint32_t EXTINT19 = (1U << 19);  ///< Interrupt request on external interrupt ch.27
        constexpr uint32_t EXTINT18 = (1U << 18);  ///< Interrupt request on external interrupt ch.26
        constexpr uint32_t EXTINT17 = (1U << 17);  ///< Interrupt request on external interrupt ch.25
        constexpr uint32_t EXTINT16 = (1U << 16);  ///< Interrupt request on external interrupt ch.24
        constexpr uint32_t EXTINT15 = (1U << 15);  ///< Interrupt request on external interrupt ch.23
        constexpr uint32_t EXTINT14 = (1U << 14);  ///< Interrupt request on external interrupt ch.22
        constexpr uint32_t EXTINT13 = (1U << 13);  ///< Interrupt request on external interrupt ch.21
        constexpr uint32_t EXTINT12 = (1U << 12);  ///< Interrupt request on external interrupt ch.20
        constexpr uint32_t EXTINT11 = (1U << 11);  ///< Interrupt request on external interrupt ch.19
        constexpr uint32_t EXTINT10 = (1U << 10);  ///< Interrupt request on external interrupt ch.18
        constexpr uint32_t EXTINT9 = (1U << 9);  ///< Interrupt request on external interrupt ch.17
        constexpr uint32_t EXTINT8 = (1U << 8);  ///< Interrupt request on external interrupt ch.16
        constexpr uint32_t EXTINT7 = (1U << 7);  ///< Interrupt request on external interrupt ch.15
        constexpr uint32_t EXTINT6 = (1U << 6);  ///< Interrupt request on external interrupt ch.14
        constexpr uint32_t EXTINT5 = (1U << 5);  ///< Interrupt request on external interrupt ch.13
        constexpr uint32_t EXTINT4 = (1U << 4);  ///< Interrupt request on external interrupt ch.12
        constexpr uint32_t EXTINT3 = (1U << 3);  ///< Interrupt request on external interrupt ch.11
        constexpr uint32_t EXTINT2 = (1U << 2);  ///< Interrupt request on external interrupt ch.10
        constexpr uint32_t EXTINT1 = (1U << 1);  ///< Interrupt request on external interrupt ch.9
        constexpr uint32_t EXTINT0 = (1U << 0);  ///< Interrupt request on external interrupt ch.8
    }

    /// IRQ06MON Register bits
    namespace irq06mon_bits {
        constexpr uint32_t QUD2INT5 = (1U << 19);  ///< PC match and RC match interrupt request on QPRC ch.2
        constexpr uint32_t QUD2INT4 = (1U << 18);  ///< Interrupt request detected RC out of range on QPRC ch.2
        constexpr uint32_t QUD2INT3 = (1U << 17);  ///< PC count invert interrupt request on QPRC ch.2
        constexpr uint32_t QUD2INT2 = (1U << 16);  ///< Overflow/underflow/zero index interrupt request on QPRC ch.2
        constexpr uint32_t QUD2INT1 = (1U << 15);  ///< PC and RC match interrupt request on QPRC ch.2
        constexpr uint32_t QUD2INT0 = (1U << 14);  ///< PC match interrupt request on QPRC ch.2
        constexpr uint32_t QUD1INT5 = (1U << 13);  ///< PC match and RC match interrupt request on QPRC ch.1
        constexpr uint32_t QUD1INT4 = (1U << 12);  ///< Interrupt request detected RC out of range on QPRC ch.1
        constexpr uint32_t QUD1INT3 = (1U << 11);  ///< PC count invert interrupt request on QPRC ch.1
        constexpr uint32_t QUD1INT2 = (1U << 10);  ///< Overflow/underflow/zero index interrupt request on QPRC ch.1
        constexpr uint32_t QUD1INT1 = (1U << 9);  ///< PC and RC match interrupt request on QPRC ch.1
        constexpr uint32_t QUD1INT0 = (1U << 8);  ///< PC match interrupt request on QPRC ch.1
        constexpr uint32_t QUD0INT5 = (1U << 7);  ///< PC match and RC match interrupt request on QPRC ch.0
        constexpr uint32_t QUD0INT4 = (1U << 6);  ///< Interrupt request detected RC out of range on QPRC ch.0
        constexpr uint32_t QUD0INT3 = (1U << 5);  ///< PC count invert interrupt request on QPRC ch.0
        constexpr uint32_t QUD0INT2 = (1U << 4);  ///< Overflow/underflow/zero index interrupt request on QPRC ch.0
        constexpr uint32_t QUD0INT1 = (1U << 3);  ///< PC and RC match interrupt request on QPRC ch.0
        constexpr uint32_t QUD0INT0 = (1U << 2);  ///< PC match interrupt request on QPRC ch.0
        constexpr uint32_t TIMINT2 = (1U << 1);  ///< Dual timer 2 interrupt request
        constexpr uint32_t TIMINT1 = (1U << 0);  ///< Dual timer 1 interrupt request
    }

    /// IRQ07MON Register bits
    namespace irq07mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.0
    }

    /// IRQ08MON Register bits
    namespace irq08mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.0
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.0
    }

    /// IRQ09MON Register bits
    namespace irq09mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.1
    }

    /// IRQ10MON Register bits
    namespace irq10mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.1
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.1
    }

    /// IRQ11MON Register bits
    namespace irq11mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.2
    }

    /// IRQ12MON Register bits
    namespace irq12mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.2
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.2
    }

    /// IRQ13MON Register bits
    namespace irq13mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.3
    }

    /// IRQ14MON Register bits
    namespace irq14mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.3
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.3
    }

    /// IRQ15MON Register bits
    namespace irq15mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.4
    }

    /// IRQ16MON Register bits
    namespace irq16mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.4
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.4
    }

    /// IRQ17MON Register bits
    namespace irq17mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.5
    }

    /// IRQ18MON Register bits
    namespace irq18mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.5
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.5
    }

    /// IRQ19MON Register bits
    namespace irq19mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.6
    }

    /// IRQ20MON Register bits
    namespace irq20mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.6
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.6
    }

    /// IRQ21MON Register bits
    namespace irq21mon_bits {
        constexpr uint32_t MFSINT = (1U << 0);  ///< Reception interrupt request on MFS ch.7
    }

    /// IRQ22MON Register bits
    namespace irq22mon_bits {
        constexpr uint32_t MFSINT1 = (1U << 1);  ///< Status interrupt request on MFS ch.7
        constexpr uint32_t MFSINT0 = (1U << 0);  ///< Transmission interrupt request on MFS ch.7
    }

    /// IRQ23MON Register bits
    namespace irq23mon_bits {
        constexpr uint32_t PPGINT8 = (1U << 8);  ///< Interrupt request on PPG ch.20
        constexpr uint32_t PPGINT7 = (1U << 7);  ///< Interrupt request on PPG ch.18
        constexpr uint32_t PPGINT6 = (1U << 6);  ///< Interrupt request on PPG ch.16
        constexpr uint32_t PPGINT5 = (1U << 5);  ///< Interrupt request on PPG ch.12
        constexpr uint32_t PPGINT4 = (1U << 4);  ///< Interrupt request on PPG ch.10
        constexpr uint32_t PPGINT3 = (1U << 3);  ///< Interrupt request on PPG ch.8
        constexpr uint32_t PPGINT2 = (1U << 2);  ///< Interrupt request on PPG ch.4
        constexpr uint32_t PPGINT1 = (1U << 1);  ///< Interrupt request on PPG ch.2
        constexpr uint32_t PPGINT0 = (1U << 0);  ///< Interrupt request on PPG ch.0
    }

    /// IRQ24MON Register bits
    namespace irq24mon_bits {
        constexpr uint32_t WCINT = (1U << 4);  ///< Watch counter interrupt request
        constexpr uint32_t UPLLINT = (1U << 3);  ///< Stabilization wait completion interrupt request for USB or USB/Ethernet PLL oscillation.
        constexpr uint32_t MPLLINT = (1U << 2);  ///< Stabilization wait completion interrupt request for main PLL oscillation
        constexpr uint32_t SOSCINT = (1U << 1);  ///< Stabilization wait completion interrupt request for sub-clock oscillation
        constexpr uint32_t MOSCINT = (1U << 0);  ///< Stabilization wait completion interrupt request for main clock oscillation
    }

    /// IRQ25MON Register bits
    namespace irq25mon_bits {
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< Conversion result comparison interrupt request in the corresponding A/D unit 0.
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< FIFO overrun interrupt request in the corresponding A/D unit 0.
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< Scan conversion interrupt request in the corresponding A/D unit 0.
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< Priority conversion interrupt request in the corresponding A/D unit 0.
    }

    /// IRQ26MON Register bits
    namespace irq26mon_bits {
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< Conversion result comparison interrupt request in the corresponding A/D unit 1
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< FIFO overrun interrupt request in the corresponding A/D unit 1
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< Scan conversion interrupt request in the corresponding A/D unit 1
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< Priority conversion interrupt request in the corresponding A/D unit 1
    }

    /// IRQ27MON Register bits
    namespace irq27mon_bits {
        constexpr uint32_t ADCINT3 = (1U << 3);  ///< Conversion result comparison interrupt request in the corresponding A/D unit 2
        constexpr uint32_t ADCINT2 = (1U << 2);  ///< FIFO overrun interrupt request in the corresponding A/D unit 2
        constexpr uint32_t ADCINT1 = (1U << 1);  ///< Scan conversion interrupt request in the corresponding A/D unit 2
        constexpr uint32_t ADCINT0 = (1U << 0);  ///< Priority conversion interrupt request in the corresponding A/D unit 2
    }

    /// IRQ28MON Register bits
    namespace irq28mon_bits {
        constexpr uint32_t FRT2INT5 = (1U << 17);  ///< Zero detection interrupt request on the free run timer ch.2 in the MFT unit 2
        constexpr uint32_t FRT2INT4 = (1U << 16);  ///< Zero detection interrupt request on the free run timer ch.1 in the MFT unit 2
        constexpr uint32_t FRT2INT3 = (1U << 15);  ///< Zero detection interrupt request on the free run timer ch.0 in the MFT unit 2
        constexpr uint32_t FRT2INT2 = (1U << 14);  ///< Peak value detection interrupt request on the free run timer ch.2 in the MFT unit 2
        constexpr uint32_t FRT2INT1 = (1U << 13);  ///< Peak value detection interrupt request on the free run timer ch.1 in the MFT unit 2
        constexpr uint32_t FRT2INT0 = (1U << 12);  ///< Peak value detection interrupt request on the free run timer ch.0 in the MFT unit 2
        constexpr uint32_t FRT1INT5 = (1U << 11);  ///< Zero detection interrupt request on the free run timer ch.2 in the MFT unit 1
        constexpr uint32_t FRT1INT4 = (1U << 10);  ///< Zero detection interrupt request on the free run timer ch.1 in the MFT unit 1
        constexpr uint32_t FRT1INT3 = (1U << 9);  ///< Zero detection interrupt request on the free run timer ch.0 in the MFT unit 1
        constexpr uint32_t FRT1INT2 = (1U << 8);  ///< Peak value detection interrupt request on the free run timer ch.2 in the MFT unit 1
        constexpr uint32_t FRT1INT1 = (1U << 7);  ///< Peak value detection interrupt request on the free run timer ch.1 in the MFT unit 1
        constexpr uint32_t FRT1INT0 = (1U << 6);  ///< Peak value detection interrupt request on the free run timer ch.0 in the MFT unit 1
        constexpr uint32_t FRT0INT5 = (1U << 5);  ///< Zero detection interrupt request on the free run timer ch.2 in the MFT unit 0
        constexpr uint32_t FRT0INT4 = (1U << 4);  ///< Zero detection interrupt request on the free run timer ch.1 in the MFT unit 0
        constexpr uint32_t FRT0INT3 = (1U << 3);  ///< Zero detection interrupt request on the free run timer ch.0 in the MFT unit 0
        constexpr uint32_t FRT0INT2 = (1U << 2);  ///< Peak value detection interrupt request on the free run timer ch.2 in the MFT unit 0
        constexpr uint32_t FRT0INT1 = (1U << 1);  ///< Peak value detection interrupt request on the free run timer ch.1 in the MFT unit 0
        constexpr uint32_t FRT0INT0 = (1U << 0);  ///< Peak value detection interrupt request on the free run timer ch.0 in the MFT unit 0
    }

    /// IRQ29MON Register bits
    namespace irq29mon_bits {
        constexpr uint32_t ICU2INT3 = (1U << 11);  ///< Interrupt request on the input capture ch.3 in the MFT unit 2
        constexpr uint32_t ICU2INT2 = (1U << 10);  ///< Interrupt request on the input capture ch.2 in the MFT unit 2
        constexpr uint32_t ICU2INT1 = (1U << 9);  ///< Interrupt request on the input capture ch.1 in the MFT unit 2
        constexpr uint32_t ICU2INT0 = (1U << 8);  ///< Interrupt request on the input capture ch.0 in the MFT unit 2
        constexpr uint32_t ICU1INT3 = (1U << 7);  ///< Interrupt request on the input capture ch.3 in the MFT unit 1
        constexpr uint32_t ICU1INT2 = (1U << 6);  ///< Interrupt request on the input capture ch.2 in the MFT unit 1
        constexpr uint32_t ICU1INT1 = (1U << 5);  ///< Interrupt request on the input capture ch.1 in the MFT unit 1
        constexpr uint32_t ICU1INT0 = (1U << 4);  ///< Interrupt request on the input capture ch.0 in the MFT unit 1
        constexpr uint32_t ICU0INT3 = (1U << 3);  ///< Interrupt request on the input capture ch.3 in the MFT unit 0
        constexpr uint32_t ICU0INT2 = (1U << 2);  ///< Interrupt request on the input capture ch.2 in the MFT unit 0
        constexpr uint32_t ICU0INT1 = (1U << 1);  ///< Interrupt request on the input capture ch.1 in the MFT unit 0
        constexpr uint32_t ICU0INT0 = (1U << 0);  ///< Interrupt request on the input capture ch.0 in the MFT unit 0
    }

    /// IRQ30MON Register bits
    namespace irq30mon_bits {
        constexpr uint32_t OCU2INT5 = (1U << 17);  ///< Interrupt request on the output compare ch.5 in the MFT unit 2
        constexpr uint32_t OCU2INT4 = (1U << 16);  ///< Interrupt request on the output compare ch.4 in the MFT unit 2
        constexpr uint32_t OCU2INT3 = (1U << 15);  ///< Interrupt request on the output compare ch.3 in the MFT unit 2
        constexpr uint32_t OCU2INT2 = (1U << 14);  ///< Interrupt request on the output compare ch.2 in the MFT unit 2
        constexpr uint32_t OCU2INT1 = (1U << 13);  ///< Interrupt request on the output compare ch.1 in the MFT unit 2
        constexpr uint32_t OCU2INT0 = (1U << 12);  ///< Interrupt request on the output compare ch.0 in the MFT unit 2
        constexpr uint32_t OCU1INT5 = (1U << 11);  ///< Interrupt request on the output compare ch.5 in the MFT unit 1
        constexpr uint32_t OCU1INT4 = (1U << 10);  ///< Interrupt request on the output compare ch.4 in the MFT unit 1
        constexpr uint32_t OCU1INT3 = (1U << 9);  ///< Interrupt request on the output compare ch.3 in the MFT unit 1
        constexpr uint32_t OCU1INT2 = (1U << 8);  ///< Interrupt request on the output compare ch.2 in the MFT unit 1
        constexpr uint32_t OCU1INT1 = (1U << 7);  ///< Interrupt request on the output compare ch.1 in the MFT unit 1
        constexpr uint32_t OCU1INT0 = (1U << 6);  ///< Interrupt request on the output compare ch.0 in the MFT unit 1
        constexpr uint32_t OCU0INT5 = (1U << 5);  ///< Interrupt request on the output compare ch.5 in the MFT unit 0
        constexpr uint32_t OCU0INT4 = (1U << 4);  ///< Interrupt request on the output compare ch.4 in the MFT unit 0
        constexpr uint32_t OCU0INT3 = (1U << 3);  ///< Interrupt request on the output compare ch.3 in the MFT unit 0
        constexpr uint32_t OCU0INT2 = (1U << 2);  ///< Interrupt request on the output compare ch.2 in the MFT unit 0
        constexpr uint32_t OCU0INT1 = (1U << 1);  ///< Interrupt request on the output compare ch.1 in the MFT unit 0
        constexpr uint32_t OCU0INT0 = (1U << 0);  ///< Interrupt request on the output compare ch.0 in the MFT unit 0
    }

    /// IRQ31MON Register bits
    namespace irq31mon_bits {
        constexpr uint32_t BTINT15 = (1U << 15);  ///< IRQ1 interrupt request on the base timer ch.7
        constexpr uint32_t BTINT14 = (1U << 14);  ///< IRQ0 interrupt request on the base timer ch.7
        constexpr uint32_t BTINT13 = (1U << 13);  ///< IRQ1 interrupt request on the base timer ch.6
        constexpr uint32_t BTINT12 = (1U << 12);  ///< IRQ0 interrupt request on the base timer ch.6
        constexpr uint32_t BTINT11 = (1U << 11);  ///< IRQ1 interrupt request on the base timer ch.5
        constexpr uint32_t BTINT10 = (1U << 10);  ///< IRQ0 interrupt request on the base timer ch.5
        constexpr uint32_t BTINT9 = (1U << 9);  ///< IRQ1 interrupt request on the base timer ch.4
        constexpr uint32_t BTINT8 = (1U << 8);  ///< IRQ0 interrupt request on the base timer ch.4
        constexpr uint32_t BTINT7 = (1U << 7);  ///< IRQ1 interrupt request on the base timer ch.3
        constexpr uint32_t BTINT6 = (1U << 6);  ///< IRQ0 interrupt request on the base timer ch.3
        constexpr uint32_t BTINT5 = (1U << 5);  ///< IRQ1 interrupt request on the base timer ch.2
        constexpr uint32_t BTINT4 = (1U << 4);  ///< IRQ0 interrupt request on the base timer ch.2
        constexpr uint32_t BTINT3 = (1U << 3);  ///< IRQ1 interrupt request on the base timer ch.1
        constexpr uint32_t BTINT2 = (1U << 2);  ///< IRQ0 interrupt request on the base timer ch.1
        constexpr uint32_t BTINT1 = (1U << 1);  ///< IRQ1 interrupt request on the base timer ch.0
        constexpr uint32_t BTINT0 = (1U << 0);  ///< IRQ0 interrupt request on the base timer ch.0
    }

    /// IRQ32MON Register bits
    namespace irq32mon_bits {
        constexpr uint32_t CAN0INT = (1U << 0);  ///< Interrupt request of CAN ch.0
    }

    /// IRQ33MON Register bits
    namespace irq33mon_bits {
        constexpr uint32_t CAN1INT = (1U << 0);  ///< Interrupt request of CAN ch.1
    }

    /// IRQ34MON Register bits
    namespace irq34mon_bits {
        constexpr uint32_t USB0INT4 = (1U << 4);  ///< Endpoint 5 DRQ interrupt request on the USB ch.0
        constexpr uint32_t USB0INT3 = (1U << 3);  ///< Endpoint 4 DRQ interrupt request on the USB ch.0
        constexpr uint32_t USB0INT2 = (1U << 2);  ///< Endpoint 3 DRQ interrupt request on the USB ch.0
        constexpr uint32_t USB0INT1 = (1U << 1);  ///< Endpoint 2 DRQ interrupt request on the USB ch.0
        constexpr uint32_t USB0INT0 = (1U << 0);  ///< Endpoint 1 DRQ interrupt request on the USB ch.0
    }

    /// IRQ35MON Register bits
    namespace irq35mon_bits {
        constexpr uint32_t USB0INT5 = (1U << 5);  ///< "Status (SOFIRQ, CMPIRO) interrupt request on the USB ch.0 "
        constexpr uint32_t USB0INT4 = (1U << 4);  ///< "Status (DIRQ, URIRQ, RWKIRQ, CNNIRQ) interrupt request on the USB ch.0 "
        constexpr uint32_t USB0INT3 = (1U << 3);  ///< Status (SPK) interrupt request on the USB ch.0
        constexpr uint32_t USB0INT2 = (1U << 2);  ///< "Status (SUSP, SOF, BRST, CONF, WKUP) interrupt request on the USB ch.0 "
        constexpr uint32_t USB0INT1 = (1U << 1);  ///< Endpoint 0 DRQO interrupt request on the USB ch.0
        constexpr uint32_t USB0INT0 = (1U << 0);  ///< Endpoint 0 DRQI interrupt request on the USB ch.0
    }

    /// IRQ36MON Register bits
    namespace irq36mon_bits {
        constexpr uint32_t USB1INT4 = (1U << 4);  ///< Endpoint 5 DRQ interrupt request on the USB ch.1
        constexpr uint32_t USB1INT3 = (1U << 3);  ///< Endpoint 4 DRQ interrupt request on the USB ch.1
        constexpr uint32_t USB1INT2 = (1U << 2);  ///< Endpoint 3 DRQ interrupt request on the USB ch.1
        constexpr uint32_t USB1INT1 = (1U << 1);  ///< Endpoint 2 DRQ interrupt request on the USB ch.1
        constexpr uint32_t USB1INT0 = (1U << 0);  ///< Endpoint 1 DRQ interrupt request on the USB ch.1
    }

    /// IRQ37MON Register bits
    namespace irq37mon_bits {
        constexpr uint32_t USB1INT5 = (1U << 5);  ///< "Status (SOFIRQ, CMPIRO) interrupt request on the USB ch.1 "
        constexpr uint32_t USB1INT4 = (1U << 4);  ///< "Status (DIRQ, URIRQ, RWKIRQ, CNNIRQ) interrupt request on the USB ch.1 "
        constexpr uint32_t USB1INT3 = (1U << 3);  ///< Status (SPK) interrupt request on the USB ch.1
        constexpr uint32_t USB1INT2 = (1U << 2);  ///< "Status (SUSP, SOF, BRST, CONF, WKUP) interrupt request on the USB ch.1 "
        constexpr uint32_t USB1INT1 = (1U << 1);  ///< Endpoint 0 DRQO interrupt request on the USB ch.1
        constexpr uint32_t USB1INT0 = (1U << 0);  ///< Endpoint 0 DRQI interrupt request on the USB ch.1
    }

    /// IRQ38MON Register bits
    namespace irq38mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< Interrupt request on DMA ch.0.
    }

    /// IRQ39MON Register bits
    namespace irq39mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< Interrupt request on DMA ch.1.
    }

    /// IRQ40MON Register bits
    namespace irq40mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< Interrupt request on DMA ch.2.
    }

    /// IRQ41MON Register bits
    namespace irq41mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< Interrupt request on DMA ch.3.
    }

    /// IRQ42MON Register bits
    namespace irq42mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< Interrupt request on DMA ch.4.
    }

    /// IRQ43MON Register bits
    namespace irq43mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< Interrupt request on DMA ch.5.
    }

    /// IRQ44MON Register bits
    namespace irq44mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< Interrupt request on DMA ch.6.
    }

    /// IRQ45MON Register bits
    namespace irq45mon_bits {
        constexpr uint32_t DMAINT = (1U << 0);  ///< Interrupt request on DMA ch.7.
    }

    /// IRQ46MON Register bits
    namespace irq46mon_bits {
        constexpr uint32_t BTINT15 = (1U << 15);  ///< IRQ1 interrupt request of base timer ch.15
        constexpr uint32_t BTINT14 = (1U << 14);  ///< IRQ0 interrupt request of base timer ch.15
        constexpr uint32_t BTINT13 = (1U << 13);  ///< IRQ1 interrupt request of base timer ch.14
        constexpr uint32_t BTINT12 = (1U << 12);  ///< IRQ0 interrupt request of base timer ch.14
        constexpr uint32_t BTINT11 = (1U << 11);  ///< IRQ1 interrupt request of base timer ch.13
        constexpr uint32_t BTINT10 = (1U << 10);  ///< IRQ0 interrupt request of base timer ch.13
        constexpr uint32_t BTINT9 = (1U << 9);  ///< IRQ1 interrupt request of base timer ch.12
        constexpr uint32_t BTINT8 = (1U << 8);  ///< IRQ0 interrupt request of base timer ch.12
        constexpr uint32_t BTINT7 = (1U << 7);  ///< IRQ1 interrupt request of base timer ch.11
        constexpr uint32_t BTINT6 = (1U << 6);  ///< IRQ0 interrupt request of base timer ch.11
        constexpr uint32_t BTINT5 = (1U << 5);  ///< IRQ1 interrupt request of base timer ch.10
        constexpr uint32_t BTINT4 = (1U << 4);  ///< IRQ0 interrupt request of base timer ch.10
        constexpr uint32_t BTINT3 = (1U << 3);  ///< IRQ1 interrupt request of base timer ch.9
        constexpr uint32_t BTINT2 = (1U << 2);  ///< IRQ0 interrupt request of base timer ch.9
        constexpr uint32_t BTINT1 = (1U << 1);  ///< IRQ1 interrupt request of base timer ch.8
        constexpr uint32_t BTINT0 = (1U << 0);  ///< IRQ0 interrupt request of base timer ch.8
    }

    /// DRQSEL1 Register bits
    namespace drqsel1_bits {
        constexpr uint32_t DRQSEL14 = (1U << 4);  ///< Interrupt signal of EP5 DRQ of USB ch.1 is output to transfer request to DMAC through extended selector
        constexpr uint32_t DRQSEL13 = (1U << 3);  ///< Interrupt signal of EP4 DRQ of USB ch.1 is output to transfer request to DMAC through extended selector
        constexpr uint32_t DRQSEL12 = (1U << 2);  ///< Interrupt signal of EP3 DRQ of USB ch.1 is output to transfer request to DMAC through extended selector
        constexpr uint32_t DRQSEL11 = (1U << 1);  ///< Interrupt signal of EP2 DRQ of USB ch.1 is output to transfer request to DMAC through extended selector
        constexpr uint32_t DRQSEL10 = (1U << 0);  ///< Interrupt signal of EP1 DRQ of USB ch.1 is output to transfer request to DMAC through extended selector
    }

    /// DQESEL Register bits
    namespace dqesel_bits {
        constexpr uint32_t ESEL31 = (4 << 28);  ///< Connect USB-ch1 to IDREQ [31]
        constexpr uint32_t ESEL30 = (4 << 24);  ///< Connect USB-ch1 to IDREQ [30]
        constexpr uint32_t ESEL27 = (4 << 20);  ///< Connect USB-ch1 to IDREQ [27]
        constexpr uint32_t ESEL26 = (4 << 16);  ///< Connect USB-ch1 to IDREQ [26]
        constexpr uint32_t ESEL25 = (4 << 12);  ///< Connect USB-ch1 to IDREQ [25]
        constexpr uint32_t ESEL24 = (4 << 8);  ///< Connect USB-ch1 to IDREQ [24]
        constexpr uint32_t ESEL11 = (4 << 4);  ///< Connect USB-ch1 to IDREQ [11]
        constexpr uint32_t ESEL10 = (4 << 0);  ///< Connect USB-ch1 to IDREQ [10]
    }

    /// ODDPKS1 Register bits
    namespace oddpks1_bits {
        constexpr uint32_t ODDPKS14 = (1U << 4);  ///< "When the transfer destination address of the DMAC is USB.EP5DT, convert the bit width of the last transfer data to byte."
        constexpr uint32_t ODDPKS13 = (1U << 3);  ///< "When the transfer destination address of the DMAC is USB.EP4DT, convert the bit width of the last transfer data to byte."
        constexpr uint32_t ODDPKS12 = (1U << 2);  ///< "When the transfer destination address of the DMAC is USB.EP3DT, convert the bit width of the last transfer data to byte."
        constexpr uint32_t ODDPKS11 = (1U << 1);  ///< "When the transfer destination address of the DMAC is USB.EP2DT, convert the bit width of the last transfer data to byte."
        constexpr uint32_t ODDPKS10 = (1U << 0);  ///< "When the transfer destination address of the DMAC is USB.EP1DT, convert the bit width of the last transfer data to byte."
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_BASE = 0x40033000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t PFR0;  ///< Offset: 0x00 - Port function setting register 0
        volatile uint32_t PFR1;  ///< Offset: 0x04 - Port function setting register 1
        volatile uint32_t PFR2;  ///< Offset: 0x08 - Port function setting register 2
        volatile uint32_t PFR3;  ///< Offset: 0x0C - Port function setting register 3
        volatile uint32_t PFR4;  ///< Offset: 0x10 - Port function setting register 4
        volatile uint32_t PFR5;  ///< Offset: 0x14 - Port function setting register 5
        volatile uint32_t PFR6;  ///< Offset: 0x18 - Port function setting register 6
        volatile uint32_t PFR7;  ///< Offset: 0x1C - Port function setting register 7
        volatile uint32_t PFR8;  ///< Offset: 0x20 - Port function setting register 8
        volatile uint32_t PFRA;  ///< Offset: 0x28 - Port function setting register A
        volatile uint32_t PFRC;  ///< Offset: 0x30 - Port function setting register C
        volatile uint32_t PFRD;  ///< Offset: 0x34 - Port function setting register D
        volatile uint32_t PFRE;  ///< Offset: 0x38 - Port function setting register E
        volatile uint32_t PFRF;  ///< Offset: 0x3C - Port function setting register F
        volatile uint32_t PCR0;  ///< Offset: 0x100 - Pull-up Setting Register 0
        volatile uint32_t PCR1;  ///< Offset: 0x104 - Pull-up Setting Register 1
        volatile uint32_t PCR2;  ///< Offset: 0x108 - Pull-up Setting Register 2
        volatile uint32_t PCR3;  ///< Offset: 0x10C - Pull-up Setting Register 3
        volatile uint32_t PCR4;  ///< Offset: 0x110 - Pull-up Setting Register 4
        volatile uint32_t PCR5;  ///< Offset: 0x114 - Pull-up Setting Register 5
        volatile uint32_t PCR6;  ///< Offset: 0x118 - Pull-up Setting Register 6
        volatile uint32_t PCR7;  ///< Offset: 0x11C - Pull-up Setting Register 7
        volatile uint32_t PCR8;  ///< Offset: 0x120 - Pull-up Setting Register 8
        volatile uint32_t PCRA;  ///< Offset: 0x128 - Pull-up Setting Register A
        volatile uint32_t PCRC;  ///< Offset: 0x130 - Pull-up Setting Register C
        volatile uint32_t PCRD;  ///< Offset: 0x134 - Pull-up Setting Register D
        volatile uint32_t PCRE;  ///< Offset: 0x138 - Pull-up Setting Register E
        volatile uint32_t PCRF;  ///< Offset: 0x13C - Pull-up Setting Register F
        volatile uint32_t DDR0;  ///< Offset: 0x200 - Port input/output direction setting register 0
        volatile uint32_t DDR1;  ///< Offset: 0x204 - Port input/output direction setting register 1
        volatile uint32_t DDR2;  ///< Offset: 0x208 - Port input/output direction setting register 2
        volatile uint32_t DDR3;  ///< Offset: 0x20C - Port input/output direction setting register 3
        volatile uint32_t DDR4;  ///< Offset: 0x210 - Port input/output direction setting register 4
        volatile uint32_t DDR5;  ///< Offset: 0x214 - Port input/output direction setting register 5
        volatile uint32_t DDR6;  ///< Offset: 0x218 - Port input/output direction setting register 6
        volatile uint32_t DDR7;  ///< Offset: 0x21C - Port input/output direction setting register 7
        volatile uint32_t DDR8;  ///< Offset: 0x220 - Port input/output direction setting register 8
        volatile uint32_t DDRA;  ///< Offset: 0x228 - Port input/output direction setting register A
        volatile uint32_t DDRC;  ///< Offset: 0x230 - Port input/output direction setting register C
        volatile uint32_t DDRD;  ///< Offset: 0x234 - Port input/output direction setting register D
        volatile uint32_t DDRE;  ///< Offset: 0x238 - Port input/output direction setting register E
        volatile uint32_t DDRF;  ///< Offset: 0x23C - Port input/output direction setting register F
        volatile uint32_t PDIR0;  ///< Offset: 0x300 - Port input data register 0
        volatile uint32_t PDIR1;  ///< Offset: 0x304 - Port input data register 1
        volatile uint32_t PDIR2;  ///< Offset: 0x308 - Port input data register 2
        volatile uint32_t PDIR3;  ///< Offset: 0x30C - Port input data register 3
        volatile uint32_t PDIR4;  ///< Offset: 0x310 - Port input data register 4
        volatile uint32_t PDIR5;  ///< Offset: 0x314 - Port input data register 5
        volatile uint32_t PDIR6;  ///< Offset: 0x318 - Port input data register 6
        volatile uint32_t PDIR7;  ///< Offset: 0x31C - Port input data register 7
        volatile uint32_t PDIR8;  ///< Offset: 0x320 - Port input data register 8
        volatile uint32_t PDIRA;  ///< Offset: 0x328 - Port input data register A
        volatile uint32_t PDIRC;  ///< Offset: 0x330 - Port input data register C
        volatile uint32_t PDIRD;  ///< Offset: 0x334 - Port input data register D
        volatile uint32_t PDIRE;  ///< Offset: 0x338 - Port input data register E
        volatile uint32_t PDIRF;  ///< Offset: 0x33C - Port input data register F
        volatile uint32_t PDOR0;  ///< Offset: 0x400 - Port output data register 0
        volatile uint32_t PDOR1;  ///< Offset: 0x404 - Port output data register 1
        volatile uint32_t PDOR2;  ///< Offset: 0x408 - Port output data register 2
        volatile uint32_t PDOR3;  ///< Offset: 0x40C - Port output data register 3
        volatile uint32_t PDOR4;  ///< Offset: 0x410 - Port output data register 4
        volatile uint32_t PDOR5;  ///< Offset: 0x414 - Port output data register 5
        volatile uint32_t PDOR6;  ///< Offset: 0x418 - Port output data register 6
        volatile uint32_t PDOR7;  ///< Offset: 0x41C - Port output data register 7
        volatile uint32_t PDOR8;  ///< Offset: 0x420 - Port output data register 8
        volatile uint32_t PDORA;  ///< Offset: 0x428 - Port output data register A
        volatile uint32_t PDORC;  ///< Offset: 0x430 - Port output data register C
        volatile uint32_t PDORD;  ///< Offset: 0x434 - Port output data register D
        volatile uint32_t PDORE;  ///< Offset: 0x438 - Port output data register E
        volatile uint32_t PDORF;  ///< Offset: 0x43C - Port output data register F
        volatile uint32_t ADE;  ///< Offset: 0x500 - Analog input setting register
        volatile uint32_t SPSR;  ///< Offset: 0x580 - Special port setting register
        volatile uint32_t EPFR00;  ///< Offset: 0x600 - Extended pin function setting register 00
        volatile uint32_t EPFR01;  ///< Offset: 0x604 - Extended pin function setting register 01
        volatile uint32_t EPFR02;  ///< Offset: 0x608 - Extended pin function setting register 02
        volatile uint32_t EPFR03;  ///< Offset: 0x60C - Extended pin function setting register 03
        volatile uint32_t EPFR04;  ///< Offset: 0x610 - Extended pin function setting register 04
        volatile uint32_t EPFR05;  ///< Offset: 0x614 - Extended pin function setting register 05
        volatile uint32_t EPFR06;  ///< Offset: 0x618 - Extended pin function setting register 06
        volatile uint32_t EPFR07;  ///< Offset: 0x61C - Extended pin function setting register 07
        volatile uint32_t EPFR08;  ///< Offset: 0x620 - Extended pin function setting register 08
        volatile uint32_t EPFR09;  ///< Offset: 0x624 - Extended pin function setting register 09
        volatile uint32_t EPFR10;  ///< Offset: 0x628 - Extended pin function setting register 10
        volatile uint32_t EPFR11;  ///< Offset: 0x62C - Extended pin function setting register 11
        volatile uint32_t EPFR12;  ///< Offset: 0x630 - Extended pin function setting register 12
        volatile uint32_t EPFR13;  ///< Offset: 0x634 - Extended pin function setting register 13
        volatile uint32_t EPFR14;  ///< Offset: 0x638 - Extended pin function setting register 14
        volatile uint32_t EPFR15;  ///< Offset: 0x63C - Extended pin function setting register 15
        volatile uint32_t PZR0;  ///< Offset: 0x700 - Port Pseudo Open Drain Setting Register 0
        volatile uint32_t PZR1;  ///< Offset: 0x704 - Port Pseudo Open Drain Setting Register 1
        volatile uint32_t PZR2;  ///< Offset: 0x708 - Port Pseudo Open Drain Setting Register 2
        volatile uint32_t PZR3;  ///< Offset: 0x70C - Port Pseudo Open Drain Setting Register 3
        volatile uint32_t PZR4;  ///< Offset: 0x710 - Port Pseudo Open Drain Setting Register 4
        volatile uint32_t PZR5;  ///< Offset: 0x714 - Port Pseudo Open Drain Setting Register 5
        volatile uint32_t PZR6;  ///< Offset: 0x718 - Port Pseudo Open Drain Setting Register 6
        volatile uint32_t PZR7;  ///< Offset: 0x71C - Port Pseudo Open Drain Setting Register 7
        volatile uint32_t PZR8;  ///< Offset: 0x720 - Port Pseudo Open Drain Setting Register 8
        volatile uint32_t PZRA;  ///< Offset: 0x728 - Port Pseudo Open Drain Setting Register A
        volatile uint32_t PZRC;  ///< Offset: 0x730 - Port Pseudo Open Drain Setting Register C
        volatile uint32_t PZRD;  ///< Offset: 0x734 - Port Pseudo Open Drain Setting Register D
        volatile uint32_t PZRE;  ///< Offset: 0x738 - Port Pseudo Open Drain Setting Register E
        volatile uint32_t PZRF;  ///< Offset: 0x73C - Port Pseudo Open Drain Setting Register F
    };

    /// Peripheral instances
    inline Registers* GPIO = reinterpret_cast<Registers*>(GPIO_BASE);

    // Bit definitions
    /// PFR0 Register bits
    namespace pfr0_bits {
        constexpr uint32_t P09 = (1U << 9);  ///< Bit9 of PFR0
        constexpr uint32_t P08 = (1U << 8);  ///< Bit8 of PFR0
        constexpr uint32_t P07 = (1U << 7);  ///< Bit7 of PFR0
        constexpr uint32_t P06 = (1U << 6);  ///< Bit6 of PFR0
        constexpr uint32_t P05 = (1U << 5);  ///< Bit5 of PFR0
        constexpr uint32_t P04 = (1U << 4);  ///< Bit4 of PFR0
        constexpr uint32_t P03 = (1U << 3);  ///< Bit3 of PFR0
        constexpr uint32_t P02 = (1U << 2);  ///< Bit2 of PFR0
        constexpr uint32_t P01 = (1U << 1);  ///< Bit1 of PFR0
        constexpr uint32_t P00 = (1U << 0);  ///< Bit0 of PFR0
    }

    /// PFR1 Register bits
    namespace pfr1_bits {
        constexpr uint32_t P1F = (1U << 15);  ///< Bit15 of PFR1
        constexpr uint32_t P1E = (1U << 14);  ///< Bit14 of PFR1
        constexpr uint32_t P1D = (1U << 13);  ///< Bit13 of PFR1
        constexpr uint32_t P1C = (1U << 12);  ///< Bit12 of PFR1
        constexpr uint32_t P1B = (1U << 11);  ///< Bit11 of PFR1
        constexpr uint32_t P1A = (1U << 10);  ///< Bit10 of PFR1
        constexpr uint32_t P19 = (1U << 9);  ///< Bit9 of PFR1
        constexpr uint32_t P18 = (1U << 8);  ///< Bit8 of PFR1
        constexpr uint32_t P17 = (1U << 7);  ///< Bit7 of PFR1
        constexpr uint32_t P16 = (1U << 6);  ///< Bit6 of PFR1
        constexpr uint32_t P15 = (1U << 5);  ///< Bit5 of PFR1
        constexpr uint32_t P14 = (1U << 4);  ///< Bit4 of PFR1
        constexpr uint32_t P13 = (1U << 3);  ///< Bit3 of PFR1
        constexpr uint32_t P12 = (1U << 2);  ///< Bit2 of PFR1
        constexpr uint32_t P11 = (1U << 1);  ///< Bit1 of PFR1
        constexpr uint32_t P10 = (1U << 0);  ///< Bit0 of PFR1
    }

    /// PFR2 Register bits
    namespace pfr2_bits {
        constexpr uint32_t P29 = (1U << 9);  ///< Bit9 of PFR2
        constexpr uint32_t P28 = (1U << 8);  ///< Bit8 of PFR2
        constexpr uint32_t P27 = (1U << 7);  ///< Bit7 of PFR2
        constexpr uint32_t P26 = (1U << 6);  ///< Bit6 of PFR2
        constexpr uint32_t P25 = (1U << 5);  ///< Bit5 of PFR2
        constexpr uint32_t P24 = (1U << 4);  ///< Bit4 of PFR2
        constexpr uint32_t P23 = (1U << 3);  ///< Bit3 of PFR2
        constexpr uint32_t P22 = (1U << 2);  ///< Bit2 of PFR2
        constexpr uint32_t P21 = (1U << 1);  ///< Bit1 of PFR2
        constexpr uint32_t P20 = (1U << 0);  ///< Bit0 of PFR2
    }

    /// PFR3 Register bits
    namespace pfr3_bits {
        constexpr uint32_t P3F = (1U << 15);  ///< Bit15 of PFR3
        constexpr uint32_t P3E = (1U << 14);  ///< Bit14 of PFR3
        constexpr uint32_t P3D = (1U << 13);  ///< Bit13 of PFR3
        constexpr uint32_t P3C = (1U << 12);  ///< Bit12 of PFR3
        constexpr uint32_t P3B = (1U << 11);  ///< Bit11 of PFR3
        constexpr uint32_t P3A = (1U << 10);  ///< Bit10 of PFR3
        constexpr uint32_t P39 = (1U << 9);  ///< Bit9 of PFR3
        constexpr uint32_t P38 = (1U << 8);  ///< Bit8 of PFR3
        constexpr uint32_t P37 = (1U << 7);  ///< Bit7 of PFR3
        constexpr uint32_t P36 = (1U << 6);  ///< Bit6 of PFR3
    }

    /// PFR4 Register bits
    namespace pfr4_bits {
        constexpr uint32_t P4E = (1U << 14);  ///< Bit14 of PFR4
        constexpr uint32_t P4D = (1U << 13);  ///< Bit13 of PFR4
        constexpr uint32_t P4C = (1U << 12);  ///< Bit12 of PFR4
        constexpr uint32_t P4B = (1U << 11);  ///< Bit11 of PFR4
        constexpr uint32_t P4A = (1U << 10);  ///< Bit10 of PFR4
        constexpr uint32_t P49 = (1U << 9);  ///< Bit9 of PFR4
        constexpr uint32_t P48 = (1U << 8);  ///< Bit8 of PFR4
        constexpr uint32_t P47 = (1U << 7);  ///< Bit7 of PFR4
        constexpr uint32_t P46 = (1U << 6);  ///< Bit6 of PFR4
        constexpr uint32_t P45 = (1U << 5);  ///< Bit5 of PFR4
        constexpr uint32_t P44 = (1U << 4);  ///< Bit4 of PFR4
        constexpr uint32_t P43 = (1U << 3);  ///< Bit3 of PFR4
        constexpr uint32_t P42 = (1U << 2);  ///< Bit2 of PFR4
        constexpr uint32_t P41 = (1U << 1);  ///< Bit1 of PFR4
        constexpr uint32_t P40 = (1U << 0);  ///< Bit0 of PFR4
    }

    /// PFR5 Register bits
    namespace pfr5_bits {
        constexpr uint32_t P5B = (1U << 11);  ///< Bit11 of PFR5
        constexpr uint32_t P5A = (1U << 10);  ///< Bit10 of PFR5
        constexpr uint32_t P59 = (1U << 9);  ///< Bit9 of PFR5
        constexpr uint32_t P58 = (1U << 8);  ///< Bit8 of PFR5
        constexpr uint32_t P57 = (1U << 7);  ///< Bit7 of PFR5
        constexpr uint32_t P56 = (1U << 6);  ///< Bit6 of PFR5
        constexpr uint32_t P55 = (1U << 5);  ///< Bit5 of PFR5
        constexpr uint32_t P54 = (1U << 4);  ///< Bit4 of PFR5
        constexpr uint32_t P53 = (1U << 3);  ///< Bit3 of PFR5
        constexpr uint32_t P52 = (1U << 2);  ///< Bit2 of PFR5
        constexpr uint32_t P51 = (1U << 1);  ///< Bit1 of PFR5
        constexpr uint32_t P50 = (1U << 0);  ///< Bit0 of PFR5
    }

    /// PFR6 Register bits
    namespace pfr6_bits {
        constexpr uint32_t P62 = (1U << 2);  ///< Bit2 of PFR6
        constexpr uint32_t P61 = (1U << 1);  ///< Bit1 of PFR6
        constexpr uint32_t P60 = (1U << 0);  ///< Bit0 of PFR6
    }

    /// PFR7 Register bits
    namespace pfr7_bits {
        constexpr uint32_t P7A = (1U << 10);  ///< Bit10 of PFR7
        constexpr uint32_t P79 = (1U << 9);  ///< Bit9 of PFR7
        constexpr uint32_t P78 = (1U << 8);  ///< Bit8 of PFR7
        constexpr uint32_t P77 = (1U << 7);  ///< Bit7 of PFR7
        constexpr uint32_t P76 = (1U << 6);  ///< Bit6 of PFR7
        constexpr uint32_t P75 = (1U << 5);  ///< Bit5 of PFR7
        constexpr uint32_t P74 = (1U << 4);  ///< Bit4 of PFR7
        constexpr uint32_t P73 = (1U << 3);  ///< Bit3 of PFR7
        constexpr uint32_t P72 = (1U << 2);  ///< Bit2 of PFR7
        constexpr uint32_t P71 = (1U << 1);  ///< Bit1 of PFR7
        constexpr uint32_t P70 = (1U << 0);  ///< Bit0 of PFR7
    }

    /// PFR8 Register bits
    namespace pfr8_bits {
        constexpr uint32_t P83 = (1U << 3);  ///< Bit3 of PFR8
        constexpr uint32_t P82 = (1U << 2);  ///< Bit2 of PFR8
        constexpr uint32_t P81 = (1U << 1);  ///< Bit1 of PFR8
        constexpr uint32_t P80 = (1U << 0);  ///< Bit0 of PFR8
    }

    /// PFRA Register bits
    namespace pfra_bits {
        constexpr uint32_t PA5 = (1U << 5);  ///< Bit5 of PFRA
        constexpr uint32_t PA4 = (1U << 4);  ///< Bit4 of PFRA
        constexpr uint32_t PA3 = (1U << 3);  ///< Bit3 of PFRA
        constexpr uint32_t PA2 = (1U << 2);  ///< Bit2 of PFRA
        constexpr uint32_t PA1 = (1U << 1);  ///< Bit1 of PFRA
        constexpr uint32_t PA0 = (1U << 0);  ///< Bit0 of PFRA
    }

    /// PFRC Register bits
    namespace pfrc_bits {
        constexpr uint32_t PCF = (1U << 15);  ///< Bit15 of PFRC
        constexpr uint32_t PCE = (1U << 14);  ///< Bit14 of PFRC
        constexpr uint32_t PCD = (1U << 13);  ///< Bit13 of PFRC
        constexpr uint32_t PCC = (1U << 12);  ///< Bit12 of PFRC
        constexpr uint32_t PCB = (1U << 11);  ///< Bit11 of PFRC
        constexpr uint32_t PCA = (1U << 10);  ///< Bit10 of PFRC
        constexpr uint32_t PC9 = (1U << 9);  ///< Bit9 of PFRC
        constexpr uint32_t PC8 = (1U << 8);  ///< Bit8 of PFRC
        constexpr uint32_t PC7 = (1U << 7);  ///< Bit7 of PFRC
        constexpr uint32_t PC6 = (1U << 6);  ///< Bit6 of PFRC
        constexpr uint32_t PC5 = (1U << 5);  ///< Bit5 of PFRC
        constexpr uint32_t PC4 = (1U << 4);  ///< Bit4 of PFRC
        constexpr uint32_t PC3 = (1U << 3);  ///< Bit3 of PFRC
        constexpr uint32_t PC2 = (1U << 2);  ///< Bit2 of PFRC
        constexpr uint32_t PC1 = (1U << 1);  ///< Bit1 of PFRC
        constexpr uint32_t PC0 = (1U << 0);  ///< Bit0 of PFRC
    }

    /// PFRD Register bits
    namespace pfrd_bits {
        constexpr uint32_t PD3 = (1U << 3);  ///< Bit3 of PFRD
        constexpr uint32_t PD2 = (1U << 2);  ///< Bit2 of PFRD
        constexpr uint32_t PD1 = (1U << 1);  ///< Bit1 of PFRD
        constexpr uint32_t PD0 = (1U << 0);  ///< Bit0 of PFRD
    }

    /// PFRE Register bits
    namespace pfre_bits {
        constexpr uint32_t PE3 = (1U << 3);  ///< Bit3 of PFRE
        constexpr uint32_t PE2 = (1U << 2);  ///< Bit2 of PFRE
        constexpr uint32_t PE0 = (1U << 0);  ///< Bit0 of PFRE
    }

    /// PFRF Register bits
    namespace pfrf_bits {
        constexpr uint32_t PF6 = (1U << 6);  ///< Bit6 of PFRF
        constexpr uint32_t PF5 = (1U << 5);  ///< Bit5 of PFRF
    }

    /// DDR0 Register bits
    namespace ddr0_bits {
        constexpr uint32_t P0F = (1U << 15);  ///< Bit15 of DDR0
        constexpr uint32_t P0E = (1U << 14);  ///< Bit14 of DDR0
        constexpr uint32_t P0D = (1U << 13);  ///< Bit13 of DDR0
        constexpr uint32_t P0C = (1U << 12);  ///< Bit12 of DDR0
        constexpr uint32_t P0B = (1U << 11);  ///< Bit11 of DDR0
        constexpr uint32_t P0A = (1U << 10);  ///< Bit10 of DDR0
        constexpr uint32_t P09 = (1U << 9);  ///< Bit9 of DDR0
        constexpr uint32_t P08 = (1U << 8);  ///< Bit8 of DDR0
        constexpr uint32_t P07 = (1U << 7);  ///< Bit7 of DDR0
        constexpr uint32_t P06 = (1U << 6);  ///< Bit6 of DDR0
        constexpr uint32_t P05 = (1U << 5);  ///< Bit5 of DDR0
        constexpr uint32_t P04 = (1U << 4);  ///< Bit4 of DDR0
        constexpr uint32_t P03 = (1U << 3);  ///< Bit3 of DDR0
        constexpr uint32_t P02 = (1U << 2);  ///< Bit2 of DDR0
        constexpr uint32_t P01 = (1U << 1);  ///< Bit1 of DDR0
        constexpr uint32_t P00 = (1U << 0);  ///< Bit0 of DDR0
    }

    /// ADE Register bits
    namespace ade_bits {
        constexpr uint32_t AN31 = (1U << 31);  ///< Bit31 of ADE
        constexpr uint32_t AN30 = (1U << 30);  ///< Bit30 of ADE
        constexpr uint32_t AN29 = (1U << 29);  ///< Bit29 of ADE
        constexpr uint32_t AN28 = (1U << 28);  ///< Bit28 of ADE
        constexpr uint32_t AN27 = (1U << 27);  ///< Bit27 of ADE
        constexpr uint32_t AN26 = (1U << 26);  ///< Bit26 of ADE
        constexpr uint32_t AN25 = (1U << 25);  ///< Bit25 of ADE
        constexpr uint32_t AN24 = (1U << 24);  ///< Bit24 of ADE
        constexpr uint32_t AN15 = (1U << 15);  ///< Bit15 of ADE
        constexpr uint32_t AN14 = (1U << 14);  ///< Bit14 of ADE
        constexpr uint32_t AN13 = (1U << 13);  ///< Bit13 of ADE
        constexpr uint32_t AN12 = (1U << 12);  ///< Bit12 of ADE
        constexpr uint32_t AN11 = (1U << 11);  ///< Bit11 of ADE
        constexpr uint32_t AN10 = (1U << 10);  ///< Bit10 of ADE
        constexpr uint32_t AN9 = (1U << 9);  ///< Bit9 of ADE
        constexpr uint32_t AN8 = (1U << 8);  ///< Bit8 of ADE
        constexpr uint32_t AN7 = (1U << 7);  ///< Bit7 of ADE
        constexpr uint32_t AN6 = (1U << 6);  ///< Bit6 of ADE
        constexpr uint32_t AN5 = (1U << 5);  ///< Bit5 of ADE
        constexpr uint32_t AN4 = (1U << 4);  ///< Bit4 of ADE
        constexpr uint32_t AN3 = (1U << 3);  ///< Bit3 of ADE
        constexpr uint32_t AN2 = (1U << 2);  ///< Bit2 of ADE
        constexpr uint32_t AN1 = (1U << 1);  ///< Bit1 of ADE
        constexpr uint32_t AN0 = (1U << 0);  ///< Bit0 of ADE
    }

    /// SPSR Register bits
    namespace spsr_bits {
        constexpr uint32_t USB1C = (1U << 5);  ///< USBch1 pin setting bit
        constexpr uint32_t USB0C = (1U << 4);  ///< USBch0 pin setting bit
        constexpr uint32_t MAINXC = (1U << 2);  ///< Main clock(oscillation) pin setting bit
        constexpr uint32_t SUBXC = (1U << 0);  ///< Sub clock(oscillation) pin setting bit
    }

    /// EPFR00 Register bits
    namespace epfr00_bits {
        constexpr uint32_t TRC1E = (1U << 25);  ///< TRACED function select bit1
        constexpr uint32_t TRC0E = (1U << 24);  ///< TRACED function select bit0
        constexpr uint32_t JTAGEN1S = (1U << 17);  ///< JTAG function select bit1
        constexpr uint32_t JTAGEN0B = (1U << 16);  ///< JTAG function select bit0
        constexpr uint32_t USBP1E = (1U << 13);  ///< USBch1 function select bit
        constexpr uint32_t USBP0E = (1U << 9);  ///< USBch0 function select bit
        constexpr uint32_t SUBOUTE = (2 << 6);  ///< Sub clock divide output function select bit
        constexpr uint32_t CROUTE = (2 << 1);  ///< Internal high-speed CR oscillation output function select bit
        constexpr uint32_t NMIS = (1U << 0);  ///< NMIX function select bit
    }

    /// EPFR01 Register bits
    namespace epfr01_bits {
        constexpr uint32_t IC03S = (3 << 29);  ///< IC03 input select bit
        constexpr uint32_t IC02S = (3 << 26);  ///< IC02 input select bit
        constexpr uint32_t IC01S = (3 << 23);  ///< IC01 input select bit
        constexpr uint32_t IC00S = (3 << 20);  ///< IC00 input select bit
        constexpr uint32_t FRCK0S = (2 << 18);  ///< FRCK0 input select bit
        constexpr uint32_t DTTI0S = (2 << 16);  ///< DTTIX0 input select bit
        constexpr uint32_t DTTI0C = (1U << 12);  ///< DTTIX0 function select bit
        constexpr uint32_t RTO05E = (2 << 10);  ///< RTO05E output select bit
        constexpr uint32_t RTO04E = (2 << 8);  ///< RTO04E output select bit
        constexpr uint32_t RTO03E = (2 << 6);  ///< RTO03E output select bit
        constexpr uint32_t RTO02E = (2 << 4);  ///< RTO02E output select bit
        constexpr uint32_t RTO01E = (2 << 2);  ///< RTO01E output select bit
        constexpr uint32_t RTO00E = (2 << 0);  ///< RTO00E output select bit
    }

    /// EPFR02 Register bits
    namespace epfr02_bits {
        constexpr uint32_t IC13S = (3 << 29);  ///< IC13 input select bit
        constexpr uint32_t IC12S = (3 << 26);  ///< IC12 input select bit
        constexpr uint32_t IC11S = (3 << 23);  ///< IC11 input select bit
        constexpr uint32_t IC10S = (3 << 20);  ///< IC10 input select bit
        constexpr uint32_t FRCK1S = (2 << 18);  ///< FRCK1 input select bit
        constexpr uint32_t DTTI1S = (2 << 16);  ///< DTTIX1 input select bit
        constexpr uint32_t DTTI1C = (1U << 12);  ///< DTTIX1 function select bit
        constexpr uint32_t RTO15E = (2 << 10);  ///< RTO15E output select bit
        constexpr uint32_t RTO14E = (2 << 8);  ///< RTO14E output select bit
        constexpr uint32_t RTO13E = (2 << 6);  ///< RTO13E output select bit
        constexpr uint32_t RTO12E = (2 << 4);  ///< RTO12E output select bit
        constexpr uint32_t RTO11E = (2 << 2);  ///< RTO11E output select bit
        constexpr uint32_t RTO10E = (2 << 0);  ///< RTO10E output select bit
    }

    /// EPFR03 Register bits
    namespace epfr03_bits {
        constexpr uint32_t IC23S = (3 << 29);  ///< IC23 input select bit
        constexpr uint32_t IC22S = (3 << 26);  ///< IC22 input select bit
        constexpr uint32_t IC21S = (3 << 23);  ///< IC21 input select bit
        constexpr uint32_t IC20S = (3 << 20);  ///< IC20 input select bit
        constexpr uint32_t FRCK2S = (2 << 18);  ///< FRCK2 input select bit
        constexpr uint32_t DTTI2S = (2 << 16);  ///< DTTIX2 input select bit
        constexpr uint32_t DTTI2C = (1U << 12);  ///< DTTIX2 function select bit
        constexpr uint32_t RTO25E = (2 << 10);  ///< RTO25E output select bit
        constexpr uint32_t RTO24E = (2 << 8);  ///< RTO24E output select bit
        constexpr uint32_t RTO23E = (2 << 6);  ///< RTO23E output select bit
        constexpr uint32_t RTO22E = (2 << 4);  ///< RTO22E output select bit
        constexpr uint32_t RTO21E = (2 << 2);  ///< RTO21E output select bit
        constexpr uint32_t RTO20E = (2 << 0);  ///< RTO20E output select bit
    }

    /// EPFR04 Register bits
    namespace epfr04_bits {
        constexpr uint32_t TIOB3S = (2 << 28);  ///< TIOB3 input select bit
        constexpr uint32_t TIOA3E = (2 << 26);  ///< TIOA3E output select bit
        constexpr uint32_t TIOA3S = (2 << 24);  ///< TIOA3 input select bit
        constexpr uint32_t TIOB2S = (2 << 20);  ///< TIOB2 input select bit
        constexpr uint32_t TIOA2E = (2 << 18);  ///< TIOA2 output select bit
        constexpr uint32_t TIOB1S = (2 << 12);  ///< TIOB1 input select bit
        constexpr uint32_t TIOA1E = (2 << 10);  ///< TIOA1E output select bit
        constexpr uint32_t TIOA1S = (2 << 8);  ///< TIOA1 input select bit
        constexpr uint32_t TIOB0S = (2 << 4);  ///< TIOB0 input select bit
        constexpr uint32_t TIOA0E = (2 << 2);  ///< TIOA0 output select bit
    }

    /// EPFR05 Register bits
    namespace epfr05_bits {
        constexpr uint32_t TIOB7S = (2 << 28);  ///< TIOB7 input select Bit
        constexpr uint32_t TIOA7E = (2 << 26);  ///< TIOA7E output select bit
        constexpr uint32_t TIOA7S = (2 << 24);  ///< TIOA7 input select bit
        constexpr uint32_t TIOB6S = (2 << 20);  ///< TIOB6 input select bit
        constexpr uint32_t TIOA6E = (2 << 18);  ///< TIOA6 output select bit
        constexpr uint32_t TIOB5S = (2 << 12);  ///< TIOB5 input select bit
        constexpr uint32_t TIOA5E = (2 << 10);  ///< TIOA5E output select bit
        constexpr uint32_t TIOA5S = (2 << 8);  ///< TIOA5 input select bit
        constexpr uint32_t TIOB4S = (2 << 4);  ///< TIOB4 input select bit
        constexpr uint32_t TIOA4E = (2 << 2);  ///< TIOA4 output select bit
    }

    /// EPFR06 Register bits
    namespace epfr06_bits {
        constexpr uint32_t EINT15S = (2 << 30);  ///< External interrupt 15 input select bit
        constexpr uint32_t EINT14S = (2 << 28);  ///< External interrupt 14 input select bit
        constexpr uint32_t EINT13S = (2 << 26);  ///< External interrupt 13 input select bit
        constexpr uint32_t EINT12S = (2 << 24);  ///< External interrupt 12 input select bit
        constexpr uint32_t EINT11S = (2 << 22);  ///< External interrupt 11 input select bit
        constexpr uint32_t EINT10S = (2 << 20);  ///< External interrupt 10 input select bit
        constexpr uint32_t EINT09S = (2 << 18);  ///< External interrupt 9 input select bit
        constexpr uint32_t EINT08S = (2 << 16);  ///< External interrupt 8 input select bit
        constexpr uint32_t EINT07S = (2 << 14);  ///< External interrupt 7 input select bit
        constexpr uint32_t EINT06S = (2 << 12);  ///< External interrupt 6 input select bit
        constexpr uint32_t EINT05S = (2 << 10);  ///< External interrupt 5 input select bit
        constexpr uint32_t EINT04S = (2 << 8);  ///< External interrupt 4 input select bit
        constexpr uint32_t EINT03S = (2 << 6);  ///< External interrupt 3 input select bit
        constexpr uint32_t EINT02S = (2 << 4);  ///< External interrupt 2 input select bit
        constexpr uint32_t EINT01S = (2 << 2);  ///< External interrupt 1 input select bit
        constexpr uint32_t EINT00S = (2 << 0);  ///< External interrupt 0 input select bit
    }

    /// EPFR07 Register bits
    namespace epfr07_bits {
        constexpr uint32_t SCK3B = (2 << 26);  ///< SCK3 input/output select bit
        constexpr uint32_t SOT3B = (2 << 24);  ///< SOT3B input/output select bit
        constexpr uint32_t SIN3S = (2 << 22);  ///< SIN3S input select bit
        constexpr uint32_t SCK2B = (2 << 20);  ///< SCK2 input/output select bit
        constexpr uint32_t SOT2B = (2 << 18);  ///< SOT2B input/output select bit
        constexpr uint32_t SIN2S = (2 << 16);  ///< SIN2S input select bit
        constexpr uint32_t SCK1B = (2 << 14);  ///< SCK1 input/output select bit
        constexpr uint32_t SOT1B = (2 << 12);  ///< SCK1B input/output select bit
        constexpr uint32_t SIN1S = (2 << 10);  ///< SIN1S input select bit
        constexpr uint32_t SCK0B = (2 << 8);  ///< SCK0 input/output select bit
        constexpr uint32_t SOT0B = (2 << 6);  ///< SOT0B input/output select bit
        constexpr uint32_t SIN0S = (2 << 4);  ///< SIN0S input select bit
    }

    /// EPFR08 Register bits
    namespace epfr08_bits {
        constexpr uint32_t SCK7B = (2 << 26);  ///< SCK7 input/output select bit
        constexpr uint32_t SOT7B = (2 << 24);  ///< SOT7B input/output select bit
        constexpr uint32_t SIN7S = (2 << 22);  ///< SIN7S input select bit
        constexpr uint32_t SCK6B = (2 << 20);  ///< SCK6 input/output select bit
        constexpr uint32_t SOT6B = (2 << 18);  ///< SOT6B input/output select bit
        constexpr uint32_t SIN6S = (2 << 16);  ///< SIN6S input select bit
        constexpr uint32_t SCK5B = (2 << 14);  ///< SCK5 input/output select bit
        constexpr uint32_t SOT5B = (2 << 12);  ///< SOT5B input/output select bit
        constexpr uint32_t SIN5S = (2 << 10);  ///< SIN5S input select bit
        constexpr uint32_t SCK4B = (2 << 8);  ///< SCK4 input/output select bit
        constexpr uint32_t SOT4B = (2 << 6);  ///< SOT4B input/output select bit
        constexpr uint32_t SIN4S = (2 << 4);  ///< SIN4S input select bit
        constexpr uint32_t CTS4S = (2 << 2);  ///< CTS4S input select bit
        constexpr uint32_t RTS4E = (2 << 0);  ///< RTS4E output select bit
    }

    /// EPFR09 Register bits
    namespace epfr09_bits {
        constexpr uint32_t CTX1E = (2 << 30);  ///< CAN TX1 Output Select bits
        constexpr uint32_t CRX1S = (2 << 28);  ///< CAN RX1 Input Select bits
        constexpr uint32_t CTX0E = (2 << 26);  ///< CAN TX2 Output Select bits
        constexpr uint32_t CRX0S = (2 << 24);  ///< CAN RX2 Input Select bits
        constexpr uint32_t ADTRG2S = (4 << 20);  ///< ADTRG2 input select bit
        constexpr uint32_t ADTRG1S = (4 << 16);  ///< ADTRG1 input select bit
        constexpr uint32_t ADTRG0S = (4 << 12);  ///< ADTRG0 input select bit
        constexpr uint32_t QZIN1S = (2 << 10);  ///< QZIN1S input select bit
        constexpr uint32_t QBIN1S = (2 << 8);  ///< QBIN1S input select bit
        constexpr uint32_t QAIN1S = (2 << 6);  ///< QAIN1S input select bit
        constexpr uint32_t QZIN0S = (2 << 4);  ///< QZIN0S input select bit
        constexpr uint32_t QBIN0S = (2 << 2);  ///< QBIN0S input select bit
        constexpr uint32_t QAIN0S = (2 << 0);  ///< QAIN0S input select bit
    }

    /// EPFR10 Register bits
    namespace epfr10_bits {
        constexpr uint32_t UEA18E = (1U << 25);  ///< UEA18E output select bit
        constexpr uint32_t UEA17E = (1U << 24);  ///< UEA17E output select bit
        constexpr uint32_t UEA16E = (1U << 23);  ///< UEA16E output select bit
        constexpr uint32_t UEA15E = (1U << 22);  ///< UEA15E output select bit
        constexpr uint32_t UEA14E = (1U << 21);  ///< UEA14E output select bit
        constexpr uint32_t UEA13E = (1U << 20);  ///< UEA13E output select bit
        constexpr uint32_t UEA12E = (1U << 19);  ///< UEA12E output select bit
        constexpr uint32_t UEA11E = (1U << 18);  ///< UEA11E output select bit
        constexpr uint32_t UEA10E = (1U << 17);  ///< UEA10E output select bit
        constexpr uint32_t UEA09E = (1U << 16);  ///< UEA09E output select bit
        constexpr uint32_t UEA08E = (1U << 15);  ///< UEA08E output select bit
        constexpr uint32_t UEAOOE = (1U << 14);  ///< UEAOOE output select bit
        constexpr uint32_t UECS7E = (1U << 13);  ///< UECS7E output select bit
        constexpr uint32_t UECS6E = (1U << 12);  ///< UECS6E output select bit
        constexpr uint32_t UECS5E = (1U << 11);  ///< UECS5E output select bit
        constexpr uint32_t UECS4E = (1U << 10);  ///< UECS4E output select bit
        constexpr uint32_t UECS3E = (1U << 9);  ///< UECS3E output select bit
        constexpr uint32_t UECS2E = (1U << 8);  ///< UECS2E output select bit
        constexpr uint32_t UECS1E = (1U << 7);  ///< UECS1E output select bit
        constexpr uint32_t UEFLSE = (1U << 6);  ///< UEFLSE output select bit
        constexpr uint32_t UEOEXE = (1U << 5);  ///< UEOEXE output select bit
        constexpr uint32_t UEDQME = (1U << 4);  ///< UEDQME output select bit
        constexpr uint32_t UEWEXE = (1U << 3);  ///< UEWEXE output select bit
        constexpr uint32_t UECLKE = (1U << 2);  ///< UECLKE output select bit
        constexpr uint32_t UEDTHB = (1U << 1);  ///< UEDTHB input/output select bit
        constexpr uint32_t UEDEFB = (1U << 0);  ///< UEDEFB input/output select bit
    }

    /// EPFR11 Register bits
    namespace epfr11_bits {
        constexpr uint32_t UERLC = (1U << 25);  ///< UERLC relocation select bit
        constexpr uint32_t UED15B = (1U << 24);  ///< UED15B input/output select bit
        constexpr uint32_t UED14B = (1U << 23);  ///< UED14B output select bit
        constexpr uint32_t UED13B = (1U << 22);  ///< UED13B output select bit
        constexpr uint32_t UED12B = (1U << 21);  ///< UED12B output select bit
        constexpr uint32_t UED11B = (1U << 20);  ///< UED11B output select bit
        constexpr uint32_t UED10B = (1U << 19);  ///< UED10B output select bit
        constexpr uint32_t UED09B = (1U << 18);  ///< UED09B output select bit
        constexpr uint32_t UED08B = (1U << 17);  ///< UED08B output select bit
        constexpr uint32_t UED07B = (1U << 16);  ///< UED07B output select bit
        constexpr uint32_t UED06B = (1U << 15);  ///< UED06B output select bit
        constexpr uint32_t UED05B = (1U << 14);  ///< UED05B output select bit
        constexpr uint32_t UED04B = (1U << 13);  ///< UED04B output select bit
        constexpr uint32_t UED03B = (1U << 12);  ///< UED03B output select bit
        constexpr uint32_t UED02B = (1U << 11);  ///< UED02B output select bit
        constexpr uint32_t UED01B = (1U << 10);  ///< UED01B output select bit
        constexpr uint32_t UED00B = (1U << 9);  ///< UED00B output select bit
        constexpr uint32_t UEA07E = (1U << 8);  ///< UEA07E output select bit
        constexpr uint32_t UEA06E = (1U << 7);  ///< UEA06E output select bit
        constexpr uint32_t UEA05E = (1U << 6);  ///< UEA05E output select bit
        constexpr uint32_t UEA04E = (1U << 5);  ///< UEA04E output select bit
        constexpr uint32_t UEA03E = (1U << 4);  ///< UEA03E output select bit
        constexpr uint32_t UEA02E = (1U << 3);  ///< UEA02E output select bit
        constexpr uint32_t UEA01E = (1U << 2);  ///< UEA01E output select bit
        constexpr uint32_t UECS0E = (1U << 1);  ///< UECS0E output select bit
        constexpr uint32_t UEALEE = (1U << 0);  ///< UEALEE output select bit
    }

    /// EPFR12 Register bits
    namespace epfr12_bits {
        constexpr uint32_t TIOB11S = (2 << 28);  ///< TIOB11 Input Select bits
        constexpr uint32_t TIOA11E = (2 << 26);  ///< TIOA11 Output Select bits
        constexpr uint32_t TIOA11S = (2 << 24);  ///< TIOA11 Input Select bits
        constexpr uint32_t TIOB10S = (2 << 20);  ///< TIOB10 Input Select bits
        constexpr uint32_t TIOA10E = (2 << 18);  ///< TIOA10 Output Select bits
        constexpr uint32_t TIOB9S = (2 << 12);  ///< TIOB9 Input Select bits
        constexpr uint32_t TIOA9E = (2 << 10);  ///< TIOA9 Output Select bits
        constexpr uint32_t TIOA9S = (2 << 8);  ///< TIOA9 Input Select bits
        constexpr uint32_t TIOB8S = (2 << 4);  ///< TIOB8 Input Select bits
        constexpr uint32_t TIOA8E = (2 << 2);  ///< TIOA8 Output Select bits
    }

    /// EPFR13 Register bits
    namespace epfr13_bits {
        constexpr uint32_t TIOB15S = (2 << 28);  ///< TIOB15 Input Select bits
        constexpr uint32_t TIOA15E = (2 << 26);  ///< TIOA15 Output Select bits
        constexpr uint32_t TIOA15S = (2 << 24);  ///< TIOA15 Input Select bits
        constexpr uint32_t TIOB14S = (2 << 20);  ///< TIOB14 Input Select bits
        constexpr uint32_t TIOA14E = (2 << 18);  ///< TIOA14 Output Select bits
        constexpr uint32_t TIOB13S = (2 << 12);  ///< TIOB13 Input Select bits
        constexpr uint32_t TIOA13E = (2 << 10);  ///< TIOA13 Output Select bits
        constexpr uint32_t TIOA13S = (2 << 8);  ///< TIOA13 Input Select bits
        constexpr uint32_t TIOB12S = (2 << 4);  ///< TIOB12 Input Select bits
        constexpr uint32_t TIOA12E = (2 << 2);  ///< TIOA12 Output Select bits
    }

    /// EPFR14 Register bits
    namespace epfr14_bits {
        constexpr uint32_t QZIN2S = (2 << 4);  ///< QDU-ch.2 ZIN Input Pin bits
        constexpr uint32_t QBIN2S = (2 << 2);  ///< QDU-ch.2 BIN Input Pin bits
        constexpr uint32_t QAIN2S = (2 << 0);  ///< QDU-ch.2 AIN Input Pin bits
    }

    /// EPFR15 Register bits
    namespace epfr15_bits {
        constexpr uint32_t EINT31S = (2 << 30);  ///< External interrupt 31 input select bit
        constexpr uint32_t EINT30S = (2 << 28);  ///< External interrupt 30 input select bit
        constexpr uint32_t EINT29S = (2 << 26);  ///< External interrupt 29 input select bit
        constexpr uint32_t EINT28S = (2 << 24);  ///< External interrupt 28 input select bit
        constexpr uint32_t EINT27S = (2 << 22);  ///< External interrupt 27 input select bit
        constexpr uint32_t EINT26S = (2 << 20);  ///< External interrupt 26 input select bit
        constexpr uint32_t EINT25S = (2 << 18);  ///< External interrupt 25 input select bit
        constexpr uint32_t EINT24S = (2 << 16);  ///< External interrupt 24 input select bit
        constexpr uint32_t EINT23S = (2 << 14);  ///< External interrupt 23 input select bit
        constexpr uint32_t EINT22S = (2 << 12);  ///< External interrupt 22 input select bit
        constexpr uint32_t EINT21S = (2 << 10);  ///< External interrupt 21 input select bit
        constexpr uint32_t EINT20S = (2 << 8);  ///< External interrupt 20 input select bit
        constexpr uint32_t EINT19S = (2 << 6);  ///< External interrupt 19 input select bit
        constexpr uint32_t EINT18S = (2 << 4);  ///< External interrupt 18 input select bit
        constexpr uint32_t EINT17S = (2 << 2);  ///< External interrupt 17 input select bit
        constexpr uint32_t EINT16S = (2 << 0);  ///< External interrupt 16 input select bit
    }

}

// ============================================================================
// LVD Peripheral
// ============================================================================

namespace lvd {
    /// Base addresses
    constexpr uint32_t LVD_BASE = 0x40035000;

    /// LVD Register structure
    struct Registers {
        volatile uint32_t LVD_CTL;  ///< Offset: 0x00 - Low-voltage Detection Voltage Control Register
        volatile uint32_t LVD_STR;  ///< Offset: 0x04 - Low-voltage Detection Interrupt Register
        volatile uint32_t LVD_CLR;  ///< Offset: 0x08 - Low-voltage Detection Interrupt Clear Register
        volatile uint32_t LVD_RLR;  ///< Offset: 0x0C - Low-voltage Detection Voltage Protection Register
        volatile uint32_t LVD_STR2;  ///< Offset: 0x10 - Low-voltage Detection Circuit Status Register
    };

    /// Peripheral instances
    inline Registers* LVD = reinterpret_cast<Registers*>(LVD_BASE);

    // Bit definitions
    /// LVD_CTL Register bits
    namespace lvd_ctl_bits {
        constexpr uint32_t LVDIE = (1U << 7);  ///< Low-voltage detection interrupt enable bit
        constexpr uint32_t SVHI = (4 << 2);  ///< Low-voltage detection interrupt voltage setting bits
    }

    /// LVD_STR Register bits
    namespace lvd_str_bits {
        constexpr uint32_t LVDIR = (1U << 7);  ///< Low-voltage detection interrupt bit
    }

    /// LVD_CLR Register bits
    namespace lvd_clr_bits {
        constexpr uint32_t LVDCL = (1U << 7);  ///< Low-voltage detection interrupt clear bit
    }

    /// LVD_RLR Register bits
    namespace lvd_rlr_bits {
        constexpr uint32_t LVDLCK = (32 << 0);  ///< Low-voltage Detection Voltage Control Register protection bits
    }

    /// LVD_STR2 Register bits
    namespace lvd_str2_bits {
        constexpr uint32_t LVDIRDY = (1U << 7);  ///< Low-voltage detection interrupt status flag
    }

}

// ============================================================================
// MFS0 Peripheral
// ============================================================================

namespace mfs0 {
    /// Base addresses
    constexpr uint32_t MFS0_BASE = 0x40038000;

    /// MFS0 Register structure
    struct Registers {
        volatile uint32_t UART_SCR;  ///< Offset: 0x01 - Serial Control Register
        volatile uint32_t UART_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t UART_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t UART_ESCR;  ///< Offset: 0x04 - Extended Communication Control Register
        volatile uint32_t UART_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t UART_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t UART_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t CSIO_SCR;  ///< Offset: 0x01 - Serial Control Register
        volatile uint32_t CSIO_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t CSIO_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t CSIO_ESCR;  ///< Offset: 0x04 - Extended Communication Control Register
        volatile uint32_t CSIO_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t CSIO_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t CSIO_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t LIN_SCR;  ///< Offset: 0x01 - Serial Control Register
        volatile uint32_t LIN_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t LIN_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t LIN_ESCR;  ///< Offset: 0x04 - Extended Communication Control Register
        volatile uint32_t LIN_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t LIN_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t LIN_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t I2C_IBCR;  ///< Offset: 0x01 - I2C Bus Control Register
        volatile uint32_t I2C_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t I2C_IBSR;  ///< Offset: 0x04 - I2C Bus Status Register
        volatile uint32_t I2C_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t I2C_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t I2C_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t I2C_ISMK;  ///< Offset: 0x11 - 7-bit Slave Address Mask Register
        volatile uint32_t I2C_ISBA;  ///< Offset: 0x10 - 7-bit Slave Address Register
        volatile uint32_t I2C_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
    };

    /// Peripheral instances
    inline Registers* MFS0 = reinterpret_cast<Registers*>(MFS0_BASE);

    // Bit definitions
    /// UART_SCR Register bits
    namespace uart_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< Programmable Clear bit
        constexpr uint32_t RIE = (1U << 4);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 3);  ///< Transmit interrupt enable bit
        constexpr uint32_t TBIE = (1U << 2);  ///< Transmit bus idle interrupt enable bit
        constexpr uint32_t RXE = (1U << 1);  ///< Received operation enable bit
        constexpr uint32_t TXE = (1U << 0);  ///< Transmission operation enable bit
    }

    /// UART_SMR Register bits
    namespace uart_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< Operation mode set bit
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t SBL = (1U << 3);  ///< Stop bit length select bit
        constexpr uint32_t BDS = (1U << 2);  ///< Transfer direction select bit
        constexpr uint32_t SOE = (1U << 0);  ///< Serial data output enable bit
    }

    /// UART_SSR Register bits
    namespace uart_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t PE = (1U << 5);  ///< Parity error flag bit (only functions in operation mode 0)
        constexpr uint32_t FRE = (1U << 4);  ///< Framing error flag bit
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag
    }

    /// UART_ESCR Register bits
    namespace uart_escr_bits {
        constexpr uint32_t FLWEN = (1U << 7);  ///< Flow control enable bit
        constexpr uint32_t ESBL = (1U << 6);  ///< Extension stop bit length select bit
        constexpr uint32_t INV = (1U << 5);  ///< Inverted serial data format bit
        constexpr uint32_t PEN = (1U << 4);  ///< Parity enable bit (only functions in operation mode 0)
        constexpr uint32_t P = (1U << 3);  ///< Parity select bit (only functions in operation mode 0)
        constexpr uint32_t L = (3 << 0);  ///< Data length select bit
    }

    /// UART_BGR Register bits
    namespace uart_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< External clock select bit
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// CSIO_SCR Register bits
    namespace csio_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< Programmable clear bit
        constexpr uint32_t MS = (1U << 6);  ///< Master/Slave function select bit
        constexpr uint32_t SPI = (1U << 5);  ///< SPI corresponding bit
        constexpr uint32_t RIE = (1U << 4);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 3);  ///< Transmit interrupt enable bit
        constexpr uint32_t TBIE = (1U << 2);  ///< Transmit bus idle interrupt enable bit
        constexpr uint32_t RXE = (1U << 1);  ///< Data received enable bit
        constexpr uint32_t TXE = (1U << 0);  ///< Data transmission enable bit
    }

    /// CSIO_SMR Register bits
    namespace csio_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< Operation mode set bits
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t SCINV = (1U << 3);  ///< Serial clock invert bit
        constexpr uint32_t BDS = (1U << 2);  ///< Transfer direction select bit
        constexpr uint32_t SCKE = (1U << 1);  ///< Master mode serial clock output enable bit
        constexpr uint32_t SOE = (1U << 0);  ///< Serial data output enable bit
    }

    /// CSIO_SSR Register bits
    namespace csio_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag bit
    }

    /// CSIO_ESCR Register bits
    namespace csio_escr_bits {
        constexpr uint32_t SOP = (1U << 7);  ///< Serial output pin set bit
        constexpr uint32_t WT = (2 << 3);  ///< Data transmit/received wait select bits
        constexpr uint32_t L = (3 << 0);  ///< Data length select bits
    }

    /// CSIO_BGR Register bits
    namespace csio_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// LIN_SCR Register bits
    namespace lin_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< Programmable clear bit
        constexpr uint32_t MS = (1U << 6);  ///< Master/Slave function select bit
        constexpr uint32_t LBR = (1U << 5);  ///< LIN Break Field setting bit (valid in master mode only)
        constexpr uint32_t RIE = (1U << 4);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 3);  ///< Transmit interrupt enable bit
        constexpr uint32_t TBIE = (1U << 2);  ///< Transmit bus idle interrupt enable bit
        constexpr uint32_t RXE = (1U << 1);  ///< Data reception enable bit
        constexpr uint32_t TXE = (1U << 0);  ///< Data transmission enable bit
    }

    /// LIN_SMR Register bits
    namespace lin_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< Operation mode setting bits
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t SBL = (1U << 3);  ///< Stop bit length select bit
        constexpr uint32_t SOE = (1U << 0);  ///< Serial data output enable bit
    }

    /// LIN_SSR Register bits
    namespace lin_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received Error flag clear bit
        constexpr uint32_t LBD = (1U << 5);  ///< LIN Break field detection flag bit
        constexpr uint32_t FRE = (1U << 4);  ///< Framing error flag bit
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag bit
    }

    /// LIN_ESCR Register bits
    namespace lin_escr_bits {
        constexpr uint32_t ESBL = (1U << 6);  ///< Extended stop bit length select bit
        constexpr uint32_t LBIE = (1U << 4);  ///< LIN Break field detect interrupt enable bit
        constexpr uint32_t LBL = (2 << 2);  ///< LIN Break field length select bits (valid in master mode only)
        constexpr uint32_t DEL = (2 << 0);  ///< LIN Break delimiter length select bits (valid in master mode only)
    }

    /// LIN_BGR Register bits
    namespace lin_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< External clock select bit
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// I2C_IBCR Register bits
    namespace i2c_ibcr_bits {
        constexpr uint32_t MSS = (1U << 7);  ///< Master/slave select bit
        constexpr uint32_t ACT_SCC = (1U << 6);  ///< Operation flag/iteration start condition generation bit
        constexpr uint32_t ACKE = (1U << 5);  ///< Data byte acknowledge enable bit
        constexpr uint32_t WSEL = (1U << 4);  ///< Wait selection bit
        constexpr uint32_t CNDE = (1U << 3);  ///< Condition detection interrupt enable bit
        constexpr uint32_t INTE = (1U << 2);  ///< Interrupt enable bit
        constexpr uint32_t BER = (1U << 1);  ///< Bus error flag bit
        constexpr uint32_t INT = (1U << 0);  ///< interrupt flag bit
    }

    /// I2C_SMR Register bits
    namespace i2c_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< operation mode set bits
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t RIE = (1U << 3);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 2);  ///< Transmit interrupt enable bit
    }

    /// I2C_IBSR Register bits
    namespace i2c_ibsr_bits {
        constexpr uint32_t FBT = (1U << 7);  ///< First byte bit
        constexpr uint32_t RACK = (1U << 6);  ///< Acknowledge flag bit
        constexpr uint32_t RSA = (1U << 5);  ///< Reserved address detection bit
        constexpr uint32_t TRX = (1U << 4);  ///< Data direction bit
        constexpr uint32_t AL = (1U << 3);  ///< Arbitration lost bit
        constexpr uint32_t RSC = (1U << 2);  ///< Iteration start condition check bit
        constexpr uint32_t SPC = (1U << 1);  ///< Stop condition check bit
        constexpr uint32_t BB = (1U << 0);  ///< Bus state bit
    }

    /// I2C_SSR Register bits
    namespace i2c_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t TSET = (1U << 6);  ///< Transmit empty flag set bit
        constexpr uint32_t DMA = (1U << 5);  ///< DMA mode enable bit
        constexpr uint32_t TBIE = (1U << 4);  ///< Transmit bus idle interrupt enable bit (Effective only when DMA mode is enabled)
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag bit (Effective only when DMA mode is enabled)
    }

    /// I2C_ISMK Register bits
    namespace i2c_ismk_bits {
        constexpr uint32_t EN = (1U << 7);  ///< I2C interface operation enable bit
        constexpr uint32_t SM = (7 << 0);  ///< Slave address mask bits
    }

    /// I2C_ISBA Register bits
    namespace i2c_isba_bits {
        constexpr uint32_t SAEN = (1U << 7);  ///< Slave address enable bit
        constexpr uint32_t SA = (7 << 0);  ///< 7-bit slave address
    }

    /// I2C_BGR Register bits
    namespace i2c_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

}

// ============================================================================
// MFS1 Peripheral
// ============================================================================

namespace mfs1 {
    /// Base addresses
    constexpr uint32_t MFS1_BASE = 0x40038100;

    /// MFS1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS1 = reinterpret_cast<Registers*>(MFS1_BASE);

}

// ============================================================================
// MFS2 Peripheral
// ============================================================================

namespace mfs2 {
    /// Base addresses
    constexpr uint32_t MFS2_BASE = 0x40038200;

    /// MFS2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS2 = reinterpret_cast<Registers*>(MFS2_BASE);

}

// ============================================================================
// MFS3 Peripheral
// ============================================================================

namespace mfs3 {
    /// Base addresses
    constexpr uint32_t MFS3_BASE = 0x40038300;

    /// MFS3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS3 = reinterpret_cast<Registers*>(MFS3_BASE);

}

// ============================================================================
// MFS4 Peripheral
// ============================================================================

namespace mfs4 {
    /// Base addresses
    constexpr uint32_t MFS4_BASE = 0x40038400;

    /// MFS4 Register structure
    struct Registers {
        volatile uint32_t UART_SCR;  ///< Offset: 0x01 - Serial Control Register
        volatile uint32_t UART_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t UART_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t UART_ESCR;  ///< Offset: 0x04 - Extended Communication Control Register
        volatile uint32_t UART_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t UART_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t UART_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t UART_FCR1;  ///< Offset: 0x15 - FIFO Control Register 1
        volatile uint32_t UART_FCR0;  ///< Offset: 0x14 - FIFO Control Register 0
        volatile uint32_t UART_FBYTE1;  ///< Offset: 0x18 - FIFO Byte Register 1
        volatile uint32_t UART_FBYTE2;  ///< Offset: 0x19 - FIFO Byte Register 2
        volatile uint32_t CSIO_SCR;  ///< Offset: 0x01 - Serial Control Register
        volatile uint32_t CSIO_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t CSIO_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t CSIO_ESCR;  ///< Offset: 0x04 - Extended Communication Control Register
        volatile uint32_t CSIO_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t CSIO_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t CSIO_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t CSIO_FCR1;  ///< Offset: 0x15 - FIFO Control Register 1
        volatile uint32_t CSIO_FCR0;  ///< Offset: 0x14 - FIFO Control Register 0
        volatile uint32_t CSIO_FBYTE1;  ///< Offset: 0x18 - FIFO Byte Register 1
        volatile uint32_t CSIO_FBYTE2;  ///< Offset: 0x19 - FIFO Byte Register 2
        volatile uint32_t LIN_SCR;  ///< Offset: 0x01 - Serial Control Register
        volatile uint32_t LIN_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t LIN_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t LIN_ESCR;  ///< Offset: 0x04 - Extended Communication Control Register
        volatile uint32_t LIN_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t LIN_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t LIN_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t LIN_FCR1;  ///< Offset: 0x15 - FIFO Control Register 1
        volatile uint32_t LIN_FCR0;  ///< Offset: 0x14 - FIFO Control Register 0
        volatile uint32_t LIN_FBYTE1;  ///< Offset: 0x18 - FIFO Byte Register 1
        volatile uint32_t LIN_FBYTE2;  ///< Offset: 0x19 - FIFO Byte Register 2
        volatile uint32_t I2C_IBCR;  ///< Offset: 0x01 - I2C Bus Control Register
        volatile uint32_t I2C_SMR;  ///< Offset: 0x00 - Serial Mode Register
        volatile uint32_t I2C_IBSR;  ///< Offset: 0x04 - I2C Bus Status Register
        volatile uint32_t I2C_SSR;  ///< Offset: 0x05 - Serial Status Register
        volatile uint32_t I2C_RDR;  ///< Offset: 0x08 - Received Data Register
        volatile uint32_t I2C_TDR;  ///< Offset: 0x08 - Transmit Data Register
        volatile uint32_t I2C_ISMK;  ///< Offset: 0x11 - 7-bit Slave Address Mask Register
        volatile uint32_t I2C_ISBA;  ///< Offset: 0x10 - 7-bit Slave Address Register
        volatile uint32_t I2C_BGR;  ///< Offset: 0x0C - Baud Rate Generator Registers
        volatile uint32_t I2C_FCR1;  ///< Offset: 0x15 - FIFO Control Register 1
        volatile uint32_t I2C_FCR0;  ///< Offset: 0x14 - FIFO Control Register 0
        volatile uint32_t I2C_FBYTE1;  ///< Offset: 0x18 - FIFO Byte Register 1
        volatile uint32_t I2C_FBYTE2;  ///< Offset: 0x19 - FIFO Byte Register 2
    };

    /// Peripheral instances
    inline Registers* MFS4 = reinterpret_cast<Registers*>(MFS4_BASE);

    // Bit definitions
    /// UART_SCR Register bits
    namespace uart_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< Programmable Clear bit
        constexpr uint32_t RIE = (1U << 4);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 3);  ///< Transmit interrupt enable bit
        constexpr uint32_t TBIE = (1U << 2);  ///< Transmit bus idle interrupt enable bit
        constexpr uint32_t RXE = (1U << 1);  ///< Received operation enable bit
        constexpr uint32_t TXE = (1U << 0);  ///< Transmission operation enable bit
    }

    /// UART_SMR Register bits
    namespace uart_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< Operation mode set bit
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t SBL = (1U << 3);  ///< Stop bit length select bit
        constexpr uint32_t BDS = (1U << 2);  ///< Transfer direction select bit
        constexpr uint32_t SOE = (1U << 0);  ///< Serial data output enable bit
    }

    /// UART_SSR Register bits
    namespace uart_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t PE = (1U << 5);  ///< Parity error flag bit (only functions in operation mode 0)
        constexpr uint32_t FRE = (1U << 4);  ///< Framing error flag bit
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag
    }

    /// UART_ESCR Register bits
    namespace uart_escr_bits {
        constexpr uint32_t FLWEN = (1U << 7);  ///< Flow control enable bit
        constexpr uint32_t ESBL = (1U << 6);  ///< Extension stop bit length select bit
        constexpr uint32_t INV = (1U << 5);  ///< Inverted serial data format bit
        constexpr uint32_t PEN = (1U << 4);  ///< Parity enable bit (only functions in operation mode 0)
        constexpr uint32_t P = (1U << 3);  ///< Parity select bit (only functions in operation mode 0)
        constexpr uint32_t L = (3 << 0);  ///< Data length select bit
    }

    /// UART_BGR Register bits
    namespace uart_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< External clock select bit
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// UART_FCR1 Register bits
    namespace uart_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< Re-transmission data lost detect enable bit
        constexpr uint32_t FRIIE = (1U << 3);  ///< Received FIFO idle detection enable bit
        constexpr uint32_t FDRQ = (1U << 2);  ///< Transmit FIFO data request bit
        constexpr uint32_t FTIE = (1U << 1);  ///< Transmit FIFO interrupt enable bit
        constexpr uint32_t FSEL = (1U << 0);  ///< FIFO select bit
    }

    /// UART_FCR0 Register bits
    namespace uart_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< FIFO re-transmit data lost flag bit
        constexpr uint32_t FLD = (1U << 5);  ///< FIFO pointer reload bit
        constexpr uint32_t FSET = (1U << 4);  ///< FIFO pointer save bit
        constexpr uint32_t FCL2 = (1U << 3);  ///< FIFO2 reset bit
        constexpr uint32_t FCL1 = (1U << 2);  ///< FIFO1 reset bit
        constexpr uint32_t FE2 = (1U << 1);  ///< FIFO2 operation enable bit
        constexpr uint32_t FE1 = (1U << 0);  ///< FIFO1 operation enable bit
    }

    /// CSIO_SCR Register bits
    namespace csio_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< Programmable clear bit
        constexpr uint32_t MS = (1U << 6);  ///< Master/Slave function select bit
        constexpr uint32_t SPI = (1U << 5);  ///< SPI corresponding bit
        constexpr uint32_t RIE = (1U << 4);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 3);  ///< Transmit interrupt enable bit
        constexpr uint32_t TBIE = (1U << 2);  ///< Transmit bus idle interrupt enable bit
        constexpr uint32_t RXE = (1U << 1);  ///< Data received enable bit
        constexpr uint32_t TXE = (1U << 0);  ///< Data transmission enable bit
    }

    /// CSIO_SMR Register bits
    namespace csio_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< Operation mode set bits
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t SCINV = (1U << 3);  ///< Serial clock invert bit
        constexpr uint32_t BDS = (1U << 2);  ///< Transfer direction select bit
        constexpr uint32_t SCKE = (1U << 1);  ///< Master mode serial clock output enable bit
        constexpr uint32_t SOE = (1U << 0);  ///< Serial data output enable bit
    }

    /// CSIO_SSR Register bits
    namespace csio_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag bit
    }

    /// CSIO_ESCR Register bits
    namespace csio_escr_bits {
        constexpr uint32_t SOP = (1U << 7);  ///< Serial output pin set bit
        constexpr uint32_t WT = (2 << 3);  ///< Data transmit/received wait select bits
        constexpr uint32_t L = (3 << 0);  ///< Data length select bits
    }

    /// CSIO_BGR Register bits
    namespace csio_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// CSIO_FCR1 Register bits
    namespace csio_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< Re-transmission data lost detect enable bit
        constexpr uint32_t FRIIE = (1U << 3);  ///< Received FIFO idle detection enable bit
        constexpr uint32_t FDRQ = (1U << 2);  ///< Transmit FIFO data request bit
        constexpr uint32_t FTIE = (1U << 1);  ///< Transmit FIFO interrupt enable bit
        constexpr uint32_t FSEL = (1U << 0);  ///< FIFO select bit
    }

    /// CSIO_FCR0 Register bits
    namespace csio_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< FIFO re-transmit data lost flag bit
        constexpr uint32_t FLD = (1U << 5);  ///< FIFO pointer reload bit
        constexpr uint32_t FSET = (1U << 4);  ///< FIFO pointer save bit
        constexpr uint32_t FCL2 = (1U << 3);  ///< FIFO2 reset bit
        constexpr uint32_t FCL1 = (1U << 2);  ///< FIFO1 reset bit
        constexpr uint32_t FE2 = (1U << 1);  ///< FIFO2 operation enable bit
        constexpr uint32_t FE1 = (1U << 0);  ///< FIFO1 operation enable bit
    }

    /// LIN_SCR Register bits
    namespace lin_scr_bits {
        constexpr uint32_t UPCL = (1U << 7);  ///< Programmable clear bit
        constexpr uint32_t MS = (1U << 6);  ///< Master/Slave function select bit
        constexpr uint32_t LBR = (1U << 5);  ///< LIN Break Field setting bit (valid in master mode only)
        constexpr uint32_t RIE = (1U << 4);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 3);  ///< Transmit interrupt enable bit
        constexpr uint32_t TBIE = (1U << 2);  ///< Transmit bus idle interrupt enable bit
        constexpr uint32_t RXE = (1U << 1);  ///< Data reception enable bit
        constexpr uint32_t TXE = (1U << 0);  ///< Data transmission enable bit
    }

    /// LIN_SMR Register bits
    namespace lin_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< Operation mode setting bits
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t SBL = (1U << 3);  ///< Stop bit length select bit
        constexpr uint32_t SOE = (1U << 0);  ///< Serial data output enable bit
    }

    /// LIN_SSR Register bits
    namespace lin_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received Error flag clear bit
        constexpr uint32_t LBD = (1U << 5);  ///< LIN Break field detection flag bit
        constexpr uint32_t FRE = (1U << 4);  ///< Framing error flag bit
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag bit
    }

    /// LIN_ESCR Register bits
    namespace lin_escr_bits {
        constexpr uint32_t ESBL = (1U << 6);  ///< Extended stop bit length select bit
        constexpr uint32_t LBIE = (1U << 4);  ///< LIN Break field detect interrupt enable bit
        constexpr uint32_t LBL = (2 << 2);  ///< LIN Break field length select bits (valid in master mode only)
        constexpr uint32_t DEL = (2 << 0);  ///< LIN Break delimiter length select bits (valid in master mode only)
    }

    /// LIN_BGR Register bits
    namespace lin_bgr_bits {
        constexpr uint32_t EXT = (1U << 15);  ///< External clock select bit
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// LIN_FCR1 Register bits
    namespace lin_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< Re-transmission data lost detect enable bit
        constexpr uint32_t FRIIE = (1U << 3);  ///< Received FIFO idle detection enable bit
        constexpr uint32_t FDRQ = (1U << 2);  ///< Transmit FIFO data request bit
        constexpr uint32_t FTIE = (1U << 1);  ///< Transmit FIFO interrupt enable bit
        constexpr uint32_t FSEL = (1U << 0);  ///< FIFO select bit
    }

    /// LIN_FCR0 Register bits
    namespace lin_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< FIFO re-transmit data lost flag bit
        constexpr uint32_t FLD = (1U << 5);  ///< FIFO pointer reload bit
        constexpr uint32_t FSET = (1U << 4);  ///< FIFO pointer save bit
        constexpr uint32_t FCL2 = (1U << 3);  ///< FIFO2 reset bit
        constexpr uint32_t FCL1 = (1U << 2);  ///< FIFO1 reset bit
        constexpr uint32_t FE2 = (1U << 1);  ///< FIFO2 operation enable bit
        constexpr uint32_t FE1 = (1U << 0);  ///< FIFO1 operation enable bit
    }

    /// I2C_IBCR Register bits
    namespace i2c_ibcr_bits {
        constexpr uint32_t MSS = (1U << 7);  ///< Master/slave select bit
        constexpr uint32_t ACT_SCC = (1U << 6);  ///< Operation flag/iteration start condition generation bit
        constexpr uint32_t ACKE = (1U << 5);  ///< Data byte acknowledge enable bit
        constexpr uint32_t WSEL = (1U << 4);  ///< Wait selection bit
        constexpr uint32_t CNDE = (1U << 3);  ///< Condition detection interrupt enable bit
        constexpr uint32_t INTE = (1U << 2);  ///< Interrupt enable bit
        constexpr uint32_t BER = (1U << 1);  ///< Bus error flag bit
        constexpr uint32_t INT = (1U << 0);  ///< interrupt flag bit
    }

    /// I2C_SMR Register bits
    namespace i2c_smr_bits {
        constexpr uint32_t MD = (3 << 5);  ///< operation mode set bits
        constexpr uint32_t WUCR = (1U << 4);  ///< Wake-up control bit
        constexpr uint32_t RIE = (1U << 3);  ///< Received interrupt enable bit
        constexpr uint32_t TIE = (1U << 2);  ///< Transmit interrupt enable bit
    }

    /// I2C_IBSR Register bits
    namespace i2c_ibsr_bits {
        constexpr uint32_t FBT = (1U << 7);  ///< First byte bit
        constexpr uint32_t RACK = (1U << 6);  ///< Acknowledge flag bit
        constexpr uint32_t RSA = (1U << 5);  ///< Reserved address detection bit
        constexpr uint32_t TRX = (1U << 4);  ///< Data direction bit
        constexpr uint32_t AL = (1U << 3);  ///< Arbitration lost bit
        constexpr uint32_t RSC = (1U << 2);  ///< Iteration start condition check bit
        constexpr uint32_t SPC = (1U << 1);  ///< Stop condition check bit
        constexpr uint32_t BB = (1U << 0);  ///< Bus state bit
    }

    /// I2C_SSR Register bits
    namespace i2c_ssr_bits {
        constexpr uint32_t REC = (1U << 7);  ///< Received error flag clear bit
        constexpr uint32_t TSET = (1U << 6);  ///< Transmit empty flag set bit
        constexpr uint32_t DMA = (1U << 5);  ///< DMA mode enable bit
        constexpr uint32_t TBIE = (1U << 4);  ///< Transmit bus idle interrupt enable bit (Effective only when DMA mode is enabled)
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error flag bit
        constexpr uint32_t RDRF = (1U << 2);  ///< Received data full flag bit
        constexpr uint32_t TDRE = (1U << 1);  ///< Transmit data empty flag bit
        constexpr uint32_t TBI = (1U << 0);  ///< Transmit bus idle flag bit (Effective only when DMA mode is enabled)
    }

    /// I2C_ISMK Register bits
    namespace i2c_ismk_bits {
        constexpr uint32_t EN = (1U << 7);  ///< I2C interface operation enable bit
        constexpr uint32_t SM = (7 << 0);  ///< Slave address mask bits
    }

    /// I2C_ISBA Register bits
    namespace i2c_isba_bits {
        constexpr uint32_t SAEN = (1U << 7);  ///< Slave address enable bit
        constexpr uint32_t SA = (7 << 0);  ///< 7-bit slave address
    }

    /// I2C_BGR Register bits
    namespace i2c_bgr_bits {
        constexpr uint32_t BGR1 = (7 << 8);  ///< Baud Rate Generator Registers 1
        constexpr uint32_t BGR0 = (8 << 0);  ///< Baud Rate Generator Registers 0
    }

    /// I2C_FCR1 Register bits
    namespace i2c_fcr1_bits {
        constexpr uint32_t FLSTE = (1U << 4);  ///< Re-transmission data lost detect enable bit
        constexpr uint32_t FRIIE = (1U << 3);  ///< Received FIFO idle detection enable bit
        constexpr uint32_t FDRQ = (1U << 2);  ///< Transmit FIFO data request bit
        constexpr uint32_t FTIE = (1U << 1);  ///< Transmit FIFO interrupt enable bit
        constexpr uint32_t FSEL = (1U << 0);  ///< FIFO select bit
    }

    /// I2C_FCR0 Register bits
    namespace i2c_fcr0_bits {
        constexpr uint32_t FLST = (1U << 6);  ///< FIFO re-transmit data lost flag bit
        constexpr uint32_t FLD = (1U << 5);  ///< FIFO pointer reload bit
        constexpr uint32_t FSET = (1U << 4);  ///< FIFO pointer save bit
        constexpr uint32_t FCL2 = (1U << 3);  ///< FIFO2 reset bit
        constexpr uint32_t FCL1 = (1U << 2);  ///< FIFO1 reset bit
        constexpr uint32_t FE2 = (1U << 1);  ///< FIFO2 operation enable bit
        constexpr uint32_t FE1 = (1U << 0);  ///< FIFO1 operation enable bit
    }

}

// ============================================================================
// MFS5 Peripheral
// ============================================================================

namespace mfs5 {
    /// Base addresses
    constexpr uint32_t MFS5_BASE = 0x40038500;

    /// MFS5 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS5 = reinterpret_cast<Registers*>(MFS5_BASE);

}

// ============================================================================
// MFS6 Peripheral
// ============================================================================

namespace mfs6 {
    /// Base addresses
    constexpr uint32_t MFS6_BASE = 0x40038600;

    /// MFS6 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS6 = reinterpret_cast<Registers*>(MFS6_BASE);

}

// ============================================================================
// MFS7 Peripheral
// ============================================================================

namespace mfs7 {
    /// Base addresses
    constexpr uint32_t MFS7_BASE = 0x40038700;

    /// MFS7 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* MFS7 = reinterpret_cast<Registers*>(MFS7_BASE);

}

// ============================================================================
// MFS Peripheral
// ============================================================================

namespace mfs {
    /// Base addresses
    constexpr uint32_t MFS_NFC_BASE = 0x40038800;

    /// MFS Register structure
    struct Registers {
        volatile uint32_t I2CDNF;  ///< Offset: 0x00 - I2C Auxiliary Noise Filter Setting Register
    };

    /// Peripheral instances
    inline Registers* MFS_NFC = reinterpret_cast<Registers*>(MFS_NFC_BASE);

    // Bit definitions
    /// I2CDNF Register bits
    namespace i2cdnf_bits {
        constexpr uint32_t I2CDNF7 = (2 << 14);  ///< Auxiliary noise filter additional step select bits for I2C ch.7
        constexpr uint32_t I2CDNF6 = (2 << 12);  ///< Auxiliary noise filter additional step select bits for I2C ch.6
        constexpr uint32_t I2CDNF5 = (2 << 10);  ///< Auxiliary noise filter additional step select bits for I2C ch.5
        constexpr uint32_t I2CDNF4 = (2 << 8);  ///< Auxiliary noise filter additional step select bits for I2C ch.4
        constexpr uint32_t I2CDNF3 = (2 << 6);  ///< Auxiliary noise filter additional step select bits for I2C ch.3
        constexpr uint32_t I2CDNF2 = (2 << 4);  ///< Auxiliary noise filter additional step select bits for I2C ch.2
        constexpr uint32_t I2CDNF1 = (2 << 2);  ///< Auxiliary noise filter additional step select bits for I2C ch.1
        constexpr uint32_t I2CDNF0 = (2 << 0);  ///< Auxiliary noise filter additional step select bits for I2C ch.0
    }

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40039000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t CRCCR;  ///< Offset: 0x00 - CRC Control Register
        volatile uint32_t CRCINIT;  ///< Offset: 0x04 - Initial Value Register
        volatile uint32_t CRCIN;  ///< Offset: 0x08 - Input Data Register
        volatile uint32_t CRCR;  ///< Offset: 0x0C - CRC Register
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// CRCCR Register bits
    namespace crccr_bits {
        constexpr uint32_t FXOR = (1U << 6);  ///< Initialization bit
        constexpr uint32_t CRCLSF = (1U << 5);  ///< Final XOR control bit
        constexpr uint32_t CRCLTE = (1U << 4);  ///< CRC result bit-order setting bit
        constexpr uint32_t LSBFST = (1U << 3);  ///< CRC result byte-order setting bit
        constexpr uint32_t LTLEND = (1U << 2);  ///< Bit-order setting bit
        constexpr uint32_t CRC32 = (1U << 1);  ///< Byte-order setting bit
        constexpr uint32_t INIT = (1U << 0);  ///< CRC mode selection bit
    }

    /// CRCINIT Register bits
    namespace crcinit_bits {
        constexpr uint32_t D = (32 << 0);  ///< Initial value
    }

    /// CRCIN Register bits
    namespace crcin_bits {
        constexpr uint32_t D = (32 << 0);  ///< Input data
    }

    /// CRCR Register bits
    namespace crcr_bits {
        constexpr uint32_t D = (32 << 0);  ///< CRC Data
    }

}

// ============================================================================
// EXBUS Peripheral
// ============================================================================

namespace exbus {
    /// Base addresses
    constexpr uint32_t EXBUS_BASE = 0x4003F000;

    /// EXBUS Register structure
    struct Registers {
        volatile uint32_t MODE0;  ///< Offset: 0x00 - Mode Register 0
        volatile uint32_t MODE1;  ///< Offset: 0x04 - Mode Register 1
        volatile uint32_t MODE2;  ///< Offset: 0x08 - Mode Register 2
        volatile uint32_t MODE3;  ///< Offset: 0x0C - Mode Register 3
        volatile uint32_t MODE4;  ///< Offset: 0x10 - Mode Register 4
        volatile uint32_t MODE5;  ///< Offset: 0x14 - Mode Register 5
        volatile uint32_t MODE6;  ///< Offset: 0x18 - Mode Register 6
        volatile uint32_t MODE7;  ///< Offset: 0x1C - Mode Register 7
        volatile uint32_t TIM0;  ///< Offset: 0x20 - Timing Register 0
        volatile uint32_t TIM1;  ///< Offset: 0x24 - Timing Register 1
        volatile uint32_t TIM2;  ///< Offset: 0x28 - Timing Register 2
        volatile uint32_t TIM3;  ///< Offset: 0x2C - Timing Register 3
        volatile uint32_t TIM4;  ///< Offset: 0x30 - Timing Register 4
        volatile uint32_t TIM5;  ///< Offset: 0x34 - Timing Register 5
        volatile uint32_t TIM6;  ///< Offset: 0x38 - Timing Register 6
        volatile uint32_t TIM7;  ///< Offset: 0x3C - Timing Register 7
        volatile uint32_t AREA0;  ///< Offset: 0x40 - Area Register 0
        volatile uint32_t AREA1;  ///< Offset: 0x44 - Area Register 1
        volatile uint32_t AREA2;  ///< Offset: 0x48 - Area Register 2
        volatile uint32_t AREA3;  ///< Offset: 0x4C - Area Register 3
        volatile uint32_t AREA4;  ///< Offset: 0x50 - Area Register 4
        volatile uint32_t AREA5;  ///< Offset: 0x54 - Area Register 5
        volatile uint32_t AREA6;  ///< Offset: 0x58 - Area Register 6
        volatile uint32_t AREA7;  ///< Offset: 0x5C - Area Register 7
        volatile uint32_t ATIM0;  ///< Offset: 0x60 - ALE Timing Register 0
        volatile uint32_t ATIM1;  ///< Offset: 0x64 - ALE Timing Register 1
        volatile uint32_t ATIM2;  ///< Offset: 0x68 - ALE Timing Register 2
        volatile uint32_t ATIM3;  ///< Offset: 0x6C - ALE Timing Register 3
        volatile uint32_t ATIM4;  ///< Offset: 0x70 - ALE Timing Register 4
        volatile uint32_t ATIM5;  ///< Offset: 0x74 - ALE Timing Register 5
        volatile uint32_t ATIM6;  ///< Offset: 0x78 - ALE Timing Register 6
        volatile uint32_t ATIM7;  ///< Offset: 0x7C - ALE Timing Register 7
        volatile uint32_t DCLKR;  ///< Offset: 0x300 - Division Clock Register
    };

    /// Peripheral instances
    inline Registers* EXBUS = reinterpret_cast<Registers*>(EXBUS_BASE);

    // Bit definitions
    /// MODE0 Register bits
    namespace mode0_bits {
        constexpr uint32_t MOEXEUP = (1U << 13);  ///< select how to set the MOEX width
        constexpr uint32_t MPXCSOF = (1U << 12);  ///< select a CS assertion from the start of accessing to the end of address output
        constexpr uint32_t MPXDOFF = (1U << 11);  ///< select whether or not the address is output to the data lines in multiplex mode
        constexpr uint32_t ALEINV = (1U << 9);  ///< set up the polarity of the ALE signal
        constexpr uint32_t MPXMODE = (1U << 8);  ///< select operation bus mode
        constexpr uint32_t SHRTDOUT = (1U << 7);  ///< select to which idle cycle the write data output is extended
        constexpr uint32_t RDY = (1U << 6);  ///< control the external RDY function
        constexpr uint32_t PAGE = (1U << 5);  ///< NOR Flash memory page access mode
        constexpr uint32_t NAND = (1U << 4);  ///< NAND Flash memory mode
        constexpr uint32_t WEOFF = (1U << 3);  ///< disable the write enable signal (MWEX) operation
        constexpr uint32_t RBMON = (1U << 2);  ///< Read Byte Mask ON
        constexpr uint32_t WDTH = (2 << 0);  ///< specify Data Width
    }

    /// TIM0 Register bits
    namespace tim0_bits {
        constexpr uint32_t WIDLC = (4 << 28);  ///< Write Idle Cycle
        constexpr uint32_t WWEC = (4 << 24);  ///< Write Enable Cycle
        constexpr uint32_t WADC = (4 << 20);  ///< Write Address Setup cycle
        constexpr uint32_t WACC = (4 << 16);  ///< Write Access Cycle
        constexpr uint32_t RIDLC = (4 << 12);  ///< Read Idle Cycle
        constexpr uint32_t FRADC = (4 << 8);  ///< First Read Address Cycle
        constexpr uint32_t RADC = (4 << 4);  ///< Read Address Setup cycle
        constexpr uint32_t RACC = (4 << 0);  ///< Read Access Cycle
    }

    /// AREA0 Register bits
    namespace area0_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< address mask
        constexpr uint32_t ADDR = (8 << 0);  ///< Address
    }

    /// AREA1 Register bits
    namespace area1_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< address mask
        constexpr uint32_t ADDR = (8 << 0);  ///< Address
    }

    /// AREA2 Register bits
    namespace area2_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< address mask
        constexpr uint32_t ADDR = (8 << 0);  ///< Address
    }

    /// AREA3 Register bits
    namespace area3_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< address mask
        constexpr uint32_t ADDR = (8 << 0);  ///< Address
    }

    /// AREA4 Register bits
    namespace area4_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< address mask
        constexpr uint32_t ADDR = (8 << 0);  ///< Address
    }

    /// AREA5 Register bits
    namespace area5_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< address mask
        constexpr uint32_t ADDR = (8 << 0);  ///< Address
    }

    /// AREA6 Register bits
    namespace area6_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< address mask
        constexpr uint32_t ADDR = (8 << 0);  ///< Address
    }

    /// AREA7 Register bits
    namespace area7_bits {
        constexpr uint32_t MASK = (7 << 16);  ///< address mask
        constexpr uint32_t ADDR = (8 << 0);  ///< Address
    }

    /// ATIM0 Register bits
    namespace atim0_bits {
        constexpr uint32_t ALEW = (4 << 8);  ///< Address Latch Enable Width
        constexpr uint32_t ALES = (4 << 4);  ///< Address Latch Enable Setup cycle
        constexpr uint32_t ALC = (4 << 0);  ///< Address Latch Cycle
    }

    /// DCLKR Register bits
    namespace dclkr_bits {
        constexpr uint32_t MCLKON = (1U << 4);  ///< MCLK ON
        constexpr uint32_t MDIV = (4 << 0);  ///< MCLK Division Ratio Setup
    }

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USBETHERCLK_BASE = 0x40036000;
    constexpr uint32_t USB0_BASE = 0x40040000;
    constexpr uint32_t USB1_BASE = 0x40050000;

    /// USB Register structure
    struct Registers {
        volatile uint32_t UCCR;  ///< Offset: 0x00 - USB/Ethernet-PLL Clock Control Register
        volatile uint32_t UPCR1;  ///< Offset: 0x04 - USB/Ethernet-PLL Control Register 1
        volatile uint32_t UPCR2;  ///< Offset: 0x08 - USB/Ethernet-PLL Control Register 2
        volatile uint32_t UPCR3;  ///< Offset: 0x0C - USB/Ethernet-PLL Control Register 3
        volatile uint32_t UPCR4;  ///< Offset: 0x10 - USB/Ethernet-PLL Control Register 4
        volatile uint32_t UPCR5;  ///< Offset: 0x24 - USB/Ethernet-PLL Control Register 5
        volatile uint32_t UPCR6;  ///< Offset: 0x28 - USB/Ethernet-PLL Setting Register 6
        volatile uint32_t UPCR7;  ///< Offset: 0x2C - USB/Ethernet-PLL Setting Register 7
        volatile uint32_t UP_STR;  ///< Offset: 0x14 - USB/Ethernet-PLL Status Register
        volatile uint32_t UPINT_ENR;  ///< Offset: 0x18 - USB/Ethernet-PLL Interrupt Source Enable Register
        volatile uint32_t UPINT_STR;  ///< Offset: 0x20 - USB/Ethernet-PLL Interrupt Source Status Register
        volatile uint32_t UPINT_CLR;  ///< Offset: 0x1C - USB/Ethernet-PLL Interrupt Source Clear Register
        volatile uint32_t USBEN0;  ///< Offset: 0x30 - USB0 Enable Register
        volatile uint32_t USBEN1;  ///< Offset: 0x34 - USB1 Enable Register
    };

    /// Peripheral instances
    inline Registers* USBETHERCLK = reinterpret_cast<Registers*>(USBETHERCLK_BASE);
    inline Registers* USB0 = reinterpret_cast<Registers*>(USB0_BASE);
    inline Registers* USB1 = reinterpret_cast<Registers*>(USB1_BASE);

    // Bit definitions
    /// UCCR Register bits
    namespace uccr_bits {
        constexpr uint32_t UCEN1 = (1U << 3);  ///< USB1 clock output enable bit
        constexpr uint32_t UCSEL1 = (1U << 2);  ///< USB1 clock selection bit
        constexpr uint32_t UCSEL0 = (1U << 1);  ///< USB0 clock selection bit
        constexpr uint32_t UCEN0 = (1U << 0);  ///< USB0 clock output enable bit
    }

    /// UPCR1 Register bits
    namespace upcr1_bits {
        constexpr uint32_t UPINC = (1U << 1);  ///< USB/Ethernet-PLL input clock selection bit
        constexpr uint32_t UPLLEN = (1U << 0);  ///< USB/Ethernet-PLL oscillation enable bit
    }

    /// UPCR2 Register bits
    namespace upcr2_bits {
        constexpr uint32_t UPOWT = (3 << 0);  ///< USB/Ethernet-PLL oscillation stabilization wait time setting bit
    }

    /// UPCR3 Register bits
    namespace upcr3_bits {
        constexpr uint32_t UPLLK = (5 << 0);  ///< Frequency division ratio (K) setting bit of the USB/Ethernet-PLL clock
    }

    /// UPCR4 Register bits
    namespace upcr4_bits {
        constexpr uint32_t UPLLN = (7 << 0);  ///< Frequency division ratio (N) setting bit of the USB/Ethernet-PLL clock
    }

    /// UPCR5 Register bits
    namespace upcr5_bits {
        constexpr uint32_t UPLLM = (4 << 0);  ///< Frequency division ratio (M) setting bit of the USB/Ethernet-PLL clock
    }

    /// UPCR6 Register bits
    namespace upcr6_bits {
        constexpr uint32_t UBSR = (4 << 0);  ///< CLKPLL division ratio setting bit
    }

    /// UPCR7 Register bits
    namespace upcr7_bits {
        constexpr uint32_t EPLLEN = (1U << 0);  ///< USB/Ethernet-PLL control bit in Timer mode
    }

    /// UP_STR Register bits
    namespace up_str_bits {
        constexpr uint32_t UPRDY = (1U << 0);  ///< USB/Ethernet-PLL oscillation stabilization bit
    }

    /// UPINT_ENR Register bits
    namespace upint_enr_bits {
        constexpr uint32_t UPCSE = (1U << 0);  ///< USB/Ethernet-PLL oscillation stabilization wait complete interrupt enable bit
    }

    /// UPINT_STR Register bits
    namespace upint_str_bits {
        constexpr uint32_t UPCSI = (1U << 0);  ///< USB/Ethernet-PLL interrupt source status bit
    }

    /// UPINT_CLR Register bits
    namespace upint_clr_bits {
        constexpr uint32_t UPCSC = (1U << 0);  ///< USB/Ethernet-PLL oscillation stabilization interrupt source clear bit
    }

    /// USBEN0 Register bits
    namespace usben0_bits {
        constexpr uint32_t USBEN0 = (1U << 0);  ///< USB0 enable bit
    }

    /// USBEN1 Register bits
    namespace usben1_bits {
        constexpr uint32_t USBEN1 = (1U << 0);  ///< USB1 enable bit
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMAC_BASE = 0x40060000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t DMACR;  ///< Offset: 0x00 - Entire DMAC Configuration Register
        volatile uint32_t DMACA0;  ///< Offset: 0x10 - Configuration A Register
        volatile uint32_t DMACB0;  ///< Offset: 0x14 - Configuration B Register
        volatile uint32_t DMACSA0;  ///< Offset: 0x18 - Transfer Source Address Register
        volatile uint32_t DMACDA0;  ///< Offset: 0x1C - Transfer Destination Address Register
        volatile uint32_t DMACA1;  ///< Offset: 0x20 - Configuration A Register 1
        volatile uint32_t DMACB1;  ///< Offset: 0x24 - Configuration B Register 1
        volatile uint32_t DMACSA1;  ///< Offset: 0x28 - Transfer Source Address Register 1
        volatile uint32_t DMACDA1;  ///< Offset: 0x2C - Transfer Destination Address Register 1
        volatile uint32_t DMACA2;  ///< Offset: 0x30 - Configuration A Register 2
        volatile uint32_t DMACB2;  ///< Offset: 0x34 - Configuration B Register 2
        volatile uint32_t DMACSA2;  ///< Offset: 0x38 - Transfer Source Address Register 2
        volatile uint32_t DMACDA2;  ///< Offset: 0x3C - Transfer Destination Address Register 2
        volatile uint32_t DMACA3;  ///< Offset: 0x40 - Configuration A Register 3
        volatile uint32_t DMACB3;  ///< Offset: 0x44 - Configuration B Register 3
        volatile uint32_t DMACSA3;  ///< Offset: 0x48 - Transfer Source Address Register 3
        volatile uint32_t DMACDA3;  ///< Offset: 0x4C - Transfer Destination Address Register 3
        volatile uint32_t DMACA4;  ///< Offset: 0x50 - Configuration A Register 4
        volatile uint32_t DMACB4;  ///< Offset: 0x54 - Configuration B Register 4
        volatile uint32_t DMACSA4;  ///< Offset: 0x58 - Transfer Source Address Register 4
        volatile uint32_t DMACDA4;  ///< Offset: 0x5C - Transfer Destination Address Register 4
        volatile uint32_t DMACA5;  ///< Offset: 0x60 - Configuration A Register 5
        volatile uint32_t DMACB5;  ///< Offset: 0x64 - Configuration B Register 5
        volatile uint32_t DMACSA5;  ///< Offset: 0x68 - Transfer Source Address Register 5
        volatile uint32_t DMACDA5;  ///< Offset: 0x6C - Transfer Destination Address Register 5
        volatile uint32_t DMACA6;  ///< Offset: 0x70 - Configuration A Register 6
        volatile uint32_t DMACB6;  ///< Offset: 0x74 - Configuration B Register 6
        volatile uint32_t DMACSA6;  ///< Offset: 0x78 - Transfer Source Address Register 6
        volatile uint32_t DMACDA6;  ///< Offset: 0x7C - Transfer Destination Address Register 6
        volatile uint32_t DMACA7;  ///< Offset: 0x80 - Configuration A Register 7
        volatile uint32_t DMACB7;  ///< Offset: 0x84 - Configuration B Register 7
        volatile uint32_t DMACSA7;  ///< Offset: 0x88 - Transfer Source Address Register 7
        volatile uint32_t DMACDA7;  ///< Offset: 0x8C - Transfer Destination Address Register 7
    };

    /// Peripheral instances
    inline Registers* DMAC = reinterpret_cast<Registers*>(DMAC_BASE);

    // Bit definitions
    /// DMACR Register bits
    namespace dmacr_bits {
        constexpr uint32_t DE = (1U << 31);  ///< DMA Enable (all-channel operation enable bit)
        constexpr uint32_t DS = (1U << 30);  ///< DMA Stop
        constexpr uint32_t PR = (1U << 28);  ///< Priority Rotation
        constexpr uint32_t DH = (4 << 24);  ///< DMA Halt (All-channel pause bit)
    }

    /// DMACA0 Register bits
    namespace dmaca0_bits {
        constexpr uint32_t EB = (1U << 31);  ///< Enable bit (individual-channel operation enable bit)
        constexpr uint32_t PB = (1U << 30);  ///< Pause bit (individual-channel pause bit)
        constexpr uint32_t ST = (1U << 29);  ///< Software Trigger
        constexpr uint32_t IS = (6 << 23);  ///< Input Select
        constexpr uint32_t BC = (4 << 16);  ///< Block Count
        constexpr uint32_t TC = (16 << 0);  ///< Transfer Count
    }

    /// DMACB0 Register bits
    namespace dmacb0_bits {
        constexpr uint32_t MS = (2 << 28);  ///< Mode Select
        constexpr uint32_t TW = (2 << 26);  ///< Transfer Width
        constexpr uint32_t FS = (1U << 25);  ///< Fixed Source
        constexpr uint32_t FD = (1U << 24);  ///< Fixed Destination
        constexpr uint32_t RC = (1U << 23);  ///< Reload Count (BC/TC reload)
        constexpr uint32_t RS = (1U << 22);  ///< Reload Source
        constexpr uint32_t RD = (1U << 21);  ///< Reload Destination
        constexpr uint32_t EI = (1U << 20);  ///< Error Interrupt (unsuccessful transfer completion interrupt enable)
        constexpr uint32_t CI = (1U << 19);  ///< Completion Interrupt (successful transfer completion interrupt enable)
        constexpr uint32_t SS = (3 << 16);  ///< Stop Status (stop status notification)
        constexpr uint32_t EM = (1U << 0);  ///< Enable bit Mask (EB bit clear mask)
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CANPRES_BASE = 0x40037000;
    constexpr uint32_t CAN0_BASE = 0x40062000;
    constexpr uint32_t CAN1_BASE = 0x40063000;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t CANPRE;  ///< Offset: 0x00 - CAN Prescaler Register
    };

    /// Peripheral instances
    inline Registers* CANPRES = reinterpret_cast<Registers*>(CANPRES_BASE);
    inline Registers* CAN0 = reinterpret_cast<Registers*>(CAN0_BASE);
    inline Registers* CAN1 = reinterpret_cast<Registers*>(CAN1_BASE);

}


} // namespace alloy::generated::mb9bf51xs

#endif // ALLOY_GENERATED_MB9BF51XS_PERIPHERALS_HPP