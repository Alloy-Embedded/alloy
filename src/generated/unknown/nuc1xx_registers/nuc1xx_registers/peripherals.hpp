/// Auto-generated code for NUC1xx_registers
/// Generated by Alloy Code Generator
/// Source: nuvoton_nuc100.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 17:45:04
#ifndef ALLOY_GENERATED_NUC1XX_REGISTERS_PERIPHERALS_HPP
#define ALLOY_GENERATED_NUC1XX_REGISTERS_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::nuc1xx_registers {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 2;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 1;
    constexpr bool has_can = true;
    constexpr uint32_t num_can_instances = 1;
    constexpr bool has_clk = true;
    constexpr uint32_t num_clk_instances = 1;
    constexpr bool has_cmp = true;
    constexpr uint32_t num_cmp_instances = 1;
    constexpr bool has_ebi = true;
    constexpr uint32_t num_ebi_instances = 1;
    constexpr bool has_fmc = true;
    constexpr uint32_t num_fmc_instances = 1;
    constexpr bool has_gcr = true;
    constexpr uint32_t num_gcr_instances = 1;
    constexpr bool has_gpa = true;
    constexpr uint32_t num_gpa_instances = 2;
    constexpr bool has_gpb = true;
    constexpr uint32_t num_gpb_instances = 2;
    constexpr bool has_gpc = true;
    constexpr uint32_t num_gpc_instances = 2;
    constexpr bool has_gpd = true;
    constexpr uint32_t num_gpd_instances = 2;
    constexpr bool has_gpe = true;
    constexpr uint32_t num_gpe_instances = 2;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 1;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 2;
    constexpr bool has_i2s = true;
    constexpr uint32_t num_i2s_instances = 1;
    constexpr bool has_int = true;
    constexpr uint32_t num_int_instances = 1;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 10;
    constexpr bool has_ps2 = true;
    constexpr uint32_t num_ps2_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;
    constexpr bool has_scs = true;
    constexpr uint32_t num_scs_instances = 1;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 4;
    constexpr bool has_tmr0 = true;
    constexpr uint32_t num_tmr0_instances = 1;
    constexpr bool has_tmr1 = true;
    constexpr uint32_t num_tmr1_instances = 1;
    constexpr bool has_tmr2 = true;
    constexpr uint32_t num_tmr2_instances = 1;
    constexpr bool has_tmr3 = true;
    constexpr uint32_t num_tmr3_instances = 1;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 3;
    constexpr bool has_usb = true;
    constexpr uint32_t num_usb_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 1;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct can_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct clk_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct cmp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ebi_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fmc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gcr_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gpa_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct gpb_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct gpc_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct gpd_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct gpe_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct i2s_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct int_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 10;
    };
    template<>
    struct peripheral_count<struct ps2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct scs_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct peripheral_count<struct tmr0_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tmr3_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct usb_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 1;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 1;
    constexpr uint32_t max_gpio_pins = 16;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_uart0 = true;
    constexpr bool has_uart1 = true;
    constexpr bool has_uart2 = true;
}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t PWMA_BASE = 0x40040000;
    constexpr uint32_t PWMB_BASE = 0x40140000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t PPR;  ///< Offset: 0x00 - PWM Prescaler Register
        volatile uint32_t CSR;  ///< Offset: 0x04 - PWM Clock Select Register
        volatile uint32_t PCR;  ///< Offset: 0x08 - PWM Control Register
        volatile uint32_t CNR0;  ///< Offset: 0x0C - PWM Counter Register 0
        volatile uint32_t CMR0;  ///< Offset: 0x10 - PWM Comparator Register 0
        volatile uint32_t PDR0;  ///< Offset: 0x14 - PWM Data Register 0
        volatile uint32_t CNR1;  ///< Offset: 0x18 - PWM Counter Register 1
        volatile uint32_t CMR1;  ///< Offset: 0x1C - PWM Comparator Register 1
        volatile uint32_t PDR1;  ///< Offset: 0x20 - PWM Data Register 1
        volatile uint32_t CNR2;  ///< Offset: 0x24 - PWM Counter Register 2
        volatile uint32_t CMR2;  ///< Offset: 0x28 - PWM Comparator Register 2
        volatile uint32_t PDR2;  ///< Offset: 0x2C - PWM Data Register 2
        volatile uint32_t CNR3;  ///< Offset: 0x30 - PWM Counter Register 3
        volatile uint32_t CMR3;  ///< Offset: 0x34 - PWM Comparator Register 3
        volatile uint32_t PDR3;  ///< Offset: 0x38 - PWM Data Register 3
        volatile uint32_t PBCR;  ///< Offset: 0x3C - New description for register
        volatile uint32_t PIER;  ///< Offset: 0x40 - PWM Interrupt Enable Register
        volatile uint32_t PIIR;  ///< Offset: 0x44 - PWM Interrupt Indication Register
        volatile uint32_t CCR0;  ///< Offset: 0x50 - Capture Control Register 0
        volatile uint32_t CCR2;  ///< Offset: 0x54 - Capture Control Register 2
        volatile uint32_t CRLR0;  ///< Offset: 0x58 - Capture Rising Latch Register (Channel 0)
        volatile uint32_t CFLR0;  ///< Offset: 0x5C - Capture Falling Latch Register (Channel 0)
        volatile uint32_t CRLR1;  ///< Offset: 0x60 - Capture Rising Latch Register (Channel 1)
        volatile uint32_t CFLR1;  ///< Offset: 0x64 - Capture Falling Latch Register (Channel 1)
        volatile uint32_t CRLR2;  ///< Offset: 0x68 - Capture Rising Latch Register (channel 2)
        volatile uint32_t CFLR2;  ///< Offset: 0x6C - Capture Falling Latch Register (channel 2)
        volatile uint32_t CRLR3;  ///< Offset: 0x70 - Capture Rising Latch Register (channel 3)
        volatile uint32_t CFLR3;  ///< Offset: 0x74 - Capture Falling Latch Register (channel 3)
        volatile uint32_t CAPENR;  ///< Offset: 0x78 - Capture Input Enable Register
        volatile uint32_t POE;  ///< Offset: 0x7C - PWM Output Enable Register
    };

    /// Peripheral instances
    inline Registers* PWMA = reinterpret_cast<Registers*>(PWMA_BASE);
    inline Registers* PWMB = reinterpret_cast<Registers*>(PWMB_BASE);

    // Bit definitions
    /// PPR Register bits
    namespace ppr_bits {
        constexpr uint32_t CP01 = (8 << 0);  ///< Clock prescaler 0 (PWM-timer 0 & 1 for group A and PWM-timer 4 & 5 for group B) Clock input is divided by (CP01 + 1) before it is fed to the corresponding PWM-timer If CP01=0, then the clock prescaler 0 output clock will be stopped. So corresponding PWM-timer will be stopped also.
        constexpr uint32_t CP23 = (8 << 8);  ///< Clock prescaler 2 (PWM-timer2 & 3 for group A and PWM-timer 6 & 7 for group B) Clock input is divided by (CP23 + 1) before it is fed to the corresponding PWM-timer. If CP23=0, then the clock prescaler 2 output clock will be stopped. So corresponding PWM-timer will be stopped also.
        constexpr uint32_t DZI01 = (8 << 16);  ///< Dead Zone Interval for Pair of Channel 0 and Channel 1 (PWM0 and PWM1 pair for PWM group A, PWM4 and PWM5 pair for PWM group B) These 8 bits determine dead zone length. The unit time of dead zone length is received from corresponding CSR bits.
        constexpr uint32_t DZI23 = (8 << 24);  ///< Dead Zone Interval for Pair of Channel2 and Channel3 (PWM2 and PWM3 pair for PWM group A, PWM6 and PWM7 pair for PWM group B) These 8 bits determine dead zone length. The unit time of dead zone length is received from corresponding CSR bits.
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t CSR0 = (3 << 0);  ///< PWM Timer 0 Clock Source Selection (PWM timer 0 for group A and PWM timer 4 for group B) Select clock input for PWM timer. (Table is the same as CSR3)
        constexpr uint32_t CSR1 = (3 << 4);  ///< PWM Timer 1 Clock Source Selection (PWM timer 1 for group A and PWM timer 5 for group B) Select clock input for PWM timer. (Table is the same as CSR3)
        constexpr uint32_t CSR2 = (3 << 8);  ///< PWM Timer 2 Clock Source Selection (PWM timer 2 for group A and PWM timer 6 for group B) Select clock input for PWM timer. (Table is the same as CSR3)
        constexpr uint32_t CSR3 = (3 << 12);  ///< PWM Timer 3 Clock Source Selection (PWM timer 3 for group A and PWM timer 7 for group B) Select clock input for PWM timer. CSR3 [14:12]	Input clock divided by	 100	1	 011	16	 010	8	 001	4	 000	2
    }

    /// PCR Register bits
    namespace pcr_bits {
        constexpr uint32_t CH0EN = (1U << 0);  ///< PWM-Timer 0 Enable (PWM timer 0 for group A and PWM timer 4 for group B) 1 = Enable corresponding PWM-Timer Start Run 0 = Stop corresponding PWM-Timer Running
        constexpr uint32_t CH0INV = (1U << 2);  ///< PWM-Timer 0 Output Inverter Enable (PWM timer 0 for group A and PWM timer 4 for group B) 1 = Inverter enable 0 = Inverter disable
        constexpr uint32_t CH0MOD = (1U << 3);  ///< PWM-Timer 0 Auto-reload/One-Shot Mode (PWM timer 0 for group A and PWM timer 4 for group B) 1 = Auto-reload Mode 0 = One-Shot Mode Note: If there is a rising transition at this bit, it will cause CNR0 and CMR0 be clear.
        constexpr uint32_t DZEN01 = (1U << 4);  ///< Dead-Zone 0 Generator Enable (PWM0 and PWM1 pair for PWM group A, PWM4 and PWM5 pair for PWM group B) 1 = Enable 0 = Disable Note: When Dead-Zone Generator is enabled, the pair of PWM0 and PWM1 becomes a complementary pair for PWM group A and the pair of PWM4 and PWM5 becomes a complementary pair for PWM group B.
        constexpr uint32_t DZEN23 = (1U << 5);  ///< Dead-Zone 2 Generator Enable (PWM2 and PWM3 pair for PWM group A, PWM6 and PWM7 pair for PWM group B) 1 = Enable 0 = Disable Note: When Dead-Zone Generator is enabled, the pair of PWM2 and PWM3 becomes a complementary pair for PWM group A and the pair of PWM6 and PWM7 becomes a complementary pair for PWM group B.
        constexpr uint32_t CH1EN = (1U << 8);  ///< PWM-Timer 1 Enable (PWM timer 1 for group A and PWM timer 5 for group B) 1 = Enable corresponding PWM-Timer Start Run 0 = Stop corresponding PWM-Timer Running
        constexpr uint32_t CH1INV = (1U << 10);  ///< PWM-Timer 1 Output Inverter Enable (PWM timer 1 for group A and PWM timer 5 for group B) 1 = Inverter enable 0 = Inverter disable
        constexpr uint32_t CH1MOD = (1U << 11);  ///< PWM-Timer 1 Auto-reload/One-Shot Mode (PWM timer 1 for group A and PWM timer 5 for group B) 1 = Auto-load Mode 0 = One-Shot Mode Note: If there is a rising transition at this bit, it will cause CNR1 and CMR1 be clear.
        constexpr uint32_t CH2EN = (1U << 16);  ///< PWM-Timer 2 Enable (PWM timer 2 for group A and PWM timer 6 for group B) 1 = Enable corresponding PWM-Timer Start Run 0 = Stop corresponding PWM-Timer Running
        constexpr uint32_t CH2INV = (1U << 18);  ///< PWM-Timer 2 Output Inverter Enable (PWM timer 2 for group A and PWM timer 6 for group B) 1 = Inverter enable 0 = Inverter disable
        constexpr uint32_t CH2MOD = (1U << 19);  ///< PWM-Timer 2 Auto-reload/One-Shot Mode (PWM timer 2 for group A and PWM timer 6 for group B) 1 = Auto-reload Mode 0 = One-Shot Mode Note: If there is a rising transition at this bit, it will cause CNR2 and CMR2 be clear.
        constexpr uint32_t CH3EN = (1U << 24);  ///< PWM-Timer 3 Enable (PWM timer 3 for group A and PWM timer 7 for group B) 1 = Enable corresponding PWM-Timer Start Run 0 = Stop corresponding PWM-Timer Running
        constexpr uint32_t CH3INV = (1U << 26);  ///< PWM-Timer 3 Output Inverter Enable (PWM timer 3 for group A and PWM timer 7 for group B) 1 = Inverter enable 0 = Inverter disable
        constexpr uint32_t CH3MOD = (1U << 27);  ///< PWM-Timer 3 Auto-reload/One-Shot Mode (PWM timer 3 for group A and PWM timer 7 for group B) 1 = Auto-reload Mode 0 = One-Shot Mode Note: If there is a rising transition at this bit, it will cause CNR3 and CMR3 be clear.
    }

    /// CNR0 Register bits
    namespace cnr0_bits {
        constexpr uint32_t CNR = (16 << 0);  ///< PWM Counter/Timer Loaded Value CNR determines the PWM period. PWM frequency = PWM01_CLK/(prescale+1)*(clock divider)/(CNR+1). Duty ratio = (CMR+1)/(CNR+1). CMR >= CNR: PWM output is always high. CMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit. CMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit (Unit : 1 PWM clock cycle) Note: Any write to CNR will take effect in next PWM cycle.
    }

    /// CMR0 Register bits
    namespace cmr0_bits {
        constexpr uint32_t CMR = (16 << 0);  ///< PWM Comparator Register CMR determines the PWM duty. PWM frequency = PWM01_CLK/(prescale+1)*(clock divider)/(CNR+1). Duty ratio = (CMR+1)/(CNR+1). CMR >= CNR: PWM output is always high. CMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit. CMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit (Unit : 1 PWM clock cycle) Note: Any write to CMR will take effect in next PWM cycle.
    }

    /// PDR0 Register bits
    namespace pdr0_bits {
        constexpr uint32_t PDR = (16 << 0);  ///< PWM Data Register User can monitor PDR to know current value in 16-bit down counter.
    }

    /// CNR1 Register bits
    namespace cnr1_bits {
        constexpr uint32_t CNR = (16 << 0);  ///< PWM Counter/Timer Loaded Value CNR determines the PWM period. PWM frequency = PWM01_CLK/(prescale+1)*(clock divider)/(CNR+1). Duty ratio = (CMR+1)/(CNR+1). CMR >= CNR: PWM output is always high. CMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit. CMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit (Unit : 1 PWM clock cycle) Note: Any write to CNR will take effect in next PWM cycle.
    }

    /// CMR1 Register bits
    namespace cmr1_bits {
        constexpr uint32_t CMR = (16 << 0);  ///< PWM Comparator Register CMR determines the PWM duty. PWM frequency = PWM01_CLK/(prescale+1)*(clock divider)/(CNR+1). Duty ratio = (CMR+1)/(CNR+1). CMR >= CNR: PWM output is always high. CMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit. CMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit (Unit : 1 PWM clock cycle) Note: Any write to CMR will take effect in next PWM cycle.
    }

    /// PDR1 Register bits
    namespace pdr1_bits {
        constexpr uint32_t PDR = (16 << 0);  ///< PWM Data Register User can monitor PDR to know current value in 16-bit down counter.
    }

    /// CNR2 Register bits
    namespace cnr2_bits {
        constexpr uint32_t CNR = (16 << 0);  ///< PWM Counter/Timer Loaded Value CNR determines the PWM period. PWM frequency = PWM23_CLK/(prescale+1)*(clock divider)/(CNR+1). Duty ratio = (CMR+1)/(CNR+1). CMR >= CNR: PWM output is always high. CMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit. CMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit (Unit : 1 PWM clock cycle) Note: Any write to CNR will take effect in next PWM cycle.
    }

    /// CMR2 Register bits
    namespace cmr2_bits {
        constexpr uint32_t CMR = (16 << 0);  ///< PWM Comparator Register CMR determines the PWM duty. PWM frequency = PWM23_CLK/(prescale+1)*(clock divider)/(CNR+1). Duty ratio = (CMR+1)/(CNR+1). CMR >= CNR: PWM output is always high. CMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit. CMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit (Unit : 1 PWM clock cycle) Note: Any write to CMR will take effect in next PWM cycle.
    }

    /// PDR2 Register bits
    namespace pdr2_bits {
        constexpr uint32_t PDR = (16 << 0);  ///< PWM Data Register User can monitor PDR to know current value in 16-bit down counter.
    }

    /// CNR3 Register bits
    namespace cnr3_bits {
        constexpr uint32_t CNR = (16 << 0);  ///< PWM Counter/Timer Loaded Value CNR determines the PWM period. PWM frequency = PWM23_CLK/(prescale+1)*(clock divider)/(CNR+1). Duty ratio = (CMR+1)/(CNR+1). CMR >= CNR: PWM output is always high. CMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit. CMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit (Unit : 1 PWM clock cycle) Note: Any write to CNR will take effect in next PWM cycle.
    }

    /// CMR3 Register bits
    namespace cmr3_bits {
        constexpr uint32_t CMR = (16 << 0);  ///< PWM Comparator Register CMR determines the PWM duty. PWM frequency = PWM23_CLK/(prescale+1)*(clock divider)/(CNR+1). Duty ratio = (CMR+1)/(CNR+1). CMR >= CNR: PWM output is always high. CMR < CNR: PWM low width = (CNR-CMR) unit; PWM high width = (CMR+1) unit. CMR = 0: PWM low width = (CNR) unit; PWM high width = 1 unit (Unit : 1 PWM clock cycle) Note: Any write to CMR will take effect in next PWM cycle.
    }

    /// PDR3 Register bits
    namespace pdr3_bits {
        constexpr uint32_t PDR = (16 << 0);  ///< PWM Data Register User can monitor PDR to know current value in 16-bit down counter.
    }

    /// PBCR Register bits
    namespace pbcr_bits {
        constexpr uint32_t BCn = (1U << 0);  ///< PWM Backward Compatible Register 0 = PWM register action is compatible with Medium Density 1 = PWM register action is not compatible with Medium Density Please reference CCR0/CCR2 register bit 6, 7, 22, 23 description
    }

    /// PIER Register bits
    namespace pier_bits {
        constexpr uint32_t PWMIE0 = (1U << 0);  ///< PWM Channel 0 Interrupt Enable 1 = Enable 0 = Disable
        constexpr uint32_t PWMIE1 = (1U << 1);  ///< PWM Channel 1 Interrupt Enable 1 = Enable 0 = Disable
        constexpr uint32_t PWMIE2 = (1U << 2);  ///< PWM Channel 2 Interrupt Enable 1 = Enable 0 = Disable
        constexpr uint32_t PWMIE3 = (1U << 3);  ///< PWM Channel 3 Interrupt Enable 1 = Enable 0 = Disable
    }

    /// PIIR Register bits
    namespace piir_bits {
        constexpr uint32_t PWMIF0 = (1U << 0);  ///< PWM Channel 0 Interrupt Status Flag is set by hardware when PWM0 down counter reaches zero, software can write 1 to clear this bit to zero.
        constexpr uint32_t PWMIF1 = (1U << 1);  ///< PWM Channel 1 Interrupt Status Flag is set by hardware when PWM1 down counter reaches zero, software can write 1 to clear this bit to zero.
        constexpr uint32_t PWMIF2 = (1U << 2);  ///< PWM Channel 2 Interrupt Status Flag is set by hardware when PWM2 down counter reaches zero, software can write 1 to clear this bit to zero.
        constexpr uint32_t PWMIF3 = (1U << 3);  ///< PWM Channel 3 Interrupt Status Flag is set by hardware when PWM3 down counter reaches zero, software can write 1 to clear this bit to zero.
    }

    /// CCR0 Register bits
    namespace ccr0_bits {
        constexpr uint32_t INV0 = (1U << 0);  ///< Channel 0 Inverter Enable 1 = Inverter enable. Reverse the input signal from GPIO before fed to Capture timer 0 = Inverter disable
        constexpr uint32_t CRL_IE0 = (1U << 1);  ///< Channel 0 Rising Latch Interrupt Enable 1 = Enable rising latch interrupt 0 = Disable rising latch interrupt When Enable, if Capture detects PWM group channel 0 has rising transition, Capture issues an Interrupt.
        constexpr uint32_t CFL_IE0 = (1U << 2);  ///< Channel 0 Falling Latch Interrupt Enable 1 = Enable falling latch interrupt 0 = Disable falling latch interrupt When Enable, if Capture detects PWM group channel 0 has falling transition, Capture issues an Interrupt.
        constexpr uint32_t CAPCH0EN = (1U << 3);  ///< Channel 0 Capture Function Enable 1 = Enable capture function on PWM group channel 0. 0 = Disable capture function on PWM group channel 0. When Enable, Capture latched the PWM-counter value and saved to CRLR (Rising latch) and CFLR (Falling latch). When Disable, Capture does not update CRLR and CFLR, and disable PWM group channel 0 Interrupt.
        constexpr uint32_t CAPIF0 = (1U << 4);  ///< Channel 0 Capture Interrupt Indication Flag If PWM group channel 0 rising latch interrupt is enabled (CRL_IE0=1), a rising transition occurs at PWM group channel 0 will result in CAPIF0 to high; Similarly, a falling transition will cause CAPIF0 to be set high if PWM group channel 0 falling latch interrupt is enabled (CFL_IE0=1). Write 1 to clear this bit to zero
        constexpr uint32_t CRLRI0 = (1U << 6);  ///< CRLR0 Latched Indicator Bit When PWM group input channel 0 has a rising transition, CRLR0 was latched with the value of PWM down-counter and this bit is set by hardware. In Medium Density, software can write 0 to clear this bit to zero. In Low Density, software can write 0 to clear this bit to zero if BCn bit is 0, and can Write 1 to clear this bit to zero if BCn bit is 1.
        constexpr uint32_t CFLRI0 = (1U << 7);  ///< CFLR0 Latched Indicator Bit When PWM group input channel 0 has a falling transition, CFLR0 was latched with the value of PWM down-counter and this bit is set by hardware. In Medium Density, software can write 0 to clear this bit to zero. In Low Density, software can write 0 to clear this bit to zero if BCn bit is 0, and can Write 1 to clear this bit to zero if BCn bit is 1.
        constexpr uint32_t INV1 = (1U << 16);  ///< Channel 1 Inverter Enable 1 = Inverter enable. Reverse the input signal from GPIO before fed to Capture timer 0 = Inverter disable
        constexpr uint32_t CRL_IE1 = (1U << 17);  ///< Channel 1 Rising Latch Interrupt Enable 1 = Enable rising latch interrupt 0 = Disable rising latch interrupt When Enable, if Capture detects PWM group channel 1 has rising transition, Capture issues an Interrupt.
        constexpr uint32_t CFL_IE1 = (1U << 18);  ///< Channel 1 Falling Latch Interrupt Enable 1 = Enable falling latch interrupt 0 = Disable falling latch interrupt When Enable, if Capture detects PWM group channel 1 has falling transition, Capture issues an Interrupt.
        constexpr uint32_t CAPCH1EN = (1U << 19);  ///< Channel 1 Capture Function Enable 1 = Enable capture function on PWM group channel 1. 0 = Disable capture function on PWM group channel 1. When Enable, Capture latched the PMW-counter and saved to CRLR (Rising latch) and CFLR (Falling latch). When Disable, Capture does not update CRLR and CFLR, and disable PWM group channel 1 Interrupt.
        constexpr uint32_t CAPIF1 = (1U << 20);  ///< Channel 1 Capture Interrupt Indication Flag If PWM group channel 1 rising latch interrupt is enabled (CRL_IE1=1), a rising transition occurs at PWM group channel 1 will result in CAPIF1 to high; Similarly, a falling transition will cause CAPIF1 to be set high if PWM group channel 1 falling latch interrupt is enabled (CFL_IE1=1). Write 1 to clear this bit to zero
        constexpr uint32_t CRLRI1 = (1U << 22);  ///< CRLR1 Latched Indicator Bit When PWM group input channel 1 has a rising transition, CRLR1 was latched with the value of PWM down-counter and this bit is set by hardware. In Medium Density, software can write 0 to clear this bit to zero. In Low Density, software can write 0 to clear this bit to zero if BCn bit is 0, and can Write 1 to clear this bit to zero if BCn bit is 1.
        constexpr uint32_t CFLRI1 = (1U << 23);  ///< CFLR1 Latched Indicator Bit When PWM group input channel 1 has a falling transition, CFLR1 was latched with the value of PWM down-counter and this bit is set by hardware. In Medium Density, software can write 0 to clear this bit to zero. In Low Density, software can write 0 to clear this bit to zero if BCn bit is 0, and can Write 1 to clear this bit to zero if BCn bit is 1.
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t INV2 = (1U << 0);  ///< Channel 2 Inverter Enable 1 = Inverter enable. Reverse the input signal from GPIO before fed to Capture timer 0 = Inverter disable
        constexpr uint32_t CRL_IE2 = (1U << 1);  ///< Channel 2 Rising Latch Interrupt Enable 1 = Enable rising latch interrupt 0 = Disable rising latch interrupt When Enable, if Capture detects PWM group channel 2 has rising transition, Capture issues an Interrupt.
        constexpr uint32_t CFL_IE2 = (1U << 2);  ///< Channel 2 Falling Latch Interrupt Enable 1 = Enable falling latch interrupt 0 = Disable falling latch interrupt When Enable, if Capture detects PWM group channel 2 has falling transition, Capture issues an Interrupt.
        constexpr uint32_t CAPCH2EN = (1U << 3);  ///< Channel 2 Capture Function Enable 1 = Enable capture function on PWM group channel 2. 0 = Disable capture function on PWM group channel 2. When Enable, Capture latched the PWM-counter value and saved to CRLR (Rising latch) and CFLR (Falling latch). When Disable, Capture does not update CRLR and CFLR, and disable PWM group channel 2 Interrupt.
        constexpr uint32_t CAPIF2 = (1U << 4);  ///< Channel 2 Capture Interrupt Indication Flag If PWM group channel 2 rising latch interrupt is enabled (CRL_IE2=1), a rising transition occurs at PWM group channel 2 will result in CAPIF2 to high; Similarly, a falling transition will cause CAPIF2 to be set high if PWM group channel 2 falling latch interrupt is enabled (CFL_IE2=1). Write 1 to clear this bit to zero
        constexpr uint32_t CRLRI2 = (1U << 6);  ///< CRLR2 Latched Indicator Bit When PWM group input channel 2 has a rising transition, CRLR2 was latched with the value of PWM down-counter and this bit is set by hardware. In Medium Density, software can write 0 to clear this bit to zero. In Low Density, software can write 0 to clear this bit to zero if BCn bit is 0, and can Write 1 to clear this bit to zero if BCn bit is 1.
        constexpr uint32_t CFLRI2 = (1U << 7);  ///< CFLR2 Latched Indicator Bit When PWM group input channel 2 has a falling transition, CFLR2 was latched with the value of PWM down-counter and this bit is set by hardware. In Medium Density, software can write 0 to clear this bit to zero. In Low Density, software can write 0 to clear this bit to zero if BCn bit is 0, and can Write 1 to clear this bit to zero if BCn bit is 1.
        constexpr uint32_t INV3 = (1U << 16);  ///< Channel 3 Inverter Enable 1 = Inverter enable. Reverse the input signal from GPIO before fed to Capture timer 0 = Inverter disable
        constexpr uint32_t CRL_IE3 = (1U << 17);  ///< Channel 3 Rising Latch Interrupt Enable 1 = Enable rising latch interrupt 0 = Disable rising latch interrupt When Enable, if Capture detects PWM group channel 3 has rising transition, Capture issues an Interrupt.
        constexpr uint32_t CFL_IE3 = (1U << 18);  ///< Channel 3 Falling Latch Interrupt Enable 1 = Enable falling latch interrupt 0 = Disable falling latch interrupt When Enable, if Capture detects PWM group channel 3 has falling transition, Capture issues an Interrupt.
        constexpr uint32_t CAPCH3EN = (1U << 19);  ///< Channel 3 Capture Function Enable 1 = Enable capture function on PWM group channel 3. 0 = Disable capture function on PWM group channel 3. When Enable, Capture latched the PMW-counter and saved to CRLR (Rising latch) and CFLR (Falling latch). When Disable, Capture does not update CRLR and CFLR, and disable PWM group channel 3 Interrupt.
        constexpr uint32_t CAPIF3 = (1U << 20);  ///< Channel 3 Capture Interrupt Indication Flag If PWM group channel 3 rising latch interrupt is enabled (CRL_IE3=1), a rising transition occurs at PWM group channel 3 will result in CAPIF3 to high; Similarly, a falling transition will cause CAPIF3 to be set high if PWM group channel 3 falling latch interrupt is enabled (CFL_IE3=1). Write 1 to clear this bit to zero
        constexpr uint32_t CRLRI3 = (1U << 22);  ///< CRLR3 Latched Indicator Bit When PWM group input channel 3 has a rising transition, CRLR3 was latched with the value of PWM down-counter and this bit is set by hardware. In Medium Density, software can write 0 to clear this bit to zero. In Low Density, software can write 0 to clear this bit to zero if BCn bit is 0, and can Write 1 to clear this bit to zero if BCn bit is 1.
        constexpr uint32_t CFLRI3 = (1U << 23);  ///< CFLR3 Latched Indicator Bit When PWM group input channel 3 has a falling transition, CFLR3 was latched with the value of PWM down-counter and this bit is set by hardware. In Medium Density, software can write 0 to clear this bit to zero. In Low Density, software can write 0 to clear this bit to zero if BCn bit is 0, and can Write 1 to clear this bit to zero if BCn bit is 1.
    }

    /// CRLR0 Register bits
    namespace crlr0_bits {
        constexpr uint32_t CRLR = (16 << 0);  ///< Capture Rising Latch Register Latch the PWM counter when Channel 0 has rising transition.
    }

    /// CFLR0 Register bits
    namespace cflr0_bits {
        constexpr uint32_t CFLR = (16 << 0);  ///< Capture Falling Latch Register Latch the PWM counter when Channel 0 has Falling transition.
    }

    /// CRLR1 Register bits
    namespace crlr1_bits {
        constexpr uint32_t CRLR = (16 << 0);  ///< Capture Rising Latch Register Latch the PWM counter when Channel 1 has rising transition.
    }

    /// CFLR1 Register bits
    namespace cflr1_bits {
        constexpr uint32_t CFLR = (16 << 0);  ///< Capture Falling Latch Register Latch the PWM counter when Channel 1 has Falling transition.
    }

    /// CRLR2 Register bits
    namespace crlr2_bits {
        constexpr uint32_t CRLR = (16 << 0);  ///< Capture Rising Latch Register Latch the PWM counter when Channel 2 has rising transition.
    }

    /// CFLR2 Register bits
    namespace cflr2_bits {
        constexpr uint32_t CFLR = (16 << 0);  ///< Capture Falling Latch Register Latch the PWM counter when Channel 2 has Falling transition.
    }

    /// CRLR3 Register bits
    namespace crlr3_bits {
        constexpr uint32_t CRLR = (16 << 0);  ///< Capture Rising Latch Register Latch the PWM counter when Channel 3 has rising transition.
    }

    /// CFLR3 Register bits
    namespace cflr3_bits {
        constexpr uint32_t CFLR = (16 << 0);  ///< Capture Falling Latch Register Latch the PWM counter when Channel 3 has Falling transition.
    }

    /// CAPENR Register bits
    namespace capenr_bits {
        constexpr uint32_t CAPENR = (4 << 0);  ///< Capture Input Enable Register There are four capture inputs from pad. Bit0~Bit3 are used to control each inputs enable or disable. 0 = Disable (PWMx multi-function pin input does not affect input capture function) 1 = Enable (PWMx multi-function pin input will affect its input capture function.) CAPENR Bit 3210 for PWM group A Bit xxx1 Capture channel 0 is from pin PA.12 Bit xx1x Capture channel 1 is from pin PA.13 Bit x1xx Capture channel 2 is from pin PA.14 Bit 1xxx Capture channel 3 is from pin PA.15 Bit 3210 for PWM group B Bit xxx1 Capture channel 0 is from pin PE.11 Bit xx1x Capture channel 1 is from pin PE.5 Bit x1xx Capture channel 2 is from pin PE.0 Bit 1xxx Capture channel 3 is from pin PE.1
    }

    /// POE Register bits
    namespace poe_bits {
        constexpr uint32_t PWM0 = (1U << 0);  ///< PWM Channel 0 Output Enable Register 1 = Enable PWM channel 0 output to pin 0 = Disable PWM channel 0 output to pin Note: The corresponding GPIO pin also must be switched to PWM function.
        constexpr uint32_t PWM1 = (1U << 1);  ///< PWM Channel 1 Output Enable Register 1 = Enable PWM channel 1 output to pin 0 = Disable PWM channel 1 output to pin Note: The corresponding GPIO pin also must be switched to PWM function.
        constexpr uint32_t PWM2 = (1U << 2);  ///< PWM Channel 2 Output Enable Register 1 = Enable PWM channel 2 output to pin 0 = Disable PWM channel 2 output to pin Note: The corresponding GPIO pin also must be switched to PWM function.
        constexpr uint32_t PWM3 = (1U << 3);  ///< PWM Channel 3 Output Enable Register 1 = Enable PWM channel 3 output to pin 0 = Disable PWM channel 3 output to pin Note: The corresponding GPIO pin also must be switched to PWM function.
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_BASE = 0x400E0000;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ADDR0;  ///< Offset: 0x00 - A/D Data Register 0
        volatile uint32_t ADDR1;  ///< Offset: 0x04 - A/D Data Register 1
        volatile uint32_t ADDR2;  ///< Offset: 0x08 - A/D Data Register 2
        volatile uint32_t ADDR3;  ///< Offset: 0x0C - A/D Data Register 3
        volatile uint32_t ADDR4;  ///< Offset: 0x10 - A/D Data Register 4
        volatile uint32_t ADDR5;  ///< Offset: 0x14 - A/D Data Register 5
        volatile uint32_t ADDR6;  ///< Offset: 0x18 - A/D Data Register 6
        volatile uint32_t ADDR7;  ///< Offset: 0x1C - A/D Data Register 7
        volatile uint32_t ADCR;  ///< Offset: 0x20 - A/D Control Register
        volatile uint32_t ADCHER;  ///< Offset: 0x24 - A/D Channel Enable Register
        volatile uint32_t ADCMPR0;  ///< Offset: 0x28 - A/D Compare Register 0
        volatile uint32_t ADCMPR1;  ///< Offset: 0x2C - A/D Compare Register 1
        volatile uint32_t ADSR;  ///< Offset: 0x30 - A/D Status Register
        volatile uint32_t ADCALR;  ///< Offset: 0x34 - A/D Calibration Register
        volatile uint32_t ADPDMA;  ///< Offset: 0x40 - New description for register
    };

    /// Peripheral instances
    inline Registers* ADC = reinterpret_cast<Registers*>(ADC_BASE);

    // Bit definitions
    /// ADDR0 Register bits
    namespace addr0_bits {
        constexpr uint32_t RSLT = (16 << 0);  ///< A/D Conversion Result This field contains conversion result of ADC. For Medium density, RSLT[15:12] always read as 0. For Low density, if DMOF bit (ADCR[31]) set to 0, 12 bits ADC conversion result with unsigned format will be filled in RSLT[11:0] and zero will be filled in RSLT[15:12]. If DMOF bit (ADCR[31]) set to 1, 12 bits ADC conversion result with 2's complement format will be filled in RSLT[11:0] and signed bits will be filled in RSLT[15:12]
        constexpr uint32_t OVERRUN = (1U << 16);  ///< Over Run Flag 1 = Data in RSLT[11:0] is overwrite. 0 = Data in RSLT[11:0] is recent conversion result. If converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1 and previous conversion result is gone. It will be cleared by hardware after ADDR register is read.
        constexpr uint32_t VALID = (1U << 17);  ///< Valid Flag 1 = Data in RSLT[11:0] bits is valid. 0 = Data in RSLT[11:0] bits is not valid. This bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
    }

    /// ADDR1 Register bits
    namespace addr1_bits {
        constexpr uint32_t RSLT = (16 << 0);  ///< A/D Conversion Result This field contains conversion result of ADC. For Medium density, RSLT[15:12] always read as 0. For Low density, if DMOF bit (ADCR[31]) set to 0, 12 bits ADC conversion result with unsigned format will be filled in RSLT[11:0] and zero will be filled in RSLT[15:12]. If DMOF bit (ADCR[31]) set to 1, 12 bits ADC conversion result with 2's complement format will be filled in RSLT[11:0] and signed bits will be filled in RSLT[15:12].
        constexpr uint32_t OVERRUN = (1U << 16);  ///< Over Run Flag 1 = Data in RSLT[11:0] is overwrite. 0 = Data in RSLT[11:0] is recent conversion result. If converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1 and previous conversion result is gone. It will be cleared by hardware after ADDR register is read.
        constexpr uint32_t VALID = (1U << 17);  ///< Valid Flag 1 = Data in RSLT[11:0] bits is valid. 0 = Data in RSLT[11:0] bits is not valid. This bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
    }

    /// ADDR2 Register bits
    namespace addr2_bits {
        constexpr uint32_t RSLT = (16 << 0);  ///< A/D Conversion Result This field contains conversion result of ADC. For Medium density, RSLT[15:12] always read as 0. For Low density, if DMOF bit (ADCR[31]) set to 0, 12 bits ADC conversion result with unsigned format will be filled in RSLT[11:0] and zero will be filled in RSLT[15:12]. If DMOF bit (ADCR[31]) set to 1, 12 bits ADC conversion result with 2's complement format will be filled in RSLT[11:0] and signed bits will be filled in RSLT[15:12].
        constexpr uint32_t OVERRUN = (1U << 16);  ///< Over Run Flag 1 = Data in RSLT[11:0] is overwrite. 0 = Data in RSLT[11:0] is recent conversion result. If converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1 and previous conversion result is gone. It will be cleared by hardware after ADDR register is read.
        constexpr uint32_t VALID = (1U << 17);  ///< Valid Flag 1 = Data in RSLT[11:0] bits is valid. 0 = Data in RSLT[11:0] bits is not valid. This bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
    }

    /// ADDR3 Register bits
    namespace addr3_bits {
        constexpr uint32_t RSLT = (16 << 0);  ///< A/D Conversion Result This field contains conversion result of ADC. For Medium density, RSLT[15:12] always read as 0. For Low density, if DMOF bit (ADCR[31]) set to 0, 12 bits ADC conversion result with unsigned format will be filled in RSLT[11:0] and zero will be filled in RSLT[15:12]. If DMOF bit (ADCR[31]) set to 1, 12 bits ADC conversion result with 2's complement format will be filled in RSLT[11:0] and signed bits will be filled in RSLT[15:12].
        constexpr uint32_t OVERRUN = (1U << 16);  ///< Over Run Flag 1 = Data in RSLT[11:0] is overwrite. 0 = Data in RSLT[11:0] is recent conversion result. If converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1 and previous conversion result is gone. It will be cleared by hardware after ADDR register is read.
        constexpr uint32_t VALID = (1U << 17);  ///< Valid Flag 1 = Data in RSLT[11:0] bits is valid. 0 = Data in RSLT[11:0] bits is not valid. This bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
    }

    /// ADDR4 Register bits
    namespace addr4_bits {
        constexpr uint32_t RSLT = (16 << 0);  ///< A/D Conversion Result This field contains conversion result of ADC. For Medium density, RSLT[15:12] always read as 0. For Low density, if DMOF bit (ADCR[31]) set to 0, 12 bits ADC conversion result with unsigned format will be filled in RSLT[11:0] and zero will be filled in RSLT[15:12]. If DMOF bit (ADCR[31]) set to 1, 12 bits ADC conversion result with 2's complement format will be filled in RSLT[11:0] and signed bits will be filled in RSLT[15:12].
        constexpr uint32_t OVERRUN = (1U << 16);  ///< Over Run Flag 1 = Data in RSLT[11:0] is overwrite. 0 = Data in RSLT[11:0] is recent conversion result. If converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1 and previous conversion result is gone. It will be cleared by hardware after ADDR register is read.
        constexpr uint32_t VALID = (1U << 17);  ///< Valid Flag 1 = Data in RSLT[11:0] bits is valid. 0 = Data in RSLT[11:0] bits is not valid. This bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
    }

    /// ADDR5 Register bits
    namespace addr5_bits {
        constexpr uint32_t RSLT = (16 << 0);  ///< A/D Conversion Result This field contains conversion result of ADC. For Medium density, RSLT[15:12] always read as 0. For Low density, if DMOF bit (ADCR[31]) set to 0, 12 bits ADC conversion result with unsigned format will be filled in RSLT[11:0] and zero will be filled in RSLT[15:12]. If DMOF bit (ADCR[31]) set to 1, 12 bits ADC conversion result with 2's complement format will be filled in RSLT[11:0] and signed bits will be filled in RSLT[15:12].
        constexpr uint32_t OVERRUN = (1U << 16);  ///< Over Run Flag 1 = Data in RSLT[11:0] is overwrite. 0 = Data in RSLT[11:0] is recent conversion result. If converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1 and previous conversion result is gone. It will be cleared by hardware after ADDR register is read.
        constexpr uint32_t VALID = (1U << 17);  ///< Valid Flag 1 = Data in RSLT[11:0] bits is valid. 0 = Data in RSLT[11:0] bits is not valid. This bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
    }

    /// ADDR6 Register bits
    namespace addr6_bits {
        constexpr uint32_t RSLT = (16 << 0);  ///< A/D Conversion Result This field contains conversion result of ADC. For Medium density, RSLT[15:12] always read as 0. For Low density, if DMOF bit (ADCR[31]) set to 0, 12 bits ADC conversion result with unsigned format will be filled in RSLT[11:0] and zero will be filled in RSLT[15:12]. If DMOF bit (ADCR[31]) set to 1, 12 bits ADC conversion result with 2's complement format will be filled in RSLT[11:0] and signed bits will be filled in RSLT[15:12].
        constexpr uint32_t OVERRUN = (1U << 16);  ///< Over Run Flag 1 = Data in RSLT[11:0] is overwrite. 0 = Data in RSLT[11:0] is recent conversion result. If converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1 and previous conversion result is gone. It will be cleared by hardware after ADDR register is read.
        constexpr uint32_t VALID = (1U << 17);  ///< Valid Flag 1 = Data in RSLT[11:0] bits is valid. 0 = Data in RSLT[11:0] bits is not valid. This bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
    }

    /// ADDR7 Register bits
    namespace addr7_bits {
        constexpr uint32_t RSLT = (16 << 0);  ///< A/D Conversion Result This field contains conversion result of ADC. For Medium density, RSLT[15:12] always read as 0. For Low density, if DMOF bit (ADCR[31]) set to 0, 12 bits ADC conversion result with unsigned format will be filled in RSLT[11:0] and zero will be filled in RSLT[15:12]. If DMOF bit (ADCR[31]) set to 1, 12 bits ADC conversion result with 2's complement format will be filled in RSLT[11:0] and signed bits will be filled in RSLT[15:12].
        constexpr uint32_t OVERRUN = (1U << 16);  ///< Over Run Flag 1 = Data in RSLT[11:0] is overwrite. 0 = Data in RSLT[11:0] is recent conversion result. If converted data in RSLT[11:0] has not been read before new conversion result is loaded to this register, OVERRUN is set to 1 and previous conversion result is gone. It will be cleared by hardware after ADDR register is read.
        constexpr uint32_t VALID = (1U << 17);  ///< Valid Flag 1 = Data in RSLT[11:0] bits is valid. 0 = Data in RSLT[11:0] bits is not valid. This bit is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
    }

    /// ADCR Register bits
    namespace adcr_bits {
        constexpr uint32_t ADEN = (1U << 0);  ///< A/D Converter Enable 1 = Enable 0 = Disable Before starting A/D conversion function, this bit should be set to 1. Clear it to 0 to disable A/D converter analog circuit for saving power consumption.
        constexpr uint32_t ADIE = (1U << 1);  ///< A/D Interrupt Enable 1 = Enable A/D interrupt function 0 = Disable A/D interrupt function A/D conversion end interrupt request is generated if ADIE bit is set to 1.
        constexpr uint32_t ADMD = (2 << 2);  ///< A/D Converter Operation Mode 00 = Single conversion 01 = Reserved 10 = Single-cycle scan 11 = Continuous scan When changing the operation mode, software should disable ADST bit firstly.
        constexpr uint32_t TRGS = (2 << 4);  ///< Hardware Trigger Source 00 = A/D conversion is started by external STADC pin. Others = Reserved Software should disable TRGE and ADST before change TRGS. In hardware trigger mode, the ADST bit is set by the external trigger from STADC.
        constexpr uint32_t TRGCOND = (2 << 6);  ///< External Trigger Condition These two bits decide external pin STADC trigger event is level or edge. The signal must be kept at stable state at least 8 PCLKs for level trigger and 4 PCLKs at high and low state for edge trigger. 00 = Low level 01 = High level 10 = Falling edge 11 = Positive edge
        constexpr uint32_t TRGEN = (1U << 8);  ///< External Trigger Enable Enable or disable triggering of A/D conversion by external STADC pin. 1= Enable 0= Disable
        constexpr uint32_t PTEN = (1U << 9);  ///< PDMA Transfer Enable 1 = Enable PDMA data transfer in ADDR 0~7 0 = Disable PDMA data transfer. When A/D conversion is completed, the converted data is loaded into ADDR 0~7, software can enable this bit to generate a PDMA data transfer request. When PTEN=1, software must set ADIE=0 to disable interrupt.
        constexpr uint32_t DIFFEN = (1U << 10);  ///< A/D Differential Input Mode Enable 1 = A/D is in differential analog input mode 0 = A/D is in single-end analog input mode Differential input voltage (Vdiff) = Vplus - Vminus The Vplus of differential input paired channel 0 is from ADC0 pin; Vminus is from ADC1 pin. The Vplus of differential input paired channel 1 is from ADC2 pin; Vminus is from ADC3 pin. The Vplus of differential input paired channel 2 is from ADC4 pin; Vminus is from ADC5 pin. The Vplus of differential input paired channel 3 is from ADC6 pin; Vminus is from ADC7 pin. In differential input mode, only one of the two corresponding channels needs to be enabled in ADCHER. The conversion result will be placed to the corresponding data register of the enabled channel. If both channels of a differential input paired channel are enabled, the ADC will convert it twice in scan mode. And then write the conversion result to the two corresponding data registers.
        constexpr uint32_t ADST = (1U << 11);  ///< A/D Conversion Start 1 = Conversion start. 0 = Conversion stopped and A/D converter enter idle state. ADST bit can be controlled by two sources: software write and external pin STADC. ADST is cleared to 0 by hardware automatically at the ends of single mode and single-cycle scan mode on specified channels. In continuous scan mode, A/D conversion is continuously performed sequentially until this bit is cleared to 0 or chip reset.
        constexpr uint32_t DMOF = (1U << 31);  ///< A/D differential input Mode Output Format This bit is only supported in Low Density. 1 = A/D Conversion result will be filled in RSLT at ADDRx registers with 2'complement format. 0 = A/D Conversion result will be filled in RSLT at ADDRx registers with unsigned format.
    }

    /// ADCHER Register bits
    namespace adcher_bits {
        constexpr uint32_t CHEN0 = (1U << 0);  ///< Analog Input Channel 0 Enable 1 = Enable 0 = Disable Channel 0 is the default enable channel if CHEN0~7 are set as 0s.
        constexpr uint32_t CHEN1 = (1U << 1);  ///< Analog Input Channel 1 Enable 1 = Enable 0 = Disable
        constexpr uint32_t CHEN2 = (1U << 2);  ///< Analog Input Channel 2 Enable 1 = Enable 0 = Disable
        constexpr uint32_t CHEN3 = (1U << 3);  ///< Analog Input Channel 3 Enable 1 = Enable 0 = Disable
        constexpr uint32_t CHEN4 = (1U << 4);  ///< Analog Input Channel 4 Enable 1 = Enable 0 = Disable
        constexpr uint32_t CHEN5 = (1U << 5);  ///< Analog Input Channel 5 Enable 1 = Enable 0 = Disable
        constexpr uint32_t CHEN6 = (1U << 6);  ///< Analog Input Channel 6 Enable 1 = Enable 0 = Disable
        constexpr uint32_t CHEN7 = (1U << 7);  ///< Analog Input Channel 7 Enable 1 = Enable 0 = Disable
        constexpr uint32_t PRESEL = (2 << 8);  ///< Analog Input Channel 7 select 00: External analog input 01: Internal bandgap voltage 10: Internal temperature sensor 11: Reserved
    }

    /// ADCMPR0 Register bits
    namespace adcmpr0_bits {
        constexpr uint32_t CMPEN = (1U << 0);  ///< Compare Enable 1 = Enable compare. 0 = Disable compare. Set this bit to 1 to enable ADC controller to compare CMPD[11:0] with specified channel conversion result when converted data is loaded into ADDR register.
        constexpr uint32_t CMPIE = (1U << 1);  ///< Compare Interrupt Enable 1 = Enable 0 = Disable If the compare function is enabled and the compare condition matches the setting of CMPCOND and CMPMATCNT, CMPF0 bit will be asserted, in the meanwhile, if CMPIE is set to 1, a compare interrupt request is generated.
        constexpr uint32_t CMPCOND = (1U << 2);  ///< Compare Condition 1 = Set the compare condition as that when a 12-bit A/D conversion result is greater or equal to the 12-bit CMPD (ADCMPR0[27:16]), the internal match counter will increase one. 0 = Set the compare condition as that when a 12-bit A/D conversion result is less than the 12-bit CMPD (ADCMPR0[27:16]), the internal match counter will increase one. When the internal counter reaches the value to (CMPMATCNT +1), the CMPF0 bit will be set.
        constexpr uint32_t CMPCH = (3 << 3);  ///< Compare Channel Selection 000 = Channel 0 conversion result is selected to be compared. 001 = Channel 1 conversion result is selected to be compared. 010 = Channel 2 conversion result is selected to be compared. 011 = Channel 3 conversion result is selected to be compared. 100 = Channel 4 conversion result is selected to be compared. 101 = Channel 5 conversion result is selected to be compared. 110 = Channel 6 conversion result is selected to be compared. 111 = Channel 7 conversion result is selected to be compared.
        constexpr uint32_t CMPMATCNT = (4 << 8);  ///< Compare Match Count When the specified A/D channel analog conversion result matches the compare condition defined by CMPCOND[2], the internal match counter will increase 1. When the internal counter reaches the value to (CMPMATCNT +1), the CMPF0 bit will be set.
        constexpr uint32_t CMPD = (12 << 16);  ///< Comparison Data The 12 bits data is used to compare with conversion result of specified channel. Software can use it to monitor the external analog input pin voltage transition in scan mode without imposing a load on software. The following description is only supported in Low Density. When DMOF bit is set to 0, ADC comparator compares CMPD with conversion result with unsigned format. CMPD should be filled in unsigned format. When DMOF bit is set to 1, ADC comparator compares CMPD with conversion result with 2's complement format. CMPD should be filled in 2's complement format.
    }

    /// ADCMPR1 Register bits
    namespace adcmpr1_bits {
        constexpr uint32_t CMPEN = (1U << 0);  ///< Compare Enable 1 = Enable compare. 0 = Disable compare. Set this bit to 1 to enable ADC controller to compare CMPD[11:0] with specified channel conversion result when converted data is loaded into ADDR register.
        constexpr uint32_t CMPIE = (1U << 1);  ///< Compare Interrupt Enable 1 = Enable 0 = Disable If the compare function is enabled and the compare condition matches the setting of CMPCOND and CMPMATCNT, CMPF1 bit will be asserted, in the meanwhile, if CMPIE is set to 1, a compare interrupt request is generated.
        constexpr uint32_t CMPCOND = (1U << 2);  ///< Compare Condition 1 = Set the compare condition as that when a 12-bit A/D conversion result is greater or equal to the 12-bit CMPD (ADCMPR1[27:16]), the internal match counter will increase one. 0 = Set the compare condition as that when a 12-bit A/D conversion result is less than the 12-bit CMPD (ADCMPR1[27:16]), the internal match counter will increase one. When the internal counter reaches the value to (CMPMATCNT +1), the CMPF1 bit will be set.
        constexpr uint32_t CMPCH = (3 << 3);  ///< Compare Channel Selection 000 = Channel 0 conversion result is selected to be compared. 001 = Channel 1 conversion result is selected to be compared. 010 = Channel 2 conversion result is selected to be compared. 011 = Channel 3 conversion result is selected to be compared. 100 = Channel 4 conversion result is selected to be compared. 101 = Channel 5 conversion result is selected to be compared. 110 = Channel 6 conversion result is selected to be compared. 111 = Channel 7 conversion result is selected to be compared.
        constexpr uint32_t CMPMATCNT = (4 << 8);  ///< Compare Match Count When the specified A/D channel analog conversion result matches the compare condition defined by CMPCOND[2], the internal match counter will increase 1. When the internal counter reaches the value to (CMPMATCNT +1), the CMPF1 bit will be set.
        constexpr uint32_t CMPD = (12 << 16);  ///< Comparison Data The 12 bits data is used to compare with conversion result of specified channel. Software can use it to monitor the external analog input pin voltage transition in scan mode without imposing a load on software. The following description is only supported in Low Density. When DMOF bit is set to 0, ADC comparator compares CMPD with conversion result with unsigned format. CMPD should be filled in unsigned format. When DMOF bit is set to 1, ADC comparator compares CMPD with conversion result with 2's complement format. CMPD should be filled in 2's complement format.
    }

    /// ADSR Register bits
    namespace adsr_bits {
        constexpr uint32_t ADF = (1U << 0);  ///< A/D Conversion End Flag A status flag that indicates the end of A/D conversion. ADF is set to 1 at these two conditions: When A/D conversion ends in single mode When A/D conversion ends on all specified channels in scan mode. This flag can be cleared by writing 1 to itself.
        constexpr uint32_t CMPF0 = (1U << 1);  ///< Compare Flag When the selected channel A/D conversion result meets the setting conditions of ADCMPR0 then this bit will be set to 1. And it can be cleared by writing 1 to itself. 1 = Conversion result in ADDR meets ADCMPR0 setting 0 = Conversion result in ADDR does not meet ADCMPR0 setting
        constexpr uint32_t CMPF1 = (1U << 2);  ///< Compare Flag When the selected channel A/D conversion result meets the setting conditions of ADCMPR1 then this bit will be set to 1. And it can be cleared by writing 1 to itself. 1 = Conversion result in ADDR meets ADCMPR1 setting 0 = Conversion result in ADDR does not meet ADCMPR1 setting
        constexpr uint32_t BUSY = (1U << 3);  ///< BUSY/IDLE 1 = A/D converter is busy at conversion. 0 = A/D converter is in idle state. This bit is mirror of as ADST bit in ADCR. It is read only.
        constexpr uint32_t CHANNEL = (3 << 4);  ///< Current Conversion Channel This filed reflects current conversion channel when BUSY=1. When BUSY=0, it shows the next channel will be converted. It is read only.
        constexpr uint32_t VALID = (8 << 8);  ///< Data Valid flag It is a mirror of VALID bit in ADDRx It is read only.
        constexpr uint32_t OVERRUN = (8 << 16);  ///< Over Run flag It is a mirror of OVERRUN bit in ADDRx It is read only.
    }

    /// ADCALR Register bits
    namespace adcalr_bits {
        constexpr uint32_t CALEN = (1U << 0);  ///< Self Calibration Enable 1 = Enable self calibration 0 = Disable self calibration Software can set this bit to 1 enables A/D converter to do self calibration function. It needs 127 ADC clocks to complete calibration. This bit must be kept at 1 after CALDONE asserted. Clearing this bit will disable self calibration function.
        constexpr uint32_t CALDONE = (1U << 1);  ///< Calibration is Done 1 = A/D converter self calibration is done 0 = A/D converter has not been calibrated or calibration is in progress if CALEN bit is set. When 0 is written to CALEN bit, CALDONE bit is cleared by hardware immediately. It is a read only bit.
    }

    /// ADPDMA Register bits
    namespace adpdma_bits {
        constexpr uint32_t AD_PDMA = (12 << 0);  ///< ADC PDMA current transfer data register When PDMA transferring, read this register can monitor current PDMA transfer data. This is a read only register.
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN_BASE = 0x40180000;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t CAN_CON;  ///< Offset: 0x00 - Control Register
        volatile uint32_t CAN_STATUS;  ///< Offset: 0x04 - Status Register
        volatile uint32_t CAN_ERR;  ///< Offset: 0x08 - Error Counter
        volatile uint32_t CAN_BTIME;  ///< Offset: 0x0C - Bit Timing Register
        volatile uint32_t CAN_IIDR;  ///< Offset: 0x10 - Interrupt Identifier Register
        volatile uint32_t CAN_TEST;  ///< Offset: 0x14 - Test Register
        volatile uint32_t CAN_BRPE;  ///< Offset: 0x18 - BRP Extension Register
        volatile uint32_t CAN_IF1_CREQ;  ///< Offset: 0x20 - IF1 Command Request Register
        volatile uint32_t CAN_IF1_CMASK;  ///< Offset: 0x24 - IF1 Command Mask Registers
        volatile uint32_t CAN_IF1_MASK1;  ///< Offset: 0x28 - IF1 Mask 1 Register
        volatile uint32_t CAN_IF1_MASK2;  ///< Offset: 0x2C - IF1 Mask 2 Register
        volatile uint32_t CAN_IF1_ARB1;  ///< Offset: 0x30 - IF1 Arbitration 1 Register
        volatile uint32_t CAN_IF1_ARB2;  ///< Offset: 0x34 - IF1 Arbitration 2 Register
        volatile uint32_t CAN_IF1_MCON;  ///< Offset: 0x38 - IF1 Message Control Registers
        volatile uint32_t CAN_IF1_DAT_A1;  ///< Offset: 0x3C - IF1 Data A1 Registers
        volatile uint32_t CAN_IF1_DAT_A2;  ///< Offset: 0x40 - IF1 Data A2 Registers
        volatile uint32_t CAN_IF1_DAT_B1;  ///< Offset: 0x44 - IF1 Data B1 Registers
        volatile uint32_t CAN_IF1_DAT_B2;  ///< Offset: 0x48 - IF1 Data B2 Registers
        volatile uint32_t CAN_IF2_CREQ;  ///< Offset: 0x80 - IF2 Command Request Register
        volatile uint32_t CAN_IF2_CMASK;  ///< Offset: 0x84 - IF2 Command Mask Register
        volatile uint32_t CAN_IF2_MASK1;  ///< Offset: 0x88 - IF2 Mask 1 Registers
        volatile uint32_t CAN_IF2_MASK2;  ///< Offset: 0x8C - IF2 Mask 2 Registers
        volatile uint32_t CAN_IF2_ARB1;  ///< Offset: 0x90 - IF2 Arbitration 1 Register
        volatile uint32_t CAN_IF2_ARB2;  ///< Offset: 0x94 - IF2 Arbitration 2 Register
        volatile uint32_t CAN_IF2_MCON;  ///< Offset: 0x98 - IF2 Message Control Register
        volatile uint32_t CAN_IF2_DAT_A1;  ///< Offset: 0x9C - IF2 Data A1 Registers
        volatile uint32_t CAN_IF2_DAT_A2;  ///< Offset: 0xA0 - IF2 Data A2 Registers
        volatile uint32_t CAN_IF2_DAT_B1;  ///< Offset: 0xA4 - IF2 Data B1 Registers
        volatile uint32_t CAN_IF2_DAT_B2;  ///< Offset: 0xA8 - IF2 Data B2 Registers
        volatile uint32_t CAN_TXREQ1;  ///< Offset: 0x100 - Transmission Request Registers 1
        volatile uint32_t CAN_TXREQ2;  ///< Offset: 0x104 - Transmission Request Register 2
        volatile uint32_t CAN_NDAT1;  ///< Offset: 0x120 - New Data Register 1
        volatile uint32_t CAN_NDAT2;  ///< Offset: 0x124 - New Data Register 2
        volatile uint32_t CAN_IPND1;  ///< Offset: 0x140 - Interrupt Pending Register 1
        volatile uint32_t CAN_IPND2;  ///< Offset: 0x144 - Interrupt Pending Register 2
        volatile uint32_t CAN_MVLD1;  ///< Offset: 0x160 - Message Valid Register 1
        volatile uint32_t CAN_MVLD2;  ///< Offset: 0x164 - Message Valid Register 2
        volatile uint32_t CAN_WU_EN;  ///< Offset: 0x168 - Wake Up Function Enable
        volatile uint32_t CAN_WU_STATUS;  ///< Offset: 0x16C - Wake Up Function Status
    };

    /// Peripheral instances
    inline Registers* CAN = reinterpret_cast<Registers*>(CAN_BASE);

    // Bit definitions
    /// CAN_CON Register bits
    namespace can_con_bits {
        constexpr uint32_t Init = (1U << 0);  ///< Init Initialization 1 = Initialization is started. 0 = Normal Operation.
        constexpr uint32_t IE = (1U << 1);  ///< Module Interrupt Enable 1 = Enabled. 0 = Disabled.
        constexpr uint32_t SIE = (1U << 2);  ///< Status Change Interrupt Enable 1 = Enabled - An interrupt will be generated when a message transfer is successfully completed or a CAN bus error is detected. 0 = Disabled - No Status Change Interrupt will be generated.
        constexpr uint32_t EIE = (1U << 3);  ///< Error Interrupt Enable 1 = Enabled - A change in the bits BOff or EWarn in the Status Register will generate an interrupt. 0 = Disabled - No Error Status Interrupt will be generated.
        constexpr uint32_t DAR = (1U << 5);  ///< Disable Automatic Re-transmission 1 = Automatic Retransmission disabled. 0 = Automatic Retransmission of disturbed messages enabled.
        constexpr uint32_t CCE = (1U << 6);  ///< Configuration Change Enable 1 = Write access to the Bit Timing Register (CAN_BTIME & CAN_BRP) allowed. (while Init bit =1). 0 = No write access to the Bit Timing Register.
        constexpr uint32_t Test = (1U << 7);  ///< Test Mode Enable 1 = Test Mode. 0 = Normal Operation.
    }

    /// CAN_STATUS Register bits
    namespace can_status_bits {
        constexpr uint32_t LEC = (3 << 0);  ///< Last Error Code (Type of the last error to occur on the CAN bus) The LEC field holds a code, which indicates the type of the last error to occur on the CAN bus. This field will be cleared to '0' when a message has been transferred (reception or transmission) without error. The unused code '7' may be written by the CPU to check for updates. Table 5-17 describes the error codes.
        constexpr uint32_t TxOK = (1U << 3);  ///< Transmitted a Message Successfully 1 = Since this bit was last reset by the CPU, a message has been successfully (error free and acknowledged by at least one other node) transmitted. 0 = Since this bit was reset by the CPU, no message has been successfully transmitted. This bit is never reset by the CAN Core.
        constexpr uint32_t RxOK = (1U << 4);  ///< Received a Message Successfully 1 = A message has been successfully received since this bit was last reset by the CPU (independent of the result of acceptance filtering). 0 = No message has been successfully received since this bit was last reset by the CPU. This bit is never reset by the CAN Core.
        constexpr uint32_t EPass = (1U << 5);  ///< Error Passive (Read Only) 1 = The CAN Core is in the error passive state as defined in the CAN Specification. 0 = The CAN Core is error active.
        constexpr uint32_t EWarn = (1U << 6);  ///< Error Warning Status (Read Only) 1 = At least one of the error counters in the EML has reached the error warning limit of 96. 0 = Both error counters are below the error warning limit of 96.
        constexpr uint32_t BOff = (1U << 7);  ///< Busoff Status (Read Only) 1 = The CAN module is in busoff state. 0 = The CAN module is not in busoff state.
    }

    /// CAN_ERR Register bits
    namespace can_err_bits {
        constexpr uint32_t TEC = (8 << 0);  ///< Transmit Error Counter Actual state of the Transmit Error Counter. Values between 0 and 255.
        constexpr uint32_t REC = (7 << 8);  ///< Receive Error Counter Actual state of the Receive Error Counter. Values between 0 and 127.
        constexpr uint32_t RP = (1U << 15);  ///< Receive Error Passive 1 = The Receive Error Counter has reached the error passive level as defined in the CAN Specification. 0 = The Receive Error Counter is below the error passive level.
    }

    /// CAN_BTIME Register bits
    namespace can_btime_bits {
        constexpr uint32_t BRP = (6 << 0);  ///< Baud Rate Prescaler 0x01-0x3F: The value by which the oscillator frequency is divided for generating the bit time quanta. The bit time is built up from a multiple of this quanta. Valid values for the Baud Rate Prescaler are [0...63]. The actual interpretation by the hardware of this value is such that one more than the value programmed here is used.
        constexpr uint32_t SJW = (2 << 6);  ///< (Re)Synchronization Jump Width 0x0-0x3: Valid programmed values are [0 ... 3]. The actual interpretation by the hardware of this value is such that one more than the value programmed here is used.
        constexpr uint32_t TSeg1 = (4 << 8);  ///< Time Segment before the sample Point Minus Sync_seg 0x01-0x0F: valid values for TSeg1 are [1 ... 15]. The actual interpretation by the hardware of this value is such that one more than the value programmed is used.
        constexpr uint32_t TSeg2 = (3 << 12);  ///< Time Segment After sample Point 0x0-0x7: Valid values for TSeg2 are [0 ... 7]. The actual interpretation by the hardware of this value is such that one more than the value programmed here is used.
    }

    /// CAN_IIDR Register bits
    namespace can_iidr_bits {
        constexpr uint32_t IntId = (16 << 0);  ///< Interrupt Identifier (Indicates the source of the interrupt. Ref. Table 5-18) If several interrupts are pending, the CAN Interrupt Register will point to the pending interrupt with the highest priority, disregarding their chronological order. An interrupt remains pending until the application software has cleared it. If IntId is different from 0x0000 and IE is set, the IRQ interrupt signal to the EIC is active. The interrupt remains active until IntId is back to value 0x0000 (the cause of the interrupt is reset) or until IE is reset. The Status Interrupt has the highest priority. Among the message interrupts, the Message Object' s interrupt priority decreases with increasing message number. A message interrupt is cleared by clearing the Message Object's IntPnd bit. The Status Interrupt is cleared by reading the Status Register.
    }

    /// CAN_TEST Register bits
    namespace can_test_bits {
        constexpr uint32_t Res = (2 << 0);  ///< Reserved There are reserved bits. These bits are always read as '0' and must always be written with '0'.
        constexpr uint32_t Basic = (1U << 2);  ///< Basic Mode 1= IF1 Registers used as Tx Buffer, IF2 Registers used as Rx Buffer. 0 = Basic Mode disabled.
        constexpr uint32_t Silent = (1U << 3);  ///< Silent Mode 1 = The module is in Silent Mode. 0 = Normal operation.
        constexpr uint32_t LBack = (1U << 4);  ///< Loop Back Mode 1 = Loop Back Mode is enabled. 0 = Loop Back Mode is disabled.
        constexpr uint32_t Tx = (2 << 5);  ///< Tx[1:0]: Control of CAN_TX pin 00 = Reset value, CAN_TX is controlled by the CAN Core 01 = Sample Point can be monitored at CAN_TX pin 10 = CAN_TX pin drives a dominant ('0') value. 11 = CAN_TX pin drives a recessive ('1') value.
        constexpr uint32_t Rx = (1U << 7);  ///< Monitors the actual value of CAN_RX Pin (Read Only) 1 = The CAN bus is recessive (CAN_RX = '1'). 0 = The CAN bus is dominant (CAN_RX = '0').
    }

    /// CAN_BRPE Register bits
    namespace can_brpe_bits {
        constexpr uint32_t BRPE = (4 << 0);  ///< BRPE: Baud Rate Prescaler Extension 0x00-0x0F: By programming BRPE, the Baud Rate Prescaler can be extended to values up to 1023. The actual interpretation by the hardware is that one more than the value programmed by BRPE (MSBs) and BTIME (LSBs) is used.
    }

    /// CAN_IF1_CREQ Register bits
    namespace can_if1_creq_bits {
        constexpr uint32_t MessageNumber = (6 << 0);  ///< Message Number 0x01-0x20: Valid Message Number, the Message Object in the Message RAM is selected for data transfer. 0x00: Not a valid Message Number, interpreted as 0x20. 0x21-0x3F: Not a valid Message Number, interpreted as 0x01-0x1F.
        constexpr uint32_t Busy = (1U << 15);  ///< Busy Flag 1 = Writing to the IF1 Command Request Register is in progress. This bit can only be read by the software. 0 = Read/write action has finished.
    }

    /// CAN_IF1_CMASK Register bits
    namespace can_if1_cmask_bits {
        constexpr uint32_t DAT_B = (1U << 0);  ///< Access Data Bytes [7:4] Direction = Write 1 = Transfer Data Bytes [7:4] to Message Object. 0 = Data Bytes [7:4] unchanged. Direction = Read 1 = Transfer Data Bytes [7:4] to IF1 Message Buffer Register. 0 = Data Bytes [7:4] unchanged.
        constexpr uint32_t DAT_A = (1U << 1);  ///< Access Data Bytes [3:0] Direction = Write 1 = Transfer Data Bytes [3:0] to Message Object 0 = Data Bytes [3:0] unchanged. Direction = Read 1 = Transfer Data Bytes [3:0] to IF1 Message Buffer Register. 0 = Data Bytes [3:0] unchanged.
        constexpr uint32_t TxRqstOrNewDat = (1U << 2);  ///< Access Transmission Request Bit when Direction = Write 1 = Set TxRqst bit. 0 = TxRqst bit unchanged. Note: If a transmission is requested by programming bit TxRqst/NewDat in the IF1 Command Mask Register, bit TxRqst in the IF2 Message Control Register will be ignored. Access New Data Bit when Direction = Read 1 = Clear NewDat bit in the Message Object 0 = NewDat bit remains unchanged. Note : A read access to a Message Object can be combined with the reset of the control bits IntPnd and NewDat. The values of these bits transferred to the IF1 Message Control Register always reflect the status before resetting these bits.
        constexpr uint32_t ClrIntPnd = (1U << 3);  ///< Clear Interrupt Pending Bit Direction = Write When writing to a Message Object, this bit is ignored. Direction = Read 1 = Clear IntPnd bit in the Message Object. 0 = IntPnd bit remains unchanged.
        constexpr uint32_t Control = (1U << 4);  ///< Control Access Control Bits Direction = Write 1 = Transfer Control Bits to Message Object. 0 = Control Bits unchanged Direction = Read 1 = Transfer Control Bits to IF1 Message Buffer Register. 0 = Control Bits unchanged.
        constexpr uint32_t Arb = (1U << 5);  ///< Access Arbitration Bits Direction = Write 1 = Transfer Identifier + Dir + Xtd + MsgVal to Message Object 0 = Arbitration bits unchanged. Direction = Read 1 = Transfer Identifier + Dir + Xtd + MsgVal to IF1 Message Buffer Register. 0 = Arbitration bits unchanged.
        constexpr uint32_t Mask = (1U << 6);  ///< Access Mask Bits Direction = Write 1 = Transfer Identifier Mask + MDir + MXtd to Message Object. 0: = Mask bits unchanged. Direction = Read 1 = Transfer Identifier Mask + MDir + MXtd to IF1 Message Buffer Register. 0 = Mask bits unchanged.
        constexpr uint32_t WROrRD = (1U << 7);  ///< Write / Read 1 = Write: Transfer data from the selected Message Buffer Registers to the Message Object addressed by the Command Request Register. 0 = Read: Transfer data from the Message Object addressed by the Command Request Register into the selected Message Buffer Registers.
    }

    /// CAN_IF1_MASK1 Register bits
    namespace can_if1_mask1_bits {
        constexpr uint32_t Msk_0_15 = (16 << 0);  ///< Identifier Mask 15-0 1 = The corresponding identifier bit is used for acceptance filtering. 0 = The corresponding bit in the identifier of the message object cannot inhibit the match in the acceptance filtering.
    }

    /// CAN_IF1_MASK2 Register bits
    namespace can_if1_mask2_bits {
        constexpr uint32_t Msk_16_28 = (13 << 0);  ///< Identifier Mask 28-16 1 = The corresponding identifier bit is used for acceptance filtering. 0 = The corresponding bit in the identifier of the message object cannot inhibit the match in the acceptance filtering.
        constexpr uint32_t MDir = (1U << 14);  ///< Mask Message Direction 1 = The message direction bit (Dir) is used for acceptance filtering. 0 = The message direction bit (Dir) has no effect on the acceptance filtering.
        constexpr uint32_t MXtd = (1U << 15);  ///< Mask Extended Identifier 1 = The extended identifier bit (IDE) is used for acceptance filtering. 0 = The extended identifier bit (IDE) has no effect on the acceptance filtering. Note: When 11-bit ("standard") Identifiers are used for a Message Object, the identifiers of received Data Frames are written into bits ID28 to ID18. For acceptance filtering, only these bits together with mask bits Msk28 to Msk18 are considered.
    }

    /// CAN_IF1_ARB1 Register bits
    namespace can_if1_arb1_bits {
        constexpr uint32_t ID_0_15 = (16 << 0);  ///< Message Identifier 15-0 ID28 - ID0, 29-bit Identifier ("Extended Frame"). ID28 - ID18, 11-bit Identifier ("Standard Frame")
    }

    /// CAN_IF1_ARB2 Register bits
    namespace can_if1_arb2_bits {
        constexpr uint32_t ID_16_28 = (13 << 0);  ///< Message Identifier 28-16 ID28 - ID0, 29-bit Identifier ("Extended Frame"). ID28 - ID18, 11-bit Identifier ("Standard Frame")
        constexpr uint32_t Dir = (1U << 13);  ///< Message Direction 1 = Direction is transmit On TxRqst, the respective Message Object is transmitted as a Data Frame. On reception of a Remote Frame with matching identifier, the TxRqst bit of this Message Object is set (if RmtEn = one). 0 = Direction is receive On TxRqst, a Remote Frame with the identifier of this Message Object is transmitted. On reception of a Data Frame with matching identifier, that message is stored in this Message Object.
        constexpr uint32_t Xtd = (1U << 14);  ///< Extended Identifier 1 = The 29-bit ("extended") Identifier will be used for this Message Object. 0 = The 11-bit ("standard") Identifier will be used for this Message Object.
        constexpr uint32_t MsgVal = (1U << 15);  ///< Message Valid 1 = The Message Object is configured and should be considered by the Message Handler. 0 = The Message Object is ignored by the Message Handler. Note: The application software must reset the MsgVal bit of all unused Messages Objects during the initialization before it resets bit Init in the CAN Control Register. This bit must also be reset before the identifier Id28-0, the control bits Xtd, Dir, or the Data Length Code DLC3-0 are modified, or if the Messages Object is no longer required.
    }

    /// CAN_IF1_MCON Register bits
    namespace can_if1_mcon_bits {
        constexpr uint32_t DLC = (4 << 0);  ///< Data Length Code 0-8: Data Frame has 0-8 data bytes. 9-15: Data Frame has 8 data bytes Note: The Data Length Code of a Message Object must be defined the same as in all the corresponding objects with the same identifier at other nodes. When the Message Handler stores a data frame, it will write the DLC to the value given by the received message. Data 0: 1st data byte of a CAN Data Frame Data 1: 2nd data byte of a CAN Data Frame Data 2: 3rd data byte of a CAN Data Frame Data 3: 4th data byte of a CAN Data Frame Data 4: 5th data byte of a CAN Data Frame Data 5: 6th data byte of a CAN Data Frame Data 6: 7th data byte of a CAN Data Frame Data 7 : 8th data byte of a CAN Data Frame Note: The Data 0 Byte is the first data byte shifted into the shift register of the CAN Core during a reception while the Data 7 byte is the last. When the Message Handler stores a Data Frame, it will write all the eight data bytes into a Message Object. If the Data Length Code is less than 8, the remaining bytes of the Message Object will be overwritten by unspecified values.
        constexpr uint32_t EoB = (1U << 7);  ///< End of Buffer 1 = Single Message Object or last Message Object of a FIFO Buffer. 0 = Message Object belongs to a FIFO Buffer and is not the last Message Object of that FIFO Buffer. Note: This bit is used to concatenate two or more Message Objects (up to 32) to build a FIFO Buffer. For single Message Objects (not belonging to a FIFO Buffer), this bit must always be set to one.
        constexpr uint32_t TxRqst = (1U << 8);  ///< Transmit Request 1 = The transmission of this Message Object is requested and is not yet done. 0 = This Message Object is not waiting for transmission.
        constexpr uint32_t RmtEn = (1U << 9);  ///< Remote Enable 1 = At the reception of a Remote Frame, TxRqst is set. 0 = At the reception of a Remote Frame, TxRqst is left unchanged.
        constexpr uint32_t RxIE = (1U << 10);  ///< Receive Interrupt Enable 1 = IntPnd will be set after a successful reception of a frame. 0 = IntPnd will be left unchanged after a successful reception of a frame.
        constexpr uint32_t TxIE = (1U << 11);  ///< Transmit Interrupt Enable 1 = IntPnd will be set after a successful transmission of a frame. 0 = IntPnd will be left unchanged after the successful transmission of a frame.
        constexpr uint32_t UMask = (1U << 12);  ///< Use Acceptance Mask 1 = Use Mask (Msk28-0, MXtd, and MDir) for acceptance filtering. 0 = Mask ignored. Note: If the UMask bit is set to one, the Message Object's mask bits have to be programmed during initialization of the Message Object before MsgVal is set to one.
        constexpr uint32_t IntPnd = (1U << 13);  ///< Interrupt Pending 1 = This message object is the source of an interrupt. The Interrupt Identifier in the Interrupt Register will point to this message object if there is no other interrupt source with higher priority. 0 = This message object is not the source of an interrupt.
        constexpr uint32_t MsgLst = (1U << 14);  ///< Message Lost (only valid for Message Objects with direction = receive) 1 = The Message Handler stored a new message into this object when NewDat was still set, the CPU has lost a message. 0 = No message lost since last time this bit was reset by the CPU.
        constexpr uint32_t NewDat = (1U << 15);  ///< New Data 1 = The Message Handler or the application software has written new data into the data portion of this Message Object. 0 = No new data has been written into the data portion of this Message Object by the Message Handler since last time this flag was cleared by the application software.
    }

    /// CAN_IF1_DAT_A1 Register bits
    namespace can_if1_dat_a1_bits {
        constexpr uint32_t Data0 = (8 << 0);  ///< Data byte 0 1st data byte of a CAN Data Frame
        constexpr uint32_t Data1 = (8 << 8);  ///< Data byte 1 2nd data byte of a CAN Data Frame
    }

    /// CAN_IF1_DAT_A2 Register bits
    namespace can_if1_dat_a2_bits {
        constexpr uint32_t Data2 = (8 << 0);  ///< Data byte 2 1st data byte of a CAN Data Frame
        constexpr uint32_t Data3 = (8 << 8);  ///< Data byte 3 2nd data byte of a CAN Data Frame
    }

    /// CAN_IF1_DAT_B1 Register bits
    namespace can_if1_dat_b1_bits {
        constexpr uint32_t Data4 = (8 << 0);  ///< Data byte 4 1st data byte of a CAN Data Frame
        constexpr uint32_t Data5 = (8 << 8);  ///< Data byte 5 2nd data byte of a CAN Data Frame
    }

    /// CAN_IF1_DAT_B2 Register bits
    namespace can_if1_dat_b2_bits {
        constexpr uint32_t Data6 = (8 << 0);  ///< Data byte 6 1st data byte of a CAN Data Frame
        constexpr uint32_t Data7 = (8 << 8);  ///< Data byte 7 2nd data byte of a CAN Data Frame
    }

    /// CAN_IF2_CREQ Register bits
    namespace can_if2_creq_bits {
        constexpr uint32_t MessageNumber = (6 << 0);  ///< Message Number 0x01-0x20: Valid Message Number, the Message Object in the Message RAM is selected for data transfer. 0x00: Not a valid Message Number, interpreted as 0x20. 0x21-0x3F: Not a valid Message Number, interpreted as 0x01-0x1F.
        constexpr uint32_t Busy = (1U << 15);  ///< Busy Flag 1 = Writing to the IF2 Command Request Register is in progress. This bit can only be read by the software. 0 = Read/write action has finished.
    }

    /// CAN_IF2_CMASK Register bits
    namespace can_if2_cmask_bits {
        constexpr uint32_t DAT_B = (1U << 0);  ///< Access Data Bytes [7:4] Direction = Write 1 = Transfer Data Bytes [7:4] to Message Object. 0 = Data Bytes [7:4] unchanged. Direction = Read 1 = Transfer Data Bytes [7:4] to IF2 Message Buffer Register. 0 = Data Bytes [7:4] unchanged.
        constexpr uint32_t DAT_A = (1U << 1);  ///< Access Data Bytes [3:0] Direction = Write 1 = Transfer Data Bytes [3:0] to Message Object 0 = Data Bytes [3:0] unchanged. Direction = Read 1 = Transfer Data Bytes [3:0] to IF2 Message Buffer Register. 0 = Data Bytes [3:0] unchanged.
        constexpr uint32_t TxRqstOrNewDat = (1U << 2);  ///< Access Transmission Request Bit when Direction = Write 1 = Set TxRqst bit. 0 = TxRqst bit unchanged. Note: If a transmission is requested by programming bit TxRqst/NewDat in the IF2 Command Mask Register, bit TxRqst in the IF2 Message Control Register will be ignored. Access New Data Bit when Direction = Read 1 = Clear NewDat bit in the Message Object 0 = NewDat bit remains unchanged. Note : A read access to a Message Object can be combined with the reset of the control bits IntPnd and NewDat. The values of these bits transferred to the IF2 Message Control Register always reflect the status before resetting these bits.
        constexpr uint32_t ClrIntPnd = (1U << 3);  ///< Clear Interrupt Pending Bit Direction = Write When writing to a Message Object, this bit is ignored. Direction = Read 1 = Clear IntPnd bit in the Message Object. 0 = IntPnd bit remains unchanged.
        constexpr uint32_t Control = (1U << 4);  ///< Control Access Control Bits Direction = Write 1 = Transfer Control Bits to Message Object. 0 = Control Bits unchanged Direction = Read 1 = Transfer Control Bits to IF2 Message Buffer Register. 0 = Control Bits unchanged.
        constexpr uint32_t Arb = (1U << 5);  ///< Access Arbitration Bits Direction = Write 1 = Transfer Identifier + Dir + Xtd + MsgVal to Message Object 0 = Arbitration bits unchanged. Direction = Read 1 = Transfer Identifier + Dir + Xtd + MsgVal to IF2 Message Buffer Register. 0 = Arbitration bits unchanged.
        constexpr uint32_t Mask = (1U << 6);  ///< Access Mask Bits Direction = Write 1 = Transfer Identifier Mask + MDir + MXtd to Message Object. 0: = Mask bits unchanged. Direction = Read 1 = Transfer Identifier Mask + MDir + MXtd to IF2 Message Buffer Register. 0 = Mask bits unchanged.
        constexpr uint32_t WROrRD = (1U << 7);  ///< Write / Read 1 = Write: Transfer data from the selected Message Buffer Registers to the Message Object addressed by the Command Request Register. 0 = Read: Transfer data from the Message Object addressed by the Command Request Register into the selected Message Buffer Registers.
    }

    /// CAN_IF2_MASK1 Register bits
    namespace can_if2_mask1_bits {
        constexpr uint32_t Msk_0_15 = (16 << 0);  ///< Identifier Mask 15-0 1 = The corresponding identifier bit is used for acceptance filtering. 0 = The corresponding bit in the identifier of the message object cannot inhibit the match in the acceptance filtering.
    }

    /// CAN_IF2_MASK2 Register bits
    namespace can_if2_mask2_bits {
        constexpr uint32_t Msk_16_28 = (13 << 0);  ///< Identifier Mask 28-16 1 = The corresponding identifier bit is used for acceptance filtering. 0 = The corresponding bit in the identifier of the message object cannot inhibit the match in the acceptance filtering.
        constexpr uint32_t MDir = (1U << 14);  ///< Mask Message Direction 1 = The message direction bit (Dir) is used for acceptance filtering. 0 = The message direction bit (Dir) has no effect on the acceptance filtering.
        constexpr uint32_t MXtd = (1U << 15);  ///< Mask Extended Identifier 1 = The extended identifier bit (IDE) is used for acceptance filtering. 0 = The extended identifier bit (IDE) has no effect on the acceptance filtering. Note: When 11-bit ("standard") Identifiers are used for a Message Object, the identifiers of received Data Frames are written into bits ID28 to ID18. For acceptance filtering, only these bits together with mask bits Msk28 to Msk18 are considered.
    }

    /// CAN_IF2_ARB1 Register bits
    namespace can_if2_arb1_bits {
        constexpr uint32_t ID_0_15 = (16 << 0);  ///< Message Identifier 15-0 ID28 - ID0, 29-bit Identifier ("Extended Frame"). ID28 - ID18, 11-bit Identifier ("Standard Frame")
    }

    /// CAN_IF2_ARB2 Register bits
    namespace can_if2_arb2_bits {
        constexpr uint32_t ID_16_28 = (13 << 0);  ///< Message Identifier 28-16 ID28 - ID0, 29-bit Identifier ("Extended Frame"). ID28 - ID18, 11-bit Identifier ("Standard Frame")
        constexpr uint32_t Dir = (1U << 13);  ///< Message Direction 1 = Direction is transmit On TxRqst, the respective Message Object is transmitted as a Data Frame. On reception of a Remote Frame with matching identifier, the TxRqst bit of this Message Object is set (if RmtEn = one). 0 = Direction is receive On TxRqst, a Remote Frame with the identifier of this Message Object is transmitted. On reception of a Data Frame with matching identifier, that message is stored in this Message Object.
        constexpr uint32_t Xtd = (1U << 14);  ///< Extended Identifier 1 = The 29-bit ("extended") Identifier will be used for this Message Object. 0 = The 11-bit ("standard") Identifier will be used for this Message Object.
        constexpr uint32_t MsgVal = (1U << 15);  ///< Message Valid 1 = The Message Object is configured and should be considered by the Message Handler. 0 = The Message Object is ignored by the Message Handler. Note: The application software must reset the MsgVal bit of all unused Messages Objects during the initialization before it resets bit Init in the CAN Control Register. This bit must also be reset before the identifier Id28-0, the control bits Xtd, Dir, or the Data Length Code DLC3-0 are modified, or if the Messages Object is no longer required.
    }

    /// CAN_IF2_MCON Register bits
    namespace can_if2_mcon_bits {
        constexpr uint32_t DLC = (4 << 0);  ///< Data Length Code 0-8: Data Frame has 0-8 data bytes. 9-15: Data Frame has 8 data bytes Note: The Data Length Code of a Message Object must be defined the same as in all the corresponding objects with the same identifier at other nodes. When the Message Handler stores a data frame, it will write the DLC to the value given by the received message. Data 0: 1st data byte of a CAN Data Frame Data 1: 2nd data byte of a CAN Data Frame Data 2: 3rd data byte of a CAN Data Frame Data 3: 4th data byte of a CAN Data Frame Data 4: 5th data byte of a CAN Data Frame Data 5: 6th data byte of a CAN Data Frame Data 6: 7th data byte of a CAN Data Frame Data 7 : 8th data byte of a CAN Data Frame Note: The Data 0 Byte is the first data byte shifted into the shift register of the CAN Core during a reception while the Data 7 byte is the last. When the Message Handler stores a Data Frame, it will write all the eight data bytes into a Message Object. If the Data Length Code is less than 8, the remaining bytes of the Message Object will be overwritten by unspecified values.
        constexpr uint32_t EoB = (1U << 7);  ///< End of Buffer 1 = Single Message Object or last Message Object of a FIFO Buffer. 0 = Message Object belongs to a FIFO Buffer and is not the last Message Object of that FIFO Buffer. Note: This bit is used to concatenate two or more Message Objects (up to 32) to build a FIFO Buffer. For single Message Objects (not belonging to a FIFO Buffer), this bit must always be set to one.
        constexpr uint32_t TxRqst = (1U << 8);  ///< Transmit Request 1 = The transmission of this Message Object is requested and is not yet done. 0 = This Message Object is not waiting for transmission.
        constexpr uint32_t RmtEn = (1U << 9);  ///< Remote Enable 1 = At the reception of a Remote Frame, TxRqst is set. 0 = At the reception of a Remote Frame, TxRqst is left unchanged.
        constexpr uint32_t RxIE = (1U << 10);  ///< Receive Interrupt Enable 1 = IntPnd will be set after a successful reception of a frame. 0 = IntPnd will be left unchanged after a successful reception of a frame.
        constexpr uint32_t TxIE = (1U << 11);  ///< Transmit Interrupt Enable 1 = IntPnd will be set after a successful transmission of a frame. 0 = IntPnd will be left unchanged after the successful transmission of a frame.
        constexpr uint32_t UMask = (1U << 12);  ///< Use Acceptance Mask 1 = Use Mask (Msk28-0, MXtd, and MDir) for acceptance filtering. 0 = Mask ignored. Note: If the UMask bit is set to one, the Message Object's mask bits have to be programmed during initialization of the Message Object before MsgVal is set to one.
        constexpr uint32_t IntPnd = (1U << 13);  ///< Interrupt Pending 1 = This message object is the source of an interrupt. The Interrupt Identifier in the Interrupt Register will point to this message object if there is no other interrupt source with higher priority. 0 = This message object is not the source of an interrupt.
        constexpr uint32_t MsgLst = (1U << 14);  ///< Message Lost (only valid for Message Objects with direction = receive) 1 = The Message Handler stored a new message into this object when NewDat was still set, the CPU has lost a message. 0 = No message lost since last time this bit was reset by the CPU.
        constexpr uint32_t NewDat = (1U << 15);  ///< New Data 1 = The Message Handler or the application software has written new data into the data portion of this Message Object. 0 = No new data has been written into the data portion of this Message Object by the Message Handler since last time this flag was cleared by the application software.
    }

    /// CAN_IF2_DAT_A1 Register bits
    namespace can_if2_dat_a1_bits {
        constexpr uint32_t Data0 = (8 << 0);  ///< Data byte 0 1st data byte of a CAN Data Frame
        constexpr uint32_t Data1 = (8 << 8);  ///< Data byte 1 2nd data byte of a CAN Data Frame
    }

    /// CAN_IF2_DAT_A2 Register bits
    namespace can_if2_dat_a2_bits {
        constexpr uint32_t Data2 = (8 << 0);  ///< Data byte 2 1st data byte of a CAN Data Frame
        constexpr uint32_t Data3 = (8 << 8);  ///< Data byte 3 2nd data byte of a CAN Data Frame
    }

    /// CAN_IF2_DAT_B1 Register bits
    namespace can_if2_dat_b1_bits {
        constexpr uint32_t Data4 = (8 << 0);  ///< Data byte 4 1st data byte of a CAN Data Frame
        constexpr uint32_t Data5 = (8 << 8);  ///< Data byte 5 2nd data byte of a CAN Data Frame
    }

    /// CAN_IF2_DAT_B2 Register bits
    namespace can_if2_dat_b2_bits {
        constexpr uint32_t Data6 = (8 << 0);  ///< Data byte 6 1st data byte of a CAN Data Frame
        constexpr uint32_t Data7 = (8 << 8);  ///< Data byte 7 2nd data byte of a CAN Data Frame
    }

    /// CAN_TXREQ1 Register bits
    namespace can_txreq1_bits {
        constexpr uint32_t TxRqst1_16 = (16 << 0);  ///< Transmission Request Bits 1-16 (of all Message Objects) 1 = The transmission of this Message Object is requested and is not yet done. 0 = This Message Object is not waiting for transmission. These bits are read only.
    }

    /// CAN_TXREQ2 Register bits
    namespace can_txreq2_bits {
        constexpr uint32_t TxRqst17_32 = (16 << 0);  ///< Transmission Request Bits 17-32 (of all Message Objects) 1 = The transmission of this Message Object is requested and is not yet done. 0 = This Message Object is not waiting for transmission. These bits are read only.
    }

    /// CAN_NDAT1 Register bits
    namespace can_ndat1_bits {
        constexpr uint32_t NewData1_16 = (16 << 0);  ///< New Data Bits 1-16 (of all Message Objects) 1 = The Message Handler or the application software has written new data into the data portion of this Message Object. 0 = No new data has been written into the data portion of this Message Object by the Message Handler since the last time this flag was cleared by the application software.
    }

    /// CAN_NDAT2 Register bits
    namespace can_ndat2_bits {
        constexpr uint32_t NewData17_32 = (16 << 0);  ///< New Data Bits 17-32 (of all Message Objects) 1 = The Message Handler or the application software has written new data into the data portion of this Message Object. 0 = No new data has been written into the data portion of this Message Object by the Message Handler since the last time this flag was cleared by the application software.
    }

    /// CAN_IPND1 Register bits
    namespace can_ipnd1_bits {
        constexpr uint32_t IntPnd1_16 = (16 << 0);  ///< Interrupt Pending Bits 1-16 (of all Message Objects) 1 = This message object is the source of an interrupt. 0 = This message object is not the source of an interrupt.
    }

    /// CAN_IPND2 Register bits
    namespace can_ipnd2_bits {
        constexpr uint32_t IntPnd17_32 = (16 << 0);  ///< Interrupt Pending Bits 17-32 (of all Message Objects) 1 = This message object is the source of an interrupt. 0 = This message object is not the source of an interrupt.
    }

    /// CAN_MVLD1 Register bits
    namespace can_mvld1_bits {
        constexpr uint32_t MsgVal1_16 = (16 << 0);  ///< Message Valid Bits 1-16 (of all Message Objects) (Read Only) 1 = This Message Object is configured and should be considered by the Message Handler. 0 = This Message Object is ignored by the Message Handler. Ex. CAN_MVLD1[0] means Message object No.1 is valid or not. If CAN_MVLD1[0] is set, message object No.1 is configured.
    }

    /// CAN_MVLD2 Register bits
    namespace can_mvld2_bits {
        constexpr uint32_t MsgVal17_32 = (16 << 0);  ///< Message Valid Bits 17-32 (of all Message Objects) (Read Only) 1 = This Message Object is configured and should be considered by the Message Handler. 0 = This Message Object is ignored by the Message Handler. Ex. CAN_MVLD1[0] means Message object No.1 is valid or not. If CAN_MVLD1[0] is set, message object No.1 is configured.
    }

    /// CAN_WU_EN Register bits
    namespace can_wu_en_bits {
        constexpr uint32_t WAKUP_EN = (1U << 0);  ///< Wake Up Enable 1 = The wake-up function is enable. 0 = The wake-up function is disable. Note: User can wake-up system when there is a falling edge in the CAN_Rx pin..
    }

    /// CAN_WU_STATUS Register bits
    namespace can_wu_status_bits {
        constexpr uint32_t WAKUP_STS = (1U << 0);  ///< Wake Up Status 1 = Wake-up event is occurred. 0 = No wake-up event is occurred. Note: The bit can be written '0' to clear.
    }

}

// ============================================================================
// CLK Peripheral
// ============================================================================

namespace clk {
    /// Base addresses
    constexpr uint32_t CLK_BASE = 0x50000200;

    /// CLK Register structure
    struct Registers {
        volatile uint32_t PWRCON;  ///< Offset: 0x00 - System Power Down Control Register
        volatile uint32_t AHBCLK;  ///< Offset: 0x04 - AHB Devices Clock Enable Control Register
        volatile uint32_t APBCLK;  ///< Offset: 0x08 - APB Devices Clock Enable Control Register
        volatile uint32_t CLKSTATUS;  ///< Offset: 0x0C - Clock status monitor Register
        volatile uint32_t CLKSEL0;  ///< Offset: 0x10 - Clock Source Select Control Register 0
        volatile uint32_t CLKSEL1;  ///< Offset: 0x14 - Clock Source Select Control Register 1
        volatile uint32_t CLKDIV;  ///< Offset: 0x18 - Clock Divider Number Register
        volatile uint32_t CLKSEL2;  ///< Offset: 0x1C - Clock Source Select Control Register 2
        volatile uint32_t PLLCON;  ///< Offset: 0x20 - PLL Control Register
        volatile uint32_t FRQDIV;  ///< Offset: 0x24 - Frequency Divider Control Register
    };

    /// Peripheral instances
    inline Registers* CLK = reinterpret_cast<Registers*>(CLK_BASE);

    // Bit definitions
    /// PWRCON Register bits
    namespace pwrcon_bits {
        constexpr uint32_t XTL12M_EN = (1U << 0);  ///< External 4~24 MHz Crystal Enable (write-protection bit) The bit default value is set by flash controller user configuration register config0 [26:24]. When the default clock source is from external 4~24 MHz crystal, this bit is set to 1 automatically 1 = Enable external 4~24 MHz crystal 0 = Disable external 4~24 MHz crystal
        constexpr uint32_t XTL32K_EN = (1U << 1);  ///< External 32.768 KHz Crystal Enable (write-protection bit) 1 = Enable external 32.768 kHz Crystal (Normal operation) 0 = Disable external 32.768 kHz Crystal
        constexpr uint32_t OSC22M_EN = (1U << 2);  ///< Internal 22.1184MHz Oscillator Enable (write-protection bit) 1 = Enable 22.1184MHz Oscillation 0 = Disable 22.1184MHz Oscillation
        constexpr uint32_t OSC10K_EN = (1U << 3);  ///< Internal 10KHz Oscillator Enable (write-protection bit) 1 = Enable 10KHz Oscillation 0 = Disable 10KHz Oscillation
        constexpr uint32_t PD_WU_DLY = (1U << 4);  ///< Enable the wake up delay counter (write-protection bit) When the chip wakes up from power down mode, the clock control will delay certain clock cycles to wait system clock stable. The delayed clock cycle is 4096 clock cycles when chip work at external 4~24 MHz crystal, and 256 clock cycles when chip work at internal 22.1184 MHz oscillator. 1 = Enable clock cycles delay 0 = Disable clock cycles delay
        constexpr uint32_t PD_WU_INT_EN = (1U << 5);  ///< Power down mode wake up Interrupt enable (write-protection bit) 0 = Disable 1 = Enable. The interrupt will occur when both PD_WU_STS and PD_WU_INT_EN are high.
        constexpr uint32_t PD_WU_STS = (1U << 6);  ///< Power down mode wake up interrupt status Set by "power down wake up", it indicates that resume from power down mode The flag is set if the GPIO, USB, UART, WDT, CAN, ACMP, BOD or RTC wakeup occurred Write 1 to clear the bit Note: This bit is working only if PD_WU_INT_EN (PWRCON[5]) set to 1.
        constexpr uint32_t PWR_DOWN_EN = (1U << 7);  ///< System power down enable bit (write-protection bit) When CPU sets this bit "1" the chip power down mode is enabled, and chip power-down behavior will depends on the PD_WAIT_CPU bit. (a) If the PD_WAIT_CPU is "0", then the chip enters power down mode immediately after the PWR_DOWN_EN bit set. (b) if the PD_WAIT_CPU is "1", then the chip keeps active till the CPU sleep mode is also active and then the chip enters power down mode. When chip wakes up from power down mode, this bit is auto cleared. Users need to set this bit again for next power down. When in power down mode, external 4~24 MHz crystal and the internal 22.1184 MHz oscillator will be disabled in this mode, but the external 32 kHz crystal and internal 10 kHz oscillator are not controlled by power down mode. When in power down mode, the PLL and system clock are disabled, and ignored the clock source selection. The clocks of peripheral are not controlled by power down mode, if the peripheral clock source is from 32 kHz crystal or the 10 kHz oscillator. 1 = Chip enter the power down mode instant or wait CPU sleep command WFI. 0 = Chip operate in normal mode or CPU in idle mode (sleep mode) because of WFI command.
        constexpr uint32_t PD_WAIT_CPU = (1U << 8);  ///< This bit control the power down entry condition (write-protection bit) 1 = Chip enter power down mode when the both PWR_DOWN_EN bit is set to 1 and CPU run WFI instruction. 0 = Chip entry power down mode when the PWR_DOWN_EN bit is set to 1.
    }

    /// AHBCLK Register bits
    namespace ahbclk_bits {
        constexpr uint32_t PDMA_EN = (1U << 1);  ///< PDMA Controller Clock Enable Control. 1 = Enable the PDMA engine clock. 0 = Disable the PDMA engine clock.
        constexpr uint32_t ISP_EN = (1U << 2);  ///< Flash ISP Controller Clock Enable Control. 1 = Enable the Flash ISP engine clock. 0 = Disable the Flash ISP engine clock.
        constexpr uint32_t EBI_EN = (1U << 3);  ///< EBI Controller Clock Enable Control (Low Density Only) 1 = Enable the EBI engine clock. 0 = Disable the EBI engine clock.
    }

    /// APBCLK Register bits
    namespace apbclk_bits {
        constexpr uint32_t WDT_EN = (1U << 0);  ///< Watch Dog Timer Clock Enable (write-protection bit) This bit is the protected bit. It means programming this needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100. The bit default value is set by flash controller. User configuration register config0 bit[31] 1 = Enable Watchdog Timer Clock 0 = Disable Watchdog Timer Clock
        constexpr uint32_t RTC_EN = (1U << 1);  ///< Real-Time-Clock APB interface Clock Enable. This bit is used to control the RTC APB clock only, The RTC engine clock source is from the 32.768KHz crystal. 1 = Enable RTC Clock 0 = Disable RTC Clock
        constexpr uint32_t TMR0_EN = (1U << 2);  ///< Timer0 Clock Enable 1 = Enable Timer0 Clock 0 = Disable Timer0 Clock
        constexpr uint32_t TMR1_EN = (1U << 3);  ///< Timer1 Clock Enable 1 = Enable Timer1 Clock 0 = Disable Timer1 Clock
        constexpr uint32_t TMR2_EN = (1U << 4);  ///< Timer2 Clock Enable 1 = Enable Timer2 Clock 0 = Disable Timer2 Clock
        constexpr uint32_t TMR3_EN = (1U << 5);  ///< Timer3 Clock Enable 1 = Enable Timer3 Clock 0 = Disable Timer3 Clock
        constexpr uint32_t FDIV_EN = (1U << 6);  ///< Frequency Divider Output Clock Enable 1 = Enable FDIV Clock 0 = Disable FDIV Clock
        constexpr uint32_t I2C0_EN = (1U << 8);  ///< I2C0 Clock Enable . 1 = Enable I2C0 Clock 0 = Disable I2C0 Clock
        constexpr uint32_t I2C1_EN = (1U << 9);  ///< I2C1 Clock Enable. 1 = Enable I2C1 Clock 0 = Disable I2C1 Clock
        constexpr uint32_t SPI0_EN = (1U << 12);  ///< SPI0 Clock Enable. 1 = Enable SPI0 Clock 0 = Disable SPI0 Clock
        constexpr uint32_t SPI1_EN = (1U << 13);  ///< SPI1 Clock Enable. 1 = Enable SPI1 Clock 0 = Disable SPI1 Clock
        constexpr uint32_t SPI2_EN = (1U << 14);  ///< SPI2 Clock Enable. (Medium Density Only) 1 = Enable SPI2 Clock 0 = Disable SPI2 Clock
        constexpr uint32_t SPI3_EN = (1U << 15);  ///< SPI3 Clock Enable. (Medium Density Only) 1 = Enable SPI3 Clock 0 = Disable SPI3 Clock
        constexpr uint32_t UART0_EN = (1U << 16);  ///< UART0 Clock Enable. 1 = Enable UART0 clock 0 = Disable UART0 clock
        constexpr uint32_t UART1_EN = (1U << 17);  ///< UART1 Clock Enable. 1 = Enable UART1 clock 0 = Disable UART1 clock
        constexpr uint32_t UART2_EN = (1U << 18);  ///< UART2 Clock Enable.(Medium Density Only) 1 = Enable UART2 clock 0 = Disable UART2 clock
        constexpr uint32_t PWM01_EN = (1U << 20);  ///< PWM_01 Clock Enable. 1 = Enable PWM01 clock 0 = Disable PWM01 clock
        constexpr uint32_t PWM23_EN = (1U << 21);  ///< PWM_23 Clock Enable. 1 = Enable PWM23 clock 0 = Disable PWM23 clock
        constexpr uint32_t PWM45_EN = (1U << 22);  ///< PWM_45 Clock Enable.(Medium Density Only) 1 = Enable PWM45 clock 0 = Disable PWM45 clock
        constexpr uint32_t PWM67_EN = (1U << 23);  ///< PWM_67 Clock Enable.(Medium Density Only) 1 = Enable PWM67 clock 0 = Disable PWM67 clock
        constexpr uint32_t CAN0_EN = (1U << 24);  ///< CAN Bus Controller-0 Clock Enable 1 = Enable CAN0 clock 0 = Disable CAN0 clock
        constexpr uint32_t USBD_EN = (1U << 27);  ///< USB 2.0 FS Device Controller Clock Enable 1 = Enable USB clock 0 = Disable USB clock
        constexpr uint32_t ADC_EN = (1U << 28);  ///< Analog-Digital-Converter (ADC) Clock Enable. 1 = Enable ADC clock 0 = Disable ADC clock
        constexpr uint32_t I2S_EN = (1U << 29);  ///< I2S Clock Enable 1 = Enable I2S Clock 0 = Disable I2S Clock
        constexpr uint32_t ACMP_EN = (1U << 30);  ///< Analog Comparator Clock Enable. 1 = Enable the Analog Comparator Clock 0 = Disable the Analog Comparator Clock
        constexpr uint32_t PS2_EN = (1U << 31);  ///< PS2 Clock Enable. 1 = Enable PS2 clock 0 = Disable PS2 clock
    }

    /// CLKSTATUS Register bits
    namespace clkstatus_bits {
        constexpr uint32_t XTL12M_STB = (1U << 0);  ///< XTL12M clock source stable flag 1 = XTL12M clock is stable 0 = XTL12M clock is not stable or disabled This is read only bit
        constexpr uint32_t XTL32K_STB = (1U << 1);  ///< XTL32K clock source stable flag 1 = XTL32K clock is stable 0 = XTL32K clock is not stable or disabled This is read only bit
        constexpr uint32_t PLL_STB = (1U << 2);  ///< PLL clock source stable flag 1 = PLL clock is stable 0 = PLL clock is not stable or disabled This is read only bit
        constexpr uint32_t OSC10K_STB = (1U << 3);  ///< OSC10K clock source stable flag 1 = OSC10K clock is stable 0 = OSC10K clock is not stable or disabled This is read only bit
        constexpr uint32_t OSC22M_STB = (1U << 4);  ///< OSC22M clock source stable flag 1 = OSC22M clock is stable 0 = OSC22M clock is not stable or disabled This is read only bit
        constexpr uint32_t CLK_SW_FAIL = (1U << 7);  ///< Clock switching fail flag 1 = Clock switching failure 0 = Clock switching success This bit is updated when software switches system clock source. If switch target clock is stable, this bit will be set to 1'b0. If switch target clock is not stable, this bit will be set to 1'b1. Write 1 to clear the bit to zero
    }

    /// CLKSEL0 Register bits
    namespace clksel0_bits {
        constexpr uint32_t HCLK_S = (3 << 0);  ///< HCLK clock source select (write-protection bits) Note: 1. Before clock switching, the related clock sources (both pre-select and new-select) must be turn on 2. The 3-bit default value is reloaded from the value of CFOSC (Config0[26:24]) in user configuration register of Flash controller by any reset. Therefore the default value is either 000b or 111b. 3. These bits are protected bit, It means programming this bit needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100. 000 = Clock source from external 4~24 MHz crystal clock 001 = Clock source from external 32.768 kHz crystal clock 010 = Clock source from PLL clock 011 = Clock source from internal 10 kHz oscillator clock 111 = Clock source from internal 22.1184 MHz oscillator clock Others = reserved
        constexpr uint32_t STCLK_S = (3 << 3);  ///< Cortex_M0 SysTick clock source select (write-protection bits) If SYST_CSR[2]=0, SysTick uses listed clock source below These bits are protected bit. It means programming this bit needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100. 000 = clock source from 4~24 MHz crystal clock 001 = Clock source from external 32.768 kHz crystal clock 010 = clock source from 12MHz crystal clock / 2 011 = clock source from HCLK / 2 1xx = Clock source from internal 22.1184 MHz oscillator clock / 2
    }

    /// CLKSEL1 Register bits
    namespace clksel1_bits {
        constexpr uint32_t WDT_S = (2 << 0);  ///< Watchdog Timer clock source select (write-protection bits) These bits are protected bit, program this need to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100. 00 = Clock source from external 4~24 MHz crystal clock. 01 = Reserved 10 = Clock source from HCLK/2048 clock. 11 = Clock source from internal 10 kHz oscillator clock.
        constexpr uint32_t ADC_S = (2 << 2);  ///< ADC clock source select 00 = Clock source from external 4~24 MHz crystal clock. 01 = clock source from PLL clock 1x = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t TMR0_S = (3 << 8);  ///< TIMER0 clock source select. 000 = Clock source from external 4~24 MHz crystal clock. 001 = Clock source from external 32.768 kHz crystal clock. 010 = Clock source from HCLK. 011 = Clock source from external trigger. 1xx = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t TMR1_S = (3 << 12);  ///< TIMER1 clock source select. 000 = Clock source from external 4~24 MHz crystal clock. 001 = Clock source from external 32.768 kHz crystal clock. 010 = Clock source from HCLK. 011 = Clock source from external trigger. 1xx = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t TMR2_S = (3 << 16);  ///< TIMER2 clock source select. 000 = Clock source from external 4~24 MHz crystal clock. 001 = Clock source from external 32.768 kHz crystal clock. 010 = Clock source from HCLK. 011 = Clock source from external trigger. 1xx = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t TMR3_S = (3 << 20);  ///< TIMER3 clock source select. 000 = Clock source from external 4~24 MHz crystal clock. 001 = Clock source from external 32.768 kHz crystal clock. 010 = Clock source from HCLK. 011 = Clock source from external trigger. 1xx = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t UART_S = (2 << 24);  ///< UART clock source select. 00 = Clock source from external 4~24 MHz crystal clock. 01 = Clock source from PLL clock. 1x = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t CAN_S = (2 << 26);  ///< CAN clock source select 00 = Clock source from external 4~24 MHz crystal clock. 01 = Clock source from PLL clock. 1x = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t PWM01_S = (2 << 28);  ///< PWM0 and PWM1 clock source select PWM0 and PWM1 uses the same Engine clock source, both of them use the same prescaler. 00 = Clock source from external 4~24 MHz crystal clock. 01 = Clock source from external 32.768 kHz crystal clock. 10 = Clock source from HCLK. 11 = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t PWM23_S = (2 << 30);  ///< PWM2 and PWM3 clock source select PWM2 and PWM3 uses the same Engine clock source, both of them use the same prescaler. 00 = Clock source from external 4~24 MHz crystal clock. 01 = Clock source from external 32.768 kHz crystal clock. 10 = Clock source from HCLK. 11 = Clock source from internal 22.1184 MHz oscillator clock.
    }

    /// CLKDIV Register bits
    namespace clkdiv_bits {
        constexpr uint32_t HCLK_N = (4 << 0);  ///< HCLK clock divide number from HCLK clock source The HCLK clock frequency = (HCLK clock source frequency) / (HCLK_N + 1)
        constexpr uint32_t USB_N = (4 << 4);  ///< USB clock divide number from PLL clock The USB clock frequency = (PLL frequency ) / (USB_N + 1)
        constexpr uint32_t UART_N = (4 << 8);  ///< UART clock divide number from UART clock source The UART clock frequency = (UART clock source frequency ) / (UART_N + 1)
        constexpr uint32_t CAN_N_L = (4 << 12);  ///< CAN clock divide number from CAN clock source The CAN clock frequency = (CAN clock source frequency ) / (CAN_N + 1) Which CAN_N = 16 * CAN_N_H + CAN_N_L
        constexpr uint32_t ADC_N = (8 << 16);  ///< ADC clock divide number from ADC clock source The ADC clock frequency = (ADC engine clock source frequency ) / (ADC_N + 1)
        constexpr uint32_t CAN_N_H = (6 << 24);  ///< CAN clock divide number from CAN clock source (Low Density Only) The CAN clock frequency = (CAN clock source frequency ) / (CAN_N + 1) Which CAN_N = 16 * CAN_N_H + CAN_N_L
    }

    /// CLKSEL2 Register bits
    namespace clksel2_bits {
        constexpr uint32_t I2S_S = (2 << 0);  ///< I2S clock source select. 00 = Clock source from external 4~24 MHz crystal clock. 01 = Clock source from PLL clock. 10 = Clock source from HCLK. 11 = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t FRQDIV_S = (2 << 2);  ///< Clock Divider Clock Source Select. 00 = Clock source from external 4~24 MHz crystal clock. 01 = Clock source from external 32.768 kHz crystal clock. 10 = Clock source from HCLK. 11 = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t PWM45_S = (2 << 4);  ///< PWM4 and PWM5 Clock Source Select.(Medium Density Only) PWM4 and PWM5 used the same Engine clock source, both of them use the same prescaler. 00 = Clock source from external 4~24 MHz crystal clock. 01 = Clock source from external 32.768 kHz crystal clock. 10 = Clock source from HCLK. 11 = Clock source from internal 22.1184 MHz oscillator clock.
        constexpr uint32_t PWM67_S = (2 << 6);  ///< PWM6 and PWM7 Clock Source Select.(Medium Density Only) PWM6 and PWM7 used the same Engine clock source, both of them use the same prescaler. 00 = Clock source from external 4~24 MHz crystal clock. 01 = Clock source from external 32.768 kHz crystal clock. 10 = Clock source from HCLK. 11 = Clock source from internal 22.1184 MHz oscillator clock.
    }

    /// PLLCON Register bits
    namespace pllcon_bits {
        constexpr uint32_t FB_DV = (9 << 0);  ///< PLL Feedback Divider Control Pins Refer to the formulas below the table. FOUT = FIN x NF/NR x 1/NO Constrain: 1. 3.2MHz < FIN < 150MHz 2. 800KHz < FIN/(2xNR) < 8MHz 3. 100MHz < FCO = FINxNF/NR < 200MHz , 120M < FCO is preferred. Symbol	Description	 FOUT	Output Clock Frequency	 FIN	Input (Reference) Clock Frequency	 NR	Input Divider (IN_DV + 2)	 NF	Feedback Divider (FB_DV + 2)	 NO	OUT_DV = "00":NO = 1 OUT_DV = "01":NO = 2 OUT_DV = "10":NO = 2 OUT_DV = "11":NO = 4
        constexpr uint32_t IN_DV = (5 << 9);  ///< PLL Input Divider Control Pins Refer to the formulas below the table. (Table is the same as FB_DV).
        constexpr uint32_t OUT_DV = (2 << 14);  ///< PLL Output Divider Control Pins Refer to the formulas below the table. (Table is the same as FB_DV).
        constexpr uint32_t PD = (1U << 16);  ///< Power Down Mode. If set the IDLE bit "1" in PWRCON register, the PLL will enter power down mode too 0 = PLL is in normal mode 1 = PLL is in power-down mode(default)
        constexpr uint32_t BP = (1U << 17);  ///< PLL Bypass Control 0 = PLL is in normal mode (default) 1 = PLL clock output is same as clock input (XTALin)
        constexpr uint32_t OE = (1U << 18);  ///< PLL OE (FOUT enable) pin Control 0 = PLL FOUT enable 1 = PLL FOUT is fixed low
        constexpr uint32_t PLL_SRC = (1U << 19);  ///< PLL Source Clock Select 1 = PLL source clock from 22.1184 MHz oscillator 0 = PLL source clock from 4~24 MHz crystal
    }

    /// FRQDIV Register bits
    namespace frqdiv_bits {
        constexpr uint32_t FSEL = (4 << 0);  ///< Divider Output Frequency Selection Bits The formula of output frequency is Fout = Fin/(2^(N+1)), Fin is the input clock frequency. Fout is the frequency of divider output clock. N is the 4-bit value of FSEL[3:0].
        constexpr uint32_t DIVIDER_EN = (1U << 4);  ///< Frequency Divider Enable Bit 0 = Disable Frequency Divider 1 = Enable Frequency Divider
    }

}

// ============================================================================
// CMP Peripheral
// ============================================================================

namespace cmp {
    /// Base addresses
    constexpr uint32_t CMP_BASE = 0x400D0000;

    /// CMP Register structure
    struct Registers {
        volatile uint32_t CMP0CR;  ///< Offset: 0x00 - Comparator0 Control Register
        volatile uint32_t CMP1CR;  ///< Offset: 0x04 - Comparator1 Control Register
        volatile uint32_t CMPSR;  ///< Offset: 0x08 - Comparator Channel Selection Enable Register
    };

    /// Peripheral instances
    inline Registers* CMP = reinterpret_cast<Registers*>(CMP_BASE);

    // Bit definitions
    /// CMP0CR Register bits
    namespace cmp0cr_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Comparator0 Enable 1 = Enable 0 = Disable Comparator0 output needs wait 10 us stable time after CMP0EN is set
        constexpr uint32_t IE = (1U << 1);  ///< Comparator0 Interrupt Enable 1 = Enable comparator0 interrupt function 0 = Disable comparator0 interrupt function Interrupt is generated if CMP0IE bit is set to 1 after comparator0 conversion finished.
        constexpr uint32_t HYSEN = (1U << 2);  ///< CMP0 Hysterisis Enable 1 = Enable comparator0 Hysterisis function; the typical range is 20mV. 0 = Disable comparator0 Hysterisis function (Default).
        constexpr uint32_t CN0 = (1U << 4);  ///< Comparator0 negative input select 1 = The internal comparator reference voltage (Vref=1.2V) is selected as the negative comparator input 0 = The comparator0 reference pin CPN0 is selected as the negative comparator input
    }

    /// CMP1CR Register bits
    namespace cmp1cr_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Comparator1 Enable 1 = Enable 0 = Disable Comparator1 output needs wait 10 us stable time after CMP1EN is set
        constexpr uint32_t IE = (1U << 1);  ///< Comparator1 Interrupt Enable 1 = Enable Comparator1 interrupt function 0 = Disable Comparator1 interrupt function Interrupt is generated if CMP1IE bit is set to 1 after comparator1 conversion finished.
        constexpr uint32_t HYSEN = (1U << 2);  ///< Comparator1 Hysterisis Enable 1 = Enable comparator1 Hysterisis function; the typical range is 20mV. 0 = Disable comparator1 Hysterisis function (Default).
        constexpr uint32_t CN1 = (1U << 4);  ///< Comparator1 negative input select 1 = The internal comparator reference voltage (Vref=1.2V) is selected as the negative comparator input 0 = The comparator1 reference pin CPN1 is selected as the negative comparator input
    }

    /// CMPSR Register bits
    namespace cmpsr_bits {
        constexpr uint32_t CMPF0 = (1U << 0);  ///< Comparator0 Flag This bit is set by hardware whenever the comparator0 output changes state. This will cause an interrupt if CMP0IE set. Write 1 to clear this bit to zero.
        constexpr uint32_t CMPF1 = (1U << 1);  ///< Comparator1 Flag This bit is set by hardware whenever the comparator1 output changes state. This will cause an interrupt if CMP1IE set. Write 1 to clear this bit to zero.
        constexpr uint32_t CO0 = (1U << 2);  ///< Comparator0 Output Synchronized to the APB clock to allow reading by software. Cleared when the comparator is disabled (CMP0EN = 0).
        constexpr uint32_t CO1 = (1U << 3);  ///< Comparator1 Output Synchronized to the APB clock to allow reading by software. Cleared when the comparator is disabled (CMP1EN = 0).
    }

}

// ============================================================================
// EBI Peripheral
// ============================================================================

namespace ebi {
    /// Base addresses
    constexpr uint32_t EBI_BASE = 0x50010000;

    /// EBI Register structure
    struct Registers {
        volatile uint32_t EBICON;  ///< Offset: 0x00 - External Bus Interface General Control Register
        volatile uint32_t EXTIME;  ///< Offset: 0x04 - External Bus Interface Timing Control Register
    };

    /// Peripheral instances
    inline Registers* EBI = reinterpret_cast<Registers*>(EBI_BASE);

    // Bit definitions
    /// EBICON Register bits
    namespace ebicon_bits {
        constexpr uint32_t ExtEN = (1U << 0);  ///< EBI Enable This bit is the functional enable bit for EBI. 1: EBI function is enabled 0: EBI function is disabled
        constexpr uint32_t ExtBW16 = (1U << 1);  ///< EBI data width 16 bit This bit defines if the data bus is 8-bit or 16-bit. 1: EBI data width is 16 bit 0: EBI data width is 8 bit
        constexpr uint32_t MCLKDIV = (3 << 8);  ///< External Output Clock Divider The frequency of EBI output clock is controlled by MCLKDIV as follows table: MCLKDIV	Output clock (MCLK)	 000	HCLK/1	 001	HCLK/2	 010	HCLK/4	 011	HCLK/8	 100	HCLK/16	 101	HCLK/32	 11X	default	 Notice: Default value of output clock is HCLK/1
        constexpr uint32_t ExttALE = (3 << 16);  ///< Expand Time of ALE The ALE width (tALE) to latch the address can be controlled by ExttALE. tALE = (ExttALE+1)*MCLK
    }

    /// EXTIME Register bits
    namespace extime_bits {
        constexpr uint32_t ExttACC = (5 << 3);  ///< EBI Data Access Time ExttACC define data access time (tACC). tACC = (ExttACC+1)*MCLK
        constexpr uint32_t ExttAHD = (3 << 8);  ///< EBI Data Access Hold Time ExttAHD define data access hold time (tAHD). tAHD = (ExttAHD+1)*MCLK
        constexpr uint32_t ExtIW2X = (4 << 12);  ///< Idle State Cycle After Write When write action is finish, idle state is inserted and nCS return to high if ExtIW2X is not zero. Idle state cycle = (ExtIW2X)*MCLK
        constexpr uint32_t ExtIR2R = (4 << 24);  ///< Idle State Cycle Between Read-Read When read action is finish and next action is going to read, idle state is inserted and nCS return to high if ExtIR2R is not zero. Idle state cycle = (ExtIR2R)*MCLK
    }

}

// ============================================================================
// FMC Peripheral
// ============================================================================

namespace fmc {
    /// Base addresses
    constexpr uint32_t FMC_BASE = 0x5000C000;

    /// FMC Register structure
    struct Registers {
        volatile uint32_t ISPCON;  ///< Offset: 0x00 - ISP Control Register
        volatile uint32_t ISPADR;  ///< Offset: 0x04 - ISP Address Register
        volatile uint32_t ISPDAT;  ///< Offset: 0x08 - ISP Data Register
        volatile uint32_t ISPCMD;  ///< Offset: 0x0C - ISP Command Register
        volatile uint32_t ISPTRG;  ///< Offset: 0x10 - ISP Trigger Control Register
        volatile uint32_t DFBADR;  ///< Offset: 0x14 - Data Flash Base Address Register
        volatile uint32_t FATCON;  ///< Offset: 0x18 - Flash Access Time Control Register
    };

    /// Peripheral instances
    inline Registers* FMC = reinterpret_cast<Registers*>(FMC_BASE);

    // Bit definitions
    /// ISPCON Register bits
    namespace ispcon_bits {
        constexpr uint32_t ISPEN = (1U << 0);  ///< ISP Enable ISP function enable bit. Set this bit to enable ISP function. 1 = Enable ISP function 0 = Disable ISP function
        constexpr uint32_t BS = (1U << 1);  ///< Boot Select Set/clear this bit to select next booting from LDROM/APROM, respectively. This bit also functions as chip booting status flag, which can be used to check where chip booted from. This bit is initiated with the inversed value of CBS in Config0 after power-on reset; It keeps the same value at other reset. 1 = boot from LDROM 0 = boot from APROM
        constexpr uint32_t CFGUEN = (1U << 4);  ///< Enable Config-bits Update by ISP LDROM update enable bit. 1 = Enable ISP can update config-bits. 0 = Disable ISP can update config-bits.
        constexpr uint32_t LDUEN = (1U << 5);  ///< LDROM Update Enable LDROM update enable bit. 1 = LDROM can be updated when the MCU runs in APROM. 0 = LDROM can not be updated
        constexpr uint32_t ISPFF = (1U << 6);  ///< ISP Fail Flag This bit is set by hardware when a triggered ISP meets any of the following conditions: (1) APROM writes to itself. (2) LDROM writes to itself. (3) CONFIG is erased/programmed if CFGUEN is set to 0. (4) Destination address is illegal, such as over an available range. Write 1 to clear.
        constexpr uint32_t PT = (3 << 8);  ///< Flash Program Time PT[2]	PT[1]	PT[0]	Program Time (us)	 0	0	0	40	 0	0	1	45	 0	1	0	50	 0	1	1	55	 1	0	0	20	 1	0	1	25	 1	1	0	30	 1	1	1	35
        constexpr uint32_t ET = (3 << 12);  ///< Flash Erase Time ET[2]	ET[1]	ET[0]	Erase Time (ms)	 0	0	0	20 (default)	 0	0	1	25	 0	1	0	30	 0	1	1	35	 1	0	0	3	 1	0	1	5	 1	1	0	10	 1	1	1	15
    }

    /// ISPADR Register bits
    namespace ispadr_bits {
        constexpr uint32_t ISPADR = (32 << 0);  ///< ISP Address NuMicro(TM) NUC100 Series equips with a maximum 32Kx32 embedded flash, it supports word program only. ISPARD[1:0] must be kept 00b for ISP operation.
    }

    /// ISPDAT Register bits
    namespace ispdat_bits {
        constexpr uint32_t ISPDAT = (32 << 0);  ///< ISP Data Write data to this register before ISP program operation Read data from this register after ISP read operation
    }

    /// ISPCMD Register bits
    namespace ispcmd_bits {
        constexpr uint32_t FCTRL = (4 << 0);  ///< ISP Command ISP command table is showed below: Operation Mode	FOEN	FCEN	FCTRL[3:0]	 Read	0	0	0	0	0	0	 Program	1	0	0	0	0	1	 Page Erase	1	0	0	0	1	0
        constexpr uint32_t FCEN = (1U << 4);  ///< ISP Command ISP command table is showed below: Operation Mode	FOEN	FCEN	FCTRL[3:0]	 Read	0	0	0	0	0	0	 Program	1	0	0	0	0	1	 Page Erase	1	0	0	0	1	0
        constexpr uint32_t FOEN = (1U << 5);  ///< ISP Command ISP command table is showed below: Operation Mode	FOEN	FCEN	FCTRL[3:0]	 Read	0	0	0	0	0	0	 Program	1	0	0	0	0	1	 Page Erase	1	0	0	0	1	0
    }

    /// ISPTRG Register bits
    namespace isptrg_bits {
        constexpr uint32_t ISPGO = (1U << 0);  ///< ISP start trigger Write 1 to start ISP operation and this bit will be cleared to 0 by hardware automatically when ISP operation is finished. 1 = ISP is on going 0 = ISP is operation is finished
    }

    /// DFBADR Register bits
    namespace dfbadr_bits {
        constexpr uint32_t DFBADR = (32 << 0);  ///< Data Flash Base Address This register indicates data flash start address. It is a read only register. For 128kB flash memory device, the data flash size is defined by user configuration, register content is loaded from Config1 when chip power on but for 64/32kB device, it is fixed at 0x01_f000
    }

    /// FATCON Register bits
    namespace fatcon_bits {
        constexpr uint32_t FPSEN = (1U << 0);  ///< Flash Power Save Enable If CPU clock is slower than 24 MHz, then s/w can enable flash power saving function. 1 = Enable flash power saving 0 = Disable flash power saving
        constexpr uint32_t FATS = (3 << 1);  ///< Flash Access Time Window Select These bits are used to decide flash sense amplifier active duration. FATS	Access Time window (ns)	 000	40	 001	50	 010	60	 011	70	 100	80	 101	90	 110	100	 111	reserved
    }

}

// ============================================================================
// GCR Peripheral
// ============================================================================

namespace gcr {
    /// Base addresses
    constexpr uint32_t GCR_BASE = 0x50000000;

    /// GCR Register structure
    struct Registers {
        volatile uint32_t PDID;  ///< Offset: 0x00 - Part Device Identification Number Register
        volatile uint32_t RSTSRC;  ///< Offset: 0x04 - System Reset Source Register
        volatile uint32_t IPRSTC1;  ///< Offset: 0x08 - IP Reset Control Resister1
        volatile uint32_t IPRSTC2;  ///< Offset: 0x0C - IP Reset Control Resister 2
        volatile uint32_t BODCR;  ///< Offset: 0x18 - Brown Out Detector Control Register
        volatile uint32_t TEMPCR;  ///< Offset: 0x1C - Temperature Sensor Control Register
        volatile uint32_t PORCR;  ///< Offset: 0x24 - Power-On-Reset Controller Register
        volatile uint32_t GPA_MFP;  ///< Offset: 0x30 - GPIOA multiple function and input type control register
        volatile uint32_t GPB_MFP;  ///< Offset: 0x34 - GPIOB multiple function and input type control register
        volatile uint32_t GPC_MFP;  ///< Offset: 0x38 - GPIOC multiple function and input type control register
        volatile uint32_t GPD_MFP;  ///< Offset: 0x3C - GPIOD multiple function and input type control register
        volatile uint32_t GPE_MFP;  ///< Offset: 0x40 - GPIOE multiple function and input type control register
        volatile uint32_t ALT_MFP;  ///< Offset: 0x50 - Alternative Multiple Function Pin Control Register
        volatile uint32_t REGWRPROT;  ///< Offset: 0x100 - Register Write Protect Register
    };

    /// Peripheral instances
    inline Registers* GCR = reinterpret_cast<Registers*>(GCR_BASE);

    // Bit definitions
    /// PDID Register bits
    namespace pdid_bits {
        constexpr uint32_t PDID = (32 << 0);  ///< Part Device Identification Number This register reflects device part number code. S/W can read this register to identify which device is used.
    }

    /// RSTSRC Register bits
    namespace rstsrc_bits {
        constexpr uint32_t RSTS_POR = (1U << 0);  ///< The RSTS_POR flag is set by the "reset signal" from the Power-On Reset (POR) module or bit CHIP_RST (IPRSTC1[0]) to indicate the previous reset source 1= The Power-On Reset (POR) or CHIP_RST had issued the reset signal to reset the system. 0= No reset from POR or CHIP_RS Software can write 1 to clear this bit to zero.
        constexpr uint32_t RSTS_RESET = (1U << 1);  ///< The RSTS_RESET flag is set by the "reset signal" from the /RESET pin to indicate the previous reset source. 1 = The Pin /RESET had issued the reset signal to reset the system. 0 = No reset from /RESET pin Software can write 1 to clear this bit to zero.
        constexpr uint32_t RSTS_WDT = (1U << 2);  ///< The The RSTS_WDT flag is set by the "reset signal" from the watchdog timer to indicate the previous reset source. 1 = The watchdog timer had issued the reset signal to reset the system. 0 = No reset from watchdog timer Software can write 1 to clear this bit to zero.
        constexpr uint32_t RSTS_LVR = (1U << 3);  ///< The RSTS_LVR flag is set by the "reset signal" from the Low-Voltage-Reset controller to indicate the previous reset source. 1 = The LVR controller had issued the reset signal to reset the system. 0 = No reset from LVR Software can write 1 to clear this bit to zero.
        constexpr uint32_t RSTS_BOD = (1U << 4);  ///< The RSTS_BOD flag is set by the "reset signal" from the Brown-Out-Detector controller to indicate the previous reset source. 1 = The BOD had issued the reset signal to reset the system. 0 = No reset from BOD Software can write 1 to clear this bit to zero.
        constexpr uint32_t RSTS_SYS = (1U << 5);  ///< The RSTS_SYS flag is set by the "reset signal" from the Cortex_M0 kernel to indicate the previous reset source. 1 = The Cortex_M0 had issued the reset signal to reset the system by software writing 1 to bit SYSRESTREQ(AIRCR[2], Application Interrupt and Reset Control Register, address = 0xE000ED0C) in system control registers of Cortex_M0 kernel. 0 = No reset from Cortex_M0 Software can write 1 to clear this bit to zero.
        constexpr uint32_t RSTS_CPU = (1U << 7);  ///< The RSTS_CPU flag is set by hardware if software writes CPU_RST (IPRSTC1[1]) 1 to reset Cortex-M0 CPU kernel and Flash memory controller (FMC). 1 = The Cortex-M0 CPU kernel and FMC are reset by software setting CPU_RST to 1 0 = No reset from CPU Software can write 1 to clear this bit to zero.
    }

    /// IPRSTC1 Register bits
    namespace iprstc1_bits {
        constexpr uint32_t CHIP_RST = (1U << 0);  ///< CHIP one shot reset (write-protection bit) Setting this bit will reset the whole chip, including CPU kernel and all peripherals, and this bit will automatically return to 0 after the 2 clock cycles. The CHIP_RST is same as the POR reset, all the chip controllers is reset and the chip setting from flash are also reload. About the difference between CHIP_RST and SYSRESETREQ, please refer to section 5.2.2 of TRM. This bit is the protected bit. It means programming this bit needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100. 1 = CHIP one shot reset 0 = CHIP normal operation
        constexpr uint32_t CPU_RST = (1U << 1);  ///< CPU kernel one shot reset (write-protection bit) Setting this bit will only reset the CPU kernel and Flash Memory Controller(FMC), and this bit will automatically return to 0 after the 2 clock cycles This bit is the protected bit, It means programming this bit needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100. 1 = CPU one shot reset 0 = CPU normal operation
        constexpr uint32_t PDMA_RST = (1U << 2);  ///< PDMA Controller Reset (write-protection bit in NUC100/NUC120/NUC130/NUC140 Low Density and NUC101) Setting this bit to 1 will generate a reset signal to the PDMA. User need to set this bit to 0 to release from reset state This bit is the protected bit, It means programming this bit needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100 1 = PDMA controller reset 0 = PDMA controller normal operation
        constexpr uint32_t EBI_RST = (1U << 3);  ///< EBI Controller Reset (write-protection bit in NUC100/NUC120/NUC130/NUC140 Low Density 64-pin package) Set this bit to 1 will generate a reset signal to the EBI. User need to set this bit to 0 to release from the reset state. This bit is the protected bit, It means programming this bit needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100. 1 = EBI controller reset 0 = EBI controller normal operation
    }

    /// IPRSTC2 Register bits
    namespace iprstc2_bits {
        constexpr uint32_t GPIO_RST = (1U << 1);  ///< GPIO controller Reset 1 = GPIO controller reset 0 = GPIO controller normal operation
        constexpr uint32_t TMR0_RST = (1U << 2);  ///< Timer0 controller Reset 1 = Timer0 controller reset 0 = Timer0 controller normal operation
        constexpr uint32_t TMR1_RST = (1U << 3);  ///< Timer1 controller Reset 1 = Timer1 controller reset 0 = Timer1 controller normal operation
        constexpr uint32_t TMR2_RST = (1U << 4);  ///< Timer2 controller Reset 1 = Timer2 controller reset 0 = Timer2 controller normal operation
        constexpr uint32_t TMR3_RST = (1U << 5);  ///< Timer3 controller Reset 1 = Timer3 controller reset 0 = Timer3 controller normal operation
        constexpr uint32_t I2C0_RST = (1U << 8);  ///< I2C0 controller Reset 1 = I2C0 controller reset 0 = I2C0 controller normal operation
        constexpr uint32_t I2C1_RST = (1U << 9);  ///< I2C1 controller Reset 1 = I2C1 controller reset 0 = I2C1 controller normal operation
        constexpr uint32_t SPI0_RST = (1U << 12);  ///< SPI0 controller Reset 1 = SPI0 controller reset 0 = SPI0 controller normal operation
        constexpr uint32_t SPI1_RST = (1U << 13);  ///< SPI1 controller Reset 1 = SPI1 controller reset 0 = SPI1 controller normal operation
        constexpr uint32_t SPI2_RST = (1U << 14);  ///< SPI2 controller Reset (Medium Density Only) 1 = SPI2 controller reset 0 = SPI2 controller normal operation
        constexpr uint32_t SPI3_RST = (1U << 15);  ///< SPI3 controller Reset (Medium Density Only) 1 = SPI3 controller reset 0 = SPI3 controller normal operation
        constexpr uint32_t UART0_RST = (1U << 16);  ///< UART0 controller Reset 1 = UART0 controller reset 0 = UART0 controller normal operation
        constexpr uint32_t UART1_RST = (1U << 17);  ///< UART1 controller Reset 1 = UART1 controller reset 0 = UART1 controller normal operation
        constexpr uint32_t UART2_RST = (1U << 18);  ///< UART2 controller Reset (Medium Density Only) 1 = UART2 controller reset 0 = UART2 controller normal operation
        constexpr uint32_t PWM03_RST = (1U << 20);  ///< PWM03 controller Reset 1 = PWM03 controller reset 0 = PWM03 controller normal operation
        constexpr uint32_t PWM47_RST = (1U << 21);  ///< PWM47 controller Reset (Medium Density Only) 1 = PWM47 controller reset 0 = PWM47 controller normal operation
        constexpr uint32_t ACMP_RST = (1U << 22);  ///< Analog Comparator Controller Reset 1 = Analog Comparator controller reset 0 = Analog Comparator controller normal operation
        constexpr uint32_t PS2_RST = (1U << 23);  ///< PS2 Controller Reset 1 = PS2 controller reset 0 = PS2 controller normal operation
        constexpr uint32_t CAN0_RST = (1U << 24);  ///< CAN0 Controller Reset 1 = CAN0 controller reset 0 = CAN0 controller normal operation
        constexpr uint32_t USBD_RST = (1U << 27);  ///< USB Device Controller Reset 1 = USB device controller reset 0 = USB devide controller normal operation
        constexpr uint32_t ADC_RST = (1U << 28);  ///< ADC Controller Reset 1 = ADC controller reset 0 = ADC controller normal operation
        constexpr uint32_t I2S_RST = (1U << 29);  ///< I2S Controller Reset 1 = I2S controller reset 0 = I2S controller normal operation
    }

    /// BODCR Register bits
    namespace bodcr_bits {
        constexpr uint32_t BOD_EN = (1U << 0);  ///< Brown Out Detector Enable The default value is set by flash controller user configuration register config0 bit[23]. 1 = Brown Out Detector function is enabled 0 = Brown Out Detector function is disabled This bit is the protected bit. It means programming this needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100.
        constexpr uint32_t BOD_VL = (2 << 1);  ///< Brown Out Detector Threshold Voltage Selection The default value is set by flash controller user configuration register config0 bit[22:21]. This bit is the protected bit. It means programming this needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100. BOV_VL[1]	BOV_VL[0]	Brown out voltage	 1	1	4.5V	 1	0	3.8V	 0	1	2.7V	 0	0	2.2V
        constexpr uint32_t BOD_RSTEN = (1U << 3);  ///< Brown Out Reset 1 = Enable the Brown Out "RESET" function. While the Brown Out Detector function is enabled (BOD_EN high) and BOD reset function is enabled (BOD_RSTEN high), BOD will assert a signal to reset chip when the detected voltage is lower than the threshold (BOD_OUT high). 0 = Enable the Brown Out "INTERRUPT" function While the BOD function is enabled (BOD_EN high) and BOD interrupt function is enabled (BOD_RSTEN low), BOD will assert an interrupt if BOD_OUT is high. BOD interrupt will keep till to the BOD_EN set to 0. BOD interrupt can be blocked by disabling the NVIC BOD interrupt or disabling BOD function (set BOD_EN low). The default value is set by flash controller user configuration register config0 bit[20]. This bit is the protected bit. It means programming this needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100.
        constexpr uint32_t BOD_INTF = (1U << 4);  ///< Brown Out Detector Interrupt Flag 1 = When Brown Out Detector detects the VDD is dropped down through the voltage of BOD_VL setting or the VDD is raised up through the voltage of BOD_VL setting, this bit is set to 1 and the brown out interrupt is requested if brown out interrupt is enabled. 0 = Brown Out Detector does not detect any voltage draft at VDD down through or up through the voltage of BOD_VL setting. Software can write 1 to clear this bit to zero.
        constexpr uint32_t BOD_LPM = (1U << 5);  ///< Brown Out Detector Low power Mode 1 = Enable the BOD low power mode 0 = BOD operate in normal mode (default) The BOD consumes about 100uA in normal mode, the low power mode can reduce the current to about 1/10 but slow the BOD response. This bit is the protected bit. It means programming this needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100.
        constexpr uint32_t BOD_OUT = (1U << 6);  ///< Brown Out Detector output status 1 = Brown Out Detector output status is 1. It means the detected voltage is lower than BOD_VL setting. If the BOD_EN is 0, BOD function disabled , this bit always responds 0 0 = Brown Out Detector output status is 0. It means the detected voltage is higher than BOD_VL setting or BOD_EN is 0
        constexpr uint32_t LVR_EN = (1U << 7);  ///< Low Voltage Reset Enable The LVR function reset the chip when the input power voltage is lower than LVR circuit setting. LVR function is enabled in default. 1 = Enabled Low Voltage Reset function. After enabling the bit, the LVR function will be active with 100uS delay for LVR output stable (default) 0 = Disabled Low Voltage Reset function This bit is the protected bit. It means programming this needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100
    }

    /// TEMPCR Register bits
    namespace tempcr_bits {
        constexpr uint32_t VTEMP_EN = (1U << 0);  ///< Temperature sensor Enable This bit is used to enable/disable temperature sensor function. 1 = Enabled temperature sensor function 0 = Disabled temperature sensor function (default) After this bit is set to 1, the value of temperature can get from ADC conversion result by ADC channel selecting channel 7 and alternative multiplexer channel selecting temperature sensor. Detail ADC conversion function please reference ADC function chapter.
    }

    /// PORCR Register bits
    namespace porcr_bits {
        constexpr uint32_t POR_DIS_CODE = (16 << 0);  ///< The register is used for the Power-On-Reset enable control When power on, the POR circuit generates a reset signal to reset the whole chip function, but noise on the power may cause the POR active again. User can disable internal POR circuit to avoid unpredictable noise to cause chip reset by writing 0x5AA5 to this field. The POR function will be active again when this field is set to another value or chip is reset by other reset source, including: /RESET, Watch dog, LVR reset, BOD reset, ICE reset command and the software-chip reset function This bit is the protected bit. It means programming this needs to write "59h", "16h", "88h" to address 0x5000_0100 to disable register protection. Reference the register REGWRPROT at address GCR_BA+0x100.
    }

    /// GPA_MFP Register bits
    namespace gpa_mfp_bits {
        constexpr uint32_t GPA_MFP0 = (1U << 0);  ///< PA.0 Pin Function Selection 1 = The ADC0 (Analog-to-Digital converter channel 0) function is selected to the pin PA.0 0 = The GPIOA[0] is selected to the pin PA.0
        constexpr uint32_t GPA_MFP1 = (1U << 1);  ///< PA.1 Pin Function Selection The pin function depends on GPA_MFP1 and EBI_HB_EN[4] (ALT_MFP[20]) and EBI_EN (ALT_MFP[11]). EBI_HB_EN[4]	EBI_EN 	GPA_MFP[1]	PA.1 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	ADC1 (ADC)	 0 	1 	1 	ADC1 (ADC)	 1 	1 	1 	AD12 (EBI AD bus bit 12)
        constexpr uint32_t GPA_MFP2 = (1U << 2);  ///< PA.2 Pin Function Selection The pin function depends on GPA_MFP2 and EBI_HB_EN[3] (ALT_MFP[19]) and EBI_EN (ALT_MFP[11]). EBI_HB_EN[3]	EBI_EN 	GPA_MFP[2]	PA.2 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	ADC2 (ADC)	 0 	1 	1 	ADC2 (ADC)	 1 	1 	1 	AD11 (EBI AD bus bit 11)
        constexpr uint32_t GPA_MFP3 = (1U << 3);  ///< PA.3 Pin Function Selection The pin function depends on GPA_MFP3 and EBI_HB_EN[2] (ALT_MFP[18]) and EBI_EN (ALT_MFP[11]). EBI_HB_EN[2]	EBI_EN 	GPA_MFP[3]	PA.3 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	ADC3 (ADC)	 0 	1 	1 	ADC3 (ADC)	 1 	1 	1 	AD10 (EBI AD bus bit 10)
        constexpr uint32_t GPA_MFP4 = (1U << 4);  ///< PA.4 Pin Function Selection The pin function depends on GPA_MFP4 and EBI_HB_EN[1] (ALT_MFP[17]) and EBI_EN (ALT_MFP[11]). EBI_HB_EN[1]	EBI_EN 	GPA_MFP[4]	PA.4 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	ADC4 (ADC)	 0 	1 	1 	ADC4 (ADC)	 1 	1 	1 	AD9 (EBI AD bus bit 9)
        constexpr uint32_t GPA_MFP5 = (1U << 5);  ///< PA.5 Pin Function Selection The pin function depends on GPA_MFP5 and EBI_HB_EN[0] (ALT_MFP[16]) and EBI_EN (ALT_MFP[11]). EBI_HB_EN[0]	EBI_EN 	GPA_MFP[5]	PA.5 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	ADC5 (ADC)	 0 	1 	1 	ADC5 (ADC)	 1 	1 	1 	AD8 (EBI AD bus bit 8)
        constexpr uint32_t GPA_MFP6 = (1U << 6);  ///< PA.6 Pin Function Selection The pin function depends on GPA_MFP6 and EBI_EN (ALT_MFP[11]). EBI_EN 	GPA_MFP[6]	PA.6 function 	 x 	0 	GPIO 	 0 	1 	ADC6 (ADC)	 1 	1 	AD7 (EBI AD bus bit 7)
        constexpr uint32_t GPA_MFP7 = (1U << 7);  ///< PA.7 Pin Function Selection The pin function depends on GPA_MFP7 and PA7_S21 (ALT_MFP[2]) and EBI_EN (ALT_MFP[11]). EBI_EN	PA7_S21	GPA_MFP[7]	PA.7 function 	 x 	x 	0 	GPIO 	 0 	0 	1 	ADC7 (ADC)	 0 	1 	1 	SPISS21 (SPI2)	 1 	x 	1 	AD6 (EBI AD bus bit 6)
        constexpr uint32_t GPA_MFP8 = (1U << 8);  ///< PA.8 Pin Function Selection 1 = The I2C0 SDA function is selected to the pin PA.8 0 = The GPIOA[8] is selected to the pin PA.8
        constexpr uint32_t GPA_MFP9 = (1U << 9);  ///< PA.9 Pin Function Selection 1 = The I2C0 SCL function is selected to the pin PA.9 0 = The GPIOA[9] is selected to the pin PA.9
        constexpr uint32_t GPA_MFP10 = (1U << 10);  ///< PA.10 Pin Function Selection The pin function depends on GPA_MFP10 and EBI_EN (ALT_MFP[11]). EBI_EN 	GPA_MFP[10]	PA.10 function 	 x 	0 	GPIO 	 0 	1 	SDA1 (I2C)	 1 	1 	nWR (EBI)
        constexpr uint32_t GPA_MFP11 = (1U << 11);  ///< PA.11 Pin Function Selection The pin function depends on GPA_MFP11 and EBI_EN (ALT_MFP[11]). EBI_EN 	GPA_MFP[11]	PA.11 function 	 x 	0 	GPIO 	 0 	1 	SCL1 (I2C)	 1 	1 	nRD (EBI)
        constexpr uint32_t GPA_MFP12 = (1U << 12);  ///< PA.12 Pin Function Selection The pin function depends on GPA_MFP12 and EBI_HB_EN[5] (ALT_MFP[21]) and EBI_EN (ALT_MFP[11]). EBI_HB_EN[5]	EBI_EN 	GPA_MFP[12]	PA.12 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	PWM0 (PWM)	 0 	1 	1 	PWM0 (PWM)	 1 	1 	1 	AD13 (EBI AD bus bit 13)
        constexpr uint32_t GPA_MFP13 = (1U << 13);  ///< PA.13 Pin Function Selection The pin function depends on GPA_MFP13 and EBI_HB_EN[6] (ALT_MFP[22]) and EBI_EN (ALT_MFP[11]). EBI_HB_EN[6]	EBI_EN 	GPA_MFP[13]	PA.13 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	PWM1 (PWM)	 0 	1 	1 	PWM1 (PWM)	 1 	1 	1 	AD14 (EBI AD bus bit 14)
        constexpr uint32_t GPA_MFP14 = (1U << 14);  ///< PA.14 Pin Function Selection The pin function depends on GPA_MFP14 and EBI_HB_EN[7] (ALT_MFP[23]) and EBI_EN (ALT_MFP[11]). EBI_HB_EN[7]	EBI_EN 	GPA_MFP[14]	PA.14 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	PWM2 (PWM)	 0 	1 	1 	PWM2 (PWM)	 1 	1 	1 	AD15 (EBI AD bus bit 15)
        constexpr uint32_t GPA_MFP15 = (1U << 15);  ///< PA.14 Pin Function Selection The pin function depends on GPA_MFP15 and PA15_I2SMCLK (ALT_MFP[9]). PA15_I2SMCLK	GPA_MFP[15]	PA.15 function 	 x 	0 	GPIO 	 0 	1 	PWM3 (PWM) 	 1 	1 	I2SMCLK (I2S)
        constexpr uint32_t GPA_TYPEn = (16 << 16);  ///< 1 = Enable GPIOA[15:0] I/O input Schmitt Trigger function 0 = Disable GPIOA[15:0] I/O input Schmitt Trigger function
    }

    /// GPB_MFP Register bits
    namespace gpb_mfp_bits {
        constexpr uint32_t GPB_MFP0 = (1U << 0);  ///< PB.0 Pin Function Selection 1 = The UART0 RXD function is selected to the pin PB.0 0 = The GPIOB[0] is selected to the pin PB.0
        constexpr uint32_t GPB_MFP1 = (1U << 1);  ///< PB.1 Pin Function Selection 1 = The UART0 TXD function is selected to the pin PB.1 0 = The GPIOB[1] is selected to the pin PB.1
        constexpr uint32_t GPB_MFP2 = (1U << 2);  ///< PB.2 Pin Function Selection The pin function depends on GPB_MFP2 and EBI_nWRL_EN (ALT_MFP[13]) and EBI_EN (ALT_MFP[11]). EBI_nWRL_EN 	EBI_EN 	GPB_MFP[2]	PB.2 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	RTS0 (UART0)	 0 	1 	1 	RTS0 (UART0)	 1 	1 	1 	nWRL (EBI write low byte enable)
        constexpr uint32_t GPB_MFP3 = (1U << 3);  ///< PB.3 Pin Function Selection The pin function depends on GPB_MFP3 and EBI_nWRH_EN (ALT_MFP[14]) and EBI_EN (ALT_MFP[11]). EBI_nWRH_EN 	EBI_EN 	GPB_MFP[3]	PB.3 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	CTS0 (UART0)	 0 	1 	1 	CTS0 (UART0)	 1 	1 	1 	nWRH (EBI write high byte enable)
        constexpr uint32_t GPB_MFP4 = (1U << 4);  ///< PB.4 Pin Function Selection 1 = The UART1 RXD function is selected to the pin PB.4 0 = The GPIOB[4] is selected to the pin PB.4
        constexpr uint32_t GPB_MFP5 = (1U << 5);  ///< PB.5 Pin Function Selection 1 = The UART1 TXD function is selected to the pin PB.5 0 = The GPIOB[5] is selected to the pin PB.5
        constexpr uint32_t GPB_MFP6 = (1U << 6);  ///< PB.6 Pin Function Selection The pin function depends on GPB_MFP6 and EBI_EN (ALT_MFP[11]). EBI_EN 	GPB_MFP[6]	PB.6 function 	 x 	0 	GPIO 	 0 	1 	TRS1 (UART1)	 1 	1 	ALE (EBI)
        constexpr uint32_t GPB_MFP7 = (1U << 7);  ///< PB.7 Pin Function Selection The pin function depends on GPB_MFP7 and EBI_EN (ALT_MFP[11]). EBI_EN 	GPB_MFP[7]	PB.7 function 	 x 	0 	GPIO 	 0 	1 	CTS1 (UART1)	 1 	1 	nCS (EBI)
        constexpr uint32_t GPB_MFP8 = (1U << 8);  ///< PB.8 Pin Function Selection 1 = The TM0 (Timer/Counter external trigger clock input) function is selected to the pin PB.8 0 = The GPIOB[8] is selected to the pin PB.8
        constexpr uint32_t GPB_MFP9 = (1U << 9);  ///< PB.9 Pin Function Selection The pin function depends on GPB_MFP9 and PB9_S11 (ALT_MFP[1]). PB9_S11	GPB_MFP[9]	PB.9 function 	 x 	0 	GPIO 	 0 	1 	TM1 	 1 	1 	SPISS11 (SPI1)
        constexpr uint32_t GPB_MFP10 = (1U << 10);  ///< PB.10 Pin Function Selection The pin function depends on GPB_MFP10 and PB10_S01 (ALT_MFP[0]). PB10_S01	GPB_MFP[10]	PB.10 function 	 x 	0 	GPIO 	 0 	1 	TM2 	 1 	1 	SPISS01 (SPI0)
        constexpr uint32_t GPB_MFP11 = (1U << 11);  ///< PB.11 Pin Function Selection The pin function depends on GPB_MFP11 and PB11_PWM4 (ALT_MFP[4]). PB11_PWM4	GPB_MFP[11]	PB.11 function 	 x 	0 	GPIO 	 0 	1 	TM3 	 1 	1 	PWM4 (PWM)
        constexpr uint32_t GPB_MFP12 = (1U << 12);  ///< PB.12 Pin Function Selection The pin function depends on GPB_MFP12 and PB12_CLKO (ALT_MFP[10]) and EBI_EN (ALT_MFP[11]). EBI_EN	PB12_CLKO	GPB_MFP[12]	PB.12 function 	 x 	x 	0 	GPIO 	 0 	0 	1 	CPO0(CMP) 	 0 	1 	1 	CLKO (Clock Driver output)	 1 	x 	1 	AD0(EBI AD bus bit 0)
        constexpr uint32_t GPB_MFP13 = (1U << 13);  ///< PB.13 Pin Function Selection The pin function depends on GPB_MFP13 and EBI_EN (ALT_MFP[11]). EBI_EN 	GPB_MFP[13]	PB.13 function 	 x 	0 	GPIO 	 0 	1 	CPO1 (CMP)	 1 	1 	AD1 (EBI AD bus bit 1)
        constexpr uint32_t GPB_MFP14 = (1U << 14);  ///< PB.14 Pin Function Selection The pin function depends on GPB_MFP14 and PB14_S31 (ALT_MFP[3]). PB14_S31	GPB_MFP[14]	PB.14 function 	 x 	0 	GPIO 	 0 	1 	/INT0 	 1 	1 	SPISS31 (SPI3)
        constexpr uint32_t GPB_MFP15 = (1U << 15);  ///< PB.15 Pin Function Selection 1 = The External Interrupt INT1 function is selected to the pin PB.15 0 = The GPIOB[15] is selected to the pin PB.15
        constexpr uint32_t GPB_TYPEn = (16 << 16);  ///< 1 = Enable GPIOB[15:0] I/O input Schmitt Trigger function 0 = Disable GPIOB[15:0] I/O input Schmitt Trigger function
    }

    /// GPC_MFP Register bits
    namespace gpc_mfp_bits {
        constexpr uint32_t SPI0_SS0_I2SLRCLK = (1U << 0);  ///< PC.0 Pin Function Selection Bits PC0_I2SLRCLK (ALT_MFP[5]) and GPC_MFP[0] determine the PC.0 function. PC0_I2SLRCLK	GPC_MFP[0]	PC.0 function 	 x 	0 	GPIO 	 0 	1 	SPISS00(SPI0) 	 1 	1 	I2SLRCLK (I2S)
        constexpr uint32_t SPI0_CLK_I2SBCLK = (1U << 1);  ///< PC.1 Pin Function Selection Bits PC1_I2SBCLK (ALT_MFP[6]) and GPC_MFP[1] determine the PC.1 function. PC1_I2SBCLK	GPC_MFP[1]	PC.1 function 	 x 	0 	GPIO 	 0 	1 	SPICLK0 (SPI0) 	 1 	1 	I2SBLK (I2S)
        constexpr uint32_t SPI0_MISO0_I2SDI = (1U << 2);  ///< PC.2 Pin Function Selection Bits PC2_I2SDI (ALT_MFP[7]) and GPC_MFP[2] determine the PC.2 function. PC2_I2SDI	GPC_MFP[2]	PC.2 function 	 x 	0 	GPIO 	 0 	1 	MISO00 (SPI0) 	 1 	1 	I2SDI (I2S)
        constexpr uint32_t SPI0_MOSI0_I2SDO = (1U << 3);  ///< PC.3 Pin Function Selection Bits PC3_I2SDO (ALT_MFP[8]) and GPC_MFP[3] determine the PC.3 function. PC3_I2SDO	GPC_MFP[3]	PC.3 function 	 x 	0 	GPIO 	 0 	1 	MOSI00 (SPI0) 	 1 	1 	I2SDO (I2S)
        constexpr uint32_t SPI0_MISO1 = (1U << 4);  ///< PC.4 Pin Function Selection 1 = The SPI0 MISO1 (master input, slave output pin-1) function is selected to the pin PC.4 0 = The GPIOC[4] is selected to the pin PC.4
        constexpr uint32_t SPI0_MOSI1 = (1U << 5);  ///< PC.5 Pin Function Selection 1 = The SPI0 MOSI1 (master output, slave input pin-1) function is selected to the pin PC.5 0 = The GPIOC[5] is selected to the pin PC.5
        constexpr uint32_t CPP0_AD4 = (1U << 6);  ///< PC.6 Pin Function Selection The pin function depends on GPC_MFP6 and EBI_EN (ALT_MFP[11]). EBI_EN	GPC_MFP[6]	PC.6 function 	 x 	0 	GPIO 	 0 	1 	CPP0 (CMP) 	 1 	1 	AD4 (EBI AD bus bit 4)
        constexpr uint32_t CPN0_AD5 = (1U << 7);  ///< PC.7 Pin Function Selection The pin function depends on GPC_MFP7 and EBI_EN (ALT_MFP[11]). EBI_EN	GPC_MFP[7]	PC.7 function 	 x 	0 	GPIO 	 0 	1 	CPN0 (CMP) 	 1 	1 	AD5 (EBI AD bus bit 5)
        constexpr uint32_t SPI1_SS0_MCLK = (1U << 8);  ///< PC.8 Pin Function Selection The pin function depends on GPC_MFP8 and EBI_MCLK_EN (ALT_MFP[12]) and EBI_EN (ALT_MFP[11]). EBI_MCLK_EN 	EBI_EN 	GPC_MFP[8]	PC.8 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	SPISS10 (SPI1) 	 0 	1 	1 	SPISS10 (SPI1) 	 1 	1 	1 	MCLK (EBI Clock output)
        constexpr uint32_t SPI1_CLK = (1U << 9);  ///< PC.9 Pin Function Selection 1 = The SPI1 SPICLK function is selected to the pin PC.9 0 = The GPIOC[9] is selected to the pin PC.9
        constexpr uint32_t SPI1_MISO0 = (1U << 10);  ///< PC.10 Pin Function Selection 1 = The SPI1 MISO0 (master input, slave output pin-0) function is selected to the pin PC.10 0 = The GPIOC[10] is selected to the pin PC.10
        constexpr uint32_t SPI1_MOSI0 = (1U << 11);  ///< PC.11 Pin Function Selection 1 = The SPI1 MOSI0 (master output, slave input pin-0) function is selected to the pin PC.11 0 = The GPIOC[11] is selected to the pin PC.11
        constexpr uint32_t SPI1_MISO1 = (1U << 12);  ///< PC.12 Pin Function Selection 1 = The SPI1 MISO1 (master input, slave output pin-1) function is selected to the pin PC.12 0 = The GPIOC[12] is selected to the pin PC.12
        constexpr uint32_t SPI1_MOSI1 = (1U << 13);  ///< PC.13 Pin Function Selection 1 = The SPI1 MOSI1 (master output, slave input pin-1) function is selected to the pin PC.13 0 = The GPIOC[13] is selected to the pin PC.13
        constexpr uint32_t CPP1_AD2 = (1U << 14);  ///< PC.14 Pin Function Selection The pin function depends on GPC_MFP14 and EBI_EN (ALT_MFP[11]). EBI_EN 	GPC_MFP[14]	PC.14 function 	 x 	0 	GPIO 	 0 	1 	CPP1 (CMP)	 1 	1 	AD2 (EBI AD bus bit 2)
        constexpr uint32_t CPP1_AD3 = (1U << 15);  ///< PC.15 Pin Function Selection The pin function depends on GPC_MFP15 and EBI_EN (ALT_MFP[11]). EBI_EN 	GPC_MFP[15]	PC.15 function 	 x 	0 	GPIO 	 0 	1 	CPN1 (CMP)	 1 	1 	AD3 (EBI AD bus bit 3)
        constexpr uint32_t SCHMITT = (16 << 16);  ///< 1 = Enable GPIOC[15:0] I/O input Schmitt Trigger function 0 = Disable GPIOC[15:0] I/O input Schmitt Trigger function
    }

    /// GPD_MFP Register bits
    namespace gpd_mfp_bits {
        constexpr uint32_t GPD_MFP0 = (1U << 0);  ///< PD.0 Pin Function Selection (Medium Density Only) 1 = The SPI2 SS20 function is selected to the pin PD.0 0 = The GPIOD[0] is selected to the pin PD.0
        constexpr uint32_t GPD_MFP1 = (1U << 1);  ///< PD.1 Pin Function Selection For NUC100/NUC120/NUC130/NUC140 Medium Density 1 = The SPI2 SPICLK function is selected to the pin PD.1 0 = The GPIOD[1] is selected to the pin PD.1 For NUC100/NUC120/NUC130/NUC140 Low Density and NUC101 LQFP48 package Reserved For NUC101 QFN36 package 1 = The SPI0 SS01 function is selected to the pin PD.1 0 = The GPIOD[1] is selected to the pin PD.1
        constexpr uint32_t GPD_MFP2 = (1U << 2);  ///< PD.2 Pin Function Selection For NUC100/NUC120/NUC130/NUC140 Medium Density 1 = The SPI2 MISO0 (master input, slave output pin-0) function is selected to the pin PD.2 0 = The GPIOD[2] is selected to the pin PD.2 For NUC100/NUC120/NUC130/NUC140 Low Density and NUC101 LQFP48 package Reserved For NUC101 QFN36 package 1 = The SPI0 MISO1 (master input, slave output pin-1) function is selected to the pin PD.2 0 = The GPIOD[2] is selected to the pin PD.2
        constexpr uint32_t GPD_MFP3 = (1U << 3);  ///< PD.3 Pin Function Selection For NUC100/NUC120/NUC130/NUC140 Medium Density 1 = The SPI2 MOSI0 (master output, slave input pin-0) function is selected to the pin GPD3 0 = The GPIOD[3] is selected to the pin PD.3 For NUC100/NUC120/NUC130/NUC140 Low Density and NUC101 LQFP48 package Reserved For NUC101 QFN36 package 1 = The SPI0 MOSI1 (master output, slave input pin-1) function is selected to the pin PD.3 0 = The GPIOD[3] is selected to the pin PD.3
        constexpr uint32_t GPD_MFP4 = (1U << 4);  ///< PD.4 Pin Function Selection (Medium Density Only) 1 = The SPI2 MISO1 (master input, slave output pin-1) function is selected to the pin PD.4 0 = The GPIOD[4]is selected to the pin PD.4
        constexpr uint32_t GPD_MFP5 = (1U << 5);  ///< PD.5 Pin Function Selection (Medium Density Only) 1 = The SPI2 MOSI1 (master output, slave input pin-1) function is selected to the pin PD.5 0 = The GPIOD[5] is selected to the pin PD.5
        constexpr uint32_t GPD_MFP6 = (1U << 6);  ///< PD.6 Pin Function Selection (Medium Density Only) 1 = The CAN0 RX function is selected to the pin PD.6 0 = The GPIOD[6] is selected to the pin PD.6
        constexpr uint32_t GPD_MFP7 = (1U << 7);  ///< PD.7 Pin Function Selection (Medium Density Only) 1 = The CAN0 TX function is selected to the pin PD.7 0 = The GPIOD[7] is selected to the pin PD.7
        constexpr uint32_t GPD_MFP8 = (1U << 8);  ///< PD.8 Pin Function Selection (Medium Density Only) 1 = The SPI3 SS30 function is selected to the pin PD8 0 = The GPIOD[8] is selected to the pin PD8
        constexpr uint32_t GPD_MFP9 = (1U << 9);  ///< PD.9 Pin Function Selection (Medium Density Only) 1 = The SPI3 SPICLK function is selected to the pin PD.9 0 = The GPIOD-9 is selected to the pin PD.9
        constexpr uint32_t GPD_MFP10 = (1U << 10);  ///< PD.10 Pin Function Selection (Medium Density Only) 1 = The SPI3 MISO0 (master input, slave output pin-0) function is selected to the pin PD.10 0 = The GPIOD[10] is selected to the pin PD.10
        constexpr uint32_t GPD_MFP11 = (1U << 11);  ///< PD.11 Pin Function Selection (Medium Density Only) 1 = The SPI3 MOSI0 (master output, slave input pin-0) function is selected to the pin PD.11 0 = The GPIOD[11] is selected to the pin PD.11
        constexpr uint32_t GPD_MFP12 = (1U << 12);  ///< PD.12 Pin Function Selection (Medium Density Only) 1 = The SPI3 MISO1 (master input, slave output pin-1) function is selected to the pin PD.12 0 = The GPIOD[12] is selected to the pin PD.12
        constexpr uint32_t GPD_MFP13 = (1U << 13);  ///< PD.13 Pin Function Selection (Medium Density Only) 1 = The SPI3 MOSI1 (master output, slave input pin-1) function is selected to the pin PD.13 0 = The GPIOD[13] is selected to the pin PD.13
        constexpr uint32_t GPD_MFP14 = (1U << 14);  ///< PD.14 Pin Function Selection (Medium Density Only) 1 = The UART2 RXD function is selected to the pin PD.14 0 = The GPIOD[14] selected to the pin PD.14
        constexpr uint32_t GPD_MFP15 = (1U << 15);  ///< PD.15 Pin Function Selection (Medium Density Only) 1 = The UART2 TXD function is selected to the pin PD.15 0 = The GPIOD[15] selected to the pin PD.15
        constexpr uint32_t GPD_TYPEn = (16 << 16);  ///< 1 = Enable GPIOD[15:0] I/O input Schmitt Trigger function 0 = Disable GPIOD[15:0] I/O input Schmitt Trigger function
    }

    /// GPE_MFP Register bits
    namespace gpe_mfp_bits {
        constexpr uint32_t GPE_MFP0 = (1U << 0);  ///< PE.0 Pin Function Selection (Medium Density Only) 1 = The PWM6 function is selected to the pin PE.0 0 = The GPIOE[0] is selected to the pin PE.0
        constexpr uint32_t GPE_MFP1 = (1U << 1);  ///< PE.1 Pin Function Selection (Medium Density Only) 1 = The PWM7 function is selected to the pin PE.1 0 = The GPIOE[1] is selected to the pin PE.1
        constexpr uint32_t GPE_MFP5 = (1U << 5);  ///< PE.5 Pin Function Selection (Medium Density Only) 1 = The PWM5 function is selected to the pin PE.5 0 = The GPIOE[5] is selected to the pin PE.5
        constexpr uint32_t GPE_TYPEn = (16 << 16);  ///< 1 = Enable GPIOE[15:0] I/O input Schmitt Trigger function 0 = Disable GPIOE[15:0] I/O input Schmitt Trigger function Note: In this field, Low Density only has GPE_TYPE5 bit
    }

    /// ALT_MFP Register bits
    namespace alt_mfp_bits {
        constexpr uint32_t PB10_S01 = (1U << 0);  ///< Bits PB10_S01 and GPB_MFP10 determine the PB.10 function. PB10_S01	GPB_MFP[10]	PB.10 function 	 x 	0 	GPIO 	 0 	1 	TM2 	 1 	1 	SPISS01 (SPI0)
        constexpr uint32_t PB9_S11 = (1U << 1);  ///< Bits PB9_S11 and GPB_MFP9 determine the PB.9 function. PB9_S11	GPB_MFP[9]	PB.9 function 	 x 	0 	GPIO 	 0 	1 	TM1 	 1 	1 	SPISS11 (SPI1)
        constexpr uint32_t PA7_S21 = (1U << 2);  ///< Bits PA7_S21, PA_MFP7 and EBI_EN (ALT_MFP[11])determine the PA.7 function. EBI_EN	PA7_S21	GPA_MFP[7]	PA.7 function 	 x 	x 	0 	GPIO 	 0 	0 	1 	ADC7 (ADC)	 0 	1 	1 	SPISS21 (SPI2)	 1 	x 	1 	AD6 (EBI AD bus bit 6)
        constexpr uint32_t PB14_S31 = (1U << 3);  ///< Bits PB14_S31 and GPB_MFP14 determine the GPB14 function. PB14_S31	GPB_MFP[14]	PB.14 function 	 x 	0 	GPIO 	 0 	1 	/INT0 	 1 	1 	SPISS31 (SPI3)
        constexpr uint32_t PB11_PWM4 = (1U << 4);  ///< Bits PB11_PWM4 and GPB_MFP[11] determine the PB.11 function. PB11_PWM4	GPB_MFP[11]	PB.11 function 	 x 	0 	GPIO 	 0 	1 	TM3 	 1 	1 	PWM4 (PWM)
        constexpr uint32_t PC0_I2SLRCLK = (1U << 5);  ///< Bits PC0_I2SLRCLK and GPC_MFP[0] determine the PC.0 function. PC0_I2SLRCLK	GPC_MFP[0]	PC.0 function 	 x 	0 	GPIO 	 0 	1 	SPISS00(SPI0) 	 1 	1 	I2SLRCLK (I2S)
        constexpr uint32_t PC1_I2SBCLK = (1U << 6);  ///< Bits PC1_I2SBCLK and GPC_MFP[1] determine the PC.1 function. PC1_I2SBCLK	GPC_MFP[1]	PC.1 function 	 x 	0 	GPIO 	 0 	1 	SPICLK0 (SPI0) 	 1 	1 	I2SBLK (I2S)
        constexpr uint32_t PC2_I2SDI = (1U << 7);  ///< Bits PC2_I2SDI and GPC_MFP[2] determine the PC.2 function. PC2_I2SDI	GPC_MFP[2]	PC.2 function 	 x 	0 	GPIO 	 0 	1 	MISO00 (SPI0) 	 1 	1 	I2SDI (I2S)
        constexpr uint32_t PC3_I2SDO = (1U << 8);  ///< Bits PC3_I2SDO and GPC_MFP[3] determine the PC.3 function. PC3_I2SDO	GPC_MFP[3]	PC.3 function 	 x 	0 	GPIO 	 0 	1 	MOSI00 (SPI0) 	 1 	1 	I2SDO (I2S)
        constexpr uint32_t PA15_I2SMCLK = (1U << 9);  ///< Bits PA15_I2SMCLK and GPA_MFP[15] determine the PA.15 function. PA15_I2SMCLK	GPA_MFP[15]	PA.15 function 	 x 	0 	GPIO 	 0 	1 	PWM3 (PWM) 	 1 	1 	I2SMCLK (I2S)
        constexpr uint32_t PB12_CLKO = (1U << 10);  ///< Bits PB12_CLKO and GPB_MFP[12] determine the PB.12 function. EBI_EN 	PB12_CLKO 	GPB_MFP[12]	PB.12 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	CPO0 (CMP)	 0 	1 	1 	CLKO (Clock Driver output)	 1 	1 	1 	AD0 (EBI AD bus bit 0)
        constexpr uint32_t EBI_EN = (1U << 11);  ///< EBI_EN is use to switch GPIO function to EBI function (AD[15:0], ALE, RE, WE, CS, MCLK), it need additional registers EBI_EN[7:0] and EBI_MCLK_EN for some GPIO to switch to EBI function(AD[15:8], MCLK)
        constexpr uint32_t EBI_MCLK_EN = (1U << 12);  ///< Bits EBI_MCLK_EN, EBI_EN and GPC_MFP[8] determine the PC.8 function. EBI_MCLK_EN 	EBI_EN 	GPC_MFP[8]	PC.8 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	SPISS10 (SPI1) 	 0 	1 	1 	SPISS10 (SPI1) 	 1 	1 	1 	MCLK (EBI Clock output)
        constexpr uint32_t EBI_nWRL_EN = (1U << 13);  ///< Bits EBI_nWRL_EN, EBI_EN and GPB_MFP[2] determine the PB.2 function. EBI_nWRL_EN 	EBI_EN 	GPB_MFP[2]	PB.2 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	RTS0 (UART0)	 0 	1 	1 	RTS0 (UART0)	 1 	1 	1 	nWRL (EBI write low byte enable)
        constexpr uint32_t EBI_nWRH_EN = (1U << 14);  ///< Bits EBI_nWRH_EN, EBI_EN and GPB_MFP[3] determine the PB.3 function EBI_nWRH_EN 	EBI_EN 	GPB_MFP[3]	PB.3 function 	 x 	x 	0 	GPIO 	 x 	0 	1 	CTS0 (UART0)	 0 	1 	1 	CTS0 (UART0)	 1 	1 	1 	nWRH (EBI write high byte enable)
        constexpr uint32_t EBI_HB_EN = (8 << 16);  ///< EBI_HB_EN is use to switch GPIO function to EBI address/data bus high byte (AD[15:8]), EBI_HB_EN, EBI_EN and corresponding GPx_MFP[y] determine the Px.y function.
    }

    /// REGWRPROT Register bits
    namespace regwrprot_bits {
        constexpr uint32_t REGPROTDIS = (1U << 0);  ///< Register Write Protection Disable Index (Read only) 1 = Write-Protection is disabled for writing protected registers 0 = Write-Protection is enabled for writing protected registers. Any write to the protected register is ignored. The Protected registers are: IPRST1: address 0x5000_0008 BODCR: address 0x5000_0018 PORCR: address 0x5000_0024 PWRCON: address 0x5000_0200 (bit[6] is not protected for power wake-up interrupt clear) APBCLK bit[0]: address 0x5000_0208 (bit[0] is watchdog timer clock enable) CLK_SEL0: address 0x5000_0210 (for HCLK and CPU STCLK clock source select) CLK_SEL1 bit[1:0]: address 0x5000_0214 (for watch dog clock source select) ISPCON: address 0x5000_C000 (Flash ISP Control register) WTCR: address 0x4000_4000 FATCON: address 0x5000_C018
        constexpr uint32_t REGWRPROT = (8 << 0);  ///< Register Write-Protection Code (Write only) Some write-protected registers have to be disabled the protected function by writing the sequence value "59h", "16h", "88h" to this field. After this sequence is completed, the REGPROTDIS bit will be set to 1 and write-protected registers can be normal write.
    }

}

// ============================================================================
// GPA Peripheral
// ============================================================================

namespace gpa {
    /// Base addresses
    constexpr uint32_t GPA_BASE = 0x50004000;
    constexpr uint32_t GPA_BITS_BASE = 0x50004200;

    /// GPA Register structure
    struct Registers {
        volatile uint32_t PMD;  ///< Offset: 0x00 - GPIO Port Pin I/O Mode Control
        volatile uint32_t OFFD;  ///< Offset: 0x04 - GPIO Port Pin OFF Digital Enable
        volatile uint32_t DOUT;  ///< Offset: 0x08 - GPIO Port Data Output Value
        volatile uint32_t DMASK;  ///< Offset: 0x0C - GPIO Port Data Output Write Mask
        volatile uint32_t PIN;  ///< Offset: 0x10 - GPIO Port Pin Value
        volatile uint32_t DBEN;  ///< Offset: 0x14 - GPIO Port De-bounce Enable
        volatile uint32_t IMD;  ///< Offset: 0x18 - GPIO Port Interrupt Mode Control
        volatile uint32_t IEN;  ///< Offset: 0x1C - GPIO Port Interrupt Enable
        volatile uint32_t ISRC;  ///< Offset: 0x20 - GPIO Port Interrupt Trigger Source Indicator
    };

    /// Peripheral instances
    inline Registers* GPA = reinterpret_cast<Registers*>(GPA_BASE);
    inline Registers* GPA_BITS = reinterpret_cast<Registers*>(GPA_BITS_BASE);

    // Bit definitions
    /// PMD Register bits
    namespace pmd_bits {
        constexpr uint32_t PMD0 = (2 << 0);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD1 = (2 << 2);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD2 = (2 << 4);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD3 = (2 << 6);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD4 = (2 << 8);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD5 = (2 << 10);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD6 = (2 << 12);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD7 = (2 << 14);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD8 = (2 << 16);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD9 = (2 << 18);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD10 = (2 << 20);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD11 = (2 << 22);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD12 = (2 << 24);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD13 = (2 << 26);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD14 = (2 << 28);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
        constexpr uint32_t PMD15 = (2 << 30);  ///< GPIOX I/O Pin[n] Mode Control Determine each I/O type of GPIOx pins 00 = GPIO port [n] pin is in INPUT mode. 01 = GPIO port [n] pin is in OUTPUT mode. 10 = GPIO port [n] pin is in Open-Drain mode. 11 = GPIO port [n] pin is in Quasi-bidirectional mode.
    }

    /// OFFD Register bits
    namespace offd_bits {
        constexpr uint32_t OFFD = (16 << 16);  ///< GPIOx Pin[n] OFF digital input path Enable Each of these bits is used to control if the input path of corresponding GPIO pin is disabled. If input is analog signal, users can OFF digital input path to avoid creepage 1 = Disable IO digital input path (digital input tied to low) 0 = Enable IO digital input path
    }

    /// DOUT Register bits
    namespace dout_bits {
        constexpr uint32_t DOUT0 = (1U << 0);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT1 = (1U << 1);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT2 = (1U << 2);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT3 = (1U << 3);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT4 = (1U << 4);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT5 = (1U << 5);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT6 = (1U << 6);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT7 = (1U << 7);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT8 = (1U << 8);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT9 = (1U << 9);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT10 = (1U << 10);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT11 = (1U << 11);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT12 = (1U << 12);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT13 = (1U << 13);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT14 = (1U << 14);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
        constexpr uint32_t DOUT15 = (1U << 15);  ///< GPIOx Pin[n] Output Value Each of these bits control the status of a GPIO pin when the GPIO pin is configures as output, open-drain and quasi-mode. 1 = GPIO port [A/B/C/D/E] Pin[n] will drive High if the GPIO pin is configures as output, open-drain and quasi-mode. 0 = GPIO port [A/B/C/D/E] Pin[n] will drive Low if the GPIO pin is configures as output, open-drain and quasi-mode.
    }

    /// DMASK Register bits
    namespace dmask_bits {
        constexpr uint32_t DMASK0 = (1U << 0);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK1 = (1U << 1);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK2 = (1U << 2);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK3 = (1U << 3);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK4 = (1U << 4);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK5 = (1U << 5);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK6 = (1U << 6);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK7 = (1U << 7);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK8 = (1U << 8);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK9 = (1U << 9);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK10 = (1U << 10);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK11 = (1U << 11);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK12 = (1U << 12);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK13 = (1U << 13);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK14 = (1U << 14);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
        constexpr uint32_t DMASK15 = (1U << 15);  ///< Port [A/B/C/D/E] Data Output Write Mask These bits are used to protect the corresponding register of GPIOx_DOUT bit[n]. When set the DMASK bit[n] to"1", the corresponding GPIOx_DOUTn bit is protected. The write signal is masked, write data to the protect bit is ignored 1 = The corresponding GPIOx_DOUT[n] bit is protected 0 = The corresponding GPIOx_DOUT[n] bit can be updated
    }

    /// PIN Register bits
    namespace pin_bits {
        constexpr uint32_t PIN0 = (1U << 0);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN1 = (1U << 1);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN2 = (1U << 2);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN3 = (1U << 3);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN4 = (1U << 4);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN5 = (1U << 5);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN6 = (1U << 6);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN7 = (1U << 7);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN8 = (1U << 8);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN9 = (1U << 9);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN10 = (1U << 10);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN11 = (1U << 11);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN12 = (1U << 12);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN13 = (1U << 13);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN14 = (1U << 14);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
        constexpr uint32_t PIN15 = (1U << 15);  ///< Port [A/B/C/D/E] Pin Values Each bit of the register reflects the actual status of the respective GPIO pin If bit is 1, it indicates the corresponding pin status is high, else the pin status is low
    }

    /// DBEN Register bits
    namespace dben_bits {
        constexpr uint32_t DBEN0 = (1U << 0);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN1 = (1U << 1);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN2 = (1U << 2);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN3 = (1U << 3);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN4 = (1U << 4);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN5 = (1U << 5);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN6 = (1U << 6);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN7 = (1U << 7);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN8 = (1U << 8);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN9 = (1U << 9);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN10 = (1U << 10);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN11 = (1U << 11);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN12 = (1U << 12);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN13 = (1U << 13);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN14 = (1U << 14);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t DBEN15 = (1U << 15);  ///< Port [A/B/C/D/E] Input Signal De-bounce Enable DBEN[n]used to enable the de-bounce function for each corresponding bit. If the input signal pulse width can't be sampled by continuous two de-bounce sample cycle The input signal transition is seen as the signal bounce and will not trigger the interrupt. The de-bounce clock source is controlled by DBNCECON[4], one de-bounce sample cycle is controlled by DBNCECON[3:0] The DBEN[n] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt 1 = The bit[n] de-bounce function is enabled 0 = The bit[n] de-bounce function is disabled The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
    }

    /// IMD Register bits
    namespace imd_bits {
        constexpr uint32_t IMD0 = (1U << 0);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD1 = (1U << 1);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD2 = (1U << 2);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD3 = (1U << 3);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD4 = (1U << 4);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD5 = (1U << 5);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD6 = (1U << 6);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD7 = (1U << 7);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD8 = (1U << 8);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD9 = (1U << 9);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD10 = (1U << 10);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD11 = (1U << 11);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD12 = (1U << 12);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD13 = (1U << 13);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD14 = (1U << 14);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr uint32_t IMD15 = (1U << 15);  ///< Port [A/B/C/D/E] Edge or Level Detection Interrupt Control IMD[n] is used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce. If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrup. 1 = Level trigger interrupt 0 = Edge trigger interrupt If set pin as the level trigger interrupt, then only one level can be set on the registers GPIOx_IEN. If set both the level to trigger interrupt, the setting is ignored and no interrupt will occur The de-bounce function is valid for edge triggered interrupt. If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
    }

    /// IEN Register bits
    namespace ien_bits {
        constexpr uint32_t IF_EN0 = (1U << 0);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN1 = (1U << 1);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN2 = (1U << 2);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN3 = (1U << 3);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN4 = (1U << 4);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN5 = (1U << 5);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN6 = (1U << 6);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN7 = (1U << 7);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN8 = (1U << 8);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN9 = (1U << 9);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN10 = (1U << 10);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN11 = (1U << 11);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN12 = (1U << 12);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN13 = (1U << 13);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN14 = (1U << 14);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IF_EN15 = (1U << 15);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Falling Edge or Input Level Low IF_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IF_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "low" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "high-to-low" will generate the interrupt. 1 = Enable the PIN[n] state low-level or high-to-low change interrupt 0 = Disable the PIN[n] state low-level or high-to-low change interrupt
        constexpr uint32_t IR_EN0 = (1U << 16);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN1 = (1U << 17);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN2 = (1U << 18);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN3 = (1U << 19);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN4 = (1U << 20);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN5 = (1U << 21);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN6 = (1U << 22);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN7 = (1U << 23);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN8 = (1U << 24);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN9 = (1U << 25);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN10 = (1U << 26);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN11 = (1U << 27);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN12 = (1U << 28);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN13 = (1U << 29);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN14 = (1U << 30);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
        constexpr uint32_t IR_EN15 = (1U << 31);  ///< Port [A/B/C/D/E] Interrupt Enable by Input Rising Edge or Input Level High IR_EN[n] used to enable the interrupt for each of the corresponding input GPIO_PIN[n]. Set bit to 1 also enable the pin wakeup function When set the IR_EN[n] bit to 1: If the interrupt is level trigger, the input PIN[n] state at level "high" will generate the interrupt. If the interrupt is edge trigger, the input PIN[n] state change from "low-to-high" will generate the interrupt. 1 = Enable the PIN[n] level-high or low-to-high interrupt 0 = Disable the PIN[n] level-high or low-to-high interrupt.
    }

    /// ISRC Register bits
    namespace isrc_bits {
        constexpr uint32_t ISRC0 = (1U << 0);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC1 = (1U << 1);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC2 = (1U << 2);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC3 = (1U << 3);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC4 = (1U << 4);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC5 = (1U << 5);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC6 = (1U << 6);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC7 = (1U << 7);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC8 = (1U << 8);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC9 = (1U << 9);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC10 = (1U << 10);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC11 = (1U << 11);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC12 = (1U << 12);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC13 = (1U << 13);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC14 = (1U << 14);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
        constexpr uint32_t ISRC15 = (1U << 15);  ///< Port [A/B/C/D/E] Interrupt Trigger Source Indicator Read : 1 = Indicates GPIOx[n] generate an interrupt 0 = No interrupt at GPIOx[n] Write : 1= Clear the correspond pending interrupt 0= No action
    }

}

// ============================================================================
// GPB Peripheral
// ============================================================================

namespace gpb {
    /// Base addresses
    constexpr uint32_t GPB_BASE = 0x50004040;
    constexpr uint32_t GPB_BITS_BASE = 0x50004240;

    /// GPB Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPB = reinterpret_cast<Registers*>(GPB_BASE);
    inline Registers* GPB_BITS = reinterpret_cast<Registers*>(GPB_BITS_BASE);

}

// ============================================================================
// GPC Peripheral
// ============================================================================

namespace gpc {
    /// Base addresses
    constexpr uint32_t GPC_BASE = 0x50004080;
    constexpr uint32_t GPC_BITS_BASE = 0x50004280;

    /// GPC Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPC = reinterpret_cast<Registers*>(GPC_BASE);
    inline Registers* GPC_BITS = reinterpret_cast<Registers*>(GPC_BITS_BASE);

}

// ============================================================================
// GPD Peripheral
// ============================================================================

namespace gpd {
    /// Base addresses
    constexpr uint32_t GPD_BASE = 0x500040C0;
    constexpr uint32_t GPD_BITS_BASE = 0x500042C0;

    /// GPD Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPD = reinterpret_cast<Registers*>(GPD_BASE);
    inline Registers* GPD_BITS = reinterpret_cast<Registers*>(GPD_BITS_BASE);

}

// ============================================================================
// GPE Peripheral
// ============================================================================

namespace gpe {
    /// Base addresses
    constexpr uint32_t GPE_BASE = 0x50004100;
    constexpr uint32_t GPE_BITS_BASE = 0x50004300;

    /// GPE Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* GPE = reinterpret_cast<Registers*>(GPE_BASE);
    inline Registers* GPE_BITS = reinterpret_cast<Registers*>(GPE_BITS_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIO_BASE = 0x50004180;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t DBNCECON;  ///< Offset: 0x00 - External Interrupt De-bounce Control
    };

    /// Peripheral instances
    inline Registers* GPIO = reinterpret_cast<Registers*>(GPIO_BASE);

    // Bit definitions
    /// DBNCECON Register bits
    namespace dbncecon_bits {
        constexpr uint32_t DBCLKSEL = (4 << 0);  ///< De-bounce sampling cycle selection DBCLKSEL	Description	 0	Sample interrupt input once per 1 clocks	 1	Sample interrupt input once per 2 clocks	 2	Sample interrupt input once per 4 clocks	 3	Sample interrupt input once per 8 clocks	 4	Sample interrupt input once per 16 clocks	 5	Sample interrupt input once per 32 clocks	 6	Sample interrupt input once per 64 clocks	 7	Sample interrupt input once per 128 clocks	 8	Sample interrupt input once per 256 clocks	 9	Sample interrupt input once per 2*256 clocks	 10	Sample interrupt input once per 4*256clocks	 11	Sample interrupt input once per 8*256 clocks	 12	Sample interrupt input once per 16*256 clocks	 13	Sample interrupt input once per 32*256 clocks	 14	Sample interrupt input once per 64*256 clocks	 15	Sample interrupt input once per 128*256 clocks
        constexpr uint32_t DBCLKSRC = (1U << 4);  ///< De-bounce counter clock source select 1 = De-bounce counter clock source is the internal 10 KHz clock 0 = De-bounce counter clock source is the HCLK
        constexpr uint32_t ICLK_ON = (1U << 5);  ///< Interrupt clock On mode Set this bit to 0 will disable the interrupt generate circuit clock, if the pin[n] interrupt is disabled 1 = Interrupt generated circuit clock always enable 0 = Disable the clock if the GPIOA/B/C/D/E[n] interrupt is disabled
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C0_BASE = 0x40020000;
    constexpr uint32_t I2C1_BASE = 0x40120000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t I2CON;  ///< Offset: 0x00 - I2C Control Register
        volatile uint32_t I2CADDR0;  ///< Offset: 0x04 - I2C Slave Address Register0
        volatile uint32_t I2CDAT;  ///< Offset: 0x08 - I2C Data Register
        volatile uint32_t I2CSTATUS;  ///< Offset: 0x0C - I2C Status Register
        volatile uint32_t I2CLK;  ///< Offset: 0x10 - I2C Clock Divided Register
        volatile uint32_t I2CTOC;  ///< Offset: 0x14 - I2C Time-Out Control Register
        volatile uint32_t I2CADDR1;  ///< Offset: 0x18 - I2C Slave address Register1
        volatile uint32_t I2CADDR2;  ///< Offset: 0x1C - I2C Slave address Register2
        volatile uint32_t I2CADDR3;  ///< Offset: 0x20 - I2C Slave address Register3
        volatile uint32_t I2CADM0;  ///< Offset: 0x24 - I2C Slave Address Mask Register0
        volatile uint32_t I2CADM1;  ///< Offset: 0x28 - I2C Slave Address Mask Register1
        volatile uint32_t I2CADM2;  ///< Offset: 0x2C - I2C Slave Address Mask Register2
        volatile uint32_t I2CADM3;  ///< Offset: 0x30 - I2C Slave Address Mask Register3
    };

    /// Peripheral instances
    inline Registers* I2C0 = reinterpret_cast<Registers*>(I2C0_BASE);
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);

    // Bit definitions
    /// I2CON Register bits
    namespace i2con_bits {
        constexpr uint32_t AA = (1U << 2);  ///< Assert Acknowledge Control Bit When AA=1 prior to address or data received, an acknowledged (low level to SDA) will be returned during the acknowledge clock pulse on the SCL line when 1.) A slave is acknowledging the address sent from master, 2.) The receiver devices are acknowledging the data sent by transmitter. When AA=0 prior to address or data received, a Not acknowledged (high level to SDA) will be returned during the acknowledge clock pulse on the SCL line.
        constexpr uint32_t SI = (1U << 3);  ///< I2C Interrupt Flag When a new I2C state is present in the I2CSTATUS register, the SI flag is set by hardware, and if bit EI (I2CON [7]) is set, the I2C interrupt is requested. SI must be cleared by software. Clear SI is by writing 1 to this bit.
        constexpr uint32_t STO = (1U << 4);  ///< I2C STOP Control Bit In master mode, setting STO to transmit a STOP condition to bus then I2C hardware will check the bus condition if a STOP condition is detected this bit will be cleared by hardware automatically. In a slave mode, setting STO resets I2C hardware to the defined "not addressed" slave mode. This means it is NO LONGER in the slave receiver mode to receive data from the master transmit device.
        constexpr uint32_t STA = (1U << 5);  ///< I2C START Control Bit Setting STA to logic 1 to enter master mode, the I2C hardware sends a START or repeat START condition to bus when the bus is free.
        constexpr uint32_t ENSI = (1U << 6);  ///< I2C Controller Enable Bit 1 = Enable 0 = Disable Set to enable I2C serial function block. When ENSI=1 the I2C serial function enables. The multi-function pin function of SDA and SCL must set to I2C function first.
        constexpr uint32_t EI = (1U << 7);  ///< Enable Interrupt 1 = Enable I2C interrupt 0 = Disable I2C interrupt
    }

    /// I2CADDR0 Register bits
    namespace i2caddr0_bits {
        constexpr uint32_t GC = (1U << 0);  ///< General Call Function 0 = Disable General Call Function. 1 = Enable General Call Function.
        constexpr uint32_t I2CADDR = (7 << 1);  ///< I2C Address register The content of this register is irrelevant when I2C is in master mode. In the slave mode, the seven most significant bits must be loaded with the MCU's own address. The I2C hardware will react if either of the address is matched.
    }

    /// I2CDAT Register bits
    namespace i2cdat_bits {
        constexpr uint32_t I2CDAT = (8 << 0);  ///< I2C Data Register Bit[7:0] is located with the 8-bit transferred data of I2C serial port.
    }

    /// I2CSTATUS Register bits
    namespace i2cstatus_bits {
        constexpr uint32_t I2CSTATUS = (8 << 0);  ///< I2C Status Register The status register of I2C: The three least significant bits are always 0. The five most significant bits contain the status code. There are 26 possible status codes. When I2STATUS contains F8H, no serial interrupt is requested. All other I2CSTATUS values correspond to defined I2C states. When each of these states is entered, a status interrupt is requested (SI = 1). A valid status code is present in I2CSTATUS one machine cycle after SI is set by hardware and is still present one machine cycle after SI has been reset by software. In addition, states 00H stands for a Bus Error. A Bus Error occurs when a START or STOP condition is present at an illegal position in the formation frame. Example of illegal position are during the serial transfer of an address byte, a data byte or an acknowledge bit.
    }

    /// I2CLK Register bits
    namespace i2clk_bits {
        constexpr uint32_t I2CLK = (8 << 0);  ///< I2C Clock Divided Register The I2C clock rate bits: Data Baud Rate of I2C = system clock /(4x(I2CLK+1)).
    }

    /// I2CTOC Register bits
    namespace i2ctoc_bits {
        constexpr uint32_t TIF = (1U << 0);  ///< Time-Out Flag 1 = Time-Out falg is set by H/W. It can interrupt CPU. 0 = S/W can clear the flag.
        constexpr uint32_t DIV4 = (1U << 1);  ///< Time-Out counter input clock is divided by 4 1 = Enable 0 = Disable When Enable, The time-Out period is extend 4 times.
        constexpr uint32_t ENTI = (1U << 2);  ///< Time-out counter is enabled/disable 1 = Enable 0 = Disable When Enable, the 14 bit time-out counter will start counting when SI is clear. Setting flag SI to high will reset counter and re-start up counting after SI is cleared.
    }

    /// I2CADDR1 Register bits
    namespace i2caddr1_bits {
        constexpr uint32_t GC = (1U << 0);  ///< General Call Function 0 = Disable General Call Function. 1 = Enable General Call Function.
        constexpr uint32_t I2CADDR = (7 << 1);  ///< I2C Address register The content of this register is irrelevant when I2C is in master mode. In the slave mode, the seven most significant bits must be loaded with the MCU's own address. The I2C hardware will react if either of the address is matched.
    }

    /// I2CADDR2 Register bits
    namespace i2caddr2_bits {
        constexpr uint32_t GC = (1U << 0);  ///< General Call Function 0 = Disable General Call Function. 1 = Enable General Call Function.
        constexpr uint32_t I2CADDR = (7 << 1);  ///< I2C Address register The content of this register is irrelevant when I2C is in master mode. In the slave mode, the seven most significant bits must be loaded with the MCU's own address. The I2C hardware will react if either of the address is matched.
    }

    /// I2CADDR3 Register bits
    namespace i2caddr3_bits {
        constexpr uint32_t GC = (1U << 0);  ///< General Call Function 0 = Disable General Call Function. 1 = Enable General Call Function.
        constexpr uint32_t I2CADDR = (7 << 1);  ///< I2C Address register The content of this register is irrelevant when I2C is in master mode. In the slave mode, the seven most significant bits must be loaded with the MCU's own address. The I2C hardware will react if either of the address is matched.
    }

    /// I2CADM0 Register bits
    namespace i2cadm0_bits {
        constexpr uint32_t I2CADM = (7 << 1);  ///< I2C Address Mask register 1 = Mask enable (the received corresponding address bit is don't care.) 0 = Mask disable (the received corresponding register bit should be exact the same as address register.) I2C bus controllers support multiple address recognition with four address mask reg. When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care. If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
    }

    /// I2CADM1 Register bits
    namespace i2cadm1_bits {
        constexpr uint32_t I2CADM = (7 << 1);  ///< I2C Address Mask register 1 = Mask enable (the received corresponding address bit is don't care.) 0 = Mask disable (the received corresponding register bit should be exact the same as address register.) I2C bus controllers support multiple address recognition with four address mask reg. When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care. If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
    }

    /// I2CADM2 Register bits
    namespace i2cadm2_bits {
        constexpr uint32_t I2CADM = (7 << 1);  ///< I2C Address Mask register 1 = Mask enable (the received corresponding address bit is don't care.) 0 = Mask disable (the received corresponding register bit should be exact the same as address register.) I2C bus controllers support multiple address recognition with four address mask reg. When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care. If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
    }

    /// I2CADM3 Register bits
    namespace i2cadm3_bits {
        constexpr uint32_t I2CADM = (7 << 1);  ///< I2C Address Mask register 1 = Mask enable (the received corresponding address bit is don't care.) 0 = Mask disable (the received corresponding register bit should be exact the same as address register.) I2C bus controllers support multiple address recognition with four address mask reg. When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care. If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
    }

}

// ============================================================================
// I2S Peripheral
// ============================================================================

namespace i2s {
    /// Base addresses
    constexpr uint32_t I2S_BASE = 0x401A0000;

    /// I2S Register structure
    struct Registers {
        volatile uint32_t I2S_CON;  ///< Offset: 0x00 - I2S Control Register
        volatile uint32_t I2S_CLKDIV;  ///< Offset: 0x04 - I2S Clock Divider Register
        volatile uint32_t I2S_IE;  ///< Offset: 0x08 - I2S Interrupt Enable Register
        volatile uint32_t I2S_STATUS;  ///< Offset: 0x0C - I2S Status Register
        volatile uint32_t I2S_TXFIFO;  ///< Offset: 0x10 - I2S Transmit FIFO Register
        volatile uint32_t I2S_RXFIFO;  ///< Offset: 0x14 - I2S Receive FIFO Register
    };

    /// Peripheral instances
    inline Registers* I2S = reinterpret_cast<Registers*>(I2S_BASE);

    // Bit definitions
    /// I2S_CON Register bits
    namespace i2s_con_bits {
        constexpr uint32_t I2SEN = (1U << 0);  ///< Enable I2S Controller 1 = Enable 0 = Disable
        constexpr uint32_t TXEN = (1U << 1);  ///< Transmit Enable 1 = Enable data transmit 0 = Disable data transmit
        constexpr uint32_t RXEN = (1U << 2);  ///< Receive Enable 1 = Enable data receive 0 = Disable data receive
        constexpr uint32_t MUTE = (1U << 3);  ///< Transmit Mute Enable 1 = Transmit channel zero 0 = Transmit data is shifted from buffer
        constexpr uint32_t WORDWIDTH = (2 << 4);  ///< Word Width 00 = data is 8 bit 01 = data is 16 bit 10 = data is 24 bit 11 = data is 32 bit
        constexpr uint32_t MONO = (1U << 6);  ///< Monaural Data 1 = Data is monaural format 0 = Data is stereo format
        constexpr uint32_t FORMAT = (1U << 7);  ///< Data Format 1 = MSB justified data format 0 = I2S data format
        constexpr uint32_t SLAVE = (1U << 8);  ///< Slave Mode I2S can operate as master or slave. For master mode, I2S_BCLK and I2S_LRCLK pins are output mode and send bit clock from NuMicro(TM) NUC100 series to Audio CODEC chip. In slave mode, I2S_BCLK and I2S_LRCLK pins are input mode and I2S_BCLK and I2S_LRCLK signals are received from outer Audio CODEC chip. 1 = Slave mode 0 = Master mode
        constexpr uint32_t TXTH = (3 << 9);  ///< Transmit FIFO Threshold Level If remain data word (32 bits) in transmit FIFO is the same or less than threshold level then TXTHI flag is set. 000 = 0 word data in transmit FIFO 001 = 1 word data in transmit FIFO 010 = 2 words data in transmit FIFO 011 = 3 words data in transmit FIFO 100 = 4 word data in transmit FIFO 101 = 5 word data in transmit FIFO 110 = 6 word data in transmit FIFO 111 = 7 word data in transmit FIFO
        constexpr uint32_t RXTH = (3 << 12);  ///< Receive FIFO Threshold Level When received data word(s) in buffer is equal or higher than threshold level then RXTHI flag is set. 000 = 1 word data in receive FIFO 001 = 2 word data in receive FIFO 010 = 3 word data in receive FIFO 011 = 4 word data in receive FIFO 100 = 5 word data in receive FIFO 101 = 6 word data in receive FIFO 110 = 7 word data in receive FIFO 111 = 8 word data in receive FIFO
        constexpr uint32_t MCLKEN = (1U << 15);  ///< Master Clock Enable If NuMicro(TM) NUC100 series external crystal clock is frequency 2*N*256fs then software can program MCLK_DIV[2:0] in I2S_CLKDIV register to get 256fs clock to audio codec chip. 1 = Enable master clock 0 = Disable master clock
        constexpr uint32_t RCHZCEN = (1U << 16);  ///< Right channel zero cross detect enable If this bit is set to 1, when left channel data sign bit change or next shift data bits are all zero then RZCF flag in I2S_STATUS register is set to 1. 1 = Enable right channel zero cross detect 0 = Disable right channel zero cross detect
        constexpr uint32_t LCHZCEN = (1U << 17);  ///< Left channel zero cross detect enable If this bit is set to 1, when left channel data sign bit change or next shift data bits are all zero then LZCF flag in I2S_STATUS register is set to 1. 1 = Enable left channel zero cross detect 0 = Disable left channel zero cross detect
        constexpr uint32_t CLR_TXFIFO = (1U << 18);  ///< Clear Transmit FIFO Write 1 to clear transmit FIFO, internal pointer is reset to FIFO start point, and TXFIFO_LEVEL[3:0] returns to zero and transmit FIFO becomes empty but data in transmit FIFO is not changed. This bit is clear by hardware automatically, read it return zero.
        constexpr uint32_t CLR_RXFIFO = (1U << 19);  ///< Clear Receive FIFO Write 1 to clear receive FIFO, internal pointer is reset to FIFO start point, and RXFIFO_LEVEL[3:0] returns to zero and receive FIFO becomes empty. This bit is clear by hardware automatically, read it return zero.
        constexpr uint32_t TXDMA = (1U << 20);  ///< Enable Transmit DMA When TX DMA is enabled, I2S requests DMA to transfer data from SRAM to transmit FIFO if FIFO is not full. 1 = Enable TX DMA 0 = Disable TX DMA
        constexpr uint32_t RXDMA = (1U << 21);  ///< Enable Receive DMA When RX DMA is enabled, I2S requests DMA to transfer data from receive FIFO to SRAM if FIFO is not empty. 1 = Enable RX DMA 0 = Disable RX DMA
    }

    /// I2S_CLKDIV Register bits
    namespace i2s_clkdiv_bits {
        constexpr uint32_t MCLK_DIV = (3 << 0);  ///< Master Clock Divider If chip external crystal frequency is (2xMCLK_DIV)*256fs then software can program these bits to generate 256fs clock frequency to audio codec chip. If MCLK_DIV is set to 0, MCLK is the same as external clock input. For example, sampling rate is 24 kHz and chip external crystal clock is 12.288 MHz, set MCLK_DIV=1. F_MCLK = F_I2SCLK/(2x(MCLK_DIV)) (When MCLK_DIV is >= 1 ) F_MCLK = F_I2SCLK (When MCLK_DIV is set to 0 )
        constexpr uint32_t BCLK_DIV = (8 << 8);  ///< Bit Clock Divider If I2S operates in master mode, bit clock is provided by NuMicro(TM) NUC100 series. Software can program these bits to generate sampling rate clock frequency. F_BCLK = F_I2SCLK /(2x(BCLK_DIV + 1))
    }

    /// I2S_IE Register bits
    namespace i2s_ie_bits {
        constexpr uint32_t RXUDFIE = (1U << 0);  ///< Receive FIFO underflow interrupt enable If software read receive FIFO when it is empty then RXUDF flag in I2SSTATUS register is set to 1. 1 = Enable interrupt 0 = Disable interrupt
        constexpr uint32_t RXOVFIE = (1U << 1);  ///< Receive FIFO overflow interrupt enable 1 = Enable interrupt 0 = Disable interrupt
        constexpr uint32_t RXTHIE = (1U << 2);  ///< Receive FIFO threshold level interrupt When data word in receive FIFO is equal or higher then RXTH[2:0] and the RXTHI bit is set to 1. If RXTHIE bit is enabled, interrupt occur. 1 = Enable interrupt 0 = Disable interrupt
        constexpr uint32_t TXUDFIE = (1U << 8);  ///< Transmit FIFO underflow interrupt enable Interrupt occurs if this bit is set to 1 and transmit FIFO underflow flag is set to 1. 1 = Enable interrupt 0 = Disable interrupt
        constexpr uint32_t TXOVFIE = (1U << 9);  ///< Transmit FIFO overflow interrupt enable Interrupt occurs if this bit is set to 1 and transmit FIFO overflow flag is set to 1. 1 = Enable interrupt 0 = Disable interrupt
        constexpr uint32_t TXTHIE = (1U << 10);  ///< Transmit FIFO threshold level interrupt enable Interrupt occurs if this bit is set to 1 and data words in transmit FIFO is less than TXTH[2:0]. 1 = Enable interrupt 0 = Disable interrupt
        constexpr uint32_t RZCIE = (1U << 11);  ///< Right channel zero cross interrupt enable Interrupt occurs if this bit is set to 1 and right channel zero cross. 1 = Enable interrupt 0 = Disable interrupt
        constexpr uint32_t LZCIE = (1U << 12);  ///< Left channel zero cross interrupt enable Interrupt occurs if this bit is set to 1 and left channel zero cross. 1 = Enable interrupt 0 = Disable interrupt
    }

    /// I2S_STATUS Register bits
    namespace i2s_status_bits {
        constexpr uint32_t I2SINT = (1U << 0);  ///< I2S Interrupt flag 1 = I2S interrupt 0 = No I2S interrup It is wire-OR of I2STXINT and I2SRXINT bits. This bit is read only.
        constexpr uint32_t I2SRXINT = (1U << 1);  ///< I2S receive interrupt 1 = Receive interrupt 0 = No receive interrupt This bit is read only
        constexpr uint32_t I2STXINT = (1U << 2);  ///< I2S transmit interrupt 1 = Transmit interrupt 0 = No transmit interrupt This bit is read only
        constexpr uint32_t RIGHT = (1U << 3);  ///< Right channel This bit indicate current transmit data is belong to right channel. 1 = Right channel 0 = Left channel This bit is read only.
        constexpr uint32_t RXUDF = (1U << 8);  ///< Receive FIFO underflow flag Read receive FIFO when it is empty, this bit set to 1 indicate underflow occur. 1 = Underflow occur 0 = No underflow occur Write 1 to clear this bit.
        constexpr uint32_t RXOVF = (1U << 9);  ///< Receive FIFO overflow flag When receive FIFO is full and receive hardware attempt write to data into receive FIFO then this bit is set to 1, data in 1st buffer is overwrote. 1 = Overflow occur 0 = No overflow occur Write 1 to clear this bit.
        constexpr uint32_t RXTHF = (1U << 10);  ///< Receive FIFO threshold flag When data word(s) in receive FIFO is equal or higher than threshold value set in RXTH[2:0] the RXTHF bit becomes to 1. It keeps at 1 till RXFIFO_LEVEL[3:0] less than RXTH[1:0] after software read RXFIFO register. 1 = Data word(s) in FIFO is equal or higher than threshold level 0 = Data word(s) in FIFO is lower than threshold level This bit is read only.
        constexpr uint32_t RXFULL = (1U << 11);  ///< Receive FIFO full This bit reflect data words number in receive FIFO is 8. 1 = Full 0 = Not full This bit is read only.
        constexpr uint32_t RXEMPTY = (1U << 12);  ///< Receive FIFO empty This bit reflects data words number in receive FIFO is zero. 1 = Empty 0 = Not empty This bit is read only.
        constexpr uint32_t TXUDF = (1U << 16);  ///< Transmit FIFO underflow flag When transmit FIFO is empty and shift logic hardware read data from data FIFO causes this set to 1. 1 = Underflow 0 = No underflow Software can write 1 to clear this bit.
        constexpr uint32_t TXOVF = (1U << 17);  ///< Transmit FIFO overflow flag Write data to transmit FIFO when it is full and this bit set to 1. 1 = Overflow 0 = No overflow Software can write 1 to clear this bit.
        constexpr uint32_t TXTHF = (1U << 18);  ///< Transmit FIFO threshold flag When data word(s) in transmit FIFO is equal or lower than threshold value set in TXTH[2:0] the TXTHF bit becomes to 1. It keeps at 1 till TXFIFO_LEVEL[3:0] is higher than TXTH[1:0] after software write TXFIFO register. 1 = Data word(s) in FIFO is equal or lower than threshold level 0 = Data word(s) in FIFO is higher than threshold level This bit is read only.
        constexpr uint32_t TXFULL = (1U << 19);  ///< Transmit FIFO full This bit reflect data word number in transmit FIFO is 8. 1 = Full 0 = Not full This bit is read only.
        constexpr uint32_t TXEMPTY = (1U << 20);  ///< Transmit FIFO empty This bit reflect data word number in transmit FIFO is zero. 1 = Empty 0 = Not empty This bit is read only.
        constexpr uint32_t TXBUSY = (1U << 21);  ///< Transmit Busy This bit is clear to 0 when all data in transmit FIFO and shift buffer is shifted out. And set to 1 when 1st data is load to shift buffer. 1 = Transmit shift buffer is busy 0 = Transmit shift buffer is empty This bit is read only.
        constexpr uint32_t RZCF = (1U << 22);  ///< Right channel zero cross flag It indicates right channel next sample data sign bit is changed or all data bits are zero. 1 = Right channel zero cross is detected 0 = No zero cross Software can write 1 to clear this bit to zero.
        constexpr uint32_t LZCF = (1U << 23);  ///< Left channel zero cross flag It indicates left channel next sample data sign bit is changed or all data bits are zero. 1 = Left channel zero cross is detected 0 = No zero cross Software can write 1 to clear this bit to zero.
        constexpr uint32_t RX_LEVEL = (4 << 24);  ///< Receive FIFO level These bits indicate word number in receive FIFO. 0000 = No data 0001 = 1 word in receive FIFO 0010 = 2 word in receive FIFO 0011 = 3 word in receive FIFO 0100 = 4 word in receive FIFO 0101 = 5 word in receive FIFO 0110 = 6 word in receive FIFO 0111 = 7 word in receive FIFO 1000 = 8 word in receive FIFO
        constexpr uint32_t TX_LEVEL = (4 << 28);  ///< Transmit FIFO level These bits indicate word number in Transmit FIFO. 0000 = No data 0001 = 1 word in Transmit FIFO 0010 = 2 word in Transmit FIFO 0011 = 3 word in Transmit FIFO 0100 = 4 word in Transmit FIFO 0101 = 5 word in Transmit FIFO 0110 = 6 word in Transmit FIFO 0111 = 7 word in Transmit FIFO 1000 = 8 word in Transmit FIFO
    }

    /// I2S_TXFIFO Register bits
    namespace i2s_txfifo_bits {
        constexpr uint32_t TXFIFO = (32 << 0);  ///< Transmit FIFO register I2S contains 8 words (8x32 bit) data buffer for data transmit. Write data to this register to prepare data for transmit. The remain word number is indicated by TX_LEVEL[3:0] in I2S_STATUS.
    }

    /// I2S_RXFIFO Register bits
    namespace i2s_rxfifo_bits {
        constexpr uint32_t RXFIFO = (32 << 0);  ///< Receive FIFO register I2S contains 8 words (8x32 bit) data buffer for data receive. Read this register to get data in FIFO. The remaining data word number is indicated by RX_LEVEL[3:0] in I2S_STATUS register.
    }

}

// ============================================================================
// INT Peripheral
// ============================================================================

namespace int {
    /// Base addresses
    constexpr uint32_t INT_BASE = 0x50000300;

    /// INT Register structure
    struct Registers {
        volatile uint32_t IRQ0_SRC;  ///< Offset: 0x00 - MCU IRQ0 (BOD) interrupt source identify
        volatile uint32_t IRQ1_SRC;  ///< Offset: 0x04 - MCU IRQ1 (WDG) interrupt source identify
        volatile uint32_t IRQ2_SRC;  ///< Offset: 0x08 - MCU IRQ2 (EINT0) interrupt source identify
        volatile uint32_t IRQ3_SRC;  ///< Offset: 0x0C - MCU IRQ3 (EINT1) interrupt source identify
        volatile uint32_t IRQ4_SRC;  ///< Offset: 0x10 - MCU IRQ4 (GPA/B) interrupt source identify
        volatile uint32_t IRQ5_SRC;  ///< Offset: 0x14 - MCU IRQ5 (GPC/D/E) interrupt source identify
        volatile uint32_t IRQ6_SRC;  ///< Offset: 0x18 - MCU IRQ6 (PWMA) interrupt source identify
        volatile uint32_t IRQ7_SRC;  ///< Offset: 0x1C - MCU IRQ7 (PWMB) interrupt source identify
        volatile uint32_t IRQ8_SRC;  ///< Offset: 0x20 - MCU IRQ8 (TMR0) interrupt source identify
        volatile uint32_t IRQ9_SRC;  ///< Offset: 0x24 - MCU IRQ9 (TMR1) interrupt source identify
        volatile uint32_t IRQ10_SRC;  ///< Offset: 0x28 - MCU IRQ10 (TMR2) interrupt source identify
        volatile uint32_t IRQ11_SRC;  ///< Offset: 0x2C - MCU IRQ11 (TMR3) interrupt source identify
        volatile uint32_t IRQ12_SRC;  ///< Offset: 0x30 - MCU IRQ12 (URT0) interrupt source identify
        volatile uint32_t IRQ13_SRC;  ///< Offset: 0x34 - MCU IRQ13 (URT1) interrupt source identify
        volatile uint32_t IRQ14_SRC;  ///< Offset: 0x38 - MCU IRQ14 (SPI0) interrupt source identify
        volatile uint32_t IRQ15_SRC;  ///< Offset: 0x3C - MCU IRQ15 (SPI1) interrupt source identify
        volatile uint32_t IRQ16_SRC;  ///< Offset: 0x40 - MCU IRQ16 (SPI2) interrupt source identify
        volatile uint32_t IRQ17_SRC;  ///< Offset: 0x44 - MCU IRQ17 (SPI3) interrupt source identify
        volatile uint32_t IRQ18_SRC;  ///< Offset: 0x48 - MCU IRQ18 (I2C0) interrupt source identify
        volatile uint32_t IRQ19_SRC;  ///< Offset: 0x4C - MCU IRQ19 (I2C1) interrupt source identify
        volatile uint32_t IRQ20_SRC;  ///< Offset: 0x50 - MCU IRQ20 (CAN0) interrupt source identify
        volatile uint32_t IRQ21_SRC;  ///< Offset: 0x54 - MCU IRQ21 (Reserved) interrupt source identity
        volatile uint32_t IRQ22_SRC;  ///< Offset: 0x58 - MCU IRQ22 (Reserved) interrupt source identify
        volatile uint32_t IRQ23_SRC;  ///< Offset: 0x5C - MCU IRQ23 (USBD) interrupt source identify
        volatile uint32_t IRQ24_SRC;  ///< Offset: 0x60 - MCU IRQ24 (PS2) interrupt source identify
        volatile uint32_t IRQ25_SRC;  ///< Offset: 0x64 - MCU IRQ25 (ACMP) interrupt source identify
        volatile uint32_t IRQ26_SRC;  ///< Offset: 0x68 - MCU IRQ26 (PDMA) interrupt source identify
        volatile uint32_t IRQ27_SRC;  ///< Offset: 0x6C - MCU IRQ27 (Reserved) interrupt source identify
        volatile uint32_t IRQ28_SRC;  ///< Offset: 0x70 - MCU IRQ28 (PWRWU) interrupt source identify
        volatile uint32_t IRQ29_SRC;  ///< Offset: 0x74 - MCU IRQ29 (ADC) interrupt source identify
        volatile uint32_t IRQ30_SRC;  ///< Offset: 0x78 - MCU IRQ30 (Reserved) interrupt source identify
        volatile uint32_t IRQ31_SRC;  ///< Offset: 0x7C - MCU IRQ31 (RTC) interrupt source identify
        volatile uint32_t NMI_SEL;  ///< Offset: 0x80 - NMI source interrupt select control register
        volatile uint32_t MCU_IRQ;  ///< Offset: 0x84 - MCU IRQ Number identify register
    };

    /// Peripheral instances
    inline Registers* INT = reinterpret_cast<Registers*>(INT_BASE);

    // Bit definitions
    /// IRQ0_SRC Register bits
    namespace irq0_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: BOD_INT
    }

    /// IRQ1_SRC Register bits
    namespace irq1_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: WDG_INT
    }

    /// IRQ2_SRC Register bits
    namespace irq2_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: EINT0 - external interrupt 0 from PB.14
    }

    /// IRQ3_SRC Register bits
    namespace irq3_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: EINT1 - external interrupt 1 from PB.15
    }

    /// IRQ4_SRC Register bits
    namespace irq4_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: GPB_INT Bit0: GPA_INT
    }

    /// IRQ5_SRC Register bits
    namespace irq5_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: GPE_INT Bit1: GPD_INT Bit0: GPC_INT
    }

    /// IRQ6_SRC Register bits
    namespace irq6_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit3: PWM3_INT Bit2: PWM2_INT Bit1: PWM1_INT Bit0: PWM0_INT
    }

    /// IRQ7_SRC Register bits
    namespace irq7_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit3: PWM7_INT Bit2: PWM6_INT Bit1: PWM5_INT Bit0: PWM4_INT
    }

    /// IRQ8_SRC Register bits
    namespace irq8_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: TMR0_INT
    }

    /// IRQ9_SRC Register bits
    namespace irq9_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: TMR1_INT
    }

    /// IRQ10_SRC Register bits
    namespace irq10_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: TMR2_INT
    }

    /// IRQ11_SRC Register bits
    namespace irq11_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: TMR3_INT
    }

    /// IRQ12_SRC Register bits
    namespace irq12_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: URT0_INT
    }

    /// IRQ13_SRC Register bits
    namespace irq13_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: URT1_INT
    }

    /// IRQ14_SRC Register bits
    namespace irq14_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: SPI0_INT
    }

    /// IRQ15_SRC Register bits
    namespace irq15_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: SPI1_INT
    }

    /// IRQ16_SRC Register bits
    namespace irq16_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: SPI2_INT
    }

    /// IRQ17_SRC Register bits
    namespace irq17_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: SPI3_INT
    }

    /// IRQ18_SRC Register bits
    namespace irq18_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: I2C0_INT
    }

    /// IRQ19_SRC Register bits
    namespace irq19_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: I2C1_INT
    }

    /// IRQ20_SRC Register bits
    namespace irq20_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: CAN0_INT
    }

    /// IRQ21_SRC Register bits
    namespace irq21_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Reserved
    }

    /// IRQ22_SRC Register bits
    namespace irq22_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Reserved
    }

    /// IRQ23_SRC Register bits
    namespace irq23_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: USBD_INT
    }

    /// IRQ24_SRC Register bits
    namespace irq24_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: PS2_INT
    }

    /// IRQ25_SRC Register bits
    namespace irq25_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: ACMP_INT
    }

    /// IRQ26_SRC Register bits
    namespace irq26_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: PDMA_INT
    }

    /// IRQ27_SRC Register bits
    namespace irq27_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: I2S_INT
    }

    /// IRQ28_SRC Register bits
    namespace irq28_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: PWRWU_INT
    }

    /// IRQ29_SRC Register bits
    namespace irq29_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: ADC_INT
    }

    /// IRQ30_SRC Register bits
    namespace irq30_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Reserved
    }

    /// IRQ31_SRC Register bits
    namespace irq31_src_bits {
        constexpr uint32_t INT_SRC = (3 << 0);  ///< Bit2: 0 Bit1: 0 Bit0: RTC_INT
    }

    /// NMI_SEL Register bits
    namespace nmi_sel_bits {
        constexpr uint32_t NMI_SEL = (5 << 0);  ///< The NMI interrupt to Cortex-M0 can be selected from one of the peripheral interrupt by setting NMI_SEL.
    }

    /// MCU_IRQ Register bits
    namespace mcu_irq_bits {
        constexpr uint32_t MCU_IRQ = (32 << 0);  ///< MCU IRQ Source Register The MCU_IRQ collect all the interrupts from the peripherals and generate the synchronous interrupt to MCU Cortex-M0. There are two modes to generate interrupt to MCU Cortex-M0, the normal mode and test mode. The MCU_IRQ collect all interrupt from each peripheral and synchronize them then interrupt the Cortex-M0. When the MCU_IRQ[n] is "0": Set MCU_IRQ[n] "1" will generate a interrupt to Cortex_M0 NVIC[n]. When the MCU_IRQ[n] is "1" (mean a interrupt is assert) set "1" to the MCU_bit[n] will clear the interrupt. Set MCU_IRQ[n] "0": no any effect
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t PDMA0_BASE = 0x50008000;
    constexpr uint32_t PDMA1_BASE = 0x50008100;
    constexpr uint32_t PDMA2_BASE = 0x50008200;
    constexpr uint32_t PDMA3_BASE = 0x50008300;
    constexpr uint32_t PDMA4_BASE = 0x50008400;
    constexpr uint32_t PDMA5_BASE = 0x50008500;
    constexpr uint32_t PDMA6_BASE = 0x50008600;
    constexpr uint32_t PDMA7_BASE = 0x50008700;
    constexpr uint32_t PDMA8_BASE = 0x50008800;
    constexpr uint32_t PDMA_GCR_BASE = 0x50008F00;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t PDMA_CSRx;  ///< Offset: 0x00 - PDMA Control and Status Register CHx
        volatile uint32_t PDMA_SARx;  ///< Offset: 0x04 - PDMA Transfer Source Address Register CHx
        volatile uint32_t PDMA_DARx;  ///< Offset: 0x08 - PDMA Transfer Destination Address Register CHx
        volatile uint32_t PDMA_BCRx;  ///< Offset: 0x0C - PDMA Transfer Byte Count Register CHx
        volatile uint32_t PDMA_POINTx;  ///< Offset: 0x10 - PDMA Internal Buffer Pointer Register CHx
        volatile uint32_t PDMA_CSARx;  ///< Offset: 0x14 - PDMA Current Source Address Register CHx
        volatile uint32_t PDMA_CDARx;  ///< Offset: 0x18 - PDMA Current Destination Address Register CHx
        volatile uint32_t PDMA_CBCRx;  ///< Offset: 0x1C - PDMA Current Byte Count Register CHx
        volatile uint32_t PDMA_IERx;  ///< Offset: 0x20 - PDMA Interrupt Enable Control Register CHx
        volatile uint32_t PDMA_ISRx;  ///< Offset: 0x24 - PDMA Interrupt Status Register CHx
        volatile uint32_t PDMA_SBUF0_cx;  ///< Offset: 0x80 - PDMA Shared Buffer FIFO 0 Register CHx
    };

    /// Peripheral instances
    inline Registers* PDMA0 = reinterpret_cast<Registers*>(PDMA0_BASE);
    inline Registers* PDMA1 = reinterpret_cast<Registers*>(PDMA1_BASE);
    inline Registers* PDMA2 = reinterpret_cast<Registers*>(PDMA2_BASE);
    inline Registers* PDMA3 = reinterpret_cast<Registers*>(PDMA3_BASE);
    inline Registers* PDMA4 = reinterpret_cast<Registers*>(PDMA4_BASE);
    inline Registers* PDMA5 = reinterpret_cast<Registers*>(PDMA5_BASE);
    inline Registers* PDMA6 = reinterpret_cast<Registers*>(PDMA6_BASE);
    inline Registers* PDMA7 = reinterpret_cast<Registers*>(PDMA7_BASE);
    inline Registers* PDMA8 = reinterpret_cast<Registers*>(PDMA8_BASE);
    inline Registers* PDMA_GCR = reinterpret_cast<Registers*>(PDMA_GCR_BASE);

    // Bit definitions
    /// PDMA_CSRx Register bits
    namespace pdma_csrx_bits {
        constexpr uint32_t PDMACEN = (1U << 0);  ///< PDMA Channel Enable Setting this bit to 1 enables PDMA's operation. If this bit is cleared, PDMA will ignore all PDMA request and force Bus Master into IDLE state. Note: SW_RST(PDMA_CSRx[1], x= 0~8) will clear this bit.
        constexpr uint32_t SW_RST = (1U << 1);  ///< Software Engine Reset 0 = Writing 0 to this bit has no effect. 1 = Writing 1 to this bit will reset the internal state machine and pointers. The contents of control register will not be cleared. This bit will auto clear after few clock cycles.
        constexpr uint32_t MODE_SEL = (2 << 2);  ///< PDMA Mode Select 00 = Memory to Memory mode (Memory-to-Memory). 01 = IP to Memory mode (APB-to-Memory). 10 = Memory to IP mode (Memory-to-APB).
        constexpr uint32_t SAD_SEL = (2 << 4);  ///< Transfer Source Address Direction Select 00 = Transfer Source address is incremented successively. 01 = Reserved. 10 = Transfer Source address is fixed (This feature can be used when data where transferred from a single source to multiple destinations). 11 = Reserved.
        constexpr uint32_t DAD_SEL = (2 << 6);  ///< Transfer Destination Address Direction Select 00 = Transfer Destination address is incremented successively. 01 = Reserved. 10 = Transfer Destination address is fixed (This feature can be used when data where transferred from multiple sources to a single destination). 11 = Reserved.
        constexpr uint32_t APB_TWS = (2 << 19);  ///< Peripheral transfer Width Select 00 = One word (32 bits) is transferred for every PDMA operation. 01 = One byte (8 bits) is transferred for every PDMA operation. 10 = One half-word (16 bits) is transferred for every PDMA operation. 11 = Reserved. Note: This field is meaningful only when MODE_SEL is IP to Memory mode (APB-to-Memory) or Memory to IP mode (Memory-to-APB).
        constexpr uint32_t TRIG_EN = (1U << 23);  ///< Trig_EN 0 = No effect. 1 = Enable PDMA data read or write transfer. Note: When PDMA transfer completed, this bit will be cleared automatically. If the bus error occurs, all PDMA transfer will be stopped. Software must reset all PDMA channel, and then trigger again.
    }

    /// PDMA_SARx Register bits
    namespace pdma_sarx_bits {
        constexpr uint32_t PDMA_SAR = (32 << 0);  ///< PDMA Transfer Source Address Register This field indicates a 32-bit source address of PDMA. Note : The source address must be word alignment
    }

    /// PDMA_DARx Register bits
    namespace pdma_darx_bits {
        constexpr uint32_t PDMA_DAR = (32 << 0);  ///< PDMA Transfer Destination Address Register This field indicates a 32-bit destination address of PDMA. Note : The destination address must be word alignment
    }

    /// PDMA_BCRx Register bits
    namespace pdma_bcrx_bits {
        constexpr uint32_t PDMA_BCR = (16 << 0);  ///< PDMA Transfer Byte Count Register This field indicates a 16-bit transfer byte count of PDMA.it must be word alignment.
    }

    /// PDMA_POINTx Register bits
    namespace pdma_pointx_bits {
        constexpr uint32_t PDMA_POINT = (4 << 0);  ///< PDMA Internal Buffer Pointer Register (Read Only) This field indicates the internal buffer pointer.
    }

    /// PDMA_CSARx Register bits
    namespace pdma_csarx_bits {
        constexpr uint32_t PDMA_CSAR = (32 << 0);  ///< PDMA Current Source Address Register (Read Only) This field indicates the source address where the PDMA transfer is just occurring.
    }

    /// PDMA_CDARx Register bits
    namespace pdma_cdarx_bits {
        constexpr uint32_t PDMA_CDAR = (32 << 0);  ///< PDMA Current Destination Address Register (Read Only) This field indicates the destination address where the PDMA transfer is just occurring.
    }

    /// PDMA_CBCRx Register bits
    namespace pdma_cbcrx_bits {
        constexpr uint32_t PDMA_CBCR = (16 << 0);  ///< PDMA Current Byte Count Register (Read Only) This field indicates the current remained byte count of PDMA. Note : SW_RST will clear this register value.
    }

    /// PDMA_IERx Register bits
    namespace pdma_ierx_bits {
        constexpr uint32_t TABORT_IE = (1U << 0);  ///< PDMA Read/Write Target Abort Interrupt Enable 0 = Disable target abort interrupt generation during PDMA transfer. 1 = Enable target abort interrupt generation during PDMA transfer.
        constexpr uint32_t BLKD_IE = (1U << 1);  ///< PDMA Transfer Done Interrupt Enable 0 = Disable interrupt generator during PDMA transfer done. 1 = Enable interrupt generator during PDMA transfer done.
    }

    /// PDMA_ISRx Register bits
    namespace pdma_isrx_bits {
        constexpr uint32_t TABORT_IF = (1U << 0);  ///< PDMA Read/Write Target Abort Interrupt Flag 0 = No bus ERROR response received. 1 = Bus ERROR response received. NOTE: Software can write 1 to clear this bit to zero.
        constexpr uint32_t BLKD_IF = (1U << 1);  ///< Block Transfer Done Interrupt Flag This bit indicates that PDMA has finished all transfer. 0 = Not finished yet. 1 = Done. NOTE: Software can write 1 to clear this bit to zero.
    }

    /// PDMA_SBUF0_cx Register bits
    namespace pdma_sbuf0_cx_bits {
        constexpr uint32_t PDMA_SBUF0 = (32 << 0);  ///< PDMA Shared Buffer FIFO 0 (Read Only) Each channel has its own 1 word internal buffer.
    }

}

// ============================================================================
// PS2 Peripheral
// ============================================================================

namespace ps2 {
    /// Base addresses
    constexpr uint32_t PS2_BASE = 0x40100000;

    /// PS2 Register structure
    struct Registers {
        volatile uint32_t PS2CON;  ///< Offset: 0x00 - PS2 Control Register
        volatile uint32_t PS2TXDATA0;  ///< Offset: 0x04 - PS2 Transmit DATA Register 0
        volatile uint32_t PS2TXDATA1;  ///< Offset: 0x08 - PS2 Transmit DATA Register 1
        volatile uint32_t PS2TXDATA2;  ///< Offset: 0x0C - PS2 Transmit DATA Register 2
        volatile uint32_t PS2TXDATA3;  ///< Offset: 0x10 - PS2 Transmit DATA Register 3
        volatile uint32_t PS2RXDATA;  ///< Offset: 0x14 - PS2 Receive DATA Register
        volatile uint32_t PS2STATUS;  ///< Offset: 0x18 - PS2 Status Register
        volatile uint32_t PS2INTID;  ///< Offset: 0x1C - PS2 Interrupt Identification Register
    };

    /// Peripheral instances
    inline Registers* PS2 = reinterpret_cast<Registers*>(PS2_BASE);

    // Bit definitions
    /// PS2CON Register bits
    namespace ps2con_bits {
        constexpr uint32_t PS2EN = (1U << 0);  ///< Enable PS2 Device Enable PS2 device controller 1 = Enable 0 = Disable
        constexpr uint32_t TXINTEN = (1U << 1);  ///< Enable Transmit Interrupt 1 = Enable data transmit complete interrupt 0 = Disable data transmit complete interrupt
        constexpr uint32_t RXINTEN = (1U << 2);  ///< Enable Receive Interrupt 1 = Enable data receive complete interrupt 0 = Disable data receive complete interrupt
        constexpr uint32_t TXFIFO_DEPTH = (4 << 3);  ///< Transmit Data FIFO Depth There is 16 bytes buffer for data transmit. S/W can define the FIFO depth from 1 to 16 bytes depends on application. 0 = 1 byte 1 = 2 bytes ... 14 = 15 bytes 15 = 16 bytes
        constexpr uint32_t ACK = (1U << 7);  ///< Acknowledge Enable 1 = If parity error or stop bit is not received correctly, acknowledge bit will not be sent to host at 12th clock 0 = Always send acknowledge to host at 12th clock for host to device communication.
        constexpr uint32_t CLRFIFO = (1U << 8);  ///< Clear TX FIFO Write 1 to this bit to terminate device to host transmission. The TXEMPTY bit in PS2STATUS bit will be set to 1 and pointer BYTEIDEX is reset to 0 regardless there is residue data in buffer or not. The buffer content is not been cleared. 1 = Clear FIFO 0 = Not active
        constexpr uint32_t OVERRIDE = (1U << 9);  ///< Software Override PS2 CLK/DATA Pin State 1 = PS2CLK and PS2DATA pins are controlled by S/W 0 = PS2CLK and PS2DATA pins are controlled by internal state machine.
        constexpr uint32_t FPS2CLK = (1U << 10);  ///< Force PS2CLK Line It forces PS2CLK line high or low regardless of the internal state of the device controller if OVERRIDE is set to high. 1 = Force PS2DATA line high 0 = Force PS2DATA line low
        constexpr uint32_t FPS2DAT = (1U << 11);  ///< Force PS2DATA Line It forces PS2DATA high or low regardless of the internal state of the device controller if OVERRIDE is set to high. 1 = Force PS2DATA high 0 = Force PS2DATA low
    }

    /// PS2TXDATA0 Register bits
    namespace ps2txdata0_bits {
        constexpr uint32_t TXDATA = (32 << 0);  ///< Transmit data Write data to this register starts device to host communication if bus is in IDLE state. S/W must enable PS2EN before writing data to TX buffer.
    }

    /// PS2TXDATA1 Register bits
    namespace ps2txdata1_bits {
        constexpr uint32_t TXDATA = (32 << 0);  ///< Transmit data Write data to this register starts device to host communication if bus is in IDLE state. S/W must enable PS2EN before writing data to TX buffer.
    }

    /// PS2TXDATA2 Register bits
    namespace ps2txdata2_bits {
        constexpr uint32_t TXDATA = (32 << 0);  ///< Transmit data Write data to this register starts device to host communication if bus is in IDLE state. S/W must enable PS2EN before writing data to TX buffer.
    }

    /// PS2TXDATA3 Register bits
    namespace ps2txdata3_bits {
        constexpr uint32_t TXDATA = (32 << 0);  ///< Transmit data Write data to this register starts device to host communication if bus is in IDLE state. S/W must enable PS2EN before writing data to TX buffer.
    }

    /// PS2RXDATA Register bits
    namespace ps2rxdata_bits {
        constexpr uint32_t PS2RXDATA = (8 << 0);  ///< Received Data For host to device communication, after acknowledge bit is sent, the received data is copied from receive shift register to PS2RXDATA register. CPU must read this register before next byte reception complete, otherwise the data will be overwritten and RXOVF bit in PS2STATUS[6] will be set to 1.
    }

    /// PS2STATUS Register bits
    namespace ps2status_bits {
        constexpr uint32_t PS2CLK = (1U << 0);  ///< CLK Pin State This bit reflects the status of the PS2CLK line after synchronizing.
        constexpr uint32_t PS2DATA = (1U << 1);  ///< DATA Pin State This bit reflects the status of the PS2DATA line after synchronizing and sampling.
        constexpr uint32_t FRAMERR = (1U << 2);  ///< Frame Error For host to device communication, if STOP bit (logic 1) is not received it is a frame error. If frame error occurs, DATA line may keep at low state after 12th clock. At this moment, S/w overrides PS2CLK to send clock till PS2DATA release to high state. After that, device sends a "Resend" command to host. 1 = Frame error occur 0 = No frame error Write 1 to clear this bit.
        constexpr uint32_t RXPARITY = (1U << 3);  ///< Received Parity This bit reflects the parity bit for the last received data byte (odd parity). Read only bit.
        constexpr uint32_t RXBUSY = (1U << 4);  ///< Receive Busy This bit indicates that the PS2 device is currently receiving data. 0 = Idle. 1 = Currently receiving data. Read only bit.
        constexpr uint32_t TXBUSY = (1U << 5);  ///< Transmit Busy This bit indicates that the PS2 device is currently sending data. 0 = Idle. 1 = Currently sending data. Read only bit.
        constexpr uint32_t RXOVF = (1U << 6);  ///< RX Buffer Overwrite 1 = Data in PS2RXDATA register is overwritten by new coming data. 0 = No overwrite Write 1 to clear this bit.
        constexpr uint32_t TXEMPTY = (1U << 7);  ///< TX FIFO Empty When S/W writes any data to PS2TXDATA0-3 the TXEMPTY bit is cleared to 0 immediately if PS2EN is enabled. When transmitted data byte number is equal to FIFODEPTH then TXEMPTY bit is clear to 1. 1 = FIFO is empty 0 = There is data to be transmitted Read only bit.
        constexpr uint32_t BYTEIDX = (4 << 8);  ///< Byte Index It indicates which data byte in transmit data shift register. When all data in FIFO is transmitted and it will be cleared to 0. It is a read only bit. BYTEIDX	DATA Transmit	BYTEIDX	DATA Transmit	 0000	TXDATA0[7:0]	1000	TXDATA2[7:0]	 0001	TXDATA0[15:8]	1001	TXDATA2[15:8]	 0010	TXDATA0[23:16]	1010	TXDATA2[23:16]	 0011	TXDATA0[31:24]	1011	TXDATA2[31:24]	 0100	TXDATA1[7:0]	1100	TXDATA3[7:0]	 0101	TXDATA1[15:8]	1101	TXDATA3[15:8]	 0110	TXDATA1[23:16]	1110	TXDATA3[23:16]	 0111	TXDATA1[31:24]	1111	TXDATA3[31:24]
    }

    /// PS2INTID Register bits
    namespace ps2intid_bits {
        constexpr uint32_t RXINT = (1U << 0);  ///< Receive Interrupt This bit is set to 1 when acknowledge bit is sent for Host to device communication. Interrupt occurs if RXINTEN bit is set to 1. 1 = Receive interrupt occurs 0 = No interrupt Write 1 to clear this bit to 0.
        constexpr uint32_t TXINT = (1U << 1);  ///< Transmit Interrupt This bit is set to 1 after STOP bit is transmitted. Interrupt occur if TXINTEN bit is set to 1. 1 = Transmit interrupt occurs 0 = No interrupt Write 1 to clear this bit to 0.
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x40008000;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t INIR;  ///< Offset: 0x00 - RTC Initiation Register
        volatile uint32_t AER;  ///< Offset: 0x04 - RTC Access Enable Register
        volatile uint32_t FCR;  ///< Offset: 0x08 - RTC Frequency Compensation Register
        volatile uint32_t TLR;  ///< Offset: 0x0C - Time Loading Register
        volatile uint32_t CLR;  ///< Offset: 0x10 - Calendar Loading Register
        volatile uint32_t TSSR;  ///< Offset: 0x14 - Time Scale Selection Register
        volatile uint32_t DWR;  ///< Offset: 0x18 - Day of the Week Register
        volatile uint32_t TAR;  ///< Offset: 0x1C - Time Alarm Register
        volatile uint32_t CAR;  ///< Offset: 0x20 - Calendar Alarm Register
        volatile uint32_t LIR;  ///< Offset: 0x24 - RTC Leap year Indicator Register
        volatile uint32_t RIER;  ///< Offset: 0x28 - RTC Interrupt Enable Register
        volatile uint32_t RIIR;  ///< Offset: 0x2C - RTC Interrupt Indicator Register
        volatile uint32_t TTR;  ///< Offset: 0x30 - RTC Time Tick Register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// INIR Register bits
    namespace inir_bits {
        constexpr uint32_t Active = (1U << 0);  ///< RTC Active Status (Read only), 0: RTC is at reset state 1: RTC is at normal active state.
        constexpr uint32_t INIR = (32 << 0);  ///< RTC Initiation When chip is power on, RTC timer counter is at unknown state because RTC timer counter reset is individual with chip reset; user has to write a number (0x a5eb1357) to INIR to reset RTC controller to initialize RTC controller.
    }

    /// AER Register bits
    namespace aer_bits {
        constexpr uint32_t AER = (16 << 0);  ///< RTC Register Access Enable Password (Write only) 0xA965 = Enable RTC access Others = Disable RTC access
        constexpr uint32_t ENF = (1U << 16);  ///< RTC Register Access Enable Flag (Read only) 1 = RTC register read/write enable 0 = RTC register read/write disable This bit will be set after AER[15:0] register is load a 0xA965, and be clear automatically 512 RTC clock or AER[15:0] is not 0xA965.Register\AER.ENF	1	0	 INIR	R/W	R/W	 AER	R/W	R/W	 FCR	R/W	-	 TLR	R/W	R	 CLR	R/W	R	 TSSR	R/W	R/W	 DWR	R/W	R	 TAR	R/W	-	 CAR	R/W	-	 LIR	R	R	 RIER	R/W	R/W	 RIIR	R/C	R/C	 TTR	R/W	-
    }

    /// FCR Register bits
    namespace fcr_bits {
        constexpr uint32_t FRACTION = (6 << 0);  ///< Fraction Part Formula = (fraction part of detected value) x 60 Note: Digit in FCR must be expressed as hexadecimal number. Refer to 5.8.4.4 for the examples.
        constexpr uint32_t INTEGER = (4 << 8);  ///< Integer Part Integer part of detected value	FCR[11:8]	Integer part of detected value	FCR[11:8]	 32776	1111	32768	0111	 32775	1110	32767	0110	 32774	1101	32766	0101	 32773	1100	32765	0100	 32772	1011	32764	0011	 32771	1010	32763	0010	 32770	1001	32762	0001	 32769	1000	32761	0000
    }

    /// TLR Register bits
    namespace tlr_bits {
        constexpr uint32_t _1SEC = (4 << 0);  ///< 1 Sec Time Digit (0~9)
        constexpr uint32_t _10SEC = (3 << 4);  ///< 10 Sec Time Digit (0~5)
        constexpr uint32_t _1MIN = (4 << 8);  ///< 1 Min Time Digit (0~9)
        constexpr uint32_t _10MIN = (3 << 12);  ///< 10 Min Time Digit (0~5)
        constexpr uint32_t _1HR = (4 << 16);  ///< 1 Hour Time Digit (0~9)
        constexpr uint32_t _10HR = (2 << 20);  ///< 10 Hour Time Digit (0~2)
    }

    /// CLR Register bits
    namespace clr_bits {
        constexpr uint32_t _1DAY = (4 << 0);  ///< 1-Day Calendar Digit (0~9)
        constexpr uint32_t _10DAY = (2 << 4);  ///< 10-Day Calendar Digit (0~3)
        constexpr uint32_t _1MON = (4 << 8);  ///< 1-Month Calendar Digit (0~9)
        constexpr uint32_t _10MON = (1U << 12);  ///< 10-Month Calendar Digit (0~1)
        constexpr uint32_t _1YEAR = (4 << 16);  ///< 1-Year Calendar Digit (0~9)
        constexpr uint32_t _10YEAR = (4 << 20);  ///< 10-Year Calendar Digit (0~9)
    }

    /// TSSR Register bits
    namespace tssr_bits {
        constexpr uint32_t _24H_12H = (1U << 0);  ///< 24-Hour / 12-Hour Time Scale Selection It indicate that TLR and TAR are in 24-hour time mode or 12-hour time mode 1 = select 24-hour time scale 0 = select 12-hour time scale with AM and PM indication 24-hour time scale	12-hour time scale	24-hour time scale	12-hour time scale (PM time + 20)	 00	12(AM12)	12	32(PM12)	 01	01(AM01)	13	21(PM01)	 02	02(AM02)	14	22(PM02)	 03	03(AM03)	15	23(PM03)	 04	04(AM04)	16	24(PM04)	 05	05(AM05)	17	25(PM05)	 06	06(AM06)	18	26(PM06)	 07	07(AM07)	19	27(PM07)	 08	08(AM08)	20	28(PM08)	 09	09(AM09)	21	29(PM09)	 10	10(AM10)	22	30(PM10)	 11	11(AM11)	23	31(PM11)
    }

    /// DWR Register bits
    namespace dwr_bits {
        constexpr uint32_t DWR = (3 << 0);  ///< Day of the Week Register Value	Day of the Week	 0	Sunday	 1	Monday	 2	Tuesday	 3	Wednesday	 4	Thursday	 5	Friday	 6	Saturday
    }

    /// TAR Register bits
    namespace tar_bits {
        constexpr uint32_t _1SEC = (4 << 0);  ///< 1 Sec Time Digit of Alarm Setting (0~9)
        constexpr uint32_t _10SEC = (3 << 4);  ///< 10 Sec Time Digit of Alarm Setting (0~5)
        constexpr uint32_t _1MIN = (4 << 8);  ///< 1 Min Time Digit of Alarm Setting (0~9)
        constexpr uint32_t _10MIN = (3 << 12);  ///< 10 Min Time Digit of Alarm Setting (0~5)
        constexpr uint32_t _1HR = (4 << 16);  ///< 1 Hour Time Digit of Alarm Setting (0~9)
        constexpr uint32_t _10HR = (2 << 20);  ///< 10 Hour Time Digit of Alarm Setting (0~2)
    }

    /// CAR Register bits
    namespace car_bits {
        constexpr uint32_t _1DAY = (4 << 0);  ///< 1-Day Calendar Digit of Alarm Setting (0~9)
        constexpr uint32_t _10DAY = (2 << 4);  ///< 10-Day Calendar Digit of Alarm Setting (0~3)
        constexpr uint32_t _1MON = (4 << 8);  ///< 1-Month Calendar Digit of Alarm Setting (0~9)
        constexpr uint32_t _10MON = (1U << 12);  ///< 10-Month Calendar Digit of Alarm Setting (0~1)
        constexpr uint32_t _1YEAR = (4 << 16);  ///< 1-Year Calendar Digit of Alarm Setting (0~9)
        constexpr uint32_t _10YEAR = (4 << 20);  ///< 10-Year Calendar Digit of Alarm Setting (0~9)
    }

    /// LIR Register bits
    namespace lir_bits {
        constexpr uint32_t LIR = (1U << 0);  ///< Leap Year Indication REGISTER (Real only). 1 = It indicate that this year is leap year 0 = It indicate that this year is not a leap year
    }

    /// RIER Register bits
    namespace rier_bits {
        constexpr uint32_t AIER = (1U << 0);  ///< Alarm Interrupt Enable 1 = RTC Alarm Interrupt is enabled 0 = RTC Alarm Interrupt is disabled
        constexpr uint32_t TIER = (1U << 1);  ///< Time Tick Interrupt Enable 1 = RTC Time Tick Interrupt is enabled 0 = RTC Time Tick Interrupt is disabled
    }

    /// RIIR Register bits
    namespace riir_bits {
        constexpr uint32_t AIF = (1U << 0);  ///< RTC Alarm Interrupt Flag When RTC Alarm Interrupt is enabled (RIER.AIER=1), RTC controller will set AIF to high once the RTC real time counters TLR and CLR reach the alarm setting time registers TAR and CAR. This bit is software clear by writing 1 to it. 1 = Indicates RTC Alarm Interrupt is requested if RIER.AIER=1. 0 = Indicates RTC Alarm Interrupt condition never occurred.
        constexpr uint32_t TIF = (1U << 1);  ///< RTC Time Tick Interrupt Flag When RTC Time Tick Interrupt is enabled (RIER.TIER=1), RTC controller will set TIF to high periodically in the period selected by TTR[2:0]. This bit is software clear by writing 1 to it. 1 = Indicates RTC Time Tick Interrupt is requested if RIER.TIER=1. 0 = Indicates RTC Time Tick Interrupt condition never occurred.
    }

    /// TTR Register bits
    namespace ttr_bits {
        constexpr uint32_t TTR = (3 << 0);  ///< Time Tick Register The RTC time tick period for Periodic Time Tick Interrupt request. TTR[2:0]	Time tick (second)	 0	1	 1	1/2	 2	1/4	 3	1/8	 4	1/16	 5	1/32	 6	1/64	 7	1/128	 Note: This register can be read back after the RTC register access enable bit ENF(AER[16]) is active.
        constexpr uint32_t TWKE = (1U << 3);  ///< RTC Timer Wakeup CPU Function Enable Bit If TWKE is set before CPU is in power-down mode, when a RTC Time Tick occurs, CPU will be wakened up by RTC controller. 1 = Enable the Wakeup function that CPU can be waken up from power-down mode by Time Tick. 0 = Disable Wakeup CPU function by Time Tick. Note: 1. Tick timer setting follows TTR[2:0] description. 2. The CPU can also be wakeup by alarm match occur.
    }

}

// ============================================================================
// SCS Peripheral
// ============================================================================

namespace scs {
    /// Base addresses
    constexpr uint32_t SCS_BASE = 0xE000E000;

    /// SCS Register structure
    struct Registers {
        volatile uint32_t SYST_CSR;  ///< Offset: 0x10 - SysTick Control and Status
        volatile uint32_t SYST_RVR;  ///< Offset: 0x14 - SysTick Reload value
        volatile uint32_t SYST_CVR;  ///< Offset: 0x18 - SysTick Current value
        volatile uint32_t NVIC_ISER;  ///< Offset: 0x100 - IRQ0 ~ IRQ31 Set-Enable Control Register
        volatile uint32_t NVIC_ICER;  ///< Offset: 0x180 - IRQ0 ~ IRQ31 Clear-Enable Control Register
        volatile uint32_t NVIC_ISPR;  ///< Offset: 0x200 - IRQ0 ~ IRQ31 Set-Pending Control Register
        volatile uint32_t NVIC_ICPR;  ///< Offset: 0x280 - IRQ0 ~ IRQ31 Clear-Pending Control Register
        volatile uint32_t NVIC_IPR0;  ///< Offset: 0x400 - IRQ0 ~ IRQ3 Priority Control Register
        volatile uint32_t NVIC_IPR1;  ///< Offset: 0x404 - IRQ4 ~ IRQ7 Priority Control Register
        volatile uint32_t NVIC_IPR2;  ///< Offset: 0x408 - IRQ8 ~ IRQ11 Priority Control Register
        volatile uint32_t NVIC_IPR3;  ///< Offset: 0x40C - IRQ12 ~ IRQ15 Priority Control Register
        volatile uint32_t NVIC_IPR4;  ///< Offset: 0x410 - IRQ16 ~ IRQ19 Priority Control Register
        volatile uint32_t NVIC_IPR5;  ///< Offset: 0x414 - IRQ20 ~ IRQ23 Priority Control Register
        volatile uint32_t NVIC_IPR6;  ///< Offset: 0x418 - IRQ24 ~ IRQ27 Priority Control Register
        volatile uint32_t NVIC_IPR7;  ///< Offset: 0x41C - IRQ28 ~ IRQ31 Priority Control Register
        volatile uint32_t CPUID;  ///< Offset: 0xD00 - CPUID Register
        volatile uint32_t ICSR;  ///< Offset: 0xD04 - Interrupt Control State Register
        volatile uint32_t AIRCR;  ///< Offset: 0xD0C - Application Interrupt and Reset Control Register
        volatile uint32_t SCR;  ///< Offset: 0xD10 - System Control Register
        volatile uint32_t SHPR2;  ///< Offset: 0xD1C - System Handler Priority Register 2
        volatile uint32_t SHPR3;  ///< Offset: 0xD20 - System Handler Priority Register 3
    };

    /// Peripheral instances
    inline Registers* SCS = reinterpret_cast<Registers*>(SCS_BASE);

    // Bit definitions
    /// SYST_CSR Register bits
    namespace syst_csr_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< 1 : the counter will operate in a multi-shot manner. 0 : the counter is disabled
        constexpr uint32_t TICKINT = (1U << 1);  ///< 1 : counting down to 0 will cause the SysTick exception to be pended. Clearing the SysTick Current Value register by a register write in software will not cause SysTick to be pended. 0 : counting down to 0 does not cause the SysTick exception to be pended. Software can use COUNTFLAG to determine if a count to zero has occurred.
        constexpr uint32_t CLKSRC = (1U << 2);  ///< 1 : core clock used for SysTick. 0 : clock source is (optional) external reference clock
        constexpr uint32_t COUNTFLAG = (1U << 16);  ///< Returns 1 if timer counted to 0 since last time this register was read. COUNTFLAG is set by a count transition from 1 to 0. COUNTFLAG is cleared on read or by a write to the Current Value register.
    }

    /// SYST_RVR Register bits
    namespace syst_rvr_bits {
        constexpr uint32_t RELOAD = (24 << 0);  ///< Value to load into the Current Value register when the counter reaches 0.
    }

    /// SYST_CVR Register bits
    namespace syst_cvr_bits {
        constexpr uint32_t CURRENT = (24 << 0);  ///< Current counter value. This is the value of the counter at the time it is sampled. The counter does not provide read-modify-write protection. The register is write-clear. A software write of any value will clear the register to 0. Unsupported bits RAZ (see SysTick Reload Value register).
    }

    /// NVIC_ISER Register bits
    namespace nvic_iser_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< Enable one or more interrupts within a group of 32. Each bit represents an interrupt number from IRQ0 ~ IRQ31 (Vector number from 16 ~ 47). Writing 1 will enable the associated interrupt. Writing 0 has no effect. The register reads back with the current enable state.
    }

    /// NVIC_ICER Register bits
    namespace nvic_icer_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< Disable one or more interrupts within a group of 32. Each bit represents an interrupt number from IRQ0 ~ IRQ31 (Vector number from 16 ~ 47). Writing 1 will disable the associated interrupt. Writing 0 has no effect. The register reads back with the current enable state.
    }

    /// NVIC_ISPR Register bits
    namespace nvic_ispr_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< Writing 1 to a bit pends the associated interrupt under software control. Each bit represents an interrupt number from IRQ0 ~ IRQ31 (Vector number from 16 ~ 47). Writing 0 has no effect. The register reads back with the current pending state.
    }

    /// NVIC_ICPR Register bits
    namespace nvic_icpr_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< Writing 1 to a bit un-pends the associated interrupt under software control. Each bit represents an interrupt number from IRQ0 ~ IRQ31 (Vector number from 16 ~ 47). Writing 0 has no effect. The register reads back with the current pending state.
    }

    /// NVIC_IPR0 Register bits
    namespace nvic_ipr0_bits {
        constexpr uint32_t PRI_0 = (2 << 6);  ///< Priority of IRQ0 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_1 = (2 << 14);  ///< Priority of IRQ1 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_2 = (2 << 22);  ///< Priority of IRQ2 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_3 = (2 << 30);  ///< Priority of IRQ3 "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// NVIC_IPR1 Register bits
    namespace nvic_ipr1_bits {
        constexpr uint32_t PRI_4 = (2 << 6);  ///< Priority of IRQ4 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_5 = (2 << 14);  ///< Priority of IRQ5 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_6 = (2 << 22);  ///< Priority of IRQ6 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_7 = (2 << 30);  ///< Priority of IRQ7 "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// NVIC_IPR2 Register bits
    namespace nvic_ipr2_bits {
        constexpr uint32_t PRI_8 = (2 << 6);  ///< Priority of IRQ8 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_9 = (2 << 14);  ///< Priority of IRQ9 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_10 = (2 << 22);  ///< Priority of IRQ10 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_11 = (2 << 30);  ///< Priority of IRQ11 "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// NVIC_IPR3 Register bits
    namespace nvic_ipr3_bits {
        constexpr uint32_t PRI_12 = (2 << 6);  ///< Priority of IRQ12 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_13 = (2 << 14);  ///< Priority of IRQ13 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_14 = (2 << 22);  ///< Priority of IRQ14 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_15 = (2 << 30);  ///< Priority of IRQ15 "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// NVIC_IPR4 Register bits
    namespace nvic_ipr4_bits {
        constexpr uint32_t PRI_16 = (2 << 6);  ///< Priority of IRQ16 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_17 = (2 << 14);  ///< Priority of IRQ17 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_18 = (2 << 22);  ///< Priority of IRQ18 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_19 = (2 << 30);  ///< Priority of IRQ19 "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// NVIC_IPR5 Register bits
    namespace nvic_ipr5_bits {
        constexpr uint32_t PRI_20 = (2 << 6);  ///< Priority of IRQ20 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_21 = (2 << 14);  ///< Priority of IRQ21 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_22 = (2 << 22);  ///< Priority of IRQ22 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_23 = (2 << 30);  ///< Priority of IRQ23 "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// NVIC_IPR6 Register bits
    namespace nvic_ipr6_bits {
        constexpr uint32_t PRI_24 = (2 << 6);  ///< Priority of IRQ24 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_25 = (2 << 14);  ///< Priority of IRQ25 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_26 = (2 << 22);  ///< Priority of IRQ26 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_27 = (2 << 30);  ///< Priority of IRQ27 "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// NVIC_IPR7 Register bits
    namespace nvic_ipr7_bits {
        constexpr uint32_t PRI_28 = (2 << 6);  ///< Priority of IRQ28 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_29 = (2 << 14);  ///< Priority of IRQ29 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_30 = (2 << 22);  ///< Priority of IRQ30 "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_31 = (2 << 30);  ///< Priority of IRQ31 "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// CPUID Register bits
    namespace cpuid_bits {
        constexpr uint32_t REVESION = (4 << 0);  ///< Reads as 0x0
        constexpr uint32_t PARTNO = (12 << 4);  ///< Reads as 0xC20
        constexpr uint32_t PART = (4 << 16);  ///< Reads as 0xC for ARMv6-M parts
        constexpr uint32_t IMPLEMENTER = (8 << 24);  ///< Implementer code assigned by ARM. ( ARM = 0x41)
    }

    /// ICSR Register bits
    namespace icsr_bits {
        constexpr uint32_t VECTACTIVE = (9 << 0);  ///< 0 = Thread mode Value > 1 = the exception number for the current executing exception.This is a read only bit.
        constexpr uint32_t VECTPENDING = (9 << 12);  ///< Indicates the exception number for the highest priority pending exception. The pending state includes the effect of memory-mapped enable and mask registers. It does not include the PRIMASK special-purpose register qualifier. A value of zero indicates no pending exceptions. This is a read only bit.
        constexpr uint32_t ISRPENDING = (1U << 22);  ///< Indicates if an external configurable (NVIC generated) interrupt is pending. This is a read only bit.
        constexpr uint32_t ISRPREEMPT = (1U << 23);  ///< If set, a pending exception will be serviced on exit from the debug halt state. This is a read only bit.
        constexpr uint32_t PENDSTCLR = (1U << 25);  ///< Write 1 to clear a pending SysTick. This is a write only bit.
        constexpr uint32_t PENDSTSET = (1U << 26);  ///< Set a pending SysTick. Reads back with current state (1 if Pending, 0 if not).
        constexpr uint32_t PENDSVCLR = (1U << 27);  ///< Write 1 to clear a pending PendSV interrupt. This is a write only bit.
        constexpr uint32_t PENDSVSET = (1U << 28);  ///< Set a pending PendSV interrupt. This is normally used to request a context switch. Reads back with current state (1 if Pending, 0 if not).
        constexpr uint32_t NMIPENDSET = (1U << 31);  ///< Setting this bit will activate an NMI. Since NMI is the highest priority exception, it will activate as soon as it is registered. Reads back with current state (1 if Pending, 0 if not).
    }

    /// AIRCR Register bits
    namespace aircr_bits {
        constexpr uint32_t VECTCLRACTIVE = (1U << 1);  ///< Set this bit to 1 will clears all active state information for fixed and configurable exceptions. The bit is a write only bit and can only be written when the core is halted. Note: It is the debugger's responsibility to re-initialize the stack.
        constexpr uint32_t SYSRESETREQ = (1U << 2);  ///< Writing this bit 1 will cause a reset signal to be asserted to the chip to indicate a reset is requested. The bit is a write only bit and self-clears as part of the reset sequence.
        constexpr uint32_t VECTORKEY = (16 << 16);  ///< When write this register, this field should be 0x05FA, otherwise the write action will be unpredictable.
    }

    /// SCR Register bits
    namespace scr_bits {
        constexpr uint32_t SLEEPONEXIT = (1U << 1);  ///< When set to 1, the core can enter a sleep state on an exception return to Thread mode. This is the mode and exception level entered at reset, the base level of execution.
        constexpr uint32_t SLEEPDEEP = (1U << 2);  ///< A qualifying hint that indicates waking from sleep might take longer.
        constexpr uint32_t SEVONPEND = (1U << 4);  ///< When enabled, interrupt transitions from Inactive to Pending are included in the list of wakeup events for the WFE instruction.
    }

    /// SHPR2 Register bits
    namespace shpr2_bits {
        constexpr uint32_t PRI_11 = (2 << 30);  ///< Priority of system handler 11 SVCall "0" denotes the highest priority and "3" denotes lowest priority
    }

    /// SHPR3 Register bits
    namespace shpr3_bits {
        constexpr uint32_t PRI_14 = (2 << 22);  ///< Priority of system handler 14 PendSV "0" denotes the highest priority and "3" denotes lowest priority
        constexpr uint32_t PRI_15 = (2 << 30);  ///< Priority of system handler 15 SysTick "0" denotes the highest priority and "3" denotes lowest priority
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI0_BASE = 0x40030000;
    constexpr uint32_t SPI1_BASE = 0x40034000;
    constexpr uint32_t SPI2_BASE = 0x40130000;
    constexpr uint32_t SPI3_BASE = 0x40134000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t SPI_CNTRL;  ///< Offset: 0x00 - Control and Status Register
        volatile uint32_t SPI_DIVIDER;  ///< Offset: 0x04 - Clock Divider Register
        volatile uint32_t SPI_SSR;  ///< Offset: 0x08 - Slave Select Register
        volatile uint32_t SPI_RX0;  ///< Offset: 0x10 - Data Receive Register 0
        volatile uint32_t SPI_RX1;  ///< Offset: 0x14 - Data Receive Register 1
        volatile uint32_t SPI_TX0;  ///< Offset: 0x20 - Data Transmit Register 0
        volatile uint32_t SPI_TX1;  ///< Offset: 0x24 - Data Transmit Register 1
        volatile uint32_t SPI_VARCLK;  ///< Offset: 0x34 - Variable Clock Pattern Register
        volatile uint32_t SPI_DMA;  ///< Offset: 0x38 - SPI DMA control register
    };

    /// Peripheral instances
    inline Registers* SPI0 = reinterpret_cast<Registers*>(SPI0_BASE);
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);
    inline Registers* SPI2 = reinterpret_cast<Registers*>(SPI2_BASE);
    inline Registers* SPI3 = reinterpret_cast<Registers*>(SPI3_BASE);

    // Bit definitions
    /// SPI_CNTRL Register bits
    namespace spi_cntrl_bits {
        constexpr uint32_t GO_BUSY = (1U << 0);  ///< Go and Busy Status 1 = In master mode, writing 1 to this bit to start the SPI data transfer; in slave mode, writing 1 to this bit indicates that the slave is ready to communicate with a master. 0 = Writing 0 to this bit to stop data transfer if SPI is transferring. During the data transfer, this bit keeps the value of 1. As the transfer is finished, this bit will be cleared automatically. NOTE: All registers should be set before writing 1 to this GO_BUSY bit. The transfer result will be unpredictable if software changes related settings when GO_BUSY bit is 1.
        constexpr uint32_t RX_NEG = (1U << 1);  ///< Receive At Negative Edge 1 = The received data input signal is latched at the falling edge of SPICLK. 0 = The received data input signal is latched at the rising edge of SPICLK.
        constexpr uint32_t TX_NEG = (1U << 2);  ///< Transmit At Negative Edge 1 = The transmitted data output signal is changed at the falling edge of SPICLK. 0 = The transmitted data output signal is changed at the rising edge of SPICLK.
        constexpr uint32_t TX_BIT_LEN = (5 << 3);  ///< Transmit Bit Length This field specifies how many bits are transmitted in one transaction. Up to 32 bits can be transmitted. TX_BIT_LEN = 0x01 ... 1 bit TX_BIT_LEN = 0x02 ... 2 bits ...... TX_BIT_LEN = 0x1f ... 31 bits TX_BIT_LEN = 0x00 .. 32 bits
        constexpr uint32_t TX_NUM = (2 << 8);  ///< Numbers of Transmit/Receive Word This field specifies how many transmit/receive word numbers should be executed in one transfer. 00 = Only one transmit/receive word will be executed in one transfer. 01 = Two successive transmit/receive words will be executed in one transfer. (burst mode) 10 = Reserved. 11 = Reserved.
        constexpr uint32_t LSB = (1U << 10);  ///< LSB First 1 = The LSB is sent first on the line (bit 0 of SPI_TX0/1), and the first bit received from the line will be put in the LSB position of the RX register (bit 0 of SPI_RX0/1). 0 = The MSB is transmitted/received first (which bit in SPI_TX0/1 and SPI_RX0/1 register that is depends on the TX_BIT_LEN field).
        constexpr uint32_t CLKP = (1U << 11);  ///< Clock Polarity 1 = SPICLK idle high. 0 = SPICLK idle low.
        constexpr uint32_t SP_CYCLE = (4 << 12);  ///< Suspend Interval (master only) These four bits provide configurable suspend interval between two successive transmit/receive transactions in a transfer. The suspend interval is from the last falling clock edge of the current transaction to the first rising clock edge of the successive transaction if CLKP = 0. If CLKP = 1, the interval is from the rising clock edge to the falling clock edge. The default value is 0x0. When TX_NUM = 00b, setting this field has no effect on transfer. The desired suspend interval is obtained according to the following equation: (SP_CYCLE[3:0] + 2)*period of SPI clock SP_CYCLE = 0x0 ... 2 SPICLK clock cycle SP_CYCLE = 0x1 ... 3 SPICLK clock cycle ...... SP_CYCLE = 0xe ... 16 SPICLK clock cycle SP_CYCLE = 0xf ... 17 SPICLK clock cycle
        constexpr uint32_t IF_ = (1U << 16);  ///< Interrupt Flag 1 = It indicates that the transfer is done. The interrupt flag is set if it was enable. 0 = It indicates that the transfer does not finish yet. NOTE: This bit can be cleared by writing 1 to itself. (renamed from IF_)
        constexpr uint32_t IE = (1U << 17);  ///< Interrupt Enable 1 = Enable MICROWIRE/SPI Interrupt. 0 = Disable MICROWIRE/SPI Interrupt.
        constexpr uint32_t SLAVE = (1U << 18);  ///< SLAVE Mode Indication 1 = Slave mode. 0 = Master mode.
        constexpr uint32_t REORDER = (2 << 19);  ///< Reorder Mode Select 00 = Disable both byte reorder and byte suspend functions. 01 = Enable byte reorder function and insert a byte suspend interval (2~17 SPICLK cycles) among each byte. The setting of TX_BIT_LEN must be configured as 0x00. (32 bits/word). 10 = Enable byte reorder function, but disable byte suspend function. 11 = Disable byte reorder function, but insert a suspend interval (2~17 SPICLK cycles) among each byte. The setting of TX_BIT_LEN must be configured as 0x00. (32 bits/word). Byte reorder function is only available if TX_BIT_LEN is defined as 16, 24 and 32.
        constexpr uint32_t TWOB = (1U << 22);  ///< Two Bits Transfer Mode Active 1 = Enable two-bit transfer mode. 0 = disable two-bit transfer mode. Note that when enable TWOB, the serial transmitted 2-bit data output are from SPI_TX1/0, and the received 2-bit data input are put in SPI_RX1/0. Note that when enable TWOB, the setting of TX_NUM must be programmed as 0x00.
        constexpr uint32_t VARCLK_EN = (1U << 23);  ///< Variable Clock Enable (master only) 1 = The serial clock output frequency is variable. The output frequency is decided by the value of VARCLK, DIVIDER, and DIVIDER2. 0 = The serial clock output frequency is fixed and decided only by the value of DIVIDER. Note that when enable this VARCLK_EN bit, the setting of TX_BIT_LEN must be programmed as 0x10 (16 bits mode)
    }

    /// SPI_DIVIDER Register bits
    namespace spi_divider_bits {
        constexpr uint32_t DIVIDER = (16 << 0);  ///< Clock Divider Register (master only) The value in this field is the frequency divider of the system clock, PCLK, to generate the serial clock on the output SPICLK. The desired frequency is obtained according to the following equation: fsclk = fpclk / ((DIVIDER+1)*2) In slave mode, the period of SPI clock driven by a master shall equal or over 5 times the period of PCLK. In other words, the maximum frequency of SPI clock is the fifth of the frequency of slave's PCLK.
        constexpr uint32_t DIVIDER2 = (16 << 16);  ///< Clock Divider 2 Register (master only) The value in this field is the 2nd frequency divider of the system clock, PCLK, to generate the serial clock on the output SPICLK. The desired frequency is obtained according to the following equation: fsclk = fpclk / ((DIVIDER2+1)*2)
    }

    /// SPI_SSR Register bits
    namespace spi_ssr_bits {
        constexpr uint32_t SSR = (2 << 0);  ///< Slave Select Register (master only) If AUTOSS bit is cleared, writing 1 to any bit location of this field sets the proper SPISSx0/1 line to an active state and writing 0 sets the line back to inactive state. If AUTOSS bit is set, writing 1 to any bit location of this field will select appropriate SPISSx0/1 line to be automatically driven to active state for the duration of the transmit/receive, and will be driven to inactive state for the rest of the time. (The active level of SPISSx0/1 is specified in SS_LVL). Note: 1. This interface can only drive one device/slave at a given time. Therefore, the slave select pin of the selected device must be set to its active level before starting any read or write transfer. 2. SPISSx0 is also defined as device/slave select input signal in slave mode.
        constexpr uint32_t SS_LVL = (1U << 2);  ///< Slave Select Active Level It defines the active level of slave select signal (SPISSx0/1). 1 = The slave select signal SPISSx0/1 is active at high-level/rising-edge. 0 = The slave select signal SPISSx0/1 is active at low-level/falling-edge..
        constexpr uint32_t AUTOSS = (1U << 3);  ///< Automatic Slave Select (master only) 1 = If this bit is set, SPISSx0/1 signals are generated automatically. It means that slave select signal, which is set in SSR[1:0] register is asserted by the SPI controller when transmit/receive is started by setting GO_BUSY, and is de-asserted after each transmit/receive is finished. 0 = If this bit is cleared, slave select signals are asserted and de-asserted by setting and clearing related bits in SSR[1:0] register.
        constexpr uint32_t SS_LTRIG = (1U << 4);  ///< Slave Select Level Trigger (slave only) 1: The slave select signal will be level-trigger. It depends on SS_LVL to decide the signal is active low or active high. 0: The input slave select signal is edge-trigger. This is default value.
        constexpr uint32_t LTRIG_FLAG = (1U << 5);  ///< Level Trigger Flag When the SS_LTRIG bit is set in slave mode, this bit can be read to indicate the received bit number is met the requirement or not. 1 = The transaction number and the transferred bit length met the specified requirements which defined in TX_NUM and TX_BIT_LEN. 0 = The transaction number or the transferred bit length of one transaction doesn't meet the specified requirements. Note: This bit is READ only
    }

    /// SPI_RX0 Register bits
    namespace spi_rx0_bits {
        constexpr uint32_t RX = (32 << 0);  ///< Data Receive Register The Data Receive Registers hold the value of received data of the last executed transfer. The number of valid bits depend on the transmit bit length field in the SPI_CNTRL register. For example, if TX_BIT_LEN is set to 0x08 and TX_NUM is set to 0x0, bit RX0[7:0] holds the received data. NOTE: The Data Receive Registers are read only registers.
    }

    /// SPI_RX1 Register bits
    namespace spi_rx1_bits {
        constexpr uint32_t RX = (32 << 0);  ///< Data Receive Register The Data Receive Registers hold the value of received data of the last executed transfer. The number of valid bits depend on the transmit bit length field in the SPI_CNTRL register. For example, if TX_BIT_LEN is set to 0x08 and TX_NUM is set to 0x0, bit RX0[7:0] holds the received data. NOTE: The Data Receive Registers are read only registers.
    }

    /// SPI_TX0 Register bits
    namespace spi_tx0_bits {
        constexpr uint32_t TX = (32 << 0);  ///< Data Transmit Register The Data Transmit Registers hold the data to be transmitted in the next transfer. The number of valid bits depend on the transmit bit length field in the CNTRL register. For example, if TX_BIT_LEN is set to 0x08 and the TX_NUM is set to 0x0, the bit TX0[7:0] will be transmitted in next transfer. If TX_BIT_LEN is set to 0x00 and TX_NUM is set to 0x1, the core will perform two successive 32-bit transmit/receive using the same setting (the order is TX0[31:0], TX1[31:0]).
    }

    /// SPI_TX1 Register bits
    namespace spi_tx1_bits {
        constexpr uint32_t TX = (32 << 0);  ///< Data Transmit Register The Data Transmit Registers hold the data to be transmitted in the next transfer. The number of valid bits depend on the transmit bit length field in the CNTRL register. For example, if TX_BIT_LEN is set to 0x08 and the TX_NUM is set to 0x0, the bit TX0[7:0] will be transmitted in next transfer. If TX_BIT_LEN is set to 0x00 and TX_NUM is set to 0x1, the core will perform two successive 32-bit transmit/receive using the same setting (the order is TX0[31:0], TX1[31:0]).
    }

    /// SPI_VARCLK Register bits
    namespace spi_varclk_bits {
        constexpr uint32_t VARCLK = (32 << 0);  ///< Variable Clock Pattern The value in this field is the frequency patterns of the SPI clock. If the bit patterns of VARCLK are 0, the output frequency of SPICLK is according the value of DIVIDER. If the bit patterns of VARCLK are 1, the output frequency of SPICLK is according the value of DIVIDER2. Refer to register SPI_DIVIDER.
    }

    /// SPI_DMA Register bits
    namespace spi_dma_bits {
        constexpr uint32_t TX_DMA_GO = (1U << 0);  ///< Transmit DMA start Set this bit to 1 will start the transmit DMA process. SPI module will issue request to DMA module automatically. If using DMA mode to transfer data, remember not to set GO_BUSY bit of SPI_CNTRL register. The DMA controller inside SPI module will set it automatically whenever necessary. Hardware will clear this bit automatically after DMA transfer done.
        constexpr uint32_t RX_DMA_GO = (1U << 1);  ///< Receive DMA start Set this bit to 1 will start the receive DMA process. SPI module will issue request to DMA module automatically. Hardware will clear this bit automatically after DMA transfer done.
    }

}

// ============================================================================
// TMR0 Peripheral
// ============================================================================

namespace tmr0 {
    /// Base addresses
    constexpr uint32_t TMR0_BASE = 0x40010000;

    /// TMR0 Register structure
    struct Registers {
        volatile uint32_t TCSR;  ///< Offset: 0x00 - Timer0 Control and Status Register
        volatile uint32_t TCMPR;  ///< Offset: 0x04 - Timer0 Compare Register
        volatile uint32_t TISR;  ///< Offset: 0x08 - Timer0 Interrupt Status Register
        volatile uint32_t TDR;  ///< Offset: 0x0C - Timer0 Data Register
    };

    /// Peripheral instances
    inline Registers* TMR0 = reinterpret_cast<Registers*>(TMR0_BASE);

    // Bit definitions
    /// TCSR Register bits
    namespace tcsr_bits {
        constexpr uint32_t PRESCALE = (8 << 0);  ///< Pre-scale Counter Clock input is divided by PRESCALE+1 before it is fed to the counter. If PRESCALE=0, then there is no scaling.
        constexpr uint32_t TDR_EN = (1U << 16);  ///< Data Load Enable When TDR_EN is set, TDR (Timer Data Register) will be updated continuously with the 24-bit up-timer value as the timer is counting. 1 = Timer Data Register update enable. 0 = Timer Data Register update disable.
        constexpr uint32_t CTB = (1U << 24);  ///< Counter Mode Enable Bit (Low Density only) This bit is the counter mode enable bit. When Timer is used as an event counter, this bit should be set to 1 and Timer will work as an event counter triggered by raising edge of external pin. 1 = Enable counter mode 0 = Disable counter mode
        constexpr uint32_t CACT = (1U << 25);  ///< Timer Active Status Bit (Read only) This bit indicates the up-timer status. 0 = Timer is not active. 1 = Timer is active.
        constexpr uint32_t CRST = (1U << 26);  ///< Timer Reset Bit Set this bit will reset the 24-bit up-timer, 8-bit pre-scale counter and also force CEN to 0. 0 = No effect. 1 = Reset Timer's 8-bit pre-scale counter, internal 24-bit up-timer and CEN bit.
        constexpr uint32_t MODE = (2 << 27);  ///< Timer Operating Mode MODE	Timer Operating Mode	 00	The timer is operating in the one-shot mode. The associated interrupt signal is generated once (if IE is enabled) and CEN is automatically cleared by hardware.	 01	The timer is operating in the periodic mode. The associated interrupt signal is generated periodically (if IE is enabled).	 10	The timer is operating in the toggle mode. The interrupt signal is generated periodically (if IE is enabled). And the associated signal (tout) is changing back and forth with 50% duty cycle. (This mode only supported in Low Density)	 11	The timer is operating in auto-reload counting mode. The associated interrupt signal is generated when TDR = TCMPR (if IE is enabled); however, the 24-bit up-timer counts continuously without reset. (This mode only supported in Low Density)
        constexpr uint32_t IE = (1U << 29);  ///< Interrupt Enable Bit 1 = Enable timer Interrupt. 0 = Disable timer Interrupt. If timer interrupt is enabled, the timer asserts its interrupt signal when the associated up-timer value is equal to TCMPR.
        constexpr uint32_t CEN = (1U << 30);  ///< Timer Enable Bit 1 = Starts counting 0 = Stops/Suspends counting Note1: In stop status, and then set CEN to 1 will enables the 24-bit up-timer keeps up counting from the last stop counting value. Note2: This bit is auto-cleared by hardware in one-shot mode (MODE[28:27]=00) when the associated timer interrupt is generated (IE[29]=1).
    }

    /// TCMPR Register bits
    namespace tcmpr_bits {
        constexpr uint32_t TCMP = (24 << 0);  ///< Timer Compared Value TCMP is a 24-bit compared register. When the internal 24-bit up-timer counts and its value is equal to TCMP value, a Timer Interrupt is requested if the timer interrupt is enabled with TCSR.IE[29]=1. The TCMP value defines the timer counting cycle time. Time out period = (Period of timer clock input) * (8-bit PRESCALE + 1) * (24-bit TCMP) NOTE1: Never write 0x0 or 0x1 in TCMP, or the core will run into unknown state. NOTE2: No matter CEN is 0 or 1, whenever software write a new value into this register, TIMER will restart counting using this new value and abort previous count.
    }

    /// TISR Register bits
    namespace tisr_bits {
        constexpr uint32_t TIF = (1U << 0);  ///< Timer Interrupt Flag This bit indicates the interrupt status of Timer. TIF bit is set by hardware when the up counting value of internal 24-bit timer matches the timer compared value (TCMP). It is cleared by writing 1 to this bit.
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t TDR = (24 << 0);  ///< Timer Data Register When TCSR.TDR_EN is set to 1, the internal 24-bit up-timer value will be loaded into TDR. User can read this register for the up-timer value.
    }

}

// ============================================================================
// TMR1 Peripheral
// ============================================================================

namespace tmr1 {
    /// Base addresses
    constexpr uint32_t TMR1_BASE = 0x40010020;

    /// TMR1 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TMR1 = reinterpret_cast<Registers*>(TMR1_BASE);

}

// ============================================================================
// TMR2 Peripheral
// ============================================================================

namespace tmr2 {
    /// Base addresses
    constexpr uint32_t TMR2_BASE = 0x40110000;

    /// TMR2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TMR2 = reinterpret_cast<Registers*>(TMR2_BASE);

}

// ============================================================================
// TMR3 Peripheral
// ============================================================================

namespace tmr3 {
    /// Base addresses
    constexpr uint32_t TMR3_BASE = 0x40110020;

    /// TMR3 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* TMR3 = reinterpret_cast<Registers*>(TMR3_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t UART0_BASE = 0x40050000;
    constexpr uint32_t UART1_BASE = 0x40150000;
    constexpr uint32_t UART2_BASE = 0x40154000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t UA_RBR;  ///< Offset: 0x00 - Receive Buffer Register.
        volatile uint32_t UA_THR;  ///< Offset: 0x00 - Transmit Holding Register.
        volatile uint32_t UA_IER;  ///< Offset: 0x04 - Interrupt Enable Register.
        volatile uint32_t UA_FCR;  ///< Offset: 0x08 - FIFO Control Register.
        volatile uint32_t UA_LCR;  ///< Offset: 0x0C - Line Control Register.
        volatile uint32_t UA_MCR;  ///< Offset: 0x10 - Modem Control Register.
        volatile uint32_t UA_MSR;  ///< Offset: 0x14 - Modem Status Register.
        volatile uint32_t UA_FSR;  ///< Offset: 0x18 - FIFO Status Register.
        volatile uint32_t UA_ISR;  ///< Offset: 0x1C - Interrupt Status Register.
        volatile uint32_t UA_TOR;  ///< Offset: 0x20 - Time Out Register
        volatile uint32_t UA_BAUD;  ///< Offset: 0x24 - Baud Rate Divisor Register
        volatile uint32_t UA_IRCR;  ///< Offset: 0x28 - IrDA Control Register.
        volatile uint32_t UA_ALT_CSR;  ///< Offset: 0x2C - LIN Break Failed Count Register.
        volatile uint32_t UA_FUN_SEL;  ///< Offset: 0x30 - Function Select Register.
    };

    /// Peripheral instances
    inline Registers* UART0 = reinterpret_cast<Registers*>(UART0_BASE);
    inline Registers* UART1 = reinterpret_cast<Registers*>(UART1_BASE);
    inline Registers* UART2 = reinterpret_cast<Registers*>(UART2_BASE);

    // Bit definitions
    /// UA_RBR Register bits
    namespace ua_rbr_bits {
        constexpr uint32_t RBR = (8 << 0);  ///< Receive Buffer Register By reading this register, the UART will return an 8-bit data received from Rx pin (LSB first).
    }

    /// UA_THR Register bits
    namespace ua_thr_bits {
        constexpr uint32_t THR = (8 << 0);  ///< Transmit Holding Register By writing to this register, the UART will send out an 8-bit data through the TX pin (LSB first).
    }

    /// UA_IER Register bits
    namespace ua_ier_bits {
        constexpr uint32_t RDA_IEN = (1U << 0);  ///< Receive Data Available Interrupt Enable. 0 = Mask off INT_RDA 1 = Enable INT_RDA
        constexpr uint32_t THRE_IEN = (1U << 1);  ///< Transmit Holding Register Empty Interrupt Enable 0 = Mask off INT_THRE 1 = Enable INT_THRE
        constexpr uint32_t RLS_IEN = (1U << 2);  ///< Receive Line Status Interrupt Enable 0 = Mask off INT_RLS 1 = Enable INT_RLS
        constexpr uint32_t MODEM_IEN = (1U << 3);  ///< Modem Status Interrupt Enable 0 = Mask off INT_MODEM 1 = Enable INT_MODEM
        constexpr uint32_t RTO_IEN = (1U << 4);  ///< Rx Time out Interrupt Enable 0 = Mask off INT_TOUT 1 = Enable INT_TOUT.
        constexpr uint32_t BUF_ERR_IEN = (1U << 5);  ///< Buffer Error Interrupt Enable 0 = Mask off INT_Buf_ERR 1 = Enable INT_Buf_ERR
        constexpr uint32_t WAKE_EN = (1U << 6);  ///< Wake up CPU function enable 0 = Disable UART wake up CPU function 1 = Enable wake up function, when the system is in deep sleep mode, an external /CTS change will wake up CPU from deep sleep mode.
        constexpr uint32_t LIN_RX_BRK_IEN = (1U << 8);  ///< LIN RX Break Field Detected Interrupt Enable 0 = Mask off Lin bus Rx break filed interrupt. 1 = Enable Lin bus Rx break filed interrupt. Note: This field is used for LIN function mode.
        constexpr uint32_t TIME_OUT_EN = (1U << 11);  ///< Time-Out Counter Enable 1 = Enable Time-out counter. 0 = Disable Time-out counter.
        constexpr uint32_t AUTO_RTS_EN = (1U << 12);  ///< RTS Auto Flow Control Enable 1 = Enable RTS auto flow control. 0 = Disable RTS auto flow control. When RTS auto-flow is enabled, if the number of bytes in the Rx FIFO equals the UA_FCR[RTS_Tri_Lev], the UART will de-assert RTS signal.
        constexpr uint32_t AUTO_CTS_EN = (1U << 13);  ///< CTS Auto Flow Control Enable 1 = Enable CTS auto flow control. 0 = Disable CTS auto flow control. When CTS auto-flow is enabled, the UART will send data to external device when CTS input assert (UART will not send data to device until CTS is asserted).
        constexpr uint32_t DMA_TX_EN = (1U << 14);  ///< TX DMA Enable 1 = Enable TX DMA. 0 = Disable TX DMA.
        constexpr uint32_t DMA_RX_EN = (1U << 15);  ///< Time-Out Counter Enable 1 = Enable RX DMA. 0 = Disable RX DMA.
    }

    /// UA_FCR Register bits
    namespace ua_fcr_bits {
        constexpr uint32_t RFR = (1U << 1);  ///< Rx Field Software Reset When Rx_RST is set, all the bytes in the transmit FIFO and Rx internal state machine are cleared. 0 = Writing 0 to this bit has no effect. 1 = Writing 1 to this bit will reset the Rx internal state machine and pointers. Note: This bit will auto clear needs at least 3 UART engine clock cycles.
        constexpr uint32_t TFR = (1U << 2);  ///< Tx Field Software Reset When Tx_RST is set, all the bytes in the transmit FIFO and Tx internal state machine are cleared. 0 = Writing 0 to this bit has no effect. 1 = Writing 1 to this bit will reset the Tx internal state machine and pointers. Note: This bit will auto clear needs at least 3 UART engine clock cycles.
        constexpr uint32_t RFITL = (4 << 4);  ///< Rx FIFO Interrupt (INT_RDA) Trigger Level When the number of bytes in the receive FIFO equals the RFITL then the RDA_IF will be set (if IER [RDA_IEN] is enable, an interrupt will generated). RFITL	INTR_RDA Trigger Level (Bytes)	 0000	01	 0001	04	 0010	08	 0011	14	 0100	30/14 (High Speed/Normal Speed)	 0101	46/14 (High Speed/Normal Speed)	 0110	62/14 (High Speed/Normal Speed)	 others	62/14 (High Speed/Normal Speed)
        constexpr uint32_t RX_DIS = (1U << 8);  ///< Receiver Disable register The receiver is disabled or not (set 1 is disable receiver) 1 = Disable Receiver. 0 = Enable Receiver. Note: This field is used for RS-485 Normal Multi-drop mode. It should be programmed before UA_ALT_CSR [RS-485_NMM] is programmed.
        constexpr uint32_t RTS_TRI_LEV = (4 << 16);  ///< RTS Trigger Level for Auto-flow Control Use(not available in UART2 channel) RTS_Tri_Lev	Trigger Level (Bytes)	 0000	01	 0001	04	 0010	08	 0011	14	 0100	30/14 (High Speed/Normal Speed)	 0101	46/14 (High Speed/Normal Speed)	 0110	62/14 (High Speed/Normal Speed)	 others	62/14 (High Speed/Normal Speed)
    }

    /// UA_LCR Register bits
    namespace ua_lcr_bits {
        constexpr uint32_t WLS = (2 << 0);  ///< Word Length Select WLS[1:0]	Character length	 00	5 bits	 01	6 bits	 10	7 bits	 11	8 bits
        constexpr uint32_t NSB = (1U << 2);  ///< Number of "STOP bit" 0= One "STOP bit" is generated in the transmitted data 1= One and a half "STOP bit" is generated in the transmitted data when 5-bit word length is selected; Two "STOP bit" is generated when 6-, 7- and 8-bit word length is selected.
        constexpr uint32_t PBE = (1U << 3);  ///< Parity Bit Enable 0 = Parity bit is not generated (transmit data) or checked (receive data) during transfer. 1 = Parity bit is generated or checked between the "last data word bit" and "stop bit" of the serial data.
        constexpr uint32_t EPE = (1U << 4);  ///< Even Parity Enable 0 = Odd number of logic 1's are transmitted or checked in the data word and parity bits. 1 = Even number of logic 1's are transmitted or checked in the data word and parity bits. This bit has effect only when bit 3 (parity bit enable) is set.
        constexpr uint32_t SPE = (1U << 5);  ///< Stick Parity Enable 0 = Disable stick parity 1 = When bits PBE , EPE and SPE are set, the parity bit is transmitted and checked as cleared. When PBE and SPE are set and EPE is cleared, the parity bit is transmitted and checked as set.
        constexpr uint32_t BCB = (1U << 6);  ///< Break Control Bit When this bit is set to logic 1, the serial data output (TX) is forced to the Spacing State (logic 0). This bit acts only on TX and has no effect on the transmitter logic.
    }

    /// UA_MCR Register bits
    namespace ua_mcr_bits {
        constexpr uint32_t RTS = (1U << 1);  ///< RTS (Request-To-Send) Signal (not available in UART2 channel) 0: Drive RTS pin to logic 1 (If the LEV_RTS set to low level triggered). 1: Drive RTS pin to logic 0 (If the LEV_RTS set to low level triggered). 0: Drive RTS pin to logic 0 (If the LEV_RTS set to hihg level triggered). 1: Drive RTS pin to logic 1 (If the LEV_RTS set to high level triggered).
        constexpr uint32_t LEV_RTS = (1U << 9);  ///< RTS Trigger Level (not available in UART2 channel) This bit can change the RTS trigger level. 0= low level triggered 1= high level triggered
        constexpr uint32_t RTS_ST = (1U << 13);  ///< RTS Pin State (not available in UART2 channel) This bit is the output pin status of RTS.
    }

    /// UA_MSR Register bits
    namespace ua_msr_bits {
        constexpr uint32_t DCTSF = (1U << 0);  ///< Detect CTS State Change Flag (not available in UART2 channel) This bit is set whenever CTS input has change state, and it will generate Modem interrupt to CPU when UA_IER [Modem_IEN] is set to 1. NOTE: This bit is read only, but can be cleared by writing '1' to it.
        constexpr uint32_t CTS_ST = (1U << 4);  ///< CTS Pin Status (not available in UART2 channel) This bit is the pin status of CTS.
        constexpr uint32_t LEV_CTS = (1U << 8);  ///< CTS Trigger Level (not available in UART2 channel) This bit can change the CTS trigger level. 0= low level triggered 1= high level triggered
    }

    /// UA_FSR Register bits
    namespace ua_fsr_bits {
        constexpr uint32_t RX_OVER_IF = (1U << 0);  ///< Rx overflow Error IF (Read Only) This bit is set when Rx FIFO overflow. If the number of bytes of received data is greater than Rx FIFO(UA_RBR) size, 64/16 bytes of (UA_RBR), this bit will be set. NOTE: This bit is read only, but can be cleared by writing '1' to it.
        constexpr uint32_t RS485_ADD_DETF = (1U << 3);  ///< RS-485 Address Byte Detection Flag (Read Only) (Low Density Only) This bit is set to logic 1 and set UA_ALT_CSR [RS485_ADD_EN] whenever in RS-485 mode the receiver detect any address byte received address byte character (bit9 = 1) bit, and it is reset whenever the CPU writes 1 to this bit. NOTE: This field is used for RS-485 function mode. NOTE: This bit is read only, but can be cleared by writing '1' to it.
        constexpr uint32_t PEF = (1U << 4);  ///< Parity Error Flag This bit is set to logic 1 whenever the received character does not have a valid "parity bit", and is reset whenever the CPU writes 1 to this bit. NOTE: This bit is read only, but can be cleared by writing '1' to it.
        constexpr uint32_t FEF = (1U << 5);  ///< Framing Error Flag This bit is set to logic 1 whenever the received character does not have a valid "stop bit" (that is, the stop bit following the last data bit or parity bit is detected as a logic 0), and is reset whenever the CPU writes 1 to this bit. NOTE: This bit is read only, but can be cleared by writing '1' to it.
        constexpr uint32_t BIF = (1U << 6);  ///< Break Interrupt Flag This bit is set to a logic 1 whenever the received data input(Rx) is held in the "spacing state" (logic 0) for longer than a full word transmission time (that is, the total time of "start bit" + data bits + parity + stop bits) and is reset whenever the CPU writes 1 to this bit. NOTE: This bit is read only, but can be cleared by writing '1' to it.
        constexpr uint32_t RX_POINTER = (6 << 8);  ///< Rx FIFO pointer (Read Only) This field indicates the Rx FIFO Buffer Pointer. When UART receives one byte from external device, Rx_Pointer increases one. When one byte of Rx FIFO is read by CPU, Rx_Pointer decreases one.
        constexpr uint32_t RX_EMPTY = (1U << 14);  ///< Receiver FIFO Empty (Read Only) This bit initiate Rx FIFO empty or not. When the last byte of Rx FIFO has been read by CPU, hardware sets this bit high. It will be cleared when UART receives any new data.
        constexpr uint32_t RX_FULL = (1U << 15);  ///< Receiver FIFO Full (Read Only) This bit initiates Rx FIFO full or not. This bit is set when RX_POINTER is equal to 64/16(UART0/UART1), otherwise is cleared by hardware.
        constexpr uint32_t TX_POINTER = (6 << 16);  ///< TX FIFO Pointer (Read Only) This field indicates the Tx FIFO Buffer Pointer. When CPU write one byte into UA_THR, Tx_Pointer increases one. When one byte of Tx FIFO is transferred to Transmitter Shift Register, Tx_Pointer decreases one.
        constexpr uint32_t TX_EMPTY = (1U << 22);  ///< Transmitter FIFO Empty (Read Only) This bit indicates Tx FIFO empty or not. When the last byte of Tx FIFO has been transferred to Transmitter Shift Register, hardware sets this bit high. It will be cleared when writing data into THR (Tx FIFO not empty).
        constexpr uint32_t TX_FULL = (1U << 23);  ///< Transmitter FIFO Full (Read Only) This bit indicates Tx FIFO full or not. This bit is set when Tx_Point is equal to 64/16(UART0/UART1), otherwise is cleared by hardware.
        constexpr uint32_t TX_OVER_IF = (1U << 24);  ///< Tx Overflow Error Interrupt Flag (Read Only) If Tx FIFO(UA_THR) is full, an additional write to UA_THR will cause this bit to logic 1. NOTE: This bit is read only, but can be cleared by writing '1' to it.
        constexpr uint32_t TE_FLAG = (1U << 28);  ///< Transmitter Empty Flag (Read Only) Bit is set by hardware when Tx FIFO(UA_THR) is empty and the STOP bit of the last byte has been transmitted. Bit is cleared automatically when Tx FIFO is not empty or the last byte transmission has not completed. NOTE: This bit is read only.
    }

    /// UA_ISR Register bits
    namespace ua_isr_bits {
        constexpr uint32_t RDA_IF = (1U << 0);  ///< Receive Data Available Interrupt Flag (Read Only). When the number of bytes in the Rx FIFO equals the RFITL then the RDA_IF will be set. If IER[RDA_IEN] is enabled, the RDA interrupt will be generated. NOTE: This bit is read only and it will be cleared when the number of unread bytes of Rx FIFO drops below the threshold level (RFITL).
        constexpr uint32_t THRE_IF = (1U << 1);  ///< Transmit Holding Register Empty Interrupt Flag (Read Only). This bit is set when the last data of TX FIFO is transferred to Transmitter Shift Register. If UA_IER[THRE_IEN] is enabled, the THRE interrupt will be generated. NOTE: This bit is read only and it will be cleared when writing data into THR (TX FIFO not empty).
        constexpr uint32_t RLS_IF = (1U << 2);  ///< Receive Line Interrupt Flag (Read Only). This bit is set when the Rx receive data have parity error, framing error or break error (at least one of 3 bits, BIF, FEF and PEF, is set). If IER[RLS_IEN] is enabled, the RLS interrupt will be generated. NOTE: This bit is read only and reset to 0 when all bits of BIF, FEF and PEF are cleared. NOTE: When in RS-485 function mode, this field include "receiver detect any address byte received address byte character (bit9 = 1') bit. "
        constexpr uint32_t MODEM_IF = (1U << 3);  ///< MODEM Interrupt Flag (Read Only) (not available in UART2 channel) This bit is set when the CTS pin has state change(DCTSF=1). if UA_IER[Modem_IEN] is enabled, the Modem interrupt will be generated. NOTE: This bit is read only and reset to 0 when bit DCTSF is cleared by a write 1 on DCTSF.
        constexpr uint32_t TOUT_IF = (1U << 4);  ///< Time Out Interrupt Flag (Read Only) This bit is set when the RX FIFO is not empty and no activities occurres in the RX FIFO and the time out counter equal to TOIC. If IER[Tout_IEN] is enabled, the Tout interrupt will be generated. NOTE: This bit is read only and user can read UA_RBR (Rx is in active) to clear it.
        constexpr uint32_t BUF_ERR_IF = (1U << 5);  ///< Buffer Error Interrupt Flag (Read Only) This bit is set when the TX or RX FIFO overflows (TX_Over_IF or RX_Over_IF is set). When BUF_ERR_IF is set, the transfer maybe is not correct. If UA_IER[BUF_ERR_IEN] is enabled, the buffer error interrupt will be generated. NOTE: This bit is cleared when both TX_OVER_IF and RX_OVER_IF are cleared.
        constexpr uint32_t LIN_RX_BREAK_IF = (1U << 7);  ///< LIN Bus RX Break Field Detected Flag This bit is set when RX received LIN Break Field. If UA_IER[LIN_RX_BRK_IEN] is enabled the LIN RX Break interrupt will be generated. NOTE: This bit is read only and user can write 1 to clear it.
        constexpr uint32_t RDA_INT = (1U << 8);  ///< Receive Data Available Interrupt Indicator (INT_RDA). This bit is set if RDA_IEN and RDA_IF are both set to 1. 1 = The RDA interrupt is generated. 0 = No RDA interrupt is generated .
        constexpr uint32_t THRE_INT = (1U << 9);  ///< Transmit Holding Register Empty Interrupt Indicator (INT_THRE). This bit is set if THRE_IEN and THRE_IF are both set to 1. 1 = The THRE interrupt is generated. 0 = No THRE interrupt is generated.
        constexpr uint32_t RLS_INT = (1U << 10);  ///< Receive Line Status Interrupt Indicator to (INT_RLS). This bit is set if RLS_IEN and RLS_IF are both set to 1. 1 = The RLS interrupt is generated. 0 = No RLS interrupt is generated.
        constexpr uint32_t MODEM_INT = (1U << 11);  ///< MODEM Status Interrupt Indicator to (INT_MOS). This bit is set if MODEM_IEN and MODEM_IF are both set to 1.. 1 = The Modem interrupt is generated. 0 = No Modem interrupt is generated.
        constexpr uint32_t TOUT_INT = (1U << 12);  ///< Time Out Interrupt Indicator (INT_Tout) This bit is set if TOUT_IEN and TOUT_IF are both set to 1. 1 = The Tout interrupt is generated. 0 = No Tout interrupt is generated.
        constexpr uint32_t BUF_ERR_INT = (1U << 13);  ///< Buffer Error Interrupt Indicator (INT_Buf_err) This bit is set if BUF_ERR_IEN and BUF_ERR_IF are both set to 1. 1 = The buffer error interrupt is generated. 0 = No buffer error interrupt is generated.
        constexpr uint32_t LIN_RX_BREAK_INT = (1U << 15);  ///< LIN Bus Rx Break Field Detected Interrupt Indicator This bit is set if LIN_RX_BRK_IEN and LIN_RX_BREAK_IF are both set to 1. 1 = The LIN RX Break interrupt is generated. 0 = No LIN RX Break interrupt is generated.
        constexpr uint32_t HW_RLS_IF = (1U << 18);  ///< In DMA mode, Receive Line Status Flag (Read Only) This bit is set when the Rx receive data have parity error, framing error or break error (at least one of 3 bits, BIF, FEF and PEF, is set). If IER[RLS_IEN] is enabled, the RLS interrupt will be generated. NOTE: This bit is read only and reset to 0 when all bits of BIF, FEF and PEF are cleared.
        constexpr uint32_t HW_MODEM_IF = (1U << 19);  ///< In DMA mode, MODEM Interrupt Flag (Read Only) (not available in UART2 channel) This bit is set when the CTS pin has state change(DCTSF=1). if IER[Modem_IEN] is enabled, the Modem interrupt will be generated. NOTE: This bit is read only and reset to 0 when bit DCTSF is cleared by a write 1 on DCTSF.
        constexpr uint32_t HW_TOUT_IF = (1U << 20);  ///< In DMA mode, Time out Interrupt Flag (Read Only) This bit is set when the Rx FIFO is not empty and no activities occurres in the Rx FIFO and the time out counter equal to TOIC. If IER[Tout_IEN] is enabled, the Tout interrupt will be generated. NOTE: This bit is read only and user can read UA_RBR (Rx is in active) to clear it.
        constexpr uint32_t HW_BUF_ERR_IF = (1U << 21);  ///< In DMA mode, Buffer Error Interrupt Flag (Read Only) This bit is set when the Tx or Rx FIFO overflows (Tx_Over_IF or Rx_Over_IF is set). When Buf_Err_IF is set, the transfer maybe is not correct. If IER[Buf_Err_IEN] is enabled, the buffer error interrupt will be generated. NOTE: This bit is cleared when both Tx_Over_IF and Rx_Over_IF are cleared.
        constexpr uint32_t HW_LIN_RX_BREAK_IF = (1U << 23);  ///< In DMA mode, LIN Bus Rx Break Field Detect Interrupt Flag This bit is set when Rx received LIN Break Field. If IER[LIN_RX_BRK_IEN] is enabled the LIN RX Break interrupt will be generated. NOTE: This bit is read only and user can write 1 to clear it.
        constexpr uint32_t HW_RLS_INT = (1U << 26);  ///< In DMA mode, Receive Line Status Interrupt Indicator (INT_RLS). This bit is set if RLS_IEN and HW_RLS_IF are both set to 1. 1 = The RLS interrupt is generated in DMA mode. 0 = No RLS interrupt is generated in DMA mode.
        constexpr uint32_t HW_MODEM_INT = (1U << 27);  ///< In DMA mode, MODEM Status Interrupt Indicator (INT_MOS)(not available in UART2 channel). This bit is set if MODEM_IEN and HW_MODEM_IF are both set to 1. 1 = The Modem interrupt is generated in DMA mode. 0 = No Modem interrupt is generated in DMA mode.
        constexpr uint32_t HW_TOUT_INT = (1U << 28);  ///< In DMA mode, Time Out Interrupt Indicator (INT_Tout) This bit is set if TOUT_IEN and HW_TOUT_IF are both set to 1. 1 = The Tout interrupt is generated in DMA mode. 0 = No Tout interrupt is generated in DMA mode.
        constexpr uint32_t HW_BUF_ERR_INT = (1U << 29);  ///< In DMA mode, Buffer Error Interrupt Indicator(INT_Buf_err) This bit is set if BUF_ERR_IEN and HW_BUF_ERR_IF are both set to 1. 1 = The buffer error interrupt is generated in DMA mode. 0 = No buffer error interrupt is generated in DMA mode.
        constexpr uint32_t HW_LIN_RX_BREAK_INT = (1U << 31);  ///< In DMA mode, LIN Bus Rx Break Field Detected Interrupt Indicator This bit is set if LIN_RX_BRK_IEN and HW_LIN_RX_BREAK_IF are both set to 1. 1 = The LIN RX Break interrupt is generated in DMA mode. 0 = No LIN RX Break interrupt is generated in DMA mode.
    }

    /// UA_TOR Register bits
    namespace ua_tor_bits {
        constexpr uint32_t TOIC = (7 << 0);  ///< Time Out Interrupt Comparator The time out counter resets and starts counting (the counting clock = baud rate) whenever the RX FIFO receives a new data word. Once the content of time out counter (TOUT_CNT) is equal to that of time out interrupt comparator (TOIC), a receiver time out interrupt (INTR_TOUT) is generated if UA_IER [RTO_IEN]. A new incoming data word or RX FIFO empty clears INTR_TOUT.
        constexpr uint32_t DLY = (8 << 8);  ///< TX Delay time value (Low Density Only) This field is use to programming the transfer delay time between the last stop bit and next start bit.
    }

    /// UA_BAUD Register bits
    namespace ua_baud_bits {
        constexpr uint32_t BRD = (16 << 0);  ///< Baud Rate Divider The field indicated the baud rate divider
        constexpr uint32_t DIVIDER_X = (4 << 24);  ///< Divider X The baud rate divider M = X+1.
        constexpr uint32_t DIV_X_ONE = (1U << 28);  ///< Divider X equal 1 0 = Divider M = X (the equation of M = X+1, but Divider_X[27:24] must > =8) 1 = Divider M = 1 (the equation of M = 1, but BRD[15:0] must >=3). Mode	DIV_X_EN 	DIV_X_ONE 	DIVIDER X 	BRD 	Baud rate equation 	 0 	Disable 	0 	B	A	UART_CLK / [16 * (A+2)]	 1 	Enable 	0 	B	A	UART_CLK/[(B+1)*(A+2)],B must >= 8	 2 	Enable 	1	Don't Care	A	UART_CLK / (A+2), A must >=3
        constexpr uint32_t DIV_X_EN = (1U << 29);  ///< Divider X Enable The BRD = Baud Rate Divider, and the baud rate equation is Baud Rate = Clock / [ M * (BRD + 2) ] ; The default value of M is 16. 0 = Disable divider X (the equation of M = 16) 1 = Enable divider X (the equation of M = X+1, but Divider_X[27:24 must > =8). NOTE: When in IrDA mode, this bit must disable. Mode	DIV_X_EN 	DIV_X_ONE 	DIVIDER X 	BRD 	Baud rate equation 	 0 	Disable 	0 	B	A	UART_CLK / [16 * (A+2)]	 1 	Enable 	0 	B	A	UART_CLK/[(B+1)*(A+2)],B must >= 8	 2 	Enable 	1	Don't Care	A	UART_CLK / (A+2), A must >=3
    }

    /// UA_IRCR Register bits
    namespace ua_ircr_bits {
        constexpr uint32_t TX_SELECT = (1U << 1);  ///< Enable IrDA Receiver 1: Enable IrDA transmitter 0: Enable IrDA receiver
        constexpr uint32_t INV_TX = (1U << 5);  ///< INV_TX 1= Inverse TX output signal 0= No inversion
        constexpr uint32_t INV_RX = (1U << 6);  ///< INV_RX 1= Inverse RX input signal 0= No inversion
    }

    /// UA_ALT_CSR Register bits
    namespace ua_alt_csr_bits {
        constexpr uint32_t UA_LIN_BKFL = (4 << 0);  ///< UART LIN Break Field Length This field indicates a 4-bit LIN TX break field count. NOTE: This break field length is UA_LIN_BKFL + 2
        constexpr uint32_t LIN_RX_EN = (1U << 6);  ///< LIN RX Enable 1 = Enable LIN RX mode. 0 = Disable LIN RX mode.
        constexpr uint32_t LIN_TX_EN = (1U << 7);  ///< LIN TX Break Mode Enable 1 = Enable LIN TX Break mode. 0 = Disable LIN TX Break mode. NOTE: When TX break field transfer operation finish, this will be cleared automatically.
        constexpr uint32_t RS485_NMM = (1U << 8);  ///< RS-485 Normal Multi-drop Operation Mode (NMM) (Low Density Only) 1 = Enable RS-485 Normal Multi-drop Operation Mode (NMM). 0 = Disable RS-485 Normal Multi-drop Operation Mode (NMM). Note: It can't be active with RS485_AAD operation mode.
        constexpr uint32_t RS485_AAD = (1U << 9);  ///< RS-485 Auto Address Detection Operation Mode (AAD) (Low Density Only) 1 = Enable RS-485 Auto Address Detection Operation Mode (AAD). 0 = Disable RS-485 Auto Address Detection Operation Mode (AAD). Note: It can't be active with RS485_NMM operation mode.
        constexpr uint32_t RS485_AUD = (1U << 10);  ///< RS-485 Auto Direction Mode (AUD) (Low Density Only) 1 = Enable RS-485 Auto Direction Operation Mode (AUO). 0 = Disable RS-485 Auto Direction Operation Mode (AUO). Note:This field is used for RS-485 any operation mode. Note: It can be active with RS-485_AAD or RS485_NMM operation mode.
        constexpr uint32_t RS485_ADD_EN = (1U << 15);  ///< RS-485 Address Detection Enable (Low Density Only) 1 = Enable address detection mode. 0 = Disable address detection mode. Note: This field is used for RS485 any operation mode.
        constexpr uint32_t ADDR_MATCH = (8 << 24);  ///< Address match value register (Low Density Only) This field contains the RS-485 address match values. Note: This field is used for RS-485 auto address detection mode.
    }

    /// UA_FUN_SEL Register bits
    namespace ua_fun_sel_bits {
        constexpr uint32_t FUN_SEL = (2 << 0);  ///< Function Select Enable 00 = UART Function 01 = Enable LIN Function 10 = Enable IrDA Function 11 = Enable RS-485 Function (Low Density Only)
    }

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USB_BASE = 0x40060000;

    /// USB Register structure
    struct Registers {
        volatile uint32_t USB_INTEN;  ///< Offset: 0x00 - Interrupt Enable Flag
        volatile uint32_t USB_INTSTS;  ///< Offset: 0x04 - Interrupt Event Flag
        volatile uint32_t USB_FADDR;  ///< Offset: 0x08 - Function Address
        volatile uint32_t USB_EPSTS;  ///< Offset: 0x0C - System state
        volatile uint32_t USB_ATTR;  ///< Offset: 0x10 - Bus state & attribution
        volatile uint32_t USB_FLDET;  ///< Offset: 0x14 - Device Floating Detected
        volatile uint32_t USB_BUFSEG;  ///< Offset: 0x18 - Buffer Segmentation
        volatile uint32_t USB_BUFSEG0;  ///< Offset: 0x20 - Buffer Segmentation of endpoint 0
        volatile uint32_t USB_MXPLD0;  ///< Offset: 0x24 - Maximal payload of endpoint 0
        volatile uint32_t USB_CFG0;  ///< Offset: 0x28 - Configuration of endpoint 0
        volatile uint32_t USB_CFGP0;  ///< Offset: 0x2C - stall control register and In/out ready clear flag of endpoint 0
        volatile uint32_t USB_BUFSEG1;  ///< Offset: 0x30 - Buffer Segmentation of endpoint 1
        volatile uint32_t USB_MXPLD1;  ///< Offset: 0x34 - Maximal payload of endpoint 1
        volatile uint32_t USB_CFG1;  ///< Offset: 0x38 - Configuration of endpoint 1
        volatile uint32_t USB_CFGP1;  ///< Offset: 0x3C - stall control register and In/out ready clear flag of endpoint 1
        volatile uint32_t USB_BUFSEG2;  ///< Offset: 0x40 - Buffer Segmentation of endpoint 2
        volatile uint32_t USB_MXPLD2;  ///< Offset: 0x44 - Maximal payload of endpoint 2
        volatile uint32_t USB_CFG2;  ///< Offset: 0x48 - Configuration of endpoint 2
        volatile uint32_t USB_CFGP2;  ///< Offset: 0x4C - stall control register and In/out ready clear flag of endpoint 2
        volatile uint32_t USB_BUFSEG3;  ///< Offset: 0x50 - Buffer Segmentation of endpoint 3
        volatile uint32_t USB_MXPLD3;  ///< Offset: 0x54 - Maximal payload of endpoint 3
        volatile uint32_t USB_CFG3;  ///< Offset: 0x58 - Configuration of endpoint 3
        volatile uint32_t USB_CFGP3;  ///< Offset: 0x5C - stall control register and In/out ready clear flag of endpoint 3
        volatile uint32_t USB_BUFSEG4;  ///< Offset: 0x60 - Buffer Segmentation of endpoint 4
        volatile uint32_t USB_MXPLD4;  ///< Offset: 0x64 - Maximal payload of endpoint 4
        volatile uint32_t USB_CFG4;  ///< Offset: 0x68 - Configuration of endpoint 4
        volatile uint32_t USB_CFGP4;  ///< Offset: 0x6C - stall control register and In/out ready clear flag of endpoint 4
        volatile uint32_t USB_BUFSEG5;  ///< Offset: 0x70 - Buffer Segmentation of endpoint 5
        volatile uint32_t USB_MXPLD5;  ///< Offset: 0x74 - Maximal payload of endpoint 5
        volatile uint32_t USB_CFG5;  ///< Offset: 0x78 - Configuration of endpoint 5
        volatile uint32_t USB_CFGP5;  ///< Offset: 0x7C - In ready clear flag of endpoint 5
        volatile uint32_t USB_DRVSE0;  ///< Offset: 0x90 - Drive Single Ended Zero (SE0) in USB Bus
        volatile uint32_t USB_PDMA;  ///< Offset: 0xA4 - New description for register
    };

    /// Peripheral instances
    inline Registers* USB = reinterpret_cast<Registers*>(USB_BASE);

    // Bit definitions
    /// USB_INTEN Register bits
    namespace usb_inten_bits {
        constexpr uint32_t BUS_IE = (1U << 0);  ///< 1/0: Enable/disable BUS event interrupt.
        constexpr uint32_t USB_IE = (1U << 1);  ///< 1/0: Enable/disable USB event interrupt.
        constexpr uint32_t FLDET_IE = (1U << 2);  ///< 1/0: Enable/disable Floating detect Interrupt
        constexpr uint32_t WAKEUP_IE = (1U << 3);  ///< 1/0: Enable/disable Wakeup Interrupt.
        constexpr uint32_t WAKEUP_EN = (1U << 8);  ///< 1/0: Enable/Disable USB wakeup function
        constexpr uint32_t INNAK_EN = (1U << 15);  ///< 1 = The NAK status is updated into the endpoint status register, USB_EPSTS, when it is set to 1 and there is NAK response in IN token. It also enable the interrupt event when the device responds NAK after receiving IN token. 0 = The NAK status doesn't be updated into the endpoint status register when it was set to 0. It also disable the interrupt event when device responds NAK after receiving IN token
    }

    /// USB_INTSTS Register bits
    namespace usb_intsts_bits {
        constexpr uint32_t BUS_STS = (1U << 0);  ///< The BUS event means that there is one of the suspense or the resume function in the bus. 1 = Bus event occurred; check USB_ATTR[3:0] to know which kind of bus event was occurred, cleared by write 1 to USB_INTSTS[0]. 0 = No any BUS event is occurred
        constexpr uint32_t USB_STS = (1U << 1);  ///< The USB event includes the Setup Token, IN Token, OUT ACK, ISO IN, or ISO OUT events in the bus. 1 = USB event occurred, check EPSTS0~5[2:0] to know which kind of USB event was occurred, cleared by write 1 to USB_INTSTS[1] or EPSTS0~5 and SETUP (USB_INTSTS[31]) 0 = No any USB event is occurred
        constexpr uint32_t FLDET_STS = (1U << 2);  ///< 1 = There is attached/detached event in the USB bus and it is cleared by write 1 to USB_INTSTS[2]. 0 = There is not attached/detached event in the USB
        constexpr uint32_t WAKEUP_STS = (1U << 3);  ///< 1 = Wakeup event occurred, cleared by write 1 to USB_INTSTS[3] 0 = No Wakeup event is occurred
        constexpr uint32_t EPEVT0 = (1U << 16);  ///< 1 = USB event occurred on Endpoint 0, check USB_EPSTS[10:8] to know which kind of USB event was occurred, cleared by write 1 to USB_INTSTS[16] or USB_INTSTS[1] 0 = No event occurred in endpoint 0
        constexpr uint32_t EPEVT1 = (1U << 17);  ///< 1 = USB event occurred on Endpoint 1, check USB_EPSTS[13:11] to know which kind of USB event was occurred, cleared by write 1 to USB_INTSTS[17] or USB_INTSTS[1] 0 = No event occurred in endpoint 1
        constexpr uint32_t EPEVT2 = (1U << 18);  ///< 1 = USB event occurred on Endpoint 2, check USB_EPSTS[16:14] to know which kind of USB event was occurred, cleared by write 1 to USB_INTSTS[18] or USB_INTSTS[1] 0 = No event occurred in endpoint 2
        constexpr uint32_t EPEVT3 = (1U << 19);  ///< 1 = USB event occurred on Endpoint 3, check USB_EPSTS[19:17] to know which kind of USB event was occurred, cleared by write 1 to USB_INTSTS[19] or USB_INTSTS[1] 0 = No event occurred in endpoint 3
        constexpr uint32_t EPEVT4 = (1U << 20);  ///< 1 = USB event occurred on Endpoint 4, check USB_EPSTS[22:20] to know which kind of USB event was occurred, cleared by write 1 to USB_INTSTS[20] or USB_INTSTS[1] 0 = No event occurred in endpoint 4
        constexpr uint32_t EPEVT5 = (1U << 21);  ///< 1 = USB event occurred on Endpoint 5, check USB_EPSTS[25:23] to know which kind of USB event was occurred, cleared by write 1 to USB_INTSTS[21] or USB_INTSTS[1] 0 = No event occurred in endpoint 5
        constexpr uint32_t SETUP = (1U << 31);  ///< 1 = Setup event occurred, cleared by write 1 to USB_INTSTS[31] 0 = No Setup event
    }

    /// USB_FADDR Register bits
    namespace usb_faddr_bits {
        constexpr uint32_t FADDR = (7 << 0);  ///< Function Address of this USB device.
    }

    /// USB_EPSTS Register bits
    namespace usb_epsts_bits {
        constexpr uint32_t OVERRUN = (1U << 7);  ///< It indicates that the received data is over the maximum payload number or not. 1 = It indicates that the Out Data more than the Max Payload in MXPLD register or the Setup Data more than 8 Bytes 0 = No overrun
        constexpr uint32_t EPSTS0 = (3 << 8);  ///< These bits are used to indicate the current status of this endpoint 000 = In ACK 001 = In NAK 010 = Out Packet Data0 ACK 110 = Out Packet Data1 ACK 011 = Setup ACK 111 = Isochronous transfer end
        constexpr uint32_t EPSTS1 = (3 << 11);  ///< These bits are used to indicate the current status of this endpoint 000 = In ACK 001 = In NAK 010 = Out Packet Data0 ACK 110 = Out Packet Data1 ACK 011 = Setup ACK 111 = Isochronous transfer end
        constexpr uint32_t EPSTS2 = (3 << 14);  ///< These bits are used to indicate the current status of this endpoint 000 = In ACK 001 = In NAK 010 = Out Packet Data0 ACK 110 = Out Packet Data1 ACK 011 = Setup ACK 111 = Isochronous transfer end
        constexpr uint32_t EPSTS3 = (3 << 17);  ///< These bits are used to indicate the current status of this endpoint 000 = In ACK 001 = In NAK 010 = Out Packet Data0 ACK 110 = Out Packet Data1 ACK 011 = Setup ACK 111 = Isochronous transfer end
        constexpr uint32_t EPSTS4 = (3 << 20);  ///< These bits are used to indicate the current status of this endpoint 000 = In ACK 001 = In NAK 010 = Out Packet Data0 ACK 110 = Out Packet Data1 ACK 011 = Setup ACK 111 = Isochronous transfer end
        constexpr uint32_t EPSTS5 = (3 << 23);  ///< These bits are used to indicate the current status of this endpoint 000 = In ACK 001 = In NAK 010 = Out Packet Data0 ACK 110 = Out Packet Data1 ACK 011 = Setup ACK 111 = Isochronous transfer end
    }

    /// USB_ATTR Register bits
    namespace usb_attr_bits {
        constexpr uint32_t USBRST = (1U << 0);  ///< 1: Bus reset when SE0(single-ended 0) more than 2.5uS. 0: Bus no reset.
        constexpr uint32_t SUSPEND = (1U << 1);  ///< 1: Bus idle more than 3mS, either cable is plugged off or host is sleeping. 0: Bus no suspend.
        constexpr uint32_t RESUME = (1U << 2);  ///< 1: Resume from suspension 0: No bus resume.
        constexpr uint32_t TIMEOUT = (1U << 3);  ///< 1: No response more than 18 bits time 0: No time out.
        constexpr uint32_t PHY_EN = (1U << 4);  ///< 1: Enable PHY transceiver function. 0: Disable PHY transceiver function.
        constexpr uint32_t RWAKEUP = (1U << 5);  ///< 1: Force USB bus to K state, used for remote wake-up. 0: Release the USB bus from K state.
        constexpr uint32_t USB_EN = (1U << 7);  ///< 1: Enable USB controller. 0: Disable USB controller.
        constexpr uint32_t DPPU_EN = (1U << 8);  ///< Pull-up resistor on USB_DP enable bit 1: Enable 0: Disable
        constexpr uint32_t PWRDN = (1U << 9);  ///< 1: Turn-on related circuit of PHY transceiver 0: power-down related circuit of PHY transceiver
        constexpr uint32_t BYTEM = (1U << 10);  ///< 1: Byte Mode. The size of the transfer from CPU to USB SRAM can be Byte only. 0: Word Mode. The size of the transfer from CPU to USB SRAM can be Word. only
    }

    /// USB_FLDET Register bits
    namespace usb_fldet_bits {
        constexpr uint32_t FLDET = (1U << 0);  ///< 1: When the controller is attached into the BUS, this bit will be set as 1 0: The controller didn't attached into the USB host
    }

    /// USB_BUFSEG Register bits
    namespace usb_bufseg_bits {
        constexpr uint32_t BUFSEG = (6 << 3);  ///< It is used to indicate the offset address for the Setup token with the USB SRAM starting address. The effective starting address is USB_SRAM address + { BUFSEG[8:3], 3'b000} Where the USB_SRAM address = 0x40060100h. Note: It is used for Setup token only.
    }

    /// USB_BUFSEG0 Register bits
    namespace usb_bufseg0_bits {
        constexpr uint32_t BUFSEG0 = (6 << 3);  ///< It is used to indicate the offset address for each endpoint with the USB SRAM starting address. The effective starting address of the endpoint is: USB_SRAM address + { BUFSEG0[8:3], 3'b000} Where the USB_SRAM address = 0x40060100h. Refer to section 5.4.4.7 for the endpoint SRAM structure and its description.
    }

    /// USB_MXPLD0 Register bits
    namespace usb_mxpld0_bits {
        constexpr uint32_t MXPLD = (9 << 0);  ///< It is used to define the data length which is transmitted to host (IN token) or the actual data length which is received from the host (OUT token). It also used to indicate that the endpoint is ready to be transmitted in IN token or received in OUT token. (1). When the register is written by CPU, For IN token, the value of MXPLD is used to define the data length to be transmitted and indicate the data buffer is ready. For OUT token, it means that the controller is ready to receive data from the host and the value of MXPLD is the maximal data length comes from host. (2). When the register is read by CPU, For IN token, the value of MXPLD is indicated the data length be transmitted to host. For OUT token, the value of MXPLD is indicated the actual data length receiving from host. Note that once MXPLD is written, the data packets will be transmitted/received immediately after IN/OUT token arrived.
    }

    /// USB_CFG0 Register bits
    namespace usb_cfg0_bits {
        constexpr uint32_t EP_NUM = (4 << 0);  ///< These bits are used to define the endpoint number of the current endpoint.
        constexpr uint32_t ISOCH = (1U << 4);  ///< This bit is used to set the endpoint as Isochronous endpoint, no handshake. 1: Isochronous endpoint 0: No Isochronous endpoint
        constexpr uint32_t STATE = (2 << 5);  ///< 00 = Endpoint is disabled 01 = OUT endpoint 10 = IN endpoint 11 = Undefined
        constexpr uint32_t DSQ_SYNC = (1U << 7);  ///< 1 = DATA1 PID 0 = DATA0 PID It is used to specify the DATA0 or DATA1 PID in the following IN token transaction. H/W will toggle automatically in IN token base on the bit.
        constexpr uint32_t CSTALL = (1U << 9);  ///< 1 = Clear the device to response STALL handshake in setup stage 0 = Disable the device to clear the STALL handshake in setup stage
    }

    /// USB_CFGP0 Register bits
    namespace usb_cfgp0_bits {
        constexpr uint32_t CLRRDY = (1U << 0);  ///< When the MXPLD register is set by user, it means that the endpoint is ready to transmit or receive data. If the user wants to turn off this transaction before the transaction start, users can set this bit to 1 to turn it off and it is auto clear to 0. For IN token, write 1 is used to clear the IN token had ready to transmit the data to USB. For OUT token, write 1 is used to clear the OUT token had ready to receive the data from USB. This bit is write 1 only and it is always 0 when it was read back.
        constexpr uint32_t SSTALL = (1U << 1);  ///< 1 = Set the device to respond STALL automatically 0 = Disable the device to response STALL
    }

    /// USB_BUFSEG1 Register bits
    namespace usb_bufseg1_bits {
        constexpr uint32_t BUFSEG1 = (6 << 3);  ///< It is used to indicate the offset address for each endpoint with the USB SRAM starting address. The effective starting address of the endpoint is: USB_SRAM address + { BUFSEG1[8:3], 3'b000} Where the USB_SRAM address = 0x40060100h. Refer to section 5.4.4.7 for the endpoint SRAM structure and its description.
    }

    /// USB_MXPLD1 Register bits
    namespace usb_mxpld1_bits {
        constexpr uint32_t MXPLD = (9 << 0);  ///< It is used to define the data length which is transmitted to host (IN token) or the actual data length which is received from the host (OUT token). It also used to indicate that the endpoint is ready to be transmitted in IN token or received in OUT token. (1). When the register is written by CPU, For IN token, the value of MXPLD is used to define the data length to be transmitted and indicate the data buffer is ready. For OUT token, it means that the controller is ready to receive data from the host and the value of MXPLD is the maximal data length comes from host. (2). When the register is read by CPU, For IN token, the value of MXPLD is indicated the data length be transmitted to host. For OUT token, the value of MXPLD is indicated the actual data length receiving from host. Note that once MXPLD is written, the data packets will be transmitted/received immediately after IN/OUT token arrived.
    }

    /// USB_CFG1 Register bits
    namespace usb_cfg1_bits {
        constexpr uint32_t EP_NUM = (4 << 0);  ///< These bits are used to define the endpoint number of the current endpoint.
        constexpr uint32_t ISOCH = (1U << 4);  ///< This bit is used to set the endpoint as Isochronous endpoint, no handshake. 1: Isochronous endpoint 0: No Isochronous endpoint
        constexpr uint32_t STATE = (2 << 5);  ///< 00 = Endpoint is disabled 01 = OUT endpoint 10 = IN endpoint 11 = Undefined
        constexpr uint32_t DSQ_SYNC = (1U << 7);  ///< 1 = DATA1 PID 0 = DATA0 PID It is used to specify the DATA0 or DATA1 PID in the following IN token transaction. H/W will toggle automatically in IN token base on the bit.
        constexpr uint32_t CSTALL = (1U << 9);  ///< 1 = Clear the device to response STALL handshake in setup stage 0 = Disable the device to clear the STALL handshake in setup stage
    }

    /// USB_CFGP1 Register bits
    namespace usb_cfgp1_bits {
        constexpr uint32_t CLRRDY = (1U << 0);  ///< When the MXPLD register is set by user, it means that the endpoint is ready to transmit or receive data. If the user wants to turn off this transaction before the transaction start, users can set this bit to 1 to turn it off and it is auto clear to 0. For IN token, write 1 is used to clear the IN token had ready to transmit the data to USB. For OUT token, write 1 is used to clear the OUT token had ready to receive the data from USB. This bit is write 1 only and it is always 0 when it was read back.
        constexpr uint32_t SSTALL = (1U << 1);  ///< 1 = Set the device to respond STALL automatically 0 = Disable the device to response STALL
    }

    /// USB_BUFSEG2 Register bits
    namespace usb_bufseg2_bits {
        constexpr uint32_t BUFSEG2 = (6 << 3);  ///< It is used to indicate the offset address for each endpoint with the USB SRAM starting address. The effective starting address of the endpoint is: USB_SRAM address + { BUFSEG2[8:3], 3'b000} Where the USB_SRAM address = 0x40060100h. Refer to section 5.4.4.7 for the endpoint SRAM structure and its description.
    }

    /// USB_MXPLD2 Register bits
    namespace usb_mxpld2_bits {
        constexpr uint32_t MXPLD = (9 << 0);  ///< It is used to define the data length which is transmitted to host (IN token) or the actual data length which is received from the host (OUT token). It also used to indicate that the endpoint is ready to be transmitted in IN token or received in OUT token. (1). When the register is written by CPU, For IN token, the value of MXPLD is used to define the data length to be transmitted and indicate the data buffer is ready. For OUT token, it means that the controller is ready to receive data from the host and the value of MXPLD is the maximal data length comes from host. (2). When the register is read by CPU, For IN token, the value of MXPLD is indicated the data length be transmitted to host. For OUT token, the value of MXPLD is indicated the actual data length receiving from host. Note that once MXPLD is written, the data packets will be transmitted/received immediately after IN/OUT token arrived.
    }

    /// USB_CFG2 Register bits
    namespace usb_cfg2_bits {
        constexpr uint32_t EP_NUM = (4 << 0);  ///< These bits are used to define the endpoint number of the current endpoint.
        constexpr uint32_t ISOCH = (1U << 4);  ///< This bit is used to set the endpoint as Isochronous endpoint, no handshake. 1: Isochronous endpoint 0: No Isochronous endpoint
        constexpr uint32_t STATE = (2 << 5);  ///< 00 = Endpoint is disabled 01 = OUT endpoint 10 = IN endpoint 11 = Undefined
        constexpr uint32_t DSQ_SYNC = (1U << 7);  ///< 1 = DATA1 PID 0 = DATA0 PID It is used to specify the DATA0 or DATA1 PID in the following IN token transaction. H/W will toggle automatically in IN token base on the bit.
        constexpr uint32_t CSTALL = (1U << 9);  ///< 1 = Clear the device to response STALL handshake in setup stage 0 = Disable the device to clear the STALL handshake in setup stage
    }

    /// USB_CFGP2 Register bits
    namespace usb_cfgp2_bits {
        constexpr uint32_t CLRRDY = (1U << 0);  ///< When the MXPLD register is set by user, it means that the endpoint is ready to transmit or receive data. If the user wants to turn off this transaction before the transaction start, users can set this bit to 1 to turn it off and it is auto clear to 0. For IN token, write 1 is used to clear the IN token had ready to transmit the data to USB. For OUT token, write 1 is used to clear the OUT token had ready to receive the data from USB. This bit is write 1 only and it is always 0 when it was read back.
        constexpr uint32_t SSTALL = (1U << 1);  ///< 1 = Set the device to respond STALL automatically 0 = Disable the device to response STALL
    }

    /// USB_BUFSEG3 Register bits
    namespace usb_bufseg3_bits {
        constexpr uint32_t BUFSEG3 = (6 << 3);  ///< It is used to indicate the offset address for each endpoint with the USB SRAM starting address. The effective starting address of the endpoint is: USB_SRAM address + { BUFSEG3[8:3], 3'b000} Where the USB_SRAM address = 0x40060100h. Refer to section 5.4.4.7 for the endpoint SRAM structure and its description.
    }

    /// USB_MXPLD3 Register bits
    namespace usb_mxpld3_bits {
        constexpr uint32_t MXPLD = (9 << 0);  ///< It is used to define the data length which is transmitted to host (IN token) or the actual data length which is received from the host (OUT token). It also used to indicate that the endpoint is ready to be transmitted in IN token or received in OUT token. (1). When the register is written by CPU, For IN token, the value of MXPLD is used to define the data length to be transmitted and indicate the data buffer is ready. For OUT token, it means that the controller is ready to receive data from the host and the value of MXPLD is the maximal data length comes from host. (2). When the register is read by CPU, For IN token, the value of MXPLD is indicated the data length be transmitted to host. For OUT token, the value of MXPLD is indicated the actual data length receiving from host. Note that once MXPLD is written, the data packets will be transmitted/received immediately after IN/OUT token arrived.
    }

    /// USB_CFG3 Register bits
    namespace usb_cfg3_bits {
        constexpr uint32_t EP_NUM = (4 << 0);  ///< These bits are used to define the endpoint number of the current endpoint.
        constexpr uint32_t ISOCH = (1U << 4);  ///< This bit is used to set the endpoint as Isochronous endpoint, no handshake. 1: Isochronous endpoint 0: No Isochronous endpoint
        constexpr uint32_t STATE = (2 << 5);  ///< 00 = Endpoint is disabled 01 = OUT endpoint 10 = IN endpoint 11 = Undefined
        constexpr uint32_t DSQ_SYNC = (1U << 7);  ///< 1 = DATA1 PID 0 = DATA0 PID It is used to specify the DATA0 or DATA1 PID in the following IN token transaction. H/W will toggle automatically in IN token base on the bit.
        constexpr uint32_t CSTALL = (1U << 9);  ///< 1 = Clear the device to response STALL handshake in setup stage 0 = Disable the device to clear the STALL handshake in setup stage
    }

    /// USB_CFGP3 Register bits
    namespace usb_cfgp3_bits {
        constexpr uint32_t CLRRDY = (1U << 0);  ///< When the MXPLD register is set by user, it means that the endpoint is ready to transmit or receive data. If the user wants to turn off this transaction before the transaction start, users can set this bit to 1 to turn it off and it is auto clear to 0. For IN token, write 1 is used to clear the IN token had ready to transmit the data to USB. For OUT token, write 1 is used to clear the OUT token had ready to receive the data from USB. This bit is write 1 only and it is always 0 when it was read back.
        constexpr uint32_t SSTALL = (1U << 1);  ///< 1 = Set the device to respond STALL automatically 0 = Disable the device to response STALL
    }

    /// USB_BUFSEG4 Register bits
    namespace usb_bufseg4_bits {
        constexpr uint32_t BUFSEG4 = (6 << 3);  ///< It is used to indicate the offset address for each endpoint with the USB SRAM starting address. The effective starting address of the endpoint is: USB_SRAM address + { BUFSEG4[8:3], 3'b000} Where the USB_SRAM address = 0x40060100h. Refer to section 5.4.4.7 for the endpoint SRAM structure and its description.
    }

    /// USB_MXPLD4 Register bits
    namespace usb_mxpld4_bits {
        constexpr uint32_t MXPLD = (9 << 0);  ///< It is used to define the data length which is transmitted to host (IN token) or the actual data length which is received from the host (OUT token). It also used to indicate that the endpoint is ready to be transmitted in IN token or received in OUT token. (1). When the register is written by CPU, For IN token, the value of MXPLD is used to define the data length to be transmitted and indicate the data buffer is ready. For OUT token, it means that the controller is ready to receive data from the host and the value of MXPLD is the maximal data length comes from host. (2). When the register is read by CPU, For IN token, the value of MXPLD is indicated the data length be transmitted to host. For OUT token, the value of MXPLD is indicated the actual data length receiving from host. Note that once MXPLD is written, the data packets will be transmitted/received immediately after IN/OUT token arrived.
    }

    /// USB_CFG4 Register bits
    namespace usb_cfg4_bits {
        constexpr uint32_t EP_NUM = (4 << 0);  ///< These bits are used to define the endpoint number of the current endpoint.
        constexpr uint32_t ISOCH = (1U << 4);  ///< This bit is used to set the endpoint as Isochronous endpoint, no handshake. 1: Isochronous endpoint 0: No Isochronous endpoint
        constexpr uint32_t STATE = (2 << 5);  ///< 00 = Endpoint is disabled 01 = OUT endpoint 10 = IN endpoint 11 = Undefined
        constexpr uint32_t DSQ_SYNC = (1U << 7);  ///< 1 = DATA1 PID 0 = DATA0 PID It is used to specify the DATA0 or DATA1 PID in the following IN token transaction. H/W will toggle automatically in IN token base on the bit.
        constexpr uint32_t CSTALL = (1U << 9);  ///< 1 = Clear the device to response STALL handshake in setup stage 0 = Disable the device to clear the STALL handshake in setup stage
    }

    /// USB_CFGP4 Register bits
    namespace usb_cfgp4_bits {
        constexpr uint32_t CLRRDY = (1U << 0);  ///< When the MXPLD register is set by user, it means that the endpoint is ready to transmit or receive data. If the user wants to turn off this transaction before the transaction start, users can set this bit to 1 to turn it off and it is auto clear to 0. For IN token, write 1 is used to clear the IN token had ready to transmit the data to USB. For OUT token, write 1 is used to clear the OUT token had ready to receive the data from USB. This bit is write 1 only and it is always 0 when it was read back.
        constexpr uint32_t SSTALL = (1U << 1);  ///< 1 = Set the device to respond STALL automatically 0 = Disable the device to response STALL
    }

    /// USB_BUFSEG5 Register bits
    namespace usb_bufseg5_bits {
        constexpr uint32_t BUFSEG5 = (6 << 3);  ///< It is used to indicate the offset address for each endpoint with the USB SRAM starting address. The effective starting address of the endpoint is: USB_SRAM address + { BUFSEG5[8:3], 3'b000} Where the USB_SRAM address = 0x40060100h. Refer to section 5.4.4.7 for the endpoint SRAM structure and its description.
    }

    /// USB_MXPLD5 Register bits
    namespace usb_mxpld5_bits {
        constexpr uint32_t MXPLD = (9 << 0);  ///< It is used to define the data length which is transmitted to host (IN token) or the actual data length which is received from the host (OUT token). It also used to indicate that the endpoint is ready to be transmitted in IN token or received in OUT token. (1). When the register is written by CPU, For IN token, the value of MXPLD is used to define the data length to be transmitted and indicate the data buffer is ready. For OUT token, it means that the controller is ready to receive data from the host and the value of MXPLD is the maximal data length comes from host. (2). When the register is read by CPU, For IN token, the value of MXPLD is indicated the data length be transmitted to host. For OUT token, the value of MXPLD is indicated the actual data length receiving from host. Note that once MXPLD is written, the data packets will be transmitted/received immediately after IN/OUT token arrived.
    }

    /// USB_CFG5 Register bits
    namespace usb_cfg5_bits {
        constexpr uint32_t EP_NUM = (4 << 0);  ///< These bits are used to define the endpoint number of the current endpoint.
        constexpr uint32_t ISOCH = (1U << 4);  ///< This bit is used to set the endpoint as Isochronous endpoint, no handshake. 1: Isochronous endpoint 0: No Isochronous endpoint
        constexpr uint32_t STATE = (2 << 5);  ///< 00 = Endpoint is disabled 01 = OUT endpoint 10 = IN endpoint 11 = Undefined
        constexpr uint32_t DSQ_SYNC = (1U << 7);  ///< 1 = DATA1 PID 0 = DATA0 PID It is used to specify the DATA0 or DATA1 PID in the following IN token transaction. H/W will toggle automatically in IN token base on the bit.
        constexpr uint32_t CSTALL = (1U << 9);  ///< 1 = Clear the device to response STALL handshake in setup stage 0 = Disable the device to clear the STALL handshake in setup stage
    }

    /// USB_CFGP5 Register bits
    namespace usb_cfgp5_bits {
        constexpr uint32_t CLRRDY = (1U << 0);  ///< When the MXPLD register is set by user, it means that the endpoint is ready to transmit or receive data. If the user wants to turn off this transaction before the transaction start, users can set this bit to 1 to turn it off and it is auto clear to 0. For IN token, write 1 is used to clear the IN token had ready to transmit the data to USB. For OUT token, write 1 is used to clear the OUT token had ready to receive the data from USB. This bit is write 1 only and it is always 0 when it was read back.
        constexpr uint32_t SSTALL = (1U << 1);  ///< 1 = Set the device to respond STALL automatically 0 = Disable the device to response STALL
    }

    /// USB_DRVSE0 Register bits
    namespace usb_drvse0_bits {
        constexpr uint32_t DRVSE0 = (1U << 0);  ///< The Single Ended Zero (SE0) is when both lines (USB_DP and USB_DM) are being pulled low. 1 = Force USB PHY transceiver to drive SE0 0 = None
    }

    /// USB_PDMA Register bits
    namespace usb_pdma_bits {
        constexpr uint32_t PDMA_RW = (1U << 0);  ///< 1 = The USB PDMA read data from USB buffer to memory 0 = The USB PDMA write data from memory to USB buffer
        constexpr uint32_t PDMA_EN = (1U << 1);  ///< 1 = The PDMA function in USB is enabled 0 = The PDMA function in USB is disabled This bit will be automatically cleared after PDMA transfer done
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t WDT_BASE = 0x40004000;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t WTCR;  ///< Offset: 0x00 - Watchdog Timer Control Register
    };

    /// Peripheral instances
    inline Registers* WDT = reinterpret_cast<Registers*>(WDT_BASE);

    // Bit definitions
    /// WTCR Register bits
    namespace wtcr_bits {
        constexpr uint32_t WTR = (1U << 0);  ///< Clear Watchdog Timer (write protection bit) Set this bit will clear the Watchdog timer. 0 = Writing 0 to this bit has no effect 1 = Reset the contents of the Watchdog timer NOTE: This bit will auto clear after few clock cycle
        constexpr uint32_t WTRE = (1U << 1);  ///< Watchdog Timer Reset Enable (write protection bit) Setting this bit will enable the Watchdog timer reset function. 0 = Disable Watchdog timer reset function 1 = Enable Watchdog timer reset function
        constexpr uint32_t WTRF = (1U << 2);  ///< Watchdog Timer Reset Flag When the Watchdog timer initiates a reset, the hardware will set this bit. This flag can be read by software to determine the source of reset. Software is responsible to clear it manually by writing 1 to it. If WTRE is disabled, then the Watchdog timer has no effect on this bit. 0 = Watchdog timer reset did not occur 1 = Watchdog timer reset occurs NOTE: This bit is cleared by writing 1 to this bit.
        constexpr uint32_t WTIF = (1U << 3);  ///< Watchdog Timer Interrupt Flag If the Watchdog timer interrupt is enabled, then the hardware will set this bit to indicate that the Watchdog timer interrupt has occurred. 0 = Watchdog timer interrupt does not occur 1 = Watchdog timer interrupt occurs NOTE: This bit is cleared by writing 1 to this bit.
        constexpr uint32_t WTWKE = (1U << 4);  ///< Watchdog Timer Wakeup Function Enable bit (write protection bit) 0 : Disable Watchdog timer Wakeup CPU function. 1 : Enable the Wakeup function that Watchdog timer timeout can wake up CPU from power-down mode. Note: CHIP can wakeup by WDT only if WDT clock source select RC10K.
        constexpr uint32_t WTWKF = (1U << 5);  ///< Watchdog Timer Wakeup Flag If Watchdog timer causes CPU wakes up from power-down mode, this bit will be set to high. It must be cleared by software with a write 1 to this bit. 0 : Watchdog timer does not cause CPU wakeup. 1 : CPU wake up from sleep or power-down mode by Watchdog timeout.
        constexpr uint32_t WTIE = (1U << 6);  ///< Watchdog Timer Interrupt Enable (write protection bit) 0 = Disable the Watchdog timer interrupt 1 = Enable the Watchdog timer interrupt
        constexpr uint32_t WTE = (1U << 7);  ///< Watchdog Timer Enable (write protection bit) 0 = Disable the Watchdog timer (This action will reset the internal counter) 1 = Enable the Watchdog timer
        constexpr uint32_t WTIS = (3 << 8);  ///< Watchdog Timer Interval Select (write protection bit) These three bits select the timeout interval for the Watchdog timer. WTIS	Timeout Interval Selection	Interrupt Period	WTR Timeout Interval (WDT_CLK=12MHz)	 000	2^4 * WDT_CLK	(2^4 + 1024) * WDT_CLK	1.33 us ~ 86.67 us	 001	2^6 * WDT_CLK	(2^6 + 1024) * WDT_CLK	5.33 us ~ 90.67 us	 010	2^8 * WDT_CLK	(2^8 + 1024) * WDT_CLK	21.33 us ~ 106.67 us	 011	2^10 * WDT_CLK	(2^10 + 1024) * WDT_CLK	85.33 us ~ 170.67 us	 100	2^12 * WDT_CLK	(2^12 + 1024) * WDT_CLK	341.33 us ~ 426.67 us	 101	2^14 * WDT_CLK	(2^14 + 1024) * WDT_CLK	1.36 ms ~ 1.45 ms	 110	2^16 * WDT_CLK	(2^16 + 1024) * WDT_CLK	5.46 ms ~ 5.55 ms	 111	2^18 * WDT_CLK	(2^18 + 1024) * WDT_CLK	21.84 ms ~ 21.93 ms
    }

}


} // namespace alloy::generated::nuc1xx_registers

#endif // ALLOY_GENERATED_NUC1XX_REGISTERS_PERIPHERALS_HPP