/// Auto-generated code for sifive_hifive_unmatched_a00
/// Generated by Alloy Code Generator
/// Source: sifive-community_fu740.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:00:48
#ifndef ALLOY_GENERATED_SIFIVE_HIFIVE_UNMATCHED_A00_PERIPHERALS_HPP
#define ALLOY_GENERATED_SIFIVE_HIFIVE_UNMATCHED_A00_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::sifive_hifive_unmatched_a00 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_sifive = true;
    constexpr uint32_t num_sifive_instances = 2;
    constexpr bool has_riscv = true;
    constexpr uint32_t num_riscv_instances = 2;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 1;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 2;
    constexpr bool has_pwm = true;
    constexpr uint32_t num_pwm_instances = 2;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 2;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 3;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct sifive_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct riscv_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct pwm_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 3;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 1;
    constexpr uint32_t max_gpio_pins = 16;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_sifive_uart0_0 = true;
    constexpr bool has_sifive_uart0_1 = true;
}

// ============================================================================
// sifive Peripheral
// ============================================================================

namespace sifive {
    /// Base addresses
    constexpr uint32_t sifive_ccache0_0_BASE = 0x02010000;
    constexpr uint32_t sifive_test0_0_BASE = 0x00004000;

    /// sifive Register structure
    struct Registers {
        volatile uint32_t config;  ///< Offset: 0x00 - Information about the Cache Configuration
        volatile uint32_t wayenable;  ///< Offset: 0x08 - The index of the largest way which has been enabled. May...
        volatile uint32_t l2perfevent0;  ///< Offset: 0x2000 - The L2 performance event0 control register.
        volatile uint32_t l2perfevent1;  ///< Offset: 0x2008 - The L2 performance event1 control register.
        volatile uint32_t l2clientfilter;  ///< Offset: 0x2800 - The L2 Client Filterregister.
        volatile uint32_t l2pmcounter0;  ///< Offset: 0x3000 - The L2 performance monitor counter0 register.
        volatile uint32_t l2pmcounter1;  ///< Offset: 0x3008 - The L2 performance monitor counter1 register.
        volatile uint32_t l2pmcounter63;  ///< Offset: 0x31F8 - The L2 performance monitor counter63 register.
    };

    /// Peripheral instances
    inline Registers* sifive_ccache0_0 = reinterpret_cast<Registers*>(sifive_ccache0_0_BASE);
    inline Registers* sifive_test0_0 = reinterpret_cast<Registers*>(sifive_test0_0_BASE);

}

// ============================================================================
// riscv Peripheral
// ============================================================================

namespace riscv {
    /// Base addresses
    constexpr uint32_t riscv_clint0_0_BASE = 0x02000000;
    constexpr uint32_t riscv_plic0_0_BASE = 0x0C000000;

    /// riscv Register structure
    struct Registers {
        volatile uint32_t msip_0;  ///< Offset: 0x00 - MSIP Register for hart 0
        volatile uint32_t msip_1;  ///< Offset: 0x04 - MSIP Register for hart 1
        volatile uint32_t msip_2;  ///< Offset: 0x08 - MSIP Register for hart 2
        volatile uint32_t msip_3;  ///< Offset: 0x0C - MSIP Register for hart 3
        volatile uint32_t msip_4;  ///< Offset: 0x10 - MSIP Register for hart 4
        volatile uint32_t mtimecmp_0;  ///< Offset: 0x4000 - MTIMECMP Register for hart 0
        volatile uint32_t mtimecmp_1;  ///< Offset: 0x4008 - MTIMECMP Register for hart 1
        volatile uint32_t mtimecmp_2;  ///< Offset: 0x4010 - MTIMECMP Register for hart 2
        volatile uint32_t mtimecmp_3;  ///< Offset: 0x4018 - MTIMECMP Register for hart 3
        volatile uint32_t mtimecmp_4;  ///< Offset: 0x4020 - MTIMECMP Register for hart 4
        volatile uint32_t mtime;  ///< Offset: 0xBFF8 - MTIME Register
    };

    /// Peripheral instances
    inline Registers* riscv_clint0_0 = reinterpret_cast<Registers*>(riscv_clint0_0_BASE);
    inline Registers* riscv_plic0_0 = reinterpret_cast<Registers*>(riscv_plic0_0_BASE);

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t sifive_gpio0_0_BASE = 0x10060000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t input_val;  ///< Offset: 0x00 - Pin value
        volatile uint32_t input_en;  ///< Offset: 0x04 - Pin input enable
        volatile uint32_t output_en;  ///< Offset: 0x08 - Pin output enable
        volatile uint32_t output_val;  ///< Offset: 0x0C - Output value
        volatile uint32_t pue;  ///< Offset: 0x10 - Internal pull-up enable
        volatile uint32_t ds;  ///< Offset: 0x14 - Pin drive strength
        volatile uint32_t rise_ie;  ///< Offset: 0x18 - Rise interrupt enable
        volatile uint32_t rise_ip;  ///< Offset: 0x1C - Rise interrupt pending
        volatile uint32_t fall_ie;  ///< Offset: 0x20 - Fall interrupt enable
        volatile uint32_t fall_ip;  ///< Offset: 0x24 - Fall interrupt pending
        volatile uint32_t high_ie;  ///< Offset: 0x28 - High interrupt enable
        volatile uint32_t high_ip;  ///< Offset: 0x2C - High interrupt pending
        volatile uint32_t low_ie;  ///< Offset: 0x30 - Low interrupt enable
        volatile uint32_t low_ip;  ///< Offset: 0x34 - Low interrupt pending
        volatile uint32_t iof_en;  ///< Offset: 0x38 - I/O function enable
        volatile uint32_t iof_sel;  ///< Offset: 0x3C - I/O function select
        volatile uint32_t out_xor;  ///< Offset: 0x40 - Output XOR (invert)
    };

    /// Peripheral instances
    inline Registers* sifive_gpio0_0 = reinterpret_cast<Registers*>(sifive_gpio0_0_BASE);

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t sifive_i2c0_0_BASE = 0x10030000;
    constexpr uint32_t sifive_i2c0_1_BASE = 0x10031000;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t prescale_low;  ///< Offset: 0x00 - Clock Prescale register lo-byte
        volatile uint32_t prescale_high;  ///< Offset: 0x04 - Clock Prescale register hi-byte
        volatile uint32_t control;  ///< Offset: 0x08 - Control register
        volatile uint32_t transmit__receive;  ///< Offset: 0x0C - Transmit and receive data byte register
        volatile uint32_t command__status;  ///< Offset: 0x10 - Command write and status read register
    };

    /// Peripheral instances
    inline Registers* sifive_i2c0_0 = reinterpret_cast<Registers*>(sifive_i2c0_0_BASE);
    inline Registers* sifive_i2c0_1 = reinterpret_cast<Registers*>(sifive_i2c0_1_BASE);

}

// ============================================================================
// PWM Peripheral
// ============================================================================

namespace pwm {
    /// Base addresses
    constexpr uint32_t sifive_pwm0_0_BASE = 0x10020000;
    constexpr uint32_t sifive_pwm0_1_BASE = 0x10021000;

    /// PWM Register structure
    struct Registers {
        volatile uint32_t pwmcfg;  ///< Offset: 0x00 - PWM configuration register
        volatile uint32_t pwmcount;  ///< Offset: 0x08 - PWM count register
        volatile uint32_t pwms;  ///< Offset: 0x10 - Scaled PWM count register
        volatile uint32_t pwmcmp0;  ///< Offset: 0x20 - PWM 0 compare register
        volatile uint32_t pwmcmp1;  ///< Offset: 0x24 - PWM 1 compare register
        volatile uint32_t pwmcmp2;  ///< Offset: 0x28 - PWM 2 compare register
        volatile uint32_t pwmcmp3;  ///< Offset: 0x2C - PWM 3 compare register
    };

    /// Peripheral instances
    inline Registers* sifive_pwm0_0 = reinterpret_cast<Registers*>(sifive_pwm0_0_BASE);
    inline Registers* sifive_pwm0_1 = reinterpret_cast<Registers*>(sifive_pwm0_1_BASE);

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t sifive_uart0_0_BASE = 0x10010000;
    constexpr uint32_t sifive_uart0_1_BASE = 0x10011000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t txdata;  ///< Offset: 0x00 - Transmit data register
        volatile uint32_t rxdata;  ///< Offset: 0x04 - Receive data register
        volatile uint32_t txctrl;  ///< Offset: 0x08 - Transmit control register
        volatile uint32_t rxctrl;  ///< Offset: 0x0C - Receive control register
        volatile uint32_t ie;  ///< Offset: 0x10 - UART interrupt enable
        volatile uint32_t ip;  ///< Offset: 0x14 - UART interrupt pending
        volatile uint32_t div;  ///< Offset: 0x18 - Baud rate divisor
    };

    /// Peripheral instances
    inline Registers* sifive_uart0_0 = reinterpret_cast<Registers*>(sifive_uart0_0_BASE);
    inline Registers* sifive_uart0_1 = reinterpret_cast<Registers*>(sifive_uart0_1_BASE);

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t sifive_spi0_0_BASE = 0x10040000;
    constexpr uint32_t sifive_spi0_1_BASE = 0x10041000;
    constexpr uint32_t sifive_spi0_2_BASE = 0x10050000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t sckdiv;  ///< Offset: 0x00 - Serial clock divisor
        volatile uint32_t sckmode;  ///< Offset: 0x04 - Serial clock mode
        volatile uint32_t csid;  ///< Offset: 0x10 - Chip select ID
        volatile uint32_t csdef;  ///< Offset: 0x14 - Chip select default
        volatile uint32_t csmode;  ///< Offset: 0x18 - Chip select mode
        volatile uint32_t delay0;  ///< Offset: 0x28 - Delay control 0
        volatile uint32_t delay1;  ///< Offset: 0x2C - Delay control 1
        volatile uint32_t extradel;  ///< Offset: 0x38 - SPI extra sampling delay to increase the SPI frequency
        volatile uint32_t sampledel;  ///< Offset: 0x3C - Number of delay stages from slave to the SPI controller
        volatile uint32_t fmt;  ///< Offset: 0x40 - Frame format
        volatile uint32_t txdata;  ///< Offset: 0x48 - Tx FIFO Data
        volatile uint32_t rxdata;  ///< Offset: 0x4C - Rx FIFO data
        volatile uint32_t txmark;  ///< Offset: 0x50 - Tx FIFO watermark
        volatile uint32_t rxmark;  ///< Offset: 0x54 - Rx FIFO watermark
        volatile uint32_t fctrl;  ///< Offset: 0x60 - SPI flash interface control
        volatile uint32_t ffmt;  ///< Offset: 0x64 - SPI flash instruction format
        volatile uint32_t ie;  ///< Offset: 0x70 - SPI interrupt enable
        volatile uint32_t ip;  ///< Offset: 0x74 - SPI interrupt pending
    };

    /// Peripheral instances
    inline Registers* sifive_spi0_0 = reinterpret_cast<Registers*>(sifive_spi0_0_BASE);
    inline Registers* sifive_spi0_1 = reinterpret_cast<Registers*>(sifive_spi0_1_BASE);
    inline Registers* sifive_spi0_2 = reinterpret_cast<Registers*>(sifive_spi0_2_BASE);

}


} // namespace alloy::generated::sifive_hifive_unmatched_a00

#endif // ALLOY_GENERATED_SIFIVE_HIFIVE_UNMATCHED_A00_PERIPHERALS_HPP