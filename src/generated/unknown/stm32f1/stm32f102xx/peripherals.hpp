/// Auto-generated code for STM32F102xx
/// Generated by Alloy Code Generator
/// Source: st_stm32f102.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:21:47
#ifndef ALLOY_GENERATED_STM32F102XX_PERIPHERALS_HPP
#define ALLOY_GENERATED_STM32F102XX_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::stm32f102xx {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// PWR Peripheral
// ============================================================================

namespace pwr {
    /// Base addresses
    constexpr uint32_t PWR_BASE = 0x40007000;

    /// PWR Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Power control register (PWR_CR)
        volatile uint32_t CSR;  ///< Offset: 0x04 - Power control register (PWR_CR)
    };

    /// Peripheral instances
    inline Registers* PWR = reinterpret_cast<Registers*>(PWR_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t LPDS = (1U << 0);  ///< Low Power Deep Sleep
        constexpr uint32_t PDDS = (1U << 1);  ///< Power Down Deep Sleep
        constexpr uint32_t CWUF = (1U << 2);  ///< Clear Wake-up Flag
        constexpr uint32_t CSBF = (1U << 3);  ///< Clear STANDBY Flag
        constexpr uint32_t PVDE = (1U << 4);  ///< Power Voltage Detector Enable
        constexpr uint32_t PLS = (3 << 5);  ///< PVD Level Selection
        constexpr uint32_t DBP = (1U << 8);  ///< Disable Backup Domain write protection
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t WUF = (1U << 0);  ///< Wake-Up Flag
        constexpr uint32_t SBF = (1U << 1);  ///< STANDBY Flag
        constexpr uint32_t PVDO = (1U << 2);  ///< PVD Output
        constexpr uint32_t EWUP = (1U << 8);  ///< Enable WKUP pin
    }

}

// ============================================================================
// RCC Peripheral
// ============================================================================

namespace rcc {
    /// Base addresses
    constexpr uint32_t RCC_BASE = 0x40021000;

    /// RCC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Clock control register
        volatile uint32_t CFGR;  ///< Offset: 0x04 - Clock configuration register (RCC_CFGR)
        volatile uint32_t CIR;  ///< Offset: 0x08 - Clock interrupt register (RCC_CIR)
        volatile uint32_t APB2RSTR;  ///< Offset: 0x0C - APB2 peripheral reset register (RCC_APB2RSTR)
        volatile uint32_t APB1RSTR;  ///< Offset: 0x10 - APB1 peripheral reset register (RCC_APB1RSTR)
        volatile uint32_t AHBENR;  ///< Offset: 0x14 - AHB Peripheral Clock enable register (RCC_AHBENR)
        volatile uint32_t APB2ENR;  ///< Offset: 0x18 - APB2 peripheral clock enable register (RCC_APB2ENR)
        volatile uint32_t APB1ENR;  ///< Offset: 0x1C - APB1 peripheral clock enable register (RCC_APB1ENR)
        volatile uint32_t BDCR;  ///< Offset: 0x20 - Backup domain control register (RCC_BDCR)
        volatile uint32_t CSR;  ///< Offset: 0x24 - Control/status register (RCC_CSR)
    };

    /// Peripheral instances
    inline Registers* RCC = reinterpret_cast<Registers*>(RCC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t HSION = (1U << 0);  ///< Internal High Speed clock enable
        constexpr uint32_t HSIRDY = (1U << 1);  ///< Internal High Speed clock ready flag
        constexpr uint32_t HSITRIM = (5 << 3);  ///< Internal High Speed clock trimming
        constexpr uint32_t HSICAL = (8 << 8);  ///< Internal High Speed clock Calibration
        constexpr uint32_t HSEON = (1U << 16);  ///< External High Speed clock enable
        constexpr uint32_t HSERDY = (1U << 17);  ///< External High Speed clock ready flag
        constexpr uint32_t HSEBYP = (1U << 18);  ///< External High Speed clock Bypass
        constexpr uint32_t CSSON = (1U << 19);  ///< Clock Security System enable
        constexpr uint32_t PLLON = (1U << 24);  ///< PLL enable
        constexpr uint32_t PLLRDY = (1U << 25);  ///< PLL clock ready flag
    }

    /// CFGR Register bits
    namespace cfgr_bits {
        constexpr uint32_t SW = (2 << 0);  ///< System clock Switch
        constexpr uint32_t SWS = (2 << 2);  ///< System Clock Switch Status
        constexpr uint32_t HPRE = (4 << 4);  ///< AHB prescaler
        constexpr uint32_t PPRE1 = (3 << 8);  ///< APB Low speed prescaler (APB1)
        constexpr uint32_t PPRE2 = (3 << 11);  ///< APB High speed prescaler (APB2)
        constexpr uint32_t ADCPRE = (2 << 14);  ///< ADC prescaler
        constexpr uint32_t PLLSRC = (1U << 16);  ///< PLL entry clock source
        constexpr uint32_t PLLXTPRE = (1U << 17);  ///< HSE divider for PLL entry
        constexpr uint32_t PLLMUL = (4 << 18);  ///< PLL Multiplication Factor
        constexpr uint32_t MCO = (3 << 24);  ///< Microcontroller clock output
    }

    /// CIR Register bits
    namespace cir_bits {
        constexpr uint32_t LSIRDYF = (1U << 0);  ///< LSI Ready Interrupt flag
        constexpr uint32_t LSERDYF = (1U << 1);  ///< LSE Ready Interrupt flag
        constexpr uint32_t HSIRDYF = (1U << 2);  ///< HSI Ready Interrupt flag
        constexpr uint32_t HSERDYF = (1U << 3);  ///< HSE Ready Interrupt flag
        constexpr uint32_t PLLRDYF = (1U << 4);  ///< PLL Ready Interrupt flag
        constexpr uint32_t CSSF = (1U << 7);  ///< Clock Security System Interrupt flag
        constexpr uint32_t LSIRDYIE = (1U << 8);  ///< LSI Ready Interrupt Enable
        constexpr uint32_t LSERDYIE = (1U << 9);  ///< LSE Ready Interrupt Enable
        constexpr uint32_t HSIRDYIE = (1U << 10);  ///< HSI Ready Interrupt Enable
        constexpr uint32_t HSERDYIE = (1U << 11);  ///< HSE Ready Interrupt Enable
        constexpr uint32_t PLLRDYIE = (1U << 12);  ///< PLL Ready Interrupt Enable
        constexpr uint32_t LSIRDYC = (1U << 16);  ///< LSI Ready Interrupt Clear
        constexpr uint32_t LSERDYC = (1U << 17);  ///< LSE Ready Interrupt Clear
        constexpr uint32_t HSIRDYC = (1U << 18);  ///< HSI Ready Interrupt Clear
        constexpr uint32_t HSERDYC = (1U << 19);  ///< HSE Ready Interrupt Clear
        constexpr uint32_t PLLRDYC = (1U << 20);  ///< PLL Ready Interrupt Clear
        constexpr uint32_t CSSC = (1U << 23);  ///< Clock security system interrupt clear
    }

    /// APB2RSTR Register bits
    namespace apb2rstr_bits {
        constexpr uint32_t AFIORST = (1U << 0);  ///< Alternate function I/O reset
        constexpr uint32_t IOPARST = (1U << 2);  ///< IO port A reset
        constexpr uint32_t IOPBRST = (1U << 3);  ///< IO port B reset
        constexpr uint32_t IOPCRST = (1U << 4);  ///< IO port C reset
        constexpr uint32_t IOPDRST = (1U << 5);  ///< IO port D reset
        constexpr uint32_t ADC1RST = (1U << 9);  ///< ADC 1 interface reset
        constexpr uint32_t SPI1RST = (1U << 12);  ///< SPI 1 reset
        constexpr uint32_t USART1RST = (1U << 14);  ///< USART1 reset
    }

    /// APB1RSTR Register bits
    namespace apb1rstr_bits {
        constexpr uint32_t TIM2RST = (1U << 0);  ///< Timer 2 reset
        constexpr uint32_t TIM3RST = (1U << 1);  ///< Timer 3 reset
        constexpr uint32_t WWDGRST = (1U << 11);  ///< Window watchdog reset
        constexpr uint32_t USART2RST = (1U << 17);  ///< USART 2 reset
        constexpr uint32_t I2C1RST = (1U << 21);  ///< I2C1 reset
        constexpr uint32_t BKPRST = (1U << 27);  ///< Backup interface reset
        constexpr uint32_t PWRRST = (1U << 28);  ///< Power interface reset
    }

    /// AHBENR Register bits
    namespace ahbenr_bits {
        constexpr uint32_t DMA1EN = (1U << 0);  ///< DMA1 clock enable
        constexpr uint32_t DMA2EN = (1U << 1);  ///< DMA2 clock enable
        constexpr uint32_t SRAMEN = (1U << 2);  ///< SRAM interface clock enable
        constexpr uint32_t FLITFEN = (1U << 4);  ///< FLITF clock enable
        constexpr uint32_t CRCEN = (1U << 6);  ///< CRC clock enable
    }

    /// APB2ENR Register bits
    namespace apb2enr_bits {
        constexpr uint32_t AFIOEN = (1U << 0);  ///< Alternate function I/O clock enable
        constexpr uint32_t IOPAEN = (1U << 2);  ///< I/O port A clock enable
        constexpr uint32_t IOPBEN = (1U << 3);  ///< I/O port B clock enable
        constexpr uint32_t IOPCEN = (1U << 4);  ///< I/O port C clock enable
        constexpr uint32_t IOPDEN = (1U << 5);  ///< I/O port D clock enable
        constexpr uint32_t ADC1EN = (1U << 9);  ///< ADC 1 interface clock enable
        constexpr uint32_t SPI1EN = (1U << 12);  ///< SPI 1 clock enable
        constexpr uint32_t USART1EN = (1U << 14);  ///< USART1 clock enable
    }

    /// APB1ENR Register bits
    namespace apb1enr_bits {
        constexpr uint32_t TIM2EN = (1U << 0);  ///< Timer 2 clock enable
        constexpr uint32_t TIM3EN = (1U << 1);  ///< Timer 3 clock enable
        constexpr uint32_t WWDGEN = (1U << 11);  ///< Window watchdog clock enable
        constexpr uint32_t USART2EN = (1U << 17);  ///< USART 2 clock enable
        constexpr uint32_t I2C1EN = (1U << 21);  ///< I2C 1 clock enable
        constexpr uint32_t BKPEN = (1U << 27);  ///< Backup interface clock enable
        constexpr uint32_t PWREN = (1U << 28);  ///< Power interface clock enable
    }

    /// BDCR Register bits
    namespace bdcr_bits {
        constexpr uint32_t LSEON = (1U << 0);  ///< External Low Speed oscillator enable
        constexpr uint32_t LSERDY = (1U << 1);  ///< External Low Speed oscillator ready
        constexpr uint32_t LSEBYP = (1U << 2);  ///< External Low Speed oscillator bypass
        constexpr uint32_t RTCSEL = (2 << 8);  ///< RTC clock source selection
        constexpr uint32_t RTCEN = (1U << 15);  ///< RTC clock enable
        constexpr uint32_t BDRST = (1U << 16);  ///< Backup domain software reset
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t LSION = (1U << 0);  ///< Internal low speed oscillator enable
        constexpr uint32_t LSIRDY = (1U << 1);  ///< Internal low speed oscillator ready
        constexpr uint32_t RMVF = (1U << 24);  ///< Remove reset flag
        constexpr uint32_t PINRSTF = (1U << 26);  ///< PIN reset flag
        constexpr uint32_t PORRSTF = (1U << 27);  ///< POR/PDR reset flag
        constexpr uint32_t SFTRSTF = (1U << 28);  ///< Software reset flag
        constexpr uint32_t IWDGRSTF = (1U << 29);  ///< Independent watchdog reset flag
        constexpr uint32_t WWDGRSTF = (1U << 30);  ///< Window watchdog reset flag
        constexpr uint32_t LPWRRSTF = (1U << 31);  ///< Low-power reset flag
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIOA_BASE = 0x40010800;
    constexpr uint32_t GPIOB_BASE = 0x40010C00;
    constexpr uint32_t GPIOC_BASE = 0x40011000;
    constexpr uint32_t GPIOD_BASE = 0x40011400;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t CRL;  ///< Offset: 0x00 - Port configuration register low (GPIOn_CRL)
        volatile uint32_t CRH;  ///< Offset: 0x04 - Port configuration register high (GPIOn_CRL)
        volatile uint32_t IDR;  ///< Offset: 0x08 - Port input data register (GPIOn_IDR)
        volatile uint32_t ODR;  ///< Offset: 0x0C - Port output data register (GPIOn_ODR)
        volatile uint32_t BSRR;  ///< Offset: 0x10 - Port bit set/reset register (GPIOn_BSRR)
        volatile uint32_t BRR;  ///< Offset: 0x14 - Port bit reset register (GPIOn_BRR)
        volatile uint32_t LCKR;  ///< Offset: 0x18 - Port configuration lock register
    };

    /// Peripheral instances
    inline Registers* GPIOA = reinterpret_cast<Registers*>(GPIOA_BASE);
    inline Registers* GPIOB = reinterpret_cast<Registers*>(GPIOB_BASE);
    inline Registers* GPIOC = reinterpret_cast<Registers*>(GPIOC_BASE);
    inline Registers* GPIOD = reinterpret_cast<Registers*>(GPIOD_BASE);

    // Bit definitions
    /// CRL Register bits
    namespace crl_bits {
        constexpr uint32_t MODE0 = (2 << 0);  ///< Port n.0 mode bits
        constexpr uint32_t CNF0 = (2 << 2);  ///< Port n.0 configuration bits
        constexpr uint32_t MODE1 = (2 << 4);  ///< Port n.1 mode bits
        constexpr uint32_t CNF1 = (2 << 6);  ///< Port n.1 configuration bits
        constexpr uint32_t MODE2 = (2 << 8);  ///< Port n.2 mode bits
        constexpr uint32_t CNF2 = (2 << 10);  ///< Port n.2 configuration bits
        constexpr uint32_t MODE3 = (2 << 12);  ///< Port n.3 mode bits
        constexpr uint32_t CNF3 = (2 << 14);  ///< Port n.3 configuration bits
        constexpr uint32_t MODE4 = (2 << 16);  ///< Port n.4 mode bits
        constexpr uint32_t CNF4 = (2 << 18);  ///< Port n.4 configuration bits
        constexpr uint32_t MODE5 = (2 << 20);  ///< Port n.5 mode bits
        constexpr uint32_t CNF5 = (2 << 22);  ///< Port n.5 configuration bits
        constexpr uint32_t MODE6 = (2 << 24);  ///< Port n.6 mode bits
        constexpr uint32_t CNF6 = (2 << 26);  ///< Port n.6 configuration bits
        constexpr uint32_t MODE7 = (2 << 28);  ///< Port n.7 mode bits
        constexpr uint32_t CNF7 = (2 << 30);  ///< Port n.7 configuration bits
    }

    /// CRH Register bits
    namespace crh_bits {
        constexpr uint32_t MODE8 = (2 << 0);  ///< Port n.8 mode bits
        constexpr uint32_t CNF8 = (2 << 2);  ///< Port n.8 configuration bits
        constexpr uint32_t MODE9 = (2 << 4);  ///< Port n.9 mode bits
        constexpr uint32_t CNF9 = (2 << 6);  ///< Port n.9 configuration bits
        constexpr uint32_t MODE10 = (2 << 8);  ///< Port n.10 mode bits
        constexpr uint32_t CNF10 = (2 << 10);  ///< Port n.10 configuration bits
        constexpr uint32_t MODE11 = (2 << 12);  ///< Port n.11 mode bits
        constexpr uint32_t CNF11 = (2 << 14);  ///< Port n.11 configuration bits
        constexpr uint32_t MODE12 = (2 << 16);  ///< Port n.12 mode bits
        constexpr uint32_t CNF12 = (2 << 18);  ///< Port n.12 configuration bits
        constexpr uint32_t MODE13 = (2 << 20);  ///< Port n.13 mode bits
        constexpr uint32_t CNF13 = (2 << 22);  ///< Port n.13 configuration bits
        constexpr uint32_t MODE14 = (2 << 24);  ///< Port n.14 mode bits
        constexpr uint32_t CNF14 = (2 << 26);  ///< Port n.14 configuration bits
        constexpr uint32_t MODE15 = (2 << 28);  ///< Port n.15 mode bits
        constexpr uint32_t CNF15 = (2 << 30);  ///< Port n.15 configuration bits
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t IDR0 = (1U << 0);  ///< Port input data
        constexpr uint32_t IDR1 = (1U << 1);  ///< Port input data
        constexpr uint32_t IDR2 = (1U << 2);  ///< Port input data
        constexpr uint32_t IDR3 = (1U << 3);  ///< Port input data
        constexpr uint32_t IDR4 = (1U << 4);  ///< Port input data
        constexpr uint32_t IDR5 = (1U << 5);  ///< Port input data
        constexpr uint32_t IDR6 = (1U << 6);  ///< Port input data
        constexpr uint32_t IDR7 = (1U << 7);  ///< Port input data
        constexpr uint32_t IDR8 = (1U << 8);  ///< Port input data
        constexpr uint32_t IDR9 = (1U << 9);  ///< Port input data
        constexpr uint32_t IDR10 = (1U << 10);  ///< Port input data
        constexpr uint32_t IDR11 = (1U << 11);  ///< Port input data
        constexpr uint32_t IDR12 = (1U << 12);  ///< Port input data
        constexpr uint32_t IDR13 = (1U << 13);  ///< Port input data
        constexpr uint32_t IDR14 = (1U << 14);  ///< Port input data
        constexpr uint32_t IDR15 = (1U << 15);  ///< Port input data
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t ODR0 = (1U << 0);  ///< Port output data
        constexpr uint32_t ODR1 = (1U << 1);  ///< Port output data
        constexpr uint32_t ODR2 = (1U << 2);  ///< Port output data
        constexpr uint32_t ODR3 = (1U << 3);  ///< Port output data
        constexpr uint32_t ODR4 = (1U << 4);  ///< Port output data
        constexpr uint32_t ODR5 = (1U << 5);  ///< Port output data
        constexpr uint32_t ODR6 = (1U << 6);  ///< Port output data
        constexpr uint32_t ODR7 = (1U << 7);  ///< Port output data
        constexpr uint32_t ODR8 = (1U << 8);  ///< Port output data
        constexpr uint32_t ODR9 = (1U << 9);  ///< Port output data
        constexpr uint32_t ODR10 = (1U << 10);  ///< Port output data
        constexpr uint32_t ODR11 = (1U << 11);  ///< Port output data
        constexpr uint32_t ODR12 = (1U << 12);  ///< Port output data
        constexpr uint32_t ODR13 = (1U << 13);  ///< Port output data
        constexpr uint32_t ODR14 = (1U << 14);  ///< Port output data
        constexpr uint32_t ODR15 = (1U << 15);  ///< Port output data
    }

    /// BSRR Register bits
    namespace bsrr_bits {
        constexpr uint32_t BS0 = (1U << 0);  ///< Set bit 0
        constexpr uint32_t BS1 = (1U << 1);  ///< Set bit 1
        constexpr uint32_t BS2 = (1U << 2);  ///< Set bit 1
        constexpr uint32_t BS3 = (1U << 3);  ///< Set bit 3
        constexpr uint32_t BS4 = (1U << 4);  ///< Set bit 4
        constexpr uint32_t BS5 = (1U << 5);  ///< Set bit 5
        constexpr uint32_t BS6 = (1U << 6);  ///< Set bit 6
        constexpr uint32_t BS7 = (1U << 7);  ///< Set bit 7
        constexpr uint32_t BS8 = (1U << 8);  ///< Set bit 8
        constexpr uint32_t BS9 = (1U << 9);  ///< Set bit 9
        constexpr uint32_t BS10 = (1U << 10);  ///< Set bit 10
        constexpr uint32_t BS11 = (1U << 11);  ///< Set bit 11
        constexpr uint32_t BS12 = (1U << 12);  ///< Set bit 12
        constexpr uint32_t BS13 = (1U << 13);  ///< Set bit 13
        constexpr uint32_t BS14 = (1U << 14);  ///< Set bit 14
        constexpr uint32_t BS15 = (1U << 15);  ///< Set bit 15
        constexpr uint32_t BR0 = (1U << 16);  ///< Reset bit 0
        constexpr uint32_t BR1 = (1U << 17);  ///< Reset bit 1
        constexpr uint32_t BR2 = (1U << 18);  ///< Reset bit 2
        constexpr uint32_t BR3 = (1U << 19);  ///< Reset bit 3
        constexpr uint32_t BR4 = (1U << 20);  ///< Reset bit 4
        constexpr uint32_t BR5 = (1U << 21);  ///< Reset bit 5
        constexpr uint32_t BR6 = (1U << 22);  ///< Reset bit 6
        constexpr uint32_t BR7 = (1U << 23);  ///< Reset bit 7
        constexpr uint32_t BR8 = (1U << 24);  ///< Reset bit 8
        constexpr uint32_t BR9 = (1U << 25);  ///< Reset bit 9
        constexpr uint32_t BR10 = (1U << 26);  ///< Reset bit 10
        constexpr uint32_t BR11 = (1U << 27);  ///< Reset bit 11
        constexpr uint32_t BR12 = (1U << 28);  ///< Reset bit 12
        constexpr uint32_t BR13 = (1U << 29);  ///< Reset bit 13
        constexpr uint32_t BR14 = (1U << 30);  ///< Reset bit 14
        constexpr uint32_t BR15 = (1U << 31);  ///< Reset bit 15
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t BR0 = (1U << 0);  ///< Reset bit 0
        constexpr uint32_t BR1 = (1U << 1);  ///< Reset bit 1
        constexpr uint32_t BR2 = (1U << 2);  ///< Reset bit 1
        constexpr uint32_t BR3 = (1U << 3);  ///< Reset bit 3
        constexpr uint32_t BR4 = (1U << 4);  ///< Reset bit 4
        constexpr uint32_t BR5 = (1U << 5);  ///< Reset bit 5
        constexpr uint32_t BR6 = (1U << 6);  ///< Reset bit 6
        constexpr uint32_t BR7 = (1U << 7);  ///< Reset bit 7
        constexpr uint32_t BR8 = (1U << 8);  ///< Reset bit 8
        constexpr uint32_t BR9 = (1U << 9);  ///< Reset bit 9
        constexpr uint32_t BR10 = (1U << 10);  ///< Reset bit 10
        constexpr uint32_t BR11 = (1U << 11);  ///< Reset bit 11
        constexpr uint32_t BR12 = (1U << 12);  ///< Reset bit 12
        constexpr uint32_t BR13 = (1U << 13);  ///< Reset bit 13
        constexpr uint32_t BR14 = (1U << 14);  ///< Reset bit 14
        constexpr uint32_t BR15 = (1U << 15);  ///< Reset bit 15
    }

    /// LCKR Register bits
    namespace lckr_bits {
        constexpr uint32_t LCK0 = (1U << 0);  ///< Port A Lock bit 0
        constexpr uint32_t LCK1 = (1U << 1);  ///< Port A Lock bit 1
        constexpr uint32_t LCK2 = (1U << 2);  ///< Port A Lock bit 2
        constexpr uint32_t LCK3 = (1U << 3);  ///< Port A Lock bit 3
        constexpr uint32_t LCK4 = (1U << 4);  ///< Port A Lock bit 4
        constexpr uint32_t LCK5 = (1U << 5);  ///< Port A Lock bit 5
        constexpr uint32_t LCK6 = (1U << 6);  ///< Port A Lock bit 6
        constexpr uint32_t LCK7 = (1U << 7);  ///< Port A Lock bit 7
        constexpr uint32_t LCK8 = (1U << 8);  ///< Port A Lock bit 8
        constexpr uint32_t LCK9 = (1U << 9);  ///< Port A Lock bit 9
        constexpr uint32_t LCK10 = (1U << 10);  ///< Port A Lock bit 10
        constexpr uint32_t LCK11 = (1U << 11);  ///< Port A Lock bit 11
        constexpr uint32_t LCK12 = (1U << 12);  ///< Port A Lock bit 12
        constexpr uint32_t LCK13 = (1U << 13);  ///< Port A Lock bit 13
        constexpr uint32_t LCK14 = (1U << 14);  ///< Port A Lock bit 14
        constexpr uint32_t LCK15 = (1U << 15);  ///< Port A Lock bit 15
        constexpr uint32_t LCKK = (1U << 16);  ///< Lock key
    }

}

// ============================================================================
// AFIO Peripheral
// ============================================================================

namespace afio {
    /// Base addresses
    constexpr uint32_t AFIO_BASE = 0x40010000;

    /// AFIO Register structure
    struct Registers {
        volatile uint32_t EVCR;  ///< Offset: 0x00 - Event Control Register (AFIO_EVCR)
        volatile uint32_t MAPR;  ///< Offset: 0x04 - AF remap and debug I/O configuration register (AFIO_MAPR)
        volatile uint32_t EXTICR1;  ///< Offset: 0x08 - External interrupt configuration register 1 (AFIO_EXTICR1)
        volatile uint32_t EXTICR2;  ///< Offset: 0x0C - External interrupt configuration register 2 (AFIO_EXTICR2)
        volatile uint32_t EXTICR3;  ///< Offset: 0x10 - External interrupt configuration register 3 (AFIO_EXTICR3)
        volatile uint32_t EXTICR4;  ///< Offset: 0x14 - External interrupt configuration register 4 (AFIO_EXTICR4)
        volatile uint32_t MAPR2;  ///< Offset: 0x1C - AF remap and debug I/O configuration register
    };

    /// Peripheral instances
    inline Registers* AFIO = reinterpret_cast<Registers*>(AFIO_BASE);

    // Bit definitions
    /// EVCR Register bits
    namespace evcr_bits {
        constexpr uint32_t PIN = (4 << 0);  ///< Pin selection
        constexpr uint32_t PORT = (3 << 4);  ///< Port selection
        constexpr uint32_t EVOE = (1U << 7);  ///< Event Output Enable
    }

    /// MAPR Register bits
    namespace mapr_bits {
        constexpr uint32_t SPI1_REMAP = (1U << 0);  ///< SPI1 remapping
        constexpr uint32_t I2C1_REMAP = (1U << 1);  ///< I2C1 remapping
        constexpr uint32_t USART1_REMAP = (1U << 2);  ///< USART1 remapping
        constexpr uint32_t USART2_REMAP = (1U << 3);  ///< USART2 remapping
        constexpr uint32_t USART3_REMAP = (2 << 4);  ///< USART3 remapping
        constexpr uint32_t TIM1_REMAP = (2 << 6);  ///< TIM1 remapping
        constexpr uint32_t TIM2_REMAP = (2 << 8);  ///< TIM2 remapping
        constexpr uint32_t TIM3_REMAP = (2 << 10);  ///< TIM3 remapping
        constexpr uint32_t TIM4_REMAP = (1U << 12);  ///< TIM4 remapping
        constexpr uint32_t CAN_REMAP = (2 << 13);  ///< CAN1 remapping
        constexpr uint32_t PD01_REMAP = (1U << 15);  ///< Port D0/Port D1 mapping on OSCIN/OSCOUT
        constexpr uint32_t TIM5CH4_IREMAP = (1U << 16);  ///< Set and cleared by software
        constexpr uint32_t ADC1_ETRGINJ_REMAP = (1U << 17);  ///< ADC 1 External trigger injected conversion remapping
        constexpr uint32_t ADC1_ETRGREG_REMAP = (1U << 18);  ///< ADC 1 external trigger regular conversion remapping
        constexpr uint32_t ADC2_ETRGINJ_REMAP = (1U << 19);  ///< ADC 2 external trigger injected conversion remapping
        constexpr uint32_t ADC2_ETRGREG_REMAP = (1U << 20);  ///< ADC 2 external trigger regular conversion remapping
        constexpr uint32_t SWJ_CFG = (3 << 24);  ///< Serial wire JTAG configuration
    }

    /// EXTICR1 Register bits
    namespace exticr1_bits {
        constexpr uint32_t EXTI0 = (4 << 0);  ///< EXTI0 configuration
        constexpr uint32_t EXTI1 = (4 << 4);  ///< EXTI1 configuration
        constexpr uint32_t EXTI2 = (4 << 8);  ///< EXTI2 configuration
        constexpr uint32_t EXTI3 = (4 << 12);  ///< EXTI3 configuration
    }

    /// EXTICR2 Register bits
    namespace exticr2_bits {
        constexpr uint32_t EXTI4 = (4 << 0);  ///< EXTI4 configuration
        constexpr uint32_t EXTI5 = (4 << 4);  ///< EXTI5 configuration
        constexpr uint32_t EXTI6 = (4 << 8);  ///< EXTI6 configuration
        constexpr uint32_t EXTI7 = (4 << 12);  ///< EXTI7 configuration
    }

    /// EXTICR3 Register bits
    namespace exticr3_bits {
        constexpr uint32_t EXTI8 = (4 << 0);  ///< EXTI8 configuration
        constexpr uint32_t EXTI9 = (4 << 4);  ///< EXTI9 configuration
        constexpr uint32_t EXTI10 = (4 << 8);  ///< EXTI10 configuration
        constexpr uint32_t EXTI11 = (4 << 12);  ///< EXTI11 configuration
    }

    /// EXTICR4 Register bits
    namespace exticr4_bits {
        constexpr uint32_t EXTI12 = (4 << 0);  ///< EXTI12 configuration
        constexpr uint32_t EXTI13 = (4 << 4);  ///< EXTI13 configuration
        constexpr uint32_t EXTI14 = (4 << 8);  ///< EXTI14 configuration
        constexpr uint32_t EXTI15 = (4 << 12);  ///< EXTI15 configuration
    }

    /// MAPR2 Register bits
    namespace mapr2_bits {
        constexpr uint32_t TIM9_REMAP = (1U << 5);  ///< TIM9 remapping
        constexpr uint32_t TIM10_REMAP = (1U << 6);  ///< TIM10 remapping
        constexpr uint32_t TIM11_REMAP = (1U << 7);  ///< TIM11 remapping
        constexpr uint32_t TIM13_REMAP = (1U << 8);  ///< TIM13 remapping
        constexpr uint32_t TIM14_REMAP = (1U << 9);  ///< TIM14 remapping
        constexpr uint32_t FSMC_NADV = (1U << 10);  ///< NADV connect/disconnect
    }

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40010400;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t IMR;  ///< Offset: 0x00 - Interrupt mask register (EXTI_IMR)
        volatile uint32_t EMR;  ///< Offset: 0x04 - Event mask register (EXTI_EMR)
        volatile uint32_t RTSR;  ///< Offset: 0x08 - Rising Trigger selection register (EXTI_RTSR)
        volatile uint32_t FTSR;  ///< Offset: 0x0C - Falling Trigger selection register (EXTI_FTSR)
        volatile uint32_t SWIER;  ///< Offset: 0x10 - Software interrupt event register (EXTI_SWIER)
        volatile uint32_t PR;  ///< Offset: 0x14 - Pending register (EXTI_PR)
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t MR0 = (1U << 0);  ///< Interrupt Mask on line 0
        constexpr uint32_t MR1 = (1U << 1);  ///< Interrupt Mask on line 1
        constexpr uint32_t MR2 = (1U << 2);  ///< Interrupt Mask on line 2
        constexpr uint32_t MR3 = (1U << 3);  ///< Interrupt Mask on line 3
        constexpr uint32_t MR4 = (1U << 4);  ///< Interrupt Mask on line 4
        constexpr uint32_t MR5 = (1U << 5);  ///< Interrupt Mask on line 5
        constexpr uint32_t MR6 = (1U << 6);  ///< Interrupt Mask on line 6
        constexpr uint32_t MR7 = (1U << 7);  ///< Interrupt Mask on line 7
        constexpr uint32_t MR8 = (1U << 8);  ///< Interrupt Mask on line 8
        constexpr uint32_t MR9 = (1U << 9);  ///< Interrupt Mask on line 9
        constexpr uint32_t MR10 = (1U << 10);  ///< Interrupt Mask on line 10
        constexpr uint32_t MR11 = (1U << 11);  ///< Interrupt Mask on line 11
        constexpr uint32_t MR12 = (1U << 12);  ///< Interrupt Mask on line 12
        constexpr uint32_t MR13 = (1U << 13);  ///< Interrupt Mask on line 13
        constexpr uint32_t MR14 = (1U << 14);  ///< Interrupt Mask on line 14
        constexpr uint32_t MR15 = (1U << 15);  ///< Interrupt Mask on line 15
        constexpr uint32_t MR16 = (1U << 16);  ///< Interrupt Mask on line 16
        constexpr uint32_t MR17 = (1U << 17);  ///< Interrupt Mask on line 17
        constexpr uint32_t MR18 = (1U << 18);  ///< Interrupt Mask on line 18
    }

    /// EMR Register bits
    namespace emr_bits {
        constexpr uint32_t MR0 = (1U << 0);  ///< Event Mask on line 0
        constexpr uint32_t MR1 = (1U << 1);  ///< Event Mask on line 1
        constexpr uint32_t MR2 = (1U << 2);  ///< Event Mask on line 2
        constexpr uint32_t MR3 = (1U << 3);  ///< Event Mask on line 3
        constexpr uint32_t MR4 = (1U << 4);  ///< Event Mask on line 4
        constexpr uint32_t MR5 = (1U << 5);  ///< Event Mask on line 5
        constexpr uint32_t MR6 = (1U << 6);  ///< Event Mask on line 6
        constexpr uint32_t MR7 = (1U << 7);  ///< Event Mask on line 7
        constexpr uint32_t MR8 = (1U << 8);  ///< Event Mask on line 8
        constexpr uint32_t MR9 = (1U << 9);  ///< Event Mask on line 9
        constexpr uint32_t MR10 = (1U << 10);  ///< Event Mask on line 10
        constexpr uint32_t MR11 = (1U << 11);  ///< Event Mask on line 11
        constexpr uint32_t MR12 = (1U << 12);  ///< Event Mask on line 12
        constexpr uint32_t MR13 = (1U << 13);  ///< Event Mask on line 13
        constexpr uint32_t MR14 = (1U << 14);  ///< Event Mask on line 14
        constexpr uint32_t MR15 = (1U << 15);  ///< Event Mask on line 15
        constexpr uint32_t MR16 = (1U << 16);  ///< Event Mask on line 16
        constexpr uint32_t MR17 = (1U << 17);  ///< Event Mask on line 17
        constexpr uint32_t MR18 = (1U << 18);  ///< Event Mask on line 18
    }

    /// RTSR Register bits
    namespace rtsr_bits {
        constexpr uint32_t TR0 = (1U << 0);  ///< Rising trigger event configuration of line 0
        constexpr uint32_t TR1 = (1U << 1);  ///< Rising trigger event configuration of line 1
        constexpr uint32_t TR2 = (1U << 2);  ///< Rising trigger event configuration of line 2
        constexpr uint32_t TR3 = (1U << 3);  ///< Rising trigger event configuration of line 3
        constexpr uint32_t TR4 = (1U << 4);  ///< Rising trigger event configuration of line 4
        constexpr uint32_t TR5 = (1U << 5);  ///< Rising trigger event configuration of line 5
        constexpr uint32_t TR6 = (1U << 6);  ///< Rising trigger event configuration of line 6
        constexpr uint32_t TR7 = (1U << 7);  ///< Rising trigger event configuration of line 7
        constexpr uint32_t TR8 = (1U << 8);  ///< Rising trigger event configuration of line 8
        constexpr uint32_t TR9 = (1U << 9);  ///< Rising trigger event configuration of line 9
        constexpr uint32_t TR10 = (1U << 10);  ///< Rising trigger event configuration of line 10
        constexpr uint32_t TR11 = (1U << 11);  ///< Rising trigger event configuration of line 11
        constexpr uint32_t TR12 = (1U << 12);  ///< Rising trigger event configuration of line 12
        constexpr uint32_t TR13 = (1U << 13);  ///< Rising trigger event configuration of line 13
        constexpr uint32_t TR14 = (1U << 14);  ///< Rising trigger event configuration of line 14
        constexpr uint32_t TR15 = (1U << 15);  ///< Rising trigger event configuration of line 15
        constexpr uint32_t TR16 = (1U << 16);  ///< Rising trigger event configuration of line 16
        constexpr uint32_t TR17 = (1U << 17);  ///< Rising trigger event configuration of line 17
        constexpr uint32_t TR18 = (1U << 18);  ///< Rising trigger event configuration of line 18
    }

    /// FTSR Register bits
    namespace ftsr_bits {
        constexpr uint32_t TR0 = (1U << 0);  ///< Falling trigger event configuration of line 0
        constexpr uint32_t TR1 = (1U << 1);  ///< Falling trigger event configuration of line 1
        constexpr uint32_t TR2 = (1U << 2);  ///< Falling trigger event configuration of line 2
        constexpr uint32_t TR3 = (1U << 3);  ///< Falling trigger event configuration of line 3
        constexpr uint32_t TR4 = (1U << 4);  ///< Falling trigger event configuration of line 4
        constexpr uint32_t TR5 = (1U << 5);  ///< Falling trigger event configuration of line 5
        constexpr uint32_t TR6 = (1U << 6);  ///< Falling trigger event configuration of line 6
        constexpr uint32_t TR7 = (1U << 7);  ///< Falling trigger event configuration of line 7
        constexpr uint32_t TR8 = (1U << 8);  ///< Falling trigger event configuration of line 8
        constexpr uint32_t TR9 = (1U << 9);  ///< Falling trigger event configuration of line 9
        constexpr uint32_t TR10 = (1U << 10);  ///< Falling trigger event configuration of line 10
        constexpr uint32_t TR11 = (1U << 11);  ///< Falling trigger event configuration of line 11
        constexpr uint32_t TR12 = (1U << 12);  ///< Falling trigger event configuration of line 12
        constexpr uint32_t TR13 = (1U << 13);  ///< Falling trigger event configuration of line 13
        constexpr uint32_t TR14 = (1U << 14);  ///< Falling trigger event configuration of line 14
        constexpr uint32_t TR15 = (1U << 15);  ///< Falling trigger event configuration of line 15
        constexpr uint32_t TR16 = (1U << 16);  ///< Falling trigger event configuration of line 16
        constexpr uint32_t TR17 = (1U << 17);  ///< Falling trigger event configuration of line 17
        constexpr uint32_t TR18 = (1U << 18);  ///< Falling trigger event configuration of line 18
    }

    /// SWIER Register bits
    namespace swier_bits {
        constexpr uint32_t SWIER0 = (1U << 0);  ///< Software Interrupt on line 0
        constexpr uint32_t SWIER1 = (1U << 1);  ///< Software Interrupt on line 1
        constexpr uint32_t SWIER2 = (1U << 2);  ///< Software Interrupt on line 2
        constexpr uint32_t SWIER3 = (1U << 3);  ///< Software Interrupt on line 3
        constexpr uint32_t SWIER4 = (1U << 4);  ///< Software Interrupt on line 4
        constexpr uint32_t SWIER5 = (1U << 5);  ///< Software Interrupt on line 5
        constexpr uint32_t SWIER6 = (1U << 6);  ///< Software Interrupt on line 6
        constexpr uint32_t SWIER7 = (1U << 7);  ///< Software Interrupt on line 7
        constexpr uint32_t SWIER8 = (1U << 8);  ///< Software Interrupt on line 8
        constexpr uint32_t SWIER9 = (1U << 9);  ///< Software Interrupt on line 9
        constexpr uint32_t SWIER10 = (1U << 10);  ///< Software Interrupt on line 10
        constexpr uint32_t SWIER11 = (1U << 11);  ///< Software Interrupt on line 11
        constexpr uint32_t SWIER12 = (1U << 12);  ///< Software Interrupt on line 12
        constexpr uint32_t SWIER13 = (1U << 13);  ///< Software Interrupt on line 13
        constexpr uint32_t SWIER14 = (1U << 14);  ///< Software Interrupt on line 14
        constexpr uint32_t SWIER15 = (1U << 15);  ///< Software Interrupt on line 15
        constexpr uint32_t SWIER16 = (1U << 16);  ///< Software Interrupt on line 16
        constexpr uint32_t SWIER17 = (1U << 17);  ///< Software Interrupt on line 17
        constexpr uint32_t SWIER18 = (1U << 18);  ///< Software Interrupt on line 18
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR0 = (1U << 0);  ///< Pending bit 0
        constexpr uint32_t PR1 = (1U << 1);  ///< Pending bit 1
        constexpr uint32_t PR2 = (1U << 2);  ///< Pending bit 2
        constexpr uint32_t PR3 = (1U << 3);  ///< Pending bit 3
        constexpr uint32_t PR4 = (1U << 4);  ///< Pending bit 4
        constexpr uint32_t PR5 = (1U << 5);  ///< Pending bit 5
        constexpr uint32_t PR6 = (1U << 6);  ///< Pending bit 6
        constexpr uint32_t PR7 = (1U << 7);  ///< Pending bit 7
        constexpr uint32_t PR8 = (1U << 8);  ///< Pending bit 8
        constexpr uint32_t PR9 = (1U << 9);  ///< Pending bit 9
        constexpr uint32_t PR10 = (1U << 10);  ///< Pending bit 10
        constexpr uint32_t PR11 = (1U << 11);  ///< Pending bit 11
        constexpr uint32_t PR12 = (1U << 12);  ///< Pending bit 12
        constexpr uint32_t PR13 = (1U << 13);  ///< Pending bit 13
        constexpr uint32_t PR14 = (1U << 14);  ///< Pending bit 14
        constexpr uint32_t PR15 = (1U << 15);  ///< Pending bit 15
        constexpr uint32_t PR16 = (1U << 16);  ///< Pending bit 16
        constexpr uint32_t PR17 = (1U << 17);  ///< Pending bit 17
        constexpr uint32_t PR18 = (1U << 18);  ///< Pending bit 18
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMA1_BASE = 0x40020000;
    constexpr uint32_t DMA2_BASE = 0x40020400;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t ISR;  ///< Offset: 0x00 - DMA interrupt status register (DMA_ISR)
        volatile uint32_t IFCR;  ///< Offset: 0x04 - DMA interrupt flag clear register (DMA_IFCR)
        volatile uint32_t CCR1;  ///< Offset: 0x08 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR1;  ///< Offset: 0x0C - DMA channel 1 number of data register
        volatile uint32_t CPAR1;  ///< Offset: 0x10 - DMA channel 1 peripheral address register
        volatile uint32_t CMAR1;  ///< Offset: 0x14 - DMA channel 1 memory address register
        volatile uint32_t CCR2;  ///< Offset: 0x1C - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR2;  ///< Offset: 0x20 - DMA channel 2 number of data register
        volatile uint32_t CPAR2;  ///< Offset: 0x24 - DMA channel 2 peripheral address register
        volatile uint32_t CMAR2;  ///< Offset: 0x28 - DMA channel 2 memory address register
        volatile uint32_t CCR3;  ///< Offset: 0x30 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR3;  ///< Offset: 0x34 - DMA channel 3 number of data register
        volatile uint32_t CPAR3;  ///< Offset: 0x38 - DMA channel 3 peripheral address register
        volatile uint32_t CMAR3;  ///< Offset: 0x3C - DMA channel 3 memory address register
        volatile uint32_t CCR4;  ///< Offset: 0x44 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR4;  ///< Offset: 0x48 - DMA channel 4 number of data register
        volatile uint32_t CPAR4;  ///< Offset: 0x4C - DMA channel 4 peripheral address register
        volatile uint32_t CMAR4;  ///< Offset: 0x50 - DMA channel 4 memory address register
        volatile uint32_t CCR5;  ///< Offset: 0x58 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR5;  ///< Offset: 0x5C - DMA channel 5 number of data register
        volatile uint32_t CPAR5;  ///< Offset: 0x60 - DMA channel 5 peripheral address register
        volatile uint32_t CMAR5;  ///< Offset: 0x64 - DMA channel 5 memory address register
        volatile uint32_t CCR6;  ///< Offset: 0x6C - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR6;  ///< Offset: 0x70 - DMA channel 6 number of data register
        volatile uint32_t CPAR6;  ///< Offset: 0x74 - DMA channel 6 peripheral address register
        volatile uint32_t CMAR6;  ///< Offset: 0x78 - DMA channel 6 memory address register
        volatile uint32_t CCR7;  ///< Offset: 0x80 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR7;  ///< Offset: 0x84 - DMA channel 7 number of data register
        volatile uint32_t CPAR7;  ///< Offset: 0x88 - DMA channel 7 peripheral address register
        volatile uint32_t CMAR7;  ///< Offset: 0x8C - DMA channel 7 memory address register
    };

    /// Peripheral instances
    inline Registers* DMA1 = reinterpret_cast<Registers*>(DMA1_BASE);
    inline Registers* DMA2 = reinterpret_cast<Registers*>(DMA2_BASE);

    // Bit definitions
    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t GIF1 = (1U << 0);  ///< Channel 1 Global interrupt flag
        constexpr uint32_t TCIF1 = (1U << 1);  ///< Channel 1 Transfer Complete flag
        constexpr uint32_t HTIF1 = (1U << 2);  ///< Channel 1 Half Transfer Complete flag
        constexpr uint32_t TEIF1 = (1U << 3);  ///< Channel 1 Transfer Error flag
        constexpr uint32_t GIF2 = (1U << 4);  ///< Channel 2 Global interrupt flag
        constexpr uint32_t TCIF2 = (1U << 5);  ///< Channel 2 Transfer Complete flag
        constexpr uint32_t HTIF2 = (1U << 6);  ///< Channel 2 Half Transfer Complete flag
        constexpr uint32_t TEIF2 = (1U << 7);  ///< Channel 2 Transfer Error flag
        constexpr uint32_t GIF3 = (1U << 8);  ///< Channel 3 Global interrupt flag
        constexpr uint32_t TCIF3 = (1U << 9);  ///< Channel 3 Transfer Complete flag
        constexpr uint32_t HTIF3 = (1U << 10);  ///< Channel 3 Half Transfer Complete flag
        constexpr uint32_t TEIF3 = (1U << 11);  ///< Channel 3 Transfer Error flag
        constexpr uint32_t GIF4 = (1U << 12);  ///< Channel 4 Global interrupt flag
        constexpr uint32_t TCIF4 = (1U << 13);  ///< Channel 4 Transfer Complete flag
        constexpr uint32_t HTIF4 = (1U << 14);  ///< Channel 4 Half Transfer Complete flag
        constexpr uint32_t TEIF4 = (1U << 15);  ///< Channel 4 Transfer Error flag
        constexpr uint32_t GIF5 = (1U << 16);  ///< Channel 5 Global interrupt flag
        constexpr uint32_t TCIF5 = (1U << 17);  ///< Channel 5 Transfer Complete flag
        constexpr uint32_t HTIF5 = (1U << 18);  ///< Channel 5 Half Transfer Complete flag
        constexpr uint32_t TEIF5 = (1U << 19);  ///< Channel 5 Transfer Error flag
        constexpr uint32_t GIF6 = (1U << 20);  ///< Channel 6 Global interrupt flag
        constexpr uint32_t TCIF6 = (1U << 21);  ///< Channel 6 Transfer Complete flag
        constexpr uint32_t HTIF6 = (1U << 22);  ///< Channel 6 Half Transfer Complete flag
        constexpr uint32_t TEIF6 = (1U << 23);  ///< Channel 6 Transfer Error flag
        constexpr uint32_t GIF7 = (1U << 24);  ///< Channel 7 Global interrupt flag
        constexpr uint32_t TCIF7 = (1U << 25);  ///< Channel 7 Transfer Complete flag
        constexpr uint32_t HTIF7 = (1U << 26);  ///< Channel 7 Half Transfer Complete flag
        constexpr uint32_t TEIF7 = (1U << 27);  ///< Channel 7 Transfer Error flag
    }

    /// IFCR Register bits
    namespace ifcr_bits {
        constexpr uint32_t CGIF1 = (1U << 0);  ///< Channel 1 Global interrupt clear
        constexpr uint32_t CGIF2 = (1U << 4);  ///< Channel 2 Global interrupt clear
        constexpr uint32_t CGIF3 = (1U << 8);  ///< Channel 3 Global interrupt clear
        constexpr uint32_t CGIF4 = (1U << 12);  ///< Channel 4 Global interrupt clear
        constexpr uint32_t CGIF5 = (1U << 16);  ///< Channel 5 Global interrupt clear
        constexpr uint32_t CGIF6 = (1U << 20);  ///< Channel 6 Global interrupt clear
        constexpr uint32_t CGIF7 = (1U << 24);  ///< Channel 7 Global interrupt clear
        constexpr uint32_t CTCIF1 = (1U << 1);  ///< Channel 1 Transfer Complete clear
        constexpr uint32_t CTCIF2 = (1U << 5);  ///< Channel 2 Transfer Complete clear
        constexpr uint32_t CTCIF3 = (1U << 9);  ///< Channel 3 Transfer Complete clear
        constexpr uint32_t CTCIF4 = (1U << 13);  ///< Channel 4 Transfer Complete clear
        constexpr uint32_t CTCIF5 = (1U << 17);  ///< Channel 5 Transfer Complete clear
        constexpr uint32_t CTCIF6 = (1U << 21);  ///< Channel 6 Transfer Complete clear
        constexpr uint32_t CTCIF7 = (1U << 25);  ///< Channel 7 Transfer Complete clear
        constexpr uint32_t CHTIF1 = (1U << 2);  ///< Channel 1 Half Transfer clear
        constexpr uint32_t CHTIF2 = (1U << 6);  ///< Channel 2 Half Transfer clear
        constexpr uint32_t CHTIF3 = (1U << 10);  ///< Channel 3 Half Transfer clear
        constexpr uint32_t CHTIF4 = (1U << 14);  ///< Channel 4 Half Transfer clear
        constexpr uint32_t CHTIF5 = (1U << 18);  ///< Channel 5 Half Transfer clear
        constexpr uint32_t CHTIF6 = (1U << 22);  ///< Channel 6 Half Transfer clear
        constexpr uint32_t CHTIF7 = (1U << 26);  ///< Channel 7 Half Transfer clear
        constexpr uint32_t CTEIF1 = (1U << 3);  ///< Channel 1 Transfer Error clear
        constexpr uint32_t CTEIF2 = (1U << 7);  ///< Channel 2 Transfer Error clear
        constexpr uint32_t CTEIF3 = (1U << 11);  ///< Channel 3 Transfer Error clear
        constexpr uint32_t CTEIF4 = (1U << 15);  ///< Channel 4 Transfer Error clear
        constexpr uint32_t CTEIF5 = (1U << 19);  ///< Channel 5 Transfer Error clear
        constexpr uint32_t CTEIF6 = (1U << 23);  ///< Channel 6 Transfer Error clear
        constexpr uint32_t CTEIF7 = (1U << 27);  ///< Channel 7 Transfer Error clear
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR1 Register bits
    namespace cndtr1_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR1 Register bits
    namespace cpar1_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR1 Register bits
    namespace cmar1_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR2 Register bits
    namespace cndtr2_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR2 Register bits
    namespace cpar2_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR2 Register bits
    namespace cmar2_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR3 Register bits
    namespace cndtr3_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR3 Register bits
    namespace cpar3_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR3 Register bits
    namespace cmar3_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR4 Register bits
    namespace cndtr4_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR4 Register bits
    namespace cpar4_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR4 Register bits
    namespace cmar4_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR5 Register bits
    namespace ccr5_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR5 Register bits
    namespace cndtr5_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR5 Register bits
    namespace cpar5_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR5 Register bits
    namespace cmar5_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR6 Register bits
    namespace ccr6_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR6 Register bits
    namespace cndtr6_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR6 Register bits
    namespace cpar6_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR6 Register bits
    namespace cmar6_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR7 Register bits
    namespace ccr7_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR7 Register bits
    namespace cndtr7_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR7 Register bits
    namespace cpar7_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR7 Register bits
    namespace cmar7_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x40002800;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t CRH;  ///< Offset: 0x00 - RTC Control Register High
        volatile uint32_t CRL;  ///< Offset: 0x04 - RTC Control Register Low
        volatile uint32_t PRLH;  ///< Offset: 0x08 - RTC Prescaler Load Register High
        volatile uint32_t PRLL;  ///< Offset: 0x0C - RTC Prescaler Load Register Low
        volatile uint32_t DIVH;  ///< Offset: 0x10 - RTC Prescaler Divider Register High
        volatile uint32_t DIVL;  ///< Offset: 0x14 - RTC Prescaler Divider Register Low
        volatile uint32_t CNTH;  ///< Offset: 0x18 - RTC Counter Register High
        volatile uint32_t CNTL;  ///< Offset: 0x1C - RTC Counter Register Low
        volatile uint32_t ALRH;  ///< Offset: 0x20 - RTC Alarm Register High
        volatile uint32_t ALRL;  ///< Offset: 0x24 - RTC Alarm Register Low
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// CRH Register bits
    namespace crh_bits {
        constexpr uint32_t SECIE = (1U << 0);  ///< Second interrupt Enable
        constexpr uint32_t ALRIE = (1U << 1);  ///< Alarm interrupt Enable
        constexpr uint32_t OWIE = (1U << 2);  ///< Overflow interrupt Enable
    }

    /// CRL Register bits
    namespace crl_bits {
        constexpr uint32_t SECF = (1U << 0);  ///< Second Flag
        constexpr uint32_t ALRF = (1U << 1);  ///< Alarm Flag
        constexpr uint32_t OWF = (1U << 2);  ///< Overflow Flag
        constexpr uint32_t RSF = (1U << 3);  ///< Registers Synchronized Flag
        constexpr uint32_t CNF = (1U << 4);  ///< Configuration Flag
        constexpr uint32_t RTOFF = (1U << 5);  ///< RTC operation OFF
    }

    /// PRLH Register bits
    namespace prlh_bits {
        constexpr uint32_t PRLH = (4 << 0);  ///< RTC Prescaler Load Register High
    }

    /// PRLL Register bits
    namespace prll_bits {
        constexpr uint32_t PRLL = (16 << 0);  ///< RTC Prescaler Divider Register Low
    }

    /// DIVH Register bits
    namespace divh_bits {
        constexpr uint32_t DIVH = (4 << 0);  ///< RTC prescaler divider register high
    }

    /// DIVL Register bits
    namespace divl_bits {
        constexpr uint32_t DIVL = (16 << 0);  ///< RTC prescaler divider register Low
    }

    /// CNTH Register bits
    namespace cnth_bits {
        constexpr uint32_t CNTH = (16 << 0);  ///< RTC counter register high
    }

    /// CNTL Register bits
    namespace cntl_bits {
        constexpr uint32_t CNTL = (16 << 0);  ///< RTC counter register Low
    }

    /// ALRH Register bits
    namespace alrh_bits {
        constexpr uint32_t ALRH = (16 << 0);  ///< RTC alarm register high
    }

    /// ALRL Register bits
    namespace alrl_bits {
        constexpr uint32_t ALRL = (16 << 0);  ///< RTC alarm register low
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t IWDG_BASE = 0x40003000;
    constexpr uint32_t WWDG_BASE = 0x40002C00;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t KR;  ///< Offset: 0x00 - Key register (IWDG_KR)
        volatile uint32_t PR;  ///< Offset: 0x04 - Prescaler register (IWDG_PR)
        volatile uint32_t RLR;  ///< Offset: 0x08 - Reload register (IWDG_RLR)
        volatile uint32_t SR;  ///< Offset: 0x0C - Status register (IWDG_SR)
    };

    /// Peripheral instances
    inline Registers* IWDG = reinterpret_cast<Registers*>(IWDG_BASE);
    inline Registers* WWDG = reinterpret_cast<Registers*>(WWDG_BASE);

    // Bit definitions
    /// KR Register bits
    namespace kr_bits {
        constexpr uint32_t KEY = (16 << 0);  ///< Key value
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (3 << 0);  ///< Prescaler divider
    }

    /// RLR Register bits
    namespace rlr_bits {
        constexpr uint32_t RL = (12 << 0);  ///< Watchdog counter reload value
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t PVU = (1U << 0);  ///< Watchdog prescaler value update
        constexpr uint32_t RVU = (1U << 1);  ///< Watchdog counter reload value update
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TIM2_BASE = 0x40000000;
    constexpr uint32_t TIM3_BASE = 0x40000400;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - control register 2
        volatile uint32_t SMCR;  ///< Offset: 0x08 - slave mode control register
        volatile uint32_t DIER;  ///< Offset: 0x0C - DMA/Interrupt enable register
        volatile uint32_t SR;  ///< Offset: 0x10 - status register
        volatile uint32_t EGR;  ///< Offset: 0x14 - event generation register
        volatile uint32_t CCMR1_Output;  ///< Offset: 0x18 - capture/compare mode register 1 (output mode)
        volatile uint32_t CCMR1_Input;  ///< Offset: 0x18 - capture/compare mode register 1 (input mode)
        volatile uint32_t CCMR2_Output;  ///< Offset: 0x1C - capture/compare mode register 2 (output mode)
        volatile uint32_t CCMR2_Input;  ///< Offset: 0x1C - capture/compare mode register 2 (input mode)
        volatile uint32_t CCER;  ///< Offset: 0x20 - capture/compare enable register
        volatile uint32_t CNT;  ///< Offset: 0x24 - counter
        volatile uint32_t PSC;  ///< Offset: 0x28 - prescaler
        volatile uint32_t ARR;  ///< Offset: 0x2C - auto-reload register
        volatile uint32_t CCR1;  ///< Offset: 0x34 - capture/compare register 1
        volatile uint32_t CCR2;  ///< Offset: 0x38 - capture/compare register 2
        volatile uint32_t CCR3;  ///< Offset: 0x3C - capture/compare register 3
        volatile uint32_t CCR4;  ///< Offset: 0x40 - capture/compare register 4
        volatile uint32_t DCR;  ///< Offset: 0x48 - DMA control register
        volatile uint32_t DMAR;  ///< Offset: 0x4C - DMA address for full transfer
    };

    /// Peripheral instances
    inline Registers* TIM2 = reinterpret_cast<Registers*>(TIM2_BASE);
    inline Registers* TIM3 = reinterpret_cast<Registers*>(TIM3_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t CKD = (2 << 8);  ///< Clock division
        constexpr uint32_t ARPE = (1U << 7);  ///< Auto-reload preload enable
        constexpr uint32_t CMS = (2 << 5);  ///< Center-aligned mode selection
        constexpr uint32_t DIR = (1U << 4);  ///< Direction
        constexpr uint32_t OPM = (1U << 3);  ///< One-pulse mode
        constexpr uint32_t URS = (1U << 2);  ///< Update request source
        constexpr uint32_t UDIS = (1U << 1);  ///< Update disable
        constexpr uint32_t CEN = (1U << 0);  ///< Counter enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t TI1S = (1U << 7);  ///< TI1 selection
        constexpr uint32_t MMS = (3 << 4);  ///< Master mode selection
        constexpr uint32_t CCDS = (1U << 3);  ///< Capture/compare DMA selection
    }

    /// SMCR Register bits
    namespace smcr_bits {
        constexpr uint32_t ETP = (1U << 15);  ///< External trigger polarity
        constexpr uint32_t ECE = (1U << 14);  ///< External clock enable
        constexpr uint32_t ETPS = (2 << 12);  ///< External trigger prescaler
        constexpr uint32_t ETF = (4 << 8);  ///< External trigger filter
        constexpr uint32_t MSM = (1U << 7);  ///< Master/Slave mode
        constexpr uint32_t TS = (3 << 4);  ///< Trigger selection
        constexpr uint32_t SMS = (3 << 0);  ///< Slave mode selection
    }

    /// DIER Register bits
    namespace dier_bits {
        constexpr uint32_t TDE = (1U << 14);  ///< Trigger DMA request enable
        constexpr uint32_t CC4DE = (1U << 12);  ///< Capture/Compare 4 DMA request enable
        constexpr uint32_t CC3DE = (1U << 11);  ///< Capture/Compare 3 DMA request enable
        constexpr uint32_t CC2DE = (1U << 10);  ///< Capture/Compare 2 DMA request enable
        constexpr uint32_t CC1DE = (1U << 9);  ///< Capture/Compare 1 DMA request enable
        constexpr uint32_t UDE = (1U << 8);  ///< Update DMA request enable
        constexpr uint32_t TIE = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t CC4IE = (1U << 4);  ///< Capture/Compare 4 interrupt enable
        constexpr uint32_t CC3IE = (1U << 3);  ///< Capture/Compare 3 interrupt enable
        constexpr uint32_t CC2IE = (1U << 2);  ///< Capture/Compare 2 interrupt enable
        constexpr uint32_t CC1IE = (1U << 1);  ///< Capture/Compare 1 interrupt enable
        constexpr uint32_t UIE = (1U << 0);  ///< Update interrupt enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CC4OF = (1U << 12);  ///< Capture/Compare 4 overcapture flag
        constexpr uint32_t CC3OF = (1U << 11);  ///< Capture/Compare 3 overcapture flag
        constexpr uint32_t CC2OF = (1U << 10);  ///< Capture/compare 2 overcapture flag
        constexpr uint32_t CC1OF = (1U << 9);  ///< Capture/Compare 1 overcapture flag
        constexpr uint32_t TIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t CC4IF = (1U << 4);  ///< Capture/Compare 4 interrupt flag
        constexpr uint32_t CC3IF = (1U << 3);  ///< Capture/Compare 3 interrupt flag
        constexpr uint32_t CC2IF = (1U << 2);  ///< Capture/Compare 2 interrupt flag
        constexpr uint32_t CC1IF = (1U << 1);  ///< Capture/compare 1 interrupt flag
        constexpr uint32_t UIF = (1U << 0);  ///< Update interrupt flag
    }

    /// EGR Register bits
    namespace egr_bits {
        constexpr uint32_t TG = (1U << 6);  ///< Trigger generation
        constexpr uint32_t CC4G = (1U << 4);  ///< Capture/compare 4 generation
        constexpr uint32_t CC3G = (1U << 3);  ///< Capture/compare 3 generation
        constexpr uint32_t CC2G = (1U << 2);  ///< Capture/compare 2 generation
        constexpr uint32_t CC1G = (1U << 1);  ///< Capture/compare 1 generation
        constexpr uint32_t UG = (1U << 0);  ///< Update generation
    }

    /// CCMR1_Output Register bits
    namespace ccmr1_output_bits {
        constexpr uint32_t OC2CE = (1U << 15);  ///< Output compare 2 clear enable
        constexpr uint32_t OC2M = (3 << 12);  ///< Output compare 2 mode
        constexpr uint32_t OC2PE = (1U << 11);  ///< Output compare 2 preload enable
        constexpr uint32_t OC2FE = (1U << 10);  ///< Output compare 2 fast enable
        constexpr uint32_t CC2S = (2 << 8);  ///< Capture/Compare 2 selection
        constexpr uint32_t OC1CE = (1U << 7);  ///< Output compare 1 clear enable
        constexpr uint32_t OC1M = (3 << 4);  ///< Output compare 1 mode
        constexpr uint32_t OC1PE = (1U << 3);  ///< Output compare 1 preload enable
        constexpr uint32_t OC1FE = (1U << 2);  ///< Output compare 1 fast enable
        constexpr uint32_t CC1S = (2 << 0);  ///< Capture/Compare 1 selection
    }

    /// CCMR1_Input Register bits
    namespace ccmr1_input_bits {
        constexpr uint32_t IC2F = (4 << 12);  ///< Input capture 2 filter
        constexpr uint32_t IC2PSC = (2 << 10);  ///< Input capture 2 prescaler
        constexpr uint32_t CC2S = (2 << 8);  ///< Capture/compare 2 selection
        constexpr uint32_t IC1F = (4 << 4);  ///< Input capture 1 filter
        constexpr uint32_t IC1PSC = (2 << 2);  ///< Input capture 1 prescaler
        constexpr uint32_t CC1S = (2 << 0);  ///< Capture/Compare 1 selection
    }

    /// CCMR2_Output Register bits
    namespace ccmr2_output_bits {
        constexpr uint32_t O24CE = (1U << 15);  ///< Output compare 4 clear enable
        constexpr uint32_t OC4M = (3 << 12);  ///< Output compare 4 mode
        constexpr uint32_t OC4PE = (1U << 11);  ///< Output compare 4 preload enable
        constexpr uint32_t OC4FE = (1U << 10);  ///< Output compare 4 fast enable
        constexpr uint32_t CC4S = (2 << 8);  ///< Capture/Compare 4 selection
        constexpr uint32_t OC3CE = (1U << 7);  ///< Output compare 3 clear enable
        constexpr uint32_t OC3M = (3 << 4);  ///< Output compare 3 mode
        constexpr uint32_t OC3PE = (1U << 3);  ///< Output compare 3 preload enable
        constexpr uint32_t OC3FE = (1U << 2);  ///< Output compare 3 fast enable
        constexpr uint32_t CC3S = (2 << 0);  ///< Capture/Compare 3 selection
    }

    /// CCMR2_Input Register bits
    namespace ccmr2_input_bits {
        constexpr uint32_t IC4F = (4 << 12);  ///< Input capture 4 filter
        constexpr uint32_t IC4PSC = (2 << 10);  ///< Input capture 4 prescaler
        constexpr uint32_t CC4S = (2 << 8);  ///< Capture/Compare 4 selection
        constexpr uint32_t IC3F = (4 << 4);  ///< Input capture 3 filter
        constexpr uint32_t IC3PSC = (2 << 2);  ///< Input capture 3 prescaler
        constexpr uint32_t CC3S = (2 << 0);  ///< Capture/Compare 3 selection
    }

    /// CCER Register bits
    namespace ccer_bits {
        constexpr uint32_t CC4P = (1U << 13);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC4E = (1U << 12);  ///< Capture/Compare 4 output enable
        constexpr uint32_t CC3P = (1U << 9);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC3E = (1U << 8);  ///< Capture/Compare 3 output enable
        constexpr uint32_t CC2P = (1U << 5);  ///< Capture/Compare 2 output Polarity
        constexpr uint32_t CC2E = (1U << 4);  ///< Capture/Compare 2 output enable
        constexpr uint32_t CC1P = (1U << 1);  ///< Capture/Compare 1 output Polarity
        constexpr uint32_t CC1E = (1U << 0);  ///< Capture/Compare 1 output enable
    }

    /// CNT Register bits
    namespace cnt_bits {
        constexpr uint32_t CNT = (16 << 0);  ///< counter value
    }

    /// PSC Register bits
    namespace psc_bits {
        constexpr uint32_t PSC = (16 << 0);  ///< Prescaler value
    }

    /// ARR Register bits
    namespace arr_bits {
        constexpr uint32_t ARR = (16 << 0);  ///< Auto-reload value
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t CCR1 = (16 << 0);  ///< Capture/Compare 1 value
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t CCR2 = (16 << 0);  ///< Capture/Compare 2 value
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t CCR3 = (16 << 0);  ///< Capture/Compare value
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t CCR4 = (16 << 0);  ///< Capture/Compare value
    }

    /// DCR Register bits
    namespace dcr_bits {
        constexpr uint32_t DBL = (5 << 8);  ///< DMA burst length
        constexpr uint32_t DBA = (5 << 0);  ///< DMA base address
    }

    /// DMAR Register bits
    namespace dmar_bits {
        constexpr uint32_t DMAB = (16 << 0);  ///< DMA register for burst accesses
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C1_BASE = 0x40005400;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t OAR1;  ///< Offset: 0x08 - Own address register 1
        volatile uint32_t OAR2;  ///< Offset: 0x0C - Own address register 2
        volatile uint32_t DR;  ///< Offset: 0x10 - Data register
        volatile uint32_t SR1;  ///< Offset: 0x14 - Status register 1
        volatile uint32_t SR2;  ///< Offset: 0x18 - Status register 2
        volatile uint32_t CCR;  ///< Offset: 0x1C - Clock control register
        volatile uint32_t TRISE;  ///< Offset: 0x20 - TRISE register
    };

    /// Peripheral instances
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t SWRST = (1U << 15);  ///< Software reset
        constexpr uint32_t ALERT = (1U << 13);  ///< SMBus alert
        constexpr uint32_t PEC = (1U << 12);  ///< Packet error checking
        constexpr uint32_t POS = (1U << 11);  ///< Acknowledge/PEC Position (for data reception)
        constexpr uint32_t ACK = (1U << 10);  ///< Acknowledge enable
        constexpr uint32_t STOP = (1U << 9);  ///< Stop generation
        constexpr uint32_t START = (1U << 8);  ///< Start generation
        constexpr uint32_t NOSTRETCH = (1U << 7);  ///< Clock stretching disable (Slave mode)
        constexpr uint32_t ENGC = (1U << 6);  ///< General call enable
        constexpr uint32_t ENPEC = (1U << 5);  ///< PEC enable
        constexpr uint32_t ENARP = (1U << 4);  ///< ARP enable
        constexpr uint32_t SMBTYPE = (1U << 3);  ///< SMBus type
        constexpr uint32_t SMBUS = (1U << 1);  ///< SMBus mode
        constexpr uint32_t PE = (1U << 0);  ///< Peripheral enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t LAST = (1U << 12);  ///< DMA last transfer
        constexpr uint32_t DMAEN = (1U << 11);  ///< DMA requests enable
        constexpr uint32_t ITBUFEN = (1U << 10);  ///< Buffer interrupt enable
        constexpr uint32_t ITEVTEN = (1U << 9);  ///< Event interrupt enable
        constexpr uint32_t ITERREN = (1U << 8);  ///< Error interrupt enable
        constexpr uint32_t FREQ = (6 << 0);  ///< Peripheral clock frequency
    }

    /// OAR1 Register bits
    namespace oar1_bits {
        constexpr uint32_t ADDMODE = (1U << 15);  ///< Addressing mode (slave mode)
        constexpr uint32_t ADD10 = (2 << 8);  ///< Interface address
        constexpr uint32_t ADD7 = (7 << 1);  ///< Interface address
        constexpr uint32_t ADD0 = (1U << 0);  ///< Interface address
    }

    /// OAR2 Register bits
    namespace oar2_bits {
        constexpr uint32_t ADD2 = (7 << 1);  ///< Interface address
        constexpr uint32_t ENDUAL = (1U << 0);  ///< Dual addressing mode enable
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (8 << 0);  ///< 8-bit data register
    }

    /// SR1 Register bits
    namespace sr1_bits {
        constexpr uint32_t SMBALERT = (1U << 15);  ///< SMBus alert
        constexpr uint32_t TIMEOUT = (1U << 14);  ///< Timeout or Tlow error
        constexpr uint32_t PECERR = (1U << 12);  ///< PEC Error in reception
        constexpr uint32_t OVR = (1U << 11);  ///< Overrun/Underrun
        constexpr uint32_t AF = (1U << 10);  ///< Acknowledge failure
        constexpr uint32_t ARLO = (1U << 9);  ///< Arbitration lost (master mode)
        constexpr uint32_t BERR = (1U << 8);  ///< Bus error
        constexpr uint32_t TxE = (1U << 7);  ///< Data register empty (transmitters)
        constexpr uint32_t RxNE = (1U << 6);  ///< Data register not empty (receivers)
        constexpr uint32_t STOPF = (1U << 4);  ///< Stop detection (slave mode)
        constexpr uint32_t ADD10 = (1U << 3);  ///< 10-bit header sent (Master mode)
        constexpr uint32_t BTF = (1U << 2);  ///< Byte transfer finished
        constexpr uint32_t ADDR = (1U << 1);  ///< Address sent (master mode)/matched (slave mode)
        constexpr uint32_t SB = (1U << 0);  ///< Start bit (Master mode)
    }

    /// SR2 Register bits
    namespace sr2_bits {
        constexpr uint32_t PEC = (8 << 8);  ///< acket error checking register
        constexpr uint32_t DUALF = (1U << 7);  ///< Dual flag (Slave mode)
        constexpr uint32_t SMBHOST = (1U << 6);  ///< SMBus host header (Slave mode)
        constexpr uint32_t SMBDEFAULT = (1U << 5);  ///< SMBus device default address (Slave mode)
        constexpr uint32_t GENCALL = (1U << 4);  ///< General call address (Slave mode)
        constexpr uint32_t TRA = (1U << 2);  ///< Transmitter/receiver
        constexpr uint32_t BUSY = (1U << 1);  ///< Bus busy
        constexpr uint32_t MSL = (1U << 0);  ///< Master/slave
    }

    /// CCR Register bits
    namespace ccr_bits {
        constexpr uint32_t F_S = (1U << 15);  ///< I2C master mode selection
        constexpr uint32_t DUTY = (1U << 14);  ///< Fast mode duty cycle
        constexpr uint32_t CCR = (12 << 0);  ///< Clock control register in Fast/Standard mode (Master mode)
    }

    /// TRISE Register bits
    namespace trise_bits {
        constexpr uint32_t TRISE = (6 << 0);  ///< Maximum rise time in Fast/Standard mode (Master mode)
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI1_BASE = 0x40013000;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - control register 2
        volatile uint32_t SR;  ///< Offset: 0x08 - status register
        volatile uint32_t DR;  ///< Offset: 0x0C - data register
        volatile uint32_t CRCPR;  ///< Offset: 0x10 - CRC polynomial register
        volatile uint32_t RXCRCR;  ///< Offset: 0x14 - RX CRC register
        volatile uint32_t TXCRCR;  ///< Offset: 0x18 - TX CRC register
        volatile uint32_t I2SCFGR;  ///< Offset: 0x1C - I2S configuration register
        volatile uint32_t I2SPR;  ///< Offset: 0x20 - I2S prescaler register
    };

    /// Peripheral instances
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t BIDIMODE = (1U << 15);  ///< Bidirectional data mode enable
        constexpr uint32_t BIDIOE = (1U << 14);  ///< Output enable in bidirectional mode
        constexpr uint32_t CRCEN = (1U << 13);  ///< Hardware CRC calculation enable
        constexpr uint32_t CRCNEXT = (1U << 12);  ///< CRC transfer next
        constexpr uint32_t DFF = (1U << 11);  ///< Data frame format
        constexpr uint32_t RXONLY = (1U << 10);  ///< Receive only
        constexpr uint32_t SSM = (1U << 9);  ///< Software slave management
        constexpr uint32_t SSI = (1U << 8);  ///< Internal slave select
        constexpr uint32_t LSBFIRST = (1U << 7);  ///< Frame format
        constexpr uint32_t SPE = (1U << 6);  ///< SPI enable
        constexpr uint32_t BR = (3 << 3);  ///< Baud rate control
        constexpr uint32_t MSTR = (1U << 2);  ///< Master selection
        constexpr uint32_t CPOL = (1U << 1);  ///< Clock polarity
        constexpr uint32_t CPHA = (1U << 0);  ///< Clock phase
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t TXEIE = (1U << 7);  ///< Tx buffer empty interrupt enable
        constexpr uint32_t RXNEIE = (1U << 6);  ///< RX buffer not empty interrupt enable
        constexpr uint32_t ERRIE = (1U << 5);  ///< Error interrupt enable
        constexpr uint32_t SSOE = (1U << 2);  ///< SS output enable
        constexpr uint32_t TXDMAEN = (1U << 1);  ///< Tx buffer DMA enable
        constexpr uint32_t RXDMAEN = (1U << 0);  ///< Rx buffer DMA enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t BSY = (1U << 7);  ///< Busy flag
        constexpr uint32_t OVR = (1U << 6);  ///< Overrun flag
        constexpr uint32_t MODF = (1U << 5);  ///< Mode fault
        constexpr uint32_t CRCERR = (1U << 4);  ///< CRC error flag
        constexpr uint32_t UDR = (1U << 3);  ///< Underrun flag
        constexpr uint32_t CHSIDE = (1U << 2);  ///< Channel side
        constexpr uint32_t TXE = (1U << 1);  ///< Transmit buffer empty
        constexpr uint32_t RXNE = (1U << 0);  ///< Receive buffer not empty
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (16 << 0);  ///< Data register
    }

    /// CRCPR Register bits
    namespace crcpr_bits {
        constexpr uint32_t CRCPOLY = (16 << 0);  ///< CRC polynomial register
    }

    /// RXCRCR Register bits
    namespace rxcrcr_bits {
        constexpr uint32_t RxCRC = (16 << 0);  ///< Rx CRC register
    }

    /// TXCRCR Register bits
    namespace txcrcr_bits {
        constexpr uint32_t TxCRC = (16 << 0);  ///< Tx CRC register
    }

    /// I2SCFGR Register bits
    namespace i2scfgr_bits {
        constexpr uint32_t I2SMOD = (1U << 11);  ///< I2S mode selection
        constexpr uint32_t I2SE = (1U << 10);  ///< I2S Enable
        constexpr uint32_t I2SCFG = (2 << 8);  ///< I2S configuration mode
        constexpr uint32_t PCMSYNC = (1U << 7);  ///< PCM frame synchronization
        constexpr uint32_t I2SSTD = (2 << 4);  ///< I2S standard selection
        constexpr uint32_t CKPOL = (1U << 3);  ///< Steady state clock polarity
        constexpr uint32_t DATLEN = (2 << 1);  ///< Data length to be transferred
        constexpr uint32_t CHLEN = (1U << 0);  ///< Channel length (number of bits per audio channel)
    }

    /// I2SPR Register bits
    namespace i2spr_bits {
        constexpr uint32_t MCKOE = (1U << 9);  ///< Master clock output enable
        constexpr uint32_t ODD = (1U << 8);  ///< Odd factor for the prescaler
        constexpr uint32_t I2SDIV = (8 << 0);  ///< I2S Linear prescaler
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART1_BASE = 0x40013800;
    constexpr uint32_t USART2_BASE = 0x40004400;

    /// USART Register structure
    struct Registers {
        volatile uint32_t SR;  ///< Offset: 0x00 - Status register
        volatile uint32_t DR;  ///< Offset: 0x04 - Data register
        volatile uint32_t BRR;  ///< Offset: 0x08 - Baud rate register
        volatile uint32_t CR1;  ///< Offset: 0x0C - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x10 - Control register 2
        volatile uint32_t CR3;  ///< Offset: 0x14 - Control register 3
        volatile uint32_t GTPR;  ///< Offset: 0x18 - Guard time and prescaler register
    };

    /// Peripheral instances
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);

    // Bit definitions
    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CTS = (1U << 9);  ///< CTS flag
        constexpr uint32_t LBD = (1U << 8);  ///< LIN break detection flag
        constexpr uint32_t TXE = (1U << 7);  ///< Transmit data register empty
        constexpr uint32_t TC = (1U << 6);  ///< Transmission complete
        constexpr uint32_t RXNE = (1U << 5);  ///< Read data register not empty
        constexpr uint32_t IDLE = (1U << 4);  ///< IDLE line detected
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error
        constexpr uint32_t NE = (1U << 2);  ///< Noise error flag
        constexpr uint32_t FE = (1U << 1);  ///< Framing error
        constexpr uint32_t PE = (1U << 0);  ///< Parity error
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (9 << 0);  ///< Data value
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t DIV_Mantissa = (12 << 4);  ///< mantissa of USARTDIV
        constexpr uint32_t DIV_Fraction = (4 << 0);  ///< fraction of USARTDIV
    }

    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t UE = (1U << 13);  ///< USART enable
        constexpr uint32_t M = (1U << 12);  ///< Word length
        constexpr uint32_t WAKE = (1U << 11);  ///< Wakeup method
        constexpr uint32_t PCE = (1U << 10);  ///< Parity control enable
        constexpr uint32_t PS = (1U << 9);  ///< Parity selection
        constexpr uint32_t PEIE = (1U << 8);  ///< PE interrupt enable
        constexpr uint32_t TXEIE = (1U << 7);  ///< TXE interrupt enable
        constexpr uint32_t TCIE = (1U << 6);  ///< Transmission complete interrupt enable
        constexpr uint32_t RXNEIE = (1U << 5);  ///< RXNE interrupt enable
        constexpr uint32_t IDLEIE = (1U << 4);  ///< IDLE interrupt enable
        constexpr uint32_t TE = (1U << 3);  ///< Transmitter enable
        constexpr uint32_t RE = (1U << 2);  ///< Receiver enable
        constexpr uint32_t RWU = (1U << 1);  ///< Receiver wakeup
        constexpr uint32_t SBK = (1U << 0);  ///< Send break
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t LINEN = (1U << 14);  ///< LIN mode enable
        constexpr uint32_t STOP = (2 << 12);  ///< STOP bits
        constexpr uint32_t CLKEN = (1U << 11);  ///< Clock enable
        constexpr uint32_t CPOL = (1U << 10);  ///< Clock polarity
        constexpr uint32_t CPHA = (1U << 9);  ///< Clock phase
        constexpr uint32_t LBCL = (1U << 8);  ///< Last bit clock pulse
        constexpr uint32_t LBDIE = (1U << 6);  ///< LIN break detection interrupt enable
        constexpr uint32_t LBDL = (1U << 5);  ///< lin break detection length
        constexpr uint32_t ADD = (4 << 0);  ///< Address of the USART node
    }

    /// CR3 Register bits
    namespace cr3_bits {
        constexpr uint32_t CTSIE = (1U << 10);  ///< CTS interrupt enable
        constexpr uint32_t CTSE = (1U << 9);  ///< CTS enable
        constexpr uint32_t RTSE = (1U << 8);  ///< RTS enable
        constexpr uint32_t DMAT = (1U << 7);  ///< DMA enable transmitter
        constexpr uint32_t DMAR = (1U << 6);  ///< DMA enable receiver
        constexpr uint32_t SCEN = (1U << 5);  ///< Smartcard mode enable
        constexpr uint32_t NACK = (1U << 4);  ///< Smartcard NACK enable
        constexpr uint32_t HDSEL = (1U << 3);  ///< Half-duplex selection
        constexpr uint32_t IRLP = (1U << 2);  ///< IrDA low-power
        constexpr uint32_t IREN = (1U << 1);  ///< IrDA mode enable
        constexpr uint32_t EIE = (1U << 0);  ///< Error interrupt enable
    }

    /// GTPR Register bits
    namespace gtpr_bits {
        constexpr uint32_t GT = (8 << 8);  ///< Guard time value
        constexpr uint32_t PSC = (8 << 0);  ///< Prescaler value
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC1_BASE = 0x40012400;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t SR;  ///< Offset: 0x00 - status register
        volatile uint32_t CR1;  ///< Offset: 0x04 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x08 - control register 2
        volatile uint32_t SMPR1;  ///< Offset: 0x0C - sample time register 1
        volatile uint32_t SMPR2;  ///< Offset: 0x10 - sample time register 2
        volatile uint32_t JOFR1;  ///< Offset: 0x14 - injected channel data offset register x
        volatile uint32_t JOFR2;  ///< Offset: 0x18 - injected channel data offset register x
        volatile uint32_t JOFR3;  ///< Offset: 0x1C - injected channel data offset register x
        volatile uint32_t JOFR4;  ///< Offset: 0x20 - injected channel data offset register x
        volatile uint32_t HTR;  ///< Offset: 0x24 - watchdog higher threshold register
        volatile uint32_t LTR;  ///< Offset: 0x28 - watchdog lower threshold register
        volatile uint32_t SQR1;  ///< Offset: 0x2C - regular sequence register 1
        volatile uint32_t SQR2;  ///< Offset: 0x30 - regular sequence register 2
        volatile uint32_t SQR3;  ///< Offset: 0x34 - regular sequence register 3
        volatile uint32_t JSQR;  ///< Offset: 0x38 - injected sequence register
        volatile uint32_t JDR1;  ///< Offset: 0x3C - injected data register x
        volatile uint32_t JDR2;  ///< Offset: 0x40 - injected data register x
        volatile uint32_t JDR3;  ///< Offset: 0x44 - injected data register x
        volatile uint32_t JDR4;  ///< Offset: 0x48 - injected data register x
        volatile uint32_t DR;  ///< Offset: 0x4C - regular data register
    };

    /// Peripheral instances
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);

    // Bit definitions
    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t STRT = (1U << 4);  ///< Regular channel start flag
        constexpr uint32_t JSTRT = (1U << 3);  ///< Injected channel start flag
        constexpr uint32_t JEOC = (1U << 2);  ///< Injected channel end of conversion
        constexpr uint32_t EOC = (1U << 1);  ///< Regular channel end of conversion
        constexpr uint32_t AWD = (1U << 0);  ///< Analog watchdog flag
    }

    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t AWDEN = (1U << 23);  ///< Analog watchdog enable on regular channels
        constexpr uint32_t JAWDEN = (1U << 22);  ///< Analog watchdog enable on injected channels
        constexpr uint32_t DUALMOD = (4 << 16);  ///< Dual mode selection
        constexpr uint32_t DISCNUM = (3 << 13);  ///< Discontinuous mode channel count
        constexpr uint32_t JDISCEN = (1U << 12);  ///< Discontinuous mode on injected channels
        constexpr uint32_t DISCEN = (1U << 11);  ///< Discontinuous mode on regular channels
        constexpr uint32_t JAUTO = (1U << 10);  ///< Automatic injected group conversion
        constexpr uint32_t AWDSGL = (1U << 9);  ///< Enable the watchdog on a single channel in scan mode
        constexpr uint32_t SCAN = (1U << 8);  ///< Scan mode
        constexpr uint32_t JEOCIE = (1U << 7);  ///< Interrupt enable for injected channels
        constexpr uint32_t AWDIE = (1U << 6);  ///< Analog watchdog interrupt enable
        constexpr uint32_t EOCIE = (1U << 5);  ///< Interrupt enable for EOC
        constexpr uint32_t AWDCH = (5 << 0);  ///< Analog watchdog channel select bits
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t TSVREFE = (1U << 23);  ///< Temperature sensor and VREFINT enable
        constexpr uint32_t SWSTART = (1U << 22);  ///< Start conversion of regular channels
        constexpr uint32_t JSWSTART = (1U << 21);  ///< Start conversion of injected channels
        constexpr uint32_t EXTTRIG = (1U << 20);  ///< External trigger conversion mode for regular channels
        constexpr uint32_t EXTSEL = (3 << 17);  ///< External event select for regular group
        constexpr uint32_t JEXTTRIG = (1U << 15);  ///< External trigger conversion mode for injected channels
        constexpr uint32_t JEXTSEL = (3 << 12);  ///< External event select for injected group
        constexpr uint32_t ALIGN = (1U << 11);  ///< Data alignment
        constexpr uint32_t DMA = (1U << 8);  ///< Direct memory access mode
        constexpr uint32_t RSTCAL = (1U << 3);  ///< Reset calibration
        constexpr uint32_t CAL = (1U << 2);  ///< A/D calibration
        constexpr uint32_t CONT = (1U << 1);  ///< Continuous conversion
        constexpr uint32_t ADON = (1U << 0);  ///< A/D converter ON / OFF
    }

    /// SMPR1 Register bits
    namespace smpr1_bits {
        constexpr uint32_t SMPx_x = (32 << 0);  ///< Sample time bits
    }

    /// SMPR2 Register bits
    namespace smpr2_bits {
        constexpr uint32_t SMPx_x = (32 << 0);  ///< Sample time bits
    }

    /// JOFR1 Register bits
    namespace jofr1_bits {
        constexpr uint32_t JOFFSET1 = (12 << 0);  ///< Data offset for injected channel x
    }

    /// JOFR2 Register bits
    namespace jofr2_bits {
        constexpr uint32_t JOFFSET2 = (12 << 0);  ///< Data offset for injected channel x
    }

    /// JOFR3 Register bits
    namespace jofr3_bits {
        constexpr uint32_t JOFFSET3 = (12 << 0);  ///< Data offset for injected channel x
    }

    /// JOFR4 Register bits
    namespace jofr4_bits {
        constexpr uint32_t JOFFSET4 = (12 << 0);  ///< Data offset for injected channel x
    }

    /// HTR Register bits
    namespace htr_bits {
        constexpr uint32_t HT = (12 << 0);  ///< Analog watchdog higher threshold
    }

    /// LTR Register bits
    namespace ltr_bits {
        constexpr uint32_t LT = (12 << 0);  ///< Analog watchdog lower threshold
    }

    /// SQR1 Register bits
    namespace sqr1_bits {
        constexpr uint32_t L = (4 << 20);  ///< Regular channel sequence length
        constexpr uint32_t SQ16 = (5 << 15);  ///< 16th conversion in regular sequence
        constexpr uint32_t SQ15 = (5 << 10);  ///< 15th conversion in regular sequence
        constexpr uint32_t SQ14 = (5 << 5);  ///< 14th conversion in regular sequence
        constexpr uint32_t SQ13 = (5 << 0);  ///< 13th conversion in regular sequence
    }

    /// SQR2 Register bits
    namespace sqr2_bits {
        constexpr uint32_t SQ12 = (5 << 25);  ///< 12th conversion in regular sequence
        constexpr uint32_t SQ11 = (5 << 20);  ///< 11th conversion in regular sequence
        constexpr uint32_t SQ10 = (5 << 15);  ///< 10th conversion in regular sequence
        constexpr uint32_t SQ9 = (5 << 10);  ///< 9th conversion in regular sequence
        constexpr uint32_t SQ8 = (5 << 5);  ///< 8th conversion in regular sequence
        constexpr uint32_t SQ7 = (5 << 0);  ///< 7th conversion in regular sequence
    }

    /// SQR3 Register bits
    namespace sqr3_bits {
        constexpr uint32_t SQ6 = (5 << 25);  ///< 6th conversion in regular sequence
        constexpr uint32_t SQ5 = (5 << 20);  ///< 5th conversion in regular sequence
        constexpr uint32_t SQ4 = (5 << 15);  ///< 4th conversion in regular sequence
        constexpr uint32_t SQ3 = (5 << 10);  ///< 3rd conversion in regular sequence
        constexpr uint32_t SQ2 = (5 << 5);  ///< 2nd conversion in regular sequence
        constexpr uint32_t SQ1 = (5 << 0);  ///< 1st conversion in regular sequence
    }

    /// JSQR Register bits
    namespace jsqr_bits {
        constexpr uint32_t JL = (2 << 20);  ///< Injected sequence length
        constexpr uint32_t JSQ4 = (5 << 15);  ///< 4th conversion in injected sequence
        constexpr uint32_t JSQ3 = (5 << 10);  ///< 3rd conversion in injected sequence
        constexpr uint32_t JSQ2 = (5 << 5);  ///< 2nd conversion in injected sequence
        constexpr uint32_t JSQ1 = (5 << 0);  ///< 1st conversion in injected sequence
    }

    /// JDR1 Register bits
    namespace jdr1_bits {
        constexpr uint32_t JDATA = (16 << 0);  ///< Injected data
    }

    /// JDR2 Register bits
    namespace jdr2_bits {
        constexpr uint32_t JDATA = (16 << 0);  ///< Injected data
    }

    /// JDR3 Register bits
    namespace jdr3_bits {
        constexpr uint32_t JDATA = (16 << 0);  ///< Injected data
    }

    /// JDR4 Register bits
    namespace jdr4_bits {
        constexpr uint32_t JDATA = (16 << 0);  ///< Injected data
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DATA = (16 << 0);  ///< Regular data
    }

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40023000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t DR;  ///< Offset: 0x00 - Data register
        volatile uint32_t IDR;  ///< Offset: 0x04 - Independent Data register
        volatile uint32_t CR;  ///< Offset: 0x08 - Control register
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (32 << 0);  ///< Data Register
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t IDR = (8 << 0);  ///< Independent Data register
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RESET = (1U << 0);  ///< Reset bit
    }

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_BASE = 0x40022000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t ACR;  ///< Offset: 0x00 - Flash access control register
        volatile uint32_t KEYR;  ///< Offset: 0x04 - Flash key register
        volatile uint32_t OPTKEYR;  ///< Offset: 0x08 - Flash option key register
        volatile uint32_t SR;  ///< Offset: 0x0C - Status register
        volatile uint32_t CR;  ///< Offset: 0x10 - Control register
        volatile uint32_t AR;  ///< Offset: 0x14 - Flash address register
        volatile uint32_t OBR;  ///< Offset: 0x1C - Option byte register
        volatile uint32_t WRPR;  ///< Offset: 0x20 - Write protection register
    };

    /// Peripheral instances
    inline Registers* FLASH = reinterpret_cast<Registers*>(FLASH_BASE);

    // Bit definitions
    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t LATENCY = (3 << 0);  ///< Latency
        constexpr uint32_t HLFCYA = (1U << 3);  ///< Flash half cycle access enable
        constexpr uint32_t PRFTBE = (1U << 4);  ///< Prefetch buffer enable
        constexpr uint32_t PRFTBS = (1U << 5);  ///< Prefetch buffer status
    }

    /// KEYR Register bits
    namespace keyr_bits {
        constexpr uint32_t KEY = (32 << 0);  ///< FPEC key
    }

    /// OPTKEYR Register bits
    namespace optkeyr_bits {
        constexpr uint32_t OPTKEY = (32 << 0);  ///< Option byte key
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t EOP = (1U << 5);  ///< End of operation
        constexpr uint32_t WRPRTERR = (1U << 4);  ///< Write protection error
        constexpr uint32_t PGERR = (1U << 2);  ///< Programming error
        constexpr uint32_t BSY = (1U << 0);  ///< Busy
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PG = (1U << 0);  ///< Programming
        constexpr uint32_t PER = (1U << 1);  ///< Page Erase
        constexpr uint32_t MER = (1U << 2);  ///< Mass Erase
        constexpr uint32_t OPTPG = (1U << 4);  ///< Option byte programming
        constexpr uint32_t OPTER = (1U << 5);  ///< Option byte erase
        constexpr uint32_t STRT = (1U << 6);  ///< Start
        constexpr uint32_t LOCK = (1U << 7);  ///< Lock
        constexpr uint32_t OPTWRE = (1U << 9);  ///< Option bytes write enable
        constexpr uint32_t ERRIE = (1U << 10);  ///< Error interrupt enable
        constexpr uint32_t EOPIE = (1U << 12);  ///< End of operation interrupt enable
    }

    /// AR Register bits
    namespace ar_bits {
        constexpr uint32_t FAR = (32 << 0);  ///< Flash Address
    }

    /// OBR Register bits
    namespace obr_bits {
        constexpr uint32_t OPTERR = (1U << 0);  ///< Option byte error
        constexpr uint32_t RDPRT = (1U << 1);  ///< Read protection
        constexpr uint32_t WDG_SW = (1U << 2);  ///< WDG_SW
        constexpr uint32_t nRST_STOP = (1U << 3);  ///< nRST_STOP
        constexpr uint32_t nRST_STDBY = (1U << 4);  ///< nRST_STDBY
        constexpr uint32_t Data0 = (8 << 10);  ///< Data0
        constexpr uint32_t Data1 = (8 << 18);  ///< Data1
    }

    /// WRPR Register bits
    namespace wrpr_bits {
        constexpr uint32_t WRP = (32 << 0);  ///< Write protect
    }

}

// ============================================================================
// DBG Peripheral
// ============================================================================

namespace dbg {
    /// Base addresses
    constexpr uint32_t DBG_BASE = 0xE0042000;

    /// DBG Register structure
    struct Registers {
        volatile uint32_t IDCODE;  ///< Offset: 0x00 - DBGMCU_IDCODE
        volatile uint32_t CR;  ///< Offset: 0x04 - DBGMCU_CR
    };

    /// Peripheral instances
    inline Registers* DBG = reinterpret_cast<Registers*>(DBG_BASE);

    // Bit definitions
    /// IDCODE Register bits
    namespace idcode_bits {
        constexpr uint32_t DEV_ID = (12 << 0);  ///< DEV_ID
        constexpr uint32_t REV_ID = (16 << 16);  ///< REV_ID
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t DBG_SLEEP = (1U << 0);  ///< DBG_SLEEP
        constexpr uint32_t DBG_STOP = (1U << 1);  ///< DBG_STOP
        constexpr uint32_t DBG_STANDBY = (1U << 2);  ///< DBG_STANDBY
        constexpr uint32_t TRACE_IOEN = (1U << 5);  ///< TRACE_IOEN
        constexpr uint32_t TRACE_MODE = (2 << 6);  ///< TRACE_MODE
        constexpr uint32_t DBG_IWDG_STOP = (1U << 8);  ///< DBG_IWDG_STOP
        constexpr uint32_t DBG_WWDG_STOP = (1U << 9);  ///< DBG_WWDG_STOP
        constexpr uint32_t DBG_TIM2_STOP = (1U << 11);  ///< DBG_TIM2_STOP
        constexpr uint32_t DBG_TIM3_STOP = (1U << 12);  ///< DBG_TIM3_STOP
        constexpr uint32_t DBG_I2C1_SMBUS_TIMEOUT = (1U << 15);  ///< DBG_I2C1_SMBUS_TIMEOUT
    }

}

// ============================================================================
// BKP Peripheral
// ============================================================================

namespace bkp {
    /// Base addresses
    constexpr uint32_t BKP_BASE = 0x40006C04;

    /// BKP Register structure
    struct Registers {
        volatile uint32_t DR1;  ///< Offset: 0x00 - Backup data register (BKP_DR)
        volatile uint32_t DR2;  ///< Offset: 0x04 - Backup data register (BKP_DR)
        volatile uint32_t DR3;  ///< Offset: 0x08 - Backup data register (BKP_DR)
        volatile uint32_t DR4;  ///< Offset: 0x0C - Backup data register (BKP_DR)
        volatile uint32_t DR5;  ///< Offset: 0x10 - Backup data register (BKP_DR)
        volatile uint32_t DR6;  ///< Offset: 0x14 - Backup data register (BKP_DR)
        volatile uint32_t DR7;  ///< Offset: 0x18 - Backup data register (BKP_DR)
        volatile uint32_t DR8;  ///< Offset: 0x1C - Backup data register (BKP_DR)
        volatile uint32_t DR9;  ///< Offset: 0x20 - Backup data register (BKP_DR)
        volatile uint32_t DR10;  ///< Offset: 0x24 - Backup data register (BKP_DR)
        volatile uint32_t DR11;  ///< Offset: 0x3C - Backup data register (BKP_DR)
        volatile uint32_t DR12;  ///< Offset: 0x40 - Backup data register (BKP_DR)
        volatile uint32_t DR13;  ///< Offset: 0x44 - Backup data register (BKP_DR)
        volatile uint32_t DR14;  ///< Offset: 0x48 - Backup data register (BKP_DR)
        volatile uint32_t DR15;  ///< Offset: 0x4C - Backup data register (BKP_DR)
        volatile uint32_t DR16;  ///< Offset: 0x50 - Backup data register (BKP_DR)
        volatile uint32_t DR17;  ///< Offset: 0x54 - Backup data register (BKP_DR)
        volatile uint32_t DR18;  ///< Offset: 0x58 - Backup data register (BKP_DR)
        volatile uint32_t DR19;  ///< Offset: 0x5C - Backup data register (BKP_DR)
        volatile uint32_t DR20;  ///< Offset: 0x60 - Backup data register (BKP_DR)
        volatile uint32_t DR21;  ///< Offset: 0x64 - Backup data register (BKP_DR)
        volatile uint32_t DR22;  ///< Offset: 0x68 - Backup data register (BKP_DR)
        volatile uint32_t DR23;  ///< Offset: 0x6C - Backup data register (BKP_DR)
        volatile uint32_t DR24;  ///< Offset: 0x70 - Backup data register (BKP_DR)
        volatile uint32_t DR25;  ///< Offset: 0x74 - Backup data register (BKP_DR)
        volatile uint32_t DR26;  ///< Offset: 0x78 - Backup data register (BKP_DR)
        volatile uint32_t DR27;  ///< Offset: 0x7C - Backup data register (BKP_DR)
        volatile uint32_t DR28;  ///< Offset: 0x80 - Backup data register (BKP_DR)
        volatile uint32_t DR29;  ///< Offset: 0x84 - Backup data register (BKP_DR)
        volatile uint32_t DR30;  ///< Offset: 0x88 - Backup data register (BKP_DR)
        volatile uint32_t DR31;  ///< Offset: 0x8C - Backup data register (BKP_DR)
        volatile uint32_t DR32;  ///< Offset: 0x90 - Backup data register (BKP_DR)
        volatile uint32_t DR33;  ///< Offset: 0x94 - Backup data register (BKP_DR)
        volatile uint32_t DR34;  ///< Offset: 0x98 - Backup data register (BKP_DR)
        volatile uint32_t DR35;  ///< Offset: 0x9C - Backup data register (BKP_DR)
        volatile uint32_t DR36;  ///< Offset: 0xA0 - Backup data register (BKP_DR)
        volatile uint32_t DR37;  ///< Offset: 0xA4 - Backup data register (BKP_DR)
        volatile uint32_t DR38;  ///< Offset: 0xA8 - Backup data register (BKP_DR)
        volatile uint32_t DR39;  ///< Offset: 0xAC - Backup data register (BKP_DR)
        volatile uint32_t DR40;  ///< Offset: 0xB0 - Backup data register (BKP_DR)
        volatile uint32_t DR41;  ///< Offset: 0xB4 - Backup data register (BKP_DR)
        volatile uint32_t DR42;  ///< Offset: 0xB8 - Backup data register (BKP_DR)
        volatile uint32_t RTCCR;  ///< Offset: 0x28 - RTC clock calibration register (BKP_RTCCR)
        volatile uint32_t CR;  ///< Offset: 0x2C - Backup control register (BKP_CR)
        volatile uint32_t CSR;  ///< Offset: 0x30 - BKP_CSR control/status register (BKP_CSR)
    };

    /// Peripheral instances
    inline Registers* BKP = reinterpret_cast<Registers*>(BKP_BASE);

    // Bit definitions
    /// DR1 Register bits
    namespace dr1_bits {
        constexpr uint32_t D1 = (16 << 0);  ///< Backup data
    }

    /// DR2 Register bits
    namespace dr2_bits {
        constexpr uint32_t D2 = (16 << 0);  ///< Backup data
    }

    /// DR3 Register bits
    namespace dr3_bits {
        constexpr uint32_t D3 = (16 << 0);  ///< Backup data
    }

    /// DR4 Register bits
    namespace dr4_bits {
        constexpr uint32_t D4 = (16 << 0);  ///< Backup data
    }

    /// DR5 Register bits
    namespace dr5_bits {
        constexpr uint32_t D5 = (16 << 0);  ///< Backup data
    }

    /// DR6 Register bits
    namespace dr6_bits {
        constexpr uint32_t D6 = (16 << 0);  ///< Backup data
    }

    /// DR7 Register bits
    namespace dr7_bits {
        constexpr uint32_t D7 = (16 << 0);  ///< Backup data
    }

    /// DR8 Register bits
    namespace dr8_bits {
        constexpr uint32_t D8 = (16 << 0);  ///< Backup data
    }

    /// DR9 Register bits
    namespace dr9_bits {
        constexpr uint32_t D9 = (16 << 0);  ///< Backup data
    }

    /// DR10 Register bits
    namespace dr10_bits {
        constexpr uint32_t D10 = (16 << 0);  ///< Backup data
    }

    /// DR11 Register bits
    namespace dr11_bits {
        constexpr uint32_t DR11 = (16 << 0);  ///< Backup data
    }

    /// DR12 Register bits
    namespace dr12_bits {
        constexpr uint32_t DR12 = (16 << 0);  ///< Backup data
    }

    /// DR13 Register bits
    namespace dr13_bits {
        constexpr uint32_t DR13 = (16 << 0);  ///< Backup data
    }

    /// DR14 Register bits
    namespace dr14_bits {
        constexpr uint32_t D14 = (16 << 0);  ///< Backup data
    }

    /// DR15 Register bits
    namespace dr15_bits {
        constexpr uint32_t D15 = (16 << 0);  ///< Backup data
    }

    /// DR16 Register bits
    namespace dr16_bits {
        constexpr uint32_t D16 = (16 << 0);  ///< Backup data
    }

    /// DR17 Register bits
    namespace dr17_bits {
        constexpr uint32_t D17 = (16 << 0);  ///< Backup data
    }

    /// DR18 Register bits
    namespace dr18_bits {
        constexpr uint32_t D18 = (16 << 0);  ///< Backup data
    }

    /// DR19 Register bits
    namespace dr19_bits {
        constexpr uint32_t D19 = (16 << 0);  ///< Backup data
    }

    /// DR20 Register bits
    namespace dr20_bits {
        constexpr uint32_t D20 = (16 << 0);  ///< Backup data
    }

    /// DR21 Register bits
    namespace dr21_bits {
        constexpr uint32_t D21 = (16 << 0);  ///< Backup data
    }

    /// DR22 Register bits
    namespace dr22_bits {
        constexpr uint32_t D22 = (16 << 0);  ///< Backup data
    }

    /// DR23 Register bits
    namespace dr23_bits {
        constexpr uint32_t D23 = (16 << 0);  ///< Backup data
    }

    /// DR24 Register bits
    namespace dr24_bits {
        constexpr uint32_t D24 = (16 << 0);  ///< Backup data
    }

    /// DR25 Register bits
    namespace dr25_bits {
        constexpr uint32_t D25 = (16 << 0);  ///< Backup data
    }

    /// DR26 Register bits
    namespace dr26_bits {
        constexpr uint32_t D26 = (16 << 0);  ///< Backup data
    }

    /// DR27 Register bits
    namespace dr27_bits {
        constexpr uint32_t D27 = (16 << 0);  ///< Backup data
    }

    /// DR28 Register bits
    namespace dr28_bits {
        constexpr uint32_t D28 = (16 << 0);  ///< Backup data
    }

    /// DR29 Register bits
    namespace dr29_bits {
        constexpr uint32_t D29 = (16 << 0);  ///< Backup data
    }

    /// DR30 Register bits
    namespace dr30_bits {
        constexpr uint32_t D30 = (16 << 0);  ///< Backup data
    }

    /// DR31 Register bits
    namespace dr31_bits {
        constexpr uint32_t D31 = (16 << 0);  ///< Backup data
    }

    /// DR32 Register bits
    namespace dr32_bits {
        constexpr uint32_t D32 = (16 << 0);  ///< Backup data
    }

    /// DR33 Register bits
    namespace dr33_bits {
        constexpr uint32_t D33 = (16 << 0);  ///< Backup data
    }

    /// DR34 Register bits
    namespace dr34_bits {
        constexpr uint32_t D34 = (16 << 0);  ///< Backup data
    }

    /// DR35 Register bits
    namespace dr35_bits {
        constexpr uint32_t D35 = (16 << 0);  ///< Backup data
    }

    /// DR36 Register bits
    namespace dr36_bits {
        constexpr uint32_t D36 = (16 << 0);  ///< Backup data
    }

    /// DR37 Register bits
    namespace dr37_bits {
        constexpr uint32_t D37 = (16 << 0);  ///< Backup data
    }

    /// DR38 Register bits
    namespace dr38_bits {
        constexpr uint32_t D38 = (16 << 0);  ///< Backup data
    }

    /// DR39 Register bits
    namespace dr39_bits {
        constexpr uint32_t D39 = (16 << 0);  ///< Backup data
    }

    /// DR40 Register bits
    namespace dr40_bits {
        constexpr uint32_t D40 = (16 << 0);  ///< Backup data
    }

    /// DR41 Register bits
    namespace dr41_bits {
        constexpr uint32_t D41 = (16 << 0);  ///< Backup data
    }

    /// DR42 Register bits
    namespace dr42_bits {
        constexpr uint32_t D42 = (16 << 0);  ///< Backup data
    }

    /// RTCCR Register bits
    namespace rtccr_bits {
        constexpr uint32_t CAL = (7 << 0);  ///< Calibration value
        constexpr uint32_t CCO = (1U << 7);  ///< Calibration Clock Output
        constexpr uint32_t ASOE = (1U << 8);  ///< Alarm or second output enable
        constexpr uint32_t ASOS = (1U << 9);  ///< Alarm or second output selection
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t TPE = (1U << 0);  ///< Tamper pin enable
        constexpr uint32_t TPAL = (1U << 1);  ///< Tamper pin active level
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t CTE = (1U << 0);  ///< Clear Tamper event
        constexpr uint32_t CTI = (1U << 1);  ///< Clear Tamper Interrupt
        constexpr uint32_t TPIE = (1U << 2);  ///< Tamper Pin interrupt enable
        constexpr uint32_t TEF = (1U << 8);  ///< Tamper Event Flag
        constexpr uint32_t TIF = (1U << 9);  ///< Tamper Interrupt Flag
    }

}

// ============================================================================
// NVIC Peripheral
// ============================================================================

namespace nvic {
    /// Base addresses
    constexpr uint32_t NVIC_BASE = 0xE000E000;

    /// NVIC Register structure
    struct Registers {
        volatile uint32_t ICTR;  ///< Offset: 0x04 - Interrupt Controller Type Register
        volatile uint32_t STIR;  ///< Offset: 0xF00 - Software Triggered Interrupt Register
        volatile uint32_t ISER0;  ///< Offset: 0x100 - Interrupt Set-Enable Register
        volatile uint32_t ISER1;  ///< Offset: 0x104 - Interrupt Set-Enable Register
        volatile uint32_t ICER0;  ///< Offset: 0x180 - Interrupt Clear-Enable Register
        volatile uint32_t ICER1;  ///< Offset: 0x184 - Interrupt Clear-Enable Register
        volatile uint32_t ISPR0;  ///< Offset: 0x200 - Interrupt Set-Pending Register
        volatile uint32_t ISPR1;  ///< Offset: 0x204 - Interrupt Set-Pending Register
        volatile uint32_t ICPR0;  ///< Offset: 0x280 - Interrupt Clear-Pending Register
        volatile uint32_t ICPR1;  ///< Offset: 0x284 - Interrupt Clear-Pending Register
        volatile uint32_t IABR0;  ///< Offset: 0x300 - Interrupt Active Bit Register
        volatile uint32_t IABR1;  ///< Offset: 0x304 - Interrupt Active Bit Register
        volatile uint32_t IPR0;  ///< Offset: 0x400 - Interrupt Priority Register
        volatile uint32_t IPR1;  ///< Offset: 0x404 - Interrupt Priority Register
        volatile uint32_t IPR2;  ///< Offset: 0x408 - Interrupt Priority Register
        volatile uint32_t IPR3;  ///< Offset: 0x40C - Interrupt Priority Register
        volatile uint32_t IPR4;  ///< Offset: 0x410 - Interrupt Priority Register
        volatile uint32_t IPR5;  ///< Offset: 0x414 - Interrupt Priority Register
        volatile uint32_t IPR6;  ///< Offset: 0x418 - Interrupt Priority Register
        volatile uint32_t IPR7;  ///< Offset: 0x41C - Interrupt Priority Register
        volatile uint32_t IPR8;  ///< Offset: 0x420 - Interrupt Priority Register
        volatile uint32_t IPR9;  ///< Offset: 0x424 - Interrupt Priority Register
        volatile uint32_t IPR10;  ///< Offset: 0x428 - Interrupt Priority Register
        volatile uint32_t IPR11;  ///< Offset: 0x42C - Interrupt Priority Register
        volatile uint32_t IPR12;  ///< Offset: 0x430 - Interrupt Priority Register
        volatile uint32_t IPR13;  ///< Offset: 0x434 - Interrupt Priority Register
        volatile uint32_t IPR14;  ///< Offset: 0x438 - Interrupt Priority Register
    };

    /// Peripheral instances
    inline Registers* NVIC = reinterpret_cast<Registers*>(NVIC_BASE);

    // Bit definitions
    /// ICTR Register bits
    namespace ictr_bits {
        constexpr uint32_t INTLINESNUM = (4 << 0);  ///< Total number of interrupt lines in groups
    }

    /// STIR Register bits
    namespace stir_bits {
        constexpr uint32_t INTID = (9 << 0);  ///< interrupt to be triggered
    }

    /// ISER0 Register bits
    namespace iser0_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ISER1 Register bits
    namespace iser1_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ICER0 Register bits
    namespace icer0_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ICER1 Register bits
    namespace icer1_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ISPR0 Register bits
    namespace ispr0_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ISPR1 Register bits
    namespace ispr1_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ICPR0 Register bits
    namespace icpr0_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// ICPR1 Register bits
    namespace icpr1_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// IABR0 Register bits
    namespace iabr0_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IABR1 Register bits
    namespace iabr1_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IPR0 Register bits
    namespace ipr0_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR1 Register bits
    namespace ipr1_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR2 Register bits
    namespace ipr2_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR3 Register bits
    namespace ipr3_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR4 Register bits
    namespace ipr4_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR5 Register bits
    namespace ipr5_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR6 Register bits
    namespace ipr6_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR7 Register bits
    namespace ipr7_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR8 Register bits
    namespace ipr8_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR9 Register bits
    namespace ipr9_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR10 Register bits
    namespace ipr10_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR11 Register bits
    namespace ipr11_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR12 Register bits
    namespace ipr12_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR13 Register bits
    namespace ipr13_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR14 Register bits
    namespace ipr14_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

}


} // namespace alloy::generated::stm32f102xx

#endif // ALLOY_GENERATED_STM32F102XX_PERIPHERALS_HPP