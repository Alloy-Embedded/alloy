/// Auto-generated code for STM32F303
/// Generated by Alloy Code Generator
/// Source: st_stm32f303.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-30 23:21:45
#ifndef ALLOY_GENERATED_STM32F303_PERIPHERALS_HPP
#define ALLOY_GENERATED_STM32F303_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::stm32f303 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIOA_BASE = 0x48000000;
    constexpr uint32_t GPIOB_BASE = 0x48000400;
    constexpr uint32_t GPIOC_BASE = 0x48000800;
    constexpr uint32_t GPIOD_BASE = 0x48000C00;
    constexpr uint32_t GPIOE_BASE = 0x48001000;
    constexpr uint32_t GPIOF_BASE = 0x48001400;
    constexpr uint32_t GPIOG_BASE = 0x48001800;
    constexpr uint32_t GPIOH_BASE = 0x48001C00;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t MODER;  ///< Offset: 0x00 - GPIO port mode register
        volatile uint32_t OTYPER;  ///< Offset: 0x04 - GPIO port output type register
        volatile uint32_t OSPEEDR;  ///< Offset: 0x08 - GPIO port output speed register
        volatile uint32_t PUPDR;  ///< Offset: 0x0C - GPIO port pull-up/pull-down register
        volatile uint32_t IDR;  ///< Offset: 0x10 - GPIO port input data register
        volatile uint32_t ODR;  ///< Offset: 0x14 - GPIO port output data register
        volatile uint32_t BSRR;  ///< Offset: 0x18 - GPIO port bit set/reset register
        volatile uint32_t LCKR;  ///< Offset: 0x1C - GPIO port configuration lock register
        volatile uint32_t AFRL;  ///< Offset: 0x20 - GPIO alternate function low register
        volatile uint32_t AFRH;  ///< Offset: 0x24 - GPIO alternate function high register
        volatile uint32_t BRR;  ///< Offset: 0x28 - Port bit reset register
    };

    /// Peripheral instances
    inline Registers* GPIOA = reinterpret_cast<Registers*>(GPIOA_BASE);
    inline Registers* GPIOB = reinterpret_cast<Registers*>(GPIOB_BASE);
    inline Registers* GPIOC = reinterpret_cast<Registers*>(GPIOC_BASE);
    inline Registers* GPIOD = reinterpret_cast<Registers*>(GPIOD_BASE);
    inline Registers* GPIOE = reinterpret_cast<Registers*>(GPIOE_BASE);
    inline Registers* GPIOF = reinterpret_cast<Registers*>(GPIOF_BASE);
    inline Registers* GPIOG = reinterpret_cast<Registers*>(GPIOG_BASE);
    inline Registers* GPIOH = reinterpret_cast<Registers*>(GPIOH_BASE);

    // Bit definitions
    /// MODER Register bits
    namespace moder_bits {
        constexpr uint32_t MODER15 = (2 << 30);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER14 = (2 << 28);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER13 = (2 << 26);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER12 = (2 << 24);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER11 = (2 << 22);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER10 = (2 << 20);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER9 = (2 << 18);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER8 = (2 << 16);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER7 = (2 << 14);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER6 = (2 << 12);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER5 = (2 << 10);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER4 = (2 << 8);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER3 = (2 << 6);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER2 = (2 << 4);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER1 = (2 << 2);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER0 = (2 << 0);  ///< Port x configuration bits (y = 0..15)
    }

    /// OTYPER Register bits
    namespace otyper_bits {
        constexpr uint32_t OT15 = (1U << 15);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT14 = (1U << 14);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT13 = (1U << 13);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT12 = (1U << 12);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT11 = (1U << 11);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT10 = (1U << 10);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT9 = (1U << 9);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT8 = (1U << 8);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT7 = (1U << 7);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT6 = (1U << 6);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT5 = (1U << 5);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT4 = (1U << 4);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT3 = (1U << 3);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT2 = (1U << 2);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT1 = (1U << 1);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT0 = (1U << 0);  ///< Port x configuration bits (y = 0..15)
    }

    /// OSPEEDR Register bits
    namespace ospeedr_bits {
        constexpr uint32_t OSPEEDR15 = (2 << 30);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR14 = (2 << 28);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR13 = (2 << 26);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR12 = (2 << 24);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR11 = (2 << 22);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR10 = (2 << 20);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR9 = (2 << 18);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR8 = (2 << 16);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR7 = (2 << 14);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR6 = (2 << 12);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR5 = (2 << 10);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR4 = (2 << 8);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR3 = (2 << 6);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR2 = (2 << 4);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR1 = (2 << 2);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR0 = (2 << 0);  ///< Port x configuration bits (y = 0..15)
    }

    /// PUPDR Register bits
    namespace pupdr_bits {
        constexpr uint32_t PUPDR15 = (2 << 30);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR14 = (2 << 28);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR13 = (2 << 26);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR12 = (2 << 24);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR11 = (2 << 22);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR10 = (2 << 20);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR9 = (2 << 18);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR8 = (2 << 16);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR7 = (2 << 14);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR6 = (2 << 12);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR5 = (2 << 10);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR4 = (2 << 8);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR3 = (2 << 6);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR2 = (2 << 4);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR1 = (2 << 2);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR0 = (2 << 0);  ///< Port x configuration bits (y = 0..15)
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t IDR15 = (1U << 15);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR14 = (1U << 14);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR13 = (1U << 13);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR12 = (1U << 12);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR11 = (1U << 11);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR10 = (1U << 10);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR9 = (1U << 9);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR8 = (1U << 8);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR7 = (1U << 7);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR6 = (1U << 6);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR5 = (1U << 5);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR4 = (1U << 4);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR3 = (1U << 3);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR2 = (1U << 2);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR1 = (1U << 1);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR0 = (1U << 0);  ///< Port input data (y = 0..15)
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t ODR15 = (1U << 15);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR14 = (1U << 14);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR13 = (1U << 13);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR12 = (1U << 12);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR11 = (1U << 11);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR10 = (1U << 10);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR9 = (1U << 9);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR8 = (1U << 8);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR7 = (1U << 7);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR6 = (1U << 6);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR5 = (1U << 5);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR4 = (1U << 4);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR3 = (1U << 3);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR2 = (1U << 2);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR1 = (1U << 1);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR0 = (1U << 0);  ///< Port output data (y = 0..15)
    }

    /// BSRR Register bits
    namespace bsrr_bits {
        constexpr uint32_t BR15 = (1U << 31);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR14 = (1U << 30);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR13 = (1U << 29);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR12 = (1U << 28);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR11 = (1U << 27);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR10 = (1U << 26);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR9 = (1U << 25);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR8 = (1U << 24);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR7 = (1U << 23);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR6 = (1U << 22);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR5 = (1U << 21);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR4 = (1U << 20);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR3 = (1U << 19);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR2 = (1U << 18);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR1 = (1U << 17);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR0 = (1U << 16);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS15 = (1U << 15);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS14 = (1U << 14);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS13 = (1U << 13);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS12 = (1U << 12);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS11 = (1U << 11);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS10 = (1U << 10);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS9 = (1U << 9);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS8 = (1U << 8);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS7 = (1U << 7);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS6 = (1U << 6);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS5 = (1U << 5);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS4 = (1U << 4);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS3 = (1U << 3);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS2 = (1U << 2);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS1 = (1U << 1);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS0 = (1U << 0);  ///< Port x set bit y (y= 0..15)
    }

    /// LCKR Register bits
    namespace lckr_bits {
        constexpr uint32_t LCKK = (1U << 16);  ///< Lok Key
        constexpr uint32_t LCK15 = (1U << 15);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK14 = (1U << 14);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK13 = (1U << 13);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK12 = (1U << 12);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK11 = (1U << 11);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK10 = (1U << 10);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK9 = (1U << 9);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK8 = (1U << 8);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK7 = (1U << 7);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK6 = (1U << 6);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK5 = (1U << 5);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK4 = (1U << 4);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK3 = (1U << 3);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK2 = (1U << 2);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK1 = (1U << 1);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK0 = (1U << 0);  ///< Port x lock bit y (y= 0..15)
    }

    /// AFRL Register bits
    namespace afrl_bits {
        constexpr uint32_t AFRL7 = (4 << 28);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL6 = (4 << 24);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL5 = (4 << 20);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL4 = (4 << 16);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL3 = (4 << 12);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL2 = (4 << 8);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL1 = (4 << 4);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL0 = (4 << 0);  ///< Alternate function selection for port x bit y (y = 0..7)
    }

    /// AFRH Register bits
    namespace afrh_bits {
        constexpr uint32_t AFRH15 = (4 << 28);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH14 = (4 << 24);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH13 = (4 << 20);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH12 = (4 << 16);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH11 = (4 << 12);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH10 = (4 << 8);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH9 = (4 << 4);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH8 = (4 << 0);  ///< Alternate function selection for port x bit y (y = 8..15)
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t BR0 = (1U << 0);  ///< Port x Reset bit y
        constexpr uint32_t BR1 = (1U << 1);  ///< Port x Reset bit y
        constexpr uint32_t BR2 = (1U << 2);  ///< Port x Reset bit y
        constexpr uint32_t BR3 = (1U << 3);  ///< Port x Reset bit y
        constexpr uint32_t BR4 = (1U << 4);  ///< Port x Reset bit y
        constexpr uint32_t BR5 = (1U << 5);  ///< Port x Reset bit y
        constexpr uint32_t BR6 = (1U << 6);  ///< Port x Reset bit y
        constexpr uint32_t BR7 = (1U << 7);  ///< Port x Reset bit y
        constexpr uint32_t BR8 = (1U << 8);  ///< Port x Reset bit y
        constexpr uint32_t BR9 = (1U << 9);  ///< Port x Reset bit y
        constexpr uint32_t BR10 = (1U << 10);  ///< Port x Reset bit y
        constexpr uint32_t BR11 = (1U << 11);  ///< Port x Reset bit y
        constexpr uint32_t BR12 = (1U << 12);  ///< Port x Reset bit y
        constexpr uint32_t BR13 = (1U << 13);  ///< Port x Reset bit y
        constexpr uint32_t BR14 = (1U << 14);  ///< Port x Reset bit y
        constexpr uint32_t BR15 = (1U << 15);  ///< Port x Reset bit y
    }

}

// ============================================================================
// TSC Peripheral
// ============================================================================

namespace tsc {
    /// Base addresses
    constexpr uint32_t TSC_BASE = 0x40024000;

    /// TSC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t IER;  ///< Offset: 0x04 - interrupt enable register
        volatile uint32_t ICR;  ///< Offset: 0x08 - interrupt clear register
        volatile uint32_t ISR;  ///< Offset: 0x0C - interrupt status register
        volatile uint32_t IOHCR;  ///< Offset: 0x10 - I/O hysteresis control register
        volatile uint32_t IOASCR;  ///< Offset: 0x18 - I/O analog switch control register
        volatile uint32_t IOSCR;  ///< Offset: 0x20 - I/O sampling control register
        volatile uint32_t IOCCR;  ///< Offset: 0x28 - I/O channel control register
        volatile uint32_t IOGCSR;  ///< Offset: 0x30 - I/O group control status register
        volatile uint32_t IOG1CR;  ///< Offset: 0x34 - I/O group x counter register
        volatile uint32_t IOG2CR;  ///< Offset: 0x38 - I/O group x counter register
        volatile uint32_t IOG3CR;  ///< Offset: 0x3C - I/O group x counter register
        volatile uint32_t IOG4CR;  ///< Offset: 0x40 - I/O group x counter register
        volatile uint32_t IOG5CR;  ///< Offset: 0x44 - I/O group x counter register
        volatile uint32_t IOG6CR;  ///< Offset: 0x48 - I/O group x counter register
        volatile uint32_t IOG7CR;  ///< Offset: 0x4C - I/O group x counter register
        volatile uint32_t IOG8CR;  ///< Offset: 0x50 - I/O group x counter register
    };

    /// Peripheral instances
    inline Registers* TSC = reinterpret_cast<Registers*>(TSC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t CTPH = (4 << 28);  ///< Charge transfer pulse high
        constexpr uint32_t CTPL = (4 << 24);  ///< Charge transfer pulse low
        constexpr uint32_t SSD = (7 << 17);  ///< Spread spectrum deviation
        constexpr uint32_t SSE = (1U << 16);  ///< Spread spectrum enable
        constexpr uint32_t SSPSC = (1U << 15);  ///< Spread spectrum prescaler
        constexpr uint32_t PGPSC = (3 << 12);  ///< pulse generator prescaler
        constexpr uint32_t MCV = (3 << 5);  ///< Max count value
        constexpr uint32_t IODEF = (1U << 4);  ///< I/O Default mode
        constexpr uint32_t SYNCPOL = (1U << 3);  ///< Synchronization pin polarity
        constexpr uint32_t AM = (1U << 2);  ///< Acquisition mode
        constexpr uint32_t START = (1U << 1);  ///< Start a new acquisition
        constexpr uint32_t TSCE = (1U << 0);  ///< Touch sensing controller enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t MCEIE = (1U << 1);  ///< Max count error interrupt enable
        constexpr uint32_t EOAIE = (1U << 0);  ///< End of acquisition interrupt enable
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t MCEIC = (1U << 1);  ///< Max count error interrupt clear
        constexpr uint32_t EOAIC = (1U << 0);  ///< End of acquisition interrupt clear
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t MCEF = (1U << 1);  ///< Max count error flag
        constexpr uint32_t EOAF = (1U << 0);  ///< End of acquisition flag
    }

    /// IOHCR Register bits
    namespace iohcr_bits {
        constexpr uint32_t G1_IO1 = (1U << 0);  ///< G1_IO1 Schmitt trigger hysteresis mode
        constexpr uint32_t G1_IO2 = (1U << 1);  ///< G1_IO2 Schmitt trigger hysteresis mode
        constexpr uint32_t G1_IO3 = (1U << 2);  ///< G1_IO3 Schmitt trigger hysteresis mode
        constexpr uint32_t G1_IO4 = (1U << 3);  ///< G1_IO4 Schmitt trigger hysteresis mode
        constexpr uint32_t G2_IO1 = (1U << 4);  ///< G2_IO1 Schmitt trigger hysteresis mode
        constexpr uint32_t G2_IO2 = (1U << 5);  ///< G2_IO2 Schmitt trigger hysteresis mode
        constexpr uint32_t G2_IO3 = (1U << 6);  ///< G2_IO3 Schmitt trigger hysteresis mode
        constexpr uint32_t G2_IO4 = (1U << 7);  ///< G2_IO4 Schmitt trigger hysteresis mode
        constexpr uint32_t G3_IO1 = (1U << 8);  ///< G3_IO1 Schmitt trigger hysteresis mode
        constexpr uint32_t G3_IO2 = (1U << 9);  ///< G3_IO2 Schmitt trigger hysteresis mode
        constexpr uint32_t G3_IO3 = (1U << 10);  ///< G3_IO3 Schmitt trigger hysteresis mode
        constexpr uint32_t G3_IO4 = (1U << 11);  ///< G3_IO4 Schmitt trigger hysteresis mode
        constexpr uint32_t G4_IO1 = (1U << 12);  ///< G4_IO1 Schmitt trigger hysteresis mode
        constexpr uint32_t G4_IO2 = (1U << 13);  ///< G4_IO2 Schmitt trigger hysteresis mode
        constexpr uint32_t G4_IO3 = (1U << 14);  ///< G4_IO3 Schmitt trigger hysteresis mode
        constexpr uint32_t G4_IO4 = (1U << 15);  ///< G4_IO4 Schmitt trigger hysteresis mode
        constexpr uint32_t G5_IO1 = (1U << 16);  ///< G5_IO1 Schmitt trigger hysteresis mode
        constexpr uint32_t G5_IO2 = (1U << 17);  ///< G5_IO2 Schmitt trigger hysteresis mode
        constexpr uint32_t G5_IO3 = (1U << 18);  ///< G5_IO3 Schmitt trigger hysteresis mode
        constexpr uint32_t G5_IO4 = (1U << 19);  ///< G5_IO4 Schmitt trigger hysteresis mode
        constexpr uint32_t G6_IO1 = (1U << 20);  ///< G6_IO1 Schmitt trigger hysteresis mode
        constexpr uint32_t G6_IO2 = (1U << 21);  ///< G6_IO2 Schmitt trigger hysteresis mode
        constexpr uint32_t G6_IO3 = (1U << 22);  ///< G6_IO3 Schmitt trigger hysteresis mode
        constexpr uint32_t G6_IO4 = (1U << 23);  ///< G6_IO4 Schmitt trigger hysteresis mode
        constexpr uint32_t G7_IO1 = (1U << 24);  ///< G7_IO1 Schmitt trigger hysteresis mode
        constexpr uint32_t G7_IO2 = (1U << 25);  ///< G7_IO2 Schmitt trigger hysteresis mode
        constexpr uint32_t G7_IO3 = (1U << 26);  ///< G7_IO3 Schmitt trigger hysteresis mode
        constexpr uint32_t G7_IO4 = (1U << 27);  ///< G7_IO4 Schmitt trigger hysteresis mode
        constexpr uint32_t G8_IO1 = (1U << 28);  ///< G8_IO1 Schmitt trigger hysteresis mode
        constexpr uint32_t G8_IO2 = (1U << 29);  ///< G8_IO2 Schmitt trigger hysteresis mode
        constexpr uint32_t G8_IO3 = (1U << 30);  ///< G8_IO3 Schmitt trigger hysteresis mode
        constexpr uint32_t G8_IO4 = (1U << 31);  ///< G8_IO4 Schmitt trigger hysteresis mode
    }

    /// IOASCR Register bits
    namespace ioascr_bits {
        constexpr uint32_t G1_IO1 = (1U << 0);  ///< G1_IO1 analog switch enable
        constexpr uint32_t G1_IO2 = (1U << 1);  ///< G1_IO2 analog switch enable
        constexpr uint32_t G1_IO3 = (1U << 2);  ///< G1_IO3 analog switch enable
        constexpr uint32_t G1_IO4 = (1U << 3);  ///< G1_IO4 analog switch enable
        constexpr uint32_t G2_IO1 = (1U << 4);  ///< G2_IO1 analog switch enable
        constexpr uint32_t G2_IO2 = (1U << 5);  ///< G2_IO2 analog switch enable
        constexpr uint32_t G2_IO3 = (1U << 6);  ///< G2_IO3 analog switch enable
        constexpr uint32_t G2_IO4 = (1U << 7);  ///< G2_IO4 analog switch enable
        constexpr uint32_t G3_IO1 = (1U << 8);  ///< G3_IO1 analog switch enable
        constexpr uint32_t G3_IO2 = (1U << 9);  ///< G3_IO2 analog switch enable
        constexpr uint32_t G3_IO3 = (1U << 10);  ///< G3_IO3 analog switch enable
        constexpr uint32_t G3_IO4 = (1U << 11);  ///< G3_IO4 analog switch enable
        constexpr uint32_t G4_IO1 = (1U << 12);  ///< G4_IO1 analog switch enable
        constexpr uint32_t G4_IO2 = (1U << 13);  ///< G4_IO2 analog switch enable
        constexpr uint32_t G4_IO3 = (1U << 14);  ///< G4_IO3 analog switch enable
        constexpr uint32_t G4_IO4 = (1U << 15);  ///< G4_IO4 analog switch enable
        constexpr uint32_t G5_IO1 = (1U << 16);  ///< G5_IO1 analog switch enable
        constexpr uint32_t G5_IO2 = (1U << 17);  ///< G5_IO2 analog switch enable
        constexpr uint32_t G5_IO3 = (1U << 18);  ///< G5_IO3 analog switch enable
        constexpr uint32_t G5_IO4 = (1U << 19);  ///< G5_IO4 analog switch enable
        constexpr uint32_t G6_IO1 = (1U << 20);  ///< G6_IO1 analog switch enable
        constexpr uint32_t G6_IO2 = (1U << 21);  ///< G6_IO2 analog switch enable
        constexpr uint32_t G6_IO3 = (1U << 22);  ///< G6_IO3 analog switch enable
        constexpr uint32_t G6_IO4 = (1U << 23);  ///< G6_IO4 analog switch enable
        constexpr uint32_t G7_IO1 = (1U << 24);  ///< G7_IO1 analog switch enable
        constexpr uint32_t G7_IO2 = (1U << 25);  ///< G7_IO2 analog switch enable
        constexpr uint32_t G7_IO3 = (1U << 26);  ///< G7_IO3 analog switch enable
        constexpr uint32_t G7_IO4 = (1U << 27);  ///< G7_IO4 analog switch enable
        constexpr uint32_t G8_IO1 = (1U << 28);  ///< G8_IO1 analog switch enable
        constexpr uint32_t G8_IO2 = (1U << 29);  ///< G8_IO2 analog switch enable
        constexpr uint32_t G8_IO3 = (1U << 30);  ///< G8_IO3 analog switch enable
        constexpr uint32_t G8_IO4 = (1U << 31);  ///< G8_IO4 analog switch enable
    }

    /// IOSCR Register bits
    namespace ioscr_bits {
        constexpr uint32_t G1_IO1 = (1U << 0);  ///< G1_IO1 sampling mode
        constexpr uint32_t G1_IO2 = (1U << 1);  ///< G1_IO2 sampling mode
        constexpr uint32_t G1_IO3 = (1U << 2);  ///< G1_IO3 sampling mode
        constexpr uint32_t G1_IO4 = (1U << 3);  ///< G1_IO4 sampling mode
        constexpr uint32_t G2_IO1 = (1U << 4);  ///< G2_IO1 sampling mode
        constexpr uint32_t G2_IO2 = (1U << 5);  ///< G2_IO2 sampling mode
        constexpr uint32_t G2_IO3 = (1U << 6);  ///< G2_IO3 sampling mode
        constexpr uint32_t G2_IO4 = (1U << 7);  ///< G2_IO4 sampling mode
        constexpr uint32_t G3_IO1 = (1U << 8);  ///< G3_IO1 sampling mode
        constexpr uint32_t G3_IO2 = (1U << 9);  ///< G3_IO2 sampling mode
        constexpr uint32_t G3_IO3 = (1U << 10);  ///< G3_IO3 sampling mode
        constexpr uint32_t G3_IO4 = (1U << 11);  ///< G3_IO4 sampling mode
        constexpr uint32_t G4_IO1 = (1U << 12);  ///< G4_IO1 sampling mode
        constexpr uint32_t G4_IO2 = (1U << 13);  ///< G4_IO2 sampling mode
        constexpr uint32_t G4_IO3 = (1U << 14);  ///< G4_IO3 sampling mode
        constexpr uint32_t G4_IO4 = (1U << 15);  ///< G4_IO4 sampling mode
        constexpr uint32_t G5_IO1 = (1U << 16);  ///< G5_IO1 sampling mode
        constexpr uint32_t G5_IO2 = (1U << 17);  ///< G5_IO2 sampling mode
        constexpr uint32_t G5_IO3 = (1U << 18);  ///< G5_IO3 sampling mode
        constexpr uint32_t G5_IO4 = (1U << 19);  ///< G5_IO4 sampling mode
        constexpr uint32_t G6_IO1 = (1U << 20);  ///< G6_IO1 sampling mode
        constexpr uint32_t G6_IO2 = (1U << 21);  ///< G6_IO2 sampling mode
        constexpr uint32_t G6_IO3 = (1U << 22);  ///< G6_IO3 sampling mode
        constexpr uint32_t G6_IO4 = (1U << 23);  ///< G6_IO4 sampling mode
        constexpr uint32_t G7_IO1 = (1U << 24);  ///< G7_IO1 sampling mode
        constexpr uint32_t G7_IO2 = (1U << 25);  ///< G7_IO2 sampling mode
        constexpr uint32_t G7_IO3 = (1U << 26);  ///< G7_IO3 sampling mode
        constexpr uint32_t G7_IO4 = (1U << 27);  ///< G7_IO4 sampling mode
        constexpr uint32_t G8_IO1 = (1U << 28);  ///< G8_IO1 sampling mode
        constexpr uint32_t G8_IO2 = (1U << 29);  ///< G8_IO2 sampling mode
        constexpr uint32_t G8_IO3 = (1U << 30);  ///< G8_IO3 sampling mode
        constexpr uint32_t G8_IO4 = (1U << 31);  ///< G8_IO4 sampling mode
    }

    /// IOCCR Register bits
    namespace ioccr_bits {
        constexpr uint32_t G1_IO1 = (1U << 0);  ///< G1_IO1 channel mode
        constexpr uint32_t G1_IO2 = (1U << 1);  ///< G1_IO2 channel mode
        constexpr uint32_t G1_IO3 = (1U << 2);  ///< G1_IO3 channel mode
        constexpr uint32_t G1_IO4 = (1U << 3);  ///< G1_IO4 channel mode
        constexpr uint32_t G2_IO1 = (1U << 4);  ///< G2_IO1 channel mode
        constexpr uint32_t G2_IO2 = (1U << 5);  ///< G2_IO2 channel mode
        constexpr uint32_t G2_IO3 = (1U << 6);  ///< G2_IO3 channel mode
        constexpr uint32_t G2_IO4 = (1U << 7);  ///< G2_IO4 channel mode
        constexpr uint32_t G3_IO1 = (1U << 8);  ///< G3_IO1 channel mode
        constexpr uint32_t G3_IO2 = (1U << 9);  ///< G3_IO2 channel mode
        constexpr uint32_t G3_IO3 = (1U << 10);  ///< G3_IO3 channel mode
        constexpr uint32_t G3_IO4 = (1U << 11);  ///< G3_IO4 channel mode
        constexpr uint32_t G4_IO1 = (1U << 12);  ///< G4_IO1 channel mode
        constexpr uint32_t G4_IO2 = (1U << 13);  ///< G4_IO2 channel mode
        constexpr uint32_t G4_IO3 = (1U << 14);  ///< G4_IO3 channel mode
        constexpr uint32_t G4_IO4 = (1U << 15);  ///< G4_IO4 channel mode
        constexpr uint32_t G5_IO1 = (1U << 16);  ///< G5_IO1 channel mode
        constexpr uint32_t G5_IO2 = (1U << 17);  ///< G5_IO2 channel mode
        constexpr uint32_t G5_IO3 = (1U << 18);  ///< G5_IO3 channel mode
        constexpr uint32_t G5_IO4 = (1U << 19);  ///< G5_IO4 channel mode
        constexpr uint32_t G6_IO1 = (1U << 20);  ///< G6_IO1 channel mode
        constexpr uint32_t G6_IO2 = (1U << 21);  ///< G6_IO2 channel mode
        constexpr uint32_t G6_IO3 = (1U << 22);  ///< G6_IO3 channel mode
        constexpr uint32_t G6_IO4 = (1U << 23);  ///< G6_IO4 channel mode
        constexpr uint32_t G7_IO1 = (1U << 24);  ///< G7_IO1 channel mode
        constexpr uint32_t G7_IO2 = (1U << 25);  ///< G7_IO2 channel mode
        constexpr uint32_t G7_IO3 = (1U << 26);  ///< G7_IO3 channel mode
        constexpr uint32_t G7_IO4 = (1U << 27);  ///< G7_IO4 channel mode
        constexpr uint32_t G8_IO1 = (1U << 28);  ///< G8_IO1 channel mode
        constexpr uint32_t G8_IO2 = (1U << 29);  ///< G8_IO2 channel mode
        constexpr uint32_t G8_IO3 = (1U << 30);  ///< G8_IO3 channel mode
        constexpr uint32_t G8_IO4 = (1U << 31);  ///< G8_IO4 channel mode
    }

    /// IOGCSR Register bits
    namespace iogcsr_bits {
        constexpr uint32_t G8S = (1U << 23);  ///< Analog I/O group x status
        constexpr uint32_t G7S = (1U << 22);  ///< Analog I/O group x status
        constexpr uint32_t G6S = (1U << 21);  ///< Analog I/O group x status
        constexpr uint32_t G5S = (1U << 20);  ///< Analog I/O group x status
        constexpr uint32_t G4S = (1U << 19);  ///< Analog I/O group x status
        constexpr uint32_t G3S = (1U << 18);  ///< Analog I/O group x status
        constexpr uint32_t G2S = (1U << 17);  ///< Analog I/O group x status
        constexpr uint32_t G1S = (1U << 16);  ///< Analog I/O group x status
        constexpr uint32_t G8E = (1U << 7);  ///< Analog I/O group x enable
        constexpr uint32_t G7E = (1U << 6);  ///< Analog I/O group x enable
        constexpr uint32_t G6E = (1U << 5);  ///< Analog I/O group x enable
        constexpr uint32_t G5E = (1U << 4);  ///< Analog I/O group x enable
        constexpr uint32_t G4E = (1U << 3);  ///< Analog I/O group x enable
        constexpr uint32_t G3E = (1U << 2);  ///< Analog I/O group x enable
        constexpr uint32_t G2E = (1U << 1);  ///< Analog I/O group x enable
        constexpr uint32_t G1E = (1U << 0);  ///< Analog I/O group x enable
    }

    /// IOG1CR Register bits
    namespace iog1cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG2CR Register bits
    namespace iog2cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG3CR Register bits
    namespace iog3cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG4CR Register bits
    namespace iog4cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG5CR Register bits
    namespace iog5cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG6CR Register bits
    namespace iog6cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG7CR Register bits
    namespace iog7cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG8CR Register bits
    namespace iog8cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40023000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t DR;  ///< Offset: 0x00 - Data register
        volatile uint32_t IDR;  ///< Offset: 0x04 - Independent data register
        volatile uint32_t CR;  ///< Offset: 0x08 - Control register
        volatile uint32_t INIT;  ///< Offset: 0x10 - Initial CRC value
        volatile uint32_t POL;  ///< Offset: 0x14 - CRC polynomial
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (32 << 0);  ///< Data register bits
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t IDR = (8 << 0);  ///< General-purpose 8-bit data register bits
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RESET = (1U << 0);  ///< reset bit
        constexpr uint32_t POLYSIZE = (2 << 3);  ///< Polynomial size
        constexpr uint32_t REV_IN = (2 << 5);  ///< Reverse input data
        constexpr uint32_t REV_OUT = (1U << 7);  ///< Reverse output data
    }

    /// INIT Register bits
    namespace init_bits {
        constexpr uint32_t INIT = (32 << 0);  ///< Programmable initial CRC value
    }

    /// POL Register bits
    namespace pol_bits {
        constexpr uint32_t POL = (32 << 0);  ///< Programmable polynomial
    }

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t Flash_BASE = 0x40022000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t ACR;  ///< Offset: 0x00 - Flash access control register
        volatile uint32_t KEYR;  ///< Offset: 0x04 - Flash key register
        volatile uint32_t OPTKEYR;  ///< Offset: 0x08 - Flash option key register
        volatile uint32_t SR;  ///< Offset: 0x0C - Flash status register
        volatile uint32_t CR;  ///< Offset: 0x10 - Flash control register
        volatile uint32_t AR;  ///< Offset: 0x14 - Flash address register
        volatile uint32_t OBR;  ///< Offset: 0x1C - Option byte register
        volatile uint32_t WRPR;  ///< Offset: 0x20 - Write protection register
    };

    /// Peripheral instances
    inline Registers* Flash = reinterpret_cast<Registers*>(Flash_BASE);

    // Bit definitions
    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t LATENCY = (3 << 0);  ///< LATENCY
        constexpr uint32_t PRFTBE = (1U << 4);  ///< PRFTBE
        constexpr uint32_t PRFTBS = (1U << 5);  ///< PRFTBS
    }

    /// KEYR Register bits
    namespace keyr_bits {
        constexpr uint32_t FKEYR = (32 << 0);  ///< Flash Key
    }

    /// OPTKEYR Register bits
    namespace optkeyr_bits {
        constexpr uint32_t OPTKEYR = (32 << 0);  ///< Option byte key
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t EOP = (1U << 5);  ///< End of operation
        constexpr uint32_t WRPRT = (1U << 4);  ///< Write protection error
        constexpr uint32_t PGERR = (1U << 2);  ///< Programming error
        constexpr uint32_t BSY = (1U << 0);  ///< Busy
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t FORCE_OPTLOAD = (1U << 13);  ///< Force option byte loading
        constexpr uint32_t EOPIE = (1U << 12);  ///< End of operation interrupt enable
        constexpr uint32_t ERRIE = (1U << 10);  ///< Error interrupt enable
        constexpr uint32_t OPTWRE = (1U << 9);  ///< Option bytes write enable
        constexpr uint32_t LOCK = (1U << 7);  ///< Lock
        constexpr uint32_t STRT = (1U << 6);  ///< Start
        constexpr uint32_t OPTER = (1U << 5);  ///< Option byte erase
        constexpr uint32_t OPTPG = (1U << 4);  ///< Option byte programming
        constexpr uint32_t MER = (1U << 2);  ///< Mass erase
        constexpr uint32_t PER = (1U << 1);  ///< Page erase
        constexpr uint32_t PG = (1U << 0);  ///< Programming
    }

    /// AR Register bits
    namespace ar_bits {
        constexpr uint32_t FAR = (32 << 0);  ///< Flash address
    }

    /// OBR Register bits
    namespace obr_bits {
        constexpr uint32_t OPTERR = (1U << 0);  ///< Option byte error
        constexpr uint32_t LEVEL1_PROT = (1U << 1);  ///< Level 1 protection status
        constexpr uint32_t LEVEL2_PROT = (1U << 2);  ///< Level 2 protection status
        constexpr uint32_t WDG_SW = (1U << 8);  ///< WDG_SW
        constexpr uint32_t nRST_STOP = (1U << 9);  ///< nRST_STOP
        constexpr uint32_t nRST_STDBY = (1U << 10);  ///< nRST_STDBY
        constexpr uint32_t BOOT1 = (1U << 12);  ///< BOOT1
        constexpr uint32_t VDDA_MONITOR = (1U << 13);  ///< VDDA_MONITOR
        constexpr uint32_t SRAM_PARITY_CHECK = (1U << 14);  ///< SRAM_PARITY_CHECK
        constexpr uint32_t Data0 = (8 << 16);  ///< Data0
        constexpr uint32_t Data1 = (8 << 24);  ///< Data1
    }

    /// WRPR Register bits
    namespace wrpr_bits {
        constexpr uint32_t WRP = (32 << 0);  ///< Write protect
    }

}

// ============================================================================
// RCC Peripheral
// ============================================================================

namespace rcc {
    /// Base addresses
    constexpr uint32_t RCC_BASE = 0x40021000;

    /// RCC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Clock control register
        volatile uint32_t CFGR;  ///< Offset: 0x04 - Clock configuration register (RCC_CFGR)
        volatile uint32_t CIR;  ///< Offset: 0x08 - Clock interrupt register (RCC_CIR)
        volatile uint32_t APB2RSTR;  ///< Offset: 0x0C - APB2 peripheral reset register (RCC_APB2RSTR)
        volatile uint32_t APB1RSTR;  ///< Offset: 0x10 - APB1 peripheral reset register (RCC_APB1RSTR)
        volatile uint32_t AHBENR;  ///< Offset: 0x14 - AHB Peripheral Clock enable register (RCC_AHBENR)
        volatile uint32_t APB2ENR;  ///< Offset: 0x18 - APB2 peripheral clock enable register (RCC_APB2ENR)
        volatile uint32_t APB1ENR;  ///< Offset: 0x1C - APB1 peripheral clock enable register (RCC_APB1ENR)
        volatile uint32_t BDCR;  ///< Offset: 0x20 - Backup domain control register (RCC_BDCR)
        volatile uint32_t CSR;  ///< Offset: 0x24 - Control/status register (RCC_CSR)
        volatile uint32_t AHBRSTR;  ///< Offset: 0x28 - AHB peripheral reset register
        volatile uint32_t CFGR2;  ///< Offset: 0x2C - Clock configuration register 2
        volatile uint32_t CFGR3;  ///< Offset: 0x30 - Clock configuration register 3
    };

    /// Peripheral instances
    inline Registers* RCC = reinterpret_cast<Registers*>(RCC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t HSION = (1U << 0);  ///< Internal High Speed clock enable
        constexpr uint32_t HSIRDY = (1U << 1);  ///< Internal High Speed clock ready flag
        constexpr uint32_t HSITRIM = (5 << 3);  ///< Internal High Speed clock trimming
        constexpr uint32_t HSICAL = (8 << 8);  ///< Internal High Speed clock Calibration
        constexpr uint32_t HSEON = (1U << 16);  ///< External High Speed clock enable
        constexpr uint32_t HSERDY = (1U << 17);  ///< External High Speed clock ready flag
        constexpr uint32_t HSEBYP = (1U << 18);  ///< External High Speed clock Bypass
        constexpr uint32_t CSSON = (1U << 19);  ///< Clock Security System enable
        constexpr uint32_t PLLON = (1U << 24);  ///< PLL enable
        constexpr uint32_t PLLRDY = (1U << 25);  ///< PLL clock ready flag
    }

    /// CFGR Register bits
    namespace cfgr_bits {
        constexpr uint32_t SW = (2 << 0);  ///< System clock Switch
        constexpr uint32_t SWS = (2 << 2);  ///< System Clock Switch Status
        constexpr uint32_t HPRE = (4 << 4);  ///< AHB prescaler
        constexpr uint32_t PPRE1 = (3 << 8);  ///< APB Low speed prescaler (APB1)
        constexpr uint32_t PPRE2 = (3 << 11);  ///< APB high speed prescaler (APB2)
        constexpr uint32_t PLLSRC = (2 << 15);  ///< PLL entry clock source
        constexpr uint32_t PLLXTPRE = (1U << 17);  ///< HSE divider for PLL entry
        constexpr uint32_t PLLMUL = (4 << 18);  ///< PLL Multiplication Factor
        constexpr uint32_t USBPRES = (1U << 22);  ///< USB prescaler
        constexpr uint32_t MCO = (3 << 24);  ///< Microcontroller clock output
        constexpr uint32_t MCOF = (1U << 28);  ///< Microcontroller Clock Output Flag
        constexpr uint32_t I2SSRC = (1U << 23);  ///< I2S external clock source selection
    }

    /// CIR Register bits
    namespace cir_bits {
        constexpr uint32_t LSIRDYF = (1U << 0);  ///< LSI Ready Interrupt flag
        constexpr uint32_t LSERDYF = (1U << 1);  ///< LSE Ready Interrupt flag
        constexpr uint32_t HSIRDYF = (1U << 2);  ///< HSI Ready Interrupt flag
        constexpr uint32_t HSERDYF = (1U << 3);  ///< HSE Ready Interrupt flag
        constexpr uint32_t PLLRDYF = (1U << 4);  ///< PLL Ready Interrupt flag
        constexpr uint32_t CSSF = (1U << 7);  ///< Clock Security System Interrupt flag
        constexpr uint32_t LSIRDYIE = (1U << 8);  ///< LSI Ready Interrupt Enable
        constexpr uint32_t LSERDYIE = (1U << 9);  ///< LSE Ready Interrupt Enable
        constexpr uint32_t HSIRDYIE = (1U << 10);  ///< HSI Ready Interrupt Enable
        constexpr uint32_t HSERDYIE = (1U << 11);  ///< HSE Ready Interrupt Enable
        constexpr uint32_t PLLRDYIE = (1U << 12);  ///< PLL Ready Interrupt Enable
        constexpr uint32_t LSIRDYC = (1U << 16);  ///< LSI Ready Interrupt Clear
        constexpr uint32_t LSERDYC = (1U << 17);  ///< LSE Ready Interrupt Clear
        constexpr uint32_t HSIRDYC = (1U << 18);  ///< HSI Ready Interrupt Clear
        constexpr uint32_t HSERDYC = (1U << 19);  ///< HSE Ready Interrupt Clear
        constexpr uint32_t PLLRDYC = (1U << 20);  ///< PLL Ready Interrupt Clear
        constexpr uint32_t CSSC = (1U << 23);  ///< Clock security system interrupt clear
    }

    /// APB2RSTR Register bits
    namespace apb2rstr_bits {
        constexpr uint32_t SYSCFGRST = (1U << 0);  ///< SYSCFG and COMP reset
        constexpr uint32_t TIM1RST = (1U << 11);  ///< TIM1 timer reset
        constexpr uint32_t SPI1RST = (1U << 12);  ///< SPI 1 reset
        constexpr uint32_t TIM8RST = (1U << 13);  ///< TIM8 timer reset
        constexpr uint32_t USART1RST = (1U << 14);  ///< USART1 reset
        constexpr uint32_t TIM15RST = (1U << 16);  ///< TIM15 timer reset
        constexpr uint32_t TIM16RST = (1U << 17);  ///< TIM16 timer reset
        constexpr uint32_t TIM17RST = (1U << 18);  ///< TIM17 timer reset
    }

    /// APB1RSTR Register bits
    namespace apb1rstr_bits {
        constexpr uint32_t TIM2RST = (1U << 0);  ///< Timer 2 reset
        constexpr uint32_t TIM3RST = (1U << 1);  ///< Timer 3 reset
        constexpr uint32_t TIM4RST = (1U << 2);  ///< Timer 14 reset
        constexpr uint32_t TIM6RST = (1U << 4);  ///< Timer 6 reset
        constexpr uint32_t TIM7RST = (1U << 5);  ///< Timer 7 reset
        constexpr uint32_t WWDGRST = (1U << 11);  ///< Window watchdog reset
        constexpr uint32_t SPI2RST = (1U << 14);  ///< SPI2 reset
        constexpr uint32_t SPI3RST = (1U << 15);  ///< SPI3 reset
        constexpr uint32_t USART2RST = (1U << 17);  ///< USART 2 reset
        constexpr uint32_t USART3RST = (1U << 18);  ///< USART3 reset
        constexpr uint32_t UART4RST = (1U << 19);  ///< UART 4 reset
        constexpr uint32_t UART5RST = (1U << 20);  ///< UART 5 reset
        constexpr uint32_t I2C1RST = (1U << 21);  ///< I2C1 reset
        constexpr uint32_t I2C2RST = (1U << 22);  ///< I2C2 reset
        constexpr uint32_t USBRST = (1U << 23);  ///< USB reset
        constexpr uint32_t CANRST = (1U << 25);  ///< CAN reset
        constexpr uint32_t PWRRST = (1U << 28);  ///< Power interface reset
        constexpr uint32_t DACRST = (1U << 29);  ///< DAC interface reset
        constexpr uint32_t I2C3RST = (1U << 30);  ///< I2C3 reset
    }

    /// AHBENR Register bits
    namespace ahbenr_bits {
        constexpr uint32_t DMAEN = (1U << 0);  ///< DMA1 clock enable
        constexpr uint32_t DMA2EN = (1U << 1);  ///< DMA2 clock enable
        constexpr uint32_t SRAMEN = (1U << 2);  ///< SRAM interface clock enable
        constexpr uint32_t FLITFEN = (1U << 4);  ///< FLITF clock enable
        constexpr uint32_t FMCEN = (1U << 5);  ///< FMC clock enable
        constexpr uint32_t CRCEN = (1U << 6);  ///< CRC clock enable
        constexpr uint32_t IOPHEN = (1U << 16);  ///< IO port H clock enable
        constexpr uint32_t IOPAEN = (1U << 17);  ///< I/O port A clock enable
        constexpr uint32_t IOPBEN = (1U << 18);  ///< I/O port B clock enable
        constexpr uint32_t IOPCEN = (1U << 19);  ///< I/O port C clock enable
        constexpr uint32_t IOPDEN = (1U << 20);  ///< I/O port D clock enable
        constexpr uint32_t IOPEEN = (1U << 21);  ///< I/O port E clock enable
        constexpr uint32_t IOPFEN = (1U << 22);  ///< I/O port F clock enable
        constexpr uint32_t IOPGEN = (1U << 23);  ///< I/O port G clock enable
        constexpr uint32_t TSCEN = (1U << 24);  ///< Touch sensing controller clock enable
        constexpr uint32_t ADC12EN = (1U << 28);  ///< ADC1 and ADC2 clock enable
        constexpr uint32_t ADC34EN = (1U << 29);  ///< ADC3 and ADC4 clock enable
    }

    /// APB2ENR Register bits
    namespace apb2enr_bits {
        constexpr uint32_t SYSCFGEN = (1U << 0);  ///< SYSCFG clock enable
        constexpr uint32_t TIM1EN = (1U << 11);  ///< TIM1 Timer clock enable
        constexpr uint32_t SPI1EN = (1U << 12);  ///< SPI 1 clock enable
        constexpr uint32_t TIM8EN = (1U << 13);  ///< TIM8 Timer clock enable
        constexpr uint32_t USART1EN = (1U << 14);  ///< USART1 clock enable
        constexpr uint32_t TIM15EN = (1U << 16);  ///< TIM15 timer clock enable
        constexpr uint32_t TIM16EN = (1U << 17);  ///< TIM16 timer clock enable
        constexpr uint32_t TIM17EN = (1U << 18);  ///< TIM17 timer clock enable
    }

    /// APB1ENR Register bits
    namespace apb1enr_bits {
        constexpr uint32_t TIM2EN = (1U << 0);  ///< Timer 2 clock enable
        constexpr uint32_t TIM3EN = (1U << 1);  ///< Timer 3 clock enable
        constexpr uint32_t TIM4EN = (1U << 2);  ///< Timer 4 clock enable
        constexpr uint32_t TIM6EN = (1U << 4);  ///< Timer 6 clock enable
        constexpr uint32_t TIM7EN = (1U << 5);  ///< Timer 7 clock enable
        constexpr uint32_t WWDGEN = (1U << 11);  ///< Window watchdog clock enable
        constexpr uint32_t SPI2EN = (1U << 14);  ///< SPI 2 clock enable
        constexpr uint32_t SPI3EN = (1U << 15);  ///< SPI 3 clock enable
        constexpr uint32_t USART2EN = (1U << 17);  ///< USART 2 clock enable
        constexpr uint32_t USART3EN = (1U << 18);  ///< USART 3 clock enable
        constexpr uint32_t USART4EN = (1U << 19);  ///< USART 4 clock enable
        constexpr uint32_t USART5EN = (1U << 20);  ///< USART 5 clock enable
        constexpr uint32_t I2C1EN = (1U << 21);  ///< I2C 1 clock enable
        constexpr uint32_t I2C2EN = (1U << 22);  ///< I2C 2 clock enable
        constexpr uint32_t USBEN = (1U << 23);  ///< USB clock enable
        constexpr uint32_t CANEN = (1U << 25);  ///< CAN clock enable
        constexpr uint32_t DAC2EN = (1U << 26);  ///< DAC2 interface clock enable
        constexpr uint32_t PWREN = (1U << 28);  ///< Power interface clock enable
        constexpr uint32_t DACEN = (1U << 29);  ///< DAC interface clock enable
        constexpr uint32_t I2C3EN = (1U << 30);  ///< I2C3 clock enable
    }

    /// BDCR Register bits
    namespace bdcr_bits {
        constexpr uint32_t LSEON = (1U << 0);  ///< External Low Speed oscillator enable
        constexpr uint32_t LSERDY = (1U << 1);  ///< External Low Speed oscillator ready
        constexpr uint32_t LSEBYP = (1U << 2);  ///< External Low Speed oscillator bypass
        constexpr uint32_t LSEDRV = (2 << 3);  ///< LSE oscillator drive capability
        constexpr uint32_t RTCSEL = (2 << 8);  ///< RTC clock source selection
        constexpr uint32_t RTCEN = (1U << 15);  ///< RTC clock enable
        constexpr uint32_t BDRST = (1U << 16);  ///< Backup domain software reset
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t LSION = (1U << 0);  ///< Internal low speed oscillator enable
        constexpr uint32_t LSIRDY = (1U << 1);  ///< Internal low speed oscillator ready
        constexpr uint32_t RMVF = (1U << 24);  ///< Remove reset flag
        constexpr uint32_t OBLRSTF = (1U << 25);  ///< Option byte loader reset flag
        constexpr uint32_t PINRSTF = (1U << 26);  ///< PIN reset flag
        constexpr uint32_t PORRSTF = (1U << 27);  ///< POR/PDR reset flag
        constexpr uint32_t SFTRSTF = (1U << 28);  ///< Software reset flag
        constexpr uint32_t IWDGRSTF = (1U << 29);  ///< Independent watchdog reset flag
        constexpr uint32_t WWDGRSTF = (1U << 30);  ///< Window watchdog reset flag
        constexpr uint32_t LPWRRSTF = (1U << 31);  ///< Low-power reset flag
    }

    /// AHBRSTR Register bits
    namespace ahbrstr_bits {
        constexpr uint32_t FMCRST = (1U << 5);  ///< FMC reset
        constexpr uint32_t IOPHRST = (1U << 16);  ///< I/O port H reset
        constexpr uint32_t IOPARST = (1U << 17);  ///< I/O port A reset
        constexpr uint32_t IOPBRST = (1U << 18);  ///< I/O port B reset
        constexpr uint32_t IOPCRST = (1U << 19);  ///< I/O port C reset
        constexpr uint32_t IOPDRST = (1U << 20);  ///< I/O port D reset
        constexpr uint32_t IOPERST = (1U << 21);  ///< I/O port E reset
        constexpr uint32_t IOPFRST = (1U << 22);  ///< I/O port F reset
        constexpr uint32_t IOPGRST = (1U << 23);  ///< Touch sensing controller reset
        constexpr uint32_t TSCRST = (1U << 24);  ///< Touch sensing controller reset
        constexpr uint32_t ADC12RST = (1U << 28);  ///< ADC1 and ADC2 reset
        constexpr uint32_t ADC34RST = (1U << 29);  ///< ADC3 and ADC4 reset
    }

    /// CFGR2 Register bits
    namespace cfgr2_bits {
        constexpr uint32_t PREDIV = (4 << 0);  ///< PREDIV division factor
        constexpr uint32_t ADC12PRES = (5 << 4);  ///< ADC1 and ADC2 prescaler
        constexpr uint32_t ADC34PRES = (5 << 9);  ///< ADC3 and ADC4 prescaler
    }

    /// CFGR3 Register bits
    namespace cfgr3_bits {
        constexpr uint32_t USART1SW = (2 << 0);  ///< USART1 clock source selection
        constexpr uint32_t I2C1SW = (1U << 4);  ///< I2C1 clock source selection
        constexpr uint32_t I2C2SW = (1U << 5);  ///< I2C2 clock source selection
        constexpr uint32_t I2C3SW = (1U << 6);  ///< I2C3 clock source selection
        constexpr uint32_t USART2SW = (2 << 16);  ///< USART2 clock source selection
        constexpr uint32_t USART3SW = (2 << 18);  ///< USART3 clock source selection
        constexpr uint32_t TIM1SW = (1U << 8);  ///< Timer1 clock source selection
        constexpr uint32_t TIM8SW = (1U << 9);  ///< Timer8 clock source selection
        constexpr uint32_t UART4SW = (2 << 20);  ///< UART4 clock source selection
        constexpr uint32_t UART5SW = (2 << 22);  ///< UART5 clock source selection
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMA1_BASE = 0x40020000;
    constexpr uint32_t DMA2_BASE = 0x40020400;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t ISR;  ///< Offset: 0x00 - DMA interrupt status register (DMA_ISR)
        volatile uint32_t IFCR;  ///< Offset: 0x04 - DMA interrupt flag clear register (DMA_IFCR)
        volatile uint32_t CCR1;  ///< Offset: 0x08 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR1;  ///< Offset: 0x0C - DMA channel 1 number of data register
        volatile uint32_t CPAR1;  ///< Offset: 0x10 - DMA channel 1 peripheral address register
        volatile uint32_t CMAR1;  ///< Offset: 0x14 - DMA channel 1 memory address register
        volatile uint32_t CCR2;  ///< Offset: 0x1C - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR2;  ///< Offset: 0x20 - DMA channel 2 number of data register
        volatile uint32_t CPAR2;  ///< Offset: 0x24 - DMA channel 2 peripheral address register
        volatile uint32_t CMAR2;  ///< Offset: 0x28 - DMA channel 2 memory address register
        volatile uint32_t CCR3;  ///< Offset: 0x30 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR3;  ///< Offset: 0x34 - DMA channel 3 number of data register
        volatile uint32_t CPAR3;  ///< Offset: 0x38 - DMA channel 3 peripheral address register
        volatile uint32_t CMAR3;  ///< Offset: 0x3C - DMA channel 3 memory address register
        volatile uint32_t CCR4;  ///< Offset: 0x44 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR4;  ///< Offset: 0x48 - DMA channel 4 number of data register
        volatile uint32_t CPAR4;  ///< Offset: 0x4C - DMA channel 4 peripheral address register
        volatile uint32_t CMAR4;  ///< Offset: 0x50 - DMA channel 4 memory address register
        volatile uint32_t CCR5;  ///< Offset: 0x58 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR5;  ///< Offset: 0x5C - DMA channel 5 number of data register
        volatile uint32_t CPAR5;  ///< Offset: 0x60 - DMA channel 5 peripheral address register
        volatile uint32_t CMAR5;  ///< Offset: 0x64 - DMA channel 5 memory address register
        volatile uint32_t CCR6;  ///< Offset: 0x6C - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR6;  ///< Offset: 0x70 - DMA channel 6 number of data register
        volatile uint32_t CPAR6;  ///< Offset: 0x74 - DMA channel 6 peripheral address register
        volatile uint32_t CMAR6;  ///< Offset: 0x78 - DMA channel 6 memory address register
        volatile uint32_t CCR7;  ///< Offset: 0x80 - DMA channel configuration register (DMA_CCR)
        volatile uint32_t CNDTR7;  ///< Offset: 0x84 - DMA channel 7 number of data register
        volatile uint32_t CPAR7;  ///< Offset: 0x88 - DMA channel 7 peripheral address register
        volatile uint32_t CMAR7;  ///< Offset: 0x8C - DMA channel 7 memory address register
    };

    /// Peripheral instances
    inline Registers* DMA1 = reinterpret_cast<Registers*>(DMA1_BASE);
    inline Registers* DMA2 = reinterpret_cast<Registers*>(DMA2_BASE);

    // Bit definitions
    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t GIF1 = (1U << 0);  ///< Channel 1 Global interrupt flag
        constexpr uint32_t TCIF1 = (1U << 1);  ///< Channel 1 Transfer Complete flag
        constexpr uint32_t HTIF1 = (1U << 2);  ///< Channel 1 Half Transfer Complete flag
        constexpr uint32_t TEIF1 = (1U << 3);  ///< Channel 1 Transfer Error flag
        constexpr uint32_t GIF2 = (1U << 4);  ///< Channel 2 Global interrupt flag
        constexpr uint32_t TCIF2 = (1U << 5);  ///< Channel 2 Transfer Complete flag
        constexpr uint32_t HTIF2 = (1U << 6);  ///< Channel 2 Half Transfer Complete flag
        constexpr uint32_t TEIF2 = (1U << 7);  ///< Channel 2 Transfer Error flag
        constexpr uint32_t GIF3 = (1U << 8);  ///< Channel 3 Global interrupt flag
        constexpr uint32_t TCIF3 = (1U << 9);  ///< Channel 3 Transfer Complete flag
        constexpr uint32_t HTIF3 = (1U << 10);  ///< Channel 3 Half Transfer Complete flag
        constexpr uint32_t TEIF3 = (1U << 11);  ///< Channel 3 Transfer Error flag
        constexpr uint32_t GIF4 = (1U << 12);  ///< Channel 4 Global interrupt flag
        constexpr uint32_t TCIF4 = (1U << 13);  ///< Channel 4 Transfer Complete flag
        constexpr uint32_t HTIF4 = (1U << 14);  ///< Channel 4 Half Transfer Complete flag
        constexpr uint32_t TEIF4 = (1U << 15);  ///< Channel 4 Transfer Error flag
        constexpr uint32_t GIF5 = (1U << 16);  ///< Channel 5 Global interrupt flag
        constexpr uint32_t TCIF5 = (1U << 17);  ///< Channel 5 Transfer Complete flag
        constexpr uint32_t HTIF5 = (1U << 18);  ///< Channel 5 Half Transfer Complete flag
        constexpr uint32_t TEIF5 = (1U << 19);  ///< Channel 5 Transfer Error flag
        constexpr uint32_t GIF6 = (1U << 20);  ///< Channel 6 Global interrupt flag
        constexpr uint32_t TCIF6 = (1U << 21);  ///< Channel 6 Transfer Complete flag
        constexpr uint32_t HTIF6 = (1U << 22);  ///< Channel 6 Half Transfer Complete flag
        constexpr uint32_t TEIF6 = (1U << 23);  ///< Channel 6 Transfer Error flag
        constexpr uint32_t GIF7 = (1U << 24);  ///< Channel 7 Global interrupt flag
        constexpr uint32_t TCIF7 = (1U << 25);  ///< Channel 7 Transfer Complete flag
        constexpr uint32_t HTIF7 = (1U << 26);  ///< Channel 7 Half Transfer Complete flag
        constexpr uint32_t TEIF7 = (1U << 27);  ///< Channel 7 Transfer Error flag
    }

    /// IFCR Register bits
    namespace ifcr_bits {
        constexpr uint32_t CGIF1 = (1U << 0);  ///< Channel 1 Global interrupt clear
        constexpr uint32_t CTCIF1 = (1U << 1);  ///< Channel 1 Transfer Complete clear
        constexpr uint32_t CHTIF1 = (1U << 2);  ///< Channel 1 Half Transfer clear
        constexpr uint32_t CTEIF1 = (1U << 3);  ///< Channel 1 Transfer Error clear
        constexpr uint32_t CGIF2 = (1U << 4);  ///< Channel 2 Global interrupt clear
        constexpr uint32_t CTCIF2 = (1U << 5);  ///< Channel 2 Transfer Complete clear
        constexpr uint32_t CHTIF2 = (1U << 6);  ///< Channel 2 Half Transfer clear
        constexpr uint32_t CTEIF2 = (1U << 7);  ///< Channel 2 Transfer Error clear
        constexpr uint32_t CGIF3 = (1U << 8);  ///< Channel 3 Global interrupt clear
        constexpr uint32_t CTCIF3 = (1U << 9);  ///< Channel 3 Transfer Complete clear
        constexpr uint32_t CHTIF3 = (1U << 10);  ///< Channel 3 Half Transfer clear
        constexpr uint32_t CTEIF3 = (1U << 11);  ///< Channel 3 Transfer Error clear
        constexpr uint32_t CGIF4 = (1U << 12);  ///< Channel 4 Global interrupt clear
        constexpr uint32_t CTCIF4 = (1U << 13);  ///< Channel 4 Transfer Complete clear
        constexpr uint32_t CHTIF4 = (1U << 14);  ///< Channel 4 Half Transfer clear
        constexpr uint32_t CTEIF4 = (1U << 15);  ///< Channel 4 Transfer Error clear
        constexpr uint32_t CGIF5 = (1U << 16);  ///< Channel 5 Global interrupt clear
        constexpr uint32_t CTCIF5 = (1U << 17);  ///< Channel 5 Transfer Complete clear
        constexpr uint32_t CHTIF5 = (1U << 18);  ///< Channel 5 Half Transfer clear
        constexpr uint32_t CTEIF5 = (1U << 19);  ///< Channel 5 Transfer Error clear
        constexpr uint32_t CGIF6 = (1U << 20);  ///< Channel 6 Global interrupt clear
        constexpr uint32_t CTCIF6 = (1U << 21);  ///< Channel 6 Transfer Complete clear
        constexpr uint32_t CHTIF6 = (1U << 22);  ///< Channel 6 Half Transfer clear
        constexpr uint32_t CTEIF6 = (1U << 23);  ///< Channel 6 Transfer Error clear
        constexpr uint32_t CGIF7 = (1U << 24);  ///< Channel 7 Global interrupt clear
        constexpr uint32_t CTCIF7 = (1U << 25);  ///< Channel 7 Transfer Complete clear
        constexpr uint32_t CHTIF7 = (1U << 26);  ///< Channel 7 Half Transfer clear
        constexpr uint32_t CTEIF7 = (1U << 27);  ///< Channel 7 Transfer Error clear
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR1 Register bits
    namespace cndtr1_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR1 Register bits
    namespace cpar1_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR1 Register bits
    namespace cmar1_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR2 Register bits
    namespace cndtr2_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR2 Register bits
    namespace cpar2_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR2 Register bits
    namespace cmar2_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR3 Register bits
    namespace cndtr3_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR3 Register bits
    namespace cpar3_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR3 Register bits
    namespace cmar3_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR4 Register bits
    namespace cndtr4_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR4 Register bits
    namespace cpar4_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR4 Register bits
    namespace cmar4_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR5 Register bits
    namespace ccr5_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR5 Register bits
    namespace cndtr5_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR5 Register bits
    namespace cpar5_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR5 Register bits
    namespace cmar5_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR6 Register bits
    namespace ccr6_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR6 Register bits
    namespace cndtr6_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR6 Register bits
    namespace cpar6_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR6 Register bits
    namespace cmar6_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR7 Register bits
    namespace ccr7_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half Transfer interrupt enable
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PL = (2 << 12);  ///< Channel Priority level
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
    }

    /// CNDTR7 Register bits
    namespace cndtr7_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR7 Register bits
    namespace cpar7_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR7 Register bits
    namespace cmar7_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TIM2_BASE = 0x40000000;
    constexpr uint32_t TIM3_BASE = 0x40000400;
    constexpr uint32_t TIM4_BASE = 0x40000800;
    constexpr uint32_t TIM15_BASE = 0x40014000;
    constexpr uint32_t TIM16_BASE = 0x40014400;
    constexpr uint32_t TIM17_BASE = 0x40014800;
    constexpr uint32_t TIM6_BASE = 0x40001000;
    constexpr uint32_t TIM7_BASE = 0x40001400;
    constexpr uint32_t TIM1_BASE = 0x40012C00;
    constexpr uint32_t TIM20_BASE = 0x40015000;
    constexpr uint32_t TIM8_BASE = 0x40013400;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - control register 2
        volatile uint32_t SMCR;  ///< Offset: 0x08 - slave mode control register
        volatile uint32_t DIER;  ///< Offset: 0x0C - DMA/Interrupt enable register
        volatile uint32_t SR;  ///< Offset: 0x10 - status register
        volatile uint32_t EGR;  ///< Offset: 0x14 - event generation register
        volatile uint32_t CCMR1_Output;  ///< Offset: 0x18 - capture/compare mode register 1 (output mode)
        volatile uint32_t CCMR1_Input;  ///< Offset: 0x18 - capture/compare mode register 1 (input mode)
        volatile uint32_t CCMR2_Output;  ///< Offset: 0x1C - capture/compare mode register 2 (output mode)
        volatile uint32_t CCMR2_Input;  ///< Offset: 0x1C - capture/compare mode register 2 (input mode)
        volatile uint32_t CCER;  ///< Offset: 0x20 - capture/compare enable register
        volatile uint32_t CNT;  ///< Offset: 0x24 - counter
        volatile uint32_t PSC;  ///< Offset: 0x28 - prescaler
        volatile uint32_t ARR;  ///< Offset: 0x2C - auto-reload register
        volatile uint32_t CCR1;  ///< Offset: 0x34 - capture/compare register 1
        volatile uint32_t CCR2;  ///< Offset: 0x38 - capture/compare register 2
        volatile uint32_t CCR3;  ///< Offset: 0x3C - capture/compare register 3
        volatile uint32_t CCR4;  ///< Offset: 0x40 - capture/compare register 4
        volatile uint32_t DCR;  ///< Offset: 0x48 - DMA control register
        volatile uint32_t DMAR;  ///< Offset: 0x4C - DMA address for full transfer
    };

    /// Peripheral instances
    inline Registers* TIM2 = reinterpret_cast<Registers*>(TIM2_BASE);
    inline Registers* TIM3 = reinterpret_cast<Registers*>(TIM3_BASE);
    inline Registers* TIM4 = reinterpret_cast<Registers*>(TIM4_BASE);
    inline Registers* TIM15 = reinterpret_cast<Registers*>(TIM15_BASE);
    inline Registers* TIM16 = reinterpret_cast<Registers*>(TIM16_BASE);
    inline Registers* TIM17 = reinterpret_cast<Registers*>(TIM17_BASE);
    inline Registers* TIM6 = reinterpret_cast<Registers*>(TIM6_BASE);
    inline Registers* TIM7 = reinterpret_cast<Registers*>(TIM7_BASE);
    inline Registers* TIM1 = reinterpret_cast<Registers*>(TIM1_BASE);
    inline Registers* TIM20 = reinterpret_cast<Registers*>(TIM20_BASE);
    inline Registers* TIM8 = reinterpret_cast<Registers*>(TIM8_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t CEN = (1U << 0);  ///< Counter enable
        constexpr uint32_t UDIS = (1U << 1);  ///< Update disable
        constexpr uint32_t URS = (1U << 2);  ///< Update request source
        constexpr uint32_t OPM = (1U << 3);  ///< One-pulse mode
        constexpr uint32_t DIR = (1U << 4);  ///< Direction
        constexpr uint32_t CMS = (2 << 5);  ///< Center-aligned mode selection
        constexpr uint32_t ARPE = (1U << 7);  ///< Auto-reload preload enable
        constexpr uint32_t CKD = (2 << 8);  ///< Clock division
        constexpr uint32_t UIFREMAP = (1U << 11);  ///< UIF status bit remapping
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t TI1S = (1U << 7);  ///< TI1 selection
        constexpr uint32_t MMS = (3 << 4);  ///< Master mode selection
        constexpr uint32_t CCDS = (1U << 3);  ///< Capture/compare DMA selection
    }

    /// SMCR Register bits
    namespace smcr_bits {
        constexpr uint32_t SMS = (3 << 0);  ///< Slave mode selection
        constexpr uint32_t OCCS = (1U << 3);  ///< OCREF clear selection
        constexpr uint32_t TS = (3 << 4);  ///< Trigger selection
        constexpr uint32_t MSM = (1U << 7);  ///< Master/Slave mode
        constexpr uint32_t ETF = (4 << 8);  ///< External trigger filter
        constexpr uint32_t ETPS = (2 << 12);  ///< External trigger prescaler
        constexpr uint32_t ECE = (1U << 14);  ///< External clock enable
        constexpr uint32_t ETP = (1U << 15);  ///< External trigger polarity
        constexpr uint32_t SMS_3 = (1U << 16);  ///< Slave mode selection bit3
    }

    /// DIER Register bits
    namespace dier_bits {
        constexpr uint32_t TDE = (1U << 14);  ///< Trigger DMA request enable
        constexpr uint32_t CC4DE = (1U << 12);  ///< Capture/Compare 4 DMA request enable
        constexpr uint32_t CC3DE = (1U << 11);  ///< Capture/Compare 3 DMA request enable
        constexpr uint32_t CC2DE = (1U << 10);  ///< Capture/Compare 2 DMA request enable
        constexpr uint32_t CC1DE = (1U << 9);  ///< Capture/Compare 1 DMA request enable
        constexpr uint32_t UDE = (1U << 8);  ///< Update DMA request enable
        constexpr uint32_t TIE = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t CC4IE = (1U << 4);  ///< Capture/Compare 4 interrupt enable
        constexpr uint32_t CC3IE = (1U << 3);  ///< Capture/Compare 3 interrupt enable
        constexpr uint32_t CC2IE = (1U << 2);  ///< Capture/Compare 2 interrupt enable
        constexpr uint32_t CC1IE = (1U << 1);  ///< Capture/Compare 1 interrupt enable
        constexpr uint32_t UIE = (1U << 0);  ///< Update interrupt enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CC4OF = (1U << 12);  ///< Capture/Compare 4 overcapture flag
        constexpr uint32_t CC3OF = (1U << 11);  ///< Capture/Compare 3 overcapture flag
        constexpr uint32_t CC2OF = (1U << 10);  ///< Capture/compare 2 overcapture flag
        constexpr uint32_t CC1OF = (1U << 9);  ///< Capture/Compare 1 overcapture flag
        constexpr uint32_t TIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t CC4IF = (1U << 4);  ///< Capture/Compare 4 interrupt flag
        constexpr uint32_t CC3IF = (1U << 3);  ///< Capture/Compare 3 interrupt flag
        constexpr uint32_t CC2IF = (1U << 2);  ///< Capture/Compare 2 interrupt flag
        constexpr uint32_t CC1IF = (1U << 1);  ///< Capture/compare 1 interrupt flag
        constexpr uint32_t UIF = (1U << 0);  ///< Update interrupt flag
    }

    /// EGR Register bits
    namespace egr_bits {
        constexpr uint32_t TG = (1U << 6);  ///< Trigger generation
        constexpr uint32_t CC4G = (1U << 4);  ///< Capture/compare 4 generation
        constexpr uint32_t CC3G = (1U << 3);  ///< Capture/compare 3 generation
        constexpr uint32_t CC2G = (1U << 2);  ///< Capture/compare 2 generation
        constexpr uint32_t CC1G = (1U << 1);  ///< Capture/compare 1 generation
        constexpr uint32_t UG = (1U << 0);  ///< Update generation
    }

    /// CCMR1_Output Register bits
    namespace ccmr1_output_bits {
        constexpr uint32_t CC1S = (2 << 0);  ///< Capture/Compare 1 selection
        constexpr uint32_t OC1FE = (1U << 2);  ///< Output compare 1 fast enable
        constexpr uint32_t OC1PE = (1U << 3);  ///< Output compare 1 preload enable
        constexpr uint32_t OC1M = (3 << 4);  ///< Output compare 1 mode
        constexpr uint32_t OC1CE = (1U << 7);  ///< Output compare 1 clear enable
        constexpr uint32_t CC2S = (2 << 8);  ///< Capture/Compare 2 selection
        constexpr uint32_t OC2FE = (1U << 10);  ///< Output compare 2 fast enable
        constexpr uint32_t OC2PE = (1U << 11);  ///< Output compare 2 preload enable
        constexpr uint32_t OC2M = (3 << 12);  ///< Output compare 2 mode
        constexpr uint32_t OC2CE = (1U << 15);  ///< Output compare 2 clear enable
        constexpr uint32_t OC1M_3 = (1U << 16);  ///< Output compare 1 mode bit 3
        constexpr uint32_t OC2M_3 = (1U << 24);  ///< Output compare 2 mode bit 3
    }

    /// CCMR1_Input Register bits
    namespace ccmr1_input_bits {
        constexpr uint32_t IC2F = (4 << 12);  ///< Input capture 2 filter
        constexpr uint32_t IC2PSC = (2 << 10);  ///< Input capture 2 prescaler
        constexpr uint32_t CC2S = (2 << 8);  ///< Capture/compare 2 selection
        constexpr uint32_t IC1F = (4 << 4);  ///< Input capture 1 filter
        constexpr uint32_t IC1PSC = (2 << 2);  ///< Input capture 1 prescaler
        constexpr uint32_t CC1S = (2 << 0);  ///< Capture/Compare 1 selection
    }

    /// CCMR2_Output Register bits
    namespace ccmr2_output_bits {
        constexpr uint32_t CC3S = (2 << 0);  ///< Capture/Compare 3 selection
        constexpr uint32_t OC3FE = (1U << 2);  ///< Output compare 3 fast enable
        constexpr uint32_t OC3PE = (1U << 3);  ///< Output compare 3 preload enable
        constexpr uint32_t OC3M = (3 << 4);  ///< Output compare 3 mode
        constexpr uint32_t OC3CE = (1U << 7);  ///< Output compare 3 clear enable
        constexpr uint32_t CC4S = (2 << 8);  ///< Capture/Compare 4 selection
        constexpr uint32_t OC4FE = (1U << 10);  ///< Output compare 4 fast enable
        constexpr uint32_t OC4PE = (1U << 11);  ///< Output compare 4 preload enable
        constexpr uint32_t OC4M = (3 << 12);  ///< Output compare 4 mode
        constexpr uint32_t O24CE = (1U << 15);  ///< Output compare 4 clear enable
        constexpr uint32_t OC3M_3 = (1U << 16);  ///< Output compare 3 mode bit3
        constexpr uint32_t OC4M_3 = (1U << 24);  ///< Output compare 4 mode bit3
    }

    /// CCMR2_Input Register bits
    namespace ccmr2_input_bits {
        constexpr uint32_t IC4F = (4 << 12);  ///< Input capture 4 filter
        constexpr uint32_t IC4PSC = (2 << 10);  ///< Input capture 4 prescaler
        constexpr uint32_t CC4S = (2 << 8);  ///< Capture/Compare 4 selection
        constexpr uint32_t IC3F = (4 << 4);  ///< Input capture 3 filter
        constexpr uint32_t IC3PSC = (2 << 2);  ///< Input capture 3 prescaler
        constexpr uint32_t CC3S = (2 << 0);  ///< Capture/Compare 3 selection
    }

    /// CCER Register bits
    namespace ccer_bits {
        constexpr uint32_t CC1E = (1U << 0);  ///< Capture/Compare 1 output enable
        constexpr uint32_t CC1P = (1U << 1);  ///< Capture/Compare 1 output Polarity
        constexpr uint32_t CC1NP = (1U << 3);  ///< Capture/Compare 1 output Polarity
        constexpr uint32_t CC2E = (1U << 4);  ///< Capture/Compare 2 output enable
        constexpr uint32_t CC2P = (1U << 5);  ///< Capture/Compare 2 output Polarity
        constexpr uint32_t CC2NP = (1U << 7);  ///< Capture/Compare 2 output Polarity
        constexpr uint32_t CC3E = (1U << 8);  ///< Capture/Compare 3 output enable
        constexpr uint32_t CC3P = (1U << 9);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC3NP = (1U << 11);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC4E = (1U << 12);  ///< Capture/Compare 4 output enable
        constexpr uint32_t CC4P = (1U << 13);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC4NP = (1U << 15);  ///< Capture/Compare 3 output Polarity
    }

    /// CNT Register bits
    namespace cnt_bits {
        constexpr uint32_t CNTL = (16 << 0);  ///< Low counter value
        constexpr uint32_t CNTH = (15 << 16);  ///< High counter value
        constexpr uint32_t CNT_or_UIFCPY = (1U << 31);  ///< if IUFREMAP=0 than CNT with read write access else UIFCPY with read only access
    }

    /// PSC Register bits
    namespace psc_bits {
        constexpr uint32_t PSC = (16 << 0);  ///< Prescaler value
    }

    /// ARR Register bits
    namespace arr_bits {
        constexpr uint32_t ARRL = (16 << 0);  ///< Low Auto-reload value
        constexpr uint32_t ARRH = (16 << 16);  ///< High Auto-reload value
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t CCR1L = (16 << 0);  ///< Low Capture/Compare 1 value
        constexpr uint32_t CCR1H = (16 << 16);  ///< High Capture/Compare 1 value (on TIM2)
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t CCR2L = (16 << 0);  ///< Low Capture/Compare 2 value
        constexpr uint32_t CCR2H = (16 << 16);  ///< High Capture/Compare 2 value (on TIM2)
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t CCR3L = (16 << 0);  ///< Low Capture/Compare value
        constexpr uint32_t CCR3H = (16 << 16);  ///< High Capture/Compare value (on TIM2)
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t CCR4L = (16 << 0);  ///< Low Capture/Compare value
        constexpr uint32_t CCR4H = (16 << 16);  ///< High Capture/Compare value (on TIM2)
    }

    /// DCR Register bits
    namespace dcr_bits {
        constexpr uint32_t DBL = (5 << 8);  ///< DMA burst length
        constexpr uint32_t DBA = (5 << 0);  ///< DMA base address
    }

    /// DMAR Register bits
    namespace dmar_bits {
        constexpr uint32_t DMAB = (16 << 0);  ///< DMA register for burst accesses
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART1_BASE = 0x40013800;
    constexpr uint32_t USART2_BASE = 0x40004400;
    constexpr uint32_t USART3_BASE = 0x40004800;
    constexpr uint32_t UART4_BASE = 0x40004C00;
    constexpr uint32_t UART5_BASE = 0x40005000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t CR3;  ///< Offset: 0x08 - Control register 3
        volatile uint32_t BRR;  ///< Offset: 0x0C - Baud rate register
        volatile uint32_t GTPR;  ///< Offset: 0x10 - Guard time and prescaler register
        volatile uint32_t RTOR;  ///< Offset: 0x14 - Receiver timeout register
        volatile uint32_t RQR;  ///< Offset: 0x18 - Request register
        volatile uint32_t ISR;  ///< Offset: 0x1C - Interrupt & status register
        volatile uint32_t ICR;  ///< Offset: 0x20 - Interrupt flag clear register
        volatile uint32_t RDR;  ///< Offset: 0x24 - Receive data register
        volatile uint32_t TDR;  ///< Offset: 0x28 - Transmit data register
    };

    /// Peripheral instances
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);
    inline Registers* USART3 = reinterpret_cast<Registers*>(USART3_BASE);
    inline Registers* UART4 = reinterpret_cast<Registers*>(UART4_BASE);
    inline Registers* UART5 = reinterpret_cast<Registers*>(UART5_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t EOBIE = (1U << 27);  ///< End of Block interrupt enable
        constexpr uint32_t RTOIE = (1U << 26);  ///< Receiver timeout interrupt enable
        constexpr uint32_t DEAT = (5 << 21);  ///< Driver Enable assertion time
        constexpr uint32_t DEDT = (5 << 16);  ///< Driver Enable deassertion time
        constexpr uint32_t OVER8 = (1U << 15);  ///< Oversampling mode
        constexpr uint32_t CMIE = (1U << 14);  ///< Character match interrupt enable
        constexpr uint32_t MME = (1U << 13);  ///< Mute mode enable
        constexpr uint32_t M = (1U << 12);  ///< Word length
        constexpr uint32_t WAKE = (1U << 11);  ///< Receiver wakeup method
        constexpr uint32_t PCE = (1U << 10);  ///< Parity control enable
        constexpr uint32_t PS = (1U << 9);  ///< Parity selection
        constexpr uint32_t PEIE = (1U << 8);  ///< PE interrupt enable
        constexpr uint32_t TXEIE = (1U << 7);  ///< interrupt enable
        constexpr uint32_t TCIE = (1U << 6);  ///< Transmission complete interrupt enable
        constexpr uint32_t RXNEIE = (1U << 5);  ///< RXNE interrupt enable
        constexpr uint32_t IDLEIE = (1U << 4);  ///< IDLE interrupt enable
        constexpr uint32_t TE = (1U << 3);  ///< Transmitter enable
        constexpr uint32_t RE = (1U << 2);  ///< Receiver enable
        constexpr uint32_t UESM = (1U << 1);  ///< USART enable in Stop mode
        constexpr uint32_t UE = (1U << 0);  ///< USART enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t ADD4 = (4 << 28);  ///< Address of the USART node
        constexpr uint32_t ADD0 = (4 << 24);  ///< Address of the USART node
        constexpr uint32_t RTOEN = (1U << 23);  ///< Receiver timeout enable
        constexpr uint32_t ABRMOD = (2 << 21);  ///< Auto baud rate mode
        constexpr uint32_t ABREN = (1U << 20);  ///< Auto baud rate enable
        constexpr uint32_t MSBFIRST = (1U << 19);  ///< Most significant bit first
        constexpr uint32_t DATAINV = (1U << 18);  ///< Binary data inversion
        constexpr uint32_t TXINV = (1U << 17);  ///< TX pin active level inversion
        constexpr uint32_t RXINV = (1U << 16);  ///< RX pin active level inversion
        constexpr uint32_t SWAP = (1U << 15);  ///< Swap TX/RX pins
        constexpr uint32_t LINEN = (1U << 14);  ///< LIN mode enable
        constexpr uint32_t STOP = (2 << 12);  ///< STOP bits
        constexpr uint32_t CLKEN = (1U << 11);  ///< Clock enable
        constexpr uint32_t CPOL = (1U << 10);  ///< Clock polarity
        constexpr uint32_t CPHA = (1U << 9);  ///< Clock phase
        constexpr uint32_t LBCL = (1U << 8);  ///< Last bit clock pulse
        constexpr uint32_t LBDIE = (1U << 6);  ///< LIN break detection interrupt enable
        constexpr uint32_t LBDL = (1U << 5);  ///< LIN break detection length
        constexpr uint32_t ADDM7 = (1U << 4);  ///< 7-bit Address Detection/4-bit Address Detection
    }

    /// CR3 Register bits
    namespace cr3_bits {
        constexpr uint32_t WUFIE = (1U << 22);  ///< Wakeup from Stop mode interrupt enable
        constexpr uint32_t WUS = (2 << 20);  ///< Wakeup from Stop mode interrupt flag selection
        constexpr uint32_t SCARCNT = (3 << 17);  ///< Smartcard auto-retry count
        constexpr uint32_t DEP = (1U << 15);  ///< Driver enable polarity selection
        constexpr uint32_t DEM = (1U << 14);  ///< Driver enable mode
        constexpr uint32_t DDRE = (1U << 13);  ///< DMA Disable on Reception Error
        constexpr uint32_t OVRDIS = (1U << 12);  ///< Overrun Disable
        constexpr uint32_t ONEBIT = (1U << 11);  ///< One sample bit method enable
        constexpr uint32_t CTSIE = (1U << 10);  ///< CTS interrupt enable
        constexpr uint32_t CTSE = (1U << 9);  ///< CTS enable
        constexpr uint32_t RTSE = (1U << 8);  ///< RTS enable
        constexpr uint32_t DMAT = (1U << 7);  ///< DMA enable transmitter
        constexpr uint32_t DMAR = (1U << 6);  ///< DMA enable receiver
        constexpr uint32_t SCEN = (1U << 5);  ///< Smartcard mode enable
        constexpr uint32_t NACK = (1U << 4);  ///< Smartcard NACK enable
        constexpr uint32_t HDSEL = (1U << 3);  ///< Half-duplex selection
        constexpr uint32_t IRLP = (1U << 2);  ///< IrDA low-power
        constexpr uint32_t IREN = (1U << 1);  ///< IrDA mode enable
        constexpr uint32_t EIE = (1U << 0);  ///< Error interrupt enable
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t DIV_Mantissa = (12 << 4);  ///< mantissa of USARTDIV
        constexpr uint32_t DIV_Fraction = (4 << 0);  ///< fraction of USARTDIV
    }

    /// GTPR Register bits
    namespace gtpr_bits {
        constexpr uint32_t GT = (8 << 8);  ///< Guard time value
        constexpr uint32_t PSC = (8 << 0);  ///< Prescaler value
    }

    /// RTOR Register bits
    namespace rtor_bits {
        constexpr uint32_t BLEN = (8 << 24);  ///< Block Length
        constexpr uint32_t RTO = (24 << 0);  ///< Receiver timeout value
    }

    /// RQR Register bits
    namespace rqr_bits {
        constexpr uint32_t TXFRQ = (1U << 4);  ///< Transmit data flush request
        constexpr uint32_t RXFRQ = (1U << 3);  ///< Receive data flush request
        constexpr uint32_t MMRQ = (1U << 2);  ///< Mute mode request
        constexpr uint32_t SBKRQ = (1U << 1);  ///< Send break request
        constexpr uint32_t ABRRQ = (1U << 0);  ///< Auto baud rate request
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t REACK = (1U << 22);  ///< Receive enable acknowledge flag
        constexpr uint32_t TEACK = (1U << 21);  ///< Transmit enable acknowledge flag
        constexpr uint32_t WUF = (1U << 20);  ///< Wakeup from Stop mode flag
        constexpr uint32_t RWU = (1U << 19);  ///< Receiver wakeup from Mute mode
        constexpr uint32_t SBKF = (1U << 18);  ///< Send break flag
        constexpr uint32_t CMF = (1U << 17);  ///< character match flag
        constexpr uint32_t BUSY = (1U << 16);  ///< Busy flag
        constexpr uint32_t ABRF = (1U << 15);  ///< Auto baud rate flag
        constexpr uint32_t ABRE = (1U << 14);  ///< Auto baud rate error
        constexpr uint32_t EOBF = (1U << 12);  ///< End of block flag
        constexpr uint32_t RTOF = (1U << 11);  ///< Receiver timeout
        constexpr uint32_t CTS = (1U << 10);  ///< CTS flag
        constexpr uint32_t CTSIF = (1U << 9);  ///< CTS interrupt flag
        constexpr uint32_t LBDF = (1U << 8);  ///< LIN break detection flag
        constexpr uint32_t TXE = (1U << 7);  ///< Transmit data register empty
        constexpr uint32_t TC = (1U << 6);  ///< Transmission complete
        constexpr uint32_t RXNE = (1U << 5);  ///< Read data register not empty
        constexpr uint32_t IDLE = (1U << 4);  ///< Idle line detected
        constexpr uint32_t ORE = (1U << 3);  ///< Overrun error
        constexpr uint32_t NF = (1U << 2);  ///< Noise detected flag
        constexpr uint32_t FE = (1U << 1);  ///< Framing error
        constexpr uint32_t PE = (1U << 0);  ///< Parity error
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t WUCF = (1U << 20);  ///< Wakeup from Stop mode clear flag
        constexpr uint32_t CMCF = (1U << 17);  ///< Character match clear flag
        constexpr uint32_t EOBCF = (1U << 12);  ///< End of timeout clear flag
        constexpr uint32_t RTOCF = (1U << 11);  ///< Receiver timeout clear flag
        constexpr uint32_t CTSCF = (1U << 9);  ///< CTS clear flag
        constexpr uint32_t LBDCF = (1U << 8);  ///< LIN break detection clear flag
        constexpr uint32_t TCCF = (1U << 6);  ///< Transmission complete clear flag
        constexpr uint32_t IDLECF = (1U << 4);  ///< Idle line detected clear flag
        constexpr uint32_t ORECF = (1U << 3);  ///< Overrun error clear flag
        constexpr uint32_t NCF = (1U << 2);  ///< Noise detected clear flag
        constexpr uint32_t FECF = (1U << 1);  ///< Framing error clear flag
        constexpr uint32_t PECF = (1U << 0);  ///< Parity error clear flag
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t RDR = (9 << 0);  ///< Receive data value
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t TDR = (9 << 0);  ///< Transmit data value
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t SPI1_BASE = 0x40013000;
    constexpr uint32_t SPI2_BASE = 0x40003800;
    constexpr uint32_t SPI3_BASE = 0x40003C00;
    constexpr uint32_t SPI4_BASE = 0x40013C00;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - control register 2
        volatile uint32_t SR;  ///< Offset: 0x08 - status register
        volatile uint32_t DR;  ///< Offset: 0x0C - data register
        volatile uint32_t CRCPR;  ///< Offset: 0x10 - CRC polynomial register
        volatile uint32_t RXCRCR;  ///< Offset: 0x14 - RX CRC register
        volatile uint32_t TXCRCR;  ///< Offset: 0x18 - TX CRC register
        volatile uint32_t I2SCFGR;  ///< Offset: 0x1C - I2S configuration register
        volatile uint32_t I2SPR;  ///< Offset: 0x20 - I2S prescaler register
    };

    /// Peripheral instances
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);
    inline Registers* SPI2 = reinterpret_cast<Registers*>(SPI2_BASE);
    inline Registers* SPI3 = reinterpret_cast<Registers*>(SPI3_BASE);
    inline Registers* SPI4 = reinterpret_cast<Registers*>(SPI4_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t BIDIMODE = (1U << 15);  ///< Bidirectional data mode enable
        constexpr uint32_t BIDIOE = (1U << 14);  ///< Output enable in bidirectional mode
        constexpr uint32_t CRCEN = (1U << 13);  ///< Hardware CRC calculation enable
        constexpr uint32_t CRCNEXT = (1U << 12);  ///< CRC transfer next
        constexpr uint32_t CRCL = (1U << 11);  ///< CRC length
        constexpr uint32_t RXONLY = (1U << 10);  ///< Receive only
        constexpr uint32_t SSM = (1U << 9);  ///< Software slave management
        constexpr uint32_t SSI = (1U << 8);  ///< Internal slave select
        constexpr uint32_t LSBFIRST = (1U << 7);  ///< Frame format
        constexpr uint32_t SPE = (1U << 6);  ///< SPI enable
        constexpr uint32_t BR = (3 << 3);  ///< Baud rate control
        constexpr uint32_t MSTR = (1U << 2);  ///< Master selection
        constexpr uint32_t CPOL = (1U << 1);  ///< Clock polarity
        constexpr uint32_t CPHA = (1U << 0);  ///< Clock phase
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t RXDMAEN = (1U << 0);  ///< Rx buffer DMA enable
        constexpr uint32_t TXDMAEN = (1U << 1);  ///< Tx buffer DMA enable
        constexpr uint32_t SSOE = (1U << 2);  ///< SS output enable
        constexpr uint32_t NSSP = (1U << 3);  ///< NSS pulse management
        constexpr uint32_t FRF = (1U << 4);  ///< Frame format
        constexpr uint32_t ERRIE = (1U << 5);  ///< Error interrupt enable
        constexpr uint32_t RXNEIE = (1U << 6);  ///< RX buffer not empty interrupt enable
        constexpr uint32_t TXEIE = (1U << 7);  ///< Tx buffer empty interrupt enable
        constexpr uint32_t DS = (4 << 8);  ///< Data size
        constexpr uint32_t FRXTH = (1U << 12);  ///< FIFO reception threshold
        constexpr uint32_t LDMA_RX = (1U << 13);  ///< Last DMA transfer for reception
        constexpr uint32_t LDMA_TX = (1U << 14);  ///< Last DMA transfer for transmission
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t RXNE = (1U << 0);  ///< Receive buffer not empty
        constexpr uint32_t TXE = (1U << 1);  ///< Transmit buffer empty
        constexpr uint32_t CHSIDE = (1U << 2);  ///< Channel side
        constexpr uint32_t UDR = (1U << 3);  ///< Underrun flag
        constexpr uint32_t CRCERR = (1U << 4);  ///< CRC error flag
        constexpr uint32_t MODF = (1U << 5);  ///< Mode fault
        constexpr uint32_t OVR = (1U << 6);  ///< Overrun flag
        constexpr uint32_t BSY = (1U << 7);  ///< Busy flag
        constexpr uint32_t TIFRFE = (1U << 8);  ///< TI frame format error
        constexpr uint32_t FRLVL = (2 << 9);  ///< FIFO reception level
        constexpr uint32_t FTLVL = (2 << 11);  ///< FIFO transmission level
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (16 << 0);  ///< Data register
    }

    /// CRCPR Register bits
    namespace crcpr_bits {
        constexpr uint32_t CRCPOLY = (16 << 0);  ///< CRC polynomial register
    }

    /// RXCRCR Register bits
    namespace rxcrcr_bits {
        constexpr uint32_t RxCRC = (16 << 0);  ///< Rx CRC register
    }

    /// TXCRCR Register bits
    namespace txcrcr_bits {
        constexpr uint32_t TxCRC = (16 << 0);  ///< Tx CRC register
    }

    /// I2SCFGR Register bits
    namespace i2scfgr_bits {
        constexpr uint32_t I2SMOD = (1U << 11);  ///< I2S mode selection
        constexpr uint32_t I2SE = (1U << 10);  ///< I2S Enable
        constexpr uint32_t I2SCFG = (2 << 8);  ///< I2S configuration mode
        constexpr uint32_t PCMSYNC = (1U << 7);  ///< PCM frame synchronization
        constexpr uint32_t I2SSTD = (2 << 4);  ///< I2S standard selection
        constexpr uint32_t CKPOL = (1U << 3);  ///< Steady state clock polarity
        constexpr uint32_t DATLEN = (2 << 1);  ///< Data length to be transferred
        constexpr uint32_t CHLEN = (1U << 0);  ///< Channel length (number of bits per audio channel)
    }

    /// I2SPR Register bits
    namespace i2spr_bits {
        constexpr uint32_t MCKOE = (1U << 9);  ///< Master clock output enable
        constexpr uint32_t ODD = (1U << 8);  ///< Odd factor for the prescaler
        constexpr uint32_t I2SDIV = (8 << 0);  ///< I2S Linear prescaler
    }

}

// ============================================================================
// I2S Peripheral
// ============================================================================

namespace i2s {
    /// Base addresses
    constexpr uint32_t I2S2ext_BASE = 0x40003400;
    constexpr uint32_t I2S3ext_BASE = 0x40004000;

    /// I2S Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* I2S2ext = reinterpret_cast<Registers*>(I2S2ext_BASE);
    inline Registers* I2S3ext = reinterpret_cast<Registers*>(I2S3ext_BASE);

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40010400;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t IMR1;  ///< Offset: 0x00 - Interrupt mask register
        volatile uint32_t EMR1;  ///< Offset: 0x04 - Event mask register
        volatile uint32_t RTSR1;  ///< Offset: 0x08 - Rising Trigger selection register
        volatile uint32_t FTSR1;  ///< Offset: 0x0C - Falling Trigger selection register
        volatile uint32_t SWIER1;  ///< Offset: 0x10 - Software interrupt event register
        volatile uint32_t PR1;  ///< Offset: 0x14 - Pending register
        volatile uint32_t IMR2;  ///< Offset: 0x18 - Interrupt mask register
        volatile uint32_t EMR2;  ///< Offset: 0x1C - Event mask register
        volatile uint32_t RTSR2;  ///< Offset: 0x20 - Rising Trigger selection register
        volatile uint32_t FTSR2;  ///< Offset: 0x24 - Falling Trigger selection register
        volatile uint32_t SWIER2;  ///< Offset: 0x28 - Software interrupt event register
        volatile uint32_t PR2;  ///< Offset: 0x2C - Pending register
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// IMR1 Register bits
    namespace imr1_bits {
        constexpr uint32_t MR0 = (1U << 0);  ///< Interrupt Mask on line 0
        constexpr uint32_t MR1 = (1U << 1);  ///< Interrupt Mask on line 1
        constexpr uint32_t MR2 = (1U << 2);  ///< Interrupt Mask on line 2
        constexpr uint32_t MR3 = (1U << 3);  ///< Interrupt Mask on line 3
        constexpr uint32_t MR4 = (1U << 4);  ///< Interrupt Mask on line 4
        constexpr uint32_t MR5 = (1U << 5);  ///< Interrupt Mask on line 5
        constexpr uint32_t MR6 = (1U << 6);  ///< Interrupt Mask on line 6
        constexpr uint32_t MR7 = (1U << 7);  ///< Interrupt Mask on line 7
        constexpr uint32_t MR8 = (1U << 8);  ///< Interrupt Mask on line 8
        constexpr uint32_t MR9 = (1U << 9);  ///< Interrupt Mask on line 9
        constexpr uint32_t MR10 = (1U << 10);  ///< Interrupt Mask on line 10
        constexpr uint32_t MR11 = (1U << 11);  ///< Interrupt Mask on line 11
        constexpr uint32_t MR12 = (1U << 12);  ///< Interrupt Mask on line 12
        constexpr uint32_t MR13 = (1U << 13);  ///< Interrupt Mask on line 13
        constexpr uint32_t MR14 = (1U << 14);  ///< Interrupt Mask on line 14
        constexpr uint32_t MR15 = (1U << 15);  ///< Interrupt Mask on line 15
        constexpr uint32_t MR16 = (1U << 16);  ///< Interrupt Mask on line 16
        constexpr uint32_t MR17 = (1U << 17);  ///< Interrupt Mask on line 17
        constexpr uint32_t MR18 = (1U << 18);  ///< Interrupt Mask on line 18
        constexpr uint32_t MR19 = (1U << 19);  ///< Interrupt Mask on line 19
        constexpr uint32_t MR20 = (1U << 20);  ///< Interrupt Mask on line 20
        constexpr uint32_t MR21 = (1U << 21);  ///< Interrupt Mask on line 21
        constexpr uint32_t MR22 = (1U << 22);  ///< Interrupt Mask on line 22
        constexpr uint32_t MR23 = (1U << 23);  ///< Interrupt Mask on line 23
        constexpr uint32_t MR24 = (1U << 24);  ///< Interrupt Mask on line 24
        constexpr uint32_t MR25 = (1U << 25);  ///< Interrupt Mask on line 25
        constexpr uint32_t MR26 = (1U << 26);  ///< Interrupt Mask on line 26
        constexpr uint32_t MR27 = (1U << 27);  ///< Interrupt Mask on line 27
        constexpr uint32_t MR28 = (1U << 28);  ///< Interrupt Mask on line 28
        constexpr uint32_t MR29 = (1U << 29);  ///< Interrupt Mask on line 29
        constexpr uint32_t MR30 = (1U << 30);  ///< Interrupt Mask on line 30
        constexpr uint32_t MR31 = (1U << 31);  ///< Interrupt Mask on line 31
    }

    /// EMR1 Register bits
    namespace emr1_bits {
        constexpr uint32_t MR0 = (1U << 0);  ///< Event Mask on line 0
        constexpr uint32_t MR1 = (1U << 1);  ///< Event Mask on line 1
        constexpr uint32_t MR2 = (1U << 2);  ///< Event Mask on line 2
        constexpr uint32_t MR3 = (1U << 3);  ///< Event Mask on line 3
        constexpr uint32_t MR4 = (1U << 4);  ///< Event Mask on line 4
        constexpr uint32_t MR5 = (1U << 5);  ///< Event Mask on line 5
        constexpr uint32_t MR6 = (1U << 6);  ///< Event Mask on line 6
        constexpr uint32_t MR7 = (1U << 7);  ///< Event Mask on line 7
        constexpr uint32_t MR8 = (1U << 8);  ///< Event Mask on line 8
        constexpr uint32_t MR9 = (1U << 9);  ///< Event Mask on line 9
        constexpr uint32_t MR10 = (1U << 10);  ///< Event Mask on line 10
        constexpr uint32_t MR11 = (1U << 11);  ///< Event Mask on line 11
        constexpr uint32_t MR12 = (1U << 12);  ///< Event Mask on line 12
        constexpr uint32_t MR13 = (1U << 13);  ///< Event Mask on line 13
        constexpr uint32_t MR14 = (1U << 14);  ///< Event Mask on line 14
        constexpr uint32_t MR15 = (1U << 15);  ///< Event Mask on line 15
        constexpr uint32_t MR16 = (1U << 16);  ///< Event Mask on line 16
        constexpr uint32_t MR17 = (1U << 17);  ///< Event Mask on line 17
        constexpr uint32_t MR18 = (1U << 18);  ///< Event Mask on line 18
        constexpr uint32_t MR19 = (1U << 19);  ///< Event Mask on line 19
        constexpr uint32_t MR20 = (1U << 20);  ///< Event Mask on line 20
        constexpr uint32_t MR21 = (1U << 21);  ///< Event Mask on line 21
        constexpr uint32_t MR22 = (1U << 22);  ///< Event Mask on line 22
        constexpr uint32_t MR23 = (1U << 23);  ///< Event Mask on line 23
        constexpr uint32_t MR24 = (1U << 24);  ///< Event Mask on line 24
        constexpr uint32_t MR25 = (1U << 25);  ///< Event Mask on line 25
        constexpr uint32_t MR26 = (1U << 26);  ///< Event Mask on line 26
        constexpr uint32_t MR27 = (1U << 27);  ///< Event Mask on line 27
        constexpr uint32_t MR28 = (1U << 28);  ///< Event Mask on line 28
        constexpr uint32_t MR29 = (1U << 29);  ///< Event Mask on line 29
        constexpr uint32_t MR30 = (1U << 30);  ///< Event Mask on line 30
        constexpr uint32_t MR31 = (1U << 31);  ///< Event Mask on line 31
    }

    /// RTSR1 Register bits
    namespace rtsr1_bits {
        constexpr uint32_t TR0 = (1U << 0);  ///< Rising trigger event configuration of line 0
        constexpr uint32_t TR1 = (1U << 1);  ///< Rising trigger event configuration of line 1
        constexpr uint32_t TR2 = (1U << 2);  ///< Rising trigger event configuration of line 2
        constexpr uint32_t TR3 = (1U << 3);  ///< Rising trigger event configuration of line 3
        constexpr uint32_t TR4 = (1U << 4);  ///< Rising trigger event configuration of line 4
        constexpr uint32_t TR5 = (1U << 5);  ///< Rising trigger event configuration of line 5
        constexpr uint32_t TR6 = (1U << 6);  ///< Rising trigger event configuration of line 6
        constexpr uint32_t TR7 = (1U << 7);  ///< Rising trigger event configuration of line 7
        constexpr uint32_t TR8 = (1U << 8);  ///< Rising trigger event configuration of line 8
        constexpr uint32_t TR9 = (1U << 9);  ///< Rising trigger event configuration of line 9
        constexpr uint32_t TR10 = (1U << 10);  ///< Rising trigger event configuration of line 10
        constexpr uint32_t TR11 = (1U << 11);  ///< Rising trigger event configuration of line 11
        constexpr uint32_t TR12 = (1U << 12);  ///< Rising trigger event configuration of line 12
        constexpr uint32_t TR13 = (1U << 13);  ///< Rising trigger event configuration of line 13
        constexpr uint32_t TR14 = (1U << 14);  ///< Rising trigger event configuration of line 14
        constexpr uint32_t TR15 = (1U << 15);  ///< Rising trigger event configuration of line 15
        constexpr uint32_t TR16 = (1U << 16);  ///< Rising trigger event configuration of line 16
        constexpr uint32_t TR17 = (1U << 17);  ///< Rising trigger event configuration of line 17
        constexpr uint32_t TR18 = (1U << 18);  ///< Rising trigger event configuration of line 18
        constexpr uint32_t TR19 = (1U << 19);  ///< Rising trigger event configuration of line 19
        constexpr uint32_t TR20 = (1U << 20);  ///< Rising trigger event configuration of line 20
        constexpr uint32_t TR21 = (1U << 21);  ///< Rising trigger event configuration of line 21
        constexpr uint32_t TR22 = (1U << 22);  ///< Rising trigger event configuration of line 22
        constexpr uint32_t TR29 = (1U << 29);  ///< Rising trigger event configuration of line 29
        constexpr uint32_t TR30 = (1U << 30);  ///< Rising trigger event configuration of line 30
        constexpr uint32_t TR31 = (1U << 31);  ///< Rising trigger event configuration of line 31
    }

    /// FTSR1 Register bits
    namespace ftsr1_bits {
        constexpr uint32_t TR0 = (1U << 0);  ///< Falling trigger event configuration of line 0
        constexpr uint32_t TR1 = (1U << 1);  ///< Falling trigger event configuration of line 1
        constexpr uint32_t TR2 = (1U << 2);  ///< Falling trigger event configuration of line 2
        constexpr uint32_t TR3 = (1U << 3);  ///< Falling trigger event configuration of line 3
        constexpr uint32_t TR4 = (1U << 4);  ///< Falling trigger event configuration of line 4
        constexpr uint32_t TR5 = (1U << 5);  ///< Falling trigger event configuration of line 5
        constexpr uint32_t TR6 = (1U << 6);  ///< Falling trigger event configuration of line 6
        constexpr uint32_t TR7 = (1U << 7);  ///< Falling trigger event configuration of line 7
        constexpr uint32_t TR8 = (1U << 8);  ///< Falling trigger event configuration of line 8
        constexpr uint32_t TR9 = (1U << 9);  ///< Falling trigger event configuration of line 9
        constexpr uint32_t TR10 = (1U << 10);  ///< Falling trigger event configuration of line 10
        constexpr uint32_t TR11 = (1U << 11);  ///< Falling trigger event configuration of line 11
        constexpr uint32_t TR12 = (1U << 12);  ///< Falling trigger event configuration of line 12
        constexpr uint32_t TR13 = (1U << 13);  ///< Falling trigger event configuration of line 13
        constexpr uint32_t TR14 = (1U << 14);  ///< Falling trigger event configuration of line 14
        constexpr uint32_t TR15 = (1U << 15);  ///< Falling trigger event configuration of line 15
        constexpr uint32_t TR16 = (1U << 16);  ///< Falling trigger event configuration of line 16
        constexpr uint32_t TR17 = (1U << 17);  ///< Falling trigger event configuration of line 17
        constexpr uint32_t TR18 = (1U << 18);  ///< Falling trigger event configuration of line 18
        constexpr uint32_t TR19 = (1U << 19);  ///< Falling trigger event configuration of line 19
        constexpr uint32_t TR20 = (1U << 20);  ///< Falling trigger event configuration of line 20
        constexpr uint32_t TR21 = (1U << 21);  ///< Falling trigger event configuration of line 21
        constexpr uint32_t TR22 = (1U << 22);  ///< Falling trigger event configuration of line 22
        constexpr uint32_t TR29 = (1U << 29);  ///< Falling trigger event configuration of line 29
        constexpr uint32_t TR30 = (1U << 30);  ///< Falling trigger event configuration of line 30.
        constexpr uint32_t TR31 = (1U << 31);  ///< Falling trigger event configuration of line 31
    }

    /// SWIER1 Register bits
    namespace swier1_bits {
        constexpr uint32_t SWIER0 = (1U << 0);  ///< Software Interrupt on line 0
        constexpr uint32_t SWIER1 = (1U << 1);  ///< Software Interrupt on line 1
        constexpr uint32_t SWIER2 = (1U << 2);  ///< Software Interrupt on line 2
        constexpr uint32_t SWIER3 = (1U << 3);  ///< Software Interrupt on line 3
        constexpr uint32_t SWIER4 = (1U << 4);  ///< Software Interrupt on line 4
        constexpr uint32_t SWIER5 = (1U << 5);  ///< Software Interrupt on line 5
        constexpr uint32_t SWIER6 = (1U << 6);  ///< Software Interrupt on line 6
        constexpr uint32_t SWIER7 = (1U << 7);  ///< Software Interrupt on line 7
        constexpr uint32_t SWIER8 = (1U << 8);  ///< Software Interrupt on line 8
        constexpr uint32_t SWIER9 = (1U << 9);  ///< Software Interrupt on line 9
        constexpr uint32_t SWIER10 = (1U << 10);  ///< Software Interrupt on line 10
        constexpr uint32_t SWIER11 = (1U << 11);  ///< Software Interrupt on line 11
        constexpr uint32_t SWIER12 = (1U << 12);  ///< Software Interrupt on line 12
        constexpr uint32_t SWIER13 = (1U << 13);  ///< Software Interrupt on line 13
        constexpr uint32_t SWIER14 = (1U << 14);  ///< Software Interrupt on line 14
        constexpr uint32_t SWIER15 = (1U << 15);  ///< Software Interrupt on line 15
        constexpr uint32_t SWIER16 = (1U << 16);  ///< Software Interrupt on line 16
        constexpr uint32_t SWIER17 = (1U << 17);  ///< Software Interrupt on line 17
        constexpr uint32_t SWIER18 = (1U << 18);  ///< Software Interrupt on line 18
        constexpr uint32_t SWIER19 = (1U << 19);  ///< Software Interrupt on line 19
        constexpr uint32_t SWIER20 = (1U << 20);  ///< Software Interrupt on line 20
        constexpr uint32_t SWIER21 = (1U << 21);  ///< Software Interrupt on line 21
        constexpr uint32_t SWIER22 = (1U << 22);  ///< Software Interrupt on line 22
        constexpr uint32_t SWIER29 = (1U << 29);  ///< Software Interrupt on line 29
        constexpr uint32_t SWIER30 = (1U << 30);  ///< Software Interrupt on line 309
        constexpr uint32_t SWIER31 = (1U << 31);  ///< Software Interrupt on line 319
    }

    /// PR1 Register bits
    namespace pr1_bits {
        constexpr uint32_t PR0 = (1U << 0);  ///< Pending bit 0
        constexpr uint32_t PR1 = (1U << 1);  ///< Pending bit 1
        constexpr uint32_t PR2 = (1U << 2);  ///< Pending bit 2
        constexpr uint32_t PR3 = (1U << 3);  ///< Pending bit 3
        constexpr uint32_t PR4 = (1U << 4);  ///< Pending bit 4
        constexpr uint32_t PR5 = (1U << 5);  ///< Pending bit 5
        constexpr uint32_t PR6 = (1U << 6);  ///< Pending bit 6
        constexpr uint32_t PR7 = (1U << 7);  ///< Pending bit 7
        constexpr uint32_t PR8 = (1U << 8);  ///< Pending bit 8
        constexpr uint32_t PR9 = (1U << 9);  ///< Pending bit 9
        constexpr uint32_t PR10 = (1U << 10);  ///< Pending bit 10
        constexpr uint32_t PR11 = (1U << 11);  ///< Pending bit 11
        constexpr uint32_t PR12 = (1U << 12);  ///< Pending bit 12
        constexpr uint32_t PR13 = (1U << 13);  ///< Pending bit 13
        constexpr uint32_t PR14 = (1U << 14);  ///< Pending bit 14
        constexpr uint32_t PR15 = (1U << 15);  ///< Pending bit 15
        constexpr uint32_t PR16 = (1U << 16);  ///< Pending bit 16
        constexpr uint32_t PR17 = (1U << 17);  ///< Pending bit 17
        constexpr uint32_t PR18 = (1U << 18);  ///< Pending bit 18
        constexpr uint32_t PR19 = (1U << 19);  ///< Pending bit 19
        constexpr uint32_t PR20 = (1U << 20);  ///< Pending bit 20
        constexpr uint32_t PR21 = (1U << 21);  ///< Pending bit 21
        constexpr uint32_t PR22 = (1U << 22);  ///< Pending bit 22
        constexpr uint32_t PR29 = (1U << 29);  ///< Pending bit 29
        constexpr uint32_t PR30 = (1U << 30);  ///< Pending bit 30
        constexpr uint32_t PR31 = (1U << 31);  ///< Pending bit 31
    }

    /// IMR2 Register bits
    namespace imr2_bits {
        constexpr uint32_t MR32 = (1U << 0);  ///< Interrupt Mask on external/internal line 32
        constexpr uint32_t MR33 = (1U << 1);  ///< Interrupt Mask on external/internal line 33
        constexpr uint32_t MR34 = (1U << 2);  ///< Interrupt Mask on external/internal line 34
        constexpr uint32_t MR35 = (1U << 3);  ///< Interrupt Mask on external/internal line 35
    }

    /// EMR2 Register bits
    namespace emr2_bits {
        constexpr uint32_t MR32 = (1U << 0);  ///< Event mask on external/internal line 32
        constexpr uint32_t MR33 = (1U << 1);  ///< Event mask on external/internal line 33
        constexpr uint32_t MR34 = (1U << 2);  ///< Event mask on external/internal line 34
        constexpr uint32_t MR35 = (1U << 3);  ///< Event mask on external/internal line 35
    }

    /// RTSR2 Register bits
    namespace rtsr2_bits {
        constexpr uint32_t TR32 = (1U << 0);  ///< Rising trigger event configuration bit of line 32
        constexpr uint32_t TR33 = (1U << 1);  ///< Rising trigger event configuration bit of line 33
    }

    /// FTSR2 Register bits
    namespace ftsr2_bits {
        constexpr uint32_t TR32 = (1U << 0);  ///< Falling trigger event configuration bit of line 32
        constexpr uint32_t TR33 = (1U << 1);  ///< Falling trigger event configuration bit of line 33
    }

    /// SWIER2 Register bits
    namespace swier2_bits {
        constexpr uint32_t SWIER32 = (1U << 0);  ///< Software interrupt on line 32
        constexpr uint32_t SWIER33 = (1U << 1);  ///< Software interrupt on line 33
    }

    /// PR2 Register bits
    namespace pr2_bits {
        constexpr uint32_t PR32 = (1U << 0);  ///< Pending bit on line 32
        constexpr uint32_t PR33 = (1U << 1);  ///< Pending bit on line 33
    }

}

// ============================================================================
// PWR Peripheral
// ============================================================================

namespace pwr {
    /// Base addresses
    constexpr uint32_t PWR_BASE = 0x40007000;

    /// PWR Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - power control register
        volatile uint32_t CSR;  ///< Offset: 0x04 - power control/status register
    };

    /// Peripheral instances
    inline Registers* PWR = reinterpret_cast<Registers*>(PWR_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t LPDS = (1U << 0);  ///< Low-power deep sleep
        constexpr uint32_t PDDS = (1U << 1);  ///< Power down deepsleep
        constexpr uint32_t CWUF = (1U << 2);  ///< Clear wakeup flag
        constexpr uint32_t CSBF = (1U << 3);  ///< Clear standby flag
        constexpr uint32_t PVDE = (1U << 4);  ///< Power voltage detector enable
        constexpr uint32_t PLS = (3 << 5);  ///< PVD level selection
        constexpr uint32_t DBP = (1U << 8);  ///< Disable backup domain write protection
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t WUF = (1U << 0);  ///< Wakeup flag
        constexpr uint32_t SBF = (1U << 1);  ///< Standby flag
        constexpr uint32_t PVDO = (1U << 2);  ///< PVD output
        constexpr uint32_t EWUP1 = (1U << 8);  ///< Enable WKUP1 pin
        constexpr uint32_t EWUP2 = (1U << 9);  ///< Enable WKUP2 pin
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN_BASE = 0x40006400;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t MCR;  ///< Offset: 0x00 - master control register
        volatile uint32_t MSR;  ///< Offset: 0x04 - master status register
        volatile uint32_t TSR;  ///< Offset: 0x08 - transmit status register
        volatile uint32_t RF0R;  ///< Offset: 0x0C - receive FIFO 0 register
        volatile uint32_t RF1R;  ///< Offset: 0x10 - receive FIFO 1 register
        volatile uint32_t IER;  ///< Offset: 0x14 - interrupt enable register
        volatile uint32_t ESR;  ///< Offset: 0x18 - error status register
        volatile uint32_t BTR;  ///< Offset: 0x1C - bit timing register
        volatile uint32_t TI0R;  ///< Offset: 0x180 - TX mailbox identifier register
        volatile uint32_t TDT0R;  ///< Offset: 0x184 - mailbox data length control and time stamp register
        volatile uint32_t TDL0R;  ///< Offset: 0x188 - mailbox data low register
        volatile uint32_t TDH0R;  ///< Offset: 0x18C - mailbox data high register
        volatile uint32_t TI1R;  ///< Offset: 0x190 - TX mailbox identifier register
        volatile uint32_t TDT1R;  ///< Offset: 0x194 - mailbox data length control and time stamp register
        volatile uint32_t TDL1R;  ///< Offset: 0x198 - mailbox data low register
        volatile uint32_t TDH1R;  ///< Offset: 0x19C - mailbox data high register
        volatile uint32_t TI2R;  ///< Offset: 0x1A0 - TX mailbox identifier register
        volatile uint32_t TDT2R;  ///< Offset: 0x1A4 - mailbox data length control and time stamp register
        volatile uint32_t TDL2R;  ///< Offset: 0x1A8 - mailbox data low register
        volatile uint32_t TDH2R;  ///< Offset: 0x1AC - mailbox data high register
        volatile uint32_t RI0R;  ///< Offset: 0x1B0 - receive FIFO mailbox identifier register
        volatile uint32_t RDT0R;  ///< Offset: 0x1B4 - receive FIFO mailbox data length control and time stamp register
        volatile uint32_t RDL0R;  ///< Offset: 0x1B8 - receive FIFO mailbox data low register
        volatile uint32_t RDH0R;  ///< Offset: 0x1BC - receive FIFO mailbox data high register
        volatile uint32_t RI1R;  ///< Offset: 0x1C0 - receive FIFO mailbox identifier register
        volatile uint32_t RDT1R;  ///< Offset: 0x1C4 - receive FIFO mailbox data length control and time stamp register
        volatile uint32_t RDL1R;  ///< Offset: 0x1C8 - receive FIFO mailbox data low register
        volatile uint32_t RDH1R;  ///< Offset: 0x1CC - receive FIFO mailbox data high register
        volatile uint32_t FMR;  ///< Offset: 0x200 - filter master register
        volatile uint32_t FM1R;  ///< Offset: 0x204 - filter mode register
        volatile uint32_t FS1R;  ///< Offset: 0x20C - filter scale register
        volatile uint32_t FFA1R;  ///< Offset: 0x214 - filter FIFO assignment register
        volatile uint32_t FA1R;  ///< Offset: 0x21C - CAN filter activation register
        volatile uint32_t F0R1;  ///< Offset: 0x240 - Filter bank 0 register 1
        volatile uint32_t F0R2;  ///< Offset: 0x244 - Filter bank 0 register 2
        volatile uint32_t F1R1;  ///< Offset: 0x248 - Filter bank 1 register 1
        volatile uint32_t F1R2;  ///< Offset: 0x24C - Filter bank 1 register 2
        volatile uint32_t F2R1;  ///< Offset: 0x250 - Filter bank 2 register 1
        volatile uint32_t F2R2;  ///< Offset: 0x254 - Filter bank 2 register 2
        volatile uint32_t F3R1;  ///< Offset: 0x258 - Filter bank 3 register 1
        volatile uint32_t F3R2;  ///< Offset: 0x25C - Filter bank 3 register 2
        volatile uint32_t F4R1;  ///< Offset: 0x260 - Filter bank 4 register 1
        volatile uint32_t F4R2;  ///< Offset: 0x264 - Filter bank 4 register 2
        volatile uint32_t F5R1;  ///< Offset: 0x268 - Filter bank 5 register 1
        volatile uint32_t F5R2;  ///< Offset: 0x26C - Filter bank 5 register 2
        volatile uint32_t F6R1;  ///< Offset: 0x270 - Filter bank 6 register 1
        volatile uint32_t F6R2;  ///< Offset: 0x274 - Filter bank 6 register 2
        volatile uint32_t F7R1;  ///< Offset: 0x278 - Filter bank 7 register 1
        volatile uint32_t F7R2;  ///< Offset: 0x27C - Filter bank 7 register 2
        volatile uint32_t F8R1;  ///< Offset: 0x280 - Filter bank 8 register 1
        volatile uint32_t F8R2;  ///< Offset: 0x284 - Filter bank 8 register 2
        volatile uint32_t F9R1;  ///< Offset: 0x288 - Filter bank 9 register 1
        volatile uint32_t F9R2;  ///< Offset: 0x28C - Filter bank 9 register 2
        volatile uint32_t F10R1;  ///< Offset: 0x290 - Filter bank 10 register 1
        volatile uint32_t F10R2;  ///< Offset: 0x294 - Filter bank 10 register 2
        volatile uint32_t F11R1;  ///< Offset: 0x298 - Filter bank 11 register 1
        volatile uint32_t F11R2;  ///< Offset: 0x29C - Filter bank 11 register 2
        volatile uint32_t F12R1;  ///< Offset: 0x2A0 - Filter bank 4 register 1
        volatile uint32_t F12R2;  ///< Offset: 0x2A4 - Filter bank 12 register 2
        volatile uint32_t F13R1;  ///< Offset: 0x2A8 - Filter bank 13 register 1
        volatile uint32_t F13R2;  ///< Offset: 0x2AC - Filter bank 13 register 2
        volatile uint32_t F14R1;  ///< Offset: 0x2B0 - Filter bank 14 register 1
        volatile uint32_t F14R2;  ///< Offset: 0x2B4 - Filter bank 14 register 2
        volatile uint32_t F15R1;  ///< Offset: 0x2B8 - Filter bank 15 register 1
        volatile uint32_t F15R2;  ///< Offset: 0x2BC - Filter bank 15 register 2
        volatile uint32_t F16R1;  ///< Offset: 0x2C0 - Filter bank 16 register 1
        volatile uint32_t F16R2;  ///< Offset: 0x2C4 - Filter bank 16 register 2
        volatile uint32_t F17R1;  ///< Offset: 0x2C8 - Filter bank 17 register 1
        volatile uint32_t F17R2;  ///< Offset: 0x2CC - Filter bank 17 register 2
        volatile uint32_t F18R1;  ///< Offset: 0x2D0 - Filter bank 18 register 1
        volatile uint32_t F18R2;  ///< Offset: 0x2D4 - Filter bank 18 register 2
        volatile uint32_t F19R1;  ///< Offset: 0x2D8 - Filter bank 19 register 1
        volatile uint32_t F19R2;  ///< Offset: 0x2DC - Filter bank 19 register 2
        volatile uint32_t F20R1;  ///< Offset: 0x2E0 - Filter bank 20 register 1
        volatile uint32_t F20R2;  ///< Offset: 0x2E4 - Filter bank 20 register 2
        volatile uint32_t F21R1;  ///< Offset: 0x2E8 - Filter bank 21 register 1
        volatile uint32_t F21R2;  ///< Offset: 0x2EC - Filter bank 21 register 2
        volatile uint32_t F22R1;  ///< Offset: 0x2F0 - Filter bank 22 register 1
        volatile uint32_t F22R2;  ///< Offset: 0x2F4 - Filter bank 22 register 2
        volatile uint32_t F23R1;  ///< Offset: 0x2F8 - Filter bank 23 register 1
        volatile uint32_t F23R2;  ///< Offset: 0x2FC - Filter bank 23 register 2
        volatile uint32_t F24R1;  ///< Offset: 0x300 - Filter bank 24 register 1
        volatile uint32_t F24R2;  ///< Offset: 0x304 - Filter bank 24 register 2
        volatile uint32_t F25R1;  ///< Offset: 0x308 - Filter bank 25 register 1
        volatile uint32_t F25R2;  ///< Offset: 0x30C - Filter bank 25 register 2
        volatile uint32_t F26R1;  ///< Offset: 0x310 - Filter bank 26 register 1
        volatile uint32_t F26R2;  ///< Offset: 0x314 - Filter bank 26 register 2
        volatile uint32_t F27R1;  ///< Offset: 0x318 - Filter bank 27 register 1
        volatile uint32_t F27R2;  ///< Offset: 0x31C - Filter bank 27 register 2
    };

    /// Peripheral instances
    inline Registers* CAN = reinterpret_cast<Registers*>(CAN_BASE);

    // Bit definitions
    /// MCR Register bits
    namespace mcr_bits {
        constexpr uint32_t DBF = (1U << 16);  ///< DBF
        constexpr uint32_t RESET = (1U << 15);  ///< RESET
        constexpr uint32_t TTCM = (1U << 7);  ///< TTCM
        constexpr uint32_t ABOM = (1U << 6);  ///< ABOM
        constexpr uint32_t AWUM = (1U << 5);  ///< AWUM
        constexpr uint32_t NART = (1U << 4);  ///< NART
        constexpr uint32_t RFLM = (1U << 3);  ///< RFLM
        constexpr uint32_t TXFP = (1U << 2);  ///< TXFP
        constexpr uint32_t SLEEP = (1U << 1);  ///< SLEEP
        constexpr uint32_t INRQ = (1U << 0);  ///< INRQ
    }

    /// MSR Register bits
    namespace msr_bits {
        constexpr uint32_t RX = (1U << 11);  ///< RX
        constexpr uint32_t SAMP = (1U << 10);  ///< SAMP
        constexpr uint32_t RXM = (1U << 9);  ///< RXM
        constexpr uint32_t TXM = (1U << 8);  ///< TXM
        constexpr uint32_t SLAKI = (1U << 4);  ///< SLAKI
        constexpr uint32_t WKUI = (1U << 3);  ///< WKUI
        constexpr uint32_t ERRI = (1U << 2);  ///< ERRI
        constexpr uint32_t SLAK = (1U << 1);  ///< SLAK
        constexpr uint32_t INAK = (1U << 0);  ///< INAK
    }

    /// TSR Register bits
    namespace tsr_bits {
        constexpr uint32_t LOW2 = (1U << 31);  ///< Lowest priority flag for mailbox 2
        constexpr uint32_t LOW1 = (1U << 30);  ///< Lowest priority flag for mailbox 1
        constexpr uint32_t LOW0 = (1U << 29);  ///< Lowest priority flag for mailbox 0
        constexpr uint32_t TME2 = (1U << 28);  ///< Lowest priority flag for mailbox 2
        constexpr uint32_t TME1 = (1U << 27);  ///< Lowest priority flag for mailbox 1
        constexpr uint32_t TME0 = (1U << 26);  ///< Lowest priority flag for mailbox 0
        constexpr uint32_t CODE = (2 << 24);  ///< CODE
        constexpr uint32_t ABRQ2 = (1U << 23);  ///< ABRQ2
        constexpr uint32_t TERR2 = (1U << 19);  ///< TERR2
        constexpr uint32_t ALST2 = (1U << 18);  ///< ALST2
        constexpr uint32_t TXOK2 = (1U << 17);  ///< TXOK2
        constexpr uint32_t RQCP2 = (1U << 16);  ///< RQCP2
        constexpr uint32_t ABRQ1 = (1U << 15);  ///< ABRQ1
        constexpr uint32_t TERR1 = (1U << 11);  ///< TERR1
        constexpr uint32_t ALST1 = (1U << 10);  ///< ALST1
        constexpr uint32_t TXOK1 = (1U << 9);  ///< TXOK1
        constexpr uint32_t RQCP1 = (1U << 8);  ///< RQCP1
        constexpr uint32_t ABRQ0 = (1U << 7);  ///< ABRQ0
        constexpr uint32_t TERR0 = (1U << 3);  ///< TERR0
        constexpr uint32_t ALST0 = (1U << 2);  ///< ALST0
        constexpr uint32_t TXOK0 = (1U << 1);  ///< TXOK0
        constexpr uint32_t RQCP0 = (1U << 0);  ///< RQCP0
    }

    /// RF0R Register bits
    namespace rf0r_bits {
        constexpr uint32_t RFOM0 = (1U << 5);  ///< RFOM0
        constexpr uint32_t FOVR0 = (1U << 4);  ///< FOVR0
        constexpr uint32_t FULL0 = (1U << 3);  ///< FULL0
        constexpr uint32_t FMP0 = (2 << 0);  ///< FMP0
    }

    /// RF1R Register bits
    namespace rf1r_bits {
        constexpr uint32_t RFOM1 = (1U << 5);  ///< RFOM1
        constexpr uint32_t FOVR1 = (1U << 4);  ///< FOVR1
        constexpr uint32_t FULL1 = (1U << 3);  ///< FULL1
        constexpr uint32_t FMP1 = (2 << 0);  ///< FMP1
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t SLKIE = (1U << 17);  ///< SLKIE
        constexpr uint32_t WKUIE = (1U << 16);  ///< WKUIE
        constexpr uint32_t ERRIE = (1U << 15);  ///< ERRIE
        constexpr uint32_t LECIE = (1U << 11);  ///< LECIE
        constexpr uint32_t BOFIE = (1U << 10);  ///< BOFIE
        constexpr uint32_t EPVIE = (1U << 9);  ///< EPVIE
        constexpr uint32_t EWGIE = (1U << 8);  ///< EWGIE
        constexpr uint32_t FOVIE1 = (1U << 6);  ///< FOVIE1
        constexpr uint32_t FFIE1 = (1U << 5);  ///< FFIE1
        constexpr uint32_t FMPIE1 = (1U << 4);  ///< FMPIE1
        constexpr uint32_t FOVIE0 = (1U << 3);  ///< FOVIE0
        constexpr uint32_t FFIE0 = (1U << 2);  ///< FFIE0
        constexpr uint32_t FMPIE0 = (1U << 1);  ///< FMPIE0
        constexpr uint32_t TMEIE = (1U << 0);  ///< TMEIE
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t REC = (8 << 24);  ///< REC
        constexpr uint32_t TEC = (8 << 16);  ///< TEC
        constexpr uint32_t LEC = (3 << 4);  ///< LEC
        constexpr uint32_t BOFF = (1U << 2);  ///< BOFF
        constexpr uint32_t EPVF = (1U << 1);  ///< EPVF
        constexpr uint32_t EWGF = (1U << 0);  ///< EWGF
    }

    /// BTR Register bits
    namespace btr_bits {
        constexpr uint32_t SILM = (1U << 31);  ///< SILM
        constexpr uint32_t LBKM = (1U << 30);  ///< LBKM
        constexpr uint32_t SJW = (2 << 24);  ///< SJW
        constexpr uint32_t TS2 = (3 << 20);  ///< TS2
        constexpr uint32_t TS1 = (4 << 16);  ///< TS1
        constexpr uint32_t BRP = (10 << 0);  ///< BRP
    }

    /// TI0R Register bits
    namespace ti0r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// TDT0R Register bits
    namespace tdt0r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// TDL0R Register bits
    namespace tdl0r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// TDH0R Register bits
    namespace tdh0r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// TI1R Register bits
    namespace ti1r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// TDT1R Register bits
    namespace tdt1r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// TDL1R Register bits
    namespace tdl1r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// TDH1R Register bits
    namespace tdh1r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// TI2R Register bits
    namespace ti2r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// TDT2R Register bits
    namespace tdt2r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// TDL2R Register bits
    namespace tdl2r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// TDH2R Register bits
    namespace tdh2r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// RI0R Register bits
    namespace ri0r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
    }

    /// RDT0R Register bits
    namespace rdt0r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t FMI = (8 << 8);  ///< FMI
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// RDL0R Register bits
    namespace rdl0r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// RDH0R Register bits
    namespace rdh0r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// RI1R Register bits
    namespace ri1r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
    }

    /// RDT1R Register bits
    namespace rdt1r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t FMI = (8 << 8);  ///< FMI
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// RDL1R Register bits
    namespace rdl1r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// RDH1R Register bits
    namespace rdh1r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// FMR Register bits
    namespace fmr_bits {
        constexpr uint32_t CAN2SB = (6 << 8);  ///< CAN2 start bank
        constexpr uint32_t FINIT = (1U << 0);  ///< Filter init mode
    }

    /// FM1R Register bits
    namespace fm1r_bits {
        constexpr uint32_t FBM0 = (1U << 0);  ///< Filter mode
        constexpr uint32_t FBM1 = (1U << 1);  ///< Filter mode
        constexpr uint32_t FBM2 = (1U << 2);  ///< Filter mode
        constexpr uint32_t FBM3 = (1U << 3);  ///< Filter mode
        constexpr uint32_t FBM4 = (1U << 4);  ///< Filter mode
        constexpr uint32_t FBM5 = (1U << 5);  ///< Filter mode
        constexpr uint32_t FBM6 = (1U << 6);  ///< Filter mode
        constexpr uint32_t FBM7 = (1U << 7);  ///< Filter mode
        constexpr uint32_t FBM8 = (1U << 8);  ///< Filter mode
        constexpr uint32_t FBM9 = (1U << 9);  ///< Filter mode
        constexpr uint32_t FBM10 = (1U << 10);  ///< Filter mode
        constexpr uint32_t FBM11 = (1U << 11);  ///< Filter mode
        constexpr uint32_t FBM12 = (1U << 12);  ///< Filter mode
        constexpr uint32_t FBM13 = (1U << 13);  ///< Filter mode
        constexpr uint32_t FBM14 = (1U << 14);  ///< Filter mode
        constexpr uint32_t FBM15 = (1U << 15);  ///< Filter mode
        constexpr uint32_t FBM16 = (1U << 16);  ///< Filter mode
        constexpr uint32_t FBM17 = (1U << 17);  ///< Filter mode
        constexpr uint32_t FBM18 = (1U << 18);  ///< Filter mode
        constexpr uint32_t FBM19 = (1U << 19);  ///< Filter mode
        constexpr uint32_t FBM20 = (1U << 20);  ///< Filter mode
        constexpr uint32_t FBM21 = (1U << 21);  ///< Filter mode
        constexpr uint32_t FBM22 = (1U << 22);  ///< Filter mode
        constexpr uint32_t FBM23 = (1U << 23);  ///< Filter mode
        constexpr uint32_t FBM24 = (1U << 24);  ///< Filter mode
        constexpr uint32_t FBM25 = (1U << 25);  ///< Filter mode
        constexpr uint32_t FBM26 = (1U << 26);  ///< Filter mode
        constexpr uint32_t FBM27 = (1U << 27);  ///< Filter mode
    }

    /// FS1R Register bits
    namespace fs1r_bits {
        constexpr uint32_t FSC0 = (1U << 0);  ///< Filter scale configuration
        constexpr uint32_t FSC1 = (1U << 1);  ///< Filter scale configuration
        constexpr uint32_t FSC2 = (1U << 2);  ///< Filter scale configuration
        constexpr uint32_t FSC3 = (1U << 3);  ///< Filter scale configuration
        constexpr uint32_t FSC4 = (1U << 4);  ///< Filter scale configuration
        constexpr uint32_t FSC5 = (1U << 5);  ///< Filter scale configuration
        constexpr uint32_t FSC6 = (1U << 6);  ///< Filter scale configuration
        constexpr uint32_t FSC7 = (1U << 7);  ///< Filter scale configuration
        constexpr uint32_t FSC8 = (1U << 8);  ///< Filter scale configuration
        constexpr uint32_t FSC9 = (1U << 9);  ///< Filter scale configuration
        constexpr uint32_t FSC10 = (1U << 10);  ///< Filter scale configuration
        constexpr uint32_t FSC11 = (1U << 11);  ///< Filter scale configuration
        constexpr uint32_t FSC12 = (1U << 12);  ///< Filter scale configuration
        constexpr uint32_t FSC13 = (1U << 13);  ///< Filter scale configuration
        constexpr uint32_t FSC14 = (1U << 14);  ///< Filter scale configuration
        constexpr uint32_t FSC15 = (1U << 15);  ///< Filter scale configuration
        constexpr uint32_t FSC16 = (1U << 16);  ///< Filter scale configuration
        constexpr uint32_t FSC17 = (1U << 17);  ///< Filter scale configuration
        constexpr uint32_t FSC18 = (1U << 18);  ///< Filter scale configuration
        constexpr uint32_t FSC19 = (1U << 19);  ///< Filter scale configuration
        constexpr uint32_t FSC20 = (1U << 20);  ///< Filter scale configuration
        constexpr uint32_t FSC21 = (1U << 21);  ///< Filter scale configuration
        constexpr uint32_t FSC22 = (1U << 22);  ///< Filter scale configuration
        constexpr uint32_t FSC23 = (1U << 23);  ///< Filter scale configuration
        constexpr uint32_t FSC24 = (1U << 24);  ///< Filter scale configuration
        constexpr uint32_t FSC25 = (1U << 25);  ///< Filter scale configuration
        constexpr uint32_t FSC26 = (1U << 26);  ///< Filter scale configuration
        constexpr uint32_t FSC27 = (1U << 27);  ///< Filter scale configuration
    }

    /// FFA1R Register bits
    namespace ffa1r_bits {
        constexpr uint32_t FFA0 = (1U << 0);  ///< Filter FIFO assignment for filter 0
        constexpr uint32_t FFA1 = (1U << 1);  ///< Filter FIFO assignment for filter 1
        constexpr uint32_t FFA2 = (1U << 2);  ///< Filter FIFO assignment for filter 2
        constexpr uint32_t FFA3 = (1U << 3);  ///< Filter FIFO assignment for filter 3
        constexpr uint32_t FFA4 = (1U << 4);  ///< Filter FIFO assignment for filter 4
        constexpr uint32_t FFA5 = (1U << 5);  ///< Filter FIFO assignment for filter 5
        constexpr uint32_t FFA6 = (1U << 6);  ///< Filter FIFO assignment for filter 6
        constexpr uint32_t FFA7 = (1U << 7);  ///< Filter FIFO assignment for filter 7
        constexpr uint32_t FFA8 = (1U << 8);  ///< Filter FIFO assignment for filter 8
        constexpr uint32_t FFA9 = (1U << 9);  ///< Filter FIFO assignment for filter 9
        constexpr uint32_t FFA10 = (1U << 10);  ///< Filter FIFO assignment for filter 10
        constexpr uint32_t FFA11 = (1U << 11);  ///< Filter FIFO assignment for filter 11
        constexpr uint32_t FFA12 = (1U << 12);  ///< Filter FIFO assignment for filter 12
        constexpr uint32_t FFA13 = (1U << 13);  ///< Filter FIFO assignment for filter 13
        constexpr uint32_t FFA14 = (1U << 14);  ///< Filter FIFO assignment for filter 14
        constexpr uint32_t FFA15 = (1U << 15);  ///< Filter FIFO assignment for filter 15
        constexpr uint32_t FFA16 = (1U << 16);  ///< Filter FIFO assignment for filter 16
        constexpr uint32_t FFA17 = (1U << 17);  ///< Filter FIFO assignment for filter 17
        constexpr uint32_t FFA18 = (1U << 18);  ///< Filter FIFO assignment for filter 18
        constexpr uint32_t FFA19 = (1U << 19);  ///< Filter FIFO assignment for filter 19
        constexpr uint32_t FFA20 = (1U << 20);  ///< Filter FIFO assignment for filter 20
        constexpr uint32_t FFA21 = (1U << 21);  ///< Filter FIFO assignment for filter 21
        constexpr uint32_t FFA22 = (1U << 22);  ///< Filter FIFO assignment for filter 22
        constexpr uint32_t FFA23 = (1U << 23);  ///< Filter FIFO assignment for filter 23
        constexpr uint32_t FFA24 = (1U << 24);  ///< Filter FIFO assignment for filter 24
        constexpr uint32_t FFA25 = (1U << 25);  ///< Filter FIFO assignment for filter 25
        constexpr uint32_t FFA26 = (1U << 26);  ///< Filter FIFO assignment for filter 26
        constexpr uint32_t FFA27 = (1U << 27);  ///< Filter FIFO assignment for filter 27
    }

    /// FA1R Register bits
    namespace fa1r_bits {
        constexpr uint32_t FACT0 = (1U << 0);  ///< Filter active
        constexpr uint32_t FACT1 = (1U << 1);  ///< Filter active
        constexpr uint32_t FACT2 = (1U << 2);  ///< Filter active
        constexpr uint32_t FACT3 = (1U << 3);  ///< Filter active
        constexpr uint32_t FACT4 = (1U << 4);  ///< Filter active
        constexpr uint32_t FACT5 = (1U << 5);  ///< Filter active
        constexpr uint32_t FACT6 = (1U << 6);  ///< Filter active
        constexpr uint32_t FACT7 = (1U << 7);  ///< Filter active
        constexpr uint32_t FACT8 = (1U << 8);  ///< Filter active
        constexpr uint32_t FACT9 = (1U << 9);  ///< Filter active
        constexpr uint32_t FACT10 = (1U << 10);  ///< Filter active
        constexpr uint32_t FACT11 = (1U << 11);  ///< Filter active
        constexpr uint32_t FACT12 = (1U << 12);  ///< Filter active
        constexpr uint32_t FACT13 = (1U << 13);  ///< Filter active
        constexpr uint32_t FACT14 = (1U << 14);  ///< Filter active
        constexpr uint32_t FACT15 = (1U << 15);  ///< Filter active
        constexpr uint32_t FACT16 = (1U << 16);  ///< Filter active
        constexpr uint32_t FACT17 = (1U << 17);  ///< Filter active
        constexpr uint32_t FACT18 = (1U << 18);  ///< Filter active
        constexpr uint32_t FACT19 = (1U << 19);  ///< Filter active
        constexpr uint32_t FACT20 = (1U << 20);  ///< Filter active
        constexpr uint32_t FACT21 = (1U << 21);  ///< Filter active
        constexpr uint32_t FACT22 = (1U << 22);  ///< Filter active
        constexpr uint32_t FACT23 = (1U << 23);  ///< Filter active
        constexpr uint32_t FACT24 = (1U << 24);  ///< Filter active
        constexpr uint32_t FACT25 = (1U << 25);  ///< Filter active
        constexpr uint32_t FACT26 = (1U << 26);  ///< Filter active
        constexpr uint32_t FACT27 = (1U << 27);  ///< Filter active
    }

    /// F0R1 Register bits
    namespace f0r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F0R2 Register bits
    namespace f0r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F1R1 Register bits
    namespace f1r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F1R2 Register bits
    namespace f1r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F2R1 Register bits
    namespace f2r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F2R2 Register bits
    namespace f2r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F3R1 Register bits
    namespace f3r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F3R2 Register bits
    namespace f3r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F4R1 Register bits
    namespace f4r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F4R2 Register bits
    namespace f4r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F5R1 Register bits
    namespace f5r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F5R2 Register bits
    namespace f5r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F6R1 Register bits
    namespace f6r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F6R2 Register bits
    namespace f6r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F7R1 Register bits
    namespace f7r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F7R2 Register bits
    namespace f7r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F8R1 Register bits
    namespace f8r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F8R2 Register bits
    namespace f8r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F9R1 Register bits
    namespace f9r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F9R2 Register bits
    namespace f9r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F10R1 Register bits
    namespace f10r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F10R2 Register bits
    namespace f10r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F11R1 Register bits
    namespace f11r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F11R2 Register bits
    namespace f11r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F12R1 Register bits
    namespace f12r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F12R2 Register bits
    namespace f12r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F13R1 Register bits
    namespace f13r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F13R2 Register bits
    namespace f13r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F14R1 Register bits
    namespace f14r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F14R2 Register bits
    namespace f14r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F15R1 Register bits
    namespace f15r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F15R2 Register bits
    namespace f15r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F16R1 Register bits
    namespace f16r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F16R2 Register bits
    namespace f16r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F17R1 Register bits
    namespace f17r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F17R2 Register bits
    namespace f17r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F18R1 Register bits
    namespace f18r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F18R2 Register bits
    namespace f18r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F19R1 Register bits
    namespace f19r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F19R2 Register bits
    namespace f19r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F20R1 Register bits
    namespace f20r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F20R2 Register bits
    namespace f20r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F21R1 Register bits
    namespace f21r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F21R2 Register bits
    namespace f21r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F22R1 Register bits
    namespace f22r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F22R2 Register bits
    namespace f22r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F23R1 Register bits
    namespace f23r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F23R2 Register bits
    namespace f23r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F24R1 Register bits
    namespace f24r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F24R2 Register bits
    namespace f24r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F25R1 Register bits
    namespace f25r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F25R2 Register bits
    namespace f25r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F26R1 Register bits
    namespace f26r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F26R2 Register bits
    namespace f26r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F27R1 Register bits
    namespace f27r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F27R2 Register bits
    namespace f27r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

}

// ============================================================================
// USB Peripheral
// ============================================================================

namespace usb {
    /// Base addresses
    constexpr uint32_t USB_FS_BASE = 0x40005C00;

    /// USB Register structure
    struct Registers {
        volatile uint32_t USB_EP0R;  ///< Offset: 0x00 - endpoint 0 register
        volatile uint32_t USB_EP1R;  ///< Offset: 0x04 - endpoint 1 register
        volatile uint32_t USB_EP2R;  ///< Offset: 0x08 - endpoint 2 register
        volatile uint32_t USB_EP3R;  ///< Offset: 0x0C - endpoint 3 register
        volatile uint32_t USB_EP4R;  ///< Offset: 0x10 - endpoint 4 register
        volatile uint32_t USB_EP5R;  ///< Offset: 0x14 - endpoint 5 register
        volatile uint32_t USB_EP6R;  ///< Offset: 0x18 - endpoint 6 register
        volatile uint32_t USB_EP7R;  ///< Offset: 0x1C - endpoint 7 register
        volatile uint32_t USB_CNTR;  ///< Offset: 0x40 - control register
        volatile uint32_t ISTR;  ///< Offset: 0x44 - interrupt status register
        volatile uint32_t FNR;  ///< Offset: 0x48 - frame number register
        volatile uint32_t DADDR;  ///< Offset: 0x4C - device address
        volatile uint32_t BTABLE;  ///< Offset: 0x50 - Buffer table address
    };

    /// Peripheral instances
    inline Registers* USB_FS = reinterpret_cast<Registers*>(USB_FS_BASE);

    // Bit definitions
    /// USB_EP0R Register bits
    namespace usb_ep0r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// USB_EP1R Register bits
    namespace usb_ep1r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// USB_EP2R Register bits
    namespace usb_ep2r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// USB_EP3R Register bits
    namespace usb_ep3r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// USB_EP4R Register bits
    namespace usb_ep4r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// USB_EP5R Register bits
    namespace usb_ep5r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// USB_EP6R Register bits
    namespace usb_ep6r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// USB_EP7R Register bits
    namespace usb_ep7r_bits {
        constexpr uint32_t EA = (4 << 0);  ///< Endpoint address
        constexpr uint32_t STAT_TX = (2 << 4);  ///< Status bits, for transmission transfers
        constexpr uint32_t DTOG_TX = (1U << 6);  ///< Data Toggle, for transmission transfers
        constexpr uint32_t CTR_TX = (1U << 7);  ///< Correct Transfer for transmission
        constexpr uint32_t EP_KIND = (1U << 8);  ///< Endpoint kind
        constexpr uint32_t EP_TYPE = (2 << 9);  ///< Endpoint type
        constexpr uint32_t SETUP = (1U << 11);  ///< Setup transaction completed
        constexpr uint32_t STAT_RX = (2 << 12);  ///< Status bits, for reception transfers
        constexpr uint32_t DTOG_RX = (1U << 14);  ///< Data Toggle, for reception transfers
        constexpr uint32_t CTR_RX = (1U << 15);  ///< Correct transfer for reception
    }

    /// USB_CNTR Register bits
    namespace usb_cntr_bits {
        constexpr uint32_t FRES = (1U << 0);  ///< Force USB Reset
        constexpr uint32_t PDWN = (1U << 1);  ///< Power down
        constexpr uint32_t LPMODE = (1U << 2);  ///< Low-power mode
        constexpr uint32_t FSUSP = (1U << 3);  ///< Force suspend
        constexpr uint32_t RESUME = (1U << 4);  ///< Resume request
        constexpr uint32_t ESOFM = (1U << 8);  ///< Expected start of frame interrupt mask
        constexpr uint32_t SOFM = (1U << 9);  ///< Start of frame interrupt mask
        constexpr uint32_t RESETM = (1U << 10);  ///< USB reset interrupt mask
        constexpr uint32_t SUSPM = (1U << 11);  ///< Suspend mode interrupt mask
        constexpr uint32_t WKUPM = (1U << 12);  ///< Wakeup interrupt mask
        constexpr uint32_t ERRM = (1U << 13);  ///< Error interrupt mask
        constexpr uint32_t PMAOVRM = (1U << 14);  ///< Packet memory area over / underrun interrupt mask
        constexpr uint32_t CTRM = (1U << 15);  ///< Correct transfer interrupt mask
    }

    /// ISTR Register bits
    namespace istr_bits {
        constexpr uint32_t EP_ID = (4 << 0);  ///< Endpoint Identifier
        constexpr uint32_t DIR = (1U << 4);  ///< Direction of transaction
        constexpr uint32_t ESOF = (1U << 8);  ///< Expected start frame
        constexpr uint32_t SOF = (1U << 9);  ///< start of frame
        constexpr uint32_t RESET = (1U << 10);  ///< reset request
        constexpr uint32_t SUSP = (1U << 11);  ///< Suspend mode request
        constexpr uint32_t WKUP = (1U << 12);  ///< Wakeup
        constexpr uint32_t ERR = (1U << 13);  ///< Error
        constexpr uint32_t PMAOVR = (1U << 14);  ///< Packet memory area over / underrun
        constexpr uint32_t CTR = (1U << 15);  ///< Correct transfer
    }

    /// FNR Register bits
    namespace fnr_bits {
        constexpr uint32_t FN = (11 << 0);  ///< Frame number
        constexpr uint32_t LSOF = (2 << 11);  ///< Lost SOF
        constexpr uint32_t LCK = (1U << 13);  ///< Locked
        constexpr uint32_t RXDM = (1U << 14);  ///< Receive data - line status
        constexpr uint32_t RXDP = (1U << 15);  ///< Receive data + line status
    }

    /// DADDR Register bits
    namespace daddr_bits {
        constexpr uint32_t ADD = (1U << 0);  ///< Device address
        constexpr uint32_t ADD1 = (1U << 1);  ///< Device address
        constexpr uint32_t ADD2 = (1U << 2);  ///< Device address
        constexpr uint32_t ADD3 = (1U << 3);  ///< Device address
        constexpr uint32_t ADD4 = (1U << 4);  ///< Device address
        constexpr uint32_t ADD5 = (1U << 5);  ///< Device address
        constexpr uint32_t ADD6 = (1U << 6);  ///< Device address
        constexpr uint32_t EF = (1U << 7);  ///< Enable function
    }

    /// BTABLE Register bits
    namespace btable_bits {
        constexpr uint32_t BTABLE = (13 << 3);  ///< Buffer table
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C1_BASE = 0x40005400;
    constexpr uint32_t I2C2_BASE = 0x40005800;
    constexpr uint32_t I2C3_BASE = 0x40007800;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t OAR1;  ///< Offset: 0x08 - Own address register 1
        volatile uint32_t OAR2;  ///< Offset: 0x0C - Own address register 2
        volatile uint32_t TIMINGR;  ///< Offset: 0x10 - Timing register
        volatile uint32_t TIMEOUTR;  ///< Offset: 0x14 - Status register 1
        volatile uint32_t ISR;  ///< Offset: 0x18 - Interrupt and Status register
        volatile uint32_t ICR;  ///< Offset: 0x1C - Interrupt clear register
        volatile uint32_t PECR;  ///< Offset: 0x20 - PEC register
        volatile uint32_t RXDR;  ///< Offset: 0x24 - Receive data register
        volatile uint32_t TXDR;  ///< Offset: 0x28 - Transmit data register
    };

    /// Peripheral instances
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);
    inline Registers* I2C2 = reinterpret_cast<Registers*>(I2C2_BASE);
    inline Registers* I2C3 = reinterpret_cast<Registers*>(I2C3_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t PE = (1U << 0);  ///< Peripheral enable
        constexpr uint32_t TXIE = (1U << 1);  ///< TX Interrupt enable
        constexpr uint32_t RXIE = (1U << 2);  ///< RX Interrupt enable
        constexpr uint32_t ADDRIE = (1U << 3);  ///< Address match interrupt enable (slave only)
        constexpr uint32_t NACKIE = (1U << 4);  ///< Not acknowledge received interrupt enable
        constexpr uint32_t STOPIE = (1U << 5);  ///< STOP detection Interrupt enable
        constexpr uint32_t TCIE = (1U << 6);  ///< Transfer Complete interrupt enable
        constexpr uint32_t ERRIE = (1U << 7);  ///< Error interrupts enable
        constexpr uint32_t DNF = (4 << 8);  ///< Digital noise filter
        constexpr uint32_t ANFOFF = (1U << 12);  ///< Analog noise filter OFF
        constexpr uint32_t SWRST = (1U << 13);  ///< Software reset
        constexpr uint32_t TXDMAEN = (1U << 14);  ///< DMA transmission requests enable
        constexpr uint32_t RXDMAEN = (1U << 15);  ///< DMA reception requests enable
        constexpr uint32_t SBC = (1U << 16);  ///< Slave byte control
        constexpr uint32_t NOSTRETCH = (1U << 17);  ///< Clock stretching disable
        constexpr uint32_t WUPEN = (1U << 18);  ///< Wakeup from STOP enable
        constexpr uint32_t GCEN = (1U << 19);  ///< General call enable
        constexpr uint32_t SMBHEN = (1U << 20);  ///< SMBus Host address enable
        constexpr uint32_t SMBDEN = (1U << 21);  ///< SMBus Device Default address enable
        constexpr uint32_t ALERTEN = (1U << 22);  ///< SMBUS alert enable
        constexpr uint32_t PECEN = (1U << 23);  ///< PEC enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t PECBYTE = (1U << 26);  ///< Packet error checking byte
        constexpr uint32_t AUTOEND = (1U << 25);  ///< Automatic end mode (master mode)
        constexpr uint32_t RELOAD = (1U << 24);  ///< NBYTES reload mode
        constexpr uint32_t NBYTES = (8 << 16);  ///< Number of bytes
        constexpr uint32_t NACK = (1U << 15);  ///< NACK generation (slave mode)
        constexpr uint32_t STOP = (1U << 14);  ///< Stop generation (master mode)
        constexpr uint32_t START = (1U << 13);  ///< Start generation
        constexpr uint32_t HEAD10R = (1U << 12);  ///< 10-bit address header only read direction (master receiver mode)
        constexpr uint32_t ADD10 = (1U << 11);  ///< 10-bit addressing mode (master mode)
        constexpr uint32_t RD_WRN = (1U << 10);  ///< Transfer direction (master mode)
        constexpr uint32_t SADD8 = (2 << 8);  ///< Slave address bit 9:8 (master mode)
        constexpr uint32_t SADD1 = (7 << 1);  ///< Slave address bit 7:1 (master mode)
        constexpr uint32_t SADD0 = (1U << 0);  ///< Slave address bit 0 (master mode)
    }

    /// OAR1 Register bits
    namespace oar1_bits {
        constexpr uint32_t OA1_0 = (1U << 0);  ///< Interface address
        constexpr uint32_t OA1_1 = (7 << 1);  ///< Interface address
        constexpr uint32_t OA1_8 = (2 << 8);  ///< Interface address
        constexpr uint32_t OA1MODE = (1U << 10);  ///< Own Address 1 10-bit mode
        constexpr uint32_t OA1EN = (1U << 15);  ///< Own Address 1 enable
    }

    /// OAR2 Register bits
    namespace oar2_bits {
        constexpr uint32_t OA2 = (7 << 1);  ///< Interface address
        constexpr uint32_t OA2MSK = (3 << 8);  ///< Own Address 2 masks
        constexpr uint32_t OA2EN = (1U << 15);  ///< Own Address 2 enable
    }

    /// TIMINGR Register bits
    namespace timingr_bits {
        constexpr uint32_t SCLL = (8 << 0);  ///< SCL low period (master mode)
        constexpr uint32_t SCLH = (8 << 8);  ///< SCL high period (master mode)
        constexpr uint32_t SDADEL = (4 << 16);  ///< Data hold time
        constexpr uint32_t SCLDEL = (4 << 20);  ///< Data setup time
        constexpr uint32_t PRESC = (4 << 28);  ///< Timing prescaler
    }

    /// TIMEOUTR Register bits
    namespace timeoutr_bits {
        constexpr uint32_t TIMEOUTA = (12 << 0);  ///< Bus timeout A
        constexpr uint32_t TIDLE = (1U << 12);  ///< Idle clock timeout detection
        constexpr uint32_t TIMOUTEN = (1U << 15);  ///< Clock timeout enable
        constexpr uint32_t TIMEOUTB = (12 << 16);  ///< Bus timeout B
        constexpr uint32_t TEXTEN = (1U << 31);  ///< Extended clock timeout enable
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t ADDCODE = (7 << 17);  ///< Address match code (Slave mode)
        constexpr uint32_t DIR = (1U << 16);  ///< Transfer direction (Slave mode)
        constexpr uint32_t BUSY = (1U << 15);  ///< Bus busy
        constexpr uint32_t ALERT = (1U << 13);  ///< SMBus alert
        constexpr uint32_t TIMEOUT = (1U << 12);  ///< Timeout or t_low detection flag
        constexpr uint32_t PECERR = (1U << 11);  ///< PEC Error in reception
        constexpr uint32_t OVR = (1U << 10);  ///< Overrun/Underrun (slave mode)
        constexpr uint32_t ARLO = (1U << 9);  ///< Arbitration lost
        constexpr uint32_t BERR = (1U << 8);  ///< Bus error
        constexpr uint32_t TCR = (1U << 7);  ///< Transfer Complete Reload
        constexpr uint32_t TC = (1U << 6);  ///< Transfer Complete (master mode)
        constexpr uint32_t STOPF = (1U << 5);  ///< Stop detection flag
        constexpr uint32_t NACKF = (1U << 4);  ///< Not acknowledge received flag
        constexpr uint32_t ADDR = (1U << 3);  ///< Address matched (slave mode)
        constexpr uint32_t RXNE = (1U << 2);  ///< Receive data register not empty (receivers)
        constexpr uint32_t TXIS = (1U << 1);  ///< Transmit interrupt status (transmitters)
        constexpr uint32_t TXE = (1U << 0);  ///< Transmit data register empty (transmitters)
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t ALERTCF = (1U << 13);  ///< Alert flag clear
        constexpr uint32_t TIMOUTCF = (1U << 12);  ///< Timeout detection flag clear
        constexpr uint32_t PECCF = (1U << 11);  ///< PEC Error flag clear
        constexpr uint32_t OVRCF = (1U << 10);  ///< Overrun/Underrun flag clear
        constexpr uint32_t ARLOCF = (1U << 9);  ///< Arbitration lost flag clear
        constexpr uint32_t BERRCF = (1U << 8);  ///< Bus error flag clear
        constexpr uint32_t STOPCF = (1U << 5);  ///< Stop detection flag clear
        constexpr uint32_t NACKCF = (1U << 4);  ///< Not Acknowledge flag clear
        constexpr uint32_t ADDRCF = (1U << 3);  ///< Address Matched flag clear
    }

    /// PECR Register bits
    namespace pecr_bits {
        constexpr uint32_t PEC = (8 << 0);  ///< Packet error checking register
    }

    /// RXDR Register bits
    namespace rxdr_bits {
        constexpr uint32_t RXDATA = (8 << 0);  ///< 8-bit receive data
    }

    /// TXDR Register bits
    namespace txdr_bits {
        constexpr uint32_t TXDATA = (8 << 0);  ///< 8-bit transmit data
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t IWDG_BASE = 0x40003000;
    constexpr uint32_t WWDG_BASE = 0x40002C00;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t KR;  ///< Offset: 0x00 - Key register
        volatile uint32_t PR;  ///< Offset: 0x04 - Prescaler register
        volatile uint32_t RLR;  ///< Offset: 0x08 - Reload register
        volatile uint32_t SR;  ///< Offset: 0x0C - Status register
        volatile uint32_t WINR;  ///< Offset: 0x10 - Window register
    };

    /// Peripheral instances
    inline Registers* IWDG = reinterpret_cast<Registers*>(IWDG_BASE);
    inline Registers* WWDG = reinterpret_cast<Registers*>(WWDG_BASE);

    // Bit definitions
    /// KR Register bits
    namespace kr_bits {
        constexpr uint32_t KEY = (16 << 0);  ///< Key value
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (3 << 0);  ///< Prescaler divider
    }

    /// RLR Register bits
    namespace rlr_bits {
        constexpr uint32_t RL = (12 << 0);  ///< Watchdog counter reload value
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t PVU = (1U << 0);  ///< Watchdog prescaler value update
        constexpr uint32_t RVU = (1U << 1);  ///< Watchdog counter reload value update
        constexpr uint32_t WVU = (1U << 2);  ///< Watchdog counter window value update
    }

    /// WINR Register bits
    namespace winr_bits {
        constexpr uint32_t WIN = (12 << 0);  ///< Watchdog counter window value
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x40002800;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t TR;  ///< Offset: 0x00 - time register
        volatile uint32_t DR;  ///< Offset: 0x04 - date register
        volatile uint32_t CR;  ///< Offset: 0x08 - control register
        volatile uint32_t ISR;  ///< Offset: 0x0C - initialization and status register
        volatile uint32_t PRER;  ///< Offset: 0x10 - prescaler register
        volatile uint32_t WUTR;  ///< Offset: 0x14 - wakeup timer register
        volatile uint32_t ALRMAR;  ///< Offset: 0x1C - alarm A register
        volatile uint32_t ALRMBR;  ///< Offset: 0x20 - alarm B register
        volatile uint32_t WPR;  ///< Offset: 0x24 - write protection register
        volatile uint32_t SSR;  ///< Offset: 0x28 - sub second register
        volatile uint32_t SHIFTR;  ///< Offset: 0x2C - shift control register
        volatile uint32_t TSTR;  ///< Offset: 0x30 - time stamp time register
        volatile uint32_t TSDR;  ///< Offset: 0x34 - time stamp date register
        volatile uint32_t TSSSR;  ///< Offset: 0x38 - timestamp sub second register
        volatile uint32_t CALR;  ///< Offset: 0x3C - calibration register
        volatile uint32_t TAFCR;  ///< Offset: 0x40 - tamper and alternate function configuration register
        volatile uint32_t ALRMASSR;  ///< Offset: 0x44 - alarm A sub second register
        volatile uint32_t ALRMBSSR;  ///< Offset: 0x48 - alarm B sub second register
        volatile uint32_t BKP0R;  ///< Offset: 0x50 - backup register
        volatile uint32_t BKP1R;  ///< Offset: 0x54 - backup register
        volatile uint32_t BKP2R;  ///< Offset: 0x58 - backup register
        volatile uint32_t BKP3R;  ///< Offset: 0x5C - backup register
        volatile uint32_t BKP4R;  ///< Offset: 0x60 - backup register
        volatile uint32_t BKP5R;  ///< Offset: 0x64 - backup register
        volatile uint32_t BKP6R;  ///< Offset: 0x68 - backup register
        volatile uint32_t BKP7R;  ///< Offset: 0x6C - backup register
        volatile uint32_t BKP8R;  ///< Offset: 0x70 - backup register
        volatile uint32_t BKP9R;  ///< Offset: 0x74 - backup register
        volatile uint32_t BKP10R;  ///< Offset: 0x78 - backup register
        volatile uint32_t BKP11R;  ///< Offset: 0x7C - backup register
        volatile uint32_t BKP12R;  ///< Offset: 0x80 - backup register
        volatile uint32_t BKP13R;  ///< Offset: 0x84 - backup register
        volatile uint32_t BKP14R;  ///< Offset: 0x88 - backup register
        volatile uint32_t BKP15R;  ///< Offset: 0x8C - backup register
        volatile uint32_t BKP16R;  ///< Offset: 0x90 - backup register
        volatile uint32_t BKP17R;  ///< Offset: 0x94 - backup register
        volatile uint32_t BKP18R;  ///< Offset: 0x98 - backup register
        volatile uint32_t BKP19R;  ///< Offset: 0x9C - backup register
        volatile uint32_t BKP20R;  ///< Offset: 0xA0 - backup register
        volatile uint32_t BKP21R;  ///< Offset: 0xA4 - backup register
        volatile uint32_t BKP22R;  ///< Offset: 0xA8 - backup register
        volatile uint32_t BKP23R;  ///< Offset: 0xAC - backup register
        volatile uint32_t BKP24R;  ///< Offset: 0xB0 - backup register
        volatile uint32_t BKP25R;  ///< Offset: 0xB4 - backup register
        volatile uint32_t BKP26R;  ///< Offset: 0xB8 - backup register
        volatile uint32_t BKP27R;  ///< Offset: 0xBC - backup register
        volatile uint32_t BKP28R;  ///< Offset: 0xC0 - backup register
        volatile uint32_t BKP29R;  ///< Offset: 0xC4 - backup register
        volatile uint32_t BKP30R;  ///< Offset: 0xC8 - backup register
        volatile uint32_t BKP31R;  ///< Offset: 0xCC - backup register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// TR Register bits
    namespace tr_bits {
        constexpr uint32_t PM = (1U << 22);  ///< AM/PM notation
        constexpr uint32_t HT = (2 << 20);  ///< Hour tens in BCD format
        constexpr uint32_t HU = (4 << 16);  ///< Hour units in BCD format
        constexpr uint32_t MNT = (3 << 12);  ///< Minute tens in BCD format
        constexpr uint32_t MNU = (4 << 8);  ///< Minute units in BCD format
        constexpr uint32_t ST = (3 << 4);  ///< Second tens in BCD format
        constexpr uint32_t SU = (4 << 0);  ///< Second units in BCD format
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t YT = (4 << 20);  ///< Year tens in BCD format
        constexpr uint32_t YU = (4 << 16);  ///< Year units in BCD format
        constexpr uint32_t WDU = (3 << 13);  ///< Week day units
        constexpr uint32_t MT = (1U << 12);  ///< Month tens in BCD format
        constexpr uint32_t MU = (4 << 8);  ///< Month units in BCD format
        constexpr uint32_t DT = (2 << 4);  ///< Date tens in BCD format
        constexpr uint32_t DU = (4 << 0);  ///< Date units in BCD format
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WCKSEL = (3 << 0);  ///< Wakeup clock selection
        constexpr uint32_t TSEDGE = (1U << 3);  ///< Time-stamp event active edge
        constexpr uint32_t REFCKON = (1U << 4);  ///< Reference clock detection enable (50 or 60 Hz)
        constexpr uint32_t BYPSHAD = (1U << 5);  ///< Bypass the shadow registers
        constexpr uint32_t FMT = (1U << 6);  ///< Hour format
        constexpr uint32_t ALRAE = (1U << 8);  ///< Alarm A enable
        constexpr uint32_t ALRBE = (1U << 9);  ///< Alarm B enable
        constexpr uint32_t WUTE = (1U << 10);  ///< Wakeup timer enable
        constexpr uint32_t TSE = (1U << 11);  ///< Time stamp enable
        constexpr uint32_t ALRAIE = (1U << 12);  ///< Alarm A interrupt enable
        constexpr uint32_t ALRBIE = (1U << 13);  ///< Alarm B interrupt enable
        constexpr uint32_t WUTIE = (1U << 14);  ///< Wakeup timer interrupt enable
        constexpr uint32_t TSIE = (1U << 15);  ///< Time-stamp interrupt enable
        constexpr uint32_t ADD1H = (1U << 16);  ///< Add 1 hour (summer time change)
        constexpr uint32_t SUB1H = (1U << 17);  ///< Subtract 1 hour (winter time change)
        constexpr uint32_t BKP = (1U << 18);  ///< Backup
        constexpr uint32_t COSEL = (1U << 19);  ///< Calibration output selection
        constexpr uint32_t POL = (1U << 20);  ///< Output polarity
        constexpr uint32_t OSEL = (2 << 21);  ///< Output selection
        constexpr uint32_t COE = (1U << 23);  ///< Calibration output enable
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t ALRAWF = (1U << 0);  ///< Alarm A write flag
        constexpr uint32_t ALRBWF = (1U << 1);  ///< Alarm B write flag
        constexpr uint32_t WUTWF = (1U << 2);  ///< Wakeup timer write flag
        constexpr uint32_t SHPF = (1U << 3);  ///< Shift operation pending
        constexpr uint32_t INITS = (1U << 4);  ///< Initialization status flag
        constexpr uint32_t RSF = (1U << 5);  ///< Registers synchronization flag
        constexpr uint32_t INITF = (1U << 6);  ///< Initialization flag
        constexpr uint32_t INIT = (1U << 7);  ///< Initialization mode
        constexpr uint32_t ALRAF = (1U << 8);  ///< Alarm A flag
        constexpr uint32_t ALRBF = (1U << 9);  ///< Alarm B flag
        constexpr uint32_t WUTF = (1U << 10);  ///< Wakeup timer flag
        constexpr uint32_t TSF = (1U << 11);  ///< Time-stamp flag
        constexpr uint32_t TSOVF = (1U << 12);  ///< Time-stamp overflow flag
        constexpr uint32_t TAMP1F = (1U << 13);  ///< Tamper detection flag
        constexpr uint32_t TAMP2F = (1U << 14);  ///< RTC_TAMP2 detection flag
        constexpr uint32_t TAMP3F = (1U << 15);  ///< RTC_TAMP3 detection flag
        constexpr uint32_t RECALPF = (1U << 16);  ///< Recalibration pending Flag
    }

    /// PRER Register bits
    namespace prer_bits {
        constexpr uint32_t PREDIV_A = (7 << 16);  ///< Asynchronous prescaler factor
        constexpr uint32_t PREDIV_S = (15 << 0);  ///< Synchronous prescaler factor
    }

    /// WUTR Register bits
    namespace wutr_bits {
        constexpr uint32_t WUT = (16 << 0);  ///< Wakeup auto-reload value bits
    }

    /// ALRMAR Register bits
    namespace alrmar_bits {
        constexpr uint32_t MSK4 = (1U << 31);  ///< Alarm A date mask
        constexpr uint32_t WDSEL = (1U << 30);  ///< Week day selection
        constexpr uint32_t DT = (2 << 28);  ///< Date tens in BCD format
        constexpr uint32_t DU = (4 << 24);  ///< Date units or day in BCD format
        constexpr uint32_t MSK3 = (1U << 23);  ///< Alarm A hours mask
        constexpr uint32_t PM = (1U << 22);  ///< AM/PM notation
        constexpr uint32_t HT = (2 << 20);  ///< Hour tens in BCD format
        constexpr uint32_t HU = (4 << 16);  ///< Hour units in BCD format
        constexpr uint32_t MSK2 = (1U << 15);  ///< Alarm A minutes mask
        constexpr uint32_t MNT = (3 << 12);  ///< Minute tens in BCD format
        constexpr uint32_t MNU = (4 << 8);  ///< Minute units in BCD format
        constexpr uint32_t MSK1 = (1U << 7);  ///< Alarm A seconds mask
        constexpr uint32_t ST = (3 << 4);  ///< Second tens in BCD format
        constexpr uint32_t SU = (4 << 0);  ///< Second units in BCD format
    }

    /// ALRMBR Register bits
    namespace alrmbr_bits {
        constexpr uint32_t MSK4 = (1U << 31);  ///< Alarm B date mask
        constexpr uint32_t WDSEL = (1U << 30);  ///< Week day selection
        constexpr uint32_t DT = (2 << 28);  ///< Date tens in BCD format
        constexpr uint32_t DU = (4 << 24);  ///< Date units or day in BCD format
        constexpr uint32_t MSK3 = (1U << 23);  ///< Alarm B hours mask
        constexpr uint32_t PM = (1U << 22);  ///< AM/PM notation
        constexpr uint32_t HT = (2 << 20);  ///< Hour tens in BCD format
        constexpr uint32_t HU = (4 << 16);  ///< Hour units in BCD format
        constexpr uint32_t MSK2 = (1U << 15);  ///< Alarm B minutes mask
        constexpr uint32_t MNT = (3 << 12);  ///< Minute tens in BCD format
        constexpr uint32_t MNU = (4 << 8);  ///< Minute units in BCD format
        constexpr uint32_t MSK1 = (1U << 7);  ///< Alarm B seconds mask
        constexpr uint32_t ST = (3 << 4);  ///< Second tens in BCD format
        constexpr uint32_t SU = (4 << 0);  ///< Second units in BCD format
    }

    /// WPR Register bits
    namespace wpr_bits {
        constexpr uint32_t KEY = (8 << 0);  ///< Write protection key
    }

    /// SSR Register bits
    namespace ssr_bits {
        constexpr uint32_t SS = (16 << 0);  ///< Sub second value
    }

    /// SHIFTR Register bits
    namespace shiftr_bits {
        constexpr uint32_t ADD1S = (1U << 31);  ///< Add one second
        constexpr uint32_t SUBFS = (15 << 0);  ///< Subtract a fraction of a second
    }

    /// TSTR Register bits
    namespace tstr_bits {
        constexpr uint32_t SU = (4 << 0);  ///< Second units in BCD format
        constexpr uint32_t ST = (3 << 4);  ///< Second tens in BCD format
        constexpr uint32_t MNU = (4 << 8);  ///< Minute units in BCD format
        constexpr uint32_t MNT = (3 << 12);  ///< Minute tens in BCD format
        constexpr uint32_t HU = (4 << 16);  ///< Hour units in BCD format
        constexpr uint32_t HT = (2 << 20);  ///< Hour tens in BCD format
        constexpr uint32_t PM = (1U << 22);  ///< AM/PM notation
    }

    /// TSDR Register bits
    namespace tsdr_bits {
        constexpr uint32_t WDU = (3 << 13);  ///< Week day units
        constexpr uint32_t MT = (1U << 12);  ///< Month tens in BCD format
        constexpr uint32_t MU = (4 << 8);  ///< Month units in BCD format
        constexpr uint32_t DT = (2 << 4);  ///< Date tens in BCD format
        constexpr uint32_t DU = (4 << 0);  ///< Date units in BCD format
    }

    /// TSSSR Register bits
    namespace tsssr_bits {
        constexpr uint32_t SS = (16 << 0);  ///< Sub second value
    }

    /// CALR Register bits
    namespace calr_bits {
        constexpr uint32_t CALP = (1U << 15);  ///< Increase frequency of RTC by 488.5 ppm
        constexpr uint32_t CALW8 = (1U << 14);  ///< Use an 8-second calibration cycle period
        constexpr uint32_t CALW16 = (1U << 13);  ///< Use a 16-second calibration cycle period
        constexpr uint32_t CALM = (9 << 0);  ///< Calibration minus
    }

    /// TAFCR Register bits
    namespace tafcr_bits {
        constexpr uint32_t TAMP1E = (1U << 0);  ///< Tamper 1 detection enable
        constexpr uint32_t TAMP1TRG = (1U << 1);  ///< Active level for tamper 1
        constexpr uint32_t TAMPIE = (1U << 2);  ///< Tamper interrupt enable
        constexpr uint32_t TAMP2E = (1U << 3);  ///< Tamper 2 detection enable
        constexpr uint32_t TAMP2TRG = (1U << 4);  ///< Active level for tamper 2
        constexpr uint32_t TAMP3E = (1U << 5);  ///< Tamper 3 detection enable
        constexpr uint32_t TAMP3TRG = (1U << 6);  ///< Active level for tamper 3
        constexpr uint32_t TAMPTS = (1U << 7);  ///< Activate timestamp on tamper detection event
        constexpr uint32_t TAMPFREQ = (3 << 8);  ///< Tamper sampling frequency
        constexpr uint32_t TAMPFLT = (2 << 11);  ///< Tamper filter count
        constexpr uint32_t TAMPPRCH = (2 << 13);  ///< Tamper precharge duration
        constexpr uint32_t TAMPPUDIS = (1U << 15);  ///< TAMPER pull-up disable
        constexpr uint32_t PC13VALUE = (1U << 18);  ///< PC13 value
        constexpr uint32_t PC13MODE = (1U << 19);  ///< PC13 mode
        constexpr uint32_t PC14VALUE = (1U << 20);  ///< PC14 value
        constexpr uint32_t PC14MODE = (1U << 21);  ///< PC 14 mode
        constexpr uint32_t PC15VALUE = (1U << 22);  ///< PC15 value
        constexpr uint32_t PC15MODE = (1U << 23);  ///< PC15 mode
    }

    /// ALRMASSR Register bits
    namespace alrmassr_bits {
        constexpr uint32_t MASKSS = (4 << 24);  ///< Mask the most-significant bits starting at this bit
        constexpr uint32_t SS = (15 << 0);  ///< Sub seconds value
    }

    /// ALRMBSSR Register bits
    namespace alrmbssr_bits {
        constexpr uint32_t MASKSS = (4 << 24);  ///< Mask the most-significant bits starting at this bit
        constexpr uint32_t SS = (15 << 0);  ///< Sub seconds value
    }

    /// BKP0R Register bits
    namespace bkp0r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP1R Register bits
    namespace bkp1r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP2R Register bits
    namespace bkp2r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP3R Register bits
    namespace bkp3r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP4R Register bits
    namespace bkp4r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP5R Register bits
    namespace bkp5r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP6R Register bits
    namespace bkp6r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP7R Register bits
    namespace bkp7r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP8R Register bits
    namespace bkp8r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP9R Register bits
    namespace bkp9r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP10R Register bits
    namespace bkp10r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP11R Register bits
    namespace bkp11r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP12R Register bits
    namespace bkp12r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP13R Register bits
    namespace bkp13r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP14R Register bits
    namespace bkp14r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP15R Register bits
    namespace bkp15r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP16R Register bits
    namespace bkp16r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP17R Register bits
    namespace bkp17r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP18R Register bits
    namespace bkp18r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP19R Register bits
    namespace bkp19r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP20R Register bits
    namespace bkp20r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP21R Register bits
    namespace bkp21r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP22R Register bits
    namespace bkp22r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP23R Register bits
    namespace bkp23r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP24R Register bits
    namespace bkp24r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP25R Register bits
    namespace bkp25r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP26R Register bits
    namespace bkp26r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP27R Register bits
    namespace bkp27r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP28R Register bits
    namespace bkp28r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP29R Register bits
    namespace bkp29r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP30R Register bits
    namespace bkp30r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP31R Register bits
    namespace bkp31r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DAC_BASE = 0x40007400;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t SWTRIGR;  ///< Offset: 0x04 - software trigger register
        volatile uint32_t DHR12R1;  ///< Offset: 0x08 - channel1 12-bit right-aligned data holding register
        volatile uint32_t DHR12L1;  ///< Offset: 0x0C - channel1 12-bit left aligned data holding register
        volatile uint32_t DHR8R1;  ///< Offset: 0x10 - channel1 8-bit right aligned data holding register
        volatile uint32_t DHR12R2;  ///< Offset: 0x14 - channel2 12-bit right aligned data holding register
        volatile uint32_t DHR12L2;  ///< Offset: 0x18 - channel2 12-bit left aligned data holding register
        volatile uint32_t DHR8R2;  ///< Offset: 0x1C - channel2 8-bit right-aligned data holding register
        volatile uint32_t DHR12RD;  ///< Offset: 0x20 - Dual DAC 12-bit right-aligned data holding register
        volatile uint32_t DHR12LD;  ///< Offset: 0x24 - DUAL DAC 12-bit left aligned data holding register
        volatile uint32_t DHR8RD;  ///< Offset: 0x28 - DUAL DAC 8-bit right aligned data holding register
        volatile uint32_t DOR1;  ///< Offset: 0x2C - channel1 data output register
        volatile uint32_t DOR2;  ///< Offset: 0x30 - channel2 data output register
        volatile uint32_t SR;  ///< Offset: 0x34 - status register
    };

    /// Peripheral instances
    inline Registers* DAC = reinterpret_cast<Registers*>(DAC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t DMAUDRIE2 = (1U << 29);  ///< DAC channel2 DMA underrun interrupt enable
        constexpr uint32_t DMAEN2 = (1U << 28);  ///< DAC channel2 DMA enable
        constexpr uint32_t MAMP2 = (4 << 24);  ///< DAC channel2 mask/amplitude selector
        constexpr uint32_t WAVE2 = (2 << 22);  ///< DAC channel2 noise/triangle wave generation enable
        constexpr uint32_t TSEL2 = (3 << 19);  ///< DAC channel2 trigger selection
        constexpr uint32_t TEN2 = (1U << 18);  ///< DAC channel2 trigger enable
        constexpr uint32_t BOFF2 = (1U << 17);  ///< DAC channel2 output buffer disable
        constexpr uint32_t EN2 = (1U << 16);  ///< DAC channel2 enable
        constexpr uint32_t DMAUDRIE1 = (1U << 13);  ///< DAC channel1 DMA Underrun Interrupt enable
        constexpr uint32_t DMAEN1 = (1U << 12);  ///< DAC channel1 DMA enable
        constexpr uint32_t MAMP1 = (4 << 8);  ///< DAC channel1 mask/amplitude selector
        constexpr uint32_t WAVE1 = (2 << 6);  ///< DAC channel1 noise/triangle wave generation enable
        constexpr uint32_t TSEL1 = (3 << 3);  ///< DAC channel1 trigger selection
        constexpr uint32_t TEN1 = (1U << 2);  ///< DAC channel1 trigger enable
        constexpr uint32_t BOFF1 = (1U << 1);  ///< DAC channel1 output buffer disable
        constexpr uint32_t EN1 = (1U << 0);  ///< DAC channel1 enable
    }

    /// SWTRIGR Register bits
    namespace swtrigr_bits {
        constexpr uint32_t SWTRIG2 = (1U << 1);  ///< DAC channel2 software trigger
        constexpr uint32_t SWTRIG1 = (1U << 0);  ///< DAC channel1 software trigger
    }

    /// DHR12R1 Register bits
    namespace dhr12r1_bits {
        constexpr uint32_t DACC1DHR = (12 << 0);  ///< DAC channel1 12-bit right-aligned data
    }

    /// DHR12L1 Register bits
    namespace dhr12l1_bits {
        constexpr uint32_t DACC1DHR = (12 << 4);  ///< DAC channel1 12-bit left-aligned data
    }

    /// DHR8R1 Register bits
    namespace dhr8r1_bits {
        constexpr uint32_t DACC1DHR = (8 << 0);  ///< DAC channel1 8-bit right-aligned data
    }

    /// DHR12R2 Register bits
    namespace dhr12r2_bits {
        constexpr uint32_t DACC2DHR = (12 << 0);  ///< DAC channel2 12-bit right-aligned data
    }

    /// DHR12L2 Register bits
    namespace dhr12l2_bits {
        constexpr uint32_t DACC2DHR = (12 << 4);  ///< DAC channel2 12-bit left-aligned data
    }

    /// DHR8R2 Register bits
    namespace dhr8r2_bits {
        constexpr uint32_t DACC2DHR = (8 << 0);  ///< DAC channel2 8-bit right-aligned data
    }

    /// DHR12RD Register bits
    namespace dhr12rd_bits {
        constexpr uint32_t DACC2DHR = (12 << 16);  ///< DAC channel2 12-bit right-aligned data
        constexpr uint32_t DACC1DHR = (12 << 0);  ///< DAC channel1 12-bit right-aligned data
    }

    /// DHR12LD Register bits
    namespace dhr12ld_bits {
        constexpr uint32_t DACC2DHR = (12 << 20);  ///< DAC channel2 12-bit left-aligned data
        constexpr uint32_t DACC1DHR = (12 << 4);  ///< DAC channel1 12-bit left-aligned data
    }

    /// DHR8RD Register bits
    namespace dhr8rd_bits {
        constexpr uint32_t DACC2DHR = (8 << 8);  ///< DAC channel2 8-bit right-aligned data
        constexpr uint32_t DACC1DHR = (8 << 0);  ///< DAC channel1 8-bit right-aligned data
    }

    /// DOR1 Register bits
    namespace dor1_bits {
        constexpr uint32_t DACC1DOR = (12 << 0);  ///< DAC channel1 data output
    }

    /// DOR2 Register bits
    namespace dor2_bits {
        constexpr uint32_t DACC2DOR = (12 << 0);  ///< DAC channel2 data output
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t DMAUDR2 = (1U << 29);  ///< DAC channel2 DMA underrun flag
        constexpr uint32_t DMAUDR1 = (1U << 13);  ///< DAC channel1 DMA underrun flag
    }

}

// ============================================================================
// DBGMCU Peripheral
// ============================================================================

namespace dbgmcu {
    /// Base addresses
    constexpr uint32_t DBGMCU_BASE = 0xE0042000;

    /// DBGMCU Register structure
    struct Registers {
        volatile uint32_t IDCODE;  ///< Offset: 0x00 - MCU Device ID Code Register
        volatile uint32_t CR;  ///< Offset: 0x04 - Debug MCU Configuration Register
        volatile uint32_t APB1FZ;  ///< Offset: 0x08 - APB Low Freeze Register
        volatile uint32_t APB2FZ;  ///< Offset: 0x0C - APB High Freeze Register
    };

    /// Peripheral instances
    inline Registers* DBGMCU = reinterpret_cast<Registers*>(DBGMCU_BASE);

    // Bit definitions
    /// IDCODE Register bits
    namespace idcode_bits {
        constexpr uint32_t DEV_ID = (12 << 0);  ///< Device Identifier
        constexpr uint32_t REV_ID = (16 << 16);  ///< Revision Identifier
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t DBG_SLEEP = (1U << 0);  ///< Debug Sleep mode
        constexpr uint32_t DBG_STOP = (1U << 1);  ///< Debug Stop Mode
        constexpr uint32_t DBG_STANDBY = (1U << 2);  ///< Debug Standby Mode
        constexpr uint32_t TRACE_IOEN = (1U << 5);  ///< Trace pin assignment control
        constexpr uint32_t TRACE_MODE = (2 << 6);  ///< Trace pin assignment control
    }

    /// APB1FZ Register bits
    namespace apb1fz_bits {
        constexpr uint32_t DBG_TIM2_STOP = (1U << 0);  ///< Debug Timer 2 stopped when Core is halted
        constexpr uint32_t DBG_TIM3_STOP = (1U << 1);  ///< Debug Timer 3 stopped when Core is halted
        constexpr uint32_t DBG_TIM4_STOP = (1U << 2);  ///< Debug Timer 4 stopped when Core is halted
        constexpr uint32_t DBG_TIM5_STOP = (1U << 3);  ///< Debug Timer 5 stopped when Core is halted
        constexpr uint32_t DBG_TIM6_STOP = (1U << 4);  ///< Debug Timer 6 stopped when Core is halted
        constexpr uint32_t DBG_TIM7_STOP = (1U << 5);  ///< Debug Timer 7 stopped when Core is halted
        constexpr uint32_t DBG_TIM12_STOP = (1U << 6);  ///< Debug Timer 12 stopped when Core is halted
        constexpr uint32_t DBG_TIM13_STOP = (1U << 7);  ///< Debug Timer 13 stopped when Core is halted
        constexpr uint32_t DBG_TIMER14_STOP = (1U << 8);  ///< Debug Timer 14 stopped when Core is halted
        constexpr uint32_t DBG_TIM18_STOP = (1U << 9);  ///< Debug Timer 18 stopped when Core is halted
        constexpr uint32_t DBG_RTC_STOP = (1U << 10);  ///< Debug RTC stopped when Core is halted
        constexpr uint32_t DBG_WWDG_STOP = (1U << 11);  ///< Debug Window Wachdog stopped when Core is halted
        constexpr uint32_t DBG_IWDG_STOP = (1U << 12);  ///< Debug Independent Wachdog stopped when Core is halted
        constexpr uint32_t I2C1_SMBUS_TIMEOUT = (1U << 21);  ///< SMBUS timeout mode stopped when Core is halted
        constexpr uint32_t I2C2_SMBUS_TIMEOUT = (1U << 22);  ///< SMBUS timeout mode stopped when Core is halted
        constexpr uint32_t DBG_CAN_STOP = (1U << 25);  ///< Debug CAN stopped when core is halted
    }

    /// APB2FZ Register bits
    namespace apb2fz_bits {
        constexpr uint32_t DBG_TIM15_STOP = (1U << 2);  ///< Debug Timer 15 stopped when Core is halted
        constexpr uint32_t DBG_TIM16_STOP = (1U << 3);  ///< Debug Timer 16 stopped when Core is halted
        constexpr uint32_t DBG_TIM17_STO = (1U << 4);  ///< Debug Timer 17 stopped when Core is halted
        constexpr uint32_t DBG_TIM19_STOP = (1U << 5);  ///< Debug Timer 19 stopped when Core is halted
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC1_BASE = 0x50000000;
    constexpr uint32_t ADC2_BASE = 0x50000100;
    constexpr uint32_t ADC3_BASE = 0x50000400;
    constexpr uint32_t ADC4_BASE = 0x50000500;
    constexpr uint32_t ADC1_2_BASE = 0x50000300;
    constexpr uint32_t ADC3_4_BASE = 0x50000700;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ISR;  ///< Offset: 0x00 - interrupt and status register
        volatile uint32_t IER;  ///< Offset: 0x04 - interrupt enable register
        volatile uint32_t CR;  ///< Offset: 0x08 - control register
        volatile uint32_t CFGR;  ///< Offset: 0x0C - configuration register
        volatile uint32_t SMPR1;  ///< Offset: 0x14 - sample time register 1
        volatile uint32_t SMPR2;  ///< Offset: 0x18 - sample time register 2
        volatile uint32_t TR1;  ///< Offset: 0x20 - watchdog threshold register 1
        volatile uint32_t TR2;  ///< Offset: 0x24 - watchdog threshold register
        volatile uint32_t TR3;  ///< Offset: 0x28 - watchdog threshold register 3
        volatile uint32_t SQR1;  ///< Offset: 0x30 - regular sequence register 1
        volatile uint32_t SQR2;  ///< Offset: 0x34 - regular sequence register 2
        volatile uint32_t SQR3;  ///< Offset: 0x38 - regular sequence register 3
        volatile uint32_t SQR4;  ///< Offset: 0x3C - regular sequence register 4
        volatile uint32_t DR;  ///< Offset: 0x40 - regular Data Register
        volatile uint32_t JSQR;  ///< Offset: 0x4C - injected sequence register
        volatile uint32_t OFR1;  ///< Offset: 0x60 - offset register 1
        volatile uint32_t OFR2;  ///< Offset: 0x64 - offset register 2
        volatile uint32_t OFR3;  ///< Offset: 0x68 - offset register 3
        volatile uint32_t OFR4;  ///< Offset: 0x6C - offset register 4
        volatile uint32_t JDR1;  ///< Offset: 0x80 - injected data register 1
        volatile uint32_t JDR2;  ///< Offset: 0x84 - injected data register 2
        volatile uint32_t JDR3;  ///< Offset: 0x88 - injected data register 3
        volatile uint32_t JDR4;  ///< Offset: 0x8C - injected data register 4
        volatile uint32_t AWD2CR;  ///< Offset: 0xA0 - Analog Watchdog 2 Configuration Register
        volatile uint32_t AWD3CR;  ///< Offset: 0xA4 - Analog Watchdog 3 Configuration Register
        volatile uint32_t DIFSEL;  ///< Offset: 0xB0 - Differential Mode Selection Register 2
        volatile uint32_t CALFACT;  ///< Offset: 0xB4 - Calibration Factors
    };

    /// Peripheral instances
    inline Registers* ADC1 = reinterpret_cast<Registers*>(ADC1_BASE);
    inline Registers* ADC2 = reinterpret_cast<Registers*>(ADC2_BASE);
    inline Registers* ADC3 = reinterpret_cast<Registers*>(ADC3_BASE);
    inline Registers* ADC4 = reinterpret_cast<Registers*>(ADC4_BASE);
    inline Registers* ADC1_2 = reinterpret_cast<Registers*>(ADC1_2_BASE);
    inline Registers* ADC3_4 = reinterpret_cast<Registers*>(ADC3_4_BASE);

    // Bit definitions
    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t JQOVF = (1U << 10);  ///< JQOVF
        constexpr uint32_t AWD3 = (1U << 9);  ///< AWD3
        constexpr uint32_t AWD2 = (1U << 8);  ///< AWD2
        constexpr uint32_t AWD1 = (1U << 7);  ///< AWD1
        constexpr uint32_t JEOS = (1U << 6);  ///< JEOS
        constexpr uint32_t JEOC = (1U << 5);  ///< JEOC
        constexpr uint32_t OVR = (1U << 4);  ///< OVR
        constexpr uint32_t EOS = (1U << 3);  ///< EOS
        constexpr uint32_t EOC = (1U << 2);  ///< EOC
        constexpr uint32_t EOSMP = (1U << 1);  ///< EOSMP
        constexpr uint32_t ADRDY = (1U << 0);  ///< ADRDY
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t JQOVFIE = (1U << 10);  ///< JQOVFIE
        constexpr uint32_t AWD3IE = (1U << 9);  ///< AWD3IE
        constexpr uint32_t AWD2IE = (1U << 8);  ///< AWD2IE
        constexpr uint32_t AWD1IE = (1U << 7);  ///< AWD1IE
        constexpr uint32_t JEOSIE = (1U << 6);  ///< JEOSIE
        constexpr uint32_t JEOCIE = (1U << 5);  ///< JEOCIE
        constexpr uint32_t OVRIE = (1U << 4);  ///< OVRIE
        constexpr uint32_t EOSIE = (1U << 3);  ///< EOSIE
        constexpr uint32_t EOCIE = (1U << 2);  ///< EOCIE
        constexpr uint32_t EOSMPIE = (1U << 1);  ///< EOSMPIE
        constexpr uint32_t ADRDYIE = (1U << 0);  ///< ADRDYIE
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t ADCAL = (1U << 31);  ///< ADCAL
        constexpr uint32_t ADCALDIF = (1U << 30);  ///< ADCALDIF
        constexpr uint32_t DEEPPWD = (1U << 29);  ///< DEEPPWD
        constexpr uint32_t ADVREGEN = (1U << 28);  ///< ADVREGEN
        constexpr uint32_t JADSTP = (1U << 5);  ///< JADSTP
        constexpr uint32_t ADSTP = (1U << 4);  ///< ADSTP
        constexpr uint32_t JADSTART = (1U << 3);  ///< JADSTART
        constexpr uint32_t ADSTART = (1U << 2);  ///< ADSTART
        constexpr uint32_t ADDIS = (1U << 1);  ///< ADDIS
        constexpr uint32_t ADEN = (1U << 0);  ///< ADEN
    }

    /// CFGR Register bits
    namespace cfgr_bits {
        constexpr uint32_t AWDCH1CH = (5 << 26);  ///< AWDCH1CH
        constexpr uint32_t JAUTO = (1U << 25);  ///< JAUTO
        constexpr uint32_t JAWD1EN = (1U << 24);  ///< JAWD1EN
        constexpr uint32_t AWD1EN = (1U << 23);  ///< AWD1EN
        constexpr uint32_t AWD1SGL = (1U << 22);  ///< AWD1SGL
        constexpr uint32_t JQM = (1U << 21);  ///< JQM
        constexpr uint32_t JDISCEN = (1U << 20);  ///< JDISCEN
        constexpr uint32_t DISCNUM = (3 << 17);  ///< DISCNUM
        constexpr uint32_t DISCEN = (1U << 16);  ///< DISCEN
        constexpr uint32_t AUTOFF = (1U << 15);  ///< AUTOFF
        constexpr uint32_t AUTDLY = (1U << 14);  ///< AUTDLY
        constexpr uint32_t CONT = (1U << 13);  ///< CONT
        constexpr uint32_t OVRMOD = (1U << 12);  ///< OVRMOD
        constexpr uint32_t EXTEN = (2 << 10);  ///< EXTEN
        constexpr uint32_t EXTSEL = (4 << 6);  ///< EXTSEL
        constexpr uint32_t ALIGN = (1U << 5);  ///< ALIGN
        constexpr uint32_t RES = (2 << 3);  ///< RES
        constexpr uint32_t DMACFG = (1U << 1);  ///< DMACFG
        constexpr uint32_t DMAEN = (1U << 0);  ///< DMAEN
    }

    /// SMPR1 Register bits
    namespace smpr1_bits {
        constexpr uint32_t SMP9 = (3 << 27);  ///< SMP9
        constexpr uint32_t SMP8 = (3 << 24);  ///< SMP8
        constexpr uint32_t SMP7 = (3 << 21);  ///< SMP7
        constexpr uint32_t SMP6 = (3 << 18);  ///< SMP6
        constexpr uint32_t SMP5 = (3 << 15);  ///< SMP5
        constexpr uint32_t SMP4 = (3 << 12);  ///< SMP4
        constexpr uint32_t SMP3 = (3 << 9);  ///< SMP3
        constexpr uint32_t SMP2 = (3 << 6);  ///< SMP2
        constexpr uint32_t SMP1 = (3 << 3);  ///< SMP1
    }

    /// SMPR2 Register bits
    namespace smpr2_bits {
        constexpr uint32_t SMP18 = (3 << 24);  ///< SMP18
        constexpr uint32_t SMP17 = (3 << 21);  ///< SMP17
        constexpr uint32_t SMP16 = (3 << 18);  ///< SMP16
        constexpr uint32_t SMP15 = (3 << 15);  ///< SMP15
        constexpr uint32_t SMP14 = (3 << 12);  ///< SMP14
        constexpr uint32_t SMP13 = (3 << 9);  ///< SMP13
        constexpr uint32_t SMP12 = (3 << 6);  ///< SMP12
        constexpr uint32_t SMP11 = (3 << 3);  ///< SMP11
        constexpr uint32_t SMP10 = (3 << 0);  ///< SMP10
    }

    /// TR1 Register bits
    namespace tr1_bits {
        constexpr uint32_t HT1 = (12 << 16);  ///< HT1
        constexpr uint32_t LT1 = (12 << 0);  ///< LT1
    }

    /// TR2 Register bits
    namespace tr2_bits {
        constexpr uint32_t HT2 = (8 << 16);  ///< HT2
        constexpr uint32_t LT2 = (8 << 0);  ///< LT2
    }

    /// TR3 Register bits
    namespace tr3_bits {
        constexpr uint32_t HT3 = (8 << 16);  ///< HT3
        constexpr uint32_t LT3 = (8 << 0);  ///< LT3
    }

    /// SQR1 Register bits
    namespace sqr1_bits {
        constexpr uint32_t SQ4 = (5 << 24);  ///< SQ4
        constexpr uint32_t SQ3 = (5 << 18);  ///< SQ3
        constexpr uint32_t SQ2 = (5 << 12);  ///< SQ2
        constexpr uint32_t SQ1 = (5 << 6);  ///< SQ1
        constexpr uint32_t L3 = (4 << 0);  ///< L3
    }

    /// SQR2 Register bits
    namespace sqr2_bits {
        constexpr uint32_t SQ9 = (5 << 24);  ///< SQ9
        constexpr uint32_t SQ8 = (5 << 18);  ///< SQ8
        constexpr uint32_t SQ7 = (5 << 12);  ///< SQ7
        constexpr uint32_t SQ6 = (5 << 6);  ///< SQ6
        constexpr uint32_t SQ5 = (5 << 0);  ///< SQ5
    }

    /// SQR3 Register bits
    namespace sqr3_bits {
        constexpr uint32_t SQ14 = (5 << 24);  ///< SQ14
        constexpr uint32_t SQ13 = (5 << 18);  ///< SQ13
        constexpr uint32_t SQ12 = (5 << 12);  ///< SQ12
        constexpr uint32_t SQ11 = (5 << 6);  ///< SQ11
        constexpr uint32_t SQ10 = (5 << 0);  ///< SQ10
    }

    /// SQR4 Register bits
    namespace sqr4_bits {
        constexpr uint32_t SQ16 = (5 << 6);  ///< SQ16
        constexpr uint32_t SQ15 = (5 << 0);  ///< SQ15
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t regularDATA = (16 << 0);  ///< regularDATA
    }

    /// JSQR Register bits
    namespace jsqr_bits {
        constexpr uint32_t JSQ4 = (5 << 26);  ///< JSQ4
        constexpr uint32_t JSQ3 = (5 << 20);  ///< JSQ3
        constexpr uint32_t JSQ2 = (5 << 14);  ///< JSQ2
        constexpr uint32_t JSQ1 = (5 << 8);  ///< JSQ1
        constexpr uint32_t JEXTEN = (2 << 6);  ///< JEXTEN
        constexpr uint32_t JEXTSEL = (4 << 2);  ///< JEXTSEL
        constexpr uint32_t JL = (2 << 0);  ///< JL
    }

    /// OFR1 Register bits
    namespace ofr1_bits {
        constexpr uint32_t OFFSET1_EN = (1U << 31);  ///< OFFSET1_EN
        constexpr uint32_t OFFSET1_CH = (5 << 26);  ///< OFFSET1_CH
        constexpr uint32_t OFFSET1 = (12 << 0);  ///< OFFSET1
    }

    /// OFR2 Register bits
    namespace ofr2_bits {
        constexpr uint32_t OFFSET2_EN = (1U << 31);  ///< OFFSET2_EN
        constexpr uint32_t OFFSET2_CH = (5 << 26);  ///< OFFSET2_CH
        constexpr uint32_t OFFSET2 = (12 << 0);  ///< OFFSET2
    }

    /// OFR3 Register bits
    namespace ofr3_bits {
        constexpr uint32_t OFFSET3_EN = (1U << 31);  ///< OFFSET3_EN
        constexpr uint32_t OFFSET3_CH = (5 << 26);  ///< OFFSET3_CH
        constexpr uint32_t OFFSET3 = (12 << 0);  ///< OFFSET3
    }

    /// OFR4 Register bits
    namespace ofr4_bits {
        constexpr uint32_t OFFSET4_EN = (1U << 31);  ///< OFFSET4_EN
        constexpr uint32_t OFFSET4_CH = (5 << 26);  ///< OFFSET4_CH
        constexpr uint32_t OFFSET4 = (12 << 0);  ///< OFFSET4
    }

    /// JDR1 Register bits
    namespace jdr1_bits {
        constexpr uint32_t JDATA1 = (16 << 0);  ///< JDATA1
    }

    /// JDR2 Register bits
    namespace jdr2_bits {
        constexpr uint32_t JDATA2 = (16 << 0);  ///< JDATA2
    }

    /// JDR3 Register bits
    namespace jdr3_bits {
        constexpr uint32_t JDATA3 = (16 << 0);  ///< JDATA3
    }

    /// JDR4 Register bits
    namespace jdr4_bits {
        constexpr uint32_t JDATA4 = (16 << 0);  ///< JDATA4
    }

    /// AWD2CR Register bits
    namespace awd2cr_bits {
        constexpr uint32_t AWD2CH = (18 << 1);  ///< AWD2CH
    }

    /// AWD3CR Register bits
    namespace awd3cr_bits {
        constexpr uint32_t AWD3CH = (18 << 1);  ///< AWD3CH
    }

    /// DIFSEL Register bits
    namespace difsel_bits {
        constexpr uint32_t DIFSEL_1_15 = (15 << 1);  ///< Differential mode for channels 15 to 1
        constexpr uint32_t DIFSEL_16_18 = (3 << 16);  ///< Differential mode for channels 18 to 16
    }

    /// CALFACT Register bits
    namespace calfact_bits {
        constexpr uint32_t CALFACT_D = (7 << 16);  ///< CALFACT_D
        constexpr uint32_t CALFACT_S = (7 << 0);  ///< CALFACT_S
    }

}

// ============================================================================
// COMP Peripheral
// ============================================================================

namespace comp {
    /// Base addresses
    constexpr uint32_t SYSCFG_COMP_OPAMP_BASE = 0x40010000;

    /// COMP Register structure
    struct Registers {
        volatile uint32_t SYSCFG_CFGR1;  ///< Offset: 0x00 - configuration register 1
        volatile uint32_t SYSCFG_EXTICR1;  ///< Offset: 0x08 - external interrupt configuration register 1
        volatile uint32_t SYSCFG_EXTICR2;  ///< Offset: 0x0C - external interrupt configuration register 2
        volatile uint32_t SYSCFG_EXTICR3;  ///< Offset: 0x10 - external interrupt configuration register 3
        volatile uint32_t SYSCFG_EXTICR4;  ///< Offset: 0x14 - external interrupt configuration register 4
        volatile uint32_t SYSCFG_CFGR2;  ///< Offset: 0x18 - configuration register 2
        volatile uint32_t SYSCFG_RCR;  ///< Offset: 0x04 - CCM SRAM protection register
        volatile uint32_t COMP1_CSR;  ///< Offset: 0x1C - control and status register
        volatile uint32_t COMP2_CSR;  ///< Offset: 0x20 - control and status register
        volatile uint32_t COMP3_CSR;  ///< Offset: 0x24 - control and status register
        volatile uint32_t COMP4_CSR;  ///< Offset: 0x28 - control and status register
        volatile uint32_t COMP5_CSR;  ///< Offset: 0x2C - control and status register
        volatile uint32_t COMP6_CSR;  ///< Offset: 0x30 - control and status register
        volatile uint32_t COMP7_CSR;  ///< Offset: 0x34 - control and status register
        volatile uint32_t OPAMP1_CSR;  ///< Offset: 0x38 - control register
        volatile uint32_t OPAMP2_CSR;  ///< Offset: 0x3C - control register
        volatile uint32_t OPAMP3_CSR;  ///< Offset: 0x40 - control register
        volatile uint32_t OPAMP4_CSR;  ///< Offset: 0x44 - control register
    };

    /// Peripheral instances
    inline Registers* SYSCFG_COMP_OPAMP = reinterpret_cast<Registers*>(SYSCFG_COMP_OPAMP_BASE);

    // Bit definitions
    /// SYSCFG_CFGR1 Register bits
    namespace syscfg_cfgr1_bits {
        constexpr uint32_t MEM_MODE = (2 << 0);  ///< Memory mapping selection bits
        constexpr uint32_t USB_IT_RMP = (1U << 5);  ///< USB interrupt remap
        constexpr uint32_t TIM1_ITR_RMP = (1U << 6);  ///< Timer 1 ITR3 selection
        constexpr uint32_t DAC_TRIG_RMP = (1U << 7);  ///< DAC trigger remap (when TSEL = 001)
        constexpr uint32_t ADC24_DMA_RMP = (1U << 8);  ///< ADC24 DMA remapping bit
        constexpr uint32_t TIM16_DMA_RMP = (1U << 11);  ///< TIM16 DMA request remapping bit
        constexpr uint32_t TIM17_DMA_RMP = (1U << 12);  ///< TIM17 DMA request remapping bit
        constexpr uint32_t TIM6_DAC1_DMA_RMP = (1U << 13);  ///< TIM6 and DAC1 DMA request remapping bit
        constexpr uint32_t TIM7_DAC2_DMA_RMP = (1U << 14);  ///< TIM7 and DAC2 DMA request remapping bit
        constexpr uint32_t I2C_PB6_FM = (1U << 16);  ///< Fast Mode Plus (FM+) driving capability activation bits.
        constexpr uint32_t I2C_PB7_FM = (1U << 17);  ///< Fast Mode Plus (FM+) driving capability activation bits.
        constexpr uint32_t I2C_PB8_FM = (1U << 18);  ///< Fast Mode Plus (FM+) driving capability activation bits.
        constexpr uint32_t I2C_PB9_FM = (1U << 19);  ///< Fast Mode Plus (FM+) driving capability activation bits.
        constexpr uint32_t I2C1_FM = (1U << 20);  ///< I2C1 Fast Mode Plus
        constexpr uint32_t I2C2_FM = (1U << 21);  ///< I2C2 Fast Mode Plus
        constexpr uint32_t ENCODER_MODE = (2 << 22);  ///< Encoder mode
        constexpr uint32_t FPU_IT = (6 << 26);  ///< Interrupt enable bits from FPU
    }

    /// SYSCFG_EXTICR1 Register bits
    namespace syscfg_exticr1_bits {
        constexpr uint32_t EXTI3 = (4 << 12);  ///< EXTI 3 configuration bits
        constexpr uint32_t EXTI2 = (4 << 8);  ///< EXTI 2 configuration bits
        constexpr uint32_t EXTI1 = (4 << 4);  ///< EXTI 1 configuration bits
        constexpr uint32_t EXTI0 = (4 << 0);  ///< EXTI 0 configuration bits
    }

    /// SYSCFG_EXTICR2 Register bits
    namespace syscfg_exticr2_bits {
        constexpr uint32_t EXTI7 = (4 << 12);  ///< EXTI 7 configuration bits
        constexpr uint32_t EXTI6 = (4 << 8);  ///< EXTI 6 configuration bits
        constexpr uint32_t EXTI5 = (4 << 4);  ///< EXTI 5 configuration bits
        constexpr uint32_t EXTI4 = (4 << 0);  ///< EXTI 4 configuration bits
    }

    /// SYSCFG_EXTICR3 Register bits
    namespace syscfg_exticr3_bits {
        constexpr uint32_t EXTI11 = (4 << 12);  ///< EXTI 11 configuration bits
        constexpr uint32_t EXTI10 = (4 << 8);  ///< EXTI 10 configuration bits
        constexpr uint32_t EXTI9 = (4 << 4);  ///< EXTI 9 configuration bits
        constexpr uint32_t EXTI8 = (4 << 0);  ///< EXTI 8 configuration bits
    }

    /// SYSCFG_EXTICR4 Register bits
    namespace syscfg_exticr4_bits {
        constexpr uint32_t EXTI15 = (4 << 12);  ///< EXTI 15 configuration bits
        constexpr uint32_t EXTI14 = (4 << 8);  ///< EXTI 14 configuration bits
        constexpr uint32_t EXTI13 = (4 << 4);  ///< EXTI 13 configuration bits
        constexpr uint32_t EXTI12 = (4 << 0);  ///< EXTI 12 configuration bits
    }

    /// SYSCFG_CFGR2 Register bits
    namespace syscfg_cfgr2_bits {
        constexpr uint32_t LOCUP_LOCK = (1U << 0);  ///< Cortex-M0 LOCKUP bit enable bit
        constexpr uint32_t SRAM_PARITY_LOCK = (1U << 1);  ///< SRAM parity lock bit
        constexpr uint32_t PVD_LOCK = (1U << 2);  ///< PVD lock enable bit
        constexpr uint32_t BYP_ADD_PAR = (1U << 4);  ///< Bypass address bit 29 in parity calculation
        constexpr uint32_t SRAM_PEF = (1U << 8);  ///< SRAM parity flag
    }

    /// SYSCFG_RCR Register bits
    namespace syscfg_rcr_bits {
        constexpr uint32_t PAGE0_WP = (1U << 0);  ///< CCM SRAM page write protection bit
        constexpr uint32_t PAGE1_WP = (1U << 1);  ///< CCM SRAM page write protection bit
        constexpr uint32_t PAGE2_WP = (1U << 2);  ///< CCM SRAM page write protection bit
        constexpr uint32_t PAGE3_WP = (1U << 3);  ///< CCM SRAM page write protection bit
        constexpr uint32_t PAGE4_WP = (1U << 4);  ///< CCM SRAM page write protection bit
        constexpr uint32_t PAGE5_WP = (1U << 5);  ///< CCM SRAM page write protection bit
        constexpr uint32_t PAGE6_WP = (1U << 6);  ///< CCM SRAM page write protection bit
        constexpr uint32_t PAGE7_WP = (1U << 7);  ///< CCM SRAM page write protection bit
    }

    /// COMP1_CSR Register bits
    namespace comp1_csr_bits {
        constexpr uint32_t COMP1EN = (1U << 0);  ///< Comparator 1 enable
        constexpr uint32_t COMP1_INP_DAC = (1U << 1);  ///< COMP1_INP_DAC
        constexpr uint32_t COMP1MODE = (2 << 2);  ///< Comparator 1 mode
        constexpr uint32_t COMP1INSEL = (3 << 4);  ///< Comparator 1 inverting input selection
        constexpr uint32_t COMP1_OUT_SEL = (4 << 10);  ///< Comparator 1 output selection
        constexpr uint32_t COMP1POL = (1U << 15);  ///< Comparator 1 output polarity
        constexpr uint32_t COMP1HYST = (2 << 16);  ///< Comparator 1 hysteresis
        constexpr uint32_t COMP1_BLANKING = (3 << 18);  ///< Comparator 1 blanking source
        constexpr uint32_t COMP1OUT = (1U << 30);  ///< Comparator 1 output
        constexpr uint32_t COMP1LOCK = (1U << 31);  ///< Comparator 1 lock
    }

    /// COMP2_CSR Register bits
    namespace comp2_csr_bits {
        constexpr uint32_t COMP2EN = (1U << 0);  ///< Comparator 2 enable
        constexpr uint32_t COMP2MODE = (2 << 2);  ///< Comparator 2 mode
        constexpr uint32_t COMP2INSEL = (3 << 4);  ///< Comparator 2 inverting input selection
        constexpr uint32_t COMP2INPSEL = (1U << 7);  ///< Comparator 2 non inverted input selection
        constexpr uint32_t COMP2INMSEL = (1U << 9);  ///< Comparator 1inverting input selection
        constexpr uint32_t COMP2_OUT_SEL = (4 << 10);  ///< Comparator 2 output selection
        constexpr uint32_t COMP2POL = (1U << 15);  ///< Comparator 2 output polarity
        constexpr uint32_t COMP2HYST = (2 << 16);  ///< Comparator 2 hysteresis
        constexpr uint32_t COMP2_BLANKING = (3 << 18);  ///< Comparator 2 blanking source
        constexpr uint32_t COMP2LOCK = (1U << 31);  ///< Comparator 2 lock
    }

    /// COMP3_CSR Register bits
    namespace comp3_csr_bits {
        constexpr uint32_t COMP3EN = (1U << 0);  ///< Comparator 3 enable
        constexpr uint32_t COMP3MODE = (2 << 2);  ///< Comparator 3 mode
        constexpr uint32_t COMP3INSEL = (3 << 4);  ///< Comparator 3 inverting input selection
        constexpr uint32_t COMP3INPSEL = (1U << 7);  ///< Comparator 3 non inverted input selection
        constexpr uint32_t COMP3_OUT_SEL = (4 << 10);  ///< Comparator 3 output selection
        constexpr uint32_t COMP3POL = (1U << 15);  ///< Comparator 3 output polarity
        constexpr uint32_t COMP3HYST = (2 << 16);  ///< Comparator 3 hysteresis
        constexpr uint32_t COMP3_BLANKING = (3 << 18);  ///< Comparator 3 blanking source
        constexpr uint32_t COMP3OUT = (1U << 30);  ///< Comparator 3 output
        constexpr uint32_t COMP3LOCK = (1U << 31);  ///< Comparator 3 lock
    }

    /// COMP4_CSR Register bits
    namespace comp4_csr_bits {
        constexpr uint32_t COMP4EN = (1U << 0);  ///< Comparator 4 enable
        constexpr uint32_t COMP4MODE = (2 << 2);  ///< Comparator 4 mode
        constexpr uint32_t COMP4INSEL = (3 << 4);  ///< Comparator 4 inverting input selection
        constexpr uint32_t COMP4INPSEL = (1U << 7);  ///< Comparator 4 non inverted input selection
        constexpr uint32_t COM4WINMODE = (1U << 9);  ///< Comparator 4 window mode
        constexpr uint32_t COMP4_OUT_SEL = (4 << 10);  ///< Comparator 4 output selection
        constexpr uint32_t COMP4POL = (1U << 15);  ///< Comparator 4 output polarity
        constexpr uint32_t COMP4HYST = (2 << 16);  ///< Comparator 4 hysteresis
        constexpr uint32_t COMP4_BLANKING = (3 << 18);  ///< Comparator 4 blanking source
        constexpr uint32_t COMP4OUT = (1U << 30);  ///< Comparator 4 output
        constexpr uint32_t COMP4LOCK = (1U << 31);  ///< Comparator 4 lock
    }

    /// COMP5_CSR Register bits
    namespace comp5_csr_bits {
        constexpr uint32_t COMP5EN = (1U << 0);  ///< Comparator 5 enable
        constexpr uint32_t COMP5MODE = (2 << 2);  ///< Comparator 5 mode
        constexpr uint32_t COMP5INSEL = (3 << 4);  ///< Comparator 5 inverting input selection
        constexpr uint32_t COMP5INPSEL = (1U << 7);  ///< Comparator 5 non inverted input selection
        constexpr uint32_t COMP5_OUT_SEL = (4 << 10);  ///< Comparator 5 output selection
        constexpr uint32_t COMP5POL = (1U << 15);  ///< Comparator 5 output polarity
        constexpr uint32_t COMP5HYST = (2 << 16);  ///< Comparator 5 hysteresis
        constexpr uint32_t COMP5_BLANKING = (3 << 18);  ///< Comparator 5 blanking source
        constexpr uint32_t COMP5OUT = (1U << 30);  ///< Comparator51 output
        constexpr uint32_t COMP5LOCK = (1U << 31);  ///< Comparator 5 lock
    }

    /// COMP6_CSR Register bits
    namespace comp6_csr_bits {
        constexpr uint32_t COMP6EN = (1U << 0);  ///< Comparator 6 enable
        constexpr uint32_t COMP6MODE = (2 << 2);  ///< Comparator 6 mode
        constexpr uint32_t COMP6INSEL = (3 << 4);  ///< Comparator 6 inverting input selection
        constexpr uint32_t COMP6INPSEL = (1U << 7);  ///< Comparator 6 non inverted input selection
        constexpr uint32_t COM6WINMODE = (1U << 9);  ///< Comparator 6 window mode
        constexpr uint32_t COMP6_OUT_SEL = (4 << 10);  ///< Comparator 6 output selection
        constexpr uint32_t COMP6POL = (1U << 15);  ///< Comparator 6 output polarity
        constexpr uint32_t COMP6HYST = (2 << 16);  ///< Comparator 6 hysteresis
        constexpr uint32_t COMP6_BLANKING = (3 << 18);  ///< Comparator 6 blanking source
        constexpr uint32_t COMP6OUT = (1U << 30);  ///< Comparator 6 output
        constexpr uint32_t COMP6LOCK = (1U << 31);  ///< Comparator 6 lock
    }

    /// COMP7_CSR Register bits
    namespace comp7_csr_bits {
        constexpr uint32_t COMP7EN = (1U << 0);  ///< Comparator 7 enable
        constexpr uint32_t COMP7MODE = (2 << 2);  ///< Comparator 7 mode
        constexpr uint32_t COMP7INSEL = (3 << 4);  ///< Comparator 7 inverting input selection
        constexpr uint32_t COMP7INPSEL = (1U << 7);  ///< Comparator 7 non inverted input selection
        constexpr uint32_t COMP7_OUT_SEL = (4 << 10);  ///< Comparator 7 output selection
        constexpr uint32_t COMP7POL = (1U << 15);  ///< Comparator 7 output polarity
        constexpr uint32_t COMP7HYST = (2 << 16);  ///< Comparator 7 hysteresis
        constexpr uint32_t COMP7_BLANKING = (3 << 18);  ///< Comparator 7 blanking source
        constexpr uint32_t COMP7OUT = (1U << 30);  ///< Comparator 7 output
        constexpr uint32_t COMP7LOCK = (1U << 31);  ///< Comparator 7 lock
    }

    /// OPAMP1_CSR Register bits
    namespace opamp1_csr_bits {
        constexpr uint32_t OPAMP1_EN = (1U << 0);  ///< OPAMP1 enable
        constexpr uint32_t FORCE_VP = (1U << 1);  ///< FORCE_VP
        constexpr uint32_t VP_SEL = (2 << 2);  ///< OPAMP1 Non inverting input selection
        constexpr uint32_t VM_SEL = (2 << 5);  ///< OPAMP1 inverting input selection
        constexpr uint32_t TCM_EN = (1U << 7);  ///< Timer controlled Mux mode enable
        constexpr uint32_t VMS_SEL = (1U << 8);  ///< OPAMP1 inverting input secondary selection
        constexpr uint32_t VPS_SEL = (2 << 9);  ///< OPAMP1 Non inverting input secondary selection
        constexpr uint32_t CALON = (1U << 11);  ///< Calibration mode enable
        constexpr uint32_t CALSEL = (2 << 12);  ///< Calibration selection
        constexpr uint32_t PGA_GAIN = (4 << 14);  ///< Gain in PGA mode
        constexpr uint32_t USER_TRIM = (1U << 18);  ///< User trimming enable
        constexpr uint32_t TRIMOFFSETP = (5 << 19);  ///< Offset trimming value (PMOS)
        constexpr uint32_t TRIMOFFSETN = (5 << 24);  ///< Offset trimming value (NMOS)
        constexpr uint32_t TSTREF = (1U << 29);  ///< TSTREF
        constexpr uint32_t OUTCAL = (1U << 30);  ///< OPAMP 1 ouput status flag
        constexpr uint32_t LOCK = (1U << 31);  ///< OPAMP 1 lock
    }

    /// OPAMP2_CSR Register bits
    namespace opamp2_csr_bits {
        constexpr uint32_t OPAMP2EN = (1U << 0);  ///< OPAMP2 enable
        constexpr uint32_t FORCE_VP = (1U << 1);  ///< FORCE_VP
        constexpr uint32_t VP_SEL = (2 << 2);  ///< OPAMP2 Non inverting input selection
        constexpr uint32_t VM_SEL = (2 << 5);  ///< OPAMP2 inverting input selection
        constexpr uint32_t TCM_EN = (1U << 7);  ///< Timer controlled Mux mode enable
        constexpr uint32_t VMS_SEL = (1U << 8);  ///< OPAMP2 inverting input secondary selection
        constexpr uint32_t VPS_SEL = (2 << 9);  ///< OPAMP2 Non inverting input secondary selection
        constexpr uint32_t CALON = (1U << 11);  ///< Calibration mode enable
        constexpr uint32_t CAL_SEL = (2 << 12);  ///< Calibration selection
        constexpr uint32_t PGA_GAIN = (4 << 14);  ///< Gain in PGA mode
        constexpr uint32_t USER_TRIM = (1U << 18);  ///< User trimming enable
        constexpr uint32_t TRIMOFFSETP = (5 << 19);  ///< Offset trimming value (PMOS)
        constexpr uint32_t TRIMOFFSETN = (5 << 24);  ///< Offset trimming value (NMOS)
        constexpr uint32_t TSTREF = (1U << 29);  ///< TSTREF
        constexpr uint32_t OUTCAL = (1U << 30);  ///< OPAMP 2 ouput status flag
        constexpr uint32_t LOCK = (1U << 31);  ///< OPAMP 2 lock
    }

    /// OPAMP3_CSR Register bits
    namespace opamp3_csr_bits {
        constexpr uint32_t OPAMP3EN = (1U << 0);  ///< OPAMP3 enable
        constexpr uint32_t FORCE_VP = (1U << 1);  ///< FORCE_VP
        constexpr uint32_t VP_SEL = (2 << 2);  ///< OPAMP3 Non inverting input selection
        constexpr uint32_t VM_SEL = (2 << 5);  ///< OPAMP3 inverting input selection
        constexpr uint32_t TCM_EN = (1U << 7);  ///< Timer controlled Mux mode enable
        constexpr uint32_t VMS_SEL = (1U << 8);  ///< OPAMP3 inverting input secondary selection
        constexpr uint32_t VPS_SEL = (2 << 9);  ///< OPAMP3 Non inverting input secondary selection
        constexpr uint32_t CALON = (1U << 11);  ///< Calibration mode enable
        constexpr uint32_t CALSEL = (2 << 12);  ///< Calibration selection
        constexpr uint32_t PGA_GAIN = (4 << 14);  ///< Gain in PGA mode
        constexpr uint32_t USER_TRIM = (1U << 18);  ///< User trimming enable
        constexpr uint32_t TRIMOFFSETP = (5 << 19);  ///< Offset trimming value (PMOS)
        constexpr uint32_t TRIMOFFSETN = (5 << 24);  ///< Offset trimming value (NMOS)
        constexpr uint32_t TSTREF = (1U << 29);  ///< TSTREF
        constexpr uint32_t OUTCAL = (1U << 30);  ///< OPAMP 3 ouput status flag
        constexpr uint32_t LOCK = (1U << 31);  ///< OPAMP 3 lock
    }

    /// OPAMP4_CSR Register bits
    namespace opamp4_csr_bits {
        constexpr uint32_t OPAMP4EN = (1U << 0);  ///< OPAMP4 enable
        constexpr uint32_t FORCE_VP = (1U << 1);  ///< FORCE_VP
        constexpr uint32_t VP_SEL = (2 << 2);  ///< OPAMP4 Non inverting input selection
        constexpr uint32_t VM_SEL = (2 << 5);  ///< OPAMP4 inverting input selection
        constexpr uint32_t TCM_EN = (1U << 7);  ///< Timer controlled Mux mode enable
        constexpr uint32_t VMS_SEL = (1U << 8);  ///< OPAMP4 inverting input secondary selection
        constexpr uint32_t VPS_SEL = (2 << 9);  ///< OPAMP4 Non inverting input secondary selection
        constexpr uint32_t CALON = (1U << 11);  ///< Calibration mode enable
        constexpr uint32_t CALSEL = (2 << 12);  ///< Calibration selection
        constexpr uint32_t PGA_GAIN = (4 << 14);  ///< Gain in PGA mode
        constexpr uint32_t USER_TRIM = (1U << 18);  ///< User trimming enable
        constexpr uint32_t TRIMOFFSETP = (5 << 19);  ///< Offset trimming value (PMOS)
        constexpr uint32_t TRIMOFFSETN = (5 << 24);  ///< Offset trimming value (NMOS)
        constexpr uint32_t TSTREF = (1U << 29);  ///< TSTREF
        constexpr uint32_t OUTCAL = (1U << 30);  ///< OPAMP 4 ouput status flag
        constexpr uint32_t LOCK = (1U << 31);  ///< OPAMP 4 lock
    }

}

// ============================================================================
// FMC Peripheral
// ============================================================================

namespace fmc {
    /// Base addresses
    constexpr uint32_t FMC_BASE = 0xA0000400;

    /// FMC Register structure
    struct Registers {
        volatile uint32_t BCR1;  ///< Offset: 0x00 - SRAM/NOR-Flash chip-select control register 1
        volatile uint32_t BTR1;  ///< Offset: 0x04 - SRAM/NOR-Flash chip-select timing register 1
        volatile uint32_t BCR2;  ///< Offset: 0x08 - SRAM/NOR-Flash chip-select control register 2
        volatile uint32_t BTR2;  ///< Offset: 0x0C - SRAM/NOR-Flash chip-select timing register 2
        volatile uint32_t BCR3;  ///< Offset: 0x10 - SRAM/NOR-Flash chip-select control register 3
        volatile uint32_t BTR3;  ///< Offset: 0x14 - SRAM/NOR-Flash chip-select timing register 3
        volatile uint32_t BCR4;  ///< Offset: 0x18 - SRAM/NOR-Flash chip-select control register 4
        volatile uint32_t BTR4;  ///< Offset: 0x1C - SRAM/NOR-Flash chip-select timing register 4
        volatile uint32_t PCR2;  ///< Offset: 0x60 - PC Card/NAND Flash control register 2
        volatile uint32_t SR2;  ///< Offset: 0x64 - FIFO status and interrupt register 2
        volatile uint32_t PMEM2;  ///< Offset: 0x68 - Common memory space timing register 2
        volatile uint32_t PATT2;  ///< Offset: 0x6C - Attribute memory space timing register 2
        volatile uint32_t ECCR2;  ///< Offset: 0x74 - ECC result register 2
        volatile uint32_t PCR3;  ///< Offset: 0x80 - PC Card/NAND Flash control register 3
        volatile uint32_t SR3;  ///< Offset: 0x84 - FIFO status and interrupt register 3
        volatile uint32_t PMEM3;  ///< Offset: 0x88 - Common memory space timing register 3
        volatile uint32_t PATT3;  ///< Offset: 0x8C - Attribute memory space timing register 3
        volatile uint32_t ECCR3;  ///< Offset: 0x94 - ECC result register 3
        volatile uint32_t PCR4;  ///< Offset: 0xA0 - PC Card/NAND Flash control register 4
        volatile uint32_t SR4;  ///< Offset: 0xA4 - FIFO status and interrupt register 4
        volatile uint32_t PMEM4;  ///< Offset: 0xA8 - Common memory space timing register 4
        volatile uint32_t PATT4;  ///< Offset: 0xAC - Attribute memory space timing register 4
        volatile uint32_t PIO4;  ///< Offset: 0xB0 - I/O space timing register 4
        volatile uint32_t BWTR1;  ///< Offset: 0x104 - SRAM/NOR-Flash write timing registers 1
        volatile uint32_t BWTR2;  ///< Offset: 0x10C - SRAM/NOR-Flash write timing registers 2
        volatile uint32_t BWTR3;  ///< Offset: 0x114 - SRAM/NOR-Flash write timing registers 3
        volatile uint32_t BWTR4;  ///< Offset: 0x11C - SRAM/NOR-Flash write timing registers 4
    };

    /// Peripheral instances
    inline Registers* FMC = reinterpret_cast<Registers*>(FMC_BASE);

    // Bit definitions
    /// BCR1 Register bits
    namespace bcr1_bits {
        constexpr uint32_t CCLKEN = (1U << 20);  ///< CCLKEN
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR1 Register bits
    namespace btr1_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR2 Register bits
    namespace bcr2_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR2 Register bits
    namespace btr2_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR3 Register bits
    namespace bcr3_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR3 Register bits
    namespace btr3_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR4 Register bits
    namespace bcr4_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR4 Register bits
    namespace btr4_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// PCR2 Register bits
    namespace pcr2_bits {
        constexpr uint32_t ECCPS = (3 << 17);  ///< ECCPS
        constexpr uint32_t TAR = (4 << 13);  ///< TAR
        constexpr uint32_t TCLR = (4 << 9);  ///< TCLR
        constexpr uint32_t ECCEN = (1U << 6);  ///< ECCEN
        constexpr uint32_t PWID = (2 << 4);  ///< PWID
        constexpr uint32_t PTYP = (1U << 3);  ///< PTYP
        constexpr uint32_t PBKEN = (1U << 2);  ///< PBKEN
        constexpr uint32_t PWAITEN = (1U << 1);  ///< PWAITEN
    }

    /// SR2 Register bits
    namespace sr2_bits {
        constexpr uint32_t FEMPT = (1U << 6);  ///< FEMPT
        constexpr uint32_t IFEN = (1U << 5);  ///< IFEN
        constexpr uint32_t ILEN = (1U << 4);  ///< ILEN
        constexpr uint32_t IREN = (1U << 3);  ///< IREN
        constexpr uint32_t IFS = (1U << 2);  ///< IFS
        constexpr uint32_t ILS = (1U << 1);  ///< ILS
        constexpr uint32_t IRS = (1U << 0);  ///< IRS
    }

    /// PMEM2 Register bits
    namespace pmem2_bits {
        constexpr uint32_t MEMHIZx = (8 << 24);  ///< MEMHIZx
        constexpr uint32_t MEMHOLDx = (8 << 16);  ///< MEMHOLDx
        constexpr uint32_t MEMWAITx = (8 << 8);  ///< MEMWAITx
        constexpr uint32_t MEMSETx = (8 << 0);  ///< MEMSETx
    }

    /// PATT2 Register bits
    namespace patt2_bits {
        constexpr uint32_t ATTHIZx = (8 << 24);  ///< ATTHIZx
        constexpr uint32_t ATTHOLDx = (8 << 16);  ///< ATTHOLDx
        constexpr uint32_t ATTWAITx = (8 << 8);  ///< ATTWAITx
        constexpr uint32_t ATTSETx = (8 << 0);  ///< ATTSETx
    }

    /// ECCR2 Register bits
    namespace eccr2_bits {
        constexpr uint32_t ECCx = (32 << 0);  ///< ECCx
    }

    /// PCR3 Register bits
    namespace pcr3_bits {
        constexpr uint32_t ECCPS = (3 << 17);  ///< ECCPS
        constexpr uint32_t TAR = (4 << 13);  ///< TAR
        constexpr uint32_t TCLR = (4 << 9);  ///< TCLR
        constexpr uint32_t ECCEN = (1U << 6);  ///< ECCEN
        constexpr uint32_t PWID = (2 << 4);  ///< PWID
        constexpr uint32_t PTYP = (1U << 3);  ///< PTYP
        constexpr uint32_t PBKEN = (1U << 2);  ///< PBKEN
        constexpr uint32_t PWAITEN = (1U << 1);  ///< PWAITEN
    }

    /// SR3 Register bits
    namespace sr3_bits {
        constexpr uint32_t FEMPT = (1U << 6);  ///< FEMPT
        constexpr uint32_t IFEN = (1U << 5);  ///< IFEN
        constexpr uint32_t ILEN = (1U << 4);  ///< ILEN
        constexpr uint32_t IREN = (1U << 3);  ///< IREN
        constexpr uint32_t IFS = (1U << 2);  ///< IFS
        constexpr uint32_t ILS = (1U << 1);  ///< ILS
        constexpr uint32_t IRS = (1U << 0);  ///< IRS
    }

    /// PMEM3 Register bits
    namespace pmem3_bits {
        constexpr uint32_t MEMHIZx = (8 << 24);  ///< MEMHIZx
        constexpr uint32_t MEMHOLDx = (8 << 16);  ///< MEMHOLDx
        constexpr uint32_t MEMWAITx = (8 << 8);  ///< MEMWAITx
        constexpr uint32_t MEMSETx = (8 << 0);  ///< MEMSETx
    }

    /// PATT3 Register bits
    namespace patt3_bits {
        constexpr uint32_t ATTHIZx = (8 << 24);  ///< ATTHIZx
        constexpr uint32_t ATTHOLDx = (8 << 16);  ///< ATTHOLDx
        constexpr uint32_t ATTWAITx = (8 << 8);  ///< ATTWAITx
        constexpr uint32_t ATTSETx = (8 << 0);  ///< ATTSETx
    }

    /// ECCR3 Register bits
    namespace eccr3_bits {
        constexpr uint32_t ECCx = (32 << 0);  ///< ECCx
    }

    /// PCR4 Register bits
    namespace pcr4_bits {
        constexpr uint32_t ECCPS = (3 << 17);  ///< ECCPS
        constexpr uint32_t TAR = (4 << 13);  ///< TAR
        constexpr uint32_t TCLR = (4 << 9);  ///< TCLR
        constexpr uint32_t ECCEN = (1U << 6);  ///< ECCEN
        constexpr uint32_t PWID = (2 << 4);  ///< PWID
        constexpr uint32_t PTYP = (1U << 3);  ///< PTYP
        constexpr uint32_t PBKEN = (1U << 2);  ///< PBKEN
        constexpr uint32_t PWAITEN = (1U << 1);  ///< PWAITEN
    }

    /// SR4 Register bits
    namespace sr4_bits {
        constexpr uint32_t FEMPT = (1U << 6);  ///< FEMPT
        constexpr uint32_t IFEN = (1U << 5);  ///< IFEN
        constexpr uint32_t ILEN = (1U << 4);  ///< ILEN
        constexpr uint32_t IREN = (1U << 3);  ///< IREN
        constexpr uint32_t IFS = (1U << 2);  ///< IFS
        constexpr uint32_t ILS = (1U << 1);  ///< ILS
        constexpr uint32_t IRS = (1U << 0);  ///< IRS
    }

    /// PMEM4 Register bits
    namespace pmem4_bits {
        constexpr uint32_t MEMHIZx = (8 << 24);  ///< MEMHIZx
        constexpr uint32_t MEMHOLDx = (8 << 16);  ///< MEMHOLDx
        constexpr uint32_t MEMWAITx = (8 << 8);  ///< MEMWAITx
        constexpr uint32_t MEMSETx = (8 << 0);  ///< MEMSETx
    }

    /// PATT4 Register bits
    namespace patt4_bits {
        constexpr uint32_t ATTHIZx = (8 << 24);  ///< ATTHIZx
        constexpr uint32_t ATTHOLDx = (8 << 16);  ///< ATTHOLDx
        constexpr uint32_t ATTWAITx = (8 << 8);  ///< ATTWAITx
        constexpr uint32_t ATTSETx = (8 << 0);  ///< ATTSETx
    }

    /// PIO4 Register bits
    namespace pio4_bits {
        constexpr uint32_t IOHIZx = (8 << 24);  ///< IOHIZx
        constexpr uint32_t IOHOLDx = (8 << 16);  ///< IOHOLDx
        constexpr uint32_t IOWAITx = (8 << 8);  ///< IOWAITx
        constexpr uint32_t IOSETx = (8 << 0);  ///< IOSETx
    }

    /// BWTR1 Register bits
    namespace bwtr1_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< Bus turnaround phase duration
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR2 Register bits
    namespace bwtr2_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< Bus turnaround phase duration
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR3 Register bits
    namespace bwtr3_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< Bus turnaround phase duration
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR4 Register bits
    namespace bwtr4_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< Bus turnaround phase duration
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

}

// ============================================================================
// NVIC Peripheral
// ============================================================================

namespace nvic {
    /// Base addresses
    constexpr uint32_t NVIC_BASE = 0xE000E100;
    constexpr uint32_t NVIC_STIR_BASE = 0xE000EF00;

    /// NVIC Register structure
    struct Registers {
        volatile uint32_t ISER0;  ///< Offset: 0x00 - Interrupt Set-Enable Register
        volatile uint32_t ISER1;  ///< Offset: 0x04 - Interrupt Set-Enable Register
        volatile uint32_t ISER2;  ///< Offset: 0x08 - Interrupt Set-Enable Register
        volatile uint32_t ICER0;  ///< Offset: 0x80 - Interrupt Clear-Enable Register
        volatile uint32_t ICER1;  ///< Offset: 0x84 - Interrupt Clear-Enable Register
        volatile uint32_t ICER2;  ///< Offset: 0x88 - Interrupt Clear-Enable Register
        volatile uint32_t ISPR0;  ///< Offset: 0x100 - Interrupt Set-Pending Register
        volatile uint32_t ISPR1;  ///< Offset: 0x104 - Interrupt Set-Pending Register
        volatile uint32_t ISPR2;  ///< Offset: 0x108 - Interrupt Set-Pending Register
        volatile uint32_t ICPR0;  ///< Offset: 0x180 - Interrupt Clear-Pending Register
        volatile uint32_t ICPR1;  ///< Offset: 0x184 - Interrupt Clear-Pending Register
        volatile uint32_t ICPR2;  ///< Offset: 0x188 - Interrupt Clear-Pending Register
        volatile uint32_t IABR0;  ///< Offset: 0x200 - Interrupt Active Bit Register
        volatile uint32_t IABR1;  ///< Offset: 0x204 - Interrupt Active Bit Register
        volatile uint32_t IABR2;  ///< Offset: 0x208 - Interrupt Active Bit Register
        volatile uint32_t IPR0;  ///< Offset: 0x300 - Interrupt Priority Register
        volatile uint32_t IPR1;  ///< Offset: 0x304 - Interrupt Priority Register
        volatile uint32_t IPR2;  ///< Offset: 0x308 - Interrupt Priority Register
        volatile uint32_t IPR3;  ///< Offset: 0x30C - Interrupt Priority Register
        volatile uint32_t IPR4;  ///< Offset: 0x310 - Interrupt Priority Register
        volatile uint32_t IPR5;  ///< Offset: 0x314 - Interrupt Priority Register
        volatile uint32_t IPR6;  ///< Offset: 0x318 - Interrupt Priority Register
        volatile uint32_t IPR7;  ///< Offset: 0x31C - Interrupt Priority Register
        volatile uint32_t IPR8;  ///< Offset: 0x320 - Interrupt Priority Register
        volatile uint32_t IPR9;  ///< Offset: 0x324 - Interrupt Priority Register
        volatile uint32_t IPR10;  ///< Offset: 0x328 - Interrupt Priority Register
        volatile uint32_t IPR11;  ///< Offset: 0x32C - Interrupt Priority Register
        volatile uint32_t IPR12;  ///< Offset: 0x330 - Interrupt Priority Register
        volatile uint32_t IPR13;  ///< Offset: 0x334 - Interrupt Priority Register
        volatile uint32_t IPR14;  ///< Offset: 0x338 - Interrupt Priority Register
        volatile uint32_t IPR15;  ///< Offset: 0x33C - Interrupt Priority Register
        volatile uint32_t IPR16;  ///< Offset: 0x340 - Interrupt Priority Register
        volatile uint32_t IPR17;  ///< Offset: 0x344 - Interrupt Priority Register
        volatile uint32_t IPR18;  ///< Offset: 0x348 - Interrupt Priority Register
        volatile uint32_t IPR19;  ///< Offset: 0x34C - Interrupt Priority Register
        volatile uint32_t IPR20;  ///< Offset: 0x350 - Interrupt Priority Register
    };

    /// Peripheral instances
    inline Registers* NVIC = reinterpret_cast<Registers*>(NVIC_BASE);
    inline Registers* NVIC_STIR = reinterpret_cast<Registers*>(NVIC_STIR_BASE);

    // Bit definitions
    /// ISER0 Register bits
    namespace iser0_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ISER1 Register bits
    namespace iser1_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ISER2 Register bits
    namespace iser2_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ICER0 Register bits
    namespace icer0_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ICER1 Register bits
    namespace icer1_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ICER2 Register bits
    namespace icer2_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ISPR0 Register bits
    namespace ispr0_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ISPR1 Register bits
    namespace ispr1_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ISPR2 Register bits
    namespace ispr2_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ICPR0 Register bits
    namespace icpr0_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// ICPR1 Register bits
    namespace icpr1_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// ICPR2 Register bits
    namespace icpr2_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// IABR0 Register bits
    namespace iabr0_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IABR1 Register bits
    namespace iabr1_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IABR2 Register bits
    namespace iabr2_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IPR0 Register bits
    namespace ipr0_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR1 Register bits
    namespace ipr1_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR2 Register bits
    namespace ipr2_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR3 Register bits
    namespace ipr3_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR4 Register bits
    namespace ipr4_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR5 Register bits
    namespace ipr5_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR6 Register bits
    namespace ipr6_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR7 Register bits
    namespace ipr7_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR8 Register bits
    namespace ipr8_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR9 Register bits
    namespace ipr9_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR10 Register bits
    namespace ipr10_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR11 Register bits
    namespace ipr11_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR12 Register bits
    namespace ipr12_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR13 Register bits
    namespace ipr13_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR14 Register bits
    namespace ipr14_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR15 Register bits
    namespace ipr15_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR16 Register bits
    namespace ipr16_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR17 Register bits
    namespace ipr17_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR18 Register bits
    namespace ipr18_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR19 Register bits
    namespace ipr19_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR20 Register bits
    namespace ipr20_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

}

// ============================================================================
// FPU Peripheral
// ============================================================================

namespace fpu {
    /// Base addresses
    constexpr uint32_t FPU_BASE = 0xE000EF34;
    constexpr uint32_t FPU_CPACR_BASE = 0xE000ED88;

    /// FPU Register structure
    struct Registers {
        volatile uint32_t FPCCR;  ///< Offset: 0x00 - Floating-point context control register
        volatile uint32_t FPCAR;  ///< Offset: 0x04 - Floating-point context address register
        volatile uint32_t FPSCR;  ///< Offset: 0x08 - Floating-point status control register
    };

    /// Peripheral instances
    inline Registers* FPU = reinterpret_cast<Registers*>(FPU_BASE);
    inline Registers* FPU_CPACR = reinterpret_cast<Registers*>(FPU_CPACR_BASE);

    // Bit definitions
    /// FPCCR Register bits
    namespace fpccr_bits {
        constexpr uint32_t LSPACT = (1U << 0);  ///< LSPACT
        constexpr uint32_t USER = (1U << 1);  ///< USER
        constexpr uint32_t THREAD = (1U << 3);  ///< THREAD
        constexpr uint32_t HFRDY = (1U << 4);  ///< HFRDY
        constexpr uint32_t MMRDY = (1U << 5);  ///< MMRDY
        constexpr uint32_t BFRDY = (1U << 6);  ///< BFRDY
        constexpr uint32_t MONRDY = (1U << 8);  ///< MONRDY
        constexpr uint32_t LSPEN = (1U << 30);  ///< LSPEN
        constexpr uint32_t ASPEN = (1U << 31);  ///< ASPEN
    }

    /// FPCAR Register bits
    namespace fpcar_bits {
        constexpr uint32_t ADDRESS = (29 << 3);  ///< Location of unpopulated floating-point
    }

    /// FPSCR Register bits
    namespace fpscr_bits {
        constexpr uint32_t IOC = (1U << 0);  ///< Invalid operation cumulative exception bit
        constexpr uint32_t DZC = (1U << 1);  ///< Division by zero cumulative exception bit.
        constexpr uint32_t OFC = (1U << 2);  ///< Overflow cumulative exception bit
        constexpr uint32_t UFC = (1U << 3);  ///< Underflow cumulative exception bit
        constexpr uint32_t IXC = (1U << 4);  ///< Inexact cumulative exception bit
        constexpr uint32_t IDC = (1U << 7);  ///< Input denormal cumulative exception bit.
        constexpr uint32_t RMode = (2 << 22);  ///< Rounding Mode control field
        constexpr uint32_t FZ = (1U << 24);  ///< Flush-to-zero mode control bit:
        constexpr uint32_t DN = (1U << 25);  ///< Default NaN mode control bit
        constexpr uint32_t AHP = (1U << 26);  ///< Alternative half-precision control bit
        constexpr uint32_t V = (1U << 28);  ///< Overflow condition code flag
        constexpr uint32_t C = (1U << 29);  ///< Carry condition code flag
        constexpr uint32_t Z = (1U << 30);  ///< Zero condition code flag
        constexpr uint32_t N = (1U << 31);  ///< Negative condition code flag
    }

}

// ============================================================================
// MPU Peripheral
// ============================================================================

namespace mpu {
    /// Base addresses
    constexpr uint32_t MPU_BASE = 0xE000ED90;

    /// MPU Register structure
    struct Registers {
        volatile uint32_t MPU_TYPER;  ///< Offset: 0x00 - MPU type register
        volatile uint32_t MPU_CTRL;  ///< Offset: 0x04 - MPU control register
        volatile uint32_t MPU_RNR;  ///< Offset: 0x08 - MPU region number register
        volatile uint32_t MPU_RBAR;  ///< Offset: 0x0C - MPU region base address register
        volatile uint32_t MPU_RASR;  ///< Offset: 0x10 - MPU region attribute and size register
    };

    /// Peripheral instances
    inline Registers* MPU = reinterpret_cast<Registers*>(MPU_BASE);

    // Bit definitions
    /// MPU_TYPER Register bits
    namespace mpu_typer_bits {
        constexpr uint32_t SEPARATE = (1U << 0);  ///< Separate flag
        constexpr uint32_t DREGION = (8 << 8);  ///< Number of MPU data regions
        constexpr uint32_t IREGION = (8 << 16);  ///< Number of MPU instruction regions
    }

    /// MPU_CTRL Register bits
    namespace mpu_ctrl_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Enables the MPU
        constexpr uint32_t HFNMIENA = (1U << 1);  ///< Enables the operation of MPU during hard fault
        constexpr uint32_t PRIVDEFENA = (1U << 2);  ///< Enable priviliged software access to default memory map
    }

    /// MPU_RNR Register bits
    namespace mpu_rnr_bits {
        constexpr uint32_t REGION = (8 << 0);  ///< MPU region
    }

    /// MPU_RBAR Register bits
    namespace mpu_rbar_bits {
        constexpr uint32_t REGION = (4 << 0);  ///< MPU region field
        constexpr uint32_t VALID = (1U << 4);  ///< MPU region number valid
        constexpr uint32_t ADDR = (27 << 5);  ///< Region base address field
    }

    /// MPU_RASR Register bits
    namespace mpu_rasr_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Region enable bit.
        constexpr uint32_t SIZE = (5 << 1);  ///< Size of the MPU protection region
        constexpr uint32_t SRD = (8 << 8);  ///< Subregion disable bits
        constexpr uint32_t B = (1U << 16);  ///< memory attribute
        constexpr uint32_t C = (1U << 17);  ///< memory attribute
        constexpr uint32_t S = (1U << 18);  ///< Shareable memory attribute
        constexpr uint32_t TEX = (3 << 19);  ///< memory attribute
        constexpr uint32_t AP = (3 << 24);  ///< Access permission
        constexpr uint32_t XN = (1U << 28);  ///< Instruction access disable bit
    }

}

// ============================================================================
// STK Peripheral
// ============================================================================

namespace stk {
    /// Base addresses
    constexpr uint32_t STK_BASE = 0xE000E010;

    /// STK Register structure
    struct Registers {
        volatile uint32_t CTRL;  ///< Offset: 0x00 - SysTick control and status register
        volatile uint32_t LOAD;  ///< Offset: 0x04 - SysTick reload value register
        volatile uint32_t VAL;  ///< Offset: 0x08 - SysTick current value register
        volatile uint32_t CALIB;  ///< Offset: 0x0C - SysTick calibration value register
    };

    /// Peripheral instances
    inline Registers* STK = reinterpret_cast<Registers*>(STK_BASE);

    // Bit definitions
    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Counter enable
        constexpr uint32_t TICKINT = (1U << 1);  ///< SysTick exception request enable
        constexpr uint32_t CLKSOURCE = (1U << 2);  ///< Clock source selection
        constexpr uint32_t COUNTFLAG = (1U << 16);  ///< COUNTFLAG
    }

    /// LOAD Register bits
    namespace load_bits {
        constexpr uint32_t RELOAD = (24 << 0);  ///< RELOAD value
    }

    /// VAL Register bits
    namespace val_bits {
        constexpr uint32_t CURRENT = (24 << 0);  ///< Current counter value
    }

    /// CALIB Register bits
    namespace calib_bits {
        constexpr uint32_t TENMS = (24 << 0);  ///< Calibration value
        constexpr uint32_t SKEW = (1U << 30);  ///< SKEW flag: Indicates whether the TENMS value is exact
        constexpr uint32_t NOREF = (1U << 31);  ///< NOREF flag. Reads as zero
    }

}

// ============================================================================
// SCB Peripheral
// ============================================================================

namespace scb {
    /// Base addresses
    constexpr uint32_t SCB_BASE = 0xE000ED00;
    constexpr uint32_t SCB_ACTRL_BASE = 0xE000E008;

    /// SCB Register structure
    struct Registers {
        volatile uint32_t CPUID;  ///< Offset: 0x00 - CPUID base register
        volatile uint32_t ICSR;  ///< Offset: 0x04 - Interrupt control and state register
        volatile uint32_t VTOR;  ///< Offset: 0x08 - Vector table offset register
        volatile uint32_t AIRCR;  ///< Offset: 0x0C - Application interrupt and reset control register
        volatile uint32_t SCR;  ///< Offset: 0x10 - System control register
        volatile uint32_t CCR;  ///< Offset: 0x14 - Configuration and control register
        volatile uint32_t SHPR1;  ///< Offset: 0x18 - System handler priority registers
        volatile uint32_t SHPR2;  ///< Offset: 0x1C - System handler priority registers
        volatile uint32_t SHPR3;  ///< Offset: 0x20 - System handler priority registers
        volatile uint32_t SHCRS;  ///< Offset: 0x24 - System handler control and state register
        volatile uint32_t CFSR_UFSR_BFSR_MMFSR;  ///< Offset: 0x28 - Configurable fault status register
        volatile uint32_t HFSR;  ///< Offset: 0x2C - Hard fault status register
        volatile uint32_t MMFAR;  ///< Offset: 0x34 - Memory management fault address register
        volatile uint32_t BFAR;  ///< Offset: 0x38 - Bus fault address register
        volatile uint32_t AFSR;  ///< Offset: 0x3C - Auxiliary fault status register
    };

    /// Peripheral instances
    inline Registers* SCB = reinterpret_cast<Registers*>(SCB_BASE);
    inline Registers* SCB_ACTRL = reinterpret_cast<Registers*>(SCB_ACTRL_BASE);

    // Bit definitions
    /// CPUID Register bits
    namespace cpuid_bits {
        constexpr uint32_t Revision = (4 << 0);  ///< Revision number
        constexpr uint32_t PartNo = (12 << 4);  ///< Part number of the processor
        constexpr uint32_t Constant = (4 << 16);  ///< Reads as 0xF
        constexpr uint32_t Variant = (4 << 20);  ///< Variant number
        constexpr uint32_t Implementer = (8 << 24);  ///< Implementer code
    }

    /// ICSR Register bits
    namespace icsr_bits {
        constexpr uint32_t VECTACTIVE = (9 << 0);  ///< Active vector
        constexpr uint32_t RETTOBASE = (1U << 11);  ///< Return to base level
        constexpr uint32_t VECTPENDING = (7 << 12);  ///< Pending vector
        constexpr uint32_t ISRPENDING = (1U << 22);  ///< Interrupt pending flag
        constexpr uint32_t PENDSTCLR = (1U << 25);  ///< SysTick exception clear-pending bit
        constexpr uint32_t PENDSTSET = (1U << 26);  ///< SysTick exception set-pending bit
        constexpr uint32_t PENDSVCLR = (1U << 27);  ///< PendSV clear-pending bit
        constexpr uint32_t PENDSVSET = (1U << 28);  ///< PendSV set-pending bit
        constexpr uint32_t NMIPENDSET = (1U << 31);  ///< NMI set-pending bit.
    }

    /// VTOR Register bits
    namespace vtor_bits {
        constexpr uint32_t TBLOFF = (21 << 9);  ///< Vector table base offset field
    }

    /// AIRCR Register bits
    namespace aircr_bits {
        constexpr uint32_t VECTRESET = (1U << 0);  ///< VECTRESET
        constexpr uint32_t VECTCLRACTIVE = (1U << 1);  ///< VECTCLRACTIVE
        constexpr uint32_t SYSRESETREQ = (1U << 2);  ///< SYSRESETREQ
        constexpr uint32_t PRIGROUP = (3 << 8);  ///< PRIGROUP
        constexpr uint32_t ENDIANESS = (1U << 15);  ///< ENDIANESS
        constexpr uint32_t VECTKEYSTAT = (16 << 16);  ///< Register key
    }

    /// SCR Register bits
    namespace scr_bits {
        constexpr uint32_t SLEEPONEXIT = (1U << 1);  ///< SLEEPONEXIT
        constexpr uint32_t SLEEPDEEP = (1U << 2);  ///< SLEEPDEEP
        constexpr uint32_t SEVEONPEND = (1U << 4);  ///< Send Event on Pending bit
    }

    /// CCR Register bits
    namespace ccr_bits {
        constexpr uint32_t NONBASETHRDENA = (1U << 0);  ///< Configures how the processor enters Thread mode
        constexpr uint32_t USERSETMPEND = (1U << 1);  ///< USERSETMPEND
        constexpr uint32_t UNALIGN__TRP = (1U << 3);  ///< UNALIGN_ TRP
        constexpr uint32_t DIV_0_TRP = (1U << 4);  ///< DIV_0_TRP
        constexpr uint32_t BFHFNMIGN = (1U << 8);  ///< BFHFNMIGN
        constexpr uint32_t STKALIGN = (1U << 9);  ///< STKALIGN
    }

    /// SHPR1 Register bits
    namespace shpr1_bits {
        constexpr uint32_t PRI_4 = (8 << 0);  ///< Priority of system handler 4
        constexpr uint32_t PRI_5 = (8 << 8);  ///< Priority of system handler 5
        constexpr uint32_t PRI_6 = (8 << 16);  ///< Priority of system handler 6
    }

    /// SHPR2 Register bits
    namespace shpr2_bits {
        constexpr uint32_t PRI_11 = (8 << 24);  ///< Priority of system handler 11
    }

    /// SHPR3 Register bits
    namespace shpr3_bits {
        constexpr uint32_t PRI_14 = (8 << 16);  ///< Priority of system handler 14
        constexpr uint32_t PRI_15 = (8 << 24);  ///< Priority of system handler 15
    }

    /// SHCRS Register bits
    namespace shcrs_bits {
        constexpr uint32_t MEMFAULTACT = (1U << 0);  ///< Memory management fault exception active bit
        constexpr uint32_t BUSFAULTACT = (1U << 1);  ///< Bus fault exception active bit
        constexpr uint32_t USGFAULTACT = (1U << 3);  ///< Usage fault exception active bit
        constexpr uint32_t SVCALLACT = (1U << 7);  ///< SVC call active bit
        constexpr uint32_t MONITORACT = (1U << 8);  ///< Debug monitor active bit
        constexpr uint32_t PENDSVACT = (1U << 10);  ///< PendSV exception active bit
        constexpr uint32_t SYSTICKACT = (1U << 11);  ///< SysTick exception active bit
        constexpr uint32_t USGFAULTPENDED = (1U << 12);  ///< Usage fault exception pending bit
        constexpr uint32_t MEMFAULTPENDED = (1U << 13);  ///< Memory management fault exception pending bit
        constexpr uint32_t BUSFAULTPENDED = (1U << 14);  ///< Bus fault exception pending bit
        constexpr uint32_t SVCALLPENDED = (1U << 15);  ///< SVC call pending bit
        constexpr uint32_t MEMFAULTENA = (1U << 16);  ///< Memory management fault enable bit
        constexpr uint32_t BUSFAULTENA = (1U << 17);  ///< Bus fault enable bit
        constexpr uint32_t USGFAULTENA = (1U << 18);  ///< Usage fault enable bit
    }

    /// CFSR_UFSR_BFSR_MMFSR Register bits
    namespace cfsr_ufsr_bfsr_mmfsr_bits {
        constexpr uint32_t IACCVIOL = (1U << 1);  ///< Instruction access violation flag
        constexpr uint32_t MUNSTKERR = (1U << 3);  ///< Memory manager fault on unstacking for a return from exception
        constexpr uint32_t MSTKERR = (1U << 4);  ///< Memory manager fault on stacking for exception entry.
        constexpr uint32_t MLSPERR = (1U << 5);  ///< MLSPERR
        constexpr uint32_t MMARVALID = (1U << 7);  ///< Memory Management Fault Address Register (MMAR) valid flag
        constexpr uint32_t IBUSERR = (1U << 8);  ///< Instruction bus error
        constexpr uint32_t PRECISERR = (1U << 9);  ///< Precise data bus error
        constexpr uint32_t IMPRECISERR = (1U << 10);  ///< Imprecise data bus error
        constexpr uint32_t UNSTKERR = (1U << 11);  ///< Bus fault on unstacking for a return from exception
        constexpr uint32_t STKERR = (1U << 12);  ///< Bus fault on stacking for exception entry
        constexpr uint32_t LSPERR = (1U << 13);  ///< Bus fault on floating-point lazy state preservation
        constexpr uint32_t BFARVALID = (1U << 15);  ///< Bus Fault Address Register (BFAR) valid flag
        constexpr uint32_t UNDEFINSTR = (1U << 16);  ///< Undefined instruction usage fault
        constexpr uint32_t INVSTATE = (1U << 17);  ///< Invalid state usage fault
        constexpr uint32_t INVPC = (1U << 18);  ///< Invalid PC load usage fault
        constexpr uint32_t NOCP = (1U << 19);  ///< No coprocessor usage fault.
        constexpr uint32_t UNALIGNED = (1U << 24);  ///< Unaligned access usage fault
        constexpr uint32_t DIVBYZERO = (1U << 25);  ///< Divide by zero usage fault
    }

    /// HFSR Register bits
    namespace hfsr_bits {
        constexpr uint32_t VECTTBL = (1U << 1);  ///< Vector table hard fault
        constexpr uint32_t FORCED = (1U << 30);  ///< Forced hard fault
        constexpr uint32_t DEBUG_VT = (1U << 31);  ///< Reserved for Debug use
    }

    /// MMFAR Register bits
    namespace mmfar_bits {
        constexpr uint32_t MMFAR = (32 << 0);  ///< Memory management fault address
    }

    /// BFAR Register bits
    namespace bfar_bits {
        constexpr uint32_t BFAR = (32 << 0);  ///< Bus fault address
    }

    /// AFSR Register bits
    namespace afsr_bits {
        constexpr uint32_t IMPDEF = (32 << 0);  ///< Implementation defined
    }

}


} // namespace alloy::generated::stm32f303

#endif // ALLOY_GENERATED_STM32F303_PERIPHERALS_HPP