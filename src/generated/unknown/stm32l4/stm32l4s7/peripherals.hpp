/// Auto-generated code for STM32L4S7
/// Generated by Alloy Code Generator
/// Source: st_stm32l4.json
/// DO NOT EDIT - Changes will be overwritten
///
/// Generated: 2025-10-31 12:00:46
#ifndef ALLOY_GENERATED_STM32L4S7_PERIPHERALS_HPP
#define ALLOY_GENERATED_STM32L4S7_PERIPHERALS_HPP

#include <cstdint>

namespace alloy::generated::stm32l4s7 {

/// Memory map
namespace memory {
    constexpr uint32_t FLASH_BASE = 0x08000000;
    constexpr uint32_t FLASH_SIZE = 64 * 1024;
    constexpr uint32_t RAM_BASE   = 0x20000000;
    constexpr uint32_t RAM_SIZE   = 20 * 1024;
}

// ============================================================================
// MCU Resource Metadata
// ============================================================================

/// MCU capabilities and resource availability
namespace traits {
    // Flash and RAM
    constexpr uint32_t flash_size_kb = 64;
    constexpr uint32_t ram_size_kb = 20;

    // Peripheral availability
    constexpr bool has_dac = true;
    constexpr uint32_t num_dac_instances = 1;
    constexpr bool has_dma = true;
    constexpr uint32_t num_dma_instances = 3;
    constexpr bool has_crc = true;
    constexpr uint32_t num_crc_instances = 1;
    constexpr bool has_ltcd = true;
    constexpr uint32_t num_ltcd_instances = 1;
    constexpr bool has_tsc = true;
    constexpr uint32_t num_tsc_instances = 1;
    constexpr bool has_wdg = true;
    constexpr uint32_t num_wdg_instances = 2;
    constexpr bool has_comp = true;
    constexpr uint32_t num_comp_instances = 1;
    constexpr bool has_firewall = true;
    constexpr uint32_t num_firewall_instances = 1;
    constexpr bool has_i2c = true;
    constexpr uint32_t num_i2c_instances = 4;
    constexpr bool has_flash = true;
    constexpr uint32_t num_flash_instances = 1;
    constexpr bool has_dbgmcu = true;
    constexpr uint32_t num_dbgmcu_instances = 1;
    constexpr bool has_spi = true;
    constexpr uint32_t num_spi_instances = 6;
    constexpr bool has_rcc = true;
    constexpr uint32_t num_rcc_instances = 1;
    constexpr bool has_pwr = true;
    constexpr uint32_t num_pwr_instances = 2;
    constexpr bool has_syscfg = true;
    constexpr uint32_t num_syscfg_instances = 1;
    constexpr bool has_dfsdm1 = true;
    constexpr uint32_t num_dfsdm1_instances = 1;
    constexpr bool has_rng = true;
    constexpr uint32_t num_rng_instances = 1;
    constexpr bool has_crypto = true;
    constexpr uint32_t num_crypto_instances = 1;
    constexpr bool has_adc = true;
    constexpr uint32_t num_adc_instances = 2;
    constexpr bool has_gpio = true;
    constexpr uint32_t num_gpio_instances = 9;
    constexpr bool has_sai1 = true;
    constexpr uint32_t num_sai1_instances = 1;
    constexpr bool has_sai2 = true;
    constexpr uint32_t num_sai2_instances = 1;
    constexpr bool has_tim = true;
    constexpr uint32_t num_tim_instances = 13;
    constexpr bool has_usart = true;
    constexpr uint32_t num_usart_instances = 6;
    constexpr bool has_sdio = true;
    constexpr uint32_t num_sdio_instances = 1;
    constexpr bool has_exti = true;
    constexpr uint32_t num_exti_instances = 1;
    constexpr bool has_vrefbuf = true;
    constexpr uint32_t num_vrefbuf_instances = 1;
    constexpr bool has_can = true;
    constexpr uint32_t num_can_instances = 1;
    constexpr bool has_rtc = true;
    constexpr uint32_t num_rtc_instances = 1;
    constexpr bool has_otg = true;
    constexpr uint32_t num_otg_instances = 3;
    constexpr bool has_swpmi1 = true;
    constexpr uint32_t num_swpmi1_instances = 1;
    constexpr bool has_opamp = true;
    constexpr uint32_t num_opamp_instances = 1;
    constexpr bool has_fmc = true;
    constexpr uint32_t num_fmc_instances = 1;
    constexpr bool has_nvic = true;
    constexpr uint32_t num_nvic_instances = 2;
    constexpr bool has_crs = true;
    constexpr uint32_t num_crs_instances = 1;
    constexpr bool has_dcmi = true;
    constexpr uint32_t num_dcmi_instances = 1;
    constexpr bool has_hash = true;
    constexpr uint32_t num_hash_instances = 1;
    constexpr bool has_dsi = true;
    constexpr uint32_t num_dsi_instances = 1;
    constexpr bool has_gfxmmu = true;
    constexpr uint32_t num_gfxmmu_instances = 1;
    constexpr bool has_fpu = true;
    constexpr uint32_t num_fpu_instances = 2;
    constexpr bool has_mpu = true;
    constexpr uint32_t num_mpu_instances = 1;
    constexpr bool has_stk = true;
    constexpr uint32_t num_stk_instances = 1;
    constexpr bool has_scb = true;
    constexpr uint32_t num_scb_instances = 2;

    // Helper templates for compile-time validation
    template<typename T>
    struct peripheral_count;

    template<>
    struct peripheral_count<struct dac_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dma_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct crc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct ltcd_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tsc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct wdg_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct comp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct firewall_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct i2c_tag> {
        static constexpr uint32_t value = 4;
    };
    template<>
    struct peripheral_count<struct flash_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dbgmcu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct spi_tag> {
        static constexpr uint32_t value = 6;
    };
    template<>
    struct peripheral_count<struct rcc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct pwr_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct syscfg_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dfsdm1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rng_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct crypto_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct adc_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct gpio_tag> {
        static constexpr uint32_t value = 9;
    };
    template<>
    struct peripheral_count<struct sai1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct sai2_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct tim_tag> {
        static constexpr uint32_t value = 13;
    };
    template<>
    struct peripheral_count<struct usart_tag> {
        static constexpr uint32_t value = 6;
    };
    template<>
    struct peripheral_count<struct sdio_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct exti_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct vrefbuf_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct can_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct rtc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct otg_tag> {
        static constexpr uint32_t value = 3;
    };
    template<>
    struct peripheral_count<struct swpmi1_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct opamp_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fmc_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct nvic_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct crs_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dcmi_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct hash_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct dsi_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct gfxmmu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct fpu_tag> {
        static constexpr uint32_t value = 2;
    };
    template<>
    struct peripheral_count<struct mpu_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct stk_tag> {
        static constexpr uint32_t value = 1;
    };
    template<>
    struct peripheral_count<struct scb_tag> {
        static constexpr uint32_t value = 2;
    };

    // GPIO-specific traits
    constexpr uint32_t num_gpio_ports = 9;
    constexpr uint32_t max_gpio_pins = 144;  // 16 pins per port

    // USART-specific traits
    constexpr bool has_usart1 = true;
    constexpr bool has_usart2 = true;
    constexpr bool has_usart3 = true;
    constexpr bool has_uart4 = true;
    constexpr bool has_uart5 = true;
    constexpr bool has_lpuart1 = true;
}

// ============================================================================
// DAC Peripheral
// ============================================================================

namespace dac {
    /// Base addresses
    constexpr uint32_t DAC_BASE = 0x40007400;

    /// DAC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t SWTRIGR;  ///< Offset: 0x04 - software trigger register
        volatile uint32_t DHR12R1;  ///< Offset: 0x08 - channel1 12-bit right-aligned data holding register
        volatile uint32_t DHR12L1;  ///< Offset: 0x0C - channel1 12-bit left-aligned data holding register
        volatile uint32_t DHR8R1;  ///< Offset: 0x10 - channel1 8-bit right-aligned data holding register
        volatile uint32_t DHR12R2;  ///< Offset: 0x14 - channel2 12-bit right aligned data holding register
        volatile uint32_t DHR12L2;  ///< Offset: 0x18 - channel2 12-bit left aligned data holding register
        volatile uint32_t DHR8R2;  ///< Offset: 0x1C - channel2 8-bit right-aligned data holding register
        volatile uint32_t DHR12RD;  ///< Offset: 0x20 - Dual DAC 12-bit right-aligned data holding register
        volatile uint32_t DHR12LD;  ///< Offset: 0x24 - DUAL DAC 12-bit left aligned data holding register
        volatile uint32_t DHR8RD;  ///< Offset: 0x28 - DUAL DAC 8-bit right aligned data holding register
        volatile uint32_t DOR1;  ///< Offset: 0x2C - channel1 data output register
        volatile uint32_t DOR2;  ///< Offset: 0x30 - channel2 data output register
        volatile uint32_t SR;  ///< Offset: 0x34 - status register
        volatile uint32_t CCR;  ///< Offset: 0x38 - calibration control register
        volatile uint32_t MCR;  ///< Offset: 0x3C - mode control register
        volatile uint32_t SHSR1;  ///< Offset: 0x40 - Sample and Hold sample time register 1
        volatile uint32_t SHSR2;  ///< Offset: 0x44 - Sample and Hold sample time register 2
        volatile uint32_t SHHR;  ///< Offset: 0x48 - Sample and Hold hold time register
        volatile uint32_t SHRR;  ///< Offset: 0x4C - Sample and Hold refresh time register
    };

    /// Peripheral instances
    inline Registers* DAC = reinterpret_cast<Registers*>(DAC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t EN1 = (1U << 0);  ///< DAC channel1 enable
        constexpr uint32_t TEN1 = (1U << 2);  ///< DAC channel1 trigger enable
        constexpr uint32_t TSEL1 = (3 << 3);  ///< DAC channel1 trigger selection
        constexpr uint32_t WAVE1 = (2 << 6);  ///< DAC channel1 noise/triangle wave generation enable
        constexpr uint32_t MAMP1 = (4 << 8);  ///< DAC channel1 mask/amplitude selector
        constexpr uint32_t DMAEN1 = (1U << 12);  ///< DAC channel1 DMA enable
        constexpr uint32_t DMAUDRIE1 = (1U << 13);  ///< DAC channel1 DMA Underrun Interrupt enable
        constexpr uint32_t CEN1 = (1U << 14);  ///< DAC Channel 1 calibration enable
        constexpr uint32_t EN2 = (1U << 16);  ///< DAC channel2 enable
        constexpr uint32_t TEN2 = (1U << 18);  ///< DAC channel2 trigger enable
        constexpr uint32_t TSEL2 = (3 << 19);  ///< DAC channel2 trigger selection
        constexpr uint32_t WAVE2 = (2 << 22);  ///< DAC channel2 noise/triangle wave generation enable
        constexpr uint32_t MAMP2 = (4 << 24);  ///< DAC channel2 mask/amplitude selector
        constexpr uint32_t DMAEN2 = (1U << 28);  ///< DAC channel2 DMA enable
        constexpr uint32_t DMAUDRIE2 = (1U << 29);  ///< DAC channel2 DMA underrun interrupt enable
        constexpr uint32_t CEN2 = (1U << 30);  ///< DAC Channel 2 calibration enable
    }

    /// SWTRIGR Register bits
    namespace swtrigr_bits {
        constexpr uint32_t SWTRIG1 = (1U << 0);  ///< DAC channel1 software trigger
        constexpr uint32_t SWTRIG2 = (1U << 1);  ///< DAC channel2 software trigger
    }

    /// DHR12R1 Register bits
    namespace dhr12r1_bits {
        constexpr uint32_t DACC1DHR = (12 << 0);  ///< DAC channel1 12-bit right-aligned data
    }

    /// DHR12L1 Register bits
    namespace dhr12l1_bits {
        constexpr uint32_t DACC1DHR = (12 << 4);  ///< DAC channel1 12-bit left-aligned data
    }

    /// DHR8R1 Register bits
    namespace dhr8r1_bits {
        constexpr uint32_t DACC1DHR = (8 << 0);  ///< DAC channel1 8-bit right-aligned data
    }

    /// DHR12R2 Register bits
    namespace dhr12r2_bits {
        constexpr uint32_t DACC2DHR = (12 << 0);  ///< DAC channel2 12-bit right-aligned data
    }

    /// DHR12L2 Register bits
    namespace dhr12l2_bits {
        constexpr uint32_t DACC2DHR = (12 << 4);  ///< DAC channel2 12-bit left-aligned data
    }

    /// DHR8R2 Register bits
    namespace dhr8r2_bits {
        constexpr uint32_t DACC2DHR = (8 << 0);  ///< DAC channel2 8-bit right-aligned data
    }

    /// DHR12RD Register bits
    namespace dhr12rd_bits {
        constexpr uint32_t DACC1DHR = (12 << 0);  ///< DAC channel1 12-bit right-aligned data
        constexpr uint32_t DACC2DHR = (12 << 16);  ///< DAC channel2 12-bit right-aligned data
    }

    /// DHR12LD Register bits
    namespace dhr12ld_bits {
        constexpr uint32_t DACC1DHR = (12 << 4);  ///< DAC channel1 12-bit left-aligned data
        constexpr uint32_t DACC2DHR = (12 << 20);  ///< DAC channel2 12-bit left-aligned data
    }

    /// DHR8RD Register bits
    namespace dhr8rd_bits {
        constexpr uint32_t DACC1DHR = (8 << 0);  ///< DAC channel1 8-bit right-aligned data
        constexpr uint32_t DACC2DHR = (8 << 8);  ///< DAC channel2 8-bit right-aligned data
    }

    /// DOR1 Register bits
    namespace dor1_bits {
        constexpr uint32_t DACC1DOR = (12 << 0);  ///< DAC channel1 data output
    }

    /// DOR2 Register bits
    namespace dor2_bits {
        constexpr uint32_t DACC2DOR = (12 << 0);  ///< DAC channel2 data output
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t DMAUDR1 = (1U << 13);  ///< DAC channel1 DMA underrun flag
        constexpr uint32_t CAL_FLAG1 = (1U << 14);  ///< DAC Channel 1 calibration offset status
        constexpr uint32_t BWST1 = (1U << 15);  ///< DAC Channel 1 busy writing sample time flag
        constexpr uint32_t DMAUDR2 = (1U << 29);  ///< DAC channel2 DMA underrun flag
        constexpr uint32_t CAL_FLAG2 = (1U << 30);  ///< DAC Channel 2 calibration offset status
        constexpr uint32_t BWST2 = (1U << 31);  ///< DAC Channel 2 busy writing sample time flag
    }

    /// CCR Register bits
    namespace ccr_bits {
        constexpr uint32_t OTRIM1 = (5 << 0);  ///< DAC Channel 1 offset trimming value
        constexpr uint32_t OTRIM2 = (5 << 16);  ///< DAC Channel 2 offset trimming value
    }

    /// MCR Register bits
    namespace mcr_bits {
        constexpr uint32_t MODE1 = (3 << 0);  ///< DAC Channel 1 mode
        constexpr uint32_t MODE2 = (3 << 16);  ///< DAC Channel 2 mode
    }

    /// SHSR1 Register bits
    namespace shsr1_bits {
        constexpr uint32_t TSAMPLE1 = (10 << 0);  ///< DAC Channel 1 sample Time
    }

    /// SHSR2 Register bits
    namespace shsr2_bits {
        constexpr uint32_t TSAMPLE2 = (10 << 0);  ///< DAC Channel 2 sample Time
    }

    /// SHHR Register bits
    namespace shhr_bits {
        constexpr uint32_t THOLD1 = (10 << 0);  ///< DAC Channel 1 hold Time
        constexpr uint32_t THOLD2 = (10 << 16);  ///< DAC Channel 2 hold time
    }

    /// SHRR Register bits
    namespace shrr_bits {
        constexpr uint32_t TREFRESH1 = (8 << 0);  ///< DAC Channel 1 refresh Time
        constexpr uint32_t TREFRESH2 = (8 << 16);  ///< DAC Channel 2 refresh Time
    }

}

// ============================================================================
// DMA Peripheral
// ============================================================================

namespace dma {
    /// Base addresses
    constexpr uint32_t DMA1_BASE = 0x40020000;
    constexpr uint32_t DMA2_BASE = 0x40020400;
    constexpr uint32_t DMA2D_BASE = 0x4002B000;

    /// DMA Register structure
    struct Registers {
        volatile uint32_t ISR;  ///< Offset: 0x00 - interrupt status register
        volatile uint32_t IFCR;  ///< Offset: 0x04 - interrupt flag clear register
        volatile uint32_t CCR1;  ///< Offset: 0x08 - channel x configuration register
        volatile uint32_t CNDTR1;  ///< Offset: 0x0C - channel x number of data register
        volatile uint32_t CPAR1;  ///< Offset: 0x10 - channel x peripheral address register
        volatile uint32_t CMAR1;  ///< Offset: 0x14 - channel x memory address register
        volatile uint32_t CCR2;  ///< Offset: 0x1C - channel x configuration register
        volatile uint32_t CNDTR2;  ///< Offset: 0x20 - channel x number of data register
        volatile uint32_t CPAR2;  ///< Offset: 0x24 - channel x peripheral address register
        volatile uint32_t CMAR2;  ///< Offset: 0x28 - channel x memory address register
        volatile uint32_t CCR3;  ///< Offset: 0x30 - channel x configuration register
        volatile uint32_t CNDTR3;  ///< Offset: 0x34 - channel x number of data register
        volatile uint32_t CPAR3;  ///< Offset: 0x38 - channel x peripheral address register
        volatile uint32_t CMAR3;  ///< Offset: 0x3C - channel x memory address register
        volatile uint32_t CCR4;  ///< Offset: 0x44 - channel x configuration register
        volatile uint32_t CNDTR4;  ///< Offset: 0x48 - channel x number of data register
        volatile uint32_t CPAR4;  ///< Offset: 0x4C - channel x peripheral address register
        volatile uint32_t CMAR4;  ///< Offset: 0x50 - channel x memory address register
        volatile uint32_t CCR5;  ///< Offset: 0x58 - channel x configuration register
        volatile uint32_t CNDTR5;  ///< Offset: 0x5C - channel x number of data register
        volatile uint32_t CPAR5;  ///< Offset: 0x60 - channel x peripheral address register
        volatile uint32_t CMAR5;  ///< Offset: 0x64 - channel x memory address register
        volatile uint32_t CCR6;  ///< Offset: 0x6C - channel x configuration register
        volatile uint32_t CNDTR6;  ///< Offset: 0x70 - channel x number of data register
        volatile uint32_t CPAR6;  ///< Offset: 0x74 - channel x peripheral address register
        volatile uint32_t CMAR6;  ///< Offset: 0x78 - channel x memory address register
        volatile uint32_t CCR7;  ///< Offset: 0x80 - channel x configuration register
        volatile uint32_t CNDTR7;  ///< Offset: 0x84 - channel x number of data register
        volatile uint32_t CPAR7;  ///< Offset: 0x88 - channel x peripheral address register
        volatile uint32_t CMAR7;  ///< Offset: 0x8C - channel x memory address register
        volatile uint32_t CSELR;  ///< Offset: 0xA8 - channel selection register
    };

    /// Peripheral instances
    inline Registers* DMA1 = reinterpret_cast<Registers*>(DMA1_BASE);
    inline Registers* DMA2 = reinterpret_cast<Registers*>(DMA2_BASE);
    inline Registers* DMA2D = reinterpret_cast<Registers*>(DMA2D_BASE);

    // Bit definitions
    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t TEIF7 = (1U << 27);  ///< Channel x transfer error flag (x = 1 ..7)
        constexpr uint32_t HTIF7 = (1U << 26);  ///< Channel x half transfer flag (x = 1 ..7)
        constexpr uint32_t TCIF7 = (1U << 25);  ///< Channel x transfer complete flag (x = 1 ..7)
        constexpr uint32_t GIF7 = (1U << 24);  ///< Channel x global interrupt flag (x = 1 ..7)
        constexpr uint32_t TEIF6 = (1U << 23);  ///< Channel x transfer error flag (x = 1 ..7)
        constexpr uint32_t HTIF6 = (1U << 22);  ///< Channel x half transfer flag (x = 1 ..7)
        constexpr uint32_t TCIF6 = (1U << 21);  ///< Channel x transfer complete flag (x = 1 ..7)
        constexpr uint32_t GIF6 = (1U << 20);  ///< Channel x global interrupt flag (x = 1 ..7)
        constexpr uint32_t TEIF5 = (1U << 19);  ///< Channel x transfer error flag (x = 1 ..7)
        constexpr uint32_t HTIF5 = (1U << 18);  ///< Channel x half transfer flag (x = 1 ..7)
        constexpr uint32_t TCIF5 = (1U << 17);  ///< Channel x transfer complete flag (x = 1 ..7)
        constexpr uint32_t GIF5 = (1U << 16);  ///< Channel x global interrupt flag (x = 1 ..7)
        constexpr uint32_t TEIF4 = (1U << 15);  ///< Channel x transfer error flag (x = 1 ..7)
        constexpr uint32_t HTIF4 = (1U << 14);  ///< Channel x half transfer flag (x = 1 ..7)
        constexpr uint32_t TCIF4 = (1U << 13);  ///< Channel x transfer complete flag (x = 1 ..7)
        constexpr uint32_t GIF4 = (1U << 12);  ///< Channel x global interrupt flag (x = 1 ..7)
        constexpr uint32_t TEIF3 = (1U << 11);  ///< Channel x transfer error flag (x = 1 ..7)
        constexpr uint32_t HTIF3 = (1U << 10);  ///< Channel x half transfer flag (x = 1 ..7)
        constexpr uint32_t TCIF3 = (1U << 9);  ///< Channel x transfer complete flag (x = 1 ..7)
        constexpr uint32_t GIF3 = (1U << 8);  ///< Channel x global interrupt flag (x = 1 ..7)
        constexpr uint32_t TEIF2 = (1U << 7);  ///< Channel x transfer error flag (x = 1 ..7)
        constexpr uint32_t HTIF2 = (1U << 6);  ///< Channel x half transfer flag (x = 1 ..7)
        constexpr uint32_t TCIF2 = (1U << 5);  ///< Channel x transfer complete flag (x = 1 ..7)
        constexpr uint32_t GIF2 = (1U << 4);  ///< Channel x global interrupt flag (x = 1 ..7)
        constexpr uint32_t TEIF1 = (1U << 3);  ///< Channel x transfer error flag (x = 1 ..7)
        constexpr uint32_t HTIF1 = (1U << 2);  ///< Channel x half transfer flag (x = 1 ..7)
        constexpr uint32_t TCIF1 = (1U << 1);  ///< Channel x transfer complete flag (x = 1 ..7)
        constexpr uint32_t GIF1 = (1U << 0);  ///< Channel x global interrupt flag (x = 1 ..7)
    }

    /// IFCR Register bits
    namespace ifcr_bits {
        constexpr uint32_t CTEIF7 = (1U << 27);  ///< Channel x transfer error clear (x = 1 ..7)
        constexpr uint32_t CHTIF7 = (1U << 26);  ///< Channel x half transfer clear (x = 1 ..7)
        constexpr uint32_t CTCIF7 = (1U << 25);  ///< Channel x transfer complete clear (x = 1 ..7)
        constexpr uint32_t CGIF7 = (1U << 24);  ///< Channel x global interrupt clear (x = 1 ..7)
        constexpr uint32_t CTEIF6 = (1U << 23);  ///< Channel x transfer error clear (x = 1 ..7)
        constexpr uint32_t CHTIF6 = (1U << 22);  ///< Channel x half transfer clear (x = 1 ..7)
        constexpr uint32_t CTCIF6 = (1U << 21);  ///< Channel x transfer complete clear (x = 1 ..7)
        constexpr uint32_t CGIF6 = (1U << 20);  ///< Channel x global interrupt clear (x = 1 ..7)
        constexpr uint32_t CTEIF5 = (1U << 19);  ///< Channel x transfer error clear (x = 1 ..7)
        constexpr uint32_t CHTIF5 = (1U << 18);  ///< Channel x half transfer clear (x = 1 ..7)
        constexpr uint32_t CTCIF5 = (1U << 17);  ///< Channel x transfer complete clear (x = 1 ..7)
        constexpr uint32_t CGIF5 = (1U << 16);  ///< Channel x global interrupt clear (x = 1 ..7)
        constexpr uint32_t CTEIF4 = (1U << 15);  ///< Channel x transfer error clear (x = 1 ..7)
        constexpr uint32_t CHTIF4 = (1U << 14);  ///< Channel x half transfer clear (x = 1 ..7)
        constexpr uint32_t CTCIF4 = (1U << 13);  ///< Channel x transfer complete clear (x = 1 ..7)
        constexpr uint32_t CGIF4 = (1U << 12);  ///< Channel x global interrupt clear (x = 1 ..7)
        constexpr uint32_t CTEIF3 = (1U << 11);  ///< Channel x transfer error clear (x = 1 ..7)
        constexpr uint32_t CHTIF3 = (1U << 10);  ///< Channel x half transfer clear (x = 1 ..7)
        constexpr uint32_t CTCIF3 = (1U << 9);  ///< Channel x transfer complete clear (x = 1 ..7)
        constexpr uint32_t CGIF3 = (1U << 8);  ///< Channel x global interrupt clear (x = 1 ..7)
        constexpr uint32_t CTEIF2 = (1U << 7);  ///< Channel x transfer error clear (x = 1 ..7)
        constexpr uint32_t CHTIF2 = (1U << 6);  ///< Channel x half transfer clear (x = 1 ..7)
        constexpr uint32_t CTCIF2 = (1U << 5);  ///< Channel x transfer complete clear (x = 1 ..7)
        constexpr uint32_t CGIF2 = (1U << 4);  ///< Channel x global interrupt clear (x = 1 ..7)
        constexpr uint32_t CTEIF1 = (1U << 3);  ///< Channel x transfer error clear (x = 1 ..7)
        constexpr uint32_t CHTIF1 = (1U << 2);  ///< Channel x half transfer clear (x = 1 ..7)
        constexpr uint32_t CTCIF1 = (1U << 1);  ///< Channel x transfer complete clear (x = 1 ..7)
        constexpr uint32_t CGIF1 = (1U << 0);  ///< Channel x global interrupt clear (x = 1 ..7)
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
        constexpr uint32_t PL = (2 << 12);  ///< Channel priority level
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half transfer interrupt enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
    }

    /// CNDTR1 Register bits
    namespace cndtr1_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR1 Register bits
    namespace cpar1_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR1 Register bits
    namespace cmar1_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
        constexpr uint32_t PL = (2 << 12);  ///< Channel priority level
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half transfer interrupt enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
    }

    /// CNDTR2 Register bits
    namespace cndtr2_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR2 Register bits
    namespace cpar2_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR2 Register bits
    namespace cmar2_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
        constexpr uint32_t PL = (2 << 12);  ///< Channel priority level
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half transfer interrupt enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
    }

    /// CNDTR3 Register bits
    namespace cndtr3_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR3 Register bits
    namespace cpar3_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR3 Register bits
    namespace cmar3_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
        constexpr uint32_t PL = (2 << 12);  ///< Channel priority level
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half transfer interrupt enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
    }

    /// CNDTR4 Register bits
    namespace cndtr4_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR4 Register bits
    namespace cpar4_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR4 Register bits
    namespace cmar4_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR5 Register bits
    namespace ccr5_bits {
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
        constexpr uint32_t PL = (2 << 12);  ///< Channel priority level
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half transfer interrupt enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
    }

    /// CNDTR5 Register bits
    namespace cndtr5_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR5 Register bits
    namespace cpar5_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR5 Register bits
    namespace cmar5_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR6 Register bits
    namespace ccr6_bits {
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
        constexpr uint32_t PL = (2 << 12);  ///< Channel priority level
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half transfer interrupt enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
    }

    /// CNDTR6 Register bits
    namespace cndtr6_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR6 Register bits
    namespace cpar6_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR6 Register bits
    namespace cmar6_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CCR7 Register bits
    namespace ccr7_bits {
        constexpr uint32_t MEM2MEM = (1U << 14);  ///< Memory to memory mode
        constexpr uint32_t PL = (2 << 12);  ///< Channel priority level
        constexpr uint32_t MSIZE = (2 << 10);  ///< Memory size
        constexpr uint32_t PSIZE = (2 << 8);  ///< Peripheral size
        constexpr uint32_t MINC = (1U << 7);  ///< Memory increment mode
        constexpr uint32_t PINC = (1U << 6);  ///< Peripheral increment mode
        constexpr uint32_t CIRC = (1U << 5);  ///< Circular mode
        constexpr uint32_t DIR = (1U << 4);  ///< Data transfer direction
        constexpr uint32_t TEIE = (1U << 3);  ///< Transfer error interrupt enable
        constexpr uint32_t HTIE = (1U << 2);  ///< Half transfer interrupt enable
        constexpr uint32_t TCIE = (1U << 1);  ///< Transfer complete interrupt enable
        constexpr uint32_t EN = (1U << 0);  ///< Channel enable
    }

    /// CNDTR7 Register bits
    namespace cndtr7_bits {
        constexpr uint32_t NDT = (16 << 0);  ///< Number of data to transfer
    }

    /// CPAR7 Register bits
    namespace cpar7_bits {
        constexpr uint32_t PA = (32 << 0);  ///< Peripheral address
    }

    /// CMAR7 Register bits
    namespace cmar7_bits {
        constexpr uint32_t MA = (32 << 0);  ///< Memory address
    }

    /// CSELR Register bits
    namespace cselr_bits {
        constexpr uint32_t C7S = (4 << 24);  ///< DMA channel 7 selection
        constexpr uint32_t C6S = (4 << 20);  ///< DMA channel 6 selection
        constexpr uint32_t C5S = (4 << 16);  ///< DMA channel 5 selection
        constexpr uint32_t C4S = (4 << 12);  ///< DMA channel 4 selection
        constexpr uint32_t C3S = (4 << 8);  ///< DMA channel 3 selection
        constexpr uint32_t C2S = (4 << 4);  ///< DMA channel 2 selection
        constexpr uint32_t C1S = (4 << 0);  ///< DMA channel 1 selection
    }

}

// ============================================================================
// CRC Peripheral
// ============================================================================

namespace crc {
    /// Base addresses
    constexpr uint32_t CRC_BASE = 0x40023000;

    /// CRC Register structure
    struct Registers {
        volatile uint32_t DR;  ///< Offset: 0x00 - Data register
        volatile uint32_t IDR;  ///< Offset: 0x04 - Independent data register
        volatile uint32_t CR;  ///< Offset: 0x08 - Control register
        volatile uint32_t INIT;  ///< Offset: 0x10 - Initial CRC value
        volatile uint32_t POL;  ///< Offset: 0x14 - polynomial
    };

    /// Peripheral instances
    inline Registers* CRC = reinterpret_cast<Registers*>(CRC_BASE);

    // Bit definitions
    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DR = (32 << 0);  ///< Data register bits
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t IDR = (8 << 0);  ///< General-purpose 8-bit data register bits
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t REV_OUT = (1U << 7);  ///< Reverse output data
        constexpr uint32_t REV_IN = (2 << 5);  ///< Reverse input data
        constexpr uint32_t POLYSIZE = (2 << 3);  ///< Polynomial size
        constexpr uint32_t RESET = (1U << 0);  ///< RESET bit
    }

    /// INIT Register bits
    namespace init_bits {
        constexpr uint32_t CRC_INIT = (32 << 0);  ///< Programmable initial CRC value
    }

    /// POL Register bits
    namespace pol_bits {
        constexpr uint32_t Polynomialcoefficients = (32 << 0);  ///< Programmable polynomial
    }

}

// ============================================================================
// LTCD Peripheral
// ============================================================================

namespace ltcd {
    /// Base addresses
    constexpr uint32_t LTCD_BASE = 0x40016800;

    /// LTCD Register structure
    struct Registers {
        volatile uint32_t SSCR;  ///< Offset: 0x08 - LTDC Synchronization Size Configuration Register
        volatile uint32_t BPCR;  ///< Offset: 0x0C - LTDC Back Porch Configuration Register
        volatile uint32_t AWCR;  ///< Offset: 0x10 - LTDC Active Width Configuration Register
        volatile uint32_t TWCR;  ///< Offset: 0x14 - LTDC Total Width Configuration Register
        volatile uint32_t GCR;  ///< Offset: 0x18 - LTDC Global Control Register
        volatile uint32_t SRCR;  ///< Offset: 0x24 - LTDC Shadow Reload Configuration Register
        volatile uint32_t BCCR;  ///< Offset: 0x2C - LTDC Background Color Configuration Register
        volatile uint32_t IER;  ///< Offset: 0x34 - LTDC Interrupt Enable Register
        volatile uint32_t ISR;  ///< Offset: 0x38 - LTDC Interrupt Status Register
        volatile uint32_t ICR;  ///< Offset: 0x3C - LTDC Interrupt Clear Register
        volatile uint32_t LIPCR;  ///< Offset: 0x40 - LTDC Line Interrupt Position Configuration Register
        volatile uint32_t CPSR;  ///< Offset: 0x44 - LTDC Current Position Status Register
        volatile uint32_t CDSR;  ///< Offset: 0x48 - LTDC Current Display Status Register
        volatile uint32_t L1CR;  ///< Offset: 0x84 - LTDC Layer Control Register
        volatile uint32_t L2CR;  ///< Offset: 0x104 - LTDC Layer Control Register
        volatile uint32_t L1WHPCR;  ///< Offset: 0x88 - LTDC Layer Window Horizontal Position Configuration Register
        volatile uint32_t L2WHPCR;  ///< Offset: 0x108 - LTDC Layerx Window Horizontal Position Configuration Register
        volatile uint32_t L1WVPCR;  ///< Offset: 0x8C - LTDC Layer Window Vertical Position Configuration Register
        volatile uint32_t L2WVPCR;  ///< Offset: 0x10C - LTDC Layer Window Vertical Position Configuration Register
        volatile uint32_t L1CKCR;  ///< Offset: 0x90 - LTDC Layer Color Keying Configuration Register
        volatile uint32_t L2CKCR;  ///< Offset: 0x110 - LTDC Layer Color Keying Configuration Register
        volatile uint32_t L1PFCR;  ///< Offset: 0x94 - LTDC Layer Pixel Format Configuration Register
        volatile uint32_t L2PFCR;  ///< Offset: 0x114 - LTDC Layer Pixel Format Configuration Register
        volatile uint32_t L1CACR;  ///< Offset: 0x98 - LTDC Layer Constant Alpha Configuration Register
        volatile uint32_t L2CACR;  ///< Offset: 0x118 - LTDC Layer Constant Alpha Configuration Register
        volatile uint32_t L1DCCR;  ///< Offset: 0x9C - LTDC Layer Default Color Configuration Register
        volatile uint32_t L2DCCR;  ///< Offset: 0x11C - LTDC Layer Default Color Configuration Register
        volatile uint32_t L1BFCR;  ///< Offset: 0xA0 - LTDC Layer Blending Factors Configuration Register
        volatile uint32_t L2BFCR;  ///< Offset: 0x124 - LTDC Layer Blending Factors Configuration Register
        volatile uint32_t L1CFBAR;  ///< Offset: 0xAC - LTDC Layer Color Frame Buffer Address Register
        volatile uint32_t L2CFBAR;  ///< Offset: 0x12C - LTDC Layer Color Frame Buffer Address Register
        volatile uint32_t L1CFBLR;  ///< Offset: 0xB0 - LTDC Layer Color Frame Buffer Length Register
        volatile uint32_t L2CFBLR;  ///< Offset: 0x130 - LTDC Layer Color Frame Buffer Length Register
        volatile uint32_t L1CFBLNR;  ///< Offset: 0xB4 - LTDC Layer ColorFrame Buffer Line Number Register
        volatile uint32_t L2CFBLNR;  ///< Offset: 0x134 - LTDC Layer ColorFrame Buffer Line Number Register
        volatile uint32_t L1CLUTWR;  ///< Offset: 0xC4 - LTDC Layerx CLUT Write Register
        volatile uint32_t L2CLUTWR;  ///< Offset: 0x144 - LTDC Layerx CLUT Write Register
    };

    /// Peripheral instances
    inline Registers* LTCD = reinterpret_cast<Registers*>(LTCD_BASE);

    // Bit definitions
    /// SSCR Register bits
    namespace sscr_bits {
        constexpr uint32_t VSH = (11 << 0);  ///< Vertical Synchronization Height (in units of horizontal scan line)
        constexpr uint32_t HSW = (12 << 16);  ///< Horizontal Synchronization Width (in units of pixel clock period)
    }

    /// BPCR Register bits
    namespace bpcr_bits {
        constexpr uint32_t AVBP = (11 << 0);  ///< Accumulated Vertical back porch (in units of horizontal scan line)
        constexpr uint32_t AHBP = (12 << 16);  ///< Accumulated Horizontal back porch (in units of pixel clock period)
    }

    /// AWCR Register bits
    namespace awcr_bits {
        constexpr uint32_t AAH = (11 << 0);  ///< Accumulated Active Height (in units of horizontal scan line)
        constexpr uint32_t AAW = (12 << 16);  ///< Accumulated Active Width (in units of pixel clock period)
    }

    /// TWCR Register bits
    namespace twcr_bits {
        constexpr uint32_t TOTALH = (11 << 0);  ///< Total Height (in units of horizontal scan line)
        constexpr uint32_t TOTALW = (12 << 16);  ///< Total Width (in units of pixel clock period)
    }

    /// GCR Register bits
    namespace gcr_bits {
        constexpr uint32_t LTDCEN = (1U << 0);  ///< LCD-TFT controller enable bit
        constexpr uint32_t DBW = (3 << 4);  ///< Dither Blue Width
        constexpr uint32_t DGW = (3 << 8);  ///< Dither Green Width
        constexpr uint32_t DRW = (3 << 12);  ///< Dither Red Width
        constexpr uint32_t DEN = (1U << 16);  ///< Dither Enable
        constexpr uint32_t PCPOL = (1U << 28);  ///< Pixel Clock Polarity
        constexpr uint32_t DEPOL = (1U << 29);  ///< Not Data Enable Polarity
        constexpr uint32_t VSPOL = (1U << 30);  ///< Vertical Synchronization Polarity
        constexpr uint32_t HSPOL = (1U << 31);  ///< Horizontal Synchronization Polarity
    }

    /// SRCR Register bits
    namespace srcr_bits {
        constexpr uint32_t IMR = (1U << 0);  ///< Immediate Reload
        constexpr uint32_t VBR = (1U << 1);  ///< Vertical Blanking Reload
    }

    /// BCCR Register bits
    namespace bccr_bits {
        constexpr uint32_t BCBLUE = (8 << 0);  ///< Background Color Blue value
        constexpr uint32_t BCGREEN = (8 << 8);  ///< Background Color Green value
        constexpr uint32_t BCRED = (8 << 16);  ///< Background Color Red value
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t LIE = (1U << 0);  ///< Line Interrupt Enable
        constexpr uint32_t FUIE = (1U << 1);  ///< FIFO Underrun Interrupt Enable
        constexpr uint32_t TERRIE = (1U << 2);  ///< Transfer Error Interrupt Enable
        constexpr uint32_t RRIE = (1U << 3);  ///< Register Reload interrupt enable
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t LIF = (1U << 0);  ///< Line Interrupt flag
        constexpr uint32_t FUIF = (1U << 1);  ///< FIFO Underrun Interrupt flag
        constexpr uint32_t TERRIF = (1U << 2);  ///< Transfer Error interrupt flag
        constexpr uint32_t RRIF = (1U << 3);  ///< Register Reload Interrupt Flag
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t CLIF = (1U << 0);  ///< Clears the Line Interrupt Flag
        constexpr uint32_t CFUIF = (1U << 1);  ///< Clears the FIFO Underrun Interrupt flag
        constexpr uint32_t CTERRIF = (1U << 2);  ///< Clears the Transfer Error Interrupt Flag
        constexpr uint32_t CRRIF = (1U << 3);  ///< Clears Register Reload Interrupt Flag
    }

    /// LIPCR Register bits
    namespace lipcr_bits {
        constexpr uint32_t LIPOS = (11 << 0);  ///< Line Interrupt Position
    }

    /// CPSR Register bits
    namespace cpsr_bits {
        constexpr uint32_t CYPOS = (16 << 0);  ///< Current Y Position
        constexpr uint32_t CXPOS = (16 << 16);  ///< Current X Position
    }

    /// CDSR Register bits
    namespace cdsr_bits {
        constexpr uint32_t VDES = (1U << 0);  ///< Vertical Data Enable display Status
        constexpr uint32_t HDES = (1U << 1);  ///< Horizontal Data Enable display Status
        constexpr uint32_t VSYNCS = (1U << 2);  ///< Vertical Synchronization display Status
        constexpr uint32_t HSYNCS = (1U << 3);  ///< Horizontal Synchronization display Status
    }

    /// L1CR Register bits
    namespace l1cr_bits {
        constexpr uint32_t LEN = (1U << 0);  ///< Layer Enable
        constexpr uint32_t COLKEN = (1U << 1);  ///< Color Keying Enable
        constexpr uint32_t CLUTEN = (1U << 4);  ///< Color Look-Up Table Enable
    }

    /// L2CR Register bits
    namespace l2cr_bits {
        constexpr uint32_t LEN = (1U << 0);  ///< Layer Enable
        constexpr uint32_t COLKEN = (1U << 1);  ///< Color Keying Enable
        constexpr uint32_t CLUTEN = (1U << 4);  ///< Color Look-Up Table Enable
    }

    /// L1WHPCR Register bits
    namespace l1whpcr_bits {
        constexpr uint32_t WHSTPOS = (12 << 0);  ///< Window Horizontal Start Position
        constexpr uint32_t WHSPPOS = (12 << 16);  ///< Window Horizontal Stop Position
    }

    /// L2WHPCR Register bits
    namespace l2whpcr_bits {
        constexpr uint32_t WHSTPOS = (12 << 0);  ///< Window Horizontal Start Position
        constexpr uint32_t WHSPPOS = (12 << 16);  ///< Window Horizontal Stop Position
    }

    /// L1WVPCR Register bits
    namespace l1wvpcr_bits {
        constexpr uint32_t WVSTPOS = (11 << 0);  ///< Window Vertical Start Position
        constexpr uint32_t WVSPPOS = (11 << 16);  ///< Window Vertical Stop Position
    }

    /// L2WVPCR Register bits
    namespace l2wvpcr_bits {
        constexpr uint32_t WVSTPOS = (11 << 0);  ///< Window Vertical Start Position
        constexpr uint32_t WVSPPOS = (11 << 16);  ///< Window Vertical Stop Position
    }

    /// L1CKCR Register bits
    namespace l1ckcr_bits {
        constexpr uint32_t CKBLUE = (8 << 0);  ///< Color Key Blue value
        constexpr uint32_t CKGREEN = (8 << 8);  ///< Color Key Green value
        constexpr uint32_t CKRED = (8 << 16);  ///< Color Key Red value
    }

    /// L2CKCR Register bits
    namespace l2ckcr_bits {
        constexpr uint32_t CKBLUE = (8 << 0);  ///< Color Key Blue value
        constexpr uint32_t CKGREEN = (8 << 8);  ///< Color Key Green value
        constexpr uint32_t CKRED = (8 << 16);  ///< Color Key Red value
    }

    /// L1PFCR Register bits
    namespace l1pfcr_bits {
        constexpr uint32_t PF = (3 << 0);  ///< Pixel Format
    }

    /// L2PFCR Register bits
    namespace l2pfcr_bits {
        constexpr uint32_t PF = (3 << 0);  ///< Pixel Format
    }

    /// L1CACR Register bits
    namespace l1cacr_bits {
        constexpr uint32_t CONSTA = (8 << 0);  ///< Constant Alpha
    }

    /// L2CACR Register bits
    namespace l2cacr_bits {
        constexpr uint32_t CONSTA = (8 << 0);  ///< Constant Alpha
    }

    /// L1DCCR Register bits
    namespace l1dccr_bits {
        constexpr uint32_t DCBLUE = (8 << 0);  ///< Default Color Blue
        constexpr uint32_t DCGREEN = (8 << 8);  ///< Default Color Green
        constexpr uint32_t DCRED = (8 << 16);  ///< Default Color Red
        constexpr uint32_t DCALPHA = (8 << 24);  ///< Default Color Alpha
    }

    /// L2DCCR Register bits
    namespace l2dccr_bits {
        constexpr uint32_t DCBLUE = (8 << 0);  ///< Default Color Blue
        constexpr uint32_t DCGREEN = (8 << 8);  ///< Default Color Green
        constexpr uint32_t DCRED = (8 << 16);  ///< Default Color Red
        constexpr uint32_t DCALPHA = (8 << 24);  ///< Default Color Alpha
    }

    /// L1BFCR Register bits
    namespace l1bfcr_bits {
        constexpr uint32_t BF2 = (3 << 0);  ///< Blending Factor 2
        constexpr uint32_t BF1 = (3 << 8);  ///< Blending Factor 1
    }

    /// L2BFCR Register bits
    namespace l2bfcr_bits {
        constexpr uint32_t BF2 = (3 << 0);  ///< Blending Factor 2
        constexpr uint32_t BF1 = (3 << 8);  ///< Blending Factor 1
    }

    /// L1CFBAR Register bits
    namespace l1cfbar_bits {
        constexpr uint32_t CFBADD = (32 << 0);  ///< Color Frame Buffer Start Address
    }

    /// L2CFBAR Register bits
    namespace l2cfbar_bits {
        constexpr uint32_t CFBADD = (32 << 0);  ///< Color Frame Buffer Start Address
    }

    /// L1CFBLR Register bits
    namespace l1cfblr_bits {
        constexpr uint32_t CFBLL = (13 << 0);  ///< Color Frame Buffer Line Length
        constexpr uint32_t CFBP = (13 << 16);  ///< Color Frame Buffer Pitch in bytes
    }

    /// L2CFBLR Register bits
    namespace l2cfblr_bits {
        constexpr uint32_t CFBLL = (13 << 0);  ///< Color Frame Buffer Line Length
        constexpr uint32_t CFBP = (13 << 16);  ///< Color Frame Buffer Pitch in bytes
    }

    /// L1CFBLNR Register bits
    namespace l1cfblnr_bits {
        constexpr uint32_t CFBLNBR = (11 << 0);  ///< Frame Buffer Line Number
    }

    /// L2CFBLNR Register bits
    namespace l2cfblnr_bits {
        constexpr uint32_t CFBLNBR = (11 << 0);  ///< Frame Buffer Line Number
    }

    /// L1CLUTWR Register bits
    namespace l1clutwr_bits {
        constexpr uint32_t BLUE = (8 << 0);  ///< Blue value
        constexpr uint32_t GREEN = (8 << 8);  ///< Green value
        constexpr uint32_t RED = (8 << 16);  ///< Red value
        constexpr uint32_t CLUTADD = (8 << 24);  ///< CLUT Address
    }

    /// L2CLUTWR Register bits
    namespace l2clutwr_bits {
        constexpr uint32_t BLUE = (8 << 0);  ///< Blue value
        constexpr uint32_t GREEN = (8 << 8);  ///< Green value
        constexpr uint32_t RED = (8 << 16);  ///< Red value
        constexpr uint32_t CLUTADD = (8 << 24);  ///< CLUT Address
    }

}

// ============================================================================
// TSC Peripheral
// ============================================================================

namespace tsc {
    /// Base addresses
    constexpr uint32_t TSC_BASE = 0x40024000;

    /// TSC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t IER;  ///< Offset: 0x04 - interrupt enable register
        volatile uint32_t ICR;  ///< Offset: 0x08 - interrupt clear register
        volatile uint32_t ISR;  ///< Offset: 0x0C - interrupt status register
        volatile uint32_t IOHCR;  ///< Offset: 0x10 - I/O hysteresis control register
        volatile uint32_t IOASCR;  ///< Offset: 0x18 - I/O analog switch control register
        volatile uint32_t IOSCR;  ///< Offset: 0x20 - I/O sampling control register
        volatile uint32_t IOCCR;  ///< Offset: 0x28 - I/O channel control register
        volatile uint32_t IOGCSR;  ///< Offset: 0x30 - I/O group control status register
        volatile uint32_t IOG1CR;  ///< Offset: 0x34 - I/O group x counter register
        volatile uint32_t IOG2CR;  ///< Offset: 0x38 - I/O group x counter register
        volatile uint32_t IOG3CR;  ///< Offset: 0x3C - I/O group x counter register
        volatile uint32_t IOG4CR;  ///< Offset: 0x40 - I/O group x counter register
        volatile uint32_t IOG5CR;  ///< Offset: 0x44 - I/O group x counter register
        volatile uint32_t IOG6CR;  ///< Offset: 0x48 - I/O group x counter register
        volatile uint32_t IOG7CR;  ///< Offset: 0x4C - I/O group x counter register
        volatile uint32_t IOG8CR;  ///< Offset: 0x50 - I/O group x counter register
    };

    /// Peripheral instances
    inline Registers* TSC = reinterpret_cast<Registers*>(TSC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t CTPH = (4 << 28);  ///< Charge transfer pulse high
        constexpr uint32_t CTPL = (4 << 24);  ///< Charge transfer pulse low
        constexpr uint32_t SSD = (7 << 17);  ///< Spread spectrum deviation
        constexpr uint32_t SSE = (1U << 16);  ///< Spread spectrum enable
        constexpr uint32_t SSPSC = (1U << 15);  ///< Spread spectrum prescaler
        constexpr uint32_t PGPSC = (3 << 12);  ///< pulse generator prescaler
        constexpr uint32_t MCV = (3 << 5);  ///< Max count value
        constexpr uint32_t IODEF = (1U << 4);  ///< I/O Default mode
        constexpr uint32_t SYNCPOL = (1U << 3);  ///< Synchronization pin polarity
        constexpr uint32_t AM = (1U << 2);  ///< Acquisition mode
        constexpr uint32_t START = (1U << 1);  ///< Start a new acquisition
        constexpr uint32_t TSCE = (1U << 0);  ///< Touch sensing controller enable
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t MCEIE = (1U << 1);  ///< Max count error interrupt enable
        constexpr uint32_t EOAIE = (1U << 0);  ///< End of acquisition interrupt enable
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t MCEIC = (1U << 1);  ///< Max count error interrupt clear
        constexpr uint32_t EOAIC = (1U << 0);  ///< End of acquisition interrupt clear
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t MCEF = (1U << 1);  ///< Max count error flag
        constexpr uint32_t EOAF = (1U << 0);  ///< End of acquisition flag
    }

    /// IOHCR Register bits
    namespace iohcr_bits {
        constexpr uint32_t G8_IO4 = (1U << 31);  ///< G8_IO4
        constexpr uint32_t G8_IO3 = (1U << 30);  ///< G8_IO3
        constexpr uint32_t G8_IO2 = (1U << 29);  ///< G8_IO2
        constexpr uint32_t G8_IO1 = (1U << 28);  ///< G8_IO1
        constexpr uint32_t G7_IO4 = (1U << 27);  ///< G7_IO4
        constexpr uint32_t G7_IO3 = (1U << 26);  ///< G7_IO3
        constexpr uint32_t G7_IO2 = (1U << 25);  ///< G7_IO2
        constexpr uint32_t G7_IO1 = (1U << 24);  ///< G7_IO1
        constexpr uint32_t G6_IO4 = (1U << 23);  ///< G6_IO4
        constexpr uint32_t G6_IO3 = (1U << 22);  ///< G6_IO3
        constexpr uint32_t G6_IO2 = (1U << 21);  ///< G6_IO2
        constexpr uint32_t G6_IO1 = (1U << 20);  ///< G6_IO1
        constexpr uint32_t G5_IO4 = (1U << 19);  ///< G5_IO4
        constexpr uint32_t G5_IO3 = (1U << 18);  ///< G5_IO3
        constexpr uint32_t G5_IO2 = (1U << 17);  ///< G5_IO2
        constexpr uint32_t G5_IO1 = (1U << 16);  ///< G5_IO1
        constexpr uint32_t G4_IO4 = (1U << 15);  ///< G4_IO4
        constexpr uint32_t G4_IO3 = (1U << 14);  ///< G4_IO3
        constexpr uint32_t G4_IO2 = (1U << 13);  ///< G4_IO2
        constexpr uint32_t G4_IO1 = (1U << 12);  ///< G4_IO1
        constexpr uint32_t G3_IO4 = (1U << 11);  ///< G3_IO4
        constexpr uint32_t G3_IO3 = (1U << 10);  ///< G3_IO3
        constexpr uint32_t G3_IO2 = (1U << 9);  ///< G3_IO2
        constexpr uint32_t G3_IO1 = (1U << 8);  ///< G3_IO1
        constexpr uint32_t G2_IO4 = (1U << 7);  ///< G2_IO4
        constexpr uint32_t G2_IO3 = (1U << 6);  ///< G2_IO3
        constexpr uint32_t G2_IO2 = (1U << 5);  ///< G2_IO2
        constexpr uint32_t G2_IO1 = (1U << 4);  ///< G2_IO1
        constexpr uint32_t G1_IO4 = (1U << 3);  ///< G1_IO4
        constexpr uint32_t G1_IO3 = (1U << 2);  ///< G1_IO3
        constexpr uint32_t G1_IO2 = (1U << 1);  ///< G1_IO2
        constexpr uint32_t G1_IO1 = (1U << 0);  ///< G1_IO1
    }

    /// IOASCR Register bits
    namespace ioascr_bits {
        constexpr uint32_t G8_IO4 = (1U << 31);  ///< G8_IO4
        constexpr uint32_t G8_IO3 = (1U << 30);  ///< G8_IO3
        constexpr uint32_t G8_IO2 = (1U << 29);  ///< G8_IO2
        constexpr uint32_t G8_IO1 = (1U << 28);  ///< G8_IO1
        constexpr uint32_t G7_IO4 = (1U << 27);  ///< G7_IO4
        constexpr uint32_t G7_IO3 = (1U << 26);  ///< G7_IO3
        constexpr uint32_t G7_IO2 = (1U << 25);  ///< G7_IO2
        constexpr uint32_t G7_IO1 = (1U << 24);  ///< G7_IO1
        constexpr uint32_t G6_IO4 = (1U << 23);  ///< G6_IO4
        constexpr uint32_t G6_IO3 = (1U << 22);  ///< G6_IO3
        constexpr uint32_t G6_IO2 = (1U << 21);  ///< G6_IO2
        constexpr uint32_t G6_IO1 = (1U << 20);  ///< G6_IO1
        constexpr uint32_t G5_IO4 = (1U << 19);  ///< G5_IO4
        constexpr uint32_t G5_IO3 = (1U << 18);  ///< G5_IO3
        constexpr uint32_t G5_IO2 = (1U << 17);  ///< G5_IO2
        constexpr uint32_t G5_IO1 = (1U << 16);  ///< G5_IO1
        constexpr uint32_t G4_IO4 = (1U << 15);  ///< G4_IO4
        constexpr uint32_t G4_IO3 = (1U << 14);  ///< G4_IO3
        constexpr uint32_t G4_IO2 = (1U << 13);  ///< G4_IO2
        constexpr uint32_t G4_IO1 = (1U << 12);  ///< G4_IO1
        constexpr uint32_t G3_IO4 = (1U << 11);  ///< G3_IO4
        constexpr uint32_t G3_IO3 = (1U << 10);  ///< G3_IO3
        constexpr uint32_t G3_IO2 = (1U << 9);  ///< G3_IO2
        constexpr uint32_t G3_IO1 = (1U << 8);  ///< G3_IO1
        constexpr uint32_t G2_IO4 = (1U << 7);  ///< G2_IO4
        constexpr uint32_t G2_IO3 = (1U << 6);  ///< G2_IO3
        constexpr uint32_t G2_IO2 = (1U << 5);  ///< G2_IO2
        constexpr uint32_t G2_IO1 = (1U << 4);  ///< G2_IO1
        constexpr uint32_t G1_IO4 = (1U << 3);  ///< G1_IO4
        constexpr uint32_t G1_IO3 = (1U << 2);  ///< G1_IO3
        constexpr uint32_t G1_IO2 = (1U << 1);  ///< G1_IO2
        constexpr uint32_t G1_IO1 = (1U << 0);  ///< G1_IO1
    }

    /// IOSCR Register bits
    namespace ioscr_bits {
        constexpr uint32_t G8_IO4 = (1U << 31);  ///< G8_IO4
        constexpr uint32_t G8_IO3 = (1U << 30);  ///< G8_IO3
        constexpr uint32_t G8_IO2 = (1U << 29);  ///< G8_IO2
        constexpr uint32_t G8_IO1 = (1U << 28);  ///< G8_IO1
        constexpr uint32_t G7_IO4 = (1U << 27);  ///< G7_IO4
        constexpr uint32_t G7_IO3 = (1U << 26);  ///< G7_IO3
        constexpr uint32_t G7_IO2 = (1U << 25);  ///< G7_IO2
        constexpr uint32_t G7_IO1 = (1U << 24);  ///< G7_IO1
        constexpr uint32_t G6_IO4 = (1U << 23);  ///< G6_IO4
        constexpr uint32_t G6_IO3 = (1U << 22);  ///< G6_IO3
        constexpr uint32_t G6_IO2 = (1U << 21);  ///< G6_IO2
        constexpr uint32_t G6_IO1 = (1U << 20);  ///< G6_IO1
        constexpr uint32_t G5_IO4 = (1U << 19);  ///< G5_IO4
        constexpr uint32_t G5_IO3 = (1U << 18);  ///< G5_IO3
        constexpr uint32_t G5_IO2 = (1U << 17);  ///< G5_IO2
        constexpr uint32_t G5_IO1 = (1U << 16);  ///< G5_IO1
        constexpr uint32_t G4_IO4 = (1U << 15);  ///< G4_IO4
        constexpr uint32_t G4_IO3 = (1U << 14);  ///< G4_IO3
        constexpr uint32_t G4_IO2 = (1U << 13);  ///< G4_IO2
        constexpr uint32_t G4_IO1 = (1U << 12);  ///< G4_IO1
        constexpr uint32_t G3_IO4 = (1U << 11);  ///< G3_IO4
        constexpr uint32_t G3_IO3 = (1U << 10);  ///< G3_IO3
        constexpr uint32_t G3_IO2 = (1U << 9);  ///< G3_IO2
        constexpr uint32_t G3_IO1 = (1U << 8);  ///< G3_IO1
        constexpr uint32_t G2_IO4 = (1U << 7);  ///< G2_IO4
        constexpr uint32_t G2_IO3 = (1U << 6);  ///< G2_IO3
        constexpr uint32_t G2_IO2 = (1U << 5);  ///< G2_IO2
        constexpr uint32_t G2_IO1 = (1U << 4);  ///< G2_IO1
        constexpr uint32_t G1_IO4 = (1U << 3);  ///< G1_IO4
        constexpr uint32_t G1_IO3 = (1U << 2);  ///< G1_IO3
        constexpr uint32_t G1_IO2 = (1U << 1);  ///< G1_IO2
        constexpr uint32_t G1_IO1 = (1U << 0);  ///< G1_IO1
    }

    /// IOCCR Register bits
    namespace ioccr_bits {
        constexpr uint32_t G8_IO4 = (1U << 31);  ///< G8_IO4
        constexpr uint32_t G8_IO3 = (1U << 30);  ///< G8_IO3
        constexpr uint32_t G8_IO2 = (1U << 29);  ///< G8_IO2
        constexpr uint32_t G8_IO1 = (1U << 28);  ///< G8_IO1
        constexpr uint32_t G7_IO4 = (1U << 27);  ///< G7_IO4
        constexpr uint32_t G7_IO3 = (1U << 26);  ///< G7_IO3
        constexpr uint32_t G7_IO2 = (1U << 25);  ///< G7_IO2
        constexpr uint32_t G7_IO1 = (1U << 24);  ///< G7_IO1
        constexpr uint32_t G6_IO4 = (1U << 23);  ///< G6_IO4
        constexpr uint32_t G6_IO3 = (1U << 22);  ///< G6_IO3
        constexpr uint32_t G6_IO2 = (1U << 21);  ///< G6_IO2
        constexpr uint32_t G6_IO1 = (1U << 20);  ///< G6_IO1
        constexpr uint32_t G5_IO4 = (1U << 19);  ///< G5_IO4
        constexpr uint32_t G5_IO3 = (1U << 18);  ///< G5_IO3
        constexpr uint32_t G5_IO2 = (1U << 17);  ///< G5_IO2
        constexpr uint32_t G5_IO1 = (1U << 16);  ///< G5_IO1
        constexpr uint32_t G4_IO4 = (1U << 15);  ///< G4_IO4
        constexpr uint32_t G4_IO3 = (1U << 14);  ///< G4_IO3
        constexpr uint32_t G4_IO2 = (1U << 13);  ///< G4_IO2
        constexpr uint32_t G4_IO1 = (1U << 12);  ///< G4_IO1
        constexpr uint32_t G3_IO4 = (1U << 11);  ///< G3_IO4
        constexpr uint32_t G3_IO3 = (1U << 10);  ///< G3_IO3
        constexpr uint32_t G3_IO2 = (1U << 9);  ///< G3_IO2
        constexpr uint32_t G3_IO1 = (1U << 8);  ///< G3_IO1
        constexpr uint32_t G2_IO4 = (1U << 7);  ///< G2_IO4
        constexpr uint32_t G2_IO3 = (1U << 6);  ///< G2_IO3
        constexpr uint32_t G2_IO2 = (1U << 5);  ///< G2_IO2
        constexpr uint32_t G2_IO1 = (1U << 4);  ///< G2_IO1
        constexpr uint32_t G1_IO4 = (1U << 3);  ///< G1_IO4
        constexpr uint32_t G1_IO3 = (1U << 2);  ///< G1_IO3
        constexpr uint32_t G1_IO2 = (1U << 1);  ///< G1_IO2
        constexpr uint32_t G1_IO1 = (1U << 0);  ///< G1_IO1
    }

    /// IOGCSR Register bits
    namespace iogcsr_bits {
        constexpr uint32_t G8S = (1U << 23);  ///< Analog I/O group x status
        constexpr uint32_t G7S = (1U << 22);  ///< Analog I/O group x status
        constexpr uint32_t G6S = (1U << 21);  ///< Analog I/O group x status
        constexpr uint32_t G5S = (1U << 20);  ///< Analog I/O group x status
        constexpr uint32_t G4S = (1U << 19);  ///< Analog I/O group x status
        constexpr uint32_t G3S = (1U << 18);  ///< Analog I/O group x status
        constexpr uint32_t G2S = (1U << 17);  ///< Analog I/O group x status
        constexpr uint32_t G1S = (1U << 16);  ///< Analog I/O group x status
        constexpr uint32_t G8E = (1U << 7);  ///< Analog I/O group x enable
        constexpr uint32_t G7E = (1U << 6);  ///< Analog I/O group x enable
        constexpr uint32_t G6E = (1U << 5);  ///< Analog I/O group x enable
        constexpr uint32_t G5E = (1U << 4);  ///< Analog I/O group x enable
        constexpr uint32_t G4E = (1U << 3);  ///< Analog I/O group x enable
        constexpr uint32_t G3E = (1U << 2);  ///< Analog I/O group x enable
        constexpr uint32_t G2E = (1U << 1);  ///< Analog I/O group x enable
        constexpr uint32_t G1E = (1U << 0);  ///< Analog I/O group x enable
    }

    /// IOG1CR Register bits
    namespace iog1cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG2CR Register bits
    namespace iog2cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG3CR Register bits
    namespace iog3cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG4CR Register bits
    namespace iog4cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG5CR Register bits
    namespace iog5cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG6CR Register bits
    namespace iog6cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG7CR Register bits
    namespace iog7cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

    /// IOG8CR Register bits
    namespace iog8cr_bits {
        constexpr uint32_t CNT = (14 << 0);  ///< Counter value
    }

}

// ============================================================================
// WDG Peripheral
// ============================================================================

namespace wdg {
    /// Base addresses
    constexpr uint32_t IWDG_BASE = 0x40003000;
    constexpr uint32_t WWDG_BASE = 0x40002C00;

    /// WDG Register structure
    struct Registers {
        volatile uint32_t KR;  ///< Offset: 0x00 - Key register
        volatile uint32_t PR;  ///< Offset: 0x04 - Prescaler register
        volatile uint32_t RLR;  ///< Offset: 0x08 - Reload register
        volatile uint32_t SR;  ///< Offset: 0x0C - Status register
        volatile uint32_t WINR;  ///< Offset: 0x10 - Window register
    };

    /// Peripheral instances
    inline Registers* IWDG = reinterpret_cast<Registers*>(IWDG_BASE);
    inline Registers* WWDG = reinterpret_cast<Registers*>(WWDG_BASE);

    // Bit definitions
    /// KR Register bits
    namespace kr_bits {
        constexpr uint32_t KEY = (16 << 0);  ///< Key value (write only, read 0x0000)
    }

    /// PR Register bits
    namespace pr_bits {
        constexpr uint32_t PR = (3 << 0);  ///< Prescaler divider
    }

    /// RLR Register bits
    namespace rlr_bits {
        constexpr uint32_t RL = (12 << 0);  ///< Watchdog counter reload value
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t WVU = (1U << 2);  ///< Watchdog counter window value update
        constexpr uint32_t RVU = (1U << 1);  ///< Watchdog counter reload value update
        constexpr uint32_t PVU = (1U << 0);  ///< Watchdog prescaler value update
    }

    /// WINR Register bits
    namespace winr_bits {
        constexpr uint32_t WIN = (12 << 0);  ///< Watchdog counter window value
    }

}

// ============================================================================
// COMP Peripheral
// ============================================================================

namespace comp {
    /// Base addresses
    constexpr uint32_t COMP_BASE = 0x40010200;

    /// COMP Register structure
    struct Registers {
        volatile uint32_t COMP1_CSR;  ///< Offset: 0x00 - Comparator 1 control and status register
        volatile uint32_t COMP2_CSR;  ///< Offset: 0x04 - Comparator 2 control and status register
    };

    /// Peripheral instances
    inline Registers* COMP = reinterpret_cast<Registers*>(COMP_BASE);

    // Bit definitions
    /// COMP1_CSR Register bits
    namespace comp1_csr_bits {
        constexpr uint32_t COMP1_EN = (1U << 0);  ///< Comparator 1 enable bit
        constexpr uint32_t COMP1_PWRMODE = (2 << 2);  ///< Power Mode of the comparator 1
        constexpr uint32_t COMP1_INMSEL = (3 << 4);  ///< Comparator 1 Input Minus connection configuration bit
        constexpr uint32_t COMP1_INPSEL = (1U << 7);  ///< Comparator1 input plus selection bit
        constexpr uint32_t COMP1_POLARITY = (1U << 15);  ///< Comparator 1 polarity selection bit
        constexpr uint32_t COMP1_HYST = (2 << 16);  ///< Comparator 1 hysteresis selection bits
        constexpr uint32_t COMP1_BLANKING = (3 << 18);  ///< Comparator 1 blanking source selection bits
        constexpr uint32_t COMP1_BRGEN = (1U << 22);  ///< Scaler bridge enable
        constexpr uint32_t COMP1_SCALEN = (1U << 23);  ///< Voltage scaler enable bit
        constexpr uint32_t COMP1_VALUE = (1U << 30);  ///< Comparator 1 output status bit
        constexpr uint32_t COMP1_LOCK = (1U << 31);  ///< COMP1_CSR register lock bit
    }

    /// COMP2_CSR Register bits
    namespace comp2_csr_bits {
        constexpr uint32_t COMP2_EN = (1U << 0);  ///< Comparator 2 enable bit
        constexpr uint32_t COMP2_PWRMODE = (2 << 2);  ///< Power Mode of the comparator 2
        constexpr uint32_t COMP2_INMSEL = (3 << 4);  ///< Comparator 2 Input Minus connection configuration bit
        constexpr uint32_t COMP2_INPSEL = (1U << 7);  ///< Comparator 2 Input Plus connection configuration bit
        constexpr uint32_t COMP2_WINMODE = (1U << 9);  ///< Windows mode selection bit
        constexpr uint32_t COMP2_POLARITY = (1U << 15);  ///< Comparator 2 polarity selection bit
        constexpr uint32_t COMP2_HYST = (2 << 16);  ///< Comparator 2 hysteresis selection bits
        constexpr uint32_t COMP2_BLANKING = (3 << 18);  ///< Comparator 2 blanking source selection bits
        constexpr uint32_t COMP2_BRGEN = (1U << 22);  ///< Scaler bridge enable
        constexpr uint32_t COMP2_SCALEN = (1U << 23);  ///< Voltage scaler enable bit
        constexpr uint32_t COMP2_VALUE = (1U << 30);  ///< Comparator 2 output status bit
        constexpr uint32_t COMP2_LOCK = (1U << 31);  ///< COMP2_CSR register lock bit
    }

}

// ============================================================================
// FIREWALL Peripheral
// ============================================================================

namespace firewall {
    /// Base addresses
    constexpr uint32_t FIREWALL_BASE = 0x40011C00;

    /// FIREWALL Register structure
    struct Registers {
        volatile uint32_t CSSA;  ///< Offset: 0x00 - Code segment start address
        volatile uint32_t CSL;  ///< Offset: 0x04 - Code segment length
        volatile uint32_t NVDSSA;  ///< Offset: 0x08 - Non-volatile data segment start address
        volatile uint32_t NVDSL;  ///< Offset: 0x0C - Non-volatile data segment length
        volatile uint32_t VDSSA;  ///< Offset: 0x10 - Volatile data segment start address
        volatile uint32_t VDSL;  ///< Offset: 0x14 - Volatile data segment length
        volatile uint32_t CR;  ///< Offset: 0x20 - Configuration register
    };

    /// Peripheral instances
    inline Registers* FIREWALL = reinterpret_cast<Registers*>(FIREWALL_BASE);

    // Bit definitions
    /// CSSA Register bits
    namespace cssa_bits {
        constexpr uint32_t ADD = (16 << 8);  ///< code segment start address
    }

    /// CSL Register bits
    namespace csl_bits {
        constexpr uint32_t LENG = (14 << 8);  ///< code segment length
    }

    /// NVDSSA Register bits
    namespace nvdssa_bits {
        constexpr uint32_t ADD = (16 << 8);  ///< Non-volatile data segment start address
    }

    /// NVDSL Register bits
    namespace nvdsl_bits {
        constexpr uint32_t LENG = (14 << 8);  ///< Non-volatile data segment length
    }

    /// VDSSA Register bits
    namespace vdssa_bits {
        constexpr uint32_t ADD = (10 << 6);  ///< Volatile data segment start address
    }

    /// VDSL Register bits
    namespace vdsl_bits {
        constexpr uint32_t LENG = (10 << 6);  ///< Non-volatile data segment length
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t VDE = (1U << 2);  ///< Volatile data execution
        constexpr uint32_t VDS = (1U << 1);  ///< Volatile data shared
        constexpr uint32_t FPA = (1U << 0);  ///< Firewall pre alarm
    }

}

// ============================================================================
// I2C Peripheral
// ============================================================================

namespace i2c {
    /// Base addresses
    constexpr uint32_t I2C1_BASE = 0x40005400;
    constexpr uint32_t I2C2_BASE = 0x40005800;
    constexpr uint32_t I2C3_BASE = 0x40005C00;
    constexpr uint32_t I2C4_BASE = 0x40008400;

    /// I2C Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t OAR1;  ///< Offset: 0x08 - Own address register 1
        volatile uint32_t OAR2;  ///< Offset: 0x0C - Own address register 2
        volatile uint32_t TIMINGR;  ///< Offset: 0x10 - Timing register
        volatile uint32_t TIMEOUTR;  ///< Offset: 0x14 - Status register 1
        volatile uint32_t ISR;  ///< Offset: 0x18 - Interrupt and Status register
        volatile uint32_t ICR;  ///< Offset: 0x1C - Interrupt clear register
        volatile uint32_t PECR;  ///< Offset: 0x20 - PEC register
        volatile uint32_t RXDR;  ///< Offset: 0x24 - Receive data register
        volatile uint32_t TXDR;  ///< Offset: 0x28 - Transmit data register
    };

    /// Peripheral instances
    inline Registers* I2C1 = reinterpret_cast<Registers*>(I2C1_BASE);
    inline Registers* I2C2 = reinterpret_cast<Registers*>(I2C2_BASE);
    inline Registers* I2C3 = reinterpret_cast<Registers*>(I2C3_BASE);
    inline Registers* I2C4 = reinterpret_cast<Registers*>(I2C4_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t PE = (1U << 0);  ///< Peripheral enable
        constexpr uint32_t TXIE = (1U << 1);  ///< TX Interrupt enable
        constexpr uint32_t RXIE = (1U << 2);  ///< RX Interrupt enable
        constexpr uint32_t ADDRIE = (1U << 3);  ///< Address match interrupt enable (slave only)
        constexpr uint32_t NACKIE = (1U << 4);  ///< Not acknowledge received interrupt enable
        constexpr uint32_t STOPIE = (1U << 5);  ///< STOP detection Interrupt enable
        constexpr uint32_t TCIE = (1U << 6);  ///< Transfer Complete interrupt enable
        constexpr uint32_t ERRIE = (1U << 7);  ///< Error interrupts enable
        constexpr uint32_t DNF = (4 << 8);  ///< Digital noise filter
        constexpr uint32_t ANFOFF = (1U << 12);  ///< Analog noise filter OFF
        constexpr uint32_t TXDMAEN = (1U << 14);  ///< DMA transmission requests enable
        constexpr uint32_t RXDMAEN = (1U << 15);  ///< DMA reception requests enable
        constexpr uint32_t SBC = (1U << 16);  ///< Slave byte control
        constexpr uint32_t NOSTRETCH = (1U << 17);  ///< Clock stretching disable
        constexpr uint32_t WUPEN = (1U << 18);  ///< Wakeup from STOP enable
        constexpr uint32_t GCEN = (1U << 19);  ///< General call enable
        constexpr uint32_t SMBHEN = (1U << 20);  ///< SMBus Host address enable
        constexpr uint32_t SMBDEN = (1U << 21);  ///< SMBus Device Default address enable
        constexpr uint32_t ALERTEN = (1U << 22);  ///< SMBUS alert enable
        constexpr uint32_t PECEN = (1U << 23);  ///< PEC enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t PECBYTE = (1U << 26);  ///< Packet error checking byte
        constexpr uint32_t AUTOEND = (1U << 25);  ///< Automatic end mode (master mode)
        constexpr uint32_t RELOAD = (1U << 24);  ///< NBYTES reload mode
        constexpr uint32_t NBYTES = (8 << 16);  ///< Number of bytes
        constexpr uint32_t NACK = (1U << 15);  ///< NACK generation (slave mode)
        constexpr uint32_t STOP = (1U << 14);  ///< Stop generation (master mode)
        constexpr uint32_t START = (1U << 13);  ///< Start generation
        constexpr uint32_t HEAD10R = (1U << 12);  ///< 10-bit address header only read direction (master receiver mode)
        constexpr uint32_t ADD10 = (1U << 11);  ///< 10-bit addressing mode (master mode)
        constexpr uint32_t RD_WRN = (1U << 10);  ///< Transfer direction (master mode)
        constexpr uint32_t SADD = (10 << 0);  ///< Slave address bit (master mode)
    }

    /// OAR1 Register bits
    namespace oar1_bits {
        constexpr uint32_t OA1 = (10 << 0);  ///< Interface address
        constexpr uint32_t OA1MODE = (1U << 10);  ///< Own Address 1 10-bit mode
        constexpr uint32_t OA1EN = (1U << 15);  ///< Own Address 1 enable
    }

    /// OAR2 Register bits
    namespace oar2_bits {
        constexpr uint32_t OA2 = (7 << 1);  ///< Interface address
        constexpr uint32_t OA2MSK = (3 << 8);  ///< Own Address 2 masks
        constexpr uint32_t OA2EN = (1U << 15);  ///< Own Address 2 enable
    }

    /// TIMINGR Register bits
    namespace timingr_bits {
        constexpr uint32_t SCLL = (8 << 0);  ///< SCL low period (master mode)
        constexpr uint32_t SCLH = (8 << 8);  ///< SCL high period (master mode)
        constexpr uint32_t SDADEL = (4 << 16);  ///< Data hold time
        constexpr uint32_t SCLDEL = (4 << 20);  ///< Data setup time
        constexpr uint32_t PRESC = (4 << 28);  ///< Timing prescaler
    }

    /// TIMEOUTR Register bits
    namespace timeoutr_bits {
        constexpr uint32_t TIMEOUTA = (12 << 0);  ///< Bus timeout A
        constexpr uint32_t TIDLE = (1U << 12);  ///< Idle clock timeout detection
        constexpr uint32_t TIMOUTEN = (1U << 15);  ///< Clock timeout enable
        constexpr uint32_t TIMEOUTB = (12 << 16);  ///< Bus timeout B
        constexpr uint32_t TEXTEN = (1U << 31);  ///< Extended clock timeout enable
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t ADDCODE = (7 << 17);  ///< Address match code (Slave mode)
        constexpr uint32_t DIR = (1U << 16);  ///< Transfer direction (Slave mode)
        constexpr uint32_t BUSY = (1U << 15);  ///< Bus busy
        constexpr uint32_t ALERT = (1U << 13);  ///< SMBus alert
        constexpr uint32_t TIMEOUT = (1U << 12);  ///< Timeout or t_low detection flag
        constexpr uint32_t PECERR = (1U << 11);  ///< PEC Error in reception
        constexpr uint32_t OVR = (1U << 10);  ///< Overrun/Underrun (slave mode)
        constexpr uint32_t ARLO = (1U << 9);  ///< Arbitration lost
        constexpr uint32_t BERR = (1U << 8);  ///< Bus error
        constexpr uint32_t TCR = (1U << 7);  ///< Transfer Complete Reload
        constexpr uint32_t TC = (1U << 6);  ///< Transfer Complete (master mode)
        constexpr uint32_t STOPF = (1U << 5);  ///< Stop detection flag
        constexpr uint32_t NACKF = (1U << 4);  ///< Not acknowledge received flag
        constexpr uint32_t ADDR = (1U << 3);  ///< Address matched (slave mode)
        constexpr uint32_t RXNE = (1U << 2);  ///< Receive data register not empty (receivers)
        constexpr uint32_t TXIS = (1U << 1);  ///< Transmit interrupt status (transmitters)
        constexpr uint32_t TXE = (1U << 0);  ///< Transmit data register empty (transmitters)
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t ALERTCF = (1U << 13);  ///< Alert flag clear
        constexpr uint32_t TIMOUTCF = (1U << 12);  ///< Timeout detection flag clear
        constexpr uint32_t PECCF = (1U << 11);  ///< PEC Error flag clear
        constexpr uint32_t OVRCF = (1U << 10);  ///< Overrun/Underrun flag clear
        constexpr uint32_t ARLOCF = (1U << 9);  ///< Arbitration lost flag clear
        constexpr uint32_t BERRCF = (1U << 8);  ///< Bus error flag clear
        constexpr uint32_t STOPCF = (1U << 5);  ///< Stop detection flag clear
        constexpr uint32_t NACKCF = (1U << 4);  ///< Not Acknowledge flag clear
        constexpr uint32_t ADDRCF = (1U << 3);  ///< Address Matched flag clear
    }

    /// PECR Register bits
    namespace pecr_bits {
        constexpr uint32_t PEC = (8 << 0);  ///< Packet error checking register
    }

    /// RXDR Register bits
    namespace rxdr_bits {
        constexpr uint32_t RXDATA = (8 << 0);  ///< 8-bit receive data
    }

    /// TXDR Register bits
    namespace txdr_bits {
        constexpr uint32_t TXDATA = (8 << 0);  ///< 8-bit transmit data
    }

}

// ============================================================================
// FLASH Peripheral
// ============================================================================

namespace flash {
    /// Base addresses
    constexpr uint32_t FLASH_BASE = 0x40022000;

    /// FLASH Register structure
    struct Registers {
        volatile uint32_t ACR;  ///< Offset: 0x00 - Access control register
        volatile uint32_t PDKEYR;  ///< Offset: 0x04 - Power down key register
        volatile uint32_t KEYR;  ///< Offset: 0x08 - Flash key register
        volatile uint32_t OPTKEYR;  ///< Offset: 0x0C - Option byte key register
        volatile uint32_t SR;  ///< Offset: 0x10 - Status register
        volatile uint32_t CR;  ///< Offset: 0x14 - Flash control register
        volatile uint32_t ECCR;  ///< Offset: 0x18 - Flash ECC register
        volatile uint32_t OPTR;  ///< Offset: 0x20 - Flash option register
        volatile uint32_t PCROP1SR;  ///< Offset: 0x24 - Flash Bank 1 PCROP Start address register
        volatile uint32_t PCROP1ER;  ///< Offset: 0x28 - Flash Bank 1 PCROP End address register
        volatile uint32_t WRP1AR;  ///< Offset: 0x2C - Flash Bank 1 WRP area A address register
        volatile uint32_t WRP1BR;  ///< Offset: 0x30 - Flash Bank 1 WRP area B address register
        volatile uint32_t PCROP2SR;  ///< Offset: 0x44 - Flash Bank 2 PCROP Start address register
        volatile uint32_t PCROP2ER;  ///< Offset: 0x48 - Flash Bank 2 PCROP End address register
        volatile uint32_t WRP2AR;  ///< Offset: 0x4C - Flash Bank 2 WRP area A address register
        volatile uint32_t WRP2BR;  ///< Offset: 0x50 - Flash Bank 2 WRP area B address register
    };

    /// Peripheral instances
    inline Registers* FLASH = reinterpret_cast<Registers*>(FLASH_BASE);

    // Bit definitions
    /// ACR Register bits
    namespace acr_bits {
        constexpr uint32_t LATENCY = (3 << 0);  ///< Latency
        constexpr uint32_t PRFTEN = (1U << 8);  ///< Prefetch enable
        constexpr uint32_t ICEN = (1U << 9);  ///< Instruction cache enable
        constexpr uint32_t DCEN = (1U << 10);  ///< Data cache enable
        constexpr uint32_t ICRST = (1U << 11);  ///< Instruction cache reset
        constexpr uint32_t DCRST = (1U << 12);  ///< Data cache reset
        constexpr uint32_t RUN_PD = (1U << 13);  ///< Flash Power-down mode during Low-power run mode
        constexpr uint32_t SLEEP_PD = (1U << 14);  ///< Flash Power-down mode during Low-power sleep mode
    }

    /// PDKEYR Register bits
    namespace pdkeyr_bits {
        constexpr uint32_t PDKEYR = (32 << 0);  ///< RUN_PD in FLASH_ACR key
    }

    /// KEYR Register bits
    namespace keyr_bits {
        constexpr uint32_t KEYR = (32 << 0);  ///< KEYR
    }

    /// OPTKEYR Register bits
    namespace optkeyr_bits {
        constexpr uint32_t OPTKEYR = (32 << 0);  ///< Option byte key
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t EOP = (1U << 0);  ///< End of operation
        constexpr uint32_t OPERR = (1U << 1);  ///< Operation error
        constexpr uint32_t PROGERR = (1U << 3);  ///< Programming error
        constexpr uint32_t WRPERR = (1U << 4);  ///< Write protected error
        constexpr uint32_t PGAERR = (1U << 5);  ///< Programming alignment error
        constexpr uint32_t SIZERR = (1U << 6);  ///< Size error
        constexpr uint32_t PGSERR = (1U << 7);  ///< Programming sequence error
        constexpr uint32_t MISERR = (1U << 8);  ///< Fast programming data miss error
        constexpr uint32_t FASTERR = (1U << 9);  ///< Fast programming error
        constexpr uint32_t RDERR = (1U << 14);  ///< PCROP read error
        constexpr uint32_t OPTVERR = (1U << 15);  ///< Option validity error
        constexpr uint32_t BSY = (1U << 16);  ///< Busy
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PG = (1U << 0);  ///< Programming
        constexpr uint32_t PER = (1U << 1);  ///< Page erase
        constexpr uint32_t MER1 = (1U << 2);  ///< Bank 1 Mass erase
        constexpr uint32_t PNB = (8 << 3);  ///< Page number
        constexpr uint32_t BKER = (1U << 11);  ///< Bank erase
        constexpr uint32_t MER2 = (1U << 15);  ///< Bank 2 Mass erase
        constexpr uint32_t START = (1U << 16);  ///< Start
        constexpr uint32_t OPTSTRT = (1U << 17);  ///< Options modification start
        constexpr uint32_t FSTPG = (1U << 18);  ///< Fast programming
        constexpr uint32_t EOPIE = (1U << 24);  ///< End of operation interrupt enable
        constexpr uint32_t ERRIE = (1U << 25);  ///< Error interrupt enable
        constexpr uint32_t RDERRIE = (1U << 26);  ///< PCROP read error interrupt enable
        constexpr uint32_t OBL_LAUNCH = (1U << 27);  ///< Force the option byte loading
        constexpr uint32_t OPTLOCK = (1U << 30);  ///< Options Lock
        constexpr uint32_t LOCK = (1U << 31);  ///< FLASH_CR Lock
    }

    /// ECCR Register bits
    namespace eccr_bits {
        constexpr uint32_t ADDR_ECC = (19 << 0);  ///< ECC fail address
        constexpr uint32_t BK_ECC = (1U << 19);  ///< ECC fail bank
        constexpr uint32_t SYSF_ECC = (1U << 20);  ///< System Flash ECC fail
        constexpr uint32_t ECCIE = (1U << 24);  ///< ECC correction interrupt enable
        constexpr uint32_t ECCC = (1U << 30);  ///< ECC correction
        constexpr uint32_t ECCD = (1U << 31);  ///< ECC detection
    }

    /// OPTR Register bits
    namespace optr_bits {
        constexpr uint32_t RDP = (8 << 0);  ///< Read protection level
        constexpr uint32_t BOR_LEV = (3 << 8);  ///< BOR reset Level
        constexpr uint32_t nRST_STOP = (1U << 12);  ///< nRST_STOP
        constexpr uint32_t nRST_STDBY = (1U << 13);  ///< nRST_STDBY
        constexpr uint32_t IDWG_SW = (1U << 16);  ///< Independent watchdog selection
        constexpr uint32_t IWDG_STOP = (1U << 17);  ///< Independent watchdog counter freeze in Stop mode
        constexpr uint32_t IWDG_STDBY = (1U << 18);  ///< Independent watchdog counter freeze in Standby mode
        constexpr uint32_t WWDG_SW = (1U << 19);  ///< Window watchdog selection
        constexpr uint32_t BFB2 = (1U << 20);  ///< Dual-bank boot
        constexpr uint32_t DUALBANK = (1U << 21);  ///< Dual-Bank on 512 KB or 256 KB Flash memory devices
        constexpr uint32_t nBOOT1 = (1U << 23);  ///< Boot configuration
        constexpr uint32_t SRAM2_PE = (1U << 24);  ///< SRAM2 parity check enable
        constexpr uint32_t SRAM2_RST = (1U << 25);  ///< SRAM2 Erase when system reset
    }

    /// PCROP1SR Register bits
    namespace pcrop1sr_bits {
        constexpr uint32_t PCROP1_STRT = (16 << 0);  ///< Bank 1 PCROP area start offset
    }

    /// PCROP1ER Register bits
    namespace pcrop1er_bits {
        constexpr uint32_t PCROP1_END = (16 << 0);  ///< Bank 1 PCROP area end offset
        constexpr uint32_t PCROP_RDP = (1U << 31);  ///< PCROP area preserved when RDP level decreased
    }

    /// WRP1AR Register bits
    namespace wrp1ar_bits {
        constexpr uint32_t WRP1A_STRT = (8 << 0);  ///< Bank 1 WRP first area start offset
        constexpr uint32_t WRP1A_END = (8 << 16);  ///< Bank 1 WRP first area A end offset
    }

    /// WRP1BR Register bits
    namespace wrp1br_bits {
        constexpr uint32_t WRP1B_STRT = (8 << 16);  ///< Bank 1 WRP second area B end offset
        constexpr uint32_t WRP1B_END = (8 << 0);  ///< Bank 1 WRP second area B start offset
    }

    /// PCROP2SR Register bits
    namespace pcrop2sr_bits {
        constexpr uint32_t PCROP2_STRT = (16 << 0);  ///< Bank 2 PCROP area start offset
    }

    /// PCROP2ER Register bits
    namespace pcrop2er_bits {
        constexpr uint32_t PCROP2_END = (16 << 0);  ///< Bank 2 PCROP area end offset
    }

    /// WRP2AR Register bits
    namespace wrp2ar_bits {
        constexpr uint32_t WRP2A_STRT = (8 << 0);  ///< Bank 2 WRP first area A start offset
        constexpr uint32_t WRP2A_END = (8 << 16);  ///< Bank 2 WRP first area A end offset
    }

    /// WRP2BR Register bits
    namespace wrp2br_bits {
        constexpr uint32_t WRP2B_STRT = (8 << 0);  ///< Bank 2 WRP second area B start offset
        constexpr uint32_t WRP2B_END = (8 << 16);  ///< Bank 2 WRP second area B end offset
    }

}

// ============================================================================
// DBGMCU Peripheral
// ============================================================================

namespace dbgmcu {
    /// Base addresses
    constexpr uint32_t DBGMCU_BASE = 0xE0042000;

    /// DBGMCU Register structure
    struct Registers {
        volatile uint32_t IDCODE;  ///< Offset: 0x00 - MCU Device ID Code Register
        volatile uint32_t CR;  ///< Offset: 0x04 - Debug MCU Configuration Register
        volatile uint32_t APB1_FZR1;  ///< Offset: 0x08 - APB Low Freeze Register 1
        volatile uint32_t APB1_FZR2;  ///< Offset: 0x0C - APB Low Freeze Register 2
        volatile uint32_t APB2_FZR;  ///< Offset: 0x10 - APB High Freeze Register
    };

    /// Peripheral instances
    inline Registers* DBGMCU = reinterpret_cast<Registers*>(DBGMCU_BASE);

    // Bit definitions
    /// IDCODE Register bits
    namespace idcode_bits {
        constexpr uint32_t DEV_ID = (16 << 0);  ///< Device Identifier
        constexpr uint32_t REV_ID = (16 << 16);  ///< Revision Identifier
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t DBG_SLEEP = (1U << 0);  ///< Debug Sleep Mode
        constexpr uint32_t DBG_STOP = (1U << 1);  ///< Debug Stop Mode
        constexpr uint32_t DBG_STANDBY = (1U << 2);  ///< Debug Standby Mode
        constexpr uint32_t TRACE_IOEN = (1U << 5);  ///< Trace pin assignment control
        constexpr uint32_t TRACE_MODE = (2 << 6);  ///< Trace pin assignment control
    }

    /// APB1_FZR1 Register bits
    namespace apb1_fzr1_bits {
        constexpr uint32_t DBG_TIMER2_STOP = (1U << 0);  ///< Debug Timer 2 stopped when Core is halted
        constexpr uint32_t DBG_TIM3_STOP = (1U << 1);  ///< TIM3 counter stopped when core is halted
        constexpr uint32_t DBG_TIM4_STOP = (1U << 2);  ///< TIM4 counter stopped when core is halted
        constexpr uint32_t DBG_TIM5_STOP = (1U << 3);  ///< TIM5 counter stopped when core is halted
        constexpr uint32_t DBG_TIMER6_STOP = (1U << 4);  ///< Debug Timer 6 stopped when Core is halted
        constexpr uint32_t DBG_TIM7_STOP = (1U << 5);  ///< TIM7 counter stopped when core is halted
        constexpr uint32_t DBG_RTC_STOP = (1U << 10);  ///< Debug RTC stopped when Core is halted
        constexpr uint32_t DBG_WWDG_STOP = (1U << 11);  ///< Debug Window Wachdog stopped when Core is halted
        constexpr uint32_t DBG_IWDG_STOP = (1U << 12);  ///< Debug Independent Wachdog stopped when Core is halted
        constexpr uint32_t DBG_I2C1_STOP = (1U << 21);  ///< I2C1 SMBUS timeout mode stopped when core is halted
        constexpr uint32_t DBG_I2C2_STOP = (1U << 22);  ///< I2C2 SMBUS timeout mode stopped when core is halted
        constexpr uint32_t DBG_I2C3_STOP = (1U << 23);  ///< I2C3 SMBUS timeout counter stopped when core is halted
        constexpr uint32_t DBG_CAN_STOP = (1U << 25);  ///< bxCAN stopped when core is halted
        constexpr uint32_t DBG_LPTIMER_STOP = (1U << 31);  ///< LPTIM1 counter stopped when core is halted
    }

    /// APB1_FZR2 Register bits
    namespace apb1_fzr2_bits {
        constexpr uint32_t DBG_LPTIM2_STOP = (1U << 5);  ///< LPTIM2 counter stopped when core is halted
    }

    /// APB2_FZR Register bits
    namespace apb2_fzr_bits {
        constexpr uint32_t DBG_TIM1_STOP = (1U << 11);  ///< TIM1 counter stopped when core is halted
        constexpr uint32_t DBG_TIM8_STOP = (1U << 13);  ///< TIM8 counter stopped when core is halted
        constexpr uint32_t DBG_TIM15_STOP = (1U << 16);  ///< TIM15 counter stopped when core is halted
        constexpr uint32_t DBG_TIM16_STOP = (1U << 17);  ///< TIM16 counter stopped when core is halted
        constexpr uint32_t DBG_TIM17_STOP = (1U << 18);  ///< TIM17 counter stopped when core is halted
    }

}

// ============================================================================
// SPI Peripheral
// ============================================================================

namespace spi {
    /// Base addresses
    constexpr uint32_t OCTOSPI1_BASE = 0xA0001000;
    constexpr uint32_t OCTOSPI2_BASE = 0xA0001400;
    constexpr uint32_t SPI1_BASE = 0x40013000;
    constexpr uint32_t SPI2_BASE = 0x40003800;
    constexpr uint32_t SPI3_BASE = 0x40003C00;
    constexpr uint32_t OCTOSPIM_BASE = 0x50061C00;

    /// SPI Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t DCR1;  ///< Offset: 0x08 - device configuration register
        volatile uint32_t DCR2;  ///< Offset: 0x0C - device configuration register 2
        volatile uint32_t DCR3;  ///< Offset: 0x10 - device configuration register 3
        volatile uint32_t SR;  ///< Offset: 0x20 - status register
        volatile uint32_t FCR;  ///< Offset: 0x24 - flag clear register
        volatile uint32_t DLR;  ///< Offset: 0x40 - data length register
        volatile uint32_t AR;  ///< Offset: 0x48 - address register
        volatile uint32_t DR;  ///< Offset: 0x50 - data register
        volatile uint32_t PSMKR;  ///< Offset: 0x80 - polling status mask register
        volatile uint32_t PSMAR;  ///< Offset: 0x88 - polling status match register
        volatile uint32_t PIR;  ///< Offset: 0x90 - polling interval register
        volatile uint32_t CCR;  ///< Offset: 0x100 - communication configuration register
        volatile uint32_t TCR;  ///< Offset: 0x108 - timing configuration register
        volatile uint32_t IR;  ///< Offset: 0x110 - instruction register
        volatile uint32_t ABR;  ///< Offset: 0x120 - alternate bytes register
        volatile uint32_t LPTR;  ///< Offset: 0x130 - low-power timeout register
        volatile uint32_t WCCR;  ///< Offset: 0x180 - write communication configuration register
        volatile uint32_t WTCR;  ///< Offset: 0x188 - write timing configuration register
        volatile uint32_t WIR;  ///< Offset: 0x190 - write instruction register
        volatile uint32_t WABR;  ///< Offset: 0x1A0 - write alternate bytes register
        volatile uint32_t HLCR;  ///< Offset: 0x200 - HyperBusTM latency configuration register
        volatile uint32_t HWCFGR;  ///< Offset: 0x3F0 - HW configuration register
        volatile uint32_t VER;  ///< Offset: 0x3F4 - version register
        volatile uint32_t ID;  ///< Offset: 0x3F8 - identification
        volatile uint32_t MID;  ///< Offset: 0x3FC - magic ID
    };

    /// Peripheral instances
    inline Registers* OCTOSPI1 = reinterpret_cast<Registers*>(OCTOSPI1_BASE);
    inline Registers* OCTOSPI2 = reinterpret_cast<Registers*>(OCTOSPI2_BASE);
    inline Registers* SPI1 = reinterpret_cast<Registers*>(SPI1_BASE);
    inline Registers* SPI2 = reinterpret_cast<Registers*>(SPI2_BASE);
    inline Registers* SPI3 = reinterpret_cast<Registers*>(SPI3_BASE);
    inline Registers* OCTOSPIM = reinterpret_cast<Registers*>(OCTOSPIM_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t FMODE = (2 << 28);  ///< Functional mode
        constexpr uint32_t PMM = (1U << 23);  ///< Polling match mode
        constexpr uint32_t APMS = (1U << 22);  ///< Automatic poll mode stop
        constexpr uint32_t TOIE = (1U << 20);  ///< TimeOut interrupt enable
        constexpr uint32_t SMIE = (1U << 19);  ///< Status match interrupt enable
        constexpr uint32_t FTIE = (1U << 18);  ///< FIFO threshold interrupt enable
        constexpr uint32_t TCIE = (1U << 17);  ///< Transfer complete interrupt enable
        constexpr uint32_t TEIE = (1U << 16);  ///< Transfer error interrupt enable
        constexpr uint32_t FTHRES = (5 << 8);  ///< IFO threshold level
        constexpr uint32_t FSEL = (1U << 7);  ///< FLASH memory selection
        constexpr uint32_t DQM = (1U << 6);  ///< Dual-quad mode
        constexpr uint32_t TCEN = (1U << 3);  ///< Timeout counter enable
        constexpr uint32_t DMAEN = (1U << 2);  ///< DMA enable
        constexpr uint32_t ABORT = (1U << 1);  ///< Abort request
        constexpr uint32_t EN = (1U << 0);  ///< Enable
    }

    /// DCR1 Register bits
    namespace dcr1_bits {
        constexpr uint32_t CKMODE = (1U << 0);  ///< Mode 0 / mode 3
        constexpr uint32_t FRCK = (1U << 1);  ///< Free running clock
        constexpr uint32_t CSHT = (3 << 8);  ///< Chip-select high time
        constexpr uint32_t DEVSIZE = (5 << 16);  ///< Device size
        constexpr uint32_t MTYP = (2 << 24);  ///< Memory type
    }

    /// DCR2 Register bits
    namespace dcr2_bits {
        constexpr uint32_t PRESCALER = (8 << 0);  ///< Clock prescaler
        constexpr uint32_t WRAPSIZE = (3 << 16);  ///< Wrap size
    }

    /// DCR3 Register bits
    namespace dcr3_bits {
        constexpr uint32_t CSBOUND = (5 << 16);  ///< CS boundary
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t TEF = (1U << 0);  ///< Transfer error flag
        constexpr uint32_t TCF = (1U << 1);  ///< Transfer complete flag
        constexpr uint32_t FTF = (1U << 2);  ///< FIFO threshold flag
        constexpr uint32_t SMF = (1U << 3);  ///< Status match flag
        constexpr uint32_t TOF = (1U << 4);  ///< Timeout flag
        constexpr uint32_t BUSY = (1U << 5);  ///< BUSY
        constexpr uint32_t FLEVEL = (6 << 8);  ///< FIFO level
    }

    /// FCR Register bits
    namespace fcr_bits {
        constexpr uint32_t CTEF = (1U << 0);  ///< Clear transfer error flag
        constexpr uint32_t CTCF = (1U << 1);  ///< Clear transfer complete flag
        constexpr uint32_t CSMF = (1U << 3);  ///< Clear status match flag
        constexpr uint32_t CTOF = (1U << 4);  ///< Clear timeout flag
    }

    /// DLR Register bits
    namespace dlr_bits {
        constexpr uint32_t DL = (32 << 0);  ///< Data length
    }

    /// AR Register bits
    namespace ar_bits {
        constexpr uint32_t ADDRESS = (32 << 0);  ///< ADDRESS
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data
    }

    /// PSMKR Register bits
    namespace psmkr_bits {
        constexpr uint32_t MASK = (32 << 0);  ///< Status mask
    }

    /// PSMAR Register bits
    namespace psmar_bits {
        constexpr uint32_t MATCH = (32 << 0);  ///< Status match
    }

    /// PIR Register bits
    namespace pir_bits {
        constexpr uint32_t INTERVAL = (16 << 0);  ///< Polling interval
    }

    /// CCR Register bits
    namespace ccr_bits {
        constexpr uint32_t IMODE = (3 << 0);  ///< Instruction mode
        constexpr uint32_t IDTR = (1U << 3);  ///< Instruction double transfer rate
        constexpr uint32_t ISIZE = (2 << 4);  ///< Instruction size
        constexpr uint32_t ADMODE = (3 << 8);  ///< Address mode
        constexpr uint32_t ADDTR = (1U << 11);  ///< Address double transfer rate
        constexpr uint32_t ADSIZE = (2 << 12);  ///< Address size
        constexpr uint32_t ABMODE = (3 << 16);  ///< Alternate byte mode
        constexpr uint32_t ABDTR = (1U << 19);  ///< Alternate bytes double transfer rate
        constexpr uint32_t ABSIZE = (2 << 20);  ///< Alternate bytes size
        constexpr uint32_t DMODE = (3 << 24);  ///< Data mode
        constexpr uint32_t DDTR = (1U << 27);  ///< Alternate bytes double transfer rate
        constexpr uint32_t DQSE = (1U << 29);  ///< DQS enable
        constexpr uint32_t SIOO = (1U << 31);  ///< Send instruction only once mode
    }

    /// TCR Register bits
    namespace tcr_bits {
        constexpr uint32_t DCYC = (5 << 0);  ///< Number of dummy cycles
        constexpr uint32_t DHQC = (1U << 28);  ///< Delay hold quarter cycle
        constexpr uint32_t SSHIFT = (1U << 30);  ///< Sample shift
    }

    /// IR Register bits
    namespace ir_bits {
        constexpr uint32_t INSTRUCTION = (32 << 0);  ///< INSTRUCTION
    }

    /// ABR Register bits
    namespace abr_bits {
        constexpr uint32_t ALTERNATE = (32 << 0);  ///< Alternate bytes
    }

    /// LPTR Register bits
    namespace lptr_bits {
        constexpr uint32_t TIMEOUT = (16 << 0);  ///< Timeout period
    }

    /// WCCR Register bits
    namespace wccr_bits {
        constexpr uint32_t IMODE = (3 << 0);  ///< Instruction mode
        constexpr uint32_t IDTR = (1U << 3);  ///< Instruction double transfer rate
        constexpr uint32_t ISIZE = (2 << 4);  ///< Instruction size
        constexpr uint32_t ADMODE = (3 << 8);  ///< Address mode
        constexpr uint32_t ADDTR = (1U << 11);  ///< Address double transfer rate
        constexpr uint32_t ADSIZE = (2 << 12);  ///< Address size
        constexpr uint32_t ABMODE = (3 << 16);  ///< Alternate byte mode
        constexpr uint32_t ABDTR = (1U << 19);  ///< Alternate bytes double transfer rate
        constexpr uint32_t ABSIZE = (2 << 20);  ///< Alternate bytes size
        constexpr uint32_t DMODE = (3 << 24);  ///< Data mode
        constexpr uint32_t DDTR = (1U << 27);  ///< alternate bytes double transfer rate
        constexpr uint32_t DQSE = (1U << 29);  ///< DQS enable
        constexpr uint32_t SIOO = (1U << 31);  ///< Send instruction only once mode
    }

    /// WTCR Register bits
    namespace wtcr_bits {
        constexpr uint32_t DCYC = (5 << 0);  ///< Number of dummy cycles
    }

    /// WIR Register bits
    namespace wir_bits {
        constexpr uint32_t INSTRUCTION = (32 << 0);  ///< INSTRUCTION
    }

    /// WABR Register bits
    namespace wabr_bits {
        constexpr uint32_t ALTERNATE = (32 << 0);  ///< Alternate bytes
    }

    /// HLCR Register bits
    namespace hlcr_bits {
        constexpr uint32_t LM = (1U << 0);  ///< Latency mode
        constexpr uint32_t WZL = (1U << 1);  ///< Write zero latency
        constexpr uint32_t TACC = (8 << 8);  ///< Access time
        constexpr uint32_t TRWR = (8 << 16);  ///< Read write recovery time
    }

    /// HWCFGR Register bits
    namespace hwcfgr_bits {
        constexpr uint32_t AXI = (4 << 0);  ///< AXI interface
        constexpr uint32_t FIFO = (8 << 4);  ///< FIFO depth
        constexpr uint32_t PRES = (8 << 12);  ///< Prescaler
        constexpr uint32_t IDL = (4 << 20);  ///< ID Length
        constexpr uint32_t MMW = (4 << 24);  ///< Memory map write
        constexpr uint32_t MST = (4 << 28);  ///< Master
    }

    /// VER Register bits
    namespace ver_bits {
        constexpr uint32_t VER = (8 << 0);  ///< Version
    }

    /// ID Register bits
    namespace id_bits {
        constexpr uint32_t ID = (32 << 0);  ///< Identification
    }

    /// MID Register bits
    namespace mid_bits {
        constexpr uint32_t MID = (32 << 0);  ///< Magic ID
    }

}

// ============================================================================
// RCC Peripheral
// ============================================================================

namespace rcc {
    /// Base addresses
    constexpr uint32_t RCC_BASE = 0x40021000;

    /// RCC Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Clock control register
        volatile uint32_t ICSCR;  ///< Offset: 0x04 - Internal clock sources calibration register
        volatile uint32_t CFGR;  ///< Offset: 0x08 - Clock configuration register
        volatile uint32_t PLLCFGR;  ///< Offset: 0x0C - PLL configuration register
        volatile uint32_t PLLSAI1CFGR;  ///< Offset: 0x10 - PLLSAI1 configuration register
        volatile uint32_t PLLSAI2CFGR;  ///< Offset: 0x14 - PLLSAI2 configuration register
        volatile uint32_t CIER;  ///< Offset: 0x18 - Clock interrupt enable register
        volatile uint32_t CIFR;  ///< Offset: 0x1C - Clock interrupt flag register
        volatile uint32_t CICR;  ///< Offset: 0x20 - Clock interrupt clear register
        volatile uint32_t AHB1RSTR;  ///< Offset: 0x28 - AHB1 peripheral reset register
        volatile uint32_t AHB2RSTR;  ///< Offset: 0x2C - AHB2 peripheral reset register
        volatile uint32_t AHB3RSTR;  ///< Offset: 0x30 - AHB3 peripheral reset register
        volatile uint32_t APB1RSTR1;  ///< Offset: 0x38 - APB1 peripheral reset register 1
        volatile uint32_t APB1RSTR2;  ///< Offset: 0x3C - APB1 peripheral reset register 2
        volatile uint32_t APB2RSTR;  ///< Offset: 0x40 - APB2 peripheral reset register
        volatile uint32_t AHB1ENR;  ///< Offset: 0x48 - AHB1 peripheral clock enable register
        volatile uint32_t AHB2ENR;  ///< Offset: 0x4C - AHB2 peripheral clock enable register
        volatile uint32_t AHB3ENR;  ///< Offset: 0x50 - AHB3 peripheral clock enable register
        volatile uint32_t APB1ENR1;  ///< Offset: 0x58 - APB1ENR1
        volatile uint32_t APB1ENR2;  ///< Offset: 0x5C - APB1 peripheral clock enable register 2
        volatile uint32_t APB2ENR;  ///< Offset: 0x60 - APB2ENR
        volatile uint32_t AHB1SMENR;  ///< Offset: 0x68 - AHB1 peripheral clocks enable in Sleep and Stop modes register
        volatile uint32_t AHB2SMENR;  ///< Offset: 0x6C - AHB2 peripheral clocks enable in Sleep and Stop modes register
        volatile uint32_t AHB3SMENR;  ///< Offset: 0x70 - AHB3 peripheral clocks enable in Sleep and Stop modes register
        volatile uint32_t APB1SMENR1;  ///< Offset: 0x78 - APB1SMENR1
        volatile uint32_t APB1SMENR2;  ///< Offset: 0x7C - APB1 peripheral clocks enable in Sleep and Stop modes register 2
        volatile uint32_t APB2SMENR;  ///< Offset: 0x80 - APB2SMENR
        volatile uint32_t CCIPR;  ///< Offset: 0x88 - CCIPR
        volatile uint32_t BDCR;  ///< Offset: 0x90 - BDCR
        volatile uint32_t CSR;  ///< Offset: 0x94 - CSR
        volatile uint32_t CRRCR;  ///< Offset: 0x98 - Clock recovery RC register
        volatile uint32_t CCIPR2;  ///< Offset: 0x9C - Peripherals independent clock configuration register
    };

    /// Peripheral instances
    inline Registers* RCC = reinterpret_cast<Registers*>(RCC_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t PLLSAI2RDY = (1U << 29);  ///< SAI2 PLL clock ready flag
        constexpr uint32_t PLLSAI2ON = (1U << 28);  ///< SAI2 PLL enable
        constexpr uint32_t PLLSAI1RDY = (1U << 27);  ///< SAI1 PLL clock ready flag
        constexpr uint32_t PLLSAI1ON = (1U << 26);  ///< SAI1 PLL enable
        constexpr uint32_t PLLRDY = (1U << 25);  ///< Main PLL clock ready flag
        constexpr uint32_t PLLON = (1U << 24);  ///< Main PLL enable
        constexpr uint32_t CSSON = (1U << 19);  ///< Clock security system enable
        constexpr uint32_t HSEBYP = (1U << 18);  ///< HSE crystal oscillator bypass
        constexpr uint32_t HSERDY = (1U << 17);  ///< HSE clock ready flag
        constexpr uint32_t HSEON = (1U << 16);  ///< HSE clock enable
        constexpr uint32_t HSIASFS = (1U << 11);  ///< HSI automatic start from Stop
        constexpr uint32_t HSIRDY = (1U << 10);  ///< HSI clock ready flag
        constexpr uint32_t HSIKERON = (1U << 9);  ///< HSI always enable for peripheral kernels
        constexpr uint32_t HSION = (1U << 8);  ///< HSI clock enable
        constexpr uint32_t MSIRANGE = (4 << 4);  ///< MSI clock ranges
        constexpr uint32_t MSIRGSEL = (1U << 3);  ///< MSI clock range selection
        constexpr uint32_t MSIPLLEN = (1U << 2);  ///< MSI clock PLL enable
        constexpr uint32_t MSIRDY = (1U << 1);  ///< MSI clock ready flag
        constexpr uint32_t MSION = (1U << 0);  ///< MSI clock enable
    }

    /// ICSCR Register bits
    namespace icscr_bits {
        constexpr uint32_t HSITRIM = (7 << 24);  ///< HSI clock trimming
        constexpr uint32_t HSICAL = (8 << 16);  ///< HSI clock calibration
        constexpr uint32_t MSITRIM = (8 << 8);  ///< MSI clock trimming
        constexpr uint32_t MSICAL = (8 << 0);  ///< MSI clock calibration
    }

    /// CFGR Register bits
    namespace cfgr_bits {
        constexpr uint32_t MCOPRE = (3 << 28);  ///< Microcontroller clock output prescaler
        constexpr uint32_t MCOSEL = (3 << 24);  ///< Microcontroller clock output
        constexpr uint32_t STOPWUCK = (1U << 15);  ///< Wakeup from Stop and CSS backup clock selection
        constexpr uint32_t PPRE2 = (3 << 11);  ///< APB high-speed prescaler (APB2)
        constexpr uint32_t PPRE1 = (3 << 8);  ///< PB low-speed prescaler (APB1)
        constexpr uint32_t HPRE = (4 << 4);  ///< AHB prescaler
        constexpr uint32_t SWS = (2 << 2);  ///< System clock switch status
        constexpr uint32_t SW = (2 << 0);  ///< System clock switch
    }

    /// PLLCFGR Register bits
    namespace pllcfgr_bits {
        constexpr uint32_t PLLPDIV = (5 << 27);  ///< Main PLL division factor for PLLSAI2CLK
        constexpr uint32_t PLLR = (2 << 25);  ///< Main PLL division factor for PLLCLK (system clock)
        constexpr uint32_t PLLREN = (1U << 24);  ///< Main PLL PLLCLK output enable
        constexpr uint32_t PLLQ = (2 << 21);  ///< Main PLL division factor for PLLUSB1CLK(48 MHz clock)
        constexpr uint32_t PLLQEN = (1U << 20);  ///< Main PLL PLLUSB1CLK output enable
        constexpr uint32_t PLLP = (1U << 17);  ///< Main PLL division factor for PLLSAI3CLK (SAI1 and SAI2 clock)
        constexpr uint32_t PLLPEN = (1U << 16);  ///< Main PLL PLLSAI3CLK output enable
        constexpr uint32_t PLLN = (7 << 8);  ///< Main PLL multiplication factor for VCO
        constexpr uint32_t PLLM = (4 << 4);  ///< Division factor for the main PLL and audio PLL (PLLSAI1 and PLLSAI2) input clock
        constexpr uint32_t PLLSRC = (2 << 0);  ///< Main PLL, PLLSAI1 and PLLSAI2 entry clock source
    }

    /// PLLSAI1CFGR Register bits
    namespace pllsai1cfgr_bits {
        constexpr uint32_t PLLSAI1PDIV = (5 << 27);  ///< PLLSAI1 division factor for PLLSAI1CLK
        constexpr uint32_t PLLSAI1R = (2 << 25);  ///< PLLSAI1 division factor for PLLADC1CLK (ADC clock)
        constexpr uint32_t PLLSAI1REN = (1U << 24);  ///< PLLSAI1 PLLADC1CLK output enable
        constexpr uint32_t PLLSAI1Q = (2 << 21);  ///< SAI1PLL division factor for PLLUSB2CLK (48 MHz clock)
        constexpr uint32_t PLLSAI1QEN = (1U << 20);  ///< SAI1PLL PLLUSB2CLK output enable
        constexpr uint32_t PLLSAI1P = (1U << 17);  ///< SAI1PLL division factor for PLLSAI1CLK (SAI1 or SAI2 clock)
        constexpr uint32_t PLLSAI1PEN = (1U << 16);  ///< SAI1PLL PLLSAI1CLK output enable
        constexpr uint32_t PLLSAI1N = (7 << 8);  ///< SAI1PLL multiplication factor for VCO
        constexpr uint32_t PLLSAI1M = (4 << 4);  ///< Division factor for PLLSAI1 input clock
    }

    /// PLLSAI2CFGR Register bits
    namespace pllsai2cfgr_bits {
        constexpr uint32_t PLLSAI2PDIV = (5 << 27);  ///< PLLSAI2 division factor for PLLSAI2CLK
        constexpr uint32_t PLLSAI2R = (2 << 25);  ///< PLLSAI2 division factor for PLLADC2CLK (ADC clock)
        constexpr uint32_t PLLSAI2REN = (1U << 24);  ///< PLLSAI2 PLLADC2CLK output enable
        constexpr uint32_t PLLSAI2Q = (2 << 21);  ///< SAI2PLL PLLSAI2CLK output enable
        constexpr uint32_t PLLSAI2QEN = (1U << 20);  ///< PLLSAI2 division factor for PLLDISCLK
        constexpr uint32_t PLLSAI2P = (1U << 17);  ///< SAI1PLL division factor for PLLSAI2CLK (SAI1 or SAI2 clock)
        constexpr uint32_t PLLSAI2PEN = (1U << 16);  ///< SAI2PLL PLLSAI2CLK output enable
        constexpr uint32_t PLLSAI2N = (7 << 8);  ///< SAI2PLL multiplication factor for VCO
        constexpr uint32_t PLLSAI2M = (4 << 4);  ///< Division factor for PLLSAI2 input clock
    }

    /// CIER Register bits
    namespace cier_bits {
        constexpr uint32_t LSIRDYIE = (1U << 0);  ///< LSI ready interrupt enable
        constexpr uint32_t LSERDYIE = (1U << 1);  ///< LSE ready interrupt enable
        constexpr uint32_t MSIRDYIE = (1U << 2);  ///< MSI ready interrupt enable
        constexpr uint32_t HSIRDYIE = (1U << 3);  ///< HSI ready interrupt enable
        constexpr uint32_t HSERDYIE = (1U << 4);  ///< HSE ready interrupt enable
        constexpr uint32_t PLLRDYIE = (1U << 5);  ///< PLL ready interrupt enable
        constexpr uint32_t PLLSAI1RDYIE = (1U << 6);  ///< PLLSAI1 ready interrupt enable
        constexpr uint32_t PLLSAI2RDYIE = (1U << 7);  ///< PLLSAI2 ready interrupt enable
        constexpr uint32_t LSECSSIE = (1U << 9);  ///< LSE clock security system interrupt enable
        constexpr uint32_t HSI48RDYIE = (1U << 10);  ///< HSI48 ready interrupt enable
    }

    /// CIFR Register bits
    namespace cifr_bits {
        constexpr uint32_t LSIRDYF = (1U << 0);  ///< LSI ready interrupt flag
        constexpr uint32_t LSERDYF = (1U << 1);  ///< LSE ready interrupt flag
        constexpr uint32_t MSIRDYF = (1U << 2);  ///< MSI ready interrupt flag
        constexpr uint32_t HSIRDYF = (1U << 3);  ///< HSI ready interrupt flag
        constexpr uint32_t HSERDYF = (1U << 4);  ///< HSE ready interrupt flag
        constexpr uint32_t PLLRDYF = (1U << 5);  ///< PLL ready interrupt flag
        constexpr uint32_t PLLSAI1RDYF = (1U << 6);  ///< PLLSAI1 ready interrupt flag
        constexpr uint32_t PLLSAI2RDYF = (1U << 7);  ///< PLLSAI2 ready interrupt flag
        constexpr uint32_t CSSF = (1U << 8);  ///< Clock security system interrupt flag
        constexpr uint32_t LSECSSF = (1U << 9);  ///< LSE Clock security system interrupt flag
        constexpr uint32_t HSI48RDYF = (1U << 10);  ///< HSI48 ready interrupt flag
    }

    /// CICR Register bits
    namespace cicr_bits {
        constexpr uint32_t LSIRDYC = (1U << 0);  ///< LSI ready interrupt clear
        constexpr uint32_t LSERDYC = (1U << 1);  ///< LSE ready interrupt clear
        constexpr uint32_t MSIRDYC = (1U << 2);  ///< MSI ready interrupt clear
        constexpr uint32_t HSIRDYC = (1U << 3);  ///< HSI ready interrupt clear
        constexpr uint32_t HSERDYC = (1U << 4);  ///< HSE ready interrupt clear
        constexpr uint32_t PLLRDYC = (1U << 5);  ///< PLL ready interrupt clear
        constexpr uint32_t PLLSAI1RDYC = (1U << 6);  ///< PLLSAI1 ready interrupt clear
        constexpr uint32_t PLLSAI2RDYC = (1U << 7);  ///< PLLSAI2 ready interrupt clear
        constexpr uint32_t CSSC = (1U << 8);  ///< Clock security system interrupt clear
        constexpr uint32_t LSECSSC = (1U << 9);  ///< LSE Clock security system interrupt clear
        constexpr uint32_t HSI48RDYC = (1U << 10);  ///< HSI48 oscillator ready interrupt clear
    }

    /// AHB1RSTR Register bits
    namespace ahb1rstr_bits {
        constexpr uint32_t DMA1RST = (1U << 0);  ///< DMA1 reset
        constexpr uint32_t DMA2RST = (1U << 1);  ///< DMA2 reset
        constexpr uint32_t DMAMUX1RST = (1U << 2);  ///< DMAMUXRST
        constexpr uint32_t FLASHRST = (1U << 8);  ///< Flash memory interface reset
        constexpr uint32_t CRCRST = (1U << 12);  ///< CRC reset
        constexpr uint32_t TSCRST = (1U << 16);  ///< Touch Sensing Controller reset
        constexpr uint32_t DMA2DRST = (1U << 17);  ///< DMA2D reset
        constexpr uint32_t GFXMMURST = (1U << 18);  ///< GFXMMU reset
    }

    /// AHB2RSTR Register bits
    namespace ahb2rstr_bits {
        constexpr uint32_t GPIOARST = (1U << 0);  ///< IO port A reset
        constexpr uint32_t GPIOBRST = (1U << 1);  ///< IO port B reset
        constexpr uint32_t GPIOCRST = (1U << 2);  ///< IO port C reset
        constexpr uint32_t GPIODRST = (1U << 3);  ///< IO port D reset
        constexpr uint32_t GPIOERST = (1U << 4);  ///< IO port E reset
        constexpr uint32_t GPIOFRST = (1U << 5);  ///< IO port F reset
        constexpr uint32_t GPIOGRST = (1U << 6);  ///< IO port G reset
        constexpr uint32_t GPIOHRST = (1U << 7);  ///< IO port H reset
        constexpr uint32_t GPIOIRST = (1U << 8);  ///< IO port I reset
        constexpr uint32_t OTGFSRST = (1U << 12);  ///< USB OTG FS reset
        constexpr uint32_t ADCRST = (1U << 13);  ///< ADC reset
        constexpr uint32_t DCMIRST = (1U << 14);  ///< Digital Camera Interface reset
        constexpr uint32_t AESRST = (1U << 16);  ///< AES hardware accelerator reset
        constexpr uint32_t HASHRST = (1U << 17);  ///< Hash reset
        constexpr uint32_t RNGRST = (1U << 18);  ///< Random number generator reset
        constexpr uint32_t OSPIMRST = (1U << 20);  ///< OCTOSPI IO manager reset
        constexpr uint32_t SDMMC1RST = (1U << 22);  ///< SDMMC1 reset
    }

    /// AHB3RSTR Register bits
    namespace ahb3rstr_bits {
        constexpr uint32_t FMCRST = (1U << 0);  ///< Flexible memory controller reset
        constexpr uint32_t OSPI2RST = (1U << 9);  ///< OctOSPI2 memory interface reset
    }

    /// APB1RSTR1 Register bits
    namespace apb1rstr1_bits {
        constexpr uint32_t LPTIM1RST = (1U << 31);  ///< Low Power Timer 1 reset
        constexpr uint32_t OPAMPRST = (1U << 30);  ///< OPAMP interface reset
        constexpr uint32_t DAC1RST = (1U << 29);  ///< DAC1 interface reset
        constexpr uint32_t PWRRST = (1U << 28);  ///< Power interface reset
        constexpr uint32_t CAN1RST = (1U << 25);  ///< CAN1 reset
        constexpr uint32_t CRSRST = (1U << 24);  ///< CRS reset
        constexpr uint32_t I2C3RST = (1U << 23);  ///< I2C3 reset
        constexpr uint32_t I2C2RST = (1U << 22);  ///< I2C2 reset
        constexpr uint32_t I2C1RST = (1U << 21);  ///< I2C1 reset
        constexpr uint32_t UART5RST = (1U << 20);  ///< UART5 reset
        constexpr uint32_t UART4RST = (1U << 19);  ///< UART4 reset
        constexpr uint32_t USART3RST = (1U << 18);  ///< USART3 reset
        constexpr uint32_t USART2RST = (1U << 17);  ///< USART2 reset
        constexpr uint32_t SPI3RST = (1U << 15);  ///< SPI3 reset
        constexpr uint32_t SPI2RST = (1U << 14);  ///< SPI2 reset
        constexpr uint32_t TIM7RST = (1U << 5);  ///< TIM7 timer reset
        constexpr uint32_t TIM6RST = (1U << 4);  ///< TIM6 timer reset
        constexpr uint32_t TIM5RST = (1U << 3);  ///< TIM5 timer reset
        constexpr uint32_t TIM4RST = (1U << 2);  ///< TIM3 timer reset
        constexpr uint32_t TIM3RST = (1U << 1);  ///< TIM3 timer reset
        constexpr uint32_t TIM2RST = (1U << 0);  ///< TIM2 timer reset
    }

    /// APB1RSTR2 Register bits
    namespace apb1rstr2_bits {
        constexpr uint32_t LPUART1RST = (1U << 0);  ///< Low-power UART 1 reset
        constexpr uint32_t I2C4RST = (1U << 1);  ///< I2C4 reset
        constexpr uint32_t LPTIM2RST = (1U << 5);  ///< Low-power timer 2 reset
    }

    /// APB2RSTR Register bits
    namespace apb2rstr_bits {
        constexpr uint32_t SYSCFGRST = (1U << 0);  ///< System configuration (SYSCFG) reset
        constexpr uint32_t TIM1RST = (1U << 11);  ///< TIM1 timer reset
        constexpr uint32_t SPI1RST = (1U << 12);  ///< SPI1 reset
        constexpr uint32_t TIM8RST = (1U << 13);  ///< TIM8 timer reset
        constexpr uint32_t USART1RST = (1U << 14);  ///< USART1 reset
        constexpr uint32_t TIM15RST = (1U << 16);  ///< TIM15 timer reset
        constexpr uint32_t TIM16RST = (1U << 17);  ///< TIM16 timer reset
        constexpr uint32_t TIM17RST = (1U << 18);  ///< TIM17 timer reset
        constexpr uint32_t SAI1RST = (1U << 21);  ///< Serial audio interface 1 (SAI1) reset
        constexpr uint32_t SAI2RST = (1U << 22);  ///< Serial audio interface 2 (SAI2) reset
        constexpr uint32_t DFSDM1RST = (1U << 24);  ///< Digital filters for sigma-delata modulators (DFSDM) reset
        constexpr uint32_t LTDCRST = (1U << 26);  ///< LCD-TFT reset
        constexpr uint32_t DSIRST = (1U << 27);  ///< DSI reset
    }

    /// AHB1ENR Register bits
    namespace ahb1enr_bits {
        constexpr uint32_t DMA1EN = (1U << 0);  ///< DMA1 clock enable
        constexpr uint32_t DMA2EN = (1U << 1);  ///< DMA2 clock enable
        constexpr uint32_t DMAMUX1EN = (1U << 2);  ///< DMAMUX clock enable
        constexpr uint32_t FLASHEN = (1U << 8);  ///< Flash memory interface clock enable
        constexpr uint32_t CRCEN = (1U << 12);  ///< CRC clock enable
        constexpr uint32_t TSCEN = (1U << 16);  ///< Touch Sensing Controller clock enable
        constexpr uint32_t DMA2DEN = (1U << 17);  ///< DMA2D clock enable
        constexpr uint32_t GFXMMUEN = (1U << 18);  ///< Graphic MMU clock enable
    }

    /// AHB2ENR Register bits
    namespace ahb2enr_bits {
        constexpr uint32_t GPIOAEN = (1U << 0);  ///< IO port A clock enable
        constexpr uint32_t GPIOBEN = (1U << 1);  ///< IO port B clock enable
        constexpr uint32_t GPIOCEN = (1U << 2);  ///< IO port C clock enable
        constexpr uint32_t GPIODEN = (1U << 3);  ///< IO port D clock enable
        constexpr uint32_t GPIOEEN = (1U << 4);  ///< IO port E clock enable
        constexpr uint32_t GPIOFEN = (1U << 5);  ///< IO port F clock enable
        constexpr uint32_t GPIOGEN = (1U << 6);  ///< IO port G clock enable
        constexpr uint32_t GPIOHEN = (1U << 7);  ///< IO port H clock enable
        constexpr uint32_t GPIOIEN = (1U << 8);  ///< IO port I clock enable
        constexpr uint32_t OTGFSEN = (1U << 12);  ///< OTG full speed clock enable
        constexpr uint32_t ADCEN = (1U << 13);  ///< ADC clock enable
        constexpr uint32_t DCMIEN = (1U << 14);  ///< DCMI clock enable
        constexpr uint32_t AESEN = (1U << 16);  ///< AES accelerator clock enable
        constexpr uint32_t HASHEN = (1U << 17);  ///< HASH clock enable
        constexpr uint32_t RNGEN = (1U << 18);  ///< Random Number Generator clock enable
        constexpr uint32_t OSPIMEN = (1U << 20);  ///< OctoSPI IO manager clock enable
        constexpr uint32_t SDMMC1EN = (1U << 22);  ///< SDMMC1 clock enable
    }

    /// AHB3ENR Register bits
    namespace ahb3enr_bits {
        constexpr uint32_t FMCEN = (1U << 0);  ///< Flexible memory controller clock enable
        constexpr uint32_t OSPI2EN = (1U << 9);  ///< OSPI2EN memory interface clock enable
    }

    /// APB1ENR1 Register bits
    namespace apb1enr1_bits {
        constexpr uint32_t TIM2EN = (1U << 0);  ///< TIM2 timer clock enable
        constexpr uint32_t TIM3EN = (1U << 1);  ///< TIM3 timer clock enable
        constexpr uint32_t TIM4EN = (1U << 2);  ///< TIM4 timer clock enable
        constexpr uint32_t TIM5EN = (1U << 3);  ///< TIM5 timer clock enable
        constexpr uint32_t TIM6EN = (1U << 4);  ///< TIM6 timer clock enable
        constexpr uint32_t TIM7EN = (1U << 5);  ///< TIM7 timer clock enable
        constexpr uint32_t RTCAPBEN = (1U << 10);  ///< RTC APB clock enable
        constexpr uint32_t WWDGEN = (1U << 11);  ///< Window watchdog clock enable
        constexpr uint32_t SPI2EN = (1U << 14);  ///< SPI2 clock enable
        constexpr uint32_t SP3EN = (1U << 15);  ///< SPI3 clock enable
        constexpr uint32_t USART2EN = (1U << 17);  ///< USART2 clock enable
        constexpr uint32_t USART3EN = (1U << 18);  ///< USART3 clock enable
        constexpr uint32_t UART4EN = (1U << 19);  ///< UART4 clock enable
        constexpr uint32_t UART5EN = (1U << 20);  ///< UART5 clock enable
        constexpr uint32_t I2C1EN = (1U << 21);  ///< I2C1 clock enable
        constexpr uint32_t I2C2EN = (1U << 22);  ///< I2C2 clock enable
        constexpr uint32_t I2C3EN = (1U << 23);  ///< I2C3 clock enable
        constexpr uint32_t CRSEN = (1U << 24);  ///< Clock Recovery System clock enable
        constexpr uint32_t CAN1EN = (1U << 25);  ///< CAN1 clock enable
        constexpr uint32_t PWREN = (1U << 28);  ///< Power interface clock enable
        constexpr uint32_t DAC1EN = (1U << 29);  ///< DAC1 interface clock enable
        constexpr uint32_t OPAMPEN = (1U << 30);  ///< OPAMP interface clock enable
        constexpr uint32_t LPTIM1EN = (1U << 31);  ///< Low power timer 1 clock enable
    }

    /// APB1ENR2 Register bits
    namespace apb1enr2_bits {
        constexpr uint32_t LPUART1EN = (1U << 0);  ///< Low power UART 1 clock enable
        constexpr uint32_t I2C4EN = (1U << 1);  ///< I2C4 clock enable
        constexpr uint32_t LPTIM2EN = (1U << 5);  ///< LPTIM2EN
    }

    /// APB2ENR Register bits
    namespace apb2enr_bits {
        constexpr uint32_t SYSCFGEN = (1U << 0);  ///< SYSCFG clock enable
        constexpr uint32_t FWEN = (1U << 7);  ///< Firewall clock enable
        constexpr uint32_t TIM1EN = (1U << 11);  ///< TIM1 timer clock enable
        constexpr uint32_t SPI1EN = (1U << 12);  ///< SPI1 clock enable
        constexpr uint32_t TIM8EN = (1U << 13);  ///< TIM8 timer clock enable
        constexpr uint32_t USART1EN = (1U << 14);  ///< USART1clock enable
        constexpr uint32_t TIM15EN = (1U << 16);  ///< TIM15 timer clock enable
        constexpr uint32_t TIM16EN = (1U << 17);  ///< TIM16 timer clock enable
        constexpr uint32_t TIM17EN = (1U << 18);  ///< TIM17 timer clock enable
        constexpr uint32_t SAI1EN = (1U << 21);  ///< SAI1 clock enable
        constexpr uint32_t SAI2EN = (1U << 22);  ///< SAI2 clock enable
        constexpr uint32_t DFSDM1EN = (1U << 24);  ///< DFSDM timer clock enable
        constexpr uint32_t LTDCEN = (1U << 26);  ///< LCD-TFT clock enable
        constexpr uint32_t DSIEN = (1U << 27);  ///< DSI clock enable
    }

    /// AHB1SMENR Register bits
    namespace ahb1smenr_bits {
        constexpr uint32_t DMA1SMEN = (1U << 0);  ///< DMA1 clocks enable during Sleep and Stop modes
        constexpr uint32_t DMA2SMEN = (1U << 1);  ///< DMA2 clocks enable during Sleep and Stop modes
        constexpr uint32_t DMAMUX1SMEN = (1U << 2);  ///< DMAMUX clock enable during Sleep and Stop modes
        constexpr uint32_t FLASHSMEN = (1U << 8);  ///< Flash memory interface clocks enable during Sleep and Stop modes
        constexpr uint32_t SRAM1SMEN = (1U << 9);  ///< SRAM1 interface clocks enable during Sleep and Stop modes
        constexpr uint32_t CRCSMEN = (1U << 12);  ///< CRCSMEN
        constexpr uint32_t TSCSMEN = (1U << 16);  ///< Touch Sensing Controller clocks enable during Sleep and Stop modes
        constexpr uint32_t DMA2DSMEN = (1U << 17);  ///< DMA2D clock enable during Sleep and Stop modes
        constexpr uint32_t GFXMMUSMEN = (1U << 18);  ///< GFXMMU clock enable during Sleep and Stop modes
    }

    /// AHB2SMENR Register bits
    namespace ahb2smenr_bits {
        constexpr uint32_t GPIOASMEN = (1U << 0);  ///< IO port A clocks enable during Sleep and Stop modes
        constexpr uint32_t GPIOBSMEN = (1U << 1);  ///< IO port B clocks enable during Sleep and Stop modes
        constexpr uint32_t GPIOCSMEN = (1U << 2);  ///< IO port C clocks enable during Sleep and Stop modes
        constexpr uint32_t GPIODSMEN = (1U << 3);  ///< IO port D clocks enable during Sleep and Stop modes
        constexpr uint32_t GPIOESMEN = (1U << 4);  ///< IO port E clocks enable during Sleep and Stop modes
        constexpr uint32_t GPIOFSMEN = (1U << 5);  ///< IO port F clocks enable during Sleep and Stop modes
        constexpr uint32_t GPIOGSMEN = (1U << 6);  ///< IO port G clocks enable during Sleep and Stop modes
        constexpr uint32_t GPIOHSMEN = (1U << 7);  ///< IO port H clocks enable during Sleep and Stop modes
        constexpr uint32_t GPIOISMEN = (1U << 8);  ///< IO port I clocks enable during Sleep and Stop modes
        constexpr uint32_t SRAM2SMEN = (1U << 9);  ///< SRAM2 interface clocks enable during Sleep and Stop modes
        constexpr uint32_t SRAM3SMEN = (1U << 10);  ///< SRAM2 interface clocks enable during Sleep and Stop modes
        constexpr uint32_t OTGFSSMEN = (1U << 12);  ///< OTG full speed clocks enable during Sleep and Stop modes
        constexpr uint32_t ADCFSSMEN = (1U << 13);  ///< ADC clocks enable during Sleep and Stop modes
        constexpr uint32_t DCMISMEN = (1U << 14);  ///< DCMI clock enable during Sleep and Stop modes
        constexpr uint32_t AESSMEN = (1U << 16);  ///< AES accelerator clocks enable during Sleep and Stop modes
        constexpr uint32_t HASHSMEN = (1U << 17);  ///< HASH clock enable during Sleep and Stop modes
        constexpr uint32_t RNGSMEN = (1U << 18);  ///< Random Number Generator clocks enable during Sleep and Stop modes
        constexpr uint32_t OSPIMSMEN = (1U << 20);  ///< OctoSPI IO manager clocks enable during Sleep and Stop modes
        constexpr uint32_t SDMMC1SMEN = (1U << 22);  ///< SDMMC1 clocks enable during Sleep and Stop modes
    }

    /// AHB3SMENR Register bits
    namespace ahb3smenr_bits {
        constexpr uint32_t FMCSMEN = (1U << 0);  ///< Flexible memory controller clocks enable during Sleep and Stop modes
        constexpr uint32_t OCTOSPI2 = (1U << 9);  ///< OctoSPI2 memory interface clocks enable during Sleep and Stop modes
    }

    /// APB1SMENR1 Register bits
    namespace apb1smenr1_bits {
        constexpr uint32_t TIM2SMEN = (1U << 0);  ///< TIM2 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM3SMEN = (1U << 1);  ///< TIM3 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM4SMEN = (1U << 2);  ///< TIM4 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM5SMEN = (1U << 3);  ///< TIM5 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM6SMEN = (1U << 4);  ///< TIM6 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM7SMEN = (1U << 5);  ///< TIM7 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t RTCAPBSMEN = (1U << 10);  ///< RTC APB clock enable during Sleep and Stop modes
        constexpr uint32_t WWDGSMEN = (1U << 11);  ///< Window watchdog clocks enable during Sleep and Stop modes
        constexpr uint32_t SPI2SMEN = (1U << 14);  ///< SPI2 clocks enable during Sleep and Stop modes
        constexpr uint32_t SP3SMEN = (1U << 15);  ///< SPI3 clocks enable during Sleep and Stop modes
        constexpr uint32_t USART2SMEN = (1U << 17);  ///< USART2 clocks enable during Sleep and Stop modes
        constexpr uint32_t USART3SMEN = (1U << 18);  ///< USART3 clocks enable during Sleep and Stop modes
        constexpr uint32_t UART4SMEN = (1U << 19);  ///< UART4 clocks enable during Sleep and Stop modes
        constexpr uint32_t UART5SMEN = (1U << 20);  ///< UART5 clocks enable during Sleep and Stop modes
        constexpr uint32_t I2C1SMEN = (1U << 21);  ///< I2C1 clocks enable during Sleep and Stop modes
        constexpr uint32_t I2C2SMEN = (1U << 22);  ///< I2C2 clocks enable during Sleep and Stop modes
        constexpr uint32_t I2C3SMEN = (1U << 23);  ///< I2C3 clocks enable during Sleep and Stop modes
        constexpr uint32_t CRSSMEN = (1U << 24);  ///< CRS clock enable during Sleep and Stop modes
        constexpr uint32_t CAN1SMEN = (1U << 25);  ///< CAN1 clocks enable during Sleep and Stop modes
        constexpr uint32_t PWRSMEN = (1U << 28);  ///< Power interface clocks enable during Sleep and Stop modes
        constexpr uint32_t DAC1SMEN = (1U << 29);  ///< DAC1 interface clocks enable during Sleep and Stop modes
        constexpr uint32_t OPAMPSMEN = (1U << 30);  ///< OPAMP interface clocks enable during Sleep and Stop modes
        constexpr uint32_t LPTIM1SMEN = (1U << 31);  ///< Low power timer 1 clocks enable during Sleep and Stop modes
    }

    /// APB1SMENR2 Register bits
    namespace apb1smenr2_bits {
        constexpr uint32_t LPUART1SMEN = (1U << 0);  ///< Low power UART 1 clocks enable during Sleep and Stop modes
        constexpr uint32_t I2C4SMEN = (1U << 1);  ///< I2C4 clocks enable during Sleep and Stop modes
        constexpr uint32_t LPTIM2SMEN = (1U << 5);  ///< LPTIM2SMEN
    }

    /// APB2SMENR Register bits
    namespace apb2smenr_bits {
        constexpr uint32_t SYSCFGSMEN = (1U << 0);  ///< SYSCFG clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM1SMEN = (1U << 11);  ///< TIM1 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t SPI1SMEN = (1U << 12);  ///< SPI1 clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM8SMEN = (1U << 13);  ///< TIM8 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t USART1SMEN = (1U << 14);  ///< USART1clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM15SMEN = (1U << 16);  ///< TIM15 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM16SMEN = (1U << 17);  ///< TIM16 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t TIM17SMEN = (1U << 18);  ///< TIM17 timer clocks enable during Sleep and Stop modes
        constexpr uint32_t SAI1SMEN = (1U << 21);  ///< SAI1 clocks enable during Sleep and Stop modes
        constexpr uint32_t SAI2SMEN = (1U << 22);  ///< SAI2 clocks enable during Sleep and Stop modes
        constexpr uint32_t DFSDM1SMEN = (1U << 24);  ///< DFSDM timer clocks enable during Sleep and Stop modes
        constexpr uint32_t LTDCSMEN = (1U << 26);  ///< LCD-TFT timer clocks enable during Sleep and Stop modes
        constexpr uint32_t DSISMEN = (1U << 27);  ///< DSI clocks enable during Sleep and Stop modes
    }

    /// CCIPR Register bits
    namespace ccipr_bits {
        constexpr uint32_t ADCSEL = (2 << 28);  ///< ADCs clock source selection
        constexpr uint32_t CLK48SEL = (2 << 26);  ///< 48 MHz clock source selection
        constexpr uint32_t SAI2SEL = (2 << 24);  ///< SAI2 clock source selection
        constexpr uint32_t SAI1SEL = (2 << 22);  ///< SAI1 clock source selection
        constexpr uint32_t LPTIM2SEL = (2 << 20);  ///< Low power timer 2 clock source selection
        constexpr uint32_t LPTIM1SEL = (2 << 18);  ///< Low power timer 1 clock source selection
        constexpr uint32_t I2C3SEL = (2 << 16);  ///< I2C3 clock source selection
        constexpr uint32_t I2C2SEL = (2 << 14);  ///< I2C2 clock source selection
        constexpr uint32_t I2C1SEL = (2 << 12);  ///< I2C1 clock source selection
        constexpr uint32_t LPUART1SEL = (2 << 10);  ///< LPUART1 clock source selection
        constexpr uint32_t UART5SEL = (2 << 8);  ///< UART5 clock source selection
        constexpr uint32_t UART4SEL = (2 << 6);  ///< UART4 clock source selection
        constexpr uint32_t USART3SEL = (2 << 4);  ///< USART3 clock source selection
        constexpr uint32_t USART2SEL = (2 << 2);  ///< USART2 clock source selection
        constexpr uint32_t USART1SEL = (2 << 0);  ///< USART1 clock source selection
    }

    /// BDCR Register bits
    namespace bdcr_bits {
        constexpr uint32_t LSCOSEL = (1U << 25);  ///< Low speed clock output selection
        constexpr uint32_t LSCOEN = (1U << 24);  ///< Low speed clock output enable
        constexpr uint32_t BDRST = (1U << 16);  ///< Backup domain software reset
        constexpr uint32_t RTCEN = (1U << 15);  ///< RTC clock enable
        constexpr uint32_t RTCSEL = (2 << 8);  ///< RTC clock source selection
        constexpr uint32_t LSECSSD = (1U << 6);  ///< LSECSSD
        constexpr uint32_t LSECSSON = (1U << 5);  ///< LSECSSON
        constexpr uint32_t LSEDRV = (2 << 3);  ///< SE oscillator drive capability
        constexpr uint32_t LSEBYP = (1U << 2);  ///< LSE oscillator bypass
        constexpr uint32_t LSERDY = (1U << 1);  ///< LSE oscillator ready
        constexpr uint32_t LSEON = (1U << 0);  ///< LSE oscillator enable
    }

    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t LPWRSTF = (1U << 31);  ///< Low-power reset flag
        constexpr uint32_t WWDGRSTF = (1U << 30);  ///< Window watchdog reset flag
        constexpr uint32_t IWDGRSTF = (1U << 29);  ///< Independent window watchdog reset flag
        constexpr uint32_t SFTRSTF = (1U << 28);  ///< Software reset flag
        constexpr uint32_t BORRSTF = (1U << 27);  ///< BOR flag
        constexpr uint32_t PINRSTF = (1U << 26);  ///< Pin reset flag
        constexpr uint32_t OBLRSTF = (1U << 25);  ///< Option byte loader reset flag
        constexpr uint32_t FWRSTF = (1U << 24);  ///< Firewall reset flag
        constexpr uint32_t RMVF = (1U << 23);  ///< Remove reset flag
        constexpr uint32_t MSISRANGE = (4 << 8);  ///< SI range after Standby mode
        constexpr uint32_t LSIRDY = (1U << 1);  ///< LSI oscillator ready
        constexpr uint32_t LSION = (1U << 0);  ///< LSI oscillator enable
    }

    /// CRRCR Register bits
    namespace crrcr_bits {
        constexpr uint32_t HSI48ON = (1U << 0);  ///< HSI48 clock enable
        constexpr uint32_t HSI48RDY = (1U << 1);  ///< HSI48 clock ready flag
        constexpr uint32_t HSI48CAL = (9 << 7);  ///< HSI48 clock calibration
    }

    /// CCIPR2 Register bits
    namespace ccipr2_bits {
        constexpr uint32_t I2C4SEL = (2 << 0);  ///< I2C4 clock source selection
        constexpr uint32_t DFSDMSEL = (1U << 2);  ///< Digital filter for sigma delta modulator kernel clock source selection
        constexpr uint32_t ADFSDMSEL = (2 << 3);  ///< Digital filter for sigma delta modulator audio clock source selection
        constexpr uint32_t SAI1SEL = (3 << 5);  ///< SAI1 clock source selection
        constexpr uint32_t SAI2SEL = (3 << 8);  ///< SAI2 clock source selection
        constexpr uint32_t DSISEL = (1U << 12);  ///< clock selection
        constexpr uint32_t SDMMCSEL = (1U << 14);  ///< SDMMC clock selection
        constexpr uint32_t PLLSAI2DIVR = (2 << 16);  ///< division factor for LTDC clock
        constexpr uint32_t OSPISEL = (2 << 20);  ///< Octospi clock source selection
    }

}

// ============================================================================
// PWR Peripheral
// ============================================================================

namespace pwr {
    /// Base addresses
    constexpr uint32_t PWR_BASE = 0x40007000;
    constexpr uint32_t OTG_FS_PWRCLK_BASE = 0x50000E00;

    /// PWR Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - Power control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - Power control register 2
        volatile uint32_t CR3;  ///< Offset: 0x08 - Power control register 3
        volatile uint32_t CR4;  ///< Offset: 0x0C - Power control register 4
        volatile uint32_t SR1;  ///< Offset: 0x10 - Power status register 1
        volatile uint32_t SR2;  ///< Offset: 0x14 - Power status register 2
        volatile uint32_t SCR;  ///< Offset: 0x18 - Power status clear register
        volatile uint32_t PUCRA;  ///< Offset: 0x20 - Power Port A pull-up control register
        volatile uint32_t PDCRA;  ///< Offset: 0x24 - Power Port A pull-down control register
        volatile uint32_t PUCRB;  ///< Offset: 0x28 - Power Port B pull-up control register
        volatile uint32_t PDCRB;  ///< Offset: 0x2C - Power Port B pull-down control register
        volatile uint32_t PUCRC;  ///< Offset: 0x30 - Power Port C pull-up control register
        volatile uint32_t PDCRC;  ///< Offset: 0x34 - Power Port C pull-down control register
        volatile uint32_t PUCRD;  ///< Offset: 0x38 - Power Port D pull-up control register
        volatile uint32_t PDCRD;  ///< Offset: 0x3C - Power Port D pull-down control register
        volatile uint32_t PUCRE;  ///< Offset: 0x40 - Power Port E pull-up control register
        volatile uint32_t PDCRE;  ///< Offset: 0x44 - Power Port E pull-down control register
        volatile uint32_t PUCRF;  ///< Offset: 0x48 - Power Port F pull-up control register
        volatile uint32_t PDCRF;  ///< Offset: 0x4C - Power Port F pull-down control register
        volatile uint32_t PUCRG;  ///< Offset: 0x50 - Power Port G pull-up control register
        volatile uint32_t PDCRG;  ///< Offset: 0x54 - Power Port G pull-down control register
        volatile uint32_t PUCRH;  ///< Offset: 0x58 - Power Port H pull-up control register
        volatile uint32_t PDCRH;  ///< Offset: 0x5C - Power Port H pull-down control register
    };

    /// Peripheral instances
    inline Registers* PWR = reinterpret_cast<Registers*>(PWR_BASE);
    inline Registers* OTG_FS_PWRCLK = reinterpret_cast<Registers*>(OTG_FS_PWRCLK_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t LPR = (1U << 14);  ///< Low-power run
        constexpr uint32_t VOS = (2 << 9);  ///< Voltage scaling range selection
        constexpr uint32_t DBP = (1U << 8);  ///< Disable backup domain write protection
        constexpr uint32_t LPMS = (3 << 0);  ///< Low-power mode selection
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t USV = (1U << 10);  ///< VDDUSB USB supply valid
        constexpr uint32_t IOSV = (1U << 9);  ///< VDDIO2 Independent I/Os supply valid
        constexpr uint32_t PVME4 = (1U << 7);  ///< Peripheral voltage monitoring 4 enable: VDDA vs. 2.2V
        constexpr uint32_t PVME3 = (1U << 6);  ///< Peripheral voltage monitoring 3 enable: VDDA vs. 1.62V
        constexpr uint32_t PVME2 = (1U << 5);  ///< Peripheral voltage monitoring 2 enable: VDDIO2 vs. 0.9V
        constexpr uint32_t PVME1 = (1U << 4);  ///< Peripheral voltage monitoring 1 enable: VDDUSB vs. 1.2V
        constexpr uint32_t PLS = (3 << 1);  ///< Power voltage detector level selection
        constexpr uint32_t PVDE = (1U << 0);  ///< Power voltage detector enable
    }

    /// CR3 Register bits
    namespace cr3_bits {
        constexpr uint32_t EWF = (1U << 15);  ///< Enable internal wakeup line
        constexpr uint32_t APC = (1U << 10);  ///< Apply pull-up and pull-down configuration
        constexpr uint32_t RRS = (1U << 8);  ///< SRAM2 retention in Standby mode
        constexpr uint32_t EWUP5 = (1U << 4);  ///< Enable Wakeup pin WKUP5
        constexpr uint32_t EWUP4 = (1U << 3);  ///< Enable Wakeup pin WKUP4
        constexpr uint32_t EWUP3 = (1U << 2);  ///< Enable Wakeup pin WKUP3
        constexpr uint32_t EWUP2 = (1U << 1);  ///< Enable Wakeup pin WKUP2
        constexpr uint32_t EWUP1 = (1U << 0);  ///< Enable Wakeup pin WKUP1
    }

    /// CR4 Register bits
    namespace cr4_bits {
        constexpr uint32_t VBRS = (1U << 9);  ///< VBAT battery charging resistor selection
        constexpr uint32_t VBE = (1U << 8);  ///< VBAT battery charging enable
        constexpr uint32_t WP5 = (1U << 4);  ///< Wakeup pin WKUP5 polarity
        constexpr uint32_t WP4 = (1U << 3);  ///< Wakeup pin WKUP4 polarity
        constexpr uint32_t WP3 = (1U << 2);  ///< Wakeup pin WKUP3 polarity
        constexpr uint32_t WP2 = (1U << 1);  ///< Wakeup pin WKUP2 polarity
        constexpr uint32_t WP1 = (1U << 0);  ///< Wakeup pin WKUP1 polarity
    }

    /// SR1 Register bits
    namespace sr1_bits {
        constexpr uint32_t WUFI = (1U << 15);  ///< Wakeup flag internal
        constexpr uint32_t CSBF = (1U << 8);  ///< Standby flag
        constexpr uint32_t CWUF5 = (1U << 4);  ///< Wakeup flag 5
        constexpr uint32_t CWUF4 = (1U << 3);  ///< Wakeup flag 4
        constexpr uint32_t CWUF3 = (1U << 2);  ///< Wakeup flag 3
        constexpr uint32_t CWUF2 = (1U << 1);  ///< Wakeup flag 2
        constexpr uint32_t CWUF1 = (1U << 0);  ///< Wakeup flag 1
    }

    /// SR2 Register bits
    namespace sr2_bits {
        constexpr uint32_t PVMO4 = (1U << 15);  ///< Peripheral voltage monitoring output: VDDA vs. 2.2 V
        constexpr uint32_t PVMO3 = (1U << 14);  ///< Peripheral voltage monitoring output: VDDA vs. 1.62 V
        constexpr uint32_t PVMO2 = (1U << 13);  ///< Peripheral voltage monitoring output: VDDIO2 vs. 0.9 V
        constexpr uint32_t PVMO1 = (1U << 12);  ///< Peripheral voltage monitoring output: VDDUSB vs. 1.2 V
        constexpr uint32_t PVDO = (1U << 11);  ///< Power voltage detector output
        constexpr uint32_t VOSF = (1U << 10);  ///< Voltage scaling flag
        constexpr uint32_t REGLPF = (1U << 9);  ///< Low-power regulator flag
        constexpr uint32_t REGLPS = (1U << 8);  ///< Low-power regulator started
    }

    /// SCR Register bits
    namespace scr_bits {
        constexpr uint32_t SBF = (1U << 8);  ///< Clear standby flag
        constexpr uint32_t WUF5 = (1U << 4);  ///< Clear wakeup flag 5
        constexpr uint32_t WUF4 = (1U << 3);  ///< Clear wakeup flag 4
        constexpr uint32_t WUF3 = (1U << 2);  ///< Clear wakeup flag 3
        constexpr uint32_t WUF2 = (1U << 1);  ///< Clear wakeup flag 2
        constexpr uint32_t WUF1 = (1U << 0);  ///< Clear wakeup flag 1
    }

    /// PUCRA Register bits
    namespace pucra_bits {
        constexpr uint32_t PU15 = (1U << 15);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU14 = (1U << 14);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU13 = (1U << 13);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU12 = (1U << 12);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU11 = (1U << 11);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU10 = (1U << 10);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU9 = (1U << 9);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU8 = (1U << 8);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU7 = (1U << 7);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU6 = (1U << 6);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU5 = (1U << 5);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU4 = (1U << 4);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU3 = (1U << 3);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU2 = (1U << 2);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU1 = (1U << 1);  ///< Port A pull-up bit y (y=0..15)
        constexpr uint32_t PU0 = (1U << 0);  ///< Port A pull-up bit y (y=0..15)
    }

    /// PDCRA Register bits
    namespace pdcra_bits {
        constexpr uint32_t PD15 = (1U << 15);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD14 = (1U << 14);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD13 = (1U << 13);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD12 = (1U << 12);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD11 = (1U << 11);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD10 = (1U << 10);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD9 = (1U << 9);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD8 = (1U << 8);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD7 = (1U << 7);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD6 = (1U << 6);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD5 = (1U << 5);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD4 = (1U << 4);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD3 = (1U << 3);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD2 = (1U << 2);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD1 = (1U << 1);  ///< Port A pull-down bit y (y=0..15)
        constexpr uint32_t PD0 = (1U << 0);  ///< Port A pull-down bit y (y=0..15)
    }

    /// PUCRB Register bits
    namespace pucrb_bits {
        constexpr uint32_t PU15 = (1U << 15);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU14 = (1U << 14);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU13 = (1U << 13);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU12 = (1U << 12);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU11 = (1U << 11);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU10 = (1U << 10);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU9 = (1U << 9);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU8 = (1U << 8);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU7 = (1U << 7);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU6 = (1U << 6);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU5 = (1U << 5);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU4 = (1U << 4);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU3 = (1U << 3);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU2 = (1U << 2);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU1 = (1U << 1);  ///< Port B pull-up bit y (y=0..15)
        constexpr uint32_t PU0 = (1U << 0);  ///< Port B pull-up bit y (y=0..15)
    }

    /// PDCRB Register bits
    namespace pdcrb_bits {
        constexpr uint32_t PD15 = (1U << 15);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD14 = (1U << 14);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD13 = (1U << 13);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD12 = (1U << 12);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD11 = (1U << 11);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD10 = (1U << 10);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD9 = (1U << 9);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD8 = (1U << 8);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD7 = (1U << 7);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD6 = (1U << 6);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD5 = (1U << 5);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD4 = (1U << 4);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD3 = (1U << 3);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD2 = (1U << 2);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD1 = (1U << 1);  ///< Port B pull-down bit y (y=0..15)
        constexpr uint32_t PD0 = (1U << 0);  ///< Port B pull-down bit y (y=0..15)
    }

    /// PUCRC Register bits
    namespace pucrc_bits {
        constexpr uint32_t PU15 = (1U << 15);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU14 = (1U << 14);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU13 = (1U << 13);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU12 = (1U << 12);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU11 = (1U << 11);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU10 = (1U << 10);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU9 = (1U << 9);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU8 = (1U << 8);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU7 = (1U << 7);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU6 = (1U << 6);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU5 = (1U << 5);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU4 = (1U << 4);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU3 = (1U << 3);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU2 = (1U << 2);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU1 = (1U << 1);  ///< Port C pull-up bit y (y=0..15)
        constexpr uint32_t PU0 = (1U << 0);  ///< Port C pull-up bit y (y=0..15)
    }

    /// PDCRC Register bits
    namespace pdcrc_bits {
        constexpr uint32_t PD15 = (1U << 15);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD14 = (1U << 14);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD13 = (1U << 13);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD12 = (1U << 12);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD11 = (1U << 11);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD10 = (1U << 10);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD9 = (1U << 9);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD8 = (1U << 8);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD7 = (1U << 7);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD6 = (1U << 6);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD5 = (1U << 5);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD4 = (1U << 4);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD3 = (1U << 3);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD2 = (1U << 2);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD1 = (1U << 1);  ///< Port C pull-down bit y (y=0..15)
        constexpr uint32_t PD0 = (1U << 0);  ///< Port C pull-down bit y (y=0..15)
    }

    /// PUCRD Register bits
    namespace pucrd_bits {
        constexpr uint32_t PU15 = (1U << 15);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU14 = (1U << 14);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU13 = (1U << 13);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU12 = (1U << 12);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU11 = (1U << 11);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU10 = (1U << 10);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU9 = (1U << 9);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU8 = (1U << 8);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU7 = (1U << 7);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU6 = (1U << 6);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU5 = (1U << 5);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU4 = (1U << 4);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU3 = (1U << 3);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU2 = (1U << 2);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU1 = (1U << 1);  ///< Port D pull-up bit y (y=0..15)
        constexpr uint32_t PU0 = (1U << 0);  ///< Port D pull-up bit y (y=0..15)
    }

    /// PDCRD Register bits
    namespace pdcrd_bits {
        constexpr uint32_t PD15 = (1U << 15);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD14 = (1U << 14);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD13 = (1U << 13);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD12 = (1U << 12);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD11 = (1U << 11);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD10 = (1U << 10);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD9 = (1U << 9);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD8 = (1U << 8);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD7 = (1U << 7);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD6 = (1U << 6);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD5 = (1U << 5);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD4 = (1U << 4);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD3 = (1U << 3);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD2 = (1U << 2);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD1 = (1U << 1);  ///< Port D pull-down bit y (y=0..15)
        constexpr uint32_t PD0 = (1U << 0);  ///< Port D pull-down bit y (y=0..15)
    }

    /// PUCRE Register bits
    namespace pucre_bits {
        constexpr uint32_t PU15 = (1U << 15);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU14 = (1U << 14);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU13 = (1U << 13);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU12 = (1U << 12);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU11 = (1U << 11);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU10 = (1U << 10);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU9 = (1U << 9);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU8 = (1U << 8);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU7 = (1U << 7);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU6 = (1U << 6);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU5 = (1U << 5);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU4 = (1U << 4);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU3 = (1U << 3);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU2 = (1U << 2);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU1 = (1U << 1);  ///< Port E pull-up bit y (y=0..15)
        constexpr uint32_t PU0 = (1U << 0);  ///< Port E pull-up bit y (y=0..15)
    }

    /// PDCRE Register bits
    namespace pdcre_bits {
        constexpr uint32_t PD15 = (1U << 15);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD14 = (1U << 14);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD13 = (1U << 13);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD12 = (1U << 12);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD11 = (1U << 11);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD10 = (1U << 10);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD9 = (1U << 9);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD8 = (1U << 8);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD7 = (1U << 7);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD6 = (1U << 6);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD5 = (1U << 5);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD4 = (1U << 4);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD3 = (1U << 3);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD2 = (1U << 2);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD1 = (1U << 1);  ///< Port E pull-down bit y (y=0..15)
        constexpr uint32_t PD0 = (1U << 0);  ///< Port E pull-down bit y (y=0..15)
    }

    /// PUCRF Register bits
    namespace pucrf_bits {
        constexpr uint32_t PU15 = (1U << 15);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU14 = (1U << 14);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU13 = (1U << 13);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU12 = (1U << 12);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU11 = (1U << 11);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU10 = (1U << 10);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU9 = (1U << 9);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU8 = (1U << 8);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU7 = (1U << 7);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU6 = (1U << 6);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU5 = (1U << 5);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU4 = (1U << 4);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU3 = (1U << 3);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU2 = (1U << 2);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU1 = (1U << 1);  ///< Port F pull-up bit y (y=0..15)
        constexpr uint32_t PU0 = (1U << 0);  ///< Port F pull-up bit y (y=0..15)
    }

    /// PDCRF Register bits
    namespace pdcrf_bits {
        constexpr uint32_t PD15 = (1U << 15);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD14 = (1U << 14);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD13 = (1U << 13);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD12 = (1U << 12);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD11 = (1U << 11);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD10 = (1U << 10);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD9 = (1U << 9);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD8 = (1U << 8);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD7 = (1U << 7);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD6 = (1U << 6);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD5 = (1U << 5);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD4 = (1U << 4);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD3 = (1U << 3);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD2 = (1U << 2);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD1 = (1U << 1);  ///< Port F pull-down bit y (y=0..15)
        constexpr uint32_t PD0 = (1U << 0);  ///< Port F pull-down bit y (y=0..15)
    }

    /// PUCRG Register bits
    namespace pucrg_bits {
        constexpr uint32_t PU15 = (1U << 15);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU14 = (1U << 14);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU13 = (1U << 13);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU12 = (1U << 12);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU11 = (1U << 11);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU10 = (1U << 10);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU9 = (1U << 9);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU8 = (1U << 8);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU7 = (1U << 7);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU6 = (1U << 6);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU5 = (1U << 5);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU4 = (1U << 4);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU3 = (1U << 3);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU2 = (1U << 2);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU1 = (1U << 1);  ///< Port G pull-up bit y (y=0..15)
        constexpr uint32_t PU0 = (1U << 0);  ///< Port G pull-up bit y (y=0..15)
    }

    /// PDCRG Register bits
    namespace pdcrg_bits {
        constexpr uint32_t PD15 = (1U << 15);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD14 = (1U << 14);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD13 = (1U << 13);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD12 = (1U << 12);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD11 = (1U << 11);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD10 = (1U << 10);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD9 = (1U << 9);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD8 = (1U << 8);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD7 = (1U << 7);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD6 = (1U << 6);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD5 = (1U << 5);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD4 = (1U << 4);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD3 = (1U << 3);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD2 = (1U << 2);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD1 = (1U << 1);  ///< Port G pull-down bit y (y=0..15)
        constexpr uint32_t PD0 = (1U << 0);  ///< Port G pull-down bit y (y=0..15)
    }

    /// PUCRH Register bits
    namespace pucrh_bits {
        constexpr uint32_t PU1 = (1U << 1);  ///< Port H pull-up bit y (y=0..1)
        constexpr uint32_t PU0 = (1U << 0);  ///< Port H pull-up bit y (y=0..1)
    }

    /// PDCRH Register bits
    namespace pdcrh_bits {
        constexpr uint32_t PD1 = (1U << 1);  ///< Port H pull-down bit y (y=0..1)
        constexpr uint32_t PD0 = (1U << 0);  ///< Port H pull-down bit y (y=0..1)
    }

}

// ============================================================================
// SYSCFG Peripheral
// ============================================================================

namespace syscfg {
    /// Base addresses
    constexpr uint32_t SYSCFG_BASE = 0x40010000;

    /// SYSCFG Register structure
    struct Registers {
        volatile uint32_t MEMRMP;  ///< Offset: 0x00 - memory remap register
        volatile uint32_t CFGR1;  ///< Offset: 0x04 - configuration register 1
        volatile uint32_t EXTICR1;  ///< Offset: 0x08 - external interrupt configuration register 1
        volatile uint32_t EXTICR2;  ///< Offset: 0x0C - external interrupt configuration register 2
        volatile uint32_t EXTICR3;  ///< Offset: 0x10 - external interrupt configuration register 3
        volatile uint32_t EXTICR4;  ///< Offset: 0x14 - external interrupt configuration register 4
        volatile uint32_t SCSR;  ///< Offset: 0x18 - SCSR
        volatile uint32_t CFGR2;  ///< Offset: 0x1C - CFGR2
        volatile uint32_t SWPR;  ///< Offset: 0x20 - SWPR
        volatile uint32_t SKR;  ///< Offset: 0x24 - SKR
    };

    /// Peripheral instances
    inline Registers* SYSCFG = reinterpret_cast<Registers*>(SYSCFG_BASE);

    // Bit definitions
    /// MEMRMP Register bits
    namespace memrmp_bits {
        constexpr uint32_t FB_MODE = (1U << 8);  ///< Flash Bank mode selection
        constexpr uint32_t QFS = (1U << 3);  ///< QUADSPI memory mapping swap
        constexpr uint32_t MEM_MODE = (3 << 0);  ///< Memory mapping selection
    }

    /// CFGR1 Register bits
    namespace cfgr1_bits {
        constexpr uint32_t FPU_IE = (6 << 26);  ///< Floating Point Unit interrupts enable bits
        constexpr uint32_t I2C3_FMP = (1U << 22);  ///< I2C3 Fast-mode Plus driving capability activation
        constexpr uint32_t I2C2_FMP = (1U << 21);  ///< I2C2 Fast-mode Plus driving capability activation
        constexpr uint32_t I2C1_FMP = (1U << 20);  ///< I2C1 Fast-mode Plus driving capability activation
        constexpr uint32_t I2C_PB9_FMP = (1U << 19);  ///< Fast-mode Plus (Fm+) driving capability activation on PB9
        constexpr uint32_t I2C_PB8_FMP = (1U << 18);  ///< Fast-mode Plus (Fm+) driving capability activation on PB8
        constexpr uint32_t I2C_PB7_FMP = (1U << 17);  ///< Fast-mode Plus (Fm+) driving capability activation on PB7
        constexpr uint32_t I2C_PB6_FMP = (1U << 16);  ///< Fast-mode Plus (Fm+) driving capability activation on PB6
        constexpr uint32_t BOOSTEN = (1U << 8);  ///< I/O analog switch voltage booster enable
        constexpr uint32_t FWDIS = (1U << 0);  ///< Firewall disable
    }

    /// EXTICR1 Register bits
    namespace exticr1_bits {
        constexpr uint32_t EXTI3 = (3 << 12);  ///< EXTI 3 configuration bits
        constexpr uint32_t EXTI2 = (3 << 8);  ///< EXTI 2 configuration bits
        constexpr uint32_t EXTI1 = (3 << 4);  ///< EXTI 1 configuration bits
        constexpr uint32_t EXTI0 = (3 << 0);  ///< EXTI 0 configuration bits
    }

    /// EXTICR2 Register bits
    namespace exticr2_bits {
        constexpr uint32_t EXTI7 = (3 << 12);  ///< EXTI 7 configuration bits
        constexpr uint32_t EXTI6 = (3 << 8);  ///< EXTI 6 configuration bits
        constexpr uint32_t EXTI5 = (3 << 4);  ///< EXTI 5 configuration bits
        constexpr uint32_t EXTI4 = (3 << 0);  ///< EXTI 4 configuration bits
    }

    /// EXTICR3 Register bits
    namespace exticr3_bits {
        constexpr uint32_t EXTI11 = (3 << 12);  ///< EXTI 11 configuration bits
        constexpr uint32_t EXTI10 = (3 << 8);  ///< EXTI 10 configuration bits
        constexpr uint32_t EXTI9 = (3 << 4);  ///< EXTI 9 configuration bits
        constexpr uint32_t EXTI8 = (3 << 0);  ///< EXTI 8 configuration bits
    }

    /// EXTICR4 Register bits
    namespace exticr4_bits {
        constexpr uint32_t EXTI15 = (3 << 12);  ///< EXTI15 configuration bits
        constexpr uint32_t EXTI14 = (3 << 8);  ///< EXTI14 configuration bits
        constexpr uint32_t EXTI13 = (3 << 4);  ///< EXTI13 configuration bits
        constexpr uint32_t EXTI12 = (3 << 0);  ///< EXTI12 configuration bits
    }

    /// SCSR Register bits
    namespace scsr_bits {
        constexpr uint32_t SRAM2BSY = (1U << 1);  ///< SRAM2 busy by erase operation
        constexpr uint32_t SRAM2ER = (1U << 0);  ///< SRAM2 Erase
    }

    /// CFGR2 Register bits
    namespace cfgr2_bits {
        constexpr uint32_t SPF = (1U << 8);  ///< SRAM2 parity error flag
        constexpr uint32_t ECCL = (1U << 3);  ///< ECC Lock
        constexpr uint32_t PVDL = (1U << 2);  ///< PVD lock enable bit
        constexpr uint32_t SPL = (1U << 1);  ///< SRAM2 parity lock bit
        constexpr uint32_t CLL = (1U << 0);  ///< Cortex-M4 LOCKUP (Hardfault) output enable bit
    }

    /// SWPR Register bits
    namespace swpr_bits {
        constexpr uint32_t P31WP = (1U << 31);  ///< SRAM2 page 31 write protection
        constexpr uint32_t P30WP = (1U << 30);  ///< P30WP
        constexpr uint32_t P29WP = (1U << 29);  ///< P29WP
        constexpr uint32_t P28WP = (1U << 28);  ///< P28WP
        constexpr uint32_t P27WP = (1U << 27);  ///< P27WP
        constexpr uint32_t P26WP = (1U << 26);  ///< P26WP
        constexpr uint32_t P25WP = (1U << 25);  ///< P25WP
        constexpr uint32_t P24WP = (1U << 24);  ///< P24WP
        constexpr uint32_t P23WP = (1U << 23);  ///< P23WP
        constexpr uint32_t P22WP = (1U << 22);  ///< P22WP
        constexpr uint32_t P21WP = (1U << 21);  ///< P21WP
        constexpr uint32_t P20WP = (1U << 20);  ///< P20WP
        constexpr uint32_t P19WP = (1U << 19);  ///< P19WP
        constexpr uint32_t P18WP = (1U << 18);  ///< P18WP
        constexpr uint32_t P17WP = (1U << 17);  ///< P17WP
        constexpr uint32_t P16WP = (1U << 16);  ///< P16WP
        constexpr uint32_t P15WP = (1U << 15);  ///< P15WP
        constexpr uint32_t P14WP = (1U << 14);  ///< P14WP
        constexpr uint32_t P13WP = (1U << 13);  ///< P13WP
        constexpr uint32_t P12WP = (1U << 12);  ///< P12WP
        constexpr uint32_t P11WP = (1U << 11);  ///< P11WP
        constexpr uint32_t P10WP = (1U << 10);  ///< P10WP
        constexpr uint32_t P9WP = (1U << 9);  ///< P9WP
        constexpr uint32_t P8WP = (1U << 8);  ///< P8WP
        constexpr uint32_t P7WP = (1U << 7);  ///< P7WP
        constexpr uint32_t P6WP = (1U << 6);  ///< P6WP
        constexpr uint32_t P5WP = (1U << 5);  ///< P5WP
        constexpr uint32_t P4WP = (1U << 4);  ///< P4WP
        constexpr uint32_t P3WP = (1U << 3);  ///< P3WP
        constexpr uint32_t P2WP = (1U << 2);  ///< P2WP
        constexpr uint32_t P1WP = (1U << 1);  ///< P1WP
        constexpr uint32_t P0WP = (1U << 0);  ///< P0WP
    }

    /// SKR Register bits
    namespace skr_bits {
        constexpr uint32_t KEY = (8 << 0);  ///< SRAM2 write protection key for software erase
    }

}

// ============================================================================
// DFSDM1 Peripheral
// ============================================================================

namespace dfsdm1 {
    /// Base addresses
    constexpr uint32_t DFSDM1_BASE = 0x40016000;

    /// DFSDM1 Register structure
    struct Registers {
        volatile uint32_t CHCFG0R1;  ///< Offset: 0x00 - channel configuration y register
        volatile uint32_t CHCFG0R2;  ///< Offset: 0x04 - channel configuration y register
        volatile uint32_t AWSCD0R;  ///< Offset: 0x08 - analog watchdog and short-circuit detector register
        volatile uint32_t CHWDAT0R;  ///< Offset: 0x0C - channel watchdog filter data register
        volatile uint32_t CHDATIN0R;  ///< Offset: 0x10 - channel data input register
        volatile uint32_t CHCFG1R1;  ///< Offset: 0x20 - CHCFG1R1
        volatile uint32_t CHCFG1R2;  ///< Offset: 0x24 - CHCFG1R2
        volatile uint32_t AWSCD1R;  ///< Offset: 0x28 - AWSCD1R
        volatile uint32_t CHWDAT1R;  ///< Offset: 0x2C - CHWDAT1R
        volatile uint32_t CHDATIN1R;  ///< Offset: 0x30 - CHDATIN1R
        volatile uint32_t CHCFG2R1;  ///< Offset: 0x40 - CHCFG2R1
        volatile uint32_t CHCFG2R2;  ///< Offset: 0x44 - CHCFG2R2
        volatile uint32_t AWSCD2R;  ///< Offset: 0x48 - AWSCD2R
        volatile uint32_t CHWDAT2R;  ///< Offset: 0x4C - CHWDAT2R
        volatile uint32_t CHDATIN2R;  ///< Offset: 0x50 - CHDATIN2R
        volatile uint32_t CHCFG3R1;  ///< Offset: 0x60 - CHCFG3R1
        volatile uint32_t CHCFG3R2;  ///< Offset: 0x64 - CHCFG3R2
        volatile uint32_t AWSCD3R;  ///< Offset: 0x68 - AWSCD3R
        volatile uint32_t CHWDAT3R;  ///< Offset: 0x6C - CHWDAT3R
        volatile uint32_t CHDATIN3R;  ///< Offset: 0x70 - CHDATIN3R
        volatile uint32_t CHCFG4R1;  ///< Offset: 0x80 - CHCFG4R1
        volatile uint32_t CHCFG4R2;  ///< Offset: 0x84 - CHCFG4R2
        volatile uint32_t AWSCD4R;  ///< Offset: 0x88 - AWSCD4R
        volatile uint32_t CHWDAT4R;  ///< Offset: 0x8C - CHWDAT4R
        volatile uint32_t CHDATIN4R;  ///< Offset: 0x90 - CHDATIN4R
        volatile uint32_t CHCFG5R1;  ///< Offset: 0xA0 - CHCFG5R1
        volatile uint32_t CHCFG5R2;  ///< Offset: 0xA4 - CHCFG5R2
        volatile uint32_t AWSCD5R;  ///< Offset: 0xA8 - AWSCD5R
        volatile uint32_t CHWDAT5R;  ///< Offset: 0xAC - CHWDAT5R
        volatile uint32_t CHDATIN5R;  ///< Offset: 0xB0 - CHDATIN5R
        volatile uint32_t CHCFG6R1;  ///< Offset: 0xC0 - CHCFG6R1
        volatile uint32_t CHCFG6R2;  ///< Offset: 0xC4 - CHCFG6R2
        volatile uint32_t AWSCD6R;  ///< Offset: 0xC8 - AWSCD6R
        volatile uint32_t CHWDAT6R;  ///< Offset: 0xCC - CHWDAT6R
        volatile uint32_t CHDATIN6R;  ///< Offset: 0xD0 - CHDATIN6R
        volatile uint32_t CHCFG7R1;  ///< Offset: 0xE0 - CHCFG7R1
        volatile uint32_t CHCFG7R2;  ///< Offset: 0xE4 - CHCFG7R2
        volatile uint32_t AWSCD7R;  ///< Offset: 0xE8 - AWSCD7R
        volatile uint32_t CHWDAT7R;  ///< Offset: 0xEC - CHWDAT7R
        volatile uint32_t CHDATIN7R;  ///< Offset: 0xF0 - CHDATIN7R
        volatile uint32_t DFSDM0_CR1;  ///< Offset: 0x100 - control register 1
        volatile uint32_t DFSDM0_CR2;  ///< Offset: 0x104 - control register 2
        volatile uint32_t DFSDM0_ISR;  ///< Offset: 0x108 - interrupt and status register
        volatile uint32_t DFSDM0_ICR;  ///< Offset: 0x10C - interrupt flag clear register
        volatile uint32_t DFSDM0_JCHGR;  ///< Offset: 0x110 - injected channel group selection register
        volatile uint32_t DFSDM0_FCR;  ///< Offset: 0x114 - filter control register
        volatile uint32_t DFSDM0_JDATAR;  ///< Offset: 0x118 - data register for injected group
        volatile uint32_t DFSDM0_RDATAR;  ///< Offset: 0x11C - data register for the regular channel
        volatile uint32_t DFSDM0_AWHTR;  ///< Offset: 0x120 - analog watchdog high threshold register
        volatile uint32_t DFSDM0_AWLTR;  ///< Offset: 0x124 - analog watchdog low threshold register
        volatile uint32_t DFSDM0_AWSR;  ///< Offset: 0x128 - analog watchdog status register
        volatile uint32_t DFSDM0_AWCFR;  ///< Offset: 0x12C - analog watchdog clear flag register
        volatile uint32_t DFSDM0_EXMAX;  ///< Offset: 0x130 - Extremes detector maximum register
        volatile uint32_t DFSDM0_EXMIN;  ///< Offset: 0x134 - Extremes detector minimum register
        volatile uint32_t DFSDM0_CNVTIMR;  ///< Offset: 0x138 - conversion timer register
        volatile uint32_t DFSDM1_CR1;  ///< Offset: 0x200 - control register 1
        volatile uint32_t DFSDM1_CR2;  ///< Offset: 0x204 - control register 2
        volatile uint32_t DFSDM1_ISR;  ///< Offset: 0x208 - interrupt and status register
        volatile uint32_t DFSDM1_ICR;  ///< Offset: 0x20C - interrupt flag clear register
        volatile uint32_t DFSDM1_JCHGR;  ///< Offset: 0x210 - injected channel group selection register
        volatile uint32_t DFSDM1_FCR;  ///< Offset: 0x214 - filter control register
        volatile uint32_t DFSDM1_JDATAR;  ///< Offset: 0x218 - data register for injected group
        volatile uint32_t DFSDM1_RDATAR;  ///< Offset: 0x21C - data register for the regular channel
        volatile uint32_t DFSDM1_AWHTR;  ///< Offset: 0x220 - analog watchdog high threshold register
        volatile uint32_t DFSDM1_AWLTR;  ///< Offset: 0x224 - analog watchdog low threshold register
        volatile uint32_t DFSDM1_AWSR;  ///< Offset: 0x228 - analog watchdog status register
        volatile uint32_t DFSDM1_AWCFR;  ///< Offset: 0x22C - analog watchdog clear flag register
        volatile uint32_t DFSDM1_EXMAX;  ///< Offset: 0x230 - Extremes detector maximum register
        volatile uint32_t DFSDM1_EXMIN;  ///< Offset: 0x234 - Extremes detector minimum register
        volatile uint32_t DFSDM1_CNVTIMR;  ///< Offset: 0x238 - conversion timer register
        volatile uint32_t DFSDM2_CR1;  ///< Offset: 0x300 - control register 1
        volatile uint32_t DFSDM2_CR2;  ///< Offset: 0x304 - control register 2
        volatile uint32_t DFSDM2_ISR;  ///< Offset: 0x308 - interrupt and status register
        volatile uint32_t DFSDM2_ICR;  ///< Offset: 0x30C - interrupt flag clear register
        volatile uint32_t DFSDM2_JCHGR;  ///< Offset: 0x310 - injected channel group selection register
        volatile uint32_t DFSDM2_FCR;  ///< Offset: 0x314 - filter control register
        volatile uint32_t DFSDM2_JDATAR;  ///< Offset: 0x318 - data register for injected group
        volatile uint32_t DFSDM2_RDATAR;  ///< Offset: 0x31C - data register for the regular channel
        volatile uint32_t DFSDM2_AWHTR;  ///< Offset: 0x320 - analog watchdog high threshold register
        volatile uint32_t DFSDM2_AWLTR;  ///< Offset: 0x324 - analog watchdog low threshold register
        volatile uint32_t DFSDM2_AWSR;  ///< Offset: 0x328 - analog watchdog status register
        volatile uint32_t DFSDM2_AWCFR;  ///< Offset: 0x32C - analog watchdog clear flag register
        volatile uint32_t DFSDM2_EXMAX;  ///< Offset: 0x330 - Extremes detector maximum register
        volatile uint32_t DFSDM2_EXMIN;  ///< Offset: 0x334 - Extremes detector minimum register
        volatile uint32_t DFSDM2_CNVTIMR;  ///< Offset: 0x338 - conversion timer register
        volatile uint32_t DFSDM3_CR1;  ///< Offset: 0x400 - control register 1
        volatile uint32_t DFSDM3_CR2;  ///< Offset: 0x404 - control register 2
        volatile uint32_t DFSDM3_ISR;  ///< Offset: 0x408 - interrupt and status register
        volatile uint32_t DFSDM3_ICR;  ///< Offset: 0x40C - interrupt flag clear register
        volatile uint32_t DFSDM3_JCHGR;  ///< Offset: 0x410 - injected channel group selection register
        volatile uint32_t DFSDM3_FCR;  ///< Offset: 0x414 - filter control register
        volatile uint32_t DFSDM3_JDATAR;  ///< Offset: 0x418 - data register for injected group
        volatile uint32_t DFSDM3_RDATAR;  ///< Offset: 0x41C - data register for the regular channel
        volatile uint32_t DFSDM3_AWHTR;  ///< Offset: 0x420 - analog watchdog high threshold register
        volatile uint32_t DFSDM3_AWLTR;  ///< Offset: 0x424 - analog watchdog low threshold register
        volatile uint32_t DFSDM3_AWSR;  ///< Offset: 0x428 - analog watchdog status register
        volatile uint32_t DFSDM3_AWCFR;  ///< Offset: 0x42C - analog watchdog clear flag register
        volatile uint32_t DFSDM3_EXMAX;  ///< Offset: 0x430 - Extremes detector maximum register
        volatile uint32_t DFSDM3_EXMIN;  ///< Offset: 0x434 - Extremes detector minimum register
        volatile uint32_t DFSDM3_CNVTIMR;  ///< Offset: 0x438 - conversion timer register
    };

    /// Peripheral instances
    inline Registers* DFSDM1 = reinterpret_cast<Registers*>(DFSDM1_BASE);

    // Bit definitions
    /// CHCFG0R1 Register bits
    namespace chcfg0r1_bits {
        constexpr uint32_t DFSDMEN = (1U << 31);  ///< DFSDMEN
        constexpr uint32_t CKOUTSRC = (1U << 30);  ///< CKOUTSRC
        constexpr uint32_t CKOUTDIV = (8 << 16);  ///< CKOUTDIV
        constexpr uint32_t DATPACK = (2 << 14);  ///< DATPACK
        constexpr uint32_t DATMPX = (2 << 12);  ///< DATMPX
        constexpr uint32_t CHINSEL = (1U << 8);  ///< CHINSEL
        constexpr uint32_t CHEN = (1U << 7);  ///< CHEN
        constexpr uint32_t CKABEN = (1U << 6);  ///< CKABEN
        constexpr uint32_t SCDEN = (1U << 5);  ///< SCDEN
        constexpr uint32_t SPICKSEL = (2 << 2);  ///< SPICKSEL
        constexpr uint32_t SITP = (2 << 0);  ///< SITP
    }

    /// CHCFG0R2 Register bits
    namespace chcfg0r2_bits {
        constexpr uint32_t OFFSET = (24 << 8);  ///< OFFSET
        constexpr uint32_t DTRBS = (5 << 3);  ///< DTRBS
    }

    /// AWSCD0R Register bits
    namespace awscd0r_bits {
        constexpr uint32_t AWFORD = (2 << 22);  ///< AWFORD
        constexpr uint32_t AWFOSR = (5 << 16);  ///< AWFOSR
        constexpr uint32_t BKSCD = (4 << 12);  ///< BKSCD
        constexpr uint32_t SCDT = (8 << 0);  ///< SCDT
    }

    /// CHWDAT0R Register bits
    namespace chwdat0r_bits {
        constexpr uint32_t WDATA = (16 << 0);  ///< WDATA
    }

    /// CHDATIN0R Register bits
    namespace chdatin0r_bits {
        constexpr uint32_t INDAT1 = (16 << 16);  ///< INDAT1
        constexpr uint32_t INDAT0 = (16 << 0);  ///< INDAT0
    }

    /// CHCFG1R1 Register bits
    namespace chcfg1r1_bits {
        constexpr uint32_t DATPACK = (2 << 14);  ///< DATPACK
        constexpr uint32_t DATMPX = (2 << 12);  ///< DATMPX
        constexpr uint32_t CHINSEL = (1U << 8);  ///< CHINSEL
        constexpr uint32_t CHEN = (1U << 7);  ///< CHEN
        constexpr uint32_t CKABEN = (1U << 6);  ///< CKABEN
        constexpr uint32_t SCDEN = (1U << 5);  ///< SCDEN
        constexpr uint32_t SPICKSEL = (2 << 2);  ///< SPICKSEL
        constexpr uint32_t SITP = (2 << 0);  ///< SITP
    }

    /// CHCFG1R2 Register bits
    namespace chcfg1r2_bits {
        constexpr uint32_t OFFSET = (24 << 8);  ///< OFFSET
        constexpr uint32_t DTRBS = (5 << 3);  ///< DTRBS
    }

    /// AWSCD1R Register bits
    namespace awscd1r_bits {
        constexpr uint32_t AWFORD = (2 << 22);  ///< AWFORD
        constexpr uint32_t AWFOSR = (5 << 16);  ///< AWFOSR
        constexpr uint32_t BKSCD = (4 << 12);  ///< BKSCD
        constexpr uint32_t SCDT = (8 << 0);  ///< SCDT
    }

    /// CHWDAT1R Register bits
    namespace chwdat1r_bits {
        constexpr uint32_t WDATA = (16 << 0);  ///< WDATA
    }

    /// CHDATIN1R Register bits
    namespace chdatin1r_bits {
        constexpr uint32_t INDAT1 = (16 << 16);  ///< INDAT1
        constexpr uint32_t INDAT0 = (16 << 0);  ///< INDAT0
    }

    /// CHCFG2R1 Register bits
    namespace chcfg2r1_bits {
        constexpr uint32_t DATPACK = (2 << 14);  ///< DATPACK
        constexpr uint32_t DATMPX = (2 << 12);  ///< DATMPX
        constexpr uint32_t CHINSEL = (1U << 8);  ///< CHINSEL
        constexpr uint32_t CHEN = (1U << 7);  ///< CHEN
        constexpr uint32_t CKABEN = (1U << 6);  ///< CKABEN
        constexpr uint32_t SCDEN = (1U << 5);  ///< SCDEN
        constexpr uint32_t SPICKSEL = (2 << 2);  ///< SPICKSEL
        constexpr uint32_t SITP = (2 << 0);  ///< SITP
    }

    /// CHCFG2R2 Register bits
    namespace chcfg2r2_bits {
        constexpr uint32_t OFFSET = (24 << 8);  ///< OFFSET
        constexpr uint32_t DTRBS = (5 << 3);  ///< DTRBS
    }

    /// AWSCD2R Register bits
    namespace awscd2r_bits {
        constexpr uint32_t AWFORD = (2 << 22);  ///< AWFORD
        constexpr uint32_t AWFOSR = (5 << 16);  ///< AWFOSR
        constexpr uint32_t BKSCD = (4 << 12);  ///< BKSCD
        constexpr uint32_t SCDT = (8 << 0);  ///< SCDT
    }

    /// CHWDAT2R Register bits
    namespace chwdat2r_bits {
        constexpr uint32_t WDATA = (16 << 0);  ///< WDATA
    }

    /// CHDATIN2R Register bits
    namespace chdatin2r_bits {
        constexpr uint32_t INDAT1 = (16 << 16);  ///< INDAT1
        constexpr uint32_t INDAT0 = (16 << 0);  ///< INDAT0
    }

    /// CHCFG3R1 Register bits
    namespace chcfg3r1_bits {
        constexpr uint32_t DATPACK = (2 << 14);  ///< DATPACK
        constexpr uint32_t DATMPX = (2 << 12);  ///< DATMPX
        constexpr uint32_t CHINSEL = (1U << 8);  ///< CHINSEL
        constexpr uint32_t CHEN = (1U << 7);  ///< CHEN
        constexpr uint32_t CKABEN = (1U << 6);  ///< CKABEN
        constexpr uint32_t SCDEN = (1U << 5);  ///< SCDEN
        constexpr uint32_t SPICKSEL = (2 << 2);  ///< SPICKSEL
        constexpr uint32_t SITP = (2 << 0);  ///< SITP
    }

    /// CHCFG3R2 Register bits
    namespace chcfg3r2_bits {
        constexpr uint32_t OFFSET = (24 << 8);  ///< OFFSET
        constexpr uint32_t DTRBS = (5 << 3);  ///< DTRBS
    }

    /// AWSCD3R Register bits
    namespace awscd3r_bits {
        constexpr uint32_t AWFORD = (2 << 22);  ///< AWFORD
        constexpr uint32_t AWFOSR = (5 << 16);  ///< AWFOSR
        constexpr uint32_t BKSCD = (4 << 12);  ///< BKSCD
        constexpr uint32_t SCDT = (8 << 0);  ///< SCDT
    }

    /// CHWDAT3R Register bits
    namespace chwdat3r_bits {
        constexpr uint32_t WDATA = (16 << 0);  ///< WDATA
    }

    /// CHDATIN3R Register bits
    namespace chdatin3r_bits {
        constexpr uint32_t INDAT1 = (16 << 16);  ///< INDAT1
        constexpr uint32_t INDAT0 = (16 << 0);  ///< INDAT0
    }

    /// CHCFG4R1 Register bits
    namespace chcfg4r1_bits {
        constexpr uint32_t DATPACK = (2 << 14);  ///< DATPACK
        constexpr uint32_t DATMPX = (2 << 12);  ///< DATMPX
        constexpr uint32_t CHINSEL = (1U << 8);  ///< CHINSEL
        constexpr uint32_t CHEN = (1U << 7);  ///< CHEN
        constexpr uint32_t CKABEN = (1U << 6);  ///< CKABEN
        constexpr uint32_t SCDEN = (1U << 5);  ///< SCDEN
        constexpr uint32_t SPICKSEL = (2 << 2);  ///< SPICKSEL
        constexpr uint32_t SITP = (2 << 0);  ///< SITP
    }

    /// CHCFG4R2 Register bits
    namespace chcfg4r2_bits {
        constexpr uint32_t OFFSET = (24 << 8);  ///< OFFSET
        constexpr uint32_t DTRBS = (5 << 3);  ///< DTRBS
    }

    /// AWSCD4R Register bits
    namespace awscd4r_bits {
        constexpr uint32_t AWFORD = (2 << 22);  ///< AWFORD
        constexpr uint32_t AWFOSR = (5 << 16);  ///< AWFOSR
        constexpr uint32_t BKSCD = (4 << 12);  ///< BKSCD
        constexpr uint32_t SCDT = (8 << 0);  ///< SCDT
    }

    /// CHWDAT4R Register bits
    namespace chwdat4r_bits {
        constexpr uint32_t WDATA = (16 << 0);  ///< WDATA
    }

    /// CHDATIN4R Register bits
    namespace chdatin4r_bits {
        constexpr uint32_t INDAT1 = (16 << 16);  ///< INDAT1
        constexpr uint32_t INDAT0 = (16 << 0);  ///< INDAT0
    }

    /// CHCFG5R1 Register bits
    namespace chcfg5r1_bits {
        constexpr uint32_t DATPACK = (2 << 14);  ///< DATPACK
        constexpr uint32_t DATMPX = (2 << 12);  ///< DATMPX
        constexpr uint32_t CHINSEL = (1U << 8);  ///< CHINSEL
        constexpr uint32_t CHEN = (1U << 7);  ///< CHEN
        constexpr uint32_t CKABEN = (1U << 6);  ///< CKABEN
        constexpr uint32_t SCDEN = (1U << 5);  ///< SCDEN
        constexpr uint32_t SPICKSEL = (2 << 2);  ///< SPICKSEL
        constexpr uint32_t SITP = (2 << 0);  ///< SITP
    }

    /// CHCFG5R2 Register bits
    namespace chcfg5r2_bits {
        constexpr uint32_t OFFSET = (24 << 8);  ///< OFFSET
        constexpr uint32_t DTRBS = (5 << 3);  ///< DTRBS
    }

    /// AWSCD5R Register bits
    namespace awscd5r_bits {
        constexpr uint32_t AWFORD = (2 << 22);  ///< AWFORD
        constexpr uint32_t AWFOSR = (5 << 16);  ///< AWFOSR
        constexpr uint32_t BKSCD = (4 << 12);  ///< BKSCD
        constexpr uint32_t SCDT = (8 << 0);  ///< SCDT
    }

    /// CHWDAT5R Register bits
    namespace chwdat5r_bits {
        constexpr uint32_t WDATA = (16 << 0);  ///< WDATA
    }

    /// CHDATIN5R Register bits
    namespace chdatin5r_bits {
        constexpr uint32_t INDAT1 = (16 << 16);  ///< INDAT1
        constexpr uint32_t INDAT0 = (16 << 0);  ///< INDAT0
    }

    /// CHCFG6R1 Register bits
    namespace chcfg6r1_bits {
        constexpr uint32_t DATPACK = (2 << 14);  ///< DATPACK
        constexpr uint32_t DATMPX = (2 << 12);  ///< DATMPX
        constexpr uint32_t CHINSEL = (1U << 8);  ///< CHINSEL
        constexpr uint32_t CHEN = (1U << 7);  ///< CHEN
        constexpr uint32_t CKABEN = (1U << 6);  ///< CKABEN
        constexpr uint32_t SCDEN = (1U << 5);  ///< SCDEN
        constexpr uint32_t SPICKSEL = (2 << 2);  ///< SPICKSEL
        constexpr uint32_t SITP = (2 << 0);  ///< SITP
    }

    /// CHCFG6R2 Register bits
    namespace chcfg6r2_bits {
        constexpr uint32_t OFFSET = (24 << 8);  ///< OFFSET
        constexpr uint32_t DTRBS = (5 << 3);  ///< DTRBS
    }

    /// AWSCD6R Register bits
    namespace awscd6r_bits {
        constexpr uint32_t AWFORD = (2 << 22);  ///< AWFORD
        constexpr uint32_t AWFOSR = (5 << 16);  ///< AWFOSR
        constexpr uint32_t BKSCD = (4 << 12);  ///< BKSCD
        constexpr uint32_t SCDT = (8 << 0);  ///< SCDT
    }

    /// CHWDAT6R Register bits
    namespace chwdat6r_bits {
        constexpr uint32_t WDATA = (16 << 0);  ///< WDATA
    }

    /// CHDATIN6R Register bits
    namespace chdatin6r_bits {
        constexpr uint32_t INDAT1 = (16 << 16);  ///< INDAT1
        constexpr uint32_t INDAT0 = (16 << 0);  ///< INDAT0
    }

    /// CHCFG7R1 Register bits
    namespace chcfg7r1_bits {
        constexpr uint32_t DATPACK = (2 << 14);  ///< DATPACK
        constexpr uint32_t DATMPX = (2 << 12);  ///< DATMPX
        constexpr uint32_t CHINSEL = (1U << 8);  ///< CHINSEL
        constexpr uint32_t CHEN = (1U << 7);  ///< CHEN
        constexpr uint32_t CKABEN = (1U << 6);  ///< CKABEN
        constexpr uint32_t SCDEN = (1U << 5);  ///< SCDEN
        constexpr uint32_t SPICKSEL = (2 << 2);  ///< SPICKSEL
        constexpr uint32_t SITP = (2 << 0);  ///< SITP
    }

    /// CHCFG7R2 Register bits
    namespace chcfg7r2_bits {
        constexpr uint32_t OFFSET = (24 << 8);  ///< OFFSET
        constexpr uint32_t DTRBS = (5 << 3);  ///< DTRBS
    }

    /// AWSCD7R Register bits
    namespace awscd7r_bits {
        constexpr uint32_t AWFORD = (2 << 22);  ///< AWFORD
        constexpr uint32_t AWFOSR = (5 << 16);  ///< AWFOSR
        constexpr uint32_t BKSCD = (4 << 12);  ///< BKSCD
        constexpr uint32_t SCDT = (8 << 0);  ///< SCDT
    }

    /// CHWDAT7R Register bits
    namespace chwdat7r_bits {
        constexpr uint32_t WDATA = (16 << 0);  ///< WDATA
    }

    /// CHDATIN7R Register bits
    namespace chdatin7r_bits {
        constexpr uint32_t INDAT1 = (16 << 16);  ///< INDAT1
        constexpr uint32_t INDAT0 = (16 << 0);  ///< INDAT0
    }

    /// DFSDM0_CR1 Register bits
    namespace dfsdm0_cr1_bits {
        constexpr uint32_t AWFSEL = (1U << 30);  ///< Analog watchdog fast mode select
        constexpr uint32_t FAST = (1U << 29);  ///< Fast conversion mode selection for regular conversions
        constexpr uint32_t RCH = (3 << 24);  ///< Regular channel selection
        constexpr uint32_t RDMAEN = (1U << 21);  ///< DMA channel enabled to read data for the regular conversion
        constexpr uint32_t RSYNC = (1U << 19);  ///< Launch regular conversion synchronously with DFSDM0
        constexpr uint32_t RCONT = (1U << 18);  ///< Continuous mode selection for regular conversions
        constexpr uint32_t RSWSTART = (1U << 17);  ///< Software start of a conversion on the regular channel
        constexpr uint32_t JEXTEN = (2 << 13);  ///< Trigger enable and trigger edge selection for injected conversions
        constexpr uint32_t JEXTSEL = (3 << 8);  ///< Trigger signal selection for launching injected conversions
        constexpr uint32_t JDMAEN = (1U << 5);  ///< DMA channel enabled to read data for the injected channel group
        constexpr uint32_t JSCAN = (1U << 4);  ///< Scanning conversion mode for injected conversions
        constexpr uint32_t JSYNC = (1U << 3);  ///< Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
        constexpr uint32_t JSWSTART = (1U << 1);  ///< Start a conversion of the injected group of channels
        constexpr uint32_t DFEN = (1U << 0);  ///< DFSDM enable
    }

    /// DFSDM0_CR2 Register bits
    namespace dfsdm0_cr2_bits {
        constexpr uint32_t AWDCH = (8 << 16);  ///< Analog watchdog channel selection
        constexpr uint32_t EXCH = (8 << 8);  ///< Extremes detector channel selection
        constexpr uint32_t CKABIE = (1U << 6);  ///< Clock absence interrupt enable
        constexpr uint32_t SCDIE = (1U << 5);  ///< Short-circuit detector interrupt enable
        constexpr uint32_t AWDIE = (1U << 4);  ///< Analog watchdog interrupt enable
        constexpr uint32_t ROVRIE = (1U << 3);  ///< Regular data overrun interrupt enable
        constexpr uint32_t JOVRIE = (1U << 2);  ///< Injected data overrun interrupt enable
        constexpr uint32_t REOCIE = (1U << 1);  ///< Regular end of conversion interrupt enable
        constexpr uint32_t JEOCIE = (1U << 0);  ///< Injected end of conversion interrupt enable
    }

    /// DFSDM0_ISR Register bits
    namespace dfsdm0_isr_bits {
        constexpr uint32_t SCDF = (8 << 24);  ///< short-circuit detector flag
        constexpr uint32_t CKABF = (8 << 16);  ///< Clock absence flag
        constexpr uint32_t RCIP = (1U << 14);  ///< Regular conversion in progress status
        constexpr uint32_t JCIP = (1U << 13);  ///< Injected conversion in progress status
        constexpr uint32_t AWDF = (1U << 4);  ///< Analog watchdog
        constexpr uint32_t ROVRF = (1U << 3);  ///< Regular conversion overrun flag
        constexpr uint32_t JOVRF = (1U << 2);  ///< Injected conversion overrun flag
        constexpr uint32_t REOCF = (1U << 1);  ///< End of regular conversion flag
        constexpr uint32_t JEOCF = (1U << 0);  ///< End of injected conversion flag
    }

    /// DFSDM0_ICR Register bits
    namespace dfsdm0_icr_bits {
        constexpr uint32_t CLRSCDF = (8 << 24);  ///< Clear the short-circuit detector flag
        constexpr uint32_t CLRCKABF = (8 << 16);  ///< Clear the clock absence flag
        constexpr uint32_t CLRROVRF = (1U << 3);  ///< Clear the regular conversion overrun flag
        constexpr uint32_t CLRJOVRF = (1U << 2);  ///< Clear the injected conversion overrun flag
    }

    /// DFSDM0_JCHGR Register bits
    namespace dfsdm0_jchgr_bits {
        constexpr uint32_t JCHG = (8 << 0);  ///< Injected channel group selection
    }

    /// DFSDM0_FCR Register bits
    namespace dfsdm0_fcr_bits {
        constexpr uint32_t FORD = (3 << 29);  ///< Sinc filter order
        constexpr uint32_t FOSR = (10 << 16);  ///< Sinc filter oversampling ratio (decimation rate)
        constexpr uint32_t IOSR = (8 << 0);  ///< Integrator oversampling ratio (averaging length)
    }

    /// DFSDM0_JDATAR Register bits
    namespace dfsdm0_jdatar_bits {
        constexpr uint32_t JDATA = (24 << 8);  ///< Injected group conversion data
        constexpr uint32_t JDATACH = (3 << 0);  ///< Injected channel most recently converted
    }

    /// DFSDM0_RDATAR Register bits
    namespace dfsdm0_rdatar_bits {
        constexpr uint32_t RDATA = (24 << 8);  ///< Regular channel conversion data
        constexpr uint32_t RPEND = (1U << 4);  ///< Regular channel pending data
        constexpr uint32_t RDATACH = (3 << 0);  ///< Regular channel most recently converted
    }

    /// DFSDM0_AWHTR Register bits
    namespace dfsdm0_awhtr_bits {
        constexpr uint32_t AWHT = (24 << 8);  ///< Analog watchdog high threshold
        constexpr uint32_t BKAWH = (4 << 0);  ///< Break signal assignment to analog watchdog high threshold event
    }

    /// DFSDM0_AWLTR Register bits
    namespace dfsdm0_awltr_bits {
        constexpr uint32_t AWLT = (24 << 8);  ///< Analog watchdog low threshold
        constexpr uint32_t BKAWL = (4 << 0);  ///< Break signal assignment to analog watchdog low threshold event
    }

    /// DFSDM0_AWSR Register bits
    namespace dfsdm0_awsr_bits {
        constexpr uint32_t AWHTF = (8 << 8);  ///< Analog watchdog high threshold flag
        constexpr uint32_t AWLTF = (8 << 0);  ///< Analog watchdog low threshold flag
    }

    /// DFSDM0_AWCFR Register bits
    namespace dfsdm0_awcfr_bits {
        constexpr uint32_t CLRAWHTF = (8 << 8);  ///< Clear the analog watchdog high threshold flag
        constexpr uint32_t CLRAWLTF = (8 << 0);  ///< Clear the analog watchdog low threshold flag
    }

    /// DFSDM0_EXMAX Register bits
    namespace dfsdm0_exmax_bits {
        constexpr uint32_t EXMAX = (24 << 8);  ///< Extremes detector maximum value
        constexpr uint32_t EXMAXCH = (3 << 0);  ///< Extremes detector maximum data channel
    }

    /// DFSDM0_EXMIN Register bits
    namespace dfsdm0_exmin_bits {
        constexpr uint32_t EXMIN = (24 << 8);  ///< EXMIN
        constexpr uint32_t EXMINCH = (3 << 0);  ///< Extremes detector minimum data channel
    }

    /// DFSDM0_CNVTIMR Register bits
    namespace dfsdm0_cnvtimr_bits {
        constexpr uint32_t CNVCNT = (28 << 4);  ///< 28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
    }

    /// DFSDM1_CR1 Register bits
    namespace dfsdm1_cr1_bits {
        constexpr uint32_t AWFSEL = (1U << 30);  ///< Analog watchdog fast mode select
        constexpr uint32_t FAST = (1U << 29);  ///< Fast conversion mode selection for regular conversions
        constexpr uint32_t RCH = (3 << 24);  ///< Regular channel selection
        constexpr uint32_t RDMAEN = (1U << 21);  ///< DMA channel enabled to read data for the regular conversion
        constexpr uint32_t RSYNC = (1U << 19);  ///< Launch regular conversion synchronously with DFSDM0
        constexpr uint32_t RCONT = (1U << 18);  ///< Continuous mode selection for regular conversions
        constexpr uint32_t RSWSTART = (1U << 17);  ///< Software start of a conversion on the regular channel
        constexpr uint32_t JEXTEN = (2 << 13);  ///< Trigger enable and trigger edge selection for injected conversions
        constexpr uint32_t JEXTSEL = (3 << 8);  ///< Trigger signal selection for launching injected conversions
        constexpr uint32_t JDMAEN = (1U << 5);  ///< DMA channel enabled to read data for the injected channel group
        constexpr uint32_t JSCAN = (1U << 4);  ///< Scanning conversion mode for injected conversions
        constexpr uint32_t JSYNC = (1U << 3);  ///< Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
        constexpr uint32_t JSWSTART = (1U << 1);  ///< Start a conversion of the injected group of channels
        constexpr uint32_t DFEN = (1U << 0);  ///< DFSDM enable
    }

    /// DFSDM1_CR2 Register bits
    namespace dfsdm1_cr2_bits {
        constexpr uint32_t AWDCH = (8 << 16);  ///< Analog watchdog channel selection
        constexpr uint32_t EXCH = (8 << 8);  ///< Extremes detector channel selection
        constexpr uint32_t CKABIE = (1U << 6);  ///< Clock absence interrupt enable
        constexpr uint32_t SCDIE = (1U << 5);  ///< Short-circuit detector interrupt enable
        constexpr uint32_t AWDIE = (1U << 4);  ///< Analog watchdog interrupt enable
        constexpr uint32_t ROVRIE = (1U << 3);  ///< Regular data overrun interrupt enable
        constexpr uint32_t JOVRIE = (1U << 2);  ///< Injected data overrun interrupt enable
        constexpr uint32_t REOCIE = (1U << 1);  ///< Regular end of conversion interrupt enable
        constexpr uint32_t JEOCIE = (1U << 0);  ///< Injected end of conversion interrupt enable
    }

    /// DFSDM1_ISR Register bits
    namespace dfsdm1_isr_bits {
        constexpr uint32_t SCDF = (8 << 24);  ///< short-circuit detector flag
        constexpr uint32_t CKABF = (8 << 16);  ///< Clock absence flag
        constexpr uint32_t RCIP = (1U << 14);  ///< Regular conversion in progress status
        constexpr uint32_t JCIP = (1U << 13);  ///< Injected conversion in progress status
        constexpr uint32_t AWDF = (1U << 4);  ///< Analog watchdog
        constexpr uint32_t ROVRF = (1U << 3);  ///< Regular conversion overrun flag
        constexpr uint32_t JOVRF = (1U << 2);  ///< Injected conversion overrun flag
        constexpr uint32_t REOCF = (1U << 1);  ///< End of regular conversion flag
        constexpr uint32_t JEOCF = (1U << 0);  ///< End of injected conversion flag
    }

    /// DFSDM1_ICR Register bits
    namespace dfsdm1_icr_bits {
        constexpr uint32_t CLRSCDF = (8 << 24);  ///< Clear the short-circuit detector flag
        constexpr uint32_t CLRCKABF = (8 << 16);  ///< Clear the clock absence flag
        constexpr uint32_t CLRROVRF = (1U << 3);  ///< Clear the regular conversion overrun flag
        constexpr uint32_t CLRJOVRF = (1U << 2);  ///< Clear the injected conversion overrun flag
    }

    /// DFSDM1_JCHGR Register bits
    namespace dfsdm1_jchgr_bits {
        constexpr uint32_t JCHG = (8 << 0);  ///< Injected channel group selection
    }

    /// DFSDM1_FCR Register bits
    namespace dfsdm1_fcr_bits {
        constexpr uint32_t FORD = (3 << 29);  ///< Sinc filter order
        constexpr uint32_t FOSR = (10 << 16);  ///< Sinc filter oversampling ratio (decimation rate)
        constexpr uint32_t IOSR = (8 << 0);  ///< Integrator oversampling ratio (averaging length)
    }

    /// DFSDM1_JDATAR Register bits
    namespace dfsdm1_jdatar_bits {
        constexpr uint32_t JDATA = (24 << 8);  ///< Injected group conversion data
        constexpr uint32_t JDATACH = (3 << 0);  ///< Injected channel most recently converted
    }

    /// DFSDM1_RDATAR Register bits
    namespace dfsdm1_rdatar_bits {
        constexpr uint32_t RDATA = (24 << 8);  ///< Regular channel conversion data
        constexpr uint32_t RPEND = (1U << 4);  ///< Regular channel pending data
        constexpr uint32_t RDATACH = (3 << 0);  ///< Regular channel most recently converted
    }

    /// DFSDM1_AWHTR Register bits
    namespace dfsdm1_awhtr_bits {
        constexpr uint32_t AWHT = (24 << 8);  ///< Analog watchdog high threshold
        constexpr uint32_t BKAWH = (4 << 0);  ///< Break signal assignment to analog watchdog high threshold event
    }

    /// DFSDM1_AWLTR Register bits
    namespace dfsdm1_awltr_bits {
        constexpr uint32_t AWLT = (24 << 8);  ///< Analog watchdog low threshold
        constexpr uint32_t BKAWL = (4 << 0);  ///< Break signal assignment to analog watchdog low threshold event
    }

    /// DFSDM1_AWSR Register bits
    namespace dfsdm1_awsr_bits {
        constexpr uint32_t AWHTF = (8 << 8);  ///< Analog watchdog high threshold flag
        constexpr uint32_t AWLTF = (8 << 0);  ///< Analog watchdog low threshold flag
    }

    /// DFSDM1_AWCFR Register bits
    namespace dfsdm1_awcfr_bits {
        constexpr uint32_t CLRAWHTF = (8 << 8);  ///< Clear the analog watchdog high threshold flag
        constexpr uint32_t CLRAWLTF = (8 << 0);  ///< Clear the analog watchdog low threshold flag
    }

    /// DFSDM1_EXMAX Register bits
    namespace dfsdm1_exmax_bits {
        constexpr uint32_t EXMAX = (24 << 8);  ///< Extremes detector maximum value
        constexpr uint32_t EXMAXCH = (3 << 0);  ///< Extremes detector maximum data channel
    }

    /// DFSDM1_EXMIN Register bits
    namespace dfsdm1_exmin_bits {
        constexpr uint32_t EXMIN = (24 << 8);  ///< EXMIN
        constexpr uint32_t EXMINCH = (3 << 0);  ///< Extremes detector minimum data channel
    }

    /// DFSDM1_CNVTIMR Register bits
    namespace dfsdm1_cnvtimr_bits {
        constexpr uint32_t CNVCNT = (28 << 4);  ///< 28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
    }

    /// DFSDM2_CR1 Register bits
    namespace dfsdm2_cr1_bits {
        constexpr uint32_t AWFSEL = (1U << 30);  ///< Analog watchdog fast mode select
        constexpr uint32_t FAST = (1U << 29);  ///< Fast conversion mode selection for regular conversions
        constexpr uint32_t RCH = (3 << 24);  ///< Regular channel selection
        constexpr uint32_t RDMAEN = (1U << 21);  ///< DMA channel enabled to read data for the regular conversion
        constexpr uint32_t RSYNC = (1U << 19);  ///< Launch regular conversion synchronously with DFSDM0
        constexpr uint32_t RCONT = (1U << 18);  ///< Continuous mode selection for regular conversions
        constexpr uint32_t RSWSTART = (1U << 17);  ///< Software start of a conversion on the regular channel
        constexpr uint32_t JEXTEN = (2 << 13);  ///< Trigger enable and trigger edge selection for injected conversions
        constexpr uint32_t JEXTSEL = (3 << 8);  ///< Trigger signal selection for launching injected conversions
        constexpr uint32_t JDMAEN = (1U << 5);  ///< DMA channel enabled to read data for the injected channel group
        constexpr uint32_t JSCAN = (1U << 4);  ///< Scanning conversion mode for injected conversions
        constexpr uint32_t JSYNC = (1U << 3);  ///< Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
        constexpr uint32_t JSWSTART = (1U << 1);  ///< Start a conversion of the injected group of channels
        constexpr uint32_t DFEN = (1U << 0);  ///< DFSDM enable
    }

    /// DFSDM2_CR2 Register bits
    namespace dfsdm2_cr2_bits {
        constexpr uint32_t AWDCH = (8 << 16);  ///< Analog watchdog channel selection
        constexpr uint32_t EXCH = (8 << 8);  ///< Extremes detector channel selection
        constexpr uint32_t CKABIE = (1U << 6);  ///< Clock absence interrupt enable
        constexpr uint32_t SCDIE = (1U << 5);  ///< Short-circuit detector interrupt enable
        constexpr uint32_t AWDIE = (1U << 4);  ///< Analog watchdog interrupt enable
        constexpr uint32_t ROVRIE = (1U << 3);  ///< Regular data overrun interrupt enable
        constexpr uint32_t JOVRIE = (1U << 2);  ///< Injected data overrun interrupt enable
        constexpr uint32_t REOCIE = (1U << 1);  ///< Regular end of conversion interrupt enable
        constexpr uint32_t JEOCIE = (1U << 0);  ///< Injected end of conversion interrupt enable
    }

    /// DFSDM2_ISR Register bits
    namespace dfsdm2_isr_bits {
        constexpr uint32_t SCDF = (8 << 24);  ///< short-circuit detector flag
        constexpr uint32_t CKABF = (8 << 16);  ///< Clock absence flag
        constexpr uint32_t RCIP = (1U << 14);  ///< Regular conversion in progress status
        constexpr uint32_t JCIP = (1U << 13);  ///< Injected conversion in progress status
        constexpr uint32_t AWDF = (1U << 4);  ///< Analog watchdog
        constexpr uint32_t ROVRF = (1U << 3);  ///< Regular conversion overrun flag
        constexpr uint32_t JOVRF = (1U << 2);  ///< Injected conversion overrun flag
        constexpr uint32_t REOCF = (1U << 1);  ///< End of regular conversion flag
        constexpr uint32_t JEOCF = (1U << 0);  ///< End of injected conversion flag
    }

    /// DFSDM2_ICR Register bits
    namespace dfsdm2_icr_bits {
        constexpr uint32_t CLRSCDF = (8 << 24);  ///< Clear the short-circuit detector flag
        constexpr uint32_t CLRCKABF = (8 << 16);  ///< Clear the clock absence flag
        constexpr uint32_t CLRROVRF = (1U << 3);  ///< Clear the regular conversion overrun flag
        constexpr uint32_t CLRJOVRF = (1U << 2);  ///< Clear the injected conversion overrun flag
    }

    /// DFSDM2_JCHGR Register bits
    namespace dfsdm2_jchgr_bits {
        constexpr uint32_t JCHG = (8 << 0);  ///< Injected channel group selection
    }

    /// DFSDM2_FCR Register bits
    namespace dfsdm2_fcr_bits {
        constexpr uint32_t FORD = (3 << 29);  ///< Sinc filter order
        constexpr uint32_t FOSR = (10 << 16);  ///< Sinc filter oversampling ratio (decimation rate)
        constexpr uint32_t IOSR = (8 << 0);  ///< Integrator oversampling ratio (averaging length)
    }

    /// DFSDM2_JDATAR Register bits
    namespace dfsdm2_jdatar_bits {
        constexpr uint32_t JDATA = (24 << 8);  ///< Injected group conversion data
        constexpr uint32_t JDATACH = (3 << 0);  ///< Injected channel most recently converted
    }

    /// DFSDM2_RDATAR Register bits
    namespace dfsdm2_rdatar_bits {
        constexpr uint32_t RDATA = (24 << 8);  ///< Regular channel conversion data
        constexpr uint32_t RPEND = (1U << 4);  ///< Regular channel pending data
        constexpr uint32_t RDATACH = (3 << 0);  ///< Regular channel most recently converted
    }

    /// DFSDM2_AWHTR Register bits
    namespace dfsdm2_awhtr_bits {
        constexpr uint32_t AWHT = (24 << 8);  ///< Analog watchdog high threshold
        constexpr uint32_t BKAWH = (4 << 0);  ///< Break signal assignment to analog watchdog high threshold event
    }

    /// DFSDM2_AWLTR Register bits
    namespace dfsdm2_awltr_bits {
        constexpr uint32_t AWLT = (24 << 8);  ///< Analog watchdog low threshold
        constexpr uint32_t BKAWL = (4 << 0);  ///< Break signal assignment to analog watchdog low threshold event
    }

    /// DFSDM2_AWSR Register bits
    namespace dfsdm2_awsr_bits {
        constexpr uint32_t AWHTF = (8 << 8);  ///< Analog watchdog high threshold flag
        constexpr uint32_t AWLTF = (8 << 0);  ///< Analog watchdog low threshold flag
    }

    /// DFSDM2_AWCFR Register bits
    namespace dfsdm2_awcfr_bits {
        constexpr uint32_t CLRAWHTF = (8 << 8);  ///< Clear the analog watchdog high threshold flag
        constexpr uint32_t CLRAWLTF = (8 << 0);  ///< Clear the analog watchdog low threshold flag
    }

    /// DFSDM2_EXMAX Register bits
    namespace dfsdm2_exmax_bits {
        constexpr uint32_t EXMAX = (24 << 8);  ///< Extremes detector maximum value
        constexpr uint32_t EXMAXCH = (3 << 0);  ///< Extremes detector maximum data channel
    }

    /// DFSDM2_EXMIN Register bits
    namespace dfsdm2_exmin_bits {
        constexpr uint32_t EXMIN = (24 << 8);  ///< EXMIN
        constexpr uint32_t EXMINCH = (3 << 0);  ///< Extremes detector minimum data channel
    }

    /// DFSDM2_CNVTIMR Register bits
    namespace dfsdm2_cnvtimr_bits {
        constexpr uint32_t CNVCNT = (28 << 4);  ///< 28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
    }

    /// DFSDM3_CR1 Register bits
    namespace dfsdm3_cr1_bits {
        constexpr uint32_t AWFSEL = (1U << 30);  ///< Analog watchdog fast mode select
        constexpr uint32_t FAST = (1U << 29);  ///< Fast conversion mode selection for regular conversions
        constexpr uint32_t RCH = (3 << 24);  ///< Regular channel selection
        constexpr uint32_t RDMAEN = (1U << 21);  ///< DMA channel enabled to read data for the regular conversion
        constexpr uint32_t RSYNC = (1U << 19);  ///< Launch regular conversion synchronously with DFSDM0
        constexpr uint32_t RCONT = (1U << 18);  ///< Continuous mode selection for regular conversions
        constexpr uint32_t RSWSTART = (1U << 17);  ///< Software start of a conversion on the regular channel
        constexpr uint32_t JEXTEN = (2 << 13);  ///< Trigger enable and trigger edge selection for injected conversions
        constexpr uint32_t JEXTSEL = (3 << 8);  ///< Trigger signal selection for launching injected conversions
        constexpr uint32_t JDMAEN = (1U << 5);  ///< DMA channel enabled to read data for the injected channel group
        constexpr uint32_t JSCAN = (1U << 4);  ///< Scanning conversion mode for injected conversions
        constexpr uint32_t JSYNC = (1U << 3);  ///< Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
        constexpr uint32_t JSWSTART = (1U << 1);  ///< Start a conversion of the injected group of channels
        constexpr uint32_t DFEN = (1U << 0);  ///< DFSDM enable
    }

    /// DFSDM3_CR2 Register bits
    namespace dfsdm3_cr2_bits {
        constexpr uint32_t AWDCH = (8 << 16);  ///< Analog watchdog channel selection
        constexpr uint32_t EXCH = (8 << 8);  ///< Extremes detector channel selection
        constexpr uint32_t CKABIE = (1U << 6);  ///< Clock absence interrupt enable
        constexpr uint32_t SCDIE = (1U << 5);  ///< Short-circuit detector interrupt enable
        constexpr uint32_t AWDIE = (1U << 4);  ///< Analog watchdog interrupt enable
        constexpr uint32_t ROVRIE = (1U << 3);  ///< Regular data overrun interrupt enable
        constexpr uint32_t JOVRIE = (1U << 2);  ///< Injected data overrun interrupt enable
        constexpr uint32_t REOCIE = (1U << 1);  ///< Regular end of conversion interrupt enable
        constexpr uint32_t JEOCIE = (1U << 0);  ///< Injected end of conversion interrupt enable
    }

    /// DFSDM3_ISR Register bits
    namespace dfsdm3_isr_bits {
        constexpr uint32_t SCDF = (8 << 24);  ///< short-circuit detector flag
        constexpr uint32_t CKABF = (8 << 16);  ///< Clock absence flag
        constexpr uint32_t RCIP = (1U << 14);  ///< Regular conversion in progress status
        constexpr uint32_t JCIP = (1U << 13);  ///< Injected conversion in progress status
        constexpr uint32_t AWDF = (1U << 4);  ///< Analog watchdog
        constexpr uint32_t ROVRF = (1U << 3);  ///< Regular conversion overrun flag
        constexpr uint32_t JOVRF = (1U << 2);  ///< Injected conversion overrun flag
        constexpr uint32_t REOCF = (1U << 1);  ///< End of regular conversion flag
        constexpr uint32_t JEOCF = (1U << 0);  ///< End of injected conversion flag
    }

    /// DFSDM3_ICR Register bits
    namespace dfsdm3_icr_bits {
        constexpr uint32_t CLRSCDF = (8 << 24);  ///< Clear the short-circuit detector flag
        constexpr uint32_t CLRCKABF = (8 << 16);  ///< Clear the clock absence flag
        constexpr uint32_t CLRROVRF = (1U << 3);  ///< Clear the regular conversion overrun flag
        constexpr uint32_t CLRJOVRF = (1U << 2);  ///< Clear the injected conversion overrun flag
    }

    /// DFSDM3_JCHGR Register bits
    namespace dfsdm3_jchgr_bits {
        constexpr uint32_t JCHG = (8 << 0);  ///< Injected channel group selection
    }

    /// DFSDM3_FCR Register bits
    namespace dfsdm3_fcr_bits {
        constexpr uint32_t FORD = (3 << 29);  ///< Sinc filter order
        constexpr uint32_t FOSR = (10 << 16);  ///< Sinc filter oversampling ratio (decimation rate)
        constexpr uint32_t IOSR = (8 << 0);  ///< Integrator oversampling ratio (averaging length)
    }

    /// DFSDM3_JDATAR Register bits
    namespace dfsdm3_jdatar_bits {
        constexpr uint32_t JDATA = (24 << 8);  ///< Injected group conversion data
        constexpr uint32_t JDATACH = (3 << 0);  ///< Injected channel most recently converted
    }

    /// DFSDM3_RDATAR Register bits
    namespace dfsdm3_rdatar_bits {
        constexpr uint32_t RDATA = (24 << 8);  ///< Regular channel conversion data
        constexpr uint32_t RPEND = (1U << 4);  ///< Regular channel pending data
        constexpr uint32_t RDATACH = (3 << 0);  ///< Regular channel most recently converted
    }

    /// DFSDM3_AWHTR Register bits
    namespace dfsdm3_awhtr_bits {
        constexpr uint32_t AWHT = (24 << 8);  ///< Analog watchdog high threshold
        constexpr uint32_t BKAWH = (4 << 0);  ///< Break signal assignment to analog watchdog high threshold event
    }

    /// DFSDM3_AWLTR Register bits
    namespace dfsdm3_awltr_bits {
        constexpr uint32_t AWLT = (24 << 8);  ///< Analog watchdog low threshold
        constexpr uint32_t BKAWL = (4 << 0);  ///< Break signal assignment to analog watchdog low threshold event
    }

    /// DFSDM3_AWSR Register bits
    namespace dfsdm3_awsr_bits {
        constexpr uint32_t AWHTF = (8 << 8);  ///< Analog watchdog high threshold flag
        constexpr uint32_t AWLTF = (8 << 0);  ///< Analog watchdog low threshold flag
    }

    /// DFSDM3_AWCFR Register bits
    namespace dfsdm3_awcfr_bits {
        constexpr uint32_t CLRAWHTF = (8 << 8);  ///< Clear the analog watchdog high threshold flag
        constexpr uint32_t CLRAWLTF = (8 << 0);  ///< Clear the analog watchdog low threshold flag
    }

    /// DFSDM3_EXMAX Register bits
    namespace dfsdm3_exmax_bits {
        constexpr uint32_t EXMAX = (24 << 8);  ///< Extremes detector maximum value
        constexpr uint32_t EXMAXCH = (3 << 0);  ///< Extremes detector maximum data channel
    }

    /// DFSDM3_EXMIN Register bits
    namespace dfsdm3_exmin_bits {
        constexpr uint32_t EXMIN = (24 << 8);  ///< EXMIN
        constexpr uint32_t EXMINCH = (3 << 0);  ///< Extremes detector minimum data channel
    }

    /// DFSDM3_CNVTIMR Register bits
    namespace dfsdm3_cnvtimr_bits {
        constexpr uint32_t CNVCNT = (28 << 4);  ///< 28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
    }

}

// ============================================================================
// RNG Peripheral
// ============================================================================

namespace rng {
    /// Base addresses
    constexpr uint32_t RNG_BASE = 0x50060800;

    /// RNG Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t SR;  ///< Offset: 0x04 - status register
        volatile uint32_t DR;  ///< Offset: 0x08 - data register
    };

    /// Peripheral instances
    inline Registers* RNG = reinterpret_cast<Registers*>(RNG_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t IE = (1U << 3);  ///< Interrupt enable
        constexpr uint32_t RNGEN = (1U << 2);  ///< Random number generator enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t SEIS = (1U << 6);  ///< Seed error interrupt status
        constexpr uint32_t CEIS = (1U << 5);  ///< Clock error interrupt status
        constexpr uint32_t SECS = (1U << 2);  ///< Seed error current status
        constexpr uint32_t CECS = (1U << 1);  ///< Clock error current status
        constexpr uint32_t DRDY = (1U << 0);  ///< Data ready
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t RNDATA = (32 << 0);  ///< Random data
    }

}

// ============================================================================
// CRYPTO Peripheral
// ============================================================================

namespace crypto {
    /// Base addresses
    constexpr uint32_t AES_BASE = 0x50060000;

    /// CRYPTO Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t SR;  ///< Offset: 0x04 - status register
        volatile uint32_t DINR;  ///< Offset: 0x08 - data input register
        volatile uint32_t DOUTR;  ///< Offset: 0x0C - data output register
        volatile uint32_t KEYR0;  ///< Offset: 0x10 - key register 0
        volatile uint32_t KEYR1;  ///< Offset: 0x14 - key register 1
        volatile uint32_t KEYR2;  ///< Offset: 0x18 - key register 2
        volatile uint32_t KEYR3;  ///< Offset: 0x1C - key register 3
        volatile uint32_t IVR0;  ///< Offset: 0x20 - initialization vector register 0
        volatile uint32_t IVR1;  ///< Offset: 0x24 - initialization vector register 1
        volatile uint32_t IVR2;  ///< Offset: 0x28 - initialization vector register 2
        volatile uint32_t IVR3;  ///< Offset: 0x2C - initialization vector register 3
    };

    /// Peripheral instances
    inline Registers* AES = reinterpret_cast<Registers*>(AES_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t DMAOUTEN = (1U << 12);  ///< Enable DMA management of data output phase
        constexpr uint32_t DMAINEN = (1U << 11);  ///< Enable DMA management of data input phase
        constexpr uint32_t ERRIE = (1U << 10);  ///< Error interrupt enable
        constexpr uint32_t CCFIE = (1U << 9);  ///< CCF flag interrupt enable
        constexpr uint32_t ERRC = (1U << 8);  ///< Error clear
        constexpr uint32_t CCFC = (1U << 7);  ///< Computation Complete Flag Clear
        constexpr uint32_t CHMOD = (2 << 5);  ///< AES chaining mode
        constexpr uint32_t MODE = (2 << 3);  ///< AES operating mode
        constexpr uint32_t DATATYPE = (2 << 1);  ///< Data type selection (for data in and data out to/from the cryptographic block)
        constexpr uint32_t EN = (1U << 0);  ///< AES enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t WRERR = (1U << 2);  ///< Write error flag
        constexpr uint32_t RDERR = (1U << 1);  ///< Read error flag
        constexpr uint32_t CCF = (1U << 0);  ///< Computation complete flag
    }

    /// DINR Register bits
    namespace dinr_bits {
        constexpr uint32_t AES_DINR = (32 << 0);  ///< Data Input Register
    }

    /// DOUTR Register bits
    namespace doutr_bits {
        constexpr uint32_t AES_DOUTR = (32 << 0);  ///< Data output register
    }

    /// KEYR0 Register bits
    namespace keyr0_bits {
        constexpr uint32_t AES_KEYR0 = (32 << 0);  ///< Data Output Register (LSB key [31:0])
    }

    /// KEYR1 Register bits
    namespace keyr1_bits {
        constexpr uint32_t AES_KEYR1 = (32 << 0);  ///< AES key register (key [63:32])
    }

    /// KEYR2 Register bits
    namespace keyr2_bits {
        constexpr uint32_t AES_KEYR2 = (32 << 0);  ///< AES key register (key [95:64])
    }

    /// KEYR3 Register bits
    namespace keyr3_bits {
        constexpr uint32_t AES_KEYR3 = (32 << 0);  ///< AES key register (MSB key [127:96])
    }

    /// IVR0 Register bits
    namespace ivr0_bits {
        constexpr uint32_t AES_IVR0 = (32 << 0);  ///< initialization vector register (LSB IVR [31:0])
    }

    /// IVR1 Register bits
    namespace ivr1_bits {
        constexpr uint32_t AES_IVR1 = (32 << 0);  ///< Initialization Vector Register (IVR [63:32])
    }

    /// IVR2 Register bits
    namespace ivr2_bits {
        constexpr uint32_t AES_IVR2 = (32 << 0);  ///< Initialization Vector Register (IVR [95:64])
    }

    /// IVR3 Register bits
    namespace ivr3_bits {
        constexpr uint32_t AES_IVR3 = (32 << 0);  ///< Initialization Vector Register (MSB IVR [127:96])
    }

}

// ============================================================================
// ADC Peripheral
// ============================================================================

namespace adc {
    /// Base addresses
    constexpr uint32_t ADC_BASE = 0x50040000;
    constexpr uint32_t ADC_Common_BASE = 0x50040300;

    /// ADC Register structure
    struct Registers {
        volatile uint32_t ISR;  ///< Offset: 0x00 - interrupt and status register
        volatile uint32_t IER;  ///< Offset: 0x04 - interrupt enable register
        volatile uint32_t CR;  ///< Offset: 0x08 - control register
        volatile uint32_t CFGR;  ///< Offset: 0x0C - configuration register
        volatile uint32_t CFGR2;  ///< Offset: 0x10 - configuration register
        volatile uint32_t SMPR1;  ///< Offset: 0x14 - sample time register 1
        volatile uint32_t SMPR2;  ///< Offset: 0x18 - sample time register 2
        volatile uint32_t TR1;  ///< Offset: 0x20 - watchdog threshold register 1
        volatile uint32_t TR2;  ///< Offset: 0x24 - watchdog threshold register
        volatile uint32_t TR3;  ///< Offset: 0x28 - watchdog threshold register 3
        volatile uint32_t SQR1;  ///< Offset: 0x30 - regular sequence register 1
        volatile uint32_t SQR2;  ///< Offset: 0x34 - regular sequence register 2
        volatile uint32_t SQR3;  ///< Offset: 0x38 - regular sequence register 3
        volatile uint32_t SQR4;  ///< Offset: 0x3C - regular sequence register 4
        volatile uint32_t DR;  ///< Offset: 0x40 - regular Data Register
        volatile uint32_t JSQR;  ///< Offset: 0x4C - injected sequence register
        volatile uint32_t OFR1;  ///< Offset: 0x60 - offset register 1
        volatile uint32_t OFR2;  ///< Offset: 0x64 - offset register 2
        volatile uint32_t OFR3;  ///< Offset: 0x68 - offset register 3
        volatile uint32_t OFR4;  ///< Offset: 0x6C - offset register 4
        volatile uint32_t JDR1;  ///< Offset: 0x80 - injected data register 1
        volatile uint32_t JDR2;  ///< Offset: 0x84 - injected data register 2
        volatile uint32_t JDR3;  ///< Offset: 0x88 - injected data register 3
        volatile uint32_t JDR4;  ///< Offset: 0x8C - injected data register 4
        volatile uint32_t AWD2CR;  ///< Offset: 0xA0 - Analog Watchdog 2 Configuration Register
        volatile uint32_t AWD3CR;  ///< Offset: 0xA4 - Analog Watchdog 3 Configuration Register
        volatile uint32_t DIFSEL;  ///< Offset: 0xB0 - Differential Mode Selection Register 2
        volatile uint32_t CALFACT;  ///< Offset: 0xB4 - Calibration Factors
    };

    /// Peripheral instances
    inline Registers* ADC = reinterpret_cast<Registers*>(ADC_BASE);
    inline Registers* ADC_Common = reinterpret_cast<Registers*>(ADC_Common_BASE);

    // Bit definitions
    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t JQOVF = (1U << 10);  ///< JQOVF
        constexpr uint32_t AWD3 = (1U << 9);  ///< AWD3
        constexpr uint32_t AWD2 = (1U << 8);  ///< AWD2
        constexpr uint32_t AWD1 = (1U << 7);  ///< AWD1
        constexpr uint32_t JEOS = (1U << 6);  ///< JEOS
        constexpr uint32_t JEOC = (1U << 5);  ///< JEOC
        constexpr uint32_t OVR = (1U << 4);  ///< OVR
        constexpr uint32_t EOS = (1U << 3);  ///< EOS
        constexpr uint32_t EOC = (1U << 2);  ///< EOC
        constexpr uint32_t EOSMP = (1U << 1);  ///< EOSMP
        constexpr uint32_t ADRDY = (1U << 0);  ///< ADRDY
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t JQOVFIE = (1U << 10);  ///< JQOVFIE
        constexpr uint32_t AWD3IE = (1U << 9);  ///< AWD3IE
        constexpr uint32_t AWD2IE = (1U << 8);  ///< AWD2IE
        constexpr uint32_t AWD1IE = (1U << 7);  ///< AWD1IE
        constexpr uint32_t JEOSIE = (1U << 6);  ///< JEOSIE
        constexpr uint32_t JEOCIE = (1U << 5);  ///< JEOCIE
        constexpr uint32_t OVRIE = (1U << 4);  ///< OVRIE
        constexpr uint32_t EOSIE = (1U << 3);  ///< EOSIE
        constexpr uint32_t EOCIE = (1U << 2);  ///< EOCIE
        constexpr uint32_t EOSMPIE = (1U << 1);  ///< EOSMPIE
        constexpr uint32_t ADRDYIE = (1U << 0);  ///< ADRDYIE
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t ADCAL = (1U << 31);  ///< ADCAL
        constexpr uint32_t ADCALDIF = (1U << 30);  ///< ADCALDIF
        constexpr uint32_t DEEPPWD = (1U << 29);  ///< DEEPPWD
        constexpr uint32_t ADVREGEN = (1U << 28);  ///< ADVREGEN
        constexpr uint32_t JADSTP = (1U << 5);  ///< JADSTP
        constexpr uint32_t ADSTP = (1U << 4);  ///< ADSTP
        constexpr uint32_t JADSTART = (1U << 3);  ///< JADSTART
        constexpr uint32_t ADSTART = (1U << 2);  ///< ADSTART
        constexpr uint32_t ADDIS = (1U << 1);  ///< ADDIS
        constexpr uint32_t ADEN = (1U << 0);  ///< ADEN
    }

    /// CFGR Register bits
    namespace cfgr_bits {
        constexpr uint32_t AWDCH1CH = (5 << 26);  ///< AWDCH1CH
        constexpr uint32_t JAUTO = (1U << 25);  ///< JAUTO
        constexpr uint32_t JAWD1EN = (1U << 24);  ///< JAWD1EN
        constexpr uint32_t AWD1EN = (1U << 23);  ///< AWD1EN
        constexpr uint32_t AWD1SGL = (1U << 22);  ///< AWD1SGL
        constexpr uint32_t JQM = (1U << 21);  ///< JQM
        constexpr uint32_t JDISCEN = (1U << 20);  ///< JDISCEN
        constexpr uint32_t DISCNUM = (3 << 17);  ///< DISCNUM
        constexpr uint32_t DISCEN = (1U << 16);  ///< DISCEN
        constexpr uint32_t AUTDLY = (1U << 14);  ///< AUTDLY
        constexpr uint32_t CONT = (1U << 13);  ///< CONT
        constexpr uint32_t OVRMOD = (1U << 12);  ///< OVRMOD
        constexpr uint32_t EXTEN = (2 << 10);  ///< EXTEN
        constexpr uint32_t EXTSEL = (4 << 6);  ///< EXTSEL
        constexpr uint32_t ALIGN = (1U << 5);  ///< ALIGN
        constexpr uint32_t RES = (2 << 3);  ///< RES
        constexpr uint32_t DMACFG = (1U << 1);  ///< DMACFG
        constexpr uint32_t DMAEN = (1U << 0);  ///< DMAEN
        constexpr uint32_t JQDIS = (1U << 31);  ///< Injected Queue disable
    }

    /// CFGR2 Register bits
    namespace cfgr2_bits {
        constexpr uint32_t ROVSM = (1U << 10);  ///< EXTEN
        constexpr uint32_t TROVS = (1U << 9);  ///< Triggered Regular Oversampling
        constexpr uint32_t OVSS = (4 << 5);  ///< ALIGN
        constexpr uint32_t OVSR = (3 << 2);  ///< RES
        constexpr uint32_t JOVSE = (1U << 1);  ///< DMACFG
        constexpr uint32_t ROVSE = (1U << 0);  ///< DMAEN
    }

    /// SMPR1 Register bits
    namespace smpr1_bits {
        constexpr uint32_t SMP9 = (3 << 27);  ///< SMP9
        constexpr uint32_t SMP8 = (3 << 24);  ///< SMP8
        constexpr uint32_t SMP7 = (3 << 21);  ///< SMP7
        constexpr uint32_t SMP6 = (3 << 18);  ///< SMP6
        constexpr uint32_t SMP5 = (3 << 15);  ///< SMP5
        constexpr uint32_t SMP4 = (3 << 12);  ///< SMP4
        constexpr uint32_t SMP3 = (3 << 9);  ///< SMP3
        constexpr uint32_t SMP2 = (3 << 6);  ///< SMP2
        constexpr uint32_t SMP1 = (3 << 3);  ///< SMP1
        constexpr uint32_t SMPPLUS = (1U << 31);  ///< Addition of one clock cycle to the sampling time
        constexpr uint32_t SMP0 = (3 << 0);  ///< SMP0
    }

    /// SMPR2 Register bits
    namespace smpr2_bits {
        constexpr uint32_t SMP18 = (3 << 24);  ///< SMP18
        constexpr uint32_t SMP17 = (3 << 21);  ///< SMP17
        constexpr uint32_t SMP16 = (3 << 18);  ///< SMP16
        constexpr uint32_t SMP15 = (3 << 15);  ///< SMP15
        constexpr uint32_t SMP14 = (3 << 12);  ///< SMP14
        constexpr uint32_t SMP13 = (3 << 9);  ///< SMP13
        constexpr uint32_t SMP12 = (3 << 6);  ///< SMP12
        constexpr uint32_t SMP11 = (3 << 3);  ///< SMP11
        constexpr uint32_t SMP10 = (3 << 0);  ///< SMP10
    }

    /// TR1 Register bits
    namespace tr1_bits {
        constexpr uint32_t HT1 = (12 << 16);  ///< HT1
        constexpr uint32_t LT1 = (12 << 0);  ///< LT1
    }

    /// TR2 Register bits
    namespace tr2_bits {
        constexpr uint32_t HT2 = (8 << 16);  ///< HT2
        constexpr uint32_t LT2 = (8 << 0);  ///< LT2
    }

    /// TR3 Register bits
    namespace tr3_bits {
        constexpr uint32_t HT3 = (8 << 16);  ///< HT3
        constexpr uint32_t LT3 = (8 << 0);  ///< LT3
    }

    /// SQR1 Register bits
    namespace sqr1_bits {
        constexpr uint32_t SQ4 = (5 << 24);  ///< SQ4
        constexpr uint32_t SQ3 = (5 << 18);  ///< SQ3
        constexpr uint32_t SQ2 = (5 << 12);  ///< SQ2
        constexpr uint32_t SQ1 = (5 << 6);  ///< SQ1
        constexpr uint32_t L = (4 << 0);  ///< Regular channel sequence length
    }

    /// SQR2 Register bits
    namespace sqr2_bits {
        constexpr uint32_t SQ9 = (5 << 24);  ///< SQ9
        constexpr uint32_t SQ8 = (5 << 18);  ///< SQ8
        constexpr uint32_t SQ7 = (5 << 12);  ///< SQ7
        constexpr uint32_t SQ6 = (5 << 6);  ///< SQ6
        constexpr uint32_t SQ5 = (5 << 0);  ///< SQ5
    }

    /// SQR3 Register bits
    namespace sqr3_bits {
        constexpr uint32_t SQ14 = (5 << 24);  ///< SQ14
        constexpr uint32_t SQ13 = (5 << 18);  ///< SQ13
        constexpr uint32_t SQ12 = (5 << 12);  ///< SQ12
        constexpr uint32_t SQ11 = (5 << 6);  ///< SQ11
        constexpr uint32_t SQ10 = (5 << 0);  ///< SQ10
    }

    /// SQR4 Register bits
    namespace sqr4_bits {
        constexpr uint32_t SQ16 = (5 << 6);  ///< SQ16
        constexpr uint32_t SQ15 = (5 << 0);  ///< SQ15
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t RDATA = (16 << 0);  ///< Regular Data converted
    }

    /// JSQR Register bits
    namespace jsqr_bits {
        constexpr uint32_t JSQ4 = (5 << 26);  ///< JSQ4
        constexpr uint32_t JSQ3 = (5 << 20);  ///< JSQ3
        constexpr uint32_t JSQ2 = (5 << 14);  ///< JSQ2
        constexpr uint32_t JSQ1 = (5 << 8);  ///< JSQ1
        constexpr uint32_t JEXTEN = (2 << 6);  ///< JEXTEN
        constexpr uint32_t JEXTSEL = (4 << 2);  ///< JEXTSEL
        constexpr uint32_t JL = (2 << 0);  ///< JL
    }

    /// OFR1 Register bits
    namespace ofr1_bits {
        constexpr uint32_t OFFSET1_EN = (1U << 31);  ///< OFFSET1_EN
        constexpr uint32_t OFFSET1_CH = (5 << 26);  ///< OFFSET1_CH
        constexpr uint32_t OFFSET1 = (12 << 0);  ///< OFFSET1
    }

    /// OFR2 Register bits
    namespace ofr2_bits {
        constexpr uint32_t OFFSET2_EN = (1U << 31);  ///< OFFSET2_EN
        constexpr uint32_t OFFSET2_CH = (5 << 26);  ///< OFFSET2_CH
        constexpr uint32_t OFFSET2 = (12 << 0);  ///< OFFSET2
    }

    /// OFR3 Register bits
    namespace ofr3_bits {
        constexpr uint32_t OFFSET3_EN = (1U << 31);  ///< OFFSET3_EN
        constexpr uint32_t OFFSET3_CH = (5 << 26);  ///< OFFSET3_CH
        constexpr uint32_t OFFSET3 = (12 << 0);  ///< OFFSET3
    }

    /// OFR4 Register bits
    namespace ofr4_bits {
        constexpr uint32_t OFFSET4_EN = (1U << 31);  ///< OFFSET4_EN
        constexpr uint32_t OFFSET4_CH = (5 << 26);  ///< OFFSET4_CH
        constexpr uint32_t OFFSET4 = (12 << 0);  ///< OFFSET4
    }

    /// JDR1 Register bits
    namespace jdr1_bits {
        constexpr uint32_t JDATA1 = (16 << 0);  ///< JDATA1
    }

    /// JDR2 Register bits
    namespace jdr2_bits {
        constexpr uint32_t JDATA2 = (16 << 0);  ///< JDATA2
    }

    /// JDR3 Register bits
    namespace jdr3_bits {
        constexpr uint32_t JDATA3 = (16 << 0);  ///< JDATA3
    }

    /// JDR4 Register bits
    namespace jdr4_bits {
        constexpr uint32_t JDATA4 = (16 << 0);  ///< JDATA4
    }

    /// AWD2CR Register bits
    namespace awd2cr_bits {
        constexpr uint32_t AWD2CH = (18 << 0);  ///< AWD2CH
    }

    /// AWD3CR Register bits
    namespace awd3cr_bits {
        constexpr uint32_t AWD3CH = (18 << 0);  ///< AWD3CH
    }

    /// DIFSEL Register bits
    namespace difsel_bits {
        constexpr uint32_t DIFSEL_1_15 = (15 << 1);  ///< Differential mode for channels 15 to 1
        constexpr uint32_t DIFSEL_16_18 = (3 << 16);  ///< Differential mode for channels 18 to 16
    }

    /// CALFACT Register bits
    namespace calfact_bits {
        constexpr uint32_t CALFACT_D = (7 << 16);  ///< CALFACT_D
        constexpr uint32_t CALFACT_S = (7 << 0);  ///< CALFACT_S
    }

}

// ============================================================================
// GPIO Peripheral
// ============================================================================

namespace gpio {
    /// Base addresses
    constexpr uint32_t GPIOA_BASE = 0x48000000;
    constexpr uint32_t GPIOB_BASE = 0x48000400;
    constexpr uint32_t GPIOC_BASE = 0x48000800;
    constexpr uint32_t GPIOD_BASE = 0x48000C00;
    constexpr uint32_t GPIOE_BASE = 0x48001000;
    constexpr uint32_t GPIOF_BASE = 0x48001400;
    constexpr uint32_t GPIOG_BASE = 0x48001800;
    constexpr uint32_t GPIOH_BASE = 0x48001C00;
    constexpr uint32_t GPIOI_BASE = 0x48002000;

    /// GPIO Register structure
    struct Registers {
        volatile uint32_t MODER;  ///< Offset: 0x00 - GPIO port mode register
        volatile uint32_t OTYPER;  ///< Offset: 0x04 - GPIO port output type register
        volatile uint32_t OSPEEDR;  ///< Offset: 0x08 - GPIO port output speed register
        volatile uint32_t PUPDR;  ///< Offset: 0x0C - GPIO port pull-up/pull-down register
        volatile uint32_t IDR;  ///< Offset: 0x10 - GPIO port input data register
        volatile uint32_t ODR;  ///< Offset: 0x14 - GPIO port output data register
        volatile uint32_t BSRR;  ///< Offset: 0x18 - GPIO port bit set/reset register
        volatile uint32_t LCKR;  ///< Offset: 0x1C - GPIO port configuration lock register
        volatile uint32_t AFRL;  ///< Offset: 0x20 - GPIO alternate function low register
        volatile uint32_t AFRH;  ///< Offset: 0x24 - GPIO alternate function high register
        volatile uint32_t BRR;  ///< Offset: 0x28 - GPIO port bit reset register
        volatile uint32_t ASCR;  ///< Offset: 0x2C - GPIO port analog switch control register
    };

    /// Peripheral instances
    inline Registers* GPIOA = reinterpret_cast<Registers*>(GPIOA_BASE);
    inline Registers* GPIOB = reinterpret_cast<Registers*>(GPIOB_BASE);
    inline Registers* GPIOC = reinterpret_cast<Registers*>(GPIOC_BASE);
    inline Registers* GPIOD = reinterpret_cast<Registers*>(GPIOD_BASE);
    inline Registers* GPIOE = reinterpret_cast<Registers*>(GPIOE_BASE);
    inline Registers* GPIOF = reinterpret_cast<Registers*>(GPIOF_BASE);
    inline Registers* GPIOG = reinterpret_cast<Registers*>(GPIOG_BASE);
    inline Registers* GPIOH = reinterpret_cast<Registers*>(GPIOH_BASE);
    inline Registers* GPIOI = reinterpret_cast<Registers*>(GPIOI_BASE);

    // Bit definitions
    /// MODER Register bits
    namespace moder_bits {
        constexpr uint32_t MODER15 = (2 << 30);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER14 = (2 << 28);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER13 = (2 << 26);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER12 = (2 << 24);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER11 = (2 << 22);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER10 = (2 << 20);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER9 = (2 << 18);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER8 = (2 << 16);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER7 = (2 << 14);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER6 = (2 << 12);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER5 = (2 << 10);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER4 = (2 << 8);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER3 = (2 << 6);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER2 = (2 << 4);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER1 = (2 << 2);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t MODER0 = (2 << 0);  ///< Port x configuration bits (y = 0..15)
    }

    /// OTYPER Register bits
    namespace otyper_bits {
        constexpr uint32_t OT15 = (1U << 15);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT14 = (1U << 14);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT13 = (1U << 13);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT12 = (1U << 12);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT11 = (1U << 11);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT10 = (1U << 10);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT9 = (1U << 9);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT8 = (1U << 8);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT7 = (1U << 7);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT6 = (1U << 6);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT5 = (1U << 5);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT4 = (1U << 4);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT3 = (1U << 3);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT2 = (1U << 2);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT1 = (1U << 1);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OT0 = (1U << 0);  ///< Port x configuration bits (y = 0..15)
    }

    /// OSPEEDR Register bits
    namespace ospeedr_bits {
        constexpr uint32_t OSPEEDR15 = (2 << 30);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR14 = (2 << 28);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR13 = (2 << 26);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR12 = (2 << 24);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR11 = (2 << 22);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR10 = (2 << 20);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR9 = (2 << 18);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR8 = (2 << 16);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR7 = (2 << 14);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR6 = (2 << 12);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR5 = (2 << 10);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR4 = (2 << 8);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR3 = (2 << 6);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR2 = (2 << 4);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR1 = (2 << 2);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t OSPEEDR0 = (2 << 0);  ///< Port x configuration bits (y = 0..15)
    }

    /// PUPDR Register bits
    namespace pupdr_bits {
        constexpr uint32_t PUPDR15 = (2 << 30);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR14 = (2 << 28);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR13 = (2 << 26);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR12 = (2 << 24);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR11 = (2 << 22);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR10 = (2 << 20);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR9 = (2 << 18);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR8 = (2 << 16);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR7 = (2 << 14);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR6 = (2 << 12);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR5 = (2 << 10);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR4 = (2 << 8);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR3 = (2 << 6);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR2 = (2 << 4);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR1 = (2 << 2);  ///< Port x configuration bits (y = 0..15)
        constexpr uint32_t PUPDR0 = (2 << 0);  ///< Port x configuration bits (y = 0..15)
    }

    /// IDR Register bits
    namespace idr_bits {
        constexpr uint32_t IDR15 = (1U << 15);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR14 = (1U << 14);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR13 = (1U << 13);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR12 = (1U << 12);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR11 = (1U << 11);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR10 = (1U << 10);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR9 = (1U << 9);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR8 = (1U << 8);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR7 = (1U << 7);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR6 = (1U << 6);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR5 = (1U << 5);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR4 = (1U << 4);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR3 = (1U << 3);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR2 = (1U << 2);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR1 = (1U << 1);  ///< Port input data (y = 0..15)
        constexpr uint32_t IDR0 = (1U << 0);  ///< Port input data (y = 0..15)
    }

    /// ODR Register bits
    namespace odr_bits {
        constexpr uint32_t ODR15 = (1U << 15);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR14 = (1U << 14);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR13 = (1U << 13);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR12 = (1U << 12);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR11 = (1U << 11);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR10 = (1U << 10);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR9 = (1U << 9);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR8 = (1U << 8);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR7 = (1U << 7);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR6 = (1U << 6);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR5 = (1U << 5);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR4 = (1U << 4);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR3 = (1U << 3);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR2 = (1U << 2);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR1 = (1U << 1);  ///< Port output data (y = 0..15)
        constexpr uint32_t ODR0 = (1U << 0);  ///< Port output data (y = 0..15)
    }

    /// BSRR Register bits
    namespace bsrr_bits {
        constexpr uint32_t BR15 = (1U << 31);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR14 = (1U << 30);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR13 = (1U << 29);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR12 = (1U << 28);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR11 = (1U << 27);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR10 = (1U << 26);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR9 = (1U << 25);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR8 = (1U << 24);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR7 = (1U << 23);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR6 = (1U << 22);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR5 = (1U << 21);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR4 = (1U << 20);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR3 = (1U << 19);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR2 = (1U << 18);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR1 = (1U << 17);  ///< Port x reset bit y (y = 0..15)
        constexpr uint32_t BR0 = (1U << 16);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS15 = (1U << 15);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS14 = (1U << 14);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS13 = (1U << 13);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS12 = (1U << 12);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS11 = (1U << 11);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS10 = (1U << 10);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS9 = (1U << 9);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS8 = (1U << 8);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS7 = (1U << 7);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS6 = (1U << 6);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS5 = (1U << 5);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS4 = (1U << 4);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS3 = (1U << 3);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS2 = (1U << 2);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS1 = (1U << 1);  ///< Port x set bit y (y= 0..15)
        constexpr uint32_t BS0 = (1U << 0);  ///< Port x set bit y (y= 0..15)
    }

    /// LCKR Register bits
    namespace lckr_bits {
        constexpr uint32_t LCKK = (1U << 16);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK15 = (1U << 15);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK14 = (1U << 14);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK13 = (1U << 13);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK12 = (1U << 12);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK11 = (1U << 11);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK10 = (1U << 10);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK9 = (1U << 9);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK8 = (1U << 8);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK7 = (1U << 7);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK6 = (1U << 6);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK5 = (1U << 5);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK4 = (1U << 4);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK3 = (1U << 3);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK2 = (1U << 2);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK1 = (1U << 1);  ///< Port x lock bit y (y= 0..15)
        constexpr uint32_t LCK0 = (1U << 0);  ///< Port x lock bit y (y= 0..15)
    }

    /// AFRL Register bits
    namespace afrl_bits {
        constexpr uint32_t AFRL7 = (4 << 28);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL6 = (4 << 24);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL5 = (4 << 20);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL4 = (4 << 16);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL3 = (4 << 12);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL2 = (4 << 8);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL1 = (4 << 4);  ///< Alternate function selection for port x bit y (y = 0..7)
        constexpr uint32_t AFRL0 = (4 << 0);  ///< Alternate function selection for port x bit y (y = 0..7)
    }

    /// AFRH Register bits
    namespace afrh_bits {
        constexpr uint32_t AFRH15 = (4 << 28);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH14 = (4 << 24);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH13 = (4 << 20);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH12 = (4 << 16);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH11 = (4 << 12);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH10 = (4 << 8);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH9 = (4 << 4);  ///< Alternate function selection for port x bit y (y = 8..15)
        constexpr uint32_t AFRH8 = (4 << 0);  ///< Alternate function selection for port x bit y (y = 8..15)
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t BR0 = (1U << 0);  ///< Port Reset bit
        constexpr uint32_t BR1 = (1U << 1);  ///< Port Reset bit
        constexpr uint32_t BR2 = (1U << 2);  ///< Port Reset bit
        constexpr uint32_t BR3 = (1U << 3);  ///< Port Reset bit
        constexpr uint32_t BR4 = (1U << 4);  ///< Port Reset bit
        constexpr uint32_t BR5 = (1U << 5);  ///< Port Reset bit
        constexpr uint32_t BR6 = (1U << 6);  ///< Port Reset bit
        constexpr uint32_t BR7 = (1U << 7);  ///< Port Reset bit
        constexpr uint32_t BR8 = (1U << 8);  ///< Port Reset bit
        constexpr uint32_t BR9 = (1U << 9);  ///< Port Reset bit
        constexpr uint32_t BR10 = (1U << 10);  ///< Port Reset bit
        constexpr uint32_t BR11 = (1U << 11);  ///< Port Reset bit
        constexpr uint32_t BR12 = (1U << 12);  ///< Port Reset bit
        constexpr uint32_t BR13 = (1U << 13);  ///< Port Reset bit
        constexpr uint32_t BR14 = (1U << 14);  ///< Port Reset bit
        constexpr uint32_t BR15 = (1U << 15);  ///< Port Reset bit
    }

    /// ASCR Register bits
    namespace ascr_bits {
        constexpr uint32_t ASC0 = (1U << 0);  ///< Port analog switch control
        constexpr uint32_t ASC1 = (1U << 1);  ///< Port analog switch control
        constexpr uint32_t ASC2 = (1U << 2);  ///< Port analog switch control
        constexpr uint32_t ASC3 = (1U << 3);  ///< Port analog switch control
        constexpr uint32_t ASC4 = (1U << 4);  ///< Port analog switch control
        constexpr uint32_t ASC5 = (1U << 5);  ///< Port analog switch control
        constexpr uint32_t ASC6 = (1U << 6);  ///< Port analog switch control
        constexpr uint32_t ASC7 = (1U << 7);  ///< Port analog switch control
        constexpr uint32_t ASC8 = (1U << 8);  ///< Port analog switch control
        constexpr uint32_t ASC9 = (1U << 9);  ///< Port analog switch control
        constexpr uint32_t ASC10 = (1U << 10);  ///< Port analog switch control
        constexpr uint32_t ASC11 = (1U << 11);  ///< Port analog switch control
        constexpr uint32_t ASC12 = (1U << 12);  ///< Port analog switch control
        constexpr uint32_t ASC13 = (1U << 13);  ///< Port analog switch control
        constexpr uint32_t ASC14 = (1U << 14);  ///< Port analog switch control
        constexpr uint32_t ASC15 = (1U << 15);  ///< Port analog switch control
    }

}

// ============================================================================
// SAI1 Peripheral
// ============================================================================

namespace sai1 {
    /// Base addresses
    constexpr uint32_t SAI1_BASE = 0x40015400;

    /// SAI1 Register structure
    struct Registers {
        volatile uint32_t BCR1;  ///< Offset: 0x24 - BConfiguration register 1
        volatile uint32_t BCR2;  ///< Offset: 0x28 - BConfiguration register 2
        volatile uint32_t BFRCR;  ///< Offset: 0x2C - BFRCR
        volatile uint32_t BSLOTR;  ///< Offset: 0x30 - BSlot register
        volatile uint32_t BIM;  ///< Offset: 0x34 - BInterrupt mask register2
        volatile uint32_t BSR;  ///< Offset: 0x38 - BStatus register
        volatile uint32_t BCLRFR;  ///< Offset: 0x3C - BClear flag register
        volatile uint32_t BDR;  ///< Offset: 0x40 - BData register
        volatile uint32_t ACR1;  ///< Offset: 0x04 - AConfiguration register 1
        volatile uint32_t ACR2;  ///< Offset: 0x08 - AConfiguration register 2
        volatile uint32_t AFRCR;  ///< Offset: 0x0C - AFRCR
        volatile uint32_t ASLOTR;  ///< Offset: 0x10 - ASlot register
        volatile uint32_t AIM;  ///< Offset: 0x14 - AInterrupt mask register2
        volatile uint32_t ASR;  ///< Offset: 0x18 - AStatus register
        volatile uint32_t ACLRFR;  ///< Offset: 0x1C - AClear flag register
        volatile uint32_t ADR;  ///< Offset: 0x20 - AData register
    };

    /// Peripheral instances
    inline Registers* SAI1 = reinterpret_cast<Registers*>(SAI1_BASE);

    // Bit definitions
    /// BCR1 Register bits
    namespace bcr1_bits {
        constexpr uint32_t MCJDIV = (4 << 20);  ///< Master clock divider
        constexpr uint32_t NODIV = (1U << 19);  ///< No divider
        constexpr uint32_t DMAEN = (1U << 17);  ///< DMA enable
        constexpr uint32_t SAIBEN = (1U << 16);  ///< Audio block B enable
        constexpr uint32_t OutDri = (1U << 13);  ///< Output drive
        constexpr uint32_t MONO = (1U << 12);  ///< Mono mode
        constexpr uint32_t SYNCEN = (2 << 10);  ///< Synchronization enable
        constexpr uint32_t CKSTR = (1U << 9);  ///< Clock strobing edge
        constexpr uint32_t LSBFIRST = (1U << 8);  ///< Least significant bit first
        constexpr uint32_t DS = (3 << 5);  ///< Data size
        constexpr uint32_t PRTCFG = (2 << 2);  ///< Protocol configuration
        constexpr uint32_t MODE = (2 << 0);  ///< Audio block mode
    }

    /// BCR2 Register bits
    namespace bcr2_bits {
        constexpr uint32_t COMP = (2 << 14);  ///< Companding mode
        constexpr uint32_t CPL = (1U << 13);  ///< Complement bit
        constexpr uint32_t MUTECN = (6 << 7);  ///< Mute counter
        constexpr uint32_t MUTEVAL = (1U << 6);  ///< Mute value
        constexpr uint32_t MUTE = (1U << 5);  ///< Mute
        constexpr uint32_t TRIS = (1U << 4);  ///< Tristate management on data line
        constexpr uint32_t FFLUS = (1U << 3);  ///< FIFO flush
        constexpr uint32_t FTH = (3 << 0);  ///< FIFO threshold
    }

    /// BFRCR Register bits
    namespace bfrcr_bits {
        constexpr uint32_t FSOFF = (1U << 18);  ///< Frame synchronization offset
        constexpr uint32_t FSPOL = (1U << 17);  ///< Frame synchronization polarity
        constexpr uint32_t FSDEF = (1U << 16);  ///< Frame synchronization definition
        constexpr uint32_t FSALL = (7 << 8);  ///< Frame synchronization active level length
        constexpr uint32_t FRL = (8 << 0);  ///< Frame length
    }

    /// BSLOTR Register bits
    namespace bslotr_bits {
        constexpr uint32_t SLOTEN = (16 << 16);  ///< Slot enable
        constexpr uint32_t NBSLOT = (4 << 8);  ///< Number of slots in an audio frame
        constexpr uint32_t SLOTSZ = (2 << 6);  ///< Slot size
        constexpr uint32_t FBOFF = (5 << 0);  ///< First bit offset
    }

    /// BIM Register bits
    namespace bim_bits {
        constexpr uint32_t LFSDETIE = (1U << 6);  ///< Late frame synchronization detection interrupt enable
        constexpr uint32_t AFSDETIE = (1U << 5);  ///< Anticipated frame synchronization detection interrupt enable
        constexpr uint32_t CNRDYIE = (1U << 4);  ///< Codec not ready interrupt enable
        constexpr uint32_t FREQIE = (1U << 3);  ///< FIFO request interrupt enable
        constexpr uint32_t WCKCFG = (1U << 2);  ///< Wrong clock configuration interrupt enable
        constexpr uint32_t MUTEDET = (1U << 1);  ///< Mute detection interrupt enable
        constexpr uint32_t OVRUDRIE = (1U << 0);  ///< Overrun/underrun interrupt enable
    }

    /// BSR Register bits
    namespace bsr_bits {
        constexpr uint32_t FLVL = (3 << 16);  ///< FIFO level threshold
        constexpr uint32_t LFSDET = (1U << 6);  ///< Late frame synchronization detection
        constexpr uint32_t AFSDET = (1U << 5);  ///< Anticipated frame synchronization detection
        constexpr uint32_t CNRDY = (1U << 4);  ///< Codec not ready
        constexpr uint32_t FREQ = (1U << 3);  ///< FIFO request
        constexpr uint32_t WCKCFG = (1U << 2);  ///< Wrong clock configuration flag
        constexpr uint32_t MUTEDET = (1U << 1);  ///< Mute detection
        constexpr uint32_t OVRUDR = (1U << 0);  ///< Overrun / underrun
    }

    /// BCLRFR Register bits
    namespace bclrfr_bits {
        constexpr uint32_t LFSDET = (1U << 6);  ///< Clear late frame synchronization detection flag
        constexpr uint32_t CAFSDET = (1U << 5);  ///< Clear anticipated frame synchronization detection flag
        constexpr uint32_t CNRDY = (1U << 4);  ///< Clear codec not ready flag
        constexpr uint32_t WCKCFG = (1U << 2);  ///< Clear wrong clock configuration flag
        constexpr uint32_t MUTEDET = (1U << 1);  ///< Mute detection flag
        constexpr uint32_t OVRUDR = (1U << 0);  ///< Clear overrun / underrun
    }

    /// BDR Register bits
    namespace bdr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data
    }

    /// ACR1 Register bits
    namespace acr1_bits {
        constexpr uint32_t MCJDIV = (4 << 20);  ///< Master clock divider
        constexpr uint32_t NODIV = (1U << 19);  ///< No divider
        constexpr uint32_t DMAEN = (1U << 17);  ///< DMA enable
        constexpr uint32_t SAIAEN = (1U << 16);  ///< Audio block A enable
        constexpr uint32_t OutDri = (1U << 13);  ///< Output drive
        constexpr uint32_t MONO = (1U << 12);  ///< Mono mode
        constexpr uint32_t SYNCEN = (2 << 10);  ///< Synchronization enable
        constexpr uint32_t CKSTR = (1U << 9);  ///< Clock strobing edge
        constexpr uint32_t LSBFIRST = (1U << 8);  ///< Least significant bit first
        constexpr uint32_t DS = (3 << 5);  ///< Data size
        constexpr uint32_t PRTCFG = (2 << 2);  ///< Protocol configuration
        constexpr uint32_t MODE = (2 << 0);  ///< Audio block mode
    }

    /// ACR2 Register bits
    namespace acr2_bits {
        constexpr uint32_t COMP = (2 << 14);  ///< Companding mode
        constexpr uint32_t CPL = (1U << 13);  ///< Complement bit
        constexpr uint32_t MUTECN = (6 << 7);  ///< Mute counter
        constexpr uint32_t MUTEVAL = (1U << 6);  ///< Mute value
        constexpr uint32_t MUTE = (1U << 5);  ///< Mute
        constexpr uint32_t TRIS = (1U << 4);  ///< Tristate management on data line
        constexpr uint32_t FFLUS = (1U << 3);  ///< FIFO flush
        constexpr uint32_t FTH = (3 << 0);  ///< FIFO threshold
    }

    /// AFRCR Register bits
    namespace afrcr_bits {
        constexpr uint32_t FSOFF = (1U << 18);  ///< Frame synchronization offset
        constexpr uint32_t FSPOL = (1U << 17);  ///< Frame synchronization polarity
        constexpr uint32_t FSDEF = (1U << 16);  ///< Frame synchronization definition
        constexpr uint32_t FSALL = (7 << 8);  ///< Frame synchronization active level length
        constexpr uint32_t FRL = (8 << 0);  ///< Frame length
    }

    /// ASLOTR Register bits
    namespace aslotr_bits {
        constexpr uint32_t SLOTEN = (16 << 16);  ///< Slot enable
        constexpr uint32_t NBSLOT = (4 << 8);  ///< Number of slots in an audio frame
        constexpr uint32_t SLOTSZ = (2 << 6);  ///< Slot size
        constexpr uint32_t FBOFF = (5 << 0);  ///< First bit offset
    }

    /// AIM Register bits
    namespace aim_bits {
        constexpr uint32_t LFSDET = (1U << 6);  ///< Late frame synchronization detection interrupt enable
        constexpr uint32_t AFSDETIE = (1U << 5);  ///< Anticipated frame synchronization detection interrupt enable
        constexpr uint32_t CNRDYIE = (1U << 4);  ///< Codec not ready interrupt enable
        constexpr uint32_t FREQIE = (1U << 3);  ///< FIFO request interrupt enable
        constexpr uint32_t WCKCFG = (1U << 2);  ///< Wrong clock configuration interrupt enable
        constexpr uint32_t MUTEDET = (1U << 1);  ///< Mute detection interrupt enable
        constexpr uint32_t OVRUDRIE = (1U << 0);  ///< Overrun/underrun interrupt enable
    }

    /// ASR Register bits
    namespace asr_bits {
        constexpr uint32_t FLVL = (3 << 16);  ///< FIFO level threshold
        constexpr uint32_t LFSDET = (1U << 6);  ///< Late frame synchronization detection
        constexpr uint32_t AFSDET = (1U << 5);  ///< Anticipated frame synchronization detection
        constexpr uint32_t CNRDY = (1U << 4);  ///< Codec not ready
        constexpr uint32_t FREQ = (1U << 3);  ///< FIFO request
        constexpr uint32_t WCKCFG = (1U << 2);  ///< Wrong clock configuration flag. This bit is read only
        constexpr uint32_t MUTEDET = (1U << 1);  ///< Mute detection
        constexpr uint32_t OVRUDR = (1U << 0);  ///< Overrun / underrun
    }

    /// ACLRFR Register bits
    namespace aclrfr_bits {
        constexpr uint32_t LFSDET = (1U << 6);  ///< Clear late frame synchronization detection flag
        constexpr uint32_t CAFSDET = (1U << 5);  ///< Clear anticipated frame synchronization detection flag
        constexpr uint32_t CNRDY = (1U << 4);  ///< Clear codec not ready flag
        constexpr uint32_t WCKCFG = (1U << 2);  ///< Clear wrong clock configuration flag
        constexpr uint32_t MUTEDET = (1U << 1);  ///< Mute detection flag
        constexpr uint32_t OVRUDR = (1U << 0);  ///< Clear overrun / underrun
    }

    /// ADR Register bits
    namespace adr_bits {
        constexpr uint32_t DATA = (32 << 0);  ///< Data
    }

}

// ============================================================================
// SAI2 Peripheral
// ============================================================================

namespace sai2 {
    /// Base addresses
    constexpr uint32_t SAI2_BASE = 0x40015800;

    /// SAI2 Register structure
    struct Registers {
    };

    /// Peripheral instances
    inline Registers* SAI2 = reinterpret_cast<Registers*>(SAI2_BASE);

}

// ============================================================================
// TIM Peripheral
// ============================================================================

namespace tim {
    /// Base addresses
    constexpr uint32_t TIM2_BASE = 0x40000000;
    constexpr uint32_t TIM3_BASE = 0x40000400;
    constexpr uint32_t TIM4_BASE = 0x40000800;
    constexpr uint32_t TIM5_BASE = 0x40000C00;
    constexpr uint32_t TIM15_BASE = 0x40014000;
    constexpr uint32_t TIM16_BASE = 0x40014400;
    constexpr uint32_t TIM17_BASE = 0x40014800;
    constexpr uint32_t TIM1_BASE = 0x40012C00;
    constexpr uint32_t TIM8_BASE = 0x40013400;
    constexpr uint32_t TIM6_BASE = 0x40001000;
    constexpr uint32_t TIM7_BASE = 0x40001400;
    constexpr uint32_t LPTIM1_BASE = 0x40007C00;
    constexpr uint32_t LPTIM2_BASE = 0x40009400;

    /// TIM Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - control register 2
        volatile uint32_t SMCR;  ///< Offset: 0x08 - slave mode control register
        volatile uint32_t DIER;  ///< Offset: 0x0C - DMA/Interrupt enable register
        volatile uint32_t SR;  ///< Offset: 0x10 - status register
        volatile uint32_t EGR;  ///< Offset: 0x14 - event generation register
        volatile uint32_t CCMR1_Output;  ///< Offset: 0x18 - capture/compare mode register 1 (output mode)
        volatile uint32_t CCMR1_Input;  ///< Offset: 0x18 - capture/compare mode register 1 (input mode)
        volatile uint32_t CCMR2_Output;  ///< Offset: 0x1C - capture/compare mode register 2 (output mode)
        volatile uint32_t CCMR2_Input;  ///< Offset: 0x1C - capture/compare mode register 2 (input mode)
        volatile uint32_t CCER;  ///< Offset: 0x20 - capture/compare enable register
        volatile uint32_t CNT;  ///< Offset: 0x24 - counter
        volatile uint32_t PSC;  ///< Offset: 0x28 - prescaler
        volatile uint32_t ARR;  ///< Offset: 0x2C - auto-reload register
        volatile uint32_t CCR1;  ///< Offset: 0x34 - capture/compare register 1
        volatile uint32_t CCR2;  ///< Offset: 0x38 - capture/compare register 2
        volatile uint32_t CCR3;  ///< Offset: 0x3C - capture/compare register 3
        volatile uint32_t CCR4;  ///< Offset: 0x40 - capture/compare register 4
        volatile uint32_t DCR;  ///< Offset: 0x48 - DMA control register
        volatile uint32_t DMAR;  ///< Offset: 0x4C - DMA address for full transfer
        volatile uint32_t OR;  ///< Offset: 0x50 - TIM2 option register
    };

    /// Peripheral instances
    inline Registers* TIM2 = reinterpret_cast<Registers*>(TIM2_BASE);
    inline Registers* TIM3 = reinterpret_cast<Registers*>(TIM3_BASE);
    inline Registers* TIM4 = reinterpret_cast<Registers*>(TIM4_BASE);
    inline Registers* TIM5 = reinterpret_cast<Registers*>(TIM5_BASE);
    inline Registers* TIM15 = reinterpret_cast<Registers*>(TIM15_BASE);
    inline Registers* TIM16 = reinterpret_cast<Registers*>(TIM16_BASE);
    inline Registers* TIM17 = reinterpret_cast<Registers*>(TIM17_BASE);
    inline Registers* TIM1 = reinterpret_cast<Registers*>(TIM1_BASE);
    inline Registers* TIM8 = reinterpret_cast<Registers*>(TIM8_BASE);
    inline Registers* TIM6 = reinterpret_cast<Registers*>(TIM6_BASE);
    inline Registers* TIM7 = reinterpret_cast<Registers*>(TIM7_BASE);
    inline Registers* LPTIM1 = reinterpret_cast<Registers*>(LPTIM1_BASE);
    inline Registers* LPTIM2 = reinterpret_cast<Registers*>(LPTIM2_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t CKD = (2 << 8);  ///< Clock division
        constexpr uint32_t ARPE = (1U << 7);  ///< Auto-reload preload enable
        constexpr uint32_t CMS = (2 << 5);  ///< Center-aligned mode selection
        constexpr uint32_t DIR = (1U << 4);  ///< Direction
        constexpr uint32_t OPM = (1U << 3);  ///< One-pulse mode
        constexpr uint32_t URS = (1U << 2);  ///< Update request source
        constexpr uint32_t UDIS = (1U << 1);  ///< Update disable
        constexpr uint32_t CEN = (1U << 0);  ///< Counter enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t TI1S = (1U << 7);  ///< TI1 selection
        constexpr uint32_t MMS = (3 << 4);  ///< Master mode selection
        constexpr uint32_t CCDS = (1U << 3);  ///< Capture/compare DMA selection
    }

    /// SMCR Register bits
    namespace smcr_bits {
        constexpr uint32_t ETP = (1U << 15);  ///< External trigger polarity
        constexpr uint32_t ECE = (1U << 14);  ///< External clock enable
        constexpr uint32_t ETPS = (2 << 12);  ///< External trigger prescaler
        constexpr uint32_t ETF = (4 << 8);  ///< External trigger filter
        constexpr uint32_t MSM = (1U << 7);  ///< Master/Slave mode
        constexpr uint32_t TS = (3 << 4);  ///< Trigger selection
        constexpr uint32_t SMS = (3 << 0);  ///< Slave mode selection
    }

    /// DIER Register bits
    namespace dier_bits {
        constexpr uint32_t TDE = (1U << 14);  ///< Trigger DMA request enable
        constexpr uint32_t COMDE = (1U << 13);  ///< COM DMA request enable
        constexpr uint32_t CC4DE = (1U << 12);  ///< Capture/Compare 4 DMA request enable
        constexpr uint32_t CC3DE = (1U << 11);  ///< Capture/Compare 3 DMA request enable
        constexpr uint32_t CC2DE = (1U << 10);  ///< Capture/Compare 2 DMA request enable
        constexpr uint32_t CC1DE = (1U << 9);  ///< Capture/Compare 1 DMA request enable
        constexpr uint32_t UDE = (1U << 8);  ///< Update DMA request enable
        constexpr uint32_t TIE = (1U << 6);  ///< Trigger interrupt enable
        constexpr uint32_t CC4IE = (1U << 4);  ///< Capture/Compare 4 interrupt enable
        constexpr uint32_t CC3IE = (1U << 3);  ///< Capture/Compare 3 interrupt enable
        constexpr uint32_t CC2IE = (1U << 2);  ///< Capture/Compare 2 interrupt enable
        constexpr uint32_t CC1IE = (1U << 1);  ///< Capture/Compare 1 interrupt enable
        constexpr uint32_t UIE = (1U << 0);  ///< Update interrupt enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t CC4OF = (1U << 12);  ///< Capture/Compare 4 overcapture flag
        constexpr uint32_t CC3OF = (1U << 11);  ///< Capture/Compare 3 overcapture flag
        constexpr uint32_t CC2OF = (1U << 10);  ///< Capture/compare 2 overcapture flag
        constexpr uint32_t CC1OF = (1U << 9);  ///< Capture/Compare 1 overcapture flag
        constexpr uint32_t TIF = (1U << 6);  ///< Trigger interrupt flag
        constexpr uint32_t CC4IF = (1U << 4);  ///< Capture/Compare 4 interrupt flag
        constexpr uint32_t CC3IF = (1U << 3);  ///< Capture/Compare 3 interrupt flag
        constexpr uint32_t CC2IF = (1U << 2);  ///< Capture/Compare 2 interrupt flag
        constexpr uint32_t CC1IF = (1U << 1);  ///< Capture/compare 1 interrupt flag
        constexpr uint32_t UIF = (1U << 0);  ///< Update interrupt flag
    }

    /// EGR Register bits
    namespace egr_bits {
        constexpr uint32_t TG = (1U << 6);  ///< Trigger generation
        constexpr uint32_t CC4G = (1U << 4);  ///< Capture/compare 4 generation
        constexpr uint32_t CC3G = (1U << 3);  ///< Capture/compare 3 generation
        constexpr uint32_t CC2G = (1U << 2);  ///< Capture/compare 2 generation
        constexpr uint32_t CC1G = (1U << 1);  ///< Capture/compare 1 generation
        constexpr uint32_t UG = (1U << 0);  ///< Update generation
    }

    /// CCMR1_Output Register bits
    namespace ccmr1_output_bits {
        constexpr uint32_t OC2CE = (1U << 15);  ///< Output compare 2 clear enable
        constexpr uint32_t OC2M = (3 << 12);  ///< Output compare 2 mode
        constexpr uint32_t OC2PE = (1U << 11);  ///< Output compare 2 preload enable
        constexpr uint32_t OC2FE = (1U << 10);  ///< Output compare 2 fast enable
        constexpr uint32_t CC2S = (2 << 8);  ///< Capture/Compare 2 selection
        constexpr uint32_t OC1CE = (1U << 7);  ///< Output compare 1 clear enable
        constexpr uint32_t OC1M = (3 << 4);  ///< Output compare 1 mode
        constexpr uint32_t OC1PE = (1U << 3);  ///< Output compare 1 preload enable
        constexpr uint32_t OC1FE = (1U << 2);  ///< Output compare 1 fast enable
        constexpr uint32_t CC1S = (2 << 0);  ///< Capture/Compare 1 selection
    }

    /// CCMR1_Input Register bits
    namespace ccmr1_input_bits {
        constexpr uint32_t IC2F = (4 << 12);  ///< Input capture 2 filter
        constexpr uint32_t IC2PSC = (2 << 10);  ///< Input capture 2 prescaler
        constexpr uint32_t CC2S = (2 << 8);  ///< Capture/compare 2 selection
        constexpr uint32_t IC1F = (4 << 4);  ///< Input capture 1 filter
        constexpr uint32_t IC1PSC = (2 << 2);  ///< Input capture 1 prescaler
        constexpr uint32_t CC1S = (2 << 0);  ///< Capture/Compare 1 selection
    }

    /// CCMR2_Output Register bits
    namespace ccmr2_output_bits {
        constexpr uint32_t OC4CE = (1U << 15);  ///< Output compare 4 clear enable
        constexpr uint32_t OC4M = (3 << 12);  ///< Output compare 4 mode
        constexpr uint32_t OC4PE = (1U << 11);  ///< Output compare 4 preload enable
        constexpr uint32_t OC4FE = (1U << 10);  ///< Output compare 4 fast enable
        constexpr uint32_t CC4S = (2 << 8);  ///< Capture/Compare 4 selection
        constexpr uint32_t OC3CE = (1U << 7);  ///< Output compare 3 clear enable
        constexpr uint32_t OC3M = (3 << 4);  ///< Output compare 3 mode
        constexpr uint32_t OC3PE = (1U << 3);  ///< Output compare 3 preload enable
        constexpr uint32_t OC3FE = (1U << 2);  ///< Output compare 3 fast enable
        constexpr uint32_t CC3S = (2 << 0);  ///< Capture/Compare 3 selection
    }

    /// CCMR2_Input Register bits
    namespace ccmr2_input_bits {
        constexpr uint32_t IC4F = (4 << 12);  ///< Input capture 4 filter
        constexpr uint32_t IC4PSC = (2 << 10);  ///< Input capture 4 prescaler
        constexpr uint32_t CC4S = (2 << 8);  ///< Capture/Compare 4 selection
        constexpr uint32_t IC3F = (4 << 4);  ///< Input capture 3 filter
        constexpr uint32_t IC3PSC = (2 << 2);  ///< Input capture 3 prescaler
        constexpr uint32_t CC3S = (2 << 0);  ///< Capture/Compare 3 selection
    }

    /// CCER Register bits
    namespace ccer_bits {
        constexpr uint32_t CC4NP = (1U << 15);  ///< Capture/Compare 4 output Polarity
        constexpr uint32_t CC4P = (1U << 13);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC4E = (1U << 12);  ///< Capture/Compare 4 output enable
        constexpr uint32_t CC3NP = (1U << 11);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC3P = (1U << 9);  ///< Capture/Compare 3 output Polarity
        constexpr uint32_t CC3E = (1U << 8);  ///< Capture/Compare 3 output enable
        constexpr uint32_t CC2NP = (1U << 7);  ///< Capture/Compare 2 output Polarity
        constexpr uint32_t CC2P = (1U << 5);  ///< Capture/Compare 2 output Polarity
        constexpr uint32_t CC2E = (1U << 4);  ///< Capture/Compare 2 output enable
        constexpr uint32_t CC1NP = (1U << 3);  ///< Capture/Compare 1 output Polarity
        constexpr uint32_t CC1P = (1U << 1);  ///< Capture/Compare 1 output Polarity
        constexpr uint32_t CC1E = (1U << 0);  ///< Capture/Compare 1 output enable
    }

    /// CNT Register bits
    namespace cnt_bits {
        constexpr uint32_t CNT_H = (16 << 16);  ///< High counter value (TIM2 only)
        constexpr uint32_t CNT_L = (16 << 0);  ///< Low counter value
    }

    /// PSC Register bits
    namespace psc_bits {
        constexpr uint32_t PSC = (16 << 0);  ///< Prescaler value
    }

    /// ARR Register bits
    namespace arr_bits {
        constexpr uint32_t ARR_H = (16 << 16);  ///< High Auto-reload value (TIM2 only)
        constexpr uint32_t ARR_L = (16 << 0);  ///< Low Auto-reload value
    }

    /// CCR1 Register bits
    namespace ccr1_bits {
        constexpr uint32_t CCR1_H = (16 << 16);  ///< High Capture/Compare 1 value (TIM2 only)
        constexpr uint32_t CCR1_L = (16 << 0);  ///< Low Capture/Compare 1 value
    }

    /// CCR2 Register bits
    namespace ccr2_bits {
        constexpr uint32_t CCR2_H = (16 << 16);  ///< High Capture/Compare 2 value (TIM2 only)
        constexpr uint32_t CCR2_L = (16 << 0);  ///< Low Capture/Compare 2 value
    }

    /// CCR3 Register bits
    namespace ccr3_bits {
        constexpr uint32_t CCR3_H = (16 << 16);  ///< High Capture/Compare value (TIM2 only)
        constexpr uint32_t CCR3_L = (16 << 0);  ///< Low Capture/Compare value
    }

    /// CCR4 Register bits
    namespace ccr4_bits {
        constexpr uint32_t CCR4_H = (16 << 16);  ///< High Capture/Compare value (TIM2 only)
        constexpr uint32_t CCR4_L = (16 << 0);  ///< Low Capture/Compare value
    }

    /// DCR Register bits
    namespace dcr_bits {
        constexpr uint32_t DBL = (5 << 8);  ///< DMA burst length
        constexpr uint32_t DBA = (5 << 0);  ///< DMA base address
    }

    /// DMAR Register bits
    namespace dmar_bits {
        constexpr uint32_t DMAB = (16 << 0);  ///< DMA register for burst accesses
    }

    /// OR Register bits
    namespace or_bits {
        constexpr uint32_t ETR_RMP = (3 << 0);  ///< Timer2 ETR remap
        constexpr uint32_t TI4_RMP = (2 << 3);  ///< Internal trigger
    }

}

// ============================================================================
// USART Peripheral
// ============================================================================

namespace usart {
    /// Base addresses
    constexpr uint32_t USART1_BASE = 0x40013800;
    constexpr uint32_t USART2_BASE = 0x40004400;
    constexpr uint32_t USART3_BASE = 0x40004800;
    constexpr uint32_t UART4_BASE = 0x40004C00;
    constexpr uint32_t UART5_BASE = 0x40005000;
    constexpr uint32_t LPUART1_BASE = 0x40008000;

    /// USART Register structure
    struct Registers {
        volatile uint32_t CR1;  ///< Offset: 0x00 - Control register 1
        volatile uint32_t CR2;  ///< Offset: 0x04 - Control register 2
        volatile uint32_t CR3;  ///< Offset: 0x08 - Control register 3
        volatile uint32_t BRR;  ///< Offset: 0x0C - Baud rate register
        volatile uint32_t GTPR;  ///< Offset: 0x10 - Guard time and prescaler register
        volatile uint32_t RTOR;  ///< Offset: 0x14 - Receiver timeout register
        volatile uint32_t RQR;  ///< Offset: 0x18 - Request register
        volatile uint32_t ISR;  ///< Offset: 0x1C - Interrupt & status register
        volatile uint32_t ICR;  ///< Offset: 0x20 - Interrupt flag clear register
        volatile uint32_t RDR;  ///< Offset: 0x24 - Receive data register
        volatile uint32_t TDR;  ///< Offset: 0x28 - Transmit data register
    };

    /// Peripheral instances
    inline Registers* USART1 = reinterpret_cast<Registers*>(USART1_BASE);
    inline Registers* USART2 = reinterpret_cast<Registers*>(USART2_BASE);
    inline Registers* USART3 = reinterpret_cast<Registers*>(USART3_BASE);
    inline Registers* UART4 = reinterpret_cast<Registers*>(UART4_BASE);
    inline Registers* UART5 = reinterpret_cast<Registers*>(UART5_BASE);
    inline Registers* LPUART1 = reinterpret_cast<Registers*>(LPUART1_BASE);

    // Bit definitions
    /// CR1 Register bits
    namespace cr1_bits {
        constexpr uint32_t M1 = (1U << 28);  ///< Word length
        constexpr uint32_t EOBIE = (1U << 27);  ///< End of Block interrupt enable
        constexpr uint32_t RTOIE = (1U << 26);  ///< Receiver timeout interrupt enable
        constexpr uint32_t DEAT4 = (1U << 25);  ///< Driver Enable assertion time
        constexpr uint32_t DEAT3 = (1U << 24);  ///< DEAT3
        constexpr uint32_t DEAT2 = (1U << 23);  ///< DEAT2
        constexpr uint32_t DEAT1 = (1U << 22);  ///< DEAT1
        constexpr uint32_t DEAT0 = (1U << 21);  ///< DEAT0
        constexpr uint32_t DEDT4 = (1U << 20);  ///< Driver Enable de-assertion time
        constexpr uint32_t DEDT3 = (1U << 19);  ///< DEDT3
        constexpr uint32_t DEDT2 = (1U << 18);  ///< DEDT2
        constexpr uint32_t DEDT1 = (1U << 17);  ///< DEDT1
        constexpr uint32_t DEDT0 = (1U << 16);  ///< DEDT0
        constexpr uint32_t OVER8 = (1U << 15);  ///< Oversampling mode
        constexpr uint32_t CMIE = (1U << 14);  ///< Character match interrupt enable
        constexpr uint32_t MME = (1U << 13);  ///< Mute mode enable
        constexpr uint32_t M0 = (1U << 12);  ///< Word length
        constexpr uint32_t WAKE = (1U << 11);  ///< Receiver wakeup method
        constexpr uint32_t PCE = (1U << 10);  ///< Parity control enable
        constexpr uint32_t PS = (1U << 9);  ///< Parity selection
        constexpr uint32_t PEIE = (1U << 8);  ///< PE interrupt enable
        constexpr uint32_t TXEIE = (1U << 7);  ///< interrupt enable
        constexpr uint32_t TCIE = (1U << 6);  ///< Transmission complete interrupt enable
        constexpr uint32_t RXNEIE = (1U << 5);  ///< RXNE interrupt enable
        constexpr uint32_t IDLEIE = (1U << 4);  ///< IDLE interrupt enable
        constexpr uint32_t TE = (1U << 3);  ///< Transmitter enable
        constexpr uint32_t RE = (1U << 2);  ///< Receiver enable
        constexpr uint32_t UESM = (1U << 1);  ///< USART enable in Stop mode
        constexpr uint32_t UE = (1U << 0);  ///< USART enable
    }

    /// CR2 Register bits
    namespace cr2_bits {
        constexpr uint32_t ADD4_7 = (4 << 28);  ///< Address of the USART node
        constexpr uint32_t ADD0_3 = (4 << 24);  ///< Address of the USART node
        constexpr uint32_t RTOEN = (1U << 23);  ///< Receiver timeout enable
        constexpr uint32_t ABRMOD1 = (1U << 22);  ///< Auto baud rate mode
        constexpr uint32_t ABRMOD0 = (1U << 21);  ///< ABRMOD0
        constexpr uint32_t ABREN = (1U << 20);  ///< Auto baud rate enable
        constexpr uint32_t MSBFIRST = (1U << 19);  ///< Most significant bit first
        constexpr uint32_t TAINV = (1U << 18);  ///< Binary data inversion
        constexpr uint32_t TXINV = (1U << 17);  ///< TX pin active level inversion
        constexpr uint32_t RXINV = (1U << 16);  ///< RX pin active level inversion
        constexpr uint32_t SWAP = (1U << 15);  ///< Swap TX/RX pins
        constexpr uint32_t LINEN = (1U << 14);  ///< LIN mode enable
        constexpr uint32_t STOP = (2 << 12);  ///< STOP bits
        constexpr uint32_t CLKEN = (1U << 11);  ///< Clock enable
        constexpr uint32_t CPOL = (1U << 10);  ///< Clock polarity
        constexpr uint32_t CPHA = (1U << 9);  ///< Clock phase
        constexpr uint32_t LBCL = (1U << 8);  ///< Last bit clock pulse
        constexpr uint32_t LBDIE = (1U << 6);  ///< LIN break detection interrupt enable
        constexpr uint32_t LBDL = (1U << 5);  ///< LIN break detection length
        constexpr uint32_t ADDM7 = (1U << 4);  ///< 7-bit Address Detection/4-bit Address Detection
    }

    /// CR3 Register bits
    namespace cr3_bits {
        constexpr uint32_t WUFIE = (1U << 22);  ///< Wakeup from Stop mode interrupt enable
        constexpr uint32_t WUS = (2 << 20);  ///< Wakeup from Stop mode interrupt flag selection
        constexpr uint32_t SCARCNT = (3 << 17);  ///< Smartcard auto-retry count
        constexpr uint32_t DEP = (1U << 15);  ///< Driver enable polarity selection
        constexpr uint32_t DEM = (1U << 14);  ///< Driver enable mode
        constexpr uint32_t DDRE = (1U << 13);  ///< DMA Disable on Reception Error
        constexpr uint32_t OVRDIS = (1U << 12);  ///< Overrun Disable
        constexpr uint32_t ONEBIT = (1U << 11);  ///< One sample bit method enable
        constexpr uint32_t CTSIE = (1U << 10);  ///< CTS interrupt enable
        constexpr uint32_t CTSE = (1U << 9);  ///< CTS enable
        constexpr uint32_t RTSE = (1U << 8);  ///< RTS enable
        constexpr uint32_t DMAT = (1U << 7);  ///< DMA enable transmitter
        constexpr uint32_t DMAR = (1U << 6);  ///< DMA enable receiver
        constexpr uint32_t SCEN = (1U << 5);  ///< Smartcard mode enable
        constexpr uint32_t NACK = (1U << 4);  ///< Smartcard NACK enable
        constexpr uint32_t HDSEL = (1U << 3);  ///< Half-duplex selection
        constexpr uint32_t IRLP = (1U << 2);  ///< Ir low-power
        constexpr uint32_t IREN = (1U << 1);  ///< Ir mode enable
        constexpr uint32_t EIE = (1U << 0);  ///< Error interrupt enable
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t DIV_Mantissa = (12 << 4);  ///< DIV_Mantissa
        constexpr uint32_t DIV_Fraction = (4 << 0);  ///< DIV_Fraction
    }

    /// GTPR Register bits
    namespace gtpr_bits {
        constexpr uint32_t GT = (8 << 8);  ///< Guard time value
        constexpr uint32_t PSC = (8 << 0);  ///< Prescaler value
    }

    /// RTOR Register bits
    namespace rtor_bits {
        constexpr uint32_t BLEN = (8 << 24);  ///< Block Length
        constexpr uint32_t RTO = (24 << 0);  ///< Receiver timeout value
    }

    /// RQR Register bits
    namespace rqr_bits {
        constexpr uint32_t TXFRQ = (1U << 4);  ///< Transmit data flush request
        constexpr uint32_t RXFRQ = (1U << 3);  ///< Receive data flush request
        constexpr uint32_t MMRQ = (1U << 2);  ///< Mute mode request
        constexpr uint32_t SBKRQ = (1U << 1);  ///< Send break request
        constexpr uint32_t ABRRQ = (1U << 0);  ///< Auto baud rate request
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t REACK = (1U << 22);  ///< REACK
        constexpr uint32_t TEACK = (1U << 21);  ///< TEACK
        constexpr uint32_t WUF = (1U << 20);  ///< WUF
        constexpr uint32_t RWU = (1U << 19);  ///< RWU
        constexpr uint32_t SBKF = (1U << 18);  ///< SBKF
        constexpr uint32_t CMF = (1U << 17);  ///< CMF
        constexpr uint32_t BUSY = (1U << 16);  ///< BUSY
        constexpr uint32_t ABRF = (1U << 15);  ///< ABRF
        constexpr uint32_t ABRE = (1U << 14);  ///< ABRE
        constexpr uint32_t EOBF = (1U << 12);  ///< EOBF
        constexpr uint32_t RTOF = (1U << 11);  ///< RTOF
        constexpr uint32_t CTS = (1U << 10);  ///< CTS
        constexpr uint32_t CTSIF = (1U << 9);  ///< CTSIF
        constexpr uint32_t LBDF = (1U << 8);  ///< LBDF
        constexpr uint32_t TXE = (1U << 7);  ///< TXE
        constexpr uint32_t TC = (1U << 6);  ///< TC
        constexpr uint32_t RXNE = (1U << 5);  ///< RXNE
        constexpr uint32_t IDLE = (1U << 4);  ///< IDLE
        constexpr uint32_t ORE = (1U << 3);  ///< ORE
        constexpr uint32_t NF = (1U << 2);  ///< NF
        constexpr uint32_t FE = (1U << 1);  ///< FE
        constexpr uint32_t PE = (1U << 0);  ///< PE
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t WUCF = (1U << 20);  ///< Wakeup from Stop mode clear flag
        constexpr uint32_t CMCF = (1U << 17);  ///< Character match clear flag
        constexpr uint32_t EOBCF = (1U << 12);  ///< End of block clear flag
        constexpr uint32_t RTOCF = (1U << 11);  ///< Receiver timeout clear flag
        constexpr uint32_t CTSCF = (1U << 9);  ///< CTS clear flag
        constexpr uint32_t LBDCF = (1U << 8);  ///< LIN break detection clear flag
        constexpr uint32_t TCCF = (1U << 6);  ///< Transmission complete clear flag
        constexpr uint32_t IDLECF = (1U << 4);  ///< Idle line detected clear flag
        constexpr uint32_t ORECF = (1U << 3);  ///< Overrun error clear flag
        constexpr uint32_t NCF = (1U << 2);  ///< Noise detected clear flag
        constexpr uint32_t FECF = (1U << 1);  ///< Framing error clear flag
        constexpr uint32_t PECF = (1U << 0);  ///< Parity error clear flag
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t RDR = (9 << 0);  ///< Receive data value
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t TDR = (9 << 0);  ///< Transmit data value
    }

}

// ============================================================================
// SDIO Peripheral
// ============================================================================

namespace sdio {
    /// Base addresses
    constexpr uint32_t SDMMC1_BASE = 0x50062400;

    /// SDIO Register structure
    struct Registers {
        volatile uint32_t POWER;  ///< Offset: 0x00 - power control register
        volatile uint32_t CLKCR;  ///< Offset: 0x04 - SDI clock control register
        volatile uint32_t ARG;  ///< Offset: 0x08 - argument register
        volatile uint32_t CMD;  ///< Offset: 0x0C - command register
        volatile uint32_t RESPCMD;  ///< Offset: 0x10 - command response register
        volatile uint32_t RESP1;  ///< Offset: 0x14 - response 1..4 register
        volatile uint32_t RESP2;  ///< Offset: 0x18 - response 1..4 register
        volatile uint32_t RESP3;  ///< Offset: 0x1C - response 1..4 register
        volatile uint32_t RESP4;  ///< Offset: 0x20 - response 1..4 register
        volatile uint32_t DTIMER;  ///< Offset: 0x24 - data timer register
        volatile uint32_t DLEN;  ///< Offset: 0x28 - data length register
        volatile uint32_t DCTRL;  ///< Offset: 0x2C - data control register
        volatile uint32_t DCOUNT;  ///< Offset: 0x30 - data counter register
        volatile uint32_t STA;  ///< Offset: 0x34 - status register
        volatile uint32_t ICR;  ///< Offset: 0x38 - interrupt clear register
        volatile uint32_t MASK;  ///< Offset: 0x3C - mask register
        volatile uint32_t FIFOCNT;  ///< Offset: 0x48 - FIFO counter register
        volatile uint32_t FIFO;  ///< Offset: 0x80 - data FIFO register
    };

    /// Peripheral instances
    inline Registers* SDMMC1 = reinterpret_cast<Registers*>(SDMMC1_BASE);

    // Bit definitions
    /// POWER Register bits
    namespace power_bits {
        constexpr uint32_t PWRCTRL = (2 << 0);  ///< PWRCTRL
    }

    /// CLKCR Register bits
    namespace clkcr_bits {
        constexpr uint32_t HWFC_EN = (1U << 14);  ///< HW Flow Control enable
        constexpr uint32_t NEGEDGE = (1U << 13);  ///< SDIO_CK dephasing selection bit
        constexpr uint32_t WIDBUS = (2 << 11);  ///< Wide bus mode enable bit
        constexpr uint32_t BYPASS = (1U << 10);  ///< Clock divider bypass enable bit
        constexpr uint32_t PWRSAV = (1U << 9);  ///< Power saving configuration bit
        constexpr uint32_t CLKEN = (1U << 8);  ///< Clock enable bit
        constexpr uint32_t CLKDIV = (8 << 0);  ///< Clock divide factor
    }

    /// ARG Register bits
    namespace arg_bits {
        constexpr uint32_t CMDARG = (32 << 0);  ///< Command argument
    }

    /// CMD Register bits
    namespace cmd_bits {
        constexpr uint32_t CE_ATACMD = (1U << 14);  ///< CE-ATA command
        constexpr uint32_t nIEN = (1U << 13);  ///< not Interrupt Enable
        constexpr uint32_t ENCMDcompl = (1U << 12);  ///< Enable CMD completion
        constexpr uint32_t SDIOSuspend = (1U << 11);  ///< SD I/O suspend command
        constexpr uint32_t CPSMEN = (1U << 10);  ///< Command path state machine (CPSM) Enable bit
        constexpr uint32_t WAITPEND = (1U << 9);  ///< CPSM Waits for ends of data transfer (CmdPend internal signal)
        constexpr uint32_t WAITINT = (1U << 8);  ///< CPSM waits for interrupt request
        constexpr uint32_t WAITRESP = (2 << 6);  ///< Wait for response bits
        constexpr uint32_t CMDINDEX = (6 << 0);  ///< Command index
    }

    /// RESPCMD Register bits
    namespace respcmd_bits {
        constexpr uint32_t RESPCMD = (6 << 0);  ///< Response command index
    }

    /// RESP1 Register bits
    namespace resp1_bits {
        constexpr uint32_t CARDSTATUS1 = (32 << 0);  ///< see Table 132
    }

    /// RESP2 Register bits
    namespace resp2_bits {
        constexpr uint32_t CARDSTATUS2 = (32 << 0);  ///< see Table 132
    }

    /// RESP3 Register bits
    namespace resp3_bits {
        constexpr uint32_t CARDSTATUS3 = (32 << 0);  ///< see Table 132
    }

    /// RESP4 Register bits
    namespace resp4_bits {
        constexpr uint32_t CARDSTATUS4 = (32 << 0);  ///< see Table 132
    }

    /// DTIMER Register bits
    namespace dtimer_bits {
        constexpr uint32_t DATATIME = (32 << 0);  ///< Data timeout period
    }

    /// DLEN Register bits
    namespace dlen_bits {
        constexpr uint32_t DATALENGTH = (25 << 0);  ///< Data length value
    }

    /// DCTRL Register bits
    namespace dctrl_bits {
        constexpr uint32_t SDIOEN = (1U << 11);  ///< SD I/O enable functions
        constexpr uint32_t RWMOD = (1U << 10);  ///< Read wait mode
        constexpr uint32_t RWSTOP = (1U << 9);  ///< Read wait stop
        constexpr uint32_t RWSTART = (1U << 8);  ///< Read wait start
        constexpr uint32_t DBLOCKSIZE = (4 << 4);  ///< Data block size
        constexpr uint32_t DMAEN = (1U << 3);  ///< DMA enable bit
        constexpr uint32_t DTMODE = (1U << 2);  ///< Data transfer mode selection 1: Stream or SDIO multibyte data transfer
        constexpr uint32_t DTDIR = (1U << 1);  ///< Data transfer direction selection
        constexpr uint32_t DTEN = (1U << 0);  ///< DTEN
    }

    /// DCOUNT Register bits
    namespace dcount_bits {
        constexpr uint32_t DATACOUNT = (25 << 0);  ///< Data count value
    }

    /// STA Register bits
    namespace sta_bits {
        constexpr uint32_t CEATAEND = (1U << 23);  ///< CE-ATA command completion signal received for CMD61
        constexpr uint32_t SDIOIT = (1U << 22);  ///< SDIO interrupt received
        constexpr uint32_t RXDAVL = (1U << 21);  ///< Data available in receive FIFO
        constexpr uint32_t TXDAVL = (1U << 20);  ///< Data available in transmit FIFO
        constexpr uint32_t RXFIFOE = (1U << 19);  ///< Receive FIFO empty
        constexpr uint32_t TXFIFOE = (1U << 18);  ///< Transmit FIFO empty
        constexpr uint32_t RXFIFOF = (1U << 17);  ///< Receive FIFO full
        constexpr uint32_t TXFIFOF = (1U << 16);  ///< Transmit FIFO full
        constexpr uint32_t RXFIFOHF = (1U << 15);  ///< Receive FIFO half full: there are at least 8 words in the FIFO
        constexpr uint32_t TXFIFOHE = (1U << 14);  ///< Transmit FIFO half empty: at least 8 words can be written into the FIFO
        constexpr uint32_t RXACT = (1U << 13);  ///< Data receive in progress
        constexpr uint32_t TXACT = (1U << 12);  ///< Data transmit in progress
        constexpr uint32_t CMDACT = (1U << 11);  ///< Command transfer in progress
        constexpr uint32_t DBCKEND = (1U << 10);  ///< Data block sent/received (CRC check passed)
        constexpr uint32_t STBITERR = (1U << 9);  ///< Start bit not detected on all data signals in wide bus mode
        constexpr uint32_t DATAEND = (1U << 8);  ///< Data end (data counter, SDIDCOUNT, is zero)
        constexpr uint32_t CMDSENT = (1U << 7);  ///< Command sent (no response required)
        constexpr uint32_t CMDREND = (1U << 6);  ///< Command response received (CRC check passed)
        constexpr uint32_t RXOVERR = (1U << 5);  ///< Received FIFO overrun error
        constexpr uint32_t TXUNDERR = (1U << 4);  ///< Transmit FIFO underrun error
        constexpr uint32_t DTIMEOUT = (1U << 3);  ///< Data timeout
        constexpr uint32_t CTIMEOUT = (1U << 2);  ///< Command response timeout
        constexpr uint32_t DCRCFAIL = (1U << 1);  ///< Data block sent/received (CRC check failed)
        constexpr uint32_t CCRCFAIL = (1U << 0);  ///< Command response received (CRC check failed)
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t CEATAENDC = (1U << 23);  ///< CEATAEND flag clear bit
        constexpr uint32_t SDIOITC = (1U << 22);  ///< SDIOIT flag clear bit
        constexpr uint32_t DBCKENDC = (1U << 10);  ///< DBCKEND flag clear bit
        constexpr uint32_t STBITERRC = (1U << 9);  ///< STBITERR flag clear bit
        constexpr uint32_t DATAENDC = (1U << 8);  ///< DATAEND flag clear bit
        constexpr uint32_t CMDSENTC = (1U << 7);  ///< CMDSENT flag clear bit
        constexpr uint32_t CMDRENDC = (1U << 6);  ///< CMDREND flag clear bit
        constexpr uint32_t RXOVERRC = (1U << 5);  ///< RXOVERR flag clear bit
        constexpr uint32_t TXUNDERRC = (1U << 4);  ///< TXUNDERR flag clear bit
        constexpr uint32_t DTIMEOUTC = (1U << 3);  ///< DTIMEOUT flag clear bit
        constexpr uint32_t CTIMEOUTC = (1U << 2);  ///< CTIMEOUT flag clear bit
        constexpr uint32_t DCRCFAILC = (1U << 1);  ///< DCRCFAIL flag clear bit
        constexpr uint32_t CCRCFAILC = (1U << 0);  ///< CCRCFAIL flag clear bit
    }

    /// MASK Register bits
    namespace mask_bits {
        constexpr uint32_t CEATAENDIE = (1U << 23);  ///< CE-ATA command completion signal received interrupt enable
        constexpr uint32_t SDIOITIE = (1U << 22);  ///< SDIO mode interrupt received interrupt enable
        constexpr uint32_t RXDAVLIE = (1U << 21);  ///< Data available in Rx FIFO interrupt enable
        constexpr uint32_t TXDAVLIE = (1U << 20);  ///< Data available in Tx FIFO interrupt enable
        constexpr uint32_t RXFIFOEIE = (1U << 19);  ///< Rx FIFO empty interrupt enable
        constexpr uint32_t TXFIFOEIE = (1U << 18);  ///< Tx FIFO empty interrupt enable
        constexpr uint32_t RXFIFOFIE = (1U << 17);  ///< Rx FIFO full interrupt enable
        constexpr uint32_t TXFIFOFIE = (1U << 16);  ///< Tx FIFO full interrupt enable
        constexpr uint32_t RXFIFOHFIE = (1U << 15);  ///< Rx FIFO half full interrupt enable
        constexpr uint32_t TXFIFOHEIE = (1U << 14);  ///< Tx FIFO half empty interrupt enable
        constexpr uint32_t RXACTIE = (1U << 13);  ///< Data receive acting interrupt enable
        constexpr uint32_t TXACTIE = (1U << 12);  ///< Data transmit acting interrupt enable
        constexpr uint32_t CMDACTIE = (1U << 11);  ///< Command acting interrupt enable
        constexpr uint32_t DBCKENDIE = (1U << 10);  ///< Data block end interrupt enable
        constexpr uint32_t STBITERRIE = (1U << 9);  ///< Start bit error interrupt enable
        constexpr uint32_t DATAENDIE = (1U << 8);  ///< Data end interrupt enable
        constexpr uint32_t CMDSENTIE = (1U << 7);  ///< Command sent interrupt enable
        constexpr uint32_t CMDRENDIE = (1U << 6);  ///< Command response received interrupt enable
        constexpr uint32_t RXOVERRIE = (1U << 5);  ///< Rx FIFO overrun error interrupt enable
        constexpr uint32_t TXUNDERRIE = (1U << 4);  ///< Tx FIFO underrun error interrupt enable
        constexpr uint32_t DTIMEOUTIE = (1U << 3);  ///< Data timeout interrupt enable
        constexpr uint32_t CTIMEOUTIE = (1U << 2);  ///< Command timeout interrupt enable
        constexpr uint32_t DCRCFAILIE = (1U << 1);  ///< Data CRC fail interrupt enable
        constexpr uint32_t CCRCFAILIE = (1U << 0);  ///< Command CRC fail interrupt enable
    }

    /// FIFOCNT Register bits
    namespace fifocnt_bits {
        constexpr uint32_t FIFOCOUNT = (24 << 0);  ///< Remaining number of words to be written to or read from the FIFO
    }

    /// FIFO Register bits
    namespace fifo_bits {
        constexpr uint32_t FIFOData = (32 << 0);  ///< Receive and transmit FIFO data
    }

}

// ============================================================================
// EXTI Peripheral
// ============================================================================

namespace exti {
    /// Base addresses
    constexpr uint32_t EXTI_BASE = 0x40010400;

    /// EXTI Register structure
    struct Registers {
        volatile uint32_t IMR1;  ///< Offset: 0x00 - Interrupt mask register
        volatile uint32_t EMR1;  ///< Offset: 0x04 - Event mask register
        volatile uint32_t RTSR1;  ///< Offset: 0x08 - Rising Trigger selection register
        volatile uint32_t FTSR1;  ///< Offset: 0x0C - Falling Trigger selection register
        volatile uint32_t SWIER1;  ///< Offset: 0x10 - Software interrupt event register
        volatile uint32_t PR1;  ///< Offset: 0x14 - Pending register
        volatile uint32_t IMR2;  ///< Offset: 0x20 - Interrupt mask register
        volatile uint32_t EMR2;  ///< Offset: 0x24 - Event mask register
        volatile uint32_t RTSR2;  ///< Offset: 0x28 - Rising Trigger selection register
        volatile uint32_t FTSR2;  ///< Offset: 0x2C - Falling Trigger selection register
        volatile uint32_t SWIER2;  ///< Offset: 0x30 - Software interrupt event register
        volatile uint32_t PR2;  ///< Offset: 0x34 - Pending register
    };

    /// Peripheral instances
    inline Registers* EXTI = reinterpret_cast<Registers*>(EXTI_BASE);

    // Bit definitions
    /// IMR1 Register bits
    namespace imr1_bits {
        constexpr uint32_t MR0 = (1U << 0);  ///< Interrupt Mask on line 0
        constexpr uint32_t MR1 = (1U << 1);  ///< Interrupt Mask on line 1
        constexpr uint32_t MR2 = (1U << 2);  ///< Interrupt Mask on line 2
        constexpr uint32_t MR3 = (1U << 3);  ///< Interrupt Mask on line 3
        constexpr uint32_t MR4 = (1U << 4);  ///< Interrupt Mask on line 4
        constexpr uint32_t MR5 = (1U << 5);  ///< Interrupt Mask on line 5
        constexpr uint32_t MR6 = (1U << 6);  ///< Interrupt Mask on line 6
        constexpr uint32_t MR7 = (1U << 7);  ///< Interrupt Mask on line 7
        constexpr uint32_t MR8 = (1U << 8);  ///< Interrupt Mask on line 8
        constexpr uint32_t MR9 = (1U << 9);  ///< Interrupt Mask on line 9
        constexpr uint32_t MR10 = (1U << 10);  ///< Interrupt Mask on line 10
        constexpr uint32_t MR11 = (1U << 11);  ///< Interrupt Mask on line 11
        constexpr uint32_t MR12 = (1U << 12);  ///< Interrupt Mask on line 12
        constexpr uint32_t MR13 = (1U << 13);  ///< Interrupt Mask on line 13
        constexpr uint32_t MR14 = (1U << 14);  ///< Interrupt Mask on line 14
        constexpr uint32_t MR15 = (1U << 15);  ///< Interrupt Mask on line 15
        constexpr uint32_t MR16 = (1U << 16);  ///< Interrupt Mask on line 16
        constexpr uint32_t MR17 = (1U << 17);  ///< Interrupt Mask on line 17
        constexpr uint32_t MR18 = (1U << 18);  ///< Interrupt Mask on line 18
        constexpr uint32_t MR19 = (1U << 19);  ///< Interrupt Mask on line 19
        constexpr uint32_t MR20 = (1U << 20);  ///< Interrupt Mask on line 20
        constexpr uint32_t MR21 = (1U << 21);  ///< Interrupt Mask on line 21
        constexpr uint32_t MR22 = (1U << 22);  ///< Interrupt Mask on line 22
        constexpr uint32_t MR23 = (1U << 23);  ///< Interrupt Mask on line 23
        constexpr uint32_t MR24 = (1U << 24);  ///< Interrupt Mask on line 24
        constexpr uint32_t MR25 = (1U << 25);  ///< Interrupt Mask on line 25
        constexpr uint32_t MR26 = (1U << 26);  ///< Interrupt Mask on line 26
        constexpr uint32_t MR27 = (1U << 27);  ///< Interrupt Mask on line 27
        constexpr uint32_t MR28 = (1U << 28);  ///< Interrupt Mask on line 28
        constexpr uint32_t MR29 = (1U << 29);  ///< Interrupt Mask on line 29
        constexpr uint32_t MR30 = (1U << 30);  ///< Interrupt Mask on line 30
        constexpr uint32_t MR31 = (1U << 31);  ///< Interrupt Mask on line 31
    }

    /// EMR1 Register bits
    namespace emr1_bits {
        constexpr uint32_t MR0 = (1U << 0);  ///< Event Mask on line 0
        constexpr uint32_t MR1 = (1U << 1);  ///< Event Mask on line 1
        constexpr uint32_t MR2 = (1U << 2);  ///< Event Mask on line 2
        constexpr uint32_t MR3 = (1U << 3);  ///< Event Mask on line 3
        constexpr uint32_t MR4 = (1U << 4);  ///< Event Mask on line 4
        constexpr uint32_t MR5 = (1U << 5);  ///< Event Mask on line 5
        constexpr uint32_t MR6 = (1U << 6);  ///< Event Mask on line 6
        constexpr uint32_t MR7 = (1U << 7);  ///< Event Mask on line 7
        constexpr uint32_t MR8 = (1U << 8);  ///< Event Mask on line 8
        constexpr uint32_t MR9 = (1U << 9);  ///< Event Mask on line 9
        constexpr uint32_t MR10 = (1U << 10);  ///< Event Mask on line 10
        constexpr uint32_t MR11 = (1U << 11);  ///< Event Mask on line 11
        constexpr uint32_t MR12 = (1U << 12);  ///< Event Mask on line 12
        constexpr uint32_t MR13 = (1U << 13);  ///< Event Mask on line 13
        constexpr uint32_t MR14 = (1U << 14);  ///< Event Mask on line 14
        constexpr uint32_t MR15 = (1U << 15);  ///< Event Mask on line 15
        constexpr uint32_t MR16 = (1U << 16);  ///< Event Mask on line 16
        constexpr uint32_t MR17 = (1U << 17);  ///< Event Mask on line 17
        constexpr uint32_t MR18 = (1U << 18);  ///< Event Mask on line 18
        constexpr uint32_t MR19 = (1U << 19);  ///< Event Mask on line 19
        constexpr uint32_t MR20 = (1U << 20);  ///< Event Mask on line 20
        constexpr uint32_t MR21 = (1U << 21);  ///< Event Mask on line 21
        constexpr uint32_t MR22 = (1U << 22);  ///< Event Mask on line 22
        constexpr uint32_t MR23 = (1U << 23);  ///< Event Mask on line 23
        constexpr uint32_t MR24 = (1U << 24);  ///< Event Mask on line 24
        constexpr uint32_t MR25 = (1U << 25);  ///< Event Mask on line 25
        constexpr uint32_t MR26 = (1U << 26);  ///< Event Mask on line 26
        constexpr uint32_t MR27 = (1U << 27);  ///< Event Mask on line 27
        constexpr uint32_t MR28 = (1U << 28);  ///< Event Mask on line 28
        constexpr uint32_t MR29 = (1U << 29);  ///< Event Mask on line 29
        constexpr uint32_t MR30 = (1U << 30);  ///< Event Mask on line 30
        constexpr uint32_t MR31 = (1U << 31);  ///< Event Mask on line 31
    }

    /// RTSR1 Register bits
    namespace rtsr1_bits {
        constexpr uint32_t TR0 = (1U << 0);  ///< Rising trigger event configuration of line 0
        constexpr uint32_t TR1 = (1U << 1);  ///< Rising trigger event configuration of line 1
        constexpr uint32_t TR2 = (1U << 2);  ///< Rising trigger event configuration of line 2
        constexpr uint32_t TR3 = (1U << 3);  ///< Rising trigger event configuration of line 3
        constexpr uint32_t TR4 = (1U << 4);  ///< Rising trigger event configuration of line 4
        constexpr uint32_t TR5 = (1U << 5);  ///< Rising trigger event configuration of line 5
        constexpr uint32_t TR6 = (1U << 6);  ///< Rising trigger event configuration of line 6
        constexpr uint32_t TR7 = (1U << 7);  ///< Rising trigger event configuration of line 7
        constexpr uint32_t TR8 = (1U << 8);  ///< Rising trigger event configuration of line 8
        constexpr uint32_t TR9 = (1U << 9);  ///< Rising trigger event configuration of line 9
        constexpr uint32_t TR10 = (1U << 10);  ///< Rising trigger event configuration of line 10
        constexpr uint32_t TR11 = (1U << 11);  ///< Rising trigger event configuration of line 11
        constexpr uint32_t TR12 = (1U << 12);  ///< Rising trigger event configuration of line 12
        constexpr uint32_t TR13 = (1U << 13);  ///< Rising trigger event configuration of line 13
        constexpr uint32_t TR14 = (1U << 14);  ///< Rising trigger event configuration of line 14
        constexpr uint32_t TR15 = (1U << 15);  ///< Rising trigger event configuration of line 15
        constexpr uint32_t TR16 = (1U << 16);  ///< Rising trigger event configuration of line 16
        constexpr uint32_t TR18 = (1U << 18);  ///< Rising trigger event configuration of line 18
        constexpr uint32_t TR19 = (1U << 19);  ///< Rising trigger event configuration of line 19
        constexpr uint32_t TR20 = (1U << 20);  ///< Rising trigger event configuration of line 20
        constexpr uint32_t TR21 = (1U << 21);  ///< Rising trigger event configuration of line 21
        constexpr uint32_t TR22 = (1U << 22);  ///< Rising trigger event configuration of line 22
    }

    /// FTSR1 Register bits
    namespace ftsr1_bits {
        constexpr uint32_t TR0 = (1U << 0);  ///< Falling trigger event configuration of line 0
        constexpr uint32_t TR1 = (1U << 1);  ///< Falling trigger event configuration of line 1
        constexpr uint32_t TR2 = (1U << 2);  ///< Falling trigger event configuration of line 2
        constexpr uint32_t TR3 = (1U << 3);  ///< Falling trigger event configuration of line 3
        constexpr uint32_t TR4 = (1U << 4);  ///< Falling trigger event configuration of line 4
        constexpr uint32_t TR5 = (1U << 5);  ///< Falling trigger event configuration of line 5
        constexpr uint32_t TR6 = (1U << 6);  ///< Falling trigger event configuration of line 6
        constexpr uint32_t TR7 = (1U << 7);  ///< Falling trigger event configuration of line 7
        constexpr uint32_t TR8 = (1U << 8);  ///< Falling trigger event configuration of line 8
        constexpr uint32_t TR9 = (1U << 9);  ///< Falling trigger event configuration of line 9
        constexpr uint32_t TR10 = (1U << 10);  ///< Falling trigger event configuration of line 10
        constexpr uint32_t TR11 = (1U << 11);  ///< Falling trigger event configuration of line 11
        constexpr uint32_t TR12 = (1U << 12);  ///< Falling trigger event configuration of line 12
        constexpr uint32_t TR13 = (1U << 13);  ///< Falling trigger event configuration of line 13
        constexpr uint32_t TR14 = (1U << 14);  ///< Falling trigger event configuration of line 14
        constexpr uint32_t TR15 = (1U << 15);  ///< Falling trigger event configuration of line 15
        constexpr uint32_t TR16 = (1U << 16);  ///< Falling trigger event configuration of line 16
        constexpr uint32_t TR18 = (1U << 18);  ///< Falling trigger event configuration of line 18
        constexpr uint32_t TR19 = (1U << 19);  ///< Falling trigger event configuration of line 19
        constexpr uint32_t TR20 = (1U << 20);  ///< Falling trigger event configuration of line 20
        constexpr uint32_t TR21 = (1U << 21);  ///< Falling trigger event configuration of line 21
        constexpr uint32_t TR22 = (1U << 22);  ///< Falling trigger event configuration of line 22
    }

    /// SWIER1 Register bits
    namespace swier1_bits {
        constexpr uint32_t SWIER0 = (1U << 0);  ///< Software Interrupt on line 0
        constexpr uint32_t SWIER1 = (1U << 1);  ///< Software Interrupt on line 1
        constexpr uint32_t SWIER2 = (1U << 2);  ///< Software Interrupt on line 2
        constexpr uint32_t SWIER3 = (1U << 3);  ///< Software Interrupt on line 3
        constexpr uint32_t SWIER4 = (1U << 4);  ///< Software Interrupt on line 4
        constexpr uint32_t SWIER5 = (1U << 5);  ///< Software Interrupt on line 5
        constexpr uint32_t SWIER6 = (1U << 6);  ///< Software Interrupt on line 6
        constexpr uint32_t SWIER7 = (1U << 7);  ///< Software Interrupt on line 7
        constexpr uint32_t SWIER8 = (1U << 8);  ///< Software Interrupt on line 8
        constexpr uint32_t SWIER9 = (1U << 9);  ///< Software Interrupt on line 9
        constexpr uint32_t SWIER10 = (1U << 10);  ///< Software Interrupt on line 10
        constexpr uint32_t SWIER11 = (1U << 11);  ///< Software Interrupt on line 11
        constexpr uint32_t SWIER12 = (1U << 12);  ///< Software Interrupt on line 12
        constexpr uint32_t SWIER13 = (1U << 13);  ///< Software Interrupt on line 13
        constexpr uint32_t SWIER14 = (1U << 14);  ///< Software Interrupt on line 14
        constexpr uint32_t SWIER15 = (1U << 15);  ///< Software Interrupt on line 15
        constexpr uint32_t SWIER16 = (1U << 16);  ///< Software Interrupt on line 16
        constexpr uint32_t SWIER18 = (1U << 18);  ///< Software Interrupt on line 18
        constexpr uint32_t SWIER19 = (1U << 19);  ///< Software Interrupt on line 19
        constexpr uint32_t SWIER20 = (1U << 20);  ///< Software Interrupt on line 20
        constexpr uint32_t SWIER21 = (1U << 21);  ///< Software Interrupt on line 21
        constexpr uint32_t SWIER22 = (1U << 22);  ///< Software Interrupt on line 22
    }

    /// PR1 Register bits
    namespace pr1_bits {
        constexpr uint32_t PR0 = (1U << 0);  ///< Pending bit 0
        constexpr uint32_t PR1 = (1U << 1);  ///< Pending bit 1
        constexpr uint32_t PR2 = (1U << 2);  ///< Pending bit 2
        constexpr uint32_t PR3 = (1U << 3);  ///< Pending bit 3
        constexpr uint32_t PR4 = (1U << 4);  ///< Pending bit 4
        constexpr uint32_t PR5 = (1U << 5);  ///< Pending bit 5
        constexpr uint32_t PR6 = (1U << 6);  ///< Pending bit 6
        constexpr uint32_t PR7 = (1U << 7);  ///< Pending bit 7
        constexpr uint32_t PR8 = (1U << 8);  ///< Pending bit 8
        constexpr uint32_t PR9 = (1U << 9);  ///< Pending bit 9
        constexpr uint32_t PR10 = (1U << 10);  ///< Pending bit 10
        constexpr uint32_t PR11 = (1U << 11);  ///< Pending bit 11
        constexpr uint32_t PR12 = (1U << 12);  ///< Pending bit 12
        constexpr uint32_t PR13 = (1U << 13);  ///< Pending bit 13
        constexpr uint32_t PR14 = (1U << 14);  ///< Pending bit 14
        constexpr uint32_t PR15 = (1U << 15);  ///< Pending bit 15
        constexpr uint32_t PR16 = (1U << 16);  ///< Pending bit 16
        constexpr uint32_t PR18 = (1U << 18);  ///< Pending bit 18
        constexpr uint32_t PR19 = (1U << 19);  ///< Pending bit 19
        constexpr uint32_t PR20 = (1U << 20);  ///< Pending bit 20
        constexpr uint32_t PR21 = (1U << 21);  ///< Pending bit 21
        constexpr uint32_t PR22 = (1U << 22);  ///< Pending bit 22
    }

    /// IMR2 Register bits
    namespace imr2_bits {
        constexpr uint32_t MR32 = (1U << 0);  ///< Interrupt Mask on external/internal line 32
        constexpr uint32_t MR33 = (1U << 1);  ///< Interrupt Mask on external/internal line 33
        constexpr uint32_t MR34 = (1U << 2);  ///< Interrupt Mask on external/internal line 34
        constexpr uint32_t MR35 = (1U << 3);  ///< Interrupt Mask on external/internal line 35
        constexpr uint32_t MR36 = (1U << 4);  ///< Interrupt Mask on external/internal line 36
        constexpr uint32_t MR37 = (1U << 5);  ///< Interrupt Mask on external/internal line 37
        constexpr uint32_t MR38 = (1U << 6);  ///< Interrupt Mask on external/internal line 38
        constexpr uint32_t MR39 = (1U << 7);  ///< Interrupt Mask on external/internal line 39
    }

    /// EMR2 Register bits
    namespace emr2_bits {
        constexpr uint32_t MR32 = (1U << 0);  ///< Event mask on external/internal line 32
        constexpr uint32_t MR33 = (1U << 1);  ///< Event mask on external/internal line 33
        constexpr uint32_t MR34 = (1U << 2);  ///< Event mask on external/internal line 34
        constexpr uint32_t MR35 = (1U << 3);  ///< Event mask on external/internal line 35
        constexpr uint32_t MR36 = (1U << 4);  ///< Event mask on external/internal line 36
        constexpr uint32_t MR37 = (1U << 5);  ///< Event mask on external/internal line 37
        constexpr uint32_t MR38 = (1U << 6);  ///< Event mask on external/internal line 38
        constexpr uint32_t MR39 = (1U << 7);  ///< Event mask on external/internal line 39
    }

    /// RTSR2 Register bits
    namespace rtsr2_bits {
        constexpr uint32_t RT35 = (1U << 3);  ///< Rising trigger event configuration bit of line 35
        constexpr uint32_t RT36 = (1U << 4);  ///< Rising trigger event configuration bit of line 36
        constexpr uint32_t RT37 = (1U << 5);  ///< Rising trigger event configuration bit of line 37
        constexpr uint32_t RT38 = (1U << 6);  ///< Rising trigger event configuration bit of line 38
    }

    /// FTSR2 Register bits
    namespace ftsr2_bits {
        constexpr uint32_t FT35 = (1U << 3);  ///< Falling trigger event configuration bit of line 35
        constexpr uint32_t FT36 = (1U << 4);  ///< Falling trigger event configuration bit of line 36
        constexpr uint32_t FT37 = (1U << 5);  ///< Falling trigger event configuration bit of line 37
        constexpr uint32_t FT38 = (1U << 6);  ///< Falling trigger event configuration bit of line 38
    }

    /// SWIER2 Register bits
    namespace swier2_bits {
        constexpr uint32_t SWI35 = (1U << 3);  ///< Software interrupt on line 35
        constexpr uint32_t SWI36 = (1U << 4);  ///< Software interrupt on line 36
        constexpr uint32_t SWI37 = (1U << 5);  ///< Software interrupt on line 37
        constexpr uint32_t SWI38 = (1U << 6);  ///< Software interrupt on line 38
    }

    /// PR2 Register bits
    namespace pr2_bits {
        constexpr uint32_t PIF35 = (1U << 3);  ///< Pending interrupt flag on line 35
        constexpr uint32_t PIF36 = (1U << 4);  ///< Pending interrupt flag on line 36
        constexpr uint32_t PIF37 = (1U << 5);  ///< Pending interrupt flag on line 37
        constexpr uint32_t PIF38 = (1U << 6);  ///< Pending interrupt flag on line 38
    }

}

// ============================================================================
// VREFBUF Peripheral
// ============================================================================

namespace vrefbuf {
    /// Base addresses
    constexpr uint32_t VREFBUF_BASE = 0x40010030;

    /// VREFBUF Register structure
    struct Registers {
        volatile uint32_t CSR;  ///< Offset: 0x00 - VREF control and status register
        volatile uint32_t CCR;  ///< Offset: 0x04 - calibration control register
    };

    /// Peripheral instances
    inline Registers* VREFBUF = reinterpret_cast<Registers*>(VREFBUF_BASE);

    // Bit definitions
    /// CSR Register bits
    namespace csr_bits {
        constexpr uint32_t ENVR = (1U << 0);  ///< Voltage reference buffer enable
        constexpr uint32_t HIZ = (1U << 1);  ///< High impedance mode
        constexpr uint32_t VRS = (1U << 2);  ///< Voltage reference scale
        constexpr uint32_t VRR = (1U << 3);  ///< Voltage reference buffer ready
    }

    /// CCR Register bits
    namespace ccr_bits {
        constexpr uint32_t TRIM = (6 << 0);  ///< Trimming code
    }

}

// ============================================================================
// CAN Peripheral
// ============================================================================

namespace can {
    /// Base addresses
    constexpr uint32_t CAN1_BASE = 0x40006400;

    /// CAN Register structure
    struct Registers {
        volatile uint32_t MCR;  ///< Offset: 0x00 - master control register
        volatile uint32_t MSR;  ///< Offset: 0x04 - master status register
        volatile uint32_t TSR;  ///< Offset: 0x08 - transmit status register
        volatile uint32_t RF0R;  ///< Offset: 0x0C - receive FIFO 0 register
        volatile uint32_t RF1R;  ///< Offset: 0x10 - receive FIFO 1 register
        volatile uint32_t IER;  ///< Offset: 0x14 - interrupt enable register
        volatile uint32_t ESR;  ///< Offset: 0x18 - interrupt enable register
        volatile uint32_t BTR;  ///< Offset: 0x1C - bit timing register
        volatile uint32_t TI0R;  ///< Offset: 0x180 - TX mailbox identifier register
        volatile uint32_t TDT0R;  ///< Offset: 0x184 - mailbox data length control and time stamp register
        volatile uint32_t TDL0R;  ///< Offset: 0x188 - mailbox data low register
        volatile uint32_t TDH0R;  ///< Offset: 0x18C - mailbox data high register
        volatile uint32_t TI1R;  ///< Offset: 0x190 - mailbox identifier register
        volatile uint32_t TDT1R;  ///< Offset: 0x194 - mailbox data length control and time stamp register
        volatile uint32_t TDL1R;  ///< Offset: 0x198 - mailbox data low register
        volatile uint32_t TDH1R;  ///< Offset: 0x19C - mailbox data high register
        volatile uint32_t TI2R;  ///< Offset: 0x1A0 - mailbox identifier register
        volatile uint32_t TDT2R;  ///< Offset: 0x1A4 - mailbox data length control and time stamp register
        volatile uint32_t TDL2R;  ///< Offset: 0x1A8 - mailbox data low register
        volatile uint32_t TDH2R;  ///< Offset: 0x1AC - mailbox data high register
        volatile uint32_t RI0R;  ///< Offset: 0x1B0 - receive FIFO mailbox identifier register
        volatile uint32_t RDT0R;  ///< Offset: 0x1B4 - mailbox data high register
        volatile uint32_t RDL0R;  ///< Offset: 0x1B8 - mailbox data high register
        volatile uint32_t RDH0R;  ///< Offset: 0x1BC - receive FIFO mailbox data high register
        volatile uint32_t RI1R;  ///< Offset: 0x1C0 - mailbox data high register
        volatile uint32_t RDT1R;  ///< Offset: 0x1C4 - mailbox data high register
        volatile uint32_t RDL1R;  ///< Offset: 0x1C8 - mailbox data high register
        volatile uint32_t RDH1R;  ///< Offset: 0x1CC - mailbox data high register
        volatile uint32_t FMR;  ///< Offset: 0x200 - filter master register
        volatile uint32_t FM1R;  ///< Offset: 0x204 - filter mode register
        volatile uint32_t FS1R;  ///< Offset: 0x20C - filter scale register
        volatile uint32_t FFA1R;  ///< Offset: 0x214 - filter FIFO assignment register
        volatile uint32_t FA1R;  ///< Offset: 0x21C - filter activation register
        volatile uint32_t F0R1;  ///< Offset: 0x240 - Filter bank 0 register 1
        volatile uint32_t F0R2;  ///< Offset: 0x244 - Filter bank 0 register 2
        volatile uint32_t F1R1;  ///< Offset: 0x248 - Filter bank 1 register 1
        volatile uint32_t F1R2;  ///< Offset: 0x24C - Filter bank 1 register 2
        volatile uint32_t F2R1;  ///< Offset: 0x250 - Filter bank 2 register 1
        volatile uint32_t F2R2;  ///< Offset: 0x254 - Filter bank 2 register 2
        volatile uint32_t F3R1;  ///< Offset: 0x258 - Filter bank 3 register 1
        volatile uint32_t F3R2;  ///< Offset: 0x25C - Filter bank 3 register 2
        volatile uint32_t F4R1;  ///< Offset: 0x260 - Filter bank 4 register 1
        volatile uint32_t F4R2;  ///< Offset: 0x264 - Filter bank 4 register 2
        volatile uint32_t F5R1;  ///< Offset: 0x268 - Filter bank 5 register 1
        volatile uint32_t F5R2;  ///< Offset: 0x26C - Filter bank 5 register 2
        volatile uint32_t F6R1;  ///< Offset: 0x270 - Filter bank 6 register 1
        volatile uint32_t F6R2;  ///< Offset: 0x274 - Filter bank 6 register 2
        volatile uint32_t F7R1;  ///< Offset: 0x278 - Filter bank 7 register 1
        volatile uint32_t F7R2;  ///< Offset: 0x27C - Filter bank 7 register 2
        volatile uint32_t F8R1;  ///< Offset: 0x280 - Filter bank 8 register 1
        volatile uint32_t F8R2;  ///< Offset: 0x284 - Filter bank 8 register 2
        volatile uint32_t F9R1;  ///< Offset: 0x288 - Filter bank 9 register 1
        volatile uint32_t F9R2;  ///< Offset: 0x28C - Filter bank 9 register 2
        volatile uint32_t F10R1;  ///< Offset: 0x290 - Filter bank 10 register 1
        volatile uint32_t F10R2;  ///< Offset: 0x294 - Filter bank 10 register 2
        volatile uint32_t F11R1;  ///< Offset: 0x298 - Filter bank 11 register 1
        volatile uint32_t F11R2;  ///< Offset: 0x29C - Filter bank 11 register 2
        volatile uint32_t F12R1;  ///< Offset: 0x2A0 - Filter bank 4 register 1
        volatile uint32_t F12R2;  ///< Offset: 0x2A4 - Filter bank 12 register 2
        volatile uint32_t F13R1;  ///< Offset: 0x2A8 - Filter bank 13 register 1
        volatile uint32_t F13R2;  ///< Offset: 0x2AC - Filter bank 13 register 2
        volatile uint32_t F14R1;  ///< Offset: 0x2B0 - Filter bank 14 register 1
        volatile uint32_t F14R2;  ///< Offset: 0x2B4 - Filter bank 14 register 2
        volatile uint32_t F15R1;  ///< Offset: 0x2B8 - Filter bank 15 register 1
        volatile uint32_t F15R2;  ///< Offset: 0x2BC - Filter bank 15 register 2
        volatile uint32_t F16R1;  ///< Offset: 0x2C0 - Filter bank 16 register 1
        volatile uint32_t F16R2;  ///< Offset: 0x2C4 - Filter bank 16 register 2
        volatile uint32_t F17R1;  ///< Offset: 0x2C8 - Filter bank 17 register 1
        volatile uint32_t F17R2;  ///< Offset: 0x2CC - Filter bank 17 register 2
        volatile uint32_t F18R1;  ///< Offset: 0x2D0 - Filter bank 18 register 1
        volatile uint32_t F18R2;  ///< Offset: 0x2D4 - Filter bank 18 register 2
        volatile uint32_t F19R1;  ///< Offset: 0x2D8 - Filter bank 19 register 1
        volatile uint32_t F19R2;  ///< Offset: 0x2DC - Filter bank 19 register 2
        volatile uint32_t F20R1;  ///< Offset: 0x2E0 - Filter bank 20 register 1
        volatile uint32_t F20R2;  ///< Offset: 0x2E4 - Filter bank 20 register 2
        volatile uint32_t F21R1;  ///< Offset: 0x2E8 - Filter bank 21 register 1
        volatile uint32_t F21R2;  ///< Offset: 0x2EC - Filter bank 21 register 2
        volatile uint32_t F22R1;  ///< Offset: 0x2F0 - Filter bank 22 register 1
        volatile uint32_t F22R2;  ///< Offset: 0x2F4 - Filter bank 22 register 2
        volatile uint32_t F23R1;  ///< Offset: 0x2F8 - Filter bank 23 register 1
        volatile uint32_t F23R2;  ///< Offset: 0x2FC - Filter bank 23 register 2
        volatile uint32_t F24R1;  ///< Offset: 0x300 - Filter bank 24 register 1
        volatile uint32_t F24R2;  ///< Offset: 0x304 - Filter bank 24 register 2
        volatile uint32_t F25R1;  ///< Offset: 0x308 - Filter bank 25 register 1
        volatile uint32_t F25R2;  ///< Offset: 0x30C - Filter bank 25 register 2
        volatile uint32_t F26R1;  ///< Offset: 0x310 - Filter bank 26 register 1
        volatile uint32_t F26R2;  ///< Offset: 0x314 - Filter bank 26 register 2
        volatile uint32_t F27R1;  ///< Offset: 0x318 - Filter bank 27 register 1
        volatile uint32_t F27R2;  ///< Offset: 0x31C - Filter bank 27 register 2
    };

    /// Peripheral instances
    inline Registers* CAN1 = reinterpret_cast<Registers*>(CAN1_BASE);

    // Bit definitions
    /// MCR Register bits
    namespace mcr_bits {
        constexpr uint32_t DBF = (1U << 16);  ///< DBF
        constexpr uint32_t RESET = (1U << 15);  ///< RESET
        constexpr uint32_t TTCM = (1U << 7);  ///< TTCM
        constexpr uint32_t ABOM = (1U << 6);  ///< ABOM
        constexpr uint32_t AWUM = (1U << 5);  ///< AWUM
        constexpr uint32_t NART = (1U << 4);  ///< NART
        constexpr uint32_t RFLM = (1U << 3);  ///< RFLM
        constexpr uint32_t TXFP = (1U << 2);  ///< TXFP
        constexpr uint32_t SLEEP = (1U << 1);  ///< SLEEP
        constexpr uint32_t INRQ = (1U << 0);  ///< INRQ
    }

    /// MSR Register bits
    namespace msr_bits {
        constexpr uint32_t RX = (1U << 11);  ///< RX
        constexpr uint32_t SAMP = (1U << 10);  ///< SAMP
        constexpr uint32_t RXM = (1U << 9);  ///< RXM
        constexpr uint32_t TXM = (1U << 8);  ///< TXM
        constexpr uint32_t SLAKI = (1U << 4);  ///< SLAKI
        constexpr uint32_t WKUI = (1U << 3);  ///< WKUI
        constexpr uint32_t ERRI = (1U << 2);  ///< ERRI
        constexpr uint32_t SLAK = (1U << 1);  ///< SLAK
        constexpr uint32_t INAK = (1U << 0);  ///< INAK
    }

    /// TSR Register bits
    namespace tsr_bits {
        constexpr uint32_t LOW2 = (1U << 31);  ///< Lowest priority flag for mailbox 2
        constexpr uint32_t LOW1 = (1U << 30);  ///< Lowest priority flag for mailbox 1
        constexpr uint32_t LOW0 = (1U << 29);  ///< Lowest priority flag for mailbox 0
        constexpr uint32_t TME2 = (1U << 28);  ///< Lowest priority flag for mailbox 2
        constexpr uint32_t TME1 = (1U << 27);  ///< Lowest priority flag for mailbox 1
        constexpr uint32_t TME0 = (1U << 26);  ///< Lowest priority flag for mailbox 0
        constexpr uint32_t CODE = (2 << 24);  ///< CODE
        constexpr uint32_t ABRQ2 = (1U << 23);  ///< ABRQ2
        constexpr uint32_t TERR2 = (1U << 19);  ///< TERR2
        constexpr uint32_t ALST2 = (1U << 18);  ///< ALST2
        constexpr uint32_t TXOK2 = (1U << 17);  ///< TXOK2
        constexpr uint32_t RQCP2 = (1U << 16);  ///< RQCP2
        constexpr uint32_t ABRQ1 = (1U << 15);  ///< ABRQ1
        constexpr uint32_t TERR1 = (1U << 11);  ///< TERR1
        constexpr uint32_t ALST1 = (1U << 10);  ///< ALST1
        constexpr uint32_t TXOK1 = (1U << 9);  ///< TXOK1
        constexpr uint32_t RQCP1 = (1U << 8);  ///< RQCP1
        constexpr uint32_t ABRQ0 = (1U << 7);  ///< ABRQ0
        constexpr uint32_t TERR0 = (1U << 3);  ///< TERR0
        constexpr uint32_t ALST0 = (1U << 2);  ///< ALST0
        constexpr uint32_t TXOK0 = (1U << 1);  ///< TXOK0
        constexpr uint32_t RQCP0 = (1U << 0);  ///< RQCP0
    }

    /// RF0R Register bits
    namespace rf0r_bits {
        constexpr uint32_t RFOM0 = (1U << 5);  ///< RFOM0
        constexpr uint32_t FOVR0 = (1U << 4);  ///< FOVR0
        constexpr uint32_t FULL0 = (1U << 3);  ///< FULL0
        constexpr uint32_t FMP0 = (2 << 0);  ///< FMP0
    }

    /// RF1R Register bits
    namespace rf1r_bits {
        constexpr uint32_t RFOM1 = (1U << 5);  ///< RFOM1
        constexpr uint32_t FOVR1 = (1U << 4);  ///< FOVR1
        constexpr uint32_t FULL1 = (1U << 3);  ///< FULL1
        constexpr uint32_t FMP1 = (2 << 0);  ///< FMP1
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t SLKIE = (1U << 17);  ///< SLKIE
        constexpr uint32_t WKUIE = (1U << 16);  ///< WKUIE
        constexpr uint32_t ERRIE = (1U << 15);  ///< ERRIE
        constexpr uint32_t LECIE = (1U << 11);  ///< LECIE
        constexpr uint32_t BOFIE = (1U << 10);  ///< BOFIE
        constexpr uint32_t EPVIE = (1U << 9);  ///< EPVIE
        constexpr uint32_t EWGIE = (1U << 8);  ///< EWGIE
        constexpr uint32_t FOVIE1 = (1U << 6);  ///< FOVIE1
        constexpr uint32_t FFIE1 = (1U << 5);  ///< FFIE1
        constexpr uint32_t FMPIE1 = (1U << 4);  ///< FMPIE1
        constexpr uint32_t FOVIE0 = (1U << 3);  ///< FOVIE0
        constexpr uint32_t FFIE0 = (1U << 2);  ///< FFIE0
        constexpr uint32_t FMPIE0 = (1U << 1);  ///< FMPIE0
        constexpr uint32_t TMEIE = (1U << 0);  ///< TMEIE
    }

    /// ESR Register bits
    namespace esr_bits {
        constexpr uint32_t REC = (8 << 24);  ///< REC
        constexpr uint32_t TEC = (8 << 16);  ///< TEC
        constexpr uint32_t LEC = (3 << 4);  ///< LEC
        constexpr uint32_t BOFF = (1U << 2);  ///< BOFF
        constexpr uint32_t EPVF = (1U << 1);  ///< EPVF
        constexpr uint32_t EWGF = (1U << 0);  ///< EWGF
    }

    /// BTR Register bits
    namespace btr_bits {
        constexpr uint32_t SILM = (1U << 31);  ///< SILM
        constexpr uint32_t LBKM = (1U << 30);  ///< LBKM
        constexpr uint32_t SJW = (2 << 24);  ///< SJW
        constexpr uint32_t TS2 = (3 << 20);  ///< TS2
        constexpr uint32_t TS1 = (4 << 16);  ///< TS1
        constexpr uint32_t BRP = (10 << 0);  ///< BRP
    }

    /// TI0R Register bits
    namespace ti0r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// TDT0R Register bits
    namespace tdt0r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// TDL0R Register bits
    namespace tdl0r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// TDH0R Register bits
    namespace tdh0r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// TI1R Register bits
    namespace ti1r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// TDT1R Register bits
    namespace tdt1r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// TDL1R Register bits
    namespace tdl1r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// TDH1R Register bits
    namespace tdh1r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// TI2R Register bits
    namespace ti2r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
        constexpr uint32_t TXRQ = (1U << 0);  ///< TXRQ
    }

    /// TDT2R Register bits
    namespace tdt2r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t TGT = (1U << 8);  ///< TGT
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// TDL2R Register bits
    namespace tdl2r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// TDH2R Register bits
    namespace tdh2r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// RI0R Register bits
    namespace ri0r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
    }

    /// RDT0R Register bits
    namespace rdt0r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t FMI = (8 << 8);  ///< FMI
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// RDL0R Register bits
    namespace rdl0r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// RDH0R Register bits
    namespace rdh0r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// RI1R Register bits
    namespace ri1r_bits {
        constexpr uint32_t STID = (11 << 21);  ///< STID
        constexpr uint32_t EXID = (18 << 3);  ///< EXID
        constexpr uint32_t IDE = (1U << 2);  ///< IDE
        constexpr uint32_t RTR = (1U << 1);  ///< RTR
    }

    /// RDT1R Register bits
    namespace rdt1r_bits {
        constexpr uint32_t TIME = (16 << 16);  ///< TIME
        constexpr uint32_t FMI = (8 << 8);  ///< FMI
        constexpr uint32_t DLC = (4 << 0);  ///< DLC
    }

    /// RDL1R Register bits
    namespace rdl1r_bits {
        constexpr uint32_t DATA3 = (8 << 24);  ///< DATA3
        constexpr uint32_t DATA2 = (8 << 16);  ///< DATA2
        constexpr uint32_t DATA1 = (8 << 8);  ///< DATA1
        constexpr uint32_t DATA0 = (8 << 0);  ///< DATA0
    }

    /// RDH1R Register bits
    namespace rdh1r_bits {
        constexpr uint32_t DATA7 = (8 << 24);  ///< DATA7
        constexpr uint32_t DATA6 = (8 << 16);  ///< DATA6
        constexpr uint32_t DATA5 = (8 << 8);  ///< DATA5
        constexpr uint32_t DATA4 = (8 << 0);  ///< DATA4
    }

    /// FMR Register bits
    namespace fmr_bits {
        constexpr uint32_t FINIT = (1U << 0);  ///< Filter initialization mode
        constexpr uint32_t CANSB = (6 << 8);  ///< CAN start bank
    }

    /// FM1R Register bits
    namespace fm1r_bits {
        constexpr uint32_t FBM0 = (1U << 0);  ///< Filter mode
        constexpr uint32_t FBM1 = (1U << 1);  ///< Filter mode
        constexpr uint32_t FBM2 = (1U << 2);  ///< Filter mode
        constexpr uint32_t FBM3 = (1U << 3);  ///< Filter mode
        constexpr uint32_t FBM4 = (1U << 4);  ///< Filter mode
        constexpr uint32_t FBM5 = (1U << 5);  ///< Filter mode
        constexpr uint32_t FBM6 = (1U << 6);  ///< Filter mode
        constexpr uint32_t FBM7 = (1U << 7);  ///< Filter mode
        constexpr uint32_t FBM8 = (1U << 8);  ///< Filter mode
        constexpr uint32_t FBM9 = (1U << 9);  ///< Filter mode
        constexpr uint32_t FBM10 = (1U << 10);  ///< Filter mode
        constexpr uint32_t FBM11 = (1U << 11);  ///< Filter mode
        constexpr uint32_t FBM12 = (1U << 12);  ///< Filter mode
        constexpr uint32_t FBM13 = (1U << 13);  ///< Filter mode
        constexpr uint32_t FBM14 = (1U << 14);  ///< Filter mode
        constexpr uint32_t FBM15 = (1U << 15);  ///< Filter mode
        constexpr uint32_t FBM16 = (1U << 16);  ///< Filter mode
        constexpr uint32_t FBM17 = (1U << 17);  ///< Filter mode
        constexpr uint32_t FBM18 = (1U << 18);  ///< Filter mode
        constexpr uint32_t FBM19 = (1U << 19);  ///< Filter mode
        constexpr uint32_t FBM20 = (1U << 20);  ///< Filter mode
        constexpr uint32_t FBM21 = (1U << 21);  ///< Filter mode
        constexpr uint32_t FBM22 = (1U << 22);  ///< Filter mode
        constexpr uint32_t FBM23 = (1U << 23);  ///< Filter mode
        constexpr uint32_t FBM24 = (1U << 24);  ///< Filter mode
        constexpr uint32_t FBM25 = (1U << 25);  ///< Filter mode
        constexpr uint32_t FBM26 = (1U << 26);  ///< Filter mode
        constexpr uint32_t FBM27 = (1U << 27);  ///< Filter mode
    }

    /// FS1R Register bits
    namespace fs1r_bits {
        constexpr uint32_t FSC0 = (1U << 0);  ///< Filter scale configuration
        constexpr uint32_t FSC1 = (1U << 1);  ///< Filter scale configuration
        constexpr uint32_t FSC2 = (1U << 2);  ///< Filter scale configuration
        constexpr uint32_t FSC3 = (1U << 3);  ///< Filter scale configuration
        constexpr uint32_t FSC4 = (1U << 4);  ///< Filter scale configuration
        constexpr uint32_t FSC5 = (1U << 5);  ///< Filter scale configuration
        constexpr uint32_t FSC6 = (1U << 6);  ///< Filter scale configuration
        constexpr uint32_t FSC7 = (1U << 7);  ///< Filter scale configuration
        constexpr uint32_t FSC8 = (1U << 8);  ///< Filter scale configuration
        constexpr uint32_t FSC9 = (1U << 9);  ///< Filter scale configuration
        constexpr uint32_t FSC10 = (1U << 10);  ///< Filter scale configuration
        constexpr uint32_t FSC11 = (1U << 11);  ///< Filter scale configuration
        constexpr uint32_t FSC12 = (1U << 12);  ///< Filter scale configuration
        constexpr uint32_t FSC13 = (1U << 13);  ///< Filter scale configuration
        constexpr uint32_t FSC14 = (1U << 14);  ///< Filter scale configuration
        constexpr uint32_t FSC15 = (1U << 15);  ///< Filter scale configuration
        constexpr uint32_t FSC16 = (1U << 16);  ///< Filter scale configuration
        constexpr uint32_t FSC17 = (1U << 17);  ///< Filter scale configuration
        constexpr uint32_t FSC18 = (1U << 18);  ///< Filter scale configuration
        constexpr uint32_t FSC19 = (1U << 19);  ///< Filter scale configuration
        constexpr uint32_t FSC20 = (1U << 20);  ///< Filter scale configuration
        constexpr uint32_t FSC21 = (1U << 21);  ///< Filter scale configuration
        constexpr uint32_t FSC22 = (1U << 22);  ///< Filter scale configuration
        constexpr uint32_t FSC23 = (1U << 23);  ///< Filter scale configuration
        constexpr uint32_t FSC24 = (1U << 24);  ///< Filter scale configuration
        constexpr uint32_t FSC25 = (1U << 25);  ///< Filter scale configuration
        constexpr uint32_t FSC26 = (1U << 26);  ///< Filter scale configuration
        constexpr uint32_t FSC27 = (1U << 27);  ///< Filter scale configuration
    }

    /// FFA1R Register bits
    namespace ffa1r_bits {
        constexpr uint32_t FFA0 = (1U << 0);  ///< Filter FIFO assignment for filter 0
        constexpr uint32_t FFA1 = (1U << 1);  ///< Filter FIFO assignment for filter 1
        constexpr uint32_t FFA2 = (1U << 2);  ///< Filter FIFO assignment for filter 2
        constexpr uint32_t FFA3 = (1U << 3);  ///< Filter FIFO assignment for filter 3
        constexpr uint32_t FFA4 = (1U << 4);  ///< Filter FIFO assignment for filter 4
        constexpr uint32_t FFA5 = (1U << 5);  ///< Filter FIFO assignment for filter 5
        constexpr uint32_t FFA6 = (1U << 6);  ///< Filter FIFO assignment for filter 6
        constexpr uint32_t FFA7 = (1U << 7);  ///< Filter FIFO assignment for filter 7
        constexpr uint32_t FFA8 = (1U << 8);  ///< Filter FIFO assignment for filter 8
        constexpr uint32_t FFA9 = (1U << 9);  ///< Filter FIFO assignment for filter 9
        constexpr uint32_t FFA10 = (1U << 10);  ///< Filter FIFO assignment for filter 10
        constexpr uint32_t FFA11 = (1U << 11);  ///< Filter FIFO assignment for filter 11
        constexpr uint32_t FFA12 = (1U << 12);  ///< Filter FIFO assignment for filter 12
        constexpr uint32_t FFA13 = (1U << 13);  ///< Filter FIFO assignment for filter 13
        constexpr uint32_t FFA14 = (1U << 14);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA15 = (1U << 15);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA16 = (1U << 16);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA17 = (1U << 17);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA18 = (1U << 18);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA19 = (1U << 19);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA20 = (1U << 20);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA21 = (1U << 21);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA22 = (1U << 22);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA23 = (1U << 23);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA24 = (1U << 24);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA25 = (1U << 25);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA26 = (1U << 26);  ///< Filter FIFO assignment for filter
        constexpr uint32_t FFA27 = (1U << 27);  ///< Filter FIFO assignment for filter
    }

    /// FA1R Register bits
    namespace fa1r_bits {
        constexpr uint32_t FACT0 = (1U << 0);  ///< Filter active
        constexpr uint32_t FACT1 = (1U << 1);  ///< Filter active
        constexpr uint32_t FACT2 = (1U << 2);  ///< Filter active
        constexpr uint32_t FACT3 = (1U << 3);  ///< Filter active
        constexpr uint32_t FACT4 = (1U << 4);  ///< Filter active
        constexpr uint32_t FACT5 = (1U << 5);  ///< Filter active
        constexpr uint32_t FACT6 = (1U << 6);  ///< Filter active
        constexpr uint32_t FACT7 = (1U << 7);  ///< Filter active
        constexpr uint32_t FACT8 = (1U << 8);  ///< Filter active
        constexpr uint32_t FACT9 = (1U << 9);  ///< Filter active
        constexpr uint32_t FACT10 = (1U << 10);  ///< Filter active
        constexpr uint32_t FACT11 = (1U << 11);  ///< Filter active
        constexpr uint32_t FACT12 = (1U << 12);  ///< Filter active
        constexpr uint32_t FACT13 = (1U << 13);  ///< Filter active
        constexpr uint32_t FACT14 = (1U << 14);  ///< Filter active
        constexpr uint32_t FACT15 = (1U << 15);  ///< Filter active
        constexpr uint32_t FACT16 = (1U << 16);  ///< Filter active
        constexpr uint32_t FACT17 = (1U << 17);  ///< Filter active
        constexpr uint32_t FACT18 = (1U << 18);  ///< Filter active
        constexpr uint32_t FACT19 = (1U << 19);  ///< Filter active
        constexpr uint32_t FACT20 = (1U << 20);  ///< Filter active
        constexpr uint32_t FACT21 = (1U << 21);  ///< Filter active
        constexpr uint32_t FACT22 = (1U << 22);  ///< Filter active
        constexpr uint32_t FACT23 = (1U << 23);  ///< Filter active
        constexpr uint32_t FACT24 = (1U << 24);  ///< Filter active
        constexpr uint32_t FACT25 = (1U << 25);  ///< Filter active
        constexpr uint32_t FACT26 = (1U << 26);  ///< Filter active
        constexpr uint32_t FACT27 = (1U << 27);  ///< Filter active
    }

    /// F0R1 Register bits
    namespace f0r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F0R2 Register bits
    namespace f0r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F1R1 Register bits
    namespace f1r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F1R2 Register bits
    namespace f1r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F2R1 Register bits
    namespace f2r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F2R2 Register bits
    namespace f2r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F3R1 Register bits
    namespace f3r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F3R2 Register bits
    namespace f3r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F4R1 Register bits
    namespace f4r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F4R2 Register bits
    namespace f4r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F5R1 Register bits
    namespace f5r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F5R2 Register bits
    namespace f5r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F6R1 Register bits
    namespace f6r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F6R2 Register bits
    namespace f6r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F7R1 Register bits
    namespace f7r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F7R2 Register bits
    namespace f7r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F8R1 Register bits
    namespace f8r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F8R2 Register bits
    namespace f8r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F9R1 Register bits
    namespace f9r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F9R2 Register bits
    namespace f9r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F10R1 Register bits
    namespace f10r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F10R2 Register bits
    namespace f10r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F11R1 Register bits
    namespace f11r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F11R2 Register bits
    namespace f11r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F12R1 Register bits
    namespace f12r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F12R2 Register bits
    namespace f12r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F13R1 Register bits
    namespace f13r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F13R2 Register bits
    namespace f13r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F14R1 Register bits
    namespace f14r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F14R2 Register bits
    namespace f14r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F15R1 Register bits
    namespace f15r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F15R2 Register bits
    namespace f15r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F16R1 Register bits
    namespace f16r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F16R2 Register bits
    namespace f16r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F17R1 Register bits
    namespace f17r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F17R2 Register bits
    namespace f17r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F18R1 Register bits
    namespace f18r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F18R2 Register bits
    namespace f18r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F19R1 Register bits
    namespace f19r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F19R2 Register bits
    namespace f19r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F20R1 Register bits
    namespace f20r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F20R2 Register bits
    namespace f20r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F21R1 Register bits
    namespace f21r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F21R2 Register bits
    namespace f21r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F22R1 Register bits
    namespace f22r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F22R2 Register bits
    namespace f22r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F23R1 Register bits
    namespace f23r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F23R2 Register bits
    namespace f23r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F24R1 Register bits
    namespace f24r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F24R2 Register bits
    namespace f24r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F25R1 Register bits
    namespace f25r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F25R2 Register bits
    namespace f25r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F26R1 Register bits
    namespace f26r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F26R2 Register bits
    namespace f26r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F27R1 Register bits
    namespace f27r1_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

    /// F27R2 Register bits
    namespace f27r2_bits {
        constexpr uint32_t FB0 = (1U << 0);  ///< Filter bits
        constexpr uint32_t FB1 = (1U << 1);  ///< Filter bits
        constexpr uint32_t FB2 = (1U << 2);  ///< Filter bits
        constexpr uint32_t FB3 = (1U << 3);  ///< Filter bits
        constexpr uint32_t FB4 = (1U << 4);  ///< Filter bits
        constexpr uint32_t FB5 = (1U << 5);  ///< Filter bits
        constexpr uint32_t FB6 = (1U << 6);  ///< Filter bits
        constexpr uint32_t FB7 = (1U << 7);  ///< Filter bits
        constexpr uint32_t FB8 = (1U << 8);  ///< Filter bits
        constexpr uint32_t FB9 = (1U << 9);  ///< Filter bits
        constexpr uint32_t FB10 = (1U << 10);  ///< Filter bits
        constexpr uint32_t FB11 = (1U << 11);  ///< Filter bits
        constexpr uint32_t FB12 = (1U << 12);  ///< Filter bits
        constexpr uint32_t FB13 = (1U << 13);  ///< Filter bits
        constexpr uint32_t FB14 = (1U << 14);  ///< Filter bits
        constexpr uint32_t FB15 = (1U << 15);  ///< Filter bits
        constexpr uint32_t FB16 = (1U << 16);  ///< Filter bits
        constexpr uint32_t FB17 = (1U << 17);  ///< Filter bits
        constexpr uint32_t FB18 = (1U << 18);  ///< Filter bits
        constexpr uint32_t FB19 = (1U << 19);  ///< Filter bits
        constexpr uint32_t FB20 = (1U << 20);  ///< Filter bits
        constexpr uint32_t FB21 = (1U << 21);  ///< Filter bits
        constexpr uint32_t FB22 = (1U << 22);  ///< Filter bits
        constexpr uint32_t FB23 = (1U << 23);  ///< Filter bits
        constexpr uint32_t FB24 = (1U << 24);  ///< Filter bits
        constexpr uint32_t FB25 = (1U << 25);  ///< Filter bits
        constexpr uint32_t FB26 = (1U << 26);  ///< Filter bits
        constexpr uint32_t FB27 = (1U << 27);  ///< Filter bits
        constexpr uint32_t FB28 = (1U << 28);  ///< Filter bits
        constexpr uint32_t FB29 = (1U << 29);  ///< Filter bits
        constexpr uint32_t FB30 = (1U << 30);  ///< Filter bits
        constexpr uint32_t FB31 = (1U << 31);  ///< Filter bits
    }

}

// ============================================================================
// RTC Peripheral
// ============================================================================

namespace rtc {
    /// Base addresses
    constexpr uint32_t RTC_BASE = 0x40002800;

    /// RTC Register structure
    struct Registers {
        volatile uint32_t TR;  ///< Offset: 0x00 - time register
        volatile uint32_t DR;  ///< Offset: 0x04 - date register
        volatile uint32_t CR;  ///< Offset: 0x08 - control register
        volatile uint32_t ISR;  ///< Offset: 0x0C - initialization and status register
        volatile uint32_t PRER;  ///< Offset: 0x10 - prescaler register
        volatile uint32_t WUTR;  ///< Offset: 0x14 - wakeup timer register
        volatile uint32_t ALRMAR;  ///< Offset: 0x1C - alarm A register
        volatile uint32_t ALRMBR;  ///< Offset: 0x20 - alarm B register
        volatile uint32_t WPR;  ///< Offset: 0x24 - write protection register
        volatile uint32_t SSR;  ///< Offset: 0x28 - sub second register
        volatile uint32_t SHIFTR;  ///< Offset: 0x2C - shift control register
        volatile uint32_t TSTR;  ///< Offset: 0x30 - time stamp time register
        volatile uint32_t TSDR;  ///< Offset: 0x34 - time stamp date register
        volatile uint32_t TSSSR;  ///< Offset: 0x38 - timestamp sub second register
        volatile uint32_t CALR;  ///< Offset: 0x3C - calibration register
        volatile uint32_t TAMPCR;  ///< Offset: 0x40 - tamper configuration register
        volatile uint32_t ALRMASSR;  ///< Offset: 0x44 - alarm A sub second register
        volatile uint32_t ALRMBSSR;  ///< Offset: 0x48 - alarm B sub second register
        volatile uint32_t OR;  ///< Offset: 0x4C - option register
        volatile uint32_t BKP0R;  ///< Offset: 0x50 - backup register
        volatile uint32_t BKP1R;  ///< Offset: 0x54 - backup register
        volatile uint32_t BKP2R;  ///< Offset: 0x58 - backup register
        volatile uint32_t BKP3R;  ///< Offset: 0x5C - backup register
        volatile uint32_t BKP4R;  ///< Offset: 0x60 - backup register
        volatile uint32_t BKP5R;  ///< Offset: 0x64 - backup register
        volatile uint32_t BKP6R;  ///< Offset: 0x68 - backup register
        volatile uint32_t BKP7R;  ///< Offset: 0x6C - backup register
        volatile uint32_t BKP8R;  ///< Offset: 0x70 - backup register
        volatile uint32_t BKP9R;  ///< Offset: 0x74 - backup register
        volatile uint32_t BKP10R;  ///< Offset: 0x78 - backup register
        volatile uint32_t BKP11R;  ///< Offset: 0x7C - backup register
        volatile uint32_t BKP12R;  ///< Offset: 0x80 - backup register
        volatile uint32_t BKP13R;  ///< Offset: 0x84 - backup register
        volatile uint32_t BKP14R;  ///< Offset: 0x88 - backup register
        volatile uint32_t BKP15R;  ///< Offset: 0x8C - backup register
        volatile uint32_t BKP16R;  ///< Offset: 0x90 - backup register
        volatile uint32_t BKP17R;  ///< Offset: 0x94 - backup register
        volatile uint32_t BKP18R;  ///< Offset: 0x98 - backup register
        volatile uint32_t BKP19R;  ///< Offset: 0x9C - backup register
        volatile uint32_t BKP20R;  ///< Offset: 0xA0 - backup register
        volatile uint32_t BKP21R;  ///< Offset: 0xA4 - backup register
        volatile uint32_t BKP22R;  ///< Offset: 0xA8 - backup register
        volatile uint32_t BKP23R;  ///< Offset: 0xAC - backup register
        volatile uint32_t BKP24R;  ///< Offset: 0xB0 - backup register
        volatile uint32_t BKP25R;  ///< Offset: 0xB4 - backup register
        volatile uint32_t BKP26R;  ///< Offset: 0xB8 - backup register
        volatile uint32_t BKP27R;  ///< Offset: 0xBC - backup register
        volatile uint32_t BKP28R;  ///< Offset: 0xC0 - backup register
        volatile uint32_t BKP29R;  ///< Offset: 0xC4 - backup register
        volatile uint32_t BKP30R;  ///< Offset: 0xC8 - backup register
        volatile uint32_t BKP31R;  ///< Offset: 0xCC - backup register
    };

    /// Peripheral instances
    inline Registers* RTC = reinterpret_cast<Registers*>(RTC_BASE);

    // Bit definitions
    /// TR Register bits
    namespace tr_bits {
        constexpr uint32_t PM = (1U << 22);  ///< AM/PM notation
        constexpr uint32_t HT = (2 << 20);  ///< Hour tens in BCD format
        constexpr uint32_t HU = (4 << 16);  ///< Hour units in BCD format
        constexpr uint32_t MNT = (3 << 12);  ///< Minute tens in BCD format
        constexpr uint32_t MNU = (4 << 8);  ///< Minute units in BCD format
        constexpr uint32_t ST = (3 << 4);  ///< Second tens in BCD format
        constexpr uint32_t SU = (4 << 0);  ///< Second units in BCD format
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t YT = (4 << 20);  ///< Year tens in BCD format
        constexpr uint32_t YU = (4 << 16);  ///< Year units in BCD format
        constexpr uint32_t WDU = (3 << 13);  ///< Week day units
        constexpr uint32_t MT = (1U << 12);  ///< Month tens in BCD format
        constexpr uint32_t MU = (4 << 8);  ///< Month units in BCD format
        constexpr uint32_t DT = (2 << 4);  ///< Date tens in BCD format
        constexpr uint32_t DU = (4 << 0);  ///< Date units in BCD format
    }

    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t WCKSEL = (3 << 0);  ///< Wakeup clock selection
        constexpr uint32_t TSEDGE = (1U << 3);  ///< Time-stamp event active edge
        constexpr uint32_t REFCKON = (1U << 4);  ///< Reference clock detection enable (50 or 60 Hz)
        constexpr uint32_t BYPSHAD = (1U << 5);  ///< Bypass the shadow registers
        constexpr uint32_t FMT = (1U << 6);  ///< Hour format
        constexpr uint32_t ALRAE = (1U << 8);  ///< Alarm A enable
        constexpr uint32_t ALRBE = (1U << 9);  ///< Alarm B enable
        constexpr uint32_t WUTE = (1U << 10);  ///< Wakeup timer enable
        constexpr uint32_t TSE = (1U << 11);  ///< Time stamp enable
        constexpr uint32_t ALRAIE = (1U << 12);  ///< Alarm A interrupt enable
        constexpr uint32_t ALRBIE = (1U << 13);  ///< Alarm B interrupt enable
        constexpr uint32_t WUTIE = (1U << 14);  ///< Wakeup timer interrupt enable
        constexpr uint32_t TSIE = (1U << 15);  ///< Time-stamp interrupt enable
        constexpr uint32_t ADD1H = (1U << 16);  ///< Add 1 hour (summer time change)
        constexpr uint32_t SUB1H = (1U << 17);  ///< Subtract 1 hour (winter time change)
        constexpr uint32_t BKP = (1U << 18);  ///< Backup
        constexpr uint32_t COSEL = (1U << 19);  ///< Calibration output selection
        constexpr uint32_t POL = (1U << 20);  ///< Output polarity
        constexpr uint32_t OSEL = (2 << 21);  ///< Output selection
        constexpr uint32_t COE = (1U << 23);  ///< Calibration output enable
        constexpr uint32_t ITSE = (1U << 24);  ///< timestamp on internal event enable
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t ALRAWF = (1U << 0);  ///< Alarm A write flag
        constexpr uint32_t ALRBWF = (1U << 1);  ///< Alarm B write flag
        constexpr uint32_t WUTWF = (1U << 2);  ///< Wakeup timer write flag
        constexpr uint32_t SHPF = (1U << 3);  ///< Shift operation pending
        constexpr uint32_t INITS = (1U << 4);  ///< Initialization status flag
        constexpr uint32_t RSF = (1U << 5);  ///< Registers synchronization flag
        constexpr uint32_t INITF = (1U << 6);  ///< Initialization flag
        constexpr uint32_t INIT = (1U << 7);  ///< Initialization mode
        constexpr uint32_t ALRAF = (1U << 8);  ///< Alarm A flag
        constexpr uint32_t ALRBF = (1U << 9);  ///< Alarm B flag
        constexpr uint32_t WUTF = (1U << 10);  ///< Wakeup timer flag
        constexpr uint32_t TSF = (1U << 11);  ///< Time-stamp flag
        constexpr uint32_t TSOVF = (1U << 12);  ///< Time-stamp overflow flag
        constexpr uint32_t TAMP1F = (1U << 13);  ///< Tamper detection flag
        constexpr uint32_t TAMP2F = (1U << 14);  ///< RTC_TAMP2 detection flag
        constexpr uint32_t TAMP3F = (1U << 15);  ///< RTC_TAMP3 detection flag
        constexpr uint32_t RECALPF = (1U << 16);  ///< Recalibration pending Flag
    }

    /// PRER Register bits
    namespace prer_bits {
        constexpr uint32_t PREDIV_A = (7 << 16);  ///< Asynchronous prescaler factor
        constexpr uint32_t PREDIV_S = (15 << 0);  ///< Synchronous prescaler factor
    }

    /// WUTR Register bits
    namespace wutr_bits {
        constexpr uint32_t WUT = (16 << 0);  ///< Wakeup auto-reload value bits
    }

    /// ALRMAR Register bits
    namespace alrmar_bits {
        constexpr uint32_t MSK4 = (1U << 31);  ///< Alarm A date mask
        constexpr uint32_t WDSEL = (1U << 30);  ///< Week day selection
        constexpr uint32_t DT = (2 << 28);  ///< Date tens in BCD format
        constexpr uint32_t DU = (4 << 24);  ///< Date units or day in BCD format
        constexpr uint32_t MSK3 = (1U << 23);  ///< Alarm A hours mask
        constexpr uint32_t PM = (1U << 22);  ///< AM/PM notation
        constexpr uint32_t HT = (2 << 20);  ///< Hour tens in BCD format
        constexpr uint32_t HU = (4 << 16);  ///< Hour units in BCD format
        constexpr uint32_t MSK2 = (1U << 15);  ///< Alarm A minutes mask
        constexpr uint32_t MNT = (3 << 12);  ///< Minute tens in BCD format
        constexpr uint32_t MNU = (4 << 8);  ///< Minute units in BCD format
        constexpr uint32_t MSK1 = (1U << 7);  ///< Alarm A seconds mask
        constexpr uint32_t ST = (3 << 4);  ///< Second tens in BCD format
        constexpr uint32_t SU = (4 << 0);  ///< Second units in BCD format
    }

    /// ALRMBR Register bits
    namespace alrmbr_bits {
        constexpr uint32_t MSK4 = (1U << 31);  ///< Alarm B date mask
        constexpr uint32_t WDSEL = (1U << 30);  ///< Week day selection
        constexpr uint32_t DT = (2 << 28);  ///< Date tens in BCD format
        constexpr uint32_t DU = (4 << 24);  ///< Date units or day in BCD format
        constexpr uint32_t MSK3 = (1U << 23);  ///< Alarm B hours mask
        constexpr uint32_t PM = (1U << 22);  ///< AM/PM notation
        constexpr uint32_t HT = (2 << 20);  ///< Hour tens in BCD format
        constexpr uint32_t HU = (4 << 16);  ///< Hour units in BCD format
        constexpr uint32_t MSK2 = (1U << 15);  ///< Alarm B minutes mask
        constexpr uint32_t MNT = (3 << 12);  ///< Minute tens in BCD format
        constexpr uint32_t MNU = (4 << 8);  ///< Minute units in BCD format
        constexpr uint32_t MSK1 = (1U << 7);  ///< Alarm B seconds mask
        constexpr uint32_t ST = (3 << 4);  ///< Second tens in BCD format
        constexpr uint32_t SU = (4 << 0);  ///< Second units in BCD format
    }

    /// WPR Register bits
    namespace wpr_bits {
        constexpr uint32_t KEY = (8 << 0);  ///< Write protection key
    }

    /// SSR Register bits
    namespace ssr_bits {
        constexpr uint32_t SS = (16 << 0);  ///< Sub second value
    }

    /// SHIFTR Register bits
    namespace shiftr_bits {
        constexpr uint32_t ADD1S = (1U << 31);  ///< Add one second
        constexpr uint32_t SUBFS = (15 << 0);  ///< Subtract a fraction of a second
    }

    /// TSTR Register bits
    namespace tstr_bits {
        constexpr uint32_t SU = (4 << 0);  ///< Second units in BCD format
        constexpr uint32_t ST = (3 << 4);  ///< Second tens in BCD format
        constexpr uint32_t MNU = (4 << 8);  ///< Minute units in BCD format
        constexpr uint32_t MNT = (3 << 12);  ///< Minute tens in BCD format
        constexpr uint32_t HU = (4 << 16);  ///< Hour units in BCD format
        constexpr uint32_t HT = (2 << 20);  ///< Hour tens in BCD format
        constexpr uint32_t PM = (1U << 22);  ///< AM/PM notation
    }

    /// TSDR Register bits
    namespace tsdr_bits {
        constexpr uint32_t WDU = (3 << 13);  ///< Week day units
        constexpr uint32_t MT = (1U << 12);  ///< Month tens in BCD format
        constexpr uint32_t MU = (4 << 8);  ///< Month units in BCD format
        constexpr uint32_t DT = (2 << 4);  ///< Date tens in BCD format
        constexpr uint32_t DU = (4 << 0);  ///< Date units in BCD format
    }

    /// TSSSR Register bits
    namespace tsssr_bits {
        constexpr uint32_t SS = (16 << 0);  ///< Sub second value
    }

    /// CALR Register bits
    namespace calr_bits {
        constexpr uint32_t CALP = (1U << 15);  ///< Increase frequency of RTC by 488.5 ppm
        constexpr uint32_t CALW8 = (1U << 14);  ///< Use an 8-second calibration cycle period
        constexpr uint32_t CALW16 = (1U << 13);  ///< Use a 16-second calibration cycle period
        constexpr uint32_t CALM = (9 << 0);  ///< Calibration minus
    }

    /// TAMPCR Register bits
    namespace tampcr_bits {
        constexpr uint32_t TAMP1E = (1U << 0);  ///< Tamper 1 detection enable
        constexpr uint32_t TAMP1TRG = (1U << 1);  ///< Active level for tamper 1
        constexpr uint32_t TAMPIE = (1U << 2);  ///< Tamper interrupt enable
        constexpr uint32_t TAMP2E = (1U << 3);  ///< Tamper 2 detection enable
        constexpr uint32_t TAMP2TRG = (1U << 4);  ///< Active level for tamper 2
        constexpr uint32_t TAMP3E = (1U << 5);  ///< Tamper 3 detection enable
        constexpr uint32_t TAMP3TRG = (1U << 6);  ///< Active level for tamper 3
        constexpr uint32_t TAMPTS = (1U << 7);  ///< Activate timestamp on tamper detection event
        constexpr uint32_t TAMPFREQ = (3 << 8);  ///< Tamper sampling frequency
        constexpr uint32_t TAMPFLT = (2 << 11);  ///< Tamper filter count
        constexpr uint32_t TAMPPRCH = (2 << 13);  ///< Tamper precharge duration
        constexpr uint32_t TAMPPUDIS = (1U << 15);  ///< TAMPER pull-up disable
        constexpr uint32_t TAMP1IE = (1U << 16);  ///< Tamper 1 interrupt enable
        constexpr uint32_t TAMP1NOERASE = (1U << 17);  ///< Tamper 1 no erase
        constexpr uint32_t TAMP1MF = (1U << 18);  ///< Tamper 1 mask flag
        constexpr uint32_t TAMP2IE = (1U << 19);  ///< Tamper 2 interrupt enable
        constexpr uint32_t TAMP2NOERASE = (1U << 20);  ///< Tamper 2 no erase
        constexpr uint32_t TAMP2MF = (1U << 21);  ///< Tamper 2 mask flag
        constexpr uint32_t TAMP3IE = (1U << 22);  ///< Tamper 3 interrupt enable
        constexpr uint32_t TAMP3NOERASE = (1U << 23);  ///< Tamper 3 no erase
        constexpr uint32_t TAMP3MF = (1U << 24);  ///< Tamper 3 mask flag
    }

    /// ALRMASSR Register bits
    namespace alrmassr_bits {
        constexpr uint32_t MASKSS = (4 << 24);  ///< Mask the most-significant bits starting at this bit
        constexpr uint32_t SS = (15 << 0);  ///< Sub seconds value
    }

    /// ALRMBSSR Register bits
    namespace alrmbssr_bits {
        constexpr uint32_t MASKSS = (4 << 24);  ///< Mask the most-significant bits starting at this bit
        constexpr uint32_t SS = (15 << 0);  ///< Sub seconds value
    }

    /// OR Register bits
    namespace or_bits {
        constexpr uint32_t RTC_ALARM_TYPE = (1U << 0);  ///< RTC_ALARM on PC13 output type
        constexpr uint32_t RTC_OUT_RMP = (1U << 1);  ///< RTC_OUT remap
    }

    /// BKP0R Register bits
    namespace bkp0r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP1R Register bits
    namespace bkp1r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP2R Register bits
    namespace bkp2r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP3R Register bits
    namespace bkp3r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP4R Register bits
    namespace bkp4r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP5R Register bits
    namespace bkp5r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP6R Register bits
    namespace bkp6r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP7R Register bits
    namespace bkp7r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP8R Register bits
    namespace bkp8r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP9R Register bits
    namespace bkp9r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP10R Register bits
    namespace bkp10r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP11R Register bits
    namespace bkp11r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP12R Register bits
    namespace bkp12r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP13R Register bits
    namespace bkp13r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP14R Register bits
    namespace bkp14r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP15R Register bits
    namespace bkp15r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP16R Register bits
    namespace bkp16r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP17R Register bits
    namespace bkp17r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP18R Register bits
    namespace bkp18r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP19R Register bits
    namespace bkp19r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP20R Register bits
    namespace bkp20r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP21R Register bits
    namespace bkp21r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP22R Register bits
    namespace bkp22r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP23R Register bits
    namespace bkp23r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP24R Register bits
    namespace bkp24r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP25R Register bits
    namespace bkp25r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP26R Register bits
    namespace bkp26r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP27R Register bits
    namespace bkp27r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP28R Register bits
    namespace bkp28r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP29R Register bits
    namespace bkp29r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP30R Register bits
    namespace bkp30r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

    /// BKP31R Register bits
    namespace bkp31r_bits {
        constexpr uint32_t BKP = (32 << 0);  ///< BKP
    }

}

// ============================================================================
// OTG Peripheral
// ============================================================================

namespace otg {
    /// Base addresses
    constexpr uint32_t OTG_FS_GLOBAL_BASE = 0x50000000;
    constexpr uint32_t OTG_FS_HOST_BASE = 0x50000400;
    constexpr uint32_t OTG_FS_DEVICE_BASE = 0x50000800;

    /// OTG Register structure
    struct Registers {
        volatile uint32_t FS_GOTGCTL;  ///< Offset: 0x00 - OTG_FS control and status register (OTG_FS_GOTGCTL)
        volatile uint32_t FS_GOTGINT;  ///< Offset: 0x04 - OTG_FS interrupt register (OTG_FS_GOTGINT)
        volatile uint32_t FS_GAHBCFG;  ///< Offset: 0x08 - OTG_FS AHB configuration register (OTG_FS_GAHBCFG)
        volatile uint32_t FS_GUSBCFG;  ///< Offset: 0x0C - OTG_FS USB configuration register (OTG_FS_GUSBCFG)
        volatile uint32_t FS_GRSTCTL;  ///< Offset: 0x10 - OTG_FS reset register (OTG_FS_GRSTCTL)
        volatile uint32_t FS_GINTSTS;  ///< Offset: 0x14 - OTG_FS core interrupt register (OTG_FS_GINTSTS)
        volatile uint32_t FS_GINTMSK;  ///< Offset: 0x18 - OTG_FS interrupt mask register (OTG_FS_GINTMSK)
        volatile uint32_t FS_GRXSTSR_Device;  ///< Offset: 0x1C - OTG_FS Receive status debug read(Device mode)
        volatile uint32_t FS_GRXSTSR_Host;  ///< Offset: 0x1C - OTG_FS Receive status debug read(Host mode)
        volatile uint32_t FS_GRXFSIZ;  ///< Offset: 0x24 - OTG_FS Receive FIFO size register (OTG_FS_GRXFSIZ)
        volatile uint32_t FS_GNPTXFSIZ_Device;  ///< Offset: 0x28 - OTG_FS non-periodic transmit FIFO size register (Device mode)
        volatile uint32_t FS_GNPTXFSIZ_Host;  ///< Offset: 0x28 - OTG_FS non-periodic transmit FIFO size register (Host mode)
        volatile uint32_t FS_GNPTXSTS;  ///< Offset: 0x2C - OTG_FS non-periodic transmit FIFO/queue status register...
        volatile uint32_t FS_GCCFG;  ///< Offset: 0x38 - OTG_FS general core configuration register (OTG_FS_GCCFG)
        volatile uint32_t FS_CID;  ///< Offset: 0x3C - core ID register
        volatile uint32_t FS_HPTXFSIZ;  ///< Offset: 0x100 - OTG_FS Host periodic transmit FIFO size register...
        volatile uint32_t FS_DIEPTXF1;  ///< Offset: 0x104 - OTG_FS device IN endpoint transmit FIFO size register...
        volatile uint32_t FS_DIEPTXF2;  ///< Offset: 0x108 - OTG_FS device IN endpoint transmit FIFO size register...
        volatile uint32_t FS_DIEPTXF3;  ///< Offset: 0x10C - OTG_FS device IN endpoint transmit FIFO size register...
    };

    /// Peripheral instances
    inline Registers* OTG_FS_GLOBAL = reinterpret_cast<Registers*>(OTG_FS_GLOBAL_BASE);
    inline Registers* OTG_FS_HOST = reinterpret_cast<Registers*>(OTG_FS_HOST_BASE);
    inline Registers* OTG_FS_DEVICE = reinterpret_cast<Registers*>(OTG_FS_DEVICE_BASE);

    // Bit definitions
    /// FS_GOTGCTL Register bits
    namespace fs_gotgctl_bits {
        constexpr uint32_t SRQSCS = (1U << 0);  ///< Session request success
        constexpr uint32_t SRQ = (1U << 1);  ///< Session request
        constexpr uint32_t HNGSCS = (1U << 8);  ///< Host negotiation success
        constexpr uint32_t HNPRQ = (1U << 9);  ///< HNP request
        constexpr uint32_t HSHNPEN = (1U << 10);  ///< Host set HNP enable
        constexpr uint32_t DHNPEN = (1U << 11);  ///< Device HNP enabled
        constexpr uint32_t CIDSTS = (1U << 16);  ///< Connector ID status
        constexpr uint32_t DBCT = (1U << 17);  ///< Long/short debounce time
        constexpr uint32_t ASVLD = (1U << 18);  ///< A-session valid
        constexpr uint32_t BSVLD = (1U << 19);  ///< B-session valid
    }

    /// FS_GOTGINT Register bits
    namespace fs_gotgint_bits {
        constexpr uint32_t SEDET = (1U << 2);  ///< Session end detected
        constexpr uint32_t SRSSCHG = (1U << 8);  ///< Session request success status change
        constexpr uint32_t HNSSCHG = (1U << 9);  ///< Host negotiation success status change
        constexpr uint32_t HNGDET = (1U << 17);  ///< Host negotiation detected
        constexpr uint32_t ADTOCHG = (1U << 18);  ///< A-device timeout change
        constexpr uint32_t DBCDNE = (1U << 19);  ///< Debounce done
    }

    /// FS_GAHBCFG Register bits
    namespace fs_gahbcfg_bits {
        constexpr uint32_t GINT = (1U << 0);  ///< Global interrupt mask
        constexpr uint32_t TXFELVL = (1U << 7);  ///< TxFIFO empty level
        constexpr uint32_t PTXFELVL = (1U << 8);  ///< Periodic TxFIFO empty level
    }

    /// FS_GUSBCFG Register bits
    namespace fs_gusbcfg_bits {
        constexpr uint32_t TOCAL = (3 << 0);  ///< FS timeout calibration
        constexpr uint32_t PHYSEL = (1U << 6);  ///< Full Speed serial transceiver select
        constexpr uint32_t SRPCAP = (1U << 8);  ///< SRP-capable
        constexpr uint32_t HNPCAP = (1U << 9);  ///< HNP-capable
        constexpr uint32_t TRDT = (4 << 10);  ///< USB turnaround time
        constexpr uint32_t FHMOD = (1U << 29);  ///< Force host mode
        constexpr uint32_t FDMOD = (1U << 30);  ///< Force device mode
        constexpr uint32_t CTXPKT = (1U << 31);  ///< Corrupt Tx packet
    }

    /// FS_GRSTCTL Register bits
    namespace fs_grstctl_bits {
        constexpr uint32_t CSRST = (1U << 0);  ///< Core soft reset
        constexpr uint32_t HSRST = (1U << 1);  ///< HCLK soft reset
        constexpr uint32_t FCRST = (1U << 2);  ///< Host frame counter reset
        constexpr uint32_t RXFFLSH = (1U << 4);  ///< RxFIFO flush
        constexpr uint32_t TXFFLSH = (1U << 5);  ///< TxFIFO flush
        constexpr uint32_t TXFNUM = (5 << 6);  ///< TxFIFO number
        constexpr uint32_t AHBIDL = (1U << 31);  ///< AHB master idle
    }

    /// FS_GINTSTS Register bits
    namespace fs_gintsts_bits {
        constexpr uint32_t CMOD = (1U << 0);  ///< Current mode of operation
        constexpr uint32_t MMIS = (1U << 1);  ///< Mode mismatch interrupt
        constexpr uint32_t OTGINT = (1U << 2);  ///< OTG interrupt
        constexpr uint32_t SOF = (1U << 3);  ///< Start of frame
        constexpr uint32_t RXFLVL = (1U << 4);  ///< RxFIFO non-empty
        constexpr uint32_t NPTXFE = (1U << 5);  ///< Non-periodic TxFIFO empty
        constexpr uint32_t GINAKEFF = (1U << 6);  ///< Global IN non-periodic NAK effective
        constexpr uint32_t GOUTNAKEFF = (1U << 7);  ///< Global OUT NAK effective
        constexpr uint32_t ESUSP = (1U << 10);  ///< Early suspend
        constexpr uint32_t USBSUSP = (1U << 11);  ///< USB suspend
        constexpr uint32_t USBRST = (1U << 12);  ///< USB reset
        constexpr uint32_t ENUMDNE = (1U << 13);  ///< Enumeration done
        constexpr uint32_t ISOODRP = (1U << 14);  ///< Isochronous OUT packet dropped interrupt
        constexpr uint32_t EOPF = (1U << 15);  ///< End of periodic frame interrupt
        constexpr uint32_t IEPINT = (1U << 18);  ///< IN endpoint interrupt
        constexpr uint32_t OEPINT = (1U << 19);  ///< OUT endpoint interrupt
        constexpr uint32_t IISOIXFR = (1U << 20);  ///< Incomplete isochronous IN transfer
        constexpr uint32_t IPXFR_INCOMPISOOUT = (1U << 21);  ///< Incomplete periodic transfer(Host mode)/Incomplete isochronous OUT transfer(Device mode)
        constexpr uint32_t HPRTINT = (1U << 24);  ///< Host port interrupt
        constexpr uint32_t HCINT = (1U << 25);  ///< Host channels interrupt
        constexpr uint32_t PTXFE = (1U << 26);  ///< Periodic TxFIFO empty
        constexpr uint32_t CIDSCHG = (1U << 28);  ///< Connector ID status change
        constexpr uint32_t DISCINT = (1U << 29);  ///< Disconnect detected interrupt
        constexpr uint32_t SRQINT = (1U << 30);  ///< Session request/new session detected interrupt
        constexpr uint32_t WKUPINT = (1U << 31);  ///< Resume/remote wakeup detected interrupt
    }

    /// FS_GINTMSK Register bits
    namespace fs_gintmsk_bits {
        constexpr uint32_t MMISM = (1U << 1);  ///< Mode mismatch interrupt mask
        constexpr uint32_t OTGINT = (1U << 2);  ///< OTG interrupt mask
        constexpr uint32_t SOFM = (1U << 3);  ///< Start of frame mask
        constexpr uint32_t RXFLVLM = (1U << 4);  ///< Receive FIFO non-empty mask
        constexpr uint32_t NPTXFEM = (1U << 5);  ///< Non-periodic TxFIFO empty mask
        constexpr uint32_t GINAKEFFM = (1U << 6);  ///< Global non-periodic IN NAK effective mask
        constexpr uint32_t GONAKEFFM = (1U << 7);  ///< Global OUT NAK effective mask
        constexpr uint32_t ESUSPM = (1U << 10);  ///< Early suspend mask
        constexpr uint32_t USBSUSPM = (1U << 11);  ///< USB suspend mask
        constexpr uint32_t USBRST = (1U << 12);  ///< USB reset mask
        constexpr uint32_t ENUMDNEM = (1U << 13);  ///< Enumeration done mask
        constexpr uint32_t ISOODRPM = (1U << 14);  ///< Isochronous OUT packet dropped interrupt mask
        constexpr uint32_t EOPFM = (1U << 15);  ///< End of periodic frame interrupt mask
        constexpr uint32_t EPMISM = (1U << 17);  ///< Endpoint mismatch interrupt mask
        constexpr uint32_t IEPINT = (1U << 18);  ///< IN endpoints interrupt mask
        constexpr uint32_t OEPINT = (1U << 19);  ///< OUT endpoints interrupt mask
        constexpr uint32_t IISOIXFRM = (1U << 20);  ///< Incomplete isochronous IN transfer mask
        constexpr uint32_t IPXFRM_IISOOXFRM = (1U << 21);  ///< Incomplete periodic transfer mask(Host mode)/Incomplete isochronous OUT transfer mask(Device mode)
        constexpr uint32_t PRTIM = (1U << 24);  ///< Host port interrupt mask
        constexpr uint32_t HCIM = (1U << 25);  ///< Host channels interrupt mask
        constexpr uint32_t PTXFEM = (1U << 26);  ///< Periodic TxFIFO empty mask
        constexpr uint32_t CIDSCHGM = (1U << 28);  ///< Connector ID status change mask
        constexpr uint32_t DISCINT = (1U << 29);  ///< Disconnect detected interrupt mask
        constexpr uint32_t SRQIM = (1U << 30);  ///< Session request/new session detected interrupt mask
        constexpr uint32_t WUIM = (1U << 31);  ///< Resume/remote wakeup detected interrupt mask
    }

    /// FS_GRXSTSR_Device Register bits
    namespace fs_grxstsr_device_bits {
        constexpr uint32_t EPNUM = (4 << 0);  ///< Endpoint number
        constexpr uint32_t BCNT = (11 << 4);  ///< Byte count
        constexpr uint32_t DPID = (2 << 15);  ///< Data PID
        constexpr uint32_t PKTSTS = (4 << 17);  ///< Packet status
        constexpr uint32_t FRMNUM = (4 << 21);  ///< Frame number
    }

    /// FS_GRXSTSR_Host Register bits
    namespace fs_grxstsr_host_bits {
        constexpr uint32_t EPNUM = (4 << 0);  ///< Endpoint number
        constexpr uint32_t BCNT = (11 << 4);  ///< Byte count
        constexpr uint32_t DPID = (2 << 15);  ///< Data PID
        constexpr uint32_t PKTSTS = (4 << 17);  ///< Packet status
        constexpr uint32_t FRMNUM = (4 << 21);  ///< Frame number
    }

    /// FS_GRXFSIZ Register bits
    namespace fs_grxfsiz_bits {
        constexpr uint32_t RXFD = (16 << 0);  ///< RxFIFO depth
    }

    /// FS_GNPTXFSIZ_Device Register bits
    namespace fs_gnptxfsiz_device_bits {
        constexpr uint32_t TX0FSA = (16 << 0);  ///< Endpoint 0 transmit RAM start address
        constexpr uint32_t TX0FD = (16 << 16);  ///< Endpoint 0 TxFIFO depth
    }

    /// FS_GNPTXFSIZ_Host Register bits
    namespace fs_gnptxfsiz_host_bits {
        constexpr uint32_t NPTXFSA = (16 << 0);  ///< Non-periodic transmit RAM start address
        constexpr uint32_t NPTXFD = (16 << 16);  ///< Non-periodic TxFIFO depth
    }

    /// FS_GNPTXSTS Register bits
    namespace fs_gnptxsts_bits {
        constexpr uint32_t NPTXFSAV = (16 << 0);  ///< Non-periodic TxFIFO space available
        constexpr uint32_t NPTQXSAV = (8 << 16);  ///< Non-periodic transmit request queue space available
        constexpr uint32_t NPTXQTOP = (7 << 24);  ///< Top of the non-periodic transmit request queue
    }

    /// FS_GCCFG Register bits
    namespace fs_gccfg_bits {
        constexpr uint32_t PWRDWN = (1U << 16);  ///< Power down
        constexpr uint32_t VBUSASEN = (1U << 18);  ///< Enable the VBUS sensing device
        constexpr uint32_t VBUSBSEN = (1U << 19);  ///< Enable the VBUS sensing device
        constexpr uint32_t SOFOUTEN = (1U << 20);  ///< SOF output enable
    }

    /// FS_CID Register bits
    namespace fs_cid_bits {
        constexpr uint32_t PRODUCT_ID = (32 << 0);  ///< Product ID field
    }

    /// FS_HPTXFSIZ Register bits
    namespace fs_hptxfsiz_bits {
        constexpr uint32_t PTXSA = (16 << 0);  ///< Host periodic TxFIFO start address
        constexpr uint32_t PTXFSIZ = (16 << 16);  ///< Host periodic TxFIFO depth
    }

    /// FS_DIEPTXF1 Register bits
    namespace fs_dieptxf1_bits {
        constexpr uint32_t INEPTXSA = (16 << 0);  ///< IN endpoint FIFO2 transmit RAM start address
        constexpr uint32_t INEPTXFD = (16 << 16);  ///< IN endpoint TxFIFO depth
    }

    /// FS_DIEPTXF2 Register bits
    namespace fs_dieptxf2_bits {
        constexpr uint32_t INEPTXSA = (16 << 0);  ///< IN endpoint FIFO3 transmit RAM start address
        constexpr uint32_t INEPTXFD = (16 << 16);  ///< IN endpoint TxFIFO depth
    }

    /// FS_DIEPTXF3 Register bits
    namespace fs_dieptxf3_bits {
        constexpr uint32_t INEPTXSA = (16 << 0);  ///< IN endpoint FIFO4 transmit RAM start address
        constexpr uint32_t INEPTXFD = (16 << 16);  ///< IN endpoint TxFIFO depth
    }

}

// ============================================================================
// SWPMI1 Peripheral
// ============================================================================

namespace swpmi1 {
    /// Base addresses
    constexpr uint32_t SWPMI1_BASE = 0x40008800;

    /// SWPMI1 Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - SWPMI Configuration/Control register
        volatile uint32_t BRR;  ///< Offset: 0x04 - SWPMI Bitrate register
        volatile uint32_t ISR;  ///< Offset: 0x0C - SWPMI Interrupt and Status register
        volatile uint32_t ICR;  ///< Offset: 0x10 - SWPMI Interrupt Flag Clear register
        volatile uint32_t IER;  ///< Offset: 0x14 - SWPMI Interrupt Enable register
        volatile uint32_t RFL;  ///< Offset: 0x18 - SWPMI Receive Frame Length register
        volatile uint32_t TDR;  ///< Offset: 0x1C - SWPMI Transmit data register
        volatile uint32_t RDR;  ///< Offset: 0x20 - SWPMI Receive data register
    };

    /// Peripheral instances
    inline Registers* SWPMI1 = reinterpret_cast<Registers*>(SWPMI1_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t RXDMA = (1U << 0);  ///< Reception DMA enable
        constexpr uint32_t TXDMA = (1U << 1);  ///< Transmission DMA enable
        constexpr uint32_t RXMODE = (1U << 2);  ///< Reception buffering mode
        constexpr uint32_t TXMODE = (1U << 3);  ///< Transmission buffering mode
        constexpr uint32_t LPBK = (1U << 4);  ///< Loopback mode enable
        constexpr uint32_t SWPME = (1U << 5);  ///< Single wire protocol master interface enable
        constexpr uint32_t DEACT = (1U << 10);  ///< Single wire protocol master interface deactivate
    }

    /// BRR Register bits
    namespace brr_bits {
        constexpr uint32_t BR = (6 << 0);  ///< Bitrate prescaler
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t RXBFF = (1U << 0);  ///< Receive buffer full flag
        constexpr uint32_t TXBEF = (1U << 1);  ///< Transmit buffer empty flag
        constexpr uint32_t RXBERF = (1U << 2);  ///< Receive CRC error flag
        constexpr uint32_t RXOVRF = (1U << 3);  ///< Receive overrun error flag
        constexpr uint32_t TXUNRF = (1U << 4);  ///< Transmit underrun error flag
        constexpr uint32_t RXNE = (1U << 5);  ///< Receive data register not empty
        constexpr uint32_t TXE = (1U << 6);  ///< Transmit data register empty
        constexpr uint32_t TCF = (1U << 7);  ///< Transfer complete flag
        constexpr uint32_t SRF = (1U << 8);  ///< Slave resume flag
        constexpr uint32_t SUSP = (1U << 9);  ///< SUSPEND flag
        constexpr uint32_t DEACTF = (1U << 10);  ///< DEACTIVATED flag
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t CRXBFF = (1U << 0);  ///< Clear receive buffer full flag
        constexpr uint32_t CTXBEF = (1U << 1);  ///< Clear transmit buffer empty flag
        constexpr uint32_t CRXBERF = (1U << 2);  ///< Clear receive CRC error flag
        constexpr uint32_t CRXOVRF = (1U << 3);  ///< Clear receive overrun error flag
        constexpr uint32_t CTXUNRF = (1U << 4);  ///< Clear transmit underrun error flag
        constexpr uint32_t CTCF = (1U << 7);  ///< Clear transfer complete flag
        constexpr uint32_t CSRF = (1U << 8);  ///< Clear slave resume flag
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t RXBFIE = (1U << 0);  ///< Receive buffer full interrupt enable
        constexpr uint32_t TXBEIE = (1U << 1);  ///< Transmit buffer empty interrupt enable
        constexpr uint32_t RXBERIE = (1U << 2);  ///< Receive CRC error interrupt enable
        constexpr uint32_t RXOVRIE = (1U << 3);  ///< Receive overrun error interrupt enable
        constexpr uint32_t TXUNRIE = (1U << 4);  ///< Transmit underrun error interrupt enable
        constexpr uint32_t RIE = (1U << 5);  ///< Receive interrupt enable
        constexpr uint32_t TIE = (1U << 6);  ///< Transmit interrupt enable
        constexpr uint32_t TCIE = (1U << 7);  ///< Transmit complete interrupt enable
        constexpr uint32_t SRIE = (1U << 8);  ///< Slave resume interrupt enable
    }

    /// RFL Register bits
    namespace rfl_bits {
        constexpr uint32_t RFL = (5 << 0);  ///< Receive frame length
    }

    /// TDR Register bits
    namespace tdr_bits {
        constexpr uint32_t TD = (32 << 0);  ///< Transmit data
    }

    /// RDR Register bits
    namespace rdr_bits {
        constexpr uint32_t RD = (32 << 0);  ///< received data
    }

}

// ============================================================================
// OPAMP Peripheral
// ============================================================================

namespace opamp {
    /// Base addresses
    constexpr uint32_t OPAMP_BASE = 0x40007800;

    /// OPAMP Register structure
    struct Registers {
        volatile uint32_t OPAMP1_CSR;  ///< Offset: 0x00 - OPAMP1 control/status register
        volatile uint32_t OPAMP1_OTR;  ///< Offset: 0x04 - OPAMP1 offset trimming register in normal mode
        volatile uint32_t OPAMP1_LPOTR;  ///< Offset: 0x08 - OPAMP1 offset trimming register in low-power mode
        volatile uint32_t OPAMP2_CSR;  ///< Offset: 0x10 - OPAMP2 control/status register
        volatile uint32_t OPAMP2_OTR;  ///< Offset: 0x14 - OPAMP2 offset trimming register in normal mode
        volatile uint32_t OPAMP2_LPOTR;  ///< Offset: 0x18 - OPAMP2 offset trimming register in low-power mode
    };

    /// Peripheral instances
    inline Registers* OPAMP = reinterpret_cast<Registers*>(OPAMP_BASE);

    // Bit definitions
    /// OPAMP1_CSR Register bits
    namespace opamp1_csr_bits {
        constexpr uint32_t OPAEN = (1U << 0);  ///< Operational amplifier Enable
        constexpr uint32_t OPALPM = (1U << 1);  ///< Operational amplifier Low Power Mode
        constexpr uint32_t OPAMODE = (2 << 2);  ///< Operational amplifier PGA mode
        constexpr uint32_t PGA_GAIN = (2 << 4);  ///< Operational amplifier Programmable amplifier gain value
        constexpr uint32_t VM_SEL = (2 << 8);  ///< Inverting input selection
        constexpr uint32_t VP_SEL = (1U << 10);  ///< Non inverted input selection
        constexpr uint32_t CALON = (1U << 12);  ///< Calibration mode enabled
        constexpr uint32_t CALSEL = (1U << 13);  ///< Calibration selection
        constexpr uint32_t USERTRIM = (1U << 14);  ///< allows to switch from AOP offset trimmed values to AOP offset
        constexpr uint32_t CALOUT = (1U << 15);  ///< Operational amplifier calibration output
        constexpr uint32_t OPA_RANGE = (1U << 31);  ///< Operational amplifier power supply range for stability
    }

    /// OPAMP1_OTR Register bits
    namespace opamp1_otr_bits {
        constexpr uint32_t TRIMOFFSETN = (5 << 0);  ///< Trim for NMOS differential pairs
        constexpr uint32_t TRIMOFFSETP = (5 << 8);  ///< Trim for PMOS differential pairs
    }

    /// OPAMP1_LPOTR Register bits
    namespace opamp1_lpotr_bits {
        constexpr uint32_t TRIMLPOFFSETN = (5 << 0);  ///< Trim for NMOS differential pairs
        constexpr uint32_t TRIMLPOFFSETP = (5 << 8);  ///< Trim for PMOS differential pairs
    }

    /// OPAMP2_CSR Register bits
    namespace opamp2_csr_bits {
        constexpr uint32_t OPAEN = (1U << 0);  ///< Operational amplifier Enable
        constexpr uint32_t OPALPM = (1U << 1);  ///< Operational amplifier Low Power Mode
        constexpr uint32_t OPAMODE = (2 << 2);  ///< Operational amplifier PGA mode
        constexpr uint32_t PGA_GAIN = (2 << 4);  ///< Operational amplifier Programmable amplifier gain value
        constexpr uint32_t VM_SEL = (2 << 8);  ///< Inverting input selection
        constexpr uint32_t VP_SEL = (1U << 10);  ///< Non inverted input selection
        constexpr uint32_t CALON = (1U << 12);  ///< Calibration mode enabled
        constexpr uint32_t CALSEL = (1U << 13);  ///< Calibration selection
        constexpr uint32_t USERTRIM = (1U << 14);  ///< allows to switch from AOP offset trimmed values to AOP offset
        constexpr uint32_t CALOUT = (1U << 15);  ///< Operational amplifier calibration output
    }

    /// OPAMP2_OTR Register bits
    namespace opamp2_otr_bits {
        constexpr uint32_t TRIMOFFSETN = (5 << 0);  ///< Trim for NMOS differential pairs
        constexpr uint32_t TRIMOFFSETP = (5 << 8);  ///< Trim for PMOS differential pairs
    }

    /// OPAMP2_LPOTR Register bits
    namespace opamp2_lpotr_bits {
        constexpr uint32_t TRIMLPOFFSETN = (5 << 0);  ///< Trim for NMOS differential pairs
        constexpr uint32_t TRIMLPOFFSETP = (5 << 8);  ///< Trim for PMOS differential pairs
    }

}

// ============================================================================
// FMC Peripheral
// ============================================================================

namespace fmc {
    /// Base addresses
    constexpr uint32_t FMC_BASE = 0xA0000000;

    /// FMC Register structure
    struct Registers {
        volatile uint32_t BCR1;  ///< Offset: 0x00 - SRAM/NOR-Flash chip-select control register 1
        volatile uint32_t BTR1;  ///< Offset: 0x04 - SRAM/NOR-Flash chip-select timing register 1
        volatile uint32_t BCR2;  ///< Offset: 0x08 - SRAM/NOR-Flash chip-select control register 2
        volatile uint32_t BTR2;  ///< Offset: 0x0C - SRAM/NOR-Flash chip-select timing register 2
        volatile uint32_t BCR3;  ///< Offset: 0x10 - SRAM/NOR-Flash chip-select control register 3
        volatile uint32_t BTR3;  ///< Offset: 0x14 - SRAM/NOR-Flash chip-select timing register 3
        volatile uint32_t BCR4;  ///< Offset: 0x18 - SRAM/NOR-Flash chip-select control register 4
        volatile uint32_t BTR4;  ///< Offset: 0x1C - SRAM/NOR-Flash chip-select timing register 4
        volatile uint32_t PCR;  ///< Offset: 0x80 - PC Card/NAND Flash control register 3
        volatile uint32_t SR;  ///< Offset: 0x84 - FIFO status and interrupt register 3
        volatile uint32_t PMEM;  ///< Offset: 0x88 - Common memory space timing register 3
        volatile uint32_t PATT;  ///< Offset: 0x8C - Attribute memory space timing register 3
        volatile uint32_t ECCR;  ///< Offset: 0x94 - ECC result register 3
        volatile uint32_t BWTR1;  ///< Offset: 0x104 - SRAM/NOR-Flash write timing registers 1
        volatile uint32_t BWTR2;  ///< Offset: 0x10C - SRAM/NOR-Flash write timing registers 2
        volatile uint32_t BWTR3;  ///< Offset: 0x114 - SRAM/NOR-Flash write timing registers 3
        volatile uint32_t BWTR4;  ///< Offset: 0x11C - SRAM/NOR-Flash write timing registers 4
    };

    /// Peripheral instances
    inline Registers* FMC = reinterpret_cast<Registers*>(FMC_BASE);

    // Bit definitions
    /// BCR1 Register bits
    namespace bcr1_bits {
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t CCLKEN = (1U << 20);  ///< CCLKEN
        constexpr uint32_t WFDIS = (1U << 21);  ///< Write FIFO Disable
    }

    /// BTR1 Register bits
    namespace btr1_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR2 Register bits
    namespace bcr2_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR2 Register bits
    namespace btr2_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR3 Register bits
    namespace bcr3_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR3 Register bits
    namespace btr3_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BCR4 Register bits
    namespace bcr4_bits {
        constexpr uint32_t CBURSTRW = (1U << 19);  ///< CBURSTRW
        constexpr uint32_t ASYNCWAIT = (1U << 15);  ///< ASYNCWAIT
        constexpr uint32_t EXTMOD = (1U << 14);  ///< EXTMOD
        constexpr uint32_t WAITEN = (1U << 13);  ///< WAITEN
        constexpr uint32_t WREN = (1U << 12);  ///< WREN
        constexpr uint32_t WAITCFG = (1U << 11);  ///< WAITCFG
        constexpr uint32_t WRAPMOD = (1U << 10);  ///< WRAPMOD
        constexpr uint32_t WAITPOL = (1U << 9);  ///< WAITPOL
        constexpr uint32_t BURSTEN = (1U << 8);  ///< BURSTEN
        constexpr uint32_t FACCEN = (1U << 6);  ///< FACCEN
        constexpr uint32_t MWID = (2 << 4);  ///< MWID
        constexpr uint32_t MTYP = (2 << 2);  ///< MTYP
        constexpr uint32_t MUXEN = (1U << 1);  ///< MUXEN
        constexpr uint32_t MBKEN = (1U << 0);  ///< MBKEN
    }

    /// BTR4 Register bits
    namespace btr4_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t BUSTURN = (4 << 16);  ///< BUSTURN
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// PCR Register bits
    namespace pcr_bits {
        constexpr uint32_t ECCPS = (3 << 17);  ///< ECCPS
        constexpr uint32_t TAR = (4 << 13);  ///< TAR
        constexpr uint32_t TCLR = (4 << 9);  ///< TCLR
        constexpr uint32_t ECCEN = (1U << 6);  ///< ECCEN
        constexpr uint32_t PWID = (2 << 4);  ///< PWID
        constexpr uint32_t PTYP = (1U << 3);  ///< PTYP
        constexpr uint32_t PBKEN = (1U << 2);  ///< PBKEN
        constexpr uint32_t PWAITEN = (1U << 1);  ///< PWAITEN
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t FEMPT = (1U << 6);  ///< FEMPT
        constexpr uint32_t IFEN = (1U << 5);  ///< IFEN
        constexpr uint32_t ILEN = (1U << 4);  ///< ILEN
        constexpr uint32_t IREN = (1U << 3);  ///< IREN
        constexpr uint32_t IFS = (1U << 2);  ///< IFS
        constexpr uint32_t ILS = (1U << 1);  ///< ILS
        constexpr uint32_t IRS = (1U << 0);  ///< IRS
    }

    /// PMEM Register bits
    namespace pmem_bits {
        constexpr uint32_t MEMHIZx = (8 << 24);  ///< MEMHIZx
        constexpr uint32_t MEMHOLDx = (8 << 16);  ///< MEMHOLDx
        constexpr uint32_t MEMWAITx = (8 << 8);  ///< MEMWAITx
        constexpr uint32_t MEMSETx = (8 << 0);  ///< MEMSETx
    }

    /// PATT Register bits
    namespace patt_bits {
        constexpr uint32_t ATTHIZx = (8 << 24);  ///< ATTHIZx
        constexpr uint32_t ATTHOLDx = (8 << 16);  ///< ATTHOLDx
        constexpr uint32_t ATTWAITx = (8 << 8);  ///< ATTWAITx
        constexpr uint32_t ATTSETx = (8 << 0);  ///< ATTSETx
    }

    /// ECCR Register bits
    namespace eccr_bits {
        constexpr uint32_t ECCx = (32 << 0);  ///< ECCx
    }

    /// BWTR1 Register bits
    namespace bwtr1_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR2 Register bits
    namespace bwtr2_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR3 Register bits
    namespace bwtr3_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

    /// BWTR4 Register bits
    namespace bwtr4_bits {
        constexpr uint32_t ACCMOD = (2 << 28);  ///< ACCMOD
        constexpr uint32_t DATLAT = (4 << 24);  ///< DATLAT
        constexpr uint32_t CLKDIV = (4 << 20);  ///< CLKDIV
        constexpr uint32_t DATAST = (8 << 8);  ///< DATAST
        constexpr uint32_t ADDHLD = (4 << 4);  ///< ADDHLD
        constexpr uint32_t ADDSET = (4 << 0);  ///< ADDSET
    }

}

// ============================================================================
// NVIC Peripheral
// ============================================================================

namespace nvic {
    /// Base addresses
    constexpr uint32_t NVIC_BASE = 0xE000E100;
    constexpr uint32_t NVIC_STIR_BASE = 0xE000EF00;

    /// NVIC Register structure
    struct Registers {
        volatile uint32_t ISER0;  ///< Offset: 0x00 - Interrupt Set-Enable Register
        volatile uint32_t ISER1;  ///< Offset: 0x04 - Interrupt Set-Enable Register
        volatile uint32_t ISER2;  ///< Offset: 0x08 - Interrupt Set-Enable Register
        volatile uint32_t ICER0;  ///< Offset: 0x80 - Interrupt Clear-Enable Register
        volatile uint32_t ICER1;  ///< Offset: 0x84 - Interrupt Clear-Enable Register
        volatile uint32_t ICER2;  ///< Offset: 0x88 - Interrupt Clear-Enable Register
        volatile uint32_t ISPR0;  ///< Offset: 0x100 - Interrupt Set-Pending Register
        volatile uint32_t ISPR1;  ///< Offset: 0x104 - Interrupt Set-Pending Register
        volatile uint32_t ISPR2;  ///< Offset: 0x108 - Interrupt Set-Pending Register
        volatile uint32_t ICPR0;  ///< Offset: 0x180 - Interrupt Clear-Pending Register
        volatile uint32_t ICPR1;  ///< Offset: 0x184 - Interrupt Clear-Pending Register
        volatile uint32_t ICPR2;  ///< Offset: 0x188 - Interrupt Clear-Pending Register
        volatile uint32_t IABR0;  ///< Offset: 0x200 - Interrupt Active Bit Register
        volatile uint32_t IABR1;  ///< Offset: 0x204 - Interrupt Active Bit Register
        volatile uint32_t IABR2;  ///< Offset: 0x208 - Interrupt Active Bit Register
        volatile uint32_t IPR0;  ///< Offset: 0x300 - Interrupt Priority Register
        volatile uint32_t IPR1;  ///< Offset: 0x304 - Interrupt Priority Register
        volatile uint32_t IPR2;  ///< Offset: 0x308 - Interrupt Priority Register
        volatile uint32_t IPR3;  ///< Offset: 0x30C - Interrupt Priority Register
        volatile uint32_t IPR4;  ///< Offset: 0x310 - Interrupt Priority Register
        volatile uint32_t IPR5;  ///< Offset: 0x314 - Interrupt Priority Register
        volatile uint32_t IPR6;  ///< Offset: 0x318 - Interrupt Priority Register
        volatile uint32_t IPR7;  ///< Offset: 0x31C - Interrupt Priority Register
        volatile uint32_t IPR8;  ///< Offset: 0x320 - Interrupt Priority Register
        volatile uint32_t IPR9;  ///< Offset: 0x324 - Interrupt Priority Register
        volatile uint32_t IPR10;  ///< Offset: 0x328 - Interrupt Priority Register
        volatile uint32_t IPR11;  ///< Offset: 0x32C - Interrupt Priority Register
        volatile uint32_t IPR12;  ///< Offset: 0x330 - Interrupt Priority Register
        volatile uint32_t IPR13;  ///< Offset: 0x334 - Interrupt Priority Register
        volatile uint32_t IPR14;  ///< Offset: 0x338 - Interrupt Priority Register
        volatile uint32_t IPR15;  ///< Offset: 0x33C - Interrupt Priority Register
        volatile uint32_t IPR16;  ///< Offset: 0x340 - Interrupt Priority Register
        volatile uint32_t IPR17;  ///< Offset: 0x344 - Interrupt Priority Register
        volatile uint32_t IPR18;  ///< Offset: 0x348 - Interrupt Priority Register
        volatile uint32_t IPR19;  ///< Offset: 0x34C - Interrupt Priority Register
        volatile uint32_t IPR20;  ///< Offset: 0x350 - Interrupt Priority Register
    };

    /// Peripheral instances
    inline Registers* NVIC = reinterpret_cast<Registers*>(NVIC_BASE);
    inline Registers* NVIC_STIR = reinterpret_cast<Registers*>(NVIC_STIR_BASE);

    // Bit definitions
    /// ISER0 Register bits
    namespace iser0_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ISER1 Register bits
    namespace iser1_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ISER2 Register bits
    namespace iser2_bits {
        constexpr uint32_t SETENA = (32 << 0);  ///< SETENA
    }

    /// ICER0 Register bits
    namespace icer0_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ICER1 Register bits
    namespace icer1_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ICER2 Register bits
    namespace icer2_bits {
        constexpr uint32_t CLRENA = (32 << 0);  ///< CLRENA
    }

    /// ISPR0 Register bits
    namespace ispr0_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ISPR1 Register bits
    namespace ispr1_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ISPR2 Register bits
    namespace ispr2_bits {
        constexpr uint32_t SETPEND = (32 << 0);  ///< SETPEND
    }

    /// ICPR0 Register bits
    namespace icpr0_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// ICPR1 Register bits
    namespace icpr1_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// ICPR2 Register bits
    namespace icpr2_bits {
        constexpr uint32_t CLRPEND = (32 << 0);  ///< CLRPEND
    }

    /// IABR0 Register bits
    namespace iabr0_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IABR1 Register bits
    namespace iabr1_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IABR2 Register bits
    namespace iabr2_bits {
        constexpr uint32_t ACTIVE = (32 << 0);  ///< ACTIVE
    }

    /// IPR0 Register bits
    namespace ipr0_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR1 Register bits
    namespace ipr1_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR2 Register bits
    namespace ipr2_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR3 Register bits
    namespace ipr3_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR4 Register bits
    namespace ipr4_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR5 Register bits
    namespace ipr5_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR6 Register bits
    namespace ipr6_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR7 Register bits
    namespace ipr7_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR8 Register bits
    namespace ipr8_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR9 Register bits
    namespace ipr9_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR10 Register bits
    namespace ipr10_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR11 Register bits
    namespace ipr11_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR12 Register bits
    namespace ipr12_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR13 Register bits
    namespace ipr13_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR14 Register bits
    namespace ipr14_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR15 Register bits
    namespace ipr15_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR16 Register bits
    namespace ipr16_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR17 Register bits
    namespace ipr17_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR18 Register bits
    namespace ipr18_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR19 Register bits
    namespace ipr19_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

    /// IPR20 Register bits
    namespace ipr20_bits {
        constexpr uint32_t IPR_N0 = (8 << 0);  ///< IPR_N0
        constexpr uint32_t IPR_N1 = (8 << 8);  ///< IPR_N1
        constexpr uint32_t IPR_N2 = (8 << 16);  ///< IPR_N2
        constexpr uint32_t IPR_N3 = (8 << 24);  ///< IPR_N3
    }

}

// ============================================================================
// CRS Peripheral
// ============================================================================

namespace crs {
    /// Base addresses
    constexpr uint32_t CRS_BASE = 0x40006000;

    /// CRS Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t CFGR;  ///< Offset: 0x04 - configuration register
        volatile uint32_t ISR;  ///< Offset: 0x08 - interrupt and status register
        volatile uint32_t ICR;  ///< Offset: 0x0C - interrupt flag clear register
    };

    /// Peripheral instances
    inline Registers* CRS = reinterpret_cast<Registers*>(CRS_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t TRIM = (6 << 8);  ///< HSI48 oscillator smooth trimming
        constexpr uint32_t SWSYNC = (1U << 7);  ///< Generate software SYNC event
        constexpr uint32_t AUTOTRIMEN = (1U << 6);  ///< Automatic trimming enable
        constexpr uint32_t CEN = (1U << 5);  ///< Frequency error counter enable
        constexpr uint32_t ESYNCIE = (1U << 3);  ///< Expected SYNC interrupt enable
        constexpr uint32_t ERRIE = (1U << 2);  ///< Synchronization or trimming error interrupt enable
        constexpr uint32_t SYNCWARNIE = (1U << 1);  ///< SYNC warning interrupt enable
        constexpr uint32_t SYNCOKIE = (1U << 0);  ///< SYNC event OK interrupt enable
    }

    /// CFGR Register bits
    namespace cfgr_bits {
        constexpr uint32_t SYNCPOL = (1U << 31);  ///< SYNC polarity selection
        constexpr uint32_t SYNCSRC = (2 << 28);  ///< SYNC signal source selection
        constexpr uint32_t SYNCDIV = (3 << 24);  ///< SYNC divider
        constexpr uint32_t FELIM = (8 << 16);  ///< Frequency error limit
        constexpr uint32_t RELOAD = (16 << 0);  ///< Counter reload value
    }

    /// ISR Register bits
    namespace isr_bits {
        constexpr uint32_t FECAP = (16 << 16);  ///< Frequency error capture
        constexpr uint32_t FEDIR = (1U << 15);  ///< Frequency error direction
        constexpr uint32_t TRIMOVF = (1U << 10);  ///< Trimming overflow or underflow
        constexpr uint32_t SYNCMISS = (1U << 9);  ///< SYNC missed
        constexpr uint32_t SYNCERR = (1U << 8);  ///< SYNC error
        constexpr uint32_t ESYNCF = (1U << 3);  ///< Expected SYNC flag
        constexpr uint32_t ERRF = (1U << 2);  ///< Error flag
        constexpr uint32_t SYNCWARNF = (1U << 1);  ///< SYNC warning flag
        constexpr uint32_t SYNCOKF = (1U << 0);  ///< SYNC event OK flag
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t ESYNCC = (1U << 3);  ///< Expected SYNC clear flag
        constexpr uint32_t ERRC = (1U << 2);  ///< Error clear flag
        constexpr uint32_t SYNCWARNC = (1U << 1);  ///< SYNC warning clear flag
        constexpr uint32_t SYNCOKC = (1U << 0);  ///< SYNC event OK clear flag
    }

}

// ============================================================================
// DCMI Peripheral
// ============================================================================

namespace dcmi {
    /// Base addresses
    constexpr uint32_t DCMI_BASE = 0x50050000;

    /// DCMI Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register 1
        volatile uint32_t SR;  ///< Offset: 0x04 - status register
        volatile uint32_t RIS;  ///< Offset: 0x08 - raw interrupt status register
        volatile uint32_t IER;  ///< Offset: 0x0C - interrupt enable register
        volatile uint32_t MIS;  ///< Offset: 0x10 - masked interrupt status register
        volatile uint32_t ICR;  ///< Offset: 0x14 - interrupt clear register
        volatile uint32_t ESCR;  ///< Offset: 0x18 - embedded synchronization code register
        volatile uint32_t ESUR;  ///< Offset: 0x1C - embedded synchronization unmask register
        volatile uint32_t CWSTRT;  ///< Offset: 0x20 - crop window start
        volatile uint32_t CWSIZE;  ///< Offset: 0x24 - crop window size
        volatile uint32_t DR;  ///< Offset: 0x28 - data register
    };

    /// Peripheral instances
    inline Registers* DCMI = reinterpret_cast<Registers*>(DCMI_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t ENABLE = (1U << 14);  ///< DCMI enable
        constexpr uint32_t EDM = (2 << 10);  ///< Extended data mode
        constexpr uint32_t FCRC = (2 << 8);  ///< Frame capture rate control
        constexpr uint32_t VSPOL = (1U << 7);  ///< Vertical synchronization polarity
        constexpr uint32_t HSPOL = (1U << 6);  ///< Horizontal synchronization polarity
        constexpr uint32_t PCKPOL = (1U << 5);  ///< Pixel clock polarity
        constexpr uint32_t ESS = (1U << 4);  ///< Embedded synchronization select
        constexpr uint32_t JPEG = (1U << 3);  ///< JPEG format
        constexpr uint32_t CROP = (1U << 2);  ///< Crop feature
        constexpr uint32_t CM = (1U << 1);  ///< Capture mode
        constexpr uint32_t CAPTURE = (1U << 0);  ///< Capture enable
        constexpr uint32_t OELS = (1U << 20);  ///< Odd/Even Line Select (Line Select Start)
        constexpr uint32_t LSM = (1U << 19);  ///< Line Select mode
        constexpr uint32_t OEBS = (1U << 18);  ///< Odd/Even Byte Select (Byte Select Start)
        constexpr uint32_t BSM = (2 << 16);  ///< Byte Select mode
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t FNE = (1U << 2);  ///< FIFO not empty
        constexpr uint32_t VSYNC = (1U << 1);  ///< VSYNC
        constexpr uint32_t HSYNC = (1U << 0);  ///< HSYNC
    }

    /// RIS Register bits
    namespace ris_bits {
        constexpr uint32_t LINE_RIS = (1U << 4);  ///< Line raw interrupt status
        constexpr uint32_t VSYNC_RIS = (1U << 3);  ///< VSYNC raw interrupt status
        constexpr uint32_t ERR_RIS = (1U << 2);  ///< Synchronization error raw interrupt status
        constexpr uint32_t OVR_RIS = (1U << 1);  ///< Overrun raw interrupt status
        constexpr uint32_t FRAME_RIS = (1U << 0);  ///< Capture complete raw interrupt status
    }

    /// IER Register bits
    namespace ier_bits {
        constexpr uint32_t LINE_IE = (1U << 4);  ///< Line interrupt enable
        constexpr uint32_t VSYNC_IE = (1U << 3);  ///< VSYNC interrupt enable
        constexpr uint32_t ERR_IE = (1U << 2);  ///< Synchronization error interrupt enable
        constexpr uint32_t OVR_IE = (1U << 1);  ///< Overrun interrupt enable
        constexpr uint32_t FRAME_IE = (1U << 0);  ///< Capture complete interrupt enable
    }

    /// MIS Register bits
    namespace mis_bits {
        constexpr uint32_t LINE_MIS = (1U << 4);  ///< Line masked interrupt status
        constexpr uint32_t VSYNC_MIS = (1U << 3);  ///< VSYNC masked interrupt status
        constexpr uint32_t ERR_MIS = (1U << 2);  ///< Synchronization error masked interrupt status
        constexpr uint32_t OVR_MIS = (1U << 1);  ///< Overrun masked interrupt status
        constexpr uint32_t FRAME_MIS = (1U << 0);  ///< Capture complete masked interrupt status
    }

    /// ICR Register bits
    namespace icr_bits {
        constexpr uint32_t LINE_ISC = (1U << 4);  ///< line interrupt status clear
        constexpr uint32_t VSYNC_ISC = (1U << 3);  ///< Vertical synch interrupt status clear
        constexpr uint32_t ERR_ISC = (1U << 2);  ///< Synchronization error interrupt status clear
        constexpr uint32_t OVR_ISC = (1U << 1);  ///< Overrun interrupt status clear
        constexpr uint32_t FRAME_ISC = (1U << 0);  ///< Capture complete interrupt status clear
    }

    /// ESCR Register bits
    namespace escr_bits {
        constexpr uint32_t FEC = (8 << 24);  ///< Frame end delimiter code
        constexpr uint32_t LEC = (8 << 16);  ///< Line end delimiter code
        constexpr uint32_t LSC = (8 << 8);  ///< Line start delimiter code
        constexpr uint32_t FSC = (8 << 0);  ///< Frame start delimiter code
    }

    /// ESUR Register bits
    namespace esur_bits {
        constexpr uint32_t FEU = (8 << 24);  ///< Frame end delimiter unmask
        constexpr uint32_t LEU = (8 << 16);  ///< Line end delimiter unmask
        constexpr uint32_t LSU = (8 << 8);  ///< Line start delimiter unmask
        constexpr uint32_t FSU = (8 << 0);  ///< Frame start delimiter unmask
    }

    /// CWSTRT Register bits
    namespace cwstrt_bits {
        constexpr uint32_t VST = (13 << 16);  ///< Vertical start line count
        constexpr uint32_t HOFFCNT = (14 << 0);  ///< Horizontal offset count
    }

    /// CWSIZE Register bits
    namespace cwsize_bits {
        constexpr uint32_t VLINE = (14 << 16);  ///< Vertical line count
        constexpr uint32_t CAPCNT = (14 << 0);  ///< Capture count
    }

    /// DR Register bits
    namespace dr_bits {
        constexpr uint32_t Byte3 = (8 << 24);  ///< Data byte 3
        constexpr uint32_t Byte2 = (8 << 16);  ///< Data byte 2
        constexpr uint32_t Byte1 = (8 << 8);  ///< Data byte 1
        constexpr uint32_t Byte0 = (8 << 0);  ///< Data byte 0
    }

}

// ============================================================================
// HASH Peripheral
// ============================================================================

namespace hash {
    /// Base addresses
    constexpr uint32_t HASH_BASE = 0x50060400;

    /// HASH Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - control register
        volatile uint32_t DIN;  ///< Offset: 0x04 - data input register
        volatile uint32_t STR;  ///< Offset: 0x08 - start register
        volatile uint32_t HR0;  ///< Offset: 0x0C - digest registers
        volatile uint32_t IMR;  ///< Offset: 0x20 - interrupt enable register
        volatile uint32_t SR;  ///< Offset: 0x24 - status register
        volatile uint32_t CSR0;  ///< Offset: 0xF8 - context swap registers
        volatile uint32_t CSR1;  ///< Offset: 0xFC - context swap registers
        volatile uint32_t CSR2;  ///< Offset: 0x100 - context swap registers
        volatile uint32_t CSR3;  ///< Offset: 0x104 - context swap registers
        volatile uint32_t CSR4;  ///< Offset: 0x108 - context swap registers
        volatile uint32_t CSR5;  ///< Offset: 0x10C - context swap registers
        volatile uint32_t CSR6;  ///< Offset: 0x110 - context swap registers
        volatile uint32_t CSR7;  ///< Offset: 0x114 - context swap registers
        volatile uint32_t CSR8;  ///< Offset: 0x118 - context swap registers
        volatile uint32_t CSR9;  ///< Offset: 0x11C - context swap registers
        volatile uint32_t CSR10;  ///< Offset: 0x120 - context swap registers
        volatile uint32_t CSR11;  ///< Offset: 0x124 - context swap registers
        volatile uint32_t CSR12;  ///< Offset: 0x128 - context swap registers
        volatile uint32_t CSR13;  ///< Offset: 0x12C - context swap registers
        volatile uint32_t CSR14;  ///< Offset: 0x130 - context swap registers
        volatile uint32_t CSR15;  ///< Offset: 0x134 - context swap registers
        volatile uint32_t CSR16;  ///< Offset: 0x138 - context swap registers
        volatile uint32_t CSR17;  ///< Offset: 0x13C - context swap registers
        volatile uint32_t CSR18;  ///< Offset: 0x140 - context swap registers
        volatile uint32_t CSR19;  ///< Offset: 0x144 - context swap registers
        volatile uint32_t CSR20;  ///< Offset: 0x148 - context swap registers
        volatile uint32_t CSR21;  ///< Offset: 0x14C - context swap registers
        volatile uint32_t CSR22;  ///< Offset: 0x150 - context swap registers
        volatile uint32_t CSR23;  ///< Offset: 0x154 - context swap registers
        volatile uint32_t CSR24;  ///< Offset: 0x158 - context swap registers
        volatile uint32_t CSR25;  ///< Offset: 0x15C - context swap registers
        volatile uint32_t CSR26;  ///< Offset: 0x160 - context swap registers
        volatile uint32_t CSR27;  ///< Offset: 0x164 - context swap registers
        volatile uint32_t CSR28;  ///< Offset: 0x168 - context swap registers
        volatile uint32_t CSR29;  ///< Offset: 0x16C - context swap registers
        volatile uint32_t CSR30;  ///< Offset: 0x170 - context swap registers
        volatile uint32_t CSR31;  ///< Offset: 0x174 - context swap registers
        volatile uint32_t CSR32;  ///< Offset: 0x178 - context swap registers
        volatile uint32_t CSR33;  ///< Offset: 0x17C - context swap registers
        volatile uint32_t CSR34;  ///< Offset: 0x180 - context swap registers
        volatile uint32_t CSR35;  ///< Offset: 0x184 - context swap registers
        volatile uint32_t CSR36;  ///< Offset: 0x188 - context swap registers
        volatile uint32_t CSR37;  ///< Offset: 0x18C - context swap registers
        volatile uint32_t CSR38;  ///< Offset: 0x190 - context swap registers
        volatile uint32_t CSR39;  ///< Offset: 0x194 - context swap registers
        volatile uint32_t CSR40;  ///< Offset: 0x198 - context swap registers
        volatile uint32_t CSR41;  ///< Offset: 0x19C - context swap registers
        volatile uint32_t CSR42;  ///< Offset: 0x1A0 - context swap registers
        volatile uint32_t CSR43;  ///< Offset: 0x1A4 - context swap registers
        volatile uint32_t CSR44;  ///< Offset: 0x1A8 - context swap registers
        volatile uint32_t CSR45;  ///< Offset: 0x1AC - context swap registers
        volatile uint32_t CSR46;  ///< Offset: 0x1B0 - context swap registers
        volatile uint32_t CSR47;  ///< Offset: 0x1B4 - context swap registers
        volatile uint32_t CSR48;  ///< Offset: 0x1B8 - context swap registers
        volatile uint32_t CSR49;  ///< Offset: 0x1BC - context swap registers
        volatile uint32_t CSR50;  ///< Offset: 0x1C0 - context swap registers
        volatile uint32_t CSR51;  ///< Offset: 0x1C4 - context swap registers
        volatile uint32_t CSR52;  ///< Offset: 0x1C8 - context swap registers
        volatile uint32_t CSR53;  ///< Offset: 0x1CC - context swap registers
        volatile uint32_t HASH_HR0;  ///< Offset: 0x310 - HASH digest register
        volatile uint32_t HASH_HR1;  ///< Offset: 0x314 - read-only
        volatile uint32_t HASH_HR2;  ///< Offset: 0x318 - read-only
        volatile uint32_t HASH_HR3;  ///< Offset: 0x31C - read-only
        volatile uint32_t HASH_HR4;  ///< Offset: 0x320 - read-only
        volatile uint32_t HASH_HR5;  ///< Offset: 0x324 - read-only
        volatile uint32_t HASH_HR6;  ///< Offset: 0x328 - read-only
        volatile uint32_t HASH_HR7;  ///< Offset: 0x32C - read-only
    };

    /// Peripheral instances
    inline Registers* HASH = reinterpret_cast<Registers*>(HASH_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t INIT = (1U << 2);  ///< Initialize message digest calculation
        constexpr uint32_t DMAE = (1U << 3);  ///< DMA enable
        constexpr uint32_t DATATYPE = (2 << 4);  ///< Data type selection
        constexpr uint32_t MODE = (1U << 6);  ///< Mode selection
        constexpr uint32_t ALGO0 = (1U << 7);  ///< Algorithm selection
        constexpr uint32_t NBW = (4 << 8);  ///< Number of words already pushed
        constexpr uint32_t DINNE = (1U << 12);  ///< DIN not empty
        constexpr uint32_t MDMAT = (1U << 13);  ///< Multiple DMA Transfers
        constexpr uint32_t LKEY = (1U << 16);  ///< Long key selection
        constexpr uint32_t ALGO1 = (1U << 18);  ///< ALGO
    }

    /// DIN Register bits
    namespace din_bits {
        constexpr uint32_t DATAIN = (32 << 0);  ///< Data input
    }

    /// STR Register bits
    namespace str_bits {
        constexpr uint32_t DCAL = (1U << 8);  ///< Digest calculation
        constexpr uint32_t NBLW = (5 << 0);  ///< Number of valid bits in the last word of the message
    }

    /// HR0 Register bits
    namespace hr0_bits {
        constexpr uint32_t H0 = (32 << 0);  ///< H0
    }

    /// IMR Register bits
    namespace imr_bits {
        constexpr uint32_t DCIE = (1U << 1);  ///< Digest calculation completion interrupt enable
        constexpr uint32_t DINIE = (1U << 0);  ///< Data input interrupt enable
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t BUSY = (1U << 3);  ///< Busy bit
        constexpr uint32_t DMAS = (1U << 2);  ///< DMA Status
        constexpr uint32_t DCIS = (1U << 1);  ///< Digest calculation completion interrupt status
        constexpr uint32_t DINIS = (1U << 0);  ///< Data input interrupt status
    }

    /// CSR0 Register bits
    namespace csr0_bits {
        constexpr uint32_t CSR0 = (32 << 0);  ///< CSR0
    }

    /// CSR1 Register bits
    namespace csr1_bits {
        constexpr uint32_t CSR1 = (32 << 0);  ///< CSR1
    }

    /// CSR2 Register bits
    namespace csr2_bits {
        constexpr uint32_t CSR2 = (32 << 0);  ///< CSR2
    }

    /// CSR3 Register bits
    namespace csr3_bits {
        constexpr uint32_t CSR3 = (32 << 0);  ///< CSR3
    }

    /// CSR4 Register bits
    namespace csr4_bits {
        constexpr uint32_t CSR4 = (32 << 0);  ///< CSR4
    }

    /// CSR5 Register bits
    namespace csr5_bits {
        constexpr uint32_t CSR5 = (32 << 0);  ///< CSR5
    }

    /// CSR6 Register bits
    namespace csr6_bits {
        constexpr uint32_t CSR6 = (32 << 0);  ///< CSR6
    }

    /// CSR7 Register bits
    namespace csr7_bits {
        constexpr uint32_t CSR7 = (32 << 0);  ///< CSR7
    }

    /// CSR8 Register bits
    namespace csr8_bits {
        constexpr uint32_t CSR8 = (32 << 0);  ///< CSR8
    }

    /// CSR9 Register bits
    namespace csr9_bits {
        constexpr uint32_t CSR9 = (32 << 0);  ///< CSR9
    }

    /// CSR10 Register bits
    namespace csr10_bits {
        constexpr uint32_t CSR10 = (32 << 0);  ///< CSR10
    }

    /// CSR11 Register bits
    namespace csr11_bits {
        constexpr uint32_t CSR11 = (32 << 0);  ///< CSR11
    }

    /// CSR12 Register bits
    namespace csr12_bits {
        constexpr uint32_t CSR12 = (32 << 0);  ///< CSR12
    }

    /// CSR13 Register bits
    namespace csr13_bits {
        constexpr uint32_t CSR13 = (32 << 0);  ///< CSR13
    }

    /// CSR14 Register bits
    namespace csr14_bits {
        constexpr uint32_t CSR14 = (32 << 0);  ///< CSR14
    }

    /// CSR15 Register bits
    namespace csr15_bits {
        constexpr uint32_t CSR15 = (32 << 0);  ///< CSR15
    }

    /// CSR16 Register bits
    namespace csr16_bits {
        constexpr uint32_t CSR16 = (32 << 0);  ///< CSR16
    }

    /// CSR17 Register bits
    namespace csr17_bits {
        constexpr uint32_t CSR17 = (32 << 0);  ///< CSR17
    }

    /// CSR18 Register bits
    namespace csr18_bits {
        constexpr uint32_t CSR18 = (32 << 0);  ///< CSR18
    }

    /// CSR19 Register bits
    namespace csr19_bits {
        constexpr uint32_t CSR19 = (32 << 0);  ///< CSR19
    }

    /// CSR20 Register bits
    namespace csr20_bits {
        constexpr uint32_t CSR20 = (32 << 0);  ///< CSR20
    }

    /// CSR21 Register bits
    namespace csr21_bits {
        constexpr uint32_t CSR21 = (32 << 0);  ///< CSR21
    }

    /// CSR22 Register bits
    namespace csr22_bits {
        constexpr uint32_t CSR22 = (32 << 0);  ///< CSR22
    }

    /// CSR23 Register bits
    namespace csr23_bits {
        constexpr uint32_t CSR23 = (32 << 0);  ///< CSR23
    }

    /// CSR24 Register bits
    namespace csr24_bits {
        constexpr uint32_t CSR24 = (32 << 0);  ///< CSR24
    }

    /// CSR25 Register bits
    namespace csr25_bits {
        constexpr uint32_t CSR25 = (32 << 0);  ///< CSR25
    }

    /// CSR26 Register bits
    namespace csr26_bits {
        constexpr uint32_t CSR26 = (32 << 0);  ///< CSR26
    }

    /// CSR27 Register bits
    namespace csr27_bits {
        constexpr uint32_t CSR27 = (32 << 0);  ///< CSR27
    }

    /// CSR28 Register bits
    namespace csr28_bits {
        constexpr uint32_t CSR28 = (32 << 0);  ///< CSR28
    }

    /// CSR29 Register bits
    namespace csr29_bits {
        constexpr uint32_t CSR29 = (32 << 0);  ///< CSR29
    }

    /// CSR30 Register bits
    namespace csr30_bits {
        constexpr uint32_t CSR30 = (32 << 0);  ///< CSR30
    }

    /// CSR31 Register bits
    namespace csr31_bits {
        constexpr uint32_t CSR31 = (32 << 0);  ///< CSR31
    }

    /// CSR32 Register bits
    namespace csr32_bits {
        constexpr uint32_t CSR32 = (32 << 0);  ///< CSR32
    }

    /// CSR33 Register bits
    namespace csr33_bits {
        constexpr uint32_t CSR33 = (32 << 0);  ///< CSR33
    }

    /// CSR34 Register bits
    namespace csr34_bits {
        constexpr uint32_t CSR34 = (32 << 0);  ///< CSR34
    }

    /// CSR35 Register bits
    namespace csr35_bits {
        constexpr uint32_t CSR35 = (32 << 0);  ///< CSR35
    }

    /// CSR36 Register bits
    namespace csr36_bits {
        constexpr uint32_t CSR36 = (32 << 0);  ///< CSR36
    }

    /// CSR37 Register bits
    namespace csr37_bits {
        constexpr uint32_t CSR37 = (32 << 0);  ///< CSR37
    }

    /// CSR38 Register bits
    namespace csr38_bits {
        constexpr uint32_t CSR38 = (32 << 0);  ///< CSR38
    }

    /// CSR39 Register bits
    namespace csr39_bits {
        constexpr uint32_t CSR39 = (32 << 0);  ///< CSR39
    }

    /// CSR40 Register bits
    namespace csr40_bits {
        constexpr uint32_t CSR40 = (32 << 0);  ///< CSR40
    }

    /// CSR41 Register bits
    namespace csr41_bits {
        constexpr uint32_t CSR41 = (32 << 0);  ///< CSR41
    }

    /// CSR42 Register bits
    namespace csr42_bits {
        constexpr uint32_t CSR42 = (32 << 0);  ///< CSR42
    }

    /// CSR43 Register bits
    namespace csr43_bits {
        constexpr uint32_t CSR43 = (32 << 0);  ///< CSR43
    }

    /// CSR44 Register bits
    namespace csr44_bits {
        constexpr uint32_t CSR44 = (32 << 0);  ///< CSR44
    }

    /// CSR45 Register bits
    namespace csr45_bits {
        constexpr uint32_t CSR45 = (32 << 0);  ///< CSR45
    }

    /// CSR46 Register bits
    namespace csr46_bits {
        constexpr uint32_t CSR46 = (32 << 0);  ///< CSR46
    }

    /// CSR47 Register bits
    namespace csr47_bits {
        constexpr uint32_t CSR47 = (32 << 0);  ///< CSR47
    }

    /// CSR48 Register bits
    namespace csr48_bits {
        constexpr uint32_t CSR48 = (32 << 0);  ///< CSR48
    }

    /// CSR49 Register bits
    namespace csr49_bits {
        constexpr uint32_t CSR49 = (32 << 0);  ///< CSR49
    }

    /// CSR50 Register bits
    namespace csr50_bits {
        constexpr uint32_t CSR50 = (32 << 0);  ///< CSR50
    }

    /// CSR51 Register bits
    namespace csr51_bits {
        constexpr uint32_t CSR51 = (32 << 0);  ///< CSR51
    }

    /// CSR52 Register bits
    namespace csr52_bits {
        constexpr uint32_t CSR52 = (32 << 0);  ///< CSR52
    }

    /// CSR53 Register bits
    namespace csr53_bits {
        constexpr uint32_t CSR53 = (32 << 0);  ///< CSR53
    }

    /// HASH_HR0 Register bits
    namespace hash_hr0_bits {
        constexpr uint32_t H0 = (32 << 0);  ///< H0
    }

    /// HASH_HR1 Register bits
    namespace hash_hr1_bits {
        constexpr uint32_t H1 = (32 << 0);  ///< H1
    }

    /// HASH_HR2 Register bits
    namespace hash_hr2_bits {
        constexpr uint32_t H2 = (32 << 0);  ///< H2
    }

    /// HASH_HR3 Register bits
    namespace hash_hr3_bits {
        constexpr uint32_t H3 = (32 << 0);  ///< H3
    }

    /// HASH_HR4 Register bits
    namespace hash_hr4_bits {
        constexpr uint32_t H4 = (32 << 0);  ///< H4
    }

    /// HASH_HR5 Register bits
    namespace hash_hr5_bits {
        constexpr uint32_t H5 = (32 << 0);  ///< H5
    }

    /// HASH_HR6 Register bits
    namespace hash_hr6_bits {
        constexpr uint32_t H6 = (32 << 0);  ///< H6
    }

    /// HASH_HR7 Register bits
    namespace hash_hr7_bits {
        constexpr uint32_t H7 = (32 << 0);  ///< H7
    }

}

// ============================================================================
// DSI Peripheral
// ============================================================================

namespace dsi {
    /// Base addresses
    constexpr uint32_t DSI_BASE = 0x40016C00;

    /// DSI Register structure
    struct Registers {
        volatile uint32_t DSI_VR;  ///< Offset: 0x00 - DSI Host Version Register
        volatile uint32_t DSI_CR;  ///< Offset: 0x04 - DSI Host Control Register
        volatile uint32_t DSI_CCR;  ///< Offset: 0x08 - DSI HOST Clock Control Register
        volatile uint32_t DSI_LVCIDR;  ///< Offset: 0x0C - DSI Host LTDC VCID Register
        volatile uint32_t DSI_LCOLCR;  ///< Offset: 0x10 - DSI Host LTDC Color Coding Register
        volatile uint32_t DSI_LPCR;  ///< Offset: 0x14 - DSI Host LTDC Polarity Configuration Register
        volatile uint32_t DSI_LPMCR;  ///< Offset: 0x18 - DSI Host Low-Power mode Configuration Register
        volatile uint32_t DSI_PCR;  ///< Offset: 0x1C - DSI Host Protocol Configuration Register
        volatile uint32_t DSI_GVCIDR;  ///< Offset: 0x20 - DSI Host Generic VCID Register
        volatile uint32_t DSI_MCR;  ///< Offset: 0x24 - DSI Host mode Configuration Register
        volatile uint32_t DSI_VMCR;  ///< Offset: 0x28 - DSI Host Video mode Configuration Register
        volatile uint32_t DSI_VPCR;  ///< Offset: 0x2C - DSI Host Video Packet Configuration Register
        volatile uint32_t DSI_VCCR;  ///< Offset: 0x30 - DSI Host Video Chunks Configuration Register
        volatile uint32_t DSI_VNPCR;  ///< Offset: 0x34 - DSI Host Video Null Packet Configuration Register
        volatile uint32_t DSI_VHSACR;  ///< Offset: 0x38 - DSI Host Video HSA Configuration Register
        volatile uint32_t DSI_VHBPCR;  ///< Offset: 0x3C - DSI Host Video HBP Configuration Register
        volatile uint32_t DSI_VLCR;  ///< Offset: 0x40 - DSI Host Video Line Configuration Register
        volatile uint32_t DSI_VVSACR;  ///< Offset: 0x44 - DSI Host Video VSA Configuration Register
        volatile uint32_t DSI_VVBPCR;  ///< Offset: 0x48 - DSI Host Video VBP Configuration Register
        volatile uint32_t DSI_VVFPCR;  ///< Offset: 0x4C - DSI Host Video VFP Configuration Register
        volatile uint32_t DSI_VVACR;  ///< Offset: 0x50 - DSI Host Video VA Configuration Register
        volatile uint32_t DSI_LCCR;  ///< Offset: 0x54 - DSI Host LTDC Command Configuration Register
        volatile uint32_t DSI_CMCR;  ///< Offset: 0x58 - DSI Host Command mode Configuration Register
        volatile uint32_t DSI_GHCR;  ///< Offset: 0x5C - DSI Host Generic Header Configuration Register
        volatile uint32_t DSI_GPDR;  ///< Offset: 0x60 - DSI Host Generic Payload Data Register
        volatile uint32_t DSI_GPSR;  ///< Offset: 0x64 - DSI Host Generic Packet Status Register
        volatile uint32_t DSI_TCCR0;  ///< Offset: 0x68 - DSI Host Timeout Counter Configuration Register 0
        volatile uint32_t DSI_TCCR1;  ///< Offset: 0x6C - DSI Host Timeout Counter Configuration Register 1
        volatile uint32_t DSI_TCCR2;  ///< Offset: 0x70 - DSI Host Timeout Counter Configuration Register 2
        volatile uint32_t DSI_TCCR3;  ///< Offset: 0x74 - DSI Host Timeout Counter Configuration Register 3
        volatile uint32_t DSI_TCCR4;  ///< Offset: 0x78 - DSI Host Timeout Counter Configuration Register 4
        volatile uint32_t DSI_TCCR5;  ///< Offset: 0x7C - DSI Host Timeout Counter Configuration Register 5
        volatile uint32_t DSI_CLCR;  ///< Offset: 0x80 - DSI Host Clock Lane Configuration Register
        volatile uint32_t DSI_CLTCR;  ///< Offset: 0x84 - DSI Host Clock Lane Timer Configuration Register
        volatile uint32_t DSI_DLTRC;  ///< Offset: 0x88 - DSI Host Data Lane Timer Configuration Register
        volatile uint32_t DSI_PCTLR;  ///< Offset: 0x8C - DSI Host PHY Control Register
        volatile uint32_t DSI_PCONFR;  ///< Offset: 0x90 - DSI Host PHY Configuration Register
        volatile uint32_t DSI_PUCR;  ///< Offset: 0x94 - DSI Host PHY ULPS Control Register
        volatile uint32_t DSI_PTTCR;  ///< Offset: 0x98 - DSI Host PHY TX Triggers Configuration Register
        volatile uint32_t DSI_PSR;  ///< Offset: 0x9C - DSI Host PHY Status Register
        volatile uint32_t DSI_ISR0;  ///< Offset: 0xA0 - DSI Host Interrupt & Status Register 0
        volatile uint32_t DSI_ISR1;  ///< Offset: 0xA4 - DSI Host Interrupt & Status Register 1
        volatile uint32_t DSI_IER0;  ///< Offset: 0xA8 - DSI Host Interrupt Enable Register 0
        volatile uint32_t DSI_IER1;  ///< Offset: 0xAC - DSI Host Interrupt Enable Register 1
        volatile uint32_t DSI_FIR0;  ///< Offset: 0xB0 - DSI Host Force Interrupt Register 0
        volatile uint32_t DSI_FIR1;  ///< Offset: 0xB4 - DSI Host Force Interrupt Register 1
        volatile uint32_t DSI_VSCR;  ///< Offset: 0xB8 - DSI Host Video Shadow Control Register
        volatile uint32_t DSI_LCVCIDR;  ///< Offset: 0xBC - DSI Host LTDC Current VCID Register
        volatile uint32_t DSI_LCCCR;  ///< Offset: 0xC0 - DSI Host LTDC Current Color Coding Register
        volatile uint32_t DSI_LPMCCR;  ///< Offset: 0xC4 - DSI Host Low-Power mode Current Configuration Register
        volatile uint32_t DSI_VMCCR;  ///< Offset: 0xC8 - DSI Host Video mode Current Configuration Register
        volatile uint32_t DSI_VPCCR;  ///< Offset: 0xCC - DSI Host Video Packet Current Configuration Register
        volatile uint32_t DSI_VCCCR;  ///< Offset: 0xD0 - DSI Host Video Chunks Current Configuration Register
        volatile uint32_t DSI_VNPCCR;  ///< Offset: 0xD4 - DSI Host Video Null Packet Current Configuration Register
        volatile uint32_t DSI_VHSACCR;  ///< Offset: 0xD8 - DSI Host Video HSA Current Configuration Register
        volatile uint32_t DSI_VHBPCCR;  ///< Offset: 0xDC - DSI Host Video HBP Current Configuration Register
        volatile uint32_t DSI_VLCCR;  ///< Offset: 0xE0 - DSI Host Video Line Current Configuration Register
        volatile uint32_t DSI_VVSACCR;  ///< Offset: 0xE4 - DSI Host Video VSA Current Configuration Register
        volatile uint32_t DSI_VVBPCCR;  ///< Offset: 0xE8 - DSI Host Video VBP Current Configuration Register
        volatile uint32_t DSI_VVFPCCR;  ///< Offset: 0xEC - DSI Host Video VFP Current Configuration Register
        volatile uint32_t DSI_VVACCR;  ///< Offset: 0xF0 - DSI Host Video VA Current Configuration Register
        volatile uint32_t DSI_WCFGR;  ///< Offset: 0x400 - DSI Wrapper Configuration Register
        volatile uint32_t DSI_WCR;  ///< Offset: 0x404 - DSI Wrapper Control Register
        volatile uint32_t DSI_WIER;  ///< Offset: 0x408 - DSI Wrapper Interrupt Enable Register
        volatile uint32_t DSI_WISR;  ///< Offset: 0x40C - DSI Wrapper Interrupt & Status Register
        volatile uint32_t DSI_WIFCR;  ///< Offset: 0x410 - DSI Wrapper Interrupt Flag Clear Register
        volatile uint32_t DSI_WPCR1;  ///< Offset: 0x418 - DSI Wrapper PHY Configuration Register 1
        volatile uint32_t DSI_WPCR2;  ///< Offset: 0x41C - DSI Wrapper PHY Configuration Register 2
        volatile uint32_t DSI_WPCR3;  ///< Offset: 0x420 - DSI Wrapper PHY Configuration Register 3
        volatile uint32_t DSI_WPCR4;  ///< Offset: 0x424 - DSI_WPCR4
        volatile uint32_t DSI_WPCR5;  ///< Offset: 0x428 - DSI Wrapper PHY Configuration Register 5
        volatile uint32_t DSI_WRPCR;  ///< Offset: 0x430 - DSI Wrapper Regulator and PLL Control Register
    };

    /// Peripheral instances
    inline Registers* DSI = reinterpret_cast<Registers*>(DSI_BASE);

    // Bit definitions
    /// DSI_VR Register bits
    namespace dsi_vr_bits {
        constexpr uint32_t VERSION = (32 << 0);  ///< Version of the DSI Host
    }

    /// DSI_CR Register bits
    namespace dsi_cr_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
    }

    /// DSI_CCR Register bits
    namespace dsi_ccr_bits {
        constexpr uint32_t TXECKDIV = (8 << 0);  ///< TX Escape Clock Division
        constexpr uint32_t TOCKDIV = (8 << 8);  ///< Timeout Clock Division
    }

    /// DSI_LVCIDR Register bits
    namespace dsi_lvcidr_bits {
        constexpr uint32_t VCID = (2 << 0);  ///< Virtual Channel ID
    }

    /// DSI_LCOLCR Register bits
    namespace dsi_lcolcr_bits {
        constexpr uint32_t COLC = (4 << 0);  ///< Color Coding
        constexpr uint32_t LPE = (1U << 8);  ///< Loosely Packet Enable
    }

    /// DSI_LPCR Register bits
    namespace dsi_lpcr_bits {
        constexpr uint32_t DEP = (1U << 0);  ///< Data Enable Polarity
        constexpr uint32_t VSP = (1U << 1);  ///< VSYNC Polarity
        constexpr uint32_t HSP = (1U << 2);  ///< HSYNC Polarity
    }

    /// DSI_LPMCR Register bits
    namespace dsi_lpmcr_bits {
        constexpr uint32_t VLPSIZE = (8 << 0);  ///< VACT Largest Packet Size
        constexpr uint32_t LPSIZE = (8 << 16);  ///< Largest Packet Size
    }

    /// DSI_PCR Register bits
    namespace dsi_pcr_bits {
        constexpr uint32_t ETTXE = (1U << 0);  ///< EoTp Transmission Enable
        constexpr uint32_t ETRXE = (1U << 1);  ///< EoTp Reception Enable
        constexpr uint32_t BTAE = (1U << 2);  ///< Bus Turn Around Enable
        constexpr uint32_t ECCRXE = (1U << 3);  ///< ECC Reception Enable
        constexpr uint32_t CRCRXE = (1U << 4);  ///< CRC Reception Enable
    }

    /// DSI_GVCIDR Register bits
    namespace dsi_gvcidr_bits {
        constexpr uint32_t VCID = (2 << 0);  ///< Virtual Channel ID
    }

    /// DSI_MCR Register bits
    namespace dsi_mcr_bits {
        constexpr uint32_t CMDM = (1U << 0);  ///< Command mode
    }

    /// DSI_VMCR Register bits
    namespace dsi_vmcr_bits {
        constexpr uint32_t VMT = (2 << 0);  ///< Video mode Type
        constexpr uint32_t LPVSAE = (1U << 8);  ///< Low-Power Vertical Sync Active Enable
        constexpr uint32_t LPVBPE = (1U << 9);  ///< Low-power Vertical Back-Porch Enable
        constexpr uint32_t LPVFPE = (1U << 10);  ///< Low-power Vertical Front-porch Enable
        constexpr uint32_t LPVAE = (1U << 11);  ///< Low-Power Vertical Active Enable
        constexpr uint32_t LPHBPE = (1U << 12);  ///< Low-Power Horizontal Back-Porch Enable
        constexpr uint32_t LPHFPE = (1U << 13);  ///< Low-Power Horizontal Front-Porch Enable
        constexpr uint32_t FBTAAE = (1U << 14);  ///< Frame Bus-Turn-Around Acknowledge Enable
        constexpr uint32_t LPCE = (1U << 15);  ///< Low-Power Command Enable
        constexpr uint32_t PGE = (1U << 16);  ///< Pattern Generator Enable
        constexpr uint32_t PGM = (1U << 20);  ///< Pattern Generator mode
        constexpr uint32_t PGO = (1U << 24);  ///< Pattern Generator Orientation
    }

    /// DSI_VPCR Register bits
    namespace dsi_vpcr_bits {
        constexpr uint32_t VPSIZE = (14 << 0);  ///< Video Packet Size
    }

    /// DSI_VCCR Register bits
    namespace dsi_vccr_bits {
        constexpr uint32_t NUMC = (13 << 0);  ///< Number of Chunks
    }

    /// DSI_VNPCR Register bits
    namespace dsi_vnpcr_bits {
        constexpr uint32_t NPSIZE = (13 << 0);  ///< Null Packet Size
    }

    /// DSI_VHSACR Register bits
    namespace dsi_vhsacr_bits {
        constexpr uint32_t HSA = (12 << 0);  ///< Horizontal Synchronism Active duration
    }

    /// DSI_VHBPCR Register bits
    namespace dsi_vhbpcr_bits {
        constexpr uint32_t HBP = (12 << 0);  ///< Horizontal Back-Porch duration
    }

    /// DSI_VLCR Register bits
    namespace dsi_vlcr_bits {
        constexpr uint32_t HLINE = (15 << 0);  ///< Horizontal Line duration
    }

    /// DSI_VVSACR Register bits
    namespace dsi_vvsacr_bits {
        constexpr uint32_t VSA = (10 << 0);  ///< Vertical Synchronism Active duration
    }

    /// DSI_VVBPCR Register bits
    namespace dsi_vvbpcr_bits {
        constexpr uint32_t VBP = (10 << 0);  ///< Vertical Back-Porch duration
    }

    /// DSI_VVFPCR Register bits
    namespace dsi_vvfpcr_bits {
        constexpr uint32_t VFP = (10 << 0);  ///< Vertical Front-Porch duration
    }

    /// DSI_VVACR Register bits
    namespace dsi_vvacr_bits {
        constexpr uint32_t VA = (14 << 0);  ///< Vertical Active duration
    }

    /// DSI_LCCR Register bits
    namespace dsi_lccr_bits {
        constexpr uint32_t CMDSIZE = (16 << 0);  ///< Command Size
    }

    /// DSI_CMCR Register bits
    namespace dsi_cmcr_bits {
        constexpr uint32_t TEARE = (1U << 0);  ///< Tearing Effect Acknowledge Request Enable
        constexpr uint32_t ARE = (1U << 1);  ///< Acknowledge Request Enable
        constexpr uint32_t GSW0TX = (1U << 8);  ///< Generic Short Write Zero parameters Transmission
        constexpr uint32_t GSW1TX = (1U << 9);  ///< Generic Short Write One parameters Transmission
        constexpr uint32_t GSW2TX = (1U << 10);  ///< Generic Short Write Two parameters Transmission
        constexpr uint32_t GSR0TX = (1U << 11);  ///< Generic Short Read Zero parameters Transmission
        constexpr uint32_t GSR1TX = (1U << 12);  ///< Generic Short Read One parameters Transmission
        constexpr uint32_t GSR2TX = (1U << 13);  ///< Generic Short Read Two parameters Transmission
        constexpr uint32_t GLWTX = (1U << 14);  ///< Generic Long Write Transmission
        constexpr uint32_t DSW0TX = (1U << 16);  ///< DCS Short Write Zero parameter Transmission
        constexpr uint32_t DSW1TX = (1U << 17);  ///< DCS Short Read One parameter Transmission
        constexpr uint32_t DSR0TX = (1U << 18);  ///< DCS Short Read Zero parameter Transmission
        constexpr uint32_t DLWTX = (1U << 19);  ///< DCS Long Write Transmission
        constexpr uint32_t MRDPS = (1U << 24);  ///< Maximum Read Packet Size
    }

    /// DSI_GHCR Register bits
    namespace dsi_ghcr_bits {
        constexpr uint32_t DT = (6 << 0);  ///< Type
        constexpr uint32_t VCID = (2 << 6);  ///< Channel
        constexpr uint32_t WCLSB = (8 << 8);  ///< WordCount LSB
        constexpr uint32_t WCMSB = (8 << 16);  ///< WordCount MSB
    }

    /// DSI_GPDR Register bits
    namespace dsi_gpdr_bits {
        constexpr uint32_t DATA1 = (8 << 0);  ///< Payload Byte 1
        constexpr uint32_t DATA2 = (8 << 8);  ///< Payload Byte 2
        constexpr uint32_t DATA3 = (8 << 16);  ///< Payload Byte 3
        constexpr uint32_t DATA4 = (8 << 24);  ///< Payload Byte 4
    }

    /// DSI_GPSR Register bits
    namespace dsi_gpsr_bits {
        constexpr uint32_t CMDFE = (1U << 0);  ///< Command FIFO Empty
        constexpr uint32_t CMDFF = (1U << 1);  ///< Command FIFO Full
        constexpr uint32_t PWRFE = (1U << 2);  ///< Payload Write FIFO Empty
        constexpr uint32_t PWRFF = (1U << 3);  ///< Payload Write FIFO Full
        constexpr uint32_t PRDFE = (1U << 4);  ///< Payload Read FIFO Empty
        constexpr uint32_t PRDFF = (1U << 5);  ///< Payload Read FIFO Full
        constexpr uint32_t RCB = (1U << 6);  ///< Read Command Busy
    }

    /// DSI_TCCR0 Register bits
    namespace dsi_tccr0_bits {
        constexpr uint32_t LPRX_TOCNT = (16 << 0);  ///< Low-power Reception Timeout Counter
        constexpr uint32_t HSTX_TOCNT = (16 << 16);  ///< High-Speed Transmission Timeout Counter
    }

    /// DSI_TCCR1 Register bits
    namespace dsi_tccr1_bits {
        constexpr uint32_t HSRD_TOCNT = (16 << 0);  ///< High-Speed Read Timeout Counter
    }

    /// DSI_TCCR2 Register bits
    namespace dsi_tccr2_bits {
        constexpr uint32_t LPRD_TOCNT = (16 << 0);  ///< Low-Power Read Timeout Counter
    }

    /// DSI_TCCR3 Register bits
    namespace dsi_tccr3_bits {
        constexpr uint32_t HSWR_TOCNT = (16 << 0);  ///< High-Speed Write Timeout Counter
        constexpr uint32_t PM = (1U << 24);  ///< Presp mode
    }

    /// DSI_TCCR4 Register bits
    namespace dsi_tccr4_bits {
        constexpr uint32_t LSWR_TOCNT = (16 << 0);  ///< Low-Power Write Timeout Counter
    }

    /// DSI_TCCR5 Register bits
    namespace dsi_tccr5_bits {
        constexpr uint32_t BTA_TOCNT = (16 << 0);  ///< Bus-Turn-Around Timeout Counter
    }

    /// DSI_CLCR Register bits
    namespace dsi_clcr_bits {
        constexpr uint32_t DPCC = (1U << 0);  ///< D-PHY Clock Control
        constexpr uint32_t ACR = (1U << 1);  ///< Automatic Clock lane Control
    }

    /// DSI_CLTCR Register bits
    namespace dsi_cltcr_bits {
        constexpr uint32_t LP2HS_TIME = (10 << 0);  ///< Low-Power to High-Speed Time
        constexpr uint32_t HS2LP_TIME = (10 << 16);  ///< High-Speed to Low-Power Time
    }

    /// DSI_DLTRC Register bits
    namespace dsi_dltrc_bits {
        constexpr uint32_t MRD_TIME = (15 << 0);  ///< Maximum Read Time
        constexpr uint32_t LP2HS_TIME = (8 << 16);  ///< Low-Power To High-Speed Time
        constexpr uint32_t HS2LP_TIME = (8 << 24);  ///< High-Speed To Low-Power Time
    }

    /// DSI_PCTLR Register bits
    namespace dsi_pctlr_bits {
        constexpr uint32_t DEN = (1U << 1);  ///< Digital Enable
        constexpr uint32_t CKE = (1U << 2);  ///< Clock Enable
    }

    /// DSI_PCONFR Register bits
    namespace dsi_pconfr_bits {
        constexpr uint32_t NL = (2 << 0);  ///< Number of Lanes
        constexpr uint32_t SW_TIME = (8 << 8);  ///< Stop Wait Time
    }

    /// DSI_PUCR Register bits
    namespace dsi_pucr_bits {
        constexpr uint32_t URCL = (1U << 0);  ///< ULPS Request on Clock Lane
        constexpr uint32_t UECL = (1U << 1);  ///< ULPS Exit on Clock Lane
        constexpr uint32_t URDL = (1U << 2);  ///< ULPS Request on Data Lane
        constexpr uint32_t UEDL = (1U << 3);  ///< ULPS Exit on Data Lane
    }

    /// DSI_PTTCR Register bits
    namespace dsi_pttcr_bits {
        constexpr uint32_t TX_TRIG = (4 << 0);  ///< Transmission Trigger
    }

    /// DSI_PSR Register bits
    namespace dsi_psr_bits {
        constexpr uint32_t PD = (1U << 1);  ///< PHY Direction
        constexpr uint32_t PSSC = (1U << 2);  ///< PHY Stop State Clock lane
        constexpr uint32_t UANC = (1U << 3);  ///< ULPS Active Not Clock lane
        constexpr uint32_t PSS0 = (1U << 4);  ///< PHY Stop State lane 0
        constexpr uint32_t UAN0 = (1U << 5);  ///< ULPS Active Not lane 1
        constexpr uint32_t RUE0 = (1U << 6);  ///< RX ULPS Escape lane 0
        constexpr uint32_t PSS1 = (1U << 7);  ///< PHY Stop State lane 1
        constexpr uint32_t UAN1 = (1U << 8);  ///< ULPS Active Not lane 1
    }

    /// DSI_ISR0 Register bits
    namespace dsi_isr0_bits {
        constexpr uint32_t AE0 = (1U << 0);  ///< Acknowledge Error 0
        constexpr uint32_t AE1 = (1U << 1);  ///< Acknowledge Error 1
        constexpr uint32_t AE2 = (1U << 2);  ///< Acknowledge Error 2
        constexpr uint32_t AE3 = (1U << 3);  ///< Acknowledge Error 3
        constexpr uint32_t AE4 = (1U << 4);  ///< Acknowledge Error 4
        constexpr uint32_t AE5 = (1U << 5);  ///< Acknowledge Error 5
        constexpr uint32_t AE6 = (1U << 6);  ///< Acknowledge Error 6
        constexpr uint32_t AE7 = (1U << 7);  ///< Acknowledge Error 7
        constexpr uint32_t AE8 = (1U << 8);  ///< Acknowledge Error 8
        constexpr uint32_t AE9 = (1U << 9);  ///< Acknowledge Error 9
        constexpr uint32_t AE10 = (1U << 10);  ///< Acknowledge Error 10
        constexpr uint32_t AE11 = (1U << 11);  ///< Acknowledge Error 11
        constexpr uint32_t AE12 = (1U << 12);  ///< Acknowledge Error 12
        constexpr uint32_t AE13 = (1U << 13);  ///< Acknowledge Error 13
        constexpr uint32_t AE14 = (1U << 14);  ///< Acknowledge Error 14
        constexpr uint32_t AE15 = (1U << 15);  ///< Acknowledge Error 15
        constexpr uint32_t PE0 = (1U << 16);  ///< PHY Error 0
        constexpr uint32_t PE1 = (1U << 17);  ///< PHY Error 1
        constexpr uint32_t PE2 = (1U << 18);  ///< PHY Error 2
        constexpr uint32_t PE3 = (1U << 19);  ///< PHY Error 3
        constexpr uint32_t PE4 = (1U << 20);  ///< PHY Error 4
    }

    /// DSI_ISR1 Register bits
    namespace dsi_isr1_bits {
        constexpr uint32_t TOHSTX = (1U << 0);  ///< Timeout High-Speed Transmission
        constexpr uint32_t TOLPRX = (1U << 1);  ///< Timeout Low-Power Reception
        constexpr uint32_t ECCSE = (1U << 2);  ///< ECC Single-bit Error
        constexpr uint32_t ECCME = (1U << 3);  ///< ECC Multi-bit Error
        constexpr uint32_t CRCE = (1U << 4);  ///< CRC Error
        constexpr uint32_t PSE = (1U << 5);  ///< Packet Size Error
        constexpr uint32_t EOTPE = (1U << 6);  ///< EoTp Error
        constexpr uint32_t LPWRE = (1U << 7);  ///< LTDC Payload Write Error
        constexpr uint32_t GCWRE = (1U << 8);  ///< Generic Command Write Error
        constexpr uint32_t GPWRE = (1U << 9);  ///< Generic Payload Write Error
        constexpr uint32_t GPTXE = (1U << 10);  ///< Generic Payload Transmit Error
        constexpr uint32_t GPRDE = (1U << 11);  ///< Generic Payload Read Error
        constexpr uint32_t GPRXE = (1U << 12);  ///< Generic Payload Receive Error
    }

    /// DSI_IER0 Register bits
    namespace dsi_ier0_bits {
        constexpr uint32_t AE0IE = (1U << 0);  ///< Acknowledge Error 0 Interrupt Enable
        constexpr uint32_t AE1IE = (1U << 1);  ///< Acknowledge Error 1 Interrupt Enable
        constexpr uint32_t AE2IE = (1U << 2);  ///< Acknowledge Error 2 Interrupt Enable
        constexpr uint32_t AE3IE = (1U << 3);  ///< Acknowledge Error 3 Interrupt Enable
        constexpr uint32_t AE4IE = (1U << 4);  ///< Acknowledge Error 4 Interrupt Enable
        constexpr uint32_t AE5IE = (1U << 5);  ///< Acknowledge Error 5 Interrupt Enable
        constexpr uint32_t AE6IE = (1U << 6);  ///< Acknowledge Error 6 Interrupt Enable
        constexpr uint32_t AE7IE = (1U << 7);  ///< Acknowledge Error 7 Interrupt Enable
        constexpr uint32_t AE8IE = (1U << 8);  ///< Acknowledge Error 8 Interrupt Enable
        constexpr uint32_t AE9IE = (1U << 9);  ///< Acknowledge Error 9 Interrupt Enable
        constexpr uint32_t AE10IE = (1U << 10);  ///< Acknowledge Error 10 Interrupt Enable
        constexpr uint32_t AE11IE = (1U << 11);  ///< Acknowledge Error 11 Interrupt Enable
        constexpr uint32_t AE12IE = (1U << 12);  ///< Acknowledge Error 12 Interrupt Enable
        constexpr uint32_t AE13IE = (1U << 13);  ///< Acknowledge Error 13 Interrupt Enable
        constexpr uint32_t AE14IE = (1U << 14);  ///< Acknowledge Error 14 Interrupt Enable
        constexpr uint32_t AE15IE = (1U << 15);  ///< Acknowledge Error 15 Interrupt Enable
        constexpr uint32_t PE0IE = (1U << 16);  ///< PHY Error 0 Interrupt Enable
        constexpr uint32_t PE1IE = (1U << 17);  ///< PHY Error 1 Interrupt Enable
        constexpr uint32_t PE2IE = (1U << 18);  ///< PHY Error 2 Interrupt Enable
        constexpr uint32_t PE3IE = (1U << 19);  ///< PHY Error 3 Interrupt Enable
        constexpr uint32_t PE4IE = (1U << 20);  ///< PHY Error 4 Interrupt Enable
    }

    /// DSI_IER1 Register bits
    namespace dsi_ier1_bits {
        constexpr uint32_t TOHSTXIE = (1U << 0);  ///< Timeout High-Speed Transmission Interrupt Enable
        constexpr uint32_t TOLPRXIE = (1U << 1);  ///< Timeout Low-Power Reception Interrupt Enable
        constexpr uint32_t ECCSEIE = (1U << 2);  ///< ECC Single-bit Error Interrupt Enable
        constexpr uint32_t ECCMEIE = (1U << 3);  ///< ECC Multi-bit Error Interrupt Enable
        constexpr uint32_t CRCEIE = (1U << 4);  ///< CRC Error Interrupt Enable
        constexpr uint32_t PSEIE = (1U << 5);  ///< Packet Size Error Interrupt Enable
        constexpr uint32_t EOTPEIE = (1U << 6);  ///< EoTp Error Interrupt Enable
        constexpr uint32_t LPWREIE = (1U << 7);  ///< LTDC Payload Write Error Interrupt Enable
        constexpr uint32_t GCWREIE = (1U << 8);  ///< Generic Command Write Error Interrupt Enable
        constexpr uint32_t GPWREIE = (1U << 9);  ///< Generic Payload Write Error Interrupt Enable
        constexpr uint32_t GPTXEIE = (1U << 10);  ///< Generic Payload Transmit Error Interrupt Enable
        constexpr uint32_t GPRDEIE = (1U << 11);  ///< Generic Payload Read Error Interrupt Enable
        constexpr uint32_t GPRXEIE = (1U << 12);  ///< Generic Payload Receive Error Interrupt Enable
    }

    /// DSI_FIR0 Register bits
    namespace dsi_fir0_bits {
        constexpr uint32_t FAE0 = (1U << 0);  ///< Force Acknowledge Error 0
        constexpr uint32_t FAE1 = (1U << 1);  ///< Force Acknowledge Error 1
        constexpr uint32_t FAE2 = (1U << 2);  ///< Force Acknowledge Error 2
        constexpr uint32_t FAE3 = (1U << 3);  ///< Force Acknowledge Error 3
        constexpr uint32_t FAE4 = (1U << 4);  ///< Force Acknowledge Error 4
        constexpr uint32_t FAE5 = (1U << 5);  ///< Force Acknowledge Error 5
        constexpr uint32_t FAE6 = (1U << 6);  ///< Force Acknowledge Error 6
        constexpr uint32_t FAE7 = (1U << 7);  ///< Force Acknowledge Error 7
        constexpr uint32_t FAE8 = (1U << 8);  ///< Force Acknowledge Error 8
        constexpr uint32_t FAE9 = (1U << 9);  ///< Force Acknowledge Error 9
        constexpr uint32_t FAE10 = (1U << 10);  ///< Force Acknowledge Error 10
        constexpr uint32_t FAE11 = (1U << 11);  ///< Force Acknowledge Error 11
        constexpr uint32_t FAE12 = (1U << 12);  ///< Force Acknowledge Error 12
        constexpr uint32_t FAE13 = (1U << 13);  ///< Force Acknowledge Error 13
        constexpr uint32_t FAE14 = (1U << 14);  ///< Force Acknowledge Error 14
        constexpr uint32_t FAE15 = (1U << 15);  ///< Force Acknowledge Error 15
        constexpr uint32_t FPE0 = (1U << 16);  ///< Force PHY Error 0
        constexpr uint32_t FPE1 = (1U << 17);  ///< Force PHY Error 1
        constexpr uint32_t FPE2 = (1U << 18);  ///< Force PHY Error 2
        constexpr uint32_t FPE3 = (1U << 19);  ///< Force PHY Error 3
        constexpr uint32_t FPE4 = (1U << 20);  ///< Force PHY Error 4
    }

    /// DSI_FIR1 Register bits
    namespace dsi_fir1_bits {
        constexpr uint32_t FTOHSTX = (1U << 0);  ///< Force Timeout High-Speed Transmission
        constexpr uint32_t FTOLPRX = (1U << 1);  ///< Force Timeout Low-Power Reception
        constexpr uint32_t FECCSE = (1U << 2);  ///< Force ECC Single-bit Error
        constexpr uint32_t FECCME = (1U << 3);  ///< Force ECC Multi-bit Error
        constexpr uint32_t FCRCE = (1U << 4);  ///< Force CRC Error
        constexpr uint32_t FPSE = (1U << 5);  ///< Force Packet Size Error
        constexpr uint32_t FEOTPE = (1U << 6);  ///< Force EoTp Error
        constexpr uint32_t FLPWRE = (1U << 7);  ///< Force LTDC Payload Write Error
        constexpr uint32_t FGCWRE = (1U << 8);  ///< Force Generic Command Write Error
        constexpr uint32_t FGPWRE = (1U << 9);  ///< Force Generic Payload Write Error
        constexpr uint32_t FGPTXE = (1U << 10);  ///< Force Generic Payload Transmit Error
        constexpr uint32_t FGPRDE = (1U << 11);  ///< Force Generic Payload Read Error
        constexpr uint32_t FGPRXE = (1U << 12);  ///< Force Generic Payload Receive Error
    }

    /// DSI_VSCR Register bits
    namespace dsi_vscr_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t UR = (1U << 8);  ///< Update Register
    }

    /// DSI_LCVCIDR Register bits
    namespace dsi_lcvcidr_bits {
        constexpr uint32_t VCID = (2 << 0);  ///< Virtual Channel ID
    }

    /// DSI_LCCCR Register bits
    namespace dsi_lcccr_bits {
        constexpr uint32_t COLC = (4 << 0);  ///< Color Coding
        constexpr uint32_t LPE = (1U << 8);  ///< Loosely Packed Enable
    }

    /// DSI_LPMCCR Register bits
    namespace dsi_lpmccr_bits {
        constexpr uint32_t VLPSIZE = (8 << 0);  ///< VACT Largest Packet Size
        constexpr uint32_t LPSIZE = (8 << 16);  ///< Largest Packet Size
    }

    /// DSI_VMCCR Register bits
    namespace dsi_vmccr_bits {
        constexpr uint32_t VMT = (2 << 0);  ///< Video mode Type
        constexpr uint32_t LPVSAE = (1U << 2);  ///< Low-Power Vertical Sync time Enable
        constexpr uint32_t LPVBPE = (1U << 3);  ///< Low-power Vertical Back-Porch Enable
        constexpr uint32_t LPVFPE = (1U << 4);  ///< Low-power Vertical Front-Porch Enable
        constexpr uint32_t LPVAE = (1U << 5);  ///< Low-Power Vertical Active Enable
        constexpr uint32_t LPHBPE = (1U << 6);  ///< Low-power Horizontal Back-Porch Enable
        constexpr uint32_t LPHFE = (1U << 7);  ///< Low-Power Horizontal Front-Porch Enable
        constexpr uint32_t FBTAAE = (1U << 8);  ///< Frame BTA Acknowledge Enable
        constexpr uint32_t LPCE = (1U << 9);  ///< Low-Power Command Enable
    }

    /// DSI_VPCCR Register bits
    namespace dsi_vpccr_bits {
        constexpr uint32_t VPSIZE = (14 << 0);  ///< Video Packet Size
    }

    /// DSI_VCCCR Register bits
    namespace dsi_vcccr_bits {
        constexpr uint32_t NUMC = (13 << 0);  ///< Number of Chunks
    }

    /// DSI_VNPCCR Register bits
    namespace dsi_vnpccr_bits {
        constexpr uint32_t NPSIZE = (13 << 0);  ///< Null Packet Size
    }

    /// DSI_VHSACCR Register bits
    namespace dsi_vhsaccr_bits {
        constexpr uint32_t HSA = (12 << 0);  ///< Horizontal Synchronism Active duration
    }

    /// DSI_VHBPCCR Register bits
    namespace dsi_vhbpccr_bits {
        constexpr uint32_t HBP = (12 << 0);  ///< Horizontal Back-Porch duration
    }

    /// DSI_VLCCR Register bits
    namespace dsi_vlccr_bits {
        constexpr uint32_t HLINE = (15 << 0);  ///< Horizontal Line duration
    }

    /// DSI_VVSACCR Register bits
    namespace dsi_vvsaccr_bits {
        constexpr uint32_t VSA = (10 << 0);  ///< Vertical Synchronism Active duration
    }

    /// DSI_VVBPCCR Register bits
    namespace dsi_vvbpccr_bits {
        constexpr uint32_t VBP = (10 << 0);  ///< Vertical Back-Porch duration
    }

    /// DSI_VVFPCCR Register bits
    namespace dsi_vvfpccr_bits {
        constexpr uint32_t VFP = (10 << 0);  ///< Vertical Front-Porch duration
    }

    /// DSI_VVACCR Register bits
    namespace dsi_vvaccr_bits {
        constexpr uint32_t VA = (14 << 0);  ///< Vertical Active duration
    }

    /// DSI_WCFGR Register bits
    namespace dsi_wcfgr_bits {
        constexpr uint32_t VSPOL = (1U << 7);  ///< VSync Polarity
        constexpr uint32_t AR = (1U << 6);  ///< Automatic Refresh
        constexpr uint32_t TEPOL = (1U << 5);  ///< TE Polarity
        constexpr uint32_t TESRC = (1U << 4);  ///< TE Source
        constexpr uint32_t COLMUX = (3 << 1);  ///< Color Multiplexing
        constexpr uint32_t DSIM = (1U << 0);  ///< DSI Mode
    }

    /// DSI_WCR Register bits
    namespace dsi_wcr_bits {
        constexpr uint32_t DSIEN = (1U << 3);  ///< DSI Enable
        constexpr uint32_t LTDCEN = (1U << 2);  ///< LTDC Enable
        constexpr uint32_t SHTDN = (1U << 1);  ///< Shutdown
        constexpr uint32_t COLM = (1U << 0);  ///< Color Mode
    }

    /// DSI_WIER Register bits
    namespace dsi_wier_bits {
        constexpr uint32_t RRIE = (1U << 13);  ///< Regulator Ready Interrupt Enable
        constexpr uint32_t PLLUIE = (1U << 10);  ///< PLL Unlock Interrupt Enable
        constexpr uint32_t PLLLIE = (1U << 9);  ///< PLL Lock Interrupt Enable
        constexpr uint32_t ERIE = (1U << 1);  ///< End of Refresh Interrupt Enable
        constexpr uint32_t TEIE = (1U << 0);  ///< Tearing Effect Interrupt Enable
    }

    /// DSI_WISR Register bits
    namespace dsi_wisr_bits {
        constexpr uint32_t RRIF = (1U << 13);  ///< Regulator Ready Interrupt Flag
        constexpr uint32_t RRS = (1U << 12);  ///< Regulator Ready Status
        constexpr uint32_t PLLUIF = (1U << 10);  ///< PLL Unlock Interrupt Flag
        constexpr uint32_t PLLLIF = (1U << 9);  ///< PLL Lock Interrupt Flag
        constexpr uint32_t PLLLS = (1U << 8);  ///< PLL Lock Status
        constexpr uint32_t BUSY = (1U << 2);  ///< Busy Flag
        constexpr uint32_t ERIF = (1U << 1);  ///< End of Refresh Interrupt Flag
        constexpr uint32_t TEIF = (1U << 0);  ///< Tearing Effect Interrupt Flag
    }

    /// DSI_WIFCR Register bits
    namespace dsi_wifcr_bits {
        constexpr uint32_t CRRIF = (1U << 13);  ///< Clear Regulator Ready Interrupt Flag
        constexpr uint32_t CPLLUIF = (1U << 10);  ///< Clear PLL Unlock Interrupt Flag
        constexpr uint32_t CPLLLIF = (1U << 9);  ///< Clear PLL Lock Interrupt Flag
        constexpr uint32_t CERIF = (1U << 1);  ///< Clear End of Refresh Interrupt Flag
        constexpr uint32_t CTEIF = (1U << 0);  ///< Clear Tearing Effect Interrupt Flag
    }

    /// DSI_WPCR1 Register bits
    namespace dsi_wpcr1_bits {
        constexpr uint32_t TCLKPOSTEN = (1U << 27);  ///< custom time for tCLK-POST Enable
        constexpr uint32_t TLPXCEN = (1U << 26);  ///< custom time for tLPX for Clock lane Enable
        constexpr uint32_t THSEXITEN = (1U << 25);  ///< custom time for tHS-EXIT Enable
        constexpr uint32_t TLPXDEN = (1U << 24);  ///< custom time for tLPX for Data lanes Enable
        constexpr uint32_t THSZEROEN = (1U << 23);  ///< custom time for tHS-ZERO Enable
        constexpr uint32_t THSTRAILEN = (1U << 22);  ///< custom time for tHS-TRAIL Enable
        constexpr uint32_t THSPREPEN = (1U << 21);  ///< custom time for tHS-PREPARE Enable
        constexpr uint32_t TCLKZEROEN = (1U << 20);  ///< custom time for tCLK-ZERO Enable
        constexpr uint32_t TCLKPREPEN = (1U << 19);  ///< custom time for tCLK-PREPARE Enable
        constexpr uint32_t PDEN = (1U << 18);  ///< Pull-Down Enable
        constexpr uint32_t TDDL = (1U << 16);  ///< Turn Disable Data Lanes
        constexpr uint32_t CDOFFDL = (1U << 14);  ///< Contention Detection OFF on Data Lanes
        constexpr uint32_t FTXSMDL = (1U << 13);  ///< Force in TX Stop Mode the Data Lanes
        constexpr uint32_t FTXSMCL = (1U << 12);  ///< Force in TX Stop Mode the Clock Lane
        constexpr uint32_t HSIDL1 = (1U << 11);  ///< Invert the High-Speed data signal on Data Lane 1
        constexpr uint32_t HSIDL0 = (1U << 10);  ///< Invert the Hight-Speed data signal on Data Lane 0
        constexpr uint32_t HSICL = (1U << 9);  ///< Invert Hight-Speed data signal on Clock Lane
        constexpr uint32_t SWDL1 = (1U << 8);  ///< Swap Data Lane 1 pins
        constexpr uint32_t SWDL0 = (1U << 7);  ///< Swap Data Lane 0 pins
        constexpr uint32_t SWCL = (1U << 6);  ///< Swap Clock Lane pins
        constexpr uint32_t UIX4 = (6 << 0);  ///< Unit Interval multiplied by 4
    }

    /// DSI_WPCR2 Register bits
    namespace dsi_wpcr2_bits {
        constexpr uint32_t LPRXFT = (2 << 25);  ///< Low-Power RX low-pass Filtering Tuning
        constexpr uint32_t FLPRXLPM = (1U << 22);  ///< Forces LP Receiver in Low-Power Mode
        constexpr uint32_t HSTXSRCDL = (2 << 18);  ///< High-Speed Transmission Slew Rate Control on Data Lanes
        constexpr uint32_t HSTXSRCCL = (2 << 16);  ///< High-Speed Transmission Slew Rate Control on Clock Lane
        constexpr uint32_t SDCC = (1U << 12);  ///< SDD Control
        constexpr uint32_t LPSRDL = (2 << 8);  ///< Low-Power transmission Slew Rate Compensation on Data Lanes
        constexpr uint32_t LPSRCL = (2 << 6);  ///< Low-Power transmission Slew Rate Compensation on Clock Lane
        constexpr uint32_t HSTXDLL = (2 << 2);  ///< High-Speed Transmission Delay on Data Lanes
        constexpr uint32_t HSTXDCL = (2 << 0);  ///< High-Speed Transmission Delay on Clock Lane
    }

    /// DSI_WPCR3 Register bits
    namespace dsi_wpcr3_bits {
        constexpr uint32_t THSTRAIL = (8 << 24);  ///< tHSTRAIL
        constexpr uint32_t THSPREP = (8 << 16);  ///< tHS-PREPARE
        constexpr uint32_t TCLKZEO = (8 << 8);  ///< tCLK-ZERO
        constexpr uint32_t TCLKPREP = (8 << 0);  ///< tCLK-PREPARE
    }

    /// DSI_WPCR4 Register bits
    namespace dsi_wpcr4_bits {
        constexpr uint32_t TLPXC = (8 << 24);  ///< tLPXC for Clock lane
        constexpr uint32_t THSEXIT = (8 << 16);  ///< tHSEXIT
        constexpr uint32_t TLPXD = (8 << 8);  ///< tLPX for Data lanes
        constexpr uint32_t THSZERO = (8 << 0);  ///< tHS-ZERO
    }

    /// DSI_WPCR5 Register bits
    namespace dsi_wpcr5_bits {
        constexpr uint32_t THSZERO = (8 << 0);  ///< tCLK-POST
    }

    /// DSI_WRPCR Register bits
    namespace dsi_wrpcr_bits {
        constexpr uint32_t REGEN = (1U << 24);  ///< Regulator Enable
        constexpr uint32_t ODF = (2 << 16);  ///< PLL Output Division Factor
        constexpr uint32_t IDF = (4 << 11);  ///< PLL Input Division Factor
        constexpr uint32_t NDIV = (7 << 2);  ///< PLL Loop Division Factor
        constexpr uint32_t PLLEN = (1U << 0);  ///< PLL Enable
    }

}

// ============================================================================
// GFXMMU Peripheral
// ============================================================================

namespace gfxmmu {
    /// Base addresses
    constexpr uint32_t GFXMMU_BASE = 0x4002C000;

    /// GFXMMU Register structure
    struct Registers {
        volatile uint32_t CR;  ///< Offset: 0x00 - Graphic MMU configuration register
        volatile uint32_t SR;  ///< Offset: 0x04 - Graphic MMU status register
        volatile uint32_t FCR;  ///< Offset: 0x08 - Graphic MMU flag clear register
        volatile uint32_t DVR;  ///< Offset: 0x10 - Graphic MMU default value register
        volatile uint32_t B0CR;  ///< Offset: 0x20 - Graphic MMU buffer 0 configuration register
        volatile uint32_t B1CR;  ///< Offset: 0x24 - Graphic MMU buffer 1 configuration register
        volatile uint32_t B2CR;  ///< Offset: 0x28 - Graphic MMU buffer 2 configuration register
        volatile uint32_t B3CR;  ///< Offset: 0x2C - Graphic MMU buffer 3 configuration register
        volatile uint32_t VERR;  ///< Offset: 0xFF4 - Graphic MMU version register
        volatile uint32_t IPIDR;  ///< Offset: 0xFF8 - Graphic MMU identification register
        volatile uint32_t SIDR;  ///< Offset: 0xFFC - Graphic MMU size identification register
        volatile uint32_t LUT0L;  ///< Offset: 0x1000 - Graphic MMU LUT entry 0 low
        volatile uint32_t LUT1L;  ///< Offset: 0x1008 - Graphic MMU LUT entry 1 low
        volatile uint32_t LUT2L;  ///< Offset: 0x1010 - Graphic MMU LUT entry 2 low
        volatile uint32_t LUT3L;  ///< Offset: 0x1018 - Graphic MMU LUT entry 3 low
        volatile uint32_t LUT4L;  ///< Offset: 0x1020 - Graphic MMU LUT entry 4 low
        volatile uint32_t LUT5L;  ///< Offset: 0x1028 - Graphic MMU LUT entry 5 low
        volatile uint32_t LUT6L;  ///< Offset: 0x1030 - Graphic MMU LUT entry 6 low
        volatile uint32_t LUT7L;  ///< Offset: 0x1038 - Graphic MMU LUT entry 7 low
        volatile uint32_t LUT8L;  ///< Offset: 0x1040 - Graphic MMU LUT entry 8 low
        volatile uint32_t LUT9L;  ///< Offset: 0x1048 - Graphic MMU LUT entry 9 low
        volatile uint32_t LUT10L;  ///< Offset: 0x1050 - Graphic MMU LUT entry 10 low
        volatile uint32_t LUT11L;  ///< Offset: 0x1058 - Graphic MMU LUT entry 11 low
        volatile uint32_t LUT12L;  ///< Offset: 0x1060 - Graphic MMU LUT entry 12 low
        volatile uint32_t LUT13L;  ///< Offset: 0x1068 - Graphic MMU LUT entry 13 low
        volatile uint32_t LUT14L;  ///< Offset: 0x1070 - Graphic MMU LUT entry 14 low
        volatile uint32_t LUT15L;  ///< Offset: 0x1078 - Graphic MMU LUT entry 15 low
        volatile uint32_t LUT16L;  ///< Offset: 0x1080 - Graphic MMU LUT entry 16 low
        volatile uint32_t LUT17L;  ///< Offset: 0x1088 - Graphic MMU LUT entry 17 low
        volatile uint32_t LUT18L;  ///< Offset: 0x1090 - Graphic MMU LUT entry 18 low
        volatile uint32_t LUT19L;  ///< Offset: 0x1098 - Graphic MMU LUT entry 19 low
        volatile uint32_t LUT20L;  ///< Offset: 0x10A0 - Graphic MMU LUT entry 20 low
        volatile uint32_t LUT21L;  ///< Offset: 0x10A8 - Graphic MMU LUT entry 21 low
        volatile uint32_t LUT22L;  ///< Offset: 0x10B0 - Graphic MMU LUT entry 22 low
        volatile uint32_t LUT23L;  ///< Offset: 0x10B8 - Graphic MMU LUT entry 23 low
        volatile uint32_t LUT24L;  ///< Offset: 0x10C0 - Graphic MMU LUT entry 24 low
        volatile uint32_t LUT25L;  ///< Offset: 0x10C8 - Graphic MMU LUT entry 25 low
        volatile uint32_t LUT26L;  ///< Offset: 0x10D0 - Graphic MMU LUT entry 26 low
        volatile uint32_t LUT27L;  ///< Offset: 0x10D8 - Graphic MMU LUT entry 27 low
        volatile uint32_t LUT28L;  ///< Offset: 0x10E0 - Graphic MMU LUT entry 28 low
        volatile uint32_t LUT29L;  ///< Offset: 0x10E8 - Graphic MMU LUT entry 29 low
        volatile uint32_t LUT30L;  ///< Offset: 0x10F0 - Graphic MMU LUT entry 30 low
        volatile uint32_t LUT31L;  ///< Offset: 0x10F8 - Graphic MMU LUT entry 31 low
        volatile uint32_t LUT32L;  ///< Offset: 0x1100 - Graphic MMU LUT entry 32 low
        volatile uint32_t LUT33L;  ///< Offset: 0x1108 - Graphic MMU LUT entry 33 low
        volatile uint32_t LUT34L;  ///< Offset: 0x1110 - Graphic MMU LUT entry 34 low
        volatile uint32_t LUT35L;  ///< Offset: 0x1118 - Graphic MMU LUT entry 35 low
        volatile uint32_t LUT36L;  ///< Offset: 0x1120 - Graphic MMU LUT entry 36 low
        volatile uint32_t LUT37L;  ///< Offset: 0x1128 - Graphic MMU LUT entry 37 low
        volatile uint32_t LUT38L;  ///< Offset: 0x1130 - Graphic MMU LUT entry 38 low
        volatile uint32_t LUT39L;  ///< Offset: 0x1138 - Graphic MMU LUT entry 39 low
        volatile uint32_t LUT40L;  ///< Offset: 0x1140 - Graphic MMU LUT entry 40 low
        volatile uint32_t LUT41L;  ///< Offset: 0x1148 - Graphic MMU LUT entry 41 low
        volatile uint32_t LUT42L;  ///< Offset: 0x1150 - Graphic MMU LUT entry 42 low
        volatile uint32_t LUT43L;  ///< Offset: 0x1158 - Graphic MMU LUT entry 43 low
        volatile uint32_t LUT44L;  ///< Offset: 0x1160 - Graphic MMU LUT entry 44 low
        volatile uint32_t LUT45L;  ///< Offset: 0x1168 - Graphic MMU LUT entry 45 low
        volatile uint32_t LUT46L;  ///< Offset: 0x1170 - Graphic MMU LUT entry 46 low
        volatile uint32_t LUT47L;  ///< Offset: 0x1178 - Graphic MMU LUT entry 47 low
        volatile uint32_t LUT48L;  ///< Offset: 0x1180 - Graphic MMU LUT entry 48 low
        volatile uint32_t LUT49L;  ///< Offset: 0x1188 - Graphic MMU LUT entry 49 low
        volatile uint32_t LUT50L;  ///< Offset: 0x1190 - Graphic MMU LUT entry 50 low
        volatile uint32_t LUT51L;  ///< Offset: 0x1198 - Graphic MMU LUT entry 51 low
        volatile uint32_t LUT52L;  ///< Offset: 0x11A0 - Graphic MMU LUT entry 52 low
        volatile uint32_t LUT53L;  ///< Offset: 0x11A8 - Graphic MMU LUT entry 53 low
        volatile uint32_t LUT54L;  ///< Offset: 0x11B0 - Graphic MMU LUT entry 54 low
        volatile uint32_t LUT55L;  ///< Offset: 0x11B8 - Graphic MMU LUT entry 55 low
        volatile uint32_t LUT56L;  ///< Offset: 0x11C0 - Graphic MMU LUT entry 56 low
        volatile uint32_t LUT57L;  ///< Offset: 0x11C8 - Graphic MMU LUT entry 57 low
        volatile uint32_t LUT58L;  ///< Offset: 0x11D0 - Graphic MMU LUT entry 58 low
        volatile uint32_t LUT59L;  ///< Offset: 0x11D8 - Graphic MMU LUT entry 59 low
        volatile uint32_t LUT60L;  ///< Offset: 0x11E0 - Graphic MMU LUT entry 60 low
        volatile uint32_t LUT61L;  ///< Offset: 0x11E8 - Graphic MMU LUT entry 61 low
        volatile uint32_t LUT62L;  ///< Offset: 0x11F0 - Graphic MMU LUT entry 62 low
        volatile uint32_t LUT63L;  ///< Offset: 0x11F8 - Graphic MMU LUT entry 63 low
        volatile uint32_t LUT64L;  ///< Offset: 0x1200 - Graphic MMU LUT entry 64 low
        volatile uint32_t LUT65L;  ///< Offset: 0x1208 - Graphic MMU LUT entry 65 low
        volatile uint32_t LUT66L;  ///< Offset: 0x1210 - Graphic MMU LUT entry 66 low
        volatile uint32_t LUT67L;  ///< Offset: 0x1218 - Graphic MMU LUT entry 67 low
        volatile uint32_t LUT68L;  ///< Offset: 0x1220 - Graphic MMU LUT entry 68 low
        volatile uint32_t LUT69L;  ///< Offset: 0x1228 - Graphic MMU LUT entry 69 low
        volatile uint32_t LUT70L;  ///< Offset: 0x1230 - Graphic MMU LUT entry 70 low
        volatile uint32_t LUT71L;  ///< Offset: 0x1238 - Graphic MMU LUT entry 71 low
        volatile uint32_t LUT72L;  ///< Offset: 0x1240 - Graphic MMU LUT entry 72 low
        volatile uint32_t LUT73L;  ///< Offset: 0x1248 - Graphic MMU LUT entry 73 low
        volatile uint32_t LUT74L;  ///< Offset: 0x1250 - Graphic MMU LUT entry 74 low
        volatile uint32_t LUT75L;  ///< Offset: 0x1258 - Graphic MMU LUT entry 75 low
        volatile uint32_t LUT76L;  ///< Offset: 0x1260 - Graphic MMU LUT entry 76 low
        volatile uint32_t LUT77L;  ///< Offset: 0x1268 - Graphic MMU LUT entry 77 low
        volatile uint32_t LUT78L;  ///< Offset: 0x1270 - Graphic MMU LUT entry 78 low
        volatile uint32_t LUT79L;  ///< Offset: 0x1278 - Graphic MMU LUT entry 79 low
        volatile uint32_t LUT80L;  ///< Offset: 0x1280 - Graphic MMU LUT entry 80 low
        volatile uint32_t LUT81L;  ///< Offset: 0x1288 - Graphic MMU LUT entry 81 low
        volatile uint32_t LUT82L;  ///< Offset: 0x1290 - Graphic MMU LUT entry 82 low
        volatile uint32_t LUT83L;  ///< Offset: 0x1298 - Graphic MMU LUT entry 83 low
        volatile uint32_t LUT84L;  ///< Offset: 0x12A0 - Graphic MMU LUT entry 84 low
        volatile uint32_t LUT85L;  ///< Offset: 0x12A8 - Graphic MMU LUT entry 85 low
        volatile uint32_t LUT86L;  ///< Offset: 0x12B0 - Graphic MMU LUT entry 86 low
        volatile uint32_t LUT87L;  ///< Offset: 0x12B8 - Graphic MMU LUT entry 87 low
        volatile uint32_t LUT88L;  ///< Offset: 0x12C0 - Graphic MMU LUT entry 88 low
        volatile uint32_t LUT89L;  ///< Offset: 0x12C8 - Graphic MMU LUT entry 89 low
        volatile uint32_t LUT90L;  ///< Offset: 0x12D0 - Graphic MMU LUT entry 90 low
        volatile uint32_t LUT91L;  ///< Offset: 0x12D8 - Graphic MMU LUT entry 91 low
        volatile uint32_t LUT92L;  ///< Offset: 0x12E0 - Graphic MMU LUT entry 92 low
        volatile uint32_t LUT93L;  ///< Offset: 0x12E8 - Graphic MMU LUT entry 93 low
        volatile uint32_t LUT94L;  ///< Offset: 0x12F0 - Graphic MMU LUT entry 94 low
        volatile uint32_t LUT95L;  ///< Offset: 0x12F8 - Graphic MMU LUT entry 95 low
        volatile uint32_t LUT96L;  ///< Offset: 0x1300 - Graphic MMU LUT entry 96 low
        volatile uint32_t LUT97L;  ///< Offset: 0x1308 - Graphic MMU LUT entry 97 low
        volatile uint32_t LUT98L;  ///< Offset: 0x1310 - Graphic MMU LUT entry 98 low
        volatile uint32_t LUT99L;  ///< Offset: 0x1318 - Graphic MMU LUT entry 99 low
        volatile uint32_t LUT100L;  ///< Offset: 0x1320 - Graphic MMU LUT entry 100 low
        volatile uint32_t LUT101L;  ///< Offset: 0x1328 - Graphic MMU LUT entry 101 low
        volatile uint32_t LUT102L;  ///< Offset: 0x1330 - Graphic MMU LUT entry 102 low
        volatile uint32_t LUT103L;  ///< Offset: 0x1338 - Graphic MMU LUT entry 103 low
        volatile uint32_t LUT104L;  ///< Offset: 0x1340 - Graphic MMU LUT entry 104 low
        volatile uint32_t LUT105L;  ///< Offset: 0x1348 - Graphic MMU LUT entry 105 low
        volatile uint32_t LUT106L;  ///< Offset: 0x1350 - Graphic MMU LUT entry 106 low
        volatile uint32_t LUT107L;  ///< Offset: 0x1358 - Graphic MMU LUT entry 107 low
        volatile uint32_t LUT108L;  ///< Offset: 0x1360 - Graphic MMU LUT entry 108 low
        volatile uint32_t LUT109L;  ///< Offset: 0x1368 - Graphic MMU LUT entry 109 low
        volatile uint32_t LUT110L;  ///< Offset: 0x1370 - Graphic MMU LUT entry 110 low
        volatile uint32_t LUT111L;  ///< Offset: 0x1378 - Graphic MMU LUT entry 111 low
        volatile uint32_t LUT112L;  ///< Offset: 0x1380 - Graphic MMU LUT entry 112 low
        volatile uint32_t LUT113L;  ///< Offset: 0x1388 - Graphic MMU LUT entry 113 low
        volatile uint32_t LUT114L;  ///< Offset: 0x1390 - Graphic MMU LUT entry 114 low
        volatile uint32_t LUT115L;  ///< Offset: 0x1398 - Graphic MMU LUT entry 115 low
        volatile uint32_t LUT116L;  ///< Offset: 0x13A0 - Graphic MMU LUT entry 116 low
        volatile uint32_t LUT117L;  ///< Offset: 0x13A8 - Graphic MMU LUT entry 117 low
        volatile uint32_t LUT118L;  ///< Offset: 0x13B0 - Graphic MMU LUT entry 118 low
        volatile uint32_t LUT119L;  ///< Offset: 0x13B8 - Graphic MMU LUT entry 119 low
        volatile uint32_t LUT120L;  ///< Offset: 0x13C0 - Graphic MMU LUT entry 120 low
        volatile uint32_t LUT121L;  ///< Offset: 0x13C8 - Graphic MMU LUT entry 121 low
        volatile uint32_t LUT122L;  ///< Offset: 0x13D0 - Graphic MMU LUT entry 122 low
        volatile uint32_t LUT123L;  ///< Offset: 0x13D8 - Graphic MMU LUT entry 123 low
        volatile uint32_t LUT124L;  ///< Offset: 0x13E0 - Graphic MMU LUT entry 124 low
        volatile uint32_t LUT125L;  ///< Offset: 0x13E8 - Graphic MMU LUT entry 125 low
        volatile uint32_t LUT126L;  ///< Offset: 0x13F0 - Graphic MMU LUT entry 126 low
        volatile uint32_t LUT127L;  ///< Offset: 0x13F8 - Graphic MMU LUT entry 127 low
        volatile uint32_t LUT128L;  ///< Offset: 0x1400 - Graphic MMU LUT entry 128 low
        volatile uint32_t LUT129L;  ///< Offset: 0x1408 - Graphic MMU LUT entry 129 low
        volatile uint32_t LUT130L;  ///< Offset: 0x1410 - Graphic MMU LUT entry 130 low
        volatile uint32_t LUT131L;  ///< Offset: 0x1418 - Graphic MMU LUT entry 131 low
        volatile uint32_t LUT132L;  ///< Offset: 0x1420 - Graphic MMU LUT entry 132 low
        volatile uint32_t LUT133L;  ///< Offset: 0x1428 - Graphic MMU LUT entry 133 low
        volatile uint32_t LUT134L;  ///< Offset: 0x1430 - Graphic MMU LUT entry 134 low
        volatile uint32_t LUT135L;  ///< Offset: 0x1438 - Graphic MMU LUT entry 135 low
        volatile uint32_t LUT136L;  ///< Offset: 0x1440 - Graphic MMU LUT entry 136 low
        volatile uint32_t LUT137L;  ///< Offset: 0x1448 - Graphic MMU LUT entry 137 low
        volatile uint32_t LUT138L;  ///< Offset: 0x1450 - Graphic MMU LUT entry 138 low
        volatile uint32_t LUT139L;  ///< Offset: 0x1458 - Graphic MMU LUT entry 139 low
        volatile uint32_t LUT140L;  ///< Offset: 0x1460 - Graphic MMU LUT entry 140 low
        volatile uint32_t LUT141L;  ///< Offset: 0x1468 - Graphic MMU LUT entry 141 low
        volatile uint32_t LUT142L;  ///< Offset: 0x1470 - Graphic MMU LUT entry 142 low
        volatile uint32_t LUT143L;  ///< Offset: 0x1478 - Graphic MMU LUT entry 143 low
        volatile uint32_t LUT144L;  ///< Offset: 0x1480 - Graphic MMU LUT entry 144 low
        volatile uint32_t LUT145L;  ///< Offset: 0x1488 - Graphic MMU LUT entry 145 low
        volatile uint32_t LUT146L;  ///< Offset: 0x1490 - Graphic MMU LUT entry 146 low
        volatile uint32_t LUT147L;  ///< Offset: 0x1498 - Graphic MMU LUT entry 147 low
        volatile uint32_t LUT148L;  ///< Offset: 0x14A0 - Graphic MMU LUT entry 148 low
        volatile uint32_t LUT149L;  ///< Offset: 0x14A8 - Graphic MMU LUT entry 149 low
        volatile uint32_t LUT150L;  ///< Offset: 0x14B0 - Graphic MMU LUT entry 150 low
        volatile uint32_t LUT151L;  ///< Offset: 0x14B8 - Graphic MMU LUT entry 151 low
        volatile uint32_t LUT152L;  ///< Offset: 0x14C0 - Graphic MMU LUT entry 152 low
        volatile uint32_t LUT153L;  ///< Offset: 0x14C8 - Graphic MMU LUT entry 153 low
        volatile uint32_t LUT154L;  ///< Offset: 0x14D0 - Graphic MMU LUT entry 154 low
        volatile uint32_t LUT155L;  ///< Offset: 0x14D8 - Graphic MMU LUT entry 155 low
        volatile uint32_t LUT156L;  ///< Offset: 0x14E0 - Graphic MMU LUT entry 156 low
        volatile uint32_t LUT157L;  ///< Offset: 0x14E8 - Graphic MMU LUT entry 157 low
        volatile uint32_t LUT158L;  ///< Offset: 0x14F0 - Graphic MMU LUT entry 158 low
        volatile uint32_t LUT159L;  ///< Offset: 0x14F8 - Graphic MMU LUT entry 159 low
        volatile uint32_t LUT160L;  ///< Offset: 0x1500 - Graphic MMU LUT entry 160 low
        volatile uint32_t LUT161L;  ///< Offset: 0x1508 - Graphic MMU LUT entry 161 low
        volatile uint32_t LUT162L;  ///< Offset: 0x1510 - Graphic MMU LUT entry 162 low
        volatile uint32_t LUT163L;  ///< Offset: 0x1518 - Graphic MMU LUT entry 163 low
        volatile uint32_t LUT164L;  ///< Offset: 0x1520 - Graphic MMU LUT entry 164 low
        volatile uint32_t LUT165L;  ///< Offset: 0x1528 - Graphic MMU LUT entry 165 low
        volatile uint32_t LUT166L;  ///< Offset: 0x1530 - Graphic MMU LUT entry 166 low
        volatile uint32_t LUT167L;  ///< Offset: 0x1538 - Graphic MMU LUT entry 167 low
        volatile uint32_t LUT168L;  ///< Offset: 0x1540 - Graphic MMU LUT entry 168 low
        volatile uint32_t LUT169L;  ///< Offset: 0x1548 - Graphic MMU LUT entry 169 low
        volatile uint32_t LUT170L;  ///< Offset: 0x1550 - Graphic MMU LUT entry 170 low
        volatile uint32_t LUT171L;  ///< Offset: 0x1558 - Graphic MMU LUT entry 171 low
        volatile uint32_t LUT172L;  ///< Offset: 0x1560 - Graphic MMU LUT entry 172 low
        volatile uint32_t LUT173L;  ///< Offset: 0x1568 - Graphic MMU LUT entry 173 low
        volatile uint32_t LUT174L;  ///< Offset: 0x1570 - Graphic MMU LUT entry 174 low
        volatile uint32_t LUT175L;  ///< Offset: 0x1578 - Graphic MMU LUT entry 175 low
        volatile uint32_t LUT176L;  ///< Offset: 0x1580 - Graphic MMU LUT entry 176 low
        volatile uint32_t LUT177L;  ///< Offset: 0x1588 - Graphic MMU LUT entry 177 low
        volatile uint32_t LUT178L;  ///< Offset: 0x1590 - Graphic MMU LUT entry 178 low
        volatile uint32_t LUT179L;  ///< Offset: 0x1598 - Graphic MMU LUT entry 179 low
        volatile uint32_t LUT180L;  ///< Offset: 0x15A0 - Graphic MMU LUT entry 180 low
        volatile uint32_t LUT181L;  ///< Offset: 0x15A8 - Graphic MMU LUT entry 181 low
        volatile uint32_t LUT182L;  ///< Offset: 0x15B0 - Graphic MMU LUT entry 182 low
        volatile uint32_t LUT183L;  ///< Offset: 0x15B8 - Graphic MMU LUT entry 183 low
        volatile uint32_t LUT184L;  ///< Offset: 0x15C0 - Graphic MMU LUT entry 184 low
        volatile uint32_t LUT185L;  ///< Offset: 0x15C8 - Graphic MMU LUT entry 185 low
        volatile uint32_t LUT186L;  ///< Offset: 0x15D0 - Graphic MMU LUT entry 186 low
        volatile uint32_t LUT187L;  ///< Offset: 0x15D8 - Graphic MMU LUT entry 187 low
        volatile uint32_t LUT188L;  ///< Offset: 0x15E0 - Graphic MMU LUT entry 188 low
        volatile uint32_t LUT189L;  ///< Offset: 0x15E8 - Graphic MMU LUT entry 189 low
        volatile uint32_t LUT190L;  ///< Offset: 0x15F0 - Graphic MMU LUT entry 190 low
        volatile uint32_t LUT191L;  ///< Offset: 0x15F8 - Graphic MMU LUT entry 191 low
        volatile uint32_t LUT192L;  ///< Offset: 0x1600 - Graphic MMU LUT entry 192 low
        volatile uint32_t LUT193L;  ///< Offset: 0x1608 - Graphic MMU LUT entry 193 low
        volatile uint32_t LUT194L;  ///< Offset: 0x1610 - Graphic MMU LUT entry 194 low
        volatile uint32_t LUT195L;  ///< Offset: 0x1618 - Graphic MMU LUT entry 195 low
        volatile uint32_t LUT196L;  ///< Offset: 0x1620 - Graphic MMU LUT entry 196 low
        volatile uint32_t LUT197L;  ///< Offset: 0x1628 - Graphic MMU LUT entry 197 low
        volatile uint32_t LUT198L;  ///< Offset: 0x1630 - Graphic MMU LUT entry 198 low
        volatile uint32_t LUT199L;  ///< Offset: 0x1638 - Graphic MMU LUT entry 199 low
        volatile uint32_t LUT200L;  ///< Offset: 0x1640 - Graphic MMU LUT entry 200 low
        volatile uint32_t LUT201L;  ///< Offset: 0x1648 - Graphic MMU LUT entry 201 low
        volatile uint32_t LUT202L;  ///< Offset: 0x1650 - Graphic MMU LUT entry 202 low
        volatile uint32_t LUT203L;  ///< Offset: 0x1658 - Graphic MMU LUT entry 203 low
        volatile uint32_t LUT204L;  ///< Offset: 0x1660 - Graphic MMU LUT entry 204 low
        volatile uint32_t LUT205L;  ///< Offset: 0x1668 - Graphic MMU LUT entry 205 low
        volatile uint32_t LUT206L;  ///< Offset: 0x1670 - Graphic MMU LUT entry 206 low
        volatile uint32_t LUT207L;  ///< Offset: 0x1678 - Graphic MMU LUT entry 207 low
        volatile uint32_t LUT208L;  ///< Offset: 0x1680 - Graphic MMU LUT entry 208 low
        volatile uint32_t LUT209L;  ///< Offset: 0x1688 - Graphic MMU LUT entry 209 low
        volatile uint32_t LUT210L;  ///< Offset: 0x1690 - Graphic MMU LUT entry 210 low
        volatile uint32_t LUT211L;  ///< Offset: 0x1698 - Graphic MMU LUT entry 211 low
        volatile uint32_t LUT212L;  ///< Offset: 0x16A0 - Graphic MMU LUT entry 212 low
        volatile uint32_t LUT213L;  ///< Offset: 0x16A8 - Graphic MMU LUT entry 213 low
        volatile uint32_t LUT214L;  ///< Offset: 0x16B0 - Graphic MMU LUT entry 214 low
        volatile uint32_t LUT215L;  ///< Offset: 0x16B8 - Graphic MMU LUT entry 215 low
        volatile uint32_t LUT216L;  ///< Offset: 0x16C0 - Graphic MMU LUT entry 216 low
        volatile uint32_t LUT217L;  ///< Offset: 0x16C8 - Graphic MMU LUT entry 217 low
        volatile uint32_t LUT218L;  ///< Offset: 0x16D0 - Graphic MMU LUT entry 218 low
        volatile uint32_t LUT219L;  ///< Offset: 0x16D8 - Graphic MMU LUT entry 219 low
        volatile uint32_t LUT220L;  ///< Offset: 0x16E0 - Graphic MMU LUT entry 220 low
        volatile uint32_t LUT221L;  ///< Offset: 0x16E8 - Graphic MMU LUT entry 221 low
        volatile uint32_t LUT222L;  ///< Offset: 0x16F0 - Graphic MMU LUT entry 222 low
        volatile uint32_t LUT223L;  ///< Offset: 0x16F8 - Graphic MMU LUT entry 223 low
        volatile uint32_t LUT224L;  ///< Offset: 0x1700 - Graphic MMU LUT entry 224 low
        volatile uint32_t LUT225L;  ///< Offset: 0x1708 - Graphic MMU LUT entry 225 low
        volatile uint32_t LUT226L;  ///< Offset: 0x1710 - Graphic MMU LUT entry 226 low
        volatile uint32_t LUT227L;  ///< Offset: 0x1718 - Graphic MMU LUT entry 227 low
        volatile uint32_t LUT228L;  ///< Offset: 0x1720 - Graphic MMU LUT entry 228 low
        volatile uint32_t LUT229L;  ///< Offset: 0x1728 - Graphic MMU LUT entry 229 low
        volatile uint32_t LUT230L;  ///< Offset: 0x1730 - Graphic MMU LUT entry 230 low
        volatile uint32_t LUT231L;  ///< Offset: 0x1738 - Graphic MMU LUT entry 231 low
        volatile uint32_t LUT232L;  ///< Offset: 0x1740 - Graphic MMU LUT entry 232 low
        volatile uint32_t LUT233L;  ///< Offset: 0x1748 - Graphic MMU LUT entry 233 low
        volatile uint32_t LUT234L;  ///< Offset: 0x1750 - Graphic MMU LUT entry 234 low
        volatile uint32_t LUT235L;  ///< Offset: 0x1758 - Graphic MMU LUT entry 235 low
        volatile uint32_t LUT236L;  ///< Offset: 0x1760 - Graphic MMU LUT entry 236 low
        volatile uint32_t LUT237L;  ///< Offset: 0x1768 - Graphic MMU LUT entry 237 low
        volatile uint32_t LUT238L;  ///< Offset: 0x1770 - Graphic MMU LUT entry 238 low
        volatile uint32_t LUT239L;  ///< Offset: 0x1778 - Graphic MMU LUT entry 239 low
        volatile uint32_t LUT240L;  ///< Offset: 0x1780 - Graphic MMU LUT entry 240 low
        volatile uint32_t LUT241L;  ///< Offset: 0x1788 - Graphic MMU LUT entry 241 low
        volatile uint32_t LUT242L;  ///< Offset: 0x1790 - Graphic MMU LUT entry 242 low
        volatile uint32_t LUT243L;  ///< Offset: 0x1798 - Graphic MMU LUT entry 243 low
        volatile uint32_t LUT244L;  ///< Offset: 0x17A0 - Graphic MMU LUT entry 244 low
        volatile uint32_t LUT245L;  ///< Offset: 0x17A8 - Graphic MMU LUT entry 245 low
        volatile uint32_t LUT246L;  ///< Offset: 0x17B0 - Graphic MMU LUT entry 246 low
        volatile uint32_t LUT247L;  ///< Offset: 0x17B8 - Graphic MMU LUT entry 247 low
        volatile uint32_t LUT248L;  ///< Offset: 0x17C0 - Graphic MMU LUT entry 248 low
        volatile uint32_t LUT249L;  ///< Offset: 0x17C8 - Graphic MMU LUT entry 249 low
        volatile uint32_t LUT250L;  ///< Offset: 0x17D0 - Graphic MMU LUT entry 250 low
        volatile uint32_t LUT251L;  ///< Offset: 0x17D8 - Graphic MMU LUT entry 251 low
        volatile uint32_t LUT252L;  ///< Offset: 0x17E0 - Graphic MMU LUT entry 252 low
        volatile uint32_t LUT253L;  ///< Offset: 0x17E8 - Graphic MMU LUT entry 253 low
        volatile uint32_t LUT254L;  ///< Offset: 0x17F0 - Graphic MMU LUT entry 254 low
        volatile uint32_t LUT255L;  ///< Offset: 0x17F8 - Graphic MMU LUT entry 255 low
        volatile uint32_t LUT256L;  ///< Offset: 0x1800 - Graphic MMU LUT entry 256 low
        volatile uint32_t LUT257L;  ///< Offset: 0x1808 - Graphic MMU LUT entry 257 low
        volatile uint32_t LUT258L;  ///< Offset: 0x1810 - Graphic MMU LUT entry 258 low
        volatile uint32_t LUT259L;  ///< Offset: 0x1818 - Graphic MMU LUT entry 259 low
        volatile uint32_t LUT260L;  ///< Offset: 0x1820 - Graphic MMU LUT entry 260 low
        volatile uint32_t LUT261L;  ///< Offset: 0x1828 - Graphic MMU LUT entry 261 low
        volatile uint32_t LUT262L;  ///< Offset: 0x1830 - Graphic MMU LUT entry 262 low
        volatile uint32_t LUT263L;  ///< Offset: 0x1838 - Graphic MMU LUT entry 263 low
        volatile uint32_t LUT264L;  ///< Offset: 0x1840 - Graphic MMU LUT entry 264 low
        volatile uint32_t LUT265L;  ///< Offset: 0x1848 - Graphic MMU LUT entry 265 low
        volatile uint32_t LUT266L;  ///< Offset: 0x1850 - Graphic MMU LUT entry 266 low
        volatile uint32_t LUT267L;  ///< Offset: 0x1858 - Graphic MMU LUT entry 267 low
        volatile uint32_t LUT268L;  ///< Offset: 0x1860 - Graphic MMU LUT entry 268 low
        volatile uint32_t LUT269L;  ///< Offset: 0x1868 - Graphic MMU LUT entry 269 low
        volatile uint32_t LUT270L;  ///< Offset: 0x1870 - Graphic MMU LUT entry 270 low
        volatile uint32_t LUT271L;  ///< Offset: 0x1878 - Graphic MMU LUT entry 271 low
        volatile uint32_t LUT272L;  ///< Offset: 0x1880 - Graphic MMU LUT entry 272 low
        volatile uint32_t LUT273L;  ///< Offset: 0x1888 - Graphic MMU LUT entry 273 low
        volatile uint32_t LUT274L;  ///< Offset: 0x1890 - Graphic MMU LUT entry 274 low
        volatile uint32_t LUT275L;  ///< Offset: 0x1898 - Graphic MMU LUT entry 275 low
        volatile uint32_t LUT276L;  ///< Offset: 0x18A0 - Graphic MMU LUT entry 276 low
        volatile uint32_t LUT277L;  ///< Offset: 0x18A8 - Graphic MMU LUT entry 277 low
        volatile uint32_t LUT278L;  ///< Offset: 0x18B0 - Graphic MMU LUT entry 278 low
        volatile uint32_t LUT279L;  ///< Offset: 0x18B8 - Graphic MMU LUT entry 279 low
        volatile uint32_t LUT280L;  ///< Offset: 0x18C0 - Graphic MMU LUT entry 280 low
        volatile uint32_t LUT281L;  ///< Offset: 0x18C8 - Graphic MMU LUT entry 281 low
        volatile uint32_t LUT282L;  ///< Offset: 0x18D0 - Graphic MMU LUT entry 282 low
        volatile uint32_t LUT283L;  ///< Offset: 0x18D8 - Graphic MMU LUT entry 283 low
        volatile uint32_t LUT284L;  ///< Offset: 0x18E0 - Graphic MMU LUT entry 284 low
        volatile uint32_t LUT285L;  ///< Offset: 0x18E8 - Graphic MMU LUT entry 285 low
        volatile uint32_t LUT286L;  ///< Offset: 0x18F0 - Graphic MMU LUT entry 286 low
        volatile uint32_t LUT287L;  ///< Offset: 0x18F8 - Graphic MMU LUT entry 287 low
        volatile uint32_t LUT288L;  ///< Offset: 0x1900 - Graphic MMU LUT entry 288 low
        volatile uint32_t LUT289L;  ///< Offset: 0x1908 - Graphic MMU LUT entry 289 low
        volatile uint32_t LUT290L;  ///< Offset: 0x1910 - Graphic MMU LUT entry 290 low
        volatile uint32_t LUT291L;  ///< Offset: 0x1918 - Graphic MMU LUT entry 291 low
        volatile uint32_t LUT292L;  ///< Offset: 0x1920 - Graphic MMU LUT entry 292 low
        volatile uint32_t LUT293L;  ///< Offset: 0x1928 - Graphic MMU LUT entry 293 low
        volatile uint32_t LUT294L;  ///< Offset: 0x1930 - Graphic MMU LUT entry 294 low
        volatile uint32_t LUT295L;  ///< Offset: 0x1938 - Graphic MMU LUT entry 295 low
        volatile uint32_t LUT296L;  ///< Offset: 0x1940 - Graphic MMU LUT entry 296 low
        volatile uint32_t LUT297L;  ///< Offset: 0x1948 - Graphic MMU LUT entry 297 low
        volatile uint32_t LUT298L;  ///< Offset: 0x1950 - Graphic MMU LUT entry 298 low
        volatile uint32_t LUT299L;  ///< Offset: 0x1958 - Graphic MMU LUT entry 299 low
        volatile uint32_t LUT300L;  ///< Offset: 0x1960 - Graphic MMU LUT entry 300 low
        volatile uint32_t LUT301L;  ///< Offset: 0x1968 - Graphic MMU LUT entry 301 low
        volatile uint32_t LUT302L;  ///< Offset: 0x1970 - Graphic MMU LUT entry 302 low
        volatile uint32_t LUT303L;  ///< Offset: 0x1978 - Graphic MMU LUT entry 303 low
        volatile uint32_t LUT304L;  ///< Offset: 0x1980 - Graphic MMU LUT entry 304 low
        volatile uint32_t LUT305L;  ///< Offset: 0x1988 - Graphic MMU LUT entry 305 low
        volatile uint32_t LUT306L;  ///< Offset: 0x1990 - Graphic MMU LUT entry 306 low
        volatile uint32_t LUT307L;  ///< Offset: 0x1998 - Graphic MMU LUT entry 307 low
        volatile uint32_t LUT308L;  ///< Offset: 0x19A0 - Graphic MMU LUT entry 308 low
        volatile uint32_t LUT309L;  ///< Offset: 0x19A8 - Graphic MMU LUT entry 309 low
        volatile uint32_t LUT310L;  ///< Offset: 0x19B0 - Graphic MMU LUT entry 310 low
        volatile uint32_t LUT311L;  ///< Offset: 0x19B8 - Graphic MMU LUT entry 311 low
        volatile uint32_t LUT312L;  ///< Offset: 0x19C0 - Graphic MMU LUT entry 312 low
        volatile uint32_t LUT313L;  ///< Offset: 0x19C8 - Graphic MMU LUT entry 313 low
        volatile uint32_t LUT314L;  ///< Offset: 0x19D0 - Graphic MMU LUT entry 314 low
        volatile uint32_t LUT315L;  ///< Offset: 0x19D8 - Graphic MMU LUT entry 315 low
        volatile uint32_t LUT316L;  ///< Offset: 0x19E0 - Graphic MMU LUT entry 316 low
        volatile uint32_t LUT317L;  ///< Offset: 0x19E8 - Graphic MMU LUT entry 317 low
        volatile uint32_t LUT318L;  ///< Offset: 0x19F0 - Graphic MMU LUT entry 318 low
        volatile uint32_t LUT319L;  ///< Offset: 0x19F8 - Graphic MMU LUT entry 319 low
        volatile uint32_t LUT320L;  ///< Offset: 0x1A00 - Graphic MMU LUT entry 320 low
        volatile uint32_t LUT321L;  ///< Offset: 0x1A08 - Graphic MMU LUT entry 321 low
        volatile uint32_t LUT322L;  ///< Offset: 0x1A10 - Graphic MMU LUT entry 322 low
        volatile uint32_t LUT323L;  ///< Offset: 0x1A18 - Graphic MMU LUT entry 323 low
        volatile uint32_t LUT324L;  ///< Offset: 0x1A20 - Graphic MMU LUT entry 324 low
        volatile uint32_t LUT325L;  ///< Offset: 0x1A28 - Graphic MMU LUT entry 325 low
        volatile uint32_t LUT326L;  ///< Offset: 0x1A30 - Graphic MMU LUT entry 326 low
        volatile uint32_t LUT327L;  ///< Offset: 0x1A38 - Graphic MMU LUT entry 327 low
        volatile uint32_t LUT328L;  ///< Offset: 0x1A40 - Graphic MMU LUT entry 328 low
        volatile uint32_t LUT329L;  ///< Offset: 0x1A48 - Graphic MMU LUT entry 329 low
        volatile uint32_t LUT330L;  ///< Offset: 0x1A50 - Graphic MMU LUT entry 330 low
        volatile uint32_t LUT331L;  ///< Offset: 0x1A58 - Graphic MMU LUT entry 331 low
        volatile uint32_t LUT332L;  ///< Offset: 0x1A60 - Graphic MMU LUT entry 332 low
        volatile uint32_t LUT333L;  ///< Offset: 0x1A68 - Graphic MMU LUT entry 333 low
        volatile uint32_t LUT334L;  ///< Offset: 0x1A70 - Graphic MMU LUT entry 334 low
        volatile uint32_t LUT335L;  ///< Offset: 0x1A78 - Graphic MMU LUT entry 335 low
        volatile uint32_t LUT336L;  ///< Offset: 0x1A80 - Graphic MMU LUT entry 336 low
        volatile uint32_t LUT337L;  ///< Offset: 0x1A88 - Graphic MMU LUT entry 337 low
        volatile uint32_t LUT338L;  ///< Offset: 0x1A90 - Graphic MMU LUT entry 338 low
        volatile uint32_t LUT339L;  ///< Offset: 0x1A98 - Graphic MMU LUT entry 339 low
        volatile uint32_t LUT340L;  ///< Offset: 0x1AA0 - Graphic MMU LUT entry 340 low
        volatile uint32_t LUT341L;  ///< Offset: 0x1AA8 - Graphic MMU LUT entry 341 low
        volatile uint32_t LUT342L;  ///< Offset: 0x1AB0 - Graphic MMU LUT entry 342 low
        volatile uint32_t LUT343L;  ///< Offset: 0x1AB8 - Graphic MMU LUT entry 343 low
        volatile uint32_t LUT344L;  ///< Offset: 0x1AC0 - Graphic MMU LUT entry 344 low
        volatile uint32_t LUT345L;  ///< Offset: 0x1AC8 - Graphic MMU LUT entry 345 low
        volatile uint32_t LUT346L;  ///< Offset: 0x1AD0 - Graphic MMU LUT entry 346 low
        volatile uint32_t LUT347L;  ///< Offset: 0x1AD8 - Graphic MMU LUT entry 347 low
        volatile uint32_t LUT348L;  ///< Offset: 0x1AE0 - Graphic MMU LUT entry 348 low
        volatile uint32_t LUT349L;  ///< Offset: 0x1AE8 - Graphic MMU LUT entry 349 low
        volatile uint32_t LUT350L;  ///< Offset: 0x1AF0 - Graphic MMU LUT entry 350 low
        volatile uint32_t LUT351L;  ///< Offset: 0x1AF8 - Graphic MMU LUT entry 351 low
        volatile uint32_t LUT352L;  ///< Offset: 0x1B00 - Graphic MMU LUT entry 352 low
        volatile uint32_t LUT353L;  ///< Offset: 0x1B08 - Graphic MMU LUT entry 353 low
        volatile uint32_t LUT354L;  ///< Offset: 0x1B10 - Graphic MMU LUT entry 354 low
        volatile uint32_t LUT355L;  ///< Offset: 0x1B18 - Graphic MMU LUT entry 355 low
        volatile uint32_t LUT356L;  ///< Offset: 0x1B20 - Graphic MMU LUT entry 356 low
        volatile uint32_t LUT357L;  ///< Offset: 0x1B28 - Graphic MMU LUT entry 357 low
        volatile uint32_t LUT358L;  ///< Offset: 0x1B30 - Graphic MMU LUT entry 358 low
        volatile uint32_t LUT359L;  ///< Offset: 0x1B38 - Graphic MMU LUT entry 359 low
        volatile uint32_t LUT360L;  ///< Offset: 0x1B40 - Graphic MMU LUT entry 360 low
        volatile uint32_t LUT361L;  ///< Offset: 0x1B48 - Graphic MMU LUT entry 361 low
        volatile uint32_t LUT362L;  ///< Offset: 0x1B50 - Graphic MMU LUT entry 362 low
        volatile uint32_t LUT363L;  ///< Offset: 0x1B58 - Graphic MMU LUT entry 363 low
        volatile uint32_t LUT364L;  ///< Offset: 0x1B60 - Graphic MMU LUT entry 364 low
        volatile uint32_t LUT365L;  ///< Offset: 0x1B68 - Graphic MMU LUT entry 365 low
        volatile uint32_t LUT366L;  ///< Offset: 0x1B70 - Graphic MMU LUT entry 366 low
        volatile uint32_t LUT367L;  ///< Offset: 0x1B78 - Graphic MMU LUT entry 367 low
        volatile uint32_t LUT368L;  ///< Offset: 0x1B80 - Graphic MMU LUT entry 368 low
        volatile uint32_t LUT369L;  ///< Offset: 0x1B88 - Graphic MMU LUT entry 369 low
        volatile uint32_t LUT370L;  ///< Offset: 0x1B90 - Graphic MMU LUT entry 370 low
        volatile uint32_t LUT371L;  ///< Offset: 0x1B98 - Graphic MMU LUT entry 371 low
        volatile uint32_t LUT372L;  ///< Offset: 0x1BA0 - Graphic MMU LUT entry 372 low
        volatile uint32_t LUT373L;  ///< Offset: 0x1BA8 - Graphic MMU LUT entry 373 low
        volatile uint32_t LUT374L;  ///< Offset: 0x1BB0 - Graphic MMU LUT entry 374 low
        volatile uint32_t LUT375L;  ///< Offset: 0x1BB8 - Graphic MMU LUT entry 375 low
        volatile uint32_t LUT376L;  ///< Offset: 0x1BC0 - Graphic MMU LUT entry 376 low
        volatile uint32_t LUT377L;  ///< Offset: 0x1BC8 - Graphic MMU LUT entry 377 low
        volatile uint32_t LUT378L;  ///< Offset: 0x1BD0 - Graphic MMU LUT entry 378 low
        volatile uint32_t LUT379L;  ///< Offset: 0x1BD8 - Graphic MMU LUT entry 379 low
        volatile uint32_t LUT380L;  ///< Offset: 0x1BE0 - Graphic MMU LUT entry 380 low
        volatile uint32_t LUT381L;  ///< Offset: 0x1BE8 - Graphic MMU LUT entry 381 low
        volatile uint32_t LUT382L;  ///< Offset: 0x1BF0 - Graphic MMU LUT entry 382 low
        volatile uint32_t LUT383L;  ///< Offset: 0x1BF8 - Graphic MMU LUT entry 383 low
        volatile uint32_t LUT384L;  ///< Offset: 0x1C00 - Graphic MMU LUT entry 384 low
        volatile uint32_t LUT385L;  ///< Offset: 0x1C08 - Graphic MMU LUT entry 385 low
        volatile uint32_t LUT386L;  ///< Offset: 0x1C10 - Graphic MMU LUT entry 386 low
        volatile uint32_t LUT387L;  ///< Offset: 0x1C18 - Graphic MMU LUT entry 387 low
        volatile uint32_t LUT388L;  ///< Offset: 0x1C20 - Graphic MMU LUT entry 388 low
        volatile uint32_t LUT389L;  ///< Offset: 0x1C28 - Graphic MMU LUT entry 389 low
        volatile uint32_t LUT390L;  ///< Offset: 0x1C30 - Graphic MMU LUT entry 390 low
        volatile uint32_t LUT391L;  ///< Offset: 0x1C38 - Graphic MMU LUT entry 391 low
        volatile uint32_t LUT392L;  ///< Offset: 0x1C40 - Graphic MMU LUT entry 392 low
        volatile uint32_t LUT393L;  ///< Offset: 0x1C48 - Graphic MMU LUT entry 393 low
        volatile uint32_t LUT394L;  ///< Offset: 0x1C50 - Graphic MMU LUT entry 394 low
        volatile uint32_t LUT395L;  ///< Offset: 0x1C58 - Graphic MMU LUT entry 395 low
        volatile uint32_t LUT396L;  ///< Offset: 0x1C60 - Graphic MMU LUT entry 396 low
        volatile uint32_t LUT397L;  ///< Offset: 0x1C68 - Graphic MMU LUT entry 397 low
        volatile uint32_t LUT398L;  ///< Offset: 0x1C70 - Graphic MMU LUT entry 398 low
        volatile uint32_t LUT399L;  ///< Offset: 0x1C78 - Graphic MMU LUT entry 399 low
        volatile uint32_t LUT400L;  ///< Offset: 0x1C80 - Graphic MMU LUT entry 400 low
        volatile uint32_t LUT401L;  ///< Offset: 0x1C88 - Graphic MMU LUT entry 401 low
        volatile uint32_t LUT402L;  ///< Offset: 0x1C90 - Graphic MMU LUT entry 402 low
        volatile uint32_t LUT403L;  ///< Offset: 0x1C98 - Graphic MMU LUT entry 403 low
        volatile uint32_t LUT404L;  ///< Offset: 0x1CA0 - Graphic MMU LUT entry 404 low
        volatile uint32_t LUT405L;  ///< Offset: 0x1CA8 - Graphic MMU LUT entry 405 low
        volatile uint32_t LUT406L;  ///< Offset: 0x1CB0 - Graphic MMU LUT entry 406 low
        volatile uint32_t LUT407L;  ///< Offset: 0x1CB8 - Graphic MMU LUT entry 407 low
        volatile uint32_t LUT408L;  ///< Offset: 0x1CC0 - Graphic MMU LUT entry 408 low
        volatile uint32_t LUT409L;  ///< Offset: 0x1CC8 - Graphic MMU LUT entry 409 low
        volatile uint32_t LUT410L;  ///< Offset: 0x1CD0 - Graphic MMU LUT entry 410 low
        volatile uint32_t LUT411L;  ///< Offset: 0x1CD8 - Graphic MMU LUT entry 411 low
        volatile uint32_t LUT412L;  ///< Offset: 0x1CE0 - Graphic MMU LUT entry 412 low
        volatile uint32_t LUT413L;  ///< Offset: 0x1CE8 - Graphic MMU LUT entry 413 low
        volatile uint32_t LUT414L;  ///< Offset: 0x1CF0 - Graphic MMU LUT entry 414 low
        volatile uint32_t LUT415L;  ///< Offset: 0x1CF8 - Graphic MMU LUT entry 415 low
        volatile uint32_t LUT416L;  ///< Offset: 0x1D00 - Graphic MMU LUT entry 416 low
        volatile uint32_t LUT417L;  ///< Offset: 0x1D08 - Graphic MMU LUT entry 417 low
        volatile uint32_t LUT418L;  ///< Offset: 0x1D10 - Graphic MMU LUT entry 418 low
        volatile uint32_t LUT419L;  ///< Offset: 0x1D18 - Graphic MMU LUT entry 419 low
        volatile uint32_t LUT420L;  ///< Offset: 0x1D20 - Graphic MMU LUT entry 420 low
        volatile uint32_t LUT421L;  ///< Offset: 0x1D28 - Graphic MMU LUT entry 421 low
        volatile uint32_t LUT422L;  ///< Offset: 0x1D30 - Graphic MMU LUT entry 422 low
        volatile uint32_t LUT423L;  ///< Offset: 0x1D38 - Graphic MMU LUT entry 423 low
        volatile uint32_t LUT424L;  ///< Offset: 0x1D40 - Graphic MMU LUT entry 424 low
        volatile uint32_t LUT425L;  ///< Offset: 0x1D48 - Graphic MMU LUT entry 425 low
        volatile uint32_t LUT426L;  ///< Offset: 0x1D50 - Graphic MMU LUT entry 426 low
        volatile uint32_t LUT427L;  ///< Offset: 0x1D58 - Graphic MMU LUT entry 427 low
        volatile uint32_t LUT428L;  ///< Offset: 0x1D60 - Graphic MMU LUT entry 428 low
        volatile uint32_t LUT429L;  ///< Offset: 0x1D68 - Graphic MMU LUT entry 429 low
        volatile uint32_t LUT430L;  ///< Offset: 0x1D70 - Graphic MMU LUT entry 430 low
        volatile uint32_t LUT431L;  ///< Offset: 0x1D78 - Graphic MMU LUT entry 431 low
        volatile uint32_t LUT432L;  ///< Offset: 0x1D80 - Graphic MMU LUT entry 432 low
        volatile uint32_t LUT433L;  ///< Offset: 0x1D88 - Graphic MMU LUT entry 433 low
        volatile uint32_t LUT434L;  ///< Offset: 0x1D90 - Graphic MMU LUT entry 434 low
        volatile uint32_t LUT435L;  ///< Offset: 0x1D98 - Graphic MMU LUT entry 435 low
        volatile uint32_t LUT436L;  ///< Offset: 0x1DA0 - Graphic MMU LUT entry 436 low
        volatile uint32_t LUT437L;  ///< Offset: 0x1DA8 - Graphic MMU LUT entry 437 low
        volatile uint32_t LUT438L;  ///< Offset: 0x1DB0 - Graphic MMU LUT entry 438 low
        volatile uint32_t LUT439L;  ///< Offset: 0x1DB8 - Graphic MMU LUT entry 439 low
        volatile uint32_t LUT440L;  ///< Offset: 0x1DC0 - Graphic MMU LUT entry 440 low
        volatile uint32_t LUT441L;  ///< Offset: 0x1DC8 - Graphic MMU LUT entry 441 low
        volatile uint32_t LUT442L;  ///< Offset: 0x1DD0 - Graphic MMU LUT entry 442 low
        volatile uint32_t LUT443L;  ///< Offset: 0x1DD8 - Graphic MMU LUT entry 443 low
        volatile uint32_t LUT444L;  ///< Offset: 0x1DE0 - Graphic MMU LUT entry 444 low
        volatile uint32_t LUT445L;  ///< Offset: 0x1DE8 - Graphic MMU LUT entry 445 low
        volatile uint32_t LUT446L;  ///< Offset: 0x1DF0 - Graphic MMU LUT entry 446 low
        volatile uint32_t LUT447L;  ///< Offset: 0x1DF8 - Graphic MMU LUT entry 447 low
        volatile uint32_t LUT448L;  ///< Offset: 0x1E00 - Graphic MMU LUT entry 448 low
        volatile uint32_t LUT449L;  ///< Offset: 0x1E08 - Graphic MMU LUT entry 449 low
        volatile uint32_t LUT450L;  ///< Offset: 0x1E10 - Graphic MMU LUT entry 450 low
        volatile uint32_t LUT451L;  ///< Offset: 0x1E18 - Graphic MMU LUT entry 451 low
        volatile uint32_t LUT452L;  ///< Offset: 0x1E20 - Graphic MMU LUT entry 452 low
        volatile uint32_t LUT453L;  ///< Offset: 0x1E28 - Graphic MMU LUT entry 453 low
        volatile uint32_t LUT454L;  ///< Offset: 0x1E30 - Graphic MMU LUT entry 454 low
        volatile uint32_t LUT455L;  ///< Offset: 0x1E38 - Graphic MMU LUT entry 455 low
        volatile uint32_t LUT456L;  ///< Offset: 0x1E40 - Graphic MMU LUT entry 456 low
        volatile uint32_t LUT457L;  ///< Offset: 0x1E48 - Graphic MMU LUT entry 457 low
        volatile uint32_t LUT458L;  ///< Offset: 0x1E50 - Graphic MMU LUT entry 458 low
        volatile uint32_t LUT459L;  ///< Offset: 0x1E58 - Graphic MMU LUT entry 459 low
        volatile uint32_t LUT460L;  ///< Offset: 0x1E60 - Graphic MMU LUT entry 460 low
        volatile uint32_t LUT461L;  ///< Offset: 0x1E68 - Graphic MMU LUT entry 461 low
        volatile uint32_t LUT462L;  ///< Offset: 0x1E70 - Graphic MMU LUT entry 462 low
        volatile uint32_t LUT463L;  ///< Offset: 0x1E78 - Graphic MMU LUT entry 463 low
        volatile uint32_t LUT464L;  ///< Offset: 0x1E80 - Graphic MMU LUT entry 464 low
        volatile uint32_t LUT465L;  ///< Offset: 0x1E88 - Graphic MMU LUT entry 465 low
        volatile uint32_t LUT466L;  ///< Offset: 0x1E90 - Graphic MMU LUT entry 466 low
        volatile uint32_t LUT467L;  ///< Offset: 0x1E98 - Graphic MMU LUT entry 467 low
        volatile uint32_t LUT468L;  ///< Offset: 0x1EA0 - Graphic MMU LUT entry 468 low
        volatile uint32_t LUT469L;  ///< Offset: 0x1EA8 - Graphic MMU LUT entry 469 low
        volatile uint32_t LUT470L;  ///< Offset: 0x1EB0 - Graphic MMU LUT entry 470 low
        volatile uint32_t LUT471L;  ///< Offset: 0x1EB8 - Graphic MMU LUT entry 471 low
        volatile uint32_t LUT472L;  ///< Offset: 0x1EC0 - Graphic MMU LUT entry 472 low
        volatile uint32_t LUT473L;  ///< Offset: 0x1EC8 - Graphic MMU LUT entry 473 low
        volatile uint32_t LUT474L;  ///< Offset: 0x1ED0 - Graphic MMU LUT entry 474 low
        volatile uint32_t LUT475L;  ///< Offset: 0x1ED8 - Graphic MMU LUT entry 475 low
        volatile uint32_t LUT476L;  ///< Offset: 0x1EE0 - Graphic MMU LUT entry 476 low
        volatile uint32_t LUT477L;  ///< Offset: 0x1EE8 - Graphic MMU LUT entry 477 low
        volatile uint32_t LUT478L;  ///< Offset: 0x1EF0 - Graphic MMU LUT entry 478 low
        volatile uint32_t LUT479L;  ///< Offset: 0x1EF8 - Graphic MMU LUT entry 479 low
        volatile uint32_t LUT480L;  ///< Offset: 0x1F00 - Graphic MMU LUT entry 480 low
        volatile uint32_t LUT481L;  ///< Offset: 0x1F08 - Graphic MMU LUT entry 481 low
        volatile uint32_t LUT482L;  ///< Offset: 0x1F10 - Graphic MMU LUT entry 482 low
        volatile uint32_t LUT483L;  ///< Offset: 0x1F18 - Graphic MMU LUT entry 483 low
        volatile uint32_t LUT484L;  ///< Offset: 0x1F20 - Graphic MMU LUT entry 484 low
        volatile uint32_t LUT485L;  ///< Offset: 0x1F28 - Graphic MMU LUT entry 485 low
        volatile uint32_t LUT486L;  ///< Offset: 0x1F30 - Graphic MMU LUT entry 486 low
        volatile uint32_t LUT487L;  ///< Offset: 0x1F38 - Graphic MMU LUT entry 487 low
        volatile uint32_t LUT488L;  ///< Offset: 0x1F40 - Graphic MMU LUT entry 488 low
        volatile uint32_t LUT489L;  ///< Offset: 0x1F48 - Graphic MMU LUT entry 489 low
        volatile uint32_t LUT490L;  ///< Offset: 0x1F50 - Graphic MMU LUT entry 490 low
        volatile uint32_t LUT491L;  ///< Offset: 0x1F58 - Graphic MMU LUT entry 491 low
        volatile uint32_t LUT492L;  ///< Offset: 0x1F60 - Graphic MMU LUT entry 492 low
        volatile uint32_t LUT493L;  ///< Offset: 0x1F68 - Graphic MMU LUT entry 493 low
        volatile uint32_t LUT494L;  ///< Offset: 0x1F70 - Graphic MMU LUT entry 494 low
        volatile uint32_t LUT495L;  ///< Offset: 0x1F78 - Graphic MMU LUT entry 495 low
        volatile uint32_t LUT496L;  ///< Offset: 0x1F80 - Graphic MMU LUT entry 496 low
        volatile uint32_t LUT497L;  ///< Offset: 0x1F88 - Graphic MMU LUT entry 497 low
        volatile uint32_t LUT498L;  ///< Offset: 0x1F90 - Graphic MMU LUT entry 498 low
        volatile uint32_t LUT499L;  ///< Offset: 0x1F98 - Graphic MMU LUT entry 499 low
        volatile uint32_t LUT500L;  ///< Offset: 0x1FA0 - Graphic MMU LUT entry 500 low
        volatile uint32_t LUT501L;  ///< Offset: 0x1FA8 - Graphic MMU LUT entry 501 low
        volatile uint32_t LUT502L;  ///< Offset: 0x1FB0 - Graphic MMU LUT entry 502 low
        volatile uint32_t LUT503L;  ///< Offset: 0x1FB8 - Graphic MMU LUT entry 503 low
        volatile uint32_t LUT504L;  ///< Offset: 0x1FC0 - Graphic MMU LUT entry 504 low
        volatile uint32_t LUT505L;  ///< Offset: 0x1FC8 - Graphic MMU LUT entry 505 low
        volatile uint32_t LUT506L;  ///< Offset: 0x1FD0 - Graphic MMU LUT entry 506 low
        volatile uint32_t LUT507L;  ///< Offset: 0x1FD8 - Graphic MMU LUT entry 507 low
        volatile uint32_t LUT508L;  ///< Offset: 0x1FE0 - Graphic MMU LUT entry 508 low
        volatile uint32_t LUT509L;  ///< Offset: 0x1FE8 - Graphic MMU LUT entry 509 low
        volatile uint32_t LUT510L;  ///< Offset: 0x1FF0 - Graphic MMU LUT entry 510 low
        volatile uint32_t LUT511L;  ///< Offset: 0x1FF8 - Graphic MMU LUT entry 511 low
        volatile uint32_t LUT512L;  ///< Offset: 0x2000 - Graphic MMU LUT entry 512 low
        volatile uint32_t LUT513L;  ///< Offset: 0x2008 - Graphic MMU LUT entry 513 low
        volatile uint32_t LUT514L;  ///< Offset: 0x2010 - Graphic MMU LUT entry 514 low
        volatile uint32_t LUT515L;  ///< Offset: 0x2018 - Graphic MMU LUT entry 515 low
        volatile uint32_t LUT516L;  ///< Offset: 0x2020 - Graphic MMU LUT entry 516 low
        volatile uint32_t LUT517L;  ///< Offset: 0x2028 - Graphic MMU LUT entry 517 low
        volatile uint32_t LUT518L;  ///< Offset: 0x2030 - Graphic MMU LUT entry 518 low
        volatile uint32_t LUT519L;  ///< Offset: 0x2038 - Graphic MMU LUT entry 519 low
        volatile uint32_t LUT520L;  ///< Offset: 0x2040 - Graphic MMU LUT entry 520 low
        volatile uint32_t LUT521L;  ///< Offset: 0x2048 - Graphic MMU LUT entry 521 low
        volatile uint32_t LUT522L;  ///< Offset: 0x2050 - Graphic MMU LUT entry 522 low
        volatile uint32_t LUT523L;  ///< Offset: 0x2058 - Graphic MMU LUT entry 523 low
        volatile uint32_t LUT524L;  ///< Offset: 0x2060 - Graphic MMU LUT entry 524 low
        volatile uint32_t LUT525L;  ///< Offset: 0x2068 - Graphic MMU LUT entry 525 low
        volatile uint32_t LUT526L;  ///< Offset: 0x2070 - Graphic MMU LUT entry 526 low
        volatile uint32_t LUT527L;  ///< Offset: 0x2078 - Graphic MMU LUT entry 527 low
        volatile uint32_t LUT528L;  ///< Offset: 0x2080 - Graphic MMU LUT entry 528 low
        volatile uint32_t LUT529L;  ///< Offset: 0x2088 - Graphic MMU LUT entry 529 low
        volatile uint32_t LUT530L;  ///< Offset: 0x2090 - Graphic MMU LUT entry 530 low
        volatile uint32_t LUT531L;  ///< Offset: 0x2098 - Graphic MMU LUT entry 531 low
        volatile uint32_t LUT532L;  ///< Offset: 0x20A0 - Graphic MMU LUT entry 532 low
        volatile uint32_t LUT533L;  ///< Offset: 0x20A8 - Graphic MMU LUT entry 533 low
        volatile uint32_t LUT534L;  ///< Offset: 0x20B0 - Graphic MMU LUT entry 534 low
        volatile uint32_t LUT535L;  ///< Offset: 0x20B8 - Graphic MMU LUT entry 535 low
        volatile uint32_t LUT536L;  ///< Offset: 0x20C0 - Graphic MMU LUT entry 536 low
        volatile uint32_t LUT537L;  ///< Offset: 0x20C8 - Graphic MMU LUT entry 537 low
        volatile uint32_t LUT538L;  ///< Offset: 0x20D0 - Graphic MMU LUT entry 538 low
        volatile uint32_t LUT539L;  ///< Offset: 0x20D8 - Graphic MMU LUT entry 539 low
        volatile uint32_t LUT540L;  ///< Offset: 0x20E0 - Graphic MMU LUT entry 540 low
        volatile uint32_t LUT541L;  ///< Offset: 0x20E8 - Graphic MMU LUT entry 541 low
        volatile uint32_t LUT542L;  ///< Offset: 0x20F0 - Graphic MMU LUT entry 542 low
        volatile uint32_t LUT543L;  ///< Offset: 0x20F8 - Graphic MMU LUT entry 543 low
        volatile uint32_t LUT544L;  ///< Offset: 0x2100 - Graphic MMU LUT entry 544 low
        volatile uint32_t LUT545L;  ///< Offset: 0x2108 - Graphic MMU LUT entry 545 low
        volatile uint32_t LUT546L;  ///< Offset: 0x2110 - Graphic MMU LUT entry 546 low
        volatile uint32_t LUT547L;  ///< Offset: 0x2118 - Graphic MMU LUT entry 547 low
        volatile uint32_t LUT548L;  ///< Offset: 0x2120 - Graphic MMU LUT entry 548 low
        volatile uint32_t LUT549L;  ///< Offset: 0x2128 - Graphic MMU LUT entry 549 low
        volatile uint32_t LUT550L;  ///< Offset: 0x2130 - Graphic MMU LUT entry 550 low
        volatile uint32_t LUT551L;  ///< Offset: 0x2138 - Graphic MMU LUT entry 551 low
        volatile uint32_t LUT552L;  ///< Offset: 0x2140 - Graphic MMU LUT entry 552 low
        volatile uint32_t LUT553L;  ///< Offset: 0x2148 - Graphic MMU LUT entry 553 low
        volatile uint32_t LUT554L;  ///< Offset: 0x2150 - Graphic MMU LUT entry 554 low
        volatile uint32_t LUT555L;  ///< Offset: 0x2158 - Graphic MMU LUT entry 555 low
        volatile uint32_t LUT556L;  ///< Offset: 0x2160 - Graphic MMU LUT entry 556 low
        volatile uint32_t LUT557L;  ///< Offset: 0x2168 - Graphic MMU LUT entry 557 low
        volatile uint32_t LUT558L;  ///< Offset: 0x2170 - Graphic MMU LUT entry 558 low
        volatile uint32_t LUT559L;  ///< Offset: 0x2178 - Graphic MMU LUT entry 559 low
        volatile uint32_t LUT560L;  ///< Offset: 0x2180 - Graphic MMU LUT entry 560 low
        volatile uint32_t LUT561L;  ///< Offset: 0x2188 - Graphic MMU LUT entry 561 low
        volatile uint32_t LUT562L;  ///< Offset: 0x2190 - Graphic MMU LUT entry 562 low
        volatile uint32_t LUT563L;  ///< Offset: 0x2198 - Graphic MMU LUT entry 563 low
        volatile uint32_t LUT564L;  ///< Offset: 0x21A0 - Graphic MMU LUT entry 564 low
        volatile uint32_t LUT565L;  ///< Offset: 0x21A8 - Graphic MMU LUT entry 565 low
        volatile uint32_t LUT566L;  ///< Offset: 0x21B0 - Graphic MMU LUT entry 566 low
        volatile uint32_t LUT567L;  ///< Offset: 0x21B8 - Graphic MMU LUT entry 567 low
        volatile uint32_t LUT568L;  ///< Offset: 0x21C0 - Graphic MMU LUT entry 568 low
        volatile uint32_t LUT569L;  ///< Offset: 0x21C8 - Graphic MMU LUT entry 569 low
        volatile uint32_t LUT570L;  ///< Offset: 0x21D0 - Graphic MMU LUT entry 570 low
        volatile uint32_t LUT571L;  ///< Offset: 0x21D8 - Graphic MMU LUT entry 571 low
        volatile uint32_t LUT572L;  ///< Offset: 0x21E0 - Graphic MMU LUT entry 572 low
        volatile uint32_t LUT573L;  ///< Offset: 0x21E8 - Graphic MMU LUT entry 573 low
        volatile uint32_t LUT574L;  ///< Offset: 0x21F0 - Graphic MMU LUT entry 574 low
        volatile uint32_t LUT575L;  ///< Offset: 0x21F8 - Graphic MMU LUT entry 575 low
        volatile uint32_t LUT576L;  ///< Offset: 0x2200 - Graphic MMU LUT entry 576 low
        volatile uint32_t LUT577L;  ///< Offset: 0x2208 - Graphic MMU LUT entry 577 low
        volatile uint32_t LUT578L;  ///< Offset: 0x2210 - Graphic MMU LUT entry 578 low
        volatile uint32_t LUT579L;  ///< Offset: 0x2218 - Graphic MMU LUT entry 579 low
        volatile uint32_t LUT580L;  ///< Offset: 0x2220 - Graphic MMU LUT entry 580 low
        volatile uint32_t LUT581L;  ///< Offset: 0x2228 - Graphic MMU LUT entry 581 low
        volatile uint32_t LUT582L;  ///< Offset: 0x2230 - Graphic MMU LUT entry 582 low
        volatile uint32_t LUT583L;  ///< Offset: 0x2238 - Graphic MMU LUT entry 583 low
        volatile uint32_t LUT584L;  ///< Offset: 0x2240 - Graphic MMU LUT entry 584 low
        volatile uint32_t LUT585L;  ///< Offset: 0x2248 - Graphic MMU LUT entry 585 low
        volatile uint32_t LUT586L;  ///< Offset: 0x2250 - Graphic MMU LUT entry 586 low
        volatile uint32_t LUT587L;  ///< Offset: 0x2258 - Graphic MMU LUT entry 587 low
        volatile uint32_t LUT588L;  ///< Offset: 0x2260 - Graphic MMU LUT entry 588 low
        volatile uint32_t LUT589L;  ///< Offset: 0x2268 - Graphic MMU LUT entry 589 low
        volatile uint32_t LUT590L;  ///< Offset: 0x2270 - Graphic MMU LUT entry 590 low
        volatile uint32_t LUT591L;  ///< Offset: 0x2278 - Graphic MMU LUT entry 591 low
        volatile uint32_t LUT592L;  ///< Offset: 0x2280 - Graphic MMU LUT entry 592 low
        volatile uint32_t LUT593L;  ///< Offset: 0x2288 - Graphic MMU LUT entry 593 low
        volatile uint32_t LUT594L;  ///< Offset: 0x2290 - Graphic MMU LUT entry 594 low
        volatile uint32_t LUT595L;  ///< Offset: 0x2298 - Graphic MMU LUT entry 595 low
        volatile uint32_t LUT596L;  ///< Offset: 0x22A0 - Graphic MMU LUT entry 596 low
        volatile uint32_t LUT597L;  ///< Offset: 0x22A8 - Graphic MMU LUT entry 597 low
        volatile uint32_t LUT598L;  ///< Offset: 0x22B0 - Graphic MMU LUT entry 598 low
        volatile uint32_t LUT599L;  ///< Offset: 0x22B8 - Graphic MMU LUT entry 599 low
        volatile uint32_t LUT600L;  ///< Offset: 0x22C0 - Graphic MMU LUT entry 600 low
        volatile uint32_t LUT601L;  ///< Offset: 0x22C8 - Graphic MMU LUT entry 601 low
        volatile uint32_t LUT602L;  ///< Offset: 0x22D0 - Graphic MMU LUT entry 602 low
        volatile uint32_t LUT603L;  ///< Offset: 0x22D8 - Graphic MMU LUT entry 603 low
        volatile uint32_t LUT604L;  ///< Offset: 0x22E0 - Graphic MMU LUT entry 604 low
        volatile uint32_t LUT605L;  ///< Offset: 0x22E8 - Graphic MMU LUT entry 605 low
        volatile uint32_t LUT606L;  ///< Offset: 0x22F0 - Graphic MMU LUT entry 606 low
        volatile uint32_t LUT607L;  ///< Offset: 0x22F8 - Graphic MMU LUT entry 607 low
        volatile uint32_t LUT608L;  ///< Offset: 0x2300 - Graphic MMU LUT entry 608 low
        volatile uint32_t LUT609L;  ///< Offset: 0x2308 - Graphic MMU LUT entry 609 low
        volatile uint32_t LUT610L;  ///< Offset: 0x2310 - Graphic MMU LUT entry 610 low
        volatile uint32_t LUT611L;  ///< Offset: 0x2318 - Graphic MMU LUT entry 611 low
        volatile uint32_t LUT612L;  ///< Offset: 0x2320 - Graphic MMU LUT entry 612 low
        volatile uint32_t LUT613L;  ///< Offset: 0x2328 - Graphic MMU LUT entry 613 low
        volatile uint32_t LUT614L;  ///< Offset: 0x2330 - Graphic MMU LUT entry 614 low
        volatile uint32_t LUT615L;  ///< Offset: 0x2338 - Graphic MMU LUT entry 615 low
        volatile uint32_t LUT616L;  ///< Offset: 0x2340 - Graphic MMU LUT entry 616 low
        volatile uint32_t LUT617L;  ///< Offset: 0x2348 - Graphic MMU LUT entry 617 low
        volatile uint32_t LUT618L;  ///< Offset: 0x2350 - Graphic MMU LUT entry 618 low
        volatile uint32_t LUT619L;  ///< Offset: 0x2358 - Graphic MMU LUT entry 619 low
        volatile uint32_t LUT620L;  ///< Offset: 0x2360 - Graphic MMU LUT entry 620 low
        volatile uint32_t LUT621L;  ///< Offset: 0x2368 - Graphic MMU LUT entry 621 low
        volatile uint32_t LUT622L;  ///< Offset: 0x2370 - Graphic MMU LUT entry 622 low
        volatile uint32_t LUT623L;  ///< Offset: 0x2378 - Graphic MMU LUT entry 623 low
        volatile uint32_t LUT624L;  ///< Offset: 0x2380 - Graphic MMU LUT entry 624 low
        volatile uint32_t LUT625L;  ///< Offset: 0x2388 - Graphic MMU LUT entry 625 low
        volatile uint32_t LUT626L;  ///< Offset: 0x2390 - Graphic MMU LUT entry 626 low
        volatile uint32_t LUT627L;  ///< Offset: 0x2398 - Graphic MMU LUT entry 627 low
        volatile uint32_t LUT628L;  ///< Offset: 0x23A0 - Graphic MMU LUT entry 628 low
        volatile uint32_t LUT629L;  ///< Offset: 0x23A8 - Graphic MMU LUT entry 629 low
        volatile uint32_t LUT630L;  ///< Offset: 0x23B0 - Graphic MMU LUT entry 630 low
        volatile uint32_t LUT631L;  ///< Offset: 0x23B8 - Graphic MMU LUT entry 631 low
        volatile uint32_t LUT632L;  ///< Offset: 0x23C0 - Graphic MMU LUT entry 632 low
        volatile uint32_t LUT633L;  ///< Offset: 0x23C8 - Graphic MMU LUT entry 633 low
        volatile uint32_t LUT634L;  ///< Offset: 0x23D0 - Graphic MMU LUT entry 634 low
        volatile uint32_t LUT635L;  ///< Offset: 0x23D8 - Graphic MMU LUT entry 635 low
        volatile uint32_t LUT636L;  ///< Offset: 0x23E0 - Graphic MMU LUT entry 636 low
        volatile uint32_t LUT637L;  ///< Offset: 0x23E8 - Graphic MMU LUT entry 637 low
        volatile uint32_t LUT638L;  ///< Offset: 0x23F0 - Graphic MMU LUT entry 638 low
        volatile uint32_t LUT639L;  ///< Offset: 0x23F8 - Graphic MMU LUT entry 639 low
        volatile uint32_t LUT640L;  ///< Offset: 0x2400 - Graphic MMU LUT entry 640 low
        volatile uint32_t LUT641L;  ///< Offset: 0x2408 - Graphic MMU LUT entry 641 low
        volatile uint32_t LUT642L;  ///< Offset: 0x2410 - Graphic MMU LUT entry 642 low
        volatile uint32_t LUT643L;  ///< Offset: 0x2418 - Graphic MMU LUT entry 643 low
        volatile uint32_t LUT644L;  ///< Offset: 0x2420 - Graphic MMU LUT entry 644 low
        volatile uint32_t LUT645L;  ///< Offset: 0x2428 - Graphic MMU LUT entry 645 low
        volatile uint32_t LUT646L;  ///< Offset: 0x2430 - Graphic MMU LUT entry 646 low
        volatile uint32_t LUT647L;  ///< Offset: 0x2438 - Graphic MMU LUT entry 647 low
        volatile uint32_t LUT648L;  ///< Offset: 0x2440 - Graphic MMU LUT entry 648 low
        volatile uint32_t LUT649L;  ///< Offset: 0x2448 - Graphic MMU LUT entry 649 low
        volatile uint32_t LUT650L;  ///< Offset: 0x2450 - Graphic MMU LUT entry 650 low
        volatile uint32_t LUT651L;  ///< Offset: 0x2458 - Graphic MMU LUT entry 651 low
        volatile uint32_t LUT652L;  ///< Offset: 0x2460 - Graphic MMU LUT entry 652 low
        volatile uint32_t LUT653L;  ///< Offset: 0x2468 - Graphic MMU LUT entry 653 low
        volatile uint32_t LUT654L;  ///< Offset: 0x2470 - Graphic MMU LUT entry 654 low
        volatile uint32_t LUT655L;  ///< Offset: 0x2478 - Graphic MMU LUT entry 655 low
        volatile uint32_t LUT656L;  ///< Offset: 0x2480 - Graphic MMU LUT entry 656 low
        volatile uint32_t LUT657L;  ///< Offset: 0x2488 - Graphic MMU LUT entry 657 low
        volatile uint32_t LUT658L;  ///< Offset: 0x2490 - Graphic MMU LUT entry 658 low
        volatile uint32_t LUT659L;  ///< Offset: 0x2498 - Graphic MMU LUT entry 659 low
        volatile uint32_t LUT660L;  ///< Offset: 0x24A0 - Graphic MMU LUT entry 660 low
        volatile uint32_t LUT661L;  ///< Offset: 0x24A8 - Graphic MMU LUT entry 661 low
        volatile uint32_t LUT662L;  ///< Offset: 0x24B0 - Graphic MMU LUT entry 662 low
        volatile uint32_t LUT663L;  ///< Offset: 0x24B8 - Graphic MMU LUT entry 663 low
        volatile uint32_t LUT664L;  ///< Offset: 0x24C0 - Graphic MMU LUT entry 664 low
        volatile uint32_t LUT665L;  ///< Offset: 0x24C8 - Graphic MMU LUT entry 665 low
        volatile uint32_t LUT666L;  ///< Offset: 0x24D0 - Graphic MMU LUT entry 666 low
        volatile uint32_t LUT667L;  ///< Offset: 0x24D8 - Graphic MMU LUT entry 667 low
        volatile uint32_t LUT668L;  ///< Offset: 0x24E0 - Graphic MMU LUT entry 668 low
        volatile uint32_t LUT669L;  ///< Offset: 0x24E8 - Graphic MMU LUT entry 669 low
        volatile uint32_t LUT670L;  ///< Offset: 0x24F0 - Graphic MMU LUT entry 670 low
        volatile uint32_t LUT671L;  ///< Offset: 0x24F8 - Graphic MMU LUT entry 671 low
        volatile uint32_t LUT672L;  ///< Offset: 0x2500 - Graphic MMU LUT entry 672 low
        volatile uint32_t LUT673L;  ///< Offset: 0x2508 - Graphic MMU LUT entry 673 low
        volatile uint32_t LUT674L;  ///< Offset: 0x2510 - Graphic MMU LUT entry 674 low
        volatile uint32_t LUT675L;  ///< Offset: 0x2518 - Graphic MMU LUT entry 675 low
        volatile uint32_t LUT676L;  ///< Offset: 0x2520 - Graphic MMU LUT entry 676 low
        volatile uint32_t LUT677L;  ///< Offset: 0x2528 - Graphic MMU LUT entry 677 low
        volatile uint32_t LUT678L;  ///< Offset: 0x2530 - Graphic MMU LUT entry 678 low
        volatile uint32_t LUT679L;  ///< Offset: 0x2538 - Graphic MMU LUT entry 679 low
        volatile uint32_t LUT680L;  ///< Offset: 0x2540 - Graphic MMU LUT entry 680 low
        volatile uint32_t LUT681L;  ///< Offset: 0x2548 - Graphic MMU LUT entry 681 low
        volatile uint32_t LUT682L;  ///< Offset: 0x2550 - Graphic MMU LUT entry 682 low
        volatile uint32_t LUT683L;  ///< Offset: 0x2558 - Graphic MMU LUT entry 683 low
        volatile uint32_t LUT684L;  ///< Offset: 0x2560 - Graphic MMU LUT entry 684 low
        volatile uint32_t LUT685L;  ///< Offset: 0x2568 - Graphic MMU LUT entry 685 low
        volatile uint32_t LUT686L;  ///< Offset: 0x2570 - Graphic MMU LUT entry 686 low
        volatile uint32_t LUT687L;  ///< Offset: 0x2578 - Graphic MMU LUT entry 687 low
        volatile uint32_t LUT688L;  ///< Offset: 0x2580 - Graphic MMU LUT entry 688 low
        volatile uint32_t LUT689L;  ///< Offset: 0x2588 - Graphic MMU LUT entry 689 low
        volatile uint32_t LUT690L;  ///< Offset: 0x2590 - Graphic MMU LUT entry 690 low
        volatile uint32_t LUT691L;  ///< Offset: 0x2598 - Graphic MMU LUT entry 691 low
        volatile uint32_t LUT692L;  ///< Offset: 0x25A0 - Graphic MMU LUT entry 692 low
        volatile uint32_t LUT693L;  ///< Offset: 0x25A8 - Graphic MMU LUT entry 693 low
        volatile uint32_t LUT694L;  ///< Offset: 0x25B0 - Graphic MMU LUT entry 694 low
        volatile uint32_t LUT695L;  ///< Offset: 0x25B8 - Graphic MMU LUT entry 695 low
        volatile uint32_t LUT696L;  ///< Offset: 0x25C0 - Graphic MMU LUT entry 696 low
        volatile uint32_t LUT697L;  ///< Offset: 0x25C8 - Graphic MMU LUT entry 697 low
        volatile uint32_t LUT698L;  ///< Offset: 0x25D0 - Graphic MMU LUT entry 698 low
        volatile uint32_t LUT699L;  ///< Offset: 0x25D8 - Graphic MMU LUT entry 699 low
        volatile uint32_t LUT700L;  ///< Offset: 0x25E0 - Graphic MMU LUT entry 700 low
        volatile uint32_t LUT701L;  ///< Offset: 0x25E8 - Graphic MMU LUT entry 701 low
        volatile uint32_t LUT702L;  ///< Offset: 0x25F0 - Graphic MMU LUT entry 702 low
        volatile uint32_t LUT703L;  ///< Offset: 0x25F8 - Graphic MMU LUT entry 703 low
        volatile uint32_t LUT704L;  ///< Offset: 0x2600 - Graphic MMU LUT entry 704 low
        volatile uint32_t LUT705L;  ///< Offset: 0x2608 - Graphic MMU LUT entry 705 low
        volatile uint32_t LUT706L;  ///< Offset: 0x2610 - Graphic MMU LUT entry 706 low
        volatile uint32_t LUT707L;  ///< Offset: 0x2618 - Graphic MMU LUT entry 707 low
        volatile uint32_t LUT708L;  ///< Offset: 0x2620 - Graphic MMU LUT entry 708 low
        volatile uint32_t LUT709L;  ///< Offset: 0x2628 - Graphic MMU LUT entry 709 low
        volatile uint32_t LUT710L;  ///< Offset: 0x2630 - Graphic MMU LUT entry 710 low
        volatile uint32_t LUT711L;  ///< Offset: 0x2638 - Graphic MMU LUT entry 711 low
        volatile uint32_t LUT712L;  ///< Offset: 0x2640 - Graphic MMU LUT entry 712 low
        volatile uint32_t LUT713L;  ///< Offset: 0x2648 - Graphic MMU LUT entry 713 low
        volatile uint32_t LUT714L;  ///< Offset: 0x2650 - Graphic MMU LUT entry 714 low
        volatile uint32_t LUT715L;  ///< Offset: 0x2658 - Graphic MMU LUT entry 715 low
        volatile uint32_t LUT716L;  ///< Offset: 0x2660 - Graphic MMU LUT entry 716 low
        volatile uint32_t LUT717L;  ///< Offset: 0x2668 - Graphic MMU LUT entry 717 low
        volatile uint32_t LUT718L;  ///< Offset: 0x2670 - Graphic MMU LUT entry 718 low
        volatile uint32_t LUT719L;  ///< Offset: 0x2678 - Graphic MMU LUT entry 719 low
        volatile uint32_t LUT720L;  ///< Offset: 0x2680 - Graphic MMU LUT entry 720 low
        volatile uint32_t LUT721L;  ///< Offset: 0x2688 - Graphic MMU LUT entry 721 low
        volatile uint32_t LUT722L;  ///< Offset: 0x2690 - Graphic MMU LUT entry 722 low
        volatile uint32_t LUT723L;  ///< Offset: 0x2698 - Graphic MMU LUT entry 723 low
        volatile uint32_t LUT724L;  ///< Offset: 0x26A0 - Graphic MMU LUT entry 724 low
        volatile uint32_t LUT725L;  ///< Offset: 0x26A8 - Graphic MMU LUT entry 725 low
        volatile uint32_t LUT726L;  ///< Offset: 0x26B0 - Graphic MMU LUT entry 726 low
        volatile uint32_t LUT727L;  ///< Offset: 0x26B8 - Graphic MMU LUT entry 727 low
        volatile uint32_t LUT728L;  ///< Offset: 0x26C0 - Graphic MMU LUT entry 728 low
        volatile uint32_t LUT729L;  ///< Offset: 0x26C8 - Graphic MMU LUT entry 729 low
        volatile uint32_t LUT730L;  ///< Offset: 0x26D0 - Graphic MMU LUT entry 730 low
        volatile uint32_t LUT731L;  ///< Offset: 0x26D8 - Graphic MMU LUT entry 731 low
        volatile uint32_t LUT732L;  ///< Offset: 0x26E0 - Graphic MMU LUT entry 732 low
        volatile uint32_t LUT733L;  ///< Offset: 0x26E8 - Graphic MMU LUT entry 733 low
        volatile uint32_t LUT734L;  ///< Offset: 0x26F0 - Graphic MMU LUT entry 734 low
        volatile uint32_t LUT735L;  ///< Offset: 0x26F8 - Graphic MMU LUT entry 735 low
        volatile uint32_t LUT736L;  ///< Offset: 0x2700 - Graphic MMU LUT entry 736 low
        volatile uint32_t LUT737L;  ///< Offset: 0x2708 - Graphic MMU LUT entry 737 low
        volatile uint32_t LUT738L;  ///< Offset: 0x2710 - Graphic MMU LUT entry 738 low
        volatile uint32_t LUT739L;  ///< Offset: 0x2718 - Graphic MMU LUT entry 739 low
        volatile uint32_t LUT740L;  ///< Offset: 0x2720 - Graphic MMU LUT entry 740 low
        volatile uint32_t LUT741L;  ///< Offset: 0x2728 - Graphic MMU LUT entry 741 low
        volatile uint32_t LUT742L;  ///< Offset: 0x2730 - Graphic MMU LUT entry 742 low
        volatile uint32_t LUT743L;  ///< Offset: 0x2738 - Graphic MMU LUT entry 743 low
        volatile uint32_t LUT744L;  ///< Offset: 0x2740 - Graphic MMU LUT entry 744 low
        volatile uint32_t LUT745L;  ///< Offset: 0x2748 - Graphic MMU LUT entry 745 low
        volatile uint32_t LUT746L;  ///< Offset: 0x2750 - Graphic MMU LUT entry 746 low
        volatile uint32_t LUT747L;  ///< Offset: 0x2758 - Graphic MMU LUT entry 747 low
        volatile uint32_t LUT748L;  ///< Offset: 0x2760 - Graphic MMU LUT entry 748 low
        volatile uint32_t LUT749L;  ///< Offset: 0x2768 - Graphic MMU LUT entry 749 low
        volatile uint32_t LUT750L;  ///< Offset: 0x2770 - Graphic MMU LUT entry 750 low
        volatile uint32_t LUT751L;  ///< Offset: 0x2778 - Graphic MMU LUT entry 751 low
        volatile uint32_t LUT752L;  ///< Offset: 0x2780 - Graphic MMU LUT entry 752 low
        volatile uint32_t LUT753L;  ///< Offset: 0x2788 - Graphic MMU LUT entry 753 low
        volatile uint32_t LUT754L;  ///< Offset: 0x2790 - Graphic MMU LUT entry 754 low
        volatile uint32_t LUT755L;  ///< Offset: 0x2798 - Graphic MMU LUT entry 755 low
        volatile uint32_t LUT756L;  ///< Offset: 0x27A0 - Graphic MMU LUT entry 756 low
        volatile uint32_t LUT757L;  ///< Offset: 0x27A8 - Graphic MMU LUT entry 757 low
        volatile uint32_t LUT758L;  ///< Offset: 0x27B0 - Graphic MMU LUT entry 758 low
        volatile uint32_t LUT759L;  ///< Offset: 0x27B8 - Graphic MMU LUT entry 759 low
        volatile uint32_t LUT760L;  ///< Offset: 0x27C0 - Graphic MMU LUT entry 760 low
        volatile uint32_t LUT761L;  ///< Offset: 0x27C8 - Graphic MMU LUT entry 761 low
        volatile uint32_t LUT762L;  ///< Offset: 0x27D0 - Graphic MMU LUT entry 762 low
        volatile uint32_t LUT763L;  ///< Offset: 0x27D8 - Graphic MMU LUT entry 763 low
        volatile uint32_t LUT764L;  ///< Offset: 0x27E0 - Graphic MMU LUT entry 764 low
        volatile uint32_t LUT765L;  ///< Offset: 0x27E8 - Graphic MMU LUT entry 765 low
        volatile uint32_t LUT766L;  ///< Offset: 0x27F0 - Graphic MMU LUT entry 766 low
        volatile uint32_t LUT767L;  ///< Offset: 0x27F8 - Graphic MMU LUT entry 767 low
        volatile uint32_t LUT768L;  ///< Offset: 0x2800 - Graphic MMU LUT entry 768 low
        volatile uint32_t LUT769L;  ///< Offset: 0x2808 - Graphic MMU LUT entry 769 low
        volatile uint32_t LUT770L;  ///< Offset: 0x2810 - Graphic MMU LUT entry 770 low
        volatile uint32_t LUT771L;  ///< Offset: 0x2818 - Graphic MMU LUT entry 771 low
        volatile uint32_t LUT772L;  ///< Offset: 0x2820 - Graphic MMU LUT entry 772 low
        volatile uint32_t LUT773L;  ///< Offset: 0x2828 - Graphic MMU LUT entry 773 low
        volatile uint32_t LUT774L;  ///< Offset: 0x2830 - Graphic MMU LUT entry 774 low
        volatile uint32_t LUT775L;  ///< Offset: 0x2838 - Graphic MMU LUT entry 775 low
        volatile uint32_t LUT776L;  ///< Offset: 0x2840 - Graphic MMU LUT entry 776 low
        volatile uint32_t LUT777L;  ///< Offset: 0x2848 - Graphic MMU LUT entry 777 low
        volatile uint32_t LUT778L;  ///< Offset: 0x2850 - Graphic MMU LUT entry 778 low
        volatile uint32_t LUT779L;  ///< Offset: 0x2858 - Graphic MMU LUT entry 779 low
        volatile uint32_t LUT780L;  ///< Offset: 0x2860 - Graphic MMU LUT entry 780 low
        volatile uint32_t LUT781L;  ///< Offset: 0x2868 - Graphic MMU LUT entry 781 low
        volatile uint32_t LUT782L;  ///< Offset: 0x2870 - Graphic MMU LUT entry 782 low
        volatile uint32_t LUT783L;  ///< Offset: 0x2878 - Graphic MMU LUT entry 783 low
        volatile uint32_t LUT784L;  ///< Offset: 0x2880 - Graphic MMU LUT entry 784 low
        volatile uint32_t LUT785L;  ///< Offset: 0x2888 - Graphic MMU LUT entry 785 low
        volatile uint32_t LUT786L;  ///< Offset: 0x2890 - Graphic MMU LUT entry 786 low
        volatile uint32_t LUT787L;  ///< Offset: 0x2898 - Graphic MMU LUT entry 787 low
        volatile uint32_t LUT788L;  ///< Offset: 0x28A0 - Graphic MMU LUT entry 788 low
        volatile uint32_t LUT789L;  ///< Offset: 0x28A8 - Graphic MMU LUT entry 789 low
        volatile uint32_t LUT790L;  ///< Offset: 0x28B0 - Graphic MMU LUT entry 790 low
        volatile uint32_t LUT791L;  ///< Offset: 0x28B8 - Graphic MMU LUT entry 791 low
        volatile uint32_t LUT792L;  ///< Offset: 0x28C0 - Graphic MMU LUT entry 792 low
        volatile uint32_t LUT793L;  ///< Offset: 0x28C8 - Graphic MMU LUT entry 793 low
        volatile uint32_t LUT794L;  ///< Offset: 0x28D0 - Graphic MMU LUT entry 794 low
        volatile uint32_t LUT795L;  ///< Offset: 0x28D8 - Graphic MMU LUT entry 795 low
        volatile uint32_t LUT796L;  ///< Offset: 0x28E0 - Graphic MMU LUT entry 796 low
        volatile uint32_t LUT797L;  ///< Offset: 0x28E8 - Graphic MMU LUT entry 797 low
        volatile uint32_t LUT798L;  ///< Offset: 0x28F0 - Graphic MMU LUT entry 798 low
        volatile uint32_t LUT799L;  ///< Offset: 0x28F8 - Graphic MMU LUT entry 799 low
        volatile uint32_t LUT800L;  ///< Offset: 0x2900 - Graphic MMU LUT entry 800 low
        volatile uint32_t LUT801L;  ///< Offset: 0x2908 - Graphic MMU LUT entry 801 low
        volatile uint32_t LUT802L;  ///< Offset: 0x2910 - Graphic MMU LUT entry 802 low
        volatile uint32_t LUT803L;  ///< Offset: 0x2918 - Graphic MMU LUT entry 803 low
        volatile uint32_t LUT804L;  ///< Offset: 0x2920 - Graphic MMU LUT entry 804 low
        volatile uint32_t LUT805L;  ///< Offset: 0x2928 - Graphic MMU LUT entry 805 low
        volatile uint32_t LUT806L;  ///< Offset: 0x2930 - Graphic MMU LUT entry 806 low
        volatile uint32_t LUT807L;  ///< Offset: 0x2938 - Graphic MMU LUT entry 807 low
        volatile uint32_t LUT808L;  ///< Offset: 0x2940 - Graphic MMU LUT entry 808 low
        volatile uint32_t LUT809L;  ///< Offset: 0x2948 - Graphic MMU LUT entry 809 low
        volatile uint32_t LUT810L;  ///< Offset: 0x2950 - Graphic MMU LUT entry 810 low
        volatile uint32_t LUT811L;  ///< Offset: 0x2958 - Graphic MMU LUT entry 811 low
        volatile uint32_t LUT812L;  ///< Offset: 0x2960 - Graphic MMU LUT entry 812 low
        volatile uint32_t LUT813L;  ///< Offset: 0x2968 - Graphic MMU LUT entry 813 low
        volatile uint32_t LUT814L;  ///< Offset: 0x2970 - Graphic MMU LUT entry 814 low
        volatile uint32_t LUT815L;  ///< Offset: 0x2978 - Graphic MMU LUT entry 815 low
        volatile uint32_t LUT816L;  ///< Offset: 0x2980 - Graphic MMU LUT entry 816 low
        volatile uint32_t LUT817L;  ///< Offset: 0x2988 - Graphic MMU LUT entry 817 low
        volatile uint32_t LUT818L;  ///< Offset: 0x2990 - Graphic MMU LUT entry 818 low
        volatile uint32_t LUT819L;  ///< Offset: 0x2998 - Graphic MMU LUT entry 819 low
        volatile uint32_t LUT820L;  ///< Offset: 0x29A0 - Graphic MMU LUT entry 820 low
        volatile uint32_t LUT821L;  ///< Offset: 0x29A8 - Graphic MMU LUT entry 821 low
        volatile uint32_t LUT822L;  ///< Offset: 0x29B0 - Graphic MMU LUT entry 822 low
        volatile uint32_t LUT823L;  ///< Offset: 0x29B8 - Graphic MMU LUT entry 823 low
        volatile uint32_t LUT824L;  ///< Offset: 0x29C0 - Graphic MMU LUT entry 824 low
        volatile uint32_t LUT825L;  ///< Offset: 0x29C8 - Graphic MMU LUT entry 825 low
        volatile uint32_t LUT826L;  ///< Offset: 0x29D0 - Graphic MMU LUT entry 826 low
        volatile uint32_t LUT827L;  ///< Offset: 0x29D8 - Graphic MMU LUT entry 827 low
        volatile uint32_t LUT828L;  ///< Offset: 0x29E0 - Graphic MMU LUT entry 828 low
        volatile uint32_t LUT829L;  ///< Offset: 0x29E8 - Graphic MMU LUT entry 829 low
        volatile uint32_t LUT830L;  ///< Offset: 0x29F0 - Graphic MMU LUT entry 830 low
        volatile uint32_t LUT831L;  ///< Offset: 0x29F8 - Graphic MMU LUT entry 831 low
        volatile uint32_t LUT832L;  ///< Offset: 0x2A00 - Graphic MMU LUT entry 832 low
        volatile uint32_t LUT833L;  ///< Offset: 0x2A08 - Graphic MMU LUT entry 833 low
        volatile uint32_t LUT834L;  ///< Offset: 0x2A10 - Graphic MMU LUT entry 834 low
        volatile uint32_t LUT835L;  ///< Offset: 0x2A18 - Graphic MMU LUT entry 835 low
        volatile uint32_t LUT836L;  ///< Offset: 0x2A20 - Graphic MMU LUT entry 836 low
        volatile uint32_t LUT837L;  ///< Offset: 0x2A28 - Graphic MMU LUT entry 837 low
        volatile uint32_t LUT838L;  ///< Offset: 0x2A30 - Graphic MMU LUT entry 838 low
        volatile uint32_t LUT839L;  ///< Offset: 0x2A38 - Graphic MMU LUT entry 839 low
        volatile uint32_t LUT840L;  ///< Offset: 0x2A40 - Graphic MMU LUT entry 840 low
        volatile uint32_t LUT841L;  ///< Offset: 0x2A48 - Graphic MMU LUT entry 841 low
        volatile uint32_t LUT842L;  ///< Offset: 0x2A50 - Graphic MMU LUT entry 842 low
        volatile uint32_t LUT843L;  ///< Offset: 0x2A58 - Graphic MMU LUT entry 843 low
        volatile uint32_t LUT844L;  ///< Offset: 0x2A60 - Graphic MMU LUT entry 844 low
        volatile uint32_t LUT845L;  ///< Offset: 0x2A68 - Graphic MMU LUT entry 845 low
        volatile uint32_t LUT846L;  ///< Offset: 0x2A70 - Graphic MMU LUT entry 846 low
        volatile uint32_t LUT847L;  ///< Offset: 0x2A78 - Graphic MMU LUT entry 847 low
        volatile uint32_t LUT848L;  ///< Offset: 0x2A80 - Graphic MMU LUT entry 848 low
        volatile uint32_t LUT849L;  ///< Offset: 0x2A88 - Graphic MMU LUT entry 849 low
        volatile uint32_t LUT850L;  ///< Offset: 0x2A90 - Graphic MMU LUT entry 850 low
        volatile uint32_t LUT851L;  ///< Offset: 0x2A98 - Graphic MMU LUT entry 851 low
        volatile uint32_t LUT852L;  ///< Offset: 0x2AA0 - Graphic MMU LUT entry 852 low
        volatile uint32_t LUT853L;  ///< Offset: 0x2AA8 - Graphic MMU LUT entry 853 low
        volatile uint32_t LUT854L;  ///< Offset: 0x2AB0 - Graphic MMU LUT entry 854 low
        volatile uint32_t LUT855L;  ///< Offset: 0x2AB8 - Graphic MMU LUT entry 855 low
        volatile uint32_t LUT856L;  ///< Offset: 0x2AC0 - Graphic MMU LUT entry 856 low
        volatile uint32_t LUT857L;  ///< Offset: 0x2AC8 - Graphic MMU LUT entry 857 low
        volatile uint32_t LUT858L;  ///< Offset: 0x2AD0 - Graphic MMU LUT entry 858 low
        volatile uint32_t LUT859L;  ///< Offset: 0x2AD8 - Graphic MMU LUT entry 859 low
        volatile uint32_t LUT860L;  ///< Offset: 0x2AE0 - Graphic MMU LUT entry 860 low
        volatile uint32_t LUT861L;  ///< Offset: 0x2AE8 - Graphic MMU LUT entry 861 low
        volatile uint32_t LUT862L;  ///< Offset: 0x2AF0 - Graphic MMU LUT entry 862 low
        volatile uint32_t LUT863L;  ///< Offset: 0x2AF8 - Graphic MMU LUT entry 863 low
        volatile uint32_t LUT864L;  ///< Offset: 0x2B00 - Graphic MMU LUT entry 864 low
        volatile uint32_t LUT865L;  ///< Offset: 0x2B08 - Graphic MMU LUT entry 865 low
        volatile uint32_t LUT866L;  ///< Offset: 0x2B10 - Graphic MMU LUT entry 866 low
        volatile uint32_t LUT867L;  ///< Offset: 0x2B18 - Graphic MMU LUT entry 867 low
        volatile uint32_t LUT868L;  ///< Offset: 0x2B20 - Graphic MMU LUT entry 868 low
        volatile uint32_t LUT869L;  ///< Offset: 0x2B28 - Graphic MMU LUT entry 869 low
        volatile uint32_t LUT870L;  ///< Offset: 0x2B30 - Graphic MMU LUT entry 870 low
        volatile uint32_t LUT871L;  ///< Offset: 0x2B38 - Graphic MMU LUT entry 871 low
        volatile uint32_t LUT872L;  ///< Offset: 0x2B40 - Graphic MMU LUT entry 872 low
        volatile uint32_t LUT873L;  ///< Offset: 0x2B48 - Graphic MMU LUT entry 873 low
        volatile uint32_t LUT874L;  ///< Offset: 0x2B50 - Graphic MMU LUT entry 874 low
        volatile uint32_t LUT875L;  ///< Offset: 0x2B58 - Graphic MMU LUT entry 875 low
        volatile uint32_t LUT876L;  ///< Offset: 0x2B60 - Graphic MMU LUT entry 876 low
        volatile uint32_t LUT877L;  ///< Offset: 0x2B68 - Graphic MMU LUT entry 877 low
        volatile uint32_t LUT878L;  ///< Offset: 0x2B70 - Graphic MMU LUT entry 878 low
        volatile uint32_t LUT879L;  ///< Offset: 0x2B78 - Graphic MMU LUT entry 879 low
        volatile uint32_t LUT880L;  ///< Offset: 0x2B80 - Graphic MMU LUT entry 880 low
        volatile uint32_t LUT881L;  ///< Offset: 0x2B88 - Graphic MMU LUT entry 881 low
        volatile uint32_t LUT882L;  ///< Offset: 0x2B90 - Graphic MMU LUT entry 882 low
        volatile uint32_t LUT883L;  ///< Offset: 0x2B98 - Graphic MMU LUT entry 883 low
        volatile uint32_t LUT884L;  ///< Offset: 0x2BA0 - Graphic MMU LUT entry 884 low
        volatile uint32_t LUT885L;  ///< Offset: 0x2BA8 - Graphic MMU LUT entry 885 low
        volatile uint32_t LUT886L;  ///< Offset: 0x2BB0 - Graphic MMU LUT entry 886 low
        volatile uint32_t LUT887L;  ///< Offset: 0x2BB8 - Graphic MMU LUT entry 887 low
        volatile uint32_t LUT888L;  ///< Offset: 0x2BC0 - Graphic MMU LUT entry 888 low
        volatile uint32_t LUT889L;  ///< Offset: 0x2BC8 - Graphic MMU LUT entry 889 low
        volatile uint32_t LUT890L;  ///< Offset: 0x2BD0 - Graphic MMU LUT entry 890 low
        volatile uint32_t LUT891L;  ///< Offset: 0x2BD8 - Graphic MMU LUT entry 891 low
        volatile uint32_t LUT892L;  ///< Offset: 0x2BE0 - Graphic MMU LUT entry 892 low
        volatile uint32_t LUT893L;  ///< Offset: 0x2BE8 - Graphic MMU LUT entry 893 low
        volatile uint32_t LUT894L;  ///< Offset: 0x2BF0 - Graphic MMU LUT entry 894 low
        volatile uint32_t LUT895L;  ///< Offset: 0x2BF8 - Graphic MMU LUT entry 895 low
        volatile uint32_t LUT896L;  ///< Offset: 0x2C00 - Graphic MMU LUT entry 896 low
        volatile uint32_t LUT897L;  ///< Offset: 0x2C08 - Graphic MMU LUT entry 897 low
        volatile uint32_t LUT898L;  ///< Offset: 0x2C10 - Graphic MMU LUT entry 898 low
        volatile uint32_t LUT899L;  ///< Offset: 0x2C18 - Graphic MMU LUT entry 899 low
        volatile uint32_t LUT900L;  ///< Offset: 0x2C20 - Graphic MMU LUT entry 900 low
        volatile uint32_t LUT901L;  ///< Offset: 0x2C28 - Graphic MMU LUT entry 901 low
        volatile uint32_t LUT902L;  ///< Offset: 0x2C30 - Graphic MMU LUT entry 902 low
        volatile uint32_t LUT903L;  ///< Offset: 0x2C38 - Graphic MMU LUT entry 903 low
        volatile uint32_t LUT904L;  ///< Offset: 0x2C40 - Graphic MMU LUT entry 904 low
        volatile uint32_t LUT905L;  ///< Offset: 0x2C48 - Graphic MMU LUT entry 905 low
        volatile uint32_t LUT906L;  ///< Offset: 0x2C50 - Graphic MMU LUT entry 906 low
        volatile uint32_t LUT907L;  ///< Offset: 0x2C58 - Graphic MMU LUT entry 907 low
        volatile uint32_t LUT908L;  ///< Offset: 0x2C60 - Graphic MMU LUT entry 908 low
        volatile uint32_t LUT909L;  ///< Offset: 0x2C68 - Graphic MMU LUT entry 909 low
        volatile uint32_t LUT910L;  ///< Offset: 0x2C70 - Graphic MMU LUT entry 910 low
        volatile uint32_t LUT911L;  ///< Offset: 0x2C78 - Graphic MMU LUT entry 911 low
        volatile uint32_t LUT912L;  ///< Offset: 0x2C80 - Graphic MMU LUT entry 912 low
        volatile uint32_t LUT913L;  ///< Offset: 0x2C88 - Graphic MMU LUT entry 913 low
        volatile uint32_t LUT914L;  ///< Offset: 0x2C90 - Graphic MMU LUT entry 914 low
        volatile uint32_t LUT915L;  ///< Offset: 0x2C98 - Graphic MMU LUT entry 915 low
        volatile uint32_t LUT916L;  ///< Offset: 0x2CA0 - Graphic MMU LUT entry 916 low
        volatile uint32_t LUT917L;  ///< Offset: 0x2CA8 - Graphic MMU LUT entry 917 low
        volatile uint32_t LUT918L;  ///< Offset: 0x2CB0 - Graphic MMU LUT entry 918 low
        volatile uint32_t LUT919L;  ///< Offset: 0x2CB8 - Graphic MMU LUT entry 919 low
        volatile uint32_t LUT920L;  ///< Offset: 0x2CC0 - Graphic MMU LUT entry 920 low
        volatile uint32_t LUT921L;  ///< Offset: 0x2CC8 - Graphic MMU LUT entry 921 low
        volatile uint32_t LUT922L;  ///< Offset: 0x2CD0 - Graphic MMU LUT entry 922 low
        volatile uint32_t LUT923L;  ///< Offset: 0x2CD8 - Graphic MMU LUT entry 923 low
        volatile uint32_t LUT924L;  ///< Offset: 0x2CE0 - Graphic MMU LUT entry 924 low
        volatile uint32_t LUT925L;  ///< Offset: 0x2CE8 - Graphic MMU LUT entry 925 low
        volatile uint32_t LUT926L;  ///< Offset: 0x2CF0 - Graphic MMU LUT entry 926 low
        volatile uint32_t LUT927L;  ///< Offset: 0x2CF8 - Graphic MMU LUT entry 927 low
        volatile uint32_t LUT928L;  ///< Offset: 0x2D00 - Graphic MMU LUT entry 928 low
        volatile uint32_t LUT929L;  ///< Offset: 0x2D08 - Graphic MMU LUT entry 929 low
        volatile uint32_t LUT930L;  ///< Offset: 0x2D10 - Graphic MMU LUT entry 930 low
        volatile uint32_t LUT931L;  ///< Offset: 0x2D18 - Graphic MMU LUT entry 931 low
        volatile uint32_t LUT932L;  ///< Offset: 0x2D20 - Graphic MMU LUT entry 932 low
        volatile uint32_t LUT933L;  ///< Offset: 0x2D28 - Graphic MMU LUT entry 933 low
        volatile uint32_t LUT934L;  ///< Offset: 0x2D30 - Graphic MMU LUT entry 934 low
        volatile uint32_t LUT935L;  ///< Offset: 0x2D38 - Graphic MMU LUT entry 935 low
        volatile uint32_t LUT936L;  ///< Offset: 0x2D40 - Graphic MMU LUT entry 936 low
        volatile uint32_t LUT937L;  ///< Offset: 0x2D48 - Graphic MMU LUT entry 937 low
        volatile uint32_t LUT938L;  ///< Offset: 0x2D50 - Graphic MMU LUT entry 938 low
        volatile uint32_t LUT939L;  ///< Offset: 0x2D58 - Graphic MMU LUT entry 939 low
        volatile uint32_t LUT940L;  ///< Offset: 0x2D60 - Graphic MMU LUT entry 940 low
        volatile uint32_t LUT941L;  ///< Offset: 0x2D68 - Graphic MMU LUT entry 941 low
        volatile uint32_t LUT942L;  ///< Offset: 0x2D70 - Graphic MMU LUT entry 942 low
        volatile uint32_t LUT943L;  ///< Offset: 0x2D78 - Graphic MMU LUT entry 943 low
        volatile uint32_t LUT944L;  ///< Offset: 0x2D80 - Graphic MMU LUT entry 944 low
        volatile uint32_t LUT945L;  ///< Offset: 0x2D88 - Graphic MMU LUT entry 945 low
        volatile uint32_t LUT946L;  ///< Offset: 0x2D90 - Graphic MMU LUT entry 946 low
        volatile uint32_t LUT947L;  ///< Offset: 0x2D98 - Graphic MMU LUT entry 947 low
        volatile uint32_t LUT948L;  ///< Offset: 0x2DA0 - Graphic MMU LUT entry 948 low
        volatile uint32_t LUT949L;  ///< Offset: 0x2DA8 - Graphic MMU LUT entry 949 low
        volatile uint32_t LUT950L;  ///< Offset: 0x2DB0 - Graphic MMU LUT entry 950 low
        volatile uint32_t LUT951L;  ///< Offset: 0x2DB8 - Graphic MMU LUT entry 951 low
        volatile uint32_t LUT952L;  ///< Offset: 0x2DC0 - Graphic MMU LUT entry 952 low
        volatile uint32_t LUT953L;  ///< Offset: 0x2DC8 - Graphic MMU LUT entry 953 low
        volatile uint32_t LUT954L;  ///< Offset: 0x2DD0 - Graphic MMU LUT entry 954 low
        volatile uint32_t LUT955L;  ///< Offset: 0x2DD8 - Graphic MMU LUT entry 955 low
        volatile uint32_t LUT956L;  ///< Offset: 0x2DE0 - Graphic MMU LUT entry 956 low
        volatile uint32_t LUT957L;  ///< Offset: 0x2DE8 - Graphic MMU LUT entry 957 low
        volatile uint32_t LUT958L;  ///< Offset: 0x2DF0 - Graphic MMU LUT entry 958 low
        volatile uint32_t LUT959L;  ///< Offset: 0x2DF8 - Graphic MMU LUT entry 959 low
        volatile uint32_t LUT960L;  ///< Offset: 0x2E00 - Graphic MMU LUT entry 960 low
        volatile uint32_t LUT961L;  ///< Offset: 0x2E08 - Graphic MMU LUT entry 961 low
        volatile uint32_t LUT962L;  ///< Offset: 0x2E10 - Graphic MMU LUT entry 962 low
        volatile uint32_t LUT963L;  ///< Offset: 0x2E18 - Graphic MMU LUT entry 963 low
        volatile uint32_t LUT964L;  ///< Offset: 0x2E20 - Graphic MMU LUT entry 964 low
        volatile uint32_t LUT965L;  ///< Offset: 0x2E28 - Graphic MMU LUT entry 965 low
        volatile uint32_t LUT966L;  ///< Offset: 0x2E30 - Graphic MMU LUT entry 966 low
        volatile uint32_t LUT967L;  ///< Offset: 0x2E38 - Graphic MMU LUT entry 967 low
        volatile uint32_t LUT968L;  ///< Offset: 0x2E40 - Graphic MMU LUT entry 968 low
        volatile uint32_t LUT969L;  ///< Offset: 0x2E48 - Graphic MMU LUT entry 969 low
        volatile uint32_t LUT970L;  ///< Offset: 0x2E50 - Graphic MMU LUT entry 970 low
        volatile uint32_t LUT971L;  ///< Offset: 0x2E58 - Graphic MMU LUT entry 971 low
        volatile uint32_t LUT972L;  ///< Offset: 0x2E60 - Graphic MMU LUT entry 972 low
        volatile uint32_t LUT973L;  ///< Offset: 0x2E68 - Graphic MMU LUT entry 973 low
        volatile uint32_t LUT974L;  ///< Offset: 0x2E70 - Graphic MMU LUT entry 974 low
        volatile uint32_t LUT975L;  ///< Offset: 0x2E78 - Graphic MMU LUT entry 975 low
        volatile uint32_t LUT976L;  ///< Offset: 0x2E80 - Graphic MMU LUT entry 976 low
        volatile uint32_t LUT977L;  ///< Offset: 0x2E88 - Graphic MMU LUT entry 977 low
        volatile uint32_t LUT978L;  ///< Offset: 0x2E90 - Graphic MMU LUT entry 978 low
        volatile uint32_t LUT979L;  ///< Offset: 0x2E98 - Graphic MMU LUT entry 979 low
        volatile uint32_t LUT980L;  ///< Offset: 0x2EA0 - Graphic MMU LUT entry 980 low
        volatile uint32_t LUT981L;  ///< Offset: 0x2EA8 - Graphic MMU LUT entry 981 low
        volatile uint32_t LUT982L;  ///< Offset: 0x2EB0 - Graphic MMU LUT entry 982 low
        volatile uint32_t LUT983L;  ///< Offset: 0x2EB8 - Graphic MMU LUT entry 983 low
        volatile uint32_t LUT984L;  ///< Offset: 0x2EC0 - Graphic MMU LUT entry 984 low
        volatile uint32_t LUT985L;  ///< Offset: 0x2EC8 - Graphic MMU LUT entry 985 low
        volatile uint32_t LUT986L;  ///< Offset: 0x2ED0 - Graphic MMU LUT entry 986 low
        volatile uint32_t LUT987L;  ///< Offset: 0x2ED8 - Graphic MMU LUT entry 987 low
        volatile uint32_t LUT988L;  ///< Offset: 0x2EE0 - Graphic MMU LUT entry 988 low
        volatile uint32_t LUT989L;  ///< Offset: 0x2EE8 - Graphic MMU LUT entry 989 low
        volatile uint32_t LUT990L;  ///< Offset: 0x2EF0 - Graphic MMU LUT entry 990 low
        volatile uint32_t LUT991L;  ///< Offset: 0x2EF8 - Graphic MMU LUT entry 991 low
        volatile uint32_t LUT992L;  ///< Offset: 0x2F00 - Graphic MMU LUT entry 992 low
        volatile uint32_t LUT993L;  ///< Offset: 0x2F08 - Graphic MMU LUT entry 993 low
        volatile uint32_t LUT994L;  ///< Offset: 0x2F10 - Graphic MMU LUT entry 994 low
        volatile uint32_t LUT995L;  ///< Offset: 0x2F18 - Graphic MMU LUT entry 995 low
        volatile uint32_t LUT996L;  ///< Offset: 0x2F20 - Graphic MMU LUT entry 996 low
        volatile uint32_t LUT997L;  ///< Offset: 0x2F28 - Graphic MMU LUT entry 997 low
        volatile uint32_t LUT998L;  ///< Offset: 0x2F30 - Graphic MMU LUT entry 998 low
        volatile uint32_t LUT999L;  ///< Offset: 0x2F38 - Graphic MMU LUT entry 999 low
        volatile uint32_t LUT1000L;  ///< Offset: 0x2F40 - Graphic MMU LUT entry 1000 low
        volatile uint32_t LUT1001L;  ///< Offset: 0x2F48 - Graphic MMU LUT entry 1001 low
        volatile uint32_t LUT1002L;  ///< Offset: 0x2F50 - Graphic MMU LUT entry 1002 low
        volatile uint32_t LUT1003L;  ///< Offset: 0x2F58 - Graphic MMU LUT entry 1003 low
        volatile uint32_t LUT1004L;  ///< Offset: 0x2F60 - Graphic MMU LUT entry 1004 low
        volatile uint32_t LUT1005L;  ///< Offset: 0x2F68 - Graphic MMU LUT entry 1005 low
        volatile uint32_t LUT1006L;  ///< Offset: 0x2F70 - Graphic MMU LUT entry 1006 low
        volatile uint32_t LUT1007L;  ///< Offset: 0x2F78 - Graphic MMU LUT entry 1007 low
        volatile uint32_t LUT1008L;  ///< Offset: 0x2F80 - Graphic MMU LUT entry 1008 low
        volatile uint32_t LUT1009L;  ///< Offset: 0x2F88 - Graphic MMU LUT entry 1009 low
        volatile uint32_t LUT1010L;  ///< Offset: 0x2F90 - Graphic MMU LUT entry 1010 low
        volatile uint32_t LUT1011L;  ///< Offset: 0x2F98 - Graphic MMU LUT entry 1011 low
        volatile uint32_t LUT1012L;  ///< Offset: 0x2FA0 - Graphic MMU LUT entry 1012 low
        volatile uint32_t LUT1013L;  ///< Offset: 0x2FA8 - Graphic MMU LUT entry 1013 low
        volatile uint32_t LUT1014L;  ///< Offset: 0x2FB0 - Graphic MMU LUT entry 1014 low
        volatile uint32_t LUT1015L;  ///< Offset: 0x2FB8 - Graphic MMU LUT entry 1015 low
        volatile uint32_t LUT1016L;  ///< Offset: 0x2FC0 - Graphic MMU LUT entry 1016 low
        volatile uint32_t LUT1017L;  ///< Offset: 0x2FC8 - Graphic MMU LUT entry 1017 low
        volatile uint32_t LUT1018L;  ///< Offset: 0x2FD0 - Graphic MMU LUT entry 1018 low
        volatile uint32_t LUT1019L;  ///< Offset: 0x2FD8 - Graphic MMU LUT entry 1019 low
        volatile uint32_t LUT1020L;  ///< Offset: 0x2FE0 - Graphic MMU LUT entry 1020 low
        volatile uint32_t LUT1021L;  ///< Offset: 0x2FE8 - Graphic MMU LUT entry 1021 low
        volatile uint32_t LUT1022L;  ///< Offset: 0x2FF0 - Graphic MMU LUT entry 1022 low
        volatile uint32_t LUT1023L;  ///< Offset: 0x2FF8 - Graphic MMU LUT entry 1023 low
        volatile uint32_t LUT0H;  ///< Offset: 0x1004 - Graphic MMU LUT entry 0 high
        volatile uint32_t LUT1H;  ///< Offset: 0x100C - Graphic MMU LUT entry 1 high
        volatile uint32_t LUT2H;  ///< Offset: 0x1014 - Graphic MMU LUT entry 2 high
        volatile uint32_t LUT3H;  ///< Offset: 0x101C - Graphic MMU LUT entry 3 high
        volatile uint32_t LUT4H;  ///< Offset: 0x1024 - Graphic MMU LUT entry 4 high
        volatile uint32_t LUT5H;  ///< Offset: 0x102C - Graphic MMU LUT entry 5 high
        volatile uint32_t LUT6H;  ///< Offset: 0x1034 - Graphic MMU LUT entry 6 high
        volatile uint32_t LUT7H;  ///< Offset: 0x103C - Graphic MMU LUT entry 7 high
        volatile uint32_t LUT8H;  ///< Offset: 0x1044 - Graphic MMU LUT entry 8 high
        volatile uint32_t LUT9H;  ///< Offset: 0x104C - Graphic MMU LUT entry 9 high
        volatile uint32_t LUT10H;  ///< Offset: 0x1054 - Graphic MMU LUT entry 10 high
        volatile uint32_t LUT11H;  ///< Offset: 0x105C - Graphic MMU LUT entry 11 high
        volatile uint32_t LUT12H;  ///< Offset: 0x1064 - Graphic MMU LUT entry 12 high
        volatile uint32_t LUT13H;  ///< Offset: 0x106C - Graphic MMU LUT entry 13 high
        volatile uint32_t LUT14H;  ///< Offset: 0x1074 - Graphic MMU LUT entry 14 high
        volatile uint32_t LUT15H;  ///< Offset: 0x107C - Graphic MMU LUT entry 15 high
        volatile uint32_t LUT16H;  ///< Offset: 0x1084 - Graphic MMU LUT entry 16 high
        volatile uint32_t LUT17H;  ///< Offset: 0x108C - Graphic MMU LUT entry 17 high
        volatile uint32_t LUT18H;  ///< Offset: 0x1094 - Graphic MMU LUT entry 18 high
        volatile uint32_t LUT19H;  ///< Offset: 0x109C - Graphic MMU LUT entry 19 high
        volatile uint32_t LUT20H;  ///< Offset: 0x10A4 - Graphic MMU LUT entry 20 high
        volatile uint32_t LUT21H;  ///< Offset: 0x10AC - Graphic MMU LUT entry 21 high
        volatile uint32_t LUT22H;  ///< Offset: 0x10B4 - Graphic MMU LUT entry 22 high
        volatile uint32_t LUT23H;  ///< Offset: 0x10BC - Graphic MMU LUT entry 23 high
        volatile uint32_t LUT24H;  ///< Offset: 0x10C4 - Graphic MMU LUT entry 24 high
        volatile uint32_t LUT25H;  ///< Offset: 0x10CC - Graphic MMU LUT entry 25 high
        volatile uint32_t LUT26H;  ///< Offset: 0x10D4 - Graphic MMU LUT entry 26 high
        volatile uint32_t LUT27H;  ///< Offset: 0x10DC - Graphic MMU LUT entry 27 high
        volatile uint32_t LUT28H;  ///< Offset: 0x10E4 - Graphic MMU LUT entry 28 high
        volatile uint32_t LUT29H;  ///< Offset: 0x10EC - Graphic MMU LUT entry 29 high
        volatile uint32_t LUT30H;  ///< Offset: 0x10F4 - Graphic MMU LUT entry 30 high
        volatile uint32_t LUT31H;  ///< Offset: 0x10FC - Graphic MMU LUT entry 31 high
        volatile uint32_t LUT32H;  ///< Offset: 0x1104 - Graphic MMU LUT entry 32 high
        volatile uint32_t LUT33H;  ///< Offset: 0x110C - Graphic MMU LUT entry 33 high
        volatile uint32_t LUT34H;  ///< Offset: 0x1114 - Graphic MMU LUT entry 34 high
        volatile uint32_t LUT35H;  ///< Offset: 0x111C - Graphic MMU LUT entry 35 high
        volatile uint32_t LUT36H;  ///< Offset: 0x1124 - Graphic MMU LUT entry 36 high
        volatile uint32_t LUT37H;  ///< Offset: 0x112C - Graphic MMU LUT entry 37 high
        volatile uint32_t LUT38H;  ///< Offset: 0x1134 - Graphic MMU LUT entry 38 high
        volatile uint32_t LUT39H;  ///< Offset: 0x113C - Graphic MMU LUT entry 39 high
        volatile uint32_t LUT40H;  ///< Offset: 0x1144 - Graphic MMU LUT entry 40 high
        volatile uint32_t LUT41H;  ///< Offset: 0x114C - Graphic MMU LUT entry 41 high
        volatile uint32_t LUT42H;  ///< Offset: 0x1154 - Graphic MMU LUT entry 42 high
        volatile uint32_t LUT43H;  ///< Offset: 0x115C - Graphic MMU LUT entry 43 high
        volatile uint32_t LUT44H;  ///< Offset: 0x1164 - Graphic MMU LUT entry 44 high
        volatile uint32_t LUT45H;  ///< Offset: 0x116C - Graphic MMU LUT entry 45 high
        volatile uint32_t LUT46H;  ///< Offset: 0x1174 - Graphic MMU LUT entry 46 high
        volatile uint32_t LUT47H;  ///< Offset: 0x117C - Graphic MMU LUT entry 47 high
        volatile uint32_t LUT48H;  ///< Offset: 0x1184 - Graphic MMU LUT entry 48 high
        volatile uint32_t LUT49H;  ///< Offset: 0x118C - Graphic MMU LUT entry 49 high
        volatile uint32_t LUT50H;  ///< Offset: 0x1194 - Graphic MMU LUT entry 50 high
        volatile uint32_t LUT51H;  ///< Offset: 0x119C - Graphic MMU LUT entry 51 high
        volatile uint32_t LUT52H;  ///< Offset: 0x11A4 - Graphic MMU LUT entry 52 high
        volatile uint32_t LUT53H;  ///< Offset: 0x11AC - Graphic MMU LUT entry 53 high
        volatile uint32_t LUT54H;  ///< Offset: 0x11B4 - Graphic MMU LUT entry 54 high
        volatile uint32_t LUT55H;  ///< Offset: 0x11BC - Graphic MMU LUT entry 55 high
        volatile uint32_t LUT56H;  ///< Offset: 0x11C4 - Graphic MMU LUT entry 56 high
        volatile uint32_t LUT57H;  ///< Offset: 0x11CC - Graphic MMU LUT entry 57 high
        volatile uint32_t LUT58H;  ///< Offset: 0x11D4 - Graphic MMU LUT entry 58 high
        volatile uint32_t LUT59H;  ///< Offset: 0x11DC - Graphic MMU LUT entry 59 high
        volatile uint32_t LUT60H;  ///< Offset: 0x11E4 - Graphic MMU LUT entry 60 high
        volatile uint32_t LUT61H;  ///< Offset: 0x11EC - Graphic MMU LUT entry 61 high
        volatile uint32_t LUT62H;  ///< Offset: 0x11F4 - Graphic MMU LUT entry 62 high
        volatile uint32_t LUT63H;  ///< Offset: 0x11FC - Graphic MMU LUT entry 63 high
        volatile uint32_t LUT64H;  ///< Offset: 0x1204 - Graphic MMU LUT entry 64 high
        volatile uint32_t LUT65H;  ///< Offset: 0x120C - Graphic MMU LUT entry 65 high
        volatile uint32_t LUT66H;  ///< Offset: 0x1214 - Graphic MMU LUT entry 66 high
        volatile uint32_t LUT67H;  ///< Offset: 0x121C - Graphic MMU LUT entry 67 high
        volatile uint32_t LUT68H;  ///< Offset: 0x1224 - Graphic MMU LUT entry 68 high
        volatile uint32_t LUT69H;  ///< Offset: 0x122C - Graphic MMU LUT entry 69 high
        volatile uint32_t LUT70H;  ///< Offset: 0x1234 - Graphic MMU LUT entry 70 high
        volatile uint32_t LUT71H;  ///< Offset: 0x123C - Graphic MMU LUT entry 71 high
        volatile uint32_t LUT72H;  ///< Offset: 0x1244 - Graphic MMU LUT entry 72 high
        volatile uint32_t LUT73H;  ///< Offset: 0x124C - Graphic MMU LUT entry 73 high
        volatile uint32_t LUT74H;  ///< Offset: 0x1254 - Graphic MMU LUT entry 74 high
        volatile uint32_t LUT75H;  ///< Offset: 0x125C - Graphic MMU LUT entry 75 high
        volatile uint32_t LUT76H;  ///< Offset: 0x1264 - Graphic MMU LUT entry 76 high
        volatile uint32_t LUT77H;  ///< Offset: 0x126C - Graphic MMU LUT entry 77 high
        volatile uint32_t LUT78H;  ///< Offset: 0x1274 - Graphic MMU LUT entry 78 high
        volatile uint32_t LUT79H;  ///< Offset: 0x127C - Graphic MMU LUT entry 79 high
        volatile uint32_t LUT80H;  ///< Offset: 0x1284 - Graphic MMU LUT entry 80 high
        volatile uint32_t LUT81H;  ///< Offset: 0x128C - Graphic MMU LUT entry 81 high
        volatile uint32_t LUT82H;  ///< Offset: 0x1294 - Graphic MMU LUT entry 82 high
        volatile uint32_t LUT83H;  ///< Offset: 0x129C - Graphic MMU LUT entry 83 high
        volatile uint32_t LUT84H;  ///< Offset: 0x12A4 - Graphic MMU LUT entry 84 high
        volatile uint32_t LUT85H;  ///< Offset: 0x12AC - Graphic MMU LUT entry 85 high
        volatile uint32_t LUT86H;  ///< Offset: 0x12B4 - Graphic MMU LUT entry 86 high
        volatile uint32_t LUT87H;  ///< Offset: 0x12BC - Graphic MMU LUT entry 87 high
        volatile uint32_t LUT88H;  ///< Offset: 0x12C4 - Graphic MMU LUT entry 88 high
        volatile uint32_t LUT89H;  ///< Offset: 0x12CC - Graphic MMU LUT entry 89 high
        volatile uint32_t LUT90H;  ///< Offset: 0x12D4 - Graphic MMU LUT entry 90 high
        volatile uint32_t LUT91H;  ///< Offset: 0x12DC - Graphic MMU LUT entry 91 high
        volatile uint32_t LUT92H;  ///< Offset: 0x12E4 - Graphic MMU LUT entry 92 high
        volatile uint32_t LUT93H;  ///< Offset: 0x12EC - Graphic MMU LUT entry 93 high
        volatile uint32_t LUT94H;  ///< Offset: 0x12F4 - Graphic MMU LUT entry 94 high
        volatile uint32_t LUT95H;  ///< Offset: 0x12FC - Graphic MMU LUT entry 95 high
        volatile uint32_t LUT96H;  ///< Offset: 0x1304 - Graphic MMU LUT entry 96 high
        volatile uint32_t LUT97H;  ///< Offset: 0x130C - Graphic MMU LUT entry 97 high
        volatile uint32_t LUT98H;  ///< Offset: 0x1314 - Graphic MMU LUT entry 98 high
        volatile uint32_t LUT99H;  ///< Offset: 0x131C - Graphic MMU LUT entry 99 high
        volatile uint32_t LUT100H;  ///< Offset: 0x1324 - Graphic MMU LUT entry 100 high
        volatile uint32_t LUT101H;  ///< Offset: 0x132C - Graphic MMU LUT entry 101 high
        volatile uint32_t LUT102H;  ///< Offset: 0x1334 - Graphic MMU LUT entry 102 high
        volatile uint32_t LUT103H;  ///< Offset: 0x133C - Graphic MMU LUT entry 103 high
        volatile uint32_t LUT104H;  ///< Offset: 0x1344 - Graphic MMU LUT entry 104 high
        volatile uint32_t LUT105H;  ///< Offset: 0x134C - Graphic MMU LUT entry 105 high
        volatile uint32_t LUT106H;  ///< Offset: 0x1354 - Graphic MMU LUT entry 106 high
        volatile uint32_t LUT107H;  ///< Offset: 0x135C - Graphic MMU LUT entry 107 high
        volatile uint32_t LUT108H;  ///< Offset: 0x1364 - Graphic MMU LUT entry 108 high
        volatile uint32_t LUT109H;  ///< Offset: 0x136C - Graphic MMU LUT entry 109 high
        volatile uint32_t LUT110H;  ///< Offset: 0x1374 - Graphic MMU LUT entry 110 high
        volatile uint32_t LUT111H;  ///< Offset: 0x137C - Graphic MMU LUT entry 111 high
        volatile uint32_t LUT112H;  ///< Offset: 0x1384 - Graphic MMU LUT entry 112 high
        volatile uint32_t LUT113H;  ///< Offset: 0x138C - Graphic MMU LUT entry 113 high
        volatile uint32_t LUT114H;  ///< Offset: 0x1394 - Graphic MMU LUT entry 114 high
        volatile uint32_t LUT115H;  ///< Offset: 0x139C - Graphic MMU LUT entry 115 high
        volatile uint32_t LUT116H;  ///< Offset: 0x13A4 - Graphic MMU LUT entry 116 high
        volatile uint32_t LUT117H;  ///< Offset: 0x13AC - Graphic MMU LUT entry 117 high
        volatile uint32_t LUT118H;  ///< Offset: 0x13B4 - Graphic MMU LUT entry 118 high
        volatile uint32_t LUT119H;  ///< Offset: 0x13BC - Graphic MMU LUT entry 119 high
        volatile uint32_t LUT120H;  ///< Offset: 0x13C4 - Graphic MMU LUT entry 120 high
        volatile uint32_t LUT121H;  ///< Offset: 0x13CC - Graphic MMU LUT entry 121 high
        volatile uint32_t LUT122H;  ///< Offset: 0x13D4 - Graphic MMU LUT entry 122 high
        volatile uint32_t LUT123H;  ///< Offset: 0x13DC - Graphic MMU LUT entry 123 high
        volatile uint32_t LUT124H;  ///< Offset: 0x13E4 - Graphic MMU LUT entry 124 high
        volatile uint32_t LUT125H;  ///< Offset: 0x13EC - Graphic MMU LUT entry 125 high
        volatile uint32_t LUT126H;  ///< Offset: 0x13F4 - Graphic MMU LUT entry 126 high
        volatile uint32_t LUT127H;  ///< Offset: 0x13FC - Graphic MMU LUT entry 127 high
        volatile uint32_t LUT128H;  ///< Offset: 0x1404 - Graphic MMU LUT entry 128 high
        volatile uint32_t LUT129H;  ///< Offset: 0x140C - Graphic MMU LUT entry 129 high
        volatile uint32_t LUT130H;  ///< Offset: 0x1414 - Graphic MMU LUT entry 130 high
        volatile uint32_t LUT131H;  ///< Offset: 0x141C - Graphic MMU LUT entry 131 high
        volatile uint32_t LUT132H;  ///< Offset: 0x1424 - Graphic MMU LUT entry 132 high
        volatile uint32_t LUT133H;  ///< Offset: 0x142C - Graphic MMU LUT entry 133 high
        volatile uint32_t LUT134H;  ///< Offset: 0x1434 - Graphic MMU LUT entry 134 high
        volatile uint32_t LUT135H;  ///< Offset: 0x143C - Graphic MMU LUT entry 135 high
        volatile uint32_t LUT136H;  ///< Offset: 0x1444 - Graphic MMU LUT entry 136 high
        volatile uint32_t LUT137H;  ///< Offset: 0x144C - Graphic MMU LUT entry 137 high
        volatile uint32_t LUT138H;  ///< Offset: 0x1454 - Graphic MMU LUT entry 138 high
        volatile uint32_t LUT139H;  ///< Offset: 0x145C - Graphic MMU LUT entry 139 high
        volatile uint32_t LUT140H;  ///< Offset: 0x1464 - Graphic MMU LUT entry 140 high
        volatile uint32_t LUT141H;  ///< Offset: 0x146C - Graphic MMU LUT entry 141 high
        volatile uint32_t LUT142H;  ///< Offset: 0x1474 - Graphic MMU LUT entry 142 high
        volatile uint32_t LUT143H;  ///< Offset: 0x147C - Graphic MMU LUT entry 143 high
        volatile uint32_t LUT144H;  ///< Offset: 0x1484 - Graphic MMU LUT entry 144 high
        volatile uint32_t LUT145H;  ///< Offset: 0x148C - Graphic MMU LUT entry 145 high
        volatile uint32_t LUT146H;  ///< Offset: 0x1494 - Graphic MMU LUT entry 146 high
        volatile uint32_t LUT147H;  ///< Offset: 0x149C - Graphic MMU LUT entry 147 high
        volatile uint32_t LUT148H;  ///< Offset: 0x14A4 - Graphic MMU LUT entry 148 high
        volatile uint32_t LUT149H;  ///< Offset: 0x14AC - Graphic MMU LUT entry 149 high
        volatile uint32_t LUT150H;  ///< Offset: 0x14B4 - Graphic MMU LUT entry 150 high
        volatile uint32_t LUT151H;  ///< Offset: 0x14BC - Graphic MMU LUT entry 151 high
        volatile uint32_t LUT152H;  ///< Offset: 0x14C4 - Graphic MMU LUT entry 152 high
        volatile uint32_t LUT153H;  ///< Offset: 0x14CC - Graphic MMU LUT entry 153 high
        volatile uint32_t LUT154H;  ///< Offset: 0x14D4 - Graphic MMU LUT entry 154 high
        volatile uint32_t LUT155H;  ///< Offset: 0x14DC - Graphic MMU LUT entry 155 high
        volatile uint32_t LUT156H;  ///< Offset: 0x14E4 - Graphic MMU LUT entry 156 high
        volatile uint32_t LUT157H;  ///< Offset: 0x14EC - Graphic MMU LUT entry 157 high
        volatile uint32_t LUT158H;  ///< Offset: 0x14F4 - Graphic MMU LUT entry 158 high
        volatile uint32_t LUT159H;  ///< Offset: 0x14FC - Graphic MMU LUT entry 159 high
        volatile uint32_t LUT160H;  ///< Offset: 0x1504 - Graphic MMU LUT entry 160 high
        volatile uint32_t LUT161H;  ///< Offset: 0x150C - Graphic MMU LUT entry 161 high
        volatile uint32_t LUT162H;  ///< Offset: 0x1514 - Graphic MMU LUT entry 162 high
        volatile uint32_t LUT163H;  ///< Offset: 0x151C - Graphic MMU LUT entry 163 high
        volatile uint32_t LUT164H;  ///< Offset: 0x1524 - Graphic MMU LUT entry 164 high
        volatile uint32_t LUT165H;  ///< Offset: 0x152C - Graphic MMU LUT entry 165 high
        volatile uint32_t LUT166H;  ///< Offset: 0x1534 - Graphic MMU LUT entry 166 high
        volatile uint32_t LUT167H;  ///< Offset: 0x153C - Graphic MMU LUT entry 167 high
        volatile uint32_t LUT168H;  ///< Offset: 0x1544 - Graphic MMU LUT entry 168 high
        volatile uint32_t LUT169H;  ///< Offset: 0x154C - Graphic MMU LUT entry 169 high
        volatile uint32_t LUT170H;  ///< Offset: 0x1554 - Graphic MMU LUT entry 170 high
        volatile uint32_t LUT171H;  ///< Offset: 0x155C - Graphic MMU LUT entry 171 high
        volatile uint32_t LUT172H;  ///< Offset: 0x1564 - Graphic MMU LUT entry 172 high
        volatile uint32_t LUT173H;  ///< Offset: 0x156C - Graphic MMU LUT entry 173 high
        volatile uint32_t LUT174H;  ///< Offset: 0x1574 - Graphic MMU LUT entry 174 high
        volatile uint32_t LUT175H;  ///< Offset: 0x157C - Graphic MMU LUT entry 175 high
        volatile uint32_t LUT176H;  ///< Offset: 0x1584 - Graphic MMU LUT entry 176 high
        volatile uint32_t LUT177H;  ///< Offset: 0x158C - Graphic MMU LUT entry 177 high
        volatile uint32_t LUT178H;  ///< Offset: 0x1594 - Graphic MMU LUT entry 178 high
        volatile uint32_t LUT179H;  ///< Offset: 0x159C - Graphic MMU LUT entry 179 high
        volatile uint32_t LUT180H;  ///< Offset: 0x15A4 - Graphic MMU LUT entry 180 high
        volatile uint32_t LUT181H;  ///< Offset: 0x15AC - Graphic MMU LUT entry 181 high
        volatile uint32_t LUT182H;  ///< Offset: 0x15B4 - Graphic MMU LUT entry 182 high
        volatile uint32_t LUT183H;  ///< Offset: 0x15BC - Graphic MMU LUT entry 183 high
        volatile uint32_t LUT184H;  ///< Offset: 0x15C4 - Graphic MMU LUT entry 184 high
        volatile uint32_t LUT185H;  ///< Offset: 0x15CC - Graphic MMU LUT entry 185 high
        volatile uint32_t LUT186H;  ///< Offset: 0x15D4 - Graphic MMU LUT entry 186 high
        volatile uint32_t LUT187H;  ///< Offset: 0x15DC - Graphic MMU LUT entry 187 high
        volatile uint32_t LUT188H;  ///< Offset: 0x15E4 - Graphic MMU LUT entry 188 high
        volatile uint32_t LUT189H;  ///< Offset: 0x15EC - Graphic MMU LUT entry 189 high
        volatile uint32_t LUT190H;  ///< Offset: 0x15F4 - Graphic MMU LUT entry 190 high
        volatile uint32_t LUT191H;  ///< Offset: 0x15FC - Graphic MMU LUT entry 191 high
        volatile uint32_t LUT192H;  ///< Offset: 0x1604 - Graphic MMU LUT entry 192 high
        volatile uint32_t LUT193H;  ///< Offset: 0x160C - Graphic MMU LUT entry 193 high
        volatile uint32_t LUT194H;  ///< Offset: 0x1614 - Graphic MMU LUT entry 194 high
        volatile uint32_t LUT195H;  ///< Offset: 0x161C - Graphic MMU LUT entry 195 high
        volatile uint32_t LUT196H;  ///< Offset: 0x1624 - Graphic MMU LUT entry 196 high
        volatile uint32_t LUT197H;  ///< Offset: 0x162C - Graphic MMU LUT entry 197 high
        volatile uint32_t LUT198H;  ///< Offset: 0x1634 - Graphic MMU LUT entry 198 high
        volatile uint32_t LUT199H;  ///< Offset: 0x163C - Graphic MMU LUT entry 199 high
        volatile uint32_t LUT200H;  ///< Offset: 0x1644 - Graphic MMU LUT entry 200 high
        volatile uint32_t LUT201H;  ///< Offset: 0x164C - Graphic MMU LUT entry 201 high
        volatile uint32_t LUT202H;  ///< Offset: 0x1654 - Graphic MMU LUT entry 202 high
        volatile uint32_t LUT203H;  ///< Offset: 0x165C - Graphic MMU LUT entry 203 high
        volatile uint32_t LUT204H;  ///< Offset: 0x1664 - Graphic MMU LUT entry 204 high
        volatile uint32_t LUT205H;  ///< Offset: 0x166C - Graphic MMU LUT entry 205 high
        volatile uint32_t LUT206H;  ///< Offset: 0x1674 - Graphic MMU LUT entry 206 high
        volatile uint32_t LUT207H;  ///< Offset: 0x167C - Graphic MMU LUT entry 207 high
        volatile uint32_t LUT208H;  ///< Offset: 0x1684 - Graphic MMU LUT entry 208 high
        volatile uint32_t LUT209H;  ///< Offset: 0x168C - Graphic MMU LUT entry 209 high
        volatile uint32_t LUT210H;  ///< Offset: 0x1694 - Graphic MMU LUT entry 210 high
        volatile uint32_t LUT211H;  ///< Offset: 0x169C - Graphic MMU LUT entry 211 high
        volatile uint32_t LUT212H;  ///< Offset: 0x16A4 - Graphic MMU LUT entry 212 high
        volatile uint32_t LUT213H;  ///< Offset: 0x16AC - Graphic MMU LUT entry 213 high
        volatile uint32_t LUT214H;  ///< Offset: 0x16B4 - Graphic MMU LUT entry 214 high
        volatile uint32_t LUT215H;  ///< Offset: 0x16BC - Graphic MMU LUT entry 215 high
        volatile uint32_t LUT216H;  ///< Offset: 0x16C4 - Graphic MMU LUT entry 216 high
        volatile uint32_t LUT217H;  ///< Offset: 0x16CC - Graphic MMU LUT entry 217 high
        volatile uint32_t LUT218H;  ///< Offset: 0x16D4 - Graphic MMU LUT entry 218 high
        volatile uint32_t LUT219H;  ///< Offset: 0x16DC - Graphic MMU LUT entry 219 high
        volatile uint32_t LUT220H;  ///< Offset: 0x16E4 - Graphic MMU LUT entry 220 high
        volatile uint32_t LUT221H;  ///< Offset: 0x16EC - Graphic MMU LUT entry 221 high
        volatile uint32_t LUT222H;  ///< Offset: 0x16F4 - Graphic MMU LUT entry 222 high
        volatile uint32_t LUT223H;  ///< Offset: 0x16FC - Graphic MMU LUT entry 223 high
        volatile uint32_t LUT224H;  ///< Offset: 0x1704 - Graphic MMU LUT entry 224 high
        volatile uint32_t LUT225H;  ///< Offset: 0x170C - Graphic MMU LUT entry 225 high
        volatile uint32_t LUT226H;  ///< Offset: 0x1714 - Graphic MMU LUT entry 226 high
        volatile uint32_t LUT227H;  ///< Offset: 0x171C - Graphic MMU LUT entry 227 high
        volatile uint32_t LUT228H;  ///< Offset: 0x1724 - Graphic MMU LUT entry 228 high
        volatile uint32_t LUT229H;  ///< Offset: 0x172C - Graphic MMU LUT entry 229 high
        volatile uint32_t LUT230H;  ///< Offset: 0x1734 - Graphic MMU LUT entry 230 high
        volatile uint32_t LUT231H;  ///< Offset: 0x173C - Graphic MMU LUT entry 231 high
        volatile uint32_t LUT232H;  ///< Offset: 0x1744 - Graphic MMU LUT entry 232 high
        volatile uint32_t LUT233H;  ///< Offset: 0x174C - Graphic MMU LUT entry 233 high
        volatile uint32_t LUT234H;  ///< Offset: 0x1754 - Graphic MMU LUT entry 234 high
        volatile uint32_t LUT235H;  ///< Offset: 0x175C - Graphic MMU LUT entry 235 high
        volatile uint32_t LUT236H;  ///< Offset: 0x1764 - Graphic MMU LUT entry 236 high
        volatile uint32_t LUT237H;  ///< Offset: 0x176C - Graphic MMU LUT entry 237 high
        volatile uint32_t LUT238H;  ///< Offset: 0x1774 - Graphic MMU LUT entry 238 high
        volatile uint32_t LUT239H;  ///< Offset: 0x177C - Graphic MMU LUT entry 239 high
        volatile uint32_t LUT240H;  ///< Offset: 0x1784 - Graphic MMU LUT entry 240 high
        volatile uint32_t LUT241H;  ///< Offset: 0x178C - Graphic MMU LUT entry 241 high
        volatile uint32_t LUT242H;  ///< Offset: 0x1794 - Graphic MMU LUT entry 242 high
        volatile uint32_t LUT243H;  ///< Offset: 0x179C - Graphic MMU LUT entry 243 high
        volatile uint32_t LUT244H;  ///< Offset: 0x17A4 - Graphic MMU LUT entry 244 high
        volatile uint32_t LUT245H;  ///< Offset: 0x17AC - Graphic MMU LUT entry 245 high
        volatile uint32_t LUT246H;  ///< Offset: 0x17B4 - Graphic MMU LUT entry 246 high
        volatile uint32_t LUT247H;  ///< Offset: 0x17BC - Graphic MMU LUT entry 247 high
        volatile uint32_t LUT248H;  ///< Offset: 0x17C4 - Graphic MMU LUT entry 248 high
        volatile uint32_t LUT249H;  ///< Offset: 0x17CC - Graphic MMU LUT entry 249 high
        volatile uint32_t LUT250H;  ///< Offset: 0x17D4 - Graphic MMU LUT entry 250 high
        volatile uint32_t LUT251H;  ///< Offset: 0x17DC - Graphic MMU LUT entry 251 high
        volatile uint32_t LUT252H;  ///< Offset: 0x17E4 - Graphic MMU LUT entry 252 high
        volatile uint32_t LUT253H;  ///< Offset: 0x17EC - Graphic MMU LUT entry 253 high
        volatile uint32_t LUT254H;  ///< Offset: 0x17F4 - Graphic MMU LUT entry 254 high
        volatile uint32_t LUT255H;  ///< Offset: 0x17FC - Graphic MMU LUT entry 255 high
        volatile uint32_t LUT256H;  ///< Offset: 0x1804 - Graphic MMU LUT entry 256 high
        volatile uint32_t LUT257H;  ///< Offset: 0x180C - Graphic MMU LUT entry 257 high
        volatile uint32_t LUT258H;  ///< Offset: 0x1814 - Graphic MMU LUT entry 258 high
        volatile uint32_t LUT259H;  ///< Offset: 0x181C - Graphic MMU LUT entry 259 high
        volatile uint32_t LUT260H;  ///< Offset: 0x1824 - Graphic MMU LUT entry 260 high
        volatile uint32_t LUT261H;  ///< Offset: 0x182C - Graphic MMU LUT entry 261 high
        volatile uint32_t LUT262H;  ///< Offset: 0x1834 - Graphic MMU LUT entry 262 high
        volatile uint32_t LUT263H;  ///< Offset: 0x183C - Graphic MMU LUT entry 263 high
        volatile uint32_t LUT264H;  ///< Offset: 0x1844 - Graphic MMU LUT entry 264 high
        volatile uint32_t LUT265H;  ///< Offset: 0x184C - Graphic MMU LUT entry 265 high
        volatile uint32_t LUT266H;  ///< Offset: 0x1854 - Graphic MMU LUT entry 266 high
        volatile uint32_t LUT267H;  ///< Offset: 0x185C - Graphic MMU LUT entry 267 high
        volatile uint32_t LUT268H;  ///< Offset: 0x1864 - Graphic MMU LUT entry 268 high
        volatile uint32_t LUT269H;  ///< Offset: 0x186C - Graphic MMU LUT entry 269 high
        volatile uint32_t LUT270H;  ///< Offset: 0x1874 - Graphic MMU LUT entry 270 high
        volatile uint32_t LUT271H;  ///< Offset: 0x187C - Graphic MMU LUT entry 271 high
        volatile uint32_t LUT272H;  ///< Offset: 0x1884 - Graphic MMU LUT entry 272 high
        volatile uint32_t LUT273H;  ///< Offset: 0x188C - Graphic MMU LUT entry 273 high
        volatile uint32_t LUT274H;  ///< Offset: 0x1894 - Graphic MMU LUT entry 274 high
        volatile uint32_t LUT275H;  ///< Offset: 0x189C - Graphic MMU LUT entry 275 high
        volatile uint32_t LUT276H;  ///< Offset: 0x18A4 - Graphic MMU LUT entry 276 high
        volatile uint32_t LUT277H;  ///< Offset: 0x18AC - Graphic MMU LUT entry 277 high
        volatile uint32_t LUT278H;  ///< Offset: 0x18B4 - Graphic MMU LUT entry 278 high
        volatile uint32_t LUT279H;  ///< Offset: 0x18BC - Graphic MMU LUT entry 279 high
        volatile uint32_t LUT280H;  ///< Offset: 0x18C4 - Graphic MMU LUT entry 280 high
        volatile uint32_t LUT281H;  ///< Offset: 0x18CC - Graphic MMU LUT entry 281 high
        volatile uint32_t LUT282H;  ///< Offset: 0x18D4 - Graphic MMU LUT entry 282 high
        volatile uint32_t LUT283H;  ///< Offset: 0x18DC - Graphic MMU LUT entry 283 high
        volatile uint32_t LUT284H;  ///< Offset: 0x18E4 - Graphic MMU LUT entry 284 high
        volatile uint32_t LUT285H;  ///< Offset: 0x18EC - Graphic MMU LUT entry 285 high
        volatile uint32_t LUT286H;  ///< Offset: 0x18F4 - Graphic MMU LUT entry 286 high
        volatile uint32_t LUT287H;  ///< Offset: 0x18FC - Graphic MMU LUT entry 287 high
        volatile uint32_t LUT288H;  ///< Offset: 0x1904 - Graphic MMU LUT entry 288 high
        volatile uint32_t LUT289H;  ///< Offset: 0x190C - Graphic MMU LUT entry 289 high
        volatile uint32_t LUT290H;  ///< Offset: 0x1914 - Graphic MMU LUT entry 290 high
        volatile uint32_t LUT291H;  ///< Offset: 0x191C - Graphic MMU LUT entry 291 high
        volatile uint32_t LUT292H;  ///< Offset: 0x1924 - Graphic MMU LUT entry 292 high
        volatile uint32_t LUT293H;  ///< Offset: 0x192C - Graphic MMU LUT entry 293 high
        volatile uint32_t LUT294H;  ///< Offset: 0x1934 - Graphic MMU LUT entry 294 high
        volatile uint32_t LUT295H;  ///< Offset: 0x193C - Graphic MMU LUT entry 295 high
        volatile uint32_t LUT296H;  ///< Offset: 0x1944 - Graphic MMU LUT entry 296 high
        volatile uint32_t LUT297H;  ///< Offset: 0x194C - Graphic MMU LUT entry 297 high
        volatile uint32_t LUT298H;  ///< Offset: 0x1954 - Graphic MMU LUT entry 298 high
        volatile uint32_t LUT299H;  ///< Offset: 0x195C - Graphic MMU LUT entry 299 high
        volatile uint32_t LUT300H;  ///< Offset: 0x1964 - Graphic MMU LUT entry 300 high
        volatile uint32_t LUT301H;  ///< Offset: 0x196C - Graphic MMU LUT entry 301 high
        volatile uint32_t LUT302H;  ///< Offset: 0x1974 - Graphic MMU LUT entry 302 high
        volatile uint32_t LUT303H;  ///< Offset: 0x197C - Graphic MMU LUT entry 303 high
        volatile uint32_t LUT304H;  ///< Offset: 0x1984 - Graphic MMU LUT entry 304 high
        volatile uint32_t LUT305H;  ///< Offset: 0x198C - Graphic MMU LUT entry 305 high
        volatile uint32_t LUT306H;  ///< Offset: 0x1994 - Graphic MMU LUT entry 306 high
        volatile uint32_t LUT307H;  ///< Offset: 0x199C - Graphic MMU LUT entry 307 high
        volatile uint32_t LUT308H;  ///< Offset: 0x19A4 - Graphic MMU LUT entry 308 high
        volatile uint32_t LUT309H;  ///< Offset: 0x19AC - Graphic MMU LUT entry 309 high
        volatile uint32_t LUT310H;  ///< Offset: 0x19B4 - Graphic MMU LUT entry 310 high
        volatile uint32_t LUT311H;  ///< Offset: 0x19BC - Graphic MMU LUT entry 311 high
        volatile uint32_t LUT312H;  ///< Offset: 0x19C4 - Graphic MMU LUT entry 312 high
        volatile uint32_t LUT313H;  ///< Offset: 0x19CC - Graphic MMU LUT entry 313 high
        volatile uint32_t LUT314H;  ///< Offset: 0x19D4 - Graphic MMU LUT entry 314 high
        volatile uint32_t LUT315H;  ///< Offset: 0x19DC - Graphic MMU LUT entry 315 high
        volatile uint32_t LUT316H;  ///< Offset: 0x19E4 - Graphic MMU LUT entry 316 high
        volatile uint32_t LUT317H;  ///< Offset: 0x19EC - Graphic MMU LUT entry 317 high
        volatile uint32_t LUT318H;  ///< Offset: 0x19F4 - Graphic MMU LUT entry 318 high
        volatile uint32_t LUT319H;  ///< Offset: 0x19FC - Graphic MMU LUT entry 319 high
        volatile uint32_t LUT320H;  ///< Offset: 0x1A04 - Graphic MMU LUT entry 320 high
        volatile uint32_t LUT321H;  ///< Offset: 0x1A0C - Graphic MMU LUT entry 321 high
        volatile uint32_t LUT322H;  ///< Offset: 0x1A14 - Graphic MMU LUT entry 322 high
        volatile uint32_t LUT323H;  ///< Offset: 0x1A1C - Graphic MMU LUT entry 323 high
        volatile uint32_t LUT324H;  ///< Offset: 0x1A24 - Graphic MMU LUT entry 324 high
        volatile uint32_t LUT325H;  ///< Offset: 0x1A2C - Graphic MMU LUT entry 325 high
        volatile uint32_t LUT326H;  ///< Offset: 0x1A34 - Graphic MMU LUT entry 326 high
        volatile uint32_t LUT327H;  ///< Offset: 0x1A3C - Graphic MMU LUT entry 327 high
        volatile uint32_t LUT328H;  ///< Offset: 0x1A44 - Graphic MMU LUT entry 328 high
        volatile uint32_t LUT329H;  ///< Offset: 0x1A4C - Graphic MMU LUT entry 329 high
        volatile uint32_t LUT330H;  ///< Offset: 0x1A54 - Graphic MMU LUT entry 330 high
        volatile uint32_t LUT331H;  ///< Offset: 0x1A5C - Graphic MMU LUT entry 331 high
        volatile uint32_t LUT332H;  ///< Offset: 0x1A64 - Graphic MMU LUT entry 332 high
        volatile uint32_t LUT333H;  ///< Offset: 0x1A6C - Graphic MMU LUT entry 333 high
        volatile uint32_t LUT334H;  ///< Offset: 0x1A74 - Graphic MMU LUT entry 334 high
        volatile uint32_t LUT335H;  ///< Offset: 0x1A7C - Graphic MMU LUT entry 335 high
        volatile uint32_t LUT336H;  ///< Offset: 0x1A84 - Graphic MMU LUT entry 336 high
        volatile uint32_t LUT337H;  ///< Offset: 0x1A8C - Graphic MMU LUT entry 337 high
        volatile uint32_t LUT338H;  ///< Offset: 0x1A94 - Graphic MMU LUT entry 338 high
        volatile uint32_t LUT339H;  ///< Offset: 0x1A9C - Graphic MMU LUT entry 339 high
        volatile uint32_t LUT340H;  ///< Offset: 0x1AA4 - Graphic MMU LUT entry 340 high
        volatile uint32_t LUT341H;  ///< Offset: 0x1AAC - Graphic MMU LUT entry 341 high
        volatile uint32_t LUT342H;  ///< Offset: 0x1AB4 - Graphic MMU LUT entry 342 high
        volatile uint32_t LUT343H;  ///< Offset: 0x1ABC - Graphic MMU LUT entry 343 high
        volatile uint32_t LUT344H;  ///< Offset: 0x1AC4 - Graphic MMU LUT entry 344 high
        volatile uint32_t LUT345H;  ///< Offset: 0x1ACC - Graphic MMU LUT entry 345 high
        volatile uint32_t LUT346H;  ///< Offset: 0x1AD4 - Graphic MMU LUT entry 346 high
        volatile uint32_t LUT347H;  ///< Offset: 0x1ADC - Graphic MMU LUT entry 347 high
        volatile uint32_t LUT348H;  ///< Offset: 0x1AE4 - Graphic MMU LUT entry 348 high
        volatile uint32_t LUT349H;  ///< Offset: 0x1AEC - Graphic MMU LUT entry 349 high
        volatile uint32_t LUT350H;  ///< Offset: 0x1AF4 - Graphic MMU LUT entry 350 high
        volatile uint32_t LUT351H;  ///< Offset: 0x1AFC - Graphic MMU LUT entry 351 high
        volatile uint32_t LUT352H;  ///< Offset: 0x1B04 - Graphic MMU LUT entry 352 high
        volatile uint32_t LUT353H;  ///< Offset: 0x1B0C - Graphic MMU LUT entry 353 high
        volatile uint32_t LUT354H;  ///< Offset: 0x1B14 - Graphic MMU LUT entry 354 high
        volatile uint32_t LUT355H;  ///< Offset: 0x1B1C - Graphic MMU LUT entry 355 high
        volatile uint32_t LUT356H;  ///< Offset: 0x1B24 - Graphic MMU LUT entry 356 high
        volatile uint32_t LUT357H;  ///< Offset: 0x1B2C - Graphic MMU LUT entry 357 high
        volatile uint32_t LUT358H;  ///< Offset: 0x1B34 - Graphic MMU LUT entry 358 high
        volatile uint32_t LUT359H;  ///< Offset: 0x1B3C - Graphic MMU LUT entry 359 high
        volatile uint32_t LUT360H;  ///< Offset: 0x1B44 - Graphic MMU LUT entry 360 high
        volatile uint32_t LUT361H;  ///< Offset: 0x1B4C - Graphic MMU LUT entry 361 high
        volatile uint32_t LUT362H;  ///< Offset: 0x1B54 - Graphic MMU LUT entry 362 high
        volatile uint32_t LUT363H;  ///< Offset: 0x1B5C - Graphic MMU LUT entry 363 high
        volatile uint32_t LUT364H;  ///< Offset: 0x1B64 - Graphic MMU LUT entry 364 high
        volatile uint32_t LUT365H;  ///< Offset: 0x1B6C - Graphic MMU LUT entry 365 high
        volatile uint32_t LUT366H;  ///< Offset: 0x1B74 - Graphic MMU LUT entry 366 high
        volatile uint32_t LUT367H;  ///< Offset: 0x1B7C - Graphic MMU LUT entry 367 high
        volatile uint32_t LUT368H;  ///< Offset: 0x1B84 - Graphic MMU LUT entry 368 high
        volatile uint32_t LUT369H;  ///< Offset: 0x1B8C - Graphic MMU LUT entry 369 high
        volatile uint32_t LUT370H;  ///< Offset: 0x1B94 - Graphic MMU LUT entry 370 high
        volatile uint32_t LUT371H;  ///< Offset: 0x1B9C - Graphic MMU LUT entry 371 high
        volatile uint32_t LUT372H;  ///< Offset: 0x1BA4 - Graphic MMU LUT entry 372 high
        volatile uint32_t LUT373H;  ///< Offset: 0x1BAC - Graphic MMU LUT entry 373 high
        volatile uint32_t LUT374H;  ///< Offset: 0x1BB4 - Graphic MMU LUT entry 374 high
        volatile uint32_t LUT375H;  ///< Offset: 0x1BBC - Graphic MMU LUT entry 375 high
        volatile uint32_t LUT376H;  ///< Offset: 0x1BC4 - Graphic MMU LUT entry 376 high
        volatile uint32_t LUT377H;  ///< Offset: 0x1BCC - Graphic MMU LUT entry 377 high
        volatile uint32_t LUT378H;  ///< Offset: 0x1BD4 - Graphic MMU LUT entry 378 high
        volatile uint32_t LUT379H;  ///< Offset: 0x1BDC - Graphic MMU LUT entry 379 high
        volatile uint32_t LUT380H;  ///< Offset: 0x1BE4 - Graphic MMU LUT entry 380 high
        volatile uint32_t LUT381H;  ///< Offset: 0x1BEC - Graphic MMU LUT entry 381 high
        volatile uint32_t LUT382H;  ///< Offset: 0x1BF4 - Graphic MMU LUT entry 382 high
        volatile uint32_t LUT383H;  ///< Offset: 0x1BFC - Graphic MMU LUT entry 383 high
        volatile uint32_t LUT384H;  ///< Offset: 0x1C04 - Graphic MMU LUT entry 384 high
        volatile uint32_t LUT385H;  ///< Offset: 0x1C0C - Graphic MMU LUT entry 385 high
        volatile uint32_t LUT386H;  ///< Offset: 0x1C14 - Graphic MMU LUT entry 386 high
        volatile uint32_t LUT387H;  ///< Offset: 0x1C1C - Graphic MMU LUT entry 387 high
        volatile uint32_t LUT388H;  ///< Offset: 0x1C24 - Graphic MMU LUT entry 388 high
        volatile uint32_t LUT389H;  ///< Offset: 0x1C2C - Graphic MMU LUT entry 389 high
        volatile uint32_t LUT390H;  ///< Offset: 0x1C34 - Graphic MMU LUT entry 390 high
        volatile uint32_t LUT391H;  ///< Offset: 0x1C3C - Graphic MMU LUT entry 391 high
        volatile uint32_t LUT392H;  ///< Offset: 0x1C44 - Graphic MMU LUT entry 392 high
        volatile uint32_t LUT393H;  ///< Offset: 0x1C4C - Graphic MMU LUT entry 393 high
        volatile uint32_t LUT394H;  ///< Offset: 0x1C54 - Graphic MMU LUT entry 394 high
        volatile uint32_t LUT395H;  ///< Offset: 0x1C5C - Graphic MMU LUT entry 395 high
        volatile uint32_t LUT396H;  ///< Offset: 0x1C64 - Graphic MMU LUT entry 396 high
        volatile uint32_t LUT397H;  ///< Offset: 0x1C6C - Graphic MMU LUT entry 397 high
        volatile uint32_t LUT398H;  ///< Offset: 0x1C74 - Graphic MMU LUT entry 398 high
        volatile uint32_t LUT399H;  ///< Offset: 0x1C7C - Graphic MMU LUT entry 399 high
        volatile uint32_t LUT400H;  ///< Offset: 0x1C84 - Graphic MMU LUT entry 400 high
        volatile uint32_t LUT401H;  ///< Offset: 0x1C8C - Graphic MMU LUT entry 401 high
        volatile uint32_t LUT402H;  ///< Offset: 0x1C94 - Graphic MMU LUT entry 402 high
        volatile uint32_t LUT403H;  ///< Offset: 0x1C9C - Graphic MMU LUT entry 403 high
        volatile uint32_t LUT404H;  ///< Offset: 0x1CA4 - Graphic MMU LUT entry 404 high
        volatile uint32_t LUT405H;  ///< Offset: 0x1CAC - Graphic MMU LUT entry 405 high
        volatile uint32_t LUT406H;  ///< Offset: 0x1CB4 - Graphic MMU LUT entry 406 high
        volatile uint32_t LUT407H;  ///< Offset: 0x1CBC - Graphic MMU LUT entry 407 high
        volatile uint32_t LUT408H;  ///< Offset: 0x1CC4 - Graphic MMU LUT entry 408 high
        volatile uint32_t LUT409H;  ///< Offset: 0x1CCC - Graphic MMU LUT entry 409 high
        volatile uint32_t LUT410H;  ///< Offset: 0x1CD4 - Graphic MMU LUT entry 410 high
        volatile uint32_t LUT411H;  ///< Offset: 0x1CDC - Graphic MMU LUT entry 411 high
        volatile uint32_t LUT412H;  ///< Offset: 0x1CE4 - Graphic MMU LUT entry 412 high
        volatile uint32_t LUT413H;  ///< Offset: 0x1CEC - Graphic MMU LUT entry 413 high
        volatile uint32_t LUT414H;  ///< Offset: 0x1CF4 - Graphic MMU LUT entry 414 high
        volatile uint32_t LUT415H;  ///< Offset: 0x1CFC - Graphic MMU LUT entry 415 high
        volatile uint32_t LUT416H;  ///< Offset: 0x1D04 - Graphic MMU LUT entry 416 high
        volatile uint32_t LUT417H;  ///< Offset: 0x1D0C - Graphic MMU LUT entry 417 high
        volatile uint32_t LUT418H;  ///< Offset: 0x1D14 - Graphic MMU LUT entry 418 high
        volatile uint32_t LUT419H;  ///< Offset: 0x1D1C - Graphic MMU LUT entry 419 high
        volatile uint32_t LUT420H;  ///< Offset: 0x1D24 - Graphic MMU LUT entry 420 high
        volatile uint32_t LUT421H;  ///< Offset: 0x1D2C - Graphic MMU LUT entry 421 high
        volatile uint32_t LUT422H;  ///< Offset: 0x1D34 - Graphic MMU LUT entry 422 high
        volatile uint32_t LUT423H;  ///< Offset: 0x1D3C - Graphic MMU LUT entry 423 high
        volatile uint32_t LUT424H;  ///< Offset: 0x1D44 - Graphic MMU LUT entry 424 high
        volatile uint32_t LUT425H;  ///< Offset: 0x1D4C - Graphic MMU LUT entry 425 high
        volatile uint32_t LUT426H;  ///< Offset: 0x1D54 - Graphic MMU LUT entry 426 high
        volatile uint32_t LUT427H;  ///< Offset: 0x1D5C - Graphic MMU LUT entry 427 high
        volatile uint32_t LUT428H;  ///< Offset: 0x1D64 - Graphic MMU LUT entry 428 high
        volatile uint32_t LUT429H;  ///< Offset: 0x1D6C - Graphic MMU LUT entry 429 high
        volatile uint32_t LUT430H;  ///< Offset: 0x1D74 - Graphic MMU LUT entry 430 high
        volatile uint32_t LUT431H;  ///< Offset: 0x1D7C - Graphic MMU LUT entry 431 high
        volatile uint32_t LUT432H;  ///< Offset: 0x1D84 - Graphic MMU LUT entry 432 high
        volatile uint32_t LUT433H;  ///< Offset: 0x1D8C - Graphic MMU LUT entry 433 high
        volatile uint32_t LUT434H;  ///< Offset: 0x1D94 - Graphic MMU LUT entry 434 high
        volatile uint32_t LUT435H;  ///< Offset: 0x1D9C - Graphic MMU LUT entry 435 high
        volatile uint32_t LUT436H;  ///< Offset: 0x1DA4 - Graphic MMU LUT entry 436 high
        volatile uint32_t LUT437H;  ///< Offset: 0x1DAC - Graphic MMU LUT entry 437 high
        volatile uint32_t LUT438H;  ///< Offset: 0x1DB4 - Graphic MMU LUT entry 438 high
        volatile uint32_t LUT439H;  ///< Offset: 0x1DBC - Graphic MMU LUT entry 439 high
        volatile uint32_t LUT440H;  ///< Offset: 0x1DC4 - Graphic MMU LUT entry 440 high
        volatile uint32_t LUT441H;  ///< Offset: 0x1DCC - Graphic MMU LUT entry 441 high
        volatile uint32_t LUT442H;  ///< Offset: 0x1DD4 - Graphic MMU LUT entry 442 high
        volatile uint32_t LUT443H;  ///< Offset: 0x1DDC - Graphic MMU LUT entry 443 high
        volatile uint32_t LUT444H;  ///< Offset: 0x1DE4 - Graphic MMU LUT entry 444 high
        volatile uint32_t LUT445H;  ///< Offset: 0x1DEC - Graphic MMU LUT entry 445 high
        volatile uint32_t LUT446H;  ///< Offset: 0x1DF4 - Graphic MMU LUT entry 446 high
        volatile uint32_t LUT447H;  ///< Offset: 0x1DFC - Graphic MMU LUT entry 447 high
        volatile uint32_t LUT448H;  ///< Offset: 0x1E04 - Graphic MMU LUT entry 448 high
        volatile uint32_t LUT449H;  ///< Offset: 0x1E0C - Graphic MMU LUT entry 449 high
        volatile uint32_t LUT450H;  ///< Offset: 0x1E14 - Graphic MMU LUT entry 450 high
        volatile uint32_t LUT451H;  ///< Offset: 0x1E1C - Graphic MMU LUT entry 451 high
        volatile uint32_t LUT452H;  ///< Offset: 0x1E24 - Graphic MMU LUT entry 452 high
        volatile uint32_t LUT453H;  ///< Offset: 0x1E2C - Graphic MMU LUT entry 453 high
        volatile uint32_t LUT454H;  ///< Offset: 0x1E34 - Graphic MMU LUT entry 454 high
        volatile uint32_t LUT455H;  ///< Offset: 0x1E3C - Graphic MMU LUT entry 455 high
        volatile uint32_t LUT456H;  ///< Offset: 0x1E44 - Graphic MMU LUT entry 456 high
        volatile uint32_t LUT457H;  ///< Offset: 0x1E4C - Graphic MMU LUT entry 457 high
        volatile uint32_t LUT458H;  ///< Offset: 0x1E54 - Graphic MMU LUT entry 458 high
        volatile uint32_t LUT459H;  ///< Offset: 0x1E5C - Graphic MMU LUT entry 459 high
        volatile uint32_t LUT460H;  ///< Offset: 0x1E64 - Graphic MMU LUT entry 460 high
        volatile uint32_t LUT461H;  ///< Offset: 0x1E6C - Graphic MMU LUT entry 461 high
        volatile uint32_t LUT462H;  ///< Offset: 0x1E74 - Graphic MMU LUT entry 462 high
        volatile uint32_t LUT463H;  ///< Offset: 0x1E7C - Graphic MMU LUT entry 463 high
        volatile uint32_t LUT464H;  ///< Offset: 0x1E84 - Graphic MMU LUT entry 464 high
        volatile uint32_t LUT465H;  ///< Offset: 0x1E8C - Graphic MMU LUT entry 465 high
        volatile uint32_t LUT466H;  ///< Offset: 0x1E94 - Graphic MMU LUT entry 466 high
        volatile uint32_t LUT467H;  ///< Offset: 0x1E9C - Graphic MMU LUT entry 467 high
        volatile uint32_t LUT468H;  ///< Offset: 0x1EA4 - Graphic MMU LUT entry 468 high
        volatile uint32_t LUT469H;  ///< Offset: 0x1EAC - Graphic MMU LUT entry 469 high
        volatile uint32_t LUT470H;  ///< Offset: 0x1EB4 - Graphic MMU LUT entry 470 high
        volatile uint32_t LUT471H;  ///< Offset: 0x1EBC - Graphic MMU LUT entry 471 high
        volatile uint32_t LUT472H;  ///< Offset: 0x1EC4 - Graphic MMU LUT entry 472 high
        volatile uint32_t LUT473H;  ///< Offset: 0x1ECC - Graphic MMU LUT entry 473 high
        volatile uint32_t LUT474H;  ///< Offset: 0x1ED4 - Graphic MMU LUT entry 474 high
        volatile uint32_t LUT475H;  ///< Offset: 0x1EDC - Graphic MMU LUT entry 475 high
        volatile uint32_t LUT476H;  ///< Offset: 0x1EE4 - Graphic MMU LUT entry 476 high
        volatile uint32_t LUT477H;  ///< Offset: 0x1EEC - Graphic MMU LUT entry 477 high
        volatile uint32_t LUT478H;  ///< Offset: 0x1EF4 - Graphic MMU LUT entry 478 high
        volatile uint32_t LUT479H;  ///< Offset: 0x1EFC - Graphic MMU LUT entry 479 high
        volatile uint32_t LUT480H;  ///< Offset: 0x1F04 - Graphic MMU LUT entry 480 high
        volatile uint32_t LUT481H;  ///< Offset: 0x1F0C - Graphic MMU LUT entry 481 high
        volatile uint32_t LUT482H;  ///< Offset: 0x1F14 - Graphic MMU LUT entry 482 high
        volatile uint32_t LUT483H;  ///< Offset: 0x1F1C - Graphic MMU LUT entry 483 high
        volatile uint32_t LUT484H;  ///< Offset: 0x1F24 - Graphic MMU LUT entry 484 high
        volatile uint32_t LUT485H;  ///< Offset: 0x1F2C - Graphic MMU LUT entry 485 high
        volatile uint32_t LUT486H;  ///< Offset: 0x1F34 - Graphic MMU LUT entry 486 high
        volatile uint32_t LUT487H;  ///< Offset: 0x1F3C - Graphic MMU LUT entry 487 high
        volatile uint32_t LUT488H;  ///< Offset: 0x1F44 - Graphic MMU LUT entry 488 high
        volatile uint32_t LUT489H;  ///< Offset: 0x1F4C - Graphic MMU LUT entry 489 high
        volatile uint32_t LUT490H;  ///< Offset: 0x1F54 - Graphic MMU LUT entry 490 high
        volatile uint32_t LUT491H;  ///< Offset: 0x1F5C - Graphic MMU LUT entry 491 high
        volatile uint32_t LUT492H;  ///< Offset: 0x1F64 - Graphic MMU LUT entry 492 high
        volatile uint32_t LUT493H;  ///< Offset: 0x1F6C - Graphic MMU LUT entry 493 high
        volatile uint32_t LUT494H;  ///< Offset: 0x1F74 - Graphic MMU LUT entry 494 high
        volatile uint32_t LUT495H;  ///< Offset: 0x1F7C - Graphic MMU LUT entry 495 high
        volatile uint32_t LUT496H;  ///< Offset: 0x1F84 - Graphic MMU LUT entry 496 high
        volatile uint32_t LUT497H;  ///< Offset: 0x1F8C - Graphic MMU LUT entry 497 high
        volatile uint32_t LUT498H;  ///< Offset: 0x1F94 - Graphic MMU LUT entry 498 high
        volatile uint32_t LUT499H;  ///< Offset: 0x1F9C - Graphic MMU LUT entry 499 high
        volatile uint32_t LUT500H;  ///< Offset: 0x1FA4 - Graphic MMU LUT entry 500 high
        volatile uint32_t LUT501H;  ///< Offset: 0x1FAC - Graphic MMU LUT entry 501 high
        volatile uint32_t LUT502H;  ///< Offset: 0x1FB4 - Graphic MMU LUT entry 502 high
        volatile uint32_t LUT503H;  ///< Offset: 0x1FBC - Graphic MMU LUT entry 503 high
        volatile uint32_t LUT504H;  ///< Offset: 0x1FC4 - Graphic MMU LUT entry 504 high
        volatile uint32_t LUT505H;  ///< Offset: 0x1FCC - Graphic MMU LUT entry 505 high
        volatile uint32_t LUT506H;  ///< Offset: 0x1FD4 - Graphic MMU LUT entry 506 high
        volatile uint32_t LUT507H;  ///< Offset: 0x1FDC - Graphic MMU LUT entry 507 high
        volatile uint32_t LUT508H;  ///< Offset: 0x1FE4 - Graphic MMU LUT entry 508 high
        volatile uint32_t LUT509H;  ///< Offset: 0x1FEC - Graphic MMU LUT entry 509 high
        volatile uint32_t LUT510H;  ///< Offset: 0x1FF4 - Graphic MMU LUT entry 510 high
        volatile uint32_t LUT511H;  ///< Offset: 0x1FFC - Graphic MMU LUT entry 511 high
        volatile uint32_t LUT512H;  ///< Offset: 0x2004 - Graphic MMU LUT entry 512 high
        volatile uint32_t LUT513H;  ///< Offset: 0x200C - Graphic MMU LUT entry 513 high
        volatile uint32_t LUT514H;  ///< Offset: 0x2014 - Graphic MMU LUT entry 514 high
        volatile uint32_t LUT515H;  ///< Offset: 0x201C - Graphic MMU LUT entry 515 high
        volatile uint32_t LUT516H;  ///< Offset: 0x2024 - Graphic MMU LUT entry 516 high
        volatile uint32_t LUT517H;  ///< Offset: 0x202C - Graphic MMU LUT entry 517 high
        volatile uint32_t LUT518H;  ///< Offset: 0x2034 - Graphic MMU LUT entry 518 high
        volatile uint32_t LUT519H;  ///< Offset: 0x203C - Graphic MMU LUT entry 519 high
        volatile uint32_t LUT520H;  ///< Offset: 0x2044 - Graphic MMU LUT entry 520 high
        volatile uint32_t LUT521H;  ///< Offset: 0x204C - Graphic MMU LUT entry 521 high
        volatile uint32_t LUT522H;  ///< Offset: 0x2054 - Graphic MMU LUT entry 522 high
        volatile uint32_t LUT523H;  ///< Offset: 0x205C - Graphic MMU LUT entry 523 high
        volatile uint32_t LUT524H;  ///< Offset: 0x2064 - Graphic MMU LUT entry 524 high
        volatile uint32_t LUT525H;  ///< Offset: 0x206C - Graphic MMU LUT entry 525 high
        volatile uint32_t LUT526H;  ///< Offset: 0x2074 - Graphic MMU LUT entry 526 high
        volatile uint32_t LUT527H;  ///< Offset: 0x207C - Graphic MMU LUT entry 527 high
        volatile uint32_t LUT528H;  ///< Offset: 0x2084 - Graphic MMU LUT entry 528 high
        volatile uint32_t LUT529H;  ///< Offset: 0x208C - Graphic MMU LUT entry 529 high
        volatile uint32_t LUT530H;  ///< Offset: 0x2094 - Graphic MMU LUT entry 530 high
        volatile uint32_t LUT531H;  ///< Offset: 0x209C - Graphic MMU LUT entry 531 high
        volatile uint32_t LUT532H;  ///< Offset: 0x20A4 - Graphic MMU LUT entry 532 high
        volatile uint32_t LUT533H;  ///< Offset: 0x20AC - Graphic MMU LUT entry 533 high
        volatile uint32_t LUT534H;  ///< Offset: 0x20B4 - Graphic MMU LUT entry 534 high
        volatile uint32_t LUT535H;  ///< Offset: 0x20BC - Graphic MMU LUT entry 535 high
        volatile uint32_t LUT536H;  ///< Offset: 0x20C4 - Graphic MMU LUT entry 536 high
        volatile uint32_t LUT537H;  ///< Offset: 0x20CC - Graphic MMU LUT entry 537 high
        volatile uint32_t LUT538H;  ///< Offset: 0x20D4 - Graphic MMU LUT entry 538 high
        volatile uint32_t LUT539H;  ///< Offset: 0x20DC - Graphic MMU LUT entry 539 high
        volatile uint32_t LUT540H;  ///< Offset: 0x20E4 - Graphic MMU LUT entry 540 high
        volatile uint32_t LUT541H;  ///< Offset: 0x20EC - Graphic MMU LUT entry 541 high
        volatile uint32_t LUT542H;  ///< Offset: 0x20F4 - Graphic MMU LUT entry 542 high
        volatile uint32_t LUT543H;  ///< Offset: 0x20FC - Graphic MMU LUT entry 543 high
        volatile uint32_t LUT544H;  ///< Offset: 0x2104 - Graphic MMU LUT entry 544 high
        volatile uint32_t LUT545H;  ///< Offset: 0x210C - Graphic MMU LUT entry 545 high
        volatile uint32_t LUT546H;  ///< Offset: 0x2114 - Graphic MMU LUT entry 546 high
        volatile uint32_t LUT547H;  ///< Offset: 0x211C - Graphic MMU LUT entry 547 high
        volatile uint32_t LUT548H;  ///< Offset: 0x2124 - Graphic MMU LUT entry 548 high
        volatile uint32_t LUT549H;  ///< Offset: 0x212C - Graphic MMU LUT entry 549 high
        volatile uint32_t LUT550H;  ///< Offset: 0x2134 - Graphic MMU LUT entry 550 high
        volatile uint32_t LUT551H;  ///< Offset: 0x213C - Graphic MMU LUT entry 551 high
        volatile uint32_t LUT552H;  ///< Offset: 0x2144 - Graphic MMU LUT entry 552 high
        volatile uint32_t LUT553H;  ///< Offset: 0x214C - Graphic MMU LUT entry 553 high
        volatile uint32_t LUT554H;  ///< Offset: 0x2154 - Graphic MMU LUT entry 554 high
        volatile uint32_t LUT555H;  ///< Offset: 0x215C - Graphic MMU LUT entry 555 high
        volatile uint32_t LUT556H;  ///< Offset: 0x2164 - Graphic MMU LUT entry 556 high
        volatile uint32_t LUT557H;  ///< Offset: 0x216C - Graphic MMU LUT entry 557 high
        volatile uint32_t LUT558H;  ///< Offset: 0x2174 - Graphic MMU LUT entry 558 high
        volatile uint32_t LUT559H;  ///< Offset: 0x217C - Graphic MMU LUT entry 559 high
        volatile uint32_t LUT560H;  ///< Offset: 0x2184 - Graphic MMU LUT entry 560 high
        volatile uint32_t LUT561H;  ///< Offset: 0x218C - Graphic MMU LUT entry 561 high
        volatile uint32_t LUT562H;  ///< Offset: 0x2194 - Graphic MMU LUT entry 562 high
        volatile uint32_t LUT563H;  ///< Offset: 0x219C - Graphic MMU LUT entry 563 high
        volatile uint32_t LUT564H;  ///< Offset: 0x21A4 - Graphic MMU LUT entry 564 high
        volatile uint32_t LUT565H;  ///< Offset: 0x21AC - Graphic MMU LUT entry 565 high
        volatile uint32_t LUT566H;  ///< Offset: 0x21B4 - Graphic MMU LUT entry 566 high
        volatile uint32_t LUT567H;  ///< Offset: 0x21BC - Graphic MMU LUT entry 567 high
        volatile uint32_t LUT568H;  ///< Offset: 0x21C4 - Graphic MMU LUT entry 568 high
        volatile uint32_t LUT569H;  ///< Offset: 0x21CC - Graphic MMU LUT entry 569 high
        volatile uint32_t LUT570H;  ///< Offset: 0x21D4 - Graphic MMU LUT entry 570 high
        volatile uint32_t LUT571H;  ///< Offset: 0x21DC - Graphic MMU LUT entry 571 high
        volatile uint32_t LUT572H;  ///< Offset: 0x21E4 - Graphic MMU LUT entry 572 high
        volatile uint32_t LUT573H;  ///< Offset: 0x21EC - Graphic MMU LUT entry 573 high
        volatile uint32_t LUT574H;  ///< Offset: 0x21F4 - Graphic MMU LUT entry 574 high
        volatile uint32_t LUT575H;  ///< Offset: 0x21FC - Graphic MMU LUT entry 575 high
        volatile uint32_t LUT576H;  ///< Offset: 0x2204 - Graphic MMU LUT entry 576 high
        volatile uint32_t LUT577H;  ///< Offset: 0x220C - Graphic MMU LUT entry 577 high
        volatile uint32_t LUT578H;  ///< Offset: 0x2214 - Graphic MMU LUT entry 578 high
        volatile uint32_t LUT579H;  ///< Offset: 0x221C - Graphic MMU LUT entry 579 high
        volatile uint32_t LUT580H;  ///< Offset: 0x2224 - Graphic MMU LUT entry 580 high
        volatile uint32_t LUT581H;  ///< Offset: 0x222C - Graphic MMU LUT entry 581 high
        volatile uint32_t LUT582H;  ///< Offset: 0x2234 - Graphic MMU LUT entry 582 high
        volatile uint32_t LUT583H;  ///< Offset: 0x223C - Graphic MMU LUT entry 583 high
        volatile uint32_t LUT584H;  ///< Offset: 0x2244 - Graphic MMU LUT entry 584 high
        volatile uint32_t LUT585H;  ///< Offset: 0x224C - Graphic MMU LUT entry 585 high
        volatile uint32_t LUT586H;  ///< Offset: 0x2254 - Graphic MMU LUT entry 586 high
        volatile uint32_t LUT587H;  ///< Offset: 0x225C - Graphic MMU LUT entry 587 high
        volatile uint32_t LUT588H;  ///< Offset: 0x2264 - Graphic MMU LUT entry 588 high
        volatile uint32_t LUT589H;  ///< Offset: 0x226C - Graphic MMU LUT entry 589 high
        volatile uint32_t LUT590H;  ///< Offset: 0x2274 - Graphic MMU LUT entry 590 high
        volatile uint32_t LUT591H;  ///< Offset: 0x227C - Graphic MMU LUT entry 591 high
        volatile uint32_t LUT592H;  ///< Offset: 0x2284 - Graphic MMU LUT entry 592 high
        volatile uint32_t LUT593H;  ///< Offset: 0x228C - Graphic MMU LUT entry 593 high
        volatile uint32_t LUT594H;  ///< Offset: 0x2294 - Graphic MMU LUT entry 594 high
        volatile uint32_t LUT595H;  ///< Offset: 0x229C - Graphic MMU LUT entry 595 high
        volatile uint32_t LUT596H;  ///< Offset: 0x22A4 - Graphic MMU LUT entry 596 high
        volatile uint32_t LUT597H;  ///< Offset: 0x22AC - Graphic MMU LUT entry 597 high
        volatile uint32_t LUT598H;  ///< Offset: 0x22B4 - Graphic MMU LUT entry 598 high
        volatile uint32_t LUT599H;  ///< Offset: 0x22BC - Graphic MMU LUT entry 599 high
        volatile uint32_t LUT600H;  ///< Offset: 0x22C4 - Graphic MMU LUT entry 600 high
        volatile uint32_t LUT601H;  ///< Offset: 0x22CC - Graphic MMU LUT entry 601 high
        volatile uint32_t LUT602H;  ///< Offset: 0x22D4 - Graphic MMU LUT entry 602 high
        volatile uint32_t LUT603H;  ///< Offset: 0x22DC - Graphic MMU LUT entry 603 high
        volatile uint32_t LUT604H;  ///< Offset: 0x22E4 - Graphic MMU LUT entry 604 high
        volatile uint32_t LUT605H;  ///< Offset: 0x22EC - Graphic MMU LUT entry 605 high
        volatile uint32_t LUT606H;  ///< Offset: 0x22F4 - Graphic MMU LUT entry 606 high
        volatile uint32_t LUT607H;  ///< Offset: 0x22FC - Graphic MMU LUT entry 607 high
        volatile uint32_t LUT608H;  ///< Offset: 0x2304 - Graphic MMU LUT entry 608 high
        volatile uint32_t LUT609H;  ///< Offset: 0x230C - Graphic MMU LUT entry 609 high
        volatile uint32_t LUT610H;  ///< Offset: 0x2314 - Graphic MMU LUT entry 610 high
        volatile uint32_t LUT611H;  ///< Offset: 0x231C - Graphic MMU LUT entry 611 high
        volatile uint32_t LUT612H;  ///< Offset: 0x2324 - Graphic MMU LUT entry 612 high
        volatile uint32_t LUT613H;  ///< Offset: 0x232C - Graphic MMU LUT entry 613 high
        volatile uint32_t LUT614H;  ///< Offset: 0x2334 - Graphic MMU LUT entry 614 high
        volatile uint32_t LUT615H;  ///< Offset: 0x233C - Graphic MMU LUT entry 615 high
        volatile uint32_t LUT616H;  ///< Offset: 0x2344 - Graphic MMU LUT entry 616 high
        volatile uint32_t LUT617H;  ///< Offset: 0x234C - Graphic MMU LUT entry 617 high
        volatile uint32_t LUT618H;  ///< Offset: 0x2354 - Graphic MMU LUT entry 618 high
        volatile uint32_t LUT619H;  ///< Offset: 0x235C - Graphic MMU LUT entry 619 high
        volatile uint32_t LUT620H;  ///< Offset: 0x2364 - Graphic MMU LUT entry 620 high
        volatile uint32_t LUT621H;  ///< Offset: 0x236C - Graphic MMU LUT entry 621 high
        volatile uint32_t LUT622H;  ///< Offset: 0x2374 - Graphic MMU LUT entry 622 high
        volatile uint32_t LUT623H;  ///< Offset: 0x237C - Graphic MMU LUT entry 623 high
        volatile uint32_t LUT624H;  ///< Offset: 0x2384 - Graphic MMU LUT entry 624 high
        volatile uint32_t LUT625H;  ///< Offset: 0x238C - Graphic MMU LUT entry 625 high
        volatile uint32_t LUT626H;  ///< Offset: 0x2394 - Graphic MMU LUT entry 626 high
        volatile uint32_t LUT627H;  ///< Offset: 0x239C - Graphic MMU LUT entry 627 high
        volatile uint32_t LUT628H;  ///< Offset: 0x23A4 - Graphic MMU LUT entry 628 high
        volatile uint32_t LUT629H;  ///< Offset: 0x23AC - Graphic MMU LUT entry 629 high
        volatile uint32_t LUT630H;  ///< Offset: 0x23B4 - Graphic MMU LUT entry 630 high
        volatile uint32_t LUT631H;  ///< Offset: 0x23BC - Graphic MMU LUT entry 631 high
        volatile uint32_t LUT632H;  ///< Offset: 0x23C4 - Graphic MMU LUT entry 632 high
        volatile uint32_t LUT633H;  ///< Offset: 0x23CC - Graphic MMU LUT entry 633 high
        volatile uint32_t LUT634H;  ///< Offset: 0x23D4 - Graphic MMU LUT entry 634 high
        volatile uint32_t LUT635H;  ///< Offset: 0x23DC - Graphic MMU LUT entry 635 high
        volatile uint32_t LUT636H;  ///< Offset: 0x23E4 - Graphic MMU LUT entry 636 high
        volatile uint32_t LUT637H;  ///< Offset: 0x23EC - Graphic MMU LUT entry 637 high
        volatile uint32_t LUT638H;  ///< Offset: 0x23F4 - Graphic MMU LUT entry 638 high
        volatile uint32_t LUT639H;  ///< Offset: 0x23FC - Graphic MMU LUT entry 639 high
        volatile uint32_t LUT640H;  ///< Offset: 0x2404 - Graphic MMU LUT entry 640 high
        volatile uint32_t LUT641H;  ///< Offset: 0x240C - Graphic MMU LUT entry 641 high
        volatile uint32_t LUT642H;  ///< Offset: 0x2414 - Graphic MMU LUT entry 642 high
        volatile uint32_t LUT643H;  ///< Offset: 0x241C - Graphic MMU LUT entry 643 high
        volatile uint32_t LUT644H;  ///< Offset: 0x2424 - Graphic MMU LUT entry 644 high
        volatile uint32_t LUT645H;  ///< Offset: 0x242C - Graphic MMU LUT entry 645 high
        volatile uint32_t LUT646H;  ///< Offset: 0x2434 - Graphic MMU LUT entry 646 high
        volatile uint32_t LUT647H;  ///< Offset: 0x243C - Graphic MMU LUT entry 647 high
        volatile uint32_t LUT648H;  ///< Offset: 0x2444 - Graphic MMU LUT entry 648 high
        volatile uint32_t LUT649H;  ///< Offset: 0x244C - Graphic MMU LUT entry 649 high
        volatile uint32_t LUT650H;  ///< Offset: 0x2454 - Graphic MMU LUT entry 650 high
        volatile uint32_t LUT651H;  ///< Offset: 0x245C - Graphic MMU LUT entry 651 high
        volatile uint32_t LUT652H;  ///< Offset: 0x2464 - Graphic MMU LUT entry 652 high
        volatile uint32_t LUT653H;  ///< Offset: 0x246C - Graphic MMU LUT entry 653 high
        volatile uint32_t LUT654H;  ///< Offset: 0x2474 - Graphic MMU LUT entry 654 high
        volatile uint32_t LUT655H;  ///< Offset: 0x247C - Graphic MMU LUT entry 655 high
        volatile uint32_t LUT656H;  ///< Offset: 0x2484 - Graphic MMU LUT entry 656 high
        volatile uint32_t LUT657H;  ///< Offset: 0x248C - Graphic MMU LUT entry 657 high
        volatile uint32_t LUT658H;  ///< Offset: 0x2494 - Graphic MMU LUT entry 658 high
        volatile uint32_t LUT659H;  ///< Offset: 0x249C - Graphic MMU LUT entry 659 high
        volatile uint32_t LUT660H;  ///< Offset: 0x24A4 - Graphic MMU LUT entry 660 high
        volatile uint32_t LUT661H;  ///< Offset: 0x24AC - Graphic MMU LUT entry 661 high
        volatile uint32_t LUT662H;  ///< Offset: 0x24B4 - Graphic MMU LUT entry 662 high
        volatile uint32_t LUT663H;  ///< Offset: 0x24BC - Graphic MMU LUT entry 663 high
        volatile uint32_t LUT664H;  ///< Offset: 0x24C4 - Graphic MMU LUT entry 664 high
        volatile uint32_t LUT665H;  ///< Offset: 0x24CC - Graphic MMU LUT entry 665 high
        volatile uint32_t LUT666H;  ///< Offset: 0x24D4 - Graphic MMU LUT entry 666 high
        volatile uint32_t LUT667H;  ///< Offset: 0x24DC - Graphic MMU LUT entry 667 high
        volatile uint32_t LUT668H;  ///< Offset: 0x24E4 - Graphic MMU LUT entry 668 high
        volatile uint32_t LUT669H;  ///< Offset: 0x24EC - Graphic MMU LUT entry 669 high
        volatile uint32_t LUT670H;  ///< Offset: 0x24F4 - Graphic MMU LUT entry 670 high
        volatile uint32_t LUT671H;  ///< Offset: 0x24FC - Graphic MMU LUT entry 671 high
        volatile uint32_t LUT672H;  ///< Offset: 0x2504 - Graphic MMU LUT entry 672 high
        volatile uint32_t LUT673H;  ///< Offset: 0x250C - Graphic MMU LUT entry 673 high
        volatile uint32_t LUT674H;  ///< Offset: 0x2514 - Graphic MMU LUT entry 674 high
        volatile uint32_t LUT675H;  ///< Offset: 0x251C - Graphic MMU LUT entry 675 high
        volatile uint32_t LUT676H;  ///< Offset: 0x2524 - Graphic MMU LUT entry 676 high
        volatile uint32_t LUT677H;  ///< Offset: 0x252C - Graphic MMU LUT entry 677 high
        volatile uint32_t LUT678H;  ///< Offset: 0x2534 - Graphic MMU LUT entry 678 high
        volatile uint32_t LUT679H;  ///< Offset: 0x253C - Graphic MMU LUT entry 679 high
        volatile uint32_t LUT680H;  ///< Offset: 0x2544 - Graphic MMU LUT entry 680 high
        volatile uint32_t LUT681H;  ///< Offset: 0x254C - Graphic MMU LUT entry 681 high
        volatile uint32_t LUT682H;  ///< Offset: 0x2554 - Graphic MMU LUT entry 682 high
        volatile uint32_t LUT683H;  ///< Offset: 0x255C - Graphic MMU LUT entry 683 high
        volatile uint32_t LUT684H;  ///< Offset: 0x2564 - Graphic MMU LUT entry 684 high
        volatile uint32_t LUT685H;  ///< Offset: 0x256C - Graphic MMU LUT entry 685 high
        volatile uint32_t LUT686H;  ///< Offset: 0x2574 - Graphic MMU LUT entry 686 high
        volatile uint32_t LUT687H;  ///< Offset: 0x257C - Graphic MMU LUT entry 687 high
        volatile uint32_t LUT688H;  ///< Offset: 0x2584 - Graphic MMU LUT entry 688 high
        volatile uint32_t LUT689H;  ///< Offset: 0x258C - Graphic MMU LUT entry 689 high
        volatile uint32_t LUT690H;  ///< Offset: 0x2594 - Graphic MMU LUT entry 690 high
        volatile uint32_t LUT691H;  ///< Offset: 0x259C - Graphic MMU LUT entry 691 high
        volatile uint32_t LUT692H;  ///< Offset: 0x25A4 - Graphic MMU LUT entry 692 high
        volatile uint32_t LUT693H;  ///< Offset: 0x25AC - Graphic MMU LUT entry 693 high
        volatile uint32_t LUT694H;  ///< Offset: 0x25B4 - Graphic MMU LUT entry 694 high
        volatile uint32_t LUT695H;  ///< Offset: 0x25BC - Graphic MMU LUT entry 695 high
        volatile uint32_t LUT696H;  ///< Offset: 0x25C4 - Graphic MMU LUT entry 696 high
        volatile uint32_t LUT697H;  ///< Offset: 0x25CC - Graphic MMU LUT entry 697 high
        volatile uint32_t LUT698H;  ///< Offset: 0x25D4 - Graphic MMU LUT entry 698 high
        volatile uint32_t LUT699H;  ///< Offset: 0x25DC - Graphic MMU LUT entry 699 high
        volatile uint32_t LUT700H;  ///< Offset: 0x25E4 - Graphic MMU LUT entry 700 high
        volatile uint32_t LUT701H;  ///< Offset: 0x25EC - Graphic MMU LUT entry 701 high
        volatile uint32_t LUT702H;  ///< Offset: 0x25F4 - Graphic MMU LUT entry 702 high
        volatile uint32_t LUT703H;  ///< Offset: 0x25FC - Graphic MMU LUT entry 703 high
        volatile uint32_t LUT704H;  ///< Offset: 0x2604 - Graphic MMU LUT entry 704 high
        volatile uint32_t LUT705H;  ///< Offset: 0x260C - Graphic MMU LUT entry 705 high
        volatile uint32_t LUT706H;  ///< Offset: 0x2614 - Graphic MMU LUT entry 706 high
        volatile uint32_t LUT707H;  ///< Offset: 0x261C - Graphic MMU LUT entry 707 high
        volatile uint32_t LUT708H;  ///< Offset: 0x2624 - Graphic MMU LUT entry 708 high
        volatile uint32_t LUT709H;  ///< Offset: 0x262C - Graphic MMU LUT entry 709 high
        volatile uint32_t LUT710H;  ///< Offset: 0x2634 - Graphic MMU LUT entry 710 high
        volatile uint32_t LUT711H;  ///< Offset: 0x263C - Graphic MMU LUT entry 711 high
        volatile uint32_t LUT712H;  ///< Offset: 0x2644 - Graphic MMU LUT entry 712 high
        volatile uint32_t LUT713H;  ///< Offset: 0x264C - Graphic MMU LUT entry 713 high
        volatile uint32_t LUT714H;  ///< Offset: 0x2654 - Graphic MMU LUT entry 714 high
        volatile uint32_t LUT715H;  ///< Offset: 0x265C - Graphic MMU LUT entry 715 high
        volatile uint32_t LUT716H;  ///< Offset: 0x2664 - Graphic MMU LUT entry 716 high
        volatile uint32_t LUT717H;  ///< Offset: 0x266C - Graphic MMU LUT entry 717 high
        volatile uint32_t LUT718H;  ///< Offset: 0x2674 - Graphic MMU LUT entry 718 high
        volatile uint32_t LUT719H;  ///< Offset: 0x267C - Graphic MMU LUT entry 719 high
        volatile uint32_t LUT720H;  ///< Offset: 0x2684 - Graphic MMU LUT entry 720 high
        volatile uint32_t LUT721H;  ///< Offset: 0x268C - Graphic MMU LUT entry 721 high
        volatile uint32_t LUT722H;  ///< Offset: 0x2694 - Graphic MMU LUT entry 722 high
        volatile uint32_t LUT723H;  ///< Offset: 0x269C - Graphic MMU LUT entry 723 high
        volatile uint32_t LUT724H;  ///< Offset: 0x26A4 - Graphic MMU LUT entry 724 high
        volatile uint32_t LUT725H;  ///< Offset: 0x26AC - Graphic MMU LUT entry 725 high
        volatile uint32_t LUT726H;  ///< Offset: 0x26B4 - Graphic MMU LUT entry 726 high
        volatile uint32_t LUT727H;  ///< Offset: 0x26BC - Graphic MMU LUT entry 727 high
        volatile uint32_t LUT728H;  ///< Offset: 0x26C4 - Graphic MMU LUT entry 728 high
        volatile uint32_t LUT729H;  ///< Offset: 0x26CC - Graphic MMU LUT entry 729 high
        volatile uint32_t LUT730H;  ///< Offset: 0x26D4 - Graphic MMU LUT entry 730 high
        volatile uint32_t LUT731H;  ///< Offset: 0x26DC - Graphic MMU LUT entry 731 high
        volatile uint32_t LUT732H;  ///< Offset: 0x26E4 - Graphic MMU LUT entry 732 high
        volatile uint32_t LUT733H;  ///< Offset: 0x26EC - Graphic MMU LUT entry 733 high
        volatile uint32_t LUT734H;  ///< Offset: 0x26F4 - Graphic MMU LUT entry 734 high
        volatile uint32_t LUT735H;  ///< Offset: 0x26FC - Graphic MMU LUT entry 735 high
        volatile uint32_t LUT736H;  ///< Offset: 0x2704 - Graphic MMU LUT entry 736 high
        volatile uint32_t LUT737H;  ///< Offset: 0x270C - Graphic MMU LUT entry 737 high
        volatile uint32_t LUT738H;  ///< Offset: 0x2714 - Graphic MMU LUT entry 738 high
        volatile uint32_t LUT739H;  ///< Offset: 0x271C - Graphic MMU LUT entry 739 high
        volatile uint32_t LUT740H;  ///< Offset: 0x2724 - Graphic MMU LUT entry 740 high
        volatile uint32_t LUT741H;  ///< Offset: 0x272C - Graphic MMU LUT entry 741 high
        volatile uint32_t LUT742H;  ///< Offset: 0x2734 - Graphic MMU LUT entry 742 high
        volatile uint32_t LUT743H;  ///< Offset: 0x273C - Graphic MMU LUT entry 743 high
        volatile uint32_t LUT744H;  ///< Offset: 0x2744 - Graphic MMU LUT entry 744 high
        volatile uint32_t LUT745H;  ///< Offset: 0x274C - Graphic MMU LUT entry 745 high
        volatile uint32_t LUT746H;  ///< Offset: 0x2754 - Graphic MMU LUT entry 746 high
        volatile uint32_t LUT747H;  ///< Offset: 0x275C - Graphic MMU LUT entry 747 high
        volatile uint32_t LUT748H;  ///< Offset: 0x2764 - Graphic MMU LUT entry 748 high
        volatile uint32_t LUT749H;  ///< Offset: 0x276C - Graphic MMU LUT entry 749 high
        volatile uint32_t LUT750H;  ///< Offset: 0x2774 - Graphic MMU LUT entry 750 high
        volatile uint32_t LUT751H;  ///< Offset: 0x277C - Graphic MMU LUT entry 751 high
        volatile uint32_t LUT752H;  ///< Offset: 0x2784 - Graphic MMU LUT entry 752 high
        volatile uint32_t LUT753H;  ///< Offset: 0x278C - Graphic MMU LUT entry 753 high
        volatile uint32_t LUT754H;  ///< Offset: 0x2794 - Graphic MMU LUT entry 754 high
        volatile uint32_t LUT755H;  ///< Offset: 0x279C - Graphic MMU LUT entry 755 high
        volatile uint32_t LUT756H;  ///< Offset: 0x27A4 - Graphic MMU LUT entry 756 high
        volatile uint32_t LUT757H;  ///< Offset: 0x27AC - Graphic MMU LUT entry 757 high
        volatile uint32_t LUT758H;  ///< Offset: 0x27B4 - Graphic MMU LUT entry 758 high
        volatile uint32_t LUT759H;  ///< Offset: 0x27BC - Graphic MMU LUT entry 759 high
        volatile uint32_t LUT760H;  ///< Offset: 0x27C4 - Graphic MMU LUT entry 760 high
        volatile uint32_t LUT761H;  ///< Offset: 0x27CC - Graphic MMU LUT entry 761 high
        volatile uint32_t LUT762H;  ///< Offset: 0x27D4 - Graphic MMU LUT entry 762 high
        volatile uint32_t LUT763H;  ///< Offset: 0x27DC - Graphic MMU LUT entry 763 high
        volatile uint32_t LUT764H;  ///< Offset: 0x27E4 - Graphic MMU LUT entry 764 high
        volatile uint32_t LUT765H;  ///< Offset: 0x27EC - Graphic MMU LUT entry 765 high
        volatile uint32_t LUT766H;  ///< Offset: 0x27F4 - Graphic MMU LUT entry 766 high
        volatile uint32_t LUT767H;  ///< Offset: 0x27FC - Graphic MMU LUT entry 767 high
        volatile uint32_t LUT768H;  ///< Offset: 0x2804 - Graphic MMU LUT entry 768 high
        volatile uint32_t LUT769H;  ///< Offset: 0x280C - Graphic MMU LUT entry 769 high
        volatile uint32_t LUT770H;  ///< Offset: 0x2814 - Graphic MMU LUT entry 770 high
        volatile uint32_t LUT771H;  ///< Offset: 0x281C - Graphic MMU LUT entry 771 high
        volatile uint32_t LUT772H;  ///< Offset: 0x2824 - Graphic MMU LUT entry 772 high
        volatile uint32_t LUT773H;  ///< Offset: 0x282C - Graphic MMU LUT entry 773 high
        volatile uint32_t LUT774H;  ///< Offset: 0x2834 - Graphic MMU LUT entry 774 high
        volatile uint32_t LUT775H;  ///< Offset: 0x283C - Graphic MMU LUT entry 775 high
        volatile uint32_t LUT776H;  ///< Offset: 0x2844 - Graphic MMU LUT entry 776 high
        volatile uint32_t LUT777H;  ///< Offset: 0x284C - Graphic MMU LUT entry 777 high
        volatile uint32_t LUT778H;  ///< Offset: 0x2854 - Graphic MMU LUT entry 778 high
        volatile uint32_t LUT779H;  ///< Offset: 0x285C - Graphic MMU LUT entry 779 high
        volatile uint32_t LUT780H;  ///< Offset: 0x2864 - Graphic MMU LUT entry 780 high
        volatile uint32_t LUT781H;  ///< Offset: 0x286C - Graphic MMU LUT entry 781 high
        volatile uint32_t LUT782H;  ///< Offset: 0x2874 - Graphic MMU LUT entry 782 high
        volatile uint32_t LUT783H;  ///< Offset: 0x287C - Graphic MMU LUT entry 783 high
        volatile uint32_t LUT784H;  ///< Offset: 0x2884 - Graphic MMU LUT entry 784 high
        volatile uint32_t LUT785H;  ///< Offset: 0x288C - Graphic MMU LUT entry 785 high
        volatile uint32_t LUT786H;  ///< Offset: 0x2894 - Graphic MMU LUT entry 786 high
        volatile uint32_t LUT787H;  ///< Offset: 0x289C - Graphic MMU LUT entry 787 high
        volatile uint32_t LUT788H;  ///< Offset: 0x28A4 - Graphic MMU LUT entry 788 high
        volatile uint32_t LUT789H;  ///< Offset: 0x28AC - Graphic MMU LUT entry 789 high
        volatile uint32_t LUT790H;  ///< Offset: 0x28B4 - Graphic MMU LUT entry 790 high
        volatile uint32_t LUT791H;  ///< Offset: 0x28BC - Graphic MMU LUT entry 791 high
        volatile uint32_t LUT792H;  ///< Offset: 0x28C4 - Graphic MMU LUT entry 792 high
        volatile uint32_t LUT793H;  ///< Offset: 0x28CC - Graphic MMU LUT entry 793 high
        volatile uint32_t LUT794H;  ///< Offset: 0x28D4 - Graphic MMU LUT entry 794 high
        volatile uint32_t LUT795H;  ///< Offset: 0x28DC - Graphic MMU LUT entry 795 high
        volatile uint32_t LUT796H;  ///< Offset: 0x28E4 - Graphic MMU LUT entry 796 high
        volatile uint32_t LUT797H;  ///< Offset: 0x28EC - Graphic MMU LUT entry 797 high
        volatile uint32_t LUT798H;  ///< Offset: 0x28F4 - Graphic MMU LUT entry 798 high
        volatile uint32_t LUT799H;  ///< Offset: 0x28FC - Graphic MMU LUT entry 799 high
        volatile uint32_t LUT800H;  ///< Offset: 0x2904 - Graphic MMU LUT entry 800 high
        volatile uint32_t LUT801H;  ///< Offset: 0x290C - Graphic MMU LUT entry 801 high
        volatile uint32_t LUT802H;  ///< Offset: 0x2914 - Graphic MMU LUT entry 802 high
        volatile uint32_t LUT803H;  ///< Offset: 0x291C - Graphic MMU LUT entry 803 high
        volatile uint32_t LUT804H;  ///< Offset: 0x2924 - Graphic MMU LUT entry 804 high
        volatile uint32_t LUT805H;  ///< Offset: 0x292C - Graphic MMU LUT entry 805 high
        volatile uint32_t LUT806H;  ///< Offset: 0x2934 - Graphic MMU LUT entry 806 high
        volatile uint32_t LUT807H;  ///< Offset: 0x293C - Graphic MMU LUT entry 807 high
        volatile uint32_t LUT808H;  ///< Offset: 0x2944 - Graphic MMU LUT entry 808 high
        volatile uint32_t LUT809H;  ///< Offset: 0x294C - Graphic MMU LUT entry 809 high
        volatile uint32_t LUT810H;  ///< Offset: 0x2954 - Graphic MMU LUT entry 810 high
        volatile uint32_t LUT811H;  ///< Offset: 0x295C - Graphic MMU LUT entry 811 high
        volatile uint32_t LUT812H;  ///< Offset: 0x2964 - Graphic MMU LUT entry 812 high
        volatile uint32_t LUT813H;  ///< Offset: 0x296C - Graphic MMU LUT entry 813 high
        volatile uint32_t LUT814H;  ///< Offset: 0x2974 - Graphic MMU LUT entry 814 high
        volatile uint32_t LUT815H;  ///< Offset: 0x297C - Graphic MMU LUT entry 815 high
        volatile uint32_t LUT816H;  ///< Offset: 0x2984 - Graphic MMU LUT entry 816 high
        volatile uint32_t LUT817H;  ///< Offset: 0x298C - Graphic MMU LUT entry 817 high
        volatile uint32_t LUT818H;  ///< Offset: 0x2994 - Graphic MMU LUT entry 818 high
        volatile uint32_t LUT819H;  ///< Offset: 0x299C - Graphic MMU LUT entry 819 high
        volatile uint32_t LUT820H;  ///< Offset: 0x29A4 - Graphic MMU LUT entry 820 high
        volatile uint32_t LUT821H;  ///< Offset: 0x29AC - Graphic MMU LUT entry 821 high
        volatile uint32_t LUT822H;  ///< Offset: 0x29B4 - Graphic MMU LUT entry 822 high
        volatile uint32_t LUT823H;  ///< Offset: 0x29BC - Graphic MMU LUT entry 823 high
        volatile uint32_t LUT824H;  ///< Offset: 0x29C4 - Graphic MMU LUT entry 824 high
        volatile uint32_t LUT825H;  ///< Offset: 0x29CC - Graphic MMU LUT entry 825 high
        volatile uint32_t LUT826H;  ///< Offset: 0x29D4 - Graphic MMU LUT entry 826 high
        volatile uint32_t LUT827H;  ///< Offset: 0x29DC - Graphic MMU LUT entry 827 high
        volatile uint32_t LUT828H;  ///< Offset: 0x29E4 - Graphic MMU LUT entry 828 high
        volatile uint32_t LUT829H;  ///< Offset: 0x29EC - Graphic MMU LUT entry 829 high
        volatile uint32_t LUT830H;  ///< Offset: 0x29F4 - Graphic MMU LUT entry 830 high
        volatile uint32_t LUT831H;  ///< Offset: 0x29FC - Graphic MMU LUT entry 831 high
        volatile uint32_t LUT832H;  ///< Offset: 0x2A04 - Graphic MMU LUT entry 832 high
        volatile uint32_t LUT833H;  ///< Offset: 0x2A0C - Graphic MMU LUT entry 833 high
        volatile uint32_t LUT834H;  ///< Offset: 0x2A14 - Graphic MMU LUT entry 834 high
        volatile uint32_t LUT835H;  ///< Offset: 0x2A1C - Graphic MMU LUT entry 835 high
        volatile uint32_t LUT836H;  ///< Offset: 0x2A24 - Graphic MMU LUT entry 836 high
        volatile uint32_t LUT837H;  ///< Offset: 0x2A2C - Graphic MMU LUT entry 837 high
        volatile uint32_t LUT838H;  ///< Offset: 0x2A34 - Graphic MMU LUT entry 838 high
        volatile uint32_t LUT839H;  ///< Offset: 0x2A3C - Graphic MMU LUT entry 839 high
        volatile uint32_t LUT840H;  ///< Offset: 0x2A44 - Graphic MMU LUT entry 840 high
        volatile uint32_t LUT841H;  ///< Offset: 0x2A4C - Graphic MMU LUT entry 841 high
        volatile uint32_t LUT842H;  ///< Offset: 0x2A54 - Graphic MMU LUT entry 842 high
        volatile uint32_t LUT843H;  ///< Offset: 0x2A5C - Graphic MMU LUT entry 843 high
        volatile uint32_t LUT844H;  ///< Offset: 0x2A64 - Graphic MMU LUT entry 844 high
        volatile uint32_t LUT845H;  ///< Offset: 0x2A6C - Graphic MMU LUT entry 845 high
        volatile uint32_t LUT846H;  ///< Offset: 0x2A74 - Graphic MMU LUT entry 846 high
        volatile uint32_t LUT847H;  ///< Offset: 0x2A7C - Graphic MMU LUT entry 847 high
        volatile uint32_t LUT848H;  ///< Offset: 0x2A84 - Graphic MMU LUT entry 848 high
        volatile uint32_t LUT849H;  ///< Offset: 0x2A8C - Graphic MMU LUT entry 849 high
        volatile uint32_t LUT850H;  ///< Offset: 0x2A94 - Graphic MMU LUT entry 850 high
        volatile uint32_t LUT851H;  ///< Offset: 0x2A9C - Graphic MMU LUT entry 851 high
        volatile uint32_t LUT852H;  ///< Offset: 0x2AA4 - Graphic MMU LUT entry 852 high
        volatile uint32_t LUT853H;  ///< Offset: 0x2AAC - Graphic MMU LUT entry 853 high
        volatile uint32_t LUT854H;  ///< Offset: 0x2AB4 - Graphic MMU LUT entry 854 high
        volatile uint32_t LUT855H;  ///< Offset: 0x2ABC - Graphic MMU LUT entry 855 high
        volatile uint32_t LUT856H;  ///< Offset: 0x2AC4 - Graphic MMU LUT entry 856 high
        volatile uint32_t LUT857H;  ///< Offset: 0x2ACC - Graphic MMU LUT entry 857 high
        volatile uint32_t LUT858H;  ///< Offset: 0x2AD4 - Graphic MMU LUT entry 858 high
        volatile uint32_t LUT859H;  ///< Offset: 0x2ADC - Graphic MMU LUT entry 859 high
        volatile uint32_t LUT860H;  ///< Offset: 0x2AE4 - Graphic MMU LUT entry 860 high
        volatile uint32_t LUT861H;  ///< Offset: 0x2AEC - Graphic MMU LUT entry 861 high
        volatile uint32_t LUT862H;  ///< Offset: 0x2AF4 - Graphic MMU LUT entry 862 high
        volatile uint32_t LUT863H;  ///< Offset: 0x2AFC - Graphic MMU LUT entry 863 high
        volatile uint32_t LUT864H;  ///< Offset: 0x2B04 - Graphic MMU LUT entry 864 high
        volatile uint32_t LUT865H;  ///< Offset: 0x2B0C - Graphic MMU LUT entry 865 high
        volatile uint32_t LUT866H;  ///< Offset: 0x2B14 - Graphic MMU LUT entry 866 high
        volatile uint32_t LUT867H;  ///< Offset: 0x2B1C - Graphic MMU LUT entry 867 high
        volatile uint32_t LUT868H;  ///< Offset: 0x2B24 - Graphic MMU LUT entry 868 high
        volatile uint32_t LUT869H;  ///< Offset: 0x2B2C - Graphic MMU LUT entry 869 high
        volatile uint32_t LUT870H;  ///< Offset: 0x2B34 - Graphic MMU LUT entry 870 high
        volatile uint32_t LUT871H;  ///< Offset: 0x2B3C - Graphic MMU LUT entry 871 high
        volatile uint32_t LUT872H;  ///< Offset: 0x2B44 - Graphic MMU LUT entry 872 high
        volatile uint32_t LUT873H;  ///< Offset: 0x2B4C - Graphic MMU LUT entry 873 high
        volatile uint32_t LUT874H;  ///< Offset: 0x2B54 - Graphic MMU LUT entry 874 high
        volatile uint32_t LUT875H;  ///< Offset: 0x2B5C - Graphic MMU LUT entry 875 high
        volatile uint32_t LUT876H;  ///< Offset: 0x2B64 - Graphic MMU LUT entry 876 high
        volatile uint32_t LUT877H;  ///< Offset: 0x2B6C - Graphic MMU LUT entry 877 high
        volatile uint32_t LUT878H;  ///< Offset: 0x2B74 - Graphic MMU LUT entry 878 high
        volatile uint32_t LUT879H;  ///< Offset: 0x2B7C - Graphic MMU LUT entry 879 high
        volatile uint32_t LUT880H;  ///< Offset: 0x2B84 - Graphic MMU LUT entry 880 high
        volatile uint32_t LUT881H;  ///< Offset: 0x2B8C - Graphic MMU LUT entry 881 high
        volatile uint32_t LUT882H;  ///< Offset: 0x2B94 - Graphic MMU LUT entry 882 high
        volatile uint32_t LUT883H;  ///< Offset: 0x2B9C - Graphic MMU LUT entry 883 high
        volatile uint32_t LUT884H;  ///< Offset: 0x2BA4 - Graphic MMU LUT entry 884 high
        volatile uint32_t LUT885H;  ///< Offset: 0x2BAC - Graphic MMU LUT entry 885 high
        volatile uint32_t LUT886H;  ///< Offset: 0x2BB4 - Graphic MMU LUT entry 886 high
        volatile uint32_t LUT887H;  ///< Offset: 0x2BBC - Graphic MMU LUT entry 887 high
        volatile uint32_t LUT888H;  ///< Offset: 0x2BC4 - Graphic MMU LUT entry 888 high
        volatile uint32_t LUT889H;  ///< Offset: 0x2BCC - Graphic MMU LUT entry 889 high
        volatile uint32_t LUT890H;  ///< Offset: 0x2BD4 - Graphic MMU LUT entry 890 high
        volatile uint32_t LUT891H;  ///< Offset: 0x2BDC - Graphic MMU LUT entry 891 high
        volatile uint32_t LUT892H;  ///< Offset: 0x2BE4 - Graphic MMU LUT entry 892 high
        volatile uint32_t LUT893H;  ///< Offset: 0x2BEC - Graphic MMU LUT entry 893 high
        volatile uint32_t LUT894H;  ///< Offset: 0x2BF4 - Graphic MMU LUT entry 894 high
        volatile uint32_t LUT895H;  ///< Offset: 0x2BFC - Graphic MMU LUT entry 895 high
        volatile uint32_t LUT896H;  ///< Offset: 0x2C04 - Graphic MMU LUT entry 896 high
        volatile uint32_t LUT897H;  ///< Offset: 0x2C0C - Graphic MMU LUT entry 897 high
        volatile uint32_t LUT898H;  ///< Offset: 0x2C14 - Graphic MMU LUT entry 898 high
        volatile uint32_t LUT899H;  ///< Offset: 0x2C1C - Graphic MMU LUT entry 899 high
        volatile uint32_t LUT900H;  ///< Offset: 0x2C24 - Graphic MMU LUT entry 900 high
        volatile uint32_t LUT901H;  ///< Offset: 0x2C2C - Graphic MMU LUT entry 901 high
        volatile uint32_t LUT902H;  ///< Offset: 0x2C34 - Graphic MMU LUT entry 902 high
        volatile uint32_t LUT903H;  ///< Offset: 0x2C3C - Graphic MMU LUT entry 903 high
        volatile uint32_t LUT904H;  ///< Offset: 0x2C44 - Graphic MMU LUT entry 904 high
        volatile uint32_t LUT905H;  ///< Offset: 0x2C4C - Graphic MMU LUT entry 905 high
        volatile uint32_t LUT906H;  ///< Offset: 0x2C54 - Graphic MMU LUT entry 906 high
        volatile uint32_t LUT907H;  ///< Offset: 0x2C5C - Graphic MMU LUT entry 907 high
        volatile uint32_t LUT908H;  ///< Offset: 0x2C64 - Graphic MMU LUT entry 908 high
        volatile uint32_t LUT909H;  ///< Offset: 0x2C6C - Graphic MMU LUT entry 909 high
        volatile uint32_t LUT910H;  ///< Offset: 0x2C74 - Graphic MMU LUT entry 910 high
        volatile uint32_t LUT911H;  ///< Offset: 0x2C7C - Graphic MMU LUT entry 911 high
        volatile uint32_t LUT912H;  ///< Offset: 0x2C84 - Graphic MMU LUT entry 912 high
        volatile uint32_t LUT913H;  ///< Offset: 0x2C8C - Graphic MMU LUT entry 913 high
        volatile uint32_t LUT914H;  ///< Offset: 0x2C94 - Graphic MMU LUT entry 914 high
        volatile uint32_t LUT915H;  ///< Offset: 0x2C9C - Graphic MMU LUT entry 915 high
        volatile uint32_t LUT916H;  ///< Offset: 0x2CA4 - Graphic MMU LUT entry 916 high
        volatile uint32_t LUT917H;  ///< Offset: 0x2CAC - Graphic MMU LUT entry 917 high
        volatile uint32_t LUT918H;  ///< Offset: 0x2CB4 - Graphic MMU LUT entry 918 high
        volatile uint32_t LUT919H;  ///< Offset: 0x2CBC - Graphic MMU LUT entry 919 high
        volatile uint32_t LUT920H;  ///< Offset: 0x2CC4 - Graphic MMU LUT entry 920 high
        volatile uint32_t LUT921H;  ///< Offset: 0x2CCC - Graphic MMU LUT entry 921 high
        volatile uint32_t LUT922H;  ///< Offset: 0x2CD4 - Graphic MMU LUT entry 922 high
        volatile uint32_t LUT923H;  ///< Offset: 0x2CDC - Graphic MMU LUT entry 923 high
        volatile uint32_t LUT924H;  ///< Offset: 0x2CE4 - Graphic MMU LUT entry 924 high
        volatile uint32_t LUT925H;  ///< Offset: 0x2CEC - Graphic MMU LUT entry 925 high
        volatile uint32_t LUT926H;  ///< Offset: 0x2CF4 - Graphic MMU LUT entry 926 high
        volatile uint32_t LUT927H;  ///< Offset: 0x2CFC - Graphic MMU LUT entry 927 high
        volatile uint32_t LUT928H;  ///< Offset: 0x2D04 - Graphic MMU LUT entry 928 high
        volatile uint32_t LUT929H;  ///< Offset: 0x2D0C - Graphic MMU LUT entry 929 high
        volatile uint32_t LUT930H;  ///< Offset: 0x2D14 - Graphic MMU LUT entry 930 high
        volatile uint32_t LUT931H;  ///< Offset: 0x2D1C - Graphic MMU LUT entry 931 high
        volatile uint32_t LUT932H;  ///< Offset: 0x2D24 - Graphic MMU LUT entry 932 high
        volatile uint32_t LUT933H;  ///< Offset: 0x2D2C - Graphic MMU LUT entry 933 high
        volatile uint32_t LUT934H;  ///< Offset: 0x2D34 - Graphic MMU LUT entry 934 high
        volatile uint32_t LUT935H;  ///< Offset: 0x2D3C - Graphic MMU LUT entry 935 high
        volatile uint32_t LUT936H;  ///< Offset: 0x2D44 - Graphic MMU LUT entry 936 high
        volatile uint32_t LUT937H;  ///< Offset: 0x2D4C - Graphic MMU LUT entry 937 high
        volatile uint32_t LUT938H;  ///< Offset: 0x2D54 - Graphic MMU LUT entry 938 high
        volatile uint32_t LUT939H;  ///< Offset: 0x2D5C - Graphic MMU LUT entry 939 high
        volatile uint32_t LUT940H;  ///< Offset: 0x2D64 - Graphic MMU LUT entry 940 high
        volatile uint32_t LUT941H;  ///< Offset: 0x2D6C - Graphic MMU LUT entry 941 high
        volatile uint32_t LUT942H;  ///< Offset: 0x2D74 - Graphic MMU LUT entry 942 high
        volatile uint32_t LUT943H;  ///< Offset: 0x2D7C - Graphic MMU LUT entry 943 high
        volatile uint32_t LUT944H;  ///< Offset: 0x2D84 - Graphic MMU LUT entry 944 high
        volatile uint32_t LUT945H;  ///< Offset: 0x2D8C - Graphic MMU LUT entry 945 high
        volatile uint32_t LUT946H;  ///< Offset: 0x2D94 - Graphic MMU LUT entry 946 high
        volatile uint32_t LUT947H;  ///< Offset: 0x2D9C - Graphic MMU LUT entry 947 high
        volatile uint32_t LUT948H;  ///< Offset: 0x2DA4 - Graphic MMU LUT entry 948 high
        volatile uint32_t LUT949H;  ///< Offset: 0x2DAC - Graphic MMU LUT entry 949 high
        volatile uint32_t LUT950H;  ///< Offset: 0x2DB4 - Graphic MMU LUT entry 950 high
        volatile uint32_t LUT951H;  ///< Offset: 0x2DBC - Graphic MMU LUT entry 951 high
        volatile uint32_t LUT952H;  ///< Offset: 0x2DC4 - Graphic MMU LUT entry 952 high
        volatile uint32_t LUT953H;  ///< Offset: 0x2DCC - Graphic MMU LUT entry 953 high
        volatile uint32_t LUT954H;  ///< Offset: 0x2DD4 - Graphic MMU LUT entry 954 high
        volatile uint32_t LUT955H;  ///< Offset: 0x2DDC - Graphic MMU LUT entry 955 high
        volatile uint32_t LUT956H;  ///< Offset: 0x2DE4 - Graphic MMU LUT entry 956 high
        volatile uint32_t LUT957H;  ///< Offset: 0x2DEC - Graphic MMU LUT entry 957 high
        volatile uint32_t LUT958H;  ///< Offset: 0x2DF4 - Graphic MMU LUT entry 958 high
        volatile uint32_t LUT959H;  ///< Offset: 0x2DFC - Graphic MMU LUT entry 959 high
        volatile uint32_t LUT960H;  ///< Offset: 0x2E04 - Graphic MMU LUT entry 960 high
        volatile uint32_t LUT961H;  ///< Offset: 0x2E0C - Graphic MMU LUT entry 961 high
        volatile uint32_t LUT962H;  ///< Offset: 0x2E14 - Graphic MMU LUT entry 962 high
        volatile uint32_t LUT963H;  ///< Offset: 0x2E1C - Graphic MMU LUT entry 963 high
        volatile uint32_t LUT964H;  ///< Offset: 0x2E24 - Graphic MMU LUT entry 964 high
        volatile uint32_t LUT965H;  ///< Offset: 0x2E2C - Graphic MMU LUT entry 965 high
        volatile uint32_t LUT966H;  ///< Offset: 0x2E34 - Graphic MMU LUT entry 966 high
        volatile uint32_t LUT967H;  ///< Offset: 0x2E3C - Graphic MMU LUT entry 967 high
        volatile uint32_t LUT968H;  ///< Offset: 0x2E44 - Graphic MMU LUT entry 968 high
        volatile uint32_t LUT969H;  ///< Offset: 0x2E4C - Graphic MMU LUT entry 969 high
        volatile uint32_t LUT970H;  ///< Offset: 0x2E54 - Graphic MMU LUT entry 970 high
        volatile uint32_t LUT971H;  ///< Offset: 0x2E5C - Graphic MMU LUT entry 971 high
        volatile uint32_t LUT972H;  ///< Offset: 0x2E64 - Graphic MMU LUT entry 972 high
        volatile uint32_t LUT973H;  ///< Offset: 0x2E6C - Graphic MMU LUT entry 973 high
        volatile uint32_t LUT974H;  ///< Offset: 0x2E74 - Graphic MMU LUT entry 974 high
        volatile uint32_t LUT975H;  ///< Offset: 0x2E7C - Graphic MMU LUT entry 975 high
        volatile uint32_t LUT976H;  ///< Offset: 0x2E84 - Graphic MMU LUT entry 976 high
        volatile uint32_t LUT977H;  ///< Offset: 0x2E8C - Graphic MMU LUT entry 977 high
        volatile uint32_t LUT978H;  ///< Offset: 0x2E94 - Graphic MMU LUT entry 978 high
        volatile uint32_t LUT979H;  ///< Offset: 0x2E9C - Graphic MMU LUT entry 979 high
        volatile uint32_t LUT980H;  ///< Offset: 0x2EA4 - Graphic MMU LUT entry 980 high
        volatile uint32_t LUT981H;  ///< Offset: 0x2EAC - Graphic MMU LUT entry 981 high
        volatile uint32_t LUT982H;  ///< Offset: 0x2EB4 - Graphic MMU LUT entry 982 high
        volatile uint32_t LUT983H;  ///< Offset: 0x2EBC - Graphic MMU LUT entry 983 high
        volatile uint32_t LUT984H;  ///< Offset: 0x2EC4 - Graphic MMU LUT entry 984 high
        volatile uint32_t LUT985H;  ///< Offset: 0x2ECC - Graphic MMU LUT entry 985 high
        volatile uint32_t LUT986H;  ///< Offset: 0x2ED4 - Graphic MMU LUT entry 986 high
        volatile uint32_t LUT987H;  ///< Offset: 0x2EDC - Graphic MMU LUT entry 987 high
        volatile uint32_t LUT988H;  ///< Offset: 0x2EE4 - Graphic MMU LUT entry 988 high
        volatile uint32_t LUT989H;  ///< Offset: 0x2EEC - Graphic MMU LUT entry 989 high
        volatile uint32_t LUT990H;  ///< Offset: 0x2EF4 - Graphic MMU LUT entry 990 high
        volatile uint32_t LUT991H;  ///< Offset: 0x2EFC - Graphic MMU LUT entry 991 high
        volatile uint32_t LUT992H;  ///< Offset: 0x2F04 - Graphic MMU LUT entry 992 high
        volatile uint32_t LUT993H;  ///< Offset: 0x2F0C - Graphic MMU LUT entry 993 high
        volatile uint32_t LUT994H;  ///< Offset: 0x2F14 - Graphic MMU LUT entry 994 high
        volatile uint32_t LUT995H;  ///< Offset: 0x2F1C - Graphic MMU LUT entry 995 high
        volatile uint32_t LUT996H;  ///< Offset: 0x2F24 - Graphic MMU LUT entry 996 high
        volatile uint32_t LUT997H;  ///< Offset: 0x2F2C - Graphic MMU LUT entry 997 high
        volatile uint32_t LUT998H;  ///< Offset: 0x2F34 - Graphic MMU LUT entry 998 high
        volatile uint32_t LUT999H;  ///< Offset: 0x2F3C - Graphic MMU LUT entry 999 high
        volatile uint32_t LUT1000H;  ///< Offset: 0x2F44 - Graphic MMU LUT entry 1000 high
        volatile uint32_t LUT1001H;  ///< Offset: 0x2F4C - Graphic MMU LUT entry 1001 high
        volatile uint32_t LUT1002H;  ///< Offset: 0x2F54 - Graphic MMU LUT entry 1002 high
        volatile uint32_t LUT1003H;  ///< Offset: 0x2F5C - Graphic MMU LUT entry 1003 high
        volatile uint32_t LUT1004H;  ///< Offset: 0x2F64 - Graphic MMU LUT entry 1004 high
        volatile uint32_t LUT1005H;  ///< Offset: 0x2F6C - Graphic MMU LUT entry 1005 high
        volatile uint32_t LUT1006H;  ///< Offset: 0x2F74 - Graphic MMU LUT entry 1006 high
        volatile uint32_t LUT1007H;  ///< Offset: 0x2F7C - Graphic MMU LUT entry 1007 high
        volatile uint32_t LUT1008H;  ///< Offset: 0x2F84 - Graphic MMU LUT entry 1008 high
        volatile uint32_t LUT1009H;  ///< Offset: 0x2F8C - Graphic MMU LUT entry 1009 high
        volatile uint32_t LUT1010H;  ///< Offset: 0x2F94 - Graphic MMU LUT entry 1010 high
        volatile uint32_t LUT1011H;  ///< Offset: 0x2F9C - Graphic MMU LUT entry 1011 high
        volatile uint32_t LUT1012H;  ///< Offset: 0x2FA4 - Graphic MMU LUT entry 1012 high
        volatile uint32_t LUT1013H;  ///< Offset: 0x2FAC - Graphic MMU LUT entry 1013 high
        volatile uint32_t LUT1014H;  ///< Offset: 0x2FB4 - Graphic MMU LUT entry 1014 high
        volatile uint32_t LUT1015H;  ///< Offset: 0x2FBC - Graphic MMU LUT entry 1015 high
        volatile uint32_t LUT1016H;  ///< Offset: 0x2FC4 - Graphic MMU LUT entry 1016 high
        volatile uint32_t LUT1017H;  ///< Offset: 0x2FCC - Graphic MMU LUT entry 1017 high
        volatile uint32_t LUT1018H;  ///< Offset: 0x2FD4 - Graphic MMU LUT entry 1018 high
        volatile uint32_t LUT1019H;  ///< Offset: 0x2FDC - Graphic MMU LUT entry 1019 high
        volatile uint32_t LUT1020H;  ///< Offset: 0x2FE4 - Graphic MMU LUT entry 1020 high
        volatile uint32_t LUT1021H;  ///< Offset: 0x2FEC - Graphic MMU LUT entry 1021 high
        volatile uint32_t LUT1022H;  ///< Offset: 0x2FF4 - Graphic MMU LUT entry 1022 high
        volatile uint32_t LUT1023H;  ///< Offset: 0x2FFC - Graphic MMU LUT entry 1023 high
    };

    /// Peripheral instances
    inline Registers* GFXMMU = reinterpret_cast<Registers*>(GFXMMU_BASE);

    // Bit definitions
    /// CR Register bits
    namespace cr_bits {
        constexpr uint32_t B0OIE = (1U << 0);  ///< Buffer 0 overflow interrupt enable
        constexpr uint32_t B1OIE = (1U << 1);  ///< Buffer 1 overflow interrupt enable
        constexpr uint32_t B2OIE = (1U << 2);  ///< Buffer 2 overflow interrupt enable
        constexpr uint32_t B3OIE = (1U << 3);  ///< Buffer 3 overflow interrupt enable
        constexpr uint32_t AMEIE = (1U << 4);  ///< AHB master error interrupt enable
        constexpr uint32_t BM192 = (1U << 6);  ///< 192 Block mode
    }

    /// SR Register bits
    namespace sr_bits {
        constexpr uint32_t B0OF = (1U << 0);  ///< Buffer 0 overflow flag
        constexpr uint32_t B1OF = (1U << 1);  ///< Buffer 1 overflow flag
        constexpr uint32_t B2OF = (1U << 2);  ///< Buffer 2 overflow flag
        constexpr uint32_t B3OF = (1U << 3);  ///< Buffer 3 overflow flag
        constexpr uint32_t AMEF = (1U << 4);  ///< AHB master error flag
    }

    /// FCR Register bits
    namespace fcr_bits {
        constexpr uint32_t CB0OF = (1U << 0);  ///< Clear buffer 0 overflow flag
        constexpr uint32_t CB1OF = (1U << 1);  ///< Clear buffer 1 overflow flag
        constexpr uint32_t CB2OF = (1U << 2);  ///< Clear buffer 2 overflow flag
        constexpr uint32_t CB3OF = (1U << 3);  ///< Clear buffer 3 overflow flag
        constexpr uint32_t CAMEF = (1U << 4);  ///< Clear AHB master error flag
    }

    /// DVR Register bits
    namespace dvr_bits {
        constexpr uint32_t DV = (32 << 0);  ///< Default value
    }

    /// B0CR Register bits
    namespace b0cr_bits {
        constexpr uint32_t PBO = (19 << 4);  ///< Physical buffer offset
        constexpr uint32_t PBBA = (9 << 23);  ///< Physical buffer base address
    }

    /// B1CR Register bits
    namespace b1cr_bits {
        constexpr uint32_t PBO = (19 << 4);  ///< Physical buffer offset
        constexpr uint32_t PBBA = (9 << 23);  ///< Physical buffer base address
    }

    /// B2CR Register bits
    namespace b2cr_bits {
        constexpr uint32_t PBO = (19 << 4);  ///< Physical buffer offset
        constexpr uint32_t PBBA = (9 << 23);  ///< Physical buffer base address
    }

    /// B3CR Register bits
    namespace b3cr_bits {
        constexpr uint32_t PBO = (19 << 4);  ///< Physical buffer offset
        constexpr uint32_t PBBA = (9 << 23);  ///< Physical buffer base address
    }

    /// VERR Register bits
    namespace verr_bits {
        constexpr uint32_t MINREV = (4 << 0);  ///< Minor revision
        constexpr uint32_t MAJREV = (4 << 4);  ///< Major revision
    }

    /// IPIDR Register bits
    namespace ipidr_bits {
        constexpr uint32_t ID = (32 << 0);  ///< Identification Code
    }

    /// SIDR Register bits
    namespace sidr_bits {
        constexpr uint32_t SID = (32 << 0);  ///< Size and ID
    }

    /// LUT0L Register bits
    namespace lut0l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1L Register bits
    namespace lut1l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT2L Register bits
    namespace lut2l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT3L Register bits
    namespace lut3l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT4L Register bits
    namespace lut4l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT5L Register bits
    namespace lut5l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT6L Register bits
    namespace lut6l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT7L Register bits
    namespace lut7l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT8L Register bits
    namespace lut8l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT9L Register bits
    namespace lut9l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT10L Register bits
    namespace lut10l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT11L Register bits
    namespace lut11l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT12L Register bits
    namespace lut12l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT13L Register bits
    namespace lut13l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT14L Register bits
    namespace lut14l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT15L Register bits
    namespace lut15l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT16L Register bits
    namespace lut16l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT17L Register bits
    namespace lut17l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT18L Register bits
    namespace lut18l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT19L Register bits
    namespace lut19l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT20L Register bits
    namespace lut20l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT21L Register bits
    namespace lut21l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT22L Register bits
    namespace lut22l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT23L Register bits
    namespace lut23l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT24L Register bits
    namespace lut24l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT25L Register bits
    namespace lut25l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT26L Register bits
    namespace lut26l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT27L Register bits
    namespace lut27l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT28L Register bits
    namespace lut28l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT29L Register bits
    namespace lut29l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT30L Register bits
    namespace lut30l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT31L Register bits
    namespace lut31l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT32L Register bits
    namespace lut32l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT33L Register bits
    namespace lut33l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT34L Register bits
    namespace lut34l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT35L Register bits
    namespace lut35l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT36L Register bits
    namespace lut36l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT37L Register bits
    namespace lut37l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT38L Register bits
    namespace lut38l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT39L Register bits
    namespace lut39l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT40L Register bits
    namespace lut40l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT41L Register bits
    namespace lut41l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT42L Register bits
    namespace lut42l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT43L Register bits
    namespace lut43l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT44L Register bits
    namespace lut44l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT45L Register bits
    namespace lut45l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT46L Register bits
    namespace lut46l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT47L Register bits
    namespace lut47l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT48L Register bits
    namespace lut48l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT49L Register bits
    namespace lut49l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT50L Register bits
    namespace lut50l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT51L Register bits
    namespace lut51l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT52L Register bits
    namespace lut52l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT53L Register bits
    namespace lut53l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT54L Register bits
    namespace lut54l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT55L Register bits
    namespace lut55l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT56L Register bits
    namespace lut56l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT57L Register bits
    namespace lut57l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT58L Register bits
    namespace lut58l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT59L Register bits
    namespace lut59l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT60L Register bits
    namespace lut60l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT61L Register bits
    namespace lut61l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT62L Register bits
    namespace lut62l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT63L Register bits
    namespace lut63l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT64L Register bits
    namespace lut64l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT65L Register bits
    namespace lut65l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT66L Register bits
    namespace lut66l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT67L Register bits
    namespace lut67l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT68L Register bits
    namespace lut68l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT69L Register bits
    namespace lut69l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT70L Register bits
    namespace lut70l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT71L Register bits
    namespace lut71l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT72L Register bits
    namespace lut72l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT73L Register bits
    namespace lut73l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT74L Register bits
    namespace lut74l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT75L Register bits
    namespace lut75l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT76L Register bits
    namespace lut76l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT77L Register bits
    namespace lut77l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT78L Register bits
    namespace lut78l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT79L Register bits
    namespace lut79l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT80L Register bits
    namespace lut80l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT81L Register bits
    namespace lut81l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT82L Register bits
    namespace lut82l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT83L Register bits
    namespace lut83l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT84L Register bits
    namespace lut84l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT85L Register bits
    namespace lut85l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT86L Register bits
    namespace lut86l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT87L Register bits
    namespace lut87l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT88L Register bits
    namespace lut88l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT89L Register bits
    namespace lut89l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT90L Register bits
    namespace lut90l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT91L Register bits
    namespace lut91l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT92L Register bits
    namespace lut92l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT93L Register bits
    namespace lut93l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT94L Register bits
    namespace lut94l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT95L Register bits
    namespace lut95l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT96L Register bits
    namespace lut96l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT97L Register bits
    namespace lut97l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT98L Register bits
    namespace lut98l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT99L Register bits
    namespace lut99l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT100L Register bits
    namespace lut100l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT101L Register bits
    namespace lut101l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT102L Register bits
    namespace lut102l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT103L Register bits
    namespace lut103l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT104L Register bits
    namespace lut104l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT105L Register bits
    namespace lut105l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT106L Register bits
    namespace lut106l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT107L Register bits
    namespace lut107l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT108L Register bits
    namespace lut108l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT109L Register bits
    namespace lut109l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT110L Register bits
    namespace lut110l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT111L Register bits
    namespace lut111l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT112L Register bits
    namespace lut112l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT113L Register bits
    namespace lut113l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT114L Register bits
    namespace lut114l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT115L Register bits
    namespace lut115l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT116L Register bits
    namespace lut116l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT117L Register bits
    namespace lut117l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT118L Register bits
    namespace lut118l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT119L Register bits
    namespace lut119l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT120L Register bits
    namespace lut120l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT121L Register bits
    namespace lut121l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT122L Register bits
    namespace lut122l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT123L Register bits
    namespace lut123l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT124L Register bits
    namespace lut124l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT125L Register bits
    namespace lut125l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT126L Register bits
    namespace lut126l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT127L Register bits
    namespace lut127l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT128L Register bits
    namespace lut128l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT129L Register bits
    namespace lut129l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT130L Register bits
    namespace lut130l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT131L Register bits
    namespace lut131l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT132L Register bits
    namespace lut132l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT133L Register bits
    namespace lut133l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT134L Register bits
    namespace lut134l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT135L Register bits
    namespace lut135l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT136L Register bits
    namespace lut136l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT137L Register bits
    namespace lut137l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT138L Register bits
    namespace lut138l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT139L Register bits
    namespace lut139l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT140L Register bits
    namespace lut140l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT141L Register bits
    namespace lut141l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT142L Register bits
    namespace lut142l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT143L Register bits
    namespace lut143l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT144L Register bits
    namespace lut144l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT145L Register bits
    namespace lut145l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT146L Register bits
    namespace lut146l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT147L Register bits
    namespace lut147l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT148L Register bits
    namespace lut148l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT149L Register bits
    namespace lut149l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT150L Register bits
    namespace lut150l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT151L Register bits
    namespace lut151l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT152L Register bits
    namespace lut152l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT153L Register bits
    namespace lut153l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT154L Register bits
    namespace lut154l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT155L Register bits
    namespace lut155l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT156L Register bits
    namespace lut156l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT157L Register bits
    namespace lut157l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT158L Register bits
    namespace lut158l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT159L Register bits
    namespace lut159l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT160L Register bits
    namespace lut160l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT161L Register bits
    namespace lut161l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT162L Register bits
    namespace lut162l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT163L Register bits
    namespace lut163l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT164L Register bits
    namespace lut164l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT165L Register bits
    namespace lut165l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT166L Register bits
    namespace lut166l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT167L Register bits
    namespace lut167l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT168L Register bits
    namespace lut168l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT169L Register bits
    namespace lut169l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT170L Register bits
    namespace lut170l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT171L Register bits
    namespace lut171l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT172L Register bits
    namespace lut172l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT173L Register bits
    namespace lut173l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT174L Register bits
    namespace lut174l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT175L Register bits
    namespace lut175l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT176L Register bits
    namespace lut176l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT177L Register bits
    namespace lut177l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT178L Register bits
    namespace lut178l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT179L Register bits
    namespace lut179l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT180L Register bits
    namespace lut180l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT181L Register bits
    namespace lut181l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT182L Register bits
    namespace lut182l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT183L Register bits
    namespace lut183l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT184L Register bits
    namespace lut184l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT185L Register bits
    namespace lut185l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT186L Register bits
    namespace lut186l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT187L Register bits
    namespace lut187l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT188L Register bits
    namespace lut188l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT189L Register bits
    namespace lut189l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT190L Register bits
    namespace lut190l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT191L Register bits
    namespace lut191l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT192L Register bits
    namespace lut192l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT193L Register bits
    namespace lut193l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT194L Register bits
    namespace lut194l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT195L Register bits
    namespace lut195l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT196L Register bits
    namespace lut196l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT197L Register bits
    namespace lut197l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT198L Register bits
    namespace lut198l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT199L Register bits
    namespace lut199l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT200L Register bits
    namespace lut200l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT201L Register bits
    namespace lut201l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT202L Register bits
    namespace lut202l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT203L Register bits
    namespace lut203l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT204L Register bits
    namespace lut204l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT205L Register bits
    namespace lut205l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT206L Register bits
    namespace lut206l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT207L Register bits
    namespace lut207l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT208L Register bits
    namespace lut208l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT209L Register bits
    namespace lut209l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT210L Register bits
    namespace lut210l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT211L Register bits
    namespace lut211l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT212L Register bits
    namespace lut212l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT213L Register bits
    namespace lut213l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT214L Register bits
    namespace lut214l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT215L Register bits
    namespace lut215l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT216L Register bits
    namespace lut216l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT217L Register bits
    namespace lut217l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT218L Register bits
    namespace lut218l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT219L Register bits
    namespace lut219l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT220L Register bits
    namespace lut220l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT221L Register bits
    namespace lut221l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT222L Register bits
    namespace lut222l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT223L Register bits
    namespace lut223l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT224L Register bits
    namespace lut224l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT225L Register bits
    namespace lut225l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT226L Register bits
    namespace lut226l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT227L Register bits
    namespace lut227l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT228L Register bits
    namespace lut228l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT229L Register bits
    namespace lut229l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT230L Register bits
    namespace lut230l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT231L Register bits
    namespace lut231l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT232L Register bits
    namespace lut232l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT233L Register bits
    namespace lut233l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT234L Register bits
    namespace lut234l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT235L Register bits
    namespace lut235l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT236L Register bits
    namespace lut236l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT237L Register bits
    namespace lut237l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT238L Register bits
    namespace lut238l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT239L Register bits
    namespace lut239l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT240L Register bits
    namespace lut240l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT241L Register bits
    namespace lut241l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT242L Register bits
    namespace lut242l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT243L Register bits
    namespace lut243l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT244L Register bits
    namespace lut244l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT245L Register bits
    namespace lut245l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT246L Register bits
    namespace lut246l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT247L Register bits
    namespace lut247l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT248L Register bits
    namespace lut248l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT249L Register bits
    namespace lut249l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT250L Register bits
    namespace lut250l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT251L Register bits
    namespace lut251l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT252L Register bits
    namespace lut252l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT253L Register bits
    namespace lut253l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT254L Register bits
    namespace lut254l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT255L Register bits
    namespace lut255l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT256L Register bits
    namespace lut256l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT257L Register bits
    namespace lut257l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT258L Register bits
    namespace lut258l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT259L Register bits
    namespace lut259l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT260L Register bits
    namespace lut260l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT261L Register bits
    namespace lut261l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT262L Register bits
    namespace lut262l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT263L Register bits
    namespace lut263l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT264L Register bits
    namespace lut264l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT265L Register bits
    namespace lut265l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT266L Register bits
    namespace lut266l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT267L Register bits
    namespace lut267l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT268L Register bits
    namespace lut268l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT269L Register bits
    namespace lut269l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT270L Register bits
    namespace lut270l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT271L Register bits
    namespace lut271l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT272L Register bits
    namespace lut272l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT273L Register bits
    namespace lut273l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT274L Register bits
    namespace lut274l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT275L Register bits
    namespace lut275l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT276L Register bits
    namespace lut276l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT277L Register bits
    namespace lut277l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT278L Register bits
    namespace lut278l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT279L Register bits
    namespace lut279l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT280L Register bits
    namespace lut280l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT281L Register bits
    namespace lut281l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT282L Register bits
    namespace lut282l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT283L Register bits
    namespace lut283l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT284L Register bits
    namespace lut284l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT285L Register bits
    namespace lut285l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT286L Register bits
    namespace lut286l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT287L Register bits
    namespace lut287l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT288L Register bits
    namespace lut288l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT289L Register bits
    namespace lut289l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT290L Register bits
    namespace lut290l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT291L Register bits
    namespace lut291l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT292L Register bits
    namespace lut292l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT293L Register bits
    namespace lut293l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT294L Register bits
    namespace lut294l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT295L Register bits
    namespace lut295l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT296L Register bits
    namespace lut296l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT297L Register bits
    namespace lut297l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT298L Register bits
    namespace lut298l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT299L Register bits
    namespace lut299l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT300L Register bits
    namespace lut300l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT301L Register bits
    namespace lut301l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT302L Register bits
    namespace lut302l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT303L Register bits
    namespace lut303l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT304L Register bits
    namespace lut304l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT305L Register bits
    namespace lut305l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT306L Register bits
    namespace lut306l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT307L Register bits
    namespace lut307l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT308L Register bits
    namespace lut308l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT309L Register bits
    namespace lut309l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT310L Register bits
    namespace lut310l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT311L Register bits
    namespace lut311l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT312L Register bits
    namespace lut312l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT313L Register bits
    namespace lut313l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT314L Register bits
    namespace lut314l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT315L Register bits
    namespace lut315l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT316L Register bits
    namespace lut316l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT317L Register bits
    namespace lut317l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT318L Register bits
    namespace lut318l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT319L Register bits
    namespace lut319l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT320L Register bits
    namespace lut320l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT321L Register bits
    namespace lut321l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT322L Register bits
    namespace lut322l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT323L Register bits
    namespace lut323l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT324L Register bits
    namespace lut324l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT325L Register bits
    namespace lut325l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT326L Register bits
    namespace lut326l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT327L Register bits
    namespace lut327l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT328L Register bits
    namespace lut328l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT329L Register bits
    namespace lut329l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT330L Register bits
    namespace lut330l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT331L Register bits
    namespace lut331l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT332L Register bits
    namespace lut332l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT333L Register bits
    namespace lut333l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT334L Register bits
    namespace lut334l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT335L Register bits
    namespace lut335l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT336L Register bits
    namespace lut336l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT337L Register bits
    namespace lut337l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT338L Register bits
    namespace lut338l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT339L Register bits
    namespace lut339l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT340L Register bits
    namespace lut340l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT341L Register bits
    namespace lut341l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT342L Register bits
    namespace lut342l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT343L Register bits
    namespace lut343l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT344L Register bits
    namespace lut344l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT345L Register bits
    namespace lut345l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT346L Register bits
    namespace lut346l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT347L Register bits
    namespace lut347l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT348L Register bits
    namespace lut348l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT349L Register bits
    namespace lut349l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT350L Register bits
    namespace lut350l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT351L Register bits
    namespace lut351l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT352L Register bits
    namespace lut352l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT353L Register bits
    namespace lut353l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT354L Register bits
    namespace lut354l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT355L Register bits
    namespace lut355l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT356L Register bits
    namespace lut356l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT357L Register bits
    namespace lut357l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT358L Register bits
    namespace lut358l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT359L Register bits
    namespace lut359l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT360L Register bits
    namespace lut360l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT361L Register bits
    namespace lut361l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT362L Register bits
    namespace lut362l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT363L Register bits
    namespace lut363l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT364L Register bits
    namespace lut364l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT365L Register bits
    namespace lut365l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT366L Register bits
    namespace lut366l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT367L Register bits
    namespace lut367l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT368L Register bits
    namespace lut368l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT369L Register bits
    namespace lut369l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT370L Register bits
    namespace lut370l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT371L Register bits
    namespace lut371l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT372L Register bits
    namespace lut372l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT373L Register bits
    namespace lut373l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT374L Register bits
    namespace lut374l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT375L Register bits
    namespace lut375l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT376L Register bits
    namespace lut376l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT377L Register bits
    namespace lut377l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT378L Register bits
    namespace lut378l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT379L Register bits
    namespace lut379l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT380L Register bits
    namespace lut380l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT381L Register bits
    namespace lut381l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT382L Register bits
    namespace lut382l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT383L Register bits
    namespace lut383l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT384L Register bits
    namespace lut384l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT385L Register bits
    namespace lut385l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT386L Register bits
    namespace lut386l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT387L Register bits
    namespace lut387l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT388L Register bits
    namespace lut388l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT389L Register bits
    namespace lut389l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT390L Register bits
    namespace lut390l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT391L Register bits
    namespace lut391l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT392L Register bits
    namespace lut392l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT393L Register bits
    namespace lut393l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT394L Register bits
    namespace lut394l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT395L Register bits
    namespace lut395l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT396L Register bits
    namespace lut396l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT397L Register bits
    namespace lut397l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT398L Register bits
    namespace lut398l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT399L Register bits
    namespace lut399l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT400L Register bits
    namespace lut400l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT401L Register bits
    namespace lut401l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT402L Register bits
    namespace lut402l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT403L Register bits
    namespace lut403l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT404L Register bits
    namespace lut404l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT405L Register bits
    namespace lut405l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT406L Register bits
    namespace lut406l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT407L Register bits
    namespace lut407l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT408L Register bits
    namespace lut408l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT409L Register bits
    namespace lut409l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT410L Register bits
    namespace lut410l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT411L Register bits
    namespace lut411l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT412L Register bits
    namespace lut412l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT413L Register bits
    namespace lut413l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT414L Register bits
    namespace lut414l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT415L Register bits
    namespace lut415l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT416L Register bits
    namespace lut416l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT417L Register bits
    namespace lut417l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT418L Register bits
    namespace lut418l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT419L Register bits
    namespace lut419l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT420L Register bits
    namespace lut420l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT421L Register bits
    namespace lut421l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT422L Register bits
    namespace lut422l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT423L Register bits
    namespace lut423l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT424L Register bits
    namespace lut424l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT425L Register bits
    namespace lut425l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT426L Register bits
    namespace lut426l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT427L Register bits
    namespace lut427l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT428L Register bits
    namespace lut428l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT429L Register bits
    namespace lut429l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT430L Register bits
    namespace lut430l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT431L Register bits
    namespace lut431l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT432L Register bits
    namespace lut432l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT433L Register bits
    namespace lut433l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT434L Register bits
    namespace lut434l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT435L Register bits
    namespace lut435l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT436L Register bits
    namespace lut436l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT437L Register bits
    namespace lut437l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT438L Register bits
    namespace lut438l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT439L Register bits
    namespace lut439l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT440L Register bits
    namespace lut440l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT441L Register bits
    namespace lut441l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT442L Register bits
    namespace lut442l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT443L Register bits
    namespace lut443l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT444L Register bits
    namespace lut444l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT445L Register bits
    namespace lut445l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT446L Register bits
    namespace lut446l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT447L Register bits
    namespace lut447l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT448L Register bits
    namespace lut448l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT449L Register bits
    namespace lut449l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT450L Register bits
    namespace lut450l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT451L Register bits
    namespace lut451l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT452L Register bits
    namespace lut452l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT453L Register bits
    namespace lut453l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT454L Register bits
    namespace lut454l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT455L Register bits
    namespace lut455l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT456L Register bits
    namespace lut456l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT457L Register bits
    namespace lut457l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT458L Register bits
    namespace lut458l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT459L Register bits
    namespace lut459l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT460L Register bits
    namespace lut460l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT461L Register bits
    namespace lut461l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT462L Register bits
    namespace lut462l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT463L Register bits
    namespace lut463l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT464L Register bits
    namespace lut464l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT465L Register bits
    namespace lut465l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT466L Register bits
    namespace lut466l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT467L Register bits
    namespace lut467l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT468L Register bits
    namespace lut468l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT469L Register bits
    namespace lut469l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT470L Register bits
    namespace lut470l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT471L Register bits
    namespace lut471l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT472L Register bits
    namespace lut472l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT473L Register bits
    namespace lut473l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT474L Register bits
    namespace lut474l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT475L Register bits
    namespace lut475l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT476L Register bits
    namespace lut476l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT477L Register bits
    namespace lut477l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT478L Register bits
    namespace lut478l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT479L Register bits
    namespace lut479l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT480L Register bits
    namespace lut480l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT481L Register bits
    namespace lut481l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT482L Register bits
    namespace lut482l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT483L Register bits
    namespace lut483l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT484L Register bits
    namespace lut484l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT485L Register bits
    namespace lut485l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT486L Register bits
    namespace lut486l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT487L Register bits
    namespace lut487l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT488L Register bits
    namespace lut488l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT489L Register bits
    namespace lut489l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT490L Register bits
    namespace lut490l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT491L Register bits
    namespace lut491l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT492L Register bits
    namespace lut492l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT493L Register bits
    namespace lut493l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT494L Register bits
    namespace lut494l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT495L Register bits
    namespace lut495l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT496L Register bits
    namespace lut496l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT497L Register bits
    namespace lut497l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT498L Register bits
    namespace lut498l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT499L Register bits
    namespace lut499l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT500L Register bits
    namespace lut500l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT501L Register bits
    namespace lut501l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT502L Register bits
    namespace lut502l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT503L Register bits
    namespace lut503l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT504L Register bits
    namespace lut504l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT505L Register bits
    namespace lut505l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT506L Register bits
    namespace lut506l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT507L Register bits
    namespace lut507l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT508L Register bits
    namespace lut508l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT509L Register bits
    namespace lut509l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT510L Register bits
    namespace lut510l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT511L Register bits
    namespace lut511l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT512L Register bits
    namespace lut512l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT513L Register bits
    namespace lut513l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT514L Register bits
    namespace lut514l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT515L Register bits
    namespace lut515l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT516L Register bits
    namespace lut516l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT517L Register bits
    namespace lut517l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT518L Register bits
    namespace lut518l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT519L Register bits
    namespace lut519l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT520L Register bits
    namespace lut520l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT521L Register bits
    namespace lut521l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT522L Register bits
    namespace lut522l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT523L Register bits
    namespace lut523l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT524L Register bits
    namespace lut524l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT525L Register bits
    namespace lut525l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT526L Register bits
    namespace lut526l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT527L Register bits
    namespace lut527l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT528L Register bits
    namespace lut528l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT529L Register bits
    namespace lut529l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT530L Register bits
    namespace lut530l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT531L Register bits
    namespace lut531l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT532L Register bits
    namespace lut532l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT533L Register bits
    namespace lut533l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT534L Register bits
    namespace lut534l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT535L Register bits
    namespace lut535l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT536L Register bits
    namespace lut536l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT537L Register bits
    namespace lut537l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT538L Register bits
    namespace lut538l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT539L Register bits
    namespace lut539l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT540L Register bits
    namespace lut540l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT541L Register bits
    namespace lut541l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT542L Register bits
    namespace lut542l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT543L Register bits
    namespace lut543l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT544L Register bits
    namespace lut544l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT545L Register bits
    namespace lut545l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT546L Register bits
    namespace lut546l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT547L Register bits
    namespace lut547l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT548L Register bits
    namespace lut548l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT549L Register bits
    namespace lut549l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT550L Register bits
    namespace lut550l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT551L Register bits
    namespace lut551l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT552L Register bits
    namespace lut552l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT553L Register bits
    namespace lut553l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT554L Register bits
    namespace lut554l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT555L Register bits
    namespace lut555l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT556L Register bits
    namespace lut556l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT557L Register bits
    namespace lut557l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT558L Register bits
    namespace lut558l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT559L Register bits
    namespace lut559l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT560L Register bits
    namespace lut560l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT561L Register bits
    namespace lut561l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT562L Register bits
    namespace lut562l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT563L Register bits
    namespace lut563l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT564L Register bits
    namespace lut564l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT565L Register bits
    namespace lut565l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT566L Register bits
    namespace lut566l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT567L Register bits
    namespace lut567l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT568L Register bits
    namespace lut568l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT569L Register bits
    namespace lut569l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT570L Register bits
    namespace lut570l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT571L Register bits
    namespace lut571l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT572L Register bits
    namespace lut572l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT573L Register bits
    namespace lut573l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT574L Register bits
    namespace lut574l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT575L Register bits
    namespace lut575l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT576L Register bits
    namespace lut576l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT577L Register bits
    namespace lut577l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT578L Register bits
    namespace lut578l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT579L Register bits
    namespace lut579l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT580L Register bits
    namespace lut580l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT581L Register bits
    namespace lut581l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT582L Register bits
    namespace lut582l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT583L Register bits
    namespace lut583l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT584L Register bits
    namespace lut584l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT585L Register bits
    namespace lut585l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT586L Register bits
    namespace lut586l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT587L Register bits
    namespace lut587l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT588L Register bits
    namespace lut588l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT589L Register bits
    namespace lut589l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT590L Register bits
    namespace lut590l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT591L Register bits
    namespace lut591l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT592L Register bits
    namespace lut592l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT593L Register bits
    namespace lut593l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT594L Register bits
    namespace lut594l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT595L Register bits
    namespace lut595l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT596L Register bits
    namespace lut596l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT597L Register bits
    namespace lut597l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT598L Register bits
    namespace lut598l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT599L Register bits
    namespace lut599l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT600L Register bits
    namespace lut600l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT601L Register bits
    namespace lut601l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT602L Register bits
    namespace lut602l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT603L Register bits
    namespace lut603l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT604L Register bits
    namespace lut604l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT605L Register bits
    namespace lut605l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT606L Register bits
    namespace lut606l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT607L Register bits
    namespace lut607l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT608L Register bits
    namespace lut608l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT609L Register bits
    namespace lut609l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT610L Register bits
    namespace lut610l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT611L Register bits
    namespace lut611l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT612L Register bits
    namespace lut612l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT613L Register bits
    namespace lut613l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT614L Register bits
    namespace lut614l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT615L Register bits
    namespace lut615l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT616L Register bits
    namespace lut616l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT617L Register bits
    namespace lut617l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT618L Register bits
    namespace lut618l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT619L Register bits
    namespace lut619l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT620L Register bits
    namespace lut620l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT621L Register bits
    namespace lut621l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT622L Register bits
    namespace lut622l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT623L Register bits
    namespace lut623l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT624L Register bits
    namespace lut624l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT625L Register bits
    namespace lut625l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT626L Register bits
    namespace lut626l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT627L Register bits
    namespace lut627l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT628L Register bits
    namespace lut628l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT629L Register bits
    namespace lut629l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT630L Register bits
    namespace lut630l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT631L Register bits
    namespace lut631l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT632L Register bits
    namespace lut632l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT633L Register bits
    namespace lut633l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT634L Register bits
    namespace lut634l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT635L Register bits
    namespace lut635l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT636L Register bits
    namespace lut636l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT637L Register bits
    namespace lut637l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT638L Register bits
    namespace lut638l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT639L Register bits
    namespace lut639l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT640L Register bits
    namespace lut640l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT641L Register bits
    namespace lut641l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT642L Register bits
    namespace lut642l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT643L Register bits
    namespace lut643l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT644L Register bits
    namespace lut644l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT645L Register bits
    namespace lut645l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT646L Register bits
    namespace lut646l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT647L Register bits
    namespace lut647l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT648L Register bits
    namespace lut648l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT649L Register bits
    namespace lut649l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT650L Register bits
    namespace lut650l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT651L Register bits
    namespace lut651l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT652L Register bits
    namespace lut652l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT653L Register bits
    namespace lut653l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT654L Register bits
    namespace lut654l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT655L Register bits
    namespace lut655l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT656L Register bits
    namespace lut656l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT657L Register bits
    namespace lut657l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT658L Register bits
    namespace lut658l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT659L Register bits
    namespace lut659l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT660L Register bits
    namespace lut660l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT661L Register bits
    namespace lut661l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT662L Register bits
    namespace lut662l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT663L Register bits
    namespace lut663l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT664L Register bits
    namespace lut664l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT665L Register bits
    namespace lut665l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT666L Register bits
    namespace lut666l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT667L Register bits
    namespace lut667l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT668L Register bits
    namespace lut668l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT669L Register bits
    namespace lut669l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT670L Register bits
    namespace lut670l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT671L Register bits
    namespace lut671l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT672L Register bits
    namespace lut672l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT673L Register bits
    namespace lut673l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT674L Register bits
    namespace lut674l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT675L Register bits
    namespace lut675l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT676L Register bits
    namespace lut676l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT677L Register bits
    namespace lut677l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT678L Register bits
    namespace lut678l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT679L Register bits
    namespace lut679l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT680L Register bits
    namespace lut680l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT681L Register bits
    namespace lut681l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT682L Register bits
    namespace lut682l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT683L Register bits
    namespace lut683l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT684L Register bits
    namespace lut684l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT685L Register bits
    namespace lut685l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT686L Register bits
    namespace lut686l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT687L Register bits
    namespace lut687l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT688L Register bits
    namespace lut688l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT689L Register bits
    namespace lut689l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT690L Register bits
    namespace lut690l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT691L Register bits
    namespace lut691l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT692L Register bits
    namespace lut692l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT693L Register bits
    namespace lut693l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT694L Register bits
    namespace lut694l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT695L Register bits
    namespace lut695l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT696L Register bits
    namespace lut696l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT697L Register bits
    namespace lut697l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT698L Register bits
    namespace lut698l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT699L Register bits
    namespace lut699l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT700L Register bits
    namespace lut700l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT701L Register bits
    namespace lut701l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT702L Register bits
    namespace lut702l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT703L Register bits
    namespace lut703l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT704L Register bits
    namespace lut704l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT705L Register bits
    namespace lut705l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT706L Register bits
    namespace lut706l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT707L Register bits
    namespace lut707l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT708L Register bits
    namespace lut708l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT709L Register bits
    namespace lut709l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT710L Register bits
    namespace lut710l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT711L Register bits
    namespace lut711l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT712L Register bits
    namespace lut712l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT713L Register bits
    namespace lut713l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT714L Register bits
    namespace lut714l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT715L Register bits
    namespace lut715l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT716L Register bits
    namespace lut716l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT717L Register bits
    namespace lut717l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT718L Register bits
    namespace lut718l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT719L Register bits
    namespace lut719l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT720L Register bits
    namespace lut720l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT721L Register bits
    namespace lut721l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT722L Register bits
    namespace lut722l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT723L Register bits
    namespace lut723l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT724L Register bits
    namespace lut724l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT725L Register bits
    namespace lut725l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT726L Register bits
    namespace lut726l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT727L Register bits
    namespace lut727l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT728L Register bits
    namespace lut728l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT729L Register bits
    namespace lut729l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT730L Register bits
    namespace lut730l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT731L Register bits
    namespace lut731l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT732L Register bits
    namespace lut732l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT733L Register bits
    namespace lut733l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT734L Register bits
    namespace lut734l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT735L Register bits
    namespace lut735l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT736L Register bits
    namespace lut736l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT737L Register bits
    namespace lut737l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT738L Register bits
    namespace lut738l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT739L Register bits
    namespace lut739l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT740L Register bits
    namespace lut740l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT741L Register bits
    namespace lut741l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT742L Register bits
    namespace lut742l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT743L Register bits
    namespace lut743l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT744L Register bits
    namespace lut744l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT745L Register bits
    namespace lut745l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT746L Register bits
    namespace lut746l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT747L Register bits
    namespace lut747l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT748L Register bits
    namespace lut748l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT749L Register bits
    namespace lut749l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT750L Register bits
    namespace lut750l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT751L Register bits
    namespace lut751l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT752L Register bits
    namespace lut752l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT753L Register bits
    namespace lut753l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT754L Register bits
    namespace lut754l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT755L Register bits
    namespace lut755l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT756L Register bits
    namespace lut756l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT757L Register bits
    namespace lut757l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT758L Register bits
    namespace lut758l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT759L Register bits
    namespace lut759l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT760L Register bits
    namespace lut760l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT761L Register bits
    namespace lut761l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT762L Register bits
    namespace lut762l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT763L Register bits
    namespace lut763l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT764L Register bits
    namespace lut764l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT765L Register bits
    namespace lut765l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT766L Register bits
    namespace lut766l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT767L Register bits
    namespace lut767l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT768L Register bits
    namespace lut768l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT769L Register bits
    namespace lut769l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT770L Register bits
    namespace lut770l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT771L Register bits
    namespace lut771l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT772L Register bits
    namespace lut772l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT773L Register bits
    namespace lut773l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT774L Register bits
    namespace lut774l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT775L Register bits
    namespace lut775l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT776L Register bits
    namespace lut776l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT777L Register bits
    namespace lut777l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT778L Register bits
    namespace lut778l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT779L Register bits
    namespace lut779l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT780L Register bits
    namespace lut780l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT781L Register bits
    namespace lut781l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT782L Register bits
    namespace lut782l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT783L Register bits
    namespace lut783l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT784L Register bits
    namespace lut784l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT785L Register bits
    namespace lut785l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT786L Register bits
    namespace lut786l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT787L Register bits
    namespace lut787l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT788L Register bits
    namespace lut788l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT789L Register bits
    namespace lut789l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT790L Register bits
    namespace lut790l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT791L Register bits
    namespace lut791l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT792L Register bits
    namespace lut792l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT793L Register bits
    namespace lut793l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT794L Register bits
    namespace lut794l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT795L Register bits
    namespace lut795l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT796L Register bits
    namespace lut796l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT797L Register bits
    namespace lut797l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT798L Register bits
    namespace lut798l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT799L Register bits
    namespace lut799l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT800L Register bits
    namespace lut800l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT801L Register bits
    namespace lut801l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT802L Register bits
    namespace lut802l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT803L Register bits
    namespace lut803l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT804L Register bits
    namespace lut804l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT805L Register bits
    namespace lut805l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT806L Register bits
    namespace lut806l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT807L Register bits
    namespace lut807l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT808L Register bits
    namespace lut808l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT809L Register bits
    namespace lut809l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT810L Register bits
    namespace lut810l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT811L Register bits
    namespace lut811l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT812L Register bits
    namespace lut812l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT813L Register bits
    namespace lut813l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT814L Register bits
    namespace lut814l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT815L Register bits
    namespace lut815l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT816L Register bits
    namespace lut816l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT817L Register bits
    namespace lut817l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT818L Register bits
    namespace lut818l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT819L Register bits
    namespace lut819l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT820L Register bits
    namespace lut820l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT821L Register bits
    namespace lut821l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT822L Register bits
    namespace lut822l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT823L Register bits
    namespace lut823l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT824L Register bits
    namespace lut824l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT825L Register bits
    namespace lut825l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT826L Register bits
    namespace lut826l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT827L Register bits
    namespace lut827l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT828L Register bits
    namespace lut828l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT829L Register bits
    namespace lut829l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT830L Register bits
    namespace lut830l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT831L Register bits
    namespace lut831l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT832L Register bits
    namespace lut832l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT833L Register bits
    namespace lut833l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT834L Register bits
    namespace lut834l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT835L Register bits
    namespace lut835l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT836L Register bits
    namespace lut836l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT837L Register bits
    namespace lut837l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT838L Register bits
    namespace lut838l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT839L Register bits
    namespace lut839l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT840L Register bits
    namespace lut840l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT841L Register bits
    namespace lut841l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT842L Register bits
    namespace lut842l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT843L Register bits
    namespace lut843l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT844L Register bits
    namespace lut844l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT845L Register bits
    namespace lut845l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT846L Register bits
    namespace lut846l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT847L Register bits
    namespace lut847l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT848L Register bits
    namespace lut848l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT849L Register bits
    namespace lut849l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT850L Register bits
    namespace lut850l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT851L Register bits
    namespace lut851l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT852L Register bits
    namespace lut852l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT853L Register bits
    namespace lut853l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT854L Register bits
    namespace lut854l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT855L Register bits
    namespace lut855l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT856L Register bits
    namespace lut856l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT857L Register bits
    namespace lut857l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT858L Register bits
    namespace lut858l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT859L Register bits
    namespace lut859l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT860L Register bits
    namespace lut860l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT861L Register bits
    namespace lut861l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT862L Register bits
    namespace lut862l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT863L Register bits
    namespace lut863l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT864L Register bits
    namespace lut864l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT865L Register bits
    namespace lut865l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT866L Register bits
    namespace lut866l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT867L Register bits
    namespace lut867l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT868L Register bits
    namespace lut868l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT869L Register bits
    namespace lut869l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT870L Register bits
    namespace lut870l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT871L Register bits
    namespace lut871l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT872L Register bits
    namespace lut872l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT873L Register bits
    namespace lut873l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT874L Register bits
    namespace lut874l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT875L Register bits
    namespace lut875l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT876L Register bits
    namespace lut876l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT877L Register bits
    namespace lut877l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT878L Register bits
    namespace lut878l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT879L Register bits
    namespace lut879l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT880L Register bits
    namespace lut880l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT881L Register bits
    namespace lut881l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT882L Register bits
    namespace lut882l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT883L Register bits
    namespace lut883l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT884L Register bits
    namespace lut884l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT885L Register bits
    namespace lut885l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT886L Register bits
    namespace lut886l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT887L Register bits
    namespace lut887l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT888L Register bits
    namespace lut888l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT889L Register bits
    namespace lut889l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT890L Register bits
    namespace lut890l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT891L Register bits
    namespace lut891l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT892L Register bits
    namespace lut892l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT893L Register bits
    namespace lut893l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT894L Register bits
    namespace lut894l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT895L Register bits
    namespace lut895l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT896L Register bits
    namespace lut896l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT897L Register bits
    namespace lut897l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT898L Register bits
    namespace lut898l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT899L Register bits
    namespace lut899l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT900L Register bits
    namespace lut900l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT901L Register bits
    namespace lut901l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT902L Register bits
    namespace lut902l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT903L Register bits
    namespace lut903l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT904L Register bits
    namespace lut904l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT905L Register bits
    namespace lut905l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT906L Register bits
    namespace lut906l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT907L Register bits
    namespace lut907l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT908L Register bits
    namespace lut908l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT909L Register bits
    namespace lut909l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT910L Register bits
    namespace lut910l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT911L Register bits
    namespace lut911l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT912L Register bits
    namespace lut912l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT913L Register bits
    namespace lut913l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT914L Register bits
    namespace lut914l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT915L Register bits
    namespace lut915l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT916L Register bits
    namespace lut916l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT917L Register bits
    namespace lut917l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT918L Register bits
    namespace lut918l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT919L Register bits
    namespace lut919l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT920L Register bits
    namespace lut920l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT921L Register bits
    namespace lut921l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT922L Register bits
    namespace lut922l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT923L Register bits
    namespace lut923l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT924L Register bits
    namespace lut924l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT925L Register bits
    namespace lut925l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT926L Register bits
    namespace lut926l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT927L Register bits
    namespace lut927l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT928L Register bits
    namespace lut928l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT929L Register bits
    namespace lut929l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT930L Register bits
    namespace lut930l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT931L Register bits
    namespace lut931l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT932L Register bits
    namespace lut932l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT933L Register bits
    namespace lut933l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT934L Register bits
    namespace lut934l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT935L Register bits
    namespace lut935l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT936L Register bits
    namespace lut936l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT937L Register bits
    namespace lut937l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT938L Register bits
    namespace lut938l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT939L Register bits
    namespace lut939l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT940L Register bits
    namespace lut940l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT941L Register bits
    namespace lut941l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT942L Register bits
    namespace lut942l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT943L Register bits
    namespace lut943l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT944L Register bits
    namespace lut944l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT945L Register bits
    namespace lut945l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT946L Register bits
    namespace lut946l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT947L Register bits
    namespace lut947l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT948L Register bits
    namespace lut948l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT949L Register bits
    namespace lut949l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT950L Register bits
    namespace lut950l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT951L Register bits
    namespace lut951l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT952L Register bits
    namespace lut952l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT953L Register bits
    namespace lut953l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT954L Register bits
    namespace lut954l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT955L Register bits
    namespace lut955l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT956L Register bits
    namespace lut956l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT957L Register bits
    namespace lut957l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT958L Register bits
    namespace lut958l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT959L Register bits
    namespace lut959l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT960L Register bits
    namespace lut960l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT961L Register bits
    namespace lut961l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT962L Register bits
    namespace lut962l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT963L Register bits
    namespace lut963l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT964L Register bits
    namespace lut964l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT965L Register bits
    namespace lut965l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT966L Register bits
    namespace lut966l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT967L Register bits
    namespace lut967l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT968L Register bits
    namespace lut968l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT969L Register bits
    namespace lut969l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT970L Register bits
    namespace lut970l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT971L Register bits
    namespace lut971l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT972L Register bits
    namespace lut972l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT973L Register bits
    namespace lut973l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT974L Register bits
    namespace lut974l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT975L Register bits
    namespace lut975l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT976L Register bits
    namespace lut976l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT977L Register bits
    namespace lut977l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT978L Register bits
    namespace lut978l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT979L Register bits
    namespace lut979l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT980L Register bits
    namespace lut980l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT981L Register bits
    namespace lut981l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT982L Register bits
    namespace lut982l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT983L Register bits
    namespace lut983l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT984L Register bits
    namespace lut984l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT985L Register bits
    namespace lut985l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT986L Register bits
    namespace lut986l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT987L Register bits
    namespace lut987l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT988L Register bits
    namespace lut988l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT989L Register bits
    namespace lut989l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT990L Register bits
    namespace lut990l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT991L Register bits
    namespace lut991l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT992L Register bits
    namespace lut992l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT993L Register bits
    namespace lut993l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT994L Register bits
    namespace lut994l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT995L Register bits
    namespace lut995l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT996L Register bits
    namespace lut996l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT997L Register bits
    namespace lut997l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT998L Register bits
    namespace lut998l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT999L Register bits
    namespace lut999l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1000L Register bits
    namespace lut1000l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1001L Register bits
    namespace lut1001l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1002L Register bits
    namespace lut1002l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1003L Register bits
    namespace lut1003l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1004L Register bits
    namespace lut1004l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1005L Register bits
    namespace lut1005l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1006L Register bits
    namespace lut1006l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1007L Register bits
    namespace lut1007l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1008L Register bits
    namespace lut1008l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1009L Register bits
    namespace lut1009l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1010L Register bits
    namespace lut1010l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1011L Register bits
    namespace lut1011l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1012L Register bits
    namespace lut1012l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1013L Register bits
    namespace lut1013l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1014L Register bits
    namespace lut1014l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1015L Register bits
    namespace lut1015l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1016L Register bits
    namespace lut1016l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1017L Register bits
    namespace lut1017l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1018L Register bits
    namespace lut1018l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1019L Register bits
    namespace lut1019l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1020L Register bits
    namespace lut1020l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1021L Register bits
    namespace lut1021l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1022L Register bits
    namespace lut1022l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT1023L Register bits
    namespace lut1023l_bits {
        constexpr uint32_t EN = (1U << 0);  ///< Enable
        constexpr uint32_t FVB = (8 << 8);  ///< First Valid Block
        constexpr uint32_t LVB = (8 << 16);  ///< Last Valid Block
    }

    /// LUT0H Register bits
    namespace lut0h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1H Register bits
    namespace lut1h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT2H Register bits
    namespace lut2h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT3H Register bits
    namespace lut3h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT4H Register bits
    namespace lut4h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT5H Register bits
    namespace lut5h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT6H Register bits
    namespace lut6h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT7H Register bits
    namespace lut7h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT8H Register bits
    namespace lut8h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT9H Register bits
    namespace lut9h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT10H Register bits
    namespace lut10h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT11H Register bits
    namespace lut11h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT12H Register bits
    namespace lut12h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT13H Register bits
    namespace lut13h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT14H Register bits
    namespace lut14h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT15H Register bits
    namespace lut15h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT16H Register bits
    namespace lut16h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT17H Register bits
    namespace lut17h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT18H Register bits
    namespace lut18h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT19H Register bits
    namespace lut19h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT20H Register bits
    namespace lut20h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT21H Register bits
    namespace lut21h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT22H Register bits
    namespace lut22h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT23H Register bits
    namespace lut23h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT24H Register bits
    namespace lut24h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT25H Register bits
    namespace lut25h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT26H Register bits
    namespace lut26h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT27H Register bits
    namespace lut27h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT28H Register bits
    namespace lut28h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT29H Register bits
    namespace lut29h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT30H Register bits
    namespace lut30h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT31H Register bits
    namespace lut31h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT32H Register bits
    namespace lut32h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT33H Register bits
    namespace lut33h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT34H Register bits
    namespace lut34h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT35H Register bits
    namespace lut35h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT36H Register bits
    namespace lut36h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT37H Register bits
    namespace lut37h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT38H Register bits
    namespace lut38h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT39H Register bits
    namespace lut39h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT40H Register bits
    namespace lut40h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT41H Register bits
    namespace lut41h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT42H Register bits
    namespace lut42h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT43H Register bits
    namespace lut43h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT44H Register bits
    namespace lut44h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT45H Register bits
    namespace lut45h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT46H Register bits
    namespace lut46h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT47H Register bits
    namespace lut47h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT48H Register bits
    namespace lut48h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT49H Register bits
    namespace lut49h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT50H Register bits
    namespace lut50h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT51H Register bits
    namespace lut51h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT52H Register bits
    namespace lut52h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT53H Register bits
    namespace lut53h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT54H Register bits
    namespace lut54h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT55H Register bits
    namespace lut55h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT56H Register bits
    namespace lut56h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT57H Register bits
    namespace lut57h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT58H Register bits
    namespace lut58h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT59H Register bits
    namespace lut59h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT60H Register bits
    namespace lut60h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT61H Register bits
    namespace lut61h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT62H Register bits
    namespace lut62h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT63H Register bits
    namespace lut63h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT64H Register bits
    namespace lut64h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT65H Register bits
    namespace lut65h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT66H Register bits
    namespace lut66h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT67H Register bits
    namespace lut67h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT68H Register bits
    namespace lut68h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT69H Register bits
    namespace lut69h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT70H Register bits
    namespace lut70h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT71H Register bits
    namespace lut71h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT72H Register bits
    namespace lut72h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT73H Register bits
    namespace lut73h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT74H Register bits
    namespace lut74h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT75H Register bits
    namespace lut75h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT76H Register bits
    namespace lut76h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT77H Register bits
    namespace lut77h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT78H Register bits
    namespace lut78h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT79H Register bits
    namespace lut79h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT80H Register bits
    namespace lut80h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT81H Register bits
    namespace lut81h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT82H Register bits
    namespace lut82h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT83H Register bits
    namespace lut83h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT84H Register bits
    namespace lut84h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT85H Register bits
    namespace lut85h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT86H Register bits
    namespace lut86h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT87H Register bits
    namespace lut87h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT88H Register bits
    namespace lut88h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT89H Register bits
    namespace lut89h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT90H Register bits
    namespace lut90h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT91H Register bits
    namespace lut91h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT92H Register bits
    namespace lut92h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT93H Register bits
    namespace lut93h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT94H Register bits
    namespace lut94h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT95H Register bits
    namespace lut95h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT96H Register bits
    namespace lut96h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT97H Register bits
    namespace lut97h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT98H Register bits
    namespace lut98h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT99H Register bits
    namespace lut99h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT100H Register bits
    namespace lut100h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT101H Register bits
    namespace lut101h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT102H Register bits
    namespace lut102h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT103H Register bits
    namespace lut103h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT104H Register bits
    namespace lut104h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT105H Register bits
    namespace lut105h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT106H Register bits
    namespace lut106h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT107H Register bits
    namespace lut107h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT108H Register bits
    namespace lut108h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT109H Register bits
    namespace lut109h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT110H Register bits
    namespace lut110h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT111H Register bits
    namespace lut111h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT112H Register bits
    namespace lut112h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT113H Register bits
    namespace lut113h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT114H Register bits
    namespace lut114h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT115H Register bits
    namespace lut115h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT116H Register bits
    namespace lut116h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT117H Register bits
    namespace lut117h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT118H Register bits
    namespace lut118h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT119H Register bits
    namespace lut119h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT120H Register bits
    namespace lut120h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT121H Register bits
    namespace lut121h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT122H Register bits
    namespace lut122h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT123H Register bits
    namespace lut123h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT124H Register bits
    namespace lut124h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT125H Register bits
    namespace lut125h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT126H Register bits
    namespace lut126h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT127H Register bits
    namespace lut127h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT128H Register bits
    namespace lut128h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT129H Register bits
    namespace lut129h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT130H Register bits
    namespace lut130h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT131H Register bits
    namespace lut131h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT132H Register bits
    namespace lut132h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT133H Register bits
    namespace lut133h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT134H Register bits
    namespace lut134h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT135H Register bits
    namespace lut135h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT136H Register bits
    namespace lut136h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT137H Register bits
    namespace lut137h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT138H Register bits
    namespace lut138h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT139H Register bits
    namespace lut139h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT140H Register bits
    namespace lut140h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT141H Register bits
    namespace lut141h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT142H Register bits
    namespace lut142h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT143H Register bits
    namespace lut143h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT144H Register bits
    namespace lut144h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT145H Register bits
    namespace lut145h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT146H Register bits
    namespace lut146h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT147H Register bits
    namespace lut147h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT148H Register bits
    namespace lut148h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT149H Register bits
    namespace lut149h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT150H Register bits
    namespace lut150h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT151H Register bits
    namespace lut151h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT152H Register bits
    namespace lut152h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT153H Register bits
    namespace lut153h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT154H Register bits
    namespace lut154h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT155H Register bits
    namespace lut155h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT156H Register bits
    namespace lut156h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT157H Register bits
    namespace lut157h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT158H Register bits
    namespace lut158h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT159H Register bits
    namespace lut159h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT160H Register bits
    namespace lut160h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT161H Register bits
    namespace lut161h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT162H Register bits
    namespace lut162h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT163H Register bits
    namespace lut163h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT164H Register bits
    namespace lut164h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT165H Register bits
    namespace lut165h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT166H Register bits
    namespace lut166h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT167H Register bits
    namespace lut167h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT168H Register bits
    namespace lut168h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT169H Register bits
    namespace lut169h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT170H Register bits
    namespace lut170h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT171H Register bits
    namespace lut171h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT172H Register bits
    namespace lut172h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT173H Register bits
    namespace lut173h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT174H Register bits
    namespace lut174h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT175H Register bits
    namespace lut175h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT176H Register bits
    namespace lut176h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT177H Register bits
    namespace lut177h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT178H Register bits
    namespace lut178h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT179H Register bits
    namespace lut179h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT180H Register bits
    namespace lut180h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT181H Register bits
    namespace lut181h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT182H Register bits
    namespace lut182h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT183H Register bits
    namespace lut183h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT184H Register bits
    namespace lut184h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT185H Register bits
    namespace lut185h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT186H Register bits
    namespace lut186h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT187H Register bits
    namespace lut187h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT188H Register bits
    namespace lut188h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT189H Register bits
    namespace lut189h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT190H Register bits
    namespace lut190h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT191H Register bits
    namespace lut191h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT192H Register bits
    namespace lut192h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT193H Register bits
    namespace lut193h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT194H Register bits
    namespace lut194h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT195H Register bits
    namespace lut195h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT196H Register bits
    namespace lut196h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT197H Register bits
    namespace lut197h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT198H Register bits
    namespace lut198h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT199H Register bits
    namespace lut199h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT200H Register bits
    namespace lut200h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT201H Register bits
    namespace lut201h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT202H Register bits
    namespace lut202h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT203H Register bits
    namespace lut203h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT204H Register bits
    namespace lut204h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT205H Register bits
    namespace lut205h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT206H Register bits
    namespace lut206h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT207H Register bits
    namespace lut207h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT208H Register bits
    namespace lut208h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT209H Register bits
    namespace lut209h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT210H Register bits
    namespace lut210h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT211H Register bits
    namespace lut211h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT212H Register bits
    namespace lut212h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT213H Register bits
    namespace lut213h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT214H Register bits
    namespace lut214h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT215H Register bits
    namespace lut215h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT216H Register bits
    namespace lut216h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT217H Register bits
    namespace lut217h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT218H Register bits
    namespace lut218h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT219H Register bits
    namespace lut219h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT220H Register bits
    namespace lut220h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT221H Register bits
    namespace lut221h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT222H Register bits
    namespace lut222h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT223H Register bits
    namespace lut223h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT224H Register bits
    namespace lut224h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT225H Register bits
    namespace lut225h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT226H Register bits
    namespace lut226h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT227H Register bits
    namespace lut227h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT228H Register bits
    namespace lut228h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT229H Register bits
    namespace lut229h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT230H Register bits
    namespace lut230h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT231H Register bits
    namespace lut231h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT232H Register bits
    namespace lut232h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT233H Register bits
    namespace lut233h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT234H Register bits
    namespace lut234h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT235H Register bits
    namespace lut235h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT236H Register bits
    namespace lut236h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT237H Register bits
    namespace lut237h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT238H Register bits
    namespace lut238h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT239H Register bits
    namespace lut239h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT240H Register bits
    namespace lut240h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT241H Register bits
    namespace lut241h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT242H Register bits
    namespace lut242h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT243H Register bits
    namespace lut243h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT244H Register bits
    namespace lut244h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT245H Register bits
    namespace lut245h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT246H Register bits
    namespace lut246h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT247H Register bits
    namespace lut247h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT248H Register bits
    namespace lut248h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT249H Register bits
    namespace lut249h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT250H Register bits
    namespace lut250h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT251H Register bits
    namespace lut251h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT252H Register bits
    namespace lut252h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT253H Register bits
    namespace lut253h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT254H Register bits
    namespace lut254h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT255H Register bits
    namespace lut255h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT256H Register bits
    namespace lut256h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT257H Register bits
    namespace lut257h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT258H Register bits
    namespace lut258h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT259H Register bits
    namespace lut259h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT260H Register bits
    namespace lut260h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT261H Register bits
    namespace lut261h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT262H Register bits
    namespace lut262h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT263H Register bits
    namespace lut263h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT264H Register bits
    namespace lut264h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT265H Register bits
    namespace lut265h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT266H Register bits
    namespace lut266h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT267H Register bits
    namespace lut267h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT268H Register bits
    namespace lut268h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT269H Register bits
    namespace lut269h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT270H Register bits
    namespace lut270h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT271H Register bits
    namespace lut271h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT272H Register bits
    namespace lut272h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT273H Register bits
    namespace lut273h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT274H Register bits
    namespace lut274h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT275H Register bits
    namespace lut275h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT276H Register bits
    namespace lut276h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT277H Register bits
    namespace lut277h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT278H Register bits
    namespace lut278h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT279H Register bits
    namespace lut279h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT280H Register bits
    namespace lut280h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT281H Register bits
    namespace lut281h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT282H Register bits
    namespace lut282h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT283H Register bits
    namespace lut283h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT284H Register bits
    namespace lut284h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT285H Register bits
    namespace lut285h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT286H Register bits
    namespace lut286h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT287H Register bits
    namespace lut287h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT288H Register bits
    namespace lut288h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT289H Register bits
    namespace lut289h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT290H Register bits
    namespace lut290h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT291H Register bits
    namespace lut291h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT292H Register bits
    namespace lut292h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT293H Register bits
    namespace lut293h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT294H Register bits
    namespace lut294h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT295H Register bits
    namespace lut295h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT296H Register bits
    namespace lut296h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT297H Register bits
    namespace lut297h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT298H Register bits
    namespace lut298h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT299H Register bits
    namespace lut299h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT300H Register bits
    namespace lut300h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT301H Register bits
    namespace lut301h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT302H Register bits
    namespace lut302h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT303H Register bits
    namespace lut303h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT304H Register bits
    namespace lut304h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT305H Register bits
    namespace lut305h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT306H Register bits
    namespace lut306h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT307H Register bits
    namespace lut307h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT308H Register bits
    namespace lut308h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT309H Register bits
    namespace lut309h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT310H Register bits
    namespace lut310h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT311H Register bits
    namespace lut311h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT312H Register bits
    namespace lut312h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT313H Register bits
    namespace lut313h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT314H Register bits
    namespace lut314h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT315H Register bits
    namespace lut315h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT316H Register bits
    namespace lut316h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT317H Register bits
    namespace lut317h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT318H Register bits
    namespace lut318h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT319H Register bits
    namespace lut319h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT320H Register bits
    namespace lut320h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT321H Register bits
    namespace lut321h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT322H Register bits
    namespace lut322h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT323H Register bits
    namespace lut323h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT324H Register bits
    namespace lut324h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT325H Register bits
    namespace lut325h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT326H Register bits
    namespace lut326h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT327H Register bits
    namespace lut327h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT328H Register bits
    namespace lut328h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT329H Register bits
    namespace lut329h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT330H Register bits
    namespace lut330h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT331H Register bits
    namespace lut331h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT332H Register bits
    namespace lut332h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT333H Register bits
    namespace lut333h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT334H Register bits
    namespace lut334h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT335H Register bits
    namespace lut335h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT336H Register bits
    namespace lut336h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT337H Register bits
    namespace lut337h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT338H Register bits
    namespace lut338h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT339H Register bits
    namespace lut339h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT340H Register bits
    namespace lut340h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT341H Register bits
    namespace lut341h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT342H Register bits
    namespace lut342h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT343H Register bits
    namespace lut343h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT344H Register bits
    namespace lut344h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT345H Register bits
    namespace lut345h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT346H Register bits
    namespace lut346h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT347H Register bits
    namespace lut347h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT348H Register bits
    namespace lut348h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT349H Register bits
    namespace lut349h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT350H Register bits
    namespace lut350h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT351H Register bits
    namespace lut351h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT352H Register bits
    namespace lut352h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT353H Register bits
    namespace lut353h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT354H Register bits
    namespace lut354h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT355H Register bits
    namespace lut355h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT356H Register bits
    namespace lut356h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT357H Register bits
    namespace lut357h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT358H Register bits
    namespace lut358h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT359H Register bits
    namespace lut359h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT360H Register bits
    namespace lut360h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT361H Register bits
    namespace lut361h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT362H Register bits
    namespace lut362h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT363H Register bits
    namespace lut363h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT364H Register bits
    namespace lut364h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT365H Register bits
    namespace lut365h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT366H Register bits
    namespace lut366h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT367H Register bits
    namespace lut367h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT368H Register bits
    namespace lut368h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT369H Register bits
    namespace lut369h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT370H Register bits
    namespace lut370h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT371H Register bits
    namespace lut371h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT372H Register bits
    namespace lut372h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT373H Register bits
    namespace lut373h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT374H Register bits
    namespace lut374h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT375H Register bits
    namespace lut375h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT376H Register bits
    namespace lut376h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT377H Register bits
    namespace lut377h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT378H Register bits
    namespace lut378h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT379H Register bits
    namespace lut379h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT380H Register bits
    namespace lut380h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT381H Register bits
    namespace lut381h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT382H Register bits
    namespace lut382h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT383H Register bits
    namespace lut383h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT384H Register bits
    namespace lut384h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT385H Register bits
    namespace lut385h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT386H Register bits
    namespace lut386h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT387H Register bits
    namespace lut387h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT388H Register bits
    namespace lut388h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT389H Register bits
    namespace lut389h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT390H Register bits
    namespace lut390h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT391H Register bits
    namespace lut391h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT392H Register bits
    namespace lut392h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT393H Register bits
    namespace lut393h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT394H Register bits
    namespace lut394h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT395H Register bits
    namespace lut395h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT396H Register bits
    namespace lut396h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT397H Register bits
    namespace lut397h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT398H Register bits
    namespace lut398h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT399H Register bits
    namespace lut399h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT400H Register bits
    namespace lut400h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT401H Register bits
    namespace lut401h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT402H Register bits
    namespace lut402h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT403H Register bits
    namespace lut403h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT404H Register bits
    namespace lut404h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT405H Register bits
    namespace lut405h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT406H Register bits
    namespace lut406h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT407H Register bits
    namespace lut407h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT408H Register bits
    namespace lut408h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT409H Register bits
    namespace lut409h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT410H Register bits
    namespace lut410h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT411H Register bits
    namespace lut411h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT412H Register bits
    namespace lut412h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT413H Register bits
    namespace lut413h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT414H Register bits
    namespace lut414h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT415H Register bits
    namespace lut415h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT416H Register bits
    namespace lut416h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT417H Register bits
    namespace lut417h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT418H Register bits
    namespace lut418h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT419H Register bits
    namespace lut419h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT420H Register bits
    namespace lut420h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT421H Register bits
    namespace lut421h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT422H Register bits
    namespace lut422h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT423H Register bits
    namespace lut423h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT424H Register bits
    namespace lut424h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT425H Register bits
    namespace lut425h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT426H Register bits
    namespace lut426h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT427H Register bits
    namespace lut427h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT428H Register bits
    namespace lut428h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT429H Register bits
    namespace lut429h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT430H Register bits
    namespace lut430h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT431H Register bits
    namespace lut431h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT432H Register bits
    namespace lut432h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT433H Register bits
    namespace lut433h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT434H Register bits
    namespace lut434h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT435H Register bits
    namespace lut435h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT436H Register bits
    namespace lut436h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT437H Register bits
    namespace lut437h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT438H Register bits
    namespace lut438h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT439H Register bits
    namespace lut439h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT440H Register bits
    namespace lut440h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT441H Register bits
    namespace lut441h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT442H Register bits
    namespace lut442h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT443H Register bits
    namespace lut443h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT444H Register bits
    namespace lut444h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT445H Register bits
    namespace lut445h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT446H Register bits
    namespace lut446h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT447H Register bits
    namespace lut447h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT448H Register bits
    namespace lut448h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT449H Register bits
    namespace lut449h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT450H Register bits
    namespace lut450h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT451H Register bits
    namespace lut451h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT452H Register bits
    namespace lut452h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT453H Register bits
    namespace lut453h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT454H Register bits
    namespace lut454h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT455H Register bits
    namespace lut455h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT456H Register bits
    namespace lut456h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT457H Register bits
    namespace lut457h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT458H Register bits
    namespace lut458h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT459H Register bits
    namespace lut459h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT460H Register bits
    namespace lut460h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT461H Register bits
    namespace lut461h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT462H Register bits
    namespace lut462h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT463H Register bits
    namespace lut463h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT464H Register bits
    namespace lut464h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT465H Register bits
    namespace lut465h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT466H Register bits
    namespace lut466h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT467H Register bits
    namespace lut467h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT468H Register bits
    namespace lut468h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT469H Register bits
    namespace lut469h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT470H Register bits
    namespace lut470h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT471H Register bits
    namespace lut471h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT472H Register bits
    namespace lut472h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT473H Register bits
    namespace lut473h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT474H Register bits
    namespace lut474h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT475H Register bits
    namespace lut475h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT476H Register bits
    namespace lut476h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT477H Register bits
    namespace lut477h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT478H Register bits
    namespace lut478h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT479H Register bits
    namespace lut479h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT480H Register bits
    namespace lut480h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT481H Register bits
    namespace lut481h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT482H Register bits
    namespace lut482h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT483H Register bits
    namespace lut483h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT484H Register bits
    namespace lut484h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT485H Register bits
    namespace lut485h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT486H Register bits
    namespace lut486h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT487H Register bits
    namespace lut487h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT488H Register bits
    namespace lut488h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT489H Register bits
    namespace lut489h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT490H Register bits
    namespace lut490h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT491H Register bits
    namespace lut491h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT492H Register bits
    namespace lut492h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT493H Register bits
    namespace lut493h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT494H Register bits
    namespace lut494h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT495H Register bits
    namespace lut495h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT496H Register bits
    namespace lut496h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT497H Register bits
    namespace lut497h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT498H Register bits
    namespace lut498h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT499H Register bits
    namespace lut499h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT500H Register bits
    namespace lut500h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT501H Register bits
    namespace lut501h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT502H Register bits
    namespace lut502h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT503H Register bits
    namespace lut503h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT504H Register bits
    namespace lut504h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT505H Register bits
    namespace lut505h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT506H Register bits
    namespace lut506h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT507H Register bits
    namespace lut507h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT508H Register bits
    namespace lut508h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT509H Register bits
    namespace lut509h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT510H Register bits
    namespace lut510h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT511H Register bits
    namespace lut511h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT512H Register bits
    namespace lut512h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT513H Register bits
    namespace lut513h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT514H Register bits
    namespace lut514h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT515H Register bits
    namespace lut515h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT516H Register bits
    namespace lut516h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT517H Register bits
    namespace lut517h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT518H Register bits
    namespace lut518h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT519H Register bits
    namespace lut519h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT520H Register bits
    namespace lut520h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT521H Register bits
    namespace lut521h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT522H Register bits
    namespace lut522h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT523H Register bits
    namespace lut523h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT524H Register bits
    namespace lut524h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT525H Register bits
    namespace lut525h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT526H Register bits
    namespace lut526h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT527H Register bits
    namespace lut527h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT528H Register bits
    namespace lut528h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT529H Register bits
    namespace lut529h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT530H Register bits
    namespace lut530h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT531H Register bits
    namespace lut531h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT532H Register bits
    namespace lut532h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT533H Register bits
    namespace lut533h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT534H Register bits
    namespace lut534h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT535H Register bits
    namespace lut535h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT536H Register bits
    namespace lut536h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT537H Register bits
    namespace lut537h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT538H Register bits
    namespace lut538h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT539H Register bits
    namespace lut539h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT540H Register bits
    namespace lut540h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT541H Register bits
    namespace lut541h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT542H Register bits
    namespace lut542h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT543H Register bits
    namespace lut543h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT544H Register bits
    namespace lut544h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT545H Register bits
    namespace lut545h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT546H Register bits
    namespace lut546h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT547H Register bits
    namespace lut547h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT548H Register bits
    namespace lut548h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT549H Register bits
    namespace lut549h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT550H Register bits
    namespace lut550h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT551H Register bits
    namespace lut551h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT552H Register bits
    namespace lut552h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT553H Register bits
    namespace lut553h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT554H Register bits
    namespace lut554h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT555H Register bits
    namespace lut555h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT556H Register bits
    namespace lut556h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT557H Register bits
    namespace lut557h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT558H Register bits
    namespace lut558h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT559H Register bits
    namespace lut559h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT560H Register bits
    namespace lut560h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT561H Register bits
    namespace lut561h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT562H Register bits
    namespace lut562h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT563H Register bits
    namespace lut563h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT564H Register bits
    namespace lut564h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT565H Register bits
    namespace lut565h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT566H Register bits
    namespace lut566h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT567H Register bits
    namespace lut567h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT568H Register bits
    namespace lut568h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT569H Register bits
    namespace lut569h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT570H Register bits
    namespace lut570h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT571H Register bits
    namespace lut571h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT572H Register bits
    namespace lut572h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT573H Register bits
    namespace lut573h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT574H Register bits
    namespace lut574h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT575H Register bits
    namespace lut575h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT576H Register bits
    namespace lut576h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT577H Register bits
    namespace lut577h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT578H Register bits
    namespace lut578h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT579H Register bits
    namespace lut579h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT580H Register bits
    namespace lut580h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT581H Register bits
    namespace lut581h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT582H Register bits
    namespace lut582h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT583H Register bits
    namespace lut583h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT584H Register bits
    namespace lut584h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT585H Register bits
    namespace lut585h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT586H Register bits
    namespace lut586h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT587H Register bits
    namespace lut587h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT588H Register bits
    namespace lut588h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT589H Register bits
    namespace lut589h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT590H Register bits
    namespace lut590h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT591H Register bits
    namespace lut591h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT592H Register bits
    namespace lut592h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT593H Register bits
    namespace lut593h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT594H Register bits
    namespace lut594h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT595H Register bits
    namespace lut595h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT596H Register bits
    namespace lut596h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT597H Register bits
    namespace lut597h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT598H Register bits
    namespace lut598h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT599H Register bits
    namespace lut599h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT600H Register bits
    namespace lut600h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT601H Register bits
    namespace lut601h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT602H Register bits
    namespace lut602h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT603H Register bits
    namespace lut603h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT604H Register bits
    namespace lut604h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT605H Register bits
    namespace lut605h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT606H Register bits
    namespace lut606h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT607H Register bits
    namespace lut607h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT608H Register bits
    namespace lut608h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT609H Register bits
    namespace lut609h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT610H Register bits
    namespace lut610h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT611H Register bits
    namespace lut611h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT612H Register bits
    namespace lut612h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT613H Register bits
    namespace lut613h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT614H Register bits
    namespace lut614h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT615H Register bits
    namespace lut615h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT616H Register bits
    namespace lut616h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT617H Register bits
    namespace lut617h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT618H Register bits
    namespace lut618h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT619H Register bits
    namespace lut619h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT620H Register bits
    namespace lut620h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT621H Register bits
    namespace lut621h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT622H Register bits
    namespace lut622h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT623H Register bits
    namespace lut623h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT624H Register bits
    namespace lut624h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT625H Register bits
    namespace lut625h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT626H Register bits
    namespace lut626h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT627H Register bits
    namespace lut627h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT628H Register bits
    namespace lut628h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT629H Register bits
    namespace lut629h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT630H Register bits
    namespace lut630h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT631H Register bits
    namespace lut631h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT632H Register bits
    namespace lut632h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT633H Register bits
    namespace lut633h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT634H Register bits
    namespace lut634h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT635H Register bits
    namespace lut635h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT636H Register bits
    namespace lut636h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT637H Register bits
    namespace lut637h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT638H Register bits
    namespace lut638h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT639H Register bits
    namespace lut639h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT640H Register bits
    namespace lut640h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT641H Register bits
    namespace lut641h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT642H Register bits
    namespace lut642h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT643H Register bits
    namespace lut643h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT644H Register bits
    namespace lut644h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT645H Register bits
    namespace lut645h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT646H Register bits
    namespace lut646h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT647H Register bits
    namespace lut647h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT648H Register bits
    namespace lut648h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT649H Register bits
    namespace lut649h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT650H Register bits
    namespace lut650h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT651H Register bits
    namespace lut651h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT652H Register bits
    namespace lut652h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT653H Register bits
    namespace lut653h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT654H Register bits
    namespace lut654h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT655H Register bits
    namespace lut655h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT656H Register bits
    namespace lut656h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT657H Register bits
    namespace lut657h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT658H Register bits
    namespace lut658h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT659H Register bits
    namespace lut659h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT660H Register bits
    namespace lut660h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT661H Register bits
    namespace lut661h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT662H Register bits
    namespace lut662h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT663H Register bits
    namespace lut663h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT664H Register bits
    namespace lut664h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT665H Register bits
    namespace lut665h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT666H Register bits
    namespace lut666h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT667H Register bits
    namespace lut667h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT668H Register bits
    namespace lut668h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT669H Register bits
    namespace lut669h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT670H Register bits
    namespace lut670h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT671H Register bits
    namespace lut671h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT672H Register bits
    namespace lut672h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT673H Register bits
    namespace lut673h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT674H Register bits
    namespace lut674h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT675H Register bits
    namespace lut675h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT676H Register bits
    namespace lut676h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT677H Register bits
    namespace lut677h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT678H Register bits
    namespace lut678h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT679H Register bits
    namespace lut679h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT680H Register bits
    namespace lut680h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT681H Register bits
    namespace lut681h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT682H Register bits
    namespace lut682h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT683H Register bits
    namespace lut683h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT684H Register bits
    namespace lut684h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT685H Register bits
    namespace lut685h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT686H Register bits
    namespace lut686h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT687H Register bits
    namespace lut687h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT688H Register bits
    namespace lut688h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT689H Register bits
    namespace lut689h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT690H Register bits
    namespace lut690h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT691H Register bits
    namespace lut691h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT692H Register bits
    namespace lut692h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT693H Register bits
    namespace lut693h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT694H Register bits
    namespace lut694h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT695H Register bits
    namespace lut695h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT696H Register bits
    namespace lut696h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT697H Register bits
    namespace lut697h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT698H Register bits
    namespace lut698h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT699H Register bits
    namespace lut699h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT700H Register bits
    namespace lut700h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT701H Register bits
    namespace lut701h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT702H Register bits
    namespace lut702h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT703H Register bits
    namespace lut703h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT704H Register bits
    namespace lut704h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT705H Register bits
    namespace lut705h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT706H Register bits
    namespace lut706h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT707H Register bits
    namespace lut707h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT708H Register bits
    namespace lut708h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT709H Register bits
    namespace lut709h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT710H Register bits
    namespace lut710h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT711H Register bits
    namespace lut711h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT712H Register bits
    namespace lut712h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT713H Register bits
    namespace lut713h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT714H Register bits
    namespace lut714h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT715H Register bits
    namespace lut715h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT716H Register bits
    namespace lut716h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT717H Register bits
    namespace lut717h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT718H Register bits
    namespace lut718h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT719H Register bits
    namespace lut719h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT720H Register bits
    namespace lut720h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT721H Register bits
    namespace lut721h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT722H Register bits
    namespace lut722h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT723H Register bits
    namespace lut723h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT724H Register bits
    namespace lut724h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT725H Register bits
    namespace lut725h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT726H Register bits
    namespace lut726h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT727H Register bits
    namespace lut727h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT728H Register bits
    namespace lut728h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT729H Register bits
    namespace lut729h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT730H Register bits
    namespace lut730h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT731H Register bits
    namespace lut731h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT732H Register bits
    namespace lut732h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT733H Register bits
    namespace lut733h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT734H Register bits
    namespace lut734h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT735H Register bits
    namespace lut735h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT736H Register bits
    namespace lut736h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT737H Register bits
    namespace lut737h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT738H Register bits
    namespace lut738h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT739H Register bits
    namespace lut739h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT740H Register bits
    namespace lut740h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT741H Register bits
    namespace lut741h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT742H Register bits
    namespace lut742h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT743H Register bits
    namespace lut743h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT744H Register bits
    namespace lut744h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT745H Register bits
    namespace lut745h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT746H Register bits
    namespace lut746h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT747H Register bits
    namespace lut747h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT748H Register bits
    namespace lut748h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT749H Register bits
    namespace lut749h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT750H Register bits
    namespace lut750h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT751H Register bits
    namespace lut751h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT752H Register bits
    namespace lut752h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT753H Register bits
    namespace lut753h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT754H Register bits
    namespace lut754h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT755H Register bits
    namespace lut755h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT756H Register bits
    namespace lut756h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT757H Register bits
    namespace lut757h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT758H Register bits
    namespace lut758h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT759H Register bits
    namespace lut759h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT760H Register bits
    namespace lut760h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT761H Register bits
    namespace lut761h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT762H Register bits
    namespace lut762h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT763H Register bits
    namespace lut763h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT764H Register bits
    namespace lut764h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT765H Register bits
    namespace lut765h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT766H Register bits
    namespace lut766h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT767H Register bits
    namespace lut767h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT768H Register bits
    namespace lut768h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT769H Register bits
    namespace lut769h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT770H Register bits
    namespace lut770h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT771H Register bits
    namespace lut771h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT772H Register bits
    namespace lut772h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT773H Register bits
    namespace lut773h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT774H Register bits
    namespace lut774h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT775H Register bits
    namespace lut775h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT776H Register bits
    namespace lut776h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT777H Register bits
    namespace lut777h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT778H Register bits
    namespace lut778h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT779H Register bits
    namespace lut779h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT780H Register bits
    namespace lut780h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT781H Register bits
    namespace lut781h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT782H Register bits
    namespace lut782h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT783H Register bits
    namespace lut783h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT784H Register bits
    namespace lut784h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT785H Register bits
    namespace lut785h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT786H Register bits
    namespace lut786h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT787H Register bits
    namespace lut787h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT788H Register bits
    namespace lut788h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT789H Register bits
    namespace lut789h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT790H Register bits
    namespace lut790h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT791H Register bits
    namespace lut791h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT792H Register bits
    namespace lut792h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT793H Register bits
    namespace lut793h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT794H Register bits
    namespace lut794h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT795H Register bits
    namespace lut795h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT796H Register bits
    namespace lut796h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT797H Register bits
    namespace lut797h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT798H Register bits
    namespace lut798h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT799H Register bits
    namespace lut799h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT800H Register bits
    namespace lut800h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT801H Register bits
    namespace lut801h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT802H Register bits
    namespace lut802h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT803H Register bits
    namespace lut803h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT804H Register bits
    namespace lut804h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT805H Register bits
    namespace lut805h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT806H Register bits
    namespace lut806h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT807H Register bits
    namespace lut807h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT808H Register bits
    namespace lut808h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT809H Register bits
    namespace lut809h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT810H Register bits
    namespace lut810h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT811H Register bits
    namespace lut811h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT812H Register bits
    namespace lut812h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT813H Register bits
    namespace lut813h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT814H Register bits
    namespace lut814h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT815H Register bits
    namespace lut815h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT816H Register bits
    namespace lut816h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT817H Register bits
    namespace lut817h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT818H Register bits
    namespace lut818h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT819H Register bits
    namespace lut819h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT820H Register bits
    namespace lut820h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT821H Register bits
    namespace lut821h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT822H Register bits
    namespace lut822h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT823H Register bits
    namespace lut823h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT824H Register bits
    namespace lut824h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT825H Register bits
    namespace lut825h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT826H Register bits
    namespace lut826h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT827H Register bits
    namespace lut827h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT828H Register bits
    namespace lut828h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT829H Register bits
    namespace lut829h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT830H Register bits
    namespace lut830h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT831H Register bits
    namespace lut831h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT832H Register bits
    namespace lut832h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT833H Register bits
    namespace lut833h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT834H Register bits
    namespace lut834h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT835H Register bits
    namespace lut835h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT836H Register bits
    namespace lut836h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT837H Register bits
    namespace lut837h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT838H Register bits
    namespace lut838h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT839H Register bits
    namespace lut839h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT840H Register bits
    namespace lut840h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT841H Register bits
    namespace lut841h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT842H Register bits
    namespace lut842h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT843H Register bits
    namespace lut843h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT844H Register bits
    namespace lut844h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT845H Register bits
    namespace lut845h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT846H Register bits
    namespace lut846h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT847H Register bits
    namespace lut847h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT848H Register bits
    namespace lut848h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT849H Register bits
    namespace lut849h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT850H Register bits
    namespace lut850h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT851H Register bits
    namespace lut851h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT852H Register bits
    namespace lut852h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT853H Register bits
    namespace lut853h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT854H Register bits
    namespace lut854h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT855H Register bits
    namespace lut855h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT856H Register bits
    namespace lut856h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT857H Register bits
    namespace lut857h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT858H Register bits
    namespace lut858h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT859H Register bits
    namespace lut859h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT860H Register bits
    namespace lut860h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT861H Register bits
    namespace lut861h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT862H Register bits
    namespace lut862h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT863H Register bits
    namespace lut863h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT864H Register bits
    namespace lut864h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT865H Register bits
    namespace lut865h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT866H Register bits
    namespace lut866h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT867H Register bits
    namespace lut867h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT868H Register bits
    namespace lut868h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT869H Register bits
    namespace lut869h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT870H Register bits
    namespace lut870h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT871H Register bits
    namespace lut871h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT872H Register bits
    namespace lut872h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT873H Register bits
    namespace lut873h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT874H Register bits
    namespace lut874h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT875H Register bits
    namespace lut875h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT876H Register bits
    namespace lut876h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT877H Register bits
    namespace lut877h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT878H Register bits
    namespace lut878h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT879H Register bits
    namespace lut879h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT880H Register bits
    namespace lut880h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT881H Register bits
    namespace lut881h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT882H Register bits
    namespace lut882h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT883H Register bits
    namespace lut883h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT884H Register bits
    namespace lut884h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT885H Register bits
    namespace lut885h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT886H Register bits
    namespace lut886h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT887H Register bits
    namespace lut887h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT888H Register bits
    namespace lut888h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT889H Register bits
    namespace lut889h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT890H Register bits
    namespace lut890h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT891H Register bits
    namespace lut891h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT892H Register bits
    namespace lut892h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT893H Register bits
    namespace lut893h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT894H Register bits
    namespace lut894h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT895H Register bits
    namespace lut895h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT896H Register bits
    namespace lut896h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT897H Register bits
    namespace lut897h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT898H Register bits
    namespace lut898h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT899H Register bits
    namespace lut899h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT900H Register bits
    namespace lut900h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT901H Register bits
    namespace lut901h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT902H Register bits
    namespace lut902h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT903H Register bits
    namespace lut903h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT904H Register bits
    namespace lut904h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT905H Register bits
    namespace lut905h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT906H Register bits
    namespace lut906h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT907H Register bits
    namespace lut907h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT908H Register bits
    namespace lut908h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT909H Register bits
    namespace lut909h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT910H Register bits
    namespace lut910h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT911H Register bits
    namespace lut911h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT912H Register bits
    namespace lut912h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT913H Register bits
    namespace lut913h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT914H Register bits
    namespace lut914h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT915H Register bits
    namespace lut915h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT916H Register bits
    namespace lut916h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT917H Register bits
    namespace lut917h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT918H Register bits
    namespace lut918h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT919H Register bits
    namespace lut919h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT920H Register bits
    namespace lut920h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT921H Register bits
    namespace lut921h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT922H Register bits
    namespace lut922h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT923H Register bits
    namespace lut923h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT924H Register bits
    namespace lut924h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT925H Register bits
    namespace lut925h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT926H Register bits
    namespace lut926h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT927H Register bits
    namespace lut927h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT928H Register bits
    namespace lut928h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT929H Register bits
    namespace lut929h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT930H Register bits
    namespace lut930h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT931H Register bits
    namespace lut931h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT932H Register bits
    namespace lut932h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT933H Register bits
    namespace lut933h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT934H Register bits
    namespace lut934h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT935H Register bits
    namespace lut935h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT936H Register bits
    namespace lut936h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT937H Register bits
    namespace lut937h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT938H Register bits
    namespace lut938h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT939H Register bits
    namespace lut939h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT940H Register bits
    namespace lut940h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT941H Register bits
    namespace lut941h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT942H Register bits
    namespace lut942h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT943H Register bits
    namespace lut943h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT944H Register bits
    namespace lut944h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT945H Register bits
    namespace lut945h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT946H Register bits
    namespace lut946h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT947H Register bits
    namespace lut947h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT948H Register bits
    namespace lut948h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT949H Register bits
    namespace lut949h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT950H Register bits
    namespace lut950h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT951H Register bits
    namespace lut951h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT952H Register bits
    namespace lut952h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT953H Register bits
    namespace lut953h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT954H Register bits
    namespace lut954h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT955H Register bits
    namespace lut955h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT956H Register bits
    namespace lut956h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT957H Register bits
    namespace lut957h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT958H Register bits
    namespace lut958h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT959H Register bits
    namespace lut959h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT960H Register bits
    namespace lut960h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT961H Register bits
    namespace lut961h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT962H Register bits
    namespace lut962h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT963H Register bits
    namespace lut963h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT964H Register bits
    namespace lut964h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT965H Register bits
    namespace lut965h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT966H Register bits
    namespace lut966h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT967H Register bits
    namespace lut967h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT968H Register bits
    namespace lut968h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT969H Register bits
    namespace lut969h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT970H Register bits
    namespace lut970h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT971H Register bits
    namespace lut971h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT972H Register bits
    namespace lut972h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT973H Register bits
    namespace lut973h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT974H Register bits
    namespace lut974h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT975H Register bits
    namespace lut975h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT976H Register bits
    namespace lut976h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT977H Register bits
    namespace lut977h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT978H Register bits
    namespace lut978h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT979H Register bits
    namespace lut979h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT980H Register bits
    namespace lut980h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT981H Register bits
    namespace lut981h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT982H Register bits
    namespace lut982h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT983H Register bits
    namespace lut983h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT984H Register bits
    namespace lut984h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT985H Register bits
    namespace lut985h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT986H Register bits
    namespace lut986h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT987H Register bits
    namespace lut987h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT988H Register bits
    namespace lut988h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT989H Register bits
    namespace lut989h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT990H Register bits
    namespace lut990h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT991H Register bits
    namespace lut991h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT992H Register bits
    namespace lut992h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT993H Register bits
    namespace lut993h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT994H Register bits
    namespace lut994h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT995H Register bits
    namespace lut995h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT996H Register bits
    namespace lut996h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT997H Register bits
    namespace lut997h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT998H Register bits
    namespace lut998h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT999H Register bits
    namespace lut999h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1000H Register bits
    namespace lut1000h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1001H Register bits
    namespace lut1001h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1002H Register bits
    namespace lut1002h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1003H Register bits
    namespace lut1003h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1004H Register bits
    namespace lut1004h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1005H Register bits
    namespace lut1005h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1006H Register bits
    namespace lut1006h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1007H Register bits
    namespace lut1007h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1008H Register bits
    namespace lut1008h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1009H Register bits
    namespace lut1009h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1010H Register bits
    namespace lut1010h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1011H Register bits
    namespace lut1011h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1012H Register bits
    namespace lut1012h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1013H Register bits
    namespace lut1013h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1014H Register bits
    namespace lut1014h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1015H Register bits
    namespace lut1015h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1016H Register bits
    namespace lut1016h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1017H Register bits
    namespace lut1017h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1018H Register bits
    namespace lut1018h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1019H Register bits
    namespace lut1019h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1020H Register bits
    namespace lut1020h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1021H Register bits
    namespace lut1021h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1022H Register bits
    namespace lut1022h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

    /// LUT1023H Register bits
    namespace lut1023h_bits {
        constexpr uint32_t LO = (18 << 4);  ///< Line offset
    }

}

// ============================================================================
// FPU Peripheral
// ============================================================================

namespace fpu {
    /// Base addresses
    constexpr uint32_t FPU_BASE = 0xE000EF34;
    constexpr uint32_t FPU_CPACR_BASE = 0xE000ED88;

    /// FPU Register structure
    struct Registers {
        volatile uint32_t FPCCR;  ///< Offset: 0x00 - Floating-point context control register
        volatile uint32_t FPCAR;  ///< Offset: 0x04 - Floating-point context address register
        volatile uint32_t FPSCR;  ///< Offset: 0x08 - Floating-point status control register
    };

    /// Peripheral instances
    inline Registers* FPU = reinterpret_cast<Registers*>(FPU_BASE);
    inline Registers* FPU_CPACR = reinterpret_cast<Registers*>(FPU_CPACR_BASE);

    // Bit definitions
    /// FPCCR Register bits
    namespace fpccr_bits {
        constexpr uint32_t LSPACT = (1U << 0);  ///< LSPACT
        constexpr uint32_t USER = (1U << 1);  ///< USER
        constexpr uint32_t THREAD = (1U << 3);  ///< THREAD
        constexpr uint32_t HFRDY = (1U << 4);  ///< HFRDY
        constexpr uint32_t MMRDY = (1U << 5);  ///< MMRDY
        constexpr uint32_t BFRDY = (1U << 6);  ///< BFRDY
        constexpr uint32_t MONRDY = (1U << 8);  ///< MONRDY
        constexpr uint32_t LSPEN = (1U << 30);  ///< LSPEN
        constexpr uint32_t ASPEN = (1U << 31);  ///< ASPEN
    }

    /// FPCAR Register bits
    namespace fpcar_bits {
        constexpr uint32_t ADDRESS = (29 << 3);  ///< Location of unpopulated floating-point
    }

    /// FPSCR Register bits
    namespace fpscr_bits {
        constexpr uint32_t IOC = (1U << 0);  ///< Invalid operation cumulative exception bit
        constexpr uint32_t DZC = (1U << 1);  ///< Division by zero cumulative exception bit.
        constexpr uint32_t OFC = (1U << 2);  ///< Overflow cumulative exception bit
        constexpr uint32_t UFC = (1U << 3);  ///< Underflow cumulative exception bit
        constexpr uint32_t IXC = (1U << 4);  ///< Inexact cumulative exception bit
        constexpr uint32_t IDC = (1U << 7);  ///< Input denormal cumulative exception bit.
        constexpr uint32_t RMode = (2 << 22);  ///< Rounding Mode control field
        constexpr uint32_t FZ = (1U << 24);  ///< Flush-to-zero mode control bit:
        constexpr uint32_t DN = (1U << 25);  ///< Default NaN mode control bit
        constexpr uint32_t AHP = (1U << 26);  ///< Alternative half-precision control bit
        constexpr uint32_t V = (1U << 28);  ///< Overflow condition code flag
        constexpr uint32_t C = (1U << 29);  ///< Carry condition code flag
        constexpr uint32_t Z = (1U << 30);  ///< Zero condition code flag
        constexpr uint32_t N = (1U << 31);  ///< Negative condition code flag
    }

}

// ============================================================================
// MPU Peripheral
// ============================================================================

namespace mpu {
    /// Base addresses
    constexpr uint32_t MPU_BASE = 0xE000ED90;

    /// MPU Register structure
    struct Registers {
        volatile uint32_t MPU_TYPER;  ///< Offset: 0x00 - MPU type register
        volatile uint32_t MPU_CTRL;  ///< Offset: 0x04 - MPU control register
        volatile uint32_t MPU_RNR;  ///< Offset: 0x08 - MPU region number register
        volatile uint32_t MPU_RBAR;  ///< Offset: 0x0C - MPU region base address register
        volatile uint32_t MPU_RASR;  ///< Offset: 0x10 - MPU region attribute and size register
    };

    /// Peripheral instances
    inline Registers* MPU = reinterpret_cast<Registers*>(MPU_BASE);

    // Bit definitions
    /// MPU_TYPER Register bits
    namespace mpu_typer_bits {
        constexpr uint32_t SEPARATE = (1U << 0);  ///< Separate flag
        constexpr uint32_t DREGION = (8 << 8);  ///< Number of MPU data regions
        constexpr uint32_t IREGION = (8 << 16);  ///< Number of MPU instruction regions
    }

    /// MPU_CTRL Register bits
    namespace mpu_ctrl_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Enables the MPU
        constexpr uint32_t HFNMIENA = (1U << 1);  ///< Enables the operation of MPU during hard fault
        constexpr uint32_t PRIVDEFENA = (1U << 2);  ///< Enable priviliged software access to default memory map
    }

    /// MPU_RNR Register bits
    namespace mpu_rnr_bits {
        constexpr uint32_t REGION = (8 << 0);  ///< MPU region
    }

    /// MPU_RBAR Register bits
    namespace mpu_rbar_bits {
        constexpr uint32_t REGION = (4 << 0);  ///< MPU region field
        constexpr uint32_t VALID = (1U << 4);  ///< MPU region number valid
        constexpr uint32_t ADDR = (27 << 5);  ///< Region base address field
    }

    /// MPU_RASR Register bits
    namespace mpu_rasr_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Region enable bit.
        constexpr uint32_t SIZE = (5 << 1);  ///< Size of the MPU protection region
        constexpr uint32_t SRD = (8 << 8);  ///< Subregion disable bits
        constexpr uint32_t B = (1U << 16);  ///< memory attribute
        constexpr uint32_t C = (1U << 17);  ///< memory attribute
        constexpr uint32_t S = (1U << 18);  ///< Shareable memory attribute
        constexpr uint32_t TEX = (3 << 19);  ///< memory attribute
        constexpr uint32_t AP = (3 << 24);  ///< Access permission
        constexpr uint32_t XN = (1U << 28);  ///< Instruction access disable bit
    }

}

// ============================================================================
// STK Peripheral
// ============================================================================

namespace stk {
    /// Base addresses
    constexpr uint32_t STK_BASE = 0xE000E010;

    /// STK Register structure
    struct Registers {
        volatile uint32_t CTRL;  ///< Offset: 0x00 - SysTick control and status register
        volatile uint32_t LOAD;  ///< Offset: 0x04 - SysTick reload value register
        volatile uint32_t VAL;  ///< Offset: 0x08 - SysTick current value register
        volatile uint32_t CALIB;  ///< Offset: 0x0C - SysTick calibration value register
    };

    /// Peripheral instances
    inline Registers* STK = reinterpret_cast<Registers*>(STK_BASE);

    // Bit definitions
    /// CTRL Register bits
    namespace ctrl_bits {
        constexpr uint32_t ENABLE = (1U << 0);  ///< Counter enable
        constexpr uint32_t TICKINT = (1U << 1);  ///< SysTick exception request enable
        constexpr uint32_t CLKSOURCE = (1U << 2);  ///< Clock source selection
        constexpr uint32_t COUNTFLAG = (1U << 16);  ///< COUNTFLAG
    }

    /// LOAD Register bits
    namespace load_bits {
        constexpr uint32_t RELOAD = (24 << 0);  ///< RELOAD value
    }

    /// VAL Register bits
    namespace val_bits {
        constexpr uint32_t CURRENT = (24 << 0);  ///< Current counter value
    }

    /// CALIB Register bits
    namespace calib_bits {
        constexpr uint32_t TENMS = (24 << 0);  ///< Calibration value
        constexpr uint32_t SKEW = (1U << 30);  ///< SKEW flag: Indicates whether the TENMS value is exact
        constexpr uint32_t NOREF = (1U << 31);  ///< NOREF flag. Reads as zero
    }

}

// ============================================================================
// SCB Peripheral
// ============================================================================

namespace scb {
    /// Base addresses
    constexpr uint32_t SCB_BASE = 0xE000ED00;
    constexpr uint32_t SCB_ACTRL_BASE = 0xE000E008;

    /// SCB Register structure
    struct Registers {
        volatile uint32_t CPUID;  ///< Offset: 0x00 - CPUID base register
        volatile uint32_t ICSR;  ///< Offset: 0x04 - Interrupt control and state register
        volatile uint32_t VTOR;  ///< Offset: 0x08 - Vector table offset register
        volatile uint32_t AIRCR;  ///< Offset: 0x0C - Application interrupt and reset control register
        volatile uint32_t SCR;  ///< Offset: 0x10 - System control register
        volatile uint32_t CCR;  ///< Offset: 0x14 - Configuration and control register
        volatile uint32_t SHPR1;  ///< Offset: 0x18 - System handler priority registers
        volatile uint32_t SHPR2;  ///< Offset: 0x1C - System handler priority registers
        volatile uint32_t SHPR3;  ///< Offset: 0x20 - System handler priority registers
        volatile uint32_t SHCRS;  ///< Offset: 0x24 - System handler control and state register
        volatile uint32_t CFSR_UFSR_BFSR_MMFSR;  ///< Offset: 0x28 - Configurable fault status register
        volatile uint32_t HFSR;  ///< Offset: 0x2C - Hard fault status register
        volatile uint32_t MMFAR;  ///< Offset: 0x34 - Memory management fault address register
        volatile uint32_t BFAR;  ///< Offset: 0x38 - Bus fault address register
        volatile uint32_t AFSR;  ///< Offset: 0x3C - Auxiliary fault status register
    };

    /// Peripheral instances
    inline Registers* SCB = reinterpret_cast<Registers*>(SCB_BASE);
    inline Registers* SCB_ACTRL = reinterpret_cast<Registers*>(SCB_ACTRL_BASE);

    // Bit definitions
    /// CPUID Register bits
    namespace cpuid_bits {
        constexpr uint32_t Revision = (4 << 0);  ///< Revision number
        constexpr uint32_t PartNo = (12 << 4);  ///< Part number of the processor
        constexpr uint32_t Constant = (4 << 16);  ///< Reads as 0xF
        constexpr uint32_t Variant = (4 << 20);  ///< Variant number
        constexpr uint32_t Implementer = (8 << 24);  ///< Implementer code
    }

    /// ICSR Register bits
    namespace icsr_bits {
        constexpr uint32_t VECTACTIVE = (9 << 0);  ///< Active vector
        constexpr uint32_t RETTOBASE = (1U << 11);  ///< Return to base level
        constexpr uint32_t VECTPENDING = (7 << 12);  ///< Pending vector
        constexpr uint32_t ISRPENDING = (1U << 22);  ///< Interrupt pending flag
        constexpr uint32_t PENDSTCLR = (1U << 25);  ///< SysTick exception clear-pending bit
        constexpr uint32_t PENDSTSET = (1U << 26);  ///< SysTick exception set-pending bit
        constexpr uint32_t PENDSVCLR = (1U << 27);  ///< PendSV clear-pending bit
        constexpr uint32_t PENDSVSET = (1U << 28);  ///< PendSV set-pending bit
        constexpr uint32_t NMIPENDSET = (1U << 31);  ///< NMI set-pending bit.
    }

    /// VTOR Register bits
    namespace vtor_bits {
        constexpr uint32_t TBLOFF = (21 << 9);  ///< Vector table base offset field
    }

    /// AIRCR Register bits
    namespace aircr_bits {
        constexpr uint32_t VECTRESET = (1U << 0);  ///< VECTRESET
        constexpr uint32_t VECTCLRACTIVE = (1U << 1);  ///< VECTCLRACTIVE
        constexpr uint32_t SYSRESETREQ = (1U << 2);  ///< SYSRESETREQ
        constexpr uint32_t PRIGROUP = (3 << 8);  ///< PRIGROUP
        constexpr uint32_t ENDIANESS = (1U << 15);  ///< ENDIANESS
        constexpr uint32_t VECTKEYSTAT = (16 << 16);  ///< Register key
    }

    /// SCR Register bits
    namespace scr_bits {
        constexpr uint32_t SLEEPONEXIT = (1U << 1);  ///< SLEEPONEXIT
        constexpr uint32_t SLEEPDEEP = (1U << 2);  ///< SLEEPDEEP
        constexpr uint32_t SEVEONPEND = (1U << 4);  ///< Send Event on Pending bit
    }

    /// CCR Register bits
    namespace ccr_bits {
        constexpr uint32_t NONBASETHRDENA = (1U << 0);  ///< Configures how the processor enters Thread mode
        constexpr uint32_t USERSETMPEND = (1U << 1);  ///< USERSETMPEND
        constexpr uint32_t UNALIGN__TRP = (1U << 3);  ///< UNALIGN_ TRP
        constexpr uint32_t DIV_0_TRP = (1U << 4);  ///< DIV_0_TRP
        constexpr uint32_t BFHFNMIGN = (1U << 8);  ///< BFHFNMIGN
        constexpr uint32_t STKALIGN = (1U << 9);  ///< STKALIGN
    }

    /// SHPR1 Register bits
    namespace shpr1_bits {
        constexpr uint32_t PRI_4 = (8 << 0);  ///< Priority of system handler 4
        constexpr uint32_t PRI_5 = (8 << 8);  ///< Priority of system handler 5
        constexpr uint32_t PRI_6 = (8 << 16);  ///< Priority of system handler 6
    }

    /// SHPR2 Register bits
    namespace shpr2_bits {
        constexpr uint32_t PRI_11 = (8 << 24);  ///< Priority of system handler 11
    }

    /// SHPR3 Register bits
    namespace shpr3_bits {
        constexpr uint32_t PRI_14 = (8 << 16);  ///< Priority of system handler 14
        constexpr uint32_t PRI_15 = (8 << 24);  ///< Priority of system handler 15
    }

    /// SHCRS Register bits
    namespace shcrs_bits {
        constexpr uint32_t MEMFAULTACT = (1U << 0);  ///< Memory management fault exception active bit
        constexpr uint32_t BUSFAULTACT = (1U << 1);  ///< Bus fault exception active bit
        constexpr uint32_t USGFAULTACT = (1U << 3);  ///< Usage fault exception active bit
        constexpr uint32_t SVCALLACT = (1U << 7);  ///< SVC call active bit
        constexpr uint32_t MONITORACT = (1U << 8);  ///< Debug monitor active bit
        constexpr uint32_t PENDSVACT = (1U << 10);  ///< PendSV exception active bit
        constexpr uint32_t SYSTICKACT = (1U << 11);  ///< SysTick exception active bit
        constexpr uint32_t USGFAULTPENDED = (1U << 12);  ///< Usage fault exception pending bit
        constexpr uint32_t MEMFAULTPENDED = (1U << 13);  ///< Memory management fault exception pending bit
        constexpr uint32_t BUSFAULTPENDED = (1U << 14);  ///< Bus fault exception pending bit
        constexpr uint32_t SVCALLPENDED = (1U << 15);  ///< SVC call pending bit
        constexpr uint32_t MEMFAULTENA = (1U << 16);  ///< Memory management fault enable bit
        constexpr uint32_t BUSFAULTENA = (1U << 17);  ///< Bus fault enable bit
        constexpr uint32_t USGFAULTENA = (1U << 18);  ///< Usage fault enable bit
    }

    /// CFSR_UFSR_BFSR_MMFSR Register bits
    namespace cfsr_ufsr_bfsr_mmfsr_bits {
        constexpr uint32_t IACCVIOL = (1U << 1);  ///< Instruction access violation flag
        constexpr uint32_t MUNSTKERR = (1U << 3);  ///< Memory manager fault on unstacking for a return from exception
        constexpr uint32_t MSTKERR = (1U << 4);  ///< Memory manager fault on stacking for exception entry.
        constexpr uint32_t MLSPERR = (1U << 5);  ///< MLSPERR
        constexpr uint32_t MMARVALID = (1U << 7);  ///< Memory Management Fault Address Register (MMAR) valid flag
        constexpr uint32_t IBUSERR = (1U << 8);  ///< Instruction bus error
        constexpr uint32_t PRECISERR = (1U << 9);  ///< Precise data bus error
        constexpr uint32_t IMPRECISERR = (1U << 10);  ///< Imprecise data bus error
        constexpr uint32_t UNSTKERR = (1U << 11);  ///< Bus fault on unstacking for a return from exception
        constexpr uint32_t STKERR = (1U << 12);  ///< Bus fault on stacking for exception entry
        constexpr uint32_t LSPERR = (1U << 13);  ///< Bus fault on floating-point lazy state preservation
        constexpr uint32_t BFARVALID = (1U << 15);  ///< Bus Fault Address Register (BFAR) valid flag
        constexpr uint32_t UNDEFINSTR = (1U << 16);  ///< Undefined instruction usage fault
        constexpr uint32_t INVSTATE = (1U << 17);  ///< Invalid state usage fault
        constexpr uint32_t INVPC = (1U << 18);  ///< Invalid PC load usage fault
        constexpr uint32_t NOCP = (1U << 19);  ///< No coprocessor usage fault.
        constexpr uint32_t UNALIGNED = (1U << 24);  ///< Unaligned access usage fault
        constexpr uint32_t DIVBYZERO = (1U << 25);  ///< Divide by zero usage fault
    }

    /// HFSR Register bits
    namespace hfsr_bits {
        constexpr uint32_t VECTTBL = (1U << 1);  ///< Vector table hard fault
        constexpr uint32_t FORCED = (1U << 30);  ///< Forced hard fault
        constexpr uint32_t DEBUG_VT = (1U << 31);  ///< Reserved for Debug use
    }

    /// MMFAR Register bits
    namespace mmfar_bits {
        constexpr uint32_t MMFAR = (32 << 0);  ///< Memory management fault address
    }

    /// BFAR Register bits
    namespace bfar_bits {
        constexpr uint32_t BFAR = (32 << 0);  ///< Bus fault address
    }

    /// AFSR Register bits
    namespace afsr_bits {
        constexpr uint32_t IMPDEF = (32 << 0);  ///< Implementation defined
    }

}


} // namespace alloy::generated::stm32l4s7

#endif // ALLOY_GENERATED_STM32L4S7_PERIPHERALS_HPP