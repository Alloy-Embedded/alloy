{
  "family": "STM32G0",
  "architecture": "arm-cortex-m0",
  "vendor": "Unknown",
  "mcus": {
    "STM32G0B0": {
      "flash": {
        "size_kb": 64,
        "base_address": "0x08000000",
        "page_size_kb": 1
      },
      "ram": {
        "size_kb": 20,
        "base_address": "0x20000000"
      },
      "peripherals": {
        "ADC": {
          "instances": [
            {
              "name": "ADC",
              "base": "0x40012400",
              "irq": 12
            }
          ],
          "registers": {
            "ADC_ISR": {
              "offset": "0x00",
              "size": 32,
              "description": "ADC interrupt and status register"
            },
            "ADC_IER": {
              "offset": "0x04",
              "size": 32,
              "description": "ADC interrupt enable register"
            },
            "ADC_CR": {
              "offset": "0x08",
              "size": 32,
              "description": "ADC control register"
            },
            "ADC_CFGR1": {
              "offset": "0x0C",
              "size": 32,
              "description": "ADC configuration register 1"
            },
            "ADC_CFGR2": {
              "offset": "0x10",
              "size": 32,
              "description": "ADC configuration register 2"
            },
            "ADC_SMPR": {
              "offset": "0x14",
              "size": 32,
              "description": "ADC sampling time register"
            },
            "ADC_AWD1TR": {
              "offset": "0x20",
              "size": 32,
              "description": "ADC watchdog threshold register"
            },
            "ADC_AWD2TR": {
              "offset": "0x24",
              "size": 32,
              "description": "ADC watchdog threshold register"
            },
            "ADC_CHSELR_0": {
              "offset": "0x28",
              "size": 32,
              "description": "ADC channel selection register [alternate]"
            },
            "ADC_CHSELR_1": {
              "offset": "0x28",
              "size": 32,
              "description": "channel selection register CHSELRMOD = 1 in\n            ADC_CFGR1"
            },
            "ADC_AWD3TR": {
              "offset": "0x2C",
              "size": 32,
              "description": "ADC watchdog threshold register"
            },
            "ADC_DR": {
              "offset": "0x40",
              "size": 32,
              "description": "ADC data register"
            },
            "ADC_AWD2CR": {
              "offset": "0xA0",
              "size": 32,
              "description": "ADC Analog Watchdog 2 Configuration register"
            },
            "ADC_AWD3CR": {
              "offset": "0xA4",
              "size": 32,
              "description": "ADC Analog Watchdog 3 Configuration register"
            },
            "ADC_CALFACT": {
              "offset": "0xB4",
              "size": 32,
              "description": "ADC Calibration factor"
            },
            "ADC_CCR": {
              "offset": "0x308",
              "size": 32,
              "description": "ADC common configuration register"
            }
          },
          "bits": {
            "ADC_ISR": {
              "ADRDY": {
                "bit": 0,
                "description": "ADC ready\nThis bit is set by hardware after the ADC has been enabled (ADEN=1) and when the ADC reaches a state where it is ready to accept conversion requests.\nIt is cleared by software writing 1 to it."
              },
              "EOSMP": {
                "bit": 1,
                "description": "End of sampling flag\nThis bit is set by hardware during the conversion, at the end of the sampling phase.It is cleared by software by programming it to '1\u00e2\u0080\u0099."
              },
              "EOC": {
                "bit": 2,
                "description": "End of conversion flag\nThis bit is set by hardware at the end of each conversion of a channel when a new data result is available in the ADC_DR register. It is cleared by software writing 1 to it or by reading the ADC_DR register."
              },
              "EOS": {
                "bit": 3,
                "description": "End of sequence flag\nThis bit is set by hardware at the end of the conversion of a sequence of channels selected by the CHSEL bits. It is cleared by software writing 1 to it."
              },
              "OVR": {
                "bit": 4,
                "description": "ADC overrun\nThis bit is set by hardware when an overrun occurs, meaning that a new conversion has complete while the EOC flag was already set. It is cleared by software writing 1 to it."
              },
              "AWD1": {
                "bit": 7,
                "description": "Analog watchdog 1 flag\nThis bit is set by hardware when the converted voltage crosses the values programmed in ADC_TR1 and ADC_HR1 registers. It is cleared by software by programming it to 1."
              },
              "AWD2": {
                "bit": 8,
                "description": "Analog watchdog 2 flag\nThis bit is set by hardware when the converted voltage crosses the values programmed in ADC_AWD2TR and ADC_AWD2TR registers. It is cleared by software programming it it."
              },
              "AWD3": {
                "bit": 9,
                "description": "Analog watchdog 3 flag\nThis bit is set by hardware when the converted voltage crosses the values programmed in ADC_AWD3TR and ADC_AWD3TR registers. It is cleared by software by programming it to 1."
              },
              "EOCAL": {
                "bit": 11,
                "description": "End Of Calibration flag\nThis bit is set by hardware when calibration is complete. It is cleared by software writing 1 to it."
              },
              "CCRDY": {
                "bit": 13,
                "description": "Channel Configuration Ready flag\nThis flag bit is set by hardware when the channel configuration is applied after programming to ADC_CHSELR register or changing CHSELRMOD or SCANDIR. It is cleared by software by programming it to it.\nNote: When the software configures the channels (by programming ADC_CHSELR or changing CHSELRMOD or SCANDIR), it must wait until the CCRDY flag rises before configuring again or starting conversions, otherwise the new configuration (or the START bit) is ignored. Once the flag is asserted, if the software needs to configure again the channels, it must clear the CCRDY flag before proceeding with a new configuration."
              }
            },
            "ADC_IER": {
              "ADRDYIE": {
                "bit": 0,
                "description": "ADC ready interrupt enable\nThis bit is set and cleared by software to enable/disable the ADC Ready interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "EOSMPIE": {
                "bit": 1,
                "description": "End of sampling flag interrupt enable\nThis bit is set and cleared by software to enable/disable the end of the sampling phase interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "EOCIE": {
                "bit": 2,
                "description": "End of conversion interrupt enable\nThis bit is set and cleared by software to enable/disable the end of conversion interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "EOSIE": {
                "bit": 3,
                "description": "End of conversion sequence interrupt enable\nThis bit is set and cleared by software to enable/disable the end of sequence of conversions interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "OVRIE": {
                "bit": 4,
                "description": "Overrun interrupt enable\nThis bit is set and cleared by software to enable/disable the overrun interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "AWD1IE": {
                "bit": 7,
                "description": "Analog watchdog 1 interrupt enable\nThis bit is set and cleared by software to enable/disable the analog watchdog interrupt.\nNote: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "AWD2IE": {
                "bit": 8,
                "description": "Analog watchdog 2 interrupt enable\nThis bit is set and cleared by software to enable/disable the analog watchdog interrupt.\nNote: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "AWD3IE": {
                "bit": 9,
                "description": "Analog watchdog 3 interrupt enable\nThis bit is set and cleared by software to enable/disable the analog watchdog interrupt.\nNote: The Software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "EOCALIE": {
                "bit": 11,
                "description": "End of calibration interrupt enable\nThis bit is set and cleared by software to enable/disable the end of calibration interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "CCRDYIE": {
                "bit": 13,
                "description": "Channel Configuration Ready Interrupt enable\nThis bit is set and cleared by software to enable/disable the channel configuration ready interrupt.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              }
            },
            "ADC_CR": {
              "ADEN": {
                "bit": 0,
                "description": "ADC enable command\nThis bit is set by software to enable the ADC. The ADC is effectively ready to operate once the ADRDY flag has been set.\nIt is cleared by hardware when the ADC is disabled, after the execution of the ADDIS command.\nNote: The software is allowed to set ADEN only when all bits of ADC_CR registers are 0 (ADCAL=0, ADSTP=0, ADSTART=0, ADDIS=0 and ADEN=0)"
              },
              "ADDIS": {
                "bit": 1,
                "description": "ADC disable command\nThis bit is set by software to disable the ADC (ADDIS command) and put it into power-down state (OFF state).\nIt is cleared by hardware once the ADC is effectively disabled (ADEN is also cleared by hardware at this time).\nNote: Setting ADDIS to '1\u00e2\u0080\u0099 is only effective when ADEN=1 and ADSTART=0 (which ensures that no conversion is ongoing)"
              },
              "ADSTART": {
                "bit": 2,
                "description": "ADC start conversion command\nThis bit is set by software to start ADC conversion. Depending on the EXTEN [1:0] configuration bits, a conversion either starts immediately (software trigger configuration) or once a hardware trigger event occurs (hardware trigger configuration).\nIt is cleared by hardware:\nIn single conversion mode (CONT=0, DISCEN=0), when software trigger is selected (EXTEN=00): at the assertion of the end of Conversion Sequence (EOS) flag.\nIn discontinuous conversion mode(CONT=0, DISCEN=1), when the software trigger is selected (EXTEN=00): at the assertion of the end of Conversion (EOC) flag.\nIn all other cases: after the execution of the ADSTP command, at the same time as the ADSTP bit is cleared by hardware.\nNote: The software is allowed to set ADSTART only when ADEN=1 and ADDIS=0 (ADC is enabled and there is no pending request to disable the ADC).\nAfter writing to ADC_CHSELR register or changing CHSELRMOD or SCANDIRW, it is mandatory to wait until CCRDY flag is asserted before setting ADSTART, otherwise, the value written to ADSTART is ignored."
              },
              "ADSTP": {
                "bit": 4,
                "description": "ADC stop conversion command\nThis bit is set by software to stop and discard an ongoing conversion (ADSTP Command).\nIt is cleared by hardware when the conversion is effectively discarded and the ADC is ready to accept a new start conversion command.\nNote: Setting ADSTP to '1\u00e2\u0080\u0099 is only effective when ADSTART=1 and ADDIS=0 (ADC is enabled and may be converting and there is no pending request to disable the ADC)"
              },
              "ADVREGEN": {
                "bit": 28,
                "description": "ADC Voltage Regulator Enable\nThis bit is set by software, to enable the ADC internal voltage regulator. The voltage regulator output is available after tADCVREG_SETUP.\nIt is cleared by software to disable the voltage regulator. It can be cleared only if ADEN is et to 0.\nNote: The software is allowed to program this bit field only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0)."
              },
              "ADCAL": {
                "bit": 31,
                "description": "ADC calibration\nThis bit is set by software to start the calibration of the ADC.\nIt is cleared by hardware after calibration is complete.\nNote: The software is allowed to set ADCAL only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0).\nThe software is allowed to update the calibration factor by writing ADC_CALFACT only when ADEN=1 and ADSTART=0 (ADC enabled and no conversion is ongoing)."
              }
            },
            "ADC_CFGR1": {
              "DMAEN": {
                "bit": 0,
                "description": "Direct memory access enable\nThis bit is set and cleared by software to enable the generation of DMA requests. This allows the DMA controller to be used to manage automatically the converted data. For more details, refer to .\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "DMACFG": {
                "bit": 1,
                "description": "Direct memory access configuration\nThis bit is set and cleared by software to select between two DMA modes of operation and is effective only when DMAEN=1.\nFor more details, refer to page351\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "SCANDIR": {
                "bit": 2,
                "description": "Scan sequence direction\nThis bit is set and cleared by software to select the direction in which the channels is scanned in the sequence. It is effective only if CHSELMOD bit is cleared to 0.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "RES": {
                "bit": 3,
                "description": "Data resolution\nThese bits are written by software to select the resolution of the conversion.\nNote: The software is allowed to write these bits only when ADEN=0.",
                "width": 2
              },
              "ALIGN": {
                "bit": 5,
                "description": "Data alignment\nThis bit is set and cleared by software to select right or left alignment. Refer to Data alignment and resolution (oversampling disabled: OVSE = 0) on page349\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "EXTSEL": {
                "bit": 6,
                "description": "External trigger selection\nThese bits select the external event used to trigger the start of conversion (refer to External triggers for details):\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).",
                "width": 3
              },
              "EXTEN": {
                "bit": 10,
                "description": "External trigger enable and polarity selection\nThese bits are set and cleared by software to select the external trigger polarity and enable the trigger.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).",
                "width": 2
              },
              "OVRMOD": {
                "bit": 12,
                "description": "Overrun management mode\nThis bit is set and cleared by software and configure the way data overruns are managed.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "CONT": {
                "bit": 13,
                "description": "Single / continuous conversion mode\nThis bit is set and cleared by software. If it is set, conversion takes place continuously until it is cleared.\nNote: It is not possible to have both discontinuous mode and continuous mode enabled: it is forbidden to set both bits DISCEN=1 and CONT=1.\nThe software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "WAIT": {
                "bit": 14,
                "description": "Wait conversion mode\nThis bit is set and cleared by software to enable/disable wait conversion mode..\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "AUTOFF": {
                "bit": 15,
                "description": "Auto-off mode\nThis bit is set and cleared by software to enable/disable auto-off mode..\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "DISCEN": {
                "bit": 16,
                "description": "Discontinuous mode\nThis bit is set and cleared by software to enable/disable discontinuous mode.\nNote: It is not possible to have both discontinuous mode and continuous mode enabled: it is forbidden to set both bits DISCEN=1 and CONT=1.\nThe software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "CHSELRMOD": {
                "bit": 21,
                "description": "Mode selection of the ADC_CHSELR register\nThis bit is set and cleared by software to control the ADC_CHSELR feature:\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "AWD1SGL": {
                "bit": 22,
                "description": "Enable the watchdog on a single channel or on all channels\nThis bit is set and cleared by software to enable the analog watchdog on the channel identified by the AWDCH[4:0] bits or on all the channels\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "AWD1EN": {
                "bit": 23,
                "description": "Analog watchdog enable\nThis bit is set and cleared by software.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "AWD1CH": {
                "bit": 26,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They select the input channel to be guarded by the analog watchdog.\n.....\nOthers: Reserved\nNote: The channel selected by the AWDCH[4:0] bits must be also set into the CHSELR register.\nThe software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing).",
                "width": 5
              }
            },
            "ADC_CFGR2": {
              "OVSE": {
                "bit": 0,
                "description": "Oversampler Enable\nThis bit is set and cleared by software.\nNote: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "OVSR": {
                "bit": 2,
                "description": "Oversampling ratio\nThis bit filed defines the number of oversampling ratio.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 3
              },
              "OVSS": {
                "bit": 5,
                "description": "Oversampling shift\nThis bit is set and cleared by software.\nOthers: Reserved\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "TOVS": {
                "bit": 9,
                "description": "Triggered Oversampling\nThis bit is set and cleared by software.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "LFTRIG": {
                "bit": 29,
                "description": "Low frequency trigger mode enable\nThis bit is set and cleared by software.\nNote: The software is allowed to write this bit only when ADSTART bit is cleared to 0 (this ensures that no conversion is ongoing)."
              },
              "CKMODE": {
                "bit": 30,
                "description": "ADC clock mode\nThese bits are set and cleared by software to define how the analog ADC is clocked:\nIn all synchronous clock modes, there is no jitter in the delay from a timer trigger to the start of a conversion.\nNote: The software is allowed to write these bits only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0).",
                "width": 2
              }
            },
            "ADC_SMPR": {
              "SMP1": {
                "bit": 0,
                "description": "Sampling time selection 1\nThese bits are written by software to select the sampling time that applies to all channels.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 3
              },
              "SMP2": {
                "bit": 4,
                "description": "Sampling time selection 2\nThese bits are written by software to select the sampling time that applies to all channels.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 3
              },
              "SMPSEL0": {
                "bit": 8,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL1": {
                "bit": 9,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL2": {
                "bit": 10,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL3": {
                "bit": 11,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL4": {
                "bit": 12,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL5": {
                "bit": 13,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL6": {
                "bit": 14,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL7": {
                "bit": 15,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL8": {
                "bit": 16,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL9": {
                "bit": 17,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL10": {
                "bit": 18,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL11": {
                "bit": 19,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL12": {
                "bit": 20,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL13": {
                "bit": 21,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL14": {
                "bit": 22,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL15": {
                "bit": 23,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL16": {
                "bit": 24,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL17": {
                "bit": 25,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "SMPSEL18": {
                "bit": 26,
                "description": "Channel-x sampling time selection\nThese bits are written by software to define which sampling time is used.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              }
            },
            "ADC_AWD1TR": {
              "LT1": {
                "bit": 0,
                "description": "Analog watchdog 1 lower threshold\nThese bits are written by software to define the lower threshold for the analog watchdog.\nRefer to ADC_AWDxTR) on page355.",
                "width": 12
              },
              "HT1": {
                "bit": 16,
                "description": "Analog watchdog 1 higher threshold\nThese bits are written by software to define the higher threshold for the analog watchdog.\nRefer to ADC_AWDxTR) on page355.",
                "width": 12
              }
            },
            "ADC_AWD2TR": {
              "LT2": {
                "bit": 0,
                "description": "Analog watchdog 2 lower threshold\nThese bits are written by software to define the lower threshold for the analog watchdog.\nRefer to ADC_AWDxTR) on page355.",
                "width": 12
              },
              "HT2": {
                "bit": 16,
                "description": "Analog watchdog 2 higher threshold\nThese bits are written by software to define the higher threshold for the analog watchdog.\nRefer to ADC_AWDxTR) on page355.",
                "width": 12
              }
            },
            "ADC_CHSELR_0": {
              "CHSEL0": {
                "bit": 0,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL1": {
                "bit": 1,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL2": {
                "bit": 2,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL3": {
                "bit": 3,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL4": {
                "bit": 4,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL5": {
                "bit": 5,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL6": {
                "bit": 6,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL7": {
                "bit": 7,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL8": {
                "bit": 8,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL9": {
                "bit": 9,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL10": {
                "bit": 10,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL11": {
                "bit": 11,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL12": {
                "bit": 12,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL13": {
                "bit": 13,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL14": {
                "bit": 14,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL15": {
                "bit": 15,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL16": {
                "bit": 16,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL17": {
                "bit": 17,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              },
              "CHSEL18": {
                "bit": 18,
                "description": "Channel-x selection\nThese bits are written by software and define which channels are part of the sequence of channels to be converted. Refer to  for ADC inputs connected to external channels and internal sources.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).\nIf CCRDY is not yet asserted after channel configuration (writing ADC_CHSELR register or changing CHSELRMOD or SCANDIR), the value written to this bit is ignored."
              }
            },
            "ADC_CHSELR_1": {
              "SQ1": {
                "bit": 0,
                "description": "1st conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ2": {
                "bit": 4,
                "description": "2nd conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ3": {
                "bit": 8,
                "description": "3rd conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ4": {
                "bit": 12,
                "description": "4th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ5": {
                "bit": 16,
                "description": "5th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ6": {
                "bit": 20,
                "description": "6th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ7": {
                "bit": 24,
                "description": "7th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\nRefer to SQ8[3:0] for a definition of channel selection.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              },
              "SQ8": {
                "bit": 28,
                "description": "8th conversion of the sequence\nThese bits are programmed by software with the channel number (0...14) assigned to the 8th conversion of the sequence. 0b1111 indicates the end of the sequence.\nWhen 0b1111 (end of sequence) is programmed to the lower sequence channels, these bits are ignored.\n...\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing).",
                "width": 4
              }
            },
            "ADC_AWD3TR": {
              "LT3": {
                "bit": 0,
                "description": "Analog watchdog 3lower threshold\nThese bits are written by software to define the lower threshold for the analog watchdog.\nRefer to ADC_AWDxTR) on page355.",
                "width": 12
              },
              "HT3": {
                "bit": 16,
                "description": "Analog watchdog 3 higher threshold\nThese bits are written by software to define the higher threshold for the analog watchdog.\nRefer to ADC_AWDxTR) on page355.",
                "width": 12
              }
            },
            "ADC_DR": {
              "DATA": {
                "bit": 0,
                "description": "Converted data\nThese bits are read-only. They contain the conversion result from the last converted channel. The data are left- or right-aligned as shown in OVSE = 0) on page349.\nJust after a calibration is complete, DATA[6:0] contains the calibration factor.",
                "width": 16
              }
            },
            "ADC_AWD2CR": {
              "AWD2CH0": {
                "bit": 0,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH1": {
                "bit": 1,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH2": {
                "bit": 2,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH3": {
                "bit": 3,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH4": {
                "bit": 4,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH5": {
                "bit": 5,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH6": {
                "bit": 6,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH7": {
                "bit": 7,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH8": {
                "bit": 8,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH9": {
                "bit": 9,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH10": {
                "bit": 10,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH11": {
                "bit": 11,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH12": {
                "bit": 12,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH13": {
                "bit": 13,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH14": {
                "bit": 14,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH15": {
                "bit": 15,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH16": {
                "bit": 16,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH17": {
                "bit": 17,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD2CH18": {
                "bit": 18,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 2 (AWD2).\nNote: The channels selected through ADC_AWD2CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              }
            },
            "ADC_AWD3CR": {
              "AWD3CH0": {
                "bit": 0,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH1": {
                "bit": 1,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH2": {
                "bit": 2,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH3": {
                "bit": 3,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH4": {
                "bit": 4,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH5": {
                "bit": 5,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH6": {
                "bit": 6,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH7": {
                "bit": 7,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH8": {
                "bit": 8,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH9": {
                "bit": 9,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH10": {
                "bit": 10,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH11": {
                "bit": 11,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH12": {
                "bit": 12,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH13": {
                "bit": 13,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH14": {
                "bit": 14,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH15": {
                "bit": 15,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH16": {
                "bit": 16,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH17": {
                "bit": 17,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "AWD3CH18": {
                "bit": 18,
                "description": "Analog watchdog channel selection\nThese bits are set and cleared by software. They enable and select the input channels to be guarded by analog watchdog 3 (AWD3).\nNote: The channels selected through ADC_AWD3CR must be also configured into the ADC_CHSELR registers. Refer to SQ8[3:0] for a definition of channel selection. The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              }
            },
            "ADC_CALFACT": {
              "CALFACT": {
                "bit": 0,
                "description": "Calibration factor\nThese bits are written by hardware or by software.\nOnce a calibration is complete,they are updated by hardware with the calibration factors.\nSoftware can write these bits with a new calibration factor. If the new calibration factor is different from the current one stored into the analog ADC, it is then applied once a new calibration is launched.\nJust after a calibration is complete, DATA[6:0] contains the calibration factor.\nNote: Software can write these bits only when ADEN=1 (ADC is enabled and no calibration is ongoing and no conversion is ongoing). Refer to SQ8[3:0] for a definition of channel selection.",
                "width": 7
              }
            },
            "ADC_CCR": {
              "PRESC": {
                "bit": 18,
                "description": "ADC prescaler\nSet and cleared by software to select the frequency of the clock to the ADC.\nOther: Reserved\nNote: Software is allowed to write these bits only when the ADC is disabled (ADCAL=0, ADSTART=0, ADSTP=0, ADDIS=0 and ADEN=0).",
                "width": 4
              },
              "VREFEN": {
                "bit": 22,
                "description": "VREFINT enable\nThis bit is set and cleared by software to enable/disable the VREFINT.\nNote: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "TSEN": {
                "bit": 23,
                "description": "Temperature sensor enable\nThis bit is set and cleared by software to enable/disable the temperature sensor.\nNote: Software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)."
              },
              "VBATEN": {
                "bit": 24,
                "description": "VBAT enable\nThis bit is set and cleared by software to enable/disable the VBAT channel.\nNote: The software is allowed to write this bit only when ADSTART=0 (which ensures that no conversion is ongoing)"
              }
            }
          }
        },
        "CRC": {
          "instances": [
            {
              "name": "CRC",
              "base": "0x40023000"
            }
          ],
          "registers": {
            "CRC_DR": {
              "offset": "0x00",
              "size": 32,
              "description": "Data register"
            },
            "CRC_IDR": {
              "offset": "0x04",
              "size": 32,
              "description": "Independent data register"
            },
            "CRC_CR": {
              "offset": "0x08",
              "size": 32,
              "description": "Control register"
            },
            "CRC_INIT": {
              "offset": "0x10",
              "size": 32,
              "description": "Initial CRC value"
            },
            "CRC_POL": {
              "offset": "0x14",
              "size": 32,
              "description": "polynomial"
            }
          },
          "bits": {
            "CRC_DR": {
              "DR": {
                "bit": 0,
                "description": "Data register bits",
                "width": 32
              }
            },
            "CRC_IDR": {
              "IDR": {
                "bit": 0,
                "description": "General-purpose 32-bit data register\n              bits",
                "width": 32
              }
            },
            "CRC_CR": {
              "REV_OUT": {
                "bit": 7,
                "description": "Reverse output data\nThis bit controls the reversal of the bit order of the output data."
              },
              "REV_IN": {
                "bit": 5,
                "description": "Reverse input data\nThese bits control the reversal of the bit order of the input data",
                "width": 2
              },
              "POLYSIZE": {
                "bit": 3,
                "description": "Polynomial size\nThese bits control the size of the polynomial.",
                "width": 2
              },
              "RESET": {
                "bit": 0,
                "description": "RESET bit"
              }
            },
            "CRC_INIT": {
              "CRC_INIT": {
                "bit": 0,
                "description": "Programmable initial CRC\n              value",
                "width": 32
              }
            },
            "CRC_POL": {
              "POL": {
                "bit": 0,
                "description": "Programmable polynomial",
                "width": 32
              }
            }
          }
        },
        "DBG": {
          "instances": [
            {
              "name": "DBG",
              "base": "0x40015800"
            }
          ],
          "registers": {
            "IDCODE": {
              "offset": "0x00",
              "size": 32,
              "description": "MCU Device ID Code Register"
            },
            "DBG_CR": {
              "offset": "0x04",
              "size": 32,
              "description": "DBG configuration register"
            },
            "DBG_APB_FZ1": {
              "offset": "0x08",
              "size": 32,
              "description": "DBG APB freeze register 1"
            },
            "DBG_APB_FZ2": {
              "offset": "0x0C",
              "size": 32,
              "description": "DBG APB freeze register 2"
            }
          },
          "bits": {
            "IDCODE": {
              "DEV_ID": {
                "bit": 0,
                "description": "Device Identifier",
                "width": 12
              },
              "REV_ID": {
                "bit": 16,
                "description": "Revision Identifier",
                "width": 16
              }
            },
            "DBG_CR": {
              "DBG_STOP": {
                "bit": 1,
                "description": "Debug Stop mode\nDebug options in Stop mode.\nUpon Stop mode exit, the software must re-establish the desired clock configuration."
              },
              "DBG_STANDBY": {
                "bit": 2,
                "description": "Debug Standby and Shutdown modes\nDebug options in Standby or Shutdown mode."
              }
            },
            "DBG_APB_FZ1": {
              "DBG_TIM2_STOP": {
                "bit": 0,
                "description": "Clocking of TIM2 counter when the core is halted\nThis bit enables/disables the clock to the counter of TIM2 when the core is halted:"
              },
              "DBG_TIM3_STOP": {
                "bit": 1,
                "description": "Clocking of TIM3 counter when the core is halted\nThis bit enables/disables the clock to the counter of TIM3 when the core is halted:"
              },
              "DBG_TIM6_STOP": {
                "bit": 4,
                "description": "Clocking of TIM6 counter when the core is halted\nThis bit enables/disables the clock to the counter of TIM6 when the core is halted:"
              },
              "DBG_TIM7_STOP": {
                "bit": 5,
                "description": "Clocking of TIM7 counter when the core is halted.\nThis bit enables/disables the clock to the counter of ITIM7 when the core is halted:"
              },
              "DBG_RTC_STOP": {
                "bit": 10,
                "description": "Clocking of RTC counter when the core is halted\nThis bit enables/disables the clock to the counter of RTC when the core is halted:"
              },
              "DBG_WWDG_STOP": {
                "bit": 11,
                "description": "Clocking of WWDG counter when the core is halted\nThis bit enables/disables the clock to the counter of WWDG when the core is halted:"
              },
              "DBG_IWDG_STOP": {
                "bit": 12,
                "description": "Clocking of IWDG counter when the core is halted\nThis bit enables/disables the clock to the counter of IWDG when the core is halted:"
              },
              "DBG_I2C1_SMBUS_TIMEOUT": {
                "bit": 21,
                "description": "SMBUS timeout when core is halted"
              },
              "DBG_LPTIM2_STOP": {
                "bit": 30,
                "description": "Clocking of LPTIMER2 counter when the core is halted\nThis bit enables/disables the clock to the counter of LPTIMER2 when the core is halted:"
              },
              "DBG_LPTIM1_STOP": {
                "bit": 31,
                "description": "Clocking of LPTIMER1 counter when the core is halted\nThis bit enables/disables the clock to the counter of LPTIMER1 when the core is halted:"
              }
            },
            "DBG_APB_FZ2": {
              "DBG_TIM1_STOP": {
                "bit": 11,
                "description": "Clocking of TIM1 counter when the core is halted\nThis bit enables/disables the clock to the counter of TIM1 when the core is halted:"
              },
              "DBG_TIM14_STOP": {
                "bit": 15,
                "description": "Clocking of TIM14 counter when the core is halted\nThis bit enables/disables the clock to the counter of TIM14 when the core is halted:"
              },
              "DBG_TIM15_STOP": {
                "bit": 16,
                "description": "Clocking of TIM15 counter when the core is halted\nThis bit enables/disables the clock to the counter of TIM15 when the core is halted:\nOnly available on STM32G071xx and STM32G081xx, reserved on STM32G031xx and STM32G041xx."
              },
              "DBG_TIM16_STOP": {
                "bit": 17,
                "description": "Clocking of TIM16 counter when the core is halted\nThis bit enables/disables the clock to the counter of TIM16 when the core is halted:"
              },
              "DBG_TIM17_STOP": {
                "bit": 18,
                "description": "Clocking of TIM17 counter when the core is halted\nThis bit enables/disables the clock to the counter of TIM17 when the core is halted:"
              }
            }
          }
        },
        "DMA": {
          "instances": [
            {
              "name": "DMA",
              "base": "0x40020000",
              "irq": 9
            },
            {
              "name": "DMAMUX",
              "base": "0x40020800",
              "irq": 11
            }
          ],
          "registers": {
            "DMA_ISR": {
              "offset": "0x00",
              "size": 32,
              "description": "DMA interrupt status register"
            },
            "DMA_IFCR": {
              "offset": "0x04",
              "size": 32,
              "description": "DMA interrupt flag clear register"
            },
            "DMA_CCR1": {
              "offset": "0x08",
              "size": 32,
              "description": "DMA channel 1 configuration register"
            },
            "DMA_CNDTR1": {
              "offset": "0x0C",
              "size": 32,
              "description": "DMA channel x number of data register"
            },
            "DMA_CPAR1": {
              "offset": "0x10",
              "size": 32,
              "description": "DMA channel x peripheral address register"
            },
            "DMA_CMAR1": {
              "offset": "0x14",
              "size": 32,
              "description": "DMA channel x memory address register"
            },
            "DMA_CCR2": {
              "offset": "0x1C",
              "size": 32,
              "description": "DMA channel 2 configuration register"
            },
            "DMA_CNDTR2": {
              "offset": "0x20",
              "size": 32,
              "description": "DMA channel x number of data register"
            },
            "DMA_CPAR2": {
              "offset": "0x24",
              "size": 32,
              "description": "DMA channel x peripheral address register"
            },
            "DMA_CMAR2": {
              "offset": "0x28",
              "size": 32,
              "description": "DMA channel x memory address register"
            },
            "DMA_CCR3": {
              "offset": "0x30",
              "size": 32,
              "description": "DMA channel 3 configuration register"
            },
            "DMA_CNDTR3": {
              "offset": "0x34",
              "size": 32,
              "description": "DMA channel x configuration register"
            },
            "DMA_CPAR3": {
              "offset": "0x38",
              "size": 32,
              "description": "DMA channel x peripheral address register"
            },
            "DMA_CMAR3": {
              "offset": "0x3C",
              "size": 32,
              "description": "DMA channel x memory address register"
            },
            "DMA_CCR4": {
              "offset": "0x44",
              "size": 32,
              "description": "DMA channel 4 configuration register"
            },
            "DMA_CNDTR4": {
              "offset": "0x48",
              "size": 32,
              "description": "DMA channel x configuration register"
            },
            "DMA_CPAR4": {
              "offset": "0x4C",
              "size": 32,
              "description": "DMA channel x peripheral address register"
            },
            "DMA_CMAR4": {
              "offset": "0x50",
              "size": 32,
              "description": "DMA channel x memory address register"
            },
            "DMA_CCR5": {
              "offset": "0x58",
              "size": 32,
              "description": "DMA channel 5 configuration register"
            },
            "DMA_CNDTR5": {
              "offset": "0x5C",
              "size": 32,
              "description": "DMA channel x configuration register"
            },
            "DMA_CPAR5": {
              "offset": "0x60",
              "size": 32,
              "description": "DMA channel x peripheral address register"
            },
            "DMA_CMAR5": {
              "offset": "0x64",
              "size": 32,
              "description": "DMA channel x memory address register"
            },
            "DMA_CCR6": {
              "offset": "0x6C",
              "size": 32,
              "description": "DMA channel 6 configuration register"
            },
            "DMA_CNDTR6": {
              "offset": "0x70",
              "size": 32,
              "description": "DMA channel x configuration register"
            },
            "DMA_CPAR6": {
              "offset": "0x74",
              "size": 32,
              "description": "DMA channel x peripheral address register"
            },
            "DMA_CMAR6": {
              "offset": "0x78",
              "size": 32,
              "description": "DMA channel x memory address register"
            },
            "DMA_CCR7": {
              "offset": "0x80",
              "size": 32,
              "description": "DMA channel 7 configuration register"
            },
            "DMA_CNDTR7": {
              "offset": "0x84",
              "size": 32,
              "description": "DMA channel x configuration register"
            },
            "DMA_CPAR7": {
              "offset": "0x88",
              "size": 32,
              "description": "DMA channel x peripheral address register"
            },
            "DMA_CMAR7": {
              "offset": "0x8C",
              "size": 32,
              "description": "DMA channel x memory address register"
            }
          },
          "bits": {
            "DMA_ISR": {
              "GIF1": {
                "bit": 0,
                "description": "global interrupt flag for channel 1"
              },
              "TCIF1": {
                "bit": 1,
                "description": "transfer complete (TC) flag for channel 1"
              },
              "HTIF1": {
                "bit": 2,
                "description": "half transfer (HT) flag for channel 1"
              },
              "TEIF1": {
                "bit": 3,
                "description": "transfer error (TE) flag for channel 1"
              },
              "GIF2": {
                "bit": 4,
                "description": "global interrupt flag for channel 2"
              },
              "TCIF2": {
                "bit": 5,
                "description": "transfer complete (TC) flag for channel 2"
              },
              "HTIF2": {
                "bit": 6,
                "description": "half transfer (HT) flag for channel 2"
              },
              "TEIF2": {
                "bit": 7,
                "description": "transfer error (TE) flag for channel 2"
              },
              "GIF3": {
                "bit": 8,
                "description": "global interrupt flag for channel 3"
              },
              "TCIF3": {
                "bit": 9,
                "description": "transfer complete (TC) flag for channel 3"
              },
              "HTIF3": {
                "bit": 10,
                "description": "half transfer (HT) flag for channel 3"
              },
              "TEIF3": {
                "bit": 11,
                "description": "transfer error (TE) flag for channel 3"
              },
              "GIF4": {
                "bit": 12,
                "description": "global interrupt flag for channel 4"
              },
              "TCIF4": {
                "bit": 13,
                "description": "transfer complete (TC) flag for channel 4"
              },
              "HTIF4": {
                "bit": 14,
                "description": "half transfer (HT) flag for channel 4"
              },
              "TEIF4": {
                "bit": 15,
                "description": "transfer error (TE) flag for channel 4"
              },
              "GIF5": {
                "bit": 16,
                "description": "global interrupt flag for channel 5"
              },
              "TCIF5": {
                "bit": 17,
                "description": "transfer complete (TC) flag for channel 5"
              },
              "HTIF5": {
                "bit": 18,
                "description": "half transfer (HT) flag for channel 5"
              },
              "TEIF5": {
                "bit": 19,
                "description": "transfer error (TE) flag for channel 5"
              },
              "GIF6": {
                "bit": 20,
                "description": "global interrupt flag for channel 6"
              },
              "TCIF6": {
                "bit": 21,
                "description": "transfer complete (TC) flag for channel 6"
              },
              "HTIF6": {
                "bit": 22,
                "description": "half transfer (HT) flag for channel 6"
              },
              "TEIF6": {
                "bit": 23,
                "description": "transfer error (TE) flag for channel 6"
              },
              "GIF7": {
                "bit": 24,
                "description": "global interrupt flag for channel 7"
              },
              "TCIF7": {
                "bit": 25,
                "description": "transfer complete (TC) flag for channel 7"
              },
              "HTIF7": {
                "bit": 26,
                "description": "half transfer (HT) flag for channel 7"
              },
              "TEIF7": {
                "bit": 27,
                "description": "transfer error (TE) flag for channel 7"
              }
            },
            "DMA_IFCR": {
              "CGIF1": {
                "bit": 0,
                "description": "global interrupt flag clear for channel 1"
              },
              "CTCIF1": {
                "bit": 1,
                "description": "transfer complete flag clear for channel 1"
              },
              "CHTIF1": {
                "bit": 2,
                "description": "half transfer flag clear for channel 1"
              },
              "CTEIF1": {
                "bit": 3,
                "description": "transfer error flag clear for channel 1"
              },
              "CGIF2": {
                "bit": 4,
                "description": "global interrupt flag clear for channel 2"
              },
              "CTCIF2": {
                "bit": 5,
                "description": "transfer complete flag clear for channel 2"
              },
              "CHTIF2": {
                "bit": 6,
                "description": "half transfer flag clear for channel 2"
              },
              "CTEIF2": {
                "bit": 7,
                "description": "transfer error flag clear for channel 2"
              },
              "CGIF3": {
                "bit": 8,
                "description": "global interrupt flag clear for channel 3"
              },
              "CTCIF3": {
                "bit": 9,
                "description": "transfer complete flag clear for channel 3"
              },
              "CHTIF3": {
                "bit": 10,
                "description": "half transfer flag clear for channel 3"
              },
              "CTEIF3": {
                "bit": 11,
                "description": "transfer error flag clear for channel 3"
              },
              "CGIF4": {
                "bit": 12,
                "description": "global interrupt flag clear for channel 4"
              },
              "CTCIF4": {
                "bit": 13,
                "description": "transfer complete flag clear for channel 4"
              },
              "CHTIF4": {
                "bit": 14,
                "description": "half transfer flag clear for channel 4"
              },
              "CTEIF4": {
                "bit": 15,
                "description": "transfer error flag clear for channel 4"
              },
              "CGIF5": {
                "bit": 16,
                "description": "global interrupt flag clear for channel 5"
              },
              "CTCIF5": {
                "bit": 17,
                "description": "transfer complete flag clear for channel 5"
              },
              "CHTIF5": {
                "bit": 18,
                "description": "half transfer flag clear for channel 5"
              },
              "CTEIF5": {
                "bit": 19,
                "description": "transfer error flag clear for channel 5"
              },
              "CGIF6": {
                "bit": 20,
                "description": "global interrupt flag clear for channel 6"
              },
              "CTCIF6": {
                "bit": 21,
                "description": "transfer complete flag clear for channel 6"
              },
              "CHTIF6": {
                "bit": 22,
                "description": "half transfer flag clear for channel 6"
              },
              "CTEIF6": {
                "bit": 23,
                "description": "transfer error flag clear for channel 6"
              },
              "CGIF7": {
                "bit": 24,
                "description": "global interrupt flag clear for channel 7"
              },
              "CTCIF7": {
                "bit": 25,
                "description": "transfer complete flag clear for channel 7"
              },
              "CHTIF7": {
                "bit": 26,
                "description": "half transfer flag clear for channel 7"
              },
              "CTEIF7": {
                "bit": 27,
                "description": "transfer error flag clear for channel 7"
              }
            },
            "DMA_CCR1": {
              "EN": {
                "bit": 0,
                "description": "channel enable\nWhen a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).\nNote: this bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 1,
                "description": "transfer complete interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "HTIE": {
                "bit": 2,
                "description": "half transfer interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "TEIE": {
                "bit": 3,
                "description": "transfer error interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "DIR": {
                "bit": 4,
                "description": "data transfer direction\nThis bit must be set only in memory-to-peripheral and peripheral-to-memory modes.\nSource attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nDestination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nDestination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nSource attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "CIRC": {
                "bit": 5,
                "description": "circular mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "PINC": {
                "bit": 6,
                "description": "peripheral increment mode\nDefines the increment mode for each DMA transfer to the identified peripheral.\nn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "MINC": {
                "bit": 7,
                "description": "memory increment mode\nDefines the increment mode for each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "PSIZE": {
                "bit": 8,
                "description": "peripheral size\nDefines the data size of each DMA transfer to the identified peripheral.\nIn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MSIZE": {
                "bit": 10,
                "description": "memory size\nDefines the data size of each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "PL": {
                "bit": 12,
                "description": "priority level\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MEM2MEM": {
                "bit": 14,
                "description": "memory-to-memory mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              }
            },
            "DMA_CNDTR1": {
              "NDT": {
                "bit": 0,
                "description": "number of data to transfer (0 to 216-1)\nThis field is updated by hardware when the channel is enabled:\nIt is decremented after each single DMA 'read followed by write\u00e2\u0080\u0099 transfer, indicating the remaining amount of data items to transfer.\nIt is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).\nIt is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).\nIf this field is zero, no transfer can be served whatever the channel status (enabled or not).\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 16
              }
            },
            "DMA_CPAR1": {
              "PA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the peripheral data register from/to which the data will be read/written.\nWhen PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CMAR1": {
              "MA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the memory from/to which the data will be read/written.\nWhen MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CCR2": {
              "EN": {
                "bit": 0,
                "description": "channel enable\nWhen a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).\nNote: this bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 1,
                "description": "transfer complete interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "HTIE": {
                "bit": 2,
                "description": "half transfer interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "TEIE": {
                "bit": 3,
                "description": "transfer error interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "DIR": {
                "bit": 4,
                "description": "data transfer direction\nThis bit must be set only in memory-to-peripheral and peripheral-to-memory modes.\nSource attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nDestination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nDestination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nSource attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "CIRC": {
                "bit": 5,
                "description": "circular mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "PINC": {
                "bit": 6,
                "description": "peripheral increment mode\nDefines the increment mode for each DMA transfer to the identified peripheral.\nn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "MINC": {
                "bit": 7,
                "description": "memory increment mode\nDefines the increment mode for each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "PSIZE": {
                "bit": 8,
                "description": "peripheral size\nDefines the data size of each DMA transfer to the identified peripheral.\nIn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MSIZE": {
                "bit": 10,
                "description": "memory size\nDefines the data size of each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "PL": {
                "bit": 12,
                "description": "priority level\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MEM2MEM": {
                "bit": 14,
                "description": "memory-to-memory mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              }
            },
            "DMA_CNDTR2": {
              "NDT": {
                "bit": 0,
                "description": "number of data to transfer (0 to 216-1)\nThis field is updated by hardware when the channel is enabled:\nIt is decremented after each single DMA 'read followed by write\u00e2\u0080\u0099 transfer, indicating the remaining amount of data items to transfer.\nIt is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).\nIt is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).\nIf this field is zero, no transfer can be served whatever the channel status (enabled or not).\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 16
              }
            },
            "DMA_CPAR2": {
              "PA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the peripheral data register from/to which the data will be read/written.\nWhen PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CMAR2": {
              "MA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the memory from/to which the data will be read/written.\nWhen MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CCR3": {
              "EN": {
                "bit": 0,
                "description": "channel enable\nWhen a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).\nNote: this bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 1,
                "description": "transfer complete interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "HTIE": {
                "bit": 2,
                "description": "half transfer interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "TEIE": {
                "bit": 3,
                "description": "transfer error interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "DIR": {
                "bit": 4,
                "description": "data transfer direction\nThis bit must be set only in memory-to-peripheral and peripheral-to-memory modes.\nSource attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nDestination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nDestination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nSource attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "CIRC": {
                "bit": 5,
                "description": "circular mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "PINC": {
                "bit": 6,
                "description": "peripheral increment mode\nDefines the increment mode for each DMA transfer to the identified peripheral.\nn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "MINC": {
                "bit": 7,
                "description": "memory increment mode\nDefines the increment mode for each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "PSIZE": {
                "bit": 8,
                "description": "peripheral size\nDefines the data size of each DMA transfer to the identified peripheral.\nIn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MSIZE": {
                "bit": 10,
                "description": "memory size\nDefines the data size of each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "PL": {
                "bit": 12,
                "description": "priority level\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MEM2MEM": {
                "bit": 14,
                "description": "memory-to-memory mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              }
            },
            "DMA_CNDTR3": {
              "NDT": {
                "bit": 0,
                "description": "number of data to transfer (0 to 216-1)\nThis field is updated by hardware when the channel is enabled:\nIt is decremented after each single DMA 'read followed by write\u00e2\u0080\u0099 transfer, indicating the remaining amount of data items to transfer.\nIt is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).\nIt is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).\nIf this field is zero, no transfer can be served whatever the channel status (enabled or not).\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 16
              }
            },
            "DMA_CPAR3": {
              "PA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the peripheral data register from/to which the data will be read/written.\nWhen PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CMAR3": {
              "MA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the memory from/to which the data will be read/written.\nWhen MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CCR4": {
              "EN": {
                "bit": 0,
                "description": "channel enable\nWhen a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).\nNote: this bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 1,
                "description": "transfer complete interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "HTIE": {
                "bit": 2,
                "description": "half transfer interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "TEIE": {
                "bit": 3,
                "description": "transfer error interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "DIR": {
                "bit": 4,
                "description": "data transfer direction\nThis bit must be set only in memory-to-peripheral and peripheral-to-memory modes.\nSource attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nDestination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nDestination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nSource attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "CIRC": {
                "bit": 5,
                "description": "circular mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "PINC": {
                "bit": 6,
                "description": "peripheral increment mode\nDefines the increment mode for each DMA transfer to the identified peripheral.\nn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "MINC": {
                "bit": 7,
                "description": "memory increment mode\nDefines the increment mode for each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "PSIZE": {
                "bit": 8,
                "description": "peripheral size\nDefines the data size of each DMA transfer to the identified peripheral.\nIn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MSIZE": {
                "bit": 10,
                "description": "memory size\nDefines the data size of each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "PL": {
                "bit": 12,
                "description": "priority level\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MEM2MEM": {
                "bit": 14,
                "description": "memory-to-memory mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              }
            },
            "DMA_CNDTR4": {
              "NDT": {
                "bit": 0,
                "description": "number of data to transfer (0 to 216-1)\nThis field is updated by hardware when the channel is enabled:\nIt is decremented after each single DMA 'read followed by write\u00e2\u0080\u0099 transfer, indicating the remaining amount of data items to transfer.\nIt is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).\nIt is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).\nIf this field is zero, no transfer can be served whatever the channel status (enabled or not).\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 16
              }
            },
            "DMA_CPAR4": {
              "PA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the peripheral data register from/to which the data will be read/written.\nWhen PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CMAR4": {
              "MA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the memory from/to which the data will be read/written.\nWhen MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CCR5": {
              "EN": {
                "bit": 0,
                "description": "channel enable\nWhen a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).\nNote: this bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 1,
                "description": "transfer complete interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "HTIE": {
                "bit": 2,
                "description": "half transfer interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "TEIE": {
                "bit": 3,
                "description": "transfer error interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "DIR": {
                "bit": 4,
                "description": "data transfer direction\nThis bit must be set only in memory-to-peripheral and peripheral-to-memory modes.\nSource attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nDestination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nDestination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nSource attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "CIRC": {
                "bit": 5,
                "description": "circular mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "PINC": {
                "bit": 6,
                "description": "peripheral increment mode\nDefines the increment mode for each DMA transfer to the identified peripheral.\nn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "MINC": {
                "bit": 7,
                "description": "memory increment mode\nDefines the increment mode for each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "PSIZE": {
                "bit": 8,
                "description": "peripheral size\nDefines the data size of each DMA transfer to the identified peripheral.\nIn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MSIZE": {
                "bit": 10,
                "description": "memory size\nDefines the data size of each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "PL": {
                "bit": 12,
                "description": "priority level\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MEM2MEM": {
                "bit": 14,
                "description": "memory-to-memory mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              }
            },
            "DMA_CNDTR5": {
              "NDT": {
                "bit": 0,
                "description": "number of data to transfer (0 to 216-1)\nThis field is updated by hardware when the channel is enabled:\nIt is decremented after each single DMA 'read followed by write\u00e2\u0080\u0099 transfer, indicating the remaining amount of data items to transfer.\nIt is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).\nIt is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).\nIf this field is zero, no transfer can be served whatever the channel status (enabled or not).\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 16
              }
            },
            "DMA_CPAR5": {
              "PA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the peripheral data register from/to which the data will be read/written.\nWhen PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CMAR5": {
              "MA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the memory from/to which the data will be read/written.\nWhen MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CCR6": {
              "EN": {
                "bit": 0,
                "description": "channel enable\nWhen a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).\nNote: this bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 1,
                "description": "transfer complete interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "HTIE": {
                "bit": 2,
                "description": "half transfer interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "TEIE": {
                "bit": 3,
                "description": "transfer error interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "DIR": {
                "bit": 4,
                "description": "data transfer direction\nThis bit must be set only in memory-to-peripheral and peripheral-to-memory modes.\nSource attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nDestination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nDestination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nSource attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "CIRC": {
                "bit": 5,
                "description": "circular mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "PINC": {
                "bit": 6,
                "description": "peripheral increment mode\nDefines the increment mode for each DMA transfer to the identified peripheral.\nn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "MINC": {
                "bit": 7,
                "description": "memory increment mode\nDefines the increment mode for each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "PSIZE": {
                "bit": 8,
                "description": "peripheral size\nDefines the data size of each DMA transfer to the identified peripheral.\nIn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MSIZE": {
                "bit": 10,
                "description": "memory size\nDefines the data size of each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "PL": {
                "bit": 12,
                "description": "priority level\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MEM2MEM": {
                "bit": 14,
                "description": "memory-to-memory mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              }
            },
            "DMA_CNDTR6": {
              "NDT": {
                "bit": 0,
                "description": "number of data to transfer (0 to 216-1)\nThis field is updated by hardware when the channel is enabled:\nIt is decremented after each single DMA 'read followed by write\u00e2\u0080\u0099 transfer, indicating the remaining amount of data items to transfer.\nIt is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).\nIt is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).\nIf this field is zero, no transfer can be served whatever the channel status (enabled or not).\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 16
              }
            },
            "DMA_CPAR6": {
              "PA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the peripheral data register from/to which the data will be read/written.\nWhen PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CMAR6": {
              "MA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the memory from/to which the data will be read/written.\nWhen MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CCR7": {
              "EN": {
                "bit": 0,
                "description": "channel enable\nWhen a channel transfer error occurs, this bit is cleared by hardware. It can not be set again by software (channel x re-activated) until the TEIFx bit of the DMA_ISR register is cleared (by setting the CTEIFx bit of the DMA_IFCR register).\nNote: this bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 1,
                "description": "transfer complete interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "HTIE": {
                "bit": 2,
                "description": "half transfer interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "TEIE": {
                "bit": 3,
                "description": "transfer error interrupt enable\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "DIR": {
                "bit": 4,
                "description": "data transfer direction\nThis bit must be set only in memory-to-peripheral and peripheral-to-memory modes.\nSource attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nDestination attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nDestination attributes are defined by PSIZE and PINC, plus the DMA_CPARx register. This is still valid in a memory-to-memory mode.\nSource attributes are defined by MSIZE and MINC, plus the DMA_CMARx register. This is still valid in a peripheral-to-peripheral mode.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "CIRC": {
                "bit": 5,
                "description": "circular mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1)."
              },
              "PINC": {
                "bit": 6,
                "description": "peripheral increment mode\nDefines the increment mode for each DMA transfer to the identified peripheral.\nn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "MINC": {
                "bit": 7,
                "description": "memory increment mode\nDefines the increment mode for each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              },
              "PSIZE": {
                "bit": 8,
                "description": "peripheral size\nDefines the data size of each DMA transfer to the identified peripheral.\nIn memory-to-memory mode, this field identifies the memory destination if DIR=1 and the memory source if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral destination if DIR=1 and the peripheral source if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MSIZE": {
                "bit": 10,
                "description": "memory size\nDefines the data size of each DMA transfer to the identified memory.\nIn memory-to-memory mode, this field identifies the memory source if DIR=1 and the memory destination if DIR=0.\nIn peripheral-to-peripheral mode, this field identifies the peripheral source if DIR=1 and the peripheral destination if DIR=0.\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "PL": {
                "bit": 12,
                "description": "priority level\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 2
              },
              "MEM2MEM": {
                "bit": 14,
                "description": "memory-to-memory mode\nNote: this bit is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1)."
              }
            },
            "DMA_CNDTR7": {
              "NDT": {
                "bit": 0,
                "description": "number of data to transfer (0 to 216-1)\nThis field is updated by hardware when the channel is enabled:\nIt is decremented after each single DMA 'read followed by write\u00e2\u0080\u0099 transfer, indicating the remaining amount of data items to transfer.\nIt is kept at zero when the programmed amount of data to transfer is reached, if the channel is not in circular mode (CIRC=0 in the DMA_CCRx register).\nIt is reloaded automatically by the previously programmed value, when the transfer is complete, if the channel is in circular mode (CIRC=1).\nIf this field is zero, no transfer can be served whatever the channel status (enabled or not).\nNote: this field is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is read-only when the channel is enabled (EN=1).",
                "width": 16
              }
            },
            "DMA_CPAR7": {
              "PA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the peripheral data register from/to which the data will be read/written.\nWhen PSIZE[1:0]=01 (16 bits), bit 0 of PA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen PSIZE=10 (32 bits), bits 1 and 0 of PA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory destination address if DIR=1 and the memory source address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral destination address DIR=1 and the peripheral source address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            },
            "DMA_CMAR7": {
              "MA": {
                "bit": 0,
                "description": "peripheral address\nIt contains the base address of the memory from/to which the data will be read/written.\nWhen MSIZE[1:0]=01 (16 bits), bit 0 of MA[31:0] is ignored. Access is automatically aligned to a half-word address.\nWhen MSIZE=10 (32 bits), bits 1 and 0 of MA[31:0] are ignored. Access is automatically aligned to a word address.\nIn memory-to-memory mode, this register identifies the memory source address if DIR=1 and the memory destination address if DIR=0.\nIn peripheral-to-peripheral mode, this register identifies the peripheral source address DIR=1 and the peripheral destination address if DIR=0.\nNote: this register is set and cleared by software.\nIt must not be written when the channel is enabled (EN = 1).\nIt is not read-only when the channel is enabled (EN=1).",
                "width": 32
              }
            }
          }
        },
        "EXTI": {
          "instances": [
            {
              "name": "EXTI",
              "base": "0x40021800",
              "irq": 5
            }
          ],
          "registers": {
            "RTSR1": {
              "offset": "0x00",
              "size": 32,
              "description": "EXTI rising trigger selection\n          register"
            },
            "FTSR1": {
              "offset": "0x04",
              "size": 32,
              "description": "EXTI falling trigger selection\n          register"
            },
            "SWIER1": {
              "offset": "0x08",
              "size": 32,
              "description": "EXTI software interrupt event\n          register"
            },
            "RPR1": {
              "offset": "0x0C",
              "size": 32,
              "description": "EXTI rising edge pending\n          register"
            },
            "FPR1": {
              "offset": "0x10",
              "size": 32,
              "description": "EXTI falling edge pending\n          register"
            },
            "EXTICR1": {
              "offset": "0x60",
              "size": 32,
              "description": "EXTI external interrupt selection\n          register"
            },
            "EXTICR2": {
              "offset": "0x64",
              "size": 32,
              "description": "EXTI external interrupt selection\n          register"
            },
            "EXTICR3": {
              "offset": "0x68",
              "size": 32,
              "description": "EXTI external interrupt selection\n          register"
            },
            "EXTICR4": {
              "offset": "0x6C",
              "size": 32,
              "description": "EXTI external interrupt selection\n          register"
            },
            "IMR1": {
              "offset": "0x80",
              "size": 32,
              "description": "EXTI CPU wakeup with interrupt mask\n          register"
            },
            "EMR1": {
              "offset": "0x84",
              "size": 32,
              "description": "EXTI CPU wakeup with event mask\n          register"
            }
          },
          "bits": {
            "RTSR1": {
              "RT0": {
                "bit": 0,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT1": {
                "bit": 1,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT2": {
                "bit": 2,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT3": {
                "bit": 3,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT4": {
                "bit": 4,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT5": {
                "bit": 5,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT6": {
                "bit": 6,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT7": {
                "bit": 7,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT8": {
                "bit": 8,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT9": {
                "bit": 9,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT10": {
                "bit": 10,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT11": {
                "bit": 11,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT12": {
                "bit": 12,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT13": {
                "bit": 13,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT14": {
                "bit": 14,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              },
              "RT15": {
                "bit": 15,
                "description": "Rising trigger event configuration bit\n              of Configurable Event line"
              }
            },
            "FTSR1": {
              "FT0": {
                "bit": 0,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT1": {
                "bit": 1,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT2": {
                "bit": 2,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT3": {
                "bit": 3,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT4": {
                "bit": 4,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT5": {
                "bit": 5,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT6": {
                "bit": 6,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT7": {
                "bit": 7,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT8": {
                "bit": 8,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT9": {
                "bit": 9,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT10": {
                "bit": 10,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT11": {
                "bit": 11,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT12": {
                "bit": 12,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT13": {
                "bit": 13,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT14": {
                "bit": 14,
                "description": "Falling trigger event configuration bit of configurable line"
              },
              "FT15": {
                "bit": 15,
                "description": "Falling trigger event configuration bit of configurable line"
              }
            },
            "SWIER1": {
              "SWI0": {
                "bit": 0,
                "description": "Software rising edge event trigger on line"
              },
              "SWI1": {
                "bit": 1,
                "description": "Software rising edge event trigger on line"
              },
              "SWI2": {
                "bit": 2,
                "description": "Software rising edge event trigger on line"
              },
              "SWI3": {
                "bit": 3,
                "description": "Software rising edge event trigger on line"
              },
              "SWI4": {
                "bit": 4,
                "description": "Software rising edge event trigger on line"
              },
              "SWI5": {
                "bit": 5,
                "description": "Software rising edge event trigger on line"
              },
              "SWI6": {
                "bit": 6,
                "description": "Software rising edge event trigger on line"
              },
              "SWI7": {
                "bit": 7,
                "description": "Software rising edge event trigger on line"
              },
              "SWI8": {
                "bit": 8,
                "description": "Software rising edge event trigger on line"
              },
              "SWI9": {
                "bit": 9,
                "description": "Software rising edge event trigger on line"
              },
              "SWI10": {
                "bit": 10,
                "description": "Software rising edge event trigger on line"
              },
              "SWI11": {
                "bit": 11,
                "description": "Software rising edge event trigger on line"
              },
              "SWI12": {
                "bit": 12,
                "description": "Software rising edge event trigger on line"
              },
              "SWI13": {
                "bit": 13,
                "description": "Software rising edge event trigger on line"
              },
              "SWI14": {
                "bit": 14,
                "description": "Software rising edge event trigger on line"
              },
              "SWI15": {
                "bit": 15,
                "description": "Software rising edge event trigger on line"
              }
            },
            "RPR1": {
              "RPIF0": {
                "bit": 0,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF1": {
                "bit": 1,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF2": {
                "bit": 2,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF3": {
                "bit": 3,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF4": {
                "bit": 4,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF5": {
                "bit": 5,
                "description": "configurable event inputs x rising edge\n              Pending bit"
              },
              "RPIF6": {
                "bit": 6,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF7": {
                "bit": 7,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF8": {
                "bit": 8,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF9": {
                "bit": 9,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF10": {
                "bit": 10,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF11": {
                "bit": 11,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF12": {
                "bit": 12,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF13": {
                "bit": 13,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF14": {
                "bit": 14,
                "description": "Rising edge event pending for configurable line"
              },
              "RPIF15": {
                "bit": 15,
                "description": "Rising edge event pending for configurable line"
              }
            },
            "FPR1": {
              "FPIF0": {
                "bit": 0,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF1": {
                "bit": 1,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF2": {
                "bit": 2,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF3": {
                "bit": 3,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF4": {
                "bit": 4,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF5": {
                "bit": 5,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF6": {
                "bit": 6,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF7": {
                "bit": 7,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF8": {
                "bit": 8,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF9": {
                "bit": 9,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF10": {
                "bit": 10,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF11": {
                "bit": 11,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF12": {
                "bit": 12,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF13": {
                "bit": 13,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF14": {
                "bit": 14,
                "description": "Falling edge event pending for configurable line"
              },
              "FPIF15": {
                "bit": 15,
                "description": "Falling edge event pending for configurable line"
              }
            },
            "EXTICR1": {
              "EXTI0_7": {
                "bit": 0,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI8_15": {
                "bit": 8,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI16_23": {
                "bit": 16,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI24_31": {
                "bit": 24,
                "description": "GPIO port selection",
                "width": 8
              }
            },
            "EXTICR2": {
              "EXTI0_7": {
                "bit": 0,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI8_15": {
                "bit": 8,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI16_23": {
                "bit": 16,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI24_31": {
                "bit": 24,
                "description": "GPIO port selection",
                "width": 8
              }
            },
            "EXTICR3": {
              "EXTI0_7": {
                "bit": 0,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI8_15": {
                "bit": 8,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI16_23": {
                "bit": 16,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI24_31": {
                "bit": 24,
                "description": "GPIO port selection",
                "width": 8
              }
            },
            "EXTICR4": {
              "EXTI0_7": {
                "bit": 0,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI8_15": {
                "bit": 8,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI16_23": {
                "bit": 16,
                "description": "GPIO port selection",
                "width": 8
              },
              "EXTI24_31": {
                "bit": 24,
                "description": "GPIO port selection",
                "width": 8
              }
            },
            "IMR1": {
              "IM0": {
                "bit": 0,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM1": {
                "bit": 1,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM2": {
                "bit": 2,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM3": {
                "bit": 3,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM4": {
                "bit": 4,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM5": {
                "bit": 5,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM6": {
                "bit": 6,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM7": {
                "bit": 7,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM8": {
                "bit": 8,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM9": {
                "bit": 9,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM10": {
                "bit": 10,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM11": {
                "bit": 11,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM12": {
                "bit": 12,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM13": {
                "bit": 13,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM14": {
                "bit": 14,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM15": {
                "bit": 15,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM19": {
                "bit": 19,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM21": {
                "bit": 21,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM22": {
                "bit": 22,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM23": {
                "bit": 23,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM24": {
                "bit": 24,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM25": {
                "bit": 25,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM26": {
                "bit": 26,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              },
              "IM31": {
                "bit": 31,
                "description": "CPU wakeup with interrupt mask on event\n              input"
              }
            },
            "EMR1": {
              "EM0": {
                "bit": 0,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM1": {
                "bit": 1,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM2": {
                "bit": 2,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM3": {
                "bit": 3,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM4": {
                "bit": 4,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM5": {
                "bit": 5,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM6": {
                "bit": 6,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM7": {
                "bit": 7,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM8": {
                "bit": 8,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM9": {
                "bit": 9,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM10": {
                "bit": 10,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM11": {
                "bit": 11,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM12": {
                "bit": 12,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM13": {
                "bit": 13,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM14": {
                "bit": 14,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM15": {
                "bit": 15,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM19": {
                "bit": 19,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM21": {
                "bit": 21,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM23": {
                "bit": 23,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM25": {
                "bit": 25,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM26": {
                "bit": 26,
                "description": "CPU wakeup with event mask on event\n              input"
              },
              "EM31": {
                "bit": 31,
                "description": "CPU wakeup with event mask on event\n              input"
              }
            }
          }
        },
        "FLASH": {
          "instances": [
            {
              "name": "FLASH",
              "base": "0x40022000",
              "irq": 3
            }
          ],
          "registers": {
            "ACR": {
              "offset": "0x00",
              "size": 32,
              "description": "Access control register"
            },
            "KEYR": {
              "offset": "0x08",
              "size": 32,
              "description": "Flash key register"
            },
            "OPTKEYR": {
              "offset": "0x0C",
              "size": 32,
              "description": "Option byte key register"
            },
            "SR": {
              "offset": "0x10",
              "size": 32,
              "description": "Status register"
            },
            "CR": {
              "offset": "0x14",
              "size": 32,
              "description": "Flash control register"
            },
            "ECCR": {
              "offset": "0x18",
              "size": 32,
              "description": "Flash ECC register"
            },
            "OPTR": {
              "offset": "0x20",
              "size": 32,
              "description": "Flash option register"
            },
            "WRP1AR": {
              "offset": "0x2C",
              "size": 32,
              "description": "Flash WRP area A address\n          register"
            },
            "WRP1BR": {
              "offset": "0x30",
              "size": 32,
              "description": "Flash WRP area B address\n          register"
            },
            "WRP2AR": {
              "offset": "0x4C",
              "size": 32,
              "description": "FLASH WRP2 area A address register"
            },
            "WRP2BR": {
              "offset": "0x50",
              "size": 32,
              "description": "FLASH WRP2 area B address register"
            }
          },
          "bits": {
            "ACR": {
              "LATENCY": {
                "bit": 0,
                "description": "Latency",
                "width": 3
              },
              "PRFTEN": {
                "bit": 8,
                "description": "Prefetch enable"
              },
              "ICEN": {
                "bit": 9,
                "description": "Instruction cache enable"
              },
              "ICRST": {
                "bit": 11,
                "description": "Instruction cache reset"
              },
              "EMPTY": {
                "bit": 16,
                "description": "Flash User area empty"
              }
            },
            "KEYR": {
              "KEYR": {
                "bit": 0,
                "description": "KEYR",
                "width": 32
              }
            },
            "OPTKEYR": {
              "OPTKEYR": {
                "bit": 0,
                "description": "Option byte key",
                "width": 32
              }
            },
            "SR": {
              "EOP": {
                "bit": 0,
                "description": "End of operation"
              },
              "OPERR": {
                "bit": 1,
                "description": "Operation error"
              },
              "PROGERR": {
                "bit": 3,
                "description": "Programming error"
              },
              "WRPERR": {
                "bit": 4,
                "description": "Write protected error"
              },
              "PGAERR": {
                "bit": 5,
                "description": "Programming alignment\n              error"
              },
              "SIZERR": {
                "bit": 6,
                "description": "Size error"
              },
              "PGSERR": {
                "bit": 7,
                "description": "Programming sequence error"
              },
              "MISERR": {
                "bit": 8,
                "description": "Fast programming data miss\n              error"
              },
              "FASTERR": {
                "bit": 9,
                "description": "Fast programming error"
              },
              "OPTVERR": {
                "bit": 15,
                "description": "Option and Engineering bits loading\n              validity error"
              },
              "BSY1": {
                "bit": 16,
                "description": "BSY1"
              },
              "BSY2": {
                "bit": 17,
                "description": "BSY2"
              },
              "CFGBSY": {
                "bit": 18,
                "description": "Programming or erase configuration\n              busy."
              }
            },
            "CR": {
              "PG": {
                "bit": 0,
                "description": "Programming"
              },
              "PER": {
                "bit": 1,
                "description": "Page erase"
              },
              "MER1": {
                "bit": 2,
                "description": "Mass erase"
              },
              "PNB": {
                "bit": 3,
                "description": "Page number",
                "width": 10
              },
              "BKER": {
                "bit": 13,
                "description": "BKER"
              },
              "MER2": {
                "bit": 15,
                "description": "MER2"
              },
              "STRT": {
                "bit": 16,
                "description": "Start"
              },
              "OPTSTRT": {
                "bit": 17,
                "description": "Options modification start"
              },
              "FSTPG": {
                "bit": 18,
                "description": "Fast programming"
              },
              "EOPIE": {
                "bit": 24,
                "description": "End of operation interrupt\n              enable"
              },
              "ERRIE": {
                "bit": 25,
                "description": "Error interrupt enable"
              },
              "OBL_LAUNCH": {
                "bit": 27,
                "description": "Force the option byte\n              loading"
              },
              "OPTLOCK": {
                "bit": 30,
                "description": "Options Lock"
              },
              "LOCK": {
                "bit": 31,
                "description": "FLASH_CR Lock"
              }
            },
            "ECCR": {
              "ADDR_ECC": {
                "bit": 0,
                "description": "ECC fail address",
                "width": 14
              },
              "SYSF_ECC": {
                "bit": 20,
                "description": "ECC fail for Corrected ECC Error or\n              Double ECC Error in info block"
              },
              "ECCIE": {
                "bit": 24,
                "description": "ECC correction interrupt\n              enable"
              },
              "ECCC": {
                "bit": 30,
                "description": "ECC correction"
              },
              "ECCD": {
                "bit": 31,
                "description": "ECC detection"
              }
            },
            "OPTR": {
              "RDP": {
                "bit": 0,
                "description": "Read protection level",
                "width": 8
              },
              "nRST_STOP": {
                "bit": 13,
                "description": "nRST_STOP"
              },
              "nRST_STDBY": {
                "bit": 14,
                "description": "nRST_STDBY"
              },
              "IDWG_SW": {
                "bit": 16,
                "description": "Independent watchdog\n              selection"
              },
              "IWDG_STOP": {
                "bit": 17,
                "description": "Independent watchdog counter freeze in\n              Stop mode"
              },
              "IWDG_STDBY": {
                "bit": 18,
                "description": "Independent watchdog counter freeze in\n              Standby mode"
              },
              "WWDG_SW": {
                "bit": 19,
                "description": "Window watchdog selection"
              },
              "nSWAP_BANK": {
                "bit": 20,
                "description": "nSWAP_BANK"
              },
              "DUAL_BANK": {
                "bit": 21,
                "description": "DUAL_BANK"
              },
              "RAM_PARITY_CHECK": {
                "bit": 22,
                "description": "SRAM parity check control"
              },
              "nBOOT_SEL": {
                "bit": 24,
                "description": "nBOOT_SEL"
              },
              "nBOOT1": {
                "bit": 25,
                "description": "Boot configuration"
              },
              "nBOOT0": {
                "bit": 26,
                "description": "nBOOT0 option bit"
              }
            },
            "WRP1AR": {
              "WRP1A_STRT": {
                "bit": 0,
                "description": "WRP area A start offset",
                "width": 7
              },
              "WRP1A_END": {
                "bit": 16,
                "description": "WRP area A end offset",
                "width": 7
              }
            },
            "WRP1BR": {
              "WRP1B_STRT": {
                "bit": 0,
                "description": "WRP area B start offset",
                "width": 7
              },
              "WRP1B_END": {
                "bit": 16,
                "description": "WRP area B end offset",
                "width": 7
              }
            },
            "WRP2AR": {
              "WRP2A_STRT": {
                "bit": 0,
                "description": "WRP2A_STRT",
                "width": 7
              },
              "WRP2A_END": {
                "bit": 16,
                "description": "WRP2A_END",
                "width": 7
              }
            },
            "WRP2BR": {
              "WRP2B_STRT": {
                "bit": 0,
                "description": "WRP2B_STRT",
                "width": 7
              },
              "WRP2B_END": {
                "bit": 16,
                "description": "WRP2B_END",
                "width": 7
              }
            }
          }
        },
        "GPIO": {
          "instances": [
            {
              "name": "GPIOA",
              "base": "0x50000000"
            },
            {
              "name": "GPIOB",
              "base": "0x50000400"
            },
            {
              "name": "GPIOC",
              "base": "0x50000800"
            },
            {
              "name": "GPIOD",
              "base": "0x50000C00"
            },
            {
              "name": "GPIOE",
              "base": "0x50001000"
            },
            {
              "name": "GPIOF",
              "base": "0x50001400"
            }
          ],
          "registers": {
            "MODER": {
              "offset": "0x00",
              "size": 32,
              "description": "GPIO port mode register"
            },
            "OTYPER": {
              "offset": "0x04",
              "size": 32,
              "description": "GPIO port output type register"
            },
            "OSPEEDR": {
              "offset": "0x08",
              "size": 32,
              "description": "GPIO port output speed\n          register"
            },
            "PUPDR": {
              "offset": "0x0C",
              "size": 32,
              "description": "GPIO port pull-up/pull-down\n          register"
            },
            "IDR": {
              "offset": "0x10",
              "size": 32,
              "description": "GPIO port input data register"
            },
            "ODR": {
              "offset": "0x14",
              "size": 32,
              "description": "GPIO port output data register"
            },
            "BSRR": {
              "offset": "0x18",
              "size": 32,
              "description": "GPIO port bit set/reset\n          register"
            },
            "LCKR": {
              "offset": "0x1C",
              "size": 32,
              "description": "GPIO port configuration lock\n          register"
            },
            "AFRL": {
              "offset": "0x20",
              "size": 32,
              "description": "GPIO alternate function low\n          register"
            },
            "AFRH": {
              "offset": "0x24",
              "size": 32,
              "description": "GPIO alternate function high\n          register"
            },
            "BRR": {
              "offset": "0x28",
              "size": 32,
              "description": "port bit reset register"
            }
          },
          "bits": {
            "MODER": {
              "MODER15": {
                "bit": 30,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER14": {
                "bit": 28,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER13": {
                "bit": 26,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER12": {
                "bit": 24,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER11": {
                "bit": 22,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER10": {
                "bit": 20,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER9": {
                "bit": 18,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER8": {
                "bit": 16,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER7": {
                "bit": 14,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER6": {
                "bit": 12,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER5": {
                "bit": 10,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER4": {
                "bit": 8,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER3": {
                "bit": 6,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER2": {
                "bit": 4,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER1": {
                "bit": 2,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "MODER0": {
                "bit": 0,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              }
            },
            "OTYPER": {
              "OT15": {
                "bit": 15,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT14": {
                "bit": 14,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT13": {
                "bit": 13,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT12": {
                "bit": 12,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT11": {
                "bit": 11,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT10": {
                "bit": 10,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT9": {
                "bit": 9,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT8": {
                "bit": 8,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT7": {
                "bit": 7,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT6": {
                "bit": 6,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT5": {
                "bit": 5,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT4": {
                "bit": 4,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT3": {
                "bit": 3,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT2": {
                "bit": 2,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT1": {
                "bit": 1,
                "description": "Port x configuration bits (y =\n              0..15)"
              },
              "OT0": {
                "bit": 0,
                "description": "Port x configuration bits (y =\n              0..15)"
              }
            },
            "OSPEEDR": {
              "OSPEEDR15": {
                "bit": 30,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR14": {
                "bit": 28,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR13": {
                "bit": 26,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR12": {
                "bit": 24,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR11": {
                "bit": 22,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR10": {
                "bit": 20,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR9": {
                "bit": 18,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR8": {
                "bit": 16,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR7": {
                "bit": 14,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR6": {
                "bit": 12,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR5": {
                "bit": 10,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR4": {
                "bit": 8,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR3": {
                "bit": 6,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR2": {
                "bit": 4,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR1": {
                "bit": 2,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "OSPEEDR0": {
                "bit": 0,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              }
            },
            "PUPDR": {
              "PUPDR15": {
                "bit": 30,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR14": {
                "bit": 28,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR13": {
                "bit": 26,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR12": {
                "bit": 24,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR11": {
                "bit": 22,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR10": {
                "bit": 20,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR9": {
                "bit": 18,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR8": {
                "bit": 16,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR7": {
                "bit": 14,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR6": {
                "bit": 12,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR5": {
                "bit": 10,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR4": {
                "bit": 8,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR3": {
                "bit": 6,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR2": {
                "bit": 4,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR1": {
                "bit": 2,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              },
              "PUPDR0": {
                "bit": 0,
                "description": "Port x configuration bits (y =\n              0..15)",
                "width": 2
              }
            },
            "IDR": {
              "IDR15": {
                "bit": 15,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR14": {
                "bit": 14,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR13": {
                "bit": 13,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR12": {
                "bit": 12,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR11": {
                "bit": 11,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR10": {
                "bit": 10,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR9": {
                "bit": 9,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR8": {
                "bit": 8,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR7": {
                "bit": 7,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR6": {
                "bit": 6,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR5": {
                "bit": 5,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR4": {
                "bit": 4,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR3": {
                "bit": 3,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR2": {
                "bit": 2,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR1": {
                "bit": 1,
                "description": "Port input data (y =\n              0..15)"
              },
              "IDR0": {
                "bit": 0,
                "description": "Port input data (y =\n              0..15)"
              }
            },
            "ODR": {
              "ODR15": {
                "bit": 15,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR14": {
                "bit": 14,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR13": {
                "bit": 13,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR12": {
                "bit": 12,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR11": {
                "bit": 11,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR10": {
                "bit": 10,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR9": {
                "bit": 9,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR8": {
                "bit": 8,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR7": {
                "bit": 7,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR6": {
                "bit": 6,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR5": {
                "bit": 5,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR4": {
                "bit": 4,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR3": {
                "bit": 3,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR2": {
                "bit": 2,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR1": {
                "bit": 1,
                "description": "Port output data (y =\n              0..15)"
              },
              "ODR0": {
                "bit": 0,
                "description": "Port output data (y =\n              0..15)"
              }
            },
            "BSRR": {
              "BR15": {
                "bit": 31,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR14": {
                "bit": 30,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR13": {
                "bit": 29,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR12": {
                "bit": 28,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR11": {
                "bit": 27,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR10": {
                "bit": 26,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR9": {
                "bit": 25,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR8": {
                "bit": 24,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR7": {
                "bit": 23,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR6": {
                "bit": 22,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR5": {
                "bit": 21,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR4": {
                "bit": 20,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR3": {
                "bit": 19,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR2": {
                "bit": 18,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR1": {
                "bit": 17,
                "description": "Port x reset bit y (y =\n              0..15)"
              },
              "BR0": {
                "bit": 16,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS15": {
                "bit": 15,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS14": {
                "bit": 14,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS13": {
                "bit": 13,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS12": {
                "bit": 12,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS11": {
                "bit": 11,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS10": {
                "bit": 10,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS9": {
                "bit": 9,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS8": {
                "bit": 8,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS7": {
                "bit": 7,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS6": {
                "bit": 6,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS5": {
                "bit": 5,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS4": {
                "bit": 4,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS3": {
                "bit": 3,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS2": {
                "bit": 2,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS1": {
                "bit": 1,
                "description": "Port x set bit y (y=\n              0..15)"
              },
              "BS0": {
                "bit": 0,
                "description": "Port x set bit y (y=\n              0..15)"
              }
            },
            "LCKR": {
              "LCKK": {
                "bit": 16,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK15": {
                "bit": 15,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK14": {
                "bit": 14,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK13": {
                "bit": 13,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK12": {
                "bit": 12,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK11": {
                "bit": 11,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK10": {
                "bit": 10,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK9": {
                "bit": 9,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK8": {
                "bit": 8,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK7": {
                "bit": 7,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK6": {
                "bit": 6,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK5": {
                "bit": 5,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK4": {
                "bit": 4,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK3": {
                "bit": 3,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK2": {
                "bit": 2,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK1": {
                "bit": 1,
                "description": "Port x lock bit y (y=\n              0..15)"
              },
              "LCK0": {
                "bit": 0,
                "description": "Port x lock bit y (y=\n              0..15)"
              }
            },
            "AFRL": {
              "AFSEL7": {
                "bit": 28,
                "description": "Alternate function selection for port x\n              bit y (y = 0..7)",
                "width": 4
              },
              "AFSEL6": {
                "bit": 24,
                "description": "Alternate function selection for port x\n              bit y (y = 0..7)",
                "width": 4
              },
              "AFSEL5": {
                "bit": 20,
                "description": "Alternate function selection for port x\n              bit y (y = 0..7)",
                "width": 4
              },
              "AFSEL4": {
                "bit": 16,
                "description": "Alternate function selection for port x\n              bit y (y = 0..7)",
                "width": 4
              },
              "AFSEL3": {
                "bit": 12,
                "description": "Alternate function selection for port x\n              bit y (y = 0..7)",
                "width": 4
              },
              "AFSEL2": {
                "bit": 8,
                "description": "Alternate function selection for port x\n              bit y (y = 0..7)",
                "width": 4
              },
              "AFSEL1": {
                "bit": 4,
                "description": "Alternate function selection for port x\n              bit y (y = 0..7)",
                "width": 4
              },
              "AFSEL0": {
                "bit": 0,
                "description": "Alternate function selection for port x\n              bit y (y = 0..7)",
                "width": 4
              }
            },
            "AFRH": {
              "AFSEL15": {
                "bit": 28,
                "description": "Alternate function selection for port x\n              bit y (y = 8..15)",
                "width": 4
              },
              "AFSEL14": {
                "bit": 24,
                "description": "Alternate function selection for port x\n              bit y (y = 8..15)",
                "width": 4
              },
              "AFSEL13": {
                "bit": 20,
                "description": "Alternate function selection for port x\n              bit y (y = 8..15)",
                "width": 4
              },
              "AFSEL12": {
                "bit": 16,
                "description": "Alternate function selection for port x\n              bit y (y = 8..15)",
                "width": 4
              },
              "AFSEL11": {
                "bit": 12,
                "description": "Alternate function selection for port x\n              bit y (y = 8..15)",
                "width": 4
              },
              "AFSEL10": {
                "bit": 8,
                "description": "Alternate function selection for port x\n              bit y (y = 8..15)",
                "width": 4
              },
              "AFSEL9": {
                "bit": 4,
                "description": "Alternate function selection for port x\n              bit y (y = 8..15)",
                "width": 4
              },
              "AFSEL8": {
                "bit": 0,
                "description": "Alternate function selection for port x\n              bit y (y = 8..15)",
                "width": 4
              }
            },
            "BRR": {
              "BR0": {
                "bit": 0,
                "description": "Port Reset bit"
              },
              "BR1": {
                "bit": 1,
                "description": "Port Reset bit"
              },
              "BR2": {
                "bit": 2,
                "description": "Port Reset bit"
              },
              "BR3": {
                "bit": 3,
                "description": "Port Reset bit"
              },
              "BR4": {
                "bit": 4,
                "description": "Port Reset bit"
              },
              "BR5": {
                "bit": 5,
                "description": "Port Reset bit"
              },
              "BR6": {
                "bit": 6,
                "description": "Port Reset bit"
              },
              "BR7": {
                "bit": 7,
                "description": "Port Reset bit"
              },
              "BR8": {
                "bit": 8,
                "description": "Port Reset bit"
              },
              "BR9": {
                "bit": 9,
                "description": "Port Reset bit"
              },
              "BR10": {
                "bit": 10,
                "description": "Port Reset bit"
              },
              "BR11": {
                "bit": 11,
                "description": "Port Reset bit"
              },
              "BR12": {
                "bit": 12,
                "description": "Port Reset bit"
              },
              "BR13": {
                "bit": 13,
                "description": "Port Reset bit"
              },
              "BR14": {
                "bit": 14,
                "description": "Port Reset bit"
              },
              "BR15": {
                "bit": 15,
                "description": "Port Reset bit"
              }
            }
          }
        },
        "I2C": {
          "instances": [
            {
              "name": "I2C1",
              "base": "0x40005400",
              "irq": 23
            },
            {
              "name": "I2C2",
              "base": "0x40005800",
              "irq": 24
            },
            {
              "name": "I2C3",
              "base": "0x40008800"
            }
          ],
          "registers": {
            "I2C_CR1": {
              "offset": "0x00",
              "size": 32,
              "description": "Control register 1"
            },
            "I2C_CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "Control register 2"
            },
            "I2C_OAR1": {
              "offset": "0x08",
              "size": 32,
              "description": "Own address register 1"
            },
            "I2C_OAR2": {
              "offset": "0x0C",
              "size": 32,
              "description": "Own address register 2"
            },
            "I2C_TIMINGR": {
              "offset": "0x10",
              "size": 32,
              "description": "Timing register"
            },
            "I2C_TIMEOUTR": {
              "offset": "0x14",
              "size": 32,
              "description": "Status register 1"
            },
            "I2C_ISR": {
              "offset": "0x18",
              "size": 32,
              "description": "Interrupt and Status register"
            },
            "I2C_ICR": {
              "offset": "0x1C",
              "size": 32,
              "description": "Interrupt clear register"
            },
            "I2C_PECR": {
              "offset": "0x20",
              "size": 32,
              "description": "PEC register"
            },
            "I2C_RXDR": {
              "offset": "0x24",
              "size": 32,
              "description": "Receive data register"
            },
            "I2C_TXDR": {
              "offset": "0x28",
              "size": 32,
              "description": "Transmit data register"
            }
          },
          "bits": {
            "I2C_CR1": {
              "PE": {
                "bit": 0,
                "description": "Peripheral enable\nNote: When PE=0, the I2C SCL and SDA lines are released. Internal state machines and status bits are put back to their reset value. When cleared, PE must be kept low for at least 3 APB clock cycles."
              },
              "TXIE": {
                "bit": 1,
                "description": "TX Interrupt enable"
              },
              "RXIE": {
                "bit": 2,
                "description": "RX Interrupt enable"
              },
              "ADDRIE": {
                "bit": 3,
                "description": "Address match Interrupt enable (slave only)"
              },
              "NACKIE": {
                "bit": 4,
                "description": "Not acknowledge received Interrupt enable"
              },
              "STOPIE": {
                "bit": 5,
                "description": "Stop detection Interrupt enable"
              },
              "TCIE": {
                "bit": 6,
                "description": "Transfer Complete interrupt enable\nNote: Any of these events generate an interrupt:\nTransfer Complete (TC)\nTransfer Complete Reload (TCR)"
              },
              "ERRIE": {
                "bit": 7,
                "description": "Error interrupts enable\nNote: Any of these errors generate an interrupt:\nArbitration Loss (ARLO)\nBus Error detection (BERR)\nOverrun/Underrun (OVR)\nTimeout detection (TIMEOUT)\nPEC error detection (PECERR)\nAlert pin event detection (ALERT)"
              },
              "DNF": {
                "bit": 8,
                "description": "Digital noise filter\nThese bits are used to configure the digital noise filter on SDA and SCL input. The digital filter, filters spikes with a length of up to DNF[3:0] * tI2CCLK\n...\nNote: If the analog filter is also enabled, the digital filter is added to the analog filter.\nThis filter can only be programmed when the I2C is disabled (PE = 0).",
                "width": 4
              },
              "ANFOFF": {
                "bit": 12,
                "description": "Analog noise filter OFF\nNote: This bit can only be programmed when the I2C is disabled (PE = 0)."
              },
              "TXDMAEN": {
                "bit": 14,
                "description": "DMA transmission requests enable"
              },
              "RXDMAEN": {
                "bit": 15,
                "description": "DMA reception requests enable"
              },
              "SBC": {
                "bit": 16,
                "description": "Slave byte control\nThis bit is used to enable hardware byte control in slave mode."
              },
              "NOSTRETCH": {
                "bit": 17,
                "description": "Clock stretching disable\nThis bit is used to disable clock stretching in slave mode. It must be kept cleared in master mode.\nNote: This bit can only be programmed when the I2C is disabled (PE = 0)."
              },
              "WUPEN": {
                "bit": 18,
                "description": "Wakeup from Stop mode enable\nNote: If the Wakeup from Stop mode feature is not supported, this bit is reserved and forced by hardware to '0\u00e2\u0080\u0099. Refer to .\nNote: WUPEN can be set only when DNF = '0000\u00e2\u0080\u0099"
              },
              "GCEN": {
                "bit": 19,
                "description": "General call enable"
              },
              "SMBHEN": {
                "bit": 20,
                "description": "SMBus Host Address enable\nNote: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0\u00e2\u0080\u0099. Refer to ."
              },
              "SMBDEN": {
                "bit": 21,
                "description": "SMBus Device Default Address enable\nNote: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0\u00e2\u0080\u0099. Refer to ."
              },
              "ALERTEN": {
                "bit": 22,
                "description": "SMBus alert enable\nNote: When ALERTEN=0, the SMBA pin can be used as a standard GPIO.\nIf the SMBus feature is not supported, this bit is reserved and forced by hardware to '0\u00e2\u0080\u0099. Refer to ."
              },
              "PECEN": {
                "bit": 23,
                "description": "PEC enable\nNote: If the SMBus feature is not supported, this bit is reserved and forced by hardware to '0\u00e2\u0080\u0099. Refer to ."
              }
            },
            "I2C_CR2": {
              "SADD": {
                "bit": 0,
                "description": "Slave address (master mode)\nIn 7-bit addressing mode (ADD10 = 0):\nSADD[7:1] should be written with the 7-bit slave address to be sent. The bits SADD[9], SADD[8] and SADD[0] are don't care.\nIn 10-bit addressing mode (ADD10 = 1):\nSADD[9:0] should be written with the 10-bit slave address to be sent.\nNote: Changing these bits when the START bit is set is not allowed.",
                "width": 10
              },
              "RD_WRN": {
                "bit": 10,
                "description": "Transfer direction (master mode)\nNote: Changing this bit when the START bit is set is not allowed."
              },
              "ADD10": {
                "bit": 11,
                "description": "10-bit addressing mode (master mode)\nNote: Changing this bit when the START bit is set is not allowed."
              },
              "HEAD10R": {
                "bit": 12,
                "description": "10-bit address header only read direction (master receiver mode)\nNote: Changing this bit when the START bit is set is not allowed."
              },
              "START": {
                "bit": 13,
                "description": "Start generation\nThis bit is set by software, and cleared by hardware after the Start followed by the address sequence is sent, by an arbitration loss, by a timeout error detection, or when PE = 0. It can also be cleared by software by writing '1\u00e2\u0080\u0099 to the ADDRCF bit in the I2C_ICR register.\nIf the I2C is already in master mode with AUTOEND = 0, setting this bit generates a Repeated Start condition when RELOAD=0, after the end of the NBYTES transfer.\nOtherwise setting this bit generates a START condition once the bus is free.\nNote: Writing '0\u00e2\u0080\u0099 to this bit has no effect.\nThe START bit can be set even if the bus is BUSY or I2C is in slave mode.\nThis bit has no effect when RELOAD is set."
              },
              "STOP": {
                "bit": 14,
                "description": "Stop generation (master mode)\nThe bit is set by software, cleared by hardware when a STOP condition is detected, or when PE = 0.\nIn Master Mode:\nNote: Writing '0\u00e2\u0080\u0099 to this bit has no effect."
              },
              "NACK": {
                "bit": 15,
                "description": "NACK generation (slave mode)\nThe bit is set by software, cleared by hardware when the NACK is sent, or when a STOP condition or an Address matched is received, or when PE=0.\nNote: Writing '0\u00e2\u0080\u0099 to this bit has no effect.\nThis bit is used in slave mode only: in master receiver mode, NACK is automatically generated after last byte preceding STOP or RESTART condition, whatever the NACK bit value.\nWhen an overrun occurs in slave receiver NOSTRETCH mode, a NACK is automatically generated whatever the NACK bit value.\nWhen hardware PEC checking is enabled (PECBYTE=1), the PEC acknowledge value does not depend on the NACK value."
              },
              "NBYTES": {
                "bit": 16,
                "description": "Number of bytes\nThe number of bytes to be transmitted/received is programmed there. This field is don\u00e2\u0080\u0099t care in slave mode with SBC=0.\nNote: Changing these bits when the START bit is set is not allowed.",
                "width": 8
              },
              "RELOAD": {
                "bit": 24,
                "description": "NBYTES reload mode\nThis bit is set and cleared by software."
              },
              "AUTOEND": {
                "bit": 25,
                "description": "Automatic end mode (master mode)\nThis bit is set and cleared by software.\nNote: This bit has no effect in slave mode or when the RELOAD bit is set."
              },
              "PECBYTE": {
                "bit": 26,
                "description": "Packet error checking byte\nThis bit is set by software, and cleared by hardware when the PEC is transferred, or when a STOP condition or an Address matched is received, also when PE=0.\nNote: Writing '0\u00e2\u0080\u0099 to this bit has no effect.\nThis bit has no effect when RELOAD is set.\nThis bit has no effect is slave mode when SBC=0.\nIf the SMBus feature is not supported, this bit is reserved and forced by hardware to '0\u00e2\u0080\u0099. Refer to ."
              }
            },
            "I2C_OAR1": {
              "OA1": {
                "bit": 0,
                "description": "Interface own slave address\n7-bit addressing mode: OA1[7:1] contains the 7-bit own slave address. The bits OA1[9], OA1[8] and OA1[0] are don't care.\n10-bit addressing mode: OA1[9:0] contains the 10-bit own slave address.\nNote: These bits can be written only when OA1EN=0.",
                "width": 10
              },
              "OA1MODE": {
                "bit": 10,
                "description": "Own Address 1 10-bit mode\nNote: This bit can be written only when OA1EN=0."
              },
              "OA1EN": {
                "bit": 15,
                "description": "Own Address 1 enable"
              }
            },
            "I2C_OAR2": {
              "OA2": {
                "bit": 1,
                "description": "Interface address\n7-bit addressing mode: 7-bit address\nNote: These bits can be written only when OA2EN=0.",
                "width": 7
              },
              "OA2MSK": {
                "bit": 8,
                "description": "Own Address 2 masks\nNote: These bits can be written only when OA2EN=0.\nAs soon as OA2MSK is not equal to 0, the reserved I2C addresses (0b0000xxx and 0b1111xxx) are not acknowledged even if the comparison matches.",
                "width": 3
              },
              "OA2EN": {
                "bit": 15,
                "description": "Own Address 2 enable"
              }
            },
            "I2C_TIMINGR": {
              "SCLL": {
                "bit": 0,
                "description": "SCL low period (master\n              mode)",
                "width": 8
              },
              "SCLH": {
                "bit": 8,
                "description": "SCL high period (master\n              mode)",
                "width": 8
              },
              "SDADEL": {
                "bit": 16,
                "description": "Data hold time",
                "width": 4
              },
              "SCLDEL": {
                "bit": 20,
                "description": "Data setup time",
                "width": 4
              },
              "PRESC": {
                "bit": 28,
                "description": "Timing prescaler",
                "width": 4
              }
            },
            "I2C_TIMEOUTR": {
              "TIMEOUTA": {
                "bit": 0,
                "description": "Bus Timeout A\nThis field is used to configure:\nThe SCL low timeout condition tTIMEOUT when TIDLE=0\ntTIMEOUT= (TIMEOUTA+1) x 2048 x tI2CCLK\nThe bus idle condition (both SCL and SDA high) when TIDLE=1\ntIDLE= (TIMEOUTA+1) x 4 x tI2CCLK\nNote: These bits can be written only when TIMOUTEN=0.",
                "width": 12
              },
              "TIDLE": {
                "bit": 12,
                "description": "Idle clock timeout detection\nNote: This bit can be written only when TIMOUTEN=0."
              },
              "TIMOUTEN": {
                "bit": 15,
                "description": "Clock timeout enable"
              },
              "TIMEOUTB": {
                "bit": 16,
                "description": "Bus timeout B\nThis field is used to configure the cumulative clock extension timeout:\nIn master mode, the master cumulative clock low extend time (tLOW:MEXT) is detected\nIn slave mode, the slave cumulative clock low extend time (tLOW:SEXT) is detected\ntLOW:EXT= (TIMEOUTB+1) x 2048 x tI2CCLK\nNote: These bits can be written only when TEXTEN=0.",
                "width": 12
              },
              "TEXTEN": {
                "bit": 31,
                "description": "Extended clock timeout enable"
              }
            },
            "I2C_ISR": {
              "ADDCODE": {
                "bit": 17,
                "description": "Address match code (Slave\n              mode)",
                "width": 7
              },
              "DIR": {
                "bit": 16,
                "description": "Transfer direction (Slave mode)\nThis flag is updated when an address match event occurs (ADDR=1)."
              },
              "BUSY": {
                "bit": 15,
                "description": "Bus busy"
              },
              "ALERT": {
                "bit": 13,
                "description": "SMBus alert"
              },
              "TIMEOUT": {
                "bit": 12,
                "description": "Timeout or t_low detection\n              flag"
              },
              "PECERR": {
                "bit": 11,
                "description": "PEC Error in reception"
              },
              "OVR": {
                "bit": 10,
                "description": "Overrun/Underrun (slave\n              mode)"
              },
              "ARLO": {
                "bit": 9,
                "description": "Arbitration lost"
              },
              "BERR": {
                "bit": 8,
                "description": "Bus error"
              },
              "TCR": {
                "bit": 7,
                "description": "Transfer Complete Reload"
              },
              "TC": {
                "bit": 6,
                "description": "Transfer Complete (master\n              mode)"
              },
              "STOPF": {
                "bit": 5,
                "description": "Stop detection flag"
              },
              "NACKF": {
                "bit": 4,
                "description": "Not acknowledge received\n              flag"
              },
              "ADDR": {
                "bit": 3,
                "description": "Address matched (slave\n              mode)"
              },
              "RXNE": {
                "bit": 2,
                "description": "Receive data register not empty\n              (receivers)"
              },
              "TXIS": {
                "bit": 1,
                "description": "Transmit interrupt status\n              (transmitters)"
              },
              "TXE": {
                "bit": 0,
                "description": "Transmit data register empty\n              (transmitters)"
              }
            },
            "I2C_ICR": {
              "ALERTCF": {
                "bit": 13,
                "description": "Alert flag clear"
              },
              "TIMOUTCF": {
                "bit": 12,
                "description": "Timeout detection flag\n              clear"
              },
              "PECCF": {
                "bit": 11,
                "description": "PEC Error flag clear"
              },
              "OVRCF": {
                "bit": 10,
                "description": "Overrun/Underrun flag\n              clear"
              },
              "ARLOCF": {
                "bit": 9,
                "description": "Arbitration lost flag\n              clear"
              },
              "BERRCF": {
                "bit": 8,
                "description": "Bus error flag clear"
              },
              "STOPCF": {
                "bit": 5,
                "description": "Stop detection flag clear"
              },
              "NACKCF": {
                "bit": 4,
                "description": "Not Acknowledge flag clear"
              },
              "ADDRCF": {
                "bit": 3,
                "description": "Address Matched flag clear"
              }
            },
            "I2C_PECR": {
              "PEC": {
                "bit": 0,
                "description": "Packet error checking\n              register",
                "width": 8
              }
            },
            "I2C_RXDR": {
              "RXDATA": {
                "bit": 0,
                "description": "8-bit receive data",
                "width": 8
              }
            },
            "I2C_TXDR": {
              "TXDATA": {
                "bit": 0,
                "description": "8-bit transmit data",
                "width": 8
              }
            }
          }
        },
        "WDG": {
          "instances": [
            {
              "name": "IWDG",
              "base": "0x40003000"
            },
            {
              "name": "WWDG",
              "base": "0x40002C00",
              "irq": 0
            }
          ],
          "registers": {
            "IWDG_KR": {
              "offset": "0x00",
              "size": 32,
              "description": "Key register"
            },
            "IWDG_PR": {
              "offset": "0x04",
              "size": 32,
              "description": "Prescaler register"
            },
            "IWDG_RLR": {
              "offset": "0x08",
              "size": 32,
              "description": "Reload register"
            },
            "IWDG_SR": {
              "offset": "0x0C",
              "size": 32,
              "description": "Status register"
            },
            "IWDG_WINR": {
              "offset": "0x10",
              "size": 32,
              "description": "Window register"
            }
          },
          "bits": {
            "IWDG_KR": {
              "KEY": {
                "bit": 0,
                "description": "Key value (write only, read\n              0x0000)",
                "width": 16
              }
            },
            "IWDG_PR": {
              "PR": {
                "bit": 0,
                "description": "Prescaler divider\nThese bits are write access protected see . They are written by software to select the prescaler divider feeding the counter clock. PVU bit of the  must be reset in order to be able to change the prescaler divider.\nNote: Reading this register returns the prescaler value from the VDD voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the PVU bit in the status register (IWDG_SR) is reset.",
                "width": 3
              }
            },
            "IWDG_RLR": {
              "RL": {
                "bit": 0,
                "description": "Watchdog counter reload\n              value",
                "width": 12
              }
            },
            "IWDG_SR": {
              "PVU": {
                "bit": 0,
                "description": "Watchdog prescaler value update\nThis bit is set by hardware to indicate that an update of the prescaler value is ongoing. It is reset by hardware when the prescaler update operation is completed in the VDD voltage domain (takes up to five LSI cycles).\nPrescaler value can be updated only when PVU bit is reset."
              },
              "RVU": {
                "bit": 1,
                "description": "Watchdog counter reload value update\nThis bit is set by hardware to indicate that an update of the reload value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to five LSI cycles).\nReload value can be updated only when RVU bit is reset."
              },
              "WVU": {
                "bit": 2,
                "description": "Watchdog counter window value update\nThis bit is set by hardware to indicate that an update of the window value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to five LSI cycles).\nWindow value can be updated only when WVU bit is reset."
              }
            },
            "IWDG_WINR": {
              "WIN": {
                "bit": 0,
                "description": "Watchdog counter window\n              value",
                "width": 12
              }
            }
          }
        },
        "PWR": {
          "instances": [
            {
              "name": "PWR",
              "base": "0x40007000"
            }
          ],
          "registers": {
            "CR1": {
              "offset": "0x00",
              "size": 32,
              "description": "Power control register 1"
            },
            "CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "Power control register 2"
            },
            "CR3": {
              "offset": "0x08",
              "size": 32,
              "description": "Power control register 3"
            },
            "CR4": {
              "offset": "0x0C",
              "size": 32,
              "description": "Power control register 4"
            },
            "SR1": {
              "offset": "0x10",
              "size": 32,
              "description": "Power status register 1"
            },
            "SR2": {
              "offset": "0x14",
              "size": 32,
              "description": "Power status register 2"
            },
            "SCR": {
              "offset": "0x18",
              "size": 32,
              "description": "Power status clear register"
            },
            "PUCRA": {
              "offset": "0x20",
              "size": 32,
              "description": "Power Port A pull-up control\n          register"
            },
            "PDCRA": {
              "offset": "0x24",
              "size": 32,
              "description": "Power Port A pull-down control\n          register"
            },
            "PUCRB": {
              "offset": "0x28",
              "size": 32,
              "description": "Power Port B pull-up control\n          register"
            },
            "PDCRB": {
              "offset": "0x2C",
              "size": 32,
              "description": "Power Port B pull-down control\n          register"
            },
            "PUCRC": {
              "offset": "0x30",
              "size": 32,
              "description": "Power Port C pull-up control\n          register"
            },
            "PDCRC": {
              "offset": "0x34",
              "size": 32,
              "description": "Power Port C pull-down control\n          register"
            },
            "PUCRD": {
              "offset": "0x38",
              "size": 32,
              "description": "Power Port D pull-up control\n          register"
            },
            "PDCRD": {
              "offset": "0x3C",
              "size": 32,
              "description": "Power Port D pull-down control\n          register"
            },
            "PUCRE": {
              "offset": "0x40",
              "size": 32,
              "description": "Power Port E pull-UP control\n          register"
            },
            "PDCRE": {
              "offset": "0x44",
              "size": 32,
              "description": "Power Port E pull-down control\n          register"
            },
            "PUCRF": {
              "offset": "0x48",
              "size": 32,
              "description": "Power Port F pull-up control\n          register"
            },
            "PDCRF": {
              "offset": "0x4C",
              "size": 32,
              "description": "Power Port F pull-down control\n          register"
            }
          },
          "bits": {
            "CR1": {
              "LPR": {
                "bit": 14,
                "description": "Low-power run"
              },
              "VOS": {
                "bit": 9,
                "description": "Voltage scaling range\n              selection",
                "width": 2
              },
              "DBP": {
                "bit": 8,
                "description": "Disable backup domain write\n              protection"
              },
              "FPD_LPSLP": {
                "bit": 5,
                "description": "Flash memory powered down during\n              Low-power sleep mode"
              },
              "FPD_LPRUN": {
                "bit": 4,
                "description": "Flash memory powered down during\n              Low-power run mode"
              },
              "FPD_STOP": {
                "bit": 3,
                "description": "Flash memory powered down during Stop\n              mode"
              },
              "LPMS": {
                "bit": 0,
                "description": "Low-power mode selection",
                "width": 3
              }
            },
            "CR2": {
              "USV": {
                "bit": 10,
                "description": "USV"
              }
            },
            "CR3": {
              "EWUP1": {
                "bit": 0,
                "description": "Enable Wakeup pin WKUP1"
              },
              "EWUP2": {
                "bit": 1,
                "description": "Enable Wakeup pin WKUP2"
              },
              "EWUP3": {
                "bit": 2,
                "description": "Enable Wakeup pin WKUP3"
              },
              "EWUP4": {
                "bit": 3,
                "description": "Enable Wakeup pin WKUP4"
              },
              "EWUP5": {
                "bit": 4,
                "description": "Enable WKUP5 wakeup pin"
              },
              "EWUP6": {
                "bit": 5,
                "description": "Enable WKUP6 wakeup pin"
              },
              "APC": {
                "bit": 10,
                "description": "Apply pull-up and pull-down\n              configuration"
              },
              "EIWUL": {
                "bit": 15,
                "description": "Enable internal wakeup\n              line"
              }
            },
            "CR4": {
              "WP1": {
                "bit": 0,
                "description": "Wakeup pin WKUP1 polarity"
              },
              "WP2": {
                "bit": 1,
                "description": "Wakeup pin WKUP2 polarity"
              },
              "WP3": {
                "bit": 2,
                "description": "Wakeup pin WKUP3 polarity"
              },
              "WP4": {
                "bit": 3,
                "description": "Wakeup pin WKUP4 polarity"
              },
              "WP5": {
                "bit": 4,
                "description": "Wakeup pin WKUP5 polarity"
              },
              "WP6": {
                "bit": 5,
                "description": "WKUP6 wakeup pin polarity"
              },
              "VBE": {
                "bit": 8,
                "description": "VBAT battery charging\n              enable"
              },
              "VBRS": {
                "bit": 9,
                "description": "VBAT battery charging resistor\n              selection"
              }
            },
            "SR1": {
              "WUF1": {
                "bit": 0,
                "description": "Wakeup flag 1"
              },
              "WUF2": {
                "bit": 1,
                "description": "Wakeup flag 2"
              },
              "WUF3": {
                "bit": 2,
                "description": "Wakeup flag 3"
              },
              "WUF4": {
                "bit": 3,
                "description": "Wakeup flag 4"
              },
              "WUF5": {
                "bit": 4,
                "description": "Wakeup flag 5"
              },
              "WUF6": {
                "bit": 5,
                "description": "Wakeup flag 6"
              },
              "SBF": {
                "bit": 8,
                "description": "Standby flag"
              },
              "WUFI": {
                "bit": 15,
                "description": "Wakeup flag internal"
              }
            },
            "SR2": {
              "VOSF": {
                "bit": 10,
                "description": "Voltage scaling flag"
              },
              "REGLPF": {
                "bit": 9,
                "description": "Low-power regulator flag"
              },
              "REGLPS": {
                "bit": 8,
                "description": "Low-power regulator\n              started"
              },
              "FLASH_RDY": {
                "bit": 7,
                "description": "Flash ready flag"
              }
            },
            "SCR": {
              "CSBF": {
                "bit": 8,
                "description": "Clear standby flag"
              },
              "CWUF6": {
                "bit": 5,
                "description": "Clear wakeup flag 6"
              },
              "CWUF5": {
                "bit": 4,
                "description": "Clear wakeup flag 5"
              },
              "CWUF4": {
                "bit": 3,
                "description": "Clear wakeup flag 4"
              },
              "CWUF3": {
                "bit": 2,
                "description": "Clear wakeup flag 3"
              },
              "CWUF2": {
                "bit": 1,
                "description": "Clear wakeup flag 2"
              },
              "CWUF1": {
                "bit": 0,
                "description": "Clear wakeup flag 1"
              }
            },
            "PUCRA": {
              "PU15": {
                "bit": 15,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU14": {
                "bit": 14,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU13": {
                "bit": 13,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU12": {
                "bit": 12,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU11": {
                "bit": 11,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU10": {
                "bit": 10,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU9": {
                "bit": 9,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU8": {
                "bit": 8,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU7": {
                "bit": 7,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU6": {
                "bit": 6,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU5": {
                "bit": 5,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU4": {
                "bit": 4,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU3": {
                "bit": 3,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU2": {
                "bit": 2,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU1": {
                "bit": 1,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              },
              "PU0": {
                "bit": 0,
                "description": "Port A pull-up bit y\n              (y=0..15)"
              }
            },
            "PDCRA": {
              "PD15": {
                "bit": 15,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD14": {
                "bit": 14,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD13": {
                "bit": 13,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD12": {
                "bit": 12,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD11": {
                "bit": 11,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD10": {
                "bit": 10,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD9": {
                "bit": 9,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD8": {
                "bit": 8,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD7": {
                "bit": 7,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD6": {
                "bit": 6,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD5": {
                "bit": 5,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD4": {
                "bit": 4,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD3": {
                "bit": 3,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD2": {
                "bit": 2,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD1": {
                "bit": 1,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              },
              "PD0": {
                "bit": 0,
                "description": "Port A pull-down bit y\n              (y=0..15)"
              }
            },
            "PUCRB": {
              "PU15": {
                "bit": 15,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU14": {
                "bit": 14,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU13": {
                "bit": 13,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU12": {
                "bit": 12,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU11": {
                "bit": 11,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU10": {
                "bit": 10,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU9": {
                "bit": 9,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU8": {
                "bit": 8,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU7": {
                "bit": 7,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU6": {
                "bit": 6,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU5": {
                "bit": 5,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU4": {
                "bit": 4,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU3": {
                "bit": 3,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU2": {
                "bit": 2,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU1": {
                "bit": 1,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              },
              "PU0": {
                "bit": 0,
                "description": "Port B pull-up bit y\n              (y=0..15)"
              }
            },
            "PDCRB": {
              "PD15": {
                "bit": 15,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD14": {
                "bit": 14,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD13": {
                "bit": 13,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD12": {
                "bit": 12,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD11": {
                "bit": 11,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD10": {
                "bit": 10,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD9": {
                "bit": 9,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD8": {
                "bit": 8,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD7": {
                "bit": 7,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD6": {
                "bit": 6,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD5": {
                "bit": 5,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD4": {
                "bit": 4,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD3": {
                "bit": 3,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD2": {
                "bit": 2,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD1": {
                "bit": 1,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              },
              "PD0": {
                "bit": 0,
                "description": "Port B pull-down bit y\n              (y=0..15)"
              }
            },
            "PUCRC": {
              "PU15": {
                "bit": 15,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU14": {
                "bit": 14,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU13": {
                "bit": 13,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU12": {
                "bit": 12,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU11": {
                "bit": 11,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU10": {
                "bit": 10,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU9": {
                "bit": 9,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU8": {
                "bit": 8,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU7": {
                "bit": 7,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU6": {
                "bit": 6,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU5": {
                "bit": 5,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU4": {
                "bit": 4,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU3": {
                "bit": 3,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU2": {
                "bit": 2,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU1": {
                "bit": 1,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              },
              "PU0": {
                "bit": 0,
                "description": "Port C pull-up bit y\n              (y=0..15)"
              }
            },
            "PDCRC": {
              "PD15": {
                "bit": 15,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD14": {
                "bit": 14,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD13": {
                "bit": 13,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD12": {
                "bit": 12,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD11": {
                "bit": 11,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD10": {
                "bit": 10,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD9": {
                "bit": 9,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD8": {
                "bit": 8,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD7": {
                "bit": 7,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD6": {
                "bit": 6,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD5": {
                "bit": 5,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD4": {
                "bit": 4,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD3": {
                "bit": 3,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD2": {
                "bit": 2,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD1": {
                "bit": 1,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              },
              "PD0": {
                "bit": 0,
                "description": "Port C pull-down bit y\n              (y=0..15)"
              }
            },
            "PUCRD": {
              "PU15": {
                "bit": 15,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU14": {
                "bit": 14,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU13": {
                "bit": 13,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU12": {
                "bit": 12,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU11": {
                "bit": 11,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU10": {
                "bit": 10,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU9": {
                "bit": 9,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU8": {
                "bit": 8,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU7": {
                "bit": 7,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU6": {
                "bit": 6,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU5": {
                "bit": 5,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU4": {
                "bit": 4,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU3": {
                "bit": 3,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU2": {
                "bit": 2,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU1": {
                "bit": 1,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              },
              "PU0": {
                "bit": 0,
                "description": "Port D pull-up bit y\n              (y=0..15)"
              }
            },
            "PDCRD": {
              "PD15": {
                "bit": 15,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD14": {
                "bit": 14,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD13": {
                "bit": 13,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD12": {
                "bit": 12,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD11": {
                "bit": 11,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD10": {
                "bit": 10,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD9": {
                "bit": 9,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD8": {
                "bit": 8,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD7": {
                "bit": 7,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD6": {
                "bit": 6,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD5": {
                "bit": 5,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD4": {
                "bit": 4,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD3": {
                "bit": 3,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD2": {
                "bit": 2,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD1": {
                "bit": 1,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              },
              "PD0": {
                "bit": 0,
                "description": "Port D pull-down bit y\n              (y=0..15)"
              }
            },
            "PUCRE": {
              "PU15": {
                "bit": 15,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU14": {
                "bit": 14,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU13": {
                "bit": 13,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU12": {
                "bit": 12,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU11": {
                "bit": 11,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU10": {
                "bit": 10,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU9": {
                "bit": 9,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU8": {
                "bit": 8,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU7": {
                "bit": 7,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU6": {
                "bit": 6,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU5": {
                "bit": 5,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU4": {
                "bit": 4,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU3": {
                "bit": 3,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU2": {
                "bit": 2,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU1": {
                "bit": 1,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              },
              "PU0": {
                "bit": 0,
                "description": "Port E pull-up bit y\n              (y=0..15)"
              }
            },
            "PDCRE": {
              "PD15": {
                "bit": 15,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD14": {
                "bit": 14,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD13": {
                "bit": 13,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD12": {
                "bit": 12,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD11": {
                "bit": 11,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD10": {
                "bit": 10,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD9": {
                "bit": 9,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD8": {
                "bit": 8,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD7": {
                "bit": 7,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD6": {
                "bit": 6,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD5": {
                "bit": 5,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD4": {
                "bit": 4,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD3": {
                "bit": 3,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD2": {
                "bit": 2,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD1": {
                "bit": 1,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              },
              "PD0": {
                "bit": 0,
                "description": "Port E pull-down bit y\n              (y=0..15)"
              }
            },
            "PUCRF": {
              "PU13": {
                "bit": 13,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU12": {
                "bit": 12,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU11": {
                "bit": 11,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU10": {
                "bit": 10,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU9": {
                "bit": 9,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU8": {
                "bit": 8,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU7": {
                "bit": 7,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU6": {
                "bit": 6,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU5": {
                "bit": 5,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU4": {
                "bit": 4,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU3": {
                "bit": 3,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU2": {
                "bit": 2,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU1": {
                "bit": 1,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              },
              "PU0": {
                "bit": 0,
                "description": "Port F pull-up bit y\n              (y=0..15)"
              }
            },
            "PDCRF": {
              "PD13": {
                "bit": 13,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD12": {
                "bit": 12,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD11": {
                "bit": 11,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD10": {
                "bit": 10,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD9": {
                "bit": 9,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD8": {
                "bit": 8,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD7": {
                "bit": 7,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD6": {
                "bit": 6,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD5": {
                "bit": 5,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD4": {
                "bit": 4,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD3": {
                "bit": 3,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD2": {
                "bit": 2,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD1": {
                "bit": 1,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              },
              "PD0": {
                "bit": 0,
                "description": "Port F pull-down bit y\n              (y=0..15)"
              }
            }
          }
        },
        "RCC": {
          "instances": [
            {
              "name": "RCC",
              "base": "0x40021000",
              "irq": 4
            }
          ],
          "registers": {
            "CR": {
              "offset": "0x00",
              "size": 32,
              "description": "Clock control register"
            },
            "ICSCR": {
              "offset": "0x04",
              "size": 32,
              "description": "Internal clock sources calibration\n          register"
            },
            "CFGR": {
              "offset": "0x08",
              "size": 32,
              "description": "Clock configuration register"
            },
            "PLLSYSCFGR": {
              "offset": "0x0C",
              "size": 32,
              "description": "PLL configuration register"
            },
            "CIER": {
              "offset": "0x18",
              "size": 32,
              "description": "Clock interrupt enable\n          register"
            },
            "CIFR": {
              "offset": "0x1C",
              "size": 32,
              "description": "Clock interrupt flag register"
            },
            "CICR": {
              "offset": "0x20",
              "size": 32,
              "description": "Clock interrupt clear register"
            },
            "IOPRSTR": {
              "offset": "0x24",
              "size": 32,
              "description": "I/O port reset register"
            },
            "AHBRSTR": {
              "offset": "0x28",
              "size": 32,
              "description": "AHB peripheral reset register"
            },
            "APBRSTR1": {
              "offset": "0x2C",
              "size": 32,
              "description": "APB peripheral reset register\n          1"
            },
            "APBRSTR2": {
              "offset": "0x30",
              "size": 32,
              "description": "APB peripheral reset register\n          2"
            },
            "IOPENR": {
              "offset": "0x34",
              "size": 32,
              "description": "GPIO clock enable register"
            },
            "AHBENR": {
              "offset": "0x38",
              "size": 32,
              "description": "AHB peripheral clock enable\n          register"
            },
            "APBENR1": {
              "offset": "0x3C",
              "size": 32,
              "description": "APB peripheral clock enable register\n          1"
            },
            "APBENR2": {
              "offset": "0x40",
              "size": 32,
              "description": "APB peripheral clock enable register\n          2"
            },
            "IOPSMENR": {
              "offset": "0x44",
              "size": 32,
              "description": "GPIO in Sleep mode clock enable\n          register"
            },
            "AHBSMENR": {
              "offset": "0x48",
              "size": 32,
              "description": "AHB peripheral clock enable in Sleep mode\n          register"
            },
            "APBSMENR1": {
              "offset": "0x4C",
              "size": 32,
              "description": "APB peripheral clock enable in Sleep mode\n          register 1"
            },
            "APBSMENR2": {
              "offset": "0x50",
              "size": 32,
              "description": "APB peripheral clock enable in Sleep mode\n          register 2"
            },
            "CCIPR": {
              "offset": "0x54",
              "size": 32,
              "description": "Peripherals independent clock configuration\n          register"
            },
            "CCIPR2": {
              "offset": "0x58",
              "size": 32,
              "description": "Peripherals independent clock configuration register 2"
            },
            "BDCR": {
              "offset": "0x5C",
              "size": 32,
              "description": "RTC domain control register"
            },
            "CSR": {
              "offset": "0x60",
              "size": 32,
              "description": "Control/status register"
            }
          },
          "bits": {
            "CR": {
              "HSION": {
                "bit": 8,
                "description": "HSI16 clock enable"
              },
              "HSIKERON": {
                "bit": 9,
                "description": "HSI16 always enable for peripheral\n              kernels"
              },
              "HSIRDY": {
                "bit": 10,
                "description": "HSI16 clock ready flag"
              },
              "HSIDIV": {
                "bit": 11,
                "description": "HSI16 clock division\n              factor",
                "width": 3
              },
              "HSEON": {
                "bit": 16,
                "description": "HSE clock enable"
              },
              "HSERDY": {
                "bit": 17,
                "description": "HSE clock ready flag"
              },
              "HSEBYP": {
                "bit": 18,
                "description": "HSE crystal oscillator\n              bypass"
              },
              "CSSON": {
                "bit": 19,
                "description": "Clock security system\n              enable"
              },
              "PLLON": {
                "bit": 24,
                "description": "PLL enable"
              },
              "PLLRDY": {
                "bit": 25,
                "description": "PLL clock ready flag"
              }
            },
            "ICSCR": {
              "HSICAL": {
                "bit": 0,
                "description": "HSI16 clock calibration",
                "width": 8
              },
              "HSITRIM": {
                "bit": 8,
                "description": "HSI16 clock trimming",
                "width": 7
              }
            },
            "CFGR": {
              "MCOPRE": {
                "bit": 28,
                "description": "Microcontroller clock output\n              prescaler",
                "width": 4
              },
              "MCOSEL": {
                "bit": 24,
                "description": "Microcontroller clock\n              output",
                "width": 4
              },
              "MCO2PRE": {
                "bit": 20,
                "description": "MCO2PRE",
                "width": 4
              },
              "MCO2SEL": {
                "bit": 16,
                "description": "MCO2SEL",
                "width": 4
              },
              "PPRE": {
                "bit": 12,
                "description": "APB prescaler",
                "width": 3
              },
              "HPRE": {
                "bit": 8,
                "description": "AHB prescaler",
                "width": 4
              },
              "SWS": {
                "bit": 3,
                "description": "System clock switch status",
                "width": 3
              },
              "SW": {
                "bit": 0,
                "description": "System clock switch",
                "width": 3
              }
            },
            "PLLSYSCFGR": {
              "PLLSRC": {
                "bit": 0,
                "description": "PLL input clock source",
                "width": 2
              },
              "PLLM": {
                "bit": 4,
                "description": "Division factor M of the PLL input clock\n              divider",
                "width": 3
              },
              "PLLN": {
                "bit": 8,
                "description": "PLL frequency multiplication factor\n              N",
                "width": 8
              },
              "PLLPEN": {
                "bit": 16,
                "description": "PLLPCLK clock output\n              enable"
              },
              "PLLP": {
                "bit": 17,
                "description": "PLL VCO division factor P for PLLPCLK\n              clock output",
                "width": 5
              },
              "PLLQEN": {
                "bit": 24,
                "description": "PLLQCLK clock output\n              enable"
              },
              "PLLQ": {
                "bit": 25,
                "description": "PLL VCO division factor Q for PLLQCLK\n              clock output",
                "width": 3
              },
              "PLLREN": {
                "bit": 28,
                "description": "PLLRCLK clock output\n              enable"
              },
              "PLLR": {
                "bit": 29,
                "description": "PLL VCO division factor R for PLLRCLK\n              clock output",
                "width": 3
              }
            },
            "CIER": {
              "LSIRDYIE": {
                "bit": 0,
                "description": "LSI ready interrupt enable"
              },
              "LSERDYIE": {
                "bit": 1,
                "description": "LSE ready interrupt enable"
              },
              "HSIRDYIE": {
                "bit": 3,
                "description": "HSI ready interrupt enable"
              },
              "HSERDYIE": {
                "bit": 4,
                "description": "HSE ready interrupt enable"
              },
              "PLLSYSRDYIE": {
                "bit": 5,
                "description": "PLL ready interrupt enable"
              }
            },
            "CIFR": {
              "LSIRDYF": {
                "bit": 0,
                "description": "LSI ready interrupt flag"
              },
              "LSERDYF": {
                "bit": 1,
                "description": "LSE ready interrupt flag"
              },
              "HSIRDYF": {
                "bit": 3,
                "description": "HSI ready interrupt flag"
              },
              "HSERDYF": {
                "bit": 4,
                "description": "HSE ready interrupt flag"
              },
              "PLLSYSRDYF": {
                "bit": 5,
                "description": "PLL ready interrupt flag"
              },
              "CSSF": {
                "bit": 8,
                "description": "Clock security system interrupt\n              flag"
              },
              "LSECSSF": {
                "bit": 9,
                "description": "LSE Clock security system interrupt\n              flag"
              }
            },
            "CICR": {
              "LSIRDYC": {
                "bit": 0,
                "description": "LSI ready interrupt clear"
              },
              "LSERDYC": {
                "bit": 1,
                "description": "LSE ready interrupt clear"
              },
              "HSIRDYC": {
                "bit": 3,
                "description": "HSI ready interrupt clear"
              },
              "HSERDYC": {
                "bit": 4,
                "description": "HSE ready interrupt clear"
              },
              "PLLSYSRDYC": {
                "bit": 5,
                "description": "PLL ready interrupt clear"
              },
              "CSSC": {
                "bit": 8,
                "description": "Clock security system interrupt\n              clear"
              },
              "LSECSSC": {
                "bit": 9,
                "description": "LSE Clock security system interrupt\n              clear"
              }
            },
            "IOPRSTR": {
              "GPIOARST": {
                "bit": 0,
                "description": "GPIOARST"
              },
              "GPIOBRST": {
                "bit": 1,
                "description": "GPIOBRST"
              },
              "GPIOCRST": {
                "bit": 2,
                "description": "GPIOCRST"
              },
              "GPIODRST": {
                "bit": 3,
                "description": "GPIODRST"
              },
              "GPIOERST": {
                "bit": 4,
                "description": "GPIOERST"
              },
              "GPIOFRST": {
                "bit": 5,
                "description": "GPIOFRST"
              }
            },
            "AHBRSTR": {
              "DMA1RST": {
                "bit": 0,
                "description": "DMA1 reset"
              },
              "DMA2RST": {
                "bit": 1,
                "description": "DMA1 reset"
              },
              "FLASHRST": {
                "bit": 8,
                "description": "FLITF reset"
              },
              "CRCRST": {
                "bit": 12,
                "description": "CRC reset"
              }
            },
            "APBRSTR1": {
              "TIM3RST": {
                "bit": 1,
                "description": "TIM3 timer reset"
              },
              "TIM4RST": {
                "bit": 2,
                "description": "TIM4 timer reset"
              },
              "TIM6RST": {
                "bit": 4,
                "description": "TIM6 timer reset"
              },
              "TIM7RST": {
                "bit": 5,
                "description": "TIM7 timer reset"
              },
              "USART5RST": {
                "bit": 8,
                "description": "USART5RST"
              },
              "USART6RST": {
                "bit": 9,
                "description": "USART6RST"
              },
              "USBRST": {
                "bit": 13,
                "description": "USBRST"
              },
              "SPI2RST": {
                "bit": 14,
                "description": "SPI2 reset"
              },
              "SPI3RST": {
                "bit": 15,
                "description": "SPI3 reset"
              },
              "USART2RST": {
                "bit": 17,
                "description": "USART2 reset"
              },
              "USART3RST": {
                "bit": 18,
                "description": "USART3 reset"
              },
              "USART4RST": {
                "bit": 19,
                "description": "USART4 reset"
              },
              "I2C1RST": {
                "bit": 21,
                "description": "I2C1 reset"
              },
              "I2C2RST": {
                "bit": 22,
                "description": "I2C2 reset"
              },
              "I2C3RST": {
                "bit": 23,
                "description": "I2C3RST reset"
              },
              "DBGRST": {
                "bit": 27,
                "description": "Debug support reset"
              },
              "PWRRST": {
                "bit": 28,
                "description": "Power interface reset"
              }
            },
            "APBRSTR2": {
              "SYSCFGRST": {
                "bit": 0,
                "description": "SYSCFG, COMP and VREFBUF\n              reset"
              },
              "TIM1RST": {
                "bit": 11,
                "description": "TIM1 timer reset"
              },
              "SPI1RST": {
                "bit": 12,
                "description": "SPI1 reset"
              },
              "USART1RST": {
                "bit": 14,
                "description": "USART1 reset"
              },
              "TIM14RST": {
                "bit": 15,
                "description": "TIM14 timer reset"
              },
              "TIM15RST": {
                "bit": 16,
                "description": "TIM15 timer reset"
              },
              "TIM16RST": {
                "bit": 17,
                "description": "TIM16 timer reset"
              },
              "TIM17RST": {
                "bit": 18,
                "description": "TIM17 timer reset"
              },
              "ADCRST": {
                "bit": 20,
                "description": "ADC reset"
              }
            },
            "IOPENR": {
              "GPIOAEN": {
                "bit": 0,
                "description": "I/O port A clock enable during Sleep\n              mode"
              },
              "GPIOBEN": {
                "bit": 1,
                "description": "I/O port B clock enable during Sleep\n              mode"
              },
              "GPIOCEN": {
                "bit": 2,
                "description": "I/O port C clock enable during Sleep\n              mode"
              },
              "GPIODEN": {
                "bit": 3,
                "description": "I/O port D clock enable during Sleep\n              mode"
              },
              "GPIOEEN": {
                "bit": 4,
                "description": "I/O port E clock enable during Sleep\n              mode"
              },
              "GPIOFEN": {
                "bit": 5,
                "description": "I/O port F clock enable during Sleep\n              mode"
              }
            },
            "AHBENR": {
              "DMA1EN": {
                "bit": 0,
                "description": "DMA1 clock enable"
              },
              "DMA2EN": {
                "bit": 1,
                "description": "DMA2 clock enable"
              },
              "FLASHEN": {
                "bit": 8,
                "description": "Flash memory interface clock\n              enable"
              },
              "CRCEN": {
                "bit": 12,
                "description": "CRC clock enable"
              }
            },
            "APBENR1": {
              "TIM3EN": {
                "bit": 1,
                "description": "TIM3 timer clock enable"
              },
              "TIM4EN": {
                "bit": 2,
                "description": "TIM4 timer clock enable"
              },
              "TIM6EN": {
                "bit": 4,
                "description": "TIM6 timer clock enable"
              },
              "TIM7EN": {
                "bit": 5,
                "description": "TIM7 timer clock enable"
              },
              "USART5EN": {
                "bit": 8,
                "description": "USART5EN"
              },
              "USART6EN": {
                "bit": 9,
                "description": "USART6EN"
              },
              "RTCAPBEN": {
                "bit": 10,
                "description": "RTC APB clock enable"
              },
              "WWDGEN": {
                "bit": 11,
                "description": "WWDG clock enable"
              },
              "USBEN": {
                "bit": 13,
                "description": "USBEN"
              },
              "SPI2EN": {
                "bit": 14,
                "description": "SPI2 clock enable"
              },
              "SPI3EN": {
                "bit": 15,
                "description": "SPI3 clock enable"
              },
              "USART2EN": {
                "bit": 17,
                "description": "USART2 clock enable"
              },
              "USART3EN": {
                "bit": 18,
                "description": "USART3 clock enable"
              },
              "USART4EN": {
                "bit": 19,
                "description": "USART4 clock enable"
              },
              "I2C1EN": {
                "bit": 21,
                "description": "I2C1 clock enable"
              },
              "I2C2EN": {
                "bit": 22,
                "description": "I2C2 clock enable"
              },
              "I2C3EN": {
                "bit": 23,
                "description": "I2C3 clock enable"
              },
              "DBGEN": {
                "bit": 27,
                "description": "Debug support clock enable"
              },
              "PWREN": {
                "bit": 28,
                "description": "Power interface clock\n              enable"
              }
            },
            "APBENR2": {
              "SYSCFGEN": {
                "bit": 0,
                "description": "SYSCFG, COMP and VREFBUF clock\n              enable"
              },
              "TIM1EN": {
                "bit": 11,
                "description": "TIM1 timer clock enable"
              },
              "SPI1EN": {
                "bit": 12,
                "description": "SPI1 clock enable"
              },
              "USART1EN": {
                "bit": 14,
                "description": "USART1 clock enable"
              },
              "TIM14EN": {
                "bit": 15,
                "description": "TIM14 timer clock enable"
              },
              "TIM15EN": {
                "bit": 16,
                "description": "TIM15 timer clock enable"
              },
              "TIM16EN": {
                "bit": 17,
                "description": "TIM16 timer clock enable"
              },
              "TIM17EN": {
                "bit": 18,
                "description": "TIM16 timer clock enable"
              },
              "ADCEN": {
                "bit": 20,
                "description": "ADC clock enable"
              }
            },
            "IOPSMENR": {
              "GPIOASMEN": {
                "bit": 0,
                "description": "I/O port A clock enable during Sleep\n              mode"
              },
              "GPIOBSMEN": {
                "bit": 1,
                "description": "I/O port B clock enable during Sleep\n              mode"
              },
              "GPIOCSMEN": {
                "bit": 2,
                "description": "I/O port C clock enable during Sleep\n              mode"
              },
              "GPIODSMEN": {
                "bit": 3,
                "description": "I/O port D clock enable during Sleep\n              mode"
              },
              "GPIOESMEN": {
                "bit": 4,
                "description": "I/O port E clock enable during Sleep\n              mode"
              },
              "GPIOFSMEN": {
                "bit": 5,
                "description": "I/O port F clock enable during Sleep\n              mode"
              }
            },
            "AHBSMENR": {
              "DMA1SMEN": {
                "bit": 0,
                "description": "DMA1 clock enable during Sleep\n              mode"
              },
              "DMA2SMEN": {
                "bit": 1,
                "description": "DMA2 clock enable during Sleep\n              mode"
              },
              "FLASHSMEN": {
                "bit": 8,
                "description": "Flash memory interface clock enable\n              during Sleep mode"
              },
              "SRAMSMEN": {
                "bit": 9,
                "description": "SRAM clock enable during Sleep\n              mode"
              },
              "CRCSMEN": {
                "bit": 12,
                "description": "CRC clock enable during Sleep\n              mode"
              }
            },
            "APBSMENR1": {
              "TIM3SMEN": {
                "bit": 1,
                "description": "TIM3 timer clock enable during Sleep\n              mode"
              },
              "TIM4SMEN": {
                "bit": 2,
                "description": "TIM4 timer clock enable during Sleep\n              mode"
              },
              "TIM6SMEN": {
                "bit": 4,
                "description": "TIM6 timer clock enable during Sleep\n              mode"
              },
              "TIM7SMEN": {
                "bit": 5,
                "description": "TIM7 timer clock enable during Sleep\n              mode"
              },
              "USART5SMEN": {
                "bit": 8,
                "description": "USART5 clock enable"
              },
              "USART6SMEN": {
                "bit": 9,
                "description": "USART6 clock enable"
              },
              "RTCAPBSMEN": {
                "bit": 10,
                "description": "RTC APB clock enable during Sleep\n              mode"
              },
              "WWDGSMEN": {
                "bit": 11,
                "description": "WWDG clock enable during Sleep\n              mode"
              },
              "USBSMEN": {
                "bit": 13,
                "description": "USB clock enable during Sleep\n              mode"
              },
              "SPI2SMEN": {
                "bit": 14,
                "description": "SPI2 clock enable during Sleep\n              mode"
              },
              "SPI3SMEN": {
                "bit": 15,
                "description": "SPI3 clock enable during Sleep\n              mode"
              },
              "USART2SMEN": {
                "bit": 17,
                "description": "USART2 clock enable during Sleep\n              mode"
              },
              "USART3SMEN": {
                "bit": 18,
                "description": "USART3 clock enable during Sleep\n              mode"
              },
              "USART4SMEN": {
                "bit": 19,
                "description": "USART4 clock enable during Sleep\n              mode"
              },
              "I2C1SMEN": {
                "bit": 21,
                "description": "I2C1 clock enable during Sleep\n              mode"
              },
              "I2C2SMEN": {
                "bit": 22,
                "description": "I2C2 clock enable during Sleep\n              mode"
              },
              "I2C3SMEN": {
                "bit": 23,
                "description": "I2C3 clock enable during Sleep\n              mode"
              },
              "DBGSMEN": {
                "bit": 27,
                "description": "Debug support clock enable during Sleep\n              mode"
              },
              "PWRSMEN": {
                "bit": 28,
                "description": "Power interface clock enable during\n              Sleep mode"
              }
            },
            "APBSMENR2": {
              "SYSCFGSMEN": {
                "bit": 0,
                "description": "SYSCFG, COMP and VREFBUF clock enable\n              during Sleep mode"
              },
              "TIM1SMEN": {
                "bit": 11,
                "description": "TIM1 timer clock enable during Sleep\n              mode"
              },
              "SPI1SMEN": {
                "bit": 12,
                "description": "SPI1 clock enable during Sleep\n              mode"
              },
              "USART1SMEN": {
                "bit": 14,
                "description": "USART1 clock enable during Sleep\n              mode"
              },
              "TIM14SMEN": {
                "bit": 15,
                "description": "TIM14 timer clock enable during Sleep\n              mode"
              },
              "TIM15SMEN": {
                "bit": 16,
                "description": "TIM15 timer clock enable during Sleep\n              mode"
              },
              "TIM16SMEN": {
                "bit": 17,
                "description": "TIM16 timer clock enable during Sleep\n              mode"
              },
              "TIM17SMEN": {
                "bit": 18,
                "description": "TIM16 timer clock enable during Sleep\n              mode"
              },
              "ADCSMEN": {
                "bit": 20,
                "description": "ADC clock enable during Sleep\n              mode"
              }
            },
            "CCIPR": {
              "USART1SEL": {
                "bit": 0,
                "description": "USART1 clock source\n              selection",
                "width": 2
              },
              "USART2SEL": {
                "bit": 2,
                "description": "USART2 clock source\n              selection",
                "width": 2
              },
              "USART3SEL": {
                "bit": 4,
                "description": "USART3 clock source\n              selection",
                "width": 2
              },
              "I2C1SEL": {
                "bit": 12,
                "description": "I2C1 clock source\n              selection",
                "width": 2
              },
              "I2S2SEL": {
                "bit": 14,
                "description": "I2S1 clock source\n              selection",
                "width": 2
              },
              "TIM1SEL": {
                "bit": 22,
                "description": "TIM1 clock source\n              selection"
              },
              "TIM15SEL": {
                "bit": 24,
                "description": "TIM15 clock source\n              selection"
              },
              "ADCSEL": {
                "bit": 30,
                "description": "ADCs clock source\n              selection",
                "width": 2
              }
            },
            "CCIPR2": {
              "I2S1SEL": {
                "bit": 0,
                "description": "2S1SEL",
                "width": 2
              },
              "I2S2SEL": {
                "bit": 2,
                "description": "I2S2SEL",
                "width": 2
              },
              "USBSEL": {
                "bit": 12,
                "description": "USBSEL",
                "width": 2
              }
            },
            "BDCR": {
              "LSEON": {
                "bit": 0,
                "description": "LSE oscillator enable"
              },
              "LSERDY": {
                "bit": 1,
                "description": "LSE oscillator ready"
              },
              "LSEBYP": {
                "bit": 2,
                "description": "LSE oscillator bypass"
              },
              "LSEDRV": {
                "bit": 3,
                "description": "LSE oscillator drive\n              capability",
                "width": 2
              },
              "LSECSSON": {
                "bit": 5,
                "description": "CSS on LSE enable"
              },
              "LSECSSD": {
                "bit": 6,
                "description": "CSS on LSE failure\n              Detection"
              },
              "RTCSEL": {
                "bit": 8,
                "description": "RTC clock source selection",
                "width": 2
              },
              "RTCEN": {
                "bit": 15,
                "description": "RTC clock enable"
              },
              "BDRST": {
                "bit": 16,
                "description": "RTC domain software reset"
              },
              "LSCOEN": {
                "bit": 24,
                "description": "Low-speed clock output (LSCO)\n              enable"
              },
              "LSCOSEL": {
                "bit": 25,
                "description": "Low-speed clock output\n              selection"
              }
            },
            "CSR": {
              "LSION": {
                "bit": 0,
                "description": "LSI oscillator enable"
              },
              "LSIRDY": {
                "bit": 1,
                "description": "LSI oscillator ready"
              },
              "RMVF": {
                "bit": 23,
                "description": "Remove reset flags"
              },
              "OBLRSTF": {
                "bit": 25,
                "description": "Option byte loader reset\n              flag"
              },
              "PINRSTF": {
                "bit": 26,
                "description": "Pin reset flag"
              },
              "PWRRSTF": {
                "bit": 27,
                "description": "BOR or POR/PDR flag"
              },
              "SFTRSTF": {
                "bit": 28,
                "description": "Software reset flag"
              },
              "IWDGRSTF": {
                "bit": 29,
                "description": "Independent window watchdog reset\n              flag"
              },
              "WWDGRSTF": {
                "bit": 30,
                "description": "Window watchdog reset flag"
              },
              "LPWRRSTF": {
                "bit": 31,
                "description": "Low-power reset flag"
              }
            }
          }
        },
        "RTC": {
          "instances": [
            {
              "name": "RTC",
              "base": "0x40002800",
              "irq": 2
            }
          ],
          "registers": {
            "RTC_TR": {
              "offset": "0x00",
              "size": 32,
              "description": "RTC time register"
            },
            "RTC_DR": {
              "offset": "0x04",
              "size": 32,
              "description": "RTC date register"
            },
            "RTC_SSR": {
              "offset": "0x08",
              "size": 32,
              "description": "RTC sub second register"
            },
            "RTC_ICSR": {
              "offset": "0x0C",
              "size": 32,
              "description": "RTC initialization control and status register"
            },
            "RTC_PRER": {
              "offset": "0x10",
              "size": 32,
              "description": "RTC prescaler register"
            },
            "RTC_WUTR": {
              "offset": "0x14",
              "size": 32,
              "description": "RTC wakeup timer register"
            },
            "RTC_CR": {
              "offset": "0x18",
              "size": 32,
              "description": "control register"
            },
            "RTC_WPR": {
              "offset": "0x24",
              "size": 32,
              "description": "write protection register"
            },
            "RTC_CALR": {
              "offset": "0x28",
              "size": 32,
              "description": "RTC calibration register"
            },
            "RTC_SHIFTR": {
              "offset": "0x2C",
              "size": 32,
              "description": "RTC shift control register"
            },
            "RTC_TSTR": {
              "offset": "0x30",
              "size": 32,
              "description": "RTC timestamp time register"
            },
            "RTC_TSDR": {
              "offset": "0x34",
              "size": 32,
              "description": "RTC timestamp date register"
            },
            "RTC_TSSSR": {
              "offset": "0x38",
              "size": 32,
              "description": "RTC timestamp sub second register"
            },
            "RTC_ALRMAR": {
              "offset": "0x40",
              "size": 32,
              "description": "RTC alarm A register"
            },
            "RTC_ALRMASSR": {
              "offset": "0x44",
              "size": 32,
              "description": "RTC alarm A sub second register"
            },
            "RTC_ALRMBR": {
              "offset": "0x48",
              "size": 32,
              "description": "RTC alarm B register"
            },
            "RTC_ALRMBSSR": {
              "offset": "0x4C",
              "size": 32,
              "description": "RTC alarm B sub second register"
            },
            "RTC_SR": {
              "offset": "0x50",
              "size": 32,
              "description": "RTC status register"
            },
            "RTC_MISR": {
              "offset": "0x54",
              "size": 32,
              "description": "RTC masked interrupt status register"
            },
            "RTC_SCR": {
              "offset": "0x5C",
              "size": 32,
              "description": "RTC status clear register"
            }
          },
          "bits": {
            "RTC_TR": {
              "SU": {
                "bit": 0,
                "description": "Second units in BCD format",
                "width": 4
              },
              "ST": {
                "bit": 4,
                "description": "Second tens in BCD format",
                "width": 3
              },
              "MNU": {
                "bit": 8,
                "description": "Minute units in BCD format",
                "width": 4
              },
              "MNT": {
                "bit": 12,
                "description": "Minute tens in BCD format",
                "width": 3
              },
              "HU": {
                "bit": 16,
                "description": "Hour units in BCD format",
                "width": 4
              },
              "HT": {
                "bit": 20,
                "description": "Hour tens in BCD format",
                "width": 2
              },
              "PM": {
                "bit": 22,
                "description": "AM/PM notation"
              }
            },
            "RTC_DR": {
              "DU": {
                "bit": 0,
                "description": "Date units in BCD format",
                "width": 4
              },
              "DT": {
                "bit": 4,
                "description": "Date tens in BCD format",
                "width": 2
              },
              "MU": {
                "bit": 8,
                "description": "Month units in BCD format",
                "width": 4
              },
              "MT": {
                "bit": 12,
                "description": "Month tens in BCD format"
              },
              "WDU": {
                "bit": 13,
                "description": "Week day units\n...",
                "width": 3
              },
              "YU": {
                "bit": 16,
                "description": "Year units in BCD format",
                "width": 4
              },
              "YT": {
                "bit": 20,
                "description": "Year tens in BCD format",
                "width": 4
              }
            },
            "RTC_SSR": {
              "SS": {
                "bit": 0,
                "description": "Sub second value\nSS[15:0] is the value in the synchronous prescaler counter. The fraction of a second is given by the formula below:\nSecond fraction = (PREDIV_S - SS) / (PREDIV_S + 1)\nNote: SS can be larger than PREDIV_S only after a shift operation. In that case, the correct time/date is one second less than as indicated by RTC_TR/RTC_DR.",
                "width": 16
              }
            },
            "RTC_ICSR": {
              "ALRAWF": {
                "bit": 0,
                "description": "Alarm A write flag\nThis bit is set by hardware when alarm A values can be changed, after the ALRAE bit has been set to 0 in RTC_CR.\nIt is cleared by hardware in initialization mode."
              },
              "ALRBWF": {
                "bit": 1,
                "description": "Alarm B write flag\nThis bit is set by hardware when alarm B values can be changed, after the ALRBE bit has been set to 0 in RTC_CR.\nIt is cleared by hardware in initialization mode."
              },
              "WUTWF": {
                "bit": 2,
                "description": "Wakeup timer write flag\nThis bit is set by hardware when WUT value can be changed, after the WUTE bit has been set to 0 in RTC_CR.\nIt is cleared by hardware in initialization mode."
              },
              "SHPF": {
                "bit": 3,
                "description": "Shift operation pending\nThis flag is set by hardware as soon as a shift operation is initiated by a write to the RTC_SHIFTR register. It is cleared by hardware when the corresponding shift operation has been executed. Writing to the SHPF bit has no effect."
              },
              "INITS": {
                "bit": 4,
                "description": "Initialization status flag\nThis bit is set by hardware when the calendar year field is different from 0 (Backup domain reset state)."
              },
              "RSF": {
                "bit": 5,
                "description": "Registers synchronization flag\nThis bit is set by hardware each time the calendar registers are copied into the shadow registers (RTC_SSR, RTC_TR and RTC_DR). This bit is cleared by hardware in initialization mode, while a shift operation is pending (SHPF = 1), or when in bypass shadow register mode (BYPSHAD = 1). This bit can also be cleared by software.\nIt is cleared either by software or by hardware in initialization mode."
              },
              "INITF": {
                "bit": 6,
                "description": "Initialization flag\nWhen this bit is set to 1, the RTC is in initialization state, and the time, date and prescaler registers can be updated."
              },
              "INIT": {
                "bit": 7,
                "description": "Initialization mode"
              },
              "RECALPF": {
                "bit": 16,
                "description": "Recalibration pending Flag\nThe RECALPF status flag is automatically set to 1 when software writes to the RTC_CALR register, indicating that the RTC_CALR register is blocked. When the new calibration settings are taken into account, this bit returns to 0. Refer to ."
              }
            },
            "RTC_PRER": {
              "PREDIV_S": {
                "bit": 0,
                "description": "Synchronous prescaler factor\nThis is the synchronous division factor:\nck_spre frequency = ck_apre frequency/(PREDIV_S+1)",
                "width": 15
              },
              "PREDIV_A": {
                "bit": 16,
                "description": "Asynchronous prescaler factor\nThis is the asynchronous division factor:\nck_apre frequency = RTCCLK frequency/(PREDIV_A+1)",
                "width": 7
              }
            },
            "RTC_WUTR": {
              "WUT": {
                "bit": 0,
                "description": "Wakeup auto-reload value bits\nWhen the wakeup timer is enabled (WUTE set to 1), the WUTF flag is set every (WUT[15:0]+1) ck_wut cycles. The ck_wut period is selected through WUCKSEL[2:0] bits of the RTC_CR register.\nWhen WUCKSEL[2] = 1, the wakeup timer becomes 17-bits and WUCKSEL[1] effectively becomes WUT[16] the most-significant bit to be reloaded into the timer.\nThe first assertion of WUTF occurs between WUT and (WUT + 1) ck_wut cycles after WUTE is set. Setting WUT[15:0] to 0x0000 with WUCKSEL[2:0] = 011 (RTCCLK/2) is forbidden.",
                "width": 16
              }
            },
            "RTC_CR": {
              "WUCKSEL": {
                "bit": 0,
                "description": "ck_wut wakeup clock selection\n10x: ck_spre (usually 1Hz) clock is selected\n11x: ck_spre (usually 1Hz) clock is selected and 216is added to the WUT counter value",
                "width": 3
              },
              "TSEDGE": {
                "bit": 3,
                "description": "Timestamp event active edge\nTSE must be reset when TSEDGE is changed to avoid unwanted TSF setting."
              },
              "REFCKON": {
                "bit": 4,
                "description": "RTC_REFIN reference clock detection enable (50 or 60Hz)\nNote: PREDIV_S must be 0x00FF."
              },
              "BYPSHAD": {
                "bit": 5,
                "description": "Bypass the shadow registers\nNote: If the frequency of the APB1 clock is less than seven times the frequency of RTCCLK, BYPSHAD must be set to 1."
              },
              "FMT": {
                "bit": 6,
                "description": "Hour format"
              },
              "ALRAE": {
                "bit": 8,
                "description": "Alarm A enable"
              },
              "ALRBE": {
                "bit": 9,
                "description": "Alarm B enable"
              },
              "WUTE": {
                "bit": 10,
                "description": "Wakeup timer enable\nNote: When the wakeup timer is disabled, wait for WUTWF=1 before enabling it again."
              },
              "TSE": {
                "bit": 11,
                "description": "timestamp enable"
              },
              "ALRAIE": {
                "bit": 12,
                "description": "Alarm A interrupt enable"
              },
              "ALRBIE": {
                "bit": 13,
                "description": "Alarm B interrupt enable"
              },
              "WUTIE": {
                "bit": 14,
                "description": "Wakeup timer interrupt enable"
              },
              "TSIE": {
                "bit": 15,
                "description": "Timestamp interrupt enable"
              },
              "ADD1H": {
                "bit": 16,
                "description": "Add 1 hour (summer time change)\nWhen this bit is set outside initialization mode, 1 hour is added to the calendar time. This bit is always read as 0."
              },
              "SUB1H": {
                "bit": 17,
                "description": "Subtract 1 hour (winter time change)\nWhen this bit is set outside initialization mode, 1 hour is subtracted to the calendar time if the current hour is not 0. This bit is always read as 0.\nSetting this bit has no effect when current hour is 0."
              },
              "BKP": {
                "bit": 18,
                "description": "Backup\nThis bit can be written by the user to memorize whether the daylight saving time change has been performed or not."
              },
              "COSEL": {
                "bit": 19,
                "description": "Calibration output selection\nWhen COE = 1, this bit selects which signal is output on CALIB.\nThese frequencies are valid for RTCCLK at 32.768kHz and prescalers at their default values (PREDIV_A = 127 and PREDIV_S = 255). Refer to ."
              },
              "POL": {
                "bit": 20,
                "description": "Output polarity\nThis bit is used to configure the polarity of TAMPALRM output."
              },
              "OSEL": {
                "bit": 21,
                "description": "Output selection\nThese bits are used to select the flag to be routed to TAMPALRM output.",
                "width": 2
              },
              "COE": {
                "bit": 23,
                "description": "Calibration output enable\nThis bit enables the CALIB output"
              },
              "ITSE": {
                "bit": 24,
                "description": "timestamp on internal event enable"
              },
              "TAMPTS": {
                "bit": 25,
                "description": "Activate timestamp on tamper detection event\nTAMPTS is valid even if TSE = 0 in the RTC_CR register. Timestamp flag is set after the tamper flags, therefore if TAMPTS and TSIE are set, it is recommended to disable the tamper interrupts in order to avoid servicing 2 interrupts."
              },
              "TAMPOE": {
                "bit": 26,
                "description": "Tamper detection output enable on TAMPALRM"
              },
              "TAMPALRM_PU": {
                "bit": 29,
                "description": "TAMPALRM pull-up enable"
              },
              "TAMPALRM_TYPE": {
                "bit": 30,
                "description": "TAMPALRM output type"
              },
              "OUT2EN": {
                "bit": 31,
                "description": "RTC_OUT2 output enable\nSetting this bit allows to remap the RTC outputs on RTC_OUT2 as follows:\nOUT2EN = 0: RTC output 2 disable\nIf OSEL \u00e2\u0089\u00a0 00 or TAMPOE = 1: TAMPALRM is output on RTC_OUT1\nIf OSEL = 00 and TAMPOE = 0 and COE = 1: CALIB is output on RTC_OUT1\nOUT2EN = 1: RTC output 2 enable\nIf (OSEL \u00e2\u0089\u00a0 00 or TAMPOE = 1) and COE = 0: TAMPALRM is output on RTC_OUT2\nIf OSEL = 00 and TAMPOE = 0 and COE = 1: CALIB is output on RTC_OUT2\nIf (OSEL\u00e2\u0089\u00a0 00 or TAMPOE = 1) and COE = 1: CALIB is output on RTC_OUT2 and TAMPALRM is output on RTC_OUT1."
              }
            },
            "RTC_WPR": {
              "KEY": {
                "bit": 0,
                "description": "Write protection key\nThis byte is written by software.\nReading this byte always returns 0x00.\nRefer to  for a description of how to unlock RTC register write protection.",
                "width": 8
              }
            },
            "RTC_CALR": {
              "CALM": {
                "bit": 0,
                "description": "Calibration minus\nThe frequency of the calendar is reduced by masking CALM out of 220 RTCCLK pulses (32 seconds if the input frequency is 32768Hz). This decreases the frequency of the calendar with a resolution of 0.9537ppm.\nTo increase the frequency of the calendar, this feature should be used in conjunction with CALP. See .",
                "width": 9
              },
              "CALW16": {
                "bit": 13,
                "description": "Use a 16-second calibration cycle period\nWhen CALW16 is set to 1, the 16-second calibration cycle period is selected. This bit must not be set to 1 if CALW8 = 1.\nNote: CALM[0] is stuck at 0 when CALW16 = 1. Refer to calibration."
              },
              "CALW8": {
                "bit": 14,
                "description": "Use an 8-second calibration cycle period\nWhen CALW8 is set to 1, the 8-second calibration cycle period is selected.\nNote: CALM[1:0] are stuck at 00 when CALW8 = 1. Refer to digital calibration."
              },
              "CALP": {
                "bit": 15,
                "description": "Increase frequency of RTC by 488.5ppm\nThis feature is intended to be used in conjunction with CALM, which lowers the frequency of the calendar with a fine resolution. if the input frequency is 32768Hz, the number of RTCCLK pulses added during a 32-second window is calculated as follows: (512 \u00c3\u0097 CALP) - CALM.\nRefer to ."
              }
            },
            "RTC_SHIFTR": {
              "SUBFS": {
                "bit": 0,
                "description": "Subtract a fraction of a second\nThese bits are write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR).\nThe value which is written to SUBFS is added to the synchronous prescaler counter. Since this counter counts down, this operation effectively subtracts from (delays) the clock by:\nDelay (seconds) = SUBFS / (PREDIV_S + 1)\nA fraction of a second can effectively be added to the clock (advancing the clock) when the ADD1S function is used in conjunction with SUBFS, effectively advancing the clock by:\nAdvance (seconds) = (1 - (SUBFS / (PREDIV_S + 1))).\nNote: Writing to SUBFS causes RSF to be cleared. Software can then wait until RSF = 1 to be sure that the shadow registers have been updated with the shifted time.",
                "width": 15
              },
              "ADD1S": {
                "bit": 31,
                "description": "Add one second\nThis bit is write only and is always read as zero. Writing to this bit has no effect when a shift operation is pending (when SHPF = 1, in RTC_ICSR).\nThis function is intended to be used with SUBFS (see description below) in order to effectively add a fraction of a second to the clock in an atomic operation."
              }
            },
            "RTC_TSTR": {
              "SU": {
                "bit": 0,
                "description": "Second units in BCD format.",
                "width": 4
              },
              "ST": {
                "bit": 4,
                "description": "Second tens in BCD format.",
                "width": 3
              },
              "MNU": {
                "bit": 8,
                "description": "Minute units in BCD format.",
                "width": 4
              },
              "MNT": {
                "bit": 12,
                "description": "Minute tens in BCD format.",
                "width": 3
              },
              "HU": {
                "bit": 16,
                "description": "Hour units in BCD format.",
                "width": 4
              },
              "HT": {
                "bit": 20,
                "description": "Hour tens in BCD format.",
                "width": 2
              },
              "PM": {
                "bit": 22,
                "description": "AM/PM notation"
              }
            },
            "RTC_TSDR": {
              "DU": {
                "bit": 0,
                "description": "Date units in BCD format",
                "width": 4
              },
              "DT": {
                "bit": 4,
                "description": "Date tens in BCD format",
                "width": 2
              },
              "MU": {
                "bit": 8,
                "description": "Month units in BCD format",
                "width": 4
              },
              "MT": {
                "bit": 12,
                "description": "Month tens in BCD format"
              },
              "WDU": {
                "bit": 13,
                "description": "Week day units",
                "width": 3
              }
            },
            "RTC_TSSSR": {
              "SS": {
                "bit": 0,
                "description": "Sub second value\nSS[15:0] is the value of the synchronous prescaler counter when the timestamp event occurred.",
                "width": 16
              }
            },
            "RTC_ALRMAR": {
              "SU": {
                "bit": 0,
                "description": "Second units in BCD format.",
                "width": 4
              },
              "ST": {
                "bit": 4,
                "description": "Second tens in BCD format.",
                "width": 3
              },
              "MSK1": {
                "bit": 7,
                "description": "Alarm A seconds mask"
              },
              "MNU": {
                "bit": 8,
                "description": "Minute units in BCD format",
                "width": 4
              },
              "MNT": {
                "bit": 12,
                "description": "Minute tens in BCD format",
                "width": 3
              },
              "MSK2": {
                "bit": 15,
                "description": "Alarm A minutes mask"
              },
              "HU": {
                "bit": 16,
                "description": "Hour units in BCD format",
                "width": 4
              },
              "HT": {
                "bit": 20,
                "description": "Hour tens in BCD format",
                "width": 2
              },
              "PM": {
                "bit": 22,
                "description": "AM/PM notation"
              },
              "MSK3": {
                "bit": 23,
                "description": "Alarm A hours mask"
              },
              "DU": {
                "bit": 24,
                "description": "Date units or day in BCD format",
                "width": 4
              },
              "DT": {
                "bit": 28,
                "description": "Date tens in BCD format",
                "width": 2
              },
              "WDSEL": {
                "bit": 30,
                "description": "Week day selection"
              },
              "MSK4": {
                "bit": 31,
                "description": "Alarm A date mask"
              }
            },
            "RTC_ALRMASSR": {
              "SS": {
                "bit": 0,
                "description": "Sub seconds value\nThis value is compared with the contents of the synchronous prescaler counter to determine if alarm A is to be activated. Only bits 0 up MASKSS-1 are compared.",
                "width": 15
              },
              "MASKSS": {
                "bit": 24,
                "description": "Mask the most-significant bits starting at this bit\n2:\tSS[14:2] are don't care in alarm A comparison. Only SS[1:0] are compared.\n3:\tSS[14:3] are don't care in alarm A comparison. Only SS[2:0] are compared.\n...\n12:\tSS[14:12] are don't care in alarm A comparison. SS[11:0] are compared.\n13:\tSS[14:13] are don't care in alarm A comparison. SS[12:0] are compared.\n14:\tSS[14] is don't care in alarm A comparison. SS[13:0] are compared.\n15:\tAll 15 SS bits are compared and must match to activate alarm.\nThe overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation.\nNote: The overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation.",
                "width": 4
              }
            },
            "RTC_ALRMBR": {
              "SU": {
                "bit": 0,
                "description": "Second units in BCD format",
                "width": 4
              },
              "ST": {
                "bit": 4,
                "description": "Second tens in BCD format",
                "width": 3
              },
              "MSK1": {
                "bit": 7,
                "description": "Alarm B seconds mask"
              },
              "MNU": {
                "bit": 8,
                "description": "Minute units in BCD format",
                "width": 4
              },
              "MNT": {
                "bit": 12,
                "description": "Minute tens in BCD format",
                "width": 3
              },
              "MSK2": {
                "bit": 15,
                "description": "Alarm B minutes mask"
              },
              "HU": {
                "bit": 16,
                "description": "Hour units in BCD format",
                "width": 4
              },
              "HT": {
                "bit": 20,
                "description": "Hour tens in BCD format",
                "width": 2
              },
              "PM": {
                "bit": 22,
                "description": "AM/PM notation"
              },
              "MSK3": {
                "bit": 23,
                "description": "Alarm B hours mask"
              },
              "DU": {
                "bit": 24,
                "description": "Date units or day in BCD format",
                "width": 4
              },
              "DT": {
                "bit": 28,
                "description": "Date tens in BCD format",
                "width": 2
              },
              "WDSEL": {
                "bit": 30,
                "description": "Week day selection"
              },
              "MSK4": {
                "bit": 31,
                "description": "Alarm B date mask"
              }
            },
            "RTC_ALRMBSSR": {
              "SS": {
                "bit": 0,
                "description": "Sub seconds value\nThis value is compared with the contents of the synchronous prescaler counter to determine if alarm B is to be activated. Only bits 0 up to MASKSS-1 are compared.",
                "width": 15
              },
              "MASKSS": {
                "bit": 24,
                "description": "Mask the most-significant bits starting at this bit\n...\nThe overflow bits of the synchronous counter (bits 15) is never compared. This bit can be different from 0 only after a shift operation.",
                "width": 4
              }
            },
            "RTC_SR": {
              "ALRAF": {
                "bit": 0,
                "description": "Alarm A flag\nThis flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the alarm A register (RTC_ALRMAR)."
              },
              "ALRBF": {
                "bit": 1,
                "description": "Alarm B flag\nThis flag is set by hardware when the time/date registers (RTC_TR and RTC_DR) match the alarm B register (RTC_ALRMBR)."
              },
              "WUTF": {
                "bit": 2,
                "description": "Wakeup timer flag\nThis flag is set by hardware when the wakeup auto-reload counter reaches 0.\nThis flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again."
              },
              "TSF": {
                "bit": 3,
                "description": "Timestamp flag\nThis flag is set by hardware when a timestamp event occurs.\nIf ITSF flag is set, TSF must be cleared together with ITSF."
              },
              "TSOVF": {
                "bit": 4,
                "description": "Timestamp overflow flag\nThis flag is set by hardware when a timestamp event occurs while TSF is already set.\nIt is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."
              },
              "ITSF": {
                "bit": 5,
                "description": "Internal timestamp flag\nThis flag is set by hardware when a timestamp on the internal event occurs."
              }
            },
            "RTC_MISR": {
              "ALRAMF": {
                "bit": 0,
                "description": "Alarm A masked flag\nThis flag is set by hardware when the alarm A interrupt occurs."
              },
              "ALRBMF": {
                "bit": 1,
                "description": "Alarm B masked flag\nThis flag is set by hardware when the alarm B interrupt occurs."
              },
              "WUTMF": {
                "bit": 2,
                "description": "Wakeup timer masked flag\nThis flag is set by hardware when the wakeup timer interrupt occurs.\nThis flag must be cleared by software at least 1.5 RTCCLK periods before WUTF is set to 1 again."
              },
              "TSMF": {
                "bit": 3,
                "description": "Timestamp masked flag\nThis flag is set by hardware when a timestamp interrupt occurs.\nIf ITSF flag is set, TSF must be cleared together with ITSF."
              },
              "TSOVMF": {
                "bit": 4,
                "description": "Timestamp overflow masked flag\nThis flag is set by hardware when a timestamp interrupt occurs while TSMF is already set.\nIt is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."
              },
              "ITSMF": {
                "bit": 5,
                "description": "Internal timestamp masked flag\nThis flag is set by hardware when a timestamp on the internal event occurs and timestampinterrupt is raised."
              }
            },
            "RTC_SCR": {
              "CALRAF": {
                "bit": 0,
                "description": "Clear alarm A flag\nWriting 1 in this bit clears the ALRAF bit in the RTC_SR register."
              },
              "CALRBF": {
                "bit": 1,
                "description": "Clear alarm B flag\nWriting 1 in this bit clears the ALRBF bit in the RTC_SR register."
              },
              "CWUTF": {
                "bit": 2,
                "description": "Clear wakeup timer flag\nWriting 1 in this bit clears the WUTF bit in the RTC_SR register."
              },
              "CTSF": {
                "bit": 3,
                "description": "Clear timestamp flag\nWriting 1 in this bit clears the TSOVF bit in the RTC_SR register.\nIf ITSF flag is set, TSF must be cleared together with ITSF by setting CRSF and CITSF."
              },
              "CTSOVF": {
                "bit": 4,
                "description": "Clear timestamp overflow flag\nWriting 1 in this bit clears the TSOVF bit in the RTC_SR register.\nIt is recommended to check and then clear TSOVF only after clearing the TSF bit. Otherwise, an overflow might not be noticed if a timestamp event occurs immediately before the TSF bit is cleared."
              },
              "CITSF": {
                "bit": 5,
                "description": "Clear internal timestamp flag\nWriting 1 in this bit clears the ITSF bit in the RTC_SR register."
              }
            }
          }
        },
        "SPI": {
          "instances": [
            {
              "name": "SPI1",
              "base": "0x40013000",
              "irq": 25
            },
            {
              "name": "SPI2",
              "base": "0x40003800",
              "irq": 26
            },
            {
              "name": "SPI3",
              "base": "0x40003C00"
            }
          ],
          "registers": {
            "SPI_CR1": {
              "offset": "0x00",
              "size": 16,
              "description": "Clock phase\nNote: This bit should not be changed when communication is ongoing.\nThis bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode."
            },
            "SPI_CR2": {
              "offset": "0x04",
              "size": 16,
              "description": "Rx buffer DMA enable\nWhen this bit is set, a DMA request is generated whenever the RXNE flag is set."
            },
            "SPI_SR": {
              "offset": "0x08",
              "size": 16,
              "description": "Receive buffer not empty"
            },
            "SPI_DR": {
              "offset": "0x0C",
              "size": 16,
              "description": "Data register\nData received or to be transmitted\nThe data register serves as an interface between the Rx and Tx FIFOs. When the data register is read, RxFIFO is accessed while the write to data register accesses TxFIFO (See ).\nNote: Data is always right-aligned. Unused bits are ignored when writing to the register, and read as zero when the register is read. The Rx threshold setting must always correspond with the read access currently used."
            },
            "SPI_CRCPR": {
              "offset": "0x10",
              "size": 16,
              "description": "CRC polynomial register\nThis register contains the polynomial for the CRC calculation.\nThe CRC polynomial (0x0007) is the reset value of this register. Another polynomial can be configured as required."
            },
            "SPI_RXCRCR": {
              "offset": "0x14",
              "size": 16,
              "description": "Rx CRC register\nWhen CRC calculation is enabled, the RXCRC[15:0] bits contain the computed CRC value of the subsequently received bytes. This register is reset when the CRCEN bit in SPIx_CR1 register is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register.\nOnly the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard.\nThe entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard.\nNote: A read to this register when the BSY Flag is set could return an incorrect value.\nThese bits are not used in I2S mode."
            },
            "SPI_TXCRCR": {
              "offset": "0x18",
              "size": 16,
              "description": "Tx CRC register\nWhen CRC calculation is enabled, the TXCRC[7:0] bits contain the computed CRC value of the subsequently transmitted bytes. This register is reset when the CRCEN bit of SPIx_CR1 is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register.\nOnly the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard.\nThe entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard.\nNote: A read to this register when the BSY flag is set could return an incorrect value.\nThese bits are not used in I2S mode."
            },
            "SPI_I2SCFGR": {
              "offset": "0x1C",
              "size": 16,
              "description": "Channel length (number of bits per audio channel)\nThe bit write operation has a meaning only if DATLEN = 00 otherwise the channel length is fixed to 32-bit by hardware whatever the value filled in.\nNote: For correct operation, this bit should be configured when the I2S is disabled.\nIt is not used in SPI mode."
            },
            "SPI_I2SPR": {
              "offset": "0x20",
              "size": 16,
              "description": "I2S linear prescaler\nI2SDIV [7:0] = 0 or I2SDIV [7:0] = 1 are forbidden values.\nRefer to .\nNote: These bits should be configured when the I2S is disabled. They are used only when the I2S is in master mode.\nThey are not used in SPI mode."
            }
          },
          "bits": {
            "SPI_CR1": {
              "CPHA": {
                "bit": 0,
                "description": "Clock phase\nNote: This bit should not be changed when communication is ongoing.\nThis bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode."
              },
              "CPOL": {
                "bit": 1,
                "description": "Clock polarity\nNote: This bit should not be changed when communication is ongoing.\nThis bit is not used in I2S mode and SPI TI mode except the case when CRC is applied at TI mode."
              },
              "MSTR": {
                "bit": 2,
                "description": "Master selection\nNote: This bit should not be changed when communication is ongoing.\nThis bit is not used in I2S mode."
              },
              "BR": {
                "bit": 3,
                "description": "Baud rate control\nNote: These bits should not be changed when communication is ongoing.\nThese bits are not used in I2S mode.",
                "width": 3
              },
              "SPE": {
                "bit": 6,
                "description": "SPI enable\nNote: When disabling the SPI, follow the procedure described in SPI on page1020.\nThis bit is not used in I2S mode."
              },
              "LSBFIRST": {
                "bit": 7,
                "description": "Frame format\nNote: 1. This bit should not be changed when communication is ongoing.\n2. This bit is not used in I2S mode and SPI TI mode."
              },
              "SSI": {
                "bit": 8,
                "description": "Internal slave select\nThis bit has an effect only when the SSM bit is set. The value of this bit is forced onto the NSS pin and the I/O value of the NSS pin is ignored.\nNote: This bit is not used in I2S mode and SPI TI mode."
              },
              "SSM": {
                "bit": 9,
                "description": "Software slave management\nWhen the SSM bit is set, the NSS pin input is replaced with the value from the SSI bit.\nNote: This bit is not used in I2S mode and SPI TI mode."
              },
              "RXONLY": {
                "bit": 10,
                "description": "Receive only mode enabled.\nThis bit enables simplex communication using a single unidirectional line to receive data exclusively. Keep BIDIMODE bit clear when receive only mode is active.This bit is also useful in a multislave system in which this particular slave is not accessed, the output from the accessed slave is not corrupted.\nNote: This bit is not used in I2S mode."
              },
              "CRCL": {
                "bit": 11,
                "description": "CRC length\nThis bit is set and cleared by software to select the CRC length.\nNote: This bit should be written only when SPI is disabled (SPE = '0\u00e2\u0080\u0099) for correct operation.\nThis bit is not used in I2S mode."
              },
              "CRCNEXT": {
                "bit": 12,
                "description": "Transmit CRC next\nNote: This bit has to be written as soon as the last data is written in the SPIx_DR register.\nThis bit is not used in I2S mode."
              },
              "CRCEN": {
                "bit": 13,
                "description": "Hardware CRC calculation enable\nNote: This bit should be written only when SPI is disabled (SPE = '0\u00e2\u0080\u0099) for correct operation.\nThis bit is not used in I2S mode."
              },
              "BIDIOE": {
                "bit": 14,
                "description": "Output enable in bidirectional mode\nThis bit combined with the BIDIMODE bit selects the direction of transfer in bidirectional mode.\nNote: In master mode, the MOSI pin is used and in slave mode, the MISO pin is used.\nThis bit is not used in I2S mode."
              },
              "BIDIMODE": {
                "bit": 15,
                "description": "Bidirectional data mode enable.\nThis bit enables half-duplex communication using common single bidirectional data line. Keep RXONLY bit clear when bidirectional mode is active.\nNote: This bit is not used in I2S mode."
              }
            },
            "SPI_CR2": {
              "RXDMAEN": {
                "bit": 0,
                "description": "Rx buffer DMA enable\nWhen this bit is set, a DMA request is generated whenever the RXNE flag is set."
              },
              "TXDMAEN": {
                "bit": 1,
                "description": "Tx buffer DMA enable\nWhen this bit is set, a DMA request is generated whenever the TXE flag is set."
              },
              "SSOE": {
                "bit": 2,
                "description": "SS output enable\nNote: This bit is not used in I2S mode and SPI TI mode."
              },
              "NSSP": {
                "bit": 3,
                "description": "NSS pulse management\nThis bit is used in master mode only. it allows the SPI to generate an NSS pulse between two consecutive data when doing continuous transfers. In the case of a single data transfer, it forces the NSS pin high level after the transfer.\nIt has no meaning if CPHA = \u00e2\u0080\u00991\u00e2\u0080\u0099, or FRF = \u00e2\u0080\u00991\u00e2\u0080\u0099.\nNote: 1. This bit must be written only when the SPI is disabled (SPE=0).\n2. This bit is not used in I2S mode and SPI TI mode."
              },
              "FRF": {
                "bit": 4,
                "description": "Frame format\n1 SPI TI mode\nNote: This bit must be written only when the SPI is disabled (SPE=0).\nThis bit is not used in I2S mode."
              },
              "ERRIE": {
                "bit": 5,
                "description": "Error interrupt enable\nThis bit controls the generation of an interrupt when an error condition occurs (CRCERR, OVR, MODF in SPI mode, FRE at TI mode and UDR, OVR, and FRE in I2S mode)."
              },
              "RXNEIE": {
                "bit": 6,
                "description": "RX buffer not empty interrupt enable"
              },
              "TXEIE": {
                "bit": 7,
                "description": "Tx buffer empty interrupt enable"
              },
              "DS": {
                "bit": 8,
                "description": "Data size\nThese bits configure the data length for SPI transfers.\nIf software attempts to write one of the \u00e2\u0080\u009cNot used\u00e2\u0080\u009d values, they are forced to the value \u00e2\u0080\u009c0111\u00e2\u0080\u009d\n(8-bit)\nNote: These bits are not used in I2S mode.",
                "width": 4
              },
              "FRXTH": {
                "bit": 12,
                "description": "FIFO reception threshold\nThis bit is used to set the threshold of the RXFIFO that triggers an RXNE event\nNote: This bit is not used in I2S mode."
              },
              "LDMA_RX": {
                "bit": 13,
                "description": "Last DMA transfer for reception\nThis bit is used in data packing mode, to define if the total number of data to receive by DMA is odd or even. It has significance only if the RXDMAEN bit in the SPIx_CR2 register is set and if packing mode is used (data length =< 8-bit and write access to SPIx_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPIx_CR1 register).\nNote: Refer to  if the CRCEN bit is set.\nThis bit is not used in I\u00c2\u00b2S mode."
              },
              "LDMA_TX": {
                "bit": 14,
                "description": "Last DMA transfer for transmission\nThis bit is used in data packing mode, to define if the total number of data to transmit by DMA is odd or even. It has significance only if the TXDMAEN bit in the SPIx_CR2 register is set and if packing mode is used (data length =< 8-bit and write access to SPIx_DR is 16-bit wide). It has to be written when the SPI is disabled (SPE = 0 in the SPIx_CR1 register).\nNote: Refer to  if the CRCEN bit is set.\nThis bit is not used in I\u00c2\u00b2S mode."
              }
            },
            "SPI_SR": {
              "RXNE": {
                "bit": 0,
                "description": "Receive buffer not empty"
              },
              "TXE": {
                "bit": 1,
                "description": "Transmit buffer empty"
              },
              "CHSIDE": {
                "bit": 2,
                "description": "Channel side\nNote: This bit is not used in SPI mode. It has no significance in PCM mode."
              },
              "UDR": {
                "bit": 3,
                "description": "Underrun flag\nThis flag is set by hardware and reset by a software sequence. Refer to page1056 for the software sequence.\nNote: This bit is not used in SPI mode."
              },
              "CRCERR": {
                "bit": 4,
                "description": "CRC error flag\nNote: This flag is set by hardware and cleared by software writing 0.\nThis bit is not used in I2S mode."
              },
              "MODF": {
                "bit": 5,
                "description": "Mode fault\nThis flag is set by hardware and reset by a software sequence. Refer to (MODF) on page1030 for the software sequence.\nNote: This bit is not used in I2S mode."
              },
              "OVR": {
                "bit": 6,
                "description": "Overrun flag\nThis flag is set by hardware and reset by a software sequence. Refer to page1056 for the software sequence."
              },
              "BSY": {
                "bit": 7,
                "description": "Busy flag\nThis flag is set and cleared by hardware.\nNote: The BSY flag must be used with caution: refer to  and ."
              },
              "FRE": {
                "bit": 8,
                "description": "Frame format error\nThis flag is used for SPI in TI slave mode and I2S slave mode. Refer to error flags and .\nThis flag is set by hardware and reset when SPIx_SR is read by software."
              },
              "FRLVL": {
                "bit": 9,
                "description": "FIFO reception level\nThese bits are set and cleared by hardware.\nNote: These bits are not used in I\u00c2\u00b2S mode and in SPI receive-only mode while CRC calculation is enabled.",
                "width": 2
              },
              "FTLVL": {
                "bit": 11,
                "description": "FIFO transmission level\nThese bits are set and cleared by hardware.\nNote: This bit is not used in I2S mode.",
                "width": 2
              }
            },
            "SPI_DR": {
              "DR": {
                "bit": 0,
                "description": "Data register\nData received or to be transmitted\nThe data register serves as an interface between the Rx and Tx FIFOs. When the data register is read, RxFIFO is accessed while the write to data register accesses TxFIFO (See ).\nNote: Data is always right-aligned. Unused bits are ignored when writing to the register, and read as zero when the register is read. The Rx threshold setting must always correspond with the read access currently used.",
                "width": 16
              }
            },
            "SPI_CRCPR": {
              "CRCPOLY": {
                "bit": 0,
                "description": "CRC polynomial register\nThis register contains the polynomial for the CRC calculation.\nThe CRC polynomial (0x0007) is the reset value of this register. Another polynomial can be configured as required.",
                "width": 16
              }
            },
            "SPI_RXCRCR": {
              "RXCRC": {
                "bit": 0,
                "description": "Rx CRC register\nWhen CRC calculation is enabled, the RXCRC[15:0] bits contain the computed CRC value of the subsequently received bytes. This register is reset when the CRCEN bit in SPIx_CR1 register is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register.\nOnly the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard.\nThe entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard.\nNote: A read to this register when the BSY Flag is set could return an incorrect value.\nThese bits are not used in I2S mode.",
                "width": 16
              }
            },
            "SPI_TXCRCR": {
              "TXCRC": {
                "bit": 0,
                "description": "Tx CRC register\nWhen CRC calculation is enabled, the TXCRC[7:0] bits contain the computed CRC value of the subsequently transmitted bytes. This register is reset when the CRCEN bit of SPIx_CR1 is written to 1. The CRC is calculated serially using the polynomial programmed in the SPIx_CRCPR register.\nOnly the 8 LSB bits are considered when the CRC frame format is set to be 8-bit length (CRCL bit in the SPIx_CR1 is cleared). CRC calculation is done based on any CRC8 standard.\nThe entire 16-bits of this register are considered when a 16-bit CRC frame format is selected (CRCL bit in the SPIx_CR1 register is set). CRC calculation is done based on any CRC16 standard.\nNote: A read to this register when the BSY flag is set could return an incorrect value.\nThese bits are not used in I2S mode.",
                "width": 16
              }
            },
            "SPI_I2SCFGR": {
              "CHLEN": {
                "bit": 0,
                "description": "Channel length (number of bits per audio channel)\nThe bit write operation has a meaning only if DATLEN = 00 otherwise the channel length is fixed to 32-bit by hardware whatever the value filled in.\nNote: For correct operation, this bit should be configured when the I2S is disabled.\nIt is not used in SPI mode."
              },
              "DATLEN": {
                "bit": 1,
                "description": "Data length to be transferred\nNote: For correct operation, these bits should be configured when the I2S is disabled.\nThey are not used in SPI mode.",
                "width": 2
              },
              "CKPOL": {
                "bit": 3,
                "description": "Inactive state clock polarity\nNote: For correct operation, this bit should be configured when the I2S is disabled.\nIt is not used in SPI mode.\nThe bit CKPOL does not affect the CK edge sensitivity used to receive or transmit the SD and WS signals."
              },
              "I2SSTD": {
                "bit": 4,
                "description": "I2S standard selection\nFor more details on I2S standards, refer to\nNote: For correct operation, these bits should be configured when the I2S is disabled.\nThey are not used in SPI mode.",
                "width": 2
              },
              "PCMSYNC": {
                "bit": 7,
                "description": "PCM frame synchronization\nNote: This bit has a meaning only if I2SSTD = 11 (PCM standard is used).\nIt is not used in SPI mode."
              },
              "I2SCFG": {
                "bit": 8,
                "description": "I2S configuration mode\nNote: These bits should be configured when the I2S is disabled.\nThey are not used in SPI mode.",
                "width": 2
              },
              "I2SE": {
                "bit": 10,
                "description": "I2S enable\nNote: This bit is not used in SPI mode."
              },
              "I2SMOD": {
                "bit": 11,
                "description": "I2S mode selection\nNote: This bit should be configured when the SPI is disabled."
              },
              "ASTRTEN": {
                "bit": 12,
                "description": "Asynchronous start enable.\nWhen the I2S is enabled in slave mode, the hardware starts the transfer when the I2S clock is received and an appropriate transition is detected on the WS signal.\nWhen the I2S is enabled in slave mode, the hardware starts the transfer when the I2S clock is received and the appropriate level is detected on the WS signal.\nNote: The appropriate transition is a falling edge on WS signal when I2S Philips Standard is used, or a rising edge for other standards.\nThe appropriate level is a low level on WS signal when I2S Philips Standard is used, or a high level for other standards.\nPlease refer to  for additional information."
              }
            },
            "SPI_I2SPR": {
              "I2SDIV": {
                "bit": 0,
                "description": "I2S linear prescaler\nI2SDIV [7:0] = 0 or I2SDIV [7:0] = 1 are forbidden values.\nRefer to .\nNote: These bits should be configured when the I2S is disabled. They are used only when the I2S is in master mode.\nThey are not used in SPI mode.",
                "width": 8
              },
              "ODD": {
                "bit": 8,
                "description": "Odd factor for the prescaler\nRefer to .\nNote: This bit should be configured when the I2S is disabled. It is used only when the I2S is in master mode.\nIt is not used in SPI mode."
              },
              "MCKOE": {
                "bit": 9,
                "description": "Master clock output enable\nNote: This bit should be configured when the I2S is disabled. It is used only when the I2S is in master mode.\nIt is not used in SPI mode."
              }
            }
          }
        },
        "SYSCFG": {
          "instances": [
            {
              "name": "SYSCFG",
              "base": "0x40010000"
            }
          ],
          "registers": {
            "CFGR1": {
              "offset": "0x00",
              "size": 32,
              "description": "SYSCFG configuration register\n          1"
            },
            "CFGR2": {
              "offset": "0x18",
              "size": 32,
              "description": "SYSCFG configuration register\n          1"
            },
            "ITLINE0": {
              "offset": "0x80",
              "size": 32,
              "description": "interrupt line 0 status\n          register"
            },
            "ITLINE2": {
              "offset": "0x88",
              "size": 32,
              "description": "interrupt line 2 status\n          register"
            },
            "ITLINE3": {
              "offset": "0x8C",
              "size": 32,
              "description": "interrupt line 3 status\n          register"
            },
            "ITLINE4": {
              "offset": "0x90",
              "size": 32,
              "description": "interrupt line 4 status\n          register"
            },
            "ITLINE5": {
              "offset": "0x94",
              "size": 32,
              "description": "interrupt line 5 status\n          register"
            },
            "ITLINE6": {
              "offset": "0x98",
              "size": 32,
              "description": "interrupt line 6 status\n          register"
            },
            "ITLINE7": {
              "offset": "0x9C",
              "size": 32,
              "description": "interrupt line 7 status\n          register"
            },
            "ITLINE8": {
              "offset": "0xA0",
              "size": 32,
              "description": "interrupt line 8 status\n          register"
            },
            "ITLINE9": {
              "offset": "0xA4",
              "size": 32,
              "description": "interrupt line 9 status\n          register"
            },
            "ITLINE10": {
              "offset": "0xA8",
              "size": 32,
              "description": "interrupt line 10 status\n          register"
            },
            "ITLINE11": {
              "offset": "0xAC",
              "size": 32,
              "description": "interrupt line 11 status\n          register"
            },
            "ITLINE12": {
              "offset": "0xB0",
              "size": 32,
              "description": "interrupt line 12 status\n          register"
            },
            "ITLINE13": {
              "offset": "0xB4",
              "size": 32,
              "description": "interrupt line 13 status\n          register"
            },
            "ITLINE14": {
              "offset": "0xB8",
              "size": 32,
              "description": "interrupt line 14 status\n          register"
            },
            "ITLINE16": {
              "offset": "0xC0",
              "size": 32,
              "description": "interrupt line 16 status\n          register"
            },
            "ITLINE17": {
              "offset": "0xC4",
              "size": 32,
              "description": "interrupt line 17 status\n          register"
            },
            "ITLINE18": {
              "offset": "0xC8",
              "size": 32,
              "description": "interrupt line 18 status\n          register"
            },
            "ITLINE19": {
              "offset": "0xCC",
              "size": 32,
              "description": "interrupt line 19 status\n          register"
            },
            "ITLINE20": {
              "offset": "0xD0",
              "size": 32,
              "description": "interrupt line 20 status\n          register"
            },
            "ITLINE21": {
              "offset": "0xD4",
              "size": 32,
              "description": "interrupt line 21 status\n          register"
            },
            "ITLINE22": {
              "offset": "0xD8",
              "size": 32,
              "description": "interrupt line 22 status\n          register"
            },
            "ITLINE23": {
              "offset": "0xDC",
              "size": 32,
              "description": "interrupt line 23 status\n          register"
            },
            "ITLINE24": {
              "offset": "0xE0",
              "size": 32,
              "description": "interrupt line 24 status\n          register"
            },
            "ITLINE25": {
              "offset": "0xE4",
              "size": 32,
              "description": "interrupt line 25 status\n          register"
            },
            "ITLINE26": {
              "offset": "0xE8",
              "size": 32,
              "description": "interrupt line 26 status\n          register"
            },
            "ITLINE27": {
              "offset": "0xEC",
              "size": 32,
              "description": "interrupt line 27 status\n          register"
            },
            "ITLINE28": {
              "offset": "0xF0",
              "size": 32,
              "description": "interrupt line 28 status\n          register"
            },
            "ITLINE29": {
              "offset": "0xF4",
              "size": 32,
              "description": "interrupt line 29 status\n          register"
            }
          },
          "bits": {
            "CFGR1": {
              "I2C3_FMP": {
                "bit": 24,
                "description": "I2C3_FMP"
              },
              "I2C_PA10_FMP": {
                "bit": 23,
                "description": "Fast Mode Plus (FM+) driving capability\n              activation bits"
              },
              "I2C_PA9_FMP": {
                "bit": 22,
                "description": "Fast Mode Plus (FM+) driving capability\n              activation bits"
              },
              "I2C2_FMP": {
                "bit": 21,
                "description": "FM+ driving capability activation for\n              I2C2"
              },
              "I2C1_FMP": {
                "bit": 20,
                "description": "FM+ driving capability activation for\n              I2C1"
              },
              "I2C_PB9_FMP": {
                "bit": 19,
                "description": "I2C_PB9_FMP",
                "width": 4
              },
              "I2C_PB8_FMP": {
                "bit": 18,
                "description": "I2C_PB8_FMP",
                "width": 4
              },
              "I2C_PB7_FMP": {
                "bit": 17,
                "description": "I2C_PB7_FMP",
                "width": 4
              },
              "I2C_PBx_FMP": {
                "bit": 16,
                "description": "Fast Mode Plus (FM+) driving capability\n              activation bits",
                "width": 4
              },
              "UCPD2_STROBE": {
                "bit": 10,
                "description": "Strobe signal bit for\n              UCPD2"
              },
              "UCPD1_STROBE": {
                "bit": 9,
                "description": "Strobe signal bit for\n              UCPD1"
              },
              "BOOSTEN": {
                "bit": 8,
                "description": "I/O analog switch voltage booster\n              enable"
              },
              "IR_MOD": {
                "bit": 6,
                "description": "IR Modulation Envelope signal\n              selection.",
                "width": 2
              },
              "IR_POL": {
                "bit": 5,
                "description": "IR output polarity\n              selection"
              },
              "PA12_RMP": {
                "bit": 4,
                "description": "PA11 and PA12 remapping\n              bit."
              },
              "PA11_RMP": {
                "bit": 3,
                "description": "PA11_RMP"
              },
              "MEM_MODE": {
                "bit": 0,
                "description": "Memory mapping selection\n              bits",
                "width": 2
              }
            },
            "CFGR2": {
              "LOCKUP_LOCK": {
                "bit": 0,
                "description": "Cortex-M0+ LOCKUP bit enable\n              bit"
              },
              "SRAM_PARITY_LOCK": {
                "bit": 1,
                "description": "SRAM parity lock bit"
              },
              "ECC_LOCK": {
                "bit": 3,
                "description": "ECC error lock bit"
              },
              "SRAM_PEF": {
                "bit": 8,
                "description": "SRAM parity error flag"
              }
            },
            "ITLINE0": {
              "WWDG": {
                "bit": 0,
                "description": "Window watchdog interrupt pending\n              flag"
              }
            },
            "ITLINE2": {
              "TAMP": {
                "bit": 0,
                "description": "TAMP"
              },
              "RTC": {
                "bit": 1,
                "description": "RTC"
              }
            },
            "ITLINE3": {
              "FLASH_ITF": {
                "bit": 0,
                "description": "FLASH_ITF"
              },
              "FLASH_ECC": {
                "bit": 1,
                "description": "FLASH_ECC"
              }
            },
            "ITLINE4": {
              "RCC": {
                "bit": 0,
                "description": "RCC"
              }
            },
            "ITLINE5": {
              "EXTI0": {
                "bit": 0,
                "description": "EXTI0"
              },
              "EXTI1": {
                "bit": 1,
                "description": "EXTI1"
              }
            },
            "ITLINE6": {
              "EXTI2": {
                "bit": 0,
                "description": "EXTI2"
              },
              "EXTI3": {
                "bit": 1,
                "description": "EXTI3"
              }
            },
            "ITLINE7": {
              "EXTI4": {
                "bit": 0,
                "description": "EXTI4"
              },
              "EXTI5": {
                "bit": 1,
                "description": "EXTI5"
              },
              "EXTI6": {
                "bit": 2,
                "description": "EXTI6"
              },
              "EXTI7": {
                "bit": 3,
                "description": "EXTI7"
              },
              "EXTI8": {
                "bit": 4,
                "description": "EXTI8"
              },
              "EXTI9": {
                "bit": 5,
                "description": "EXTI9"
              },
              "EXTI10": {
                "bit": 6,
                "description": "EXTI10"
              },
              "EXTI11": {
                "bit": 7,
                "description": "EXTI11"
              },
              "EXTI12": {
                "bit": 8,
                "description": "EXTI12"
              },
              "EXTI13": {
                "bit": 9,
                "description": "EXTI13"
              },
              "EXTI14": {
                "bit": 10,
                "description": "EXTI14"
              },
              "EXTI15": {
                "bit": 11,
                "description": "EXTI15"
              }
            },
            "ITLINE8": {
              "USB": {
                "bit": 2,
                "description": "USB"
              }
            },
            "ITLINE9": {
              "DMA1_CH1": {
                "bit": 0,
                "description": "DMA1_CH1"
              }
            },
            "ITLINE10": {
              "DMA1_CH2": {
                "bit": 0,
                "description": "DMA1_CH1"
              },
              "DMA1_CH3": {
                "bit": 1,
                "description": "DMA1_CH3"
              }
            },
            "ITLINE11": {
              "DMAMUX": {
                "bit": 0,
                "description": "DMAMUX"
              },
              "DMA1_CH4": {
                "bit": 1,
                "description": "DMA1_CH4"
              },
              "DMA1_CH5": {
                "bit": 2,
                "description": "DMA1_CH5"
              },
              "DMA1_CH6": {
                "bit": 3,
                "description": "DMA1_CH6"
              },
              "DMA1_CH7": {
                "bit": 4,
                "description": "DMA1_CH7"
              },
              "DMA2_CH1": {
                "bit": 5,
                "description": "DMA2_CH1"
              },
              "DMA2_CH2": {
                "bit": 6,
                "description": "DMA2_CH2"
              },
              "DMA2_CH3": {
                "bit": 7,
                "description": "DMA2_CH3"
              },
              "DMA2_CH4": {
                "bit": 8,
                "description": "DMA2_CH4"
              },
              "DMA2_CH5": {
                "bit": 9,
                "description": "DMA2_CH5"
              }
            },
            "ITLINE12": {
              "ADC": {
                "bit": 0,
                "description": "ADC"
              }
            },
            "ITLINE13": {
              "TIM1_CCU": {
                "bit": 0,
                "description": "TIM1_CCU"
              },
              "TIM1_TRG": {
                "bit": 1,
                "description": "TIM1_TRG"
              },
              "TIM1_UPD": {
                "bit": 2,
                "description": "TIM1_UPD"
              },
              "TIM1_BRK": {
                "bit": 3,
                "description": "TIM1_BRK"
              }
            },
            "ITLINE14": {
              "TIM1_CC": {
                "bit": 0,
                "description": "TIM1_CC"
              }
            },
            "ITLINE16": {
              "TIM3": {
                "bit": 0,
                "description": "TIM3"
              },
              "TIM4": {
                "bit": 1,
                "description": "TIM4"
              }
            },
            "ITLINE17": {
              "TIM6": {
                "bit": 0,
                "description": "TIM6"
              }
            },
            "ITLINE18": {
              "TIM7": {
                "bit": 0,
                "description": "TIM7"
              }
            },
            "ITLINE19": {
              "TIM14": {
                "bit": 0,
                "description": "TIM14"
              }
            },
            "ITLINE20": {
              "TIM15": {
                "bit": 0,
                "description": "TIM15"
              }
            },
            "ITLINE21": {
              "TIM16": {
                "bit": 0,
                "description": "TIM16"
              }
            },
            "ITLINE22": {
              "TIM17": {
                "bit": 0,
                "description": "TIM17"
              }
            },
            "ITLINE23": {
              "I2C1": {
                "bit": 0,
                "description": "I2C1"
              }
            },
            "ITLINE24": {
              "I2C2": {
                "bit": 0,
                "description": "I2C2"
              },
              "I2C3": {
                "bit": 1,
                "description": "I2C3"
              }
            },
            "ITLINE25": {
              "SPI1": {
                "bit": 0,
                "description": "SPI1"
              }
            },
            "ITLINE26": {
              "SPI2": {
                "bit": 0,
                "description": "SPI2"
              },
              "SPI3": {
                "bit": 14,
                "description": "SPI3"
              }
            },
            "ITLINE27": {
              "USART1": {
                "bit": 0,
                "description": "USART1"
              }
            },
            "ITLINE28": {
              "USART2": {
                "bit": 0,
                "description": "USART2"
              }
            },
            "ITLINE29": {
              "USART3": {
                "bit": 0,
                "description": "USART3"
              },
              "USART4": {
                "bit": 1,
                "description": "USART4"
              },
              "USART5": {
                "bit": 3,
                "description": "USART5"
              },
              "USART6": {
                "bit": 4,
                "description": "USART6"
              }
            }
          }
        },
        "TAMP": {
          "instances": [
            {
              "name": "TAMP",
              "base": "0x4000B000"
            }
          ],
          "registers": {
            "TAMP_CR1": {
              "offset": "0x00",
              "size": 32,
              "description": "TAMP control register 1"
            },
            "TAMP_CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "TAMP control register 2"
            },
            "TAMP_FLTCR": {
              "offset": "0x0C",
              "size": 32,
              "description": "TAMP filter control register"
            },
            "TAMP_IER": {
              "offset": "0x2C",
              "size": 32,
              "description": "TAMP interrupt enable register"
            },
            "TAMP_SR": {
              "offset": "0x30",
              "size": 32,
              "description": "TAMP status register"
            },
            "TAMP_MISR": {
              "offset": "0x34",
              "size": 32,
              "description": "TAMP masked interrupt status register"
            },
            "TAMP_SCR": {
              "offset": "0x3C",
              "size": 32,
              "description": "TAMP status clear register"
            },
            "TAMP_BKP0R": {
              "offset": "0x100",
              "size": 32,
              "description": "TAMP backup 0 register"
            },
            "TAMP_BKP1R": {
              "offset": "0x104",
              "size": 32,
              "description": "TAMP backup 1 register"
            },
            "TAMP_BKP2R": {
              "offset": "0x108",
              "size": 32,
              "description": "TAMP backup 2 register"
            },
            "TAMP_BKP3R": {
              "offset": "0x10C",
              "size": 32,
              "description": "TAMP backup 3 register"
            },
            "TAMP_BKP4R": {
              "offset": "0x110",
              "size": 32,
              "description": "TAMP backup 4 register"
            }
          },
          "bits": {
            "TAMP_CR1": {
              "TAMP1E": {
                "bit": 0,
                "description": "Tamper detection on TAMP_IN1 enable"
              },
              "TAMP2E": {
                "bit": 1,
                "description": "Tamper detection on TAMP_IN2 enable"
              },
              "TAMP3E": {
                "bit": 2,
                "description": "Tamper detection on TAMP_IN3 enable"
              },
              "ITAMP3E": {
                "bit": 18,
                "description": "Internal tamper 3 enable: LSE monitoring"
              },
              "ITAMP4E": {
                "bit": 19,
                "description": "Internal tamper 4 enable: HSE monitoring"
              },
              "ITAMP5E": {
                "bit": 20,
                "description": "Internal tamper 5 enable: RTC calendar overflow"
              },
              "ITAMP6E": {
                "bit": 21,
                "description": "Internal tamper 6 enable: ST manufacturer readout"
              }
            },
            "TAMP_CR2": {
              "TAMP1NOER": {
                "bit": 0,
                "description": "Tamper 1 no erase"
              },
              "TAMP2NOER": {
                "bit": 1,
                "description": "Tamper 2 no erase"
              },
              "TAMP3NOER": {
                "bit": 2,
                "description": "Tamper 3 no erase"
              },
              "TAMP1MSK": {
                "bit": 16,
                "description": "Tamper 1 mask\nThe tamper 1 interrupt must not be enabled when TAMP1MSK is set."
              },
              "TAMP2MSK": {
                "bit": 17,
                "description": "Tamper 2 mask\nThe tamper 2 interrupt must not be enabled when TAMP2MSK is set."
              },
              "TAMP3MSK": {
                "bit": 18,
                "description": "Tamper 3 mask\nThe tamper 3 interrupt must not be enabled when TAMP3MSK is set."
              },
              "TAMP1TRG": {
                "bit": 24,
                "description": "Active level for tamper 1 input (active mode disabled)\nIf TAMPFLT = 00 Tamper 1 input rising edge and high level triggers a tamper detection event.\nIf TAMPFLT = 00 Tamper 1 input falling edge and low level triggers a tamper detection event."
              },
              "TAMP2TRG": {
                "bit": 25,
                "description": "Active level for tamper 2 input (active mode disabled)\nIf TAMPFLT = 00 Tamper 2 input rising edge and high level triggers a tamper detection event.\nIf TAMPFLT = 00 Tamper 2 input falling edge and low level triggers a tamper detection event."
              },
              "TAMP3TRG": {
                "bit": 26,
                "description": "Active level for tamper 3 input (active mode disabled)\nIf TAMPFLT = 00 Tamper 3 input rising edge and high level triggers a tamper detection event.\nIf TAMPFLT = 00 Tamper 3 input falling edge and low level triggers a tamper detection event."
              }
            },
            "TAMP_FLTCR": {
              "TAMPFREQ": {
                "bit": 0,
                "description": "Tamper sampling frequency\nDetermines the frequency at which each of the TAMP_INx inputs are sampled.",
                "width": 3
              },
              "TAMPFLT": {
                "bit": 3,
                "description": "TAMP_INx filter count\nThese bits determines the number of consecutive samples at the specified level (TAMP*TRG) needed to activate a tamper event. TAMPFLT is valid for each of the TAMP_INx inputs.",
                "width": 2
              },
              "TAMPPRCH": {
                "bit": 5,
                "description": "TAMP_INx precharge duration\nThese bit determines the duration of time during which the pull-up/is activated before each sample. TAMPPRCH is valid for each of the TAMP_INx inputs.",
                "width": 2
              },
              "TAMPPUDIS": {
                "bit": 7,
                "description": "TAMP_INx pull-up disable\nThis bit determines if each of the TAMPx pins are precharged before each sample."
              }
            },
            "TAMP_IER": {
              "TAMP1IE": {
                "bit": 0,
                "description": "Tamper 1 interrupt enable"
              },
              "TAMP2IE": {
                "bit": 1,
                "description": "Tamper 2 interrupt enable"
              },
              "TAMP3IE": {
                "bit": 2,
                "description": "Tamper 3 interrupt enable"
              },
              "ITAMP3IE": {
                "bit": 18,
                "description": "Internal tamper 3 interrupt enable: LSE monitoring"
              },
              "ITAMP4IE": {
                "bit": 19,
                "description": "Internal tamper 4 interrupt enable: HSE monitoring"
              },
              "ITAMP5IE": {
                "bit": 20,
                "description": "Internal tamper 5 interrupt enable: RTC calendar overflow"
              },
              "ITAMP6IE": {
                "bit": 21,
                "description": "Internal tamper 6 interrupt enable: ST manufacturer readout"
              }
            },
            "TAMP_SR": {
              "TAMP1F": {
                "bit": 0,
                "description": "TAMP1 detection flag\nThis flag is set by hardware when a tamper detection event is detected on the TAMP1 input."
              },
              "TAMP2F": {
                "bit": 1,
                "description": "TAMP2 detection flag\nThis flag is set by hardware when a tamper detection event is detected on the TAMP2 input."
              },
              "TAMP3F": {
                "bit": 2,
                "description": "TAMP3 detection flag\nThis flag is set by hardware when a tamper detection event is detected on the TAMP3 input."
              },
              "ITAMP3F": {
                "bit": 18,
                "description": "LSE monitoring tamper detection flag\nThis flag is set by hardware when a tamper detection event is detected on the internal tamper 3."
              },
              "ITAMP4F": {
                "bit": 19,
                "description": "HSE monitoring tamper detection flag\nThis flag is set by hardware when a tamper detection event is detected on the internal tamper 4."
              },
              "ITAMP5F": {
                "bit": 20,
                "description": "RTC calendar overflow tamper detection flag\nThis flag is set by hardware when a tamper detection event is detected on the internal tamper 5."
              },
              "ITAMP6F": {
                "bit": 21,
                "description": "ST manufacturer readout tamper detection flag\nThis flag is set by hardware when a tamper detection event is detected on the internal tamper 6."
              }
            },
            "TAMP_MISR": {
              "TAMP1MF": {
                "bit": 0,
                "description": "TAMP1 interrupt masked flag\nThis flag is set by hardware when the tamper 1 interrupt is raised."
              },
              "TAMP2MF": {
                "bit": 1,
                "description": "TAMP2 interrupt masked flag\nThis flag is set by hardware when the tamper 2 interrupt is raised."
              },
              "TAMP3MF": {
                "bit": 2,
                "description": "TAMP3 interrupt masked flag\nThis flag is set by hardware when the tamper 3 interrupt is raised."
              },
              "ITAMP3MF": {
                "bit": 18,
                "description": "LSE monitoring tamper interrupt masked flag\nThis flag is set by hardware when the internal tamper 3 interrupt is raised."
              },
              "ITAMP4MF": {
                "bit": 19,
                "description": "HSE monitoring tamper interrupt masked flag\nThis flag is set by hardware when the internal tamper 4 interrupt is raised."
              },
              "ITAMP5MF": {
                "bit": 20,
                "description": "RTC calendar overflow tamper interrupt masked flag\nThis flag is set by hardware when the internal tamper 5 interrupt is raised."
              },
              "ITAMP6MF": {
                "bit": 21,
                "description": "ST manufacturer readout tamper interrupt masked flag\nThis flag is set by hardware when the internal tamper 6 interrupt is raised."
              }
            },
            "TAMP_SCR": {
              "CTAMP1F": {
                "bit": 0,
                "description": "Clear TAMP1 detection flag\nWriting 1 in this bit clears the TAMP1F bit in the TAMP_SR register."
              },
              "CTAMP2F": {
                "bit": 1,
                "description": "Clear TAMP2 detection flag\nWriting 1 in this bit clears the TAMP2F bit in the TAMP_SR register."
              },
              "CTAMP3F": {
                "bit": 2,
                "description": "Clear TAMP3 detection flag\nWriting 1 in this bit clears the TAMP3F bit in the TAMP_SR register."
              },
              "CITAMP3F": {
                "bit": 18,
                "description": "Clear ITAMP3 detection flag\nWriting 1 in this bit clears the ITAMP3F bit in the TAMP_SR register."
              },
              "CITAMP4F": {
                "bit": 19,
                "description": "Clear ITAMP4 detection flag\nWriting 1 in this bit clears the ITAMP4F bit in the TAMP_SR register."
              },
              "CITAMP5F": {
                "bit": 20,
                "description": "Clear ITAMP5 detection flag\nWriting 1 in this bit clears the ITAMP5F bit in the TAMP_SR register."
              },
              "CITAMP6F": {
                "bit": 21,
                "description": "Clear ITAMP6 detection flag\nWriting 1 in this bit clears the ITAMP6F bit in the TAMP_SR register."
              }
            },
            "TAMP_BKP0R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nThey are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.\nIn the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP1R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nThey are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.\nIn the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP2R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nThey are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.\nIn the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP3R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nThey are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.\nIn the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            },
            "TAMP_BKP4R": {
              "BKP": {
                "bit": 0,
                "description": "The application can write or read data to and from these registers.\nThey are powered-on by VBAT when VDD is switched off, so that they are not reset by System reset, and their contents remain valid when the device operates in low-power mode.\nIn the default configuration this register is reset on a tamper detection event. It is forced to reset value as long as there is at least one internal or external tamper flag being set. This register is also reset when the readout protection (RDP) is disabled.",
                "width": 32
              }
            }
          }
        },
        "TIM": {
          "instances": [
            {
              "name": "TIM1",
              "base": "0x40012C00",
              "irq": 13
            },
            {
              "name": "TIM3",
              "base": "0x40000400",
              "irq": 16
            },
            {
              "name": "TIM4",
              "base": "0x40000800"
            },
            {
              "name": "TIM6",
              "base": "0x40001000",
              "irq": 17
            },
            {
              "name": "TIM7",
              "base": "0x40001400",
              "irq": 18
            },
            {
              "name": "TIM14",
              "base": "0x40002000",
              "irq": 19
            },
            {
              "name": "TIM15",
              "base": "0x40014000",
              "irq": 20
            },
            {
              "name": "TIM16",
              "base": "0x40014400",
              "irq": 21
            },
            {
              "name": "TIM17",
              "base": "0x40014800",
              "irq": 22
            }
          ],
          "registers": {
            "TIM1_CR1": {
              "offset": "0x00",
              "size": 32,
              "description": "control register 1"
            },
            "TIM1_CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "control register 2"
            },
            "TIM1_SMCR": {
              "offset": "0x08",
              "size": 32,
              "description": "slave mode control register"
            },
            "TIM1_DIER": {
              "offset": "0x0C",
              "size": 32,
              "description": "DMA/Interrupt enable register"
            },
            "TIM1_SR": {
              "offset": "0x10",
              "size": 32,
              "description": "status register"
            },
            "TIM1_EGR": {
              "offset": "0x14",
              "size": 32,
              "description": "event generation register"
            },
            "CCMR1_Output": {
              "offset": "0x18",
              "size": 32,
              "description": "capture/compare mode register 1 (output\n          mode)"
            },
            "CCMR1_Input": {
              "offset": "0x18",
              "size": 32,
              "description": "capture/compare mode register 1 (output\n          mode)"
            },
            "CCMR2_Output": {
              "offset": "0x1C",
              "size": 32,
              "description": "capture/compare mode register 2 (output\n          mode)"
            },
            "CCMR2_Input": {
              "offset": "0x1C",
              "size": 32,
              "description": "capture/compare mode register 2 (output\n          mode)"
            },
            "TIM1_CCER": {
              "offset": "0x20",
              "size": 32,
              "description": "capture/compare enable\n          register"
            },
            "TIM1_CNT": {
              "offset": "0x24",
              "size": 32,
              "description": "counter"
            },
            "TIM1_PSC": {
              "offset": "0x28",
              "size": 32,
              "description": "prescaler"
            },
            "TIM1_ARR": {
              "offset": "0x2C",
              "size": 32,
              "description": "auto-reload register"
            },
            "TIM1_RCR": {
              "offset": "0x30",
              "size": 32,
              "description": "repetition counter register"
            },
            "TIM1_CCR1": {
              "offset": "0x34",
              "size": 32,
              "description": "capture/compare register 1"
            },
            "TIM1_CCR2": {
              "offset": "0x38",
              "size": 32,
              "description": "capture/compare register 2"
            },
            "TIM1_CCR3": {
              "offset": "0x3C",
              "size": 32,
              "description": "capture/compare register 3"
            },
            "TIM1_CCR4": {
              "offset": "0x40",
              "size": 32,
              "description": "capture/compare register 4"
            },
            "TIM1_BDTR": {
              "offset": "0x44",
              "size": 32,
              "description": "break and dead-time register"
            },
            "TIM1_DCR": {
              "offset": "0x48",
              "size": 32,
              "description": "DMA control register"
            },
            "TIM1_DMAR": {
              "offset": "0x4C",
              "size": 32,
              "description": "DMA address for full transfer"
            },
            "TIM1_OR1": {
              "offset": "0x50",
              "size": 32,
              "description": "option register 1"
            },
            "CCMR3_Output": {
              "offset": "0x54",
              "size": 32,
              "description": "capture/compare mode register 2 (output\n          mode)"
            },
            "TIM1_CCR5": {
              "offset": "0x58",
              "size": 32,
              "description": "capture/compare register 4"
            },
            "TIM1_CCR6": {
              "offset": "0x5C",
              "size": 32,
              "description": "capture/compare register 4"
            },
            "TIM1_AF1": {
              "offset": "0x60",
              "size": 32,
              "description": "DMA address for full transfer"
            },
            "TIM1_AF2": {
              "offset": "0x64",
              "size": 32,
              "description": "DMA address for full transfer"
            },
            "TIM1_TISEL": {
              "offset": "0x68",
              "size": 32,
              "description": "TIM1 timer input selection\n          register"
            }
          },
          "bits": {
            "TIM1_CR1": {
              "CEN": {
                "bit": 0,
                "description": "Counter enable\nNote: External clock, gated mode and encoder mode can work only if the CEN bit has been previously set by software. However trigger mode can set the CEN bit automatically by hardware."
              },
              "UDIS": {
                "bit": 1,
                "description": "Update disable\nThis bit is set and cleared by software to enable/disable UEV event generation.\nCounter overflow/underflow\nSetting the UG bit\nUpdate generation through the slave mode controller\nBuffered registers are then loaded with their preload values."
              },
              "URS": {
                "bit": 2,
                "description": "Update request source\nThis bit is set and cleared by software to select the UEV event sources.\nCounter overflow/underflow\nSetting the UG bit\nUpdate generation through the slave mode controller"
              },
              "OPM": {
                "bit": 3,
                "description": "One pulse mode"
              },
              "DIR": {
                "bit": 4,
                "description": "Direction\nNote: This bit is read only when the timer is configured in Center-aligned mode or Encoder mode."
              },
              "CMS": {
                "bit": 5,
                "description": "Center-aligned mode selection\nNote: Switch from edge-aligned mode to center-aligned mode as long as the counter is enabled (CEN=1) is not allowed",
                "width": 2
              },
              "ARPE": {
                "bit": 7,
                "description": "Auto-reload preload enable"
              },
              "CKD": {
                "bit": 8,
                "description": "Clock division\nThis bit-field indicates the division ratio between the timer clock (CK_INT) frequency and the dead-time and sampling clock (tDTS)used by the dead-time generators and the digital filters (ETR, TIx):\nNote: tDTS = 1/fDTS, tCK_INT = 1/fCK_INT.",
                "width": 2
              },
              "UIFREMAP": {
                "bit": 11,
                "description": "UIF status bit remapping"
              }
            },
            "TIM1_CR2": {
              "CCPC": {
                "bit": 0,
                "description": "Capture/compare preloaded control\nNote: This bit acts only on channels that have a complementary output."
              },
              "CCUS": {
                "bit": 2,
                "description": "Capture/compare control update selection\nNote: This bit acts only on channels that have a complementary output."
              },
              "CCDS": {
                "bit": 3,
                "description": "Capture/compare DMA selection"
              },
              "MMS": {
                "bit": 4,
                "description": "Master mode selection\nThese bits allow selected information to be sent in master mode to slave timers for synchronization (TRGO). The combination is as follows:\nNote: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.",
                "width": 3
              },
              "TI1S": {
                "bit": 7,
                "description": "TI1 selection"
              },
              "OIS1": {
                "bit": 8,
                "description": "Output Idle state 1 (OC1 output)\nNote: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "OIS1N": {
                "bit": 9,
                "description": "Output Idle state 1 (OC1N output)\nNote: This bit can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "OIS2": {
                "bit": 10,
                "description": "Output Idle state 2 (OC2 output)\nRefer to OIS1 bit"
              },
              "OIS2N": {
                "bit": 11,
                "description": "Output Idle state 2 (OC2N output)\nRefer to OIS1N bit"
              },
              "OIS3": {
                "bit": 12,
                "description": "Output Idle state 3 (OC3 output)\nRefer to OIS1 bit"
              },
              "OIS3N": {
                "bit": 13,
                "description": "Output Idle state 3 (OC3N output)\nRefer to OIS1N bit"
              },
              "OIS4": {
                "bit": 14,
                "description": "Output Idle state 4 (OC4 output)\nRefer to OIS1 bit"
              },
              "OIS5": {
                "bit": 16,
                "description": "Output Idle state 5 (OC5 output)\nRefer to OIS1 bit"
              },
              "OIS6": {
                "bit": 18,
                "description": "Output Idle state 6 (OC6 output)\nRefer to OIS1 bit"
              },
              "MMS2": {
                "bit": 20,
                "description": "Master mode selection 2\nThese bits allow the information to be sent to ADC for synchronization (TRGO2) to be selected. The combination is as follows:\nNote: The clock of the slave timer or ADC must be enabled prior to receive events from the master timer, and must not be changed on-the-fly while triggers are received from the master timer.",
                "width": 4
              }
            },
            "TIM1_SMCR": {
              "SMS1": {
                "bit": 0,
                "description": "Slave mode selection\nWhen external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.\nNote: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.\nNote: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer.",
                "width": 3
              },
              "OCCS": {
                "bit": 3,
                "description": "OCREF clear selection\nThis bit is used to select the OCREF clear source."
              },
              "TS1": {
                "bit": 4,
                "description": "Trigger selection\nThis bit-field selects the trigger input to be used to synchronize the counter.\nOthers: Reserved\nSee  for more details on ITRx meaning for each Timer.\nNote: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.",
                "width": 3
              },
              "MSM": {
                "bit": 7,
                "description": "Master/slave mode"
              },
              "ETF": {
                "bit": 8,
                "description": "External trigger filter\nThis bit-field then defines the frequency used to sample ETRP signal and the length of the digital filter applied to ETRP. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:",
                "width": 4
              },
              "ETPS": {
                "bit": 12,
                "description": "External trigger prescaler\nExternal trigger signal ETRP frequency must be at most 1/4 of fCK_INT frequency. A prescaler can be enabled to reduce ETRP frequency. It is useful when inputting fast external clocks.",
                "width": 2
              },
              "ECE": {
                "bit": 14,
                "description": "External clock enable\nThis bit enables External clock mode 2.\nNote: Setting the ECE bit has the same effect as selecting external clock mode 1 with TRGI connected to ETRF (SMS=111 and TS=00111).\nIt is possible to simultaneously use external clock mode 2 with the following slave modes: reset mode, gated mode and trigger mode. Nevertheless, TRGI must not be connected to ETRF in this case (TS bits must not be 00111).\nIf external clock mode 1 and external clock mode 2 are enabled at the same time, the external clock input is ETRF."
              },
              "ETP": {
                "bit": 15,
                "description": "External trigger polarity\nThis bit selects whether ETR or ETR is used for trigger operations"
              },
              "SMS2": {
                "bit": 16,
                "description": "Slave mode selection\nWhen external signals are selected the active edge of the trigger signal (TRGI) is linked to the polarity selected on the external input (see Input Control register and Control Register description.\nNote: The gated mode must not be used if TI1F_ED is selected as the trigger input (TS=00100). Indeed, TI1F_ED outputs 1 pulse for each transition on TI1F, whereas the gated mode checks the level of the trigger signal.\nNote: The clock of the slave peripherals (timer, ADC, ...) receiving the TRGO or the TRGO2 signals must be enabled prior to receive events from the master timer, and the clock frequency (prescaler) must not be changed on-the-fly while triggers are received from the master timer."
              },
              "TS2": {
                "bit": 20,
                "description": "Trigger selection\nThis bit-field selects the trigger input to be used to synchronize the counter.\nOthers: Reserved\nSee  for more details on ITRx meaning for each Timer.\nNote: These bits must be changed only when they are not used (e.g. when SMS=000) to avoid wrong edge detections at the transition.",
                "width": 2
              }
            },
            "TIM1_DIER": {
              "UIE": {
                "bit": 0,
                "description": "Update interrupt enable"
              },
              "CC1IE": {
                "bit": 1,
                "description": "Capture/Compare 1 interrupt enable"
              },
              "CC2IE": {
                "bit": 2,
                "description": "Capture/Compare 2 interrupt enable"
              },
              "CC3IE": {
                "bit": 3,
                "description": "Capture/Compare 3 interrupt enable"
              },
              "CC4IE": {
                "bit": 4,
                "description": "Capture/Compare 4 interrupt enable"
              },
              "COMIE": {
                "bit": 5,
                "description": "COM interrupt enable"
              },
              "TIE": {
                "bit": 6,
                "description": "Trigger interrupt enable"
              },
              "BIE": {
                "bit": 7,
                "description": "Break interrupt enable"
              },
              "UDE": {
                "bit": 8,
                "description": "Update DMA request enable"
              },
              "CC1DE": {
                "bit": 9,
                "description": "Capture/Compare 1 DMA request enable"
              },
              "CC2DE": {
                "bit": 10,
                "description": "Capture/Compare 2 DMA request enable"
              },
              "CC3DE": {
                "bit": 11,
                "description": "Capture/Compare 3 DMA request enable"
              },
              "CC4DE": {
                "bit": 12,
                "description": "Capture/Compare 4 DMA request enable"
              },
              "COMDE": {
                "bit": 13,
                "description": "COM DMA request enable"
              },
              "TDE": {
                "bit": 14,
                "description": "Trigger DMA request enable"
              }
            },
            "TIM1_SR": {
              "UIF": {
                "bit": 0,
                "description": "Update interrupt flag\nThis bit is set by hardware on an update event. It is cleared by software.\nAt overflow or underflow regarding the repetition counter value (update if repetition counter = 0) and if the UDIS=0 in the TIMx_CR1 register.\nWhen CNT is reinitialized by software using the UG bit in TIMx_EGR register, if URS=0 and UDIS=0 in the TIMx_CR1 register.\nWhen CNT is reinitialized by a trigger event (refer to control register (TIM1_SMCRTIMx_SMCR)N/A), if URS=0 and UDIS=0 in the TIMx_CR1 register."
              },
              "CC1IF": {
                "bit": 1,
                "description": "Capture/Compare 1 interrupt flag\nThis flag is set by hardware. It is cleared by software (input capture or output compare mode) or by reading the TIMx_CCR1 register (input capture mode only).\nIf channel CC1 is configured as output: this flag is set when he content of the counter TIMx_CNT matches the content of the TIMx_CCR1 register. When the content of TIMx_CCR1 is greater than the content of TIMx_ARR, the CC1IF bit goes high on the counter overflow (in up-counting and up/down-counting modes) or underflow (in down-counting mode). There are 3 possible options for flag setting in center-aligned mode, refer to the CMS bits in the TIMx_CR1 register for the full description.\nIf channel CC1 is configured as input: this bit is set when counter value has been captured in TIMx_CCR1 register (an edge has been detected on IC1, as per the edge sensitivity defined with the CC1P and CC1NP bits setting, in TIMx_CCER)."
              },
              "CC2IF": {
                "bit": 2,
                "description": "Capture/Compare 2 interrupt flag\nRefer to CC1IF description"
              },
              "CC3IF": {
                "bit": 3,
                "description": "Capture/Compare 3 interrupt flag\nRefer to CC1IF description"
              },
              "CC4IF": {
                "bit": 4,
                "description": "Capture/Compare 4 interrupt flag\nRefer to CC1IF description"
              },
              "COMIF": {
                "bit": 5,
                "description": "COM interrupt flag\nThis flag is set by hardware on COM event (when Capture/compare Control bits - CCxE, CCxNE, OCxM - have been updated). It is cleared by software."
              },
              "TIF": {
                "bit": 6,
                "description": "Trigger interrupt flag\nThis flag is set by hardware on the TRG trigger event (active edge detected on TRGI input when the slave mode controller is enabled in all modes but gated mode. It is set when the counter starts or stops when gated mode is selected. It is cleared by software."
              },
              "BIF": {
                "bit": 7,
                "description": "Break interrupt flag\nThis flag is set by hardware as soon as the break input goes active. It can be cleared by software if the break input is not active."
              },
              "B2IF": {
                "bit": 8,
                "description": "Break 2 interrupt flag\nThis flag is set by hardware as soon as the break 2 input goes active. It can be cleared by software if the break 2 input is not active."
              },
              "CC1OF": {
                "bit": 9,
                "description": "Capture/Compare 1 overcapture flag\nThis flag is set by hardware only when the corresponding channel is configured in input capture mode. It is cleared by software by writing it to '0\u00e2\u0080\u0099."
              },
              "CC2OF": {
                "bit": 10,
                "description": "Capture/Compare 2 overcapture flag\nRefer to CC1OF description"
              },
              "CC3OF": {
                "bit": 11,
                "description": "Capture/Compare 3 overcapture flag\nRefer to CC1OF description"
              },
              "CC4OF": {
                "bit": 12,
                "description": "Capture/Compare 4 overcapture flag\nRefer to CC1OF description"
              },
              "SBIF": {
                "bit": 13,
                "description": "System Break interrupt flag\nThis flag is set by hardware as soon as the system break input goes active. It can be cleared by software if the system break input is not active.\nThis flag must be reset to re-start PWM operation."
              },
              "CC5IF": {
                "bit": 16,
                "description": "Compare 5 interrupt flag\nRefer to CC1IF description (Note: Channel 5 can only be configured as output)"
              },
              "CC6IF": {
                "bit": 17,
                "description": "Compare 6 interrupt flag\nRefer to CC1IF description (Note: Channel 6 can only be configured as output)"
              }
            },
            "TIM1_EGR": {
              "UG": {
                "bit": 0,
                "description": "Update generation\nThis bit can be set by software, it is automatically cleared by hardware."
              },
              "CC1G": {
                "bit": 1,
                "description": "Capture/Compare 1 generation\nThis bit is set by software in order to generate an event, it is automatically cleared by hardware.\nIf channel CC1 is configured as output:\nCC1IF flag is set, Corresponding interrupt or DMA request is sent if enabled.\nIf channel CC1 is configured as input:\nThe current value of the counter is captured in TIMx_CCR1 register. The CC1IF flag is set, the corresponding interrupt or DMA request is sent if enabled. The CC1OF flag is set if the CC1IF flag was already high."
              },
              "CC2G": {
                "bit": 2,
                "description": "Capture/Compare 2 generation\nRefer to CC1G description"
              },
              "CC3G": {
                "bit": 3,
                "description": "Capture/Compare 3 generation\nRefer to CC1G description"
              },
              "CC4G": {
                "bit": 4,
                "description": "Capture/Compare 4 generation\nRefer to CC1G description"
              },
              "COMG": {
                "bit": 5,
                "description": "Capture/Compare control update generation\nThis bit can be set by software, it is automatically cleared by hardware\nNote: This bit acts only on channels having a complementary output."
              },
              "TG": {
                "bit": 6,
                "description": "Trigger generation\nThis bit is set by software in order to generate an event, it is automatically cleared by hardware."
              },
              "BG": {
                "bit": 7,
                "description": "Break generation\nThis bit is set by software in order to generate an event, it is automatically cleared by hardware."
              },
              "B2G": {
                "bit": 8,
                "description": "Break 2 generation\nThis bit is set by software in order to generate an event, it is automatically cleared by hardware."
              }
            },
            "CCMR1_Output": {
              "CC1S": {
                "bit": 0,
                "description": "Capture/Compare 1 selection\nThis bit-field defines the direction of the channel (input/output) as well as the used input.\nNote: CC1S bits are writable only when the channel is OFF (CC1E = '0\u00e2\u0080\u0099 in TIMx_CCER).",
                "width": 2
              },
              "OC1FE": {
                "bit": 2,
                "description": "Output Compare 1 fast enable\nThis bit decreases the latency between a trigger event and a transition on the timer output. It must be used in one-pulse mode (OPM bit set in TIMx_CR1 register), to have the output pulse starting as soon as possible after the starting trigger."
              },
              "OC1PE": {
                "bit": 3,
                "description": "Output Compare 1 preload enable\nNote: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\u00e2\u0080\u009900\u00e2\u0080\u0099 (the channel is configured in output).\nThe PWM mode can be used without validating the preload register only in one pulse mode (OPM bit set in TIMx_CR1 register). Else the behavior is not guaranteed."
              },
              "OC1M1": {
                "bit": 4,
                "description": "Output Compare 1 mode\nThese bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\nNote: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\u00e2\u0080\u009900\u00e2\u0080\u0099 (the channel is configured in output).\nNote: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from \u00e2\u0080\u009cfrozen\u00e2\u0080\u009d mode to \u00e2\u0080\u009cPWM\u00e2\u0080\u009d mode.\nNote: On channels having a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated.\nNote: The OC1M[3] bit is not contiguous, located in bit 16.",
                "width": 3
              },
              "OC1CE": {
                "bit": 7,
                "description": "Output Compare 1 clear enable"
              },
              "CC2S": {
                "bit": 8,
                "description": "Capture/Compare 2 selection\nThis bit-field defines the direction of the channel (input/output) as well as the used input.\nNote: CC2S bits are writable only when the channel is OFF (CC2E = '0\u00e2\u0080\u0099 in TIMx_CCER).",
                "width": 2
              },
              "OC2FE": {
                "bit": 10,
                "description": "Output Compare 2 fast enable\nRefer to OC1FE description."
              },
              "OC2PE": {
                "bit": 11,
                "description": "Output Compare 2 preload enable\nRefer to OC1PE description."
              },
              "OC2M1": {
                "bit": 12,
                "description": "Output Compare 2 mode\nRefer to OC1M[3:0] description.",
                "width": 3
              },
              "OC2CE": {
                "bit": 15,
                "description": "Output Compare 2 clear enable\nRefer to OC1CE description."
              },
              "OC1M2": {
                "bit": 16,
                "description": "Output Compare 1 mode\nThese bits define the behavior of the output reference signal OC1REF from which OC1 and OC1N are derived. OC1REF is active high whereas OC1 and OC1N active level depends on CC1P and CC1NP bits.\nNote: These bits can not be modified as long as LOCK level 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\u00e2\u0080\u009900\u00e2\u0080\u0099 (the channel is configured in output).\nNote: In PWM mode, the OCREF level changes only when the result of the comparison changes or when the output compare mode switches from \u00e2\u0080\u009cfrozen\u00e2\u0080\u009d mode to \u00e2\u0080\u009cPWM\u00e2\u0080\u009d mode.\nNote: On channels having a complementary output, this bit field is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the OC1M active bits take the new value from the preloaded bits only when a COM event is generated.\nNote: The OC1M[3] bit is not contiguous, located in bit 16."
              },
              "OC2M2": {
                "bit": 24,
                "description": "Output Compare 2 mode\nRefer to OC1M[3:0] description."
              }
            },
            "CCMR1_Input": {
              "CC1S": {
                "bit": 0,
                "description": "Capture/Compare 1 Selection\nThis bit-field defines the direction of the channel (input/output) as well as the used input.\nNote: CC1S bits are writable only when the channel is OFF (CC1E = '0\u00e2\u0080\u0099 in TIMx_CCER).",
                "width": 2
              },
              "IC1PSC": {
                "bit": 2,
                "description": "Input capture 1 prescaler\nThis bit-field defines the ratio of the prescaler acting on CC1 input (IC1). The prescaler is reset as soon as CC1E=\u00e2\u0080\u00990\u00e2\u0080\u0099 (TIMx_CCER register).",
                "width": 2
              },
              "IC1F": {
                "bit": 4,
                "description": "Input capture 1 filter\nThis bit-field defines the frequency used to sample TI1 input and the length of the digital filter applied to TI1. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:",
                "width": 4
              },
              "CC2S": {
                "bit": 8,
                "description": "Capture/Compare 2 selection\nThis bit-field defines the direction of the channel (input/output) as well as the used input.\nNote: CC2S bits are writable only when the channel is OFF (CC2E = '0\u00e2\u0080\u0099 in TIMx_CCER).",
                "width": 2
              },
              "IC2PSC": {
                "bit": 10,
                "description": "Input capture 2 prescaler\nRefer to IC1PSC[1:0] description.",
                "width": 2
              },
              "IC2F": {
                "bit": 12,
                "description": "Input capture 2 filter\nRefer to IC1F[3:0] description.",
                "width": 4
              }
            },
            "CCMR2_Output": {
              "CC3S": {
                "bit": 0,
                "description": "Capture/Compare 3 selection\nThis bit-field defines the direction of the channel (input/output) as well as the used input.\nNote: CC3S bits are writable only when the channel is OFF (CC3E = '0\u00e2\u0080\u0099 in TIMx_CCER).",
                "width": 2
              },
              "OC3FE": {
                "bit": 2,
                "description": "Output compare 3 fast enable\nRefer to OC1FE description."
              },
              "OC3PE": {
                "bit": 3,
                "description": "Output compare 3 preload enable\nRefer to OC1PE description."
              },
              "OC3M1": {
                "bit": 4,
                "description": "Output compare 3 mode\nRefer to OC1M[3:0] description.",
                "width": 3
              },
              "OC3CE": {
                "bit": 7,
                "description": "Output compare 3 clear enable\nRefer to OC1CE description."
              },
              "CC4S": {
                "bit": 8,
                "description": "Capture/Compare 4 selection\nThis bit-field defines the direction of the channel (input/output) as well as the used input.\nNote: CC4S bits are writable only when the channel is OFF (CC4E = '0\u00e2\u0080\u0099 in TIMx_CCER).",
                "width": 2
              },
              "OC4FE": {
                "bit": 10,
                "description": "Output compare 4 fast enable\nRefer to OC1FE description."
              },
              "OC4PE": {
                "bit": 11,
                "description": "Output compare 4 preload enable\nRefer to OC1PE description."
              },
              "OC4M1": {
                "bit": 12,
                "description": "Output compare 4 mode\nRefer to OC3M[3:0] description.",
                "width": 3
              },
              "OC4CE": {
                "bit": 15,
                "description": "Output compare 4 clear enable\nRefer to OC1CE description."
              },
              "OC3M2": {
                "bit": 16,
                "description": "Output compare 3 mode\nRefer to OC1M[3:0] description."
              },
              "OC4M2": {
                "bit": 24,
                "description": "Output compare 4 mode\nRefer to OC3M[3:0] description."
              }
            },
            "CCMR2_Input": {
              "CC3S": {
                "bit": 0,
                "description": "Capture/compare 3 selection\nThis bit-field defines the direction of the channel (input/output) as well as the used input.\nNote: CC3S bits are writable only when the channel is OFF (CC3E = '0\u00e2\u0080\u0099 in TIMx_CCER).",
                "width": 2
              },
              "IC3PSC": {
                "bit": 2,
                "description": "Input capture 3 prescaler\nRefer to IC1PSC[1:0] description.",
                "width": 2
              },
              "IC3F": {
                "bit": 4,
                "description": "Input capture 3 filter\nRefer to IC1F[3:0] description.",
                "width": 4
              },
              "CC4S": {
                "bit": 8,
                "description": "Capture/Compare 4 selection\nThis bit-field defines the direction of the channel (input/output) as well as the used input.\nNote: CC4S bits are writable only when the channel is OFF (CC4E = '0\u00e2\u0080\u0099 in TIMx_CCER).",
                "width": 2
              },
              "IC4PSC": {
                "bit": 10,
                "description": "Input capture 4 prescaler\nRefer to IC1PSC[1:0] description.",
                "width": 2
              },
              "IC4F": {
                "bit": 12,
                "description": "Input capture 4 filter\nRefer to IC1F[3:0] description.",
                "width": 4
              }
            },
            "TIM1_CCER": {
              "CC1E": {
                "bit": 0,
                "description": "Capture/Compare 1 output enable\nWhen CC1 channel is configured as output, the OC1 level depends on MOE, OSSI, OSSR, OIS1, OIS1N and CC1NE bits, regardless of the CC1E bits state. Refer to  for details.\nNote: On channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1E active bit takes the new value from the preloaded bit only when a Commutation event is generated."
              },
              "CC1P": {
                "bit": 1,
                "description": "Capture/Compare 1 output polarity\nWhen CC1 channel is configured as input, both CC1NP/CC1P bits select the active polarity of TI1FP1 and TI2FP1 for trigger or capture operations.\nCC1NP=0, CC1P=0:\tnon-inverted/rising edge. The circuit is sensitive to TIxFP1 rising edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is not inverted (trigger operation in gated mode or encoder mode).\nCC1NP=0, CC1P=1:\tinverted/falling edge. The circuit is sensitive to TIxFP1 falling edge (capture or trigger operations in reset, external clock or trigger mode), TIxFP1 is inverted (trigger operation in gated mode or encoder mode).\nCC1NP=1, CC1P=1:\tnon-inverted/both edges/ The circuit is sensitive to both TIxFP1 rising and falling edges (capture or trigger operations in reset, external clock or trigger mode), TIxFP1is not inverted (trigger operation in gated mode). This configuration must not be used in encoder mode.\nCC1NP=1, CC1P=0:\tThe configuration is reserved, it must not be used.\nNote: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).\nOn channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1P active bit takes the new value from the preloaded bit only when a Commutation event is generated."
              },
              "CC1NE": {
                "bit": 2,
                "description": "Capture/Compare 1 complementary output enable\nOn channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NE active bit takes the new value from the preloaded bit only when a Commutation event is generated."
              },
              "CC1NP": {
                "bit": 3,
                "description": "Capture/Compare 1 complementary output polarity\nCC1 channel configured as output:\nCC1 channel configured as input:\nThis bit is used in conjunction with CC1P to define the polarity of TI1FP1 and TI2FP1. Refer to CC1P description.\nNote: This bit is not writable as soon as LOCK level 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register) and CC1S=\u00e2\u0080\u009d00\u00e2\u0080\u009d (channel configured as output).\nOn channels having a complementary output, this bit is preloaded. If the CCPC bit is set in the TIMx_CR2 register then the CC1NP active bit takes the new value from the preloaded bit only when a Commutation event is generated."
              },
              "CC2E": {
                "bit": 4,
                "description": "Capture/Compare 2 output enable\nRefer to CC1E description"
              },
              "CC2P": {
                "bit": 5,
                "description": "Capture/Compare 2 output polarity\nRefer to CC1P description"
              },
              "CC2NE": {
                "bit": 6,
                "description": "Capture/Compare 2 complementary output enable\nRefer to CC1NE description"
              },
              "CC2NP": {
                "bit": 7,
                "description": "Capture/Compare 2 complementary output polarity\nRefer to CC1NP description"
              },
              "CC3E": {
                "bit": 8,
                "description": "Capture/Compare 3 output enable\nRefer to CC1E description"
              },
              "CC3P": {
                "bit": 9,
                "description": "Capture/Compare 3 output polarity\nRefer to CC1P description"
              },
              "CC3NE": {
                "bit": 10,
                "description": "Capture/Compare 3 complementary output enable\nRefer to CC1NE description"
              },
              "CC3NP": {
                "bit": 11,
                "description": "Capture/Compare 3 complementary output polarity\nRefer to CC1NP description"
              },
              "CC4E": {
                "bit": 12,
                "description": "Capture/Compare 4 output enable\nRefer to CC1E description"
              },
              "CC4P": {
                "bit": 13,
                "description": "Capture/Compare 4 output polarity\nRefer to CC1P description"
              },
              "CC4NP": {
                "bit": 15,
                "description": "Capture/Compare 4 complementary output polarity\nRefer to CC1NP description"
              },
              "CC5E": {
                "bit": 16,
                "description": "Capture/Compare 5 output enable\nRefer to CC1E description"
              },
              "CC5P": {
                "bit": 17,
                "description": "Capture/Compare 5 output polarity\nRefer to CC1P description"
              },
              "CC6E": {
                "bit": 20,
                "description": "Capture/Compare 6 output enable\nRefer to CC1E description"
              },
              "CC6P": {
                "bit": 21,
                "description": "Capture/Compare 6 output polarity\nRefer to CC1P description"
              }
            },
            "TIM1_CNT": {
              "CNT": {
                "bit": 0,
                "description": "Counter value",
                "width": 16
              },
              "UIFCPY": {
                "bit": 31,
                "description": "UIF copy\nThis bit is a read-only copy of the UIF bit of the TIMx_ISR register. If the UIFREMAP bit in the TIMxCR1 is reset, bit 31 is reserved and read at 0."
              }
            },
            "TIM1_PSC": {
              "PSC": {
                "bit": 0,
                "description": "Prescaler value\nThe counter clock frequency (CK_CNT) is equal to fCK_PSC / (PSC[15:0] + 1).\nPSC contains the value to be loaded in the active prescaler register at each update event (including when the counter is cleared through UG bit of TIMx_EGR register or through trigger controller when configured in \u00e2\u0080\u009creset mode\u00e2\u0080\u009d).",
                "width": 16
              }
            },
            "TIM1_ARR": {
              "ARR": {
                "bit": 0,
                "description": "Auto-reload value\nARR is the value to be loaded in the actual auto-reload register.\nRefer to the  for more details about ARR update and behavior.\nThe counter is blocked while the auto-reload value is null.",
                "width": 16
              }
            },
            "TIM1_RCR": {
              "REP": {
                "bit": 0,
                "description": "Repetition counter value",
                "width": 16
              }
            },
            "TIM1_CCR1": {
              "CCR1": {
                "bit": 0,
                "description": "Capture/Compare 1 value",
                "width": 16
              }
            },
            "TIM1_CCR2": {
              "CCR2": {
                "bit": 0,
                "description": "Capture/Compare 2 value",
                "width": 16
              }
            },
            "TIM1_CCR3": {
              "CCR3": {
                "bit": 0,
                "description": "Capture/Compare value",
                "width": 16
              }
            },
            "TIM1_CCR4": {
              "CCR4": {
                "bit": 0,
                "description": "Capture/Compare value",
                "width": 16
              }
            },
            "TIM1_BDTR": {
              "DTG": {
                "bit": 0,
                "description": "Dead-time generator setup\nThis bit-field defines the duration of the dead-time inserted between the complementary outputs. DT correspond to this duration.\nDTG[7:5]=0xx => DT=DTG[7:0]x tDTG with tDTG=tDTS.\nDTG[7:5]=10x => DT=(64+DTG[5:0])xtDTG with tDTG=2xtDTS.\nDTG[7:5]=110 => DT=(32+DTG[4:0])xtDTG with tDTG=8xtDTS.\nDTG[7:5]=111 => DT=(32+DTG[4:0])xtDTG with tDTG=16xtDTS.\nExample if tDTS=125\u00c2\u00a0ns (8\u00c2\u00a0MHz), dead-time possible values are:\n0 to 15875\u00c2\u00a0ns by 125\u00c2\u00a0ns steps,\n16\u00c2\u00a0\u00ce\u00bcs to 31750\u00c2\u00a0ns\u00c2\u00a0 by 250\u00c2\u00a0ns steps,\n32\u00c2\u00a0\u00ce\u00bcs to 63\u00c2\u00a0\u00ce\u00bcs by 1\u00c2\u00a0\u00ce\u00bcs steps,\n64\u00c2\u00a0\u00ce\u00bcs to 126\u00c2\u00a0\u00ce\u00bcs by 2\u00c2\u00a0\u00ce\u00bcs steps\nNote: This bit-field can not be modified as long as LOCK level 1, 2 or 3 has been programmed (LOCK bits in TIMx_BDTR register).",
                "width": 8
              },
              "LOCK": {
                "bit": 8,
                "description": "Lock configuration\nThese bits offer a write protection against software errors.\nNote: The LOCK bits can be written only once after the reset. Once the TIMx_BDTR register has been written, their content is frozen until the next reset.",
                "width": 2
              },
              "OSSI": {
                "bit": 10,
                "description": "Off-state selection for Idle mode\nThis bit is used when MOE=0 due to a break event or by a software write, on channels configured as outputs.\nSee OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).\nNote: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "OSSR": {
                "bit": 11,
                "description": "Off-state selection for Run mode\nThis bit is used when MOE=1 on channels having a complementary output which are configured as outputs. OSSR is not implemented if no complementary output is implemented in the timer.\nSee OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A).\nNote: This bit can not be modified as soon as the LOCK level 2 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BKE": {
                "bit": 12,
                "description": "Break enable\nThis bit enables the complete break protection (including all sources connected to bk_acth and BKIN sources, as per ).\nNote: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).\nNote: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective."
              },
              "BKP": {
                "bit": 13,
                "description": "Break polarity\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).\nNote: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective."
              },
              "AOE": {
                "bit": 14,
                "description": "Automatic output enable\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "MOE": {
                "bit": 15,
                "description": "Main output enable\nThis bit is cleared asynchronously by hardware as soon as one of the break inputs is active (BRK or BRK2). It is set by software or automatically depending on the AOE bit. It is acting only on the channels which are configured in output.\nIn response to a break event or if MOE is written to 0: OC and OCN outputs are disabled or forced to idle state depending on the OSSI bit.\nSee OC/OCN enable description for more details (enable register (TIM1_CCERTIMx_CCER)N/A)."
              },
              "BKF": {
                "bit": 16,
                "description": "Break filter\nThis bit-field defines the frequency used to sample BRK input and the length of the digital filter applied to BRK. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:\nNote: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).",
                "width": 4
              },
              "BK2F": {
                "bit": 20,
                "description": "Break 2 filter\nThis bit-field defines the frequency used to sample BRK2 input and the length of the digital filter applied to BRK2. The digital filter is made of an event counter in which N consecutive events are needed to validate a transition on the output:\nNote: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).",
                "width": 4
              },
              "BK2E": {
                "bit": 24,
                "description": "Break 2 enable\nNote: The BRK2 must only be used with OSSR = OSSI = 1.\nNote: This bit cannot be modified when LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).\nNote: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective."
              },
              "BK2P": {
                "bit": 25,
                "description": "Break 2 polarity\nNote: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).\nNote: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective."
              },
              "BKDSRM": {
                "bit": 26,
                "description": "Break Disarm\nThis bit is cleared by hardware when no break source is active.\nThe BKDSRM bit must be set by software to release the bidirectional output control (open-drain output in Hi-Z state) and then be polled it until it is reset by hardware, indicating that the fault condition has disappeared.\nNote: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective."
              },
              "BK2DSRM": {
                "bit": 27,
                "description": "Break2 Disarm\nRefer to BKDSRM description"
              },
              "BKBID": {
                "bit": 28,
                "description": "Break Bidirectional\nIn the bidirectional mode (BKBID bit set to 1), the break input is configured both in input mode and in open drain output mode. Any active break event asserts a low logic level on the Break input to indicate an internal break event to external devices.\nNote: This bit cannot be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).\nNote: Any write operation to this bit takes a delay of 1 APB clock cycle to become effective."
              },
              "BK2BID": {
                "bit": 29,
                "description": "Break2 bidirectional\nRefer to BKBID description"
              }
            },
            "TIM1_DCR": {
              "DBA": {
                "bit": 0,
                "description": "DMA base address\nThis 5-bits vector defines the base-address for DMA transfers (when read/write access are done through the TIMx_DMAR address). DBA is defined as an offset starting from the address of the TIMx_CR1 register.\nExample:\n...",
                "width": 5
              },
              "DBL": {
                "bit": 8,
                "description": "DMA burst length\nThis 5-bit vector defines the length of DMA transfers (the timer recognizes a burst transfer when a read or a write access is done to the TIMx_DMAR address), i.e. the number of transfers. Transfers can be in half-words or in bytes (see example below).\n...\nExample: Let us consider the following transfer: DBL = 7 bytes & DBA = TIMx_CR1.\nIf DBL = 7 bytes and DBA = TIMx_CR1 represents the address of the byte to be transferred, the address of the transfer should be given by the following equation:\n(TIMx_CR1 address) + DBA + (DMA index), where DMA index = DBL\nIn this example, 7 bytes are added to (TIMx_CR1 address) + DBA, which gives us the address from/to which the data is copied. In this case, the transfer is done to 7 registers starting from the following address: (TIMx_CR1 address) + DBA\nAccording to the configuration of the DMA Data Size, several cases may occur:\nIf the DMA Data Size is configured in half-words, 16-bit data is transferred to each of the 7 registers.\nIf the DMA Data Size is configured in bytes, the data is also transferred to 7 registers: the first register contains the first MSB byte, the second register, the first LSB byte and so on. So with the transfer Timer, one also has to specify the size of data transferred by DMA.",
                "width": 5
              }
            },
            "TIM1_DMAR": {
              "DMAB": {
                "bit": 0,
                "description": "DMA register for burst accesses\n\tA read or write operation to the DMAR register accesses the register located at the address (TIMx_CR1 address) + (DBA + DMA index) x 4\n\twhere TIMx_CR1 address is the address of the control register 1, DBA is the DMA base address configured in TIMx_DCR register, DMA index is automatically controlled by the DMA transfer, and ranges from 0 to DBL (DBL configured in TIMx_DCR).",
                "width": 32
              }
            },
            "TIM1_OR1": {
              "OCREF_CLR": {
                "bit": 0,
                "description": "Ocref_clr source selection\nThis bit selects the ocref_clr input source."
              }
            },
            "CCMR3_Output": {
              "OC6M_bit3": {
                "bit": 24,
                "description": "Output Compare 6 mode bit\n              3"
              },
              "OC5M_bit3": {
                "bit": 16,
                "description": "Output Compare 5 mode bit\n              3"
              },
              "OC6CE": {
                "bit": 15,
                "description": "Output compare 6 clear\n              enable"
              },
              "OC6M": {
                "bit": 12,
                "description": "Output compare 6 mode",
                "width": 3
              },
              "OC6PE": {
                "bit": 11,
                "description": "Output compare 6 preload\n              enable"
              },
              "OC6FE": {
                "bit": 10,
                "description": "Output compare 6 fast\n              enable"
              },
              "OC5CE": {
                "bit": 7,
                "description": "Output compare 5 clear\n              enable"
              },
              "OC5M": {
                "bit": 4,
                "description": "Output compare 5 mode",
                "width": 3
              },
              "OC5PE": {
                "bit": 3,
                "description": "Output compare 5 preload\n              enable"
              },
              "OC5FE": {
                "bit": 2,
                "description": "Output compare 5 fast\n              enable"
              }
            },
            "TIM1_CCR5": {
              "CCR5": {
                "bit": 0,
                "description": "Capture/Compare 5 value\nCCR5 is the value to be loaded in the actual capture/compare 5 register (preload value).\nIt is loaded permanently if the preload feature is not selected in the TIMx_CCMR3 register (bit OC5PE). Else the preload value is copied in the active capture/compare 5 register when an update event occurs.\nThe active capture/compare register contains the value to be compared to the counter TIMx_CNT and signaled on OC5 output.",
                "width": 16
              },
              "GC5C1": {
                "bit": 29,
                "description": "Group Channel 5 and Channel 1\nDistortion on Channel 1 output:\nThis bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1).\nNote: it is also possible to apply this distortion on combined PWM signals."
              },
              "GC5C2": {
                "bit": 30,
                "description": "Group Channel 5 and Channel 2\nDistortion on Channel 2 output:\nThis bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR1).\nNote: it is also possible to apply this distortion on combined PWM signals."
              },
              "GC5C3": {
                "bit": 31,
                "description": "Group Channel 5 and Channel 3\nDistortion on Channel 3 output:\nThis bit can either have immediate effect or be preloaded and taken into account after an update event (if preload feature is selected in TIMxCCMR2).\nNote: it is also possible to apply this distortion on combined PWM signals."
              }
            },
            "TIM1_CCR6": {
              "CCR6": {
                "bit": 0,
                "description": "Capture/Compare value",
                "width": 16
              }
            },
            "TIM1_AF1": {
              "BKINE": {
                "bit": 0,
                "description": "BRK BKIN input enable\nThis bit enables the BKIN alternate function input for the timer\u00e2\u0080\u0099s BRK input. BKIN input is 'ORed\u00e2\u0080\u0099 with the other BRK sources.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BKCMP1E": {
                "bit": 1,
                "description": "BRK COMP1 enable\nThis bit enables the COMP1 for the timer\u00e2\u0080\u0099s BRK input. COMP1 output is 'ORed\u00e2\u0080\u0099 with the other BRK sources.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BKCMP2E": {
                "bit": 2,
                "description": "BRK COMP2 enable\nThis bit enables the COMP2 for the timer\u00e2\u0080\u0099s BRK input. COMP2 output is 'ORed\u00e2\u0080\u0099 with the other BRK sources.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BKINP": {
                "bit": 9,
                "description": "BRK BKIN input polarity\nThis bit selects the BKIN alternate function input sensitivity. It must be programmed together with the BKP polarity bit.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BKCMP1P": {
                "bit": 10,
                "description": "BRK COMP1 input polarity\nThis bit selects the COMP1 input sensitivity. It must be programmed together with the BKP polarity bit.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BKCMP2P": {
                "bit": 11,
                "description": "BRK COMP2 input polarity\nThis bit selects the COMP2 input sensitivity. It must be programmed together with the BKP polarity bit.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "ETRSEL": {
                "bit": 14,
                "description": "ETR source selection\nThese bits select the ETR input source.\nOthers: Reserved\nNote: These bits can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register).",
                "width": 4
              }
            },
            "TIM1_AF2": {
              "BK2INE": {
                "bit": 0,
                "description": "BRK2 BKIN input enable\nThis bit enables the BKIN2 alternate function input for the timer\u00e2\u0080\u0099s BRK2 input. BKIN2 input is 'ORed\u00e2\u0080\u0099 with the other BRK2 sources.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BK2CMP1E": {
                "bit": 1,
                "description": "BRK2 COMP1 enable\nThis bit enables the COMP1 for the timer\u00e2\u0080\u0099s BRK2 input. COMP1 output is 'ORed\u00e2\u0080\u0099 with the other BRK2 sources.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BK2CMP2E": {
                "bit": 2,
                "description": "BRK2 COMP2 enable\nThis bit enables the COMP2 for the timer\u00e2\u0080\u0099s BRK2 input. COMP2 output is 'ORed\u00e2\u0080\u0099 with the other BRK2 sources.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BK2INP": {
                "bit": 9,
                "description": "BRK2 BKIN2 input polarity\nThis bit selects the BKIN2 alternate function input sensitivity. It must be programmed together with the BK2P polarity bit.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BK2CMP1P": {
                "bit": 10,
                "description": "BRK2 COMP1 input polarity\nThis bit selects the COMP1 input sensitivity. It must be programmed together with the BK2P polarity bit.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              },
              "BK2CMP2P": {
                "bit": 11,
                "description": "BRK2 COMP2 input polarity\nThis bit selects the COMP2 input sensitivity. It must be programmed together with the BK2P polarity bit.\nNote: This bit can not be modified as long as LOCK level 1 has been programmed (LOCK bits in TIMx_BDTR register)."
              }
            },
            "TIM1_TISEL": {
              "TI1SEL": {
                "bit": 0,
                "description": "selects TI1[0] to TI1[15] input\nOthers: Reserved",
                "width": 4
              },
              "TI2SEL": {
                "bit": 8,
                "description": "selects TI2[0] to TI2[15] input\nOthers: Reserved",
                "width": 4
              },
              "TI3SEL": {
                "bit": 16,
                "description": "selects TI3[0] to TI3[15] input\nOthers: Reserved",
                "width": 4
              },
              "TI4SEL": {
                "bit": 24,
                "description": "selects TI4[0] to TI4[15] input\nOthers: Reserved",
                "width": 4
              }
            }
          }
        },
        "USART": {
          "instances": [
            {
              "name": "USART1",
              "base": "0x40013800",
              "irq": 27
            },
            {
              "name": "USART2",
              "base": "0x40004400",
              "irq": 28
            },
            {
              "name": "USART3",
              "base": "0x40004800",
              "irq": 29
            },
            {
              "name": "USART4",
              "base": "0x40004C00"
            },
            {
              "name": "USART5",
              "base": "0x40005000"
            },
            {
              "name": "USART6",
              "base": "0x40013C00"
            }
          ],
          "registers": {
            "CR1_FIFO_ENABLED": {
              "offset": "0x00",
              "size": 32,
              "description": "Control register 1"
            },
            "CR1_FIFO_DISABLED": {
              "offset": "0x00",
              "size": 32,
              "description": "Control register 1"
            },
            "CR2": {
              "offset": "0x04",
              "size": 32,
              "description": "Control register 2"
            },
            "CR3": {
              "offset": "0x08",
              "size": 32,
              "description": "Control register 3"
            },
            "BRR": {
              "offset": "0x0C",
              "size": 32,
              "description": "Baud rate register"
            },
            "GTPR": {
              "offset": "0x10",
              "size": 32,
              "description": "Guard time and prescaler\n          register"
            },
            "RTOR": {
              "offset": "0x14",
              "size": 32,
              "description": "Receiver timeout register"
            },
            "RQR": {
              "offset": "0x18",
              "size": 32,
              "description": "Request register"
            },
            "ISR_FIFO_ENABLED": {
              "offset": "0x1C",
              "size": 32,
              "description": "Interrupt & status\n          register"
            },
            "ISR_FIFO_DISABLED": {
              "offset": "0x1C",
              "size": 32,
              "description": "Interrupt & status\n          register"
            },
            "ICR": {
              "offset": "0x20",
              "size": 32,
              "description": "Interrupt flag clear register"
            },
            "RDR": {
              "offset": "0x24",
              "size": 32,
              "description": "Receive data register"
            },
            "TDR": {
              "offset": "0x28",
              "size": 32,
              "description": "Transmit data register"
            },
            "PRESC": {
              "offset": "0x2C",
              "size": 32,
              "description": "Prescaler register"
            }
          },
          "bits": {
            "CR1_FIFO_ENABLED": {
              "UE": {
                "bit": 0,
                "description": "USART enable\nWhen this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.\nNote: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.\nThe DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.\nIn Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value."
              },
              "UESM": {
                "bit": 1,
                "description": "USART enable in low-power mode\nWhen this bit is cleared, the USART cannot wake up the MCU from low-power mode.\nWhen this bit is set, the USART can wake up the MCU from low-power mode.\nThis bit is set and cleared by software.\nNote: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.\nIf the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "RE": {
                "bit": 2,
                "description": "Receiver enable\nThis bit enables the receiver. It is set and cleared by software."
              },
              "TE": {
                "bit": 3,
                "description": "Transmitter enable\nThis bit enables the transmitter. It is set and cleared by software.\nNote: During transmission, a low pulse on the TE bit ('0\u00e2\u0080\u0099 followed by '1\u00e2\u0080\u0099) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1\u00e2\u0080\u0099. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts."
              },
              "IDLEIE": {
                "bit": 4,
                "description": "IDLE interrupt enable\nThis bit is set and cleared by software."
              },
              "RXFNEIE": {
                "bit": 5,
                "description": "RXFIFO not empty interrupt enable\nThis bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 6,
                "description": "Transmission complete interrupt enable\nThis bit is set and cleared by software."
              },
              "TXFNFIE": {
                "bit": 7,
                "description": "TXFIFO not full interrupt enable\nThis bit is set and cleared by software."
              },
              "PEIE": {
                "bit": 8,
                "description": "PE interrupt enable\nThis bit is set and cleared by software."
              },
              "PS": {
                "bit": 9,
                "description": "Parity selection\nThis bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "PCE": {
                "bit": 10,
                "description": "Parity control enable\nThis bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M\u00c2\u00a0=\u00c2\u00a01; 8th bit if M\u00c2\u00a0=\u00c2\u00a00) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "WAKE": {
                "bit": 11,
                "description": "Receiver wakeup method\nThis bit determines the USART wakeup method from Mute mode. It is set or cleared by software.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "M0": {
                "bit": 12,
                "description": "Word length\nThis bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "MME": {
                "bit": 13,
                "description": "Mute mode enable\nThis bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software."
              },
              "CMIE": {
                "bit": 14,
                "description": "Character match interrupt enable\nThis bit is set and cleared by software."
              },
              "OVER8": {
                "bit": 15,
                "description": "Oversampling mode\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: In LIN, IrDA and Smartcard modes, this bit must be kept cleared."
              },
              "DEDT": {
                "bit": 16,
                "description": "Driver Enable deassertion time\nThis 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).\nIf the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .",
                "width": 5
              },
              "DEAT": {
                "bit": 21,
                "description": "Driver Enable assertion time\nThis 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .",
                "width": 5
              },
              "RTOIE": {
                "bit": 26,
                "description": "Receiver timeout interrupt enable\nThis bit is set and cleared by software.\nNote: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. ."
              },
              "EOBIE": {
                "bit": 27,
                "description": "End of Block interrupt enable\nThis bit is set and cleared by software.\nNote: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "M1": {
                "bit": 28,
                "description": "Word length\nThis bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.\nM[1:0] = '00\u00e2\u0080\u0099: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\u00e2\u0080\u0099: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\u00e2\u0080\u0099: 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported."
              },
              "FIFOEN": {
                "bit": 29,
                "description": "FIFO mode enable\nThis bit is set and cleared by software.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes."
              },
              "TXFEIE": {
                "bit": 30,
                "description": "TXFIFO empty interrupt enable\nThis bit is set and cleared by software."
              },
              "RXFFIE": {
                "bit": 31,
                "description": "RXFIFO Full interrupt enable\nThis bit is set and cleared by software."
              }
            },
            "CR1_FIFO_DISABLED": {
              "UE": {
                "bit": 0,
                "description": "USART enable\nWhen this bit is cleared, the USART prescalers and outputs are stopped immediately, and all current operations are discarded. The USART configuration is kept, but all the USART_ISR status flags are reset. This bit is set and cleared by software.\nNote: To enter low-power mode without generating errors on the line, the TE bit must be previously reset and the software must wait for the TC bit in the USART_ISR to be set before resetting the UE bit.\nThe DMA requests are also reset when UE = 0 so the DMA channel must be disabled before resetting the UE bit.\nIn Smartcard mode, (SCEN = 1), the SCLK is always available when CLKEN = 1, regardless of the UE bit value."
              },
              "UESM": {
                "bit": 1,
                "description": "USART enable in low-power mode\nWhen this bit is cleared, the USART cannot wake up the MCU from low-power mode.\nWhen this bit is set, the USART can wake up the MCU from low-power mode.\nThis bit is set and cleared by software.\nNote: It is recommended to set the UESM bit just before entering low-power mode and clear it when exit from low-power mode.\nIf the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "RE": {
                "bit": 2,
                "description": "Receiver enable\nThis bit enables the receiver. It is set and cleared by software."
              },
              "TE": {
                "bit": 3,
                "description": "Transmitter enable\nThis bit enables the transmitter. It is set and cleared by software.\nNote: During transmission, a low pulse on the TE bit ('0\u00e2\u0080\u0099 followed by '1\u00e2\u0080\u0099) sends a preamble (idle line) after the current word, except in Smartcard mode. In order to generate an idle character, the TE must not be immediately written to '1\u00e2\u0080\u0099. To ensure the required duration, the software can poll the TEACK bit in the USART_ISR register.\nIn Smartcard mode, when TE is set, there is a 1 bit-time delay before the transmission starts."
              },
              "IDLEIE": {
                "bit": 4,
                "description": "IDLE interrupt enable\nThis bit is set and cleared by software."
              },
              "RXNEIE": {
                "bit": 5,
                "description": "Receive data register not empty\nThis bit is set and cleared by software."
              },
              "TCIE": {
                "bit": 6,
                "description": "Transmission complete interrupt enable\nThis bit is set and cleared by software."
              },
              "TXEIE": {
                "bit": 7,
                "description": "Transmit data register empty\nThis bit is set and cleared by software."
              },
              "PEIE": {
                "bit": 8,
                "description": "PE interrupt enable\nThis bit is set and cleared by software."
              },
              "PS": {
                "bit": 9,
                "description": "Parity selection\nThis bit selects the odd or even parity when the parity generation/detection is enabled (PCE bit set). It is set and cleared by software. The parity is selected after the current byte.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "PCE": {
                "bit": 10,
                "description": "Parity control enable\nThis bit selects the hardware parity control (generation and detection). When the parity control is enabled, the computed parity is inserted at the MSB position (9th bit if M\u00c2\u00a0=\u00c2\u00a01; 8th bit if M\u00c2\u00a0=\u00c2\u00a00) and the parity is checked on the received data. This bit is set and cleared by software. Once it is set, PCE is active after the current byte (in reception and in transmission).\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "WAKE": {
                "bit": 11,
                "description": "Receiver wakeup method\nThis bit determines the USART wakeup method from Mute mode. It is set or cleared by software.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "M0": {
                "bit": 12,
                "description": "Word length\nThis bit is used in conjunction with bit 28 (M1) to determine the word length. It is set or cleared by software (refer to bit 28 (M1)description).\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "MME": {
                "bit": 13,
                "description": "Mute mode enable\nThis bit enables the USART Mute mode function. When set, the USART can switch between active and Mute mode, as defined by the WAKE bit. It is set and cleared by software."
              },
              "CMIE": {
                "bit": 14,
                "description": "Character match interrupt enable\nThis bit is set and cleared by software."
              },
              "OVER8": {
                "bit": 15,
                "description": "Oversampling mode\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: In LIN, IrDA and Smartcard modes, this bit must be kept cleared."
              },
              "DEDT": {
                "bit": 16,
                "description": "Driver Enable deassertion time\nThis 5-bit value defines the time between the end of the last stop bit, in a transmitted message, and the de-activation of the DE (Driver Enable) signal. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).\nIf the USART_TDR register is written during the DEDT time, the new data is transmitted only when the DEDT and DEAT times have both elapsed.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .",
                "width": 5
              },
              "DEAT": {
                "bit": 21,
                "description": "Driver Enable assertion time\nThis 5-bit value defines the time between the activation of the DE (Driver Enable) signal and the beginning of the start bit. It is expressed in sample time units (1/8 or 1/16 bit time, depending on the oversampling rate).\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to .",
                "width": 5
              },
              "RTOIE": {
                "bit": 26,
                "description": "Receiver timeout interrupt enable\nThis bit is set and cleared by software.\nNote: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. ."
              },
              "EOBIE": {
                "bit": 27,
                "description": "End of Block interrupt enable\nThis bit is set and cleared by software.\nNote: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "M1": {
                "bit": 28,
                "description": "Word length\nThis bit must be used in conjunction with bit 12 (M0) to determine the word length. It is set or cleared by software.\nM[1:0] = '00\u00e2\u0080\u0099: 1 start bit, 8 Data bits, n Stop bit\nM[1:0] = '01\u00e2\u0080\u0099: 1 start bit, 9 Data bits, n Stop bit\nM[1:0] = '10\u00e2\u0080\u0099: 1 start bit, 7 Data bits, n Stop bit\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: In 7-bits data length mode, the Smartcard mode, LIN master mode and Auto baud rate (0x7F and 0x55 frames detection) are not supported."
              },
              "FIFOEN": {
                "bit": 29,
                "description": "FIFO mode enable\nThis bit is set and cleared by software.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: FIFO mode can be used on standard UART communication, in SPI master/slave mode and in Smartcard modes only. It must not be enabled in IrDA and LIN modes."
              }
            },
            "CR2": {
              "SLVEN": {
                "bit": 0,
                "description": "Synchronous Slave mode enable\nWhen the SLVEN bit is set, the synchronous slave mode is enabled.\nNote: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "DIS_NSS": {
                "bit": 3,
                "description": "When the DIS_NSS bit is set, the NSS pin input is ignored.\nNote: When SPI slave mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "ADDM7": {
                "bit": 4,
                "description": "7-bit Address Detection/4-bit Address Detection\nThis bit is for selection between 4-bit address detection or 7-bit address detection.\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)\nNote: In 7-bit and 9-bit data modes, the address detection is done on 6-bit and 8-bit address (ADD[5:0] and ADD[7:0]) respectively."
              },
              "LBDL": {
                "bit": 5,
                "description": "LIN break detection length\nThis bit is for selection between 11 bit or 10 bit break detection.\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "LBDIE": {
                "bit": 6,
                "description": "LIN break detection interrupt enable\nBreak interrupt mask (break detection using break delimiter).\nNote: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "LBCL": {
                "bit": 8,
                "description": "Last bit clock pulse\nThis bit is used to select whether the clock pulse associated with the last data bit transmitted (MSB) has to be output on the SCLK pin in synchronous mode.\nThe last bit is the 7th or 8th or 9th data bit transmitted depending on the 7 or 8 or 9 bit format selected by the M bit in the USART_CR1 register.\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "CPHA": {
                "bit": 9,
                "description": "Clock phase\nThis bit is used to select the phase of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPOL bit to produce the desired clock/data relationship (see  and )\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "CPOL": {
                "bit": 10,
                "description": "Clock polarity\nThis bit enables the user to select the polarity of the clock output on the SCLK pin in synchronous mode. It works in conjunction with the CPHA bit to produce the desired clock/data relationship\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If synchronous mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "CLKEN": {
                "bit": 11,
                "description": "Clock enable\nThis bit enables the user to enable the SCLK pin.\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If neither synchronous mode nor Smartcard mode is supported, this bit is reserved and must be kept at reset value. Refer to .\nIn Smartcard mode, in order to provide correctly the SCLK clock to the smartcard, the steps below must be respected:\nUE = 0\nSCEN = 1\nGTPR configuration\nCLKEN= 1\nUE = 1"
              },
              "STOP": {
                "bit": 12,
                "description": "stop bits\nThese bits are used for programming the stop bits.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).",
                "width": 2
              },
              "LINEN": {
                "bit": 14,
                "description": "LIN mode enable\nThis bit is set and cleared by software.\nThe LIN mode enables the capability to send LIN synchronous breaks (13 low bits) using the SBKRQ bit in the USART_CR1 register, and to detect LIN Sync breaks.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the USART does not support LIN mode, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "SWAP": {
                "bit": 15,
                "description": "Swap TX/RX pins\nThis bit is set and cleared by software.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "RXINV": {
                "bit": 16,
                "description": "RX pin active level inversion\nThis bit is set and cleared by software.\nThis enables the use of an external inverter on the RX line.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "TXINV": {
                "bit": 17,
                "description": "TX pin active level inversion\nThis bit is set and cleared by software.\nThis enables the use of an external inverter on the TX line.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "DATAINV": {
                "bit": 18,
                "description": "Binary data inversion\nThis bit is set and cleared by software.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "MSBFIRST": {
                "bit": 19,
                "description": "Most significant bit first\nThis bit is set and cleared by software.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "ABREN": {
                "bit": 20,
                "description": "Auto baud rate enable\nThis bit is set and cleared by software.\nNote: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "ABRMOD": {
                "bit": 21,
                "description": "Auto baud rate mode\nThese bits are set and cleared by software.\nThis bitfield can only be written when ABREN = 0 or the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If DATAINV\u00c2\u00a0=\u00c2\u00a01 and/or MSBFIRST\u00c2\u00a0=\u00c2\u00a01 the patterns must be the same on the line, for example 0xAA for MSBFIRST)\nIf the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to .",
                "width": 2
              },
              "RTOEN": {
                "bit": 23,
                "description": "Receiver timeout enable\nThis bit is set and cleared by software.\nWhen this feature is enabled, the RTOF flag in the USART_ISR register is set if the RX line is idle (no reception) for the duration programmed in the RTOR (receiver timeout register).\nNote: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "ADD": {
                "bit": 24,
                "description": "Address of the USART node\nADD[7:4]:\nThese bits give the address of the USART node or a character code to be recognized.\nThey are used to wake up the MCU with 7-bit address mark detection in multiprocessor communication during Mute mode or low-power mode. The MSB of the character sent by the transmitter should be equal to 1. They can also be used for character detection during normal reception, Mute mode inactive (for example, end of block detection in ModBus protocol). In this case, the whole received character (8-bit) is compared to the ADD[7:0] value and CMF flag is set on match.\nThese bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nADD[3:0]:\nThese bits give the address of the USART node or a character code to be recognized.\nThey are used for wakeup with address mark detection, in multiprocessor communication during Mute mode or low-power mode.\nThese bits can only be written when reception is disabled (RE = 0) or the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).",
                "width": 8
              }
            },
            "CR3": {
              "EIE": {
                "bit": 0,
                "description": "Error interrupt enable\nError Interrupt Enable Bit is required to enable interrupt generation in case of a framing error, overrun error noise flag or SPI slave underrun error (FE\u00c2\u00a0=\u00c2\u00a01 or ORE\u00c2\u00a0=\u00c2\u00a01 or NE\u00c2\u00a0=\u00c2\u00a01 or UDR = 1 in the USART_ISR register)."
              },
              "IREN": {
                "bit": 1,
                "description": "IrDA mode enable\nThis bit is set and cleared by software.\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "IRLP": {
                "bit": 2,
                "description": "IrDA low-power\nThis bit is used for selecting between normal and low-power IrDA modes\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If IrDA mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "HDSEL": {
                "bit": 3,
                "description": "Half-duplex selection\nSelection of Single-wire Half-duplex mode\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "NACK": {
                "bit": 4,
                "description": "Smartcard NACK enable\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "SCEN": {
                "bit": 5,
                "description": "Smartcard mode enable\nThis bit is used for enabling Smartcard mode.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "DMAR": {
                "bit": 6,
                "description": "DMA enable receiver\nThis bit is set/reset by software"
              },
              "DMAT": {
                "bit": 7,
                "description": "DMA enable transmitter\nThis bit is set/reset by software"
              },
              "RTSE": {
                "bit": 8,
                "description": "RTS enable\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "CTSE": {
                "bit": 9,
                "description": "CTS enable\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)\nNote: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "CTSIE": {
                "bit": 10,
                "description": "CTS interrupt enable\nNote: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "ONEBIT": {
                "bit": 11,
                "description": "One sample bit method enable\nThis bit enables the user to select the sample method. When the one sample bit method is selected the noise detection flag (NE) is disabled.\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00)."
              },
              "OVRDIS": {
                "bit": 12,
                "description": "Overrun Disable\nThis bit is used to disable the receive overrun detection.\nthe ORE flag is not set and the new received data overwrites the previous content of the USART_RDR register. When FIFO mode is enabled, the RXFIFO is bypassed and data is written directly in USART_RDR register. Even when FIFO management is enabled, the RXNE flag is to be used.\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: This control bit enables checking the communication flow w/o reading the data"
              },
              "DDRE": {
                "bit": 13,
                "description": "DMA Disable on Reception Error\nThis bit can only be written when the USART is disabled (UE=0).\nNote: The reception errors are: parity error, framing error or noise error."
              },
              "DEM": {
                "bit": 14,
                "description": "Driver enable mode\nThis bit enables the user to activate the external transceiver control, through the DE signal.\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. ."
              },
              "DEP": {
                "bit": 15,
                "description": "Driver enable polarity selection\nThis bit can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If the Driver Enable feature is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "SCARCNT": {
                "bit": 17,
                "description": "Smartcard auto-retry count\nThis bitfield specifies the number of retries for transmission and reception in Smartcard mode.\nIn transmission mode, it specifies the number of automatic retransmission retries, before generating a transmission error (FE bit set).\nIn reception mode, it specifies the number or erroneous reception trials, before generating a reception error (RXNE/RXFNE and PE bits set).\nThis bitfield must be programmed only when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nWhen the USART is enabled (UE\u00c2\u00a0=\u00c2\u00a01), this bitfield may only be written to 0x0, in order to stop retransmission.\nNote: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .",
                "width": 3
              },
              "WUS": {
                "bit": 20,
                "description": "Wakeup from low-power mode interrupt flag selection\nThis bitfield specifies the event which activates the WUF (Wakeup from low-power mode flag).\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nIf the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page\u00c2\u00a0835.",
                "width": 2
              },
              "WUFIE": {
                "bit": 22,
                "description": "Wakeup from low-power mode interrupt enable\nThis bit is set and cleared by software.\nNote: WUFIE must be set before entering in low-power mode.\nIf the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page\u00c2\u00a0835."
              },
              "TXFTIE": {
                "bit": 23,
                "description": "TXFIFO threshold interrupt enable\nThis bit is set and cleared by software."
              },
              "TCBGTIE": {
                "bit": 24,
                "description": "Transmission Complete before guard time, interrupt enable\nThis bit is set and cleared by software.\nNote: If the USART does not support the Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "RXFTCFG": {
                "bit": 25,
                "description": "Receive FIFO threshold configuration\nRemaining combinations: Reserved",
                "width": 3
              },
              "RXFTIE": {
                "bit": 28,
                "description": "RXFIFO threshold interrupt enable\nThis bit is set and cleared by software."
              },
              "TXFTCFG": {
                "bit": 29,
                "description": "TXFIFO threshold configuration\nRemaining combinations: Reserved",
                "width": 3
              }
            },
            "BRR": {
              "BRR": {
                "bit": 0,
                "description": "USART baud rate",
                "width": 16
              }
            },
            "GTPR": {
              "PSC": {
                "bit": 0,
                "description": "Prescaler value\nIn IrDA low-power and normal IrDA mode:\nPSC[7:0] = IrDA Normal and Low-Power baud rate\nPSC[7:0] is used to program the prescaler for dividing the USART source clock to achieve the low-power frequency: the source clock is divided by the value given in the register (8 significant bits):\nIn Smartcard mode:\nPSC[4:0]\u00c2\u00a0=\u00c2\u00a0Prescaler value\nPSC[4:0] is used to program the prescaler for dividing the USART source clock to provide the Smartcard clock. The value given in the register (5 significant bits) is multiplied by 2 to give the division factor of the source clock frequency:\n...\n0010\u00c2\u00a00000: Divides the source clock by 32 (IrDA mode)\n...\n1111\u00c2\u00a01111: Divides the source clock by 255 (IrDA mode)\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: Bits [7:5] must be kept cleared if Smartcard mode is used.\nThis bitfield is reserved and forced by hardware to '0\u00e2\u0080\u0099 when the Smartcard and IrDA modes are not supported. Refer to .",
                "width": 8
              },
              "GT": {
                "bit": 8,
                "description": "Guard time value\nThis bitfield is used to program the Guard time value in terms of number of baud clock periods.\nThis is used in Smartcard mode. The Transmission Complete flag is set after this guard time value.\nThis bitfield can only be written when the USART is disabled (UE\u00c2\u00a0=\u00c2\u00a00).\nNote: If Smartcard mode is not supported, this bit is reserved and must be kept at reset value. Refer to .",
                "width": 8
              }
            },
            "RTOR": {
              "RTO": {
                "bit": 0,
                "description": "Receiver timeout value",
                "width": 24
              },
              "BLEN": {
                "bit": 24,
                "description": "Block Length",
                "width": 8
              }
            },
            "RQR": {
              "ABRRQ": {
                "bit": 0,
                "description": "Auto baud rate request\nWriting 1 to this bit resets the ABRF flag in the USART_ISR and requests an automatic baud rate measurement on the next received data frame.\nNote: If the USART does not support the auto baud rate feature, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "SBKRQ": {
                "bit": 1,
                "description": "Send break request\nWriting 1 to this bit sets the SBKF flag and request to send a BREAK on the line, as soon as the transmit machine is available.\nNote: When the application needs to send the break character following all previously inserted data, including the ones not yet transmitted, the software should wait for the TXE flag assertion before setting the SBKRQ bit."
              },
              "MMRQ": {
                "bit": 2,
                "description": "Mute mode request\nWriting 1 to this bit puts the USART in Mute mode and resets the RWU flag."
              },
              "RXFRQ": {
                "bit": 3,
                "description": "Receive data flush request\nWriting 1 to this bit empties the entire receive FIFO i.e. clears the bit RXFNE.\nThis enables to discard the received data without reading them, and avoid an overrun condition."
              },
              "TXFRQ": {
                "bit": 4,
                "description": "Transmit data flush request\nWhen FIFO mode is disabled, writing '1\u00e2\u0080\u0099 to this bit sets the TXE flag. This enables to discard the transmit data. This bit must be used only in Smartcard mode, when data have not been sent due to errors (NACK) and the FE flag is active in the USART_ISR register. If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value.\nWhen FIFO is enabled, TXFRQ bit is set to flush the whole FIFO. This sets the TXFE flag (Transmit FIFO empty, bit 23 in the USART_ISR register). Flushing the Transmit FIFO is supported in both UART and Smartcard modes.\nNote: In FIFO mode, the TXFNF flag is reset during the flush request until TxFIFO is empty in order to ensure that no data are written in the data register."
              }
            },
            "ISR_FIFO_ENABLED": {
              "PE": {
                "bit": 0,
                "description": "Parity error\nThis bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.\nAn interrupt is generated if PEIE = 1 in the USART_CR1 register.\nNote: This error is associated with the character in the USART_RDR."
              },
              "FE": {
                "bit": 1,
                "description": "Framing error\nThis bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).\nAn interrupt is generated if EIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register.\nNote: This error is associated with the character in the USART_RDR."
              },
              "NE": {
                "bit": 2,
                "description": "Noise detection flag\nThis bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.\nNote: This bit does not generate an interrupt as it appears at the same time as the RXFNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.\nWhen the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page\u00c2\u00a0861).\nThis error is associated with the character in the USART_RDR."
              },
              "ORE": {
                "bit": 3,
                "description": "Overrun error\nThis bit is set by hardware when the data currently being received in the shift register is\nready to be transferred into the USART_RDR register while RXFF = 1. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated if RXFNEIE\u00c2\u00a0=\u00c2\u00a01 or EIE = 1 in the USART_CR1 register.\nNote: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.\nThis bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register."
              },
              "IDLE": {
                "bit": 4,
                "description": "Idle line detected\nThis bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.\nNote: The IDLE bit is not set again until the RXFNE bit has been set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\u00c2\u00a0=\u00c2\u00a01), IDLE is set if the USART is not mute (RWU\u00c2\u00a0=\u00c2\u00a00), whatever the Mute mode selected by the WAKE bit. If RWU\u00c2\u00a0=\u00c2\u00a01, IDLE is not set."
              },
              "RXFNE": {
                "bit": 5,
                "description": "RXFIFO not empty\nRXFNE bit is set by hardware when the RXFIFO is not empty, meaning that data can be read from the USART_RDR register. Every read operation from the USART_RDR frees a location in the RXFIFO.\nRXFNE is cleared when the RXFIFO is empty. The RXFNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.\nAn interrupt is generated if RXFNEIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register."
              },
              "TC": {
                "bit": 6,
                "description": "Transmission complete\nThis bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.\nIt is set by hardware when the transmission of a frame containing data is complete and when TXFE is set.\nAn interrupt is generated if TCIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register.\nTC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\nNote: If TE bit is reset and no transmission is on going, the TC bit is immediately set."
              },
              "TXFNF": {
                "bit": 7,
                "description": "TXFIFO not full\nTXFNF is set by hardware when TXFIFO is not full meaning that data can be written in the USART_TDR. Every write operation to the USART_TDR places the data in the TXFIFO. This flag remains set until the TXFIFO is full. When the TXFIFO is full, this flag is cleared indicating that data can not be written into the USART_TDR.\nAn interrupt is generated if the TXFNFIE bit =1 in the USART_CR1 register.\nNote: The TXFNF is kept reset during the flush request until TXFIFO is empty. After sending the flush request (by setting TXFRQ bit), the flag TXFNF should be checked prior to writing in TXFIFO (TXFNF and TXFE are set at the same time).\nThis bit is used during single buffer transmission."
              },
              "LBDF": {
                "bit": 8,
                "description": "LIN break detection flag\nThis bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.\nAn interrupt is generated if LBDIE = 1 in the USART_CR2 register.\nNote: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to ."
              },
              "CTSIF": {
                "bit": 9,
                "description": "CTS interrupt flag\nThis bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated if CTSIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR3 register.\nNote: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value."
              },
              "CTS": {
                "bit": 10,
                "description": "CTS flag\nThis bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.\nNote: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value."
              },
              "RTOF": {
                "bit": 11,
                "description": "Receiver timeout\nThis bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\nAn interrupt is generated if RTOIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR2 register.\nIn Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.\nIf the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value."
              },
              "EOBF": {
                "bit": 12,
                "description": "End of block flag\nThis bit is set by hardware when a complete block has been received (for example T\u00c2\u00a0=\u00c2\u00a01 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt is generated if the EOBIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR2 register.\nIt is cleared by software, writing 1 to the EOBCF in the USART_ICR register.\nNote: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to ."
              },
              "UDR": {
                "bit": 13,
                "description": "SPI slave underrun error flag\nIn slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.\nNote: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to ."
              },
              "ABRE": {
                "bit": 14,
                "description": "Auto baud rate error\nThis bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)\nIt is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.\nNote: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value."
              },
              "ABRF": {
                "bit": 15,
                "description": "Auto baud rate flag\nThis bit is set by hardware when the automatic baud rate has been set (RXFNE is also set, generating an interrupt if RXFNEIE = 1) or when the auto baud rate operation was completed without success (ABRE\u00c2\u00a0=\u00c2\u00a01) (ABRE, RXFNE and FE are also set in this case)\nIt is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value."
              },
              "BUSY": {
                "bit": 16,
                "description": "Busy flag\nThis bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not)."
              },
              "CMF": {
                "bit": 17,
                "description": "Character match flag\nThis bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\u00c2\u00a0=\u00c2\u00a01in the USART_CR1 register."
              },
              "SBKF": {
                "bit": 18,
                "description": "Send break flag\nThis bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission."
              },
              "RWU": {
                "bit": 19,
                "description": "Receiver wakeup from Mute mode\nThis bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.\nWhen wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.\nNote: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ."
              },
              "WUF": {
                "bit": 20,
                "description": "Wakeup from low-power mode flag\nThis bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\nAn interrupt is generated if WUFIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR3 register.\nNote: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ."
              },
              "TEACK": {
                "bit": 21,
                "description": "Transmit enable acknowledge flag\nThis bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.\nIt can be used when an idle frame request is generated by writing TE\u00c2\u00a0=\u00c2\u00a00, followed by TE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register, in order to respect the TE\u00c2\u00a0=\u00c2\u00a00 minimum period."
              },
              "REACK": {
                "bit": 22,
                "description": "Receive enable acknowledge flag\nThis bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.\nIt can be used to verify that the USART is ready for reception before entering low-power mode.\nNote: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ."
              },
              "TXFE": {
                "bit": 23,
                "description": "TXFIFO empty\nThis bit is set by hardware when TXFIFO is empty. When the TXFIFO contains at least one data, this flag is cleared. The TXFE flag can also be set by writing 1 to the bit TXFRQ (bit 4) in the USART_RQR register.\nAn interrupt is generated if the TXFEIE bit \u00c2\u00a0=\u00c2\u00a01 (bit 30) in the USART_CR1 register."
              },
              "RXFF": {
                "bit": 24,
                "description": "RXFIFO full\nThis bit is set by hardware when the number of received data corresponds to RXFIFO\u00c2\u00a0size\u00c2\u00a0+\u00c2\u00a01 (RXFIFO full + 1 data in the USART_RDR register.\nAn interrupt is generated if the RXFFIE bit \u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register."
              },
              "TCBGT": {
                "bit": 25,
                "description": "Transmission complete before guard time flag\nThis bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.\nIt is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR3 register.\nThis bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.\nNote: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1\u00e2\u0080\u0099. Refer to on page\u00c2\u00a0835."
              },
              "RXFT": {
                "bit": 26,
                "description": "RXFIFO threshold flag\nThis bit is set by hardware when the threshold programmed in RXFTCFG in USART_CR3 register is reached. This means that there are (RXFTCFG - 1) data in the Receive FIFO and one data in the USART_RDR register. An interrupt is generated if the RXFTIE bit \u00c2\u00a0=\u00c2\u00a01 (bit 27) in the USART_CR3 register.\nNote: When the RXFTCFG threshold is configured to '101\u00e2\u0080\u0099, RXFT flag is set if 16 data are available i.e. 15 data in the RXFIFO and 1 data in the USART_RDR. Consequently, the 17th received data does not cause an overrun error. The overrun error occurs after receiving the 18th data."
              },
              "TXFT": {
                "bit": 27,
                "description": "TXFIFO threshold flag\nThis bit is set by hardware when the TXFIFO reaches the threshold programmed in TXFTCFG of USART_CR3 register i.e. the TXFIFO contains TXFTCFG empty locations. An interrupt is generated if the TXFTIE bit \u00c2\u00a0=\u00c2\u00a01 (bit 31) in the USART_CR3 register."
              }
            },
            "ISR_FIFO_DISABLED": {
              "PE": {
                "bit": 0,
                "description": "Parity error\nThis bit is set by hardware when a parity error occurs in receiver mode. It is cleared by software, writing 1 to the PECF in the USART_ICR register.\nAn interrupt is generated if PEIE = 1 in the USART_CR1 register."
              },
              "FE": {
                "bit": 1,
                "description": "Framing error\nThis bit is set by hardware when a de-synchronization, excessive noise or a break character is detected. It is cleared by software, writing 1 to the FECF bit in the USART_ICR register.\nWhen transmitting data in Smartcard mode, this bit is set when the maximum number of transmit attempts is reached without success (the card NACKs the data frame).\nAn interrupt is generated if EIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register."
              },
              "NE": {
                "bit": 2,
                "description": "Noise detection flag\nThis bit is set by hardware when noise is detected on a received frame. It is cleared by software, writing 1 to the NECF bit in the USART_ICR register.\nNote: This bit does not generate an interrupt as it appears at the same time as the RXNE bit which itself generates an interrupt. An interrupt is generated when the NE flag is set during multi buffer communication if the EIE bit is set.\nWhen the line is noise-free, the NE flag can be disabled by programming the ONEBIT bit to 1 to increase the USART tolerance to deviations (Refer to Tolerance of the USART receiver to clock deviation on page\u00c2\u00a0861)."
              },
              "ORE": {
                "bit": 3,
                "description": "Overrun error\nThis bit is set by hardware when the data currently being received in the shift register is\nready to be transferred into the USART_RDR register while RXNE\u00c2\u00a0=\u00c2\u00a01. It is cleared by a software, writing 1 to the ORECF, in the USART_ICR register.\nAn interrupt is generated if RXNEIE\u00c2\u00a0=\u00c2\u00a01 or EIE \u00c2\u00a0=\u00c2\u00a0 1 in the USART_CR1 register.\nNote: When this bit is set, the USART_RDR register content is not lost but the shift register is overwritten. An interrupt is generated if the ORE flag is set during multi buffer communication if the EIE bit is set.\nThis bit is permanently forced to 0 (no overrun detection) when the bit OVRDIS is set in the USART_CR3 register."
              },
              "IDLE": {
                "bit": 4,
                "description": "Idle line detected\nThis bit is set by hardware when an Idle Line is detected. An interrupt is generated if IDLEIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register. It is cleared by software, writing 1 to the IDLECF in the USART_ICR register.\nNote: The IDLE bit is not set again until the RXNE bit has been set (i.e. a new idle line occurs).\nIf Mute mode is enabled (MME\u00c2\u00a0=\u00c2\u00a01), IDLE is set if the USART is not mute (RWU\u00c2\u00a0=\u00c2\u00a00), whatever the Mute mode selected by the WAKE bit. If RWU\u00c2\u00a0=\u00c2\u00a01, IDLE is not set."
              },
              "RXNE": {
                "bit": 5,
                "description": "Read data register not empty\nRXNE bit is set by hardware when the content of the USART_RDR shift register has been transferred to the USART_RDR register. It is cleared by reading from the USART_RDR register. The RXNE flag can also be cleared by writing 1 to the RXFRQ in the USART_RQR register.\nAn interrupt is generated if RXNEIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register."
              },
              "TC": {
                "bit": 6,
                "description": "Transmission complete\nThis bit indicates that the last data written in the USART_TDR has been transmitted out of the shift register.\nIt is set by hardware when the transmission of a frame containing data is complete and when TXE is set.\nAn interrupt is generated if TCIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register.\nTC bit is is cleared by software, by writing 1 to the TCCF in the USART_ICR register or by a write to the USART_TDR register.\nNote: If TE bit is reset and no transmission is on going, the TC bit is set immediately."
              },
              "TXE": {
                "bit": 7,
                "description": "Transmit data register empty\nTXE is set by hardware when the content of the USART_TDR register has been transferred into the shift register. It is cleared by writing to the USART_TDR register. The TXE flag can also be set by writing 1 to the TXFRQ in the USART_RQR register, in order to discard the data (only in Smartcard T\u00c2\u00a0=\u00c2\u00a00 mode, in case of transmission failure).\nAn interrupt is generated if the TXEIE bit \u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register."
              },
              "LBDF": {
                "bit": 8,
                "description": "LIN break detection flag\nThis bit is set by hardware when the LIN break is detected. It is cleared by software, by writing 1 to the LBDCF in the USART_ICR.\nAn interrupt is generated if LBDIE = 1 in the USART_CR2 register.\nNote: If the USART does not support LIN mode, this bit is reserved and kept at reset value. Refer to ."
              },
              "CTSIF": {
                "bit": 9,
                "description": "CTS interrupt flag\nThis bit is set by hardware when the nCTS input toggles, if the CTSE bit is set. It is cleared by software, by writing 1 to the CTSCF bit in the USART_ICR register.\nAn interrupt is generated if CTSIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR3 register.\nNote: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value."
              },
              "CTS": {
                "bit": 10,
                "description": "CTS flag\nThis bit is set/reset by hardware. It is an inverted copy of the status of the nCTS input pin.\nNote: If the hardware flow control feature is not supported, this bit is reserved and kept at reset value."
              },
              "RTOF": {
                "bit": 11,
                "description": "Receiver timeout\nThis bit is set by hardware when the timeout value, programmed in the RTOR register has lapsed, without any communication. It is cleared by software, writing 1 to the RTOCF bit in the USART_ICR register.\nAn interrupt is generated if RTOIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR2 register.\nIn Smartcard mode, the timeout corresponds to the CWT or BWT timings.\nNote: If a time equal to the value programmed in RTOR register separates 2 characters, RTOF is not set. If this time exceeds this value + 2 sample times (2/16 or 2/8, depending on the oversampling method), RTOF flag is set.\nThe counter counts even if RE = 0 but RTOF is set only when RE = 1. If the timeout has already elapsed when RE is set, then RTOF is set.\nIf the USART does not support the Receiver timeout feature, this bit is reserved and kept at reset value."
              },
              "EOBF": {
                "bit": 12,
                "description": "End of block flag\nThis bit is set by hardware when a complete block has been received (for example T\u00c2\u00a0=\u00c2\u00a01 Smartcard mode). The detection is done when the number of received bytes (from the start of the block, including the prologue) is equal or greater than BLEN + 4.\nAn interrupt is generated if the EOBIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR2 register.\nIt is cleared by software, writing 1 to the EOBCF in the USART_ICR register.\nNote: If Smartcard mode is not supported, this bit is reserved and kept at reset value. Refer to ."
              },
              "UDR": {
                "bit": 13,
                "description": "SPI slave underrun error flag\nIn slave transmission mode, this flag is set when the first clock pulse for data transmission appears while the software has not yet loaded any value into USART_TDR. This flag is reset by setting UDRCF bit in the USART_ICR register.\nNote: If the USART does not support the SPI slave mode, this bit is reserved and kept at reset value. Refer to ."
              },
              "ABRE": {
                "bit": 14,
                "description": "Auto baud rate error\nThis bit is set by hardware if the baud rate measurement failed (baud rate out of range or character comparison failed)\nIt is cleared by software, by writing 1 to the ABRRQ bit in the USART_CR3 register.\nNote: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value."
              },
              "ABRF": {
                "bit": 15,
                "description": "Auto baud rate flag\nThis bit is set by hardware when the automatic baud rate has been set (RXNE is also set, generating an interrupt if RXNEIE = 1) or when the auto baud rate operation was completed without success (ABRE\u00c2\u00a0=\u00c2\u00a01) (ABRE, RXNE and FE are also set in this case)\nIt is cleared by software, in order to request a new auto baud rate detection, by writing 1 to the ABRRQ in the USART_RQR register.\nNote: If the USART does not support the auto baud rate feature, this bit is reserved and kept at reset value."
              },
              "BUSY": {
                "bit": 16,
                "description": "Busy flag\nThis bit is set and reset by hardware. It is active when a communication is ongoing on the RX line (successful start bit detected). It is reset at the end of the reception (successful or not)."
              },
              "CMF": {
                "bit": 17,
                "description": "Character match flag\nThis bit is set by hardware, when a the character defined by ADD[7:0] is received. It is cleared by software, writing 1 to the CMCF in the USART_ICR register.\nAn interrupt is generated if CMIE\u00c2\u00a0=\u00c2\u00a01in the USART_CR1 register."
              },
              "SBKF": {
                "bit": 18,
                "description": "Send break flag\nThis bit indicates that a send break character was requested. It is set by software, by writing 1 to the SBKRQ bit in the USART_CR3 register. It is automatically reset by hardware during the stop bit of break transmission."
              },
              "RWU": {
                "bit": 19,
                "description": "Receiver wakeup from Mute mode\nThis bit indicates if the USART is in Mute mode. It is cleared/set by hardware when a wakeup/mute sequence is recognized. The Mute mode control sequence (address or IDLE) is selected by the WAKE bit in the USART_CR1 register.\nWhen wakeup on IDLE mode is selected, this bit can only be set by software, writing 1 to the MMRQ bit in the USART_RQR register.\nNote: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ."
              },
              "WUF": {
                "bit": 20,
                "description": "Wakeup from low-power mode flag\nThis bit is set by hardware, when a wakeup event is detected. The event is defined by the WUS bitfield. It is cleared by software, writing a 1 to the WUCF in the USART_ICR register.\nAn interrupt is generated if WUFIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR3 register.\nNote: When UESM is cleared, WUF flag is also cleared.\nIf the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ."
              },
              "TEACK": {
                "bit": 21,
                "description": "Transmit enable acknowledge flag\nThis bit is set/reset by hardware, when the Transmit Enable value is taken into account by the USART.\nIt can be used when an idle frame request is generated by writing TE\u00c2\u00a0=\u00c2\u00a00, followed by TE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR1 register, in order to respect the TE\u00c2\u00a0=\u00c2\u00a00 minimum period."
              },
              "REACK": {
                "bit": 22,
                "description": "Receive enable acknowledge flag\nThis bit is set/reset by hardware, when the Receive Enable value is taken into account by the USART.\nIt can be used to verify that the USART is ready for reception before entering low-power mode.\nNote: If the USART does not support the wakeup from Stop feature, this bit is reserved and kept at reset value. Refer to ."
              },
              "TCBGT": {
                "bit": 25,
                "description": "Transmission complete before guard time flag\nThis bit is set when the last data written in the USART_TDR has been transmitted correctly out of the shift register.\nIt is set by hardware in Smartcard mode, if the transmission of a frame containing data is complete and if the smartcard did not send back any NACK. An interrupt is generated if TCBGTIE\u00c2\u00a0=\u00c2\u00a01 in the USART_CR3 register.\nThis bit is cleared by software, by writing 1 to the TCBGTCF in the USART_ICR register or by a write to the USART_TDR register.\nNote: If the USART does not support the Smartcard mode, this bit is reserved and kept at reset value. If the USART supports the Smartcard mode and the Smartcard mode is enabled, the TCBGT reset value is '1\u00e2\u0080\u0099. Refer to on page\u00c2\u00a0835."
              }
            },
            "ICR": {
              "PECF": {
                "bit": 0,
                "description": "Parity error clear flag\nWriting 1 to this bit clears the PE flag in the USART_ISR register."
              },
              "FECF": {
                "bit": 1,
                "description": "Framing error clear flag\nWriting 1 to this bit clears the FE flag in the USART_ISR register."
              },
              "NECF": {
                "bit": 2,
                "description": "Noise detected clear flag\nWriting 1 to this bit clears the NE flag in the USART_ISR register."
              },
              "ORECF": {
                "bit": 3,
                "description": "Overrun error clear flag\nWriting 1 to this bit clears the ORE flag in the USART_ISR register."
              },
              "IDLECF": {
                "bit": 4,
                "description": "Idle line detected clear flag\nWriting 1 to this bit clears the IDLE flag in the USART_ISR register."
              },
              "TXFECF": {
                "bit": 5,
                "description": "TXFIFO empty clear flag\nWriting 1 to this bit clears the TXFE flag in the USART_ISR register."
              },
              "TCCF": {
                "bit": 6,
                "description": "Transmission complete clear flag\nWriting 1 to this bit clears the TC flag in the USART_ISR register."
              },
              "TCBGTCF": {
                "bit": 7,
                "description": "Transmission complete before Guard time clear flag\nWriting 1 to this bit clears the TCBGT flag in the USART_ISR register."
              },
              "LBDCF": {
                "bit": 8,
                "description": "LIN break detection clear flag\nWriting 1 to this bit clears the LBDF flag in the USART_ISR register.\nNote: If LIN mode is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "CTSCF": {
                "bit": 9,
                "description": "CTS clear flag\nWriting 1 to this bit clears the CTSIF flag in the USART_ISR register.\nNote: If the hardware flow control feature is not supported, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "RTOCF": {
                "bit": 11,
                "description": "Receiver timeout clear flag\nWriting 1 to this bit clears the RTOF flag in the USART_ISR register.\nNote: If the USART does not support the Receiver timeout feature, this bit is reserved and must be kept at reset value. Refer to page\u00c2\u00a0835."
              },
              "EOBCF": {
                "bit": 12,
                "description": "End of block clear flag\nWriting 1 to this bit clears the EOBF flag in the USART_ISR register.\nNote: If the USART does not support Smartcard mode, this bit is reserved and must be kept at reset value. Refer to ."
              },
              "UDRCF": {
                "bit": 13,
                "description": "SPI slave underrun clear flag\nWriting 1 to this bit clears the UDRF flag in the USART_ISR register.\nNote: If the USART does not support SPI slave mode, this bit is reserved and must be kept at reset value. Refer to"
              },
              "CMCF": {
                "bit": 17,
                "description": "Character match clear flag\nWriting 1 to this bit clears the CMF flag in the USART_ISR register."
              },
              "WUCF": {
                "bit": 20,
                "description": "Wakeup from low-power mode clear flag\nWriting 1 to this bit clears the WUF flag in the USART_ISR register.\nNote: If the USART does not support the wakeup from Stop feature, this bit is reserved and must be kept at reset value. Refer to page\u00c2\u00a0835."
              }
            },
            "RDR": {
              "RDR": {
                "bit": 0,
                "description": "Receive data value",
                "width": 9
              }
            },
            "TDR": {
              "TDR": {
                "bit": 0,
                "description": "Transmit data value",
                "width": 9
              }
            },
            "PRESC": {
              "PRESCALER": {
                "bit": 0,
                "description": "Clock prescaler\nThe USART input clock can be divided by a prescaler factor:\nRemaining combinations: Reserved\nNote: When PRESCALER is programmed with a value different of the allowed ones, programmed prescaler value is 1011 i.e. input clock divided by 256.",
                "width": 4
              }
            }
          }
        },
        "USB": {
          "instances": [
            {
              "name": "USB",
              "base": "0x40005C00"
            }
          ],
          "registers": {
            "USB_CHEP0R": {
              "offset": "0x00",
              "size": 32,
              "description": "USB endpoint/channel 0 register"
            },
            "USB_CHEP1R": {
              "offset": "0x04",
              "size": 32,
              "description": "USB endpoint/channel 1 register"
            },
            "USB_CHEP2R": {
              "offset": "0x08",
              "size": 32,
              "description": "USB endpoint/channel 2 register"
            },
            "USB_CHEP3R": {
              "offset": "0x0C",
              "size": 32,
              "description": "USB endpoint/channel 3 register"
            },
            "USB_CHEP4R": {
              "offset": "0x10",
              "size": 32,
              "description": "USB endpoint/channel 4 register"
            },
            "USB_CHEP5R": {
              "offset": "0x14",
              "size": 32,
              "description": "USB endpoint/channel 5 register"
            },
            "USB_CHEP6R": {
              "offset": "0x18",
              "size": 32,
              "description": "USB endpoint/channel 6 register"
            },
            "USB_CHEP7R": {
              "offset": "0x1C",
              "size": 32,
              "description": "USB endpoint/channel 7 register"
            },
            "USB_CNTR": {
              "offset": "0x40",
              "size": 32,
              "description": "USB Reset\nSoftware can set this bit to reset the USB core, exactly as it happens when receiving a RESET signaling on the USB.The USB peripheral, in response to a RESET, resets its internal protocol state machine. Reception and transmission are disabled until the RST_DCON bit is cleared. All configuration registers do not reset: the microcontroller must explicitly clear these registers (this is to ensure that the RST_DCON interrupt can be safely delivered, and any transaction immediately followed by a RESET can be completed). The function address and endpoint registers are reset by an USB reset event.\nSoftware sets this bit to drive USB reset state on the bus and initialize the device. USB reset terminates as soon as this bit is cleared by software."
            },
            "USB_ISTR": {
              "offset": "0x44",
              "size": 32,
              "description": "USB interrupt status register"
            },
            "USB_FNR": {
              "offset": "0x48",
              "size": 32,
              "description": "USB frame number register"
            },
            "USB_DADDR": {
              "offset": "0x4C",
              "size": 32,
              "description": "Device address\nDevice mode\nThese bits contain the USB function address assigned by the host PC during the enumeration process. Both this field and the endpoint/channel address (EA) field in the associated USB_CHEPnR register must match with the information contained in a USB token in order to handle a transaction to the required endpoint.\nHost mode\nThese bits contain the address transmitted with the LPM transaction"
            },
            "USB_LPMCSR": {
              "offset": "0x54",
              "size": 32,
              "description": "LPM support enable\nDevice mode\nThis bit is set by the software to enable the LPM support within the USB Device. If this bit is at 0 no LPM transactions are handled."
            },
            "USB_BCDR": {
              "offset": "0x58",
              "size": 32,
              "description": "Battery charging detector (BCD) enable\nDevice mode\nThis bit is set by the software to enable the BCD support within the USB Device. When enabled, the USB PHY is fully controlled by BCD and cannot be used for normal communication. Once the BCD discovery is finished, the BCD should be placed in OFF mode by clearing this bit to 0 in order to allow the normal USB operation."
            }
          },
          "bits": {
            "USB_CHEP0R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers\nDevice mode\nThese bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted.\nDouble-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can only be \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThe STATTX bits contain the information about the channel status. Refer to  for the full descriptions (\u00e2\u0080\u009cHost mode\u00e2\u0080\u009d descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint.\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode)\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits.  summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL\u00e2\u0080\u0099 instead of 'ACK\u00e2\u0080\u0099. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated.\n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint \u00e2\u0080\u0093 host with HUB only\nHost mode\nThis bit is set by the software to send an LS transaction to the corresponding endpoint."
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP1R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers\nDevice mode\nThese bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted.\nDouble-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can only be \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThe STATTX bits contain the information about the channel status. Refer to  for the full descriptions (\u00e2\u0080\u009cHost mode\u00e2\u0080\u009d descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint.\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode)\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits.  summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL\u00e2\u0080\u0099 instead of 'ACK\u00e2\u0080\u0099. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated.\n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint \u00e2\u0080\u0093 host with HUB only\nHost mode\nThis bit is set by the software to send an LS transaction to the corresponding endpoint."
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP2R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers\nDevice mode\nThese bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted.\nDouble-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can only be \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThe STATTX bits contain the information about the channel status. Refer to  for the full descriptions (\u00e2\u0080\u009cHost mode\u00e2\u0080\u009d descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint.\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode)\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits.  summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL\u00e2\u0080\u0099 instead of 'ACK\u00e2\u0080\u0099. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated.\n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint \u00e2\u0080\u0093 host with HUB only\nHost mode\nThis bit is set by the software to send an LS transaction to the corresponding endpoint."
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP3R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers\nDevice mode\nThese bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted.\nDouble-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can only be \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThe STATTX bits contain the information about the channel status. Refer to  for the full descriptions (\u00e2\u0080\u009cHost mode\u00e2\u0080\u009d descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint.\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode)\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits.  summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL\u00e2\u0080\u0099 instead of 'ACK\u00e2\u0080\u0099. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated.\n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint \u00e2\u0080\u0093 host with HUB only\nHost mode\nThis bit is set by the software to send an LS transaction to the corresponding endpoint."
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP4R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers\nDevice mode\nThese bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted.\nDouble-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can only be \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThe STATTX bits contain the information about the channel status. Refer to  for the full descriptions (\u00e2\u0080\u009cHost mode\u00e2\u0080\u009d descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint.\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode)\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits.  summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL\u00e2\u0080\u0099 instead of 'ACK\u00e2\u0080\u0099. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated.\n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint \u00e2\u0080\u0093 host with HUB only\nHost mode\nThis bit is set by the software to send an LS transaction to the corresponding endpoint."
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP5R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers\nDevice mode\nThese bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted.\nDouble-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can only be \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThe STATTX bits contain the information about the channel status. Refer to  for the full descriptions (\u00e2\u0080\u009cHost mode\u00e2\u0080\u009d descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint.\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode)\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits.  summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL\u00e2\u0080\u0099 instead of 'ACK\u00e2\u0080\u0099. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated.\n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint \u00e2\u0080\u0093 host with HUB only\nHost mode\nThis bit is set by the software to send an LS transaction to the corresponding endpoint."
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP6R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers\nDevice mode\nThese bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted.\nDouble-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can only be \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThe STATTX bits contain the information about the channel status. Refer to  for the full descriptions (\u00e2\u0080\u009cHost mode\u00e2\u0080\u009d descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint.\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode)\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits.  summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL\u00e2\u0080\u0099 instead of 'ACK\u00e2\u0080\u0099. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated.\n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint \u00e2\u0080\u0093 host with HUB only\nHost mode\nThis bit is set by the software to send an LS transaction to the corresponding endpoint."
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CHEP7R": {
              "EA": {
                "bit": 0,
                "description": "endpoint/channel address\nDevice mode\nSoftware must write in this field the 4-bit address used to identify the transactions directed to this endpoint. A value must be written before enabling the corresponding endpoint.\nHost mode\nSoftware must write in this field the 4-bit address used to identify the channel addressed by the host transaction.",
                "width": 4
              },
              "STATTX": {
                "bit": 4,
                "description": "Status bits, for transmission transfers\nDevice mode\nThese bits contain the information about the endpoint status, listed in . These bits can be toggled by the software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATTX bits to NAK, when a correct transfer has occurred (VTTX=1) corresponding to a IN or SETUP (control only) transaction addressed to this channel/endpoint. It then waits for the software to prepare the next set of data to be transmitted.\nDouble-buffered bulk endpoints implement a special transaction flow control, which controls the status based on buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can only be \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d. Therefore, the hardware cannot change the status of the channel/endpoint/channel after a successful transaction. If the software sets the STATTX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous channel/endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThe STATTX bits contain the information about the channel status. Refer to  for the full descriptions (\u00e2\u0080\u009cHost mode\u00e2\u0080\u009d descriptions). Whereas in Device mode, these bits contain the status that are given out on the following transaction, in Host mode they capture the status last received from the device. If a NAK is received, STATTX contains the value indicating NAK.",
                "width": 2
              },
              "DTOGTX": {
                "bit": 6,
                "description": "Data toggle, for transmission transfers\nIf the endpoint/channel is non-isochronous, this bit contains the required value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be transmitted. Hardware toggles this bit when the ACK handshake is received from the USB host, following a data packet transmission. If the endpoint/channel is defined as a control one, hardware sets this bit to 1 at the reception of a SETUP PID addressed to this endpoint.\nIf the endpoint/channel is using the double buffer feature, this bit is used to support packet buffer swapping too (Refer to Device mode)\nIf the endpoint/channel is isochronous, this bit is used to support packet buffer swapping since no data toggling is used for this sort of endpoints and only DATA0 packet are transmitted (refer to ). Hardware toggles this bit just after the end of data packet transmission, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint/channel is not a control one) or to force a specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGTX remains unchanged, while writing 1 makes the bit value to toggle. This bit is read/write but it can only be toggled by writing 1."
              },
              "VTTX": {
                "bit": 7,
                "description": "Valid USB transaction transmitted\nDevice mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in the USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written.\nHost mode\nSame as VTRX behavior but for USB OUT and SETUP transactions."
              },
              "EPKIND": {
                "bit": 8,
                "description": "endpoint/channel kind\nThe meaning of this bit depends on the endpoint/channel type configured by the UTYPE bits.  summarizes the different meanings.\nDBL_BUF: This bit is set by the software to enable the double-buffering feature for this bulk endpoint. The usage of double-buffered bulk endpoints is explained in Double-buffered endpoints and usage in Device mode.\nSTATUS_OUT: This bit is set by the software to indicate that a status out transaction is expected: in this case all OUT transactions containing more than zero data bytes are answered 'STALL\u00e2\u0080\u0099 instead of 'ACK\u00e2\u0080\u0099. This bit may be used to improve the robustness of the application to protocol errors during control transfers and its usage is intended for control endpoints only. When STATUS_OUT is reset, OUT transactions can have any number of bytes, as required."
              },
              "UTYPE": {
                "bit": 9,
                "description": "USB type of transaction\nThese bits configure the behavior of this endpoint/channel as described in Endpoint/channel type encoding. Channel0/Endpoint0 must always be a control endpoint/channel and each USB function must have at least one control endpoint/channel which has address 0, but there may be other control channels/endpoints if required. Only control channels/endpoints handle SETUP transactions, which are ignored by endpoints of other kinds. SETUP transactions cannot be answered with NAK or STALL. If a control endpoint/channel is defined as NAK, the USB peripheral does not answer, simulating a receive error, in the receive direction when a SETUP transaction is received. If the control endpoint/channel is defined as STALL in the receive direction, then the SETUP packet is accepted anyway, transferring data and issuing the CTR interrupt. The reception of OUT transactions is handled in the normal way, even if the endpoint/channel is a control one.\nBulk and interrupt endpoints have very similar behavior and they differ only in the special feature available using the EPKIND configuration bit.\nThe usage of isochronous channels/endpoints is explained in transfers in Device mode",
                "width": 2
              },
              "SETUP": {
                "bit": 11,
                "description": "Setup transaction completed\nDevice mode\nThis bit is read-only and it is set by the hardware when the last completed transaction is a SETUP. This bit changes its value only for control endpoints. It must be examined, in the case of a successful receive transaction (VTRX event), to determine the type of transaction occurred. To protect the interrupt service routine from the changes in SETUP bits due to next incoming tokens, this bit is kept frozen while VTRX bit is at 1; its state changes when VTRX is at 0. This bit is read-only.\nHost mode\nThis bit is set by the software to send a SETUP transaction on a control endpoint. This bit changes its value only for control endpoints. It is cleared by hardware when the SETUP transaction is acknowledged and VTTX interrupt generated."
              },
              "STATRX": {
                "bit": 12,
                "description": "Status bits, for reception transfers\nDevice mode\nThese bits contain information about the endpoint status, which are listed in Reception status encoding on page2204. These bits can be toggled by software to initialize their value. When the application software writes 0, the value remains unchanged, while writing 1 makes the bit value to toggle. Hardware sets the STATRX bits to NAK when a correct transfer has occurred (VTRX=1) corresponding to a OUT or SETUP (control only) transaction addressed to this endpoint, so the software has the time to elaborate the received data before it acknowledges a new transaction.\nDouble-buffered bulk endpoints implement a special transaction flow control, which control the status based upon buffer availability condition (Refer to endpoints and usage in Device mode).\nIf the endpoint is defined as isochronous, its status can be only \u00e2\u0080\u009cVALID\u00e2\u0080\u009d or \u00e2\u0080\u009cDISABLED\u00e2\u0080\u009d, so that the hardware cannot change the status of the endpoint after a successful transaction. If the software sets the STATRX bits to 'STALL\u00e2\u0080\u0099 or 'NAK\u00e2\u0080\u0099 for an isochronous endpoint, the USB peripheral behavior is not defined. These bits are read/write but they can be only toggled by writing 1.\nHost mode\nThese bits are the host application controls to start, retry, or abort host transactions driven by the channel.\nThese bits also contain information about the device answer to the last IN channel transaction and report the current status of the channel according to the following STATRX table of states:\n-\tDISABLE\nDISABLE value is reported in case of ACK acknowledge is received on a single-buffer channel. When in DISABLE state the channel is unused or not active waiting for application to restart it by writing VALID. Application can reset a VALID channel to DISABLE to abort a transaction. In this case the transaction is immediately removed from the host execution list. If the aborted transaction was already under execution it is regularly terminated on the USB but the relative VTRX interrupt is not generated.\n-\tVALID\nA host channel is actively trying to submit USB transaction to device only when in VALID state.VALID state can be set by software or automatically by hardware on a NAKED channel at the start of a new frame. When set to VALID, an host channel enters the host execution queue and waits permission from the host frame scheduler to submit its configured transaction.\nVALID value is also reported in case of ACK acknowledge is received on a double-buffered channel. In this case the channel remains active on the alternate buffer while application needs to read the current buffer and toggle DTOGTX. In case software is late in reading and the alternate buffer is not ready, the host channel is automatically suspended transparently to the application. The suspended double buffered channel is re-activated as soon as delay is recovered and DTOGTX is toggled.\n- NAK\nNAK value is reported in case of NAK acknowledge received. When in NAK state the channel is suspended and does not try to transmit. NAK state is moved to VALID by hardware at the start of the next frame, or software can change it to immediately retry transmission by writing it to VALID, or can disable it and abort the transaction by writing DISABLE\n- STALL\nSTALL value is reported in case of STALL acknowledge received. When in STALL state the channel behaves as disabled. Application should not retry transmission but reset the USB and re-enumerate.",
                "width": 2
              },
              "DTOGRX": {
                "bit": 14,
                "description": "Data Toggle, for reception transfers\nIf the endpoint/channel is not isochronous, this bit contains the expected value of the data toggle bit (0=DATA0, 1=DATA1) for the next data packet to be received. Hardware toggles this bit, when the ACK handshake is sent following a data packet reception having a matching data PID value; if the endpoint is defined as a control one, hardware clears this bit at the reception of a SETUP PID received from host (in device) or acknowledged by device (in host).\nIf the endpoint/channel is using the double-buffering feature this bit is used to support packet buffer swapping too (Refer to Device mode).\nIf the endpoint/channel is isochronous, this bit is used only to support packet buffer swapping for data transmission since no data toggling is used for this kind of channels/endpoints and only DATA0 packet are transmitted (Refer to Isochronous transfers in Device mode). Hardware toggles this bit just after the end of data packet reception, since no handshake is used for isochronous transfers.\nThis bit can also be toggled by the software to initialize its value (mandatory when the endpoint is not a control one) or to force specific data toggle/packet buffer usage. When the application software writes 0, the value of DTOGRX remains unchanged, while writing 1 makes the bit value toggle. This bit is read/write but it can be only toggled by writing 1."
              },
              "VTRX": {
                "bit": 15,
                "description": "USB valid transaction received\nDevice mode\nThis bit is set by the hardware when an OUT/SETUP transaction is successfully completed on this endpoint; the software can only clear this bit. If the CTRM bit in USB_CNTR register is set accordingly, a generic interrupt condition is generated together with the endpoint related interrupt condition, which is always activated. The type of occurred transaction, OUT or SETUP, can be determined from the SETUP bit described below.\nA transaction ended with a NAK or STALL handshake does not set this bit, since no data is actually transferred, as in the case of protocol errors or data toggle mismatches.\nThis bit is read/write but only 0 can be written, writing 1 has no effect.\nHost mode\nThis bit is set by the hardware when an IN transaction is successfully completed on this channel. The software can only clear this bit. If the CTRM bit in USB_CNTR register is set a generic interrupt condition is generated together with the channel related flag, which is always activated.\n- A transaction ended with a NAK sets this bit and NAK answer is reported to application reading the NAK state from the STATRX field of this register. One NAKed transaction keeps pending and is automatically retried by the host at the next frame, or the host can immediately retry by resetting STATRX state to VALID.\n- A transaction ended by STALL handshake sets this bit and the STALL answer is reported to application reading the STALL state from the STATRX field of this register. Host application should consequently disable the channel and re-enumerate.\n- A transaction ended with ACK handshake sets this bit\nIf double buffering is disabled, ACK answer is reported by application reading the DISABLE state from the STATRX field of this register. Host application should read received data from USBRAM and re-arm the channel by writing VALID to the STATRX field of this register.\nIf double buffering is enabled, ACK answer is reported by application reading VALID state from the STATRX field of this register. Host application should read received data from USBRAM and toggle the DTOGTX bit of this register.\n- A transaction ended with error sets this bit.\nErrors can be seen via the bits ERR_RX (host mode only).\nThis bit is read/write but only 0 can be written, writing 1 has no effect."
              },
              "DEVADDR": {
                "bit": 16,
                "description": "Host mode\nDevice address assigned to the endpoint during the enumeration process.",
                "width": 7
              },
              "NAK": {
                "bit": 23,
                "description": "Host mode\nThis bit is set by the hardware when a device responds with a NAK. Software can use this bit to monitor the number of NAKs received from a device."
              },
              "LS_EP": {
                "bit": 24,
                "description": "Low speed endpoint \u00e2\u0080\u0093 host with HUB only\nHost mode\nThis bit is set by the software to send an LS transaction to the corresponding endpoint."
              },
              "ERR_TX": {
                "bit": 25,
                "description": "Received error for an OUT/SETUP transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an OUT or SETUP transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "ERR_RX": {
                "bit": 26,
                "description": "Received error for an IN transaction\nHost mode\nThis bit is set by the hardware when an error (for example no answer by the device, CRC error, bit stuffing error, framing format violation, etc.) has occurred during an IN transaction on this channel. The software can only clear this bit. If the ERRM bit in USB_CNTR register is set, a generic interrupt condition is generated together with the channel related flag, which is always activated."
              },
              "THREE_ERR_TX": {
                "bit": 27,
                "description": "Three errors for an OUT or SETUP transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an OUT transaction. THREE_ERR_TX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              },
              "THREE_ERR_RX": {
                "bit": 29,
                "description": "Three errors for an IN transaction\nHost mode\nThis bit is set by the hardware when 3 consecutive transaction errors occurred on the USB bus for an IN transaction. THREE_ERR_RX is not generated for isochronous transactions. The software can only clear this bit.\nCoding of the received error:",
                "width": 2
              }
            },
            "USB_CNTR": {
              "USBRST": {
                "bit": 0,
                "description": "USB Reset\nSoftware can set this bit to reset the USB core, exactly as it happens when receiving a RESET signaling on the USB.The USB peripheral, in response to a RESET, resets its internal protocol state machine. Reception and transmission are disabled until the RST_DCON bit is cleared. All configuration registers do not reset: the microcontroller must explicitly clear these registers (this is to ensure that the RST_DCON interrupt can be safely delivered, and any transaction immediately followed by a RESET can be completed). The function address and endpoint registers are reset by an USB reset event.\nSoftware sets this bit to drive USB reset state on the bus and initialize the device. USB reset terminates as soon as this bit is cleared by software."
              },
              "PDWN": {
                "bit": 1,
                "description": "Power down\nThis bit is used to completely switch off all USB-related analog parts if it is required to completely disable the USB peripheral for any reason. When this bit is set, the USB peripheral is disconnected from the transceivers and it cannot be used."
              },
              "SUSPRDY": {
                "bit": 2,
                "description": "Suspend state effective\nThis bit is set by hardware as soon as the suspend state entered through the SUSPEN control gets internally effective. In this state USB activity is suspended, USB clock is gated, transceiver is set in low power mode by disabling the differential receiver. Only asynchronous wakeup logic and single ended receiver is kept alive to detect remote wakeup or resume events.\nSoftware must poll this bit to confirm it to be set before any STOP mode entry.\nThis bit is cleared by hardware simultaneously to the WAKEUP flag being set."
              },
              "SUSPEN": {
                "bit": 3,
                "description": "Suspend state enable\nSoftware can set this bit when the SUSP interrupt is received, which is issued when no traffic is received by the USB peripheral for 3ms. Software can also set this bit when the L1REQ interrupt is received with positive acknowledge sent.\nAs soon as the suspend state is propagated internally all device activity is stopped, USB clock is gated, USB transceiver is set into low power mode and the SUSPRDY bit is set by hardware. In the case that device application wants to pursue more aggressive power saving by stopping the USB clock source and by moving the microcontroller to stop mode, as in the case of bus powered device application, it must first wait few cycles to see the SUSPRDY=1 acknowledge the suspend request.\nThis bit is cleared by hardware simultaneous with the WAKEUP flag set.\nSoftware can set this bit when host application has nothing scheduled for the next frames and wants to enter long term power saving. When set, it stops immediately SOF generation and any other host activity, gates the USB clock and sets the transceiver in low power mode. If any USB transaction is on-going at the time SUSPEN is set, suspend is entered at the end of the current transaction.\nAs soon as suspend state is propagated internally and gets effective the SUSPRDY bit is set. In the case that host application wants to pursue more aggressive power saving by stopping the USB clock source and by moving the micro-controller to STOP mode, it must first wait few cycles to see SUSPRDY=1 acknowledge to the suspend request.\nThis bit is cleared by hardware simultaneous with the WAKEUP flag set."
              },
              "L2RES": {
                "bit": 4,
                "description": "L2 remote wakeup / resume driver\nDevice mode\nThe microcontroller can set this bit to send remote wake-up signaling to the host. It must be activated, according to USB specifications, for no less than 1ms and no more than 15ms after which the host PC is ready to drive the resume sequence up to its end.\nHost mode\nSoftware sets this bit to send resume signaling to the device.\nSoftware clears this bit to send end of resume to device and restart SOF generation.\nIn the context of remote wake up, this bit is to be set following the WAKEUP interrupt."
              },
              "L1RES": {
                "bit": 5,
                "description": "L1 remote wakeup / resume driver\nDevice mode\nSoftware sets this bit to send a LPM L1 50\u00ce\u00bcs remote wakeup signaling to the host. After the signaling ends, this bit is cleared by hardware."
              },
              "L1REQM": {
                "bit": 7,
                "description": "LPM L1 state request interrupt mask"
              },
              "ESOFM": {
                "bit": 8,
                "description": "Expected start of frame interrupt mask"
              },
              "SOFM": {
                "bit": 9,
                "description": "Start of frame interrupt mask"
              },
              "RST_DCONM": {
                "bit": 10,
                "description": "USB reset request (Device mode) or device connect/disconnect (Host mode) interrupt mask"
              },
              "SUSPM": {
                "bit": 11,
                "description": "Suspend mode interrupt mask"
              },
              "WKUPM": {
                "bit": 12,
                "description": "Wakeup interrupt mask"
              },
              "ERRM": {
                "bit": 13,
                "description": "Error interrupt mask"
              },
              "PMAOVRM": {
                "bit": 14,
                "description": "Packet memory area over / underrun interrupt mask"
              },
              "CTRM": {
                "bit": 15,
                "description": "Correct transfer interrupt mask"
              },
              "THR512M": {
                "bit": 16,
                "description": "512 byte threshold interrupt mask"
              },
              "HOST": {
                "bit": 31,
                "description": "HOST mode\nHOST bit selects betweens host or device USB mode of operation. It must be set before enabling the USB peripheral by the function enable bit."
              }
            },
            "USB_ISTR": {
              "IDN": {
                "bit": 0,
                "description": "Device Endpoint / host channel identification number\nThese bits are written by the hardware according to the host channel or device endpoint number, which generated the interrupt request. If several endpoint/channel transactions are pending, the hardware writes the identification number related to the endpoint/channel having the highest priority defined in the following way: two levels are defined, in order of priority: isochronous and double-buffered bulk channels/endpoints are considered first and then the others are examined. If more than one endpoint/channel from the same set is requesting an interrupt, the IDN bits in USB_ISTR register are assigned according to the lowest requesting register, CHEP0R having the highest priority followed by CHEP1R and so on. The application software can assign a register to each endpoint/channel according to this priority scheme, so as to order the concurring endpoint/channel requests in a suitable way. These bits are read only.",
                "width": 4
              },
              "DIR": {
                "bit": 4,
                "description": "Direction of transaction\nThis bit is written by the hardware according to the direction of the successful transaction, which generated the interrupt request.\nIf DIR bit=0, VTTX bit is set in the USB_CHEPnR register related to the interrupting endpoint. The interrupting transaction is of IN type (data transmitted by the USB peripheral to the host PC).\nIf DIR bit=1, VTRX bit or both VTTX/VTRX are set in the USB_CHEPnR register related to the interrupting endpoint. The interrupting transaction is of OUT type (data received by the USB peripheral from the host PC) or two pending transactions are waiting to be processed.\nThis information can be used by the application software to access the USB_CHEPnR bits related to the triggering transaction since it represents the direction having the interrupt pending. This bit is read-only."
              },
              "L1REQ": {
                "bit": 7,
                "description": "LPM L1 state request\nDevice mode\nThis bit is set by the hardware when LPM command to enter the L1 state is successfully received and acknowledged. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "ESOF": {
                "bit": 8,
                "description": "Expected start of frame\nDevice mode\nThis bit is set by the hardware when an SOF packet is expected but not received. The host sends an SOF packet each 1ms, but if the device does not receive it properly, the suspend timer issues this interrupt. If three consecutive ESOF interrupts are generated (for example three SOF packets are lost) without any traffic occurring in between, a SUSP interrupt is generated. This bit is set even when the missing SOF packets occur while the suspend timer is not yet locked. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "SOF": {
                "bit": 9,
                "description": "Start of frame\nThis bit signals the beginning of a new USB frame and it is set when a SOF packet arrives through the USB bus. The interrupt service routine may monitor the SOF events to have a 1ms synchronization event to the USB host and to safely read the USB_FNR register which is updated at the SOF packet reception (this could be useful for isochronous applications). This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "RST_DCON": {
                "bit": 10,
                "description": "USB reset request (Device mode) or device connect/disconnect (Host mode)\nDevice mode\nThis bit is set by hardware when an USB reset is released by the host and the bus returns to idle. USB reset state is internally detected after the sampling of 60 consecutive SE0 cycles.\nHost mode\nThis bit is set by hardware when device connection or device disconnection is detected. Device connection is signaled after J state is sampled for 22 cycles consecutively from unconnected state. Device disconnection is signaled after SE0 state is seen for 22 bit times consecutively from connected state."
              },
              "SUSP": {
                "bit": 11,
                "description": "Suspend mode request\nDevice mode\nThis bit is set by the hardware when no traffic has been received for 3ms, indicating a suspend mode request from the USB bus. The suspend condition check is enabled immediately after any USB reset and it is disabled by the hardware when the suspend mode is active (SUSPEN=1) until the end of resume sequence. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "WKUP": {
                "bit": 12,
                "description": "Wakeup\nThis bit is set to 1 by the hardware when, during suspend mode, activity is detected that wakes up the USB peripheral. This event asynchronously clears the SUSPRDY bit in the CTLR register and activates the USB_WAKEUP line, which can be used to notify the rest of the device (for example wakeup unit) about the start of the resume process. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "ERR": {
                "bit": 13,
                "description": "Error\nThis flag is set whenever one of the errors listed below has occurred:\nNANS:\tNo ANSwer. The timeout for a host response has expired.\nCRC:\tCyclic redundancy check error. One of the received CRCs, either in the token or in the data, was wrong.\nBST:\tBit stuffing error. A bit stuffing error was detected anywhere in the PID, data, and/or CRC.\nFVIO:\tFraming format violation. A non-standard frame was received (EOP not in the right place, wrong token sequence, etc.).\nThe USB software can usually ignore errors, since the USB peripheral and the PC host manage retransmission in case of errors in a fully transparent way. This interrupt can be useful during the software development phase, or to monitor the quality of transmission over the USB bus, to flag possible problems to the user (for example loose connector, too noisy environment, broken conductor in the USB cable and so on). This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "PMAOVR": {
                "bit": 14,
                "description": "Packet memory area over / underrun\nThis bit is set if the microcontroller has not been able to respond in time to an USB memory request. The USB peripheral handles this event in the following way: During reception an ACK handshake packet is not sent, during transmission a bit-stuff error is forced on the transmitted stream; in both cases the host retries the transaction. The PMAOVR interrupt should never occur during normal operations. Since the failed transaction is retried by the host, the application software has the chance to speed-up device operations during this interrupt handling, to be ready for the next transaction retry; however this does not happen during isochronous transfers (no isochronous transaction is anyway retried) leading to a loss of data in this case. This bit is read/write but only 0 can be written and writing 1 has no effect."
              },
              "CTR": {
                "bit": 15,
                "description": "Completed transfer in host mode\nThis bit is set by the hardware to indicate that an endpoint/channel has successfully completed a transaction; using DIR and IDN bits software can determine which endpoint/channel requested the interrupt. This bit is read-only."
              },
              "THR512": {
                "bit": 16,
                "description": "512 byte threshold interrupt\nThis bit is set to 1 by the hardware when 512 bytes have been transmitted or received during isochronous transfers. This bit is read/write but only 0 can be written and writing 1 has no effect. Note that no information is available to indicate the associated channel/endpoint, however in practice only one ISO endpoint/channel with such large packets can be supported, so that channel."
              },
              "DCON_STAT": {
                "bit": 29,
                "description": "Device connection status\nHost mode:\nThis bit contains information about device connection status. It is set by hardware when a LS/FS device is attached to the host while it is reset when the device is disconnected."
              },
              "LS_DCON": {
                "bit": 30,
                "description": "Low speed device connected\nHost mode:\nThis bit is set by hardware when an LS device connection is detected. Device connection is signaled after LS J-state is sampled for 22 consecutive cycles of the USB clock (48MHz) from the unconnected state."
              }
            },
            "USB_FNR": {
              "FN": {
                "bit": 0,
                "description": "Frame number\nThis bit field contains the 11-bits frame number contained in the last received SOF packet. The frame number is incremented for every frame sent by the host and it is useful for isochronous transfers. This bit field is updated on the generation of an SOF interrupt.",
                "width": 11
              },
              "LSOF": {
                "bit": 11,
                "description": "Lost SOF\nDevice mode\nThese bits are written by the hardware when an ESOF interrupt is generated, counting the number of consecutive SOF packets lost. At the reception of an SOF packet, these bits are cleared.",
                "width": 2
              },
              "LCK": {
                "bit": 13,
                "description": "Locked\nDevice mode\nThis bit is set by the hardware when at least two consecutive SOF packets have been received after the end of an USB reset condition or after the end of an USB resume sequence. Once locked, the frame timer remains in this state until an USB reset or USB suspend event occurs."
              },
              "RXDM": {
                "bit": 14,
                "description": "Receive data - line status\nThis bit can be used to observe the status of received data minus upstream port data line. It can be used during end-of-suspend routines to help determining the wakeup event."
              },
              "RXDP": {
                "bit": 15,
                "description": "Receive data + line status\nThis bit can be used to observe the status of received data plus upstream port data line. It can be used during end-of-suspend routines to help determining the wakeup event."
              }
            },
            "USB_DADDR": {
              "ADD": {
                "bit": 0,
                "description": "Device address\nDevice mode\nThese bits contain the USB function address assigned by the host PC during the enumeration process. Both this field and the endpoint/channel address (EA) field in the associated USB_CHEPnR register must match with the information contained in a USB token in order to handle a transaction to the required endpoint.\nHost mode\nThese bits contain the address transmitted with the LPM transaction",
                "width": 7
              },
              "EF": {
                "bit": 7,
                "description": "Enable function\nThis bit is set by the software to enable the USB Device. The address of this device is contained in the following ADD[6:0] bits. If this bit is at 0 no transactions are handled, irrespective of the settings of USB_CHEPnR registers."
              }
            },
            "USB_LPMCSR": {
              "LPMEN": {
                "bit": 0,
                "description": "LPM support enable\nDevice mode\nThis bit is set by the software to enable the LPM support within the USB Device. If this bit is at 0 no LPM transactions are handled."
              },
              "LPMACK": {
                "bit": 1,
                "description": "LPM token acknowledge enable\nDevice mode:\nThe NYET/ACK is returned only on a successful LPM transaction:\nNo errors in both the EXT token and the LPM token (else ERROR)\nA valid bLinkState = 0001B (L1) is received (else STALL)"
              },
              "REMWAKE": {
                "bit": 3,
                "description": "bRemoteWake value\nDevice mode\nThis bit contains the bRemoteWake value received with last ACKed LPM Token"
              },
              "BESL": {
                "bit": 4,
                "description": "BESL value\nDevice mode\nThese bits contain the BESL value received with last ACKed LPM Token",
                "width": 4
              }
            },
            "USB_BCDR": {
              "BCDEN": {
                "bit": 0,
                "description": "Battery charging detector (BCD) enable\nDevice mode\nThis bit is set by the software to enable the BCD support within the USB Device. When enabled, the USB PHY is fully controlled by BCD and cannot be used for normal communication. Once the BCD discovery is finished, the BCD should be placed in OFF mode by clearing this bit to 0 in order to allow the normal USB operation."
              },
              "DCDEN": {
                "bit": 1,
                "description": "Data contact detection (DCD) mode enable\nDevice mode\nThis bit is set by the software to put the BCD into DCD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly."
              },
              "PDEN": {
                "bit": 2,
                "description": "Primary detection (PD) mode enable\nDevice mode\nThis bit is set by the software to put the BCD into PD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly."
              },
              "SDEN": {
                "bit": 3,
                "description": "Secondary detection (SD) mode enable\nDevice mode\nThis bit is set by the software to put the BCD into SD mode. Only one detection mode (DCD, PD, SD or OFF) should be selected to work correctly."
              },
              "DCDET": {
                "bit": 4,
                "description": "Data contact detection (DCD) status\nDevice mode\nThis bit gives the result of DCD."
              },
              "PDET": {
                "bit": 5,
                "description": "Primary detection (PD) status\nDevice mode\nThis bit gives the result of PD."
              },
              "SDET": {
                "bit": 6,
                "description": "Secondary detection (SD) status\nDevice mode\nThis bit gives the result of SD."
              },
              "PS2DET": {
                "bit": 7,
                "description": "DM pull-up detection status\nDevice mode\nThis bit is active only during PD and gives the result of comparison between DM voltage level and VLGC threshold. In normal situation, the DM level should be below this threshold. If it is above, it means that the DM is externally pulled high. This can be caused by connection to a PS2 port (which pulls-up both DP and DM lines) or to some proprietary charger not following the BCD specification."
              },
              "DPPU_DPD": {
                "bit": 15,
                "description": "DP pull-up / DPDM pull-down\nDevice mode\nThis bit is set by software to enable the embedded pull-up on DP line. Clearing it to 0 can be used to signal disconnect to the host when needed by the user software.\nHost mode\nThis bit is set by software to enable the embedded pull-down on DP and DM lines."
              }
            }
          }
        },
        "VREFBUF": {
          "instances": [
            {
              "name": "VREFBUF",
              "base": "0x40010030"
            }
          ],
          "registers": {
            "VREFBUF_CSR": {
              "offset": "0x00",
              "size": 32,
              "description": "VREFBUF control and status\n          register"
            },
            "VREFBUF_CCR": {
              "offset": "0x04",
              "size": 32,
              "description": "VREFBUF calibration control\n          register"
            }
          },
          "bits": {
            "VREFBUF_CSR": {
              "ENVR": {
                "bit": 0,
                "description": "Voltage reference buffer mode enable\nThis bit is used to enable the voltage reference buffer mode."
              },
              "HIZ": {
                "bit": 1,
                "description": "High impedance mode\nThis bit controls the analog switch to connect or not the VREF+ pin.\nRefer to  for the mode descriptions depending on ENVR bit configuration."
              },
              "VRS": {
                "bit": 2,
                "description": "Voltage reference scale\nThis bit selects the value generated by the voltage reference buffer."
              },
              "VRR": {
                "bit": 3,
                "description": "Voltage reference buffer ready"
              }
            },
            "VREFBUF_CCR": {
              "TRIM": {
                "bit": 0,
                "description": "Trimming code\nThese bits are automatically initialized after reset with the trimming value stored in the Flash memory during the production test. Writing into these bits allows the tuning of the internal reference buffer voltage.",
                "width": 6
              }
            }
          }
        }
      },
      "interrupts": {
        "count": 46,
        "vectors": [
          {
            "number": 0,
            "name": "Initial_SP"
          },
          {
            "number": 1,
            "name": "Reset_Handler"
          },
          {
            "number": 2,
            "name": "NMI_Handler"
          },
          {
            "number": 3,
            "name": "HardFault_Handler"
          },
          {
            "number": 4,
            "name": "MemManage_Handler"
          },
          {
            "number": 5,
            "name": "BusFault_Handler"
          },
          {
            "number": 6,
            "name": "UsageFault_Handler"
          },
          {
            "number": 11,
            "name": "SVC_Handler"
          },
          {
            "number": 12,
            "name": "DebugMon_Handler"
          },
          {
            "number": 14,
            "name": "PendSV_Handler"
          },
          {
            "number": 15,
            "name": "SysTick_Handler"
          },
          {
            "number": 16,
            "name": "WWDG_IRQHandler"
          },
          {
            "number": 18,
            "name": "RTC_STAMP_IRQHandler"
          },
          {
            "number": 19,
            "name": "FLASH_IRQHandler"
          },
          {
            "number": 20,
            "name": "RCC_IRQHandler"
          },
          {
            "number": 21,
            "name": "EXTI0_1_IRQHandler"
          },
          {
            "number": 22,
            "name": "EXTI2_3_IRQHandler"
          },
          {
            "number": 23,
            "name": "EXTI4_15_IRQHandler"
          },
          {
            "number": 25,
            "name": "DMA_Channel1_IRQHandler"
          },
          {
            "number": 26,
            "name": "DMA_Channel2_3_IRQHandler"
          },
          {
            "number": 27,
            "name": "DMA_Channel4_5_6_7_IRQHandler"
          },
          {
            "number": 28,
            "name": "ADC_IRQHandler"
          },
          {
            "number": 29,
            "name": "TIM1_BRK_UP_TRG_COM_IRQHandler"
          },
          {
            "number": 30,
            "name": "TIM1_CC_IRQHandler"
          },
          {
            "number": 32,
            "name": "TIM3_TIM4_IRQHandler"
          },
          {
            "number": 33,
            "name": "TIM6_DAC_IRQHandler"
          },
          {
            "number": 34,
            "name": "TIM7_IRQHandler"
          },
          {
            "number": 35,
            "name": "TIM14_IRQHandler"
          },
          {
            "number": 36,
            "name": "TIM15_IRQHandler"
          },
          {
            "number": 37,
            "name": "TIM16_IRQHandler"
          },
          {
            "number": 38,
            "name": "TIM17_IRQHandler"
          },
          {
            "number": 39,
            "name": "I2C1_IRQHandler"
          },
          {
            "number": 40,
            "name": "I2C2_IRQHandler"
          },
          {
            "number": 41,
            "name": "SPI1_IRQHandler"
          },
          {
            "number": 42,
            "name": "SPI2_SPI3_IRQHandler"
          },
          {
            "number": 43,
            "name": "USART1_IRQHandler"
          },
          {
            "number": 44,
            "name": "USART2_IRQHandler"
          },
          {
            "number": 45,
            "name": "USART3_USART4_USART5_USART6_LPUART1_IRQHandler"
          }
        ]
      }
    }
  }
}